
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	a8 3a 05 20 c5 18 01 00 d7 b7 02 00 99 18 01 00     .:. ............
    8010:	99 18 01 00 99 18 01 00 99 18 01 00 99 18 01 00     ................
	...
    802c:	29 12 01 00 99 18 01 00 00 00 00 00 c5 11 01 00     )...............
    803c:	99 18 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8050:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8060:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8070:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8080:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8090:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    80a0:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    80b0:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    80c0:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    80d0:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    80e0:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    80f0:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8100:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8110:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8120:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8130:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8140:	b5 12 01 00 b5 12 01 00 b5 12 01 00 b5 12 01 00     ................
    8150:	b5 12 01 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2iz>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    88fc:	d215      	bcs.n	892a <__aeabi_d2iz+0x36>
    88fe:	d511      	bpl.n	8924 <__aeabi_d2iz+0x30>
    8900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8908:	d912      	bls.n	8930 <__aeabi_d2iz+0x3c>
    890a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    890e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    891a:	fa23 f002 	lsr.w	r0, r3, r2
    891e:	bf18      	it	ne
    8920:	4240      	negne	r0, r0
    8922:	4770      	bx	lr
    8924:	f04f 0000 	mov.w	r0, #0
    8928:	4770      	bx	lr
    892a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    892e:	d105      	bne.n	893c <__aeabi_d2iz+0x48>
    8930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    8934:	bf08      	it	eq
    8936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    893a:	4770      	bx	lr
    893c:	f04f 0000 	mov.w	r0, #0
    8940:	4770      	bx	lr
    8942:	bf00      	nop

00008944 <__aeabi_d2f>:
    8944:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    894c:	bf24      	itt	cs
    894e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8956:	d90d      	bls.n	8974 <__aeabi_d2f+0x30>
    8958:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    895c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8964:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    896c:	bf08      	it	eq
    896e:	f020 0001 	biceq.w	r0, r0, #1
    8972:	4770      	bx	lr
    8974:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8978:	d121      	bne.n	89be <__aeabi_d2f+0x7a>
    897a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    897e:	bfbc      	itt	lt
    8980:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8984:	4770      	bxlt	lr
    8986:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    898a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    898e:	f1c2 0218 	rsb	r2, r2, #24
    8992:	f1c2 0c20 	rsb	ip, r2, #32
    8996:	fa10 f30c 	lsls.w	r3, r0, ip
    899a:	fa20 f002 	lsr.w	r0, r0, r2
    899e:	bf18      	it	ne
    89a0:	f040 0001 	orrne.w	r0, r0, #1
    89a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    89a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    89ac:	fa03 fc0c 	lsl.w	ip, r3, ip
    89b0:	ea40 000c 	orr.w	r0, r0, ip
    89b4:	fa23 f302 	lsr.w	r3, r3, r2
    89b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    89bc:	e7cc      	b.n	8958 <__aeabi_d2f+0x14>
    89be:	ea7f 5362 	mvns.w	r3, r2, asr #21
    89c2:	d107      	bne.n	89d4 <__aeabi_d2f+0x90>
    89c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    89c8:	bf1e      	ittt	ne
    89ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    89ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    89d2:	4770      	bxne	lr
    89d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    89d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    89dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop

000089e4 <__aeabi_frsub>:
    89e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    89e8:	e002      	b.n	89f0 <__addsf3>
    89ea:	bf00      	nop

000089ec <__aeabi_fsub>:
    89ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089f0 <__addsf3>:
    89f0:	0042      	lsls	r2, r0, #1
    89f2:	bf1f      	itttt	ne
    89f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89f8:	ea92 0f03 	teqne	r2, r3
    89fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8a00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a04:	d06a      	beq.n	8adc <__addsf3+0xec>
    8a06:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8a0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8a0e:	bfc1      	itttt	gt
    8a10:	18d2      	addgt	r2, r2, r3
    8a12:	4041      	eorgt	r1, r0
    8a14:	4048      	eorgt	r0, r1
    8a16:	4041      	eorgt	r1, r0
    8a18:	bfb8      	it	lt
    8a1a:	425b      	neglt	r3, r3
    8a1c:	2b19      	cmp	r3, #25
    8a1e:	bf88      	it	hi
    8a20:	4770      	bxhi	lr
    8a22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8a26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8a2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8a2e:	bf18      	it	ne
    8a30:	4240      	negne	r0, r0
    8a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8a36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8a3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8a3e:	bf18      	it	ne
    8a40:	4249      	negne	r1, r1
    8a42:	ea92 0f03 	teq	r2, r3
    8a46:	d03f      	beq.n	8ac8 <__addsf3+0xd8>
    8a48:	f1a2 0201 	sub.w	r2, r2, #1
    8a4c:	fa41 fc03 	asr.w	ip, r1, r3
    8a50:	eb10 000c 	adds.w	r0, r0, ip
    8a54:	f1c3 0320 	rsb	r3, r3, #32
    8a58:	fa01 f103 	lsl.w	r1, r1, r3
    8a5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a60:	d502      	bpl.n	8a68 <__addsf3+0x78>
    8a62:	4249      	negs	r1, r1
    8a64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a6c:	d313      	bcc.n	8a96 <__addsf3+0xa6>
    8a6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a72:	d306      	bcc.n	8a82 <__addsf3+0x92>
    8a74:	0840      	lsrs	r0, r0, #1
    8a76:	ea4f 0131 	mov.w	r1, r1, rrx
    8a7a:	f102 0201 	add.w	r2, r2, #1
    8a7e:	2afe      	cmp	r2, #254	; 0xfe
    8a80:	d251      	bcs.n	8b26 <__addsf3+0x136>
    8a82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a8a:	bf08      	it	eq
    8a8c:	f020 0001 	biceq.w	r0, r0, #1
    8a90:	ea40 0003 	orr.w	r0, r0, r3
    8a94:	4770      	bx	lr
    8a96:	0049      	lsls	r1, r1, #1
    8a98:	eb40 0000 	adc.w	r0, r0, r0
    8a9c:	3a01      	subs	r2, #1
    8a9e:	bf28      	it	cs
    8aa0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8aa4:	d2ed      	bcs.n	8a82 <__addsf3+0x92>
    8aa6:	fab0 fc80 	clz	ip, r0
    8aaa:	f1ac 0c08 	sub.w	ip, ip, #8
    8aae:	ebb2 020c 	subs.w	r2, r2, ip
    8ab2:	fa00 f00c 	lsl.w	r0, r0, ip
    8ab6:	bfaa      	itet	ge
    8ab8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8abc:	4252      	neglt	r2, r2
    8abe:	4318      	orrge	r0, r3
    8ac0:	bfbc      	itt	lt
    8ac2:	40d0      	lsrlt	r0, r2
    8ac4:	4318      	orrlt	r0, r3
    8ac6:	4770      	bx	lr
    8ac8:	f092 0f00 	teq	r2, #0
    8acc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8ad0:	bf06      	itte	eq
    8ad2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8ad6:	3201      	addeq	r2, #1
    8ad8:	3b01      	subne	r3, #1
    8ada:	e7b5      	b.n	8a48 <__addsf3+0x58>
    8adc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8ae0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8ae4:	bf18      	it	ne
    8ae6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8aea:	d021      	beq.n	8b30 <__addsf3+0x140>
    8aec:	ea92 0f03 	teq	r2, r3
    8af0:	d004      	beq.n	8afc <__addsf3+0x10c>
    8af2:	f092 0f00 	teq	r2, #0
    8af6:	bf08      	it	eq
    8af8:	4608      	moveq	r0, r1
    8afa:	4770      	bx	lr
    8afc:	ea90 0f01 	teq	r0, r1
    8b00:	bf1c      	itt	ne
    8b02:	2000      	movne	r0, #0
    8b04:	4770      	bxne	lr
    8b06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8b0a:	d104      	bne.n	8b16 <__addsf3+0x126>
    8b0c:	0040      	lsls	r0, r0, #1
    8b0e:	bf28      	it	cs
    8b10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8b14:	4770      	bx	lr
    8b16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8b1a:	bf3c      	itt	cc
    8b1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8b20:	4770      	bxcc	lr
    8b22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8b26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8b2e:	4770      	bx	lr
    8b30:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8b34:	bf16      	itet	ne
    8b36:	4608      	movne	r0, r1
    8b38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8b3c:	4601      	movne	r1, r0
    8b3e:	0242      	lsls	r2, r0, #9
    8b40:	bf06      	itte	eq
    8b42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8b46:	ea90 0f01 	teqeq	r0, r1
    8b4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8b4e:	4770      	bx	lr

00008b50 <__aeabi_ui2f>:
    8b50:	f04f 0300 	mov.w	r3, #0
    8b54:	e004      	b.n	8b60 <__aeabi_i2f+0x8>
    8b56:	bf00      	nop

00008b58 <__aeabi_i2f>:
    8b58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b5c:	bf48      	it	mi
    8b5e:	4240      	negmi	r0, r0
    8b60:	ea5f 0c00 	movs.w	ip, r0
    8b64:	bf08      	it	eq
    8b66:	4770      	bxeq	lr
    8b68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b6c:	4601      	mov	r1, r0
    8b6e:	f04f 0000 	mov.w	r0, #0
    8b72:	e01c      	b.n	8bae <__aeabi_l2f+0x2a>

00008b74 <__aeabi_ul2f>:
    8b74:	ea50 0201 	orrs.w	r2, r0, r1
    8b78:	bf08      	it	eq
    8b7a:	4770      	bxeq	lr
    8b7c:	f04f 0300 	mov.w	r3, #0
    8b80:	e00a      	b.n	8b98 <__aeabi_l2f+0x14>
    8b82:	bf00      	nop

00008b84 <__aeabi_l2f>:
    8b84:	ea50 0201 	orrs.w	r2, r0, r1
    8b88:	bf08      	it	eq
    8b8a:	4770      	bxeq	lr
    8b8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b90:	d502      	bpl.n	8b98 <__aeabi_l2f+0x14>
    8b92:	4240      	negs	r0, r0
    8b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b98:	ea5f 0c01 	movs.w	ip, r1
    8b9c:	bf02      	ittt	eq
    8b9e:	4684      	moveq	ip, r0
    8ba0:	4601      	moveq	r1, r0
    8ba2:	2000      	moveq	r0, #0
    8ba4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8ba8:	bf08      	it	eq
    8baa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8bae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8bb2:	fabc f28c 	clz	r2, ip
    8bb6:	3a08      	subs	r2, #8
    8bb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8bbc:	db10      	blt.n	8be0 <__aeabi_l2f+0x5c>
    8bbe:	fa01 fc02 	lsl.w	ip, r1, r2
    8bc2:	4463      	add	r3, ip
    8bc4:	fa00 fc02 	lsl.w	ip, r0, r2
    8bc8:	f1c2 0220 	rsb	r2, r2, #32
    8bcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8bd0:	fa20 f202 	lsr.w	r2, r0, r2
    8bd4:	eb43 0002 	adc.w	r0, r3, r2
    8bd8:	bf08      	it	eq
    8bda:	f020 0001 	biceq.w	r0, r0, #1
    8bde:	4770      	bx	lr
    8be0:	f102 0220 	add.w	r2, r2, #32
    8be4:	fa01 fc02 	lsl.w	ip, r1, r2
    8be8:	f1c2 0220 	rsb	r2, r2, #32
    8bec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8bf0:	fa21 f202 	lsr.w	r2, r1, r2
    8bf4:	eb43 0002 	adc.w	r0, r3, r2
    8bf8:	bf08      	it	eq
    8bfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bfe:	4770      	bx	lr

00008c00 <__aeabi_fmul>:
    8c00:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8c04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8c08:	bf1e      	ittt	ne
    8c0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8c0e:	ea92 0f0c 	teqne	r2, ip
    8c12:	ea93 0f0c 	teqne	r3, ip
    8c16:	d06f      	beq.n	8cf8 <__aeabi_fmul+0xf8>
    8c18:	441a      	add	r2, r3
    8c1a:	ea80 0c01 	eor.w	ip, r0, r1
    8c1e:	0240      	lsls	r0, r0, #9
    8c20:	bf18      	it	ne
    8c22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8c26:	d01e      	beq.n	8c66 <__aeabi_fmul+0x66>
    8c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8c2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8c30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8c34:	fba0 3101 	umull	r3, r1, r0, r1
    8c38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8c3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8c40:	bf3e      	ittt	cc
    8c42:	0049      	lslcc	r1, r1, #1
    8c44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8c48:	005b      	lslcc	r3, r3, #1
    8c4a:	ea40 0001 	orr.w	r0, r0, r1
    8c4e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c52:	2afd      	cmp	r2, #253	; 0xfd
    8c54:	d81d      	bhi.n	8c92 <__aeabi_fmul+0x92>
    8c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c5e:	bf08      	it	eq
    8c60:	f020 0001 	biceq.w	r0, r0, #1
    8c64:	4770      	bx	lr
    8c66:	f090 0f00 	teq	r0, #0
    8c6a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c6e:	bf08      	it	eq
    8c70:	0249      	lsleq	r1, r1, #9
    8c72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c7a:	3a7f      	subs	r2, #127	; 0x7f
    8c7c:	bfc2      	ittt	gt
    8c7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c86:	4770      	bxgt	lr
    8c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c8c:	f04f 0300 	mov.w	r3, #0
    8c90:	3a01      	subs	r2, #1
    8c92:	dc5d      	bgt.n	8d50 <__aeabi_fmul+0x150>
    8c94:	f112 0f19 	cmn.w	r2, #25
    8c98:	bfdc      	itt	le
    8c9a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c9e:	4770      	bxle	lr
    8ca0:	f1c2 0200 	rsb	r2, r2, #0
    8ca4:	0041      	lsls	r1, r0, #1
    8ca6:	fa21 f102 	lsr.w	r1, r1, r2
    8caa:	f1c2 0220 	rsb	r2, r2, #32
    8cae:	fa00 fc02 	lsl.w	ip, r0, r2
    8cb2:	ea5f 0031 	movs.w	r0, r1, rrx
    8cb6:	f140 0000 	adc.w	r0, r0, #0
    8cba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8cbe:	bf08      	it	eq
    8cc0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8cc4:	4770      	bx	lr
    8cc6:	f092 0f00 	teq	r2, #0
    8cca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8cce:	bf02      	ittt	eq
    8cd0:	0040      	lsleq	r0, r0, #1
    8cd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8cd6:	3a01      	subeq	r2, #1
    8cd8:	d0f9      	beq.n	8cce <__aeabi_fmul+0xce>
    8cda:	ea40 000c 	orr.w	r0, r0, ip
    8cde:	f093 0f00 	teq	r3, #0
    8ce2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8ce6:	bf02      	ittt	eq
    8ce8:	0049      	lsleq	r1, r1, #1
    8cea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8cee:	3b01      	subeq	r3, #1
    8cf0:	d0f9      	beq.n	8ce6 <__aeabi_fmul+0xe6>
    8cf2:	ea41 010c 	orr.w	r1, r1, ip
    8cf6:	e78f      	b.n	8c18 <__aeabi_fmul+0x18>
    8cf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cfc:	ea92 0f0c 	teq	r2, ip
    8d00:	bf18      	it	ne
    8d02:	ea93 0f0c 	teqne	r3, ip
    8d06:	d00a      	beq.n	8d1e <__aeabi_fmul+0x11e>
    8d08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8d0c:	bf18      	it	ne
    8d0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8d12:	d1d8      	bne.n	8cc6 <__aeabi_fmul+0xc6>
    8d14:	ea80 0001 	eor.w	r0, r0, r1
    8d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d1c:	4770      	bx	lr
    8d1e:	f090 0f00 	teq	r0, #0
    8d22:	bf17      	itett	ne
    8d24:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8d28:	4608      	moveq	r0, r1
    8d2a:	f091 0f00 	teqne	r1, #0
    8d2e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8d32:	d014      	beq.n	8d5e <__aeabi_fmul+0x15e>
    8d34:	ea92 0f0c 	teq	r2, ip
    8d38:	d101      	bne.n	8d3e <__aeabi_fmul+0x13e>
    8d3a:	0242      	lsls	r2, r0, #9
    8d3c:	d10f      	bne.n	8d5e <__aeabi_fmul+0x15e>
    8d3e:	ea93 0f0c 	teq	r3, ip
    8d42:	d103      	bne.n	8d4c <__aeabi_fmul+0x14c>
    8d44:	024b      	lsls	r3, r1, #9
    8d46:	bf18      	it	ne
    8d48:	4608      	movne	r0, r1
    8d4a:	d108      	bne.n	8d5e <__aeabi_fmul+0x15e>
    8d4c:	ea80 0001 	eor.w	r0, r0, r1
    8d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d5c:	4770      	bx	lr
    8d5e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d62:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d66:	4770      	bx	lr

00008d68 <__aeabi_fdiv>:
    8d68:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d70:	bf1e      	ittt	ne
    8d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d76:	ea92 0f0c 	teqne	r2, ip
    8d7a:	ea93 0f0c 	teqne	r3, ip
    8d7e:	d069      	beq.n	8e54 <__aeabi_fdiv+0xec>
    8d80:	eba2 0203 	sub.w	r2, r2, r3
    8d84:	ea80 0c01 	eor.w	ip, r0, r1
    8d88:	0249      	lsls	r1, r1, #9
    8d8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d8e:	d037      	beq.n	8e00 <__aeabi_fdiv+0x98>
    8d90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8da0:	428b      	cmp	r3, r1
    8da2:	bf38      	it	cc
    8da4:	005b      	lslcc	r3, r3, #1
    8da6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8daa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8dae:	428b      	cmp	r3, r1
    8db0:	bf24      	itt	cs
    8db2:	1a5b      	subcs	r3, r3, r1
    8db4:	ea40 000c 	orrcs.w	r0, r0, ip
    8db8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8dbc:	bf24      	itt	cs
    8dbe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8dc2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8dc6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8dca:	bf24      	itt	cs
    8dcc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8dd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8dd4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8dd8:	bf24      	itt	cs
    8dda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8dde:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8de2:	011b      	lsls	r3, r3, #4
    8de4:	bf18      	it	ne
    8de6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8dea:	d1e0      	bne.n	8dae <__aeabi_fdiv+0x46>
    8dec:	2afd      	cmp	r2, #253	; 0xfd
    8dee:	f63f af50 	bhi.w	8c92 <__aeabi_fmul+0x92>
    8df2:	428b      	cmp	r3, r1
    8df4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8df8:	bf08      	it	eq
    8dfa:	f020 0001 	biceq.w	r0, r0, #1
    8dfe:	4770      	bx	lr
    8e00:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8e04:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8e08:	327f      	adds	r2, #127	; 0x7f
    8e0a:	bfc2      	ittt	gt
    8e0c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8e10:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8e14:	4770      	bxgt	lr
    8e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8e1a:	f04f 0300 	mov.w	r3, #0
    8e1e:	3a01      	subs	r2, #1
    8e20:	e737      	b.n	8c92 <__aeabi_fmul+0x92>
    8e22:	f092 0f00 	teq	r2, #0
    8e26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8e2a:	bf02      	ittt	eq
    8e2c:	0040      	lsleq	r0, r0, #1
    8e2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8e32:	3a01      	subeq	r2, #1
    8e34:	d0f9      	beq.n	8e2a <__aeabi_fdiv+0xc2>
    8e36:	ea40 000c 	orr.w	r0, r0, ip
    8e3a:	f093 0f00 	teq	r3, #0
    8e3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8e42:	bf02      	ittt	eq
    8e44:	0049      	lsleq	r1, r1, #1
    8e46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8e4a:	3b01      	subeq	r3, #1
    8e4c:	d0f9      	beq.n	8e42 <__aeabi_fdiv+0xda>
    8e4e:	ea41 010c 	orr.w	r1, r1, ip
    8e52:	e795      	b.n	8d80 <__aeabi_fdiv+0x18>
    8e54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e58:	ea92 0f0c 	teq	r2, ip
    8e5c:	d108      	bne.n	8e70 <__aeabi_fdiv+0x108>
    8e5e:	0242      	lsls	r2, r0, #9
    8e60:	f47f af7d 	bne.w	8d5e <__aeabi_fmul+0x15e>
    8e64:	ea93 0f0c 	teq	r3, ip
    8e68:	f47f af70 	bne.w	8d4c <__aeabi_fmul+0x14c>
    8e6c:	4608      	mov	r0, r1
    8e6e:	e776      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e70:	ea93 0f0c 	teq	r3, ip
    8e74:	d104      	bne.n	8e80 <__aeabi_fdiv+0x118>
    8e76:	024b      	lsls	r3, r1, #9
    8e78:	f43f af4c 	beq.w	8d14 <__aeabi_fmul+0x114>
    8e7c:	4608      	mov	r0, r1
    8e7e:	e76e      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e84:	bf18      	it	ne
    8e86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e8a:	d1ca      	bne.n	8e22 <__aeabi_fdiv+0xba>
    8e8c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e90:	f47f af5c 	bne.w	8d4c <__aeabi_fmul+0x14c>
    8e94:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e98:	f47f af3c 	bne.w	8d14 <__aeabi_fmul+0x114>
    8e9c:	e75f      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e9e:	bf00      	nop

00008ea0 <__aeabi_ldivmod>:
    8ea0:	b97b      	cbnz	r3, 8ec2 <__aeabi_ldivmod+0x22>
    8ea2:	b972      	cbnz	r2, 8ec2 <__aeabi_ldivmod+0x22>
    8ea4:	2900      	cmp	r1, #0
    8ea6:	bfbe      	ittt	lt
    8ea8:	2000      	movlt	r0, #0
    8eaa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8eae:	e006      	blt.n	8ebe <__aeabi_ldivmod+0x1e>
    8eb0:	bf08      	it	eq
    8eb2:	2800      	cmpeq	r0, #0
    8eb4:	bf1c      	itt	ne
    8eb6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8eba:	f04f 30ff 	movne.w	r0, #4294967295
    8ebe:	f000 b875 	b.w	8fac <__aeabi_idiv0>
    8ec2:	f1ad 0c08 	sub.w	ip, sp, #8
    8ec6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8eca:	2900      	cmp	r1, #0
    8ecc:	db09      	blt.n	8ee2 <__aeabi_ldivmod+0x42>
    8ece:	2b00      	cmp	r3, #0
    8ed0:	db1a      	blt.n	8f08 <__aeabi_ldivmod+0x68>
    8ed2:	f000 f942 	bl	915a <__udivmoddi4>
    8ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
    8eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ede:	b004      	add	sp, #16
    8ee0:	4770      	bx	lr
    8ee2:	4240      	negs	r0, r0
    8ee4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ee8:	2b00      	cmp	r3, #0
    8eea:	db1b      	blt.n	8f24 <__aeabi_ldivmod+0x84>
    8eec:	f000 f935 	bl	915a <__udivmoddi4>
    8ef0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ef8:	b004      	add	sp, #16
    8efa:	4240      	negs	r0, r0
    8efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f00:	4252      	negs	r2, r2
    8f02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f06:	4770      	bx	lr
    8f08:	4252      	negs	r2, r2
    8f0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f0e:	f000 f924 	bl	915a <__udivmoddi4>
    8f12:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1a:	b004      	add	sp, #16
    8f1c:	4240      	negs	r0, r0
    8f1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f22:	4770      	bx	lr
    8f24:	4252      	negs	r2, r2
    8f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f2a:	f000 f916 	bl	915a <__udivmoddi4>
    8f2e:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f36:	b004      	add	sp, #16
    8f38:	4252      	negs	r2, r2
    8f3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f3e:	4770      	bx	lr

00008f40 <__aeabi_uldivmod>:
    8f40:	b953      	cbnz	r3, 8f58 <__aeabi_uldivmod+0x18>
    8f42:	b94a      	cbnz	r2, 8f58 <__aeabi_uldivmod+0x18>
    8f44:	2900      	cmp	r1, #0
    8f46:	bf08      	it	eq
    8f48:	2800      	cmpeq	r0, #0
    8f4a:	bf1c      	itt	ne
    8f4c:	f04f 31ff 	movne.w	r1, #4294967295
    8f50:	f04f 30ff 	movne.w	r0, #4294967295
    8f54:	f000 b82a 	b.w	8fac <__aeabi_idiv0>
    8f58:	f1ad 0c08 	sub.w	ip, sp, #8
    8f5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f60:	f000 f8fb 	bl	915a <__udivmoddi4>
    8f64:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f6c:	b004      	add	sp, #16
    8f6e:	4770      	bx	lr

00008f70 <__aeabi_d2ulz>:
    8f70:	b5d0      	push	{r4, r6, r7, lr}
    8f72:	2200      	movs	r2, #0
    8f74:	4b0b      	ldr	r3, [pc, #44]	; (8fa4 <__aeabi_d2ulz+0x34>)
    8f76:	4606      	mov	r6, r0
    8f78:	460f      	mov	r7, r1
    8f7a:	f7ff faa9 	bl	84d0 <__aeabi_dmul>
    8f7e:	f000 f89f 	bl	90c0 <__aeabi_d2uiz>
    8f82:	4604      	mov	r4, r0
    8f84:	f7ff fa2a 	bl	83dc <__aeabi_ui2d>
    8f88:	2200      	movs	r2, #0
    8f8a:	4b07      	ldr	r3, [pc, #28]	; (8fa8 <__aeabi_d2ulz+0x38>)
    8f8c:	f7ff faa0 	bl	84d0 <__aeabi_dmul>
    8f90:	4602      	mov	r2, r0
    8f92:	460b      	mov	r3, r1
    8f94:	4630      	mov	r0, r6
    8f96:	4639      	mov	r1, r7
    8f98:	f7ff f8e2 	bl	8160 <__aeabi_dsub>
    8f9c:	f000 f890 	bl	90c0 <__aeabi_d2uiz>
    8fa0:	4621      	mov	r1, r4
    8fa2:	bdd0      	pop	{r4, r6, r7, pc}
    8fa4:	3df00000 	.word	0x3df00000
    8fa8:	41f00000 	.word	0x41f00000

00008fac <__aeabi_idiv0>:
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__gedf2>:
    8fb0:	f04f 3cff 	mov.w	ip, #4294967295
    8fb4:	e006      	b.n	8fc4 <__cmpdf2+0x4>
    8fb6:	bf00      	nop

00008fb8 <__ledf2>:
    8fb8:	f04f 0c01 	mov.w	ip, #1
    8fbc:	e002      	b.n	8fc4 <__cmpdf2+0x4>
    8fbe:	bf00      	nop

00008fc0 <__cmpdf2>:
    8fc0:	f04f 0c01 	mov.w	ip, #1
    8fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
    8fc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8fcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8fd4:	bf18      	it	ne
    8fd6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8fda:	d01b      	beq.n	9014 <__cmpdf2+0x54>
    8fdc:	b001      	add	sp, #4
    8fde:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8fe2:	bf0c      	ite	eq
    8fe4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8fe8:	ea91 0f03 	teqne	r1, r3
    8fec:	bf02      	ittt	eq
    8fee:	ea90 0f02 	teqeq	r0, r2
    8ff2:	2000      	moveq	r0, #0
    8ff4:	4770      	bxeq	lr
    8ff6:	f110 0f00 	cmn.w	r0, #0
    8ffa:	ea91 0f03 	teq	r1, r3
    8ffe:	bf58      	it	pl
    9000:	4299      	cmppl	r1, r3
    9002:	bf08      	it	eq
    9004:	4290      	cmpeq	r0, r2
    9006:	bf2c      	ite	cs
    9008:	17d8      	asrcs	r0, r3, #31
    900a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    900e:	f040 0001 	orr.w	r0, r0, #1
    9012:	4770      	bx	lr
    9014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    901c:	d102      	bne.n	9024 <__cmpdf2+0x64>
    901e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9022:	d107      	bne.n	9034 <__cmpdf2+0x74>
    9024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    902c:	d1d6      	bne.n	8fdc <__cmpdf2+0x1c>
    902e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9032:	d0d3      	beq.n	8fdc <__cmpdf2+0x1c>
    9034:	f85d 0b04 	ldr.w	r0, [sp], #4
    9038:	4770      	bx	lr
    903a:	bf00      	nop

0000903c <__aeabi_cdrcmple>:
    903c:	4684      	mov	ip, r0
    903e:	4610      	mov	r0, r2
    9040:	4662      	mov	r2, ip
    9042:	468c      	mov	ip, r1
    9044:	4619      	mov	r1, r3
    9046:	4663      	mov	r3, ip
    9048:	e000      	b.n	904c <__aeabi_cdcmpeq>
    904a:	bf00      	nop

0000904c <__aeabi_cdcmpeq>:
    904c:	b501      	push	{r0, lr}
    904e:	f7ff ffb7 	bl	8fc0 <__cmpdf2>
    9052:	2800      	cmp	r0, #0
    9054:	bf48      	it	mi
    9056:	f110 0f00 	cmnmi.w	r0, #0
    905a:	bd01      	pop	{r0, pc}

0000905c <__aeabi_dcmpeq>:
    905c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9060:	f7ff fff4 	bl	904c <__aeabi_cdcmpeq>
    9064:	bf0c      	ite	eq
    9066:	2001      	moveq	r0, #1
    9068:	2000      	movne	r0, #0
    906a:	f85d fb08 	ldr.w	pc, [sp], #8
    906e:	bf00      	nop

00009070 <__aeabi_dcmplt>:
    9070:	f84d ed08 	str.w	lr, [sp, #-8]!
    9074:	f7ff ffea 	bl	904c <__aeabi_cdcmpeq>
    9078:	bf34      	ite	cc
    907a:	2001      	movcc	r0, #1
    907c:	2000      	movcs	r0, #0
    907e:	f85d fb08 	ldr.w	pc, [sp], #8
    9082:	bf00      	nop

00009084 <__aeabi_dcmple>:
    9084:	f84d ed08 	str.w	lr, [sp, #-8]!
    9088:	f7ff ffe0 	bl	904c <__aeabi_cdcmpeq>
    908c:	bf94      	ite	ls
    908e:	2001      	movls	r0, #1
    9090:	2000      	movhi	r0, #0
    9092:	f85d fb08 	ldr.w	pc, [sp], #8
    9096:	bf00      	nop

00009098 <__aeabi_dcmpge>:
    9098:	f84d ed08 	str.w	lr, [sp, #-8]!
    909c:	f7ff ffce 	bl	903c <__aeabi_cdrcmple>
    90a0:	bf94      	ite	ls
    90a2:	2001      	movls	r0, #1
    90a4:	2000      	movhi	r0, #0
    90a6:	f85d fb08 	ldr.w	pc, [sp], #8
    90aa:	bf00      	nop

000090ac <__aeabi_dcmpgt>:
    90ac:	f84d ed08 	str.w	lr, [sp, #-8]!
    90b0:	f7ff ffc4 	bl	903c <__aeabi_cdrcmple>
    90b4:	bf34      	ite	cc
    90b6:	2001      	movcc	r0, #1
    90b8:	2000      	movcs	r0, #0
    90ba:	f85d fb08 	ldr.w	pc, [sp], #8
    90be:	bf00      	nop

000090c0 <__aeabi_d2uiz>:
    90c0:	004a      	lsls	r2, r1, #1
    90c2:	d211      	bcs.n	90e8 <__aeabi_d2uiz+0x28>
    90c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    90c8:	d211      	bcs.n	90ee <__aeabi_d2uiz+0x2e>
    90ca:	d50d      	bpl.n	90e8 <__aeabi_d2uiz+0x28>
    90cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    90d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    90d4:	d40e      	bmi.n	90f4 <__aeabi_d2uiz+0x34>
    90d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    90da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    90de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    90e2:	fa23 f002 	lsr.w	r0, r3, r2
    90e6:	4770      	bx	lr
    90e8:	f04f 0000 	mov.w	r0, #0
    90ec:	4770      	bx	lr
    90ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    90f2:	d102      	bne.n	90fa <__aeabi_d2uiz+0x3a>
    90f4:	f04f 30ff 	mov.w	r0, #4294967295
    90f8:	4770      	bx	lr
    90fa:	f04f 0000 	mov.w	r0, #0
    90fe:	4770      	bx	lr

00009100 <__aeabi_dcmpun>:
    9100:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9104:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9108:	d102      	bne.n	9110 <__aeabi_dcmpun+0x10>
    910a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    910e:	d10a      	bne.n	9126 <__aeabi_dcmpun+0x26>
    9110:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9114:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9118:	d102      	bne.n	9120 <__aeabi_dcmpun+0x20>
    911a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    911e:	d102      	bne.n	9126 <__aeabi_dcmpun+0x26>
    9120:	f04f 0000 	mov.w	r0, #0
    9124:	4770      	bx	lr
    9126:	f04f 0001 	mov.w	r0, #1
    912a:	4770      	bx	lr

0000912c <__aeabi_d2lz>:
    912c:	b538      	push	{r3, r4, r5, lr}
    912e:	2200      	movs	r2, #0
    9130:	2300      	movs	r3, #0
    9132:	4604      	mov	r4, r0
    9134:	460d      	mov	r5, r1
    9136:	f7ff ff9b 	bl	9070 <__aeabi_dcmplt>
    913a:	b928      	cbnz	r0, 9148 <__aeabi_d2lz+0x1c>
    913c:	4620      	mov	r0, r4
    913e:	4629      	mov	r1, r5
    9140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9144:	f7ff bf14 	b.w	8f70 <__aeabi_d2ulz>
    9148:	4620      	mov	r0, r4
    914a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    914e:	f7ff ff0f 	bl	8f70 <__aeabi_d2ulz>
    9152:	4240      	negs	r0, r0
    9154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9158:	bd38      	pop	{r3, r4, r5, pc}

0000915a <__udivmoddi4>:
    915a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    915e:	4686      	mov	lr, r0
    9160:	468c      	mov	ip, r1
    9162:	4608      	mov	r0, r1
    9164:	9e08      	ldr	r6, [sp, #32]
    9166:	4615      	mov	r5, r2
    9168:	4674      	mov	r4, lr
    916a:	4619      	mov	r1, r3
    916c:	2b00      	cmp	r3, #0
    916e:	f040 80c1 	bne.w	92f4 <__udivmoddi4+0x19a>
    9172:	4285      	cmp	r5, r0
    9174:	fab2 f282 	clz	r2, r2
    9178:	d945      	bls.n	9206 <__udivmoddi4+0xac>
    917a:	b14a      	cbz	r2, 9190 <__udivmoddi4+0x36>
    917c:	f1c2 0320 	rsb	r3, r2, #32
    9180:	fa00 fc02 	lsl.w	ip, r0, r2
    9184:	4095      	lsls	r5, r2
    9186:	4094      	lsls	r4, r2
    9188:	fa2e f303 	lsr.w	r3, lr, r3
    918c:	ea43 0c0c 	orr.w	ip, r3, ip
    9190:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9194:	b2a8      	uxth	r0, r5
    9196:	0c23      	lsrs	r3, r4, #16
    9198:	fbbc f8fe 	udiv	r8, ip, lr
    919c:	fb0e cc18 	mls	ip, lr, r8, ip
    91a0:	fb08 f900 	mul.w	r9, r8, r0
    91a4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    91a8:	4599      	cmp	r9, r3
    91aa:	d928      	bls.n	91fe <__udivmoddi4+0xa4>
    91ac:	18eb      	adds	r3, r5, r3
    91ae:	f108 37ff 	add.w	r7, r8, #4294967295
    91b2:	d204      	bcs.n	91be <__udivmoddi4+0x64>
    91b4:	4599      	cmp	r9, r3
    91b6:	d902      	bls.n	91be <__udivmoddi4+0x64>
    91b8:	f1a8 0702 	sub.w	r7, r8, #2
    91bc:	442b      	add	r3, r5
    91be:	eba3 0309 	sub.w	r3, r3, r9
    91c2:	b2a4      	uxth	r4, r4
    91c4:	fbb3 fcfe 	udiv	ip, r3, lr
    91c8:	fb0e 331c 	mls	r3, lr, ip, r3
    91cc:	fb0c f000 	mul.w	r0, ip, r0
    91d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91d4:	42a0      	cmp	r0, r4
    91d6:	d914      	bls.n	9202 <__udivmoddi4+0xa8>
    91d8:	192c      	adds	r4, r5, r4
    91da:	f10c 33ff 	add.w	r3, ip, #4294967295
    91de:	d204      	bcs.n	91ea <__udivmoddi4+0x90>
    91e0:	42a0      	cmp	r0, r4
    91e2:	d902      	bls.n	91ea <__udivmoddi4+0x90>
    91e4:	f1ac 0302 	sub.w	r3, ip, #2
    91e8:	442c      	add	r4, r5
    91ea:	1a24      	subs	r4, r4, r0
    91ec:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    91f0:	b11e      	cbz	r6, 91fa <__udivmoddi4+0xa0>
    91f2:	40d4      	lsrs	r4, r2
    91f4:	2300      	movs	r3, #0
    91f6:	6034      	str	r4, [r6, #0]
    91f8:	6073      	str	r3, [r6, #4]
    91fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91fe:	4647      	mov	r7, r8
    9200:	e7dd      	b.n	91be <__udivmoddi4+0x64>
    9202:	4663      	mov	r3, ip
    9204:	e7f1      	b.n	91ea <__udivmoddi4+0x90>
    9206:	bb92      	cbnz	r2, 926e <__udivmoddi4+0x114>
    9208:	1b43      	subs	r3, r0, r5
    920a:	2101      	movs	r1, #1
    920c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9210:	b2af      	uxth	r7, r5
    9212:	0c20      	lsrs	r0, r4, #16
    9214:	fbb3 fcfe 	udiv	ip, r3, lr
    9218:	fb0e 331c 	mls	r3, lr, ip, r3
    921c:	fb0c f807 	mul.w	r8, ip, r7
    9220:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    9224:	4598      	cmp	r8, r3
    9226:	d961      	bls.n	92ec <__udivmoddi4+0x192>
    9228:	18eb      	adds	r3, r5, r3
    922a:	f10c 30ff 	add.w	r0, ip, #4294967295
    922e:	d204      	bcs.n	923a <__udivmoddi4+0xe0>
    9230:	4598      	cmp	r8, r3
    9232:	d902      	bls.n	923a <__udivmoddi4+0xe0>
    9234:	f1ac 0002 	sub.w	r0, ip, #2
    9238:	442b      	add	r3, r5
    923a:	eba3 0308 	sub.w	r3, r3, r8
    923e:	b2a4      	uxth	r4, r4
    9240:	fbb3 fcfe 	udiv	ip, r3, lr
    9244:	fb0e 331c 	mls	r3, lr, ip, r3
    9248:	fb0c f707 	mul.w	r7, ip, r7
    924c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9250:	42a7      	cmp	r7, r4
    9252:	d94d      	bls.n	92f0 <__udivmoddi4+0x196>
    9254:	192c      	adds	r4, r5, r4
    9256:	f10c 33ff 	add.w	r3, ip, #4294967295
    925a:	d204      	bcs.n	9266 <__udivmoddi4+0x10c>
    925c:	42a7      	cmp	r7, r4
    925e:	d902      	bls.n	9266 <__udivmoddi4+0x10c>
    9260:	f1ac 0302 	sub.w	r3, ip, #2
    9264:	442c      	add	r4, r5
    9266:	1be4      	subs	r4, r4, r7
    9268:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    926c:	e7c0      	b.n	91f0 <__udivmoddi4+0x96>
    926e:	f1c2 0320 	rsb	r3, r2, #32
    9272:	4095      	lsls	r5, r2
    9274:	4094      	lsls	r4, r2
    9276:	fa20 f103 	lsr.w	r1, r0, r3
    927a:	fa2e f303 	lsr.w	r3, lr, r3
    927e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9282:	4090      	lsls	r0, r2
    9284:	b2af      	uxth	r7, r5
    9286:	4303      	orrs	r3, r0
    9288:	fbb1 fcfe 	udiv	ip, r1, lr
    928c:	fb0e 101c 	mls	r0, lr, ip, r1
    9290:	0c19      	lsrs	r1, r3, #16
    9292:	fb0c f807 	mul.w	r8, ip, r7
    9296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    929a:	4588      	cmp	r8, r1
    929c:	d922      	bls.n	92e4 <__udivmoddi4+0x18a>
    929e:	1869      	adds	r1, r5, r1
    92a0:	f10c 30ff 	add.w	r0, ip, #4294967295
    92a4:	d204      	bcs.n	92b0 <__udivmoddi4+0x156>
    92a6:	4588      	cmp	r8, r1
    92a8:	d902      	bls.n	92b0 <__udivmoddi4+0x156>
    92aa:	f1ac 0002 	sub.w	r0, ip, #2
    92ae:	4429      	add	r1, r5
    92b0:	eba1 0108 	sub.w	r1, r1, r8
    92b4:	b29b      	uxth	r3, r3
    92b6:	fbb1 fcfe 	udiv	ip, r1, lr
    92ba:	fb0e 111c 	mls	r1, lr, ip, r1
    92be:	fb0c f707 	mul.w	r7, ip, r7
    92c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    92c6:	429f      	cmp	r7, r3
    92c8:	d90e      	bls.n	92e8 <__udivmoddi4+0x18e>
    92ca:	18eb      	adds	r3, r5, r3
    92cc:	f10c 31ff 	add.w	r1, ip, #4294967295
    92d0:	d204      	bcs.n	92dc <__udivmoddi4+0x182>
    92d2:	429f      	cmp	r7, r3
    92d4:	d902      	bls.n	92dc <__udivmoddi4+0x182>
    92d6:	f1ac 0102 	sub.w	r1, ip, #2
    92da:	442b      	add	r3, r5
    92dc:	1bdb      	subs	r3, r3, r7
    92de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    92e2:	e793      	b.n	920c <__udivmoddi4+0xb2>
    92e4:	4660      	mov	r0, ip
    92e6:	e7e3      	b.n	92b0 <__udivmoddi4+0x156>
    92e8:	4661      	mov	r1, ip
    92ea:	e7f7      	b.n	92dc <__udivmoddi4+0x182>
    92ec:	4660      	mov	r0, ip
    92ee:	e7a4      	b.n	923a <__udivmoddi4+0xe0>
    92f0:	4663      	mov	r3, ip
    92f2:	e7b8      	b.n	9266 <__udivmoddi4+0x10c>
    92f4:	4283      	cmp	r3, r0
    92f6:	d906      	bls.n	9306 <__udivmoddi4+0x1ac>
    92f8:	b916      	cbnz	r6, 9300 <__udivmoddi4+0x1a6>
    92fa:	2100      	movs	r1, #0
    92fc:	4608      	mov	r0, r1
    92fe:	e77c      	b.n	91fa <__udivmoddi4+0xa0>
    9300:	e9c6 e000 	strd	lr, r0, [r6]
    9304:	e7f9      	b.n	92fa <__udivmoddi4+0x1a0>
    9306:	fab3 f783 	clz	r7, r3
    930a:	b98f      	cbnz	r7, 9330 <__udivmoddi4+0x1d6>
    930c:	4283      	cmp	r3, r0
    930e:	d301      	bcc.n	9314 <__udivmoddi4+0x1ba>
    9310:	4572      	cmp	r2, lr
    9312:	d808      	bhi.n	9326 <__udivmoddi4+0x1cc>
    9314:	ebbe 0402 	subs.w	r4, lr, r2
    9318:	eb60 0303 	sbc.w	r3, r0, r3
    931c:	2001      	movs	r0, #1
    931e:	469c      	mov	ip, r3
    9320:	b91e      	cbnz	r6, 932a <__udivmoddi4+0x1d0>
    9322:	2100      	movs	r1, #0
    9324:	e769      	b.n	91fa <__udivmoddi4+0xa0>
    9326:	4638      	mov	r0, r7
    9328:	e7fa      	b.n	9320 <__udivmoddi4+0x1c6>
    932a:	e9c6 4c00 	strd	r4, ip, [r6]
    932e:	e7f8      	b.n	9322 <__udivmoddi4+0x1c8>
    9330:	f1c7 0c20 	rsb	ip, r7, #32
    9334:	40bb      	lsls	r3, r7
    9336:	fa0e f507 	lsl.w	r5, lr, r7
    933a:	fa22 f40c 	lsr.w	r4, r2, ip
    933e:	fa2e f10c 	lsr.w	r1, lr, ip
    9342:	40ba      	lsls	r2, r7
    9344:	431c      	orrs	r4, r3
    9346:	fa20 f30c 	lsr.w	r3, r0, ip
    934a:	40b8      	lsls	r0, r7
    934c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9350:	4301      	orrs	r1, r0
    9352:	fa1f fe84 	uxth.w	lr, r4
    9356:	fbb3 f8f9 	udiv	r8, r3, r9
    935a:	fb09 3018 	mls	r0, r9, r8, r3
    935e:	0c0b      	lsrs	r3, r1, #16
    9360:	fb08 fa0e 	mul.w	sl, r8, lr
    9364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9368:	459a      	cmp	sl, r3
    936a:	d940      	bls.n	93ee <__udivmoddi4+0x294>
    936c:	18e3      	adds	r3, r4, r3
    936e:	f108 30ff 	add.w	r0, r8, #4294967295
    9372:	d204      	bcs.n	937e <__udivmoddi4+0x224>
    9374:	459a      	cmp	sl, r3
    9376:	d902      	bls.n	937e <__udivmoddi4+0x224>
    9378:	f1a8 0002 	sub.w	r0, r8, #2
    937c:	4423      	add	r3, r4
    937e:	eba3 030a 	sub.w	r3, r3, sl
    9382:	b289      	uxth	r1, r1
    9384:	fbb3 f8f9 	udiv	r8, r3, r9
    9388:	fb09 3318 	mls	r3, r9, r8, r3
    938c:	fb08 fe0e 	mul.w	lr, r8, lr
    9390:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9394:	458e      	cmp	lr, r1
    9396:	d92c      	bls.n	93f2 <__udivmoddi4+0x298>
    9398:	1861      	adds	r1, r4, r1
    939a:	f108 33ff 	add.w	r3, r8, #4294967295
    939e:	d204      	bcs.n	93aa <__udivmoddi4+0x250>
    93a0:	458e      	cmp	lr, r1
    93a2:	d902      	bls.n	93aa <__udivmoddi4+0x250>
    93a4:	f1a8 0302 	sub.w	r3, r8, #2
    93a8:	4421      	add	r1, r4
    93aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    93ae:	eba1 010e 	sub.w	r1, r1, lr
    93b2:	fba0 9802 	umull	r9, r8, r0, r2
    93b6:	4541      	cmp	r1, r8
    93b8:	46ce      	mov	lr, r9
    93ba:	4643      	mov	r3, r8
    93bc:	d302      	bcc.n	93c4 <__udivmoddi4+0x26a>
    93be:	d106      	bne.n	93ce <__udivmoddi4+0x274>
    93c0:	454d      	cmp	r5, r9
    93c2:	d204      	bcs.n	93ce <__udivmoddi4+0x274>
    93c4:	3801      	subs	r0, #1
    93c6:	ebb9 0e02 	subs.w	lr, r9, r2
    93ca:	eb68 0304 	sbc.w	r3, r8, r4
    93ce:	2e00      	cmp	r6, #0
    93d0:	d0a7      	beq.n	9322 <__udivmoddi4+0x1c8>
    93d2:	ebb5 020e 	subs.w	r2, r5, lr
    93d6:	eb61 0103 	sbc.w	r1, r1, r3
    93da:	fa01 fc0c 	lsl.w	ip, r1, ip
    93de:	fa22 f307 	lsr.w	r3, r2, r7
    93e2:	40f9      	lsrs	r1, r7
    93e4:	ea4c 0303 	orr.w	r3, ip, r3
    93e8:	e9c6 3100 	strd	r3, r1, [r6]
    93ec:	e799      	b.n	9322 <__udivmoddi4+0x1c8>
    93ee:	4640      	mov	r0, r8
    93f0:	e7c5      	b.n	937e <__udivmoddi4+0x224>
    93f2:	4643      	mov	r3, r8
    93f4:	e7d9      	b.n	93aa <__udivmoddi4+0x250>

000093f6 <strcmp>:
    93f6:	f810 2b01 	ldrb.w	r2, [r0], #1
    93fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    93fe:	2a01      	cmp	r2, #1
    9400:	bf28      	it	cs
    9402:	429a      	cmpcs	r2, r3
    9404:	d0f7      	beq.n	93f6 <strcmp>
    9406:	1ad0      	subs	r0, r2, r3
    9408:	4770      	bx	lr

0000940a <strlen>:
    940a:	4603      	mov	r3, r0
    940c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9410:	2a00      	cmp	r2, #0
    9412:	d1fb      	bne.n	940c <strlen+0x2>
    9414:	1a18      	subs	r0, r3, r0
    9416:	3801      	subs	r0, #1
    9418:	4770      	bx	lr
    941a:	0000      	movs	r0, r0
    941c:	0000      	movs	r0, r0
	...

00009420 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9422:	460c      	mov	r4, r1
  //  +3V --- RESISTOR_SERIE_NTC ----AD--- NTC --- GND


  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9424:	f7fe ffea 	bl	83fc <__aeabi_i2d>
    9428:	a325      	add	r3, pc, #148	; (adr r3, 94c0 <ntc_temperature+0xa0>)
    942a:	e9d3 2300 	ldrd	r2, r3, [r3]
    942e:	f7ff f84f 	bl	84d0 <__aeabi_dmul>
    9432:	f7ff fa87 	bl	8944 <__aeabi_d2f>
    9436:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9438:	1e63      	subs	r3, r4, #1
    943a:	b2db      	uxtb	r3, r3
    943c:	2b02      	cmp	r3, #2
    943e:	bf96      	itet	ls
    9440:	4a27      	ldrls	r2, [pc, #156]	; (94e0 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9442:	2000      	movhi	r0, #0
    9444:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9448:	4629      	mov	r1, r5
    944a:	f7ff fbd9 	bl	8c00 <__aeabi_fmul>
    944e:	f7fe ffe7 	bl	8420 <__aeabi_f2d>
    9452:	4606      	mov	r6, r0
    9454:	4628      	mov	r0, r5
    9456:	460f      	mov	r7, r1
    9458:	f7fe ffe2 	bl	8420 <__aeabi_f2d>
    945c:	4602      	mov	r2, r0
    945e:	460b      	mov	r3, r1
    9460:	2000      	movs	r0, #0
    9462:	4920      	ldr	r1, [pc, #128]	; (94e4 <ntc_temperature+0xc4>)
    9464:	f7fe fe7c 	bl	8160 <__aeabi_dsub>
    9468:	4602      	mov	r2, r0
    946a:	460b      	mov	r3, r1
    946c:	4630      	mov	r0, r6
    946e:	4639      	mov	r1, r7
    9470:	f7ff f958 	bl	8724 <__aeabi_ddiv>
    9474:	f7ff fa66 	bl	8944 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    9478:	491b      	ldr	r1, [pc, #108]	; (94e8 <ntc_temperature+0xc8>)
    947a:	f7ff fc75 	bl	8d68 <__aeabi_fdiv>
    947e:	f7fe ffcf 	bl	8420 <__aeabi_f2d>
    9482:	f01d fb27 	bl	26ad4 <log>
    9486:	a310      	add	r3, pc, #64	; (adr r3, 94c8 <ntc_temperature+0xa8>)
    9488:	e9d3 2300 	ldrd	r2, r3, [r3]
    948c:	f7ff f94a 	bl	8724 <__aeabi_ddiv>
    9490:	a30f      	add	r3, pc, #60	; (adr r3, 94d0 <ntc_temperature+0xb0>)
    9492:	e9d3 2300 	ldrd	r2, r3, [r3]
    9496:	f7fe fe65 	bl	8164 <__adddf3>
    949a:	4602      	mov	r2, r0
    949c:	460b      	mov	r3, r1
    949e:	2000      	movs	r0, #0
    94a0:	4912      	ldr	r1, [pc, #72]	; (94ec <ntc_temperature+0xcc>)
    94a2:	f7ff f93f 	bl	8724 <__aeabi_ddiv>
    94a6:	f7ff fa4d 	bl	8944 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    94aa:	f7fe ffb9 	bl	8420 <__aeabi_f2d>
    94ae:	a30a      	add	r3, pc, #40	; (adr r3, 94d8 <ntc_temperature+0xb8>)
    94b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    94b4:	f7fe fe54 	bl	8160 <__aeabi_dsub>
    94b8:	f7ff fa44 	bl	8944 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    94bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94be:	bf00      	nop
    94c0:	3a66a002 	.word	0x3a66a002
    94c4:	3f2ccdb3 	.word	0x3f2ccdb3
    94c8:	00000000 	.word	0x00000000
    94cc:	40af0200 	.word	0x40af0200
    94d0:	dcb5db83 	.word	0xdcb5db83
    94d4:	3f6b79e1 	.word	0x3f6b79e1
    94d8:	66666666 	.word	0x66666666
    94dc:	40711266 	.word	0x40711266
    94e0:	00033304 	.word	0x00033304
    94e4:	40080000 	.word	0x40080000
    94e8:	461c4000 	.word	0x461c4000
    94ec:	3ff00000 	.word	0x3ff00000

000094f0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    94f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f2:	4d64      	ldr	r5, [pc, #400]	; (9684 <bt_init+0x194>)
{
    94f4:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f6:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    94fa:	6899      	ldr	r1, [r3, #8]
    94fc:	f011 0101 	ands.w	r1, r1, #1
    9500:	d11a      	bne.n	9538 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9502:	f640 4003 	movw	r0, #3075	; 0xc03
    9506:	aa05      	add	r2, sp, #20
    9508:	f010 fb9a 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
    950c:	4604      	mov	r4, r0
    950e:	2800      	cmp	r0, #0
    9510:	f040 80b5 	bne.w	967e <bt_init+0x18e>
		hci_reset_complete(rsp);
    9514:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9516:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	b95b      	cbnz	r3, 9534 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    951c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9520:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9524:	f002 0209 	and.w	r2, r2, #9
    9528:	e8d3 1fef 	ldaex	r1, [r3]
    952c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9530:	2c00      	cmp	r4, #0
    9532:	d1f9      	bne.n	9528 <bt_init+0x38>
		net_buf_unref(rsp);
    9534:	f016 ffb4 	bl	204a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9538:	2100      	movs	r1, #0
    953a:	f241 0003 	movw	r0, #4099	; 0x1003
    953e:	aa05      	add	r2, sp, #20
    9540:	f010 fb7e 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    9544:	4604      	mov	r4, r0
    9546:	2800      	cmp	r0, #0
    9548:	f040 8099 	bne.w	967e <bt_init+0x18e>
	read_local_features_complete(rsp);
    954c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    954e:	4e4e      	ldr	r6, [pc, #312]	; (9688 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    9550:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9552:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9556:	f8d2 1005 	ldr.w	r1, [r2, #5]
    955a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    955c:	4618      	mov	r0, r3
    955e:	f016 ff9f 	bl	204a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9562:	4621      	mov	r1, r4
    9564:	f241 0001 	movw	r0, #4097	; 0x1001
    9568:	aa05      	add	r2, sp, #20
    956a:	f010 fb69 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    956e:	4604      	mov	r4, r0
    9570:	2800      	cmp	r0, #0
    9572:	f040 8084 	bne.w	967e <bt_init+0x18e>
	read_local_ver_complete(rsp);
    9576:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    9578:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    957a:	785a      	ldrb	r2, [r3, #1]
    957c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9580:	885a      	ldrh	r2, [r3, #2]
    9582:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    9586:	791a      	ldrb	r2, [r3, #4]
    9588:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    958c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9590:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9594:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9598:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    959c:	f016 ff80 	bl	204a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    95a0:	4621      	mov	r1, r4
    95a2:	f241 0002 	movw	r0, #4098	; 0x1002
    95a6:	aa05      	add	r2, sp, #20
    95a8:	f010 fb4a 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    95ac:	4604      	mov	r4, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	d165      	bne.n	967e <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    95b2:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    95b4:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    95b6:	1c53      	adds	r3, r2, #1
    95b8:	3241      	adds	r2, #65	; 0x41
    95ba:	4634      	mov	r4, r6
    95bc:	6818      	ldr	r0, [r3, #0]
    95be:	6859      	ldr	r1, [r3, #4]
    95c0:	3308      	adds	r3, #8
    95c2:	c403      	stmia	r4!, {r0, r1}
    95c4:	4293      	cmp	r3, r2
    95c6:	4626      	mov	r6, r4
    95c8:	d1f7      	bne.n	95ba <bt_init+0xca>
	net_buf_unref(rsp);
    95ca:	4638      	mov	r0, r7
    95cc:	f016 ff68 	bl	204a0 <net_buf_unref>
		err = prng_init();
    95d0:	f012 f8b2 	bl	1b738 <prng_init>
		if (err) {
    95d4:	4604      	mov	r4, r0
    95d6:	2800      	cmp	r0, #0
    95d8:	d151      	bne.n	967e <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    95da:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    95de:	f013 0320 	ands.w	r3, r3, #32
    95e2:	d118      	bne.n	9616 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    95e4:	4a29      	ldr	r2, [pc, #164]	; (968c <bt_init+0x19c>)
    95e6:	492a      	ldr	r1, [pc, #168]	; (9690 <bt_init+0x1a0>)
    95e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    95ec:	9300      	str	r3, [sp, #0]
    95ee:	2202      	movs	r2, #2
    95f0:	f023 fe31 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    95f4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    95f8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    95fc:	d14c      	bne.n	9698 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    95fe:	4a25      	ldr	r2, [pc, #148]	; (9694 <bt_init+0x1a4>)
    9600:	4618      	mov	r0, r3
    9602:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9606:	4922      	ldr	r1, [pc, #136]	; (9690 <bt_init+0x1a0>)
    9608:	2201      	movs	r2, #1
    960a:	9300      	str	r3, [sp, #0]
    960c:	f023 fe23 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9610:	f06f 0412 	mvn.w	r4, #18
    9614:	e033      	b.n	967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9616:	2107      	movs	r1, #7
    9618:	f640 4033 	movw	r0, #3123	; 0xc33
    961c:	f010 fad6 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
    9620:	4606      	mov	r6, r0
    9622:	2800      	cmp	r0, #0
    9624:	f000 8140 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9628:	2107      	movs	r1, #7
    962a:	300c      	adds	r0, #12
    962c:	f025 fe71 	bl	2f312 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9630:	2345      	movs	r3, #69	; 0x45
    9632:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9634:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9636:	f8c0 4002 	str.w	r4, [r0, #2]
    963a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    963c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    963e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9640:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9642:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9644:	4631      	mov	r1, r6
    9646:	f640 4033 	movw	r0, #3123	; 0xc33
    964a:	f010 faf9 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    964e:	4604      	mov	r4, r0
    9650:	b9a8      	cbnz	r0, 967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    9652:	2101      	movs	r1, #1
    9654:	f640 4031 	movw	r0, #3121	; 0xc31
    9658:	f010 fab8 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
    965c:	4606      	mov	r6, r0
    965e:	2800      	cmp	r0, #0
    9660:	f000 8122 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    9664:	2101      	movs	r1, #1
    9666:	300c      	adds	r0, #12
    9668:	f025 fe62 	bl	2f330 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    966c:	4622      	mov	r2, r4
    966e:	4631      	mov	r1, r6
    9670:	f640 4031 	movw	r0, #3121	; 0xc31
    9674:	f010 fae4 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    9678:	4604      	mov	r4, r0
    967a:	2800      	cmp	r0, #0
    967c:	d0ba      	beq.n	95f4 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    967e:	4620      	mov	r0, r4
    9680:	b007      	add	sp, #28
    9682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9684:	20008000 	.word	0x20008000
    9688:	20008070 	.word	0x20008070
    968c:	00036a03 	.word	0x00036a03
    9690:	00032ef0 	.word	0x00032ef0
    9694:	00036a31 	.word	0x00036a31
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9698:	2100      	movs	r1, #0
    969a:	f242 0003 	movw	r0, #8195	; 0x2003
    969e:	aa05      	add	r2, sp, #20
    96a0:	f010 face 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    96a4:	4604      	mov	r4, r0
    96a6:	2800      	cmp	r0, #0
    96a8:	d1e9      	bne.n	967e <bt_init+0x18e>
	read_le_features_complete(rsp);
    96aa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96ac:	4ebe      	ldr	r6, [pc, #760]	; (99a8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    96ae:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96b0:	f8d2 0001 	ldr.w	r0, [r2, #1]
    96b4:	f8d2 1005 	ldr.w	r1, [r2, #5]
    96b8:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    96ba:	4618      	mov	r0, r3
    96bc:	f016 fef0 	bl	204a0 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    96c0:	4621      	mov	r1, r4
    96c2:	f242 0002 	movw	r0, #8194	; 0x2002
    96c6:	aa05      	add	r2, sp, #20
    96c8:	f010 faba 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
    96cc:	4604      	mov	r4, r0
    96ce:	2800      	cmp	r0, #0
    96d0:	d1d5      	bne.n	967e <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    96d2:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    96d4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    96d6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    96da:	b291      	uxth	r1, r2
    96dc:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    96e0:	b129      	cbz	r1, 96ee <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    96e2:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    96e4:	4611      	mov	r1, r2
    96e6:	f106 0028 	add.w	r0, r6, #40	; 0x28
    96ea:	f027 fbc1 	bl	30e70 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    96ee:	4620      	mov	r0, r4
    96f0:	f016 fed6 	bl	204a0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    96f4:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    96f8:	f016 0620 	ands.w	r6, r6, #32
    96fc:	d118      	bne.n	9730 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    96fe:	2102      	movs	r1, #2
    9700:	f640 406d 	movw	r0, #3181	; 0xc6d
    9704:	f010 fa62 	bl	19bcc <bt_hci_cmd_create>
		if (!buf) {
    9708:	4604      	mov	r4, r0
    970a:	2800      	cmp	r0, #0
    970c:	f000 80cc 	beq.w	98a8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9710:	2102      	movs	r1, #2
    9712:	300c      	adds	r0, #12
    9714:	f025 fdfd 	bl	2f312 <net_buf_simple_add>
		cp_le->le = 0x01;
    9718:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    971a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    971c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    971e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9720:	4632      	mov	r2, r6
    9722:	f640 406d 	movw	r0, #3181	; 0xc6d
    9726:	f010 fa8b 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
    972a:	4604      	mov	r4, r0
    972c:	2800      	cmp	r0, #0
    972e:	d1a6      	bne.n	967e <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9730:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9734:	071f      	lsls	r7, r3, #28
    9736:	d512      	bpl.n	975e <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9738:	2100      	movs	r1, #0
    973a:	f242 001c 	movw	r0, #8220	; 0x201c
    973e:	aa05      	add	r2, sp, #20
    9740:	f010 fa7e 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
    9744:	4604      	mov	r4, r0
    9746:	2800      	cmp	r0, #0
    9748:	d199      	bne.n	967e <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    974a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    974c:	68c3      	ldr	r3, [r0, #12]
    974e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    9752:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9756:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    975a:	f016 fea1 	bl	204a0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    975e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9762:	069e      	lsls	r6, r3, #26
    9764:	d524      	bpl.n	97b0 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9766:	f10d 0112 	add.w	r1, sp, #18
    976a:	a804      	add	r0, sp, #16
    976c:	f010 fade 	bl	19d2c <hci_le_read_max_data_len>
		if (err) {
    9770:	4604      	mov	r4, r0
    9772:	2800      	cmp	r0, #0
    9774:	d183      	bne.n	967e <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9776:	2104      	movs	r1, #4
    9778:	f242 0024 	movw	r0, #8228	; 0x2024
    977c:	f010 fa26 	bl	19bcc <bt_hci_cmd_create>
		if (!buf) {
    9780:	4606      	mov	r6, r0
    9782:	2800      	cmp	r0, #0
    9784:	f000 8090 	beq.w	98a8 <bt_init+0x3b8>
    9788:	2104      	movs	r1, #4
    978a:	300c      	adds	r0, #12
    978c:	f025 fdc1 	bl	2f312 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9790:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9794:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9796:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9798:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    979c:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    979e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    97a0:	f242 0024 	movw	r0, #8228	; 0x2024
    97a4:	f010 fa4c 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
    97a8:	4604      	mov	r4, r0
    97aa:	2800      	cmp	r0, #0
    97ac:	f47f af67 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    97b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    97b4:	065c      	lsls	r4, r3, #25
    97b6:	d510      	bpl.n	97da <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    97b8:	2100      	movs	r1, #0
    97ba:	f242 002a 	movw	r0, #8234	; 0x202a
    97be:	aa05      	add	r2, sp, #20
    97c0:	f010 fa3e 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
    97c4:	4604      	mov	r4, r0
    97c6:	2800      	cmp	r0, #0
    97c8:	f47f af59 	bne.w	967e <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    97cc:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    97ce:	68c3      	ldr	r3, [r0, #12]
    97d0:	785b      	ldrb	r3, [r3, #1]
    97d2:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    97d6:	f016 fe63 	bl	204a0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    97da:	2108      	movs	r1, #8
    97dc:	f242 0001 	movw	r0, #8193	; 0x2001
    97e0:	f010 f9f4 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
    97e4:	4604      	mov	r4, r0
    97e6:	2800      	cmp	r0, #0
    97e8:	d05e      	beq.n	98a8 <bt_init+0x3b8>
    97ea:	2108      	movs	r1, #8
    97ec:	300c      	adds	r0, #12
    97ee:	f025 fd90 	bl	2f312 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    97f2:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    97f6:	f240 2302 	movw	r3, #514	; 0x202
    97fa:	f011 0f40 	tst.w	r1, #64	; 0x40
    97fe:	bf08      	it	eq
    9800:	2303      	moveq	r3, #3
    9802:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9804:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9806:	bf4c      	ite	mi
    9808:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    980c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9810:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9812:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9816:	bf48      	it	mi
    9818:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    981c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9820:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9824:	bf18      	it	ne
    9826:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    982a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    982e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9830:	bf48      	it	mi
    9832:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9836:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9838:	bf08      	it	eq
    983a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    983e:	2100      	movs	r1, #0
    9840:	f023 fd20 	bl	2d284 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9844:	4621      	mov	r1, r4
    9846:	2200      	movs	r2, #0
    9848:	f242 0001 	movw	r0, #8193	; 0x2001
    984c:	f010 f9f8 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    9850:	4604      	mov	r4, r0
    9852:	2800      	cmp	r0, #0
    9854:	f47f af13 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9858:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    985c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9860:	069e      	lsls	r6, r3, #26
    9862:	d424      	bmi.n	98ae <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    9864:	b9c9      	cbnz	r1, 989a <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9866:	f241 0005 	movw	r0, #4101	; 0x1005
    986a:	aa05      	add	r2, sp, #20
    986c:	f010 f9e8 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    9870:	4604      	mov	r4, r0
    9872:	2800      	cmp	r0, #0
    9874:	f47f af03 	bne.w	967e <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    9878:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    987c:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    987e:	b94b      	cbnz	r3, 9894 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    9880:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9882:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9886:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    988a:	889a      	ldrh	r2, [r3, #4]
    988c:	4847      	ldr	r0, [pc, #284]	; (99ac <bt_init+0x4bc>)
    988e:	4611      	mov	r1, r2
    9890:	f027 faee 	bl	30e70 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9894:	4620      	mov	r0, r4
    9896:	f016 fe03 	bl	204a0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    989a:	2108      	movs	r1, #8
    989c:	f640 4001 	movw	r0, #3073	; 0xc01
    98a0:	f010 f994 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
    98a4:	4604      	mov	r4, r0
    98a6:	b980      	cbnz	r0, 98ca <bt_init+0x3da>
		return -ENOBUFS;
    98a8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    98ac:	e6e7      	b.n	967e <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    98ae:	2900      	cmp	r1, #0
    98b0:	d1f3      	bne.n	989a <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    98b2:	4b3f      	ldr	r3, [pc, #252]	; (99b0 <bt_init+0x4c0>)
    98b4:	2201      	movs	r2, #1
    98b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
    98ba:	493e      	ldr	r1, [pc, #248]	; (99b4 <bt_init+0x4c4>)
    98bc:	4603      	mov	r3, r0
    98be:	9000      	str	r0, [sp, #0]
    98c0:	f023 fcc9 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    98c4:	f06f 0404 	mvn.w	r4, #4
    98c8:	e6d9      	b.n	967e <bt_init+0x18e>
    98ca:	2108      	movs	r1, #8
    98cc:	300c      	adds	r0, #12
    98ce:	f025 fd20 	bl	2f312 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    98d2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    98d6:	4602      	mov	r2, r0
    98d8:	07d9      	lsls	r1, r3, #31
    98da:	d41c      	bmi.n	9916 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    98dc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    98e0:	4835      	ldr	r0, [pc, #212]	; (99b8 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    98e2:	f023 fccf 	bl	2d284 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    98e6:	4621      	mov	r1, r4
    98e8:	2200      	movs	r2, #0
    98ea:	f640 4001 	movw	r0, #3073	; 0xc01
    98ee:	f010 f9a7 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    98f2:	4604      	mov	r4, r0
    98f4:	2800      	cmp	r0, #0
    98f6:	f47f aec2 	bne.w	967e <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    98fa:	4601      	mov	r1, r0
    98fc:	aa05      	add	r2, sp, #20
    98fe:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9902:	f010 f99d 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    9906:	4606      	mov	r6, r0
    9908:	b148      	cbz	r0, 991e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    990a:	4b2c      	ldr	r3, [pc, #176]	; (99bc <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    990c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9910:	9400      	str	r4, [sp, #0]
    9912:	4623      	mov	r3, r4
    9914:	e013      	b.n	993e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9916:	a122      	add	r1, pc, #136	; (adr r1, 99a0 <bt_init+0x4b0>)
    9918:	e9d1 0100 	ldrd	r0, r1, [r1]
    991c:	e7e1      	b.n	98e2 <bt_init+0x3f2>
	net_buf_unref(rsp);
    991e:	9805      	ldr	r0, [sp, #20]
    9920:	f016 fdbe 	bl	204a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9924:	4631      	mov	r1, r6
    9926:	f64f 4002 	movw	r0, #64514	; 0xfc02
    992a:	aa05      	add	r2, sp, #20
    992c:	f010 f988 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
    9930:	4604      	mov	r4, r0
    9932:	b1c0      	cbz	r0, 9966 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9934:	4b22      	ldr	r3, [pc, #136]	; (99c0 <bt_init+0x4d0>)
    9936:	9600      	str	r6, [sp, #0]
    9938:	e9cd 6301 	strd	r6, r3, [sp, #4]
    993c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    993e:	2202      	movs	r2, #2
    9940:	4618      	mov	r0, r3
    9942:	491c      	ldr	r1, [pc, #112]	; (99b4 <bt_init+0x4c4>)
    9944:	f023 fc87 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9948:	f011 fba2 	bl	1b090 <bt_id_init>
	if (err) {
    994c:	4604      	mov	r4, r0
    994e:	2800      	cmp	r0, #0
    9950:	f47f ae95 	bne.w	967e <bt_init+0x18e>
		err = bt_conn_init();
    9954:	f012 feca 	bl	1c6ec <bt_conn_init>
		if (err) {
    9958:	4604      	mov	r4, r0
    995a:	2800      	cmp	r0, #0
    995c:	f47f ae8f 	bne.w	967e <bt_init+0x18e>
	bt_finalize_init();
    9960:	f010 ff62 	bl	1a828 <bt_finalize_init>
	return 0;
    9964:	e68b      	b.n	967e <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    9966:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9968:	68c3      	ldr	r3, [r0, #12]
    996a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    996e:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    9972:	f016 fd95 	bl	204a0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9976:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    997a:	075b      	lsls	r3, r3, #29
    997c:	d5e4      	bpl.n	9948 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    997e:	4621      	mov	r1, r4
    9980:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9984:	aa05      	add	r2, sp, #20
    9986:	f010 f95b 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
    998a:	b108      	cbz	r0, 9990 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    998c:	4b0d      	ldr	r3, [pc, #52]	; (99c4 <bt_init+0x4d4>)
    998e:	e7bd      	b.n	990c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    9990:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9992:	68c3      	ldr	r3, [r0, #12]
    9994:	785b      	ldrb	r3, [r3, #1]
    9996:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    999a:	f016 fd81 	bl	204a0 <net_buf_unref>
    999e:	e7d3      	b.n	9948 <bt_init+0x458>
    99a0:	02008890 	.word	0x02008890
    99a4:	20008000 	.word	0x20008000
    99a8:	200080d0 	.word	0x200080d0
    99ac:	20008100 	.word	0x20008100
    99b0:	00036a55 	.word	0x00036a55
    99b4:	00032ef0 	.word	0x00032ef0
    99b8:	02008810 	.word	0x02008810
    99bc:	00036a78 	.word	0x00036a78
    99c0:	00036a9c 	.word	0x00036a9c
    99c4:	00036ac5 	.word	0x00036ac5

000099c8 <floor>:
    99c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
    99d0:	4602      	mov	r2, r0
    99d2:	460b      	mov	r3, r1
    99d4:	460c      	mov	r4, r1
    99d6:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    99da:	4605      	mov	r5, r0
    99dc:	4680      	mov	r8, r0
    99de:	2e13      	cmp	r6, #19
    99e0:	dc36      	bgt.n	9a50 <floor+0x88>
    99e2:	2e00      	cmp	r6, #0
    99e4:	da17      	bge.n	9a16 <floor+0x4e>
    99e6:	a334      	add	r3, pc, #208	; (adr r3, 9ab8 <floor+0xf0>)
    99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ec:	f7fe fbba 	bl	8164 <__adddf3>
    99f0:	2200      	movs	r2, #0
    99f2:	2300      	movs	r3, #0
    99f4:	f7ff fb5a 	bl	90ac <__aeabi_dcmpgt>
    99f8:	b150      	cbz	r0, 9a10 <floor+0x48>
    99fa:	2c00      	cmp	r4, #0
    99fc:	da58      	bge.n	9ab0 <floor+0xe8>
    99fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    9a02:	432c      	orrs	r4, r5
    9a04:	2500      	movs	r5, #0
    9a06:	42ac      	cmp	r4, r5
    9a08:	4c2d      	ldr	r4, [pc, #180]	; (9ac0 <floor+0xf8>)
    9a0a:	bf08      	it	eq
    9a0c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    9a10:	4623      	mov	r3, r4
    9a12:	462a      	mov	r2, r5
    9a14:	e025      	b.n	9a62 <floor+0x9a>
    9a16:	4f2b      	ldr	r7, [pc, #172]	; (9ac4 <floor+0xfc>)
    9a18:	4137      	asrs	r7, r6
    9a1a:	ea01 0c07 	and.w	ip, r1, r7
    9a1e:	ea5c 0c00 	orrs.w	ip, ip, r0
    9a22:	d01e      	beq.n	9a62 <floor+0x9a>
    9a24:	a324      	add	r3, pc, #144	; (adr r3, 9ab8 <floor+0xf0>)
    9a26:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a2a:	f7fe fb9b 	bl	8164 <__adddf3>
    9a2e:	2200      	movs	r2, #0
    9a30:	2300      	movs	r3, #0
    9a32:	f7ff fb3b 	bl	90ac <__aeabi_dcmpgt>
    9a36:	2800      	cmp	r0, #0
    9a38:	d0ea      	beq.n	9a10 <floor+0x48>
    9a3a:	2c00      	cmp	r4, #0
    9a3c:	f04f 0500 	mov.w	r5, #0
    9a40:	bfbe      	ittt	lt
    9a42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    9a46:	4133      	asrlt	r3, r6
    9a48:	18e4      	addlt	r4, r4, r3
    9a4a:	ea24 0407 	bic.w	r4, r4, r7
    9a4e:	e7df      	b.n	9a10 <floor+0x48>
    9a50:	2e33      	cmp	r6, #51	; 0x33
    9a52:	dd0a      	ble.n	9a6a <floor+0xa2>
    9a54:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    9a58:	d103      	bne.n	9a62 <floor+0x9a>
    9a5a:	f7fe fb83 	bl	8164 <__adddf3>
    9a5e:	4602      	mov	r2, r0
    9a60:	460b      	mov	r3, r1
    9a62:	4610      	mov	r0, r2
    9a64:	4619      	mov	r1, r3
    9a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a6a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    9a6e:	f04f 3cff 	mov.w	ip, #4294967295
    9a72:	fa2c f707 	lsr.w	r7, ip, r7
    9a76:	4207      	tst	r7, r0
    9a78:	d0f3      	beq.n	9a62 <floor+0x9a>
    9a7a:	a30f      	add	r3, pc, #60	; (adr r3, 9ab8 <floor+0xf0>)
    9a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a80:	f7fe fb70 	bl	8164 <__adddf3>
    9a84:	2200      	movs	r2, #0
    9a86:	2300      	movs	r3, #0
    9a88:	f7ff fb10 	bl	90ac <__aeabi_dcmpgt>
    9a8c:	2800      	cmp	r0, #0
    9a8e:	d0bf      	beq.n	9a10 <floor+0x48>
    9a90:	2c00      	cmp	r4, #0
    9a92:	da0a      	bge.n	9aaa <floor+0xe2>
    9a94:	2e14      	cmp	r6, #20
    9a96:	d101      	bne.n	9a9c <floor+0xd4>
    9a98:	3401      	adds	r4, #1
    9a9a:	e006      	b.n	9aaa <floor+0xe2>
    9a9c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    9aa0:	2301      	movs	r3, #1
    9aa2:	40b3      	lsls	r3, r6
    9aa4:	441d      	add	r5, r3
    9aa6:	4545      	cmp	r5, r8
    9aa8:	d3f6      	bcc.n	9a98 <floor+0xd0>
    9aaa:	ea25 0507 	bic.w	r5, r5, r7
    9aae:	e7af      	b.n	9a10 <floor+0x48>
    9ab0:	2500      	movs	r5, #0
    9ab2:	462c      	mov	r4, r5
    9ab4:	e7ac      	b.n	9a10 <floor+0x48>
    9ab6:	bf00      	nop
    9ab8:	8800759c 	.word	0x8800759c
    9abc:	7e37e43c 	.word	0x7e37e43c
    9ac0:	bff00000 	.word	0xbff00000
    9ac4:	000fffff 	.word	0x000fffff

00009ac8 <__ieee754_log>:
    9ac8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    9acc:	4602      	mov	r2, r0
    9ace:	460b      	mov	r3, r1
    9ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ad4:	460d      	mov	r5, r1
    9ad6:	b087      	sub	sp, #28
    9ad8:	da24      	bge.n	9b24 <__ieee754_log+0x5c>
    9ada:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    9ade:	4304      	orrs	r4, r0
    9ae0:	d108      	bne.n	9af4 <__ieee754_log+0x2c>
    9ae2:	2200      	movs	r2, #0
    9ae4:	2300      	movs	r3, #0
    9ae6:	2000      	movs	r0, #0
    9ae8:	49c9      	ldr	r1, [pc, #804]	; (9e10 <__ieee754_log+0x348>)
    9aea:	f7fe fe1b 	bl	8724 <__aeabi_ddiv>
    9aee:	b007      	add	sp, #28
    9af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9af4:	2900      	cmp	r1, #0
    9af6:	da04      	bge.n	9b02 <__ieee754_log+0x3a>
    9af8:	f7fe fb32 	bl	8160 <__aeabi_dsub>
    9afc:	2200      	movs	r2, #0
    9afe:	2300      	movs	r3, #0
    9b00:	e7f3      	b.n	9aea <__ieee754_log+0x22>
    9b02:	2200      	movs	r2, #0
    9b04:	4bc3      	ldr	r3, [pc, #780]	; (9e14 <__ieee754_log+0x34c>)
    9b06:	f7fe fce3 	bl	84d0 <__aeabi_dmul>
    9b0a:	460b      	mov	r3, r1
    9b0c:	460d      	mov	r5, r1
    9b0e:	4602      	mov	r2, r0
    9b10:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9b14:	48c0      	ldr	r0, [pc, #768]	; (9e18 <__ieee754_log+0x350>)
    9b16:	4285      	cmp	r5, r0
    9b18:	dd06      	ble.n	9b28 <__ieee754_log+0x60>
    9b1a:	4610      	mov	r0, r2
    9b1c:	4619      	mov	r1, r3
    9b1e:	f7fe fb21 	bl	8164 <__adddf3>
    9b22:	e7e4      	b.n	9aee <__ieee754_log+0x26>
    9b24:	2100      	movs	r1, #0
    9b26:	e7f5      	b.n	9b14 <__ieee754_log+0x4c>
    9b28:	152c      	asrs	r4, r5, #20
    9b2a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    9b2e:	4610      	mov	r0, r2
    9b30:	2200      	movs	r2, #0
    9b32:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9b36:	440c      	add	r4, r1
    9b38:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    9b3c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9b40:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9b44:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9b48:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    9b4c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    9b50:	ea41 0305 	orr.w	r3, r1, r5
    9b54:	4619      	mov	r1, r3
    9b56:	4bb1      	ldr	r3, [pc, #708]	; (9e1c <__ieee754_log+0x354>)
    9b58:	f7fe fb02 	bl	8160 <__aeabi_dsub>
    9b5c:	1cab      	adds	r3, r5, #2
    9b5e:	4682      	mov	sl, r0
    9b60:	468b      	mov	fp, r1
    9b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9b66:	2200      	movs	r2, #0
    9b68:	2b02      	cmp	r3, #2
    9b6a:	dc53      	bgt.n	9c14 <__ieee754_log+0x14c>
    9b6c:	2300      	movs	r3, #0
    9b6e:	f7ff fa75 	bl	905c <__aeabi_dcmpeq>
    9b72:	b1d0      	cbz	r0, 9baa <__ieee754_log+0xe2>
    9b74:	2c00      	cmp	r4, #0
    9b76:	f000 8120 	beq.w	9dba <__ieee754_log+0x2f2>
    9b7a:	4620      	mov	r0, r4
    9b7c:	f7fe fc3e 	bl	83fc <__aeabi_i2d>
    9b80:	4606      	mov	r6, r0
    9b82:	460f      	mov	r7, r1
    9b84:	a38e      	add	r3, pc, #568	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9b86:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b8a:	f7fe fca1 	bl	84d0 <__aeabi_dmul>
    9b8e:	4604      	mov	r4, r0
    9b90:	460d      	mov	r5, r1
    9b92:	4630      	mov	r0, r6
    9b94:	4639      	mov	r1, r7
    9b96:	a38c      	add	r3, pc, #560	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9b98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b9c:	f7fe fc98 	bl	84d0 <__aeabi_dmul>
    9ba0:	4602      	mov	r2, r0
    9ba2:	460b      	mov	r3, r1
    9ba4:	4620      	mov	r0, r4
    9ba6:	4629      	mov	r1, r5
    9ba8:	e7b9      	b.n	9b1e <__ieee754_log+0x56>
    9baa:	a389      	add	r3, pc, #548	; (adr r3, 9dd0 <__ieee754_log+0x308>)
    9bac:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bb0:	4650      	mov	r0, sl
    9bb2:	4659      	mov	r1, fp
    9bb4:	f7fe fc8c 	bl	84d0 <__aeabi_dmul>
    9bb8:	4602      	mov	r2, r0
    9bba:	460b      	mov	r3, r1
    9bbc:	2000      	movs	r0, #0
    9bbe:	4998      	ldr	r1, [pc, #608]	; (9e20 <__ieee754_log+0x358>)
    9bc0:	f7fe face 	bl	8160 <__aeabi_dsub>
    9bc4:	4606      	mov	r6, r0
    9bc6:	460f      	mov	r7, r1
    9bc8:	4652      	mov	r2, sl
    9bca:	465b      	mov	r3, fp
    9bcc:	4650      	mov	r0, sl
    9bce:	4659      	mov	r1, fp
    9bd0:	f7fe fc7e 	bl	84d0 <__aeabi_dmul>
    9bd4:	4602      	mov	r2, r0
    9bd6:	460b      	mov	r3, r1
    9bd8:	4630      	mov	r0, r6
    9bda:	4639      	mov	r1, r7
    9bdc:	f7fe fc78 	bl	84d0 <__aeabi_dmul>
    9be0:	4606      	mov	r6, r0
    9be2:	460f      	mov	r7, r1
    9be4:	b914      	cbnz	r4, 9bec <__ieee754_log+0x124>
    9be6:	4632      	mov	r2, r6
    9be8:	463b      	mov	r3, r7
    9bea:	e0a0      	b.n	9d2e <__ieee754_log+0x266>
    9bec:	4620      	mov	r0, r4
    9bee:	f7fe fc05 	bl	83fc <__aeabi_i2d>
    9bf2:	4680      	mov	r8, r0
    9bf4:	4689      	mov	r9, r1
    9bf6:	a372      	add	r3, pc, #456	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bfc:	f7fe fc68 	bl	84d0 <__aeabi_dmul>
    9c00:	4604      	mov	r4, r0
    9c02:	460d      	mov	r5, r1
    9c04:	4640      	mov	r0, r8
    9c06:	4649      	mov	r1, r9
    9c08:	a36f      	add	r3, pc, #444	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c0e:	f7fe fc5f 	bl	84d0 <__aeabi_dmul>
    9c12:	e0a5      	b.n	9d60 <__ieee754_log+0x298>
    9c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9c18:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9c1c:	f7fe faa2 	bl	8164 <__adddf3>
    9c20:	4602      	mov	r2, r0
    9c22:	460b      	mov	r3, r1
    9c24:	4650      	mov	r0, sl
    9c26:	4659      	mov	r1, fp
    9c28:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9c2c:	f7fe fd7a 	bl	8724 <__aeabi_ddiv>
    9c30:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9c34:	3551      	adds	r5, #81	; 0x51
    9c36:	e9cd 0100 	strd	r0, r1, [sp]
    9c3a:	4620      	mov	r0, r4
    9c3c:	4335      	orrs	r5, r6
    9c3e:	f7fe fbdd 	bl	83fc <__aeabi_i2d>
    9c42:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9c4a:	4610      	mov	r0, r2
    9c4c:	4619      	mov	r1, r3
    9c4e:	f7fe fc3f 	bl	84d0 <__aeabi_dmul>
    9c52:	4602      	mov	r2, r0
    9c54:	460b      	mov	r3, r1
    9c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9c5a:	f7fe fc39 	bl	84d0 <__aeabi_dmul>
    9c5e:	4680      	mov	r8, r0
    9c60:	4689      	mov	r9, r1
    9c62:	a35d      	add	r3, pc, #372	; (adr r3, 9dd8 <__ieee754_log+0x310>)
    9c64:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c68:	f7fe fc32 	bl	84d0 <__aeabi_dmul>
    9c6c:	a35c      	add	r3, pc, #368	; (adr r3, 9de0 <__ieee754_log+0x318>)
    9c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c72:	f7fe fa77 	bl	8164 <__adddf3>
    9c76:	4642      	mov	r2, r8
    9c78:	464b      	mov	r3, r9
    9c7a:	f7fe fc29 	bl	84d0 <__aeabi_dmul>
    9c7e:	a35a      	add	r3, pc, #360	; (adr r3, 9de8 <__ieee754_log+0x320>)
    9c80:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c84:	f7fe fa6e 	bl	8164 <__adddf3>
    9c88:	4642      	mov	r2, r8
    9c8a:	464b      	mov	r3, r9
    9c8c:	f7fe fc20 	bl	84d0 <__aeabi_dmul>
    9c90:	a357      	add	r3, pc, #348	; (adr r3, 9df0 <__ieee754_log+0x328>)
    9c92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c96:	f7fe fa65 	bl	8164 <__adddf3>
    9c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9c9e:	f7fe fc17 	bl	84d0 <__aeabi_dmul>
    9ca2:	a355      	add	r3, pc, #340	; (adr r3, 9df8 <__ieee754_log+0x330>)
    9ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9cac:	4640      	mov	r0, r8
    9cae:	4649      	mov	r1, r9
    9cb0:	f7fe fc0e 	bl	84d0 <__aeabi_dmul>
    9cb4:	a352      	add	r3, pc, #328	; (adr r3, 9e00 <__ieee754_log+0x338>)
    9cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cba:	f7fe fa53 	bl	8164 <__adddf3>
    9cbe:	4642      	mov	r2, r8
    9cc0:	464b      	mov	r3, r9
    9cc2:	f7fe fc05 	bl	84d0 <__aeabi_dmul>
    9cc6:	a350      	add	r3, pc, #320	; (adr r3, 9e08 <__ieee754_log+0x340>)
    9cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ccc:	f7fe fa4a 	bl	8164 <__adddf3>
    9cd0:	4642      	mov	r2, r8
    9cd2:	464b      	mov	r3, r9
    9cd4:	f7fe fbfc 	bl	84d0 <__aeabi_dmul>
    9cd8:	4602      	mov	r2, r0
    9cda:	460b      	mov	r3, r1
    9cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9ce0:	f7fe fa40 	bl	8164 <__adddf3>
    9ce4:	2d00      	cmp	r5, #0
    9ce6:	4680      	mov	r8, r0
    9ce8:	4689      	mov	r9, r1
    9cea:	dd48      	ble.n	9d7e <__ieee754_log+0x2b6>
    9cec:	2200      	movs	r2, #0
    9cee:	4b4c      	ldr	r3, [pc, #304]	; (9e20 <__ieee754_log+0x358>)
    9cf0:	4650      	mov	r0, sl
    9cf2:	4659      	mov	r1, fp
    9cf4:	f7fe fbec 	bl	84d0 <__aeabi_dmul>
    9cf8:	4652      	mov	r2, sl
    9cfa:	465b      	mov	r3, fp
    9cfc:	f7fe fbe8 	bl	84d0 <__aeabi_dmul>
    9d00:	4602      	mov	r2, r0
    9d02:	460b      	mov	r3, r1
    9d04:	4606      	mov	r6, r0
    9d06:	460f      	mov	r7, r1
    9d08:	4640      	mov	r0, r8
    9d0a:	4649      	mov	r1, r9
    9d0c:	f7fe fa2a 	bl	8164 <__adddf3>
    9d10:	e9dd 2300 	ldrd	r2, r3, [sp]
    9d14:	f7fe fbdc 	bl	84d0 <__aeabi_dmul>
    9d18:	4680      	mov	r8, r0
    9d1a:	4689      	mov	r9, r1
    9d1c:	b964      	cbnz	r4, 9d38 <__ieee754_log+0x270>
    9d1e:	4602      	mov	r2, r0
    9d20:	460b      	mov	r3, r1
    9d22:	4630      	mov	r0, r6
    9d24:	4639      	mov	r1, r7
    9d26:	f7fe fa1b 	bl	8160 <__aeabi_dsub>
    9d2a:	4602      	mov	r2, r0
    9d2c:	460b      	mov	r3, r1
    9d2e:	4650      	mov	r0, sl
    9d30:	4659      	mov	r1, fp
    9d32:	f7fe fa15 	bl	8160 <__aeabi_dsub>
    9d36:	e6da      	b.n	9aee <__ieee754_log+0x26>
    9d38:	a321      	add	r3, pc, #132	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d42:	f7fe fbc5 	bl	84d0 <__aeabi_dmul>
    9d46:	4604      	mov	r4, r0
    9d48:	460d      	mov	r5, r1
    9d4a:	a31f      	add	r3, pc, #124	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d54:	f7fe fbbc 	bl	84d0 <__aeabi_dmul>
    9d58:	4642      	mov	r2, r8
    9d5a:	464b      	mov	r3, r9
    9d5c:	f7fe fa02 	bl	8164 <__adddf3>
    9d60:	4602      	mov	r2, r0
    9d62:	460b      	mov	r3, r1
    9d64:	4630      	mov	r0, r6
    9d66:	4639      	mov	r1, r7
    9d68:	f7fe f9fa 	bl	8160 <__aeabi_dsub>
    9d6c:	4652      	mov	r2, sl
    9d6e:	465b      	mov	r3, fp
    9d70:	f7fe f9f6 	bl	8160 <__aeabi_dsub>
    9d74:	4602      	mov	r2, r0
    9d76:	460b      	mov	r3, r1
    9d78:	4620      	mov	r0, r4
    9d7a:	4629      	mov	r1, r5
    9d7c:	e7d9      	b.n	9d32 <__ieee754_log+0x26a>
    9d7e:	4602      	mov	r2, r0
    9d80:	460b      	mov	r3, r1
    9d82:	4650      	mov	r0, sl
    9d84:	4659      	mov	r1, fp
    9d86:	f7fe f9eb 	bl	8160 <__aeabi_dsub>
    9d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9d8e:	f7fe fb9f 	bl	84d0 <__aeabi_dmul>
    9d92:	4606      	mov	r6, r0
    9d94:	460f      	mov	r7, r1
    9d96:	2c00      	cmp	r4, #0
    9d98:	f43f af25 	beq.w	9be6 <__ieee754_log+0x11e>
    9d9c:	a308      	add	r3, pc, #32	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9da6:	f7fe fb93 	bl	84d0 <__aeabi_dmul>
    9daa:	4604      	mov	r4, r0
    9dac:	460d      	mov	r5, r1
    9dae:	a306      	add	r3, pc, #24	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9db0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9db8:	e729      	b.n	9c0e <__ieee754_log+0x146>
    9dba:	2000      	movs	r0, #0
    9dbc:	2100      	movs	r1, #0
    9dbe:	e696      	b.n	9aee <__ieee754_log+0x26>
    9dc0:	fee00000 	.word	0xfee00000
    9dc4:	3fe62e42 	.word	0x3fe62e42
    9dc8:	35793c76 	.word	0x35793c76
    9dcc:	3dea39ef 	.word	0x3dea39ef
    9dd0:	55555555 	.word	0x55555555
    9dd4:	3fd55555 	.word	0x3fd55555
    9dd8:	df3e5244 	.word	0xdf3e5244
    9ddc:	3fc2f112 	.word	0x3fc2f112
    9de0:	96cb03de 	.word	0x96cb03de
    9de4:	3fc74664 	.word	0x3fc74664
    9de8:	94229359 	.word	0x94229359
    9dec:	3fd24924 	.word	0x3fd24924
    9df0:	55555593 	.word	0x55555593
    9df4:	3fe55555 	.word	0x3fe55555
    9df8:	d078c69f 	.word	0xd078c69f
    9dfc:	3fc39a09 	.word	0x3fc39a09
    9e00:	1d8e78af 	.word	0x1d8e78af
    9e04:	3fcc71c5 	.word	0x3fcc71c5
    9e08:	9997fa04 	.word	0x9997fa04
    9e0c:	3fd99999 	.word	0x3fd99999
    9e10:	c3500000 	.word	0xc3500000
    9e14:	43500000 	.word	0x43500000
    9e18:	7fefffff 	.word	0x7fefffff
    9e1c:	3ff00000 	.word	0x3ff00000
    9e20:	3fe00000 	.word	0x3fe00000
    9e24:	00000000 	.word	0x00000000

00009e28 <_strtod_l>:
    9e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e2c:	461f      	mov	r7, r3
    9e2e:	b09d      	sub	sp, #116	; 0x74
    9e30:	2300      	movs	r3, #0
    9e32:	460c      	mov	r4, r1
    9e34:	4682      	mov	sl, r0
    9e36:	920e      	str	r2, [sp, #56]	; 0x38
    9e38:	9318      	str	r3, [sp, #96]	; 0x60
    9e3a:	f04f 0800 	mov.w	r8, #0
    9e3e:	4b97      	ldr	r3, [pc, #604]	; (a09c <_strtod_l+0x274>)
    9e40:	f04f 0900 	mov.w	r9, #0
    9e44:	681d      	ldr	r5, [r3, #0]
    9e46:	4628      	mov	r0, r5
    9e48:	f7ff fadf 	bl	940a <strlen>
    9e4c:	4622      	mov	r2, r4
    9e4e:	4683      	mov	fp, r0
    9e50:	9217      	str	r2, [sp, #92]	; 0x5c
    9e52:	7813      	ldrb	r3, [r2, #0]
    9e54:	2b2b      	cmp	r3, #43	; 0x2b
    9e56:	d03b      	beq.n	9ed0 <_strtod_l+0xa8>
    9e58:	d82c      	bhi.n	9eb4 <_strtod_l+0x8c>
    9e5a:	2b0d      	cmp	r3, #13
    9e5c:	d826      	bhi.n	9eac <_strtod_l+0x84>
    9e5e:	2b08      	cmp	r3, #8
    9e60:	d826      	bhi.n	9eb0 <_strtod_l+0x88>
    9e62:	2b00      	cmp	r3, #0
    9e64:	d02f      	beq.n	9ec6 <_strtod_l+0x9e>
    9e66:	2300      	movs	r3, #0
    9e68:	930c      	str	r3, [sp, #48]	; 0x30
    9e6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    9e6c:	7833      	ldrb	r3, [r6, #0]
    9e6e:	2b30      	cmp	r3, #48	; 0x30
    9e70:	d172      	bne.n	9f58 <_strtod_l+0x130>
    9e72:	7873      	ldrb	r3, [r6, #1]
    9e74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9e78:	2b58      	cmp	r3, #88	; 0x58
    9e7a:	d163      	bne.n	9f44 <_strtod_l+0x11c>
    9e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e7e:	a917      	add	r1, sp, #92	; 0x5c
    9e80:	4a87      	ldr	r2, [pc, #540]	; (a0a0 <_strtod_l+0x278>)
    9e82:	4650      	mov	r0, sl
    9e84:	9301      	str	r3, [sp, #4]
    9e86:	ab18      	add	r3, sp, #96	; 0x60
    9e88:	9702      	str	r7, [sp, #8]
    9e8a:	9300      	str	r3, [sp, #0]
    9e8c:	ab19      	add	r3, sp, #100	; 0x64
    9e8e:	f01e f9bb 	bl	28208 <__gethex>
    9e92:	f010 0507 	ands.w	r5, r0, #7
    9e96:	4604      	mov	r4, r0
    9e98:	d035      	beq.n	9f06 <_strtod_l+0xde>
    9e9a:	2d06      	cmp	r5, #6
    9e9c:	d11a      	bne.n	9ed4 <_strtod_l+0xac>
    9e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ea0:	b10b      	cbz	r3, 9ea6 <_strtod_l+0x7e>
    9ea2:	3601      	adds	r6, #1
    9ea4:	601e      	str	r6, [r3, #0]
    9ea6:	4640      	mov	r0, r8
    9ea8:	4649      	mov	r1, r9
    9eaa:	e037      	b.n	9f1c <_strtod_l+0xf4>
    9eac:	2b20      	cmp	r3, #32
    9eae:	d1da      	bne.n	9e66 <_strtod_l+0x3e>
    9eb0:	3201      	adds	r2, #1
    9eb2:	e7cd      	b.n	9e50 <_strtod_l+0x28>
    9eb4:	2b2d      	cmp	r3, #45	; 0x2d
    9eb6:	d1d6      	bne.n	9e66 <_strtod_l+0x3e>
    9eb8:	2301      	movs	r3, #1
    9eba:	930c      	str	r3, [sp, #48]	; 0x30
    9ebc:	1c53      	adds	r3, r2, #1
    9ebe:	9317      	str	r3, [sp, #92]	; 0x5c
    9ec0:	7853      	ldrb	r3, [r2, #1]
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d1d1      	bne.n	9e6a <_strtod_l+0x42>
    9ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ec8:	2b00      	cmp	r3, #0
    9eca:	d0ec      	beq.n	9ea6 <_strtod_l+0x7e>
    9ecc:	601c      	str	r4, [r3, #0]
    9ece:	e7ea      	b.n	9ea6 <_strtod_l+0x7e>
    9ed0:	2300      	movs	r3, #0
    9ed2:	e7f2      	b.n	9eba <_strtod_l+0x92>
    9ed4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9ed6:	b13a      	cbz	r2, 9ee8 <_strtod_l+0xc0>
    9ed8:	2135      	movs	r1, #53	; 0x35
    9eda:	a81a      	add	r0, sp, #104	; 0x68
    9edc:	f028 f919 	bl	32112 <__copybits>
    9ee0:	9918      	ldr	r1, [sp, #96]	; 0x60
    9ee2:	4650      	mov	r0, sl
    9ee4:	f01e fc50 	bl	28788 <_Bfree>
    9ee8:	3d01      	subs	r5, #1
    9eea:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9eec:	2d04      	cmp	r5, #4
    9eee:	d806      	bhi.n	9efe <_strtod_l+0xd6>
    9ef0:	e8df f005 	tbb	[pc, r5]
    9ef4:	23200317 	.word	0x23200317
    9ef8:	17          	.byte	0x17
    9ef9:	00          	.byte	0x00
    9efa:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    9efe:	0721      	lsls	r1, r4, #28
    9f00:	d501      	bpl.n	9f06 <_strtod_l+0xde>
    9f02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    9f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9f08:	b113      	cbz	r3, 9f10 <_strtod_l+0xe8>
    9f0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9f0e:	6013      	str	r3, [r2, #0]
    9f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9f12:	2b00      	cmp	r3, #0
    9f14:	d0c7      	beq.n	9ea6 <_strtod_l+0x7e>
    9f16:	4640      	mov	r0, r8
    9f18:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
    9f1c:	b01d      	add	sp, #116	; 0x74
    9f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f22:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    9f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
    9f2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    9f2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    9f32:	e7e4      	b.n	9efe <_strtod_l+0xd6>
    9f34:	f8df 916c 	ldr.w	r9, [pc, #364]	; a0a4 <_strtod_l+0x27c>
    9f38:	e7e1      	b.n	9efe <_strtod_l+0xd6>
    9f3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    9f3e:	f04f 38ff 	mov.w	r8, #4294967295
    9f42:	e7dc      	b.n	9efe <_strtod_l+0xd6>
    9f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f46:	1c5a      	adds	r2, r3, #1
    9f48:	9217      	str	r2, [sp, #92]	; 0x5c
    9f4a:	785b      	ldrb	r3, [r3, #1]
    9f4c:	2b30      	cmp	r3, #48	; 0x30
    9f4e:	d0f9      	beq.n	9f44 <_strtod_l+0x11c>
    9f50:	2b00      	cmp	r3, #0
    9f52:	d0d8      	beq.n	9f06 <_strtod_l+0xde>
    9f54:	2301      	movs	r3, #1
    9f56:	e000      	b.n	9f5a <_strtod_l+0x132>
    9f58:	2300      	movs	r3, #0
    9f5a:	2700      	movs	r7, #0
    9f5c:	9304      	str	r3, [sp, #16]
    9f5e:	220a      	movs	r2, #10
    9f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f62:	e9cd 7705 	strd	r7, r7, [sp, #20]
    9f66:	930a      	str	r3, [sp, #40]	; 0x28
    9f68:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9f6a:	7806      	ldrb	r6, [r0, #0]
    9f6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    9f70:	b2d9      	uxtb	r1, r3
    9f72:	2909      	cmp	r1, #9
    9f74:	d924      	bls.n	9fc0 <_strtod_l+0x198>
    9f76:	465a      	mov	r2, fp
    9f78:	4629      	mov	r1, r5
    9f7a:	f027 fd59 	bl	31a30 <strncmp>
    9f7e:	2800      	cmp	r0, #0
    9f80:	d02d      	beq.n	9fde <_strtod_l+0x1b6>
    9f82:	2000      	movs	r0, #0
    9f84:	4632      	mov	r2, r6
    9f86:	9d05      	ldr	r5, [sp, #20]
    9f88:	4683      	mov	fp, r0
    9f8a:	4603      	mov	r3, r0
    9f8c:	2a65      	cmp	r2, #101	; 0x65
    9f8e:	d001      	beq.n	9f94 <_strtod_l+0x16c>
    9f90:	2a45      	cmp	r2, #69	; 0x45
    9f92:	d113      	bne.n	9fbc <_strtod_l+0x194>
    9f94:	b91d      	cbnz	r5, 9f9e <_strtod_l+0x176>
    9f96:	9a04      	ldr	r2, [sp, #16]
    9f98:	4302      	orrs	r2, r0
    9f9a:	d094      	beq.n	9ec6 <_strtod_l+0x9e>
    9f9c:	2500      	movs	r5, #0
    9f9e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9fa0:	1c62      	adds	r2, r4, #1
    9fa2:	9217      	str	r2, [sp, #92]	; 0x5c
    9fa4:	7862      	ldrb	r2, [r4, #1]
    9fa6:	2a2b      	cmp	r2, #43	; 0x2b
    9fa8:	d06e      	beq.n	a088 <_strtod_l+0x260>
    9faa:	2a2d      	cmp	r2, #45	; 0x2d
    9fac:	d072      	beq.n	a094 <_strtod_l+0x26c>
    9fae:	f04f 0c00 	mov.w	ip, #0
    9fb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    9fb6:	2909      	cmp	r1, #9
    9fb8:	d97a      	bls.n	a0b0 <_strtod_l+0x288>
    9fba:	9417      	str	r4, [sp, #92]	; 0x5c
    9fbc:	2600      	movs	r6, #0
    9fbe:	e099      	b.n	a0f4 <_strtod_l+0x2cc>
    9fc0:	9905      	ldr	r1, [sp, #20]
    9fc2:	3001      	adds	r0, #1
    9fc4:	2908      	cmp	r1, #8
    9fc6:	9017      	str	r0, [sp, #92]	; 0x5c
    9fc8:	bfd7      	itett	le
    9fca:	9906      	ldrle	r1, [sp, #24]
    9fcc:	fb02 3707 	mlagt	r7, r2, r7, r3
    9fd0:	fb02 3301 	mlale	r3, r2, r1, r3
    9fd4:	9306      	strle	r3, [sp, #24]
    9fd6:	9b05      	ldr	r3, [sp, #20]
    9fd8:	3301      	adds	r3, #1
    9fda:	9305      	str	r3, [sp, #20]
    9fdc:	e7c4      	b.n	9f68 <_strtod_l+0x140>
    9fde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9fe0:	eb03 020b 	add.w	r2, r3, fp
    9fe4:	9217      	str	r2, [sp, #92]	; 0x5c
    9fe6:	f813 200b 	ldrb.w	r2, [r3, fp]
    9fea:	9b05      	ldr	r3, [sp, #20]
    9fec:	b3a3      	cbz	r3, a058 <_strtod_l+0x230>
    9fee:	4683      	mov	fp, r0
    9ff0:	461d      	mov	r5, r3
    9ff2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9ff6:	2b09      	cmp	r3, #9
    9ff8:	d912      	bls.n	a020 <_strtod_l+0x1f8>
    9ffa:	2301      	movs	r3, #1
    9ffc:	e7c6      	b.n	9f8c <_strtod_l+0x164>
    9ffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a000:	3001      	adds	r0, #1
    a002:	1c5a      	adds	r2, r3, #1
    a004:	9217      	str	r2, [sp, #92]	; 0x5c
    a006:	785a      	ldrb	r2, [r3, #1]
    a008:	2a30      	cmp	r2, #48	; 0x30
    a00a:	d0f8      	beq.n	9ffe <_strtod_l+0x1d6>
    a00c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    a010:	2b08      	cmp	r3, #8
    a012:	f200 84ea 	bhi.w	a9ea <_strtod_l+0xbc2>
    a016:	4683      	mov	fp, r0
    a018:	2000      	movs	r0, #0
    a01a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a01c:	4605      	mov	r5, r0
    a01e:	930a      	str	r3, [sp, #40]	; 0x28
    a020:	3a30      	subs	r2, #48	; 0x30
    a022:	f100 0301 	add.w	r3, r0, #1
    a026:	d011      	beq.n	a04c <_strtod_l+0x224>
    a028:	449b      	add	fp, r3
    a02a:	eb00 0c05 	add.w	ip, r0, r5
    a02e:	462b      	mov	r3, r5
    a030:	210a      	movs	r1, #10
    a032:	4563      	cmp	r3, ip
    a034:	d112      	bne.n	a05c <_strtod_l+0x234>
    a036:	182b      	adds	r3, r5, r0
    a038:	3501      	adds	r5, #1
    a03a:	2b08      	cmp	r3, #8
    a03c:	4405      	add	r5, r0
    a03e:	dc19      	bgt.n	a074 <_strtod_l+0x24c>
    a040:	9906      	ldr	r1, [sp, #24]
    a042:	230a      	movs	r3, #10
    a044:	fb03 2301 	mla	r3, r3, r1, r2
    a048:	9306      	str	r3, [sp, #24]
    a04a:	2300      	movs	r3, #0
    a04c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a04e:	4618      	mov	r0, r3
    a050:	1c51      	adds	r1, r2, #1
    a052:	9117      	str	r1, [sp, #92]	; 0x5c
    a054:	7852      	ldrb	r2, [r2, #1]
    a056:	e7cc      	b.n	9ff2 <_strtod_l+0x1ca>
    a058:	9805      	ldr	r0, [sp, #20]
    a05a:	e7d5      	b.n	a008 <_strtod_l+0x1e0>
    a05c:	2b08      	cmp	r3, #8
    a05e:	f103 0301 	add.w	r3, r3, #1
    a062:	dc03      	bgt.n	a06c <_strtod_l+0x244>
    a064:	9e06      	ldr	r6, [sp, #24]
    a066:	434e      	muls	r6, r1
    a068:	9606      	str	r6, [sp, #24]
    a06a:	e7e2      	b.n	a032 <_strtod_l+0x20a>
    a06c:	2b10      	cmp	r3, #16
    a06e:	bfd8      	it	le
    a070:	434f      	mulle	r7, r1
    a072:	e7de      	b.n	a032 <_strtod_l+0x20a>
    a074:	2b0f      	cmp	r3, #15
    a076:	bfdc      	itt	le
    a078:	230a      	movle	r3, #10
    a07a:	fb03 2707 	mlale	r7, r3, r7, r2
    a07e:	e7e4      	b.n	a04a <_strtod_l+0x222>
    a080:	f04f 0b00 	mov.w	fp, #0
    a084:	2301      	movs	r3, #1
    a086:	e786      	b.n	9f96 <_strtod_l+0x16e>
    a088:	f04f 0c00 	mov.w	ip, #0
    a08c:	1ca2      	adds	r2, r4, #2
    a08e:	9217      	str	r2, [sp, #92]	; 0x5c
    a090:	78a2      	ldrb	r2, [r4, #2]
    a092:	e78e      	b.n	9fb2 <_strtod_l+0x18a>
    a094:	f04f 0c01 	mov.w	ip, #1
    a098:	e7f8      	b.n	a08c <_strtod_l+0x264>
    a09a:	bf00      	nop
    a09c:	000341b8 	.word	0x000341b8
    a0a0:	00034144 	.word	0x00034144
    a0a4:	7ff00000 	.word	0x7ff00000
    a0a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0aa:	1c51      	adds	r1, r2, #1
    a0ac:	9117      	str	r1, [sp, #92]	; 0x5c
    a0ae:	7852      	ldrb	r2, [r2, #1]
    a0b0:	2a30      	cmp	r2, #48	; 0x30
    a0b2:	d0f9      	beq.n	a0a8 <_strtod_l+0x280>
    a0b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    a0b8:	2908      	cmp	r1, #8
    a0ba:	f63f af7f 	bhi.w	9fbc <_strtod_l+0x194>
    a0be:	3a30      	subs	r2, #48	; 0x30
    a0c0:	9207      	str	r2, [sp, #28]
    a0c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0c4:	920d      	str	r2, [sp, #52]	; 0x34
    a0c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0c8:	1c56      	adds	r6, r2, #1
    a0ca:	9617      	str	r6, [sp, #92]	; 0x5c
    a0cc:	7852      	ldrb	r2, [r2, #1]
    a0ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    a0d2:	f1be 0f09 	cmp.w	lr, #9
    a0d6:	d938      	bls.n	a14a <_strtod_l+0x322>
    a0d8:	990d      	ldr	r1, [sp, #52]	; 0x34
    a0da:	1a76      	subs	r6, r6, r1
    a0dc:	2e08      	cmp	r6, #8
    a0de:	f644 661f 	movw	r6, #19999	; 0x4e1f
    a0e2:	dc03      	bgt.n	a0ec <_strtod_l+0x2c4>
    a0e4:	9907      	ldr	r1, [sp, #28]
    a0e6:	428e      	cmp	r6, r1
    a0e8:	bfa8      	it	ge
    a0ea:	460e      	movge	r6, r1
    a0ec:	f1bc 0f00 	cmp.w	ip, #0
    a0f0:	d000      	beq.n	a0f4 <_strtod_l+0x2cc>
    a0f2:	4276      	negs	r6, r6
    a0f4:	2d00      	cmp	r5, #0
    a0f6:	d14f      	bne.n	a198 <_strtod_l+0x370>
    a0f8:	9904      	ldr	r1, [sp, #16]
    a0fa:	4308      	orrs	r0, r1
    a0fc:	f47f af03 	bne.w	9f06 <_strtod_l+0xde>
    a100:	2b00      	cmp	r3, #0
    a102:	f47f aee0 	bne.w	9ec6 <_strtod_l+0x9e>
    a106:	2a69      	cmp	r2, #105	; 0x69
    a108:	d029      	beq.n	a15e <_strtod_l+0x336>
    a10a:	dc26      	bgt.n	a15a <_strtod_l+0x332>
    a10c:	2a49      	cmp	r2, #73	; 0x49
    a10e:	d026      	beq.n	a15e <_strtod_l+0x336>
    a110:	2a4e      	cmp	r2, #78	; 0x4e
    a112:	f47f aed8 	bne.w	9ec6 <_strtod_l+0x9e>
    a116:	499d      	ldr	r1, [pc, #628]	; (a38c <_strtod_l+0x564>)
    a118:	a817      	add	r0, sp, #92	; 0x5c
    a11a:	f027 fe8a 	bl	31e32 <__match>
    a11e:	2800      	cmp	r0, #0
    a120:	f43f aed1 	beq.w	9ec6 <_strtod_l+0x9e>
    a124:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	2b28      	cmp	r3, #40	; 0x28
    a12a:	d12f      	bne.n	a18c <_strtod_l+0x364>
    a12c:	aa1a      	add	r2, sp, #104	; 0x68
    a12e:	4998      	ldr	r1, [pc, #608]	; (a390 <_strtod_l+0x568>)
    a130:	a817      	add	r0, sp, #92	; 0x5c
    a132:	f027 fe92 	bl	31e5a <__hexnan>
    a136:	2805      	cmp	r0, #5
    a138:	d128      	bne.n	a18c <_strtod_l+0x364>
    a13a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a13c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    a140:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    a144:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    a148:	e6dd      	b.n	9f06 <_strtod_l+0xde>
    a14a:	9e07      	ldr	r6, [sp, #28]
    a14c:	210a      	movs	r1, #10
    a14e:	fb01 2106 	mla	r1, r1, r6, r2
    a152:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a156:	9207      	str	r2, [sp, #28]
    a158:	e7b5      	b.n	a0c6 <_strtod_l+0x29e>
    a15a:	2a6e      	cmp	r2, #110	; 0x6e
    a15c:	e7d9      	b.n	a112 <_strtod_l+0x2ea>
    a15e:	498d      	ldr	r1, [pc, #564]	; (a394 <_strtod_l+0x56c>)
    a160:	a817      	add	r0, sp, #92	; 0x5c
    a162:	f027 fe66 	bl	31e32 <__match>
    a166:	2800      	cmp	r0, #0
    a168:	f43f aead 	beq.w	9ec6 <_strtod_l+0x9e>
    a16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a16e:	a817      	add	r0, sp, #92	; 0x5c
    a170:	4989      	ldr	r1, [pc, #548]	; (a398 <_strtod_l+0x570>)
    a172:	3b01      	subs	r3, #1
    a174:	9317      	str	r3, [sp, #92]	; 0x5c
    a176:	f027 fe5c 	bl	31e32 <__match>
    a17a:	b910      	cbnz	r0, a182 <_strtod_l+0x35a>
    a17c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a17e:	3301      	adds	r3, #1
    a180:	9317      	str	r3, [sp, #92]	; 0x5c
    a182:	f8df 9218 	ldr.w	r9, [pc, #536]	; a39c <_strtod_l+0x574>
    a186:	f04f 0800 	mov.w	r8, #0
    a18a:	e6bc      	b.n	9f06 <_strtod_l+0xde>
    a18c:	4884      	ldr	r0, [pc, #528]	; (a3a0 <_strtod_l+0x578>)
    a18e:	f01c fcdb 	bl	26b48 <nan>
    a192:	4680      	mov	r8, r0
    a194:	4689      	mov	r9, r1
    a196:	e6b6      	b.n	9f06 <_strtod_l+0xde>
    a198:	eba6 030b 	sub.w	r3, r6, fp
    a19c:	9806      	ldr	r0, [sp, #24]
    a19e:	462c      	mov	r4, r5
    a1a0:	930f      	str	r3, [sp, #60]	; 0x3c
    a1a2:	9b05      	ldr	r3, [sp, #20]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	bf08      	it	eq
    a1a8:	462b      	moveq	r3, r5
    a1aa:	2d10      	cmp	r5, #16
    a1ac:	9305      	str	r3, [sp, #20]
    a1ae:	bfa8      	it	ge
    a1b0:	2410      	movge	r4, #16
    a1b2:	f7fe f913 	bl	83dc <__aeabi_ui2d>
    a1b6:	2d09      	cmp	r5, #9
    a1b8:	4680      	mov	r8, r0
    a1ba:	4689      	mov	r9, r1
    a1bc:	dc14      	bgt.n	a1e8 <_strtod_l+0x3c0>
    a1be:	eba6 030b 	sub.w	r3, r6, fp
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	f43f ae9f 	beq.w	9f06 <_strtod_l+0xde>
    a1c8:	eba6 030b 	sub.w	r3, r6, fp
    a1cc:	dd79      	ble.n	a2c2 <_strtod_l+0x49a>
    a1ce:	2b16      	cmp	r3, #22
    a1d0:	dc45      	bgt.n	a25e <_strtod_l+0x436>
    a1d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1d4:	4642      	mov	r2, r8
    a1d6:	4973      	ldr	r1, [pc, #460]	; (a3a4 <_strtod_l+0x57c>)
    a1d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a1dc:	464b      	mov	r3, r9
    a1de:	e9d1 0100 	ldrd	r0, r1, [r1]
    a1e2:	f7fe f975 	bl	84d0 <__aeabi_dmul>
    a1e6:	e7d4      	b.n	a192 <_strtod_l+0x36a>
    a1e8:	4b6e      	ldr	r3, [pc, #440]	; (a3a4 <_strtod_l+0x57c>)
    a1ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a1ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    a1f2:	f7fe f96d 	bl	84d0 <__aeabi_dmul>
    a1f6:	4680      	mov	r8, r0
    a1f8:	4689      	mov	r9, r1
    a1fa:	4638      	mov	r0, r7
    a1fc:	f7fe f8ee 	bl	83dc <__aeabi_ui2d>
    a200:	4602      	mov	r2, r0
    a202:	460b      	mov	r3, r1
    a204:	4640      	mov	r0, r8
    a206:	4649      	mov	r1, r9
    a208:	f7fd ffac 	bl	8164 <__adddf3>
    a20c:	2d0f      	cmp	r5, #15
    a20e:	4680      	mov	r8, r0
    a210:	4689      	mov	r9, r1
    a212:	ddd4      	ble.n	a1be <_strtod_l+0x396>
    a214:	1b2c      	subs	r4, r5, r4
    a216:	eba6 030b 	sub.w	r3, r6, fp
    a21a:	441c      	add	r4, r3
    a21c:	2c00      	cmp	r4, #0
    a21e:	dc26      	bgt.n	a26e <_strtod_l+0x446>
    a220:	f000 80a3 	beq.w	a36a <_strtod_l+0x542>
    a224:	4264      	negs	r4, r4
    a226:	f014 020f 	ands.w	r2, r4, #15
    a22a:	d00a      	beq.n	a242 <_strtod_l+0x41a>
    a22c:	4b5d      	ldr	r3, [pc, #372]	; (a3a4 <_strtod_l+0x57c>)
    a22e:	4640      	mov	r0, r8
    a230:	4649      	mov	r1, r9
    a232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a236:	e9d3 2300 	ldrd	r2, r3, [r3]
    a23a:	f7fe fa73 	bl	8724 <__aeabi_ddiv>
    a23e:	4680      	mov	r8, r0
    a240:	4689      	mov	r9, r1
    a242:	1124      	asrs	r4, r4, #4
    a244:	f000 8091 	beq.w	a36a <_strtod_l+0x542>
    a248:	2c1f      	cmp	r4, #31
    a24a:	f340 80b3 	ble.w	a3b4 <_strtod_l+0x58c>
    a24e:	2322      	movs	r3, #34	; 0x22
    a250:	f04f 0800 	mov.w	r8, #0
    a254:	f04f 0900 	mov.w	r9, #0
    a258:	f8ca 3000 	str.w	r3, [sl]
    a25c:	e653      	b.n	9f06 <_strtod_l+0xde>
    a25e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    a262:	eba6 020b 	sub.w	r2, r6, fp
    a266:	4293      	cmp	r3, r2
    a268:	da19      	bge.n	a29e <_strtod_l+0x476>
    a26a:	1b2c      	subs	r4, r5, r4
    a26c:	4414      	add	r4, r2
    a26e:	f014 030f 	ands.w	r3, r4, #15
    a272:	d00a      	beq.n	a28a <_strtod_l+0x462>
    a274:	494b      	ldr	r1, [pc, #300]	; (a3a4 <_strtod_l+0x57c>)
    a276:	4642      	mov	r2, r8
    a278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a27c:	464b      	mov	r3, r9
    a27e:	e9d1 0100 	ldrd	r0, r1, [r1]
    a282:	f7fe f925 	bl	84d0 <__aeabi_dmul>
    a286:	4680      	mov	r8, r0
    a288:	4689      	mov	r9, r1
    a28a:	f034 040f 	bics.w	r4, r4, #15
    a28e:	d06c      	beq.n	a36a <_strtod_l+0x542>
    a290:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    a294:	dd41      	ble.n	a31a <_strtod_l+0x4f2>
    a296:	2322      	movs	r3, #34	; 0x22
    a298:	f8ca 3000 	str.w	r3, [sl]
    a29c:	e771      	b.n	a182 <_strtod_l+0x35a>
    a29e:	f1c5 050f 	rsb	r5, r5, #15
    a2a2:	4c40      	ldr	r4, [pc, #256]	; (a3a4 <_strtod_l+0x57c>)
    a2a4:	4642      	mov	r2, r8
    a2a6:	464b      	mov	r3, r9
    a2a8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    a2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
    a2b0:	f7fe f90e 	bl	84d0 <__aeabi_dmul>
    a2b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a2b6:	1b5d      	subs	r5, r3, r5
    a2b8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a2bc:	e9d4 2300 	ldrd	r2, r3, [r4]
    a2c0:	e78f      	b.n	a1e2 <_strtod_l+0x3ba>
    a2c2:	3316      	adds	r3, #22
    a2c4:	dba6      	blt.n	a214 <_strtod_l+0x3ec>
    a2c6:	ebab 0206 	sub.w	r2, fp, r6
    a2ca:	4b36      	ldr	r3, [pc, #216]	; (a3a4 <_strtod_l+0x57c>)
    a2cc:	4640      	mov	r0, r8
    a2ce:	4649      	mov	r1, r9
    a2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2d8:	f7fe fa24 	bl	8724 <__aeabi_ddiv>
    a2dc:	e759      	b.n	a192 <_strtod_l+0x36a>
    a2de:	2300      	movs	r3, #0
    a2e0:	9306      	str	r3, [sp, #24]
    a2e2:	2322      	movs	r3, #34	; 0x22
    a2e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a39c <_strtod_l+0x574>
    a2e8:	f04f 0800 	mov.w	r8, #0
    a2ec:	f8ca 3000 	str.w	r3, [sl]
    a2f0:	9918      	ldr	r1, [sp, #96]	; 0x60
    a2f2:	4650      	mov	r0, sl
    a2f4:	f01e fa48 	bl	28788 <_Bfree>
    a2f8:	9906      	ldr	r1, [sp, #24]
    a2fa:	4650      	mov	r0, sl
    a2fc:	f01e fa44 	bl	28788 <_Bfree>
    a300:	9905      	ldr	r1, [sp, #20]
    a302:	4650      	mov	r0, sl
    a304:	f01e fa40 	bl	28788 <_Bfree>
    a308:	9910      	ldr	r1, [sp, #64]	; 0x40
    a30a:	4650      	mov	r0, sl
    a30c:	f01e fa3c 	bl	28788 <_Bfree>
    a310:	9907      	ldr	r1, [sp, #28]
    a312:	4650      	mov	r0, sl
    a314:	f01e fa38 	bl	28788 <_Bfree>
    a318:	e5f5      	b.n	9f06 <_strtod_l+0xde>
    a31a:	2300      	movs	r3, #0
    a31c:	1124      	asrs	r4, r4, #4
    a31e:	4640      	mov	r0, r8
    a320:	4649      	mov	r1, r9
    a322:	4f21      	ldr	r7, [pc, #132]	; (a3a8 <_strtod_l+0x580>)
    a324:	9304      	str	r3, [sp, #16]
    a326:	2c01      	cmp	r4, #1
    a328:	dc22      	bgt.n	a370 <_strtod_l+0x548>
    a32a:	b10b      	cbz	r3, a330 <_strtod_l+0x508>
    a32c:	4680      	mov	r8, r0
    a32e:	4689      	mov	r9, r1
    a330:	9b04      	ldr	r3, [sp, #16]
    a332:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    a336:	491c      	ldr	r1, [pc, #112]	; (a3a8 <_strtod_l+0x580>)
    a338:	4642      	mov	r2, r8
    a33a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a33e:	464b      	mov	r3, r9
    a340:	e9d1 0100 	ldrd	r0, r1, [r1]
    a344:	f7fe f8c4 	bl	84d0 <__aeabi_dmul>
    a348:	4b14      	ldr	r3, [pc, #80]	; (a39c <_strtod_l+0x574>)
    a34a:	460a      	mov	r2, r1
    a34c:	4680      	mov	r8, r0
    a34e:	400b      	ands	r3, r1
    a350:	4916      	ldr	r1, [pc, #88]	; (a3ac <_strtod_l+0x584>)
    a352:	428b      	cmp	r3, r1
    a354:	d89f      	bhi.n	a296 <_strtod_l+0x46e>
    a356:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    a35a:	428b      	cmp	r3, r1
    a35c:	bf86      	itte	hi
    a35e:	f8df 9050 	ldrhi.w	r9, [pc, #80]	; a3b0 <_strtod_l+0x588>
    a362:	f04f 38ff 	movhi.w	r8, #4294967295
    a366:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    a36a:	2300      	movs	r3, #0
    a36c:	9304      	str	r3, [sp, #16]
    a36e:	e04c      	b.n	a40a <_strtod_l+0x5e2>
    a370:	07e2      	lsls	r2, r4, #31
    a372:	d504      	bpl.n	a37e <_strtod_l+0x556>
    a374:	e9d7 2300 	ldrd	r2, r3, [r7]
    a378:	f7fe f8aa 	bl	84d0 <__aeabi_dmul>
    a37c:	2301      	movs	r3, #1
    a37e:	9a04      	ldr	r2, [sp, #16]
    a380:	1064      	asrs	r4, r4, #1
    a382:	3708      	adds	r7, #8
    a384:	3201      	adds	r2, #1
    a386:	9204      	str	r2, [sp, #16]
    a388:	e7cd      	b.n	a326 <_strtod_l+0x4fe>
    a38a:	bf00      	nop
    a38c:	0003714b 	.word	0x0003714b
    a390:	00034130 	.word	0x00034130
    a394:	0003511a 	.word	0x0003511a
    a398:	000387de 	.word	0x000387de
    a39c:	7ff00000 	.word	0x7ff00000
    a3a0:	00036445 	.word	0x00036445
    a3a4:	00033178 	.word	0x00033178
    a3a8:	00033150 	.word	0x00033150
    a3ac:	7ca00000 	.word	0x7ca00000
    a3b0:	7fefffff 	.word	0x7fefffff
    a3b4:	f014 0310 	ands.w	r3, r4, #16
    a3b8:	4640      	mov	r0, r8
    a3ba:	4649      	mov	r1, r9
    a3bc:	4fab      	ldr	r7, [pc, #684]	; (a66c <_strtod_l+0x844>)
    a3be:	bf18      	it	ne
    a3c0:	236a      	movne	r3, #106	; 0x6a
    a3c2:	9304      	str	r3, [sp, #16]
    a3c4:	2300      	movs	r3, #0
    a3c6:	07e2      	lsls	r2, r4, #31
    a3c8:	d504      	bpl.n	a3d4 <_strtod_l+0x5ac>
    a3ca:	e9d7 2300 	ldrd	r2, r3, [r7]
    a3ce:	f7fe f87f 	bl	84d0 <__aeabi_dmul>
    a3d2:	2301      	movs	r3, #1
    a3d4:	1064      	asrs	r4, r4, #1
    a3d6:	f107 0708 	add.w	r7, r7, #8
    a3da:	d1f4      	bne.n	a3c6 <_strtod_l+0x59e>
    a3dc:	b10b      	cbz	r3, a3e2 <_strtod_l+0x5ba>
    a3de:	4680      	mov	r8, r0
    a3e0:	4689      	mov	r9, r1
    a3e2:	9b04      	ldr	r3, [sp, #16]
    a3e4:	b143      	cbz	r3, a3f8 <_strtod_l+0x5d0>
    a3e6:	f3c9 520a 	ubfx	r2, r9, #20, #11
    a3ea:	4649      	mov	r1, r9
    a3ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    a3f0:	2b00      	cmp	r3, #0
    a3f2:	dc50      	bgt.n	a496 <_strtod_l+0x66e>
    a3f4:	236a      	movs	r3, #106	; 0x6a
    a3f6:	9304      	str	r3, [sp, #16]
    a3f8:	2200      	movs	r2, #0
    a3fa:	2300      	movs	r3, #0
    a3fc:	4640      	mov	r0, r8
    a3fe:	4649      	mov	r1, r9
    a400:	f7fe fe2c 	bl	905c <__aeabi_dcmpeq>
    a404:	2800      	cmp	r0, #0
    a406:	f47f af22 	bne.w	a24e <_strtod_l+0x426>
    a40a:	9b06      	ldr	r3, [sp, #24]
    a40c:	4650      	mov	r0, sl
    a40e:	9a05      	ldr	r2, [sp, #20]
    a410:	9300      	str	r3, [sp, #0]
    a412:	462b      	mov	r3, r5
    a414:	990a      	ldr	r1, [sp, #40]	; 0x28
    a416:	f01e fa21 	bl	2885c <__s2b>
    a41a:	9010      	str	r0, [sp, #64]	; 0x40
    a41c:	2800      	cmp	r0, #0
    a41e:	f43f af3a 	beq.w	a296 <_strtod_l+0x46e>
    a422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a424:	ebab 0b06 	sub.w	fp, fp, r6
    a428:	2b00      	cmp	r3, #0
    a42a:	bfb4      	ite	lt
    a42c:	465b      	movlt	r3, fp
    a42e:	2300      	movge	r3, #0
    a430:	9311      	str	r3, [sp, #68]	; 0x44
    a432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a438:	9314      	str	r3, [sp, #80]	; 0x50
    a43a:	2300      	movs	r3, #0
    a43c:	9307      	str	r3, [sp, #28]
    a43e:	9305      	str	r3, [sp, #20]
    a440:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a442:	4650      	mov	r0, sl
    a444:	6859      	ldr	r1, [r3, #4]
    a446:	f01e f95f 	bl	28708 <_Balloc>
    a44a:	9006      	str	r0, [sp, #24]
    a44c:	2800      	cmp	r0, #0
    a44e:	f43f af48 	beq.w	a2e2 <_strtod_l+0x4ba>
    a452:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a454:	300c      	adds	r0, #12
    a456:	691a      	ldr	r2, [r3, #16]
    a458:	f103 010c 	add.w	r1, r3, #12
    a45c:	3202      	adds	r2, #2
    a45e:	0092      	lsls	r2, r2, #2
    a460:	f027 f955 	bl	3170e <memcpy>
    a464:	ab1a      	add	r3, sp, #104	; 0x68
    a466:	4642      	mov	r2, r8
    a468:	4650      	mov	r0, sl
    a46a:	9301      	str	r3, [sp, #4]
    a46c:	ab19      	add	r3, sp, #100	; 0x64
    a46e:	9300      	str	r3, [sp, #0]
    a470:	464b      	mov	r3, r9
    a472:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    a476:	f01e fcc1 	bl	28dfc <__d2b>
    a47a:	9018      	str	r0, [sp, #96]	; 0x60
    a47c:	2800      	cmp	r0, #0
    a47e:	f43f af30 	beq.w	a2e2 <_strtod_l+0x4ba>
    a482:	2101      	movs	r1, #1
    a484:	4650      	mov	r0, sl
    a486:	f01e fa33 	bl	288f0 <__i2b>
    a48a:	4603      	mov	r3, r0
    a48c:	9005      	str	r0, [sp, #20]
    a48e:	b9d0      	cbnz	r0, a4c6 <_strtod_l+0x69e>
    a490:	2300      	movs	r3, #0
    a492:	9305      	str	r3, [sp, #20]
    a494:	e725      	b.n	a2e2 <_strtod_l+0x4ba>
    a496:	2b1f      	cmp	r3, #31
    a498:	dd0e      	ble.n	a4b8 <_strtod_l+0x690>
    a49a:	2b34      	cmp	r3, #52	; 0x34
    a49c:	f04f 0800 	mov.w	r8, #0
    a4a0:	bfdb      	ittet	le
    a4a2:	f04f 33ff 	movle.w	r3, #4294967295
    a4a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    a4aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    a4ae:	4093      	lslle	r3, r2
    a4b0:	bfd8      	it	le
    a4b2:	ea03 0901 	andle.w	r9, r3, r1
    a4b6:	e79d      	b.n	a3f4 <_strtod_l+0x5cc>
    a4b8:	f04f 32ff 	mov.w	r2, #4294967295
    a4bc:	fa02 f303 	lsl.w	r3, r2, r3
    a4c0:	ea03 0808 	and.w	r8, r3, r8
    a4c4:	e796      	b.n	a3f4 <_strtod_l+0x5cc>
    a4c6:	9c19      	ldr	r4, [sp, #100]	; 0x64
    a4c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a4ca:	2c00      	cmp	r4, #0
    a4cc:	bfa9      	itett	ge
    a4ce:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    a4d0:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    a4d2:	18e7      	addge	r7, r4, r3
    a4d4:	9e14      	ldrge	r6, [sp, #80]	; 0x50
    a4d6:	bfb8      	it	lt
    a4d8:	1b1e      	sublt	r6, r3, r4
    a4da:	9b04      	ldr	r3, [sp, #16]
    a4dc:	bfb8      	it	lt
    a4de:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    a4e0:	1ae4      	subs	r4, r4, r3
    a4e2:	4b63      	ldr	r3, [pc, #396]	; (a670 <_strtod_l+0x848>)
    a4e4:	4414      	add	r4, r2
    a4e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    a4ea:	3c01      	subs	r4, #1
    a4ec:	429c      	cmp	r4, r3
    a4ee:	f280 80b0 	bge.w	a652 <_strtod_l+0x82a>
    a4f2:	1b1b      	subs	r3, r3, r4
    a4f4:	2501      	movs	r5, #1
    a4f6:	2b1f      	cmp	r3, #31
    a4f8:	eba2 0203 	sub.w	r2, r2, r3
    a4fc:	bfcd      	iteet	gt
    a4fe:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    a502:	409d      	lslle	r5, r3
    a504:	2400      	movle	r4, #0
    a506:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    a50a:	bfc2      	ittt	gt
    a50c:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    a510:	34e2      	addgt	r4, #226	; 0xe2
    a512:	fa05 f404 	lslgt.w	r4, r5, r4
    a516:	eb07 0b02 	add.w	fp, r7, r2
    a51a:	9b04      	ldr	r3, [sp, #16]
    a51c:	4416      	add	r6, r2
    a51e:	455f      	cmp	r7, fp
    a520:	441e      	add	r6, r3
    a522:	463b      	mov	r3, r7
    a524:	bfa8      	it	ge
    a526:	465b      	movge	r3, fp
    a528:	42b3      	cmp	r3, r6
    a52a:	bfa8      	it	ge
    a52c:	4633      	movge	r3, r6
    a52e:	2b00      	cmp	r3, #0
    a530:	bfc2      	ittt	gt
    a532:	ebab 0b03 	subgt.w	fp, fp, r3
    a536:	1af6      	subgt	r6, r6, r3
    a538:	1aff      	subgt	r7, r7, r3
    a53a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a53c:	2b00      	cmp	r3, #0
    a53e:	dd16      	ble.n	a56e <_strtod_l+0x746>
    a540:	461a      	mov	r2, r3
    a542:	9905      	ldr	r1, [sp, #20]
    a544:	4650      	mov	r0, sl
    a546:	f01e fa93 	bl	28a70 <__pow5mult>
    a54a:	9005      	str	r0, [sp, #20]
    a54c:	2800      	cmp	r0, #0
    a54e:	d09f      	beq.n	a490 <_strtod_l+0x668>
    a550:	4601      	mov	r1, r0
    a552:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a554:	4650      	mov	r0, sl
    a556:	f01e f9e1 	bl	2891c <__multiply>
    a55a:	900d      	str	r0, [sp, #52]	; 0x34
    a55c:	2800      	cmp	r0, #0
    a55e:	f43f aec0 	beq.w	a2e2 <_strtod_l+0x4ba>
    a562:	9918      	ldr	r1, [sp, #96]	; 0x60
    a564:	4650      	mov	r0, sl
    a566:	f01e f90f 	bl	28788 <_Bfree>
    a56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a56c:	9318      	str	r3, [sp, #96]	; 0x60
    a56e:	f1bb 0f00 	cmp.w	fp, #0
    a572:	dc71      	bgt.n	a658 <_strtod_l+0x830>
    a574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a576:	2b00      	cmp	r3, #0
    a578:	dd08      	ble.n	a58c <_strtod_l+0x764>
    a57a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a57c:	4650      	mov	r0, sl
    a57e:	9906      	ldr	r1, [sp, #24]
    a580:	f01e fa76 	bl	28a70 <__pow5mult>
    a584:	9006      	str	r0, [sp, #24]
    a586:	2800      	cmp	r0, #0
    a588:	f43f aea9 	beq.w	a2de <_strtod_l+0x4b6>
    a58c:	2e00      	cmp	r6, #0
    a58e:	dd08      	ble.n	a5a2 <_strtod_l+0x77a>
    a590:	4632      	mov	r2, r6
    a592:	9906      	ldr	r1, [sp, #24]
    a594:	4650      	mov	r0, sl
    a596:	f01e fac5 	bl	28b24 <__lshift>
    a59a:	9006      	str	r0, [sp, #24]
    a59c:	2800      	cmp	r0, #0
    a59e:	f43f ae9e 	beq.w	a2de <_strtod_l+0x4b6>
    a5a2:	2f00      	cmp	r7, #0
    a5a4:	dd08      	ble.n	a5b8 <_strtod_l+0x790>
    a5a6:	463a      	mov	r2, r7
    a5a8:	9905      	ldr	r1, [sp, #20]
    a5aa:	4650      	mov	r0, sl
    a5ac:	f01e faba 	bl	28b24 <__lshift>
    a5b0:	9005      	str	r0, [sp, #20]
    a5b2:	2800      	cmp	r0, #0
    a5b4:	f43f ae95 	beq.w	a2e2 <_strtod_l+0x4ba>
    a5b8:	9a06      	ldr	r2, [sp, #24]
    a5ba:	4650      	mov	r0, sl
    a5bc:	9918      	ldr	r1, [sp, #96]	; 0x60
    a5be:	f01e fb1d 	bl	28bfc <__mdiff>
    a5c2:	9007      	str	r0, [sp, #28]
    a5c4:	2800      	cmp	r0, #0
    a5c6:	f43f ae8c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a5ca:	68c3      	ldr	r3, [r0, #12]
    a5cc:	9905      	ldr	r1, [sp, #20]
    a5ce:	930d      	str	r3, [sp, #52]	; 0x34
    a5d0:	2300      	movs	r3, #0
    a5d2:	60c3      	str	r3, [r0, #12]
    a5d4:	f027 fd52 	bl	3207c <__mcmp>
    a5d8:	2800      	cmp	r0, #0
    a5da:	da4b      	bge.n	a674 <_strtod_l+0x84c>
    a5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a5de:	ea53 0308 	orrs.w	r3, r3, r8
    a5e2:	f040 80bc 	bne.w	a75e <_strtod_l+0x936>
    a5e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	f040 80b7 	bne.w	a75e <_strtod_l+0x936>
    a5f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a5f4:	0d1b      	lsrs	r3, r3, #20
    a5f6:	051b      	lsls	r3, r3, #20
    a5f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a5fc:	f240 80af 	bls.w	a75e <_strtod_l+0x936>
    a600:	9b07      	ldr	r3, [sp, #28]
    a602:	695b      	ldr	r3, [r3, #20]
    a604:	b923      	cbnz	r3, a610 <_strtod_l+0x7e8>
    a606:	9b07      	ldr	r3, [sp, #28]
    a608:	691b      	ldr	r3, [r3, #16]
    a60a:	2b01      	cmp	r3, #1
    a60c:	f340 80a7 	ble.w	a75e <_strtod_l+0x936>
    a610:	2201      	movs	r2, #1
    a612:	9907      	ldr	r1, [sp, #28]
    a614:	4650      	mov	r0, sl
    a616:	f01e fa85 	bl	28b24 <__lshift>
    a61a:	9905      	ldr	r1, [sp, #20]
    a61c:	9007      	str	r0, [sp, #28]
    a61e:	f027 fd2d 	bl	3207c <__mcmp>
    a622:	2800      	cmp	r0, #0
    a624:	f340 809b 	ble.w	a75e <_strtod_l+0x936>
    a628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a62c:	9a04      	ldr	r2, [sp, #16]
    a62e:	0d1b      	lsrs	r3, r3, #20
    a630:	051b      	lsls	r3, r3, #20
    a632:	2a00      	cmp	r2, #0
    a634:	d079      	beq.n	a72a <_strtod_l+0x902>
    a636:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a63a:	d86d      	bhi.n	a718 <_strtod_l+0x8f0>
    a63c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    a640:	d846      	bhi.n	a6d0 <_strtod_l+0x8a8>
    a642:	f04f 0800 	mov.w	r8, #0
    a646:	f04f 0900 	mov.w	r9, #0
    a64a:	2322      	movs	r3, #34	; 0x22
    a64c:	f8ca 3000 	str.w	r3, [sl]
    a650:	e64e      	b.n	a2f0 <_strtod_l+0x4c8>
    a652:	2400      	movs	r4, #0
    a654:	2501      	movs	r5, #1
    a656:	e75e      	b.n	a516 <_strtod_l+0x6ee>
    a658:	465a      	mov	r2, fp
    a65a:	9918      	ldr	r1, [sp, #96]	; 0x60
    a65c:	4650      	mov	r0, sl
    a65e:	f01e fa61 	bl	28b24 <__lshift>
    a662:	9018      	str	r0, [sp, #96]	; 0x60
    a664:	2800      	cmp	r0, #0
    a666:	d185      	bne.n	a574 <_strtod_l+0x74c>
    a668:	e63b      	b.n	a2e2 <_strtod_l+0x4ba>
    a66a:	bf00      	nop
    a66c:	00033128 	.word	0x00033128
    a670:	fffffc02 	.word	0xfffffc02
    a674:	46cb      	mov	fp, r9
    a676:	f040 80a3 	bne.w	a7c0 <_strtod_l+0x998>
    a67a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a67c:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a680:	2a00      	cmp	r2, #0
    a682:	d040      	beq.n	a706 <_strtod_l+0x8de>
    a684:	4a96      	ldr	r2, [pc, #600]	; (a8e0 <_strtod_l+0xab8>)
    a686:	4293      	cmp	r3, r2
    a688:	d158      	bne.n	a73c <_strtod_l+0x914>
    a68a:	9b04      	ldr	r3, [sp, #16]
    a68c:	4642      	mov	r2, r8
    a68e:	b97b      	cbnz	r3, a6b0 <_strtod_l+0x888>
    a690:	f1b8 3fff 	cmp.w	r8, #4294967295
    a694:	f040 8089 	bne.w	a7aa <_strtod_l+0x982>
    a698:	4b92      	ldr	r3, [pc, #584]	; (a8e4 <_strtod_l+0xabc>)
    a69a:	4599      	cmp	r9, r3
    a69c:	f43f ae21 	beq.w	a2e2 <_strtod_l+0x4ba>
    a6a0:	4b91      	ldr	r3, [pc, #580]	; (a8e8 <_strtod_l+0xac0>)
    a6a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    a6a6:	ea09 0303 	and.w	r3, r9, r3
    a6aa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a6ae:	e61f      	b.n	a2f0 <_strtod_l+0x4c8>
    a6b0:	4b8d      	ldr	r3, [pc, #564]	; (a8e8 <_strtod_l+0xac0>)
    a6b2:	ea09 0303 	and.w	r3, r9, r3
    a6b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a6ba:	d916      	bls.n	a6ea <_strtod_l+0x8c2>
    a6bc:	f118 0101 	adds.w	r1, r8, #1
    a6c0:	d11b      	bne.n	a6fa <_strtod_l+0x8d2>
    a6c2:	4a88      	ldr	r2, [pc, #544]	; (a8e4 <_strtod_l+0xabc>)
    a6c4:	4591      	cmp	r9, r2
    a6c6:	f43f ae0c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a6ca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a6ce:	4680      	mov	r8, r0
    a6d0:	4b86      	ldr	r3, [pc, #536]	; (a8ec <_strtod_l+0xac4>)
    a6d2:	4640      	mov	r0, r8
    a6d4:	4649      	mov	r1, r9
    a6d6:	2200      	movs	r2, #0
    a6d8:	f7fd fefa 	bl	84d0 <__aeabi_dmul>
    a6dc:	460b      	mov	r3, r1
    a6de:	4680      	mov	r8, r0
    a6e0:	4689      	mov	r9, r1
    a6e2:	4303      	orrs	r3, r0
    a6e4:	f47f ae04 	bne.w	a2f0 <_strtod_l+0x4c8>
    a6e8:	e7af      	b.n	a64a <_strtod_l+0x822>
    a6ea:	0d1e      	lsrs	r6, r3, #20
    a6ec:	f04f 31ff 	mov.w	r1, #4294967295
    a6f0:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    a6f4:	40b1      	lsls	r1, r6
    a6f6:	4588      	cmp	r8, r1
    a6f8:	d0e7      	beq.n	a6ca <_strtod_l+0x8a2>
    a6fa:	2c00      	cmp	r4, #0
    a6fc:	d05e      	beq.n	a7bc <_strtod_l+0x994>
    a6fe:	ea14 0f0b 	tst.w	r4, fp
    a702:	d0e5      	beq.n	a6d0 <_strtod_l+0x8a8>
    a704:	e01e      	b.n	a744 <_strtod_l+0x91c>
    a706:	2b00      	cmp	r3, #0
    a708:	d14a      	bne.n	a7a0 <_strtod_l+0x978>
    a70a:	f1b8 0f00 	cmp.w	r8, #0
    a70e:	d08b      	beq.n	a628 <_strtod_l+0x800>
    a710:	b364      	cbz	r4, a76c <_strtod_l+0x944>
    a712:	ea14 0f0b 	tst.w	r4, fp
    a716:	e02b      	b.n	a770 <_strtod_l+0x948>
    a718:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a71c:	f04f 38ff 	mov.w	r8, #4294967295
    a720:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a724:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a728:	e7d2      	b.n	a6d0 <_strtod_l+0x8a8>
    a72a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a72e:	f04f 38ff 	mov.w	r8, #4294967295
    a732:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a736:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a73a:	e5d9      	b.n	a2f0 <_strtod_l+0x4c8>
    a73c:	b19c      	cbz	r4, a766 <_strtod_l+0x93e>
    a73e:	ea14 0f09 	tst.w	r4, r9
    a742:	d00c      	beq.n	a75e <_strtod_l+0x936>
    a744:	9a04      	ldr	r2, [sp, #16]
    a746:	4640      	mov	r0, r8
    a748:	4649      	mov	r1, r9
    a74a:	f027 f9b8 	bl	31abe <sulp>
    a74e:	4602      	mov	r2, r0
    a750:	460b      	mov	r3, r1
    a752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a756:	f7fd fd05 	bl	8164 <__adddf3>
    a75a:	4680      	mov	r8, r0
    a75c:	4689      	mov	r9, r1
    a75e:	9b04      	ldr	r3, [sp, #16]
    a760:	2b00      	cmp	r3, #0
    a762:	d1b5      	bne.n	a6d0 <_strtod_l+0x8a8>
    a764:	e5c4      	b.n	a2f0 <_strtod_l+0x4c8>
    a766:	ea15 0f08 	tst.w	r5, r8
    a76a:	e7ea      	b.n	a742 <_strtod_l+0x91a>
    a76c:	ea18 0f05 	tst.w	r8, r5
    a770:	d0f5      	beq.n	a75e <_strtod_l+0x936>
    a772:	9a04      	ldr	r2, [sp, #16]
    a774:	4640      	mov	r0, r8
    a776:	4649      	mov	r1, r9
    a778:	f027 f9a1 	bl	31abe <sulp>
    a77c:	4602      	mov	r2, r0
    a77e:	460b      	mov	r3, r1
    a780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a784:	f7fd fcec 	bl	8160 <__aeabi_dsub>
    a788:	2200      	movs	r2, #0
    a78a:	2300      	movs	r3, #0
    a78c:	4604      	mov	r4, r0
    a78e:	460d      	mov	r5, r1
    a790:	f7fe fc64 	bl	905c <__aeabi_dcmpeq>
    a794:	2800      	cmp	r0, #0
    a796:	f47f af54 	bne.w	a642 <_strtod_l+0x81a>
    a79a:	46a0      	mov	r8, r4
    a79c:	46a9      	mov	r9, r5
    a79e:	e7de      	b.n	a75e <_strtod_l+0x936>
    a7a0:	2c00      	cmp	r4, #0
    a7a2:	d1b6      	bne.n	a712 <_strtod_l+0x8ea>
    a7a4:	ea15 0f08 	tst.w	r5, r8
    a7a8:	e7e2      	b.n	a770 <_strtod_l+0x948>
    a7aa:	b124      	cbz	r4, a7b6 <_strtod_l+0x98e>
    a7ac:	ea14 0f09 	tst.w	r4, r9
    a7b0:	f43f ad9e 	beq.w	a2f0 <_strtod_l+0x4c8>
    a7b4:	e7c6      	b.n	a744 <_strtod_l+0x91c>
    a7b6:	ea18 0f05 	tst.w	r8, r5
    a7ba:	e7f9      	b.n	a7b0 <_strtod_l+0x988>
    a7bc:	422a      	tst	r2, r5
    a7be:	e7a0      	b.n	a702 <_strtod_l+0x8da>
    a7c0:	9905      	ldr	r1, [sp, #20]
    a7c2:	9807      	ldr	r0, [sp, #28]
    a7c4:	f027 fc75 	bl	320b2 <__ratio>
    a7c8:	2200      	movs	r2, #0
    a7ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a7ce:	4604      	mov	r4, r0
    a7d0:	460d      	mov	r5, r1
    a7d2:	f7fe fc57 	bl	9084 <__aeabi_dcmple>
    a7d6:	2800      	cmp	r0, #0
    a7d8:	d06d      	beq.n	a8b6 <_strtod_l+0xa8e>
    a7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a7dc:	2b00      	cmp	r3, #0
    a7de:	d178      	bne.n	a8d2 <_strtod_l+0xaaa>
    a7e0:	f1b8 0f00 	cmp.w	r8, #0
    a7e4:	d156      	bne.n	a894 <_strtod_l+0xa6c>
    a7e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d159      	bne.n	a8a2 <_strtod_l+0xa7a>
    a7ee:	2200      	movs	r2, #0
    a7f0:	4b3f      	ldr	r3, [pc, #252]	; (a8f0 <_strtod_l+0xac8>)
    a7f2:	4620      	mov	r0, r4
    a7f4:	4629      	mov	r1, r5
    a7f6:	f7fe fc3b 	bl	9070 <__aeabi_dcmplt>
    a7fa:	2800      	cmp	r0, #0
    a7fc:	d158      	bne.n	a8b0 <_strtod_l+0xa88>
    a7fe:	4620      	mov	r0, r4
    a800:	4629      	mov	r1, r5
    a802:	2200      	movs	r2, #0
    a804:	4b3b      	ldr	r3, [pc, #236]	; (a8f4 <_strtod_l+0xacc>)
    a806:	f7fd fe63 	bl	84d0 <__aeabi_dmul>
    a80a:	4604      	mov	r4, r0
    a80c:	460d      	mov	r5, r1
    a80e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a812:	9408      	str	r4, [sp, #32]
    a814:	9309      	str	r3, [sp, #36]	; 0x24
    a816:	4b34      	ldr	r3, [pc, #208]	; (a8e8 <_strtod_l+0xac0>)
    a818:	4a33      	ldr	r2, [pc, #204]	; (a8e8 <_strtod_l+0xac0>)
    a81a:	ea0b 0303 	and.w	r3, fp, r3
    a81e:	ea0b 0202 	and.w	r2, fp, r2
    a822:	9315      	str	r3, [sp, #84]	; 0x54
    a824:	4b34      	ldr	r3, [pc, #208]	; (a8f8 <_strtod_l+0xad0>)
    a826:	429a      	cmp	r2, r3
    a828:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a82c:	f040 809e 	bne.w	a96c <_strtod_l+0xb44>
    a830:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    a834:	4640      	mov	r0, r8
    a836:	4649      	mov	r1, r9
    a838:	f01e fa76 	bl	28d28 <__ulp>
    a83c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a840:	f7fd fe46 	bl	84d0 <__aeabi_dmul>
    a844:	4642      	mov	r2, r8
    a846:	464b      	mov	r3, r9
    a848:	f7fd fc8c 	bl	8164 <__adddf3>
    a84c:	460b      	mov	r3, r1
    a84e:	4926      	ldr	r1, [pc, #152]	; (a8e8 <_strtod_l+0xac0>)
    a850:	4680      	mov	r8, r0
    a852:	4a2a      	ldr	r2, [pc, #168]	; (a8fc <_strtod_l+0xad4>)
    a854:	4019      	ands	r1, r3
    a856:	4291      	cmp	r1, r2
    a858:	d954      	bls.n	a904 <_strtod_l+0xadc>
    a85a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a85c:	4b21      	ldr	r3, [pc, #132]	; (a8e4 <_strtod_l+0xabc>)
    a85e:	429a      	cmp	r2, r3
    a860:	d103      	bne.n	a86a <_strtod_l+0xa42>
    a862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a864:	3301      	adds	r3, #1
    a866:	f43f ad3c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a86a:	f8df 9078 	ldr.w	r9, [pc, #120]	; a8e4 <_strtod_l+0xabc>
    a86e:	f04f 38ff 	mov.w	r8, #4294967295
    a872:	9918      	ldr	r1, [sp, #96]	; 0x60
    a874:	4650      	mov	r0, sl
    a876:	f01d ff87 	bl	28788 <_Bfree>
    a87a:	9906      	ldr	r1, [sp, #24]
    a87c:	4650      	mov	r0, sl
    a87e:	f01d ff83 	bl	28788 <_Bfree>
    a882:	9905      	ldr	r1, [sp, #20]
    a884:	4650      	mov	r0, sl
    a886:	f01d ff7f 	bl	28788 <_Bfree>
    a88a:	9907      	ldr	r1, [sp, #28]
    a88c:	4650      	mov	r0, sl
    a88e:	f01d ff7b 	bl	28788 <_Bfree>
    a892:	e5d5      	b.n	a440 <_strtod_l+0x618>
    a894:	f1b8 0f01 	cmp.w	r8, #1
    a898:	d103      	bne.n	a8a2 <_strtod_l+0xa7a>
    a89a:	f1b9 0f00 	cmp.w	r9, #0
    a89e:	f43f aed0 	beq.w	a642 <_strtod_l+0x81a>
    a8a2:	4c17      	ldr	r4, [pc, #92]	; (a900 <_strtod_l+0xad8>)
    a8a4:	2300      	movs	r3, #0
    a8a6:	4d12      	ldr	r5, [pc, #72]	; (a8f0 <_strtod_l+0xac8>)
    a8a8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a8ac:	2400      	movs	r4, #0
    a8ae:	e7b2      	b.n	a816 <_strtod_l+0x9ee>
    a8b0:	2400      	movs	r4, #0
    a8b2:	4d10      	ldr	r5, [pc, #64]	; (a8f4 <_strtod_l+0xacc>)
    a8b4:	e7ab      	b.n	a80e <_strtod_l+0x9e6>
    a8b6:	4b0f      	ldr	r3, [pc, #60]	; (a8f4 <_strtod_l+0xacc>)
    a8b8:	4620      	mov	r0, r4
    a8ba:	4629      	mov	r1, r5
    a8bc:	2200      	movs	r2, #0
    a8be:	f7fd fe07 	bl	84d0 <__aeabi_dmul>
    a8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a8c4:	4604      	mov	r4, r0
    a8c6:	460d      	mov	r5, r1
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d0a0      	beq.n	a80e <_strtod_l+0x9e6>
    a8cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
    a8d0:	e7a1      	b.n	a816 <_strtod_l+0x9ee>
    a8d2:	4c07      	ldr	r4, [pc, #28]	; (a8f0 <_strtod_l+0xac8>)
    a8d4:	2300      	movs	r3, #0
    a8d6:	4625      	mov	r5, r4
    a8d8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a8dc:	461c      	mov	r4, r3
    a8de:	e79a      	b.n	a816 <_strtod_l+0x9ee>
    a8e0:	000fffff 	.word	0x000fffff
    a8e4:	7fefffff 	.word	0x7fefffff
    a8e8:	7ff00000 	.word	0x7ff00000
    a8ec:	39500000 	.word	0x39500000
    a8f0:	3ff00000 	.word	0x3ff00000
    a8f4:	3fe00000 	.word	0x3fe00000
    a8f8:	7fe00000 	.word	0x7fe00000
    a8fc:	7c9fffff 	.word	0x7c9fffff
    a900:	bff00000 	.word	0xbff00000
    a904:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    a908:	9b04      	ldr	r3, [sp, #16]
    a90a:	464e      	mov	r6, r9
    a90c:	2b00      	cmp	r3, #0
    a90e:	d1b0      	bne.n	a872 <_strtod_l+0xa4a>
    a910:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a914:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a916:	0d1b      	lsrs	r3, r3, #20
    a918:	051b      	lsls	r3, r3, #20
    a91a:	429a      	cmp	r2, r3
    a91c:	d1a9      	bne.n	a872 <_strtod_l+0xa4a>
    a91e:	4620      	mov	r0, r4
    a920:	4629      	mov	r1, r5
    a922:	f7fe fc03 	bl	912c <__aeabi_d2lz>
    a926:	f3c9 0613 	ubfx	r6, r9, #0, #20
    a92a:	f7fd fda3 	bl	8474 <__aeabi_l2d>
    a92e:	460b      	mov	r3, r1
    a930:	4602      	mov	r2, r0
    a932:	4629      	mov	r1, r5
    a934:	4620      	mov	r0, r4
    a936:	ea46 0608 	orr.w	r6, r6, r8
    a93a:	f7fd fc11 	bl	8160 <__aeabi_dsub>
    a93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a940:	4604      	mov	r4, r0
    a942:	460d      	mov	r5, r1
    a944:	431e      	orrs	r6, r3
    a946:	d04a      	beq.n	a9de <_strtod_l+0xbb6>
    a948:	a32d      	add	r3, pc, #180	; (adr r3, aa00 <_strtod_l+0xbd8>)
    a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a94e:	f7fe fb8f 	bl	9070 <__aeabi_dcmplt>
    a952:	2800      	cmp	r0, #0
    a954:	f47f accc 	bne.w	a2f0 <_strtod_l+0x4c8>
    a958:	4620      	mov	r0, r4
    a95a:	4629      	mov	r1, r5
    a95c:	a32a      	add	r3, pc, #168	; (adr r3, aa08 <_strtod_l+0xbe0>)
    a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a962:	f7fe fba3 	bl	90ac <__aeabi_dcmpgt>
    a966:	2800      	cmp	r0, #0
    a968:	d083      	beq.n	a872 <_strtod_l+0xa4a>
    a96a:	e4c1      	b.n	a2f0 <_strtod_l+0x4c8>
    a96c:	9b04      	ldr	r3, [sp, #16]
    a96e:	b313      	cbz	r3, a9b6 <_strtod_l+0xb8e>
    a970:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a972:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a976:	d81e      	bhi.n	a9b6 <_strtod_l+0xb8e>
    a978:	4620      	mov	r0, r4
    a97a:	4629      	mov	r1, r5
    a97c:	a324      	add	r3, pc, #144	; (adr r3, aa10 <_strtod_l+0xbe8>)
    a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a982:	f7fe fb7f 	bl	9084 <__aeabi_dcmple>
    a986:	b190      	cbz	r0, a9ae <_strtod_l+0xb86>
    a988:	4629      	mov	r1, r5
    a98a:	4620      	mov	r0, r4
    a98c:	f7fe fb98 	bl	90c0 <__aeabi_d2uiz>
    a990:	2801      	cmp	r0, #1
    a992:	bf38      	it	cc
    a994:	2001      	movcc	r0, #1
    a996:	f7fd fd21 	bl	83dc <__aeabi_ui2d>
    a99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a99c:	4604      	mov	r4, r0
    a99e:	460d      	mov	r5, r1
    a9a0:	b9d3      	cbnz	r3, a9d8 <_strtod_l+0xbb0>
    a9a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a9a6:	9012      	str	r0, [sp, #72]	; 0x48
    a9a8:	9313      	str	r3, [sp, #76]	; 0x4c
    a9aa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    a9ae:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    a9b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a9b4:	1a9f      	subs	r7, r3, r2
    a9b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a9ba:	f01e f9b5 	bl	28d28 <__ulp>
    a9be:	4602      	mov	r2, r0
    a9c0:	460b      	mov	r3, r1
    a9c2:	4630      	mov	r0, r6
    a9c4:	4639      	mov	r1, r7
    a9c6:	f7fd fd83 	bl	84d0 <__aeabi_dmul>
    a9ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a9ce:	f7fd fbc9 	bl	8164 <__adddf3>
    a9d2:	4680      	mov	r8, r0
    a9d4:	4689      	mov	r9, r1
    a9d6:	e797      	b.n	a908 <_strtod_l+0xae0>
    a9d8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    a9dc:	e7e5      	b.n	a9aa <_strtod_l+0xb82>
    a9de:	a30e      	add	r3, pc, #56	; (adr r3, aa18 <_strtod_l+0xbf0>)
    a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9e4:	f7fe fb44 	bl	9070 <__aeabi_dcmplt>
    a9e8:	e7bd      	b.n	a966 <_strtod_l+0xb3e>
    a9ea:	2a65      	cmp	r2, #101	; 0x65
    a9ec:	f43f ab48 	beq.w	a080 <_strtod_l+0x258>
    a9f0:	2a45      	cmp	r2, #69	; 0x45
    a9f2:	f43f ab45 	beq.w	a080 <_strtod_l+0x258>
    a9f6:	2301      	movs	r3, #1
    a9f8:	f7ff bb7e 	b.w	a0f8 <_strtod_l+0x2d0>
    a9fc:	f3af 8000 	nop.w
    aa00:	94a03595 	.word	0x94a03595
    aa04:	3fdfffff 	.word	0x3fdfffff
    aa08:	35afe535 	.word	0x35afe535
    aa0c:	3fe00000 	.word	0x3fe00000
    aa10:	ffc00000 	.word	0xffc00000
    aa14:	41dfffff 	.word	0x41dfffff
    aa18:	94a03595 	.word	0x94a03595
    aa1c:	3fcfffff 	.word	0x3fcfffff

0000aa20 <_dtoa_r>:
    aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa24:	4614      	mov	r4, r2
    aa26:	b097      	sub	sp, #92	; 0x5c
    aa28:	461d      	mov	r5, r3
    aa2a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    aa2c:	4683      	mov	fp, r0
    aa2e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    aa30:	e9cd 4504 	strd	r4, r5, [sp, #16]
    aa34:	b97f      	cbnz	r7, aa56 <_dtoa_r+0x36>
    aa36:	2010      	movs	r0, #16
    aa38:	f01c f88c 	bl	26b54 <malloc>
    aa3c:	4602      	mov	r2, r0
    aa3e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    aa42:	b920      	cbnz	r0, aa4e <_dtoa_r+0x2e>
    aa44:	4ba2      	ldr	r3, [pc, #648]	; (acd0 <_dtoa_r+0x2b0>)
    aa46:	21ea      	movs	r1, #234	; 0xea
    aa48:	48a2      	ldr	r0, [pc, #648]	; (acd4 <_dtoa_r+0x2b4>)
    aa4a:	f01d faed 	bl	28028 <__assert_func>
    aa4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
    aa52:	6007      	str	r7, [r0, #0]
    aa54:	60c7      	str	r7, [r0, #12]
    aa56:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    aa5a:	6819      	ldr	r1, [r3, #0]
    aa5c:	b159      	cbz	r1, aa76 <_dtoa_r+0x56>
    aa5e:	685a      	ldr	r2, [r3, #4]
    aa60:	2301      	movs	r3, #1
    aa62:	4658      	mov	r0, fp
    aa64:	4093      	lsls	r3, r2
    aa66:	604a      	str	r2, [r1, #4]
    aa68:	608b      	str	r3, [r1, #8]
    aa6a:	f01d fe8d 	bl	28788 <_Bfree>
    aa6e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    aa72:	2200      	movs	r2, #0
    aa74:	601a      	str	r2, [r3, #0]
    aa76:	1e2b      	subs	r3, r5, #0
    aa78:	bfb7      	itett	lt
    aa7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    aa7e:	2300      	movge	r3, #0
    aa80:	2201      	movlt	r2, #1
    aa82:	9305      	strlt	r3, [sp, #20]
    aa84:	bfa8      	it	ge
    aa86:	6033      	strge	r3, [r6, #0]
    aa88:	9f05      	ldr	r7, [sp, #20]
    aa8a:	4b93      	ldr	r3, [pc, #588]	; (acd8 <_dtoa_r+0x2b8>)
    aa8c:	bfb8      	it	lt
    aa8e:	6032      	strlt	r2, [r6, #0]
    aa90:	43bb      	bics	r3, r7
    aa92:	d119      	bne.n	aac8 <_dtoa_r+0xa8>
    aa94:	f242 730f 	movw	r3, #9999	; 0x270f
    aa98:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aa9a:	6013      	str	r3, [r2, #0]
    aa9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    aaa0:	4323      	orrs	r3, r4
    aaa2:	f000 85e0 	beq.w	b666 <_dtoa_r+0xc46>
    aaa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    aaa8:	b953      	cbnz	r3, aac0 <_dtoa_r+0xa0>
    aaaa:	4b8c      	ldr	r3, [pc, #560]	; (acdc <_dtoa_r+0x2bc>)
    aaac:	e021      	b.n	aaf2 <_dtoa_r+0xd2>
    aaae:	4b8c      	ldr	r3, [pc, #560]	; (ace0 <_dtoa_r+0x2c0>)
    aab0:	9308      	str	r3, [sp, #32]
    aab2:	3308      	adds	r3, #8
    aab4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    aab6:	6013      	str	r3, [r2, #0]
    aab8:	9808      	ldr	r0, [sp, #32]
    aaba:	b017      	add	sp, #92	; 0x5c
    aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aac0:	4b86      	ldr	r3, [pc, #536]	; (acdc <_dtoa_r+0x2bc>)
    aac2:	9308      	str	r3, [sp, #32]
    aac4:	3303      	adds	r3, #3
    aac6:	e7f5      	b.n	aab4 <_dtoa_r+0x94>
    aac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aacc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    aad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aad4:	2200      	movs	r2, #0
    aad6:	2300      	movs	r3, #0
    aad8:	f7fe fac0 	bl	905c <__aeabi_dcmpeq>
    aadc:	4680      	mov	r8, r0
    aade:	b150      	cbz	r0, aaf6 <_dtoa_r+0xd6>
    aae0:	2301      	movs	r3, #1
    aae2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aae4:	6013      	str	r3, [r2, #0]
    aae6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    aae8:	b113      	cbz	r3, aaf0 <_dtoa_r+0xd0>
    aaea:	4b7e      	ldr	r3, [pc, #504]	; (ace4 <_dtoa_r+0x2c4>)
    aaec:	9a24      	ldr	r2, [sp, #144]	; 0x90
    aaee:	6013      	str	r3, [r2, #0]
    aaf0:	4b7d      	ldr	r3, [pc, #500]	; (ace8 <_dtoa_r+0x2c8>)
    aaf2:	9308      	str	r3, [sp, #32]
    aaf4:	e7e0      	b.n	aab8 <_dtoa_r+0x98>
    aaf6:	ab14      	add	r3, sp, #80	; 0x50
    aaf8:	f3c7 560a 	ubfx	r6, r7, #20, #11
    aafc:	4658      	mov	r0, fp
    aafe:	9301      	str	r3, [sp, #4]
    ab00:	ab15      	add	r3, sp, #84	; 0x54
    ab02:	9300      	str	r3, [sp, #0]
    ab04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ab08:	f01e f978 	bl	28dfc <__d2b>
    ab0c:	9003      	str	r0, [sp, #12]
    ab0e:	2e00      	cmp	r6, #0
    ab10:	d078      	beq.n	ac04 <_dtoa_r+0x1e4>
    ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ab14:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    ab18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    ab1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ab20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    ab24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ab28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ab2c:	4619      	mov	r1, r3
    ab2e:	2200      	movs	r2, #0
    ab30:	4b6e      	ldr	r3, [pc, #440]	; (acec <_dtoa_r+0x2cc>)
    ab32:	f7fd fb15 	bl	8160 <__aeabi_dsub>
    ab36:	a360      	add	r3, pc, #384	; (adr r3, acb8 <_dtoa_r+0x298>)
    ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab3c:	f7fd fcc8 	bl	84d0 <__aeabi_dmul>
    ab40:	a35f      	add	r3, pc, #380	; (adr r3, acc0 <_dtoa_r+0x2a0>)
    ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab46:	f7fd fb0d 	bl	8164 <__adddf3>
    ab4a:	4604      	mov	r4, r0
    ab4c:	460d      	mov	r5, r1
    ab4e:	4630      	mov	r0, r6
    ab50:	f7fd fc54 	bl	83fc <__aeabi_i2d>
    ab54:	a35c      	add	r3, pc, #368	; (adr r3, acc8 <_dtoa_r+0x2a8>)
    ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab5a:	f7fd fcb9 	bl	84d0 <__aeabi_dmul>
    ab5e:	4602      	mov	r2, r0
    ab60:	460b      	mov	r3, r1
    ab62:	4620      	mov	r0, r4
    ab64:	4629      	mov	r1, r5
    ab66:	f7fd fafd 	bl	8164 <__adddf3>
    ab6a:	4604      	mov	r4, r0
    ab6c:	460d      	mov	r5, r1
    ab6e:	f7fd fec1 	bl	88f4 <__aeabi_d2iz>
    ab72:	2200      	movs	r2, #0
    ab74:	4607      	mov	r7, r0
    ab76:	2300      	movs	r3, #0
    ab78:	4620      	mov	r0, r4
    ab7a:	4629      	mov	r1, r5
    ab7c:	f7fe fa78 	bl	9070 <__aeabi_dcmplt>
    ab80:	b140      	cbz	r0, ab94 <_dtoa_r+0x174>
    ab82:	4638      	mov	r0, r7
    ab84:	f7fd fc3a 	bl	83fc <__aeabi_i2d>
    ab88:	4622      	mov	r2, r4
    ab8a:	462b      	mov	r3, r5
    ab8c:	f7fe fa66 	bl	905c <__aeabi_dcmpeq>
    ab90:	b900      	cbnz	r0, ab94 <_dtoa_r+0x174>
    ab92:	3f01      	subs	r7, #1
    ab94:	2f16      	cmp	r7, #22
    ab96:	d854      	bhi.n	ac42 <_dtoa_r+0x222>
    ab98:	4b55      	ldr	r3, [pc, #340]	; (acf0 <_dtoa_r+0x2d0>)
    ab9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ab9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
    aba6:	f7fe fa63 	bl	9070 <__aeabi_dcmplt>
    abaa:	2800      	cmp	r0, #0
    abac:	d04b      	beq.n	ac46 <_dtoa_r+0x226>
    abae:	3f01      	subs	r7, #1
    abb0:	2300      	movs	r3, #0
    abb2:	9312      	str	r3, [sp, #72]	; 0x48
    abb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    abb6:	1b9b      	subs	r3, r3, r6
    abb8:	1e5a      	subs	r2, r3, #1
    abba:	bf4c      	ite	mi
    abbc:	f1c3 0301 	rsbmi	r3, r3, #1
    abc0:	2300      	movpl	r3, #0
    abc2:	920a      	str	r2, [sp, #40]	; 0x28
    abc4:	bf45      	ittet	mi
    abc6:	9306      	strmi	r3, [sp, #24]
    abc8:	2300      	movmi	r3, #0
    abca:	9306      	strpl	r3, [sp, #24]
    abcc:	930a      	strmi	r3, [sp, #40]	; 0x28
    abce:	2f00      	cmp	r7, #0
    abd0:	db3b      	blt.n	ac4a <_dtoa_r+0x22a>
    abd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abd4:	970f      	str	r7, [sp, #60]	; 0x3c
    abd6:	443b      	add	r3, r7
    abd8:	930a      	str	r3, [sp, #40]	; 0x28
    abda:	2300      	movs	r3, #0
    abdc:	930b      	str	r3, [sp, #44]	; 0x2c
    abde:	9b20      	ldr	r3, [sp, #128]	; 0x80
    abe0:	2b09      	cmp	r3, #9
    abe2:	f200 8089 	bhi.w	acf8 <_dtoa_r+0x2d8>
    abe6:	2b05      	cmp	r3, #5
    abe8:	bfc5      	ittet	gt
    abea:	3b04      	subgt	r3, #4
    abec:	2400      	movgt	r4, #0
    abee:	2401      	movle	r4, #1
    abf0:	9320      	strgt	r3, [sp, #128]	; 0x80
    abf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    abf4:	3b02      	subs	r3, #2
    abf6:	2b03      	cmp	r3, #3
    abf8:	f200 8089 	bhi.w	ad0e <_dtoa_r+0x2ee>
    abfc:	e8df f003 	tbb	[pc, r3]
    ac00:	59383a2d 	.word	0x59383a2d
    ac04:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    ac08:	441e      	add	r6, r3
    ac0a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    ac0e:	2b20      	cmp	r3, #32
    ac10:	bfc9      	itett	gt
    ac12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    ac16:	f1c3 0320 	rsble	r3, r3, #32
    ac1a:	409f      	lslgt	r7, r3
    ac1c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    ac20:	bfd8      	it	le
    ac22:	fa04 f003 	lslle.w	r0, r4, r3
    ac26:	f106 36ff 	add.w	r6, r6, #4294967295
    ac2a:	bfc4      	itt	gt
    ac2c:	fa24 f303 	lsrgt.w	r3, r4, r3
    ac30:	ea47 0003 	orrgt.w	r0, r7, r3
    ac34:	f7fd fbd2 	bl	83dc <__aeabi_ui2d>
    ac38:	2201      	movs	r2, #1
    ac3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    ac3e:	9213      	str	r2, [sp, #76]	; 0x4c
    ac40:	e774      	b.n	ab2c <_dtoa_r+0x10c>
    ac42:	2301      	movs	r3, #1
    ac44:	e7b5      	b.n	abb2 <_dtoa_r+0x192>
    ac46:	9012      	str	r0, [sp, #72]	; 0x48
    ac48:	e7b4      	b.n	abb4 <_dtoa_r+0x194>
    ac4a:	9b06      	ldr	r3, [sp, #24]
    ac4c:	1bdb      	subs	r3, r3, r7
    ac4e:	9306      	str	r3, [sp, #24]
    ac50:	427b      	negs	r3, r7
    ac52:	930b      	str	r3, [sp, #44]	; 0x2c
    ac54:	2300      	movs	r3, #0
    ac56:	930f      	str	r3, [sp, #60]	; 0x3c
    ac58:	e7c1      	b.n	abde <_dtoa_r+0x1be>
    ac5a:	2300      	movs	r3, #0
    ac5c:	930e      	str	r3, [sp, #56]	; 0x38
    ac5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac60:	2b00      	cmp	r3, #0
    ac62:	dc57      	bgt.n	ad14 <_dtoa_r+0x2f4>
    ac64:	2301      	movs	r3, #1
    ac66:	4699      	mov	r9, r3
    ac68:	461a      	mov	r2, r3
    ac6a:	9309      	str	r3, [sp, #36]	; 0x24
    ac6c:	9221      	str	r2, [sp, #132]	; 0x84
    ac6e:	e00c      	b.n	ac8a <_dtoa_r+0x26a>
    ac70:	2301      	movs	r3, #1
    ac72:	e7f3      	b.n	ac5c <_dtoa_r+0x23c>
    ac74:	2300      	movs	r3, #0
    ac76:	930e      	str	r3, [sp, #56]	; 0x38
    ac78:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac7a:	18fb      	adds	r3, r7, r3
    ac7c:	f103 0901 	add.w	r9, r3, #1
    ac80:	9309      	str	r3, [sp, #36]	; 0x24
    ac82:	464b      	mov	r3, r9
    ac84:	2b01      	cmp	r3, #1
    ac86:	bfb8      	it	lt
    ac88:	2301      	movlt	r3, #1
    ac8a:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    ac8e:	2100      	movs	r1, #0
    ac90:	2204      	movs	r2, #4
    ac92:	f102 0514 	add.w	r5, r2, #20
    ac96:	429d      	cmp	r5, r3
    ac98:	d940      	bls.n	ad1c <_dtoa_r+0x2fc>
    ac9a:	6041      	str	r1, [r0, #4]
    ac9c:	4658      	mov	r0, fp
    ac9e:	f01d fd33 	bl	28708 <_Balloc>
    aca2:	9008      	str	r0, [sp, #32]
    aca4:	2800      	cmp	r0, #0
    aca6:	d13c      	bne.n	ad22 <_dtoa_r+0x302>
    aca8:	4b12      	ldr	r3, [pc, #72]	; (acf4 <_dtoa_r+0x2d4>)
    acaa:	4602      	mov	r2, r0
    acac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    acb0:	e6ca      	b.n	aa48 <_dtoa_r+0x28>
    acb2:	2301      	movs	r3, #1
    acb4:	e7df      	b.n	ac76 <_dtoa_r+0x256>
    acb6:	bf00      	nop
    acb8:	636f4361 	.word	0x636f4361
    acbc:	3fd287a7 	.word	0x3fd287a7
    acc0:	8b60c8b3 	.word	0x8b60c8b3
    acc4:	3fc68a28 	.word	0x3fc68a28
    acc8:	509f79fb 	.word	0x509f79fb
    accc:	3fd34413 	.word	0x3fd34413
    acd0:	000386d6 	.word	0x000386d6
    acd4:	000387e8 	.word	0x000387e8
    acd8:	7ff00000 	.word	0x7ff00000
    acdc:	000387e4 	.word	0x000387e4
    ace0:	000387db 	.word	0x000387db
    ace4:	000367a2 	.word	0x000367a2
    ace8:	000367a1 	.word	0x000367a1
    acec:	3ff80000 	.word	0x3ff80000
    acf0:	00033178 	.word	0x00033178
    acf4:	0003885c 	.word	0x0003885c
    acf8:	2401      	movs	r4, #1
    acfa:	2300      	movs	r3, #0
    acfc:	940e      	str	r4, [sp, #56]	; 0x38
    acfe:	9320      	str	r3, [sp, #128]	; 0x80
    ad00:	f04f 33ff 	mov.w	r3, #4294967295
    ad04:	2200      	movs	r2, #0
    ad06:	4699      	mov	r9, r3
    ad08:	9309      	str	r3, [sp, #36]	; 0x24
    ad0a:	2312      	movs	r3, #18
    ad0c:	e7ae      	b.n	ac6c <_dtoa_r+0x24c>
    ad0e:	2301      	movs	r3, #1
    ad10:	930e      	str	r3, [sp, #56]	; 0x38
    ad12:	e7f5      	b.n	ad00 <_dtoa_r+0x2e0>
    ad14:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ad16:	4699      	mov	r9, r3
    ad18:	9309      	str	r3, [sp, #36]	; 0x24
    ad1a:	e7b6      	b.n	ac8a <_dtoa_r+0x26a>
    ad1c:	3101      	adds	r1, #1
    ad1e:	0052      	lsls	r2, r2, #1
    ad20:	e7b7      	b.n	ac92 <_dtoa_r+0x272>
    ad22:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ad26:	f1b9 0f0e 	cmp.w	r9, #14
    ad2a:	9a08      	ldr	r2, [sp, #32]
    ad2c:	601a      	str	r2, [r3, #0]
    ad2e:	d86f      	bhi.n	ae10 <_dtoa_r+0x3f0>
    ad30:	2c00      	cmp	r4, #0
    ad32:	d06d      	beq.n	ae10 <_dtoa_r+0x3f0>
    ad34:	2f00      	cmp	r7, #0
    ad36:	dd36      	ble.n	ada6 <_dtoa_r+0x386>
    ad38:	f007 020f 	and.w	r2, r7, #15
    ad3c:	4ba0      	ldr	r3, [pc, #640]	; (afc0 <_dtoa_r+0x5a0>)
    ad3e:	05f8      	lsls	r0, r7, #23
    ad40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ad44:	e9d3 3400 	ldrd	r3, r4, [r3]
    ad48:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    ad4c:	ea4f 1427 	mov.w	r4, r7, asr #4
    ad50:	d517      	bpl.n	ad82 <_dtoa_r+0x362>
    ad52:	4b9c      	ldr	r3, [pc, #624]	; (afc4 <_dtoa_r+0x5a4>)
    ad54:	f004 040f 	and.w	r4, r4, #15
    ad58:	f04f 0803 	mov.w	r8, #3
    ad5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    ad60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ad64:	f7fd fcde 	bl	8724 <__aeabi_ddiv>
    ad68:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ad6c:	4d95      	ldr	r5, [pc, #596]	; (afc4 <_dtoa_r+0x5a4>)
    ad6e:	b95c      	cbnz	r4, ad88 <_dtoa_r+0x368>
    ad70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ad74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ad78:	f7fd fcd4 	bl	8724 <__aeabi_ddiv>
    ad7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ad80:	e02b      	b.n	adda <_dtoa_r+0x3ba>
    ad82:	f04f 0802 	mov.w	r8, #2
    ad86:	e7f1      	b.n	ad6c <_dtoa_r+0x34c>
    ad88:	07e1      	lsls	r1, r4, #31
    ad8a:	d509      	bpl.n	ada0 <_dtoa_r+0x380>
    ad8c:	f108 0801 	add.w	r8, r8, #1
    ad90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ad94:	e9d5 2300 	ldrd	r2, r3, [r5]
    ad98:	f7fd fb9a 	bl	84d0 <__aeabi_dmul>
    ad9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    ada0:	1064      	asrs	r4, r4, #1
    ada2:	3508      	adds	r5, #8
    ada4:	e7e3      	b.n	ad6e <_dtoa_r+0x34e>
    ada6:	f000 8107 	beq.w	afb8 <_dtoa_r+0x598>
    adaa:	427c      	negs	r4, r7
    adac:	4b84      	ldr	r3, [pc, #528]	; (afc0 <_dtoa_r+0x5a0>)
    adae:	4d85      	ldr	r5, [pc, #532]	; (afc4 <_dtoa_r+0x5a4>)
    adb0:	f04f 0802 	mov.w	r8, #2
    adb4:	f004 020f 	and.w	r2, r4, #15
    adb8:	1124      	asrs	r4, r4, #4
    adba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    adbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    adc6:	f7fd fb83 	bl	84d0 <__aeabi_dmul>
    adca:	2300      	movs	r3, #0
    adcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    add0:	2c00      	cmp	r4, #0
    add2:	f040 80e5 	bne.w	afa0 <_dtoa_r+0x580>
    add6:	2b00      	cmp	r3, #0
    add8:	d1d0      	bne.n	ad7c <_dtoa_r+0x35c>
    adda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    addc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ade0:	2b00      	cmp	r3, #0
    ade2:	f000 814c 	beq.w	b07e <_dtoa_r+0x65e>
    ade6:	2200      	movs	r2, #0
    ade8:	4b77      	ldr	r3, [pc, #476]	; (afc8 <_dtoa_r+0x5a8>)
    adea:	4620      	mov	r0, r4
    adec:	4629      	mov	r1, r5
    adee:	f7fe f93f 	bl	9070 <__aeabi_dcmplt>
    adf2:	2800      	cmp	r0, #0
    adf4:	f000 8143 	beq.w	b07e <_dtoa_r+0x65e>
    adf8:	f1b9 0f00 	cmp.w	r9, #0
    adfc:	f000 813f 	beq.w	b07e <_dtoa_r+0x65e>
    ae00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae02:	2b00      	cmp	r3, #0
    ae04:	f300 80e4 	bgt.w	afd0 <_dtoa_r+0x5b0>
    ae08:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ae0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ae10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ae12:	2b00      	cmp	r3, #0
    ae14:	db02      	blt.n	ae1c <_dtoa_r+0x3fc>
    ae16:	2f0e      	cmp	r7, #14
    ae18:	f340 8242 	ble.w	b2a0 <_dtoa_r+0x880>
    ae1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ae1e:	2a00      	cmp	r2, #0
    ae20:	f040 8267 	bne.w	b2f2 <_dtoa_r+0x8d2>
    ae24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ae26:	2500      	movs	r5, #0
    ae28:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ae2c:	f1b8 0f00 	cmp.w	r8, #0
    ae30:	d00d      	beq.n	ae4e <_dtoa_r+0x42e>
    ae32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae34:	2b00      	cmp	r3, #0
    ae36:	dd0a      	ble.n	ae4e <_dtoa_r+0x42e>
    ae38:	4543      	cmp	r3, r8
    ae3a:	9a06      	ldr	r2, [sp, #24]
    ae3c:	bfa8      	it	ge
    ae3e:	4643      	movge	r3, r8
    ae40:	1ad2      	subs	r2, r2, r3
    ae42:	eba8 0803 	sub.w	r8, r8, r3
    ae46:	9206      	str	r2, [sp, #24]
    ae48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae4a:	1ad3      	subs	r3, r2, r3
    ae4c:	930a      	str	r3, [sp, #40]	; 0x28
    ae4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae50:	b30b      	cbz	r3, ae96 <_dtoa_r+0x476>
    ae52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae54:	2b00      	cmp	r3, #0
    ae56:	f000 82a6 	beq.w	b3a6 <_dtoa_r+0x986>
    ae5a:	2c00      	cmp	r4, #0
    ae5c:	f000 82a1 	beq.w	b3a2 <_dtoa_r+0x982>
    ae60:	4629      	mov	r1, r5
    ae62:	4622      	mov	r2, r4
    ae64:	4658      	mov	r0, fp
    ae66:	f01d fe03 	bl	28a70 <__pow5mult>
    ae6a:	9a03      	ldr	r2, [sp, #12]
    ae6c:	4601      	mov	r1, r0
    ae6e:	4605      	mov	r5, r0
    ae70:	4658      	mov	r0, fp
    ae72:	f01d fd53 	bl	2891c <__multiply>
    ae76:	9903      	ldr	r1, [sp, #12]
    ae78:	4606      	mov	r6, r0
    ae7a:	4658      	mov	r0, fp
    ae7c:	f01d fc84 	bl	28788 <_Bfree>
    ae80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae82:	1b1b      	subs	r3, r3, r4
    ae84:	930b      	str	r3, [sp, #44]	; 0x2c
    ae86:	f000 8291 	beq.w	b3ac <_dtoa_r+0x98c>
    ae8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ae8c:	4631      	mov	r1, r6
    ae8e:	4658      	mov	r0, fp
    ae90:	f01d fdee 	bl	28a70 <__pow5mult>
    ae94:	9003      	str	r0, [sp, #12]
    ae96:	2101      	movs	r1, #1
    ae98:	4658      	mov	r0, fp
    ae9a:	f01d fd29 	bl	288f0 <__i2b>
    ae9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aea0:	4604      	mov	r4, r0
    aea2:	2b00      	cmp	r3, #0
    aea4:	f000 8284 	beq.w	b3b0 <_dtoa_r+0x990>
    aea8:	461a      	mov	r2, r3
    aeaa:	4601      	mov	r1, r0
    aeac:	4658      	mov	r0, fp
    aeae:	f01d fddf 	bl	28a70 <__pow5mult>
    aeb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aeb4:	4604      	mov	r4, r0
    aeb6:	2b01      	cmp	r3, #1
    aeb8:	dc03      	bgt.n	aec2 <_dtoa_r+0x4a2>
    aeba:	9b04      	ldr	r3, [sp, #16]
    aebc:	2b00      	cmp	r3, #0
    aebe:	f000 827c 	beq.w	b3ba <_dtoa_r+0x99a>
    aec2:	2600      	movs	r6, #0
    aec4:	6923      	ldr	r3, [r4, #16]
    aec6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    aeca:	6918      	ldr	r0, [r3, #16]
    aecc:	f027 f887 	bl	31fde <__hi0bits>
    aed0:	f1c0 0020 	rsb	r0, r0, #32
    aed4:	960f      	str	r6, [sp, #60]	; 0x3c
    aed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aed8:	4418      	add	r0, r3
    aeda:	f010 001f 	ands.w	r0, r0, #31
    aede:	f000 8291 	beq.w	b404 <_dtoa_r+0x9e4>
    aee2:	f1c0 0320 	rsb	r3, r0, #32
    aee6:	2b04      	cmp	r3, #4
    aee8:	f340 8281 	ble.w	b3ee <_dtoa_r+0x9ce>
    aeec:	f1c0 001c 	rsb	r0, r0, #28
    aef0:	9b06      	ldr	r3, [sp, #24]
    aef2:	4403      	add	r3, r0
    aef4:	4480      	add	r8, r0
    aef6:	9306      	str	r3, [sp, #24]
    aef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aefa:	4403      	add	r3, r0
    aefc:	930a      	str	r3, [sp, #40]	; 0x28
    aefe:	9b06      	ldr	r3, [sp, #24]
    af00:	2b00      	cmp	r3, #0
    af02:	dd05      	ble.n	af10 <_dtoa_r+0x4f0>
    af04:	461a      	mov	r2, r3
    af06:	9903      	ldr	r1, [sp, #12]
    af08:	4658      	mov	r0, fp
    af0a:	f01d fe0b 	bl	28b24 <__lshift>
    af0e:	9003      	str	r0, [sp, #12]
    af10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af12:	2b00      	cmp	r3, #0
    af14:	dd05      	ble.n	af22 <_dtoa_r+0x502>
    af16:	4621      	mov	r1, r4
    af18:	461a      	mov	r2, r3
    af1a:	4658      	mov	r0, fp
    af1c:	f01d fe02 	bl	28b24 <__lshift>
    af20:	4604      	mov	r4, r0
    af22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    af24:	2b00      	cmp	r3, #0
    af26:	f000 8276 	beq.w	b416 <_dtoa_r+0x9f6>
    af2a:	4621      	mov	r1, r4
    af2c:	9803      	ldr	r0, [sp, #12]
    af2e:	f027 f8a5 	bl	3207c <__mcmp>
    af32:	2800      	cmp	r0, #0
    af34:	f280 826f 	bge.w	b416 <_dtoa_r+0x9f6>
    af38:	2300      	movs	r3, #0
    af3a:	220a      	movs	r2, #10
    af3c:	9903      	ldr	r1, [sp, #12]
    af3e:	4658      	mov	r0, fp
    af40:	f01d fc44 	bl	287cc <__multadd>
    af44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af46:	1e7e      	subs	r6, r7, #1
    af48:	9003      	str	r0, [sp, #12]
    af4a:	2b00      	cmp	r3, #0
    af4c:	f000 825c 	beq.w	b408 <_dtoa_r+0x9e8>
    af50:	2300      	movs	r3, #0
    af52:	4629      	mov	r1, r5
    af54:	220a      	movs	r2, #10
    af56:	4658      	mov	r0, fp
    af58:	f01d fc38 	bl	287cc <__multadd>
    af5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af5e:	4605      	mov	r5, r0
    af60:	2b00      	cmp	r3, #0
    af62:	dc03      	bgt.n	af6c <_dtoa_r+0x54c>
    af64:	9b20      	ldr	r3, [sp, #128]	; 0x80
    af66:	2b02      	cmp	r3, #2
    af68:	f300 825e 	bgt.w	b428 <_dtoa_r+0xa08>
    af6c:	f1b8 0f00 	cmp.w	r8, #0
    af70:	dd05      	ble.n	af7e <_dtoa_r+0x55e>
    af72:	4629      	mov	r1, r5
    af74:	4642      	mov	r2, r8
    af76:	4658      	mov	r0, fp
    af78:	f01d fdd4 	bl	28b24 <__lshift>
    af7c:	4605      	mov	r5, r0
    af7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af80:	2b00      	cmp	r3, #0
    af82:	f000 82d0 	beq.w	b526 <_dtoa_r+0xb06>
    af86:	6869      	ldr	r1, [r5, #4]
    af88:	4658      	mov	r0, fp
    af8a:	f01d fbbd 	bl	28708 <_Balloc>
    af8e:	4607      	mov	r7, r0
    af90:	2800      	cmp	r0, #0
    af92:	f040 827f 	bne.w	b494 <_dtoa_r+0xa74>
    af96:	4b0d      	ldr	r3, [pc, #52]	; (afcc <_dtoa_r+0x5ac>)
    af98:	4602      	mov	r2, r0
    af9a:	f240 21ea 	movw	r1, #746	; 0x2ea
    af9e:	e553      	b.n	aa48 <_dtoa_r+0x28>
    afa0:	07e2      	lsls	r2, r4, #31
    afa2:	d506      	bpl.n	afb2 <_dtoa_r+0x592>
    afa4:	f108 0801 	add.w	r8, r8, #1
    afa8:	e9d5 2300 	ldrd	r2, r3, [r5]
    afac:	f7fd fa90 	bl	84d0 <__aeabi_dmul>
    afb0:	2301      	movs	r3, #1
    afb2:	1064      	asrs	r4, r4, #1
    afb4:	3508      	adds	r5, #8
    afb6:	e70b      	b.n	add0 <_dtoa_r+0x3b0>
    afb8:	f04f 0802 	mov.w	r8, #2
    afbc:	e70d      	b.n	adda <_dtoa_r+0x3ba>
    afbe:	bf00      	nop
    afc0:	00033178 	.word	0x00033178
    afc4:	00033150 	.word	0x00033150
    afc8:	3ff00000 	.word	0x3ff00000
    afcc:	0003885c 	.word	0x0003885c
    afd0:	4620      	mov	r0, r4
    afd2:	2200      	movs	r2, #0
    afd4:	4bac      	ldr	r3, [pc, #688]	; (b288 <_dtoa_r+0x868>)
    afd6:	4629      	mov	r1, r5
    afd8:	f7fd fa7a 	bl	84d0 <__aeabi_dmul>
    afdc:	1e7e      	subs	r6, r7, #1
    afde:	f108 0801 	add.w	r8, r8, #1
    afe2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    afe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    afe8:	4640      	mov	r0, r8
    afea:	f7fd fa07 	bl	83fc <__aeabi_i2d>
    afee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aff2:	f7fd fa6d 	bl	84d0 <__aeabi_dmul>
    aff6:	4ba5      	ldr	r3, [pc, #660]	; (b28c <_dtoa_r+0x86c>)
    aff8:	2200      	movs	r2, #0
    affa:	f7fd f8b3 	bl	8164 <__adddf3>
    affe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    b002:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b006:	9311      	str	r3, [sp, #68]	; 0x44
    b008:	2c00      	cmp	r4, #0
    b00a:	d13b      	bne.n	b084 <_dtoa_r+0x664>
    b00c:	2200      	movs	r2, #0
    b00e:	4ba0      	ldr	r3, [pc, #640]	; (b290 <_dtoa_r+0x870>)
    b010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b014:	f7fd f8a4 	bl	8160 <__aeabi_dsub>
    b018:	4602      	mov	r2, r0
    b01a:	460b      	mov	r3, r1
    b01c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b024:	f7fe f842 	bl	90ac <__aeabi_dcmpgt>
    b028:	2800      	cmp	r0, #0
    b02a:	f040 8157 	bne.w	b2dc <_dtoa_r+0x8bc>
    b02e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    b032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b03a:	f7fe f819 	bl	9070 <__aeabi_dcmplt>
    b03e:	2800      	cmp	r0, #0
    b040:	f43f aee2 	beq.w	ae08 <_dtoa_r+0x3e8>
    b044:	2400      	movs	r4, #0
    b046:	4625      	mov	r5, r4
    b048:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b04a:	f8dd a020 	ldr.w	sl, [sp, #32]
    b04e:	43de      	mvns	r6, r3
    b050:	f04f 0800 	mov.w	r8, #0
    b054:	4621      	mov	r1, r4
    b056:	4658      	mov	r0, fp
    b058:	f01d fb96 	bl	28788 <_Bfree>
    b05c:	2d00      	cmp	r5, #0
    b05e:	f000 80a9 	beq.w	b1b4 <_dtoa_r+0x794>
    b062:	f1b8 0f00 	cmp.w	r8, #0
    b066:	d005      	beq.n	b074 <_dtoa_r+0x654>
    b068:	45a8      	cmp	r8, r5
    b06a:	d003      	beq.n	b074 <_dtoa_r+0x654>
    b06c:	4641      	mov	r1, r8
    b06e:	4658      	mov	r0, fp
    b070:	f01d fb8a 	bl	28788 <_Bfree>
    b074:	4629      	mov	r1, r5
    b076:	4658      	mov	r0, fp
    b078:	f01d fb86 	bl	28788 <_Bfree>
    b07c:	e09a      	b.n	b1b4 <_dtoa_r+0x794>
    b07e:	463e      	mov	r6, r7
    b080:	464c      	mov	r4, r9
    b082:	e7b1      	b.n	afe8 <_dtoa_r+0x5c8>
    b084:	4b83      	ldr	r3, [pc, #524]	; (b294 <_dtoa_r+0x874>)
    b086:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    b08a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    b08e:	9b08      	ldr	r3, [sp, #32]
    b090:	441c      	add	r4, r3
    b092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b094:	2b00      	cmp	r3, #0
    b096:	d04a      	beq.n	b12e <_dtoa_r+0x70e>
    b098:	4602      	mov	r2, r0
    b09a:	460b      	mov	r3, r1
    b09c:	2000      	movs	r0, #0
    b09e:	497e      	ldr	r1, [pc, #504]	; (b298 <_dtoa_r+0x878>)
    b0a0:	f7fd fb40 	bl	8724 <__aeabi_ddiv>
    b0a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b0a8:	f7fd f85a 	bl	8160 <__aeabi_dsub>
    b0ac:	f8dd a020 	ldr.w	sl, [sp, #32]
    b0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b0b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0b8:	f7fd fc1c 	bl	88f4 <__aeabi_d2iz>
    b0bc:	4605      	mov	r5, r0
    b0be:	f7fd f99d 	bl	83fc <__aeabi_i2d>
    b0c2:	4602      	mov	r2, r0
    b0c4:	3530      	adds	r5, #48	; 0x30
    b0c6:	460b      	mov	r3, r1
    b0c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0cc:	f7fd f848 	bl	8160 <__aeabi_dsub>
    b0d0:	f80a 5b01 	strb.w	r5, [sl], #1
    b0d4:	4602      	mov	r2, r0
    b0d6:	460b      	mov	r3, r1
    b0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b0dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b0e0:	f7fd ffe4 	bl	90ac <__aeabi_dcmpgt>
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d165      	bne.n	b1b4 <_dtoa_r+0x794>
    b0e8:	2000      	movs	r0, #0
    b0ea:	496c      	ldr	r1, [pc, #432]	; (b29c <_dtoa_r+0x87c>)
    b0ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b0f0:	f7fd f836 	bl	8160 <__aeabi_dsub>
    b0f4:	4602      	mov	r2, r0
    b0f6:	460b      	mov	r3, r1
    b0f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b0fc:	f7fd ffd6 	bl	90ac <__aeabi_dcmpgt>
    b100:	2800      	cmp	r0, #0
    b102:	f040 810d 	bne.w	b320 <_dtoa_r+0x900>
    b106:	45a2      	cmp	sl, r4
    b108:	f000 80ea 	beq.w	b2e0 <_dtoa_r+0x8c0>
    b10c:	2200      	movs	r2, #0
    b10e:	4b5e      	ldr	r3, [pc, #376]	; (b288 <_dtoa_r+0x868>)
    b110:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b114:	f7fd f9dc 	bl	84d0 <__aeabi_dmul>
    b118:	2200      	movs	r2, #0
    b11a:	4b5b      	ldr	r3, [pc, #364]	; (b288 <_dtoa_r+0x868>)
    b11c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b124:	f7fd f9d4 	bl	84d0 <__aeabi_dmul>
    b128:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b12c:	e7c2      	b.n	b0b4 <_dtoa_r+0x694>
    b12e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b132:	f7fd f9cd 	bl	84d0 <__aeabi_dmul>
    b136:	46a0      	mov	r8, r4
    b138:	f8dd a020 	ldr.w	sl, [sp, #32]
    b13c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b140:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b144:	f7fd fbd6 	bl	88f4 <__aeabi_d2iz>
    b148:	4605      	mov	r5, r0
    b14a:	f7fd f957 	bl	83fc <__aeabi_i2d>
    b14e:	4602      	mov	r2, r0
    b150:	3530      	adds	r5, #48	; 0x30
    b152:	460b      	mov	r3, r1
    b154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b158:	f7fd f802 	bl	8160 <__aeabi_dsub>
    b15c:	f80a 5b01 	strb.w	r5, [sl], #1
    b160:	4602      	mov	r2, r0
    b162:	460b      	mov	r3, r1
    b164:	45a2      	cmp	sl, r4
    b166:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b16a:	f04f 0200 	mov.w	r2, #0
    b16e:	d123      	bne.n	b1b8 <_dtoa_r+0x798>
    b170:	4b49      	ldr	r3, [pc, #292]	; (b298 <_dtoa_r+0x878>)
    b172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b176:	f7fc fff5 	bl	8164 <__adddf3>
    b17a:	4602      	mov	r2, r0
    b17c:	460b      	mov	r3, r1
    b17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b182:	f7fd ff93 	bl	90ac <__aeabi_dcmpgt>
    b186:	2800      	cmp	r0, #0
    b188:	f040 80ca 	bne.w	b320 <_dtoa_r+0x900>
    b18c:	2000      	movs	r0, #0
    b18e:	4942      	ldr	r1, [pc, #264]	; (b298 <_dtoa_r+0x878>)
    b190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b194:	f7fc ffe4 	bl	8160 <__aeabi_dsub>
    b198:	4602      	mov	r2, r0
    b19a:	460b      	mov	r3, r1
    b19c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b1a0:	f7fd ff66 	bl	9070 <__aeabi_dcmplt>
    b1a4:	b170      	cbz	r0, b1c4 <_dtoa_r+0x7a4>
    b1a6:	46c2      	mov	sl, r8
    b1a8:	f108 38ff 	add.w	r8, r8, #4294967295
    b1ac:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b1b0:	2b30      	cmp	r3, #48	; 0x30
    b1b2:	d0f8      	beq.n	b1a6 <_dtoa_r+0x786>
    b1b4:	4637      	mov	r7, r6
    b1b6:	e055      	b.n	b264 <_dtoa_r+0x844>
    b1b8:	4b33      	ldr	r3, [pc, #204]	; (b288 <_dtoa_r+0x868>)
    b1ba:	f7fd f989 	bl	84d0 <__aeabi_dmul>
    b1be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b1c2:	e7bd      	b.n	b140 <_dtoa_r+0x720>
    b1c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b1c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b1cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	f6ff ae28 	blt.w	ae24 <_dtoa_r+0x404>
    b1d4:	2f0e      	cmp	r7, #14
    b1d6:	f73f ae25 	bgt.w	ae24 <_dtoa_r+0x404>
    b1da:	4b2e      	ldr	r3, [pc, #184]	; (b294 <_dtoa_r+0x874>)
    b1dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b1e0:	e9d3 3400 	ldrd	r3, r4, [r3]
    b1e4:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b1e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	da02      	bge.n	b1f4 <_dtoa_r+0x7d4>
    b1ee:	f1b9 0f00 	cmp.w	r9, #0
    b1f2:	d064      	beq.n	b2be <_dtoa_r+0x89e>
    b1f4:	f8dd a020 	ldr.w	sl, [sp, #32]
    b1f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    b1fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b200:	4620      	mov	r0, r4
    b202:	4629      	mov	r1, r5
    b204:	f7fd fa8e 	bl	8724 <__aeabi_ddiv>
    b208:	f7fd fb74 	bl	88f4 <__aeabi_d2iz>
    b20c:	4606      	mov	r6, r0
    b20e:	f7fd f8f5 	bl	83fc <__aeabi_i2d>
    b212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b216:	f7fd f95b 	bl	84d0 <__aeabi_dmul>
    b21a:	4602      	mov	r2, r0
    b21c:	4620      	mov	r0, r4
    b21e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    b222:	460b      	mov	r3, r1
    b224:	4629      	mov	r1, r5
    b226:	f7fc ff9b 	bl	8160 <__aeabi_dsub>
    b22a:	f80a 4b01 	strb.w	r4, [sl], #1
    b22e:	9c08      	ldr	r4, [sp, #32]
    b230:	4602      	mov	r2, r0
    b232:	460b      	mov	r3, r1
    b234:	ebaa 0404 	sub.w	r4, sl, r4
    b238:	45a1      	cmp	r9, r4
    b23a:	f040 8082 	bne.w	b342 <_dtoa_r+0x922>
    b23e:	f7fc ff91 	bl	8164 <__adddf3>
    b242:	4604      	mov	r4, r0
    b244:	460d      	mov	r5, r1
    b246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b24a:	f7fd ff2f 	bl	90ac <__aeabi_dcmpgt>
    b24e:	2800      	cmp	r0, #0
    b250:	d165      	bne.n	b31e <_dtoa_r+0x8fe>
    b252:	4620      	mov	r0, r4
    b254:	4629      	mov	r1, r5
    b256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b25a:	f7fd feff 	bl	905c <__aeabi_dcmpeq>
    b25e:	b108      	cbz	r0, b264 <_dtoa_r+0x844>
    b260:	07f3      	lsls	r3, r6, #31
    b262:	d45c      	bmi.n	b31e <_dtoa_r+0x8fe>
    b264:	9903      	ldr	r1, [sp, #12]
    b266:	4658      	mov	r0, fp
    b268:	f01d fa8e 	bl	28788 <_Bfree>
    b26c:	2300      	movs	r3, #0
    b26e:	3701      	adds	r7, #1
    b270:	f88a 3000 	strb.w	r3, [sl]
    b274:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b276:	601f      	str	r7, [r3, #0]
    b278:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b27a:	2b00      	cmp	r3, #0
    b27c:	f43f ac1c 	beq.w	aab8 <_dtoa_r+0x98>
    b280:	f8c3 a000 	str.w	sl, [r3]
    b284:	e418      	b.n	aab8 <_dtoa_r+0x98>
    b286:	bf00      	nop
    b288:	40240000 	.word	0x40240000
    b28c:	401c0000 	.word	0x401c0000
    b290:	40140000 	.word	0x40140000
    b294:	00033178 	.word	0x00033178
    b298:	3fe00000 	.word	0x3fe00000
    b29c:	3ff00000 	.word	0x3ff00000
    b2a0:	4ba2      	ldr	r3, [pc, #648]	; (b52c <_dtoa_r+0xb0c>)
    b2a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b2a6:	e9d3 3400 	ldrd	r3, r4, [r3]
    b2aa:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	da9f      	bge.n	b1f4 <_dtoa_r+0x7d4>
    b2b4:	f1b9 0f00 	cmp.w	r9, #0
    b2b8:	dc9c      	bgt.n	b1f4 <_dtoa_r+0x7d4>
    b2ba:	f47f aec3 	bne.w	b044 <_dtoa_r+0x624>
    b2be:	2200      	movs	r2, #0
    b2c0:	4b9b      	ldr	r3, [pc, #620]	; (b530 <_dtoa_r+0xb10>)
    b2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b2c6:	f7fd f903 	bl	84d0 <__aeabi_dmul>
    b2ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b2ce:	f7fd fee3 	bl	9098 <__aeabi_dcmpge>
    b2d2:	4604      	mov	r4, r0
    b2d4:	2800      	cmp	r0, #0
    b2d6:	f47f aeb5 	bne.w	b044 <_dtoa_r+0x624>
    b2da:	463e      	mov	r6, r7
    b2dc:	4625      	mov	r5, r4
    b2de:	e0b4      	b.n	b44a <_dtoa_r+0xa2a>
    b2e0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b2e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	db01      	blt.n	b2f2 <_dtoa_r+0x8d2>
    b2ee:	2f0e      	cmp	r7, #14
    b2f0:	ddd6      	ble.n	b2a0 <_dtoa_r+0x880>
    b2f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b2f4:	2a01      	cmp	r2, #1
    b2f6:	dc36      	bgt.n	b366 <_dtoa_r+0x946>
    b2f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b2fa:	b382      	cbz	r2, b35e <_dtoa_r+0x93e>
    b2fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
    b300:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b302:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b306:	9a06      	ldr	r2, [sp, #24]
    b308:	2101      	movs	r1, #1
    b30a:	4658      	mov	r0, fp
    b30c:	441a      	add	r2, r3
    b30e:	9206      	str	r2, [sp, #24]
    b310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b312:	441a      	add	r2, r3
    b314:	920a      	str	r2, [sp, #40]	; 0x28
    b316:	f01d faeb 	bl	288f0 <__i2b>
    b31a:	4605      	mov	r5, r0
    b31c:	e586      	b.n	ae2c <_dtoa_r+0x40c>
    b31e:	463e      	mov	r6, r7
    b320:	4653      	mov	r3, sl
    b322:	469a      	mov	sl, r3
    b324:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    b328:	2a39      	cmp	r2, #57	; 0x39
    b32a:	d106      	bne.n	b33a <_dtoa_r+0x91a>
    b32c:	9a08      	ldr	r2, [sp, #32]
    b32e:	429a      	cmp	r2, r3
    b330:	d1f7      	bne.n	b322 <_dtoa_r+0x902>
    b332:	2230      	movs	r2, #48	; 0x30
    b334:	9908      	ldr	r1, [sp, #32]
    b336:	3601      	adds	r6, #1
    b338:	700a      	strb	r2, [r1, #0]
    b33a:	781a      	ldrb	r2, [r3, #0]
    b33c:	3201      	adds	r2, #1
    b33e:	701a      	strb	r2, [r3, #0]
    b340:	e738      	b.n	b1b4 <_dtoa_r+0x794>
    b342:	2200      	movs	r2, #0
    b344:	4b7b      	ldr	r3, [pc, #492]	; (b534 <_dtoa_r+0xb14>)
    b346:	f7fd f8c3 	bl	84d0 <__aeabi_dmul>
    b34a:	2200      	movs	r2, #0
    b34c:	2300      	movs	r3, #0
    b34e:	4604      	mov	r4, r0
    b350:	460d      	mov	r5, r1
    b352:	f7fd fe83 	bl	905c <__aeabi_dcmpeq>
    b356:	2800      	cmp	r0, #0
    b358:	f43f af50 	beq.w	b1fc <_dtoa_r+0x7dc>
    b35c:	e782      	b.n	b264 <_dtoa_r+0x844>
    b35e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b360:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    b364:	e7cc      	b.n	b300 <_dtoa_r+0x8e0>
    b366:	f109 34ff 	add.w	r4, r9, #4294967295
    b36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b36c:	42a3      	cmp	r3, r4
    b36e:	db08      	blt.n	b382 <_dtoa_r+0x962>
    b370:	f1b9 0f00 	cmp.w	r9, #0
    b374:	eba3 0404 	sub.w	r4, r3, r4
    b378:	db0e      	blt.n	b398 <_dtoa_r+0x978>
    b37a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b37e:	464b      	mov	r3, r9
    b380:	e7c1      	b.n	b306 <_dtoa_r+0x8e6>
    b382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b386:	1ae3      	subs	r3, r4, r3
    b388:	940b      	str	r4, [sp, #44]	; 0x2c
    b38a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b38e:	2400      	movs	r4, #0
    b390:	441a      	add	r2, r3
    b392:	464b      	mov	r3, r9
    b394:	920f      	str	r2, [sp, #60]	; 0x3c
    b396:	e7b6      	b.n	b306 <_dtoa_r+0x8e6>
    b398:	9b06      	ldr	r3, [sp, #24]
    b39a:	eba3 0809 	sub.w	r8, r3, r9
    b39e:	2300      	movs	r3, #0
    b3a0:	e7b1      	b.n	b306 <_dtoa_r+0x8e6>
    b3a2:	9e03      	ldr	r6, [sp, #12]
    b3a4:	e571      	b.n	ae8a <_dtoa_r+0x46a>
    b3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b3a8:	9903      	ldr	r1, [sp, #12]
    b3aa:	e570      	b.n	ae8e <_dtoa_r+0x46e>
    b3ac:	9603      	str	r6, [sp, #12]
    b3ae:	e572      	b.n	ae96 <_dtoa_r+0x476>
    b3b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b3b2:	2b01      	cmp	r3, #1
    b3b4:	dc17      	bgt.n	b3e6 <_dtoa_r+0x9c6>
    b3b6:	9b04      	ldr	r3, [sp, #16]
    b3b8:	b9ab      	cbnz	r3, b3e6 <_dtoa_r+0x9c6>
    b3ba:	9b05      	ldr	r3, [sp, #20]
    b3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    b3c0:	b99b      	cbnz	r3, b3ea <_dtoa_r+0x9ca>
    b3c2:	9b05      	ldr	r3, [sp, #20]
    b3c4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    b3c8:	0d36      	lsrs	r6, r6, #20
    b3ca:	0536      	lsls	r6, r6, #20
    b3cc:	b136      	cbz	r6, b3dc <_dtoa_r+0x9bc>
    b3ce:	9b06      	ldr	r3, [sp, #24]
    b3d0:	2601      	movs	r6, #1
    b3d2:	3301      	adds	r3, #1
    b3d4:	9306      	str	r3, [sp, #24]
    b3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b3d8:	3301      	adds	r3, #1
    b3da:	930a      	str	r3, [sp, #40]	; 0x28
    b3dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b3de:	2b00      	cmp	r3, #0
    b3e0:	f47f ad70 	bne.w	aec4 <_dtoa_r+0x4a4>
    b3e4:	960f      	str	r6, [sp, #60]	; 0x3c
    b3e6:	2001      	movs	r0, #1
    b3e8:	e575      	b.n	aed6 <_dtoa_r+0x4b6>
    b3ea:	2600      	movs	r6, #0
    b3ec:	e7f6      	b.n	b3dc <_dtoa_r+0x9bc>
    b3ee:	f43f ad86 	beq.w	aefe <_dtoa_r+0x4de>
    b3f2:	331c      	adds	r3, #28
    b3f4:	9a06      	ldr	r2, [sp, #24]
    b3f6:	441a      	add	r2, r3
    b3f8:	4498      	add	r8, r3
    b3fa:	9206      	str	r2, [sp, #24]
    b3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b3fe:	441a      	add	r2, r3
    b400:	920a      	str	r2, [sp, #40]	; 0x28
    b402:	e57c      	b.n	aefe <_dtoa_r+0x4de>
    b404:	4603      	mov	r3, r0
    b406:	e7f4      	b.n	b3f2 <_dtoa_r+0x9d2>
    b408:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b40a:	2b00      	cmp	r3, #0
    b40c:	dc2b      	bgt.n	b466 <_dtoa_r+0xa46>
    b40e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b410:	2b02      	cmp	r3, #2
    b412:	dc09      	bgt.n	b428 <_dtoa_r+0xa08>
    b414:	e027      	b.n	b466 <_dtoa_r+0xa46>
    b416:	f1b9 0f00 	cmp.w	r9, #0
    b41a:	dc1d      	bgt.n	b458 <_dtoa_r+0xa38>
    b41c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b41e:	2b02      	cmp	r3, #2
    b420:	dd1a      	ble.n	b458 <_dtoa_r+0xa38>
    b422:	463e      	mov	r6, r7
    b424:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b42a:	2b00      	cmp	r3, #0
    b42c:	f47f ae0c 	bne.w	b048 <_dtoa_r+0x628>
    b430:	4621      	mov	r1, r4
    b432:	2205      	movs	r2, #5
    b434:	4658      	mov	r0, fp
    b436:	f01d f9c9 	bl	287cc <__multadd>
    b43a:	4601      	mov	r1, r0
    b43c:	4604      	mov	r4, r0
    b43e:	9803      	ldr	r0, [sp, #12]
    b440:	f026 fe1c 	bl	3207c <__mcmp>
    b444:	2800      	cmp	r0, #0
    b446:	f77f adff 	ble.w	b048 <_dtoa_r+0x628>
    b44a:	f8dd a020 	ldr.w	sl, [sp, #32]
    b44e:	2331      	movs	r3, #49	; 0x31
    b450:	3601      	adds	r6, #1
    b452:	f80a 3b01 	strb.w	r3, [sl], #1
    b456:	e5fb      	b.n	b050 <_dtoa_r+0x630>
    b458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b45a:	463e      	mov	r6, r7
    b45c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b460:	2b00      	cmp	r3, #0
    b462:	f47f ad83 	bne.w	af6c <_dtoa_r+0x54c>
    b466:	9f08      	ldr	r7, [sp, #32]
    b468:	4621      	mov	r1, r4
    b46a:	9803      	ldr	r0, [sp, #12]
    b46c:	f026 fba7 	bl	31bbe <quorem>
    b470:	9b08      	ldr	r3, [sp, #32]
    b472:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b476:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b478:	f807 9b01 	strb.w	r9, [r7], #1
    b47c:	1afb      	subs	r3, r7, r3
    b47e:	429a      	cmp	r2, r3
    b480:	f340 80cb 	ble.w	b61a <_dtoa_r+0xbfa>
    b484:	2300      	movs	r3, #0
    b486:	220a      	movs	r2, #10
    b488:	9903      	ldr	r1, [sp, #12]
    b48a:	4658      	mov	r0, fp
    b48c:	f01d f99e 	bl	287cc <__multadd>
    b490:	9003      	str	r0, [sp, #12]
    b492:	e7e9      	b.n	b468 <_dtoa_r+0xa48>
    b494:	692a      	ldr	r2, [r5, #16]
    b496:	f105 010c 	add.w	r1, r5, #12
    b49a:	300c      	adds	r0, #12
    b49c:	3202      	adds	r2, #2
    b49e:	0092      	lsls	r2, r2, #2
    b4a0:	f026 f935 	bl	3170e <memcpy>
    b4a4:	2201      	movs	r2, #1
    b4a6:	4639      	mov	r1, r7
    b4a8:	4658      	mov	r0, fp
    b4aa:	f01d fb3b 	bl	28b24 <__lshift>
    b4ae:	9b08      	ldr	r3, [sp, #32]
    b4b0:	46a8      	mov	r8, r5
    b4b2:	4605      	mov	r5, r0
    b4b4:	f103 0a01 	add.w	sl, r3, #1
    b4b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b4bc:	4413      	add	r3, r2
    b4be:	930a      	str	r3, [sp, #40]	; 0x28
    b4c0:	9b04      	ldr	r3, [sp, #16]
    b4c2:	f003 0301 	and.w	r3, r3, #1
    b4c6:	930b      	str	r3, [sp, #44]	; 0x2c
    b4c8:	f10a 33ff 	add.w	r3, sl, #4294967295
    b4cc:	4621      	mov	r1, r4
    b4ce:	9803      	ldr	r0, [sp, #12]
    b4d0:	9306      	str	r3, [sp, #24]
    b4d2:	f026 fb74 	bl	31bbe <quorem>
    b4d6:	4641      	mov	r1, r8
    b4d8:	9009      	str	r0, [sp, #36]	; 0x24
    b4da:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b4de:	9803      	ldr	r0, [sp, #12]
    b4e0:	f026 fdcc 	bl	3207c <__mcmp>
    b4e4:	462a      	mov	r2, r5
    b4e6:	4621      	mov	r1, r4
    b4e8:	4607      	mov	r7, r0
    b4ea:	4658      	mov	r0, fp
    b4ec:	f01d fb86 	bl	28bfc <__mdiff>
    b4f0:	68c2      	ldr	r2, [r0, #12]
    b4f2:	4601      	mov	r1, r0
    b4f4:	b302      	cbz	r2, b538 <_dtoa_r+0xb18>
    b4f6:	4658      	mov	r0, fp
    b4f8:	f01d f946 	bl	28788 <_Bfree>
    b4fc:	2f00      	cmp	r7, #0
    b4fe:	da3a      	bge.n	b576 <_dtoa_r+0xb56>
    b500:	2201      	movs	r2, #1
    b502:	9903      	ldr	r1, [sp, #12]
    b504:	4658      	mov	r0, fp
    b506:	f01d fb0d 	bl	28b24 <__lshift>
    b50a:	4621      	mov	r1, r4
    b50c:	9003      	str	r0, [sp, #12]
    b50e:	f026 fdb5 	bl	3207c <__mcmp>
    b512:	2800      	cmp	r0, #0
    b514:	dc03      	bgt.n	b51e <_dtoa_r+0xafe>
    b516:	d129      	bne.n	b56c <_dtoa_r+0xb4c>
    b518:	f019 0f01 	tst.w	r9, #1
    b51c:	d026      	beq.n	b56c <_dtoa_r+0xb4c>
    b51e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b522:	d11d      	bne.n	b560 <_dtoa_r+0xb40>
    b524:	e032      	b.n	b58c <_dtoa_r+0xb6c>
    b526:	4628      	mov	r0, r5
    b528:	e7c1      	b.n	b4ae <_dtoa_r+0xa8e>
    b52a:	bf00      	nop
    b52c:	00033178 	.word	0x00033178
    b530:	40140000 	.word	0x40140000
    b534:	40240000 	.word	0x40240000
    b538:	900e      	str	r0, [sp, #56]	; 0x38
    b53a:	9803      	ldr	r0, [sp, #12]
    b53c:	f026 fd9e 	bl	3207c <__mcmp>
    b540:	990e      	ldr	r1, [sp, #56]	; 0x38
    b542:	900c      	str	r0, [sp, #48]	; 0x30
    b544:	4658      	mov	r0, fp
    b546:	f01d f91f 	bl	28788 <_Bfree>
    b54a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b54c:	bb5a      	cbnz	r2, b5a6 <_dtoa_r+0xb86>
    b54e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b550:	b953      	cbnz	r3, b568 <_dtoa_r+0xb48>
    b552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b554:	b943      	cbnz	r3, b568 <_dtoa_r+0xb48>
    b556:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b55a:	d017      	beq.n	b58c <_dtoa_r+0xb6c>
    b55c:	2f00      	cmp	r7, #0
    b55e:	dd05      	ble.n	b56c <_dtoa_r+0xb4c>
    b560:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b562:	f103 0931 	add.w	r9, r3, #49	; 0x31
    b566:	e001      	b.n	b56c <_dtoa_r+0xb4c>
    b568:	2f00      	cmp	r7, #0
    b56a:	da2a      	bge.n	b5c2 <_dtoa_r+0xba2>
    b56c:	f8dd a018 	ldr.w	sl, [sp, #24]
    b570:	f80a 9b01 	strb.w	r9, [sl], #1
    b574:	e56e      	b.n	b054 <_dtoa_r+0x634>
    b576:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b578:	433b      	orrs	r3, r7
    b57a:	d104      	bne.n	b586 <_dtoa_r+0xb66>
    b57c:	9b04      	ldr	r3, [sp, #16]
    b57e:	f003 0301 	and.w	r3, r3, #1
    b582:	2b00      	cmp	r3, #0
    b584:	d0bc      	beq.n	b500 <_dtoa_r+0xae0>
    b586:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b58a:	d136      	bne.n	b5fa <_dtoa_r+0xbda>
    b58c:	9f06      	ldr	r7, [sp, #24]
    b58e:	2339      	movs	r3, #57	; 0x39
    b590:	f807 3b01 	strb.w	r3, [r7], #1
    b594:	46ba      	mov	sl, r7
    b596:	3f01      	subs	r7, #1
    b598:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b59c:	2b39      	cmp	r3, #57	; 0x39
    b59e:	d05a      	beq.n	b656 <_dtoa_r+0xc36>
    b5a0:	3301      	adds	r3, #1
    b5a2:	703b      	strb	r3, [r7, #0]
    b5a4:	e556      	b.n	b054 <_dtoa_r+0x634>
    b5a6:	2f00      	cmp	r7, #0
    b5a8:	db06      	blt.n	b5b8 <_dtoa_r+0xb98>
    b5aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b5ac:	433b      	orrs	r3, r7
    b5ae:	d106      	bne.n	b5be <_dtoa_r+0xb9e>
    b5b0:	9b04      	ldr	r3, [sp, #16]
    b5b2:	f003 0301 	and.w	r3, r3, #1
    b5b6:	b913      	cbnz	r3, b5be <_dtoa_r+0xb9e>
    b5b8:	2a00      	cmp	r2, #0
    b5ba:	dca1      	bgt.n	b500 <_dtoa_r+0xae0>
    b5bc:	e7d6      	b.n	b56c <_dtoa_r+0xb4c>
    b5be:	2a00      	cmp	r2, #0
    b5c0:	dce1      	bgt.n	b586 <_dtoa_r+0xb66>
    b5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5c4:	4657      	mov	r7, sl
    b5c6:	f80a 9c01 	strb.w	r9, [sl, #-1]
    b5ca:	4553      	cmp	r3, sl
    b5cc:	d02e      	beq.n	b62c <_dtoa_r+0xc0c>
    b5ce:	2300      	movs	r3, #0
    b5d0:	220a      	movs	r2, #10
    b5d2:	9903      	ldr	r1, [sp, #12]
    b5d4:	4658      	mov	r0, fp
    b5d6:	f01d f8f9 	bl	287cc <__multadd>
    b5da:	45a8      	cmp	r8, r5
    b5dc:	9003      	str	r0, [sp, #12]
    b5de:	f04f 0300 	mov.w	r3, #0
    b5e2:	f04f 020a 	mov.w	r2, #10
    b5e6:	4641      	mov	r1, r8
    b5e8:	4658      	mov	r0, fp
    b5ea:	d10b      	bne.n	b604 <_dtoa_r+0xbe4>
    b5ec:	f01d f8ee 	bl	287cc <__multadd>
    b5f0:	4680      	mov	r8, r0
    b5f2:	4605      	mov	r5, r0
    b5f4:	f10a 0a01 	add.w	sl, sl, #1
    b5f8:	e766      	b.n	b4c8 <_dtoa_r+0xaa8>
    b5fa:	f8dd a018 	ldr.w	sl, [sp, #24]
    b5fe:	f109 0901 	add.w	r9, r9, #1
    b602:	e7b5      	b.n	b570 <_dtoa_r+0xb50>
    b604:	f01d f8e2 	bl	287cc <__multadd>
    b608:	4629      	mov	r1, r5
    b60a:	4680      	mov	r8, r0
    b60c:	2300      	movs	r3, #0
    b60e:	220a      	movs	r2, #10
    b610:	4658      	mov	r0, fp
    b612:	f01d f8db 	bl	287cc <__multadd>
    b616:	4605      	mov	r5, r0
    b618:	e7ec      	b.n	b5f4 <_dtoa_r+0xbd4>
    b61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b61c:	f04f 0800 	mov.w	r8, #0
    b620:	2b00      	cmp	r3, #0
    b622:	bfcc      	ite	gt
    b624:	461f      	movgt	r7, r3
    b626:	2701      	movle	r7, #1
    b628:	9b08      	ldr	r3, [sp, #32]
    b62a:	441f      	add	r7, r3
    b62c:	2201      	movs	r2, #1
    b62e:	9903      	ldr	r1, [sp, #12]
    b630:	4658      	mov	r0, fp
    b632:	f01d fa77 	bl	28b24 <__lshift>
    b636:	4621      	mov	r1, r4
    b638:	9003      	str	r0, [sp, #12]
    b63a:	f026 fd1f 	bl	3207c <__mcmp>
    b63e:	2800      	cmp	r0, #0
    b640:	dca8      	bgt.n	b594 <_dtoa_r+0xb74>
    b642:	d102      	bne.n	b64a <_dtoa_r+0xc2a>
    b644:	f019 0f01 	tst.w	r9, #1
    b648:	d1a4      	bne.n	b594 <_dtoa_r+0xb74>
    b64a:	46ba      	mov	sl, r7
    b64c:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    b650:	2b30      	cmp	r3, #48	; 0x30
    b652:	d0fa      	beq.n	b64a <_dtoa_r+0xc2a>
    b654:	e4fe      	b.n	b054 <_dtoa_r+0x634>
    b656:	9b08      	ldr	r3, [sp, #32]
    b658:	42bb      	cmp	r3, r7
    b65a:	d19b      	bne.n	b594 <_dtoa_r+0xb74>
    b65c:	2331      	movs	r3, #49	; 0x31
    b65e:	9a08      	ldr	r2, [sp, #32]
    b660:	3601      	adds	r6, #1
    b662:	7013      	strb	r3, [r2, #0]
    b664:	e4f6      	b.n	b054 <_dtoa_r+0x634>
    b666:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b668:	2b00      	cmp	r3, #0
    b66a:	f47f aa20 	bne.w	aaae <_dtoa_r+0x8e>
    b66e:	4b01      	ldr	r3, [pc, #4]	; (b674 <_dtoa_r+0xc54>)
    b670:	f7ff ba3f 	b.w	aaf2 <_dtoa_r+0xd2>
    b674:	000387db 	.word	0x000387db

0000b678 <digital_0_call_back>:

// DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[0] <= DIGITAL_0_LIMIT)
    b678:	4a03      	ldr	r2, [pc, #12]	; (b688 <digital_0_call_back+0x10>)
    b67a:	8813      	ldrh	r3, [r2, #0]
		digital_value[0]++;
    b67c:	8813      	ldrh	r3, [r2, #0]
    b67e:	3301      	adds	r3, #1
    b680:	b21b      	sxth	r3, r3
    b682:	8013      	strh	r3, [r2, #0]
}
    b684:	4770      	bx	lr
    b686:	bf00      	nop
    b688:	20030dc2 	.word	0x20030dc2

0000b68c <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[1] <= DIGITAL_0_LIMIT)
    b68c:	4a03      	ldr	r2, [pc, #12]	; (b69c <digital_1_call_back+0x10>)
    b68e:	8853      	ldrh	r3, [r2, #2]
		digital_value[1]++;
    b690:	8853      	ldrh	r3, [r2, #2]
    b692:	3301      	adds	r3, #1
    b694:	b21b      	sxth	r3, r3
    b696:	8053      	strh	r3, [r2, #2]
}
    b698:	4770      	bx	lr
    b69a:	bf00      	nop
    b69c:	20030dc2 	.word	0x20030dc2

0000b6a0 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[2] <= DIGITAL_0_LIMIT)
    b6a0:	4a03      	ldr	r2, [pc, #12]	; (b6b0 <digital_2_call_back+0x10>)
    b6a2:	8893      	ldrh	r3, [r2, #4]
		digital_value[2]++;
    b6a4:	8893      	ldrh	r3, [r2, #4]
    b6a6:	3301      	adds	r3, #1
    b6a8:	b21b      	sxth	r3, r3
    b6aa:	8093      	strh	r3, [r2, #4]
}
    b6ac:	4770      	bx	lr
    b6ae:	bf00      	nop
    b6b0:	20030dc2 	.word	0x20030dc2

0000b6b4 <button_pressed_3>:
{
    b6b4:	b508      	push	{r3, lr}
	k_sem_give(&button_3);
    b6b6:	4805      	ldr	r0, [pc, #20]	; (b6cc <button_pressed_3+0x18>)
    b6b8:	f01e fafe 	bl	29cb8 <k_sem_give>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    b6bc:	f024 fb99 	bl	2fdf2 <sys_clock_cycle_get_32>
}
    b6c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b6c4:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b6c6:	4802      	ldr	r0, [pc, #8]	; (b6d0 <button_pressed_3+0x1c>)
    b6c8:	f01e bd50 	b.w	2a16c <printk>
    b6cc:	20008cb8 	.word	0x20008cb8
    b6d0:	00034246 	.word	0x00034246

0000b6d4 <button_pressed_4>:
{
    b6d4:	b508      	push	{r3, lr}
	k_sem_give(&button_test);
    b6d6:	4805      	ldr	r0, [pc, #20]	; (b6ec <button_pressed_4+0x18>)
    b6d8:	f01e faee 	bl	29cb8 <k_sem_give>
    b6dc:	f024 fb89 	bl	2fdf2 <sys_clock_cycle_get_32>
}
    b6e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b6e4:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b6e6:	4802      	ldr	r0, [pc, #8]	; (b6f0 <button_pressed_4+0x1c>)
    b6e8:	f01e bd40 	b.w	2a16c <printk>
    b6ec:	20008cd0 	.word	0x20008cd0
    b6f0:	0003425e 	.word	0x0003425e

0000b6f4 <lorwan_datarate_changed>:
{
    b6f4:	b513      	push	{r0, r1, r4, lr}
    b6f6:	4604      	mov	r4, r0
	lorawan_get_payload_sizes(&unused, &max_size);
    b6f8:	f10d 0107 	add.w	r1, sp, #7
    b6fc:	f10d 0006 	add.w	r0, sp, #6
    b700:	f020 f90a 	bl	2b918 <lorawan_get_payload_sizes>
	color(10);
    b704:	200a      	movs	r0, #10
    b706:	f002 f9ad 	bl	da64 <color>
	printk("New Datarate: DR_%d, Max Payload %d \n", dr, max_size);
    b70a:	4621      	mov	r1, r4
    b70c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b710:	4803      	ldr	r0, [pc, #12]	; (b720 <lorwan_datarate_changed+0x2c>)
    b712:	f01e fd2b 	bl	2a16c <printk>
	color(255);
    b716:	20ff      	movs	r0, #255	; 0xff
    b718:	f002 f9a4 	bl	da64 <color>
}
    b71c:	b002      	add	sp, #8
    b71e:	bd10      	pop	{r4, pc}
    b720:	00034276 	.word	0x00034276

0000b724 <dl_callback>:
    int16_t rssi, int8_t snr, uint8_t len, const uint8_t *data)	{
    b724:	b430      	push	{r4, r5}
    b726:	461d      	mov	r5, r3
    b728:	9b03      	ldr	r3, [sp, #12]
    b72a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    if (data) {
    b72e:	b193      	cbz	r3, b756 <dl_callback+0x32>
	    downlink_cmd_new.port=port;
    b730:	490a      	ldr	r1, [pc, #40]	; (b75c <dl_callback+0x38>)
        downlink_cmd_new.len = len;
    b732:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
	    downlink_cmd_new.port=port;
    b736:	7008      	strb	r0, [r1, #0]
        downlink_cmd_new.rssi=rssi;
    b738:	804a      	strh	r2, [r1, #2]
		downlink_cmd_new.snr=snr;
    b73a:	710d      	strb	r5, [r1, #4]
static void dl_callback(uint8_t port, bool data_pending,
    b73c:	441c      	add	r4, r3
    b73e:	3104      	adds	r1, #4
        while (i < len) {
    b740:	42a3      	cmp	r3, r4
    b742:	d103      	bne.n	b74c <dl_callback+0x28>
}
    b744:	bc30      	pop	{r4, r5}
		k_sem_give(&lorawan_rx);//downlink
    b746:	4806      	ldr	r0, [pc, #24]	; (b760 <dl_callback+0x3c>)
    b748:	f01e bab6 	b.w	29cb8 <k_sem_give>
            downlink_cmd_new.data[i] = data[i];
    b74c:	f813 2b01 	ldrb.w	r2, [r3], #1
    b750:	f801 2f01 	strb.w	r2, [r1, #1]!
            i++;
    b754:	e7f4      	b.n	b740 <dl_callback+0x1c>
}
    b756:	bc30      	pop	{r4, r5}
    b758:	4770      	bx	lr
    b75a:	bf00      	nop
    b75c:	20030d88 	.word	0x20030d88
    b760:	20008d48 	.word	0x20008d48

0000b764 <digital_4_call_back>:

void digital_4_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	if (alarm_busy==0)
    b764:	4b03      	ldr	r3, [pc, #12]	; (b774 <digital_4_call_back+0x10>)
    b766:	781b      	ldrb	r3, [r3, #0]
    b768:	b913      	cbnz	r3, b770 <digital_4_call_back+0xc>
	  k_sem_give(&alarm_infra);
    b76a:	4803      	ldr	r0, [pc, #12]	; (b778 <digital_4_call_back+0x14>)
    b76c:	f01e baa4 	b.w	29cb8 <k_sem_give>
	
}
    b770:	4770      	bx	lr
    b772:	bf00      	nop
    b774:	2003101e 	.word	0x2003101e
    b778:	20008c70 	.word	0x20008c70

0000b77c <uart_2_work_handler>:
{
    b77c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf2 = k_malloc(sizeof(*buf2)); // SIZE IS 92 BYTES
    b77e:	206c      	movs	r0, #108	; 0x6c
    b780:	f025 ffa9 	bl	316d6 <k_malloc>
    b784:	4603      	mov	r3, r0
	if (buf2)
    b786:	b148      	cbz	r0, b79c <uart_2_work_handler+0x20>
		buf2->len = 0;
    b788:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b78a:	1d01      	adds	r1, r0, #4
		buf2->len = 0;
    b78c:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b790:	480b      	ldr	r0, [pc, #44]	; (b7c0 <uart_2_work_handler+0x44>)
}
    b792:	b005      	add	sp, #20
    b794:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b798:	f01e baad 	b.w	29cf6 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    b79c:	4a09      	ldr	r2, [pc, #36]	; (b7c4 <uart_2_work_handler+0x48>)
    b79e:	9000      	str	r0, [sp, #0]
    b7a0:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b7a4:	4908      	ldr	r1, [pc, #32]	; (b7c8 <uart_2_work_handler+0x4c>)
    b7a6:	2202      	movs	r2, #2
    b7a8:	f01e fa96 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b7ac:	f240 6267 	movw	r2, #1639	; 0x667
    b7b0:	2300      	movs	r3, #0
    b7b2:	4806      	ldr	r0, [pc, #24]	; (b7cc <uart_2_work_handler+0x50>)
}
    b7b4:	b005      	add	sp, #20
    b7b6:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b7ba:	f01a bb69 	b.w	25e90 <k_work_reschedule>
    b7be:	bf00      	nop
    b7c0:	00032860 	.word	0x00032860
    b7c4:	0003429c 	.word	0x0003429c
    b7c8:	00032fb8 	.word	0x00032fb8
    b7cc:	20009840 	.word	0x20009840

0000b7d0 <uart_work_handler>:
{
    b7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    b7d2:	206c      	movs	r0, #108	; 0x6c
    b7d4:	f025 ff7f 	bl	316d6 <k_malloc>
    b7d8:	4603      	mov	r3, r0
	if (buf)
    b7da:	b148      	cbz	r0, b7f0 <uart_work_handler+0x20>
		buf->len = 0;
    b7dc:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7de:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    b7e0:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7e4:	480b      	ldr	r0, [pc, #44]	; (b814 <uart_work_handler+0x44>)
}
    b7e6:	b005      	add	sp, #20
    b7e8:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7ec:	f01e ba83 	b.w	29cf6 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_1 receive buffer");
    b7f0:	4a09      	ldr	r2, [pc, #36]	; (b818 <uart_work_handler+0x48>)
    b7f2:	9000      	str	r0, [sp, #0]
    b7f4:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b7f8:	4908      	ldr	r1, [pc, #32]	; (b81c <uart_work_handler+0x4c>)
    b7fa:	2202      	movs	r2, #2
    b7fc:	f01e fa6c 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b800:	f240 6267 	movw	r2, #1639	; 0x667
    b804:	2300      	movs	r3, #0
    b806:	4806      	ldr	r0, [pc, #24]	; (b820 <uart_work_handler+0x50>)
}
    b808:	b005      	add	sp, #20
    b80a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b80e:	f01a bb3f 	b.w	25e90 <k_work_reschedule>
    b812:	bf00      	nop
    b814:	00032878 	.word	0x00032878
    b818:	000342c7 	.word	0x000342c7
    b81c:	00032fb8 	.word	0x00032fb8
    b820:	20009870 	.word	0x20009870

0000b824 <uart_cb_2>:
{
    b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (evt->type)
    b828:	780b      	ldrb	r3, [r1, #0]
    b82a:	3b02      	subs	r3, #2
    b82c:	2b03      	cmp	r3, #3
    b82e:	d844      	bhi.n	b8ba <uart_cb_2+0x96>
    b830:	e8df f003 	tbb	[pc, r3]
    b834:	45695a02 	.word	0x45695a02
		buf2 = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b838:	684c      	ldr	r4, [r1, #4]
		buf2->len += evt->data.rx.len;
    b83a:	68cb      	ldr	r3, [r1, #12]
    b83c:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
        if(buf2->data[buf2->len - 1]==0x24  && buff_marker==0){
    b840:	4d36      	ldr	r5, [pc, #216]	; (b91c <uart_cb_2+0xf8>)
		buf2->len += evt->data.rx.len;
    b842:	4413      	add	r3, r2
    b844:	b29b      	uxth	r3, r3
    b846:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        if(buf2->data[buf2->len - 1]==0x24  && buff_marker==0){
    b84a:	4423      	add	r3, r4
    b84c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b850:	682e      	ldr	r6, [r5, #0]
    b852:	2b24      	cmp	r3, #36	; 0x24
    b854:	d12f      	bne.n	b8b6 <uart_cb_2+0x92>
    b856:	bb76      	cbnz	r6, b8b6 <uart_cb_2+0x92>
			buf_extra = k_malloc(sizeof(*buf_extra));
    b858:	206c      	movs	r0, #108	; 0x6c
    b85a:	f025 ff3c 	bl	316d6 <k_malloc>
    b85e:	4b30      	ldr	r3, [pc, #192]	; (b920 <uart_cb_2+0xfc>)
    b860:	6018      	str	r0, [r3, #0]
			buff_extra_index=0;
    b862:	4b30      	ldr	r3, [pc, #192]	; (b924 <uart_cb_2+0x100>)
    b864:	601e      	str	r6, [r3, #0]
			buff_marker=1;
    b866:	2301      	movs	r3, #1
    b868:	602b      	str	r3, [r5, #0]
        if(buff_marker==1 && (buff_extra_index<(sizeof(*buf2)-1)) ){
    b86a:	482e      	ldr	r0, [pc, #184]	; (b924 <uart_cb_2+0x100>)
    b86c:	6803      	ldr	r3, [r0, #0]
    b86e:	2b6a      	cmp	r3, #106	; 0x6a
    b870:	d823      	bhi.n	b8ba <uart_cb_2+0x96>
		    buf_extra->data[buff_extra_index++]=buf2->data[buf2->len - 1];
    b872:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    b876:	4e2a      	ldr	r6, [pc, #168]	; (b920 <uart_cb_2+0xfc>)
    b878:	1c5a      	adds	r2, r3, #1
    b87a:	3f01      	subs	r7, #1
    b87c:	6002      	str	r2, [r0, #0]
    b87e:	6831      	ldr	r1, [r6, #0]
    b880:	f814 c007 	ldrb.w	ip, [r4, r7]
    b884:	18cf      	adds	r7, r1, r3
    b886:	f887 c004 	strb.w	ip, [r7, #4]
			if(buf2->data[buf2->len - 1]==0x0A){
    b88a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    b88e:	443c      	add	r4, r7
    b890:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    b894:	2c0a      	cmp	r4, #10
    b896:	d110      	bne.n	b8ba <uart_cb_2+0x96>
			   buf_extra->data[buff_extra_index++] = 0x00;
    b898:	2400      	movs	r4, #0
    b89a:	3302      	adds	r3, #2
    b89c:	440a      	add	r2, r1
    b89e:	6003      	str	r3, [r0, #0]
    b8a0:	7114      	strb	r4, [r2, #4]
				 k_fifo_put(&fifo_uart2_rx_data, buf_extra); // TRANSFER TO FIFO
    b8a2:	4821      	ldr	r0, [pc, #132]	; (b928 <uart_cb_2+0x104>)
			   buf_extra->len = buff_extra_index;
    b8a4:	f8a1 3068 	strh.w	r3, [r1, #104]	; 0x68
				 k_fifo_put(&fifo_uart2_rx_data, buf_extra); // TRANSFER TO FIFO
    b8a8:	f025 facd 	bl	30e46 <k_queue_append>
				 k_free(buf_extra);
    b8ac:	6830      	ldr	r0, [r6, #0]
    b8ae:	f025 ff0b 	bl	316c8 <k_free>
			   buff_marker=0;
    b8b2:	602c      	str	r4, [r5, #0]
    b8b4:	e001      	b.n	b8ba <uart_cb_2+0x96>
        if(buff_marker==1 && (buff_extra_index<(sizeof(*buf2)-1)) ){
    b8b6:	2e01      	cmp	r6, #1
    b8b8:	d0d7      	beq.n	b86a <uart_cb_2+0x46>
}
    b8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf2 = k_malloc(sizeof(*buf2)); // THE SIZE IS 92 BYTES
    b8be:	206c      	movs	r0, #108	; 0x6c
    b8c0:	f025 ff09 	bl	316d6 <k_malloc>
		if (buf2)
    b8c4:	b140      	cbz	r0, b8d8 <uart_cb_2+0xb4>
			buf2->len = 0;
    b8c6:	2300      	movs	r3, #0
    b8c8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b8cc:	1d01      	adds	r1, r0, #4
}
    b8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b8d2:	4816      	ldr	r0, [pc, #88]	; (b92c <uart_cb_2+0x108>)
    b8d4:	f01e ba0f 	b.w	29cf6 <uart_rx_enable.constprop.0>
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b8d8:	f240 6267 	movw	r2, #1639	; 0x667
}
    b8dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b8e0:	2300      	movs	r3, #0
    b8e2:	4813      	ldr	r0, [pc, #76]	; (b930 <uart_cb_2+0x10c>)
    b8e4:	f01a bad4 	b.w	25e90 <k_work_reschedule>
		buf2 = k_malloc(sizeof(*buf2));
    b8e8:	206c      	movs	r0, #108	; 0x6c
    b8ea:	f025 fef4 	bl	316d6 <k_malloc>
		buf2->len = 0;
    b8ee:	2300      	movs	r3, #0
		buf2 = k_malloc(sizeof(*buf2));
    b8f0:	4601      	mov	r1, r0
		buf2->len = 0;
    b8f2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
    b8f6:	480d      	ldr	r0, [pc, #52]	; (b92c <uart_cb_2+0x108>)
    b8f8:	2264      	movs	r2, #100	; 0x64
}
    b8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b8fe:	6883      	ldr	r3, [r0, #8]
    b900:	3104      	adds	r1, #4
    b902:	691b      	ldr	r3, [r3, #16]
    b904:	4718      	bx	r3
		buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data);
    b906:	6848      	ldr	r0, [r1, #4]
		if (buf2->len > 0)
    b908:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    b90c:	2b00      	cmp	r3, #0
    b90e:	d0d4      	beq.n	b8ba <uart_cb_2+0x96>
}
    b910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_free(buf2);
    b914:	3804      	subs	r0, #4
    b916:	f025 bed7 	b.w	316c8 <k_free>
    b91a:	bf00      	nop
    b91c:	2000a59c 	.word	0x2000a59c
    b920:	2000a5a4 	.word	0x2000a5a4
    b924:	2000a5a0 	.word	0x2000a5a0
    b928:	20008e08 	.word	0x20008e08
    b92c:	00032860 	.word	0x00032860
    b930:	20009840 	.word	0x20009840

0000b934 <button4_thread>:
		}
	}
}

void button4_thread(void)
{
    b934:	b570      	push	{r4, r5, r6, lr}
    b936:	b086      	sub	sp, #24
	// print ISADORA PENATI FERREIRA
	char Name[] = "ISADORA PENATI FERREIRA";
    b938:	466a      	mov	r2, sp
    b93a:	4615      	mov	r5, r2
    b93c:	4b0c      	ldr	r3, [pc, #48]	; (b970 <button4_thread+0x3c>)
    b93e:	f103 0618 	add.w	r6, r3, #24
    b942:	4614      	mov	r4, r2
    b944:	6818      	ldr	r0, [r3, #0]
    b946:	6859      	ldr	r1, [r3, #4]
    b948:	3308      	adds	r3, #8
    b94a:	c403      	stmia	r4!, {r0, r1}
    b94c:	42b3      	cmp	r3, r6
    b94e:	4622      	mov	r2, r4
    b950:	d1f7      	bne.n	b942 <button4_thread+0xe>
	*(packet_data+7) = 0x20;//SPACE
	*/

	while (1)
	{
		k_sem_take(&button_test, K_FOREVER);
    b952:	4c08      	ldr	r4, [pc, #32]	; (b974 <button4_thread+0x40>)
    b954:	4620      	mov	r0, r4
    b956:	f04f 32ff 	mov.w	r2, #4294967295
    b95a:	f04f 33ff 	mov.w	r3, #4294967295
    b95e:	f01e f9da 	bl	29d16 <k_sem_take.constprop.0.isra.0>
		bt_nus_send(NULL, Name, size);
    b962:	2218      	movs	r2, #24
    b964:	4629      	mov	r1, r5
    b966:	2000      	movs	r0, #0
    b968:	f005 f9a0 	bl	10cac <bt_nus_send>
	while (1)
    b96c:	e7f2      	b.n	b954 <button4_thread+0x20>
    b96e:	bf00      	nop
    b970:	000342f2 	.word	0x000342f2
    b974:	20008cd0 	.word	0x20008cd0

0000b978 <button3_thread>:
{
    b978:	b570      	push	{r4, r5, r6, lr}
		k_sem_take(&button_3, K_FOREVER);
    b97a:	4e09      	ldr	r6, [pc, #36]	; (b9a0 <button3_thread+0x28>)
		while (i <= C_Buffer_Current_Position)
    b97c:	4d09      	ldr	r5, [pc, #36]	; (b9a4 <button3_thread+0x2c>)
		k_sem_take(&button_3, K_FOREVER);
    b97e:	f04f 32ff 	mov.w	r2, #4294967295
    b982:	f04f 33ff 	mov.w	r3, #4294967295
    b986:	4630      	mov	r0, r6
    b988:	f01e f9c5 	bl	29d16 <k_sem_take.constprop.0.isra.0>
		i = 0;
    b98c:	2400      	movs	r4, #0
			print_current_position_cb(i);
    b98e:	4620      	mov	r0, r4
    b990:	f001 fd5a 	bl	d448 <print_current_position_cb>
		while (i <= C_Buffer_Current_Position)
    b994:	682b      	ldr	r3, [r5, #0]
			i++;
    b996:	3401      	adds	r4, #1
		while (i <= C_Buffer_Current_Position)
    b998:	42a3      	cmp	r3, r4
    b99a:	d3f0      	bcc.n	b97e <button3_thread+0x6>
    b99c:	e7f7      	b.n	b98e <button3_thread+0x16>
    b99e:	bf00      	nop
    b9a0:	20008cb8 	.word	0x20008cb8
    b9a4:	2002f86c 	.word	0x2002f86c

0000b9a8 <write_memory_thread>:
{
    b9a8:	b510      	push	{r4, lr}
		k_sem_take(&save_memory, K_FOREVER);
    b9aa:	4c07      	ldr	r4, [pc, #28]	; (b9c8 <write_memory_thread+0x20>)
    b9ac:	4620      	mov	r0, r4
    b9ae:	f04f 32ff 	mov.w	r2, #4294967295
    b9b2:	f04f 33ff 	mov.w	r3, #4294967295
    b9b6:	f01e f9ae 	bl	29d16 <k_sem_take.constprop.0.isra.0>
		flash_button2_counter();
    b9ba:	f001 fa81 	bl	cec0 <flash_button2_counter>
		print_current_position_cb_new(0);
    b9be:	2000      	movs	r0, #0
    b9c0:	f001 fe22 	bl	d608 <print_current_position_cb_new>
	while (1)
    b9c4:	e7f2      	b.n	b9ac <write_memory_thread+0x4>
    b9c6:	bf00      	nop
    b9c8:	20008da8 	.word	0x20008da8

0000b9cc <downlink_thread>:
			j++;
		}
	}
}

void downlink_thread(void){
    b9cc:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd=0;
	while(1){
	  k_sem_take(&lorawan_rx,K_FOREVER);
      color(4);
	  printk("CMD-Received\n");
	  printk("Len: %d\n",downlink_cmd_new.len);
    b9ce:	4c19      	ldr	r4, [pc, #100]	; (ba34 <downlink_thread+0x68>)
	  k_sem_take(&lorawan_rx,K_FOREVER);
    b9d0:	4e19      	ldr	r6, [pc, #100]	; (ba38 <downlink_thread+0x6c>)
	  printk("Port %d, RSSI %ddB, SNR %ddBm \n", downlink_cmd_new.port, downlink_cmd_new.rssi, downlink_cmd_new.snr);
	  printk(downlink_cmd_new.data, downlink_cmd_new.len, "Payload: \n");
    b9d2:	1d65      	adds	r5, r4, #5
	  k_sem_take(&lorawan_rx,K_FOREVER);
    b9d4:	f04f 32ff 	mov.w	r2, #4294967295
    b9d8:	f04f 33ff 	mov.w	r3, #4294967295
    b9dc:	4630      	mov	r0, r6
    b9de:	f01e f99a 	bl	29d16 <k_sem_take.constprop.0.isra.0>
      color(4);
    b9e2:	2004      	movs	r0, #4
    b9e4:	f002 f83e 	bl	da64 <color>
	  printk("CMD-Received\n");
    b9e8:	4814      	ldr	r0, [pc, #80]	; (ba3c <downlink_thread+0x70>)
    b9ea:	f01e fbbf 	bl	2a16c <printk>
	  printk("Len: %d\n",downlink_cmd_new.len);
    b9ee:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    b9f2:	4813      	ldr	r0, [pc, #76]	; (ba40 <downlink_thread+0x74>)
    b9f4:	f01e fbba 	bl	2a16c <printk>
	  printk("Port %d, RSSI %ddB, SNR %ddBm \n", downlink_cmd_new.port, downlink_cmd_new.rssi, downlink_cmd_new.snr);
    b9f8:	f994 3004 	ldrsb.w	r3, [r4, #4]
    b9fc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    ba00:	7821      	ldrb	r1, [r4, #0]
    ba02:	4810      	ldr	r0, [pc, #64]	; (ba44 <downlink_thread+0x78>)
    ba04:	f01e fbb2 	bl	2a16c <printk>
	  printk(downlink_cmd_new.data, downlink_cmd_new.len, "Payload: \n");
    ba08:	4628      	mov	r0, r5
    ba0a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    ba0e:	4a0e      	ldr	r2, [pc, #56]	; (ba48 <downlink_thread+0x7c>)
    ba10:	f01e fbac 	bl	2a16c <printk>

	  printk("%X:%X:%X\n",downlink_cmd_new.data[0],downlink_cmd_new.data[1],downlink_cmd_new.data[2]);
    ba14:	79e3      	ldrb	r3, [r4, #7]
    ba16:	79a2      	ldrb	r2, [r4, #6]
    ba18:	7961      	ldrb	r1, [r4, #5]
    ba1a:	480c      	ldr	r0, [pc, #48]	; (ba4c <downlink_thread+0x80>)
    ba1c:	f01e fba6 	bl	2a16c <printk>
      static uint8_t *data=downlink_cmd_new.data;
	  

	  cmd_interpreter(data,downlink_cmd_new.len);
    ba20:	4628      	mov	r0, r5
    ba22:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    ba26:	f002 f871 	bl	db0c <cmd_interpreter>
      color(0);
    ba2a:	2000      	movs	r0, #0
    ba2c:	f002 f81a 	bl	da64 <color>
	while(1){
    ba30:	e7d0      	b.n	b9d4 <downlink_thread+0x8>
    ba32:	bf00      	nop
    ba34:	20030d88 	.word	0x20030d88
    ba38:	20008d48 	.word	0x20008d48
    ba3c:	0003430a 	.word	0x0003430a
    ba40:	00034318 	.word	0x00034318
    ba44:	00034321 	.word	0x00034321
    ba48:	00034341 	.word	0x00034341
    ba4c:	0003434c 	.word	0x0003434c

0000ba50 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ba50:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ba52:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ba54:	b08a      	sub	sp, #40	; 0x28
    ba56:	4604      	mov	r4, r0
    ba58:	460e      	mov	r6, r1
    ba5a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ba5c:	2b03      	cmp	r3, #3
    ba5e:	d820      	bhi.n	baa2 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ba60:	e8df f003 	tbb	[pc, r3]
    ba64:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ba68:	4911      	ldr	r1, [pc, #68]	; (bab0 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ba6a:	4628      	mov	r0, r5
    ba6c:	f025 ffd8 	bl	31a20 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ba70:	9505      	str	r5, [sp, #20]
    ba72:	7863      	ldrb	r3, [r4, #1]
    ba74:	211e      	movs	r1, #30
    ba76:	9304      	str	r3, [sp, #16]
    ba78:	78a3      	ldrb	r3, [r4, #2]
    ba7a:	4630      	mov	r0, r6
    ba7c:	9303      	str	r3, [sp, #12]
    ba7e:	78e3      	ldrb	r3, [r4, #3]
    ba80:	4a0c      	ldr	r2, [pc, #48]	; (bab4 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ba82:	9302      	str	r3, [sp, #8]
    ba84:	7923      	ldrb	r3, [r4, #4]
    ba86:	9301      	str	r3, [sp, #4]
    ba88:	7963      	ldrb	r3, [r4, #5]
    ba8a:	9300      	str	r3, [sp, #0]
    ba8c:	79a3      	ldrb	r3, [r4, #6]
    ba8e:	f01e fb7a 	bl	2a186 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ba92:	b00a      	add	sp, #40	; 0x28
    ba94:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ba96:	4908      	ldr	r1, [pc, #32]	; (bab8 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    ba98:	e7e7      	b.n	ba6a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    ba9a:	4908      	ldr	r1, [pc, #32]	; (babc <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    ba9c:	e7e5      	b.n	ba6a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    ba9e:	4908      	ldr	r1, [pc, #32]	; (bac0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    baa0:	e7e3      	b.n	ba6a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    baa2:	210a      	movs	r1, #10
    baa4:	4628      	mov	r0, r5
    baa6:	4a07      	ldr	r2, [pc, #28]	; (bac4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    baa8:	f01e fb6d 	bl	2a186 <snprintk>
		break;
    baac:	e7e0      	b.n	ba70 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    baae:	bf00      	nop
    bab0:	00034356 	.word	0x00034356
    bab4:	00034378 	.word	0x00034378
    bab8:	0003435d 	.word	0x0003435d
    babc:	00034364 	.word	0x00034364
    bac0:	0003436e 	.word	0x0003436e
    bac4:	000378a6 	.word	0x000378a6

0000bac8 <security_changed>:
{
    bac8:	b570      	push	{r4, r5, r6, lr}
    baca:	4614      	mov	r4, r2
    bacc:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bace:	ae06      	add	r6, sp, #24
{
    bad0:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bad2:	f021 ffed 	bl	2dab0 <bt_conn_get_dst>
    bad6:	4631      	mov	r1, r6
    bad8:	f7ff ffba 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err)
    badc:	b96c      	cbnz	r4, bafa <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    bade:	4b0e      	ldr	r3, [pc, #56]	; (bb18 <security_changed+0x50>)
    bae0:	2203      	movs	r2, #3
    bae2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bae6:	4620      	mov	r0, r4
    bae8:	4623      	mov	r3, r4
    baea:	e9cd 6503 	strd	r6, r5, [sp, #12]
    baee:	490b      	ldr	r1, [pc, #44]	; (bb1c <security_changed+0x54>)
    baf0:	9400      	str	r4, [sp, #0]
    baf2:	f01e f8f1 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    baf6:	b00e      	add	sp, #56	; 0x38
    baf8:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    bafa:	4b09      	ldr	r3, [pc, #36]	; (bb20 <security_changed+0x58>)
    bafc:	2202      	movs	r2, #2
    bafe:	9302      	str	r3, [sp, #8]
    bb00:	2300      	movs	r3, #0
    bb02:	e9cd 5404 	strd	r5, r4, [sp, #16]
    bb06:	4618      	mov	r0, r3
    bb08:	e9cd 3300 	strd	r3, r3, [sp]
    bb0c:	4903      	ldr	r1, [pc, #12]	; (bb1c <security_changed+0x54>)
    bb0e:	9603      	str	r6, [sp, #12]
    bb10:	f01e f8e2 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    bb14:	e7ef      	b.n	baf6 <security_changed+0x2e>
    bb16:	bf00      	nop
    bb18:	0003439b 	.word	0x0003439b
    bb1c:	00032fb8 	.word	0x00032fb8
    bb20:	000343b9 	.word	0x000343b9

0000bb24 <pairing_failed>:
{
    bb24:	b530      	push	{r4, r5, lr}
    bb26:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb28:	ad06      	add	r5, sp, #24
{
    bb2a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb2c:	f021 ffc0 	bl	2dab0 <bt_conn_get_dst>
    bb30:	4629      	mov	r1, r5
    bb32:	f7ff ff8d 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    bb36:	4b07      	ldr	r3, [pc, #28]	; (bb54 <pairing_failed+0x30>)
    bb38:	2203      	movs	r2, #3
    bb3a:	9302      	str	r3, [sp, #8]
    bb3c:	2300      	movs	r3, #0
    bb3e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bb42:	4618      	mov	r0, r3
    bb44:	e9cd 3300 	strd	r3, r3, [sp]
    bb48:	4903      	ldr	r1, [pc, #12]	; (bb58 <pairing_failed+0x34>)
    bb4a:	f01e f8c5 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    bb4e:	b00f      	add	sp, #60	; 0x3c
    bb50:	bd30      	pop	{r4, r5, pc}
    bb52:	bf00      	nop
    bb54:	000343dd 	.word	0x000343dd
    bb58:	00032fb8 	.word	0x00032fb8

0000bb5c <pairing_complete>:
{
    bb5c:	b530      	push	{r4, r5, lr}
    bb5e:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb60:	ad06      	add	r5, sp, #24
{
    bb62:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb64:	f021 ffa4 	bl	2dab0 <bt_conn_get_dst>
    bb68:	4629      	mov	r1, r5
    bb6a:	f7ff ff71 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    bb6e:	4b07      	ldr	r3, [pc, #28]	; (bb8c <pairing_complete+0x30>)
    bb70:	2203      	movs	r2, #3
    bb72:	9302      	str	r3, [sp, #8]
    bb74:	2300      	movs	r3, #0
    bb76:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bb7a:	4618      	mov	r0, r3
    bb7c:	e9cd 3300 	strd	r3, r3, [sp]
    bb80:	4903      	ldr	r1, [pc, #12]	; (bb90 <pairing_complete+0x34>)
    bb82:	f01e f8a9 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    bb86:	b00f      	add	sp, #60	; 0x3c
    bb88:	bd30      	pop	{r4, r5, pc}
    bb8a:	bf00      	nop
    bb8c:	00034400 	.word	0x00034400
    bb90:	00032fb8 	.word	0x00032fb8

0000bb94 <auth_cancel>:
{
    bb94:	b510      	push	{r4, lr}
    bb96:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb98:	ac04      	add	r4, sp, #16
    bb9a:	f021 ff89 	bl	2dab0 <bt_conn_get_dst>
    bb9e:	4621      	mov	r1, r4
    bba0:	f7ff ff56 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    bba4:	4b06      	ldr	r3, [pc, #24]	; (bbc0 <auth_cancel+0x2c>)
    bba6:	2203      	movs	r2, #3
    bba8:	9302      	str	r3, [sp, #8]
    bbaa:	2300      	movs	r3, #0
    bbac:	4905      	ldr	r1, [pc, #20]	; (bbc4 <auth_cancel+0x30>)
    bbae:	4618      	mov	r0, r3
    bbb0:	e9cd 3300 	strd	r3, r3, [sp]
    bbb4:	9403      	str	r4, [sp, #12]
    bbb6:	f01e f88f 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    bbba:	b00c      	add	sp, #48	; 0x30
    bbbc:	bd10      	pop	{r4, pc}
    bbbe:	bf00      	nop
    bbc0:	00034422 	.word	0x00034422
    bbc4:	00032fb8 	.word	0x00032fb8

0000bbc8 <auth_passkey_display>:
{
    bbc8:	b530      	push	{r4, r5, lr}
    bbca:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bbcc:	ad06      	add	r5, sp, #24
{
    bbce:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bbd0:	f021 ff6e 	bl	2dab0 <bt_conn_get_dst>
    bbd4:	4629      	mov	r1, r5
    bbd6:	f7ff ff3b 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    bbda:	4b07      	ldr	r3, [pc, #28]	; (bbf8 <auth_passkey_display+0x30>)
    bbdc:	2203      	movs	r2, #3
    bbde:	9302      	str	r3, [sp, #8]
    bbe0:	2300      	movs	r3, #0
    bbe2:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bbe6:	4618      	mov	r0, r3
    bbe8:	e9cd 3300 	strd	r3, r3, [sp]
    bbec:	4903      	ldr	r1, [pc, #12]	; (bbfc <auth_passkey_display+0x34>)
    bbee:	f01e f873 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    bbf2:	b00f      	add	sp, #60	; 0x3c
    bbf4:	bd30      	pop	{r4, r5, pc}
    bbf6:	bf00      	nop
    bbf8:	00034438 	.word	0x00034438
    bbfc:	00032fb8 	.word	0x00032fb8

0000bc00 <auth_passkey_confirm>:
{
    bc00:	b570      	push	{r4, r5, r6, lr}
    bc02:	b08e      	sub	sp, #56	; 0x38
    bc04:	460c      	mov	r4, r1
    bc06:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    bc08:	f021 fe91 	bl	2d92e <bt_conn_ref>
    bc0c:	4b11      	ldr	r3, [pc, #68]	; (bc54 <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc0e:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    bc10:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc12:	4628      	mov	r0, r5
    bc14:	f021 ff4c 	bl	2dab0 <bt_conn_get_dst>
    bc18:	4631      	mov	r1, r6
    bc1a:	f7ff ff19 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    bc1e:	e9cd 6403 	strd	r6, r4, [sp, #12]
    bc22:	2400      	movs	r4, #0
    bc24:	4d0c      	ldr	r5, [pc, #48]	; (bc58 <auth_passkey_confirm+0x58>)
    bc26:	4b0d      	ldr	r3, [pc, #52]	; (bc5c <auth_passkey_confirm+0x5c>)
    bc28:	4629      	mov	r1, r5
    bc2a:	4620      	mov	r0, r4
    bc2c:	9302      	str	r3, [sp, #8]
    bc2e:	2203      	movs	r2, #3
    bc30:	4623      	mov	r3, r4
    bc32:	e9cd 4400 	strd	r4, r4, [sp]
    bc36:	f01e f84f 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    bc3a:	4b09      	ldr	r3, [pc, #36]	; (bc60 <auth_passkey_confirm+0x60>)
    bc3c:	2203      	movs	r2, #3
    bc3e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bc42:	4629      	mov	r1, r5
    bc44:	4623      	mov	r3, r4
    bc46:	4620      	mov	r0, r4
    bc48:	9400      	str	r4, [sp, #0]
    bc4a:	f01e f845 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    bc4e:	b00e      	add	sp, #56	; 0x38
    bc50:	bd70      	pop	{r4, r5, r6, pc}
    bc52:	bf00      	nop
    bc54:	2000a5a8 	.word	0x2000a5a8
    bc58:	00032fb8 	.word	0x00032fb8
    bc5c:	00034438 	.word	0x00034438
    bc60:	0003444d 	.word	0x0003444d

0000bc64 <bt_receive_cb>:
{
    bc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    bc68:	2400      	movs	r4, #0
{
    bc6a:	4605      	mov	r5, r0
    bc6c:	b088      	sub	sp, #32
    bc6e:	460f      	mov	r7, r1
    bc70:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    bc72:	4621      	mov	r1, r4
    bc74:	221a      	movs	r2, #26
    bc76:	a801      	add	r0, sp, #4
    bc78:	9400      	str	r4, [sp, #0]
    bc7a:	f025 fd82 	bl	31782 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    bc7e:	4628      	mov	r0, r5
    bc80:	f021 ff16 	bl	2dab0 <bt_conn_get_dst>
    bc84:	4669      	mov	r1, sp
    bc86:	f7ff fee3 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    bc8a:	4669      	mov	r1, sp
    bc8c:	481f      	ldr	r0, [pc, #124]	; (bd0c <bt_receive_cb+0xa8>)
    bc8e:	f01b fde9 	bl	27864 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bc92:	f8df 807c 	ldr.w	r8, [pc, #124]	; bd10 <bt_receive_cb+0xac>
			k_fifo_put(&fifo_uart_tx_data, tx);
    bc96:	f8df 907c 	ldr.w	r9, [pc, #124]	; bd14 <bt_receive_cb+0xb0>
	for (uint16_t pos = 0; pos != len;)
    bc9a:	42b4      	cmp	r4, r6
    bc9c:	d007      	beq.n	bcae <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    bc9e:	206c      	movs	r0, #108	; 0x6c
    bca0:	f025 fd19 	bl	316d6 <k_malloc>
		if (!tx)
    bca4:	4605      	mov	r5, r0
    bca6:	b928      	cbnz	r0, bcb4 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    bca8:	481b      	ldr	r0, [pc, #108]	; (bd18 <bt_receive_cb+0xb4>)
    bcaa:	f01b fddb 	bl	27864 <iprintf>
}
    bcae:	b008      	add	sp, #32
    bcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size)
    bcb4:	1b32      	subs	r2, r6, r4
    bcb6:	2a63      	cmp	r2, #99	; 0x63
			tx->len = tx_data_size;
    bcb8:	bf8c      	ite	hi
    bcba:	2263      	movhi	r2, #99	; 0x63
			tx->len = (len - pos);
    bcbc:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    bcbe:	f100 0a04 	add.w	sl, r0, #4
    bcc2:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bcc6:	1939      	adds	r1, r7, r4
    bcc8:	4650      	mov	r0, sl
    bcca:	f025 fd20 	bl	3170e <memcpy>
		pos += tx->len;
    bcce:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    bcd2:	441c      	add	r4, r3
    bcd4:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r'))
    bcd6:	42a6      	cmp	r6, r4
    bcd8:	d10a      	bne.n	bcf0 <bt_receive_cb+0x8c>
    bcda:	19ba      	adds	r2, r7, r6
    bcdc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    bce0:	2a0d      	cmp	r2, #13
    bce2:	d105      	bne.n	bcf0 <bt_receive_cb+0x8c>
			tx->data[tx->len] = '\n';
    bce4:	210a      	movs	r1, #10
    bce6:	18ea      	adds	r2, r5, r3
			tx->len++;
    bce8:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    bcea:	7111      	strb	r1, [r2, #4]
			tx->len++;
    bcec:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bcf0:	4651      	mov	r1, sl
    bcf2:	4640      	mov	r0, r8
    bcf4:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    bcf8:	f01e f805 	bl	29d06 <uart_tx.constprop.0>
		if (err)
    bcfc:	2800      	cmp	r0, #0
    bcfe:	d0cc      	beq.n	bc9a <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    bd00:	4629      	mov	r1, r5
    bd02:	4648      	mov	r0, r9
    bd04:	f025 f89f 	bl	30e46 <k_queue_append>
    bd08:	e7c7      	b.n	bc9a <bt_receive_cb+0x36>
    bd0a:	bf00      	nop
    bd0c:	0003447c 	.word	0x0003447c
    bd10:	00032878 	.word	0x00032878
    bd14:	20008e38 	.word	0x20008e38
    bd18:	00034493 	.word	0x00034493

0000bd1c <button_pressed_2>:
{
    bd1c:	b508      	push	{r3, lr}
	k_sem_give(&save_memory);
    bd1e:	4807      	ldr	r0, [pc, #28]	; (bd3c <button_pressed_2+0x20>)
    bd20:	f01d ffca 	bl	29cb8 <k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    bd24:	2101      	movs	r1, #1
    bd26:	4806      	ldr	r0, [pc, #24]	; (bd40 <button_pressed_2+0x24>)
    bd28:	f01d fffd 	bl	29d26 <gpio_pin_set_dt.isra.0>
    bd2c:	f024 f861 	bl	2fdf2 <sys_clock_cycle_get_32>
}
    bd30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bd34:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    bd36:	4803      	ldr	r0, [pc, #12]	; (bd44 <button_pressed_2+0x28>)
    bd38:	f01e ba18 	b.w	2a16c <printk>
    bd3c:	20008da8 	.word	0x20008da8
    bd40:	2000845c 	.word	0x2000845c
    bd44:	000344be 	.word	0x000344be

0000bd48 <button_pressed_1>:
{
    bd48:	b508      	push	{r3, lr}
	k_sem_give(&send_proto);
    bd4a:	4807      	ldr	r0, [pc, #28]	; (bd68 <button_pressed_1+0x20>)
    bd4c:	f01d ffb4 	bl	29cb8 <k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    bd50:	2101      	movs	r1, #1
    bd52:	4806      	ldr	r0, [pc, #24]	; (bd6c <button_pressed_1+0x24>)
    bd54:	f01d ffe7 	bl	29d26 <gpio_pin_set_dt.isra.0>
    bd58:	f024 f84b 	bl	2fdf2 <sys_clock_cycle_get_32>
}
    bd5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bd60:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    bd62:	4803      	ldr	r0, [pc, #12]	; (bd70 <button_pressed_1+0x28>)
    bd64:	f01e ba02 	b.w	2a16c <printk>
    bd68:	20008dd8 	.word	0x20008dd8
    bd6c:	20008454 	.word	0x20008454
    bd70:	000344d6 	.word	0x000344d6

0000bd74 <connected>:
{
    bd74:	b570      	push	{r4, r5, r6, lr}
    bd76:	4605      	mov	r5, r0
	if (err)
    bd78:	460c      	mov	r4, r1
{
    bd7a:	b08c      	sub	sp, #48	; 0x30
	if (err)
    bd7c:	b161      	cbz	r1, bd98 <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    bd7e:	4b14      	ldr	r3, [pc, #80]	; (bdd0 <connected+0x5c>)
    bd80:	9103      	str	r1, [sp, #12]
    bd82:	9302      	str	r3, [sp, #8]
    bd84:	2300      	movs	r3, #0
    bd86:	2201      	movs	r2, #1
    bd88:	4618      	mov	r0, r3
    bd8a:	e9cd 3300 	strd	r3, r3, [sp]
    bd8e:	4911      	ldr	r1, [pc, #68]	; (bdd4 <connected+0x60>)
    bd90:	f01d ffa2 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    bd94:	b00c      	add	sp, #48	; 0x30
    bd96:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bd98:	ae04      	add	r6, sp, #16
    bd9a:	f021 fe89 	bl	2dab0 <bt_conn_get_dst>
    bd9e:	4631      	mov	r1, r6
    bda0:	f7ff fe56 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    bda4:	4b0c      	ldr	r3, [pc, #48]	; (bdd8 <connected+0x64>)
    bda6:	2203      	movs	r2, #3
    bda8:	4620      	mov	r0, r4
    bdaa:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bdae:	4909      	ldr	r1, [pc, #36]	; (bdd4 <connected+0x60>)
    bdb0:	4623      	mov	r3, r4
    bdb2:	9603      	str	r6, [sp, #12]
    bdb4:	9400      	str	r4, [sp, #0]
    bdb6:	f01d ff8f 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    bdba:	4628      	mov	r0, r5
    bdbc:	f021 fdb7 	bl	2d92e <bt_conn_ref>
    bdc0:	4b06      	ldr	r3, [pc, #24]	; (bddc <connected+0x68>)
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bdc2:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    bdc4:	6018      	str	r0, [r3, #0]
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bdc6:	4806      	ldr	r0, [pc, #24]	; (bde0 <connected+0x6c>)
    bdc8:	f01d ffad 	bl	29d26 <gpio_pin_set_dt.isra.0>
    bdcc:	e7e2      	b.n	bd94 <connected+0x20>
    bdce:	bf00      	nop
    bdd0:	000344ee 	.word	0x000344ee
    bdd4:	00032fb8 	.word	0x00032fb8
    bdd8:	00034509 	.word	0x00034509
    bddc:	2000a5ac 	.word	0x2000a5ac
    bde0:	2000846c 	.word	0x2000846c

0000bde4 <disconnected>:
{
    bde4:	b530      	push	{r4, r5, lr}
    bde6:	460c      	mov	r4, r1
    bde8:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bdea:	ad06      	add	r5, sp, #24
    bdec:	f021 fe60 	bl	2dab0 <bt_conn_get_dst>
    bdf0:	4629      	mov	r1, r5
    bdf2:	f7ff fe2d 	bl	ba50 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    bdf6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bdfa:	2400      	movs	r4, #0
    bdfc:	4b0d      	ldr	r3, [pc, #52]	; (be34 <disconnected+0x50>)
	if (auth_conn)
    bdfe:	4d0e      	ldr	r5, [pc, #56]	; (be38 <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    be00:	4620      	mov	r0, r4
    be02:	9302      	str	r3, [sp, #8]
    be04:	2203      	movs	r2, #3
    be06:	4623      	mov	r3, r4
    be08:	e9cd 4400 	strd	r4, r4, [sp]
    be0c:	490b      	ldr	r1, [pc, #44]	; (be3c <disconnected+0x58>)
    be0e:	f01d ff63 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
	if (auth_conn)
    be12:	6828      	ldr	r0, [r5, #0]
    be14:	b110      	cbz	r0, be1c <disconnected+0x38>
		bt_conn_unref(auth_conn);
    be16:	f021 fd9e 	bl	2d956 <bt_conn_unref>
		auth_conn = NULL;
    be1a:	602c      	str	r4, [r5, #0]
	if (current_conn)
    be1c:	4c08      	ldr	r4, [pc, #32]	; (be40 <disconnected+0x5c>)
    be1e:	6820      	ldr	r0, [r4, #0]
    be20:	b130      	cbz	r0, be30 <disconnected+0x4c>
		bt_conn_unref(current_conn);
    be22:	f021 fd98 	bl	2d956 <bt_conn_unref>
		current_conn = NULL;
    be26:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    be28:	4806      	ldr	r0, [pc, #24]	; (be44 <disconnected+0x60>)
		current_conn = NULL;
    be2a:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    be2c:	f01d ff7b 	bl	29d26 <gpio_pin_set_dt.isra.0>
}
    be30:	b00f      	add	sp, #60	; 0x3c
    be32:	bd30      	pop	{r4, r5, pc}
    be34:	00034516 	.word	0x00034516
    be38:	2000a5a8 	.word	0x2000a5a8
    be3c:	00032fb8 	.word	0x00032fb8
    be40:	2000a5ac 	.word	0x2000a5ac
    be44:	2000846c 	.word	0x2000846c

0000be48 <activity>:
	}
    
}

void activity(void){
    be48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int blink_status = 0;
    be4c:	2600      	movs	r6, #0
    be4e:	466d      	mov	r5, sp
	int32_t delay;
	
    for (;;){
		delay=Initial_Setup.led_blink_time;
    be50:	f8df 803c 	ldr.w	r8, [pc, #60]	; be90 <activity+0x48>
    be54:	4f0f      	ldr	r7, [pc, #60]	; (be94 <activity+0x4c>)
    be56:	f8b8 4000 	ldrh.w	r4, [r8]
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    be5a:	3601      	adds	r6, #1
    be5c:	e897 0003 	ldmia.w	r7, {r0, r1}
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
    be60:	2c09      	cmp	r4, #9
    be62:	e885 0003 	stmia.w	r5, {r0, r1}
	gpio_pin_set_dt(&led, value);
    be66:	4628      	mov	r0, r5
    be68:	f006 0101 	and.w	r1, r6, #1
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
    be6c:	bfd8      	it	le
    be6e:	24c8      	movle	r4, #200	; 0xc8
	gpio_pin_set_dt(&led, value);
    be70:	f01d ff59 	bl	29d26 <gpio_pin_set_dt.isra.0>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    be74:	f240 30e7 	movw	r0, #999	; 0x3e7
    be78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    be7c:	2300      	movs	r3, #0
    be7e:	eb00 30c4 	add.w	r0, r0, r4, lsl #15
    be82:	2100      	movs	r1, #0
    be84:	f7fd f85c 	bl	8f40 <__aeabi_uldivmod>
		k_sleep(K_MSEC(delay));
    be88:	f01d ff8c 	bl	29da4 <k_sleep.isra.0>
    for (;;){
    be8c:	e7e3      	b.n	be56 <activity+0xe>
    be8e:	bf00      	nop
    be90:	20030de4 	.word	0x20030de4
    be94:	20008464 	.word	0x20008464

0000be98 <adc_thread>:
{
    be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    k_sem_take(&adc_init,K_FOREVER);
    be9c:	f04f 32ff 	mov.w	r2, #4294967295
    bea0:	f04f 33ff 	mov.w	r3, #4294967295
    bea4:	4837      	ldr	r0, [pc, #220]	; (bf84 <adc_thread+0xec>)
{
    bea6:	b085      	sub	sp, #20
    k_sem_take(&adc_init,K_FOREVER);
    bea8:	f01d ff35 	bl	29d16 <k_sem_take.constprop.0.isra.0>
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    beac:	4e36      	ldr	r6, [pc, #216]	; (bf88 <adc_thread+0xf0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    beae:	f8df a0dc 	ldr.w	sl, [pc, #220]	; bf8c <adc_thread+0xf4>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    beb2:	4c37      	ldr	r4, [pc, #220]	; (bf90 <adc_thread+0xf8>)
    beb4:	2700      	movs	r7, #0
    beb6:	46a3      	mov	fp, r4
			adc_value[adc_channels[i].channel_id] = buf_adc;
    beb8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; bf94 <adc_thread+0xfc>
	if (!spec->channel_cfg_dt_node_exists) {
    bebc:	7963      	ldrb	r3, [r4, #5]
    bebe:	b13b      	cbz	r3, bed0 <adc_thread+0x38>
	seq->channels = BIT(spec->channel_id);
    bec0:	2301      	movs	r3, #1
    bec2:	7922      	ldrb	r2, [r4, #4]
    bec4:	4093      	lsls	r3, r2
    bec6:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    bec8:	7c23      	ldrb	r3, [r4, #16]
    beca:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    becc:	7c63      	ldrb	r3, [r4, #17]
    bece:	7473      	strb	r3, [r6, #17]
    bed0:	f04f 32ff 	mov.w	r2, #4294967295
    bed4:	f04f 33ff 	mov.w	r3, #4294967295
    bed8:	4650      	mov	r0, sl
    beda:	f019 fc97 	bl	2580c <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    bede:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    bee0:	68ab      	ldr	r3, [r5, #8]
    bee2:	4631      	mov	r1, r6
    bee4:	4628      	mov	r0, r5
    bee6:	685b      	ldr	r3, [r3, #4]
    bee8:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id] = buf_adc;
    beea:	7922      	ldrb	r2, [r4, #4]
    beec:	f9b8 1000 	ldrsh.w	r1, [r8]
    bef0:	4b29      	ldr	r3, [pc, #164]	; (bf98 <adc_thread+0x100>)
    bef2:	9201      	str	r2, [sp, #4]
    bef4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (flag == 1)
    bef8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; bf9c <adc_thread+0x104>
	return z_impl_k_mutex_unlock(mutex);
    befc:	4650      	mov	r0, sl
    befe:	f019 fcff 	bl	25900 <z_impl_k_mutex_unlock>
    bf02:	f8d9 3000 	ldr.w	r3, [r9]
    bf06:	9a01      	ldr	r2, [sp, #4]
    bf08:	2b01      	cmp	r3, #1
    bf0a:	d12d      	bne.n	bf68 <adc_thread+0xd0>
				printk("- %s, channel %d: ", adc_channels[i].dev->name, adc_channels[i].channel_id);
    bf0c:	6829      	ldr	r1, [r5, #0]
    bf0e:	4824      	ldr	r0, [pc, #144]	; (bfa0 <adc_thread+0x108>)
    bf10:	f01e f92c 	bl	2a16c <printk>
				printk("%" PRId16, buf_adc);
    bf14:	f9b8 1000 	ldrsh.w	r1, [r8]
    bf18:	4822      	ldr	r0, [pc, #136]	; (bfa4 <adc_thread+0x10c>)
    bf1a:	f01e f927 	bl	2a16c <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    bf1e:	7963      	ldrb	r3, [r4, #5]
				val_mv = buf_adc;
    bf20:	f9b8 5000 	ldrsh.w	r5, [r8]
    bf24:	b1e3      	cbz	r3, bf60 <adc_thread+0xc8>
	if (spec->channel_cfg.differential) {
    bf26:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bf28:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    bf2a:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bf2e:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    bf30:	bf0a      	itet	eq
    bf32:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    bf34:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    bf36:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    bf38:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bf3a:	bf08      	it	eq
    bf3c:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    bf3e:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    bf40:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    bf42:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    bf44:	bf44      	itt	mi
    bf46:	f103 33ff 	addmi.w	r3, r3, #4294967295
    bf4a:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    bf4c:	79a0      	ldrb	r0, [r4, #6]
    bf4e:	a903      	add	r1, sp, #12
    bf50:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    bf52:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bf54:	f014 fb36 	bl	205c4 <adc_gain_invert>
	if (ret == 0) {
    bf58:	b910      	cbnz	r0, bf60 <adc_thread+0xc8>
		*valp = (adc_mv >> resolution);
    bf5a:	9d03      	ldr	r5, [sp, #12]
    bf5c:	9b01      	ldr	r3, [sp, #4]
    bf5e:	411d      	asrs	r5, r3
				printk(" = %" PRId32 " mV\n", val_mv);
    bf60:	4629      	mov	r1, r5
    bf62:	4811      	ldr	r0, [pc, #68]	; (bfa8 <adc_thread+0x110>)
    bf64:	f01e f902 	bl	2a16c <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bf68:	3701      	adds	r7, #1
    bf6a:	2f05      	cmp	r7, #5
    bf6c:	f104 0414 	add.w	r4, r4, #20
    bf70:	d1a4      	bne.n	bebc <adc_thread+0x24>
		flag = 0;
    bf72:	2300      	movs	r3, #0
		k_sleep(K_MSEC(100));
    bf74:	f640 40cd 	movw	r0, #3277	; 0xccd
    bf78:	2100      	movs	r1, #0
		flag = 0;
    bf7a:	f8c9 3000 	str.w	r3, [r9]
		k_sleep(K_MSEC(100));
    bf7e:	f01d ff11 	bl	29da4 <k_sleep.isra.0>
	{
    bf82:	e796      	b.n	beb2 <adc_thread+0x1a>
    bf84:	20008c58 	.word	0x20008c58
    bf88:	20008440 	.word	0x20008440
    bf8c:	2000a62c 	.word	0x2000a62c
    bf90:	00033258 	.word	0x00033258
    bf94:	20030de2 	.word	0x20030de2
    bf98:	20030dd2 	.word	0x20030dd2
    bf9c:	2000a628 	.word	0x2000a628
    bfa0:	00034533 	.word	0x00034533
    bfa4:	00034546 	.word	0x00034546
    bfa8:	0003454a 	.word	0x0003454a

0000bfac <feed_circular_buffer_thread>:
void feed_circular_buffer_thread(void){
    bfac:	b570      	push	{r4, r5, r6, lr}
     k_sem_take(&circular_buffer_sh,K_FOREVER);
    bfae:	4e12      	ldr	r6, [pc, #72]	; (bff8 <feed_circular_buffer_thread+0x4c>)
     printk("LOG Circular Buffer\n");
    bfb0:	4d12      	ldr	r5, [pc, #72]	; (bffc <feed_circular_buffer_thread+0x50>)
     dig_probe=gpio_pin_get_dt(DIG_3_ADR);//READS A DIGITAL INPUT
    bfb2:	4c13      	ldr	r4, [pc, #76]	; (c000 <feed_circular_buffer_thread+0x54>)
     k_sem_take(&circular_buffer_sh,K_FOREVER);
    bfb4:	f04f 32ff 	mov.w	r2, #4294967295
    bfb8:	f04f 33ff 	mov.w	r3, #4294967295
    bfbc:	4630      	mov	r0, r6
    bfbe:	f01d feaa 	bl	29d16 <k_sem_take.constprop.0.isra.0>
	 color(6);
    bfc2:	2006      	movs	r0, #6
    bfc4:	f001 fd4e 	bl	da64 <color>
     printk("LOG Circular Buffer\n");
    bfc8:	4628      	mov	r0, r5
    bfca:	f01e f8cf 	bl	2a16c <printk>
	 color(255);
    bfce:	20ff      	movs	r0, #255	; 0xff
    bfd0:	f001 fd48 	bl	da64 <color>
     dig_probe=gpio_pin_get_dt(DIG_3_ADR);//READS A DIGITAL INPUT
    bfd4:	4620      	mov	r0, r4
    bfd6:	f01d fe5a 	bl	29c8e <gpio_pin_get_dt>
    bfda:	4b0a      	ldr	r3, [pc, #40]	; (c004 <feed_circular_buffer_thread+0x58>)
    bfdc:	7018      	strb	r0, [r3, #0]
     feed_circular_buffer();
    bfde:	f001 f8cd 	bl	d17c <feed_circular_buffer>
     print_current_position_cb(C_Buffer_Current_Position);
    bfe2:	4b09      	ldr	r3, [pc, #36]	; (c008 <feed_circular_buffer_thread+0x5c>)
    bfe4:	6818      	ldr	r0, [r3, #0]
    bfe6:	f001 fa2f 	bl	d448 <print_current_position_cb>
     k_sleep(K_MSEC(100));
    bfea:	f640 40cd 	movw	r0, #3277	; 0xccd
    bfee:	2100      	movs	r1, #0
    bff0:	f01d fed8 	bl	29da4 <k_sleep.isra.0>
   while(1){	
    bff4:	e7de      	b.n	bfb4 <feed_circular_buffer_thread+0x8>
    bff6:	bf00      	nop
    bff8:	20008ce8 	.word	0x20008ce8
    bffc:	00034554 	.word	0x00034554
    c000:	000332c4 	.word	0x000332c4
    c004:	2003101f 	.word	0x2003101f
    c008:	2002f86c 	.word	0x2002f86c

0000c00c <shoot_minute_save_thread>:
{
    c00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint64_t actual_time = k_uptime_get() / 1000;
    c010:	f01d fe54 	bl	29cbc <k_uptime_get>
    c014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c018:	2300      	movs	r3, #0
    c01a:	f7fc ff41 	bl	8ea0 <__aeabi_ldivmod>
	h = (actual_time / 3600);
    c01e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    c022:	2300      	movs	r3, #0
	uint64_t actual_time = k_uptime_get() / 1000;
    c024:	460d      	mov	r5, r1
    c026:	4606      	mov	r6, r0
	h = (actual_time / 3600);
    c028:	f7fc ff8a 	bl	8f40 <__aeabi_uldivmod>
	m = (actual_time - (3600 * h)) / 60;
    c02c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    c030:	fb03 f100 	mul.w	r1, r3, r0
    c034:	1a70      	subs	r0, r6, r1
    c036:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    c03a:	223c      	movs	r2, #60	; 0x3c
    c03c:	2300      	movs	r3, #0
    c03e:	f7fc ff7f 	bl	8f40 <__aeabi_uldivmod>
    k_sem_take(&timer_init,K_FOREVER); //wait init
    c042:	f04f 32ff 	mov.w	r2, #4294967295
	m = (actual_time - (3600 * h)) / 60;
    c046:	4605      	mov	r5, r0
    k_sem_take(&timer_init,K_FOREVER); //wait init
    c048:	f04f 33ff 	mov.w	r3, #4294967295
    c04c:	4822      	ldr	r0, [pc, #136]	; (c0d8 <shoot_minute_save_thread+0xcc>)
    c04e:	f01d fe62 	bl	29d16 <k_sem_take.constprop.0.isra.0>
			k_sem_give(&circular_buffer_sh);
    c052:	f8df 8088 	ldr.w	r8, [pc, #136]	; c0dc <shoot_minute_save_thread+0xd0>
			if (lora_cycle_minute>=Initial_Setup.interval_uplink){
    c056:	4e22      	ldr	r6, [pc, #136]	; (c0e0 <shoot_minute_save_thread+0xd4>)
		actual_time = k_uptime_get() / 1000;
    c058:	f01d fe30 	bl	29cbc <k_uptime_get>
    c05c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c060:	2300      	movs	r3, #0
    c062:	f7fc ff1d 	bl	8ea0 <__aeabi_ldivmod>
		h = (actual_time / 3600);
    c066:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    c06a:	2300      	movs	r3, #0
		actual_time = k_uptime_get() / 1000;
    c06c:	460f      	mov	r7, r1
    c06e:	4681      	mov	r9, r0
		h = (actual_time / 3600);
    c070:	f7fc ff66 	bl	8f40 <__aeabi_uldivmod>
		m = (actual_time - (3600 * h)) / 60;
    c074:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    c078:	fb03 f100 	mul.w	r1, r3, r0
    c07c:	ebb9 0001 	subs.w	r0, r9, r1
    c080:	f04f 0300 	mov.w	r3, #0
    c084:	eb67 71e1 	sbc.w	r1, r7, r1, asr #31
    c088:	223c      	movs	r2, #60	; 0x3c
    c08a:	f7fc ff59 	bl	8f40 <__aeabi_uldivmod>
		if (m == (last_minute + 1))
    c08e:	1c6b      	adds	r3, r5, #1
    c090:	4283      	cmp	r3, r0
		m = (actual_time - (3600 * h)) / 60;
    c092:	4604      	mov	r4, r0
		if (m == (last_minute + 1))
    c094:	d119      	bne.n	c0ca <shoot_minute_save_thread+0xbe>
				last_minute = -1;
    c096:	283b      	cmp	r0, #59	; 0x3b
    c098:	bf18      	it	ne
    c09a:	4604      	movne	r4, r0
			k_sem_give(&circular_buffer_sh);
    c09c:	4640      	mov	r0, r8
				last_minute = -1;
    c09e:	bf08      	it	eq
    c0a0:	f04f 34ff 	moveq.w	r4, #4294967295
			k_sem_give(&circular_buffer_sh);
    c0a4:	f01d fe08 	bl	29cb8 <k_sem_give>
			if (lora_cycle_minute>=Initial_Setup.interval_uplink){
    c0a8:	4b0e      	ldr	r3, [pc, #56]	; (c0e4 <shoot_minute_save_thread+0xd8>)
    c0aa:	7832      	ldrb	r2, [r6, #0]
    c0ac:	885b      	ldrh	r3, [r3, #2]
    c0ae:	429a      	cmp	r2, r3
    c0b0:	d304      	bcc.n	c0bc <shoot_minute_save_thread+0xb0>
				k_sem_give(&lorawan_tx);
    c0b2:	480d      	ldr	r0, [pc, #52]	; (c0e8 <shoot_minute_save_thread+0xdc>)
    c0b4:	f01d fe00 	bl	29cb8 <k_sem_give>
				lora_cycle_minute=0;
    c0b8:	2300      	movs	r3, #0
    c0ba:	7033      	strb	r3, [r6, #0]
			lora_cycle_minute++;
    c0bc:	7833      	ldrb	r3, [r6, #0]
			printk("Minute Cycle thread \n");
    c0be:	480b      	ldr	r0, [pc, #44]	; (c0ec <shoot_minute_save_thread+0xe0>)
			lora_cycle_minute++;
    c0c0:	3301      	adds	r3, #1
    c0c2:	7033      	strb	r3, [r6, #0]
			printk("Minute Cycle thread \n");
    c0c4:	4625      	mov	r5, r4
    c0c6:	f01e f851 	bl	2a16c <printk>
		k_sleep(K_MSEC(100));
    c0ca:	f640 40cd 	movw	r0, #3277	; 0xccd
    c0ce:	2100      	movs	r1, #0
    c0d0:	f01d fe68 	bl	29da4 <k_sleep.isra.0>
	{
    c0d4:	e7c0      	b.n	c058 <shoot_minute_save_thread+0x4c>
    c0d6:	bf00      	nop
    c0d8:	20008df0 	.word	0x20008df0
    c0dc:	20008ce8 	.word	0x20008ce8
    c0e0:	20031015 	.word	0x20031015
    c0e4:	20030de4 	.word	0x20030de4
    c0e8:	20008d60 	.word	0x20008d60
    c0ec:	00034569 	.word	0x00034569

0000c0f0 <alarm_infra_thread>:
			
	}
}

void alarm_infra_thread(void){
    c0f0:	b570      	push	{r4, r5, r6, lr}

     //WAIT TO TURN ON THE ALARM
	 k_sem_take(&alarm_infra_init,K_FOREVER);
    c0f2:	f04f 32ff 	mov.w	r2, #4294967295
    c0f6:	f04f 33ff 	mov.w	r3, #4294967295
    c0fa:	481a      	ldr	r0, [pc, #104]	; (c164 <alarm_infra_thread+0x74>)
    c0fc:	f01d fe0b 	bl	29d16 <k_sem_take.constprop.0.isra.0>

	 while(1){
	   int32_t reactivate=SLIP_TIME_REACTIVATE*1000;
	   k_sem_take(&alarm_infra,K_FOREVER);
    c100:	4e19      	ldr	r6, [pc, #100]	; (c168 <alarm_infra_thread+0x78>)

       alarm_busy=1;
    c102:	4d1a      	ldr	r5, [pc, #104]	; (c16c <alarm_infra_thread+0x7c>)
    c104:	2401      	movs	r4, #1
	   k_sem_take(&alarm_infra,K_FOREVER);
    c106:	f04f 32ff 	mov.w	r2, #4294967295
    c10a:	f04f 33ff 	mov.w	r3, #4294967295
    c10e:	4630      	mov	r0, r6
    c110:	f01d fe01 	bl	29d16 <k_sem_take.constprop.0.isra.0>
	   color(1);
    c114:	4620      	mov	r0, r4
       alarm_busy=1;
    c116:	702c      	strb	r4, [r5, #0]
	   color(1);
    c118:	f001 fca4 	bl	da64 <color>
    c11c:	f023 fe69 	bl	2fdf2 <sys_clock_cycle_get_32>
    c120:	4601      	mov	r1, r0
       printk("EMERGENCY - Alarm 4 - at %" PRIu32 "\n", k_cycle_get_32());
    c122:	4813      	ldr	r0, [pc, #76]	; (c170 <alarm_infra_thread+0x80>)
    c124:	f01e f822 	bl	2a16c <printk>
	   gpio_pin_set_dt(LED4, ON); //SET LED 4
    c128:	4621      	mov	r1, r4
    c12a:	4812      	ldr	r0, [pc, #72]	; (c174 <alarm_infra_thread+0x84>)
    c12c:	f01d fdfb 	bl	29d26 <gpio_pin_set_dt.isra.0>
	   if(sensor_status.number[SENSOR_DIG_4]<255)sensor_status.number[SENSOR_DIG_4]++;
    c130:	4a11      	ldr	r2, [pc, #68]	; (c178 <alarm_infra_thread+0x88>)
    c132:	7913      	ldrb	r3, [r2, #4]
    c134:	2bff      	cmp	r3, #255	; 0xff
    c136:	d007      	beq.n	c148 <alarm_infra_thread+0x58>
    c138:	4423      	add	r3, r4
    c13a:	b2db      	uxtb	r3, r3
	   if(sensor_status.number[SENSOR_DIG_4]==1)Initial_Setup.interval_uplink=LORAWAN_INTERVAL_ALARM;
    c13c:	42a3      	cmp	r3, r4
	   if(sensor_status.number[SENSOR_DIG_4]<255)sensor_status.number[SENSOR_DIG_4]++;
    c13e:	7113      	strb	r3, [r2, #4]
	   if(sensor_status.number[SENSOR_DIG_4]==1)Initial_Setup.interval_uplink=LORAWAN_INTERVAL_ALARM;
    c140:	bf02      	ittt	eq
    c142:	2203      	moveq	r2, #3
    c144:	4b0d      	ldreq	r3, [pc, #52]	; (c17c <alarm_infra_thread+0x8c>)
    c146:	805a      	strheq	r2, [r3, #2]
	   k_sem_give(&lorawan_tx);
    c148:	480d      	ldr	r0, [pc, #52]	; (c180 <alarm_infra_thread+0x90>)
    c14a:	f01d fdb5 	bl	29cb8 <k_sem_give>
	   color(255);
    c14e:	20ff      	movs	r0, #255	; 0xff
    c150:	f001 fc88 	bl	da64 <color>
	   k_msleep(reactivate);
    c154:	f64e 2060 	movw	r0, #60000	; 0xea60
    c158:	f01d fe26 	bl	29da8 <k_msleep.isra.0>
	   alarm_busy=0;
    c15c:	2300      	movs	r3, #0
    c15e:	702b      	strb	r3, [r5, #0]
	 while(1){
    c160:	e7d0      	b.n	c104 <alarm_infra_thread+0x14>
    c162:	bf00      	nop
    c164:	20008c88 	.word	0x20008c88
    c168:	20008c70 	.word	0x20008c70
    c16c:	2003101e 	.word	0x2003101e
    c170:	0003457f 	.word	0x0003457f
    c174:	20008454 	.word	0x20008454
    c178:	20031016 	.word	0x20031016
    c17c:	20030de4 	.word	0x20030de4
    c180:	20008d60 	.word	0x20008d60

0000c184 <uart_cb>:
{
    c184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type)
    c186:	780b      	ldrb	r3, [r1, #0]
    c188:	2b05      	cmp	r3, #5
    c18a:	d829      	bhi.n	c1e0 <uart_cb+0x5c>
    c18c:	e8df f003 	tbb	[pc, r3]
    c190:	6b2c9503 	.word	0x6b2c9503
    c194:	4984      	.short	0x4984
		if ((evt->data.tx.len == 0) ||
    c196:	688b      	ldr	r3, [r1, #8]
    c198:	b313      	cbz	r3, c1e0 <uart_cb+0x5c>
			(!evt->data.tx.buf))
    c19a:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    c19c:	b300      	cbz	r0, c1e0 <uart_cb+0x5c>
		if (aborted_buf){
    c19e:	4a51      	ldr	r2, [pc, #324]	; (c2e4 <uart_cb+0x160>)
    c1a0:	6813      	ldr	r3, [r2, #0]
    c1a2:	b1fb      	cbz	r3, c1e4 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    c1a4:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    c1a6:	2300      	movs	r3, #0
    c1a8:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    c1aa:	4a4f      	ldr	r2, [pc, #316]	; (c2e8 <uart_cb+0x164>)
    c1ac:	6013      	str	r3, [r2, #0]
		k_free(buf);
    c1ae:	f025 fa8b 	bl	316c8 <k_free>
	return z_impl_k_queue_get(queue, timeout);
    c1b2:	2200      	movs	r2, #0
    c1b4:	2300      	movs	r3, #0
    c1b6:	484d      	ldr	r0, [pc, #308]	; (c2ec <uart_cb+0x168>)
    c1b8:	f019 fbe0 	bl	2597c <z_impl_k_queue_get>
		if (!buf)
    c1bc:	b180      	cbz	r0, c1e0 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS))
    c1be:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    c1c2:	1d01      	adds	r1, r0, #4
    c1c4:	484a      	ldr	r0, [pc, #296]	; (c2f0 <uart_cb+0x16c>)
    c1c6:	f01d fd9e 	bl	29d06 <uart_tx.constprop.0>
    c1ca:	b148      	cbz	r0, c1e0 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    c1cc:	4b49      	ldr	r3, [pc, #292]	; (c2f4 <uart_cb+0x170>)
    c1ce:	2202      	movs	r2, #2
    c1d0:	9302      	str	r3, [sp, #8]
    c1d2:	2300      	movs	r3, #0
    c1d4:	4618      	mov	r0, r3
    c1d6:	e9cd 3300 	strd	r3, r3, [sp]
    c1da:	4947      	ldr	r1, [pc, #284]	; (c2f8 <uart_cb+0x174>)
			LOG_WRN("Not able to allocate UART receive buffer");
    c1dc:	f01d fd7c 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
}
    c1e0:	b004      	add	sp, #16
    c1e2:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data);
    c1e4:	3804      	subs	r0, #4
    c1e6:	e7e2      	b.n	c1ae <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    c1e8:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    c1ea:	68cb      	ldr	r3, [r1, #12]
    c1ec:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
    c1f0:	4403      	add	r3, r0
		if (disable_req)
    c1f2:	4842      	ldr	r0, [pc, #264]	; (c2fc <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
    c1f4:	b29b      	uxth	r3, r3
    c1f6:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		if (disable_req)
    c1fa:	7802      	ldrb	r2, [r0, #0]
    c1fc:	2a00      	cmp	r2, #0
    c1fe:	d1ef      	bne.n	c1e0 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    c200:	684a      	ldr	r2, [r1, #4]
    c202:	4413      	add	r3, r2
    c204:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c208:	2b0a      	cmp	r3, #10
    c20a:	d001      	beq.n	c210 <uart_cb+0x8c>
    c20c:	2b0d      	cmp	r3, #13
    c20e:	d1e7      	bne.n	c1e0 <uart_cb+0x5c>
			disable_req = true;
    c210:	2301      	movs	r3, #1
    c212:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    c214:	4836      	ldr	r0, [pc, #216]	; (c2f0 <uart_cb+0x16c>)
    c216:	6883      	ldr	r3, [r0, #8]
    c218:	695b      	ldr	r3, [r3, #20]
}
    c21a:	b004      	add	sp, #16
    c21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c220:	4718      	bx	r3
		disable_req = false;
    c222:	2400      	movs	r4, #0
    c224:	4b35      	ldr	r3, [pc, #212]	; (c2fc <uart_cb+0x178>)
		buf = k_malloc(sizeof(*buf));
    c226:	206c      	movs	r0, #108	; 0x6c
		disable_req = false;
    c228:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    c22a:	f025 fa54 	bl	316d6 <k_malloc>
    c22e:	4603      	mov	r3, r0
		if (buf)
    c230:	b140      	cbz	r0, c244 <uart_cb+0xc0>
			buf->len = 0;
    c232:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    c236:	1d01      	adds	r1, r0, #4
    c238:	482d      	ldr	r0, [pc, #180]	; (c2f0 <uart_cb+0x16c>)
}
    c23a:	b004      	add	sp, #16
    c23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    c240:	f01d bd59 	b.w	29cf6 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    c244:	4a2e      	ldr	r2, [pc, #184]	; (c300 <uart_cb+0x17c>)
    c246:	9000      	str	r0, [sp, #0]
    c248:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c24c:	492a      	ldr	r1, [pc, #168]	; (c2f8 <uart_cb+0x174>)
    c24e:	2202      	movs	r2, #2
    c250:	f01d fd42 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    c254:	f240 6267 	movw	r2, #1639	; 0x667
    c258:	2300      	movs	r3, #0
    c25a:	482a      	ldr	r0, [pc, #168]	; (c304 <uart_cb+0x180>)
}
    c25c:	b004      	add	sp, #16
    c25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    c262:	f019 be15 	b.w	25e90 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    c266:	206c      	movs	r0, #108	; 0x6c
    c268:	f025 fa35 	bl	316d6 <k_malloc>
    c26c:	4603      	mov	r3, r0
		if (buf)
    c26e:	b160      	cbz	r0, c28a <uart_cb+0x106>
			buf->len = 0;
    c270:	2200      	movs	r2, #0
    c272:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	return api->rx_buf_rsp(dev, buf, len);
    c276:	481e      	ldr	r0, [pc, #120]	; (c2f0 <uart_cb+0x16c>)
    c278:	1d19      	adds	r1, r3, #4
    c27a:	6882      	ldr	r2, [r0, #8]
    c27c:	6914      	ldr	r4, [r2, #16]
    c27e:	2264      	movs	r2, #100	; 0x64
    c280:	4623      	mov	r3, r4
}
    c282:	b004      	add	sp, #16
    c284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c288:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    c28a:	4a1d      	ldr	r2, [pc, #116]	; (c300 <uart_cb+0x17c>)
    c28c:	491a      	ldr	r1, [pc, #104]	; (c2f8 <uart_cb+0x174>)
    c28e:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c292:	9000      	str	r0, [sp, #0]
    c294:	2202      	movs	r2, #2
    c296:	e7a1      	b.n	c1dc <uart_cb+0x58>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    c298:	684b      	ldr	r3, [r1, #4]
    c29a:	1f19      	subs	r1, r3, #4
		if (buf->len > 0)
    c29c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
    c2a0:	b12b      	cbz	r3, c2ae <uart_cb+0x12a>
			k_fifo_put(&fifo_uart_rx_data, buf);
    c2a2:	4819      	ldr	r0, [pc, #100]	; (c308 <uart_cb+0x184>)
}
    c2a4:	b004      	add	sp, #16
    c2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    c2aa:	f024 bdcc 	b.w	30e46 <k_queue_append>
			k_free(buf);
    c2ae:	4608      	mov	r0, r1
}
    c2b0:	b004      	add	sp, #16
    c2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    c2b6:	f025 ba07 	b.w	316c8 <k_free>
		if (!aborted_buf)
    c2ba:	4a0a      	ldr	r2, [pc, #40]	; (c2e4 <uart_cb+0x160>)
    c2bc:	6813      	ldr	r3, [r2, #0]
    c2be:	b90b      	cbnz	r3, c2c4 <uart_cb+0x140>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    c2c0:	684b      	ldr	r3, [r1, #4]
    c2c2:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    c2c4:	4808      	ldr	r0, [pc, #32]	; (c2e8 <uart_cb+0x164>)
    c2c6:	688b      	ldr	r3, [r1, #8]
    c2c8:	6801      	ldr	r1, [r0, #0]
    c2ca:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    c2cc:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    c2ce:	6003      	str	r3, [r0, #0]
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    c2d0:	f8b1 2064 	ldrh.w	r2, [r1, #100]	; 0x64
    c2d4:	4806      	ldr	r0, [pc, #24]	; (c2f0 <uart_cb+0x16c>)
    c2d6:	1ad2      	subs	r2, r2, r3
    c2d8:	4419      	add	r1, r3
}
    c2da:	b004      	add	sp, #16
    c2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    c2e0:	f01d bd11 	b.w	29d06 <uart_tx.constprop.0>
    c2e4:	2000a57c 	.word	0x2000a57c
    c2e8:	2000a578 	.word	0x2000a578
    c2ec:	20008e38 	.word	0x20008e38
    c2f0:	00032878 	.word	0x00032878
    c2f4:	0003459c 	.word	0x0003459c
    c2f8:	00032fb8 	.word	0x00032fb8
    c2fc:	20031014 	.word	0x20031014
    c300:	000345ba 	.word	0x000345ba
    c304:	20009870 	.word	0x20009870
    c308:	20008e20 	.word	0x20008e20

0000c30c <gnss_write_thread>:
{
    c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c310:	b085      	sub	sp, #20
	uint64_t time = k_uptime_get();
    c312:	f01d fcd3 	bl	29cbc <k_uptime_get>
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c316:	4b76      	ldr	r3, [pc, #472]	; (c4f0 <gnss_write_thread+0x1e4>)
    c318:	4f76      	ldr	r7, [pc, #472]	; (c4f4 <gnss_write_thread+0x1e8>)
    c31a:	889a      	ldrh	r2, [r3, #4]
    c31c:	6818      	ldr	r0, [r3, #0]
    c31e:	799b      	ldrb	r3, [r3, #6]
    c320:	f8ad 2008 	strh.w	r2, [sp, #8]
    c324:	f88d 300a 	strb.w	r3, [sp, #10]
    c328:	2300      	movs	r3, #0
    c32a:	f8ad 300b 	strh.w	r3, [sp, #11]
    c32e:	f88d 300d 	strb.w	r3, [sp, #13]
    char marker[2]="\n";
    c332:	230a      	movs	r3, #10
    c334:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    c338:	f8ad 3000 	strh.w	r3, [sp]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c33c:	2220      	movs	r2, #32
    char marker[2]="\n";
    c33e:	463b      	mov	r3, r7
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c340:	9001      	str	r0, [sp, #4]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c342:	3c01      	subs	r4, #1
    c344:	f803 2b01 	strb.w	r2, [r3], #1
    c348:	d1fb      	bne.n	c342 <gnss_write_thread+0x36>
	buf2a = k_malloc(sizeof(*buf2a));
    c34a:	206c      	movs	r0, #108	; 0x6c
    c34c:	f025 f9c3 	bl	316d6 <k_malloc>
	k_sem_take(&gps_init,K_FOREVER); 
    c350:	f04f 32ff 	mov.w	r2, #4294967295
    c354:	f04f 33ff 	mov.w	r3, #4294967295
    c358:	4867      	ldr	r0, [pc, #412]	; (c4f8 <gnss_write_thread+0x1ec>)
    c35a:	f01d fcdc 	bl	29d16 <k_sem_take.constprop.0.isra.0>
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;
    c35e:	46a1      	mov	r9, r4
	uint8_t state = 0, pkt_init = 0;
    c360:	4626      	mov	r6, r4
    c362:	4625      	mov	r5, r4
    c364:	f8df 8194 	ldr.w	r8, [pc, #404]	; c4fc <gnss_write_thread+0x1f0>
   				ret = strstr(buffer, nmea_id);
    c368:	f8df a188 	ldr.w	sl, [pc, #392]	; c4f4 <gnss_write_thread+0x1e8>
    c36c:	f04f 32ff 	mov.w	r2, #4294967295
    c370:	f04f 33ff 	mov.w	r3, #4294967295
    c374:	4640      	mov	r0, r8
    c376:	f019 fb01 	bl	2597c <z_impl_k_queue_get>
    c37a:	4683      	mov	fp, r0
	z_impl_k_queue_init(queue);
    c37c:	4640      	mov	r0, r8
    c37e:	f024 fd56 	bl	30e2e <z_impl_k_queue_init>
		if (buf2a->len > 0)
    c382:	f8bb 1068 	ldrh.w	r1, [fp, #104]	; 0x68
    c386:	b1d9      	cbz	r1, c3c0 <gnss_write_thread+0xb4>
			k = (buf2a->len);
    c388:	4689      	mov	r9, r1
			while (i < k && pkt_init == 0)
    c38a:	b9ce      	cbnz	r6, c3c0 <gnss_write_thread+0xb4>
			index = 0;
    c38c:	4632      	mov	r2, r6
			i = 0;
    c38e:	4630      	mov	r0, r6
    c390:	f10b 0c03 	add.w	ip, fp, #3
				switch (buf2a->data[i])
    c394:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    c398:	2b52      	cmp	r3, #82	; 0x52
    c39a:	d806      	bhi.n	c3aa <gnss_write_thread+0x9e>
    c39c:	2b46      	cmp	r3, #70	; 0x46
    c39e:	d85d      	bhi.n	c45c <gnss_write_thread+0x150>
    c3a0:	2b24      	cmp	r3, #36	; 0x24
    c3a2:	d07b      	beq.n	c49c <gnss_write_thread+0x190>
    c3a4:	2b43      	cmp	r3, #67	; 0x43
    c3a6:	f000 808e 	beq.w	c4c6 <gnss_write_thread+0x1ba>
				i++;
    c3aa:	3001      	adds	r0, #1
			while (i < k && pkt_init == 0)
    c3ac:	4288      	cmp	r0, r1
    c3ae:	d3f1      	bcc.n	c394 <gnss_write_thread+0x88>
			if (state == 6 && pkt_init == 0)
    c3b0:	2d06      	cmp	r5, #6
    c3b2:	d105      	bne.n	c3c0 <gnss_write_thread+0xb4>
					if (buf2a->data[index]!=0x0D) {
    c3b4:	f10b 0b04 	add.w	fp, fp, #4
				while (index < k)
    c3b8:	428a      	cmp	r2, r1
    c3ba:	f0c0 8089 	bcc.w	c4d0 <gnss_write_thread+0x1c4>
				pkt_init=1;
    c3be:	2601      	movs	r6, #1
	return z_impl_k_queue_get(queue, timeout);
    c3c0:	f04f 33ff 	mov.w	r3, #4294967295
    c3c4:	f04f 32ff 	mov.w	r2, #4294967295
    c3c8:	4640      	mov	r0, r8
    c3ca:	f019 fad7 	bl	2597c <z_impl_k_queue_get>
		if (buf2a->len > 0)
    c3ce:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d0ca      	beq.n	c36c <gnss_write_thread+0x60>
			if ((pkt_init >= 1) && (bfcnt < BUFF_SIZE)  )
    c3d6:	b16e      	cbz	r6, c3f4 <gnss_write_thread+0xe8>
    c3d8:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c3dc:	d20d      	bcs.n	c3fa <gnss_write_thread+0xee>
    c3de:	f109 0203 	add.w	r2, r9, #3
    c3e2:	1cc3      	adds	r3, r0, #3
    c3e4:	4410      	add	r0, r2
				while ((index < k)  && (bfcnt < BUFF_SIZE))
    c3e6:	4298      	cmp	r0, r3
    c3e8:	d002      	beq.n	c3f0 <gnss_write_thread+0xe4>
    c3ea:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c3ee:	d177      	bne.n	c4e0 <gnss_write_thread+0x1d4>
				pkt_init++;
    c3f0:	3601      	adds	r6, #1
    c3f2:	b2f6      	uxtb	r6, r6
			if (bfcnt >= BUFF_SIZE - 1)
    c3f4:	f5b4 7fef 	cmp.w	r4, #478	; 0x1de
    c3f8:	d9b8      	bls.n	c36c <gnss_write_thread+0x60>
   				ret = strstr(buffer, nmea_id);
    c3fa:	a901      	add	r1, sp, #4
    c3fc:	4650      	mov	r0, sl
   				i=parse_comma_delimited_str(token, field, 20);
    c3fe:	4c40      	ldr	r4, [pc, #256]	; (c500 <gnss_write_thread+0x1f4>)
   				ret = strstr(buffer, nmea_id);
    c400:	f025 fb47 	bl	31a92 <strstr>
   				token = strtok(ret, marker);
    c404:	4669      	mov	r1, sp
    c406:	f01b fa61 	bl	278cc <strtok>
   				i=parse_comma_delimited_str(token, field, 20);
    c40a:	2214      	movs	r2, #20
    c40c:	4621      	mov	r1, r4
    c40e:	f01d fcfa 	bl	29e06 <parse_comma_delimited_str>
				if (i==12){
    c412:	280c      	cmp	r0, #12
    c414:	d117      	bne.n	c446 <gnss_write_thread+0x13a>
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c416:	68a3      	ldr	r3, [r4, #8]
    c418:	4d3a      	ldr	r5, [pc, #232]	; (c504 <gnss_write_thread+0x1f8>)
    c41a:	781b      	ldrb	r3, [r3, #0]
    c41c:	3b40      	subs	r3, #64	; 0x40
    c41e:	b2db      	uxtb	r3, r3
				  if (position.gps_fixed==1){  
    c420:	2b01      	cmp	r3, #1
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c422:	732b      	strb	r3, [r5, #12]
				  if (position.gps_fixed==1){  
    c424:	d10f      	bne.n	c446 <gnss_write_thread+0x13a>
				   position.latitude=atof(field[3]);
    c426:	68e0      	ldr	r0, [r4, #12]
    c428:	f025 f95a 	bl	316e0 <atof>
    c42c:	f7fc fa8a 	bl	8944 <__aeabi_d2f>
    c430:	6068      	str	r0, [r5, #4]
				   position.longitude=atof(field[5]);
    c432:	6960      	ldr	r0, [r4, #20]
    c434:	f025 f954 	bl	316e0 <atof>
    c438:	f7fc fa84 	bl	8944 <__aeabi_d2f>
				   fill_date(field[1],field[9]);
    c43c:	6a61      	ldr	r1, [r4, #36]	; 0x24
				   position.longitude=atof(field[5]);
    c43e:	60a8      	str	r0, [r5, #8]
				   fill_date(field[1],field[9]);
    c440:	6860      	ldr	r0, [r4, #4]
    c442:	f000 fd73 	bl	cf2c <fill_date>
				pkt_init=1;
    c446:	463b      	mov	r3, r7
    c448:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
				while (index < BUFF_SIZE)buffer[index++] = 0x20;//space
    c44c:	2220      	movs	r2, #32
    c44e:	3c01      	subs	r4, #1
    c450:	f803 2b01 	strb.w	r2, [r3], #1
    c454:	d1fb      	bne.n	c44e <gnss_write_thread+0x142>
				pkt_init = 0;
    c456:	4626      	mov	r6, r4
				state = 0;
    c458:	4625      	mov	r5, r4
    c45a:	e787      	b.n	c36c <gnss_write_thread+0x60>
				switch (buf2a->data[i])
    c45c:	3b47      	subs	r3, #71	; 0x47
    c45e:	2b0b      	cmp	r3, #11
    c460:	d8a3      	bhi.n	c3aa <gnss_write_thread+0x9e>
    c462:	f20f 0e08 	addw	lr, pc, #8
    c466:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    c46a:	bf00      	nop
    c46c:	0000c4a7 	.word	0x0000c4a7
    c470:	0000c3ab 	.word	0x0000c3ab
    c474:	0000c3ab 	.word	0x0000c3ab
    c478:	0000c3ab 	.word	0x0000c3ab
    c47c:	0000c3ab 	.word	0x0000c3ab
    c480:	0000c3ab 	.word	0x0000c3ab
    c484:	0000c4bf 	.word	0x0000c4bf
    c488:	0000c3ab 	.word	0x0000c3ab
    c48c:	0000c3ab 	.word	0x0000c3ab
    c490:	0000c4af 	.word	0x0000c4af
    c494:	0000c3ab 	.word	0x0000c3ab
    c498:	0000c4b7 	.word	0x0000c4b7
					if (state == 0)state = 1;
    c49c:	2d01      	cmp	r5, #1
    c49e:	bf38      	it	cc
    c4a0:	2501      	movcc	r5, #1
    c4a2:	b2ed      	uxtb	r5, r5
    c4a4:	e781      	b.n	c3aa <gnss_write_thread+0x9e>
					if (state == 1)state = 2;
    c4a6:	2d01      	cmp	r5, #1
    c4a8:	bf08      	it	eq
    c4aa:	2502      	moveq	r5, #2
    c4ac:	e77d      	b.n	c3aa <gnss_write_thread+0x9e>
					if (state == 2)state = 3;
    c4ae:	2d02      	cmp	r5, #2
    c4b0:	bf08      	it	eq
    c4b2:	2503      	moveq	r5, #3
    c4b4:	e779      	b.n	c3aa <gnss_write_thread+0x9e>
					if (state == 3)state = 4;
    c4b6:	2d03      	cmp	r5, #3
    c4b8:	bf08      	it	eq
    c4ba:	2504      	moveq	r5, #4
    c4bc:	e775      	b.n	c3aa <gnss_write_thread+0x9e>
					if (state == 4)state = 5;
    c4be:	2d04      	cmp	r5, #4
    c4c0:	bf08      	it	eq
    c4c2:	2505      	moveq	r5, #5
    c4c4:	e771      	b.n	c3aa <gnss_write_thread+0x9e>
					if (state == 5){
    c4c6:	2d05      	cmp	r5, #5
						state = 6;
    c4c8:	bf04      	itt	eq
    c4ca:	2506      	moveq	r5, #6
					    index = i - 5;
    c4cc:	1f42      	subeq	r2, r0, #5
    c4ce:	e76c      	b.n	c3aa <gnss_write_thread+0x9e>
					if (buf2a->data[index]!=0x0D) {
    c4d0:	f81b 3002 	ldrb.w	r3, [fp, r2]
					index++;
    c4d4:	3201      	adds	r2, #1
					if (buf2a->data[index]!=0x0D) {
    c4d6:	2b0d      	cmp	r3, #13
						buffer[bfcnt] = buf2a->data[index];
    c4d8:	bf1c      	itt	ne
    c4da:	553b      	strbne	r3, [r7, r4]
						bfcnt++;
    c4dc:	3401      	addne	r4, #1
					index++;
    c4de:	e76b      	b.n	c3b8 <gnss_write_thread+0xac>
					if (buf2a->data[index]!=0x0D) {
    c4e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c4e4:	2a0d      	cmp	r2, #13
						buffer[bfcnt] = buf2a->data[index];
    c4e6:	bf1c      	itt	ne
    c4e8:	553a      	strbne	r2, [r7, r4]
						bfcnt++;
    c4ea:	3401      	addne	r4, #1
					index++;
    c4ec:	e77b      	b.n	c3e6 <gnss_write_thread+0xda>
    c4ee:	bf00      	nop
    c4f0:	00033010 	.word	0x00033010
    c4f4:	20030e34 	.word	0x20030e34
    c4f8:	20008d00 	.word	0x20008d00
    c4fc:	20008e08 	.word	0x20008e08
    c500:	2000a528 	.word	0x2000a528
    c504:	2000a5b4 	.word	0x2000a5b4

0000c508 <ble_write_thread>:
{
    c508:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    c50a:	f04f 32ff 	mov.w	r2, #4294967295
    c50e:	f04f 33ff 	mov.w	r3, #4294967295
    c512:	480d      	ldr	r0, [pc, #52]	; (c548 <ble_write_thread+0x40>)
    c514:	f01d fbff 	bl	29d16 <k_sem_take.constprop.0.isra.0>
    c518:	4d0c      	ldr	r5, [pc, #48]	; (c54c <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    c51a:	4e0d      	ldr	r6, [pc, #52]	; (c550 <ble_write_thread+0x48>)
    c51c:	f04f 32ff 	mov.w	r2, #4294967295
    c520:	f04f 33ff 	mov.w	r3, #4294967295
    c524:	4628      	mov	r0, r5
    c526:	f019 fa29 	bl	2597c <z_impl_k_queue_get>
    c52a:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len))
    c52c:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    c530:	1d01      	adds	r1, r0, #4
    c532:	2000      	movs	r0, #0
    c534:	f004 fbba 	bl	10cac <bt_nus_send>
    c538:	b110      	cbz	r0, c540 <ble_write_thread+0x38>
			printk("Falha aqui- Failed to send data over BLE connection");
    c53a:	4630      	mov	r0, r6
    c53c:	f01d fe16 	bl	2a16c <printk>
		k_free(buf);
    c540:	4620      	mov	r0, r4
    c542:	f025 f8c1 	bl	316c8 <k_free>
	{
    c546:	e7e9      	b.n	c51c <ble_write_thread+0x14>
    c548:	20008ca0 	.word	0x20008ca0
    c54c:	20008e20 	.word	0x20008e20
    c550:	000345e3 	.word	0x000345e3

0000c554 <lorawan_thread>:
{
    c554:	b570      	push	{r4, r5, r6, lr}
    lora_dev = DEVICE_DT_GET(DT_NODELABEL(lora0));
    c556:	4b3d      	ldr	r3, [pc, #244]	; (c64c <lorawan_thread+0xf8>)
    c558:	4c3d      	ldr	r4, [pc, #244]	; (c650 <lorawan_thread+0xfc>)
    k_sem_take(&lorawan_init, K_FOREVER);  // WAIT FOR INIT
    c55a:	f04f 32ff 	mov.w	r2, #4294967295
    lora_dev = DEVICE_DT_GET(DT_NODELABEL(lora0));
    c55e:	6023      	str	r3, [r4, #0]
    k_sem_take(&lorawan_init, K_FOREVER);  // WAIT FOR INIT
    c560:	483c      	ldr	r0, [pc, #240]	; (c654 <lorawan_thread+0x100>)
    c562:	f04f 33ff 	mov.w	r3, #4294967295
    c566:	f01d fbd6 	bl	29d16 <k_sem_take.constprop.0.isra.0>
	color(10);
    c56a:	200a      	movs	r0, #10
    c56c:	f001 fa7a 	bl	da64 <color>
    printk("LoraWan Thread Started\n\n");
    c570:	4839      	ldr	r0, [pc, #228]	; (c658 <lorawan_thread+0x104>)
    c572:	f01d fdfb 	bl	2a16c <printk>
    color(255);
    c576:	20ff      	movs	r0, #255	; 0xff
    c578:	f001 fa74 	bl	da64 <color>
	if (!device_is_ready(lora_dev)) {
    c57c:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    c57e:	f024 faf2 	bl	30b66 <z_device_is_ready>
    c582:	b930      	cbnz	r0, c592 <lorawan_thread+0x3e>
		printk("%s: device not ready.\n\n", lora_dev->name);
    c584:	6823      	ldr	r3, [r4, #0]
    c586:	4835      	ldr	r0, [pc, #212]	; (c65c <lorawan_thread+0x108>)
    c588:	6819      	ldr	r1, [r3, #0]
}
    c58a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("%s: device not ready.\n\n", lora_dev->name);
    c58e:	f01d bded 	b.w	2a16c <printk>
    lorawan_set_region(LORAWAN_REGION_EU868);
    c592:	2005      	movs	r0, #5
    c594:	f005 fdaa 	bl	120ec <lorawan_set_region>
	lorawan_register_downlink_callback(&downlink_cb);
    c598:	4831      	ldr	r0, [pc, #196]	; (c660 <lorawan_thread+0x10c>)
    c59a:	f005 ff5f 	bl	1245c <lorawan_register_downlink_callback>
	lorawan_register_dr_changed_callback(lorwan_datarate_changed);
    c59e:	4831      	ldr	r0, [pc, #196]	; (c664 <lorawan_thread+0x110>)
    c5a0:	f005 ff6c 	bl	1247c <lorawan_register_dr_changed_callback>
   	        printk("Joining network over OTAA\n\n");
    c5a4:	4e30      	ldr	r6, [pc, #192]	; (c668 <lorawan_thread+0x114>)
	  lorawan_reconnect=0;
    c5a6:	4c31      	ldr	r4, [pc, #196]	; (c66c <lorawan_thread+0x118>)
    	    color(10);
    c5a8:	200a      	movs	r0, #10
    c5aa:	f001 fa5b 	bl	da64 <color>
   	        printk("Joining network over OTAA\n\n");
    c5ae:	4630      	mov	r0, r6
    c5b0:	f01d fddc 	bl	2a16c <printk>
			color(255);
    c5b4:	20ff      	movs	r0, #255	; 0xff
    c5b6:	f001 fa55 	bl	da64 <color>
            k_sleep(K_MSEC(1000));
    c5ba:	2100      	movs	r1, #0
    c5bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c5c0:	f01d fbf0 	bl	29da4 <k_sleep.isra.0>
            lorawan_start();
    c5c4:	f005 ff60 	bl	12488 <lorawan_start>
			k_sleep(K_MSEC(500));//500ms
    c5c8:	2100      	movs	r1, #0
    c5ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    c5ce:	f01d fbe9 	bl	29da4 <k_sleep.isra.0>
		    lorawan_enable_adr( true );
    c5d2:	2001      	movs	r0, #1
    c5d4:	f005 feb4 	bl	12340 <lorawan_enable_adr>
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    c5d8:	f013 ffe8 	bl	205ac <z_impl_sys_rand32_get>
			join_cfg.mode = LORAWAN_CLASS_A; //was A
    c5dc:	2500      	movs	r5, #0
    c5de:	4b24      	ldr	r3, [pc, #144]	; (c670 <lorawan_thread+0x11c>)
			join_cfg.dev_eui = dev_eui;
    c5e0:	4a24      	ldr	r2, [pc, #144]	; (c674 <lorawan_thread+0x120>)
    		join_cfg.otaa.dev_nonce = dev_nonce;
    c5e2:	b280      	uxth	r0, r0
			join_cfg.dev_eui = dev_eui;
    c5e4:	611a      	str	r2, [r3, #16]
			join_cfg.otaa.join_eui = join_eui;
    c5e6:	4a24      	ldr	r2, [pc, #144]	; (c678 <lorawan_thread+0x124>)
    		join_cfg.otaa.dev_nonce = dev_nonce;
    c5e8:	60d8      	str	r0, [r3, #12]
			join_cfg.otaa.join_eui = join_eui;
    c5ea:	601a      	str	r2, [r3, #0]
			join_cfg.otaa.app_key = app_key;
    c5ec:	4a23      	ldr	r2, [pc, #140]	; (c67c <lorawan_thread+0x128>)
		    ret = lorawan_join(&join_cfg);
    c5ee:	4618      	mov	r0, r3
			join_cfg.otaa.nwk_key = app_key;
    c5f0:	e9c3 2201 	strd	r2, r2, [r3, #4]
			join_cfg.mode = LORAWAN_CLASS_A; //was A
    c5f4:	751d      	strb	r5, [r3, #20]
		    ret = lorawan_join(&join_cfg);
    c5f6:	f005 fda9 	bl	1214c <lorawan_join>
			if (ret<0){
    c5fa:	42a8      	cmp	r0, r5
				 color(10);
    c5fc:	f04f 000a 	mov.w	r0, #10
			if (ret<0){
    c600:	db16      	blt.n	c630 <lorawan_thread+0xdc>
	  color(10);
    c602:	f001 fa2f 	bl	da64 <color>
	  printk("Joined OTAA\n\n");
    c606:	481e      	ldr	r0, [pc, #120]	; (c680 <lorawan_thread+0x12c>)
    c608:	f01d fdb0 	bl	2a16c <printk>
	  color(255);
    c60c:	20ff      	movs	r0, #255	; 0xff
    c60e:	f001 fa29 	bl	da64 <color>
	  lorawan_reconnect=0;
    c612:	7025      	strb	r5, [r4, #0]
		  k_sem_take(&lorawan_tx, K_FOREVER);
    c614:	4d1b      	ldr	r5, [pc, #108]	; (c684 <lorawan_thread+0x130>)
      while (!lorawan_reconnect) {
    c616:	7823      	ldrb	r3, [r4, #0]
    c618:	2b00      	cmp	r3, #0
    c61a:	d1c5      	bne.n	c5a8 <lorawan_thread+0x54>
		  k_sem_take(&lorawan_tx, K_FOREVER);
    c61c:	f04f 32ff 	mov.w	r2, #4294967295
    c620:	f04f 33ff 	mov.w	r3, #4294967295
    c624:	4628      	mov	r0, r5
    c626:	f01d fb76 	bl	29d16 <k_sem_take.constprop.0.isra.0>
		  lorawan_tx_data();
    c62a:	f001 f869 	bl	d700 <lorawan_tx_data>
    c62e:	e7f2      	b.n	c616 <lorawan_thread+0xc2>
				 color(10);
    c630:	f001 fa18 	bl	da64 <color>
				 printk("Failed..Waiting some seconds to try join again\n\n");
    c634:	4814      	ldr	r0, [pc, #80]	; (c688 <lorawan_thread+0x134>)
    c636:	f01d fd99 	bl	2a16c <printk>
				 color(255);
    c63a:	20ff      	movs	r0, #255	; 0xff
    c63c:	f001 fa12 	bl	da64 <color>
			     k_sleep(K_MSEC(53000));
    c640:	f44f 10d4 	mov.w	r0, #1736704	; 0x1a8000
    c644:	2100      	movs	r1, #0
    c646:	f01d fbad 	bl	29da4 <k_sleep.isra.0>
      } while ( ret < 0 );
    c64a:	e7ad      	b.n	c5a8 <lorawan_thread+0x54>
    c64c:	00032920 	.word	0x00032920
    c650:	2000a598 	.word	0x2000a598
    c654:	20008d30 	.word	0x20008d30
    c658:	00034617 	.word	0x00034617
    c65c:	00034630 	.word	0x00034630
    c660:	20008434 	.word	0x20008434
    c664:	0000b6f5 	.word	0x0000b6f5
    c668:	00034648 	.word	0x00034648
    c66c:	2003101d 	.word	0x2003101d
    c670:	2000a580 	.word	0x2000a580
    c674:	20008a58 	.word	0x20008a58
    c678:	20008a50 	.word	0x20008a50
    c67c:	20008a40 	.word	0x20008a40
    c680:	00034664 	.word	0x00034664
    c684:	20008d60 	.word	0x20008d60
    c688:	00034672 	.word	0x00034672

0000c68c <flash_init>:
{
    c68c:	b538      	push	{r3, r4, r5, lr}
    color(10);
    c68e:	200a      	movs	r0, #10
    c690:	f001 f9e8 	bl	da64 <color>
	fs.flash_device = NVS_PARTITION_DEVICE;
    c694:	4c3c      	ldr	r4, [pc, #240]	; (c788 <flash_init+0xfc>)
    c696:	483d      	ldr	r0, [pc, #244]	; (c78c <flash_init+0x100>)
    c698:	62a0      	str	r0, [r4, #40]	; 0x28
    c69a:	f024 fa64 	bl	30b66 <z_device_is_ready>
	if (!device_is_ready(fs.flash_device))
    c69e:	b930      	cbnz	r0, c6ae <flash_init+0x22>
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    c6a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c6a2:	483b      	ldr	r0, [pc, #236]	; (c790 <flash_init+0x104>)
    c6a4:	6819      	ldr	r1, [r3, #0]
}
    c6a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c6aa:	f01d bd5f 	b.w	2a16c <printk>
	fs.offset = NVS_PARTITION_OFFSET;
    c6ae:	2100      	movs	r1, #0
	rc = flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info);
    c6b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	fs.offset = NVS_PARTITION_OFFSET;
    c6b2:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    c6b4:	4d37      	ldr	r5, [pc, #220]	; (c794 <flash_init+0x108>)
    c6b6:	462a      	mov	r2, r5
    c6b8:	f023 f8a8 	bl	2f80c <z_impl_flash_get_page_info_by_offs>
	if (rc)
    c6bc:	b120      	cbz	r0, c6c8 <flash_init+0x3c>
		printk("Unable to get page info\n");
    c6be:	4836      	ldr	r0, [pc, #216]	; (c798 <flash_init+0x10c>)
}
    c6c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Flash Init failed\n");
    c6c4:	f01d bd52 	b.w	2a16c <printk>
	fs.sector_size = info.size;
    c6c8:	686b      	ldr	r3, [r5, #4]
	rc = nvs_mount(&fs);
    c6ca:	4620      	mov	r0, r4
	fs.sector_size = info.size;
    c6cc:	81a3      	strh	r3, [r4, #12]
	fs.sector_count = 2048U; // NUMBER OF SECTORS total 0X800000 BYTES
    c6ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c6d2:	81e3      	strh	r3, [r4, #14]
	rc = nvs_mount(&fs);
    c6d4:	f003 faa2 	bl	fc1c <nvs_mount>
	if (rc)
    c6d8:	b108      	cbz	r0, c6de <flash_init+0x52>
		printk("Flash Init failed\n");
    c6da:	4830      	ldr	r0, [pc, #192]	; (c79c <flash_init+0x110>)
    c6dc:	e7f0      	b.n	c6c0 <flash_init+0x34>
	rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    c6de:	4d30      	ldr	r5, [pc, #192]	; (c7a0 <flash_init+0x114>)
    c6e0:	2304      	movs	r3, #4
    c6e2:	462a      	mov	r2, r5
    c6e4:	2101      	movs	r1, #1
    c6e6:	4620      	mov	r0, r4
    c6e8:	f01e fa5c 	bl	2aba4 <nvs_read>
	if (rc > 0)
    c6ec:	2800      	cmp	r0, #0
    c6ee:	dd2c      	ble.n	c74a <flash_init+0xbe>
		printk("Id: %d, button2_counter: %d\n",
    c6f0:	2101      	movs	r1, #1
    c6f2:	682a      	ldr	r2, [r5, #0]
    c6f4:	482b      	ldr	r0, [pc, #172]	; (c7a4 <flash_init+0x118>)
    c6f6:	f01d fd39 	bl	2a16c <printk>
	rc = nvs_read(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c6fa:	4c2b      	ldr	r4, [pc, #172]	; (c7a8 <flash_init+0x11c>)
    c6fc:	2304      	movs	r3, #4
    c6fe:	4622      	mov	r2, r4
    c700:	2102      	movs	r1, #2
    c702:	4821      	ldr	r0, [pc, #132]	; (c788 <flash_init+0xfc>)
    c704:	f01e fa4e 	bl	2aba4 <nvs_read>
	if (rc > 0)
    c708:	2800      	cmp	r0, #0
    c70a:	dd29      	ble.n	c760 <flash_init+0xd4>
		printk("Id: %d, Current Position: %d\n",
    c70c:	6822      	ldr	r2, [r4, #0]
    c70e:	2102      	movs	r1, #2
    c710:	4826      	ldr	r0, [pc, #152]	; (c7ac <flash_init+0x120>)
    c712:	f01d fd2b 	bl	2a16c <printk>
		if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS)
    c716:	4b26      	ldr	r3, [pc, #152]	; (c7b0 <flash_init+0x124>)
    c718:	681a      	ldr	r2, [r3, #0]
    c71a:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
			C_Buffer_Free_Position = C_Buffer_Current_Position + 1;
    c71e:	bf3e      	ittt	cc
    c720:	6822      	ldrcc	r2, [r4, #0]
    c722:	3201      	addcc	r2, #1
    c724:	601a      	strcc	r2, [r3, #0]
		if (C_Buffer_Free_Position == CIRCULAR_BUFFER_ELEMENTS)
    c726:	681a      	ldr	r2, [r3, #0]
    c728:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
    c72c:	d101      	bne.n	c732 <flash_init+0xa6>
			C_Buffer_Free_Position = 0;
    c72e:	2200      	movs	r2, #0
    c730:	601a      	str	r2, [r3, #0]
	rc = nvs_read(&fs, SETUP_POSITION, &Initial_Setup, sizeof(Initial_Setup));
    c732:	2103      	movs	r1, #3
    c734:	2332      	movs	r3, #50	; 0x32
    c736:	4a1f      	ldr	r2, [pc, #124]	; (c7b4 <flash_init+0x128>)
    c738:	4813      	ldr	r0, [pc, #76]	; (c788 <flash_init+0xfc>)
    c73a:	f01e fa33 	bl	2aba4 <nvs_read>
	if (rc > 0)
    c73e:	2800      	cmp	r0, #0
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c740:	f04f 0103 	mov.w	r1, #3
	if (rc > 0)
    c744:	dd17      	ble.n	c776 <flash_init+0xea>
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c746:	481c      	ldr	r0, [pc, #112]	; (c7b8 <flash_init+0x12c>)
    c748:	e7ad      	b.n	c6a6 <flash_init+0x1a>
		printk("No Reboot counter found, adding it at id %d\n",
    c74a:	2101      	movs	r1, #1
    c74c:	481b      	ldr	r0, [pc, #108]	; (c7bc <flash_init+0x130>)
    c74e:	f01d fd0d 	bl	2a16c <printk>
		(void)nvs_write(&fs, BOOT_POSITION, &button2_counter,
    c752:	2304      	movs	r3, #4
    c754:	462a      	mov	r2, r5
    c756:	2101      	movs	r1, #1
    c758:	4620      	mov	r0, r4
    c75a:	f003 fc31 	bl	ffc0 <nvs_write>
    c75e:	e7cc      	b.n	c6fa <flash_init+0x6e>
		printk("Current Position counter found, adding it at id %d\n",
    c760:	2102      	movs	r1, #2
    c762:	4817      	ldr	r0, [pc, #92]	; (c7c0 <flash_init+0x134>)
    c764:	f01d fd02 	bl	2a16c <printk>
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c768:	2304      	movs	r3, #4
    c76a:	4622      	mov	r2, r4
    c76c:	2102      	movs	r1, #2
    c76e:	4806      	ldr	r0, [pc, #24]	; (c788 <flash_init+0xfc>)
    c770:	f003 fc26 	bl	ffc0 <nvs_write>
    c774:	e7dd      	b.n	c732 <flash_init+0xa6>
		printk("No initial Setup found, adding it on position=%d\n",SETUP_POSITION);
    c776:	4813      	ldr	r0, [pc, #76]	; (c7c4 <flash_init+0x138>)
    c778:	f01d fcf8 	bl	2a16c <printk>
		setup_initialize();
    c77c:	f001 f8c8 	bl	d910 <setup_initialize>
}
    c780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		flash_write_setup();
    c784:	f000 bbbe 	b.w	cf04 <flash_write_setup>
    c788:	2000a5f8 	.word	0x2000a5f8
    c78c:	00032908 	.word	0x00032908
    c790:	000346a3 	.word	0x000346a3
    c794:	2000a5ec 	.word	0x2000a5ec
    c798:	000346c1 	.word	0x000346c1
    c79c:	000346da 	.word	0x000346da
    c7a0:	2000a5e8 	.word	0x2000a5e8
    c7a4:	000346ed 	.word	0x000346ed
    c7a8:	2002f86c 	.word	0x2002f86c
    c7ac:	00034737 	.word	0x00034737
    c7b0:	2002f870 	.word	0x2002f870
    c7b4:	20030de4 	.word	0x20030de4
    c7b8:	00034789 	.word	0x00034789
    c7bc:	0003470a 	.word	0x0003470a
    c7c0:	00034755 	.word	0x00034755
    c7c4:	0003479b 	.word	0x0003479b

0000c7c8 <send_bluetooth>:
{
    c7c8:	b084      	sub	sp, #16
    c7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7ce:	ac06      	add	r4, sp, #24
    c7d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c7d4:	203d      	movs	r0, #61	; 0x3d
	uint32_t comprimento = buf.len;
    c7d6:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c7da:	f024 ff7c 	bl	316d6 <k_malloc>
	int k = 0;
    c7de:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c7e0:	4605      	mov	r5, r0
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c7e2:	f8df 8054 	ldr.w	r8, [pc, #84]	; c838 <send_bluetooth+0x70>
	while (k < comprimento - 1)
    c7e6:	1e77      	subs	r7, r6, #1
    c7e8:	42a7      	cmp	r7, r4
    c7ea:	d91d      	bls.n	c828 <send_bluetooth+0x60>
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c7ec:	42b4      	cmp	r4, r6
    c7ee:	d301      	bcc.n	c7f4 <send_bluetooth+0x2c>
    c7f0:	2200      	movs	r2, #0
    c7f2:	e00f      	b.n	c814 <send_bluetooth+0x4c>
    c7f4:	2200      	movs	r2, #0
    c7f6:	1e6b      	subs	r3, r5, #1
			data[small_pkt] = buf.data[k];
    c7f8:	f104 0118 	add.w	r1, r4, #24
    c7fc:	4469      	add	r1, sp
			small_pkt++;
    c7fe:	3201      	adds	r2, #1
			*(packet_data + small_pkt) = buf.data[k];
    c800:	7909      	ldrb	r1, [r1, #4]
			small_pkt++;
    c802:	b292      	uxth	r2, r2
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c804:	2a3d      	cmp	r2, #61	; 0x3d
			*(packet_data + small_pkt) = buf.data[k];
    c806:	f803 1f01 	strb.w	r1, [r3, #1]!
			k++;
    c80a:	f104 0401 	add.w	r4, r4, #1
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c80e:	d001      	beq.n	c814 <send_bluetooth+0x4c>
    c810:	42a6      	cmp	r6, r4
    c812:	d8f1      	bhi.n	c7f8 <send_bluetooth+0x30>
		if (bt_nus_send(NULL, packet_data, small_pkt))
    c814:	4629      	mov	r1, r5
    c816:	2000      	movs	r0, #0
    c818:	f004 fa48 	bl	10cac <bt_nus_send>
    c81c:	2800      	cmp	r0, #0
    c81e:	d0e3      	beq.n	c7e8 <send_bluetooth+0x20>
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c820:	4640      	mov	r0, r8
    c822:	f01d fca3 	bl	2a16c <printk>
    c826:	e7df      	b.n	c7e8 <send_bluetooth+0x20>
	k_free(packet_data);
    c828:	4628      	mov	r0, r5
    c82a:	f024 ff4d 	bl	316c8 <k_free>
}
    c82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c832:	2000      	movs	r0, #0
    c834:	b004      	add	sp, #16
    c836:	4770      	bx	lr
    c838:	000347cd 	.word	0x000347cd

0000c83c <send_protobuf_thread>:
{
    c83c:	b510      	push	{r4, lr}
		k_sem_take(&send_proto, K_FOREVER);
    c83e:	4c05      	ldr	r4, [pc, #20]	; (c854 <send_protobuf_thread+0x18>)
    c840:	f04f 32ff 	mov.w	r2, #4294967295
    c844:	f04f 33ff 	mov.w	r3, #4294967295
    c848:	4620      	mov	r0, r4
    c84a:	f01d fa64 	bl	29d16 <k_sem_take.constprop.0.isra.0>
		send_protobuf();
    c84e:	f01d fabb 	bl	29dc8 <send_protobuf>
	while (1)
    c852:	e7f5      	b.n	c840 <send_protobuf_thread+0x4>
    c854:	20008dd8 	.word	0x20008dd8

0000c858 <configure_all_buttons>:
{
    c858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    c85a:	4c36      	ldr	r4, [pc, #216]	; (c934 <configure_all_buttons+0xdc>)
	color(14);
    c85c:	200e      	movs	r0, #14
    c85e:	f001 f901 	bl	da64 <color>
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    c862:	4620      	mov	r0, r4
    c864:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c868:	f01d fa71 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c86c:	4620      	mov	r0, r4
    c86e:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c872:	f01d fa81 	bl	29d78 <gpio_pin_interrupt_configure_dt.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    c876:	4930      	ldr	r1, [pc, #192]	; (c938 <configure_all_buttons+0xe0>)
    c878:	4b30      	ldr	r3, [pc, #192]	; (c93c <configure_all_buttons+0xe4>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c87a:	4c31      	ldr	r4, [pc, #196]	; (c940 <configure_all_buttons+0xe8>)
    c87c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c87e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    c882:	4620      	mov	r0, r4
    c884:	608b      	str	r3, [r1, #8]
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c886:	4d2f      	ldr	r5, [pc, #188]	; (c944 <configure_all_buttons+0xec>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c888:	f01d fa47 	bl	29d1a <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c88c:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c88e:	4f2e      	ldr	r7, [pc, #184]	; (c948 <configure_all_buttons+0xf0>)
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c890:	2217      	movs	r2, #23
    c892:	4631      	mov	r1, r6
    c894:	4628      	mov	r0, r5
    c896:	f01d fc69 	bl	2a16c <printk>
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c89a:	4638      	mov	r0, r7
    c89c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c8a0:	f01d fa55 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c8a4:	4638      	mov	r0, r7
    c8a6:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c8aa:	f01d fa65 	bl	29d78 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c8ae:	4927      	ldr	r1, [pc, #156]	; (c94c <configure_all_buttons+0xf4>)
    c8b0:	4b27      	ldr	r3, [pc, #156]	; (c950 <configure_all_buttons+0xf8>)
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c8b2:	4620      	mov	r0, r4
    c8b4:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c8b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c8ba:	4f26      	ldr	r7, [pc, #152]	; (c954 <configure_all_buttons+0xfc>)
    c8bc:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c8be:	f01d fa2c 	bl	29d1a <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    c8c2:	2218      	movs	r2, #24
    c8c4:	4631      	mov	r1, r6
    c8c6:	4628      	mov	r0, r5
    c8c8:	f01d fc50 	bl	2a16c <printk>
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c8cc:	4638      	mov	r0, r7
    c8ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c8d2:	f01d fa3c 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON3_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c8d6:	4638      	mov	r0, r7
    c8d8:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c8dc:	f01d fa4c 	bl	29d78 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c8e0:	491d      	ldr	r1, [pc, #116]	; (c958 <configure_all_buttons+0x100>)
    c8e2:	4b1e      	ldr	r3, [pc, #120]	; (c95c <configure_all_buttons+0x104>)
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c8e4:	4620      	mov	r0, r4
    c8e6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c8e8:	f44f 7380 	mov.w	r3, #256	; 0x100
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c8ec:	4f1c      	ldr	r7, [pc, #112]	; (c960 <configure_all_buttons+0x108>)
    c8ee:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c8f0:	f01d fa13 	bl	29d1a <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    c8f4:	2208      	movs	r2, #8
    c8f6:	4631      	mov	r1, r6
    c8f8:	4628      	mov	r0, r5
    c8fa:	f01d fc37 	bl	2a16c <printk>
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c8fe:	4638      	mov	r0, r7
    c900:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c904:	f01d fa23 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON4_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c908:	4638      	mov	r0, r7
    c90a:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c90e:	f01d fa33 	bl	29d78 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c912:	4914      	ldr	r1, [pc, #80]	; (c964 <configure_all_buttons+0x10c>)
    c914:	4b14      	ldr	r3, [pc, #80]	; (c968 <configure_all_buttons+0x110>)
	gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    c916:	4620      	mov	r0, r4
    c918:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c91a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c91e:	608b      	str	r3, [r1, #8]
    c920:	f01d f9fb 	bl	29d1a <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    c924:	4631      	mov	r1, r6
    c926:	4628      	mov	r0, r5
}
    c928:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    c92c:	2209      	movs	r2, #9
    c92e:	f01d bc1d 	b.w	2a16c <printk>
    c932:	bf00      	nop
    c934:	000332fc 	.word	0x000332fc
    c938:	2000a694 	.word	0x2000a694
    c93c:	0000bd49 	.word	0x0000bd49
    c940:	00032818 	.word	0x00032818
    c944:	000347f1 	.word	0x000347f1
    c948:	000332f4 	.word	0x000332f4
    c94c:	2000a688 	.word	0x2000a688
    c950:	0000bd1d 	.word	0x0000bd1d
    c954:	000332ec 	.word	0x000332ec
    c958:	2000a67c 	.word	0x2000a67c
    c95c:	0000b6b5 	.word	0x0000b6b5
    c960:	000332e4 	.word	0x000332e4
    c964:	2000a670 	.word	0x2000a670
    c968:	0000b6d5 	.word	0x0000b6d5

0000c96c <configure_digital_inputs>:
{
    c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    c96e:	4c48      	ldr	r4, [pc, #288]	; (ca90 <configure_digital_inputs+0x124>)
    color(14);
    c970:	200e      	movs	r0, #14
    c972:	f001 f877 	bl	da64 <color>
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    c976:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c97a:	4620      	mov	r0, r4
    c97c:	f01d f9e7 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 4 Value:%d \n", gpio_pin_get_dt(DIG_0_ADR));
    c980:	4620      	mov	r0, r4
    c982:	f01d f984 	bl	29c8e <gpio_pin_get_dt>
    c986:	4601      	mov	r1, r0
    c988:	4842      	ldr	r0, [pc, #264]	; (ca94 <configure_digital_inputs+0x128>)
    c98a:	f01d fbef 	bl	2a16c <printk>
	gpio_pin_interrupt_configure_dt(DIG_0_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c98e:	4620      	mov	r0, r4
    c990:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c994:	f01d f9f0 	bl	29d78 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c998:	493f      	ldr	r1, [pc, #252]	; (ca98 <configure_digital_inputs+0x12c>)
    c99a:	4b40      	ldr	r3, [pc, #256]	; (ca9c <configure_digital_inputs+0x130>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    c99c:	4c40      	ldr	r4, [pc, #256]	; (caa0 <configure_digital_inputs+0x134>)
    c99e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c9a0:	2310      	movs	r3, #16
    c9a2:	4620      	mov	r0, r4
    c9a4:	608b      	str	r3, [r1, #8]
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c9a6:	4d3f      	ldr	r5, [pc, #252]	; (caa4 <configure_digital_inputs+0x138>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    c9a8:	f01d f9b7 	bl	29d1a <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c9ac:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    c9ae:	4f3e      	ldr	r7, [pc, #248]	; (caa8 <configure_digital_inputs+0x13c>)
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c9b0:	2204      	movs	r2, #4
    c9b2:	4631      	mov	r1, r6
    c9b4:	4628      	mov	r0, r5
    c9b6:	f01d fbd9 	bl	2a16c <printk>
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    c9ba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c9be:	4638      	mov	r0, r7
    c9c0:	f01d f9c5 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 5 Value:%d \n", gpio_pin_get_dt(DIG_1_ADR));
    c9c4:	4638      	mov	r0, r7
    c9c6:	f01d f962 	bl	29c8e <gpio_pin_get_dt>
    c9ca:	4601      	mov	r1, r0
    c9cc:	4837      	ldr	r0, [pc, #220]	; (caac <configure_digital_inputs+0x140>)
    c9ce:	f01d fbcd 	bl	2a16c <printk>
	gpio_pin_interrupt_configure_dt(DIG_1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c9d2:	4638      	mov	r0, r7
    c9d4:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c9d8:	f01d f9ce 	bl	29d78 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c9dc:	4934      	ldr	r1, [pc, #208]	; (cab0 <configure_digital_inputs+0x144>)
    c9de:	4b35      	ldr	r3, [pc, #212]	; (cab4 <configure_digital_inputs+0x148>)
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    c9e0:	4f35      	ldr	r7, [pc, #212]	; (cab8 <configure_digital_inputs+0x14c>)
    c9e2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c9e4:	2320      	movs	r3, #32
	gpio_add_callback(DIG_1.port, DIG_1_CB);
    c9e6:	4620      	mov	r0, r4
    c9e8:	608b      	str	r3, [r1, #8]
    c9ea:	f01d f996 	bl	29d1a <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    c9ee:	2205      	movs	r2, #5
    c9f0:	4631      	mov	r1, r6
    c9f2:	4628      	mov	r0, r5
    c9f4:	f01d fbba 	bl	2a16c <printk>
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    c9f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c9fc:	4638      	mov	r0, r7
    c9fe:	f01d f9a6 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 6 Value:%d \n", gpio_pin_get_dt(DIG_2_ADR));
    ca02:	4638      	mov	r0, r7
    ca04:	f01d f943 	bl	29c8e <gpio_pin_get_dt>
    ca08:	4601      	mov	r1, r0
    ca0a:	482c      	ldr	r0, [pc, #176]	; (cabc <configure_digital_inputs+0x150>)
    ca0c:	f01d fbae 	bl	2a16c <printk>
	gpio_pin_interrupt_configure_dt(DIG_2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    ca10:	4638      	mov	r0, r7
    ca12:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    ca16:	f01d f9af 	bl	29d78 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    ca1a:	4929      	ldr	r1, [pc, #164]	; (cac0 <configure_digital_inputs+0x154>)
    ca1c:	4b29      	ldr	r3, [pc, #164]	; (cac4 <configure_digital_inputs+0x158>)
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    ca1e:	4620      	mov	r0, r4
    ca20:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    ca22:	2340      	movs	r3, #64	; 0x40
    gpio_pin_configure_dt(DIG_3_ADR, GPIO_INPUT);
    ca24:	4f28      	ldr	r7, [pc, #160]	; (cac8 <configure_digital_inputs+0x15c>)
    ca26:	608b      	str	r3, [r1, #8]
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    ca28:	f01d f977 	bl	29d1a <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    ca2c:	2206      	movs	r2, #6
    ca2e:	4631      	mov	r1, r6
    ca30:	4628      	mov	r0, r5
    ca32:	f01d fb9b 	bl	2a16c <printk>
    gpio_pin_configure_dt(DIG_3_ADR, GPIO_INPUT);
    ca36:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ca3a:	4638      	mov	r0, r7
    ca3c:	f01d f987 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	printk("(Led4_Status)GPIO 0 Pin 27 Value:%d \n", gpio_pin_get_dt(DIG_3_ADR));
    ca40:	4638      	mov	r0, r7
    ca42:	f01d f924 	bl	29c8e <gpio_pin_get_dt>
	gpio_pin_configure_dt(DIG_4_ADR, GPIO_INPUT);
    ca46:	4f21      	ldr	r7, [pc, #132]	; (cacc <configure_digital_inputs+0x160>)
	printk("(Led4_Status)GPIO 0 Pin 27 Value:%d \n", gpio_pin_get_dt(DIG_3_ADR));
    ca48:	4601      	mov	r1, r0
    ca4a:	4821      	ldr	r0, [pc, #132]	; (cad0 <configure_digital_inputs+0x164>)
    ca4c:	f01d fb8e 	bl	2a16c <printk>
	gpio_pin_configure_dt(DIG_4_ADR, GPIO_INPUT);
    ca50:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ca54:	4638      	mov	r0, r7
    ca56:	f01d f97a 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 7 Value:%d \n", gpio_pin_get_dt(DIG_4_ADR));
    ca5a:	4638      	mov	r0, r7
    ca5c:	f01d f917 	bl	29c8e <gpio_pin_get_dt>
    ca60:	4601      	mov	r1, r0
    ca62:	481c      	ldr	r0, [pc, #112]	; (cad4 <configure_digital_inputs+0x168>)
    ca64:	f01d fb82 	bl	2a16c <printk>
	gpio_pin_interrupt_configure_dt(DIG_4_ADR, GPIO_INT_LEVEL_ACTIVE);
    ca68:	4638      	mov	r0, r7
    ca6a:	f04f 6198 	mov.w	r1, #79691776	; 0x4c00000
    ca6e:	f01d f983 	bl	29d78 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    ca72:	4919      	ldr	r1, [pc, #100]	; (cad8 <configure_digital_inputs+0x16c>)
    ca74:	4b19      	ldr	r3, [pc, #100]	; (cadc <configure_digital_inputs+0x170>)
	gpio_add_callback(DIG_4.port, DIG_4_CB);
    ca76:	4620      	mov	r0, r4
    ca78:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    ca7a:	2380      	movs	r3, #128	; 0x80
    ca7c:	608b      	str	r3, [r1, #8]
    ca7e:	f01d f94c 	bl	29d1a <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_4.port->name, DIG_4.pin);
    ca82:	4631      	mov	r1, r6
    ca84:	4628      	mov	r0, r5
}
    ca86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up Digital Input at %s pin %d\n", DIG_4.port->name, DIG_4.pin);
    ca8a:	2207      	movs	r2, #7
    ca8c:	f01d bb6e 	b.w	2a16c <printk>
    ca90:	000332dc 	.word	0x000332dc
    ca94:	0003480d 	.word	0x0003480d
    ca98:	2000a664 	.word	0x2000a664
    ca9c:	0000b679 	.word	0x0000b679
    caa0:	00032800 	.word	0x00032800
    caa4:	00034825 	.word	0x00034825
    caa8:	000332d4 	.word	0x000332d4
    caac:	00034848 	.word	0x00034848
    cab0:	2000a658 	.word	0x2000a658
    cab4:	0000b68d 	.word	0x0000b68d
    cab8:	000332cc 	.word	0x000332cc
    cabc:	00034860 	.word	0x00034860
    cac0:	2000a64c 	.word	0x2000a64c
    cac4:	0000b6a1 	.word	0x0000b6a1
    cac8:	000332c4 	.word	0x000332c4
    cacc:	000332bc 	.word	0x000332bc
    cad0:	00034878 	.word	0x00034878
    cad4:	0003489e 	.word	0x0003489e
    cad8:	2000a640 	.word	0x2000a640
    cadc:	0000b765 	.word	0x0000b765

0000cae0 <configure_led>:
{
    cae0:	b508      	push	{r3, lr}
	gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    cae2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cae6:	480a      	ldr	r0, [pc, #40]	; (cb10 <configure_led+0x30>)
    cae8:	f01d f931 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    caec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    caf0:	4808      	ldr	r0, [pc, #32]	; (cb14 <configure_led+0x34>)
    caf2:	f01d f92c 	bl	29d4e <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    caf6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cafa:	4807      	ldr	r0, [pc, #28]	; (cb18 <configure_led+0x38>)
    cafc:	f01d f927 	bl	29d4e <gpio_pin_configure_dt.isra.0>
}
    cb00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    cb04:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cb08:	4804      	ldr	r0, [pc, #16]	; (cb1c <configure_led+0x3c>)
    cb0a:	f01d b920 	b.w	29d4e <gpio_pin_configure_dt.isra.0>
    cb0e:	bf00      	nop
    cb10:	2000846c 	.word	0x2000846c
    cb14:	20008464 	.word	0x20008464
    cb18:	2000845c 	.word	0x2000845c
    cb1c:	20008454 	.word	0x20008454

0000cb20 <turn_off_all_leds>:
{
    cb20:	b508      	push	{r3, lr}
	gpio_pin_set_dt(LED1, OFF);
    cb22:	2100      	movs	r1, #0
    cb24:	4808      	ldr	r0, [pc, #32]	; (cb48 <turn_off_all_leds+0x28>)
    cb26:	f01d f8fe 	bl	29d26 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED2, OFF);
    cb2a:	2100      	movs	r1, #0
    cb2c:	4807      	ldr	r0, [pc, #28]	; (cb4c <turn_off_all_leds+0x2c>)
    cb2e:	f01d f8fa 	bl	29d26 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED3, OFF);
    cb32:	2100      	movs	r1, #0
    cb34:	4806      	ldr	r0, [pc, #24]	; (cb50 <turn_off_all_leds+0x30>)
    cb36:	f01d f8f6 	bl	29d26 <gpio_pin_set_dt.isra.0>
}
    cb3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_set_dt(LED4, OFF);
    cb3e:	2100      	movs	r1, #0
    cb40:	4804      	ldr	r0, [pc, #16]	; (cb54 <turn_off_all_leds+0x34>)
    cb42:	f01d b8f0 	b.w	29d26 <gpio_pin_set_dt.isra.0>
    cb46:	bf00      	nop
    cb48:	2000846c 	.word	0x2000846c
    cb4c:	20008464 	.word	0x20008464
    cb50:	2000845c 	.word	0x2000845c
    cb54:	20008454 	.word	0x20008454

0000cb58 <configure_adc>:
{
    cb58:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    cb5a:	2500      	movs	r5, #0
    cb5c:	4c12      	ldr	r4, [pc, #72]	; (cba8 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev))
    cb5e:	f854 0c06 	ldr.w	r0, [r4, #-6]
    cb62:	f024 f800 	bl	30b66 <z_device_is_ready>
    cb66:	b920      	cbnz	r0, cb72 <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    cb68:	4810      	ldr	r0, [pc, #64]	; (cbac <configure_adc+0x54>)
}
    cb6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    cb6e:	f01d bafd 	b.w	2a16c <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    cb72:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    cb76:	b16b      	cbz	r3, cb94 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    cb78:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    cb7c:	6883      	ldr	r3, [r0, #8]
    cb7e:	4621      	mov	r1, r4
    cb80:	681b      	ldr	r3, [r3, #0]
    cb82:	4798      	blx	r3
		if (err < 0)
    cb84:	1e02      	subs	r2, r0, #0
    cb86:	da08      	bge.n	cb9a <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    cb88:	4629      	mov	r1, r5
}
    cb8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    cb8e:	4808      	ldr	r0, [pc, #32]	; (cbb0 <configure_adc+0x58>)
    cb90:	f01d baec 	b.w	2a16c <printk>
		return -ENOTSUP;
    cb94:	f06f 0285 	mvn.w	r2, #133	; 0x85
    cb98:	e7f6      	b.n	cb88 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    cb9a:	3501      	adds	r5, #1
    cb9c:	2d05      	cmp	r5, #5
    cb9e:	f104 0414 	add.w	r4, r4, #20
    cba2:	d1dc      	bne.n	cb5e <configure_adc+0x6>
}
    cba4:	bd38      	pop	{r3, r4, r5, pc}
    cba6:	bf00      	nop
    cba8:	0003325e 	.word	0x0003325e
    cbac:	000348b6 	.word	0x000348b6
    cbb0:	000348d7 	.word	0x000348d7

0000cbb4 <main>:
{
    cbb4:	b570      	push	{r4, r5, r6, lr}
    color(3);
    cbb6:	2003      	movs	r0, #3
{
    cbb8:	b08a      	sub	sp, #40	; 0x28
    color(3);
    cbba:	f000 ff53 	bl	da64 <color>
	return z_impl_k_mutex_init(mutex);
    cbbe:	4879      	ldr	r0, [pc, #484]	; (cda4 <main+0x1f0>)
    cbc0:	f024 f8bb 	bl	30d3a <z_impl_k_mutex_init>
	configure_led();
    cbc4:	f7ff ff8c 	bl	cae0 <configure_led>
	turn_off_all_leds();
    cbc8:	f7ff ffaa 	bl	cb20 <turn_off_all_leds>
	configure_all_buttons();
    cbcc:	f7ff fe44 	bl	c858 <configure_all_buttons>
	configure_digital_inputs();
    cbd0:	f7ff fecc 	bl	c96c <configure_digital_inputs>
	configure_adc();
    cbd4:	f7ff ffc0 	bl	cb58 <configure_adc>
    cbd8:	4d73      	ldr	r5, [pc, #460]	; (cda8 <main+0x1f4>)
    cbda:	4628      	mov	r0, r5
    cbdc:	f023 ffc3 	bl	30b66 <z_device_is_ready>
	if (!device_is_ready(uart))
    cbe0:	b1d8      	cbz	r0, cc1a <main+0x66>
	rx = k_malloc(sizeof(*rx));
    cbe2:	206c      	movs	r0, #108	; 0x6c
    cbe4:	f024 fd77 	bl	316d6 <k_malloc>
	if (rx)
    cbe8:	4604      	mov	r4, r0
    cbea:	b1b0      	cbz	r0, cc1a <main+0x66>
		rx->len = 0;
    cbec:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    cbee:	496f      	ldr	r1, [pc, #444]	; (cdac <main+0x1f8>)
		rx->len = 0;
    cbf0:	f8a0 6068 	strh.w	r6, [r0, #104]	; 0x68
	k_work_init_delayable(&uart_work, uart_work_handler);
    cbf4:	486e      	ldr	r0, [pc, #440]	; (cdb0 <main+0x1fc>)
    cbf6:	f024 fa01 	bl	30ffc <k_work_init_delayable>
	if (api->callback_set == NULL) {
    cbfa:	68ab      	ldr	r3, [r5, #8]
    cbfc:	681b      	ldr	r3, [r3, #0]
    cbfe:	b973      	cbnz	r3, cc1e <main+0x6a>
		k_free(rx);
    cc00:	4620      	mov	r0, r4
    cc02:	f024 fd61 	bl	316c8 <k_free>
		LOG_ERR("Cannot initialize UART callback");
    cc06:	4b6b      	ldr	r3, [pc, #428]	; (cdb4 <main+0x200>)
    cc08:	2201      	movs	r2, #1
    cc0a:	9302      	str	r3, [sp, #8]
    cc0c:	2300      	movs	r3, #0
    cc0e:	496a      	ldr	r1, [pc, #424]	; (cdb8 <main+0x204>)
    cc10:	4618      	mov	r0, r3
    cc12:	e9cd 3300 	strd	r3, r3, [sp]
    cc16:	f01d f85f 	bl	29cd8 <z_log_msg_runtime_create.constprop.0>
		error();
    cc1a:	f01d f8eb 	bl	29df4 <error>
	return api->callback_set(dev, callback, user_data);
    cc1e:	4632      	mov	r2, r6
    cc20:	4628      	mov	r0, r5
    cc22:	4966      	ldr	r1, [pc, #408]	; (cdbc <main+0x208>)
    cc24:	4798      	blx	r3
	if (err)
    cc26:	2800      	cmp	r0, #0
    cc28:	d1ea      	bne.n	cc00 <main+0x4c>
	tx = k_malloc(sizeof(*tx));
    cc2a:	206c      	movs	r0, #108	; 0x6c
    cc2c:	f024 fd53 	bl	316d6 <k_malloc>
	if (tx)
    cc30:	4606      	mov	r6, r0
    cc32:	2800      	cmp	r0, #0
    cc34:	d0f1      	beq.n	cc1a <main+0x66>
		pos = snprintf(tx->data, sizeof(tx->data),
    cc36:	1d03      	adds	r3, r0, #4
    cc38:	4618      	mov	r0, r3
    cc3a:	4961      	ldr	r1, [pc, #388]	; (cdc0 <main+0x20c>)
    cc3c:	f024 fef0 	bl	31a20 <strcpy>
		tx->len = pos;
    cc40:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    cc42:	4601      	mov	r1, r0
		tx->len = pos;
    cc44:	f8a6 2068 	strh.w	r2, [r6, #104]	; 0x68
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    cc48:	4628      	mov	r0, r5
    cc4a:	f01d f85c 	bl	29d06 <uart_tx.constprop.0>
	if (err)
    cc4e:	4601      	mov	r1, r0
    cc50:	b118      	cbz	r0, cc5a <main+0xa6>
		printf("Cannot display welcome message (err: %d)", err);
    cc52:	485c      	ldr	r0, [pc, #368]	; (cdc4 <main+0x210>)
    cc54:	f01a fe06 	bl	27864 <iprintf>
	if (err)
    cc58:	e7df      	b.n	cc1a <main+0x66>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_WAIT_FOR_RX);
    cc5a:	4628      	mov	r0, r5
    cc5c:	1d21      	adds	r1, r4, #4
    cc5e:	f01d f84a 	bl	29cf6 <uart_rx_enable.constprop.0>
	if (err)
    cc62:	2800      	cmp	r0, #0
    cc64:	d1d9      	bne.n	cc1a <main+0x66>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    cc66:	4858      	ldr	r0, [pc, #352]	; (cdc8 <main+0x214>)
    cc68:	f00f fd0a 	bl	1c680 <bt_conn_auth_cb_register>
		if (err)
    cc6c:	b128      	cbz	r0, cc7a <main+0xc6>
			printk("Failed to register authorization callbacks.\n");
    cc6e:	4857      	ldr	r0, [pc, #348]	; (cdcc <main+0x218>)
}
    cc70:	b00a      	add	sp, #40	; 0x28
    cc72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    cc76:	f01d ba79 	b.w	2a16c <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    cc7a:	4855      	ldr	r0, [pc, #340]	; (cdd0 <main+0x21c>)
    cc7c:	f00f fd1a 	bl	1c6b4 <bt_conn_auth_info_cb_register>
		if (err)
    cc80:	b108      	cbz	r0, cc86 <main+0xd2>
			printk("Failed to register authorization info callbacks.\n");
    cc82:	4854      	ldr	r0, [pc, #336]	; (cdd4 <main+0x220>)
    cc84:	e7f4      	b.n	cc70 <main+0xbc>
	err = bt_enable(NULL);
    cc86:	f00d fde1 	bl	1a84c <bt_enable>
	if (err)
    cc8a:	2800      	cmp	r0, #0
    cc8c:	d1c5      	bne.n	cc1a <main+0x66>
    color(6);
    cc8e:	2006      	movs	r0, #6
    cc90:	f000 fee8 	bl	da64 <color>
	printf("Bluetooth initialized \n\r");
    cc94:	4850      	ldr	r0, [pc, #320]	; (cdd8 <main+0x224>)
    cc96:	f01a fde5 	bl	27864 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    cc9a:	4850      	ldr	r0, [pc, #320]	; (cddc <main+0x228>)
    cc9c:	f01a fde2 	bl	27864 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    cca0:	484f      	ldr	r0, [pc, #316]	; (cde0 <main+0x22c>)
    cca2:	f01a fddf 	bl	27864 <iprintf>
    color(255);
    cca6:	20ff      	movs	r0, #255	; 0xff
    cca8:	f000 fedc 	bl	da64 <color>
	k_sem_give(&ble_init_ok);
    ccac:	484d      	ldr	r0, [pc, #308]	; (cde4 <main+0x230>)
    ccae:	f01d f803 	bl	29cb8 <k_sem_give>
	err = bt_nus_init(&nus_cb);
    ccb2:	484d      	ldr	r0, [pc, #308]	; (cde8 <main+0x234>)
    ccb4:	f003 ffee 	bl	10c94 <bt_nus_init>
	if (err)
    ccb8:	4601      	mov	r1, r0
    ccba:	b128      	cbz	r0, ccc8 <main+0x114>
		printf("Failed to initialize UART service (err: %d)", err);
    ccbc:	484b      	ldr	r0, [pc, #300]	; (cdec <main+0x238>)
}
    ccbe:	b00a      	add	sp, #40	; 0x28
    ccc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    ccc4:	f01a bdce 	b.w	27864 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    ccc8:	4d49      	ldr	r5, [pc, #292]	; (cdf0 <main+0x23c>)
    ccca:	ac05      	add	r4, sp, #20
    cccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ccce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ccd0:	682b      	ldr	r3, [r5, #0]
    ccd2:	2501      	movs	r5, #1
    ccd4:	6023      	str	r3, [r4, #0]
    ccd6:	2202      	movs	r2, #2
    ccd8:	4b46      	ldr	r3, [pc, #280]	; (cdf4 <main+0x240>)
    ccda:	4947      	ldr	r1, [pc, #284]	; (cdf8 <main+0x244>)
    ccdc:	9500      	str	r5, [sp, #0]
    ccde:	a805      	add	r0, sp, #20
    cce0:	f00e fc2c 	bl	1b53c <bt_le_adv_start>
	if (err)
    cce4:	4604      	mov	r4, r0
    cce6:	b128      	cbz	r0, ccf4 <main+0x140>
		printf("Advertising failed to start (err %d)", err);
    cce8:	4601      	mov	r1, r0
    ccea:	4844      	ldr	r0, [pc, #272]	; (cdfc <main+0x248>)
    ccec:	f01a fdba 	bl	27864 <iprintf>
}
    ccf0:	b00a      	add	sp, #40	; 0x28
    ccf2:	bd70      	pop	{r4, r5, r6, pc}
	flag = 1; // print ad values once
    ccf4:	4b42      	ldr	r3, [pc, #264]	; (ce00 <main+0x24c>)
	k_msleep(300);
    ccf6:	f44f 7096 	mov.w	r0, #300	; 0x12c
	flag = 1; // print ad values once
    ccfa:	601d      	str	r5, [r3, #0]
	k_msleep(300);
    ccfc:	f01d f854 	bl	29da8 <k_msleep.isra.0>
	flash_init();
    cd00:	f7ff fcc4 	bl	c68c <flash_init>
	setup_initialize();
    cd04:	f000 fe04 	bl	d910 <setup_initialize>
	flash_write_setup();
    cd08:	f000 f8fc 	bl	cf04 <flash_write_setup>
	flash_read_setup();
    cd0c:	f000 f904 	bl	cf18 <flash_read_setup>
	print_setup();
    cd10:	f000 fe54 	bl	d9bc <print_setup>
    cd14:	4e3b      	ldr	r6, [pc, #236]	; (ce04 <main+0x250>)
    cd16:	4630      	mov	r0, r6
    cd18:	f023 ff25 	bl	30b66 <z_device_is_ready>
	if (!device_is_ready(uart_2))
    cd1c:	2800      	cmp	r0, #0
    cd1e:	f43f af7c 	beq.w	cc1a <main+0x66>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    cd22:	206c      	movs	r0, #108	; 0x6c
    cd24:	f024 fcd7 	bl	316d6 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    cd28:	4937      	ldr	r1, [pc, #220]	; (ce08 <main+0x254>)
	rx_uart2->len = 0;
    cd2a:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    cd2e:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    cd30:	4836      	ldr	r0, [pc, #216]	; (ce0c <main+0x258>)
    cd32:	f024 f963 	bl	30ffc <k_work_init_delayable>
	if (api->callback_set == NULL) {
    cd36:	68b3      	ldr	r3, [r6, #8]
    cd38:	681b      	ldr	r3, [r3, #0]
    cd3a:	b11b      	cbz	r3, cd44 <main+0x190>
	return api->callback_set(dev, callback, user_data);
    cd3c:	4622      	mov	r2, r4
    cd3e:	4630      	mov	r0, r6
    cd40:	4933      	ldr	r1, [pc, #204]	; (ce10 <main+0x25c>)
    cd42:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), UART_WAIT_FOR_RX);
    cd44:	1d29      	adds	r1, r5, #4
    cd46:	482f      	ldr	r0, [pc, #188]	; (ce04 <main+0x250>)
    cd48:	f01c ffd5 	bl	29cf6 <uart_rx_enable.constprop.0>
    k_sem_give(&adc_init);
    cd4c:	4831      	ldr	r0, [pc, #196]	; (ce14 <main+0x260>)
    cd4e:	f01c ffb3 	bl	29cb8 <k_sem_give>
    k_msleep(200);
    cd52:	20c8      	movs	r0, #200	; 0xc8
    cd54:	f01d f828 	bl	29da8 <k_msleep.isra.0>
    k_sem_give(&timer_init);
    cd58:	482f      	ldr	r0, [pc, #188]	; (ce18 <main+0x264>)
    cd5a:	f01c ffad 	bl	29cb8 <k_sem_give>
	k_msleep(1000);
    cd5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    cd62:	f01d f821 	bl	29da8 <k_msleep.isra.0>
	k_sem_give(&gps_init);
    cd66:	482d      	ldr	r0, [pc, #180]	; (ce1c <main+0x268>)
    cd68:	f01c ffa6 	bl	29cb8 <k_sem_give>
	k_msleep(1000);
    cd6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    cd70:	f01d f81a 	bl	29da8 <k_msleep.isra.0>
    k_sem_give(&lorawan_init);  //START HELIUM JOIN
    cd74:	482a      	ldr	r0, [pc, #168]	; (ce20 <main+0x26c>)
    cd76:	f01c ff9f 	bl	29cb8 <k_sem_give>
    k_msleep(alarm_wait_time); //TIME TO INIT ALARM SYSTEM
    cd7a:	482a      	ldr	r0, [pc, #168]	; (ce24 <main+0x270>)
    cd7c:	f01d f814 	bl	29da8 <k_msleep.isra.0>
	k_sem_give(&alarm_infra_init);
    cd80:	4829      	ldr	r0, [pc, #164]	; (ce28 <main+0x274>)
    cd82:	f01c ff99 	bl	29cb8 <k_sem_give>
	color(1);
    cd86:	2001      	movs	r0, #1
    cd88:	f000 fe6c 	bl	da64 <color>
    printk("Alarm Working \n");
    cd8c:	4827      	ldr	r0, [pc, #156]	; (ce2c <main+0x278>)
    cd8e:	f01d f9ed 	bl	2a16c <printk>
	color(255);
    cd92:	20ff      	movs	r0, #255	; 0xff
    cd94:	f000 fe66 	bl	da64 <color>
			k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    cd98:	f641 109a 	movw	r0, #6554	; 0x199a
    cd9c:	2100      	movs	r1, #0
    cd9e:	f01d f801 	bl	29da4 <k_sleep.isra.0>
	for (;;){
    cda2:	e7f9      	b.n	cd98 <main+0x1e4>
    cda4:	2000a62c 	.word	0x2000a62c
    cda8:	00032878 	.word	0x00032878
    cdac:	0000b7d1 	.word	0x0000b7d1
    cdb0:	20009870 	.word	0x20009870
    cdb4:	000348f9 	.word	0x000348f9
    cdb8:	00032fb8 	.word	0x00032fb8
    cdbc:	0000c185 	.word	0x0000c185
    cdc0:	00034919 	.word	0x00034919
    cdc4:	00034940 	.word	0x00034940
    cdc8:	2000841c 	.word	0x2000841c
    cdcc:	00034969 	.word	0x00034969
    cdd0:	2000840c 	.word	0x2000840c
    cdd4:	00034996 	.word	0x00034996
    cdd8:	000349c8 	.word	0x000349c8
    cddc:	000349e1 	.word	0x000349e1
    cde0:	00034a02 	.word	0x00034a02
    cde4:	20008ca0 	.word	0x20008ca0
    cde8:	20008400 	.word	0x20008400
    cdec:	00034a2b 	.word	0x00034a2b
    cdf0:	0003301c 	.word	0x0003301c
    cdf4:	00033240 	.word	0x00033240
    cdf8:	00033248 	.word	0x00033248
    cdfc:	00034a57 	.word	0x00034a57
    ce00:	2000a628 	.word	0x2000a628
    ce04:	00032860 	.word	0x00032860
    ce08:	0000b77d 	.word	0x0000b77d
    ce0c:	20009840 	.word	0x20009840
    ce10:	0000b825 	.word	0x0000b825
    ce14:	20008c58 	.word	0x20008c58
    ce18:	20008df0 	.word	0x20008df0
    ce1c:	20008d00 	.word	0x20008d00
    ce20:	20008d30 	.word	0x20008d30
    ce24:	00015f90 	.word	0x00015f90
    ce28:	20008c88 	.word	0x20008c88
    ce2c:	00034a7c 	.word	0x00034a7c

0000ce30 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    ce30:	4602      	mov	r2, r0
    ce32:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    ce34:	4801      	ldr	r0, [pc, #4]	; (ce3c <k_mutex_lock.constprop.0.isra.0+0xc>)
    ce36:	f018 bce9 	b.w	2580c <z_impl_k_mutex_lock>
    ce3a:	bf00      	nop
    ce3c:	20008bf0 	.word	0x20008bf0

0000ce40 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    ce40:	4801      	ldr	r0, [pc, #4]	; (ce48 <k_mutex_unlock.constprop.0.isra.0+0x8>)
    ce42:	f018 bd5d 	b.w	25900 <z_impl_k_mutex_unlock>
    ce46:	bf00      	nop
    ce48:	20008bf0 	.word	0x20008bf0

0000ce4c <adc_raw_to_millivolts_dt.constprop.0.isra.0>:
	if (!spec->channel_cfg_dt_node_exists) {
    ce4c:	4b10      	ldr	r3, [pc, #64]	; (ce90 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x44>)
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    ce4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    ce50:	795a      	ldrb	r2, [r3, #5]
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    ce52:	4605      	mov	r5, r0
	if (!spec->channel_cfg_dt_node_exists) {
    ce54:	b1d2      	cbz	r2, ce8c <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    ce56:	79da      	ldrb	r2, [r3, #7]
	resolution = spec->resolution;
    ce58:	7c1c      	ldrb	r4, [r3, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    ce5a:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
    ce5c:	bf09      	itett	eq
    ce5e:	681a      	ldreq	r2, [r3, #0]
		vref_mv = spec->vref_mv;
    ce60:	89d9      	ldrhne	r1, [r3, #14]
	return api->ref_internal;
    ce62:	6892      	ldreq	r2, [r2, #8]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    ce64:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
    ce66:	7a9a      	ldrb	r2, [r3, #10]
    ce68:	0692      	lsls	r2, r2, #26
	int32_t adc_mv = *valp * ref_mv;
    ce6a:	6802      	ldr	r2, [r0, #0]
		resolution -= 1U;
    ce6c:	bf48      	it	mi
    ce6e:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int32_t adc_mv = *valp * ref_mv;
    ce72:	fb01 f202 	mul.w	r2, r1, r2
	int ret = adc_gain_invert(gain, &adc_mv);
    ce76:	7998      	ldrb	r0, [r3, #6]
    ce78:	a901      	add	r1, sp, #4
		resolution -= 1U;
    ce7a:	bf48      	it	mi
    ce7c:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    ce7e:	9201      	str	r2, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    ce80:	f013 fba0 	bl	205c4 <adc_gain_invert>
	if (ret == 0) {
    ce84:	b910      	cbnz	r0, ce8c <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
		*valp = (adc_mv >> resolution);
    ce86:	9b01      	ldr	r3, [sp, #4]
    ce88:	4123      	asrs	r3, r4
    ce8a:	602b      	str	r3, [r5, #0]
}
    ce8c:	b003      	add	sp, #12
    ce8e:	bd30      	pop	{r4, r5, pc}
    ce90:	00033258 	.word	0x00033258

0000ce94 <gpio_pin_set_dt.constprop.0.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    ce94:	2101      	movs	r1, #1
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    ce96:	4603      	mov	r3, r0
	return gpio_pin_set(spec->port, spec->pin, value);
    ce98:	4a08      	ldr	r2, [pc, #32]	; (cebc <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
    ce9a:	6810      	ldr	r0, [r2, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    ce9c:	7912      	ldrb	r2, [r2, #4]
    ce9e:	4091      	lsls	r1, r2
    cea0:	6902      	ldr	r2, [r0, #16]
    cea2:	6812      	ldr	r2, [r2, #0]
    cea4:	4211      	tst	r1, r2
		value = (value != 0) ? 0 : 1;
    cea6:	bf18      	it	ne
    cea8:	f083 0301 	eorne.w	r3, r3, #1
	if (value != 0)	{
    ceac:	b113      	cbz	r3, ceb4 <gpio_pin_set_dt.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
    ceae:	6883      	ldr	r3, [r0, #8]
    ceb0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    ceb2:	4718      	bx	r3
    ceb4:	6883      	ldr	r3, [r0, #8]
    ceb6:	691b      	ldr	r3, [r3, #16]
    ceb8:	e7fb      	b.n	ceb2 <gpio_pin_set_dt.constprop.0.isra.0+0x1e>
    ceba:	bf00      	nop
    cebc:	20008454 	.word	0x20008454

0000cec0 <flash_button2_counter>:
void flash_button2_counter(void){
    cec0:	b510      	push	{r4, lr}
    button2_counter++;
    cec2:	4c0d      	ldr	r4, [pc, #52]	; (cef8 <flash_button2_counter+0x38>)
	(void)nvs_write(
    cec4:	2101      	movs	r1, #1
    button2_counter++;
    cec6:	6823      	ldr	r3, [r4, #0]
	(void)nvs_write(
    cec8:	4622      	mov	r2, r4
    button2_counter++;
    ceca:	3301      	adds	r3, #1
    cecc:	6023      	str	r3, [r4, #0]
	(void)nvs_write(
    cece:	480b      	ldr	r0, [pc, #44]	; (cefc <flash_button2_counter+0x3c>)
    ced0:	2304      	movs	r3, #4
    ced2:	f003 f875 	bl	ffc0 <nvs_write>
    rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    ced6:	2304      	movs	r3, #4
    ced8:	4622      	mov	r2, r4
    ceda:	2101      	movs	r1, #1
    cedc:	4807      	ldr	r0, [pc, #28]	; (cefc <flash_button2_counter+0x3c>)
    cede:	f01d fe61 	bl	2aba4 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    cee2:	2800      	cmp	r0, #0
    cee4:	dd06      	ble.n	cef4 <flash_button2_counter+0x34>
		printk("Id: %d, button2_counter: %d\n",
    cee6:	6822      	ldr	r2, [r4, #0]
    cee8:	2101      	movs	r1, #1
}
    ceea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Id: %d, button2_counter: %d\n",
    ceee:	4804      	ldr	r0, [pc, #16]	; (cf00 <flash_button2_counter+0x40>)
    cef0:	f01d b93c 	b.w	2a16c <printk>
}
    cef4:	bd10      	pop	{r4, pc}
    cef6:	bf00      	nop
    cef8:	2000a5e8 	.word	0x2000a5e8
    cefc:	2000a5f8 	.word	0x2000a5f8
    cf00:	000346ed 	.word	0x000346ed

0000cf04 <flash_write_setup>:
    err=nvs_write(&fs, SETUP_POSITION, &Initial_Setup,size_setup);
    cf04:	2332      	movs	r3, #50	; 0x32
    cf06:	2103      	movs	r1, #3
    cf08:	4a01      	ldr	r2, [pc, #4]	; (cf10 <flash_write_setup+0xc>)
    cf0a:	4802      	ldr	r0, [pc, #8]	; (cf14 <flash_write_setup+0x10>)
    cf0c:	f003 b858 	b.w	ffc0 <nvs_write>
    cf10:	20030de4 	.word	0x20030de4
    cf14:	2000a5f8 	.word	0x2000a5f8

0000cf18 <flash_read_setup>:
	(void)nvs_read(&fs, SETUP_POSITION, &Initial_Setup, sizeof(Initial_Setup));
    cf18:	2332      	movs	r3, #50	; 0x32
    cf1a:	2103      	movs	r1, #3
    cf1c:	4a01      	ldr	r2, [pc, #4]	; (cf24 <flash_read_setup+0xc>)
    cf1e:	4802      	ldr	r0, [pc, #8]	; (cf28 <flash_read_setup+0x10>)
    cf20:	f01d be40 	b.w	2aba4 <nvs_read>
    cf24:	20030de4 	.word	0x20030de4
    cf28:	2000a5f8 	.word	0x2000a5f8

0000cf2c <fill_date>:
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cf2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
				   part[0]=field_date[0];
    cf2e:	780b      	ldrb	r3, [r1, #0]
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cf30:	4604      	mov	r4, r0
				   part[0]=field_date[0];
    cf32:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[1];
    cf36:	784b      	ldrb	r3, [r1, #1]
           position.t.tm_mday=atoi(part);
    cf38:	a801      	add	r0, sp, #4
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cf3a:	460d      	mov	r5, r1
           part[1]=field_date[1];
    cf3c:	f88d 3005 	strb.w	r3, [sp, #5]
           position.t.tm_mday=atoi(part);
    cf40:	f024 fbd1 	bl	316e6 <atoi>
    cf44:	4e1b      	ldr	r6, [pc, #108]	; (cfb4 <fill_date+0x88>)
    cf46:	61f0      	str	r0, [r6, #28]
				   part[0]=field_date[2];
    cf48:	78ab      	ldrb	r3, [r5, #2]
				   position.t.tm_mon=(atoi(part)-1); 	// Month, where 0 = jan
    cf4a:	a801      	add	r0, sp, #4
				   part[0]=field_date[2];
    cf4c:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[3];
    cf50:	78eb      	ldrb	r3, [r5, #3]
    cf52:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_mon=(atoi(part)-1); 	// Month, where 0 = jan
    cf56:	f024 fbc6 	bl	316e6 <atoi>
    cf5a:	3801      	subs	r0, #1
    cf5c:	6230      	str	r0, [r6, #32]
				   part[0]=field_date[4];
    cf5e:	792b      	ldrb	r3, [r5, #4]
				   position.t.tm_year=atoi(part);	
    cf60:	a801      	add	r0, sp, #4
				   part[0]=field_date[4];
    cf62:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[5];
    cf66:	796b      	ldrb	r3, [r5, #5]
    cf68:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_year=atoi(part);	
    cf6c:	f024 fbbb 	bl	316e6 <atoi>
    cf70:	6270      	str	r0, [r6, #36]	; 0x24
				   part[0]=field_time[0];
    cf72:	7823      	ldrb	r3, [r4, #0]
				   position.t.tm_hour=atoi(part);	
    cf74:	a801      	add	r0, sp, #4
				   part[0]=field_time[0];
    cf76:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[1];
    cf7a:	7863      	ldrb	r3, [r4, #1]
    cf7c:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_hour=atoi(part);	
    cf80:	f024 fbb1 	bl	316e6 <atoi>
    cf84:	61b0      	str	r0, [r6, #24]
				   part[0]=field_time[2];
    cf86:	78a3      	ldrb	r3, [r4, #2]
				   position.t.tm_min=atoi(part);	
    cf88:	a801      	add	r0, sp, #4
				   part[0]=field_time[2];
    cf8a:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[3];
    cf8e:	78e3      	ldrb	r3, [r4, #3]
    cf90:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_min=atoi(part);	
    cf94:	f024 fba7 	bl	316e6 <atoi>
    cf98:	6170      	str	r0, [r6, #20]
				   part[0]=field_time[4];
    cf9a:	7923      	ldrb	r3, [r4, #4]
				   position.t.tm_sec=atoi(part);	
    cf9c:	a801      	add	r0, sp, #4
				   part[0]=field_time[4];
    cf9e:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[5];
    cfa2:	7963      	ldrb	r3, [r4, #5]
    cfa4:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_sec=atoi(part);	
    cfa8:	f024 fb9d 	bl	316e6 <atoi>
    cfac:	6130      	str	r0, [r6, #16]
}
    cfae:	b002      	add	sp, #8
    cfb0:	bd70      	pop	{r4, r5, r6, pc}
    cfb2:	bf00      	nop
    cfb4:	2000a5b4 	.word	0x2000a5b4

0000cfb8 <time_stamp_function>:
uint64_t time_stamp_function(void) {
    cfb8:	b510      	push	{r4, lr}
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    cfba:	4c15      	ldr	r4, [pc, #84]	; (d010 <time_stamp_function+0x58>)
uint64_t time_stamp_function(void) {
    cfbc:	b08a      	sub	sp, #40	; 0x28
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    cfbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    t_of_day = mktime(&t);
    cfc0:	a801      	add	r0, sp, #4
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    cfc2:	3364      	adds	r3, #100	; 0x64
    cfc4:	9306      	str	r3, [sp, #24]
    t.tm_mon = position.t.tm_mon;         // Month, where 0 = jan
    cfc6:	6a23      	ldr	r3, [r4, #32]
    cfc8:	9305      	str	r3, [sp, #20]
    t.tm_mday = position.t.tm_mday;       // Day of the month
    cfca:	69e3      	ldr	r3, [r4, #28]
    cfcc:	9304      	str	r3, [sp, #16]
    t.tm_hour = position.t.tm_hour;
    cfce:	69a3      	ldr	r3, [r4, #24]
    cfd0:	9303      	str	r3, [sp, #12]
    t.tm_min = position.t.tm_min;
    cfd2:	6963      	ldr	r3, [r4, #20]
    cfd4:	9302      	str	r3, [sp, #8]
    t.tm_sec = position.t.tm_sec;
    cfd6:	6923      	ldr	r3, [r4, #16]
    cfd8:	9301      	str	r3, [sp, #4]
    t.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
    cfda:	f04f 33ff 	mov.w	r3, #4294967295
    cfde:	9309      	str	r3, [sp, #36]	; 0x24
    t_of_day = mktime(&t);
    cfe0:	f019 fea2 	bl	26d28 <mktime>
    if (position.gps_fixed !=1 ){t_of_day=k_uptime_get()/1000;}
    cfe4:	7b23      	ldrb	r3, [r4, #12]
    cfe6:	2b01      	cmp	r3, #1
    cfe8:	d010      	beq.n	d00c <time_stamp_function+0x54>
	return z_impl_k_uptime_ticks();
    cfea:	f024 f9b6 	bl	3135a <z_impl_k_uptime_ticks>
    cfee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cff2:	fba0 0302 	umull	r0, r3, r0, r2
    cff6:	fb02 3101 	mla	r1, r2, r1, r3
    cffa:	0bc0      	lsrs	r0, r0, #15
    cffc:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    d000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d004:	2300      	movs	r3, #0
    d006:	0bc9      	lsrs	r1, r1, #15
    d008:	f7fb ff4a 	bl	8ea0 <__aeabi_ldivmod>
}
    d00c:	b00a      	add	sp, #40	; 0x28
    d00e:	bd10      	pop	{r4, pc}
    d010:	2000a5b4 	.word	0x2000a5b4

0000d014 <values_of_gnss_module>:
Gnss values_of_gnss_module(void){
    d014:	b570      	push	{r4, r5, r6, lr}
  gnss_return_value.latitude=position.latitude;
    d016:	4b05      	ldr	r3, [pc, #20]	; (d02c <values_of_gnss_module+0x18>)
Gnss values_of_gnss_module(void){
    d018:	4604      	mov	r4, r0
  gnss_return_value.latitude=position.latitude;
    d01a:	685e      	ldr	r6, [r3, #4]
  gnss_return_value.longitude=position.longitude;
    d01c:	689d      	ldr	r5, [r3, #8]
  gnss_return_value.timestamp=time_stamp_function();
    d01e:	f7ff ffcb 	bl	cfb8 <time_stamp_function>
  return gnss_return_value;
    d022:	6066      	str	r6, [r4, #4]
  gnss_return_value.timestamp=time_stamp_function();
    d024:	6020      	str	r0, [r4, #0]
  return gnss_return_value;
    d026:	60a5      	str	r5, [r4, #8]
}
    d028:	4620      	mov	r0, r4
    d02a:	bd70      	pop	{r4, r5, r6, pc}
    d02c:	2000a5b4 	.word	0x2000a5b4

0000d030 <values_of_analog_sensor>:
Analog values_of_analog_sensor(uint8_t channel){
    d030:	b538      	push	{r3, r4, r5, lr}
    d032:	460d      	mov	r5, r1
    d034:	4604      	mov	r4, r0
  analog_return_value.timestamp=time_stamp_function();
    d036:	f7ff ffbf 	bl	cfb8 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    d03a:	4b03      	ldr	r3, [pc, #12]	; (d048 <values_of_analog_sensor+0x18>)
    d03c:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
  return analog_return_value;
    d040:	e9c4 0300 	strd	r0, r3, [r4]
}
    d044:	4620      	mov	r0, r4
    d046:	bd38      	pop	{r3, r4, r5, pc}
    d048:	20030dd2 	.word	0x20030dd2

0000d04c <values_of_ntc_sensor>:
Ntc values_of_ntc_sensor(uint8_t sensor_number){
    d04c:	b570      	push	{r4, r5, r6, lr}
    d04e:	460d      	mov	r5, r1
    d050:	4604      	mov	r4, r0
  ntc_return.timestamp=time_stamp_function();
    d052:	f7ff ffb1 	bl	cfb8 <time_stamp_function>
  switch (sensor_number){
    d056:	2d02      	cmp	r5, #2
Ntc values_of_ntc_sensor(uint8_t sensor_number){
    d058:	f04f 0600 	mov.w	r6, #0
  switch (sensor_number){
    d05c:	d00a      	beq.n	d074 <values_of_ntc_sensor+0x28>
    d05e:	2d03      	cmp	r5, #3
    d060:	d00c      	beq.n	d07c <values_of_ntc_sensor+0x30>
    d062:	2d01      	cmp	r5, #1
    d064:	d102      	bne.n	d06c <values_of_ntc_sensor+0x20>
    case NTC_1:ntc_return.value=adc_value[NTC_1_CH];
    d066:	4b07      	ldr	r3, [pc, #28]	; (d084 <values_of_ntc_sensor+0x38>)
    d068:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
  return ntc_return;
    d06c:	6020      	str	r0, [r4, #0]
    d06e:	80a6      	strh	r6, [r4, #4]
}
    d070:	4620      	mov	r0, r4
    d072:	bd70      	pop	{r4, r5, r6, pc}
    case NTC_2:ntc_return.value=adc_value[NTC_2_CH];
    d074:	4b03      	ldr	r3, [pc, #12]	; (d084 <values_of_ntc_sensor+0x38>)
    d076:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
              break;
    d07a:	e7f7      	b.n	d06c <values_of_ntc_sensor+0x20>
    case NTC_3:ntc_return.value=adc_value[NTC_3_CH];
    d07c:	4b01      	ldr	r3, [pc, #4]	; (d084 <values_of_ntc_sensor+0x38>)
    d07e:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
              break;
    d082:	e7f3      	b.n	d06c <values_of_ntc_sensor+0x20>
    d084:	20030dd2 	.word	0x20030dd2

0000d088 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    d088:	b538      	push	{r3, r4, r5, lr}
    d08a:	460d      	mov	r5, r1
    d08c:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    d08e:	f7ff ff93 	bl	cfb8 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    d092:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    d094:	4b04      	ldr	r3, [pc, #16]	; (d0a8 <values_of_digital_sensor+0x20>)
    d096:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    d09a:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    d09e:	e9c4 0200 	strd	r0, r2, [r4]
}
    d0a2:	4620      	mov	r0, r4
    d0a4:	bd38      	pop	{r3, r4, r5, pc}
    d0a6:	bf00      	nop
    d0a8:	20030dc2 	.word	0x20030dc2

0000d0ac <read_memory>:
_Circular_Buffer read_memory(uint32_t Pos){
    d0ac:	b570      	push	{r4, r5, r6, lr}
    d0ae:	4605      	mov	r5, r0
    d0b0:	460c      	mov	r4, r1
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d0b2:	f04f 30ff 	mov.w	r0, #4294967295
    d0b6:	f04f 31ff 	mov.w	r1, #4294967295
    d0ba:	f7ff feb9 	bl	ce30 <k_mutex_lock.constprop.0.isra.0>
    buf = k_malloc(size);
    d0be:	2068      	movs	r0, #104	; 0x68
    d0c0:	f024 fb09 	bl	316d6 <k_malloc>
    uint16_t Id= Pos + BASE_DATA_BUFFER;
    d0c4:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_read(&fs, Id, buf, size);
    d0c8:	2368      	movs	r3, #104	; 0x68
    d0ca:	4602      	mov	r2, r0
    buf = k_malloc(size);
    d0cc:	4606      	mov	r6, r0
    err=nvs_read(&fs, Id, buf, size);
    d0ce:	b289      	uxth	r1, r1
    d0d0:	4806      	ldr	r0, [pc, #24]	; (d0ec <read_memory+0x40>)
    d0d2:	f01d fd67 	bl	2aba4 <nvs_read>
    printf("Result read=%d bytes\n",err);
    d0d6:	b281      	uxth	r1, r0
    d0d8:	4805      	ldr	r0, [pc, #20]	; (d0f0 <read_memory+0x44>)
    d0da:	f01a fbc3 	bl	27864 <iprintf>
    return *buf;
    d0de:	2268      	movs	r2, #104	; 0x68
    d0e0:	4631      	mov	r1, r6
    d0e2:	4628      	mov	r0, r5
    d0e4:	f024 fb13 	bl	3170e <memcpy>
}
    d0e8:	4628      	mov	r0, r5
    d0ea:	bd70      	pop	{r4, r5, r6, pc}
    d0ec:	2000a5f8 	.word	0x2000a5f8
    d0f0:	00034b95 	.word	0x00034b95

0000d0f4 <save_memory>:
void save_memory(uint32_t Pos){
    d0f4:	b570      	push	{r4, r5, r6, lr}
    d0f6:	4604      	mov	r4, r0
                break;
        case 4: printk("\033[34m");       // Azul
                break;
        case 5: printk("\033[35m");       // Magenta
                break;
        case 6: printk("\033[36m");       // Ciano
    d0f8:	4818      	ldr	r0, [pc, #96]	; (d15c <save_memory+0x68>)
    d0fa:	f01d f837 	bl	2a16c <printk>
    printf("Size of structure=%d bytes\n",size);
    d0fe:	2168      	movs	r1, #104	; 0x68
    d100:	4817      	ldr	r0, [pc, #92]	; (d160 <save_memory+0x6c>)
    d102:	f01a fbaf 	bl	27864 <iprintf>
    buf = k_malloc(size);
    d106:	2068      	movs	r0, #104	; 0x68
    d108:	f024 fae5 	bl	316d6 <k_malloc>
    *buf=C_Buffer[Pos];
    d10c:	2668      	movs	r6, #104	; 0x68
    buf = k_malloc(size);
    d10e:	4605      	mov	r5, r0
    *buf=C_Buffer[Pos];
    d110:	4914      	ldr	r1, [pc, #80]	; (d164 <save_memory+0x70>)
    d112:	4632      	mov	r2, r6
    d114:	fb06 1104 	mla	r1, r6, r4, r1
    d118:	f024 faf9 	bl	3170e <memcpy>
    printf("Position %d\n",Pos); 
    d11c:	4621      	mov	r1, r4
    d11e:	4812      	ldr	r0, [pc, #72]	; (d168 <save_memory+0x74>)
    d120:	f01a fba0 	bl	27864 <iprintf>
    uint16_t id= Pos + BASE_DATA_BUFFER;
    d124:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_write(&fs, id, buf,size);
    d128:	4c10      	ldr	r4, [pc, #64]	; (d16c <save_memory+0x78>)
    d12a:	4633      	mov	r3, r6
    d12c:	462a      	mov	r2, r5
    d12e:	4620      	mov	r0, r4
    d130:	b289      	uxth	r1, r1
    d132:	f002 ff45 	bl	ffc0 <nvs_write>
    printf("Result=%d bytes saved\n",err);
    d136:	b281      	uxth	r1, r0
    d138:	480d      	ldr	r0, [pc, #52]	; (d170 <save_memory+0x7c>)
    d13a:	f01a fb93 	bl	27864 <iprintf>
    (void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    d13e:	2304      	movs	r3, #4
    d140:	2102      	movs	r1, #2
    d142:	4620      	mov	r0, r4
    d144:	4a0b      	ldr	r2, [pc, #44]	; (d174 <save_memory+0x80>)
    d146:	f002 ff3b 	bl	ffc0 <nvs_write>
                break;
        case 14: printk("\033[96m");      // Ciano claro
                break;
        case 15: printk("\033[97m");      // Branco claro
                break;
        case 255: printk("\033[0m");       // Padrão (branco)
    d14a:	480b      	ldr	r0, [pc, #44]	; (d178 <save_memory+0x84>)
    d14c:	f01d f80e 	bl	2a16c <printk>
    k_free(buf);
    d150:	4628      	mov	r0, r5
}
    d152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_free(buf);
    d156:	f024 bab7 	b.w	316c8 <k_free>
    d15a:	bf00      	nop
    d15c:	00034bab 	.word	0x00034bab
    d160:	00034bb1 	.word	0x00034bb1
    d164:	2000af6c 	.word	0x2000af6c
    d168:	00034bcd 	.word	0x00034bcd
    d16c:	2000a5f8 	.word	0x2000a5f8
    d170:	00034bda 	.word	0x00034bda
    d174:	2002f86c 	.word	0x2002f86c
    d178:	00034bf1 	.word	0x00034bf1

0000d17c <feed_circular_buffer>:
void feed_circular_buffer(void){
    d17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    d180:	4f45      	ldr	r7, [pc, #276]	; (d298 <feed_circular_buffer+0x11c>)
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d182:	f04f 30ff 	mov.w	r0, #4294967295
    d186:	f04f 31ff 	mov.w	r1, #4294967295
void feed_circular_buffer(void){
    d18a:	b09b      	sub	sp, #108	; 0x6c
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d18c:	f7ff fe50 	bl	ce30 <k_mutex_lock.constprop.0.isra.0>
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    d190:	683c      	ldr	r4, [r7, #0]
    d192:	f5b4 6fb4 	cmp.w	r4, #1440	; 0x5a0
    d196:	d27c      	bcs.n	d292 <feed_circular_buffer+0x116>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d198:	46e8      	mov	r8, sp
    d19a:	f04f 0968 	mov.w	r9, #104	; 0x68
    d19e:	4645      	mov	r5, r8
    d1a0:	4e3e      	ldr	r6, [pc, #248]	; (d29c <feed_circular_buffer+0x120>)
     C_Buffer_Current_Position=C_Buffer_Free_Position;
    d1a2:	4b3f      	ldr	r3, [pc, #252]	; (d2a0 <feed_circular_buffer+0x124>)
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d1a4:	4640      	mov	r0, r8
     C_Buffer_Current_Position=C_Buffer_Free_Position;
    d1a6:	601c      	str	r4, [r3, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d1a8:	fb09 6404 	mla	r4, r9, r4, r6
    d1ac:	3404      	adds	r4, #4
    d1ae:	f7ff ff31 	bl	d014 <values_of_gnss_module>
    d1b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d1b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d1b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d1b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d1ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d1bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d1be:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    d1c0:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d1c2:	6023      	str	r3, [r4, #0]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    d1c4:	683c      	ldr	r4, [r7, #0]
    d1c6:	4640      	mov	r0, r8
    d1c8:	fb09 6404 	mla	r4, r9, r4, r6
    d1cc:	3438      	adds	r4, #56	; 0x38
    d1ce:	f7ff ff2f 	bl	d030 <values_of_analog_sensor>
    d1d2:	e898 0003 	ldmia.w	r8, {r0, r1}
    d1d6:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    d1da:	2101      	movs	r1, #1
    d1dc:	a80e      	add	r0, sp, #56	; 0x38
    d1de:	f7ff ff35 	bl	d04c <values_of_ntc_sensor>
    d1e2:	683b      	ldr	r3, [r7, #0]
    d1e4:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    d1e8:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d1ec:	2102      	movs	r1, #2
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    d1ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d1f2:	a810      	add	r0, sp, #64	; 0x40
    d1f4:	f7ff ff2a 	bl	d04c <values_of_ntc_sensor>
    d1f8:	683b      	ldr	r3, [r7, #0]
    d1fa:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    d1fe:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d202:	2103      	movs	r1, #3
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d204:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d208:	a812      	add	r0, sp, #72	; 0x48
    d20a:	f7ff ff1f 	bl	d04c <values_of_ntc_sensor>
    d20e:	683b      	ldr	r3, [r7, #0]
    d210:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    d214:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d218:	2101      	movs	r1, #1
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d21a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d21e:	a814      	add	r0, sp, #80	; 0x50
    d220:	f7ff ff14 	bl	d04c <values_of_ntc_sensor>
    d224:	683b      	ldr	r3, [r7, #0]
    d226:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d228:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d22c:	2102      	movs	r1, #2
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d22e:	641a      	str	r2, [r3, #64]	; 0x40
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d230:	a816      	add	r0, sp, #88	; 0x58
    d232:	f7ff ff0b 	bl	d04c <values_of_ntc_sensor>
    d236:	683b      	ldr	r3, [r7, #0]
    d238:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d23a:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d23e:	2103      	movs	r1, #3
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d240:	649a      	str	r2, [r3, #72]	; 0x48
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d242:	a818      	add	r0, sp, #96	; 0x60
    d244:	f7ff ff02 	bl	d04c <values_of_ntc_sensor>
    d248:	683c      	ldr	r4, [r7, #0]
    d24a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d24c:	fb09 6404 	mla	r4, r9, r4, r6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d250:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d252:	6523      	str	r3, [r4, #80]	; 0x50
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d254:	4640      	mov	r0, r8
    d256:	f7ff ff17 	bl	d088 <values_of_digital_sensor>
    d25a:	e898 0003 	ldmia.w	r8, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d25e:	683b      	ldr	r3, [r7, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d260:	3458      	adds	r4, #88	; 0x58
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d262:	fb09 6603 	mla	r6, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d266:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d26a:	3660      	adds	r6, #96	; 0x60
    d26c:	2101      	movs	r1, #1
    d26e:	4640      	mov	r0, r8
    d270:	f7ff ff0a 	bl	d088 <values_of_digital_sensor>
    d274:	e898 0003 	ldmia.w	r8, {r0, r1}
    d278:	e886 0003 	stmia.w	r6, {r0, r1}
     save_memory(C_Buffer_Free_Position);
    d27c:	6838      	ldr	r0, [r7, #0]
    d27e:	f7ff ff39 	bl	d0f4 <save_memory>
     C_Buffer_Free_Position++;
    d282:	683b      	ldr	r3, [r7, #0]
    d284:	3301      	adds	r3, #1
    d286:	603b      	str	r3, [r7, #0]
}
    d288:	b01b      	add	sp, #108	; 0x6c
    d28a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    k_mutex_unlock(&c_buffer_busy);  
    d28e:	f7ff bdd7 	b.w	ce40 <k_mutex_unlock.constprop.0.isra.0>
    d292:	2300      	movs	r3, #0
    d294:	e7f7      	b.n	d286 <feed_circular_buffer+0x10a>
    d296:	bf00      	nop
    d298:	2002f870 	.word	0x2002f870
    d29c:	2000af6c 	.word	0x2000af6c
    d2a0:	2002f86c 	.word	0x2002f86c

0000d2a4 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    d2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    d2a6:	4b1c      	ldr	r3, [pc, #112]	; (d318 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    d2a8:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    d2aa:	6818      	ldr	r0, [r3, #0]
    d2ac:	889b      	ldrh	r3, [r3, #4]
    d2ae:	9000      	str	r0, [sp, #0]
    d2b0:	2218      	movs	r2, #24
    d2b2:	2100      	movs	r1, #0
    d2b4:	f10d 0006 	add.w	r0, sp, #6
    d2b8:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    d2bc:	2601      	movs	r6, #1
   char tag[30]="10203";
    d2be:	f024 fa60 	bl	31782 <memset>
     msg.positions.timestamp=1;
    d2c2:	2300      	movs	r3, #0
    msg.timestamp=0;
    d2c4:	4c15      	ldr	r4, [pc, #84]	; (d31c <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    d2c6:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    d2c8:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    d2cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d2d0:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    d2d2:	4b13      	ldr	r3, [pc, #76]	; (d320 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    d2d4:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    d2d6:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    d2d8:	230b      	movs	r3, #11
    d2da:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    d2dc:	4b11      	ldr	r3, [pc, #68]	; (d324 <fill_fields_to_test+0x80>)
    d2de:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    d2e0:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    d2e2:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    d2e4:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    d2e6:	7766      	strb	r6, [r4, #29]
    d2e8:	f104 001e 	add.w	r0, r4, #30
    d2ec:	f024 fb98 	bl	31a20 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    d2f0:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    d2f4:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    d2f8:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    d2fc:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    d2fe:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    d302:	f7fb fc29 	bl	8b58 <__aeabi_i2f>
   while (sensor_id<6){
    d306:	3501      	adds	r5, #1
    d308:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    d30a:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    d30c:	f104 0424 	add.w	r4, r4, #36	; 0x24
    d310:	d1e6      	bne.n	d2e0 <fill_fields_to_test+0x3c>
}
    d312:	4802      	ldr	r0, [pc, #8]	; (d31c <fill_fields_to_test+0x78>)
    d314:	b009      	add	sp, #36	; 0x24
    d316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d318:	000330a8 	.word	0x000330a8
    d31c:	2000ae7c 	.word	0x2000ae7c
    d320:	40400000 	.word	0x40400000
    d324:	41400000 	.word	0x41400000

0000d328 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    d328:	b5f0      	push	{r4, r5, r6, r7, lr}
   k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d32a:	f04f 31ff 	mov.w	r1, #4294967295
buf_data send_array_dd_v0(void){
    d32e:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    d332:	4607      	mov	r7, r0
   k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d334:	f04f 30ff 	mov.w	r0, #4294967295
    d338:	f7ff fd7a 	bl	ce30 <k_mutex_lock.constprop.0.isra.0>
   History_st *data = fill_fields_to_test();
    d33c:	f7ff ffb2 	bl	d2a4 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    d340:	2202      	movs	r2, #2
    d342:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    d346:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    d34a:	4a3a      	ldr	r2, [pc, #232]	; (d434 <send_array_dd_v0+0x10c>)
    d34c:	ae0c      	add	r6, sp, #48	; 0x30
    d34e:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d350:	4631      	mov	r1, r6
    d352:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    d354:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    d356:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    d358:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d35a:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    d35c:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    d35e:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    d360:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d362:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    d364:	f101 010c 	add.w	r1, r1, #12
    d368:	d1f8      	bne.n	d35c <send_array_dd_v0+0x34>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    d36a:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    d36c:	6958      	ldr	r0, [r3, #20]
    d36e:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    d370:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    d372:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    d374:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    d378:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    d37c:	f101 0108 	add.w	r1, r1, #8
    d380:	d1f6      	bne.n	d370 <send_array_dd_v0+0x48>
    d382:	f103 051e 	add.w	r5, r3, #30
    d386:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    d38a:	f855 3c06 	ldr.w	r3, [r5, #-6]
    d38e:	4629      	mov	r1, r5
    d390:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    d394:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    d398:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    d39c:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    d3a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d3a4:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    d3a8:	f024 fb3a 	bl	31a20 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    d3ac:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    d3ae:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    d3b0:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    d3b4:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    d3b6:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    d3ba:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    d3be:	4633      	mov	r3, r6
    d3c0:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    d3c4:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    d3c6:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    d3c8:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    d3cc:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    d3d0:	f103 0308 	add.w	r3, r3, #8
    d3d4:	d1f6      	bne.n	d3c4 <send_array_dd_v0+0x9c>
   while (sensor_id<6){
    d3d6:	3524      	adds	r5, #36	; 0x24
    d3d8:	42a5      	cmp	r5, r4
    d3da:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    d3de:	d1d4      	bne.n	d38a <send_array_dd_v0+0x62>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    d3e0:	466c      	mov	r4, sp
    d3e2:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    d3e6:	4668      	mov	r0, sp
    d3e8:	4913      	ldr	r1, [pc, #76]	; (d438 <send_array_dd_v0+0x110>)
    d3ea:	ad07      	add	r5, sp, #28
    d3ec:	f000 fc54 	bl	dc98 <pb_ostream_from_buffer>
    d3f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    d3f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d3f4:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    d3f6:	4911      	ldr	r1, [pc, #68]	; (d43c <send_array_dd_v0+0x114>)
    d3f8:	aa0c      	add	r2, sp, #48	; 0x30
    d3fa:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    d3fc:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    d3fe:	f000 fecb 	bl	e198 <pb_encode>
   int j=0;
    d402:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    d404:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    d406:	490c      	ldr	r1, [pc, #48]	; (d438 <send_array_dd_v0+0x110>)
    d408:	4a0d      	ldr	r2, [pc, #52]	; (d440 <send_array_dd_v0+0x118>)
    d40a:	4283      	cmp	r3, r0
    d40c:	d10b      	bne.n	d426 <send_array_dd_v0+0xfe>
   function_return.len=total_bytes_encoded;
    d40e:	490d      	ldr	r1, [pc, #52]	; (d444 <send_array_dd_v0+0x11c>)
   return function_return;
    d410:	f240 72dc 	movw	r2, #2012	; 0x7dc
    d414:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    d416:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
   return function_return;
    d41a:	f024 f978 	bl	3170e <memcpy>
}
    d41e:	4638      	mov	r0, r7
    d420:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    d424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    d426:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    d42a:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    d42c:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    d430:	e7eb      	b.n	d40a <send_array_dd_v0+0xe2>
    d432:	bf00      	nop
    d434:	0012d687 	.word	0x0012d687
    d438:	20031020 	.word	0x20031020
    d43c:	00033310 	.word	0x00033310
    d440:	2000a6a3 	.word	0x2000a6a3
    d444:	2000a6a0 	.word	0x2000a6a0

0000d448 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d44c:	4680      	mov	r8, r0
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d44e:	f04f 31ff 	mov.w	r1, #4294967295
void print_current_position_cb(uint32_t pos){
    d452:	b08f      	sub	sp, #60	; 0x3c
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d454:	f04f 30ff 	mov.w	r0, #4294967295
    d458:	f7ff fcea 	bl	ce30 <k_mutex_lock.constprop.0.isra.0>
        case 13: printk("\033[95m");      // Magenta claro
    d45c:	4859      	ldr	r0, [pc, #356]	; (d5c4 <print_current_position_cb+0x17c>)
    d45e:	f01c fe85 	bl	2a16c <printk>
    printf("\n\n####Position %d #####\n",pos);
    d462:	4641      	mov	r1, r8
    d464:	4858      	ldr	r0, [pc, #352]	; (d5c8 <print_current_position_cb+0x180>)
    d466:	f01a f9fd 	bl	27864 <iprintf>
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d46a:	4b58      	ldr	r3, [pc, #352]	; (d5cc <print_current_position_cb+0x184>)
        case 2: printk("\033[32m");       // Verde
    d46c:	4858      	ldr	r0, [pc, #352]	; (d5d0 <print_current_position_cb+0x188>)
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d46e:	7b1b      	ldrb	r3, [r3, #12]
    d470:	2b01      	cmp	r3, #1
    d472:	f040 8098 	bne.w	d5a6 <print_current_position_cb+0x15e>
        case 2: printk("\033[32m");       // Verde
    d476:	f01c fe79 	bl	2a16c <printk>
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d47a:	4856      	ldr	r0, [pc, #344]	; (d5d4 <print_current_position_cb+0x18c>)
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d47c:	2468      	movs	r4, #104	; 0x68
    d47e:	4f56      	ldr	r7, [pc, #344]	; (d5d8 <print_current_position_cb+0x190>)
      else {color(2); printf("GPS Fixed  :No\n");}
    d480:	f01a f9f0 	bl	27864 <iprintf>
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d484:	fb04 7408 	mla	r4, r4, r8, r7
        case 13: printk("\033[95m");      // Magenta claro
    d488:	484e      	ldr	r0, [pc, #312]	; (d5c4 <print_current_position_cb+0x17c>)
    d48a:	f01c fe6f 	bl	2a16c <printk>
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d48e:	68a0      	ldr	r0, [r4, #8]
    d490:	f7fa ffc6 	bl	8420 <__aeabi_f2d>
    d494:	220e      	movs	r2, #14
    d496:	e9cd 0100 	strd	r0, r1, [sp]
    d49a:	4b50      	ldr	r3, [pc, #320]	; (d5dc <print_current_position_cb+0x194>)
    d49c:	2100      	movs	r1, #0
    d49e:	a806      	add	r0, sp, #24
    d4a0:	f024 fa97 	bl	319d2 <__sprintf_chk>
    sprintf(buf_long, "%f", C_Buffer[pos].gnss_module.longitude);
    d4a4:	68e0      	ldr	r0, [r4, #12]
    d4a6:	f7fa ffbb 	bl	8420 <__aeabi_f2d>
    d4aa:	4b4c      	ldr	r3, [pc, #304]	; (d5dc <print_current_position_cb+0x194>)
    d4ac:	e9cd 0100 	strd	r0, r1, [sp]
    d4b0:	220e      	movs	r2, #14
    d4b2:	2100      	movs	r1, #0
    d4b4:	a80a      	add	r0, sp, #40	; 0x28
    d4b6:	f024 fa8c 	bl	319d2 <__sprintf_chk>
    printf("https://www.google.com/maps/place/%c%c ",buf_lati[0],buf_lati[1]);
    d4ba:	f89d 2019 	ldrb.w	r2, [sp, #25]
    d4be:	f89d 1018 	ldrb.w	r1, [sp, #24]
    d4c2:	4847      	ldr	r0, [pc, #284]	; (d5e0 <print_current_position_cb+0x198>)
    d4c4:	f01a f9ce 	bl	27864 <iprintf>
    i=2;
    d4c8:	2302      	movs	r3, #2
    while (buf_lati[i]){buf_lati[i-2]=buf_lati[i];i++;}
    d4ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d4ce:	eb0d 0102 	add.w	r1, sp, r2
    d4d2:	f811 2c20 	ldrb.w	r2, [r1, #-32]
    d4d6:	2a00      	cmp	r2, #0
    d4d8:	d169      	bne.n	d5ae <print_current_position_cb+0x166>
    printf("%s,",buf_lati);
    d4da:	a906      	add	r1, sp, #24
    d4dc:	4841      	ldr	r0, [pc, #260]	; (d5e4 <print_current_position_cb+0x19c>)
    d4de:	f01a f9c1 	bl	27864 <iprintf>
    printf("%c%c ",buf_long[0],buf_long[1]);    
    d4e2:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    d4e6:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    d4ea:	483f      	ldr	r0, [pc, #252]	; (d5e8 <print_current_position_cb+0x1a0>)
    d4ec:	f01a f9ba 	bl	27864 <iprintf>
    i=2;
    d4f0:	2302      	movs	r3, #2
    while (buf_long[i]){buf_long[i-2]=buf_long[i];i++;}
    d4f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d4f6:	eb0d 0102 	add.w	r1, sp, r2
    d4fa:	f811 2c10 	ldrb.w	r2, [r1, #-16]
    d4fe:	2a00      	cmp	r2, #0
    d500:	d15a      	bne.n	d5b8 <print_current_position_cb+0x170>
      C_Buffer[pos].gnss_module.latitude,
    d502:	2468      	movs	r4, #104	; 0x68
    d504:	fb04 f408 	mul.w	r4, r4, r8
    printf("%s \n",buf_long);
    d508:	a90a      	add	r1, sp, #40	; 0x28
      C_Buffer[pos].gnss_module.latitude,
    d50a:	193d      	adds	r5, r7, r4
    printf("%s \n",buf_long);
    d50c:	4837      	ldr	r0, [pc, #220]	; (d5ec <print_current_position_cb+0x1a4>)
    d50e:	f01a f9a9 	bl	27864 <iprintf>
    printf("GNSS Position Lat=%f Long=%f UTC Epoch Unix Timestamp=%d \n",
    d512:	68a8      	ldr	r0, [r5, #8]
    d514:	f7fa ff84 	bl	8420 <__aeabi_f2d>
    d518:	686b      	ldr	r3, [r5, #4]
    d51a:	4682      	mov	sl, r0
    d51c:	9302      	str	r3, [sp, #8]
    d51e:	68e8      	ldr	r0, [r5, #12]
    d520:	468b      	mov	fp, r1
    d522:	f7fa ff7d 	bl	8420 <__aeabi_f2d>
    d526:	4652      	mov	r2, sl
    d528:	e9cd 0100 	strd	r0, r1, [sp]
    d52c:	465b      	mov	r3, fp
    d52e:	4830      	ldr	r0, [pc, #192]	; (d5f0 <print_current_position_cb+0x1a8>)
    d530:	f01a f998 	bl	27864 <iprintf>
    val_mv = C_Buffer[pos].analog.value;
    d534:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d536:	a805      	add	r0, sp, #20
    val_mv = C_Buffer[pos].analog.value;
    d538:	9305      	str	r3, [sp, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d53a:	f7ff fc87 	bl	ce4c <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  Value=%d  %"PRId32"mV \n",
    d53e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    d540:	9a05      	ldr	r2, [sp, #20]
    d542:	482c      	ldr	r0, [pc, #176]	; (d5f4 <print_current_position_cb+0x1ac>)
    d544:	f01a f98e 	bl	27864 <iprintf>
    d548:	2501      	movs	r5, #1
    d54a:	f104 063c 	add.w	r6, r4, #60	; 0x3c
      printf("NTC %d Value=%d %3.1f C\n",
    d54e:	4c2a      	ldr	r4, [pc, #168]	; (d5f8 <print_current_position_cb+0x1b0>)
    d550:	443e      	add	r6, r7
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    d552:	b2e9      	uxtb	r1, r5
    d554:	f836 0035 	ldrh.w	r0, [r6, r5, lsl #3]
      C_Buffer[pos].ntc[i].value,
    d558:	f936 a035 	ldrsh.w	sl, [r6, r5, lsl #3]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    d55c:	f7fb ff60 	bl	9420 <ntc_temperature>
      printf("NTC %d Value=%d %3.1f C\n",
    d560:	f7fa ff5e 	bl	8420 <__aeabi_f2d>
    d564:	f105 39ff 	add.w	r9, r5, #4294967295
    d568:	e9cd 0100 	strd	r0, r1, [sp]
    d56c:	4652      	mov	r2, sl
    d56e:	4649      	mov	r1, r9
    d570:	4620      	mov	r0, r4
    while (i<3){
    d572:	3501      	adds	r5, #1
      printf("NTC %d Value=%d %3.1f C\n",
    d574:	f01a f976 	bl	27864 <iprintf>
    while (i<3){
    d578:	2d04      	cmp	r5, #4
    d57a:	d1ea      	bne.n	d552 <print_current_position_cb+0x10a>
      printf("Digital%d  Value=%d\n",
    d57c:	2368      	movs	r3, #104	; 0x68
    d57e:	fb03 7708 	mla	r7, r3, r8, r7
    d582:	2100      	movs	r1, #0
    d584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    d586:	481d      	ldr	r0, [pc, #116]	; (d5fc <print_current_position_cb+0x1b4>)
    d588:	f01a f96c 	bl	27864 <iprintf>
    d58c:	2101      	movs	r1, #1
    d58e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    d590:	481a      	ldr	r0, [pc, #104]	; (d5fc <print_current_position_cb+0x1b4>)
    d592:	f01a f967 	bl	27864 <iprintf>
        case 255: printk("\033[0m");       // Padrão (branco)
    d596:	481a      	ldr	r0, [pc, #104]	; (d600 <print_current_position_cb+0x1b8>)
    d598:	f01c fde8 	bl	2a16c <printk>
  k_mutex_unlock(&c_buffer_busy);
    d59c:	f7ff fc50 	bl	ce40 <k_mutex_unlock.constprop.0.isra.0>
}
    d5a0:	b00f      	add	sp, #60	; 0x3c
    d5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 2: printk("\033[32m");       // Verde
    d5a6:	f01c fde1 	bl	2a16c <printk>
      else {color(2); printf("GPS Fixed  :No\n");}
    d5aa:	4816      	ldr	r0, [pc, #88]	; (d604 <print_current_position_cb+0x1bc>)
    d5ac:	e766      	b.n	d47c <print_current_position_cb+0x34>
    while (buf_lati[i]){buf_lati[i-2]=buf_lati[i];i++;}
    d5ae:	3301      	adds	r3, #1
    d5b0:	f801 2c22 	strb.w	r2, [r1, #-34]
    d5b4:	b2db      	uxtb	r3, r3
    d5b6:	e788      	b.n	d4ca <print_current_position_cb+0x82>
    while (buf_long[i]){buf_long[i-2]=buf_long[i];i++;}
    d5b8:	3301      	adds	r3, #1
    d5ba:	f801 2c12 	strb.w	r2, [r1, #-18]
    d5be:	b2db      	uxtb	r3, r3
    d5c0:	e797      	b.n	d4f2 <print_current_position_cb+0xaa>
    d5c2:	bf00      	nop
    d5c4:	00034bf6 	.word	0x00034bf6
    d5c8:	00034bfc 	.word	0x00034bfc
    d5cc:	2000a5b4 	.word	0x2000a5b4
    d5d0:	00034c15 	.word	0x00034c15
    d5d4:	00034c1b 	.word	0x00034c1b
    d5d8:	2000af6c 	.word	0x2000af6c
    d5dc:	00034c3c 	.word	0x00034c3c
    d5e0:	00034c3f 	.word	0x00034c3f
    d5e4:	00034c67 	.word	0x00034c67
    d5e8:	00034c61 	.word	0x00034c61
    d5ec:	00034c6b 	.word	0x00034c6b
    d5f0:	00034c70 	.word	0x00034c70
    d5f4:	00034cab 	.word	0x00034cab
    d5f8:	00034cc4 	.word	0x00034cc4
    d5fc:	00034cdd 	.word	0x00034cdd
    d600:	00034bf1 	.word	0x00034bf1
    d604:	00034c2c 	.word	0x00034c2c

0000d608 <print_current_position_cb_new>:
void print_current_position_cb_new(uint32_t pos){
    d608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d60c:	4605      	mov	r5, r0
    d60e:	b0a0      	sub	sp, #128	; 0x80
   C_Buffer = k_malloc(size);
    d610:	2068      	movs	r0, #104	; 0x68
    d612:	f024 f860 	bl	316d6 <k_malloc>
    d616:	4604      	mov	r4, r0
   *C_Buffer=read_memory(pos);
    d618:	4629      	mov	r1, r5
    d61a:	a804      	add	r0, sp, #16
    d61c:	f7ff fd46 	bl	d0ac <read_memory>
    d620:	2268      	movs	r2, #104	; 0x68
    d622:	a904      	add	r1, sp, #16
    d624:	4620      	mov	r0, r4
    d626:	f024 f872 	bl	3170e <memcpy>
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d62a:	f04f 31ff 	mov.w	r1, #4294967295
    d62e:	f04f 30ff 	mov.w	r0, #4294967295
    d632:	f7ff fbfd 	bl	ce30 <k_mutex_lock.constprop.0.isra.0>
        case 13: printk("\033[95m");      // Magenta claro
    d636:	482b      	ldr	r0, [pc, #172]	; (d6e4 <print_current_position_cb_new+0xdc>)
    d638:	f01c fd98 	bl	2a16c <printk>
    printf("\n\n####Position %d #####\n",pos);
    d63c:	4629      	mov	r1, r5
    d63e:	482a      	ldr	r0, [pc, #168]	; (d6e8 <print_current_position_cb_new+0xe0>)
    d640:	f01a f910 	bl	27864 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    d644:	68a0      	ldr	r0, [r4, #8]
    d646:	f7fa feeb 	bl	8420 <__aeabi_f2d>
    d64a:	6863      	ldr	r3, [r4, #4]
    d64c:	4606      	mov	r6, r0
    d64e:	9302      	str	r3, [sp, #8]
    d650:	68e0      	ldr	r0, [r4, #12]
    d652:	460f      	mov	r7, r1
    d654:	f7fa fee4 	bl	8420 <__aeabi_f2d>
    d658:	4632      	mov	r2, r6
    d65a:	e9cd 0100 	strd	r0, r1, [sp]
    d65e:	463b      	mov	r3, r7
    d660:	4822      	ldr	r0, [pc, #136]	; (d6ec <print_current_position_cb_new+0xe4>)
    d662:	f01a f8ff 	bl	27864 <iprintf>
    val_mv = C_Buffer->analog.value;
    d666:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d668:	a81f      	add	r0, sp, #124	; 0x7c
    val_mv = C_Buffer->analog.value;
    d66a:	931f      	str	r3, [sp, #124]	; 0x7c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d66c:	f7ff fbee 	bl	ce4c <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    d670:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    d674:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d676:	481e      	ldr	r0, [pc, #120]	; (d6f0 <print_current_position_cb_new+0xe8>)
    d678:	f01a f8f4 	bl	27864 <iprintf>
    while (i<3){
    d67c:	4625      	mov	r5, r4
    int i=0;
    d67e:	2600      	movs	r6, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d680:	f8df 8070 	ldr.w	r8, [pc, #112]	; d6f4 <print_current_position_cb_new+0xec>
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d684:	1c77      	adds	r7, r6, #1
    d686:	f8b5 0044 	ldrh.w	r0, [r5, #68]	; 0x44
    d68a:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d68c:	f8d5 9040 	ldr.w	r9, [r5, #64]	; 0x40
      C_Buffer->ntc[i].value,
    d690:	f9b5 a044 	ldrsh.w	sl, [r5, #68]	; 0x44
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d694:	f7fb fec4 	bl	9420 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d698:	f7fa fec2 	bl	8420 <__aeabi_f2d>
    d69c:	4653      	mov	r3, sl
    d69e:	e9cd 0100 	strd	r0, r1, [sp]
    d6a2:	464a      	mov	r2, r9
    d6a4:	4631      	mov	r1, r6
    d6a6:	4640      	mov	r0, r8
    d6a8:	f01a f8dc 	bl	27864 <iprintf>
    while (i<3){
    d6ac:	2f03      	cmp	r7, #3
      i++;
    d6ae:	463e      	mov	r6, r7
    while (i<3){
    d6b0:	f105 0508 	add.w	r5, r5, #8
    d6b4:	d1e6      	bne.n	d684 <print_current_position_cb_new+0x7c>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    d6b6:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    d6ba:	2100      	movs	r1, #0
    d6bc:	480e      	ldr	r0, [pc, #56]	; (d6f8 <print_current_position_cb_new+0xf0>)
    d6be:	f01a f8d1 	bl	27864 <iprintf>
    d6c2:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    d6c6:	2101      	movs	r1, #1
    d6c8:	480b      	ldr	r0, [pc, #44]	; (d6f8 <print_current_position_cb_new+0xf0>)
    d6ca:	f01a f8cb 	bl	27864 <iprintf>
        case 255: printk("\033[0m");       // Padrão (branco)
    d6ce:	480b      	ldr	r0, [pc, #44]	; (d6fc <print_current_position_cb_new+0xf4>)
    d6d0:	f01c fd4c 	bl	2a16c <printk>
 k_free(C_Buffer);
    d6d4:	4620      	mov	r0, r4
    d6d6:	f023 fff7 	bl	316c8 <k_free>
}
    d6da:	b020      	add	sp, #128	; 0x80
    d6dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 k_mutex_unlock(&c_buffer_busy);
    d6e0:	f7ff bbae 	b.w	ce40 <k_mutex_unlock.constprop.0.isra.0>
    d6e4:	00034bf6 	.word	0x00034bf6
    d6e8:	00034bfc 	.word	0x00034bfc
    d6ec:	00034cf2 	.word	0x00034cf2
    d6f0:	00034d1e 	.word	0x00034d1e
    d6f4:	00034d44 	.word	0x00034d44
    d6f8:	00034d6a 	.word	0x00034d6a
    d6fc:	00034bf1 	.word	0x00034bf1

0000d700 <lorawan_tx_data>:
void lorawan_tx_data(void){
    d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data_test[] =  { 0X00 , 0X00 , 0X00 , 0X00 , //LATITUDE
    d704:	4b70      	ldr	r3, [pc, #448]	; (d8c8 <lorawan_tx_data+0x1c8>)
void lorawan_tx_data(void){
    d706:	b08d      	sub	sp, #52	; 0x34
  char data_test[] =  { 0X00 , 0X00 , 0X00 , 0X00 , //LATITUDE
    d708:	ac06      	add	r4, sp, #24
    d70a:	f103 0518 	add.w	r5, r3, #24
    d70e:	4622      	mov	r2, r4
    d710:	6818      	ldr	r0, [r3, #0]
    d712:	6859      	ldr	r1, [r3, #4]
    d714:	3308      	adds	r3, #8
    d716:	c203      	stmia	r2!, {r0, r1}
    d718:	42ab      	cmp	r3, r5
    d71a:	4614      	mov	r4, r2
    d71c:	d1f7      	bne.n	d70e <lorawan_tx_data+0xe>
  k_mutex_lock(&c_buffer_busy, K_FOREVER);
    d71e:	f04f 31ff 	mov.w	r1, #4294967295
    d722:	f04f 30ff 	mov.w	r0, #4294967295
    d726:	f7ff fb83 	bl	ce30 <k_mutex_lock.constprop.0.isra.0>
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d72a:	2268      	movs	r2, #104	; 0x68
  uint32_t pos=C_Buffer_Current_Position;
    d72c:	4b67      	ldr	r3, [pc, #412]	; (d8cc <lorawan_tx_data+0x1cc>)
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d72e:	4c68      	ldr	r4, [pc, #416]	; (d8d0 <lorawan_tx_data+0x1d0>)
  uint32_t pos=C_Buffer_Current_Position;
    d730:	681b      	ldr	r3, [r3, #0]
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d732:	af03      	add	r7, sp, #12
    d734:	fb02 4403 	mla	r4, r2, r3, r4
    d738:	68a3      	ldr	r3, [r4, #8]
  float c=C_Buffer[pos].gnss_module.timestamp; //4 bytes 8 
    d73a:	6860      	ldr	r0, [r4, #4]
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d73c:	9302      	str	r3, [sp, #8]
  float b=C_Buffer[pos].gnss_module.longitude; //4 bytes 4..7
    d73e:	68e3      	ldr	r3, [r4, #12]
    d740:	9303      	str	r3, [sp, #12]
  float c=C_Buffer[pos].gnss_module.timestamp; //4 bytes 8 
    d742:	f7fb fa09 	bl	8b58 <__aeabi_i2f>
    d746:	9004      	str	r0, [sp, #16]
  float d=C_Buffer[pos].analog.value;          //4 bytes 12..17
    d748:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    d74a:	f7fb fa05 	bl	8b58 <__aeabi_i2f>
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d74e:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
  uint8_t f=C_Buffer[pos].digital[1].value;      //1 byte 17
    d752:	f894 b064 	ldrb.w	fp, [r4, #100]	; 0x64
  uint16_t g=C_Buffer[pos].ntc[0].value;          //2 bytes 18..19
    d756:	f9b4 a044 	ldrsh.w	sl, [r4, #68]	; 0x44
    d75a:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
  uint16_t h=C_Buffer[pos].ntc[1].value;          //2 bytes 20..21
    d75e:	f9b4 904c 	ldrsh.w	r9, [r4, #76]	; 0x4c
    d762:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d766:	f9b4 8054 	ldrsh.w	r8, [r4, #84]	; 0x54
    d76a:	ac06      	add	r4, sp, #24
  float d=C_Buffer[pos].analog.value;          //4 bytes 12..17
    d76c:	9005      	str	r0, [sp, #20]
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d76e:	9301      	str	r3, [sp, #4]
  k_mutex_unlock(&c_buffer_busy);
    d770:	f7ff fb66 	bl	ce40 <k_mutex_unlock.constprop.0.isra.0>
    d774:	4623      	mov	r3, r4
  for (int i = 0; i < sizeof(float); i++) {
    d776:	2200      	movs	r2, #0
    d778:	f10d 0c08 	add.w	ip, sp, #8
    d77c:	a804      	add	r0, sp, #16
    d77e:	a905      	add	r1, sp, #20
     data_test[i]    =*(ptr_lati      + i);
    d780:	f81c eb01 	ldrb.w	lr, [ip], #1
  for (int i = 0; i < sizeof(float); i++) {
    d784:	3201      	adds	r2, #1
     data_test[i]    =*(ptr_lati      + i);
    d786:	f803 eb01 	strb.w	lr, [r3], #1
     data_test[i+4]  =*(ptr_long      + i);
    d78a:	f817 eb01 	ldrb.w	lr, [r7], #1
  for (int i = 0; i < sizeof(float); i++) {
    d78e:	2a04      	cmp	r2, #4
     data_test[i+4]  =*(ptr_long      + i);
    d790:	f883 e003 	strb.w	lr, [r3, #3]
     data_test[i+8]  =*(ptr_timestamp + i);
    d794:	f810 eb01 	ldrb.w	lr, [r0], #1
    d798:	f883 e007 	strb.w	lr, [r3, #7]
     data_test[i+12] =*(ptr_analog    + i);
    d79c:	f811 eb01 	ldrb.w	lr, [r1], #1
    d7a0:	f883 e00b 	strb.w	lr, [r3, #11]
  for (int i = 0; i < sizeof(float); i++) {
    d7a4:	d1ec      	bne.n	d780 <lorawan_tx_data+0x80>
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d7a6:	4b4b      	ldr	r3, [pc, #300]	; (d8d4 <lorawan_tx_data+0x1d4>)
        case 12: printk("\033[94m");      // Azul claro
    d7a8:	484b      	ldr	r0, [pc, #300]	; (d8d8 <lorawan_tx_data+0x1d8>)
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d7aa:	791b      	ldrb	r3, [r3, #4]
     data_test[19]    =*(ptr_ntc0 + 1); //first LSB and after MSB - little endian
    d7ac:	f3c6 2607 	ubfx	r6, r6, #8, #8
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d7b0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d7b4:	9b01      	ldr	r3, [sp, #4]
     data_test[21]    =*(ptr_ntc1 + 1); //first LSB and after MSB - little endian
    d7b6:	f3c5 2507 	ubfx	r5, r5, #8, #8
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d7ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
     data_test[19]    =*(ptr_ntc0 + 1); //first LSB and after MSB - little endian
    d7be:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
     data_test[21]    =*(ptr_ntc1 + 1); //first LSB and after MSB - little endian
    d7c2:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d7c6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
     data_test[17] =*(ptr_digi1);
    d7ca:	f88d b029 	strb.w	fp, [sp, #41]	; 0x29
     data_test[18]    =*(ptr_ntc0 + 0); //first LSB and after MSB - little endian
    d7ce:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
     data_test[20]    =*(ptr_ntc1 + 0); //first LSB and after MSB - little endian
    d7d2:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
     data_test[22]    =*(ptr_ntc2 + 0); //first LSB and after MSB - little endian
    d7d6:	f88d 802e 	strb.w	r8, [sp, #46]	; 0x2e
        case 12: printk("\033[94m");      // Azul claro
    d7da:	f01c fcc7 	bl	2a16c <printk>
 printk("HELIUM PAYLOAD: ");
    d7de:	483f      	ldr	r0, [pc, #252]	; (d8dc <lorawan_tx_data+0x1dc>)
    d7e0:	f01c fcc4 	bl	2a16c <printk>
 for (int h = 0; h < sizeof(data_test); h++) {
    d7e4:	2600      	movs	r6, #0
     printk("%02X ",data_test[h]);
    d7e6:	4d3e      	ldr	r5, [pc, #248]	; (d8e0 <lorawan_tx_data+0x1e0>)
    d7e8:	4628      	mov	r0, r5
    d7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 for (int h = 0; h < sizeof(data_test); h++) {
    d7ee:	3601      	adds	r6, #1
     printk("%02X ",data_test[h]);
    d7f0:	f01c fcbc 	bl	2a16c <printk>
 for (int h = 0; h < sizeof(data_test); h++) {
    d7f4:	2e18      	cmp	r6, #24
    d7f6:	d1f7      	bne.n	d7e8 <lorawan_tx_data+0xe8>
        case 10: printk("\033[92m");      // Verde claro
    d7f8:	483a      	ldr	r0, [pc, #232]	; (d8e4 <lorawan_tx_data+0x1e4>)
    d7fa:	f01c fcb7 	bl	2a16c <printk>
  data_sent_cnt++;
    d7fe:	4d3a      	ldr	r5, [pc, #232]	; (d8e8 <lorawan_tx_data+0x1e8>)
  printk("\nSending payload...\n");
    d800:	483a      	ldr	r0, [pc, #232]	; (d8ec <lorawan_tx_data+0x1ec>)
    d802:	f01c fcb3 	bl	2a16c <printk>
        case 255: printk("\033[0m");       // Padrão (branco)
    d806:	483a      	ldr	r0, [pc, #232]	; (d8f0 <lorawan_tx_data+0x1f0>)
    d808:	f01c fcb0 	bl	2a16c <printk>
  data_sent_cnt++;
    d80c:	782b      	ldrb	r3, [r5, #0]
	ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d80e:	4632      	mov	r2, r6
  data_sent_cnt++;
    d810:	3301      	adds	r3, #1
    d812:	702b      	strb	r3, [r5, #0]
	ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d814:	2002      	movs	r0, #2
    d816:	2300      	movs	r3, #0
    d818:	a906      	add	r1, sp, #24
    d81a:	f004 fda5 	bl	12368 <lorawan_send>
		if (ret == -EAGAIN) {
    d81e:	f110 0f0b 	cmn.w	r0, #11
	ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d822:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    d824:	d138      	bne.n	d898 <lorawan_tx_data+0x198>
			printk("lorawan_send failed: %d. Continuing...\n\n", ret);
    d826:	4601      	mov	r1, r0
    d828:	4832      	ldr	r0, [pc, #200]	; (d8f4 <lorawan_tx_data+0x1f4>)
    d82a:	f01c fc9f 	bl	2a16c <printk>
	return z_impl_k_sleep(timeout);
    d82e:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    d832:	2100      	movs	r1, #0
    d834:	f018 fdfa 	bl	2642c <z_impl_k_sleep>
			printk("lorawan_send confirm failed -trying again : %d\n\n", ret);
    d838:	4621      	mov	r1, r4
    d83a:	482f      	ldr	r0, [pc, #188]	; (d8f8 <lorawan_tx_data+0x1f8>)
    d83c:	f01c fc96 	bl	2a16c <printk>
      while(ret<0 && nt<=RETRY){ 
    d840:	270c      	movs	r7, #12
       lorawan_reconnect_cnt++;
    d842:	4e2e      	ldr	r6, [pc, #184]	; (d8fc <lorawan_tx_data+0x1fc>)
       if(lorawan_reconnect_cnt==LIMIT_RECONNECT_CNT){lorawan_reconnect_cnt=0;lorawan_reconnect=1;}
    d844:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d900 <lorawan_tx_data+0x200>
      while(ret<0 && nt<=RETRY){ 
    d848:	2c00      	cmp	r4, #0
    d84a:	da1a      	bge.n	d882 <lorawan_tx_data+0x182>
    d84c:	3f01      	subs	r7, #1
    d84e:	d018      	beq.n	d882 <lorawan_tx_data+0x182>
       ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d850:	2218      	movs	r2, #24
    d852:	2300      	movs	r3, #0
    d854:	eb0d 0102 	add.w	r1, sp, r2
    d858:	2002      	movs	r0, #2
    d85a:	f004 fd85 	bl	12368 <lorawan_send>
       lorawan_reconnect_cnt++;
    d85e:	6833      	ldr	r3, [r6, #0]
       ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d860:	4604      	mov	r4, r0
       if(lorawan_reconnect_cnt==LIMIT_RECONNECT_CNT){lorawan_reconnect_cnt=0;lorawan_reconnect=1;}
    d862:	2b31      	cmp	r3, #49	; 0x31
       lorawan_reconnect_cnt++;
    d864:	f103 0201 	add.w	r2, r3, #1
       if(lorawan_reconnect_cnt==LIMIT_RECONNECT_CNT){lorawan_reconnect_cnt=0;lorawan_reconnect=1;}
    d868:	bf03      	ittte	eq
    d86a:	2300      	moveq	r3, #0
    d86c:	6033      	streq	r3, [r6, #0]
    d86e:	2301      	moveq	r3, #1
       lorawan_reconnect_cnt++;
    d870:	6032      	strne	r2, [r6, #0]
       if(lorawan_reconnect_cnt==LIMIT_RECONNECT_CNT){lorawan_reconnect_cnt=0;lorawan_reconnect=1;}
    d872:	bf08      	it	eq
    d874:	f888 3000 	strbeq.w	r3, [r8]
       if (ret==0){
    d878:	b9e8      	cbnz	r0, d8b6 <lorawan_tx_data+0x1b6>
        printk("Payload Data sent\n");
    d87a:	4822      	ldr	r0, [pc, #136]	; (d904 <lorawan_tx_data+0x204>)
    d87c:	f01c fc76 	bl	2a16c <printk>
        lorawan_reconnect_cnt=0;
    d880:	6034      	str	r4, [r6, #0]
    if(data_sent_cnt>=DATA_SENT_JOIN_AGAIN){lorawan_reconnect=1;data_sent_cnt=0;}
    d882:	782b      	ldrb	r3, [r5, #0]
    d884:	2b31      	cmp	r3, #49	; 0x31
    d886:	d904      	bls.n	d892 <lorawan_tx_data+0x192>
    d888:	2201      	movs	r2, #1
    d88a:	4b1d      	ldr	r3, [pc, #116]	; (d900 <lorawan_tx_data+0x200>)
    d88c:	701a      	strb	r2, [r3, #0]
    d88e:	2300      	movs	r3, #0
    d890:	702b      	strb	r3, [r5, #0]
}
    d892:	b00d      	add	sp, #52	; 0x34
    d894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ret < 0) {
    d898:	2800      	cmp	r0, #0
    d89a:	dbcd      	blt.n	d838 <lorawan_tx_data+0x138>
        case 10: printk("\033[92m");      // Verde claro
    d89c:	4811      	ldr	r0, [pc, #68]	; (d8e4 <lorawan_tx_data+0x1e4>)
    d89e:	f01c fc65 	bl	2a16c <printk>
		        printk("Payload Data sent!\n\n");
    d8a2:	4819      	ldr	r0, [pc, #100]	; (d908 <lorawan_tx_data+0x208>)
    d8a4:	f01c fc62 	bl	2a16c <printk>
        case 255: printk("\033[0m");       // Padrão (branco)
    d8a8:	4811      	ldr	r0, [pc, #68]	; (d8f0 <lorawan_tx_data+0x1f0>)
    d8aa:	f01c fc5f 	bl	2a16c <printk>
            lorawan_reconnect_cnt=0;
    d8ae:	2200      	movs	r2, #0
    d8b0:	4b12      	ldr	r3, [pc, #72]	; (d8fc <lorawan_tx_data+0x1fc>)
    d8b2:	601a      	str	r2, [r3, #0]
    d8b4:	e7e5      	b.n	d882 <lorawan_tx_data+0x182>
        }else{printk("Data send failed-trying again\n");
    d8b6:	4815      	ldr	r0, [pc, #84]	; (d90c <lorawan_tx_data+0x20c>)
    d8b8:	f01c fc58 	bl	2a16c <printk>
    d8bc:	2100      	movs	r1, #0
    d8be:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    d8c2:	f018 fdb3 	bl	2642c <z_impl_k_sleep>
    d8c6:	e7bf      	b.n	d848 <lorawan_tx_data+0x148>
    d8c8:	000330c6 	.word	0x000330c6
    d8cc:	2002f86c 	.word	0x2002f86c
    d8d0:	2000af6c 	.word	0x2000af6c
    d8d4:	20031016 	.word	0x20031016
    d8d8:	00034d8c 	.word	0x00034d8c
    d8dc:	00034d92 	.word	0x00034d92
    d8e0:	00034da3 	.word	0x00034da3
    d8e4:	00034da9 	.word	0x00034da9
    d8e8:	2003101c 	.word	0x2003101c
    d8ec:	00034daf 	.word	0x00034daf
    d8f0:	00034bf1 	.word	0x00034bf1
    d8f4:	00034dc4 	.word	0x00034dc4
    d8f8:	00034ded 	.word	0x00034ded
    d8fc:	2000a5b0 	.word	0x2000a5b0
    d900:	2003101d 	.word	0x2003101d
    d904:	00034e1e 	.word	0x00034e1e
    d908:	00034e50 	.word	0x00034e50
    d90c:	00034e31 	.word	0x00034e31

0000d910 <setup_initialize>:
void setup_initialize(void){
    d910:	b570      	push	{r4, r5, r6, lr}
    d912:	b088      	sub	sp, #32
  uint8_t dev[8] = LORAWAN_DEV_EUI_HELIUM;
    d914:	466b      	mov	r3, sp
    d916:	4a22      	ldr	r2, [pc, #136]	; (d9a0 <setup_initialize+0x90>)
    d918:	6810      	ldr	r0, [r2, #0]
    d91a:	6851      	ldr	r1, [r2, #4]
  uint8_t join[8] = LORAWAN_JOIN_EUI_HELIUM;
    d91c:	4a21      	ldr	r2, [pc, #132]	; (d9a4 <setup_initialize+0x94>)
  uint8_t dev[8] = LORAWAN_DEV_EUI_HELIUM;
    d91e:	c303      	stmia	r3!, {r0, r1}
  uint8_t join[8] = LORAWAN_JOIN_EUI_HELIUM;
    d920:	6810      	ldr	r0, [r2, #0]
    d922:	6851      	ldr	r1, [r2, #4]
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    d924:	aa04      	add	r2, sp, #16
    d926:	4614      	mov	r4, r2
  uint8_t join[8] = LORAWAN_JOIN_EUI_HELIUM;
    d928:	c303      	stmia	r3!, {r0, r1}
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    d92a:	4b1f      	ldr	r3, [pc, #124]	; (d9a8 <setup_initialize+0x98>)
    d92c:	f103 0610 	add.w	r6, r3, #16
    d930:	4615      	mov	r5, r2
    d932:	6818      	ldr	r0, [r3, #0]
    d934:	6859      	ldr	r1, [r3, #4]
    d936:	3308      	adds	r3, #8
    d938:	c503      	stmia	r5!, {r0, r1}
    d93a:	42b3      	cmp	r3, r6
    d93c:	462a      	mov	r2, r5
    d93e:	d1f7      	bne.n	d930 <setup_initialize+0x20>
  for(i=0;i<=7;i++){Initial_Setup.dev[i] = dev[i];} 
    d940:	4669      	mov	r1, sp
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    d942:	2308      	movs	r3, #8
    d944:	4a19      	ldr	r2, [pc, #100]	; (d9ac <setup_initialize+0x9c>)
  for(i=0;i<=7;i++){Initial_Setup.dev[i] = dev[i];} 
    d946:	f811 0b01 	ldrb.w	r0, [r1], #1
    d94a:	3b01      	subs	r3, #1
    d94c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    d950:	f802 0f01 	strb.w	r0, [r2, #1]!
    d954:	d1f7      	bne.n	d946 <setup_initialize+0x36>
  for(i=0;i<=7;i++){Initial_Setup.join[i] = join[i];} 
    d956:	461a      	mov	r2, r3
    d958:	4915      	ldr	r1, [pc, #84]	; (d9b0 <setup_initialize+0xa0>)
    d95a:	a802      	add	r0, sp, #8
    d95c:	3201      	adds	r2, #1
    d95e:	f810 5b01 	ldrb.w	r5, [r0], #1
    d962:	b2d2      	uxtb	r2, r2
    d964:	2a08      	cmp	r2, #8
    d966:	f801 5f01 	strb.w	r5, [r1, #1]!
    d96a:	d1f7      	bne.n	d95c <setup_initialize+0x4c>
    d96c:	4622      	mov	r2, r4
    d96e:	4911      	ldr	r1, [pc, #68]	; (d9b4 <setup_initialize+0xa4>)
  for(i=0;i<=15;i++){Initial_Setup.key[i] = key[i];} 
    d970:	3301      	adds	r3, #1
    d972:	f812 0b01 	ldrb.w	r0, [r2], #1
    d976:	b2db      	uxtb	r3, r3
    d978:	2b10      	cmp	r3, #16
    d97a:	f801 0f01 	strb.w	r0, [r1, #1]!
    d97e:	d1f7      	bne.n	d970 <setup_initialize+0x60>
  Initial_Setup.led_blink_time=RUN_LED_BLINK_INTERVAL;
    d980:	22c8      	movs	r2, #200	; 0xc8
    d982:	4b0d      	ldr	r3, [pc, #52]	; (d9b8 <setup_initialize+0xa8>)
    d984:	801a      	strh	r2, [r3, #0]
  Initial_Setup.interval_uplink=LORAWAN_INTERVAL;
    d986:	2206      	movs	r2, #6
    d988:	805a      	strh	r2, [r3, #2]
  Initial_Setup.output_port=0;
    d98a:	2200      	movs	r2, #0
    d98c:	711a      	strb	r2, [r3, #4]
  Initial_Setup.turn_angle[0]=0;
    d98e:	80da      	strh	r2, [r3, #6]
  Initial_Setup.turn_angle[1]=0;
    d990:	811a      	strh	r2, [r3, #8]
  Initial_Setup.turn_angle[2]=0;
    d992:	815a      	strh	r2, [r3, #10]
  Initial_Setup.turn_angle[3]=0;
    d994:	819a      	strh	r2, [r3, #12]
  Initial_Setup.turn_speed[0]=0;
    d996:	81da      	strh	r2, [r3, #14]
  Initial_Setup.turn_speed[2]=0;
    d998:	821a      	strh	r2, [r3, #16]
}
    d99a:	b008      	add	sp, #32
    d99c:	bd70      	pop	{r4, r5, r6, pc}
    d99e:	bf00      	nop
    d9a0:	00034e65 	.word	0x00034e65
    d9a4:	00034e6e 	.word	0x00034e6e
    d9a8:	00034e77 	.word	0x00034e77
    d9ac:	20030df5 	.word	0x20030df5
    d9b0:	20030dfd 	.word	0x20030dfd
    d9b4:	20030e05 	.word	0x20030e05
    d9b8:	20030de4 	.word	0x20030de4

0000d9bc <print_setup>:
void print_setup(void){
    d9bc:	b570      	push	{r4, r5, r6, lr}
	  printk("Led Blink Time      : %d ms\n",Initial_Setup.led_blink_time);
    d9be:	4c1f      	ldr	r4, [pc, #124]	; (da3c <print_setup+0x80>)
    d9c0:	481f      	ldr	r0, [pc, #124]	; (da40 <print_setup+0x84>)
    d9c2:	8821      	ldrh	r1, [r4, #0]
    d9c4:	f01c fbd2 	bl	2a16c <printk>
	  printk("Interval UpLink Time: %d minutes\n",Initial_Setup.interval_uplink);
    d9c8:	8861      	ldrh	r1, [r4, #2]
    d9ca:	481e      	ldr	r0, [pc, #120]	; (da44 <print_setup+0x88>)
    d9cc:	f01c fbce 	bl	2a16c <printk>
    printk("DEV : ");
    d9d0:	481d      	ldr	r0, [pc, #116]	; (da48 <print_setup+0x8c>)
    d9d2:	f01c fbcb 	bl	2a16c <printk>
    for(int i=0;i<=7;i++){printk("%02X ",Initial_Setup.dev[i]);}
    d9d6:	2500      	movs	r5, #0
    d9d8:	4e1c      	ldr	r6, [pc, #112]	; (da4c <print_setup+0x90>)
    d9da:	3411      	adds	r4, #17
    d9dc:	4630      	mov	r0, r6
    d9de:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    d9e2:	3501      	adds	r5, #1
    d9e4:	f01c fbc2 	bl	2a16c <printk>
    d9e8:	2d08      	cmp	r5, #8
    d9ea:	d1f7      	bne.n	d9dc <print_setup+0x20>
    printk("\n");
    d9ec:	4818      	ldr	r0, [pc, #96]	; (da50 <print_setup+0x94>)
    d9ee:	f01c fbbd 	bl	2a16c <printk>
    printk("JOIN: ");
    d9f2:	4818      	ldr	r0, [pc, #96]	; (da54 <print_setup+0x98>)
    d9f4:	f01c fbba 	bl	2a16c <printk>
    for(int i=0;i<=7;i++){printk("%02X ",Initial_Setup.join[i]);}
    d9f8:	2400      	movs	r4, #0
    d9fa:	4d17      	ldr	r5, [pc, #92]	; (da58 <print_setup+0x9c>)
    d9fc:	4e13      	ldr	r6, [pc, #76]	; (da4c <print_setup+0x90>)
    d9fe:	4630      	mov	r0, r6
    da00:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    da04:	3401      	adds	r4, #1
    da06:	f01c fbb1 	bl	2a16c <printk>
    da0a:	2c08      	cmp	r4, #8
    da0c:	d1f7      	bne.n	d9fe <print_setup+0x42>
    printk("\n");
    da0e:	4810      	ldr	r0, [pc, #64]	; (da50 <print_setup+0x94>)
    da10:	f01c fbac 	bl	2a16c <printk>
    printk("KEY : ");
    da14:	4811      	ldr	r0, [pc, #68]	; (da5c <print_setup+0xa0>)
    da16:	f01c fba9 	bl	2a16c <printk>
    for(int i=0;i<=15;i++){printk("%02X ",Initial_Setup.key[i]);}
    da1a:	2400      	movs	r4, #0
    da1c:	4d10      	ldr	r5, [pc, #64]	; (da60 <print_setup+0xa4>)
    da1e:	4e0b      	ldr	r6, [pc, #44]	; (da4c <print_setup+0x90>)
    da20:	4630      	mov	r0, r6
    da22:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    da26:	3401      	adds	r4, #1
    da28:	f01c fba0 	bl	2a16c <printk>
    da2c:	2c10      	cmp	r4, #16
    da2e:	d1f7      	bne.n	da20 <print_setup+0x64>
    printk("\n");
    da30:	4807      	ldr	r0, [pc, #28]	; (da50 <print_setup+0x94>)
}
    da32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printk("\n");
    da36:	f01c bb99 	b.w	2a16c <printk>
    da3a:	bf00      	nop
    da3c:	20030de4 	.word	0x20030de4
    da40:	00034e88 	.word	0x00034e88
    da44:	00034ea5 	.word	0x00034ea5
    da48:	00034ec7 	.word	0x00034ec7
    da4c:	00034da3 	.word	0x00034da3
    da50:	00034e63 	.word	0x00034e63
    da54:	00034ece 	.word	0x00034ece
    da58:	20030dfd 	.word	0x20030dfd
    da5c:	00034ed5 	.word	0x00034ed5
    da60:	20030e05 	.word	0x20030e05

0000da64 <color>:
    switch (color) {
    da64:	280f      	cmp	r0, #15
    da66:	d80c      	bhi.n	da82 <color+0x1e>
    da68:	3801      	subs	r0, #1
    da6a:	280e      	cmp	r0, #14
    da6c:	d80b      	bhi.n	da86 <color+0x22>
    da6e:	e8df f000 	tbb	[pc, r0]
    da72:	0f0d      	.short	0x0f0d
    da74:	17151311 	.word	0x17151311
    da78:	1f1d1b19 	.word	0x1f1d1b19
    da7c:	27252321 	.word	0x27252321
    da80:	29          	.byte	0x29
    da81:	00          	.byte	0x00
    da82:	28ff      	cmp	r0, #255	; 0xff
    da84:	d120      	bne.n	dac8 <color+0x64>
        case 0: printk("\033[0m");        // Preto
    da86:	4811      	ldr	r0, [pc, #68]	; (dacc <color+0x68>)
        case 15: printk("\033[97m");      // Branco claro
    da88:	f01c bb70 	b.w	2a16c <printk>
        case 1: printk("\033[31m");       // Vermelho
    da8c:	4810      	ldr	r0, [pc, #64]	; (dad0 <color+0x6c>)
    da8e:	e7fb      	b.n	da88 <color+0x24>
        case 2: printk("\033[32m");       // Verde
    da90:	4810      	ldr	r0, [pc, #64]	; (dad4 <color+0x70>)
    da92:	e7f9      	b.n	da88 <color+0x24>
        case 3: printk("\033[33m");       // Amarelo
    da94:	4810      	ldr	r0, [pc, #64]	; (dad8 <color+0x74>)
    da96:	e7f7      	b.n	da88 <color+0x24>
        case 4: printk("\033[34m");       // Azul
    da98:	4810      	ldr	r0, [pc, #64]	; (dadc <color+0x78>)
    da9a:	e7f5      	b.n	da88 <color+0x24>
        case 5: printk("\033[35m");       // Magenta
    da9c:	4810      	ldr	r0, [pc, #64]	; (dae0 <color+0x7c>)
    da9e:	e7f3      	b.n	da88 <color+0x24>
        case 6: printk("\033[36m");       // Ciano
    daa0:	4810      	ldr	r0, [pc, #64]	; (dae4 <color+0x80>)
    daa2:	e7f1      	b.n	da88 <color+0x24>
        case 7: printk("\033[37m");       // Branco
    daa4:	4810      	ldr	r0, [pc, #64]	; (dae8 <color+0x84>)
    daa6:	e7ef      	b.n	da88 <color+0x24>
        case 8: printk("\033[90m");       // Cinza claro
    daa8:	4810      	ldr	r0, [pc, #64]	; (daec <color+0x88>)
    daaa:	e7ed      	b.n	da88 <color+0x24>
        case 9: printk("\033[91m");       // Vermelho claro
    daac:	4810      	ldr	r0, [pc, #64]	; (daf0 <color+0x8c>)
    daae:	e7eb      	b.n	da88 <color+0x24>
        case 10: printk("\033[92m");      // Verde claro
    dab0:	4810      	ldr	r0, [pc, #64]	; (daf4 <color+0x90>)
    dab2:	e7e9      	b.n	da88 <color+0x24>
        case 11: printk("\033[93m");      // Amarelo claro
    dab4:	4810      	ldr	r0, [pc, #64]	; (daf8 <color+0x94>)
    dab6:	e7e7      	b.n	da88 <color+0x24>
        case 12: printk("\033[94m");      // Azul claro
    dab8:	4810      	ldr	r0, [pc, #64]	; (dafc <color+0x98>)
    daba:	e7e5      	b.n	da88 <color+0x24>
        case 13: printk("\033[95m");      // Magenta claro
    dabc:	4810      	ldr	r0, [pc, #64]	; (db00 <color+0x9c>)
    dabe:	e7e3      	b.n	da88 <color+0x24>
        case 14: printk("\033[96m");      // Ciano claro
    dac0:	4810      	ldr	r0, [pc, #64]	; (db04 <color+0xa0>)
    dac2:	e7e1      	b.n	da88 <color+0x24>
        case 15: printk("\033[97m");      // Branco claro
    dac4:	4810      	ldr	r0, [pc, #64]	; (db08 <color+0xa4>)
    dac6:	e7df      	b.n	da88 <color+0x24>
                break;
    }
}
    dac8:	4770      	bx	lr
    daca:	bf00      	nop
    dacc:	00034bf1 	.word	0x00034bf1
    dad0:	00034edc 	.word	0x00034edc
    dad4:	00034c15 	.word	0x00034c15
    dad8:	00034ee2 	.word	0x00034ee2
    dadc:	00034ee8 	.word	0x00034ee8
    dae0:	00034eee 	.word	0x00034eee
    dae4:	00034bab 	.word	0x00034bab
    dae8:	00034ef4 	.word	0x00034ef4
    daec:	00034efa 	.word	0x00034efa
    daf0:	00034f00 	.word	0x00034f00
    daf4:	00034da9 	.word	0x00034da9
    daf8:	00034f06 	.word	0x00034f06
    dafc:	00034d8c 	.word	0x00034d8c
    db00:	00034bf6 	.word	0x00034bf6
    db04:	00034f0c 	.word	0x00034f0c
    db08:	00034f12 	.word	0x00034f12

0000db0c <cmd_interpreter>:

void cmd_interpreter(uint8_t *data,uint8_t len){
    db0c:	b510      	push	{r4, lr}
    db0e:	4604      	mov	r4, r0
        case 4: printk("\033[34m");       // Azul
    db10:	4822      	ldr	r0, [pc, #136]	; (db9c <cmd_interpreter+0x90>)
    db12:	f01c fb2b 	bl	2a16c <printk>
  color(4);
  	switch(data[0]){
    db16:	7823      	ldrb	r3, [r4, #0]
    db18:	3b50      	subs	r3, #80	; 0x50
    db1a:	2b08      	cmp	r3, #8
    db1c:	d812      	bhi.n	db44 <cmd_interpreter+0x38>
    db1e:	e8df f003 	tbb	[pc, r3]
    db22:	3931      	.short	0x3931
    db24:	11111126 	.word	0x11111126
    db28:	1605      	.short	0x1605
    db2a:	1e          	.byte	0x1e
    db2b:	00          	.byte	0x00
        case 1: printk("\033[31m");       // Vermelho
    db2c:	481c      	ldr	r0, [pc, #112]	; (dba0 <cmd_interpreter+0x94>)
    db2e:	f01c fb1d 	bl	2a16c <printk>
			case CMD_RESET_ALARM_FLAG: //RESET ALARM SIGNAL
			   color(1);
         sensor_status.number[SENSOR_DIG_4]=0;
    db32:	2200      	movs	r2, #0
    db34:	4b1b      	ldr	r3, [pc, #108]	; (dba4 <cmd_interpreter+0x98>)
         Initial_Setup.interval_uplink=LORAWAN_INTERVAL;
			   printk("ALARM FLAG RESET 4\n");
    db36:	481c      	ldr	r0, [pc, #112]	; (dba8 <cmd_interpreter+0x9c>)
         sensor_status.number[SENSOR_DIG_4]=0;
    db38:	711a      	strb	r2, [r3, #4]
         Initial_Setup.interval_uplink=LORAWAN_INTERVAL;
    db3a:	2206      	movs	r2, #6
    db3c:	4b1b      	ldr	r3, [pc, #108]	; (dbac <cmd_interpreter+0xa0>)
    db3e:	805a      	strh	r2, [r3, #2]
			break;
			case CMD_LED4_ON: // TURN ON LED 4
			   color(1);
			   gpio_pin_set_dt(LED4, ON);
			   printk("TURNED ON LED 4\n");
    db40:	f01c fb14 	bl	2a16c <printk>
		}
       color(0);
      
	 

    db44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case 0: printk("\033[0m");        // Preto
    db48:	4819      	ldr	r0, [pc, #100]	; (dbb0 <cmd_interpreter+0xa4>)
    db4a:	f01c bb0f 	b.w	2a16c <printk>
        case 1: printk("\033[31m");       // Vermelho
    db4e:	4814      	ldr	r0, [pc, #80]	; (dba0 <cmd_interpreter+0x94>)
    db50:	f01c fb0c 	bl	2a16c <printk>
			   gpio_pin_set_dt(LED4, ON);
    db54:	2001      	movs	r0, #1
    db56:	f7ff f99d 	bl	ce94 <gpio_pin_set_dt.constprop.0.isra.0>
			   printk("TURNED ON LED 4\n");
    db5a:	4816      	ldr	r0, [pc, #88]	; (dbb4 <cmd_interpreter+0xa8>)
    db5c:	e7f0      	b.n	db40 <cmd_interpreter+0x34>
        case 1: printk("\033[31m");       // Vermelho
    db5e:	4810      	ldr	r0, [pc, #64]	; (dba0 <cmd_interpreter+0x94>)
    db60:	f01c fb04 	bl	2a16c <printk>
			   gpio_pin_set_dt(LED4, OFF);
    db64:	2000      	movs	r0, #0
    db66:	f7ff f995 	bl	ce94 <gpio_pin_set_dt.constprop.0.isra.0>
			   printk("TURNED OFF LED 4\n");
    db6a:	4813      	ldr	r0, [pc, #76]	; (dbb8 <cmd_interpreter+0xac>)
    db6c:	e7e8      	b.n	db40 <cmd_interpreter+0x34>
        case 2: printk("\033[32m");       // Verde
    db6e:	4813      	ldr	r0, [pc, #76]	; (dbbc <cmd_interpreter+0xb0>)
    db70:	f01c fafc 	bl	2a16c <printk>
			    setup_initialize();
    db74:	f7ff fecc 	bl	d910 <setup_initialize>
				flash_write_setup();
    db78:	f7ff f9c4 	bl	cf04 <flash_write_setup>
				print_setup();
    db7c:	f7ff ff1e 	bl	d9bc <print_setup>
				printk("Setup Reset\n");
    db80:	480f      	ldr	r0, [pc, #60]	; (dbc0 <cmd_interpreter+0xb4>)
    db82:	e7dd      	b.n	db40 <cmd_interpreter+0x34>
        case 3: printk("\033[33m");       // Amarelo
    db84:	480f      	ldr	r0, [pc, #60]	; (dbc4 <cmd_interpreter+0xb8>)
    db86:	f01c faf1 	bl	2a16c <printk>
			     flash_read_setup();
    db8a:	f7ff f9c5 	bl	cf18 <flash_read_setup>
			     print_setup();
    db8e:	f7ff ff15 	bl	d9bc <print_setup>
			break;
    db92:	e7d7      	b.n	db44 <cmd_interpreter+0x38>
        case 3: printk("\033[33m");       // Amarelo
    db94:	480b      	ldr	r0, [pc, #44]	; (dbc4 <cmd_interpreter+0xb8>)
    db96:	f01c fae9 	bl	2a16c <printk>
    db9a:	e7f8      	b.n	db8e <cmd_interpreter+0x82>
    db9c:	00034ee8 	.word	0x00034ee8
    dba0:	00034edc 	.word	0x00034edc
    dba4:	20031016 	.word	0x20031016
    dba8:	00034f18 	.word	0x00034f18
    dbac:	20030de4 	.word	0x20030de4
    dbb0:	00034bf1 	.word	0x00034bf1
    dbb4:	00034f2c 	.word	0x00034f2c
    dbb8:	00034f3d 	.word	0x00034f3d
    dbbc:	00034c15 	.word	0x00034c15
    dbc0:	00034f4f 	.word	0x00034f4f
    dbc4:	00034ee2 	.word	0x00034ee2

0000dbc8 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    dbc8:	b500      	push	{lr}
    pb_type_t type = field->type;
    dbca:	7d83      	ldrb	r3, [r0, #22]
{
    dbcc:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    dbce:	2b3f      	cmp	r3, #63	; 0x3f
{
    dbd0:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    dbd2:	d849      	bhi.n	dc68 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    dbd4:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    dbd8:	d01c      	beq.n	dc14 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    dbda:	2820      	cmp	r0, #32
    dbdc:	d102      	bne.n	dbe4 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    dbde:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    dbe0:	8818      	ldrh	r0, [r3, #0]
    dbe2:	e006      	b.n	dbf2 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    dbe4:	2830      	cmp	r0, #48	; 0x30
    dbe6:	d0fa      	beq.n	dbde <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    dbe8:	2810      	cmp	r0, #16
    dbea:	d106      	bne.n	dbfa <pb_check_proto3_default_value+0x32>
    dbec:	6a0a      	ldr	r2, [r1, #32]
    dbee:	b122      	cbz	r2, dbfa <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    dbf0:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    dbf2:	fab0 f080 	clz	r0, r0
    dbf6:	0940      	lsrs	r0, r0, #5
    dbf8:	e00c      	b.n	dc14 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    dbfa:	680a      	ldr	r2, [r1, #0]
    dbfc:	6890      	ldr	r0, [r2, #8]
    dbfe:	b980      	cbnz	r0, dc22 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    dc00:	f003 020f 	and.w	r2, r3, #15
    dc04:	2a05      	cmp	r2, #5
    dc06:	d80e      	bhi.n	dc26 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    dc08:	69cb      	ldr	r3, [r1, #28]
    dc0a:	8a4a      	ldrh	r2, [r1, #18]
    dc0c:	441a      	add	r2, r3
    dc0e:	4293      	cmp	r3, r2
    dc10:	d103      	bne.n	dc1a <pb_check_proto3_default_value+0x52>
            return true;
    dc12:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    dc14:	b00b      	add	sp, #44	; 0x2c
    dc16:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    dc1a:	f813 1b01 	ldrb.w	r1, [r3], #1
    dc1e:	2900      	cmp	r1, #0
    dc20:	d0f5      	beq.n	dc0e <pb_check_proto3_default_value+0x46>
            return false;
    dc22:	2000      	movs	r0, #0
    dc24:	e7f6      	b.n	dc14 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    dc26:	2a06      	cmp	r2, #6
    dc28:	d101      	bne.n	dc2e <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    dc2a:	69cb      	ldr	r3, [r1, #28]
    dc2c:	e7d8      	b.n	dbe0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    dc2e:	2a07      	cmp	r2, #7
    dc30:	d102      	bne.n	dc38 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    dc32:	69cb      	ldr	r3, [r1, #28]
    dc34:	7818      	ldrb	r0, [r3, #0]
    dc36:	e7dc      	b.n	dbf2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    dc38:	2a0b      	cmp	r2, #11
    dc3a:	d101      	bne.n	dc40 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    dc3c:	8a48      	ldrh	r0, [r1, #18]
    dc3e:	e7d8      	b.n	dbf2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    dc40:	f003 030e 	and.w	r3, r3, #14
    dc44:	2b08      	cmp	r3, #8
    dc46:	d1e5      	bne.n	dc14 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    dc48:	69ca      	ldr	r2, [r1, #28]
    dc4a:	4668      	mov	r0, sp
    dc4c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    dc4e:	f01c f990 	bl	29f72 <pb_field_iter_begin>
    dc52:	2800      	cmp	r0, #0
    dc54:	d0dd      	beq.n	dc12 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    dc56:	4668      	mov	r0, sp
    dc58:	f7ff ffb6 	bl	dbc8 <pb_check_proto3_default_value>
    dc5c:	2800      	cmp	r0, #0
    dc5e:	d0d9      	beq.n	dc14 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    dc60:	4668      	mov	r0, sp
    dc62:	f01c f9a9 	bl	29fb8 <pb_field_iter_next>
    dc66:	e7f4      	b.n	dc52 <pb_check_proto3_default_value+0x8a>
    dc68:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    dc6c:	2a80      	cmp	r2, #128	; 0x80
    dc6e:	d101      	bne.n	dc74 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    dc70:	69c0      	ldr	r0, [r0, #28]
    dc72:	e7be      	b.n	dbf2 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    dc74:	2a40      	cmp	r2, #64	; 0x40
    dc76:	d1d4      	bne.n	dc22 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    dc78:	f003 030f 	and.w	r3, r3, #15
    dc7c:	2b0a      	cmp	r3, #10
    dc7e:	d102      	bne.n	dc86 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    dc80:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    dc82:	6818      	ldr	r0, [r3, #0]
    dc84:	e7b5      	b.n	dbf2 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    dc86:	6803      	ldr	r3, [r0, #0]
    dc88:	4a02      	ldr	r2, [pc, #8]	; (dc94 <pb_check_proto3_default_value+0xcc>)
    dc8a:	68d8      	ldr	r0, [r3, #12]
    dc8c:	4290      	cmp	r0, r2
    dc8e:	d1b0      	bne.n	dbf2 <pb_check_proto3_default_value+0x2a>
    dc90:	e7f6      	b.n	dc80 <pb_check_proto3_default_value+0xb8>
    dc92:	bf00      	nop
    dc94:	00029fd7 	.word	0x00029fd7

0000dc98 <pb_ostream_from_buffer>:
    return stream;
    dc98:	6082      	str	r2, [r0, #8]
    dc9a:	2200      	movs	r2, #0
{
    dc9c:	b510      	push	{r4, lr}
    return stream;
    dc9e:	4c03      	ldr	r4, [pc, #12]	; (dcac <pb_ostream_from_buffer+0x14>)
    dca0:	e9c0 2203 	strd	r2, r2, [r0, #12]
    dca4:	e9c0 4100 	strd	r4, r1, [r0]
}
    dca8:	bd10      	pop	{r4, pc}
    dcaa:	bf00      	nop
    dcac:	0002a007 	.word	0x0002a007

0000dcb0 <pb_write>:
{
    dcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcb2:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    dcb4:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    dcb6:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    dcb8:	b19a      	cbz	r2, dce2 <pb_write+0x32>
    dcba:	6806      	ldr	r6, [r0, #0]
    dcbc:	b18e      	cbz	r6, dce2 <pb_write+0x32>
    dcbe:	18d3      	adds	r3, r2, r3
    dcc0:	d202      	bcs.n	dcc8 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    dcc2:	6887      	ldr	r7, [r0, #8]
    dcc4:	429f      	cmp	r7, r3
    dcc6:	d207      	bcs.n	dcd8 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    dcc8:	6923      	ldr	r3, [r4, #16]
    dcca:	4a08      	ldr	r2, [pc, #32]	; (dcec <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    dccc:	2b00      	cmp	r3, #0
    dcce:	bf08      	it	eq
    dcd0:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    dcd2:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    dcd4:	6123      	str	r3, [r4, #16]
}
    dcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    dcd8:	47b0      	blx	r6
    dcda:	b910      	cbnz	r0, dce2 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    dcdc:	6923      	ldr	r3, [r4, #16]
    dcde:	4a04      	ldr	r2, [pc, #16]	; (dcf0 <pb_write+0x40>)
    dce0:	e7f4      	b.n	dccc <pb_write+0x1c>
    stream->bytes_written += count;
    dce2:	68e3      	ldr	r3, [r4, #12]
    return true;
    dce4:	2001      	movs	r0, #1
    stream->bytes_written += count;
    dce6:	442b      	add	r3, r5
    dce8:	60e3      	str	r3, [r4, #12]
    return true;
    dcea:	e7f4      	b.n	dcd6 <pb_write+0x26>
    dcec:	00034f5c 	.word	0x00034f5c
    dcf0:	00034f68 	.word	0x00034f68

0000dcf4 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    dcf4:	b410      	push	{r4}
    dcf6:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    dcf8:	8a4b      	ldrh	r3, [r1, #18]
    dcfa:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    dcfe:	2c02      	cmp	r4, #2
    dd00:	d117      	bne.n	dd32 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    dd02:	2b01      	cmp	r3, #1
    dd04:	d105      	bne.n	dd12 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    dd06:	69cb      	ldr	r3, [r1, #28]
    dd08:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    dd0a:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    dd0c:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    dd0e:	f01c b983 	b.w	2a018 <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    dd12:	2b02      	cmp	r3, #2
    dd14:	d102      	bne.n	dd1c <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    dd16:	69cb      	ldr	r3, [r1, #28]
    dd18:	881a      	ldrh	r2, [r3, #0]
    dd1a:	e7f6      	b.n	dd0a <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    dd1c:	2b04      	cmp	r3, #4
    dd1e:	d102      	bne.n	dd26 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    dd20:	69cb      	ldr	r3, [r1, #28]
    dd22:	681a      	ldr	r2, [r3, #0]
    dd24:	e7f1      	b.n	dd0a <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    dd26:	2b08      	cmp	r3, #8
    dd28:	d11f      	bne.n	dd6a <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    dd2a:	69cb      	ldr	r3, [r1, #28]
    dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd30:	e7ec      	b.n	dd0c <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    dd32:	2b01      	cmp	r3, #1
    dd34:	d108      	bne.n	dd48 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    dd36:	69cb      	ldr	r3, [r1, #28]
    dd38:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    dd3c:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    dd3e:	2c03      	cmp	r4, #3
    dd40:	d1e4      	bne.n	dd0c <pb_enc_varint+0x18>
}
    dd42:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    dd44:	f01c b9a7 	b.w	2a096 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    dd48:	2b02      	cmp	r3, #2
    dd4a:	d103      	bne.n	dd54 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    dd4c:	69cb      	ldr	r3, [r1, #28]
    dd4e:	f9b3 2000 	ldrsh.w	r2, [r3]
    dd52:	e7f3      	b.n	dd3c <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    dd54:	2b04      	cmp	r3, #4
    dd56:	d102      	bne.n	dd5e <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    dd58:	69cb      	ldr	r3, [r1, #28]
    dd5a:	681a      	ldr	r2, [r3, #0]
    dd5c:	e7ee      	b.n	dd3c <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    dd5e:	2b08      	cmp	r3, #8
    dd60:	d103      	bne.n	dd6a <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    dd62:	69cb      	ldr	r3, [r1, #28]
    dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd68:	e7e9      	b.n	dd3e <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    dd6a:	6903      	ldr	r3, [r0, #16]
    dd6c:	4a03      	ldr	r2, [pc, #12]	; (dd7c <pb_enc_varint+0x88>)
    dd6e:	2b00      	cmp	r3, #0
    dd70:	bf08      	it	eq
    dd72:	4613      	moveq	r3, r2
    dd74:	6103      	str	r3, [r0, #16]
}
    dd76:	bc10      	pop	{r4}
    dd78:	2000      	movs	r0, #0
    dd7a:	4770      	bx	lr
    dd7c:	00034f71 	.word	0x00034f71

0000dd80 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    dd80:	8a4a      	ldrh	r2, [r1, #18]
    dd82:	2a04      	cmp	r2, #4
    dd84:	d102      	bne.n	dd8c <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    dd86:	69c9      	ldr	r1, [r1, #28]
    dd88:	f01c b98e 	b.w	2a0a8 <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    dd8c:	2a08      	cmp	r2, #8
    dd8e:	d102      	bne.n	dd96 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    dd90:	69c9      	ldr	r1, [r1, #28]
    dd92:	f01c b98c 	b.w	2a0ae <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    dd96:	6902      	ldr	r2, [r0, #16]
    dd98:	4903      	ldr	r1, [pc, #12]	; (dda8 <pb_enc_fixed+0x28>)
    dd9a:	2a00      	cmp	r2, #0
    dd9c:	bf08      	it	eq
    dd9e:	460a      	moveq	r2, r1
    dda0:	6102      	str	r2, [r0, #16]
    }
}
    dda2:	2000      	movs	r0, #0
    dda4:	4770      	bx	lr
    dda6:	bf00      	nop
    dda8:	00034f71 	.word	0x00034f71

0000ddac <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    ddac:	7d8a      	ldrb	r2, [r1, #22]
{
    ddae:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    ddb0:	f002 020f 	and.w	r2, r2, #15
    ddb4:	2a0b      	cmp	r2, #11
    ddb6:	d811      	bhi.n	dddc <pb_encode_tag_for_field+0x30>
    ddb8:	e8df f002 	tbb	[pc, r2]
    ddbc:	0c0c0c0c 	.word	0x0c0c0c0c
    ddc0:	0a0a060e 	.word	0x0a0a060e
    ddc4:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    ddc8:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    ddca:	8a1a      	ldrh	r2, [r3, #16]
    ddcc:	f01c b972 	b.w	2a0b4 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    ddd0:	2102      	movs	r1, #2
            break;
    ddd2:	e7fa      	b.n	ddca <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    ddd4:	2100      	movs	r1, #0
    ddd6:	e7f8      	b.n	ddca <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    ddd8:	2105      	movs	r1, #5
    ddda:	e7f6      	b.n	ddca <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    dddc:	6903      	ldr	r3, [r0, #16]
    ddde:	4a03      	ldr	r2, [pc, #12]	; (ddec <pb_encode_tag_for_field+0x40>)
    dde0:	2b00      	cmp	r3, #0
    dde2:	bf08      	it	eq
    dde4:	4613      	moveq	r3, r2
    dde6:	6103      	str	r3, [r0, #16]
}
    dde8:	2000      	movs	r0, #0
    ddea:	4770      	bx	lr
    ddec:	00034f83 	.word	0x00034f83

0000ddf0 <pb_encode_submessage>:
{
    ddf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddf4:	460e      	mov	r6, r1
    ddf6:	4617      	mov	r7, r2
    ddf8:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    ddfa:	2214      	movs	r2, #20
    ddfc:	2100      	movs	r1, #0
{
    ddfe:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    de00:	a801      	add	r0, sp, #4
    de02:	f023 fcbe 	bl	31782 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    de06:	463a      	mov	r2, r7
    de08:	4631      	mov	r1, r6
    de0a:	a801      	add	r0, sp, #4
    de0c:	f000 f9c4 	bl	e198 <pb_encode>
    de10:	b910      	cbnz	r0, de18 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    de12:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    de14:	6123      	str	r3, [r4, #16]
    de16:	e008      	b.n	de2a <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    de18:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    de1c:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    de1e:	4643      	mov	r3, r8
    de20:	462a      	mov	r2, r5
    de22:	4620      	mov	r0, r4
    de24:	f01c f8f8 	bl	2a018 <pb_encode_varint>
    de28:	b918      	cbnz	r0, de32 <pb_encode_submessage+0x42>
        return false;
    de2a:	2000      	movs	r0, #0
}
    de2c:	b006      	add	sp, #24
    de2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    de32:	6821      	ldr	r1, [r4, #0]
    de34:	b921      	cbnz	r1, de40 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    de36:	462a      	mov	r2, r5
    de38:	4620      	mov	r0, r4
    de3a:	f7ff ff39 	bl	dcb0 <pb_write>
    de3e:	e7f5      	b.n	de2c <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    de40:	68e3      	ldr	r3, [r4, #12]
    de42:	68a2      	ldr	r2, [r4, #8]
    de44:	442b      	add	r3, r5
    de46:	4293      	cmp	r3, r2
    de48:	d905      	bls.n	de56 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    de4a:	6923      	ldr	r3, [r4, #16]
    de4c:	4a0e      	ldr	r2, [pc, #56]	; (de88 <pb_encode_submessage+0x98>)
    de4e:	2b00      	cmp	r3, #0
    de50:	bf08      	it	eq
    de52:	4613      	moveq	r3, r2
    de54:	e7de      	b.n	de14 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    de56:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    de58:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    de5a:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    de5c:	a801      	add	r0, sp, #4
    de5e:	4631      	mov	r1, r6
    substream.max_size = size;
    de60:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    de64:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    de68:	f000 f996 	bl	e198 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    de6c:	9a04      	ldr	r2, [sp, #16]
    de6e:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    de70:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    de72:	4413      	add	r3, r2
    de74:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    de76:	9b02      	ldr	r3, [sp, #8]
    de78:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    de7a:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    de7c:	d101      	bne.n	de82 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    de7e:	6123      	str	r3, [r4, #16]
    de80:	e7d4      	b.n	de2c <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    de82:	4a02      	ldr	r2, [pc, #8]	; (de8c <pb_encode_submessage+0x9c>)
    de84:	e7e3      	b.n	de4e <pb_encode_submessage+0x5e>
    de86:	bf00      	nop
    de88:	00034f5c 	.word	0x00034f5c
    de8c:	00034f96 	.word	0x00034f96

0000de90 <encode_basic_field>:
{
    de90:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    de92:	69cb      	ldr	r3, [r1, #28]
{
    de94:	4604      	mov	r4, r0
    de96:	460d      	mov	r5, r1
    if (!field->pData)
    de98:	2b00      	cmp	r3, #0
    de9a:	d07f      	beq.n	df9c <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    de9c:	f7ff ff86 	bl	ddac <pb_encode_tag_for_field>
    dea0:	2800      	cmp	r0, #0
    dea2:	d073      	beq.n	df8c <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    dea4:	7da8      	ldrb	r0, [r5, #22]
    dea6:	f000 030f 	and.w	r3, r0, #15
    deaa:	2b0b      	cmp	r3, #11
    deac:	d873      	bhi.n	df96 <encode_basic_field+0x106>
    deae:	e8df f003 	tbb	[pc, r3]
    deb2:	1106      	.short	0x1106
    deb4:	17171111 	.word	0x17171111
    deb8:	5252351d 	.word	0x5252351d
    debc:	6f72      	.short	0x6f72
        if (p[i] != 0)
    debe:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    dec0:	4620      	mov	r0, r4
}
    dec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    dec6:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    dec8:	2300      	movs	r3, #0
    deca:	3a00      	subs	r2, #0
    decc:	bf18      	it	ne
    dece:	2201      	movne	r2, #1
    ded0:	f01c b8a2 	b.w	2a018 <pb_encode_varint>
            return pb_enc_varint(stream, field);
    ded4:	4629      	mov	r1, r5
    ded6:	4620      	mov	r0, r4
}
    ded8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    dedc:	f7ff bf0a 	b.w	dcf4 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    dee0:	4629      	mov	r1, r5
    dee2:	4620      	mov	r0, r4
}
    dee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    dee8:	f7ff bf4a 	b.w	dd80 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    deec:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    deee:	b909      	cbnz	r1, def4 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    def0:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    def2:	e00e      	b.n	df12 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    def4:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    def6:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    def8:	d80a      	bhi.n	df10 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    defa:	8a6b      	ldrh	r3, [r5, #18]
    defc:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    defe:	4293      	cmp	r3, r2
    df00:	d206      	bcs.n	df10 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    df02:	6923      	ldr	r3, [r4, #16]
    df04:	4a26      	ldr	r2, [pc, #152]	; (dfa0 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    df06:	2b00      	cmp	r3, #0
    df08:	bf08      	it	eq
    df0a:	4613      	moveq	r3, r2
    df0c:	6123      	str	r3, [r4, #16]
    df0e:	e03d      	b.n	df8c <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    df10:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    df12:	4620      	mov	r0, r4
}
    df14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    df18:	f01c b8d2 	b.w	2a0c0 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    df1c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    df20:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    df22:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    df24:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    df26:	d00e      	beq.n	df46 <encode_basic_field+0xb6>
        if (max_size == 0)
    df28:	b913      	cbnz	r3, df30 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    df2a:	6923      	ldr	r3, [r4, #16]
    df2c:	4a1d      	ldr	r2, [pc, #116]	; (dfa4 <encode_basic_field+0x114>)
    df2e:	e7ea      	b.n	df06 <encode_basic_field+0x76>
        max_size -= 1;
    df30:	3b01      	subs	r3, #1
    if (str == NULL)
    df32:	2900      	cmp	r1, #0
    df34:	d0dc      	beq.n	def0 <encode_basic_field+0x60>
    size_t size = 0;
    df36:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    df38:	429a      	cmp	r2, r3
    df3a:	5c88      	ldrb	r0, [r1, r2]
    df3c:	d006      	beq.n	df4c <encode_basic_field+0xbc>
    df3e:	2800      	cmp	r0, #0
    df40:	d0e7      	beq.n	df12 <encode_basic_field+0x82>
            size++;
    df42:	3201      	adds	r2, #1
            p++;
    df44:	e7f8      	b.n	df38 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    df46:	f04f 33ff 	mov.w	r3, #4294967295
    df4a:	e7f2      	b.n	df32 <encode_basic_field+0xa2>
        if (*p != '\0')
    df4c:	2800      	cmp	r0, #0
    df4e:	d0e0      	beq.n	df12 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    df50:	6923      	ldr	r3, [r4, #16]
    df52:	4a15      	ldr	r2, [pc, #84]	; (dfa8 <encode_basic_field+0x118>)
    df54:	e7d7      	b.n	df06 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    df56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    df58:	b912      	cbnz	r2, df60 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    df5a:	6923      	ldr	r3, [r4, #16]
    df5c:	4a13      	ldr	r2, [pc, #76]	; (dfac <encode_basic_field+0x11c>)
    df5e:	e7d2      	b.n	df06 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    df60:	2b09      	cmp	r3, #9
    df62:	d006      	beq.n	df72 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    df64:	4620      	mov	r0, r4
    df66:	69ea      	ldr	r2, [r5, #28]
    df68:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    df6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    df6e:	f7ff bf3f 	b.w	ddf0 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    df72:	6a2a      	ldr	r2, [r5, #32]
    df74:	2a00      	cmp	r2, #0
    df76:	d0f5      	beq.n	df64 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    df78:	f852 3c08 	ldr.w	r3, [r2, #-8]
    df7c:	2b00      	cmp	r3, #0
    df7e:	d0f1      	beq.n	df64 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    df80:	4629      	mov	r1, r5
    df82:	4620      	mov	r0, r4
    df84:	3a04      	subs	r2, #4
    df86:	4798      	blx	r3
    df88:	2800      	cmp	r0, #0
    df8a:	d1eb      	bne.n	df64 <encode_basic_field+0xd4>
        return false;
    df8c:	2000      	movs	r0, #0
}
    df8e:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    df90:	8a6a      	ldrh	r2, [r5, #18]
    df92:	69e9      	ldr	r1, [r5, #28]
    df94:	e7bd      	b.n	df12 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    df96:	6923      	ldr	r3, [r4, #16]
    df98:	4a05      	ldr	r2, [pc, #20]	; (dfb0 <encode_basic_field+0x120>)
    df9a:	e7b4      	b.n	df06 <encode_basic_field+0x76>
        return true;
    df9c:	2001      	movs	r0, #1
    df9e:	e7f6      	b.n	df8e <encode_basic_field+0xfe>
    dfa0:	00034faa 	.word	0x00034faa
    dfa4:	00034fbe 	.word	0x00034fbe
    dfa8:	00034fd1 	.word	0x00034fd1
    dfac:	00034fe5 	.word	0x00034fe5
    dfb0:	00034f83 	.word	0x00034f83

0000dfb4 <encode_field>:
{
    dfb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    dfb8:	7d8b      	ldrb	r3, [r1, #22]
{
    dfba:	4605      	mov	r5, r0
    dfbc:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    dfc0:	2a30      	cmp	r2, #48	; 0x30
{
    dfc2:	460c      	mov	r4, r1
    dfc4:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    dfc6:	d112      	bne.n	dfee <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    dfc8:	6a0b      	ldr	r3, [r1, #32]
    dfca:	881a      	ldrh	r2, [r3, #0]
    dfcc:	8a0b      	ldrh	r3, [r1, #16]
    dfce:	429a      	cmp	r2, r3
    dfd0:	d114      	bne.n	dffc <encode_field+0x48>
    if (!field->pData)
    dfd2:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    dfd4:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    dfd6:	b9ea      	cbnz	r2, e014 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    dfd8:	f013 0f30 	tst.w	r3, #48	; 0x30
    dfdc:	d10e      	bne.n	dffc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    dfde:	692b      	ldr	r3, [r5, #16]
    dfe0:	4a69      	ldr	r2, [pc, #420]	; (e188 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	bf08      	it	eq
    dfe6:	4613      	moveq	r3, r2
    dfe8:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    dfea:	2000      	movs	r0, #0
    dfec:	e007      	b.n	dffe <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    dfee:	2a10      	cmp	r2, #16
    dff0:	d1ef      	bne.n	dfd2 <encode_field+0x1e>
        if (field->pSize)
    dff2:	6a0a      	ldr	r2, [r1, #32]
    dff4:	b132      	cbz	r2, e004 <encode_field+0x50>
        if (p[i] != 0)
    dff6:	7813      	ldrb	r3, [r2, #0]
    dff8:	2b00      	cmp	r3, #0
    dffa:	d1ea      	bne.n	dfd2 <encode_field+0x1e>
            return true;
    dffc:	2001      	movs	r0, #1
}
    dffe:	b007      	add	sp, #28
    e000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    e004:	2b3f      	cmp	r3, #63	; 0x3f
    e006:	d8e4      	bhi.n	dfd2 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    e008:	4608      	mov	r0, r1
    e00a:	f7ff fddd 	bl	dbc8 <pb_check_proto3_default_value>
    e00e:	2800      	cmp	r0, #0
    e010:	d0df      	beq.n	dfd2 <encode_field+0x1e>
    e012:	e7f3      	b.n	dffc <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    e014:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    e018:	2a40      	cmp	r2, #64	; 0x40
    e01a:	d10c      	bne.n	e036 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    e01c:	6823      	ldr	r3, [r4, #0]
    e01e:	68db      	ldr	r3, [r3, #12]
    e020:	2b00      	cmp	r3, #0
    e022:	d0eb      	beq.n	dffc <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    e024:	4622      	mov	r2, r4
    e026:	4629      	mov	r1, r5
    e028:	2000      	movs	r0, #0
    e02a:	4798      	blx	r3
    e02c:	2800      	cmp	r0, #0
    e02e:	d1e5      	bne.n	dffc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    e030:	692b      	ldr	r3, [r5, #16]
    e032:	4a56      	ldr	r2, [pc, #344]	; (e18c <encode_field+0x1d8>)
    e034:	e7d5      	b.n	dfe2 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    e036:	f003 0130 	and.w	r1, r3, #48	; 0x30
    e03a:	2920      	cmp	r1, #32
    e03c:	f040 809d 	bne.w	e17a <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    e040:	6a21      	ldr	r1, [r4, #32]
    e042:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    e044:	2e00      	cmp	r6, #0
    e046:	d0d9      	beq.n	dffc <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    e048:	2a80      	cmp	r2, #128	; 0x80
    e04a:	d120      	bne.n	e08e <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    e04c:	f003 030f 	and.w	r3, r3, #15
    e050:	2b05      	cmp	r3, #5
    e052:	d85e      	bhi.n	e112 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    e054:	2102      	movs	r1, #2
    e056:	4628      	mov	r0, r5
    e058:	8a22      	ldrh	r2, [r4, #16]
    e05a:	f01c f82b 	bl	2a0b4 <pb_encode_tag>
    e05e:	2800      	cmp	r0, #0
    e060:	d0c3      	beq.n	dfea <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    e062:	7da3      	ldrb	r3, [r4, #22]
    e064:	f003 030f 	and.w	r3, r3, #15
    e068:	2b04      	cmp	r3, #4
    e06a:	d116      	bne.n	e09a <encode_field+0xe6>
            size = 4 * (size_t)count;
    e06c:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    e06e:	463a      	mov	r2, r7
    e070:	2300      	movs	r3, #0
    e072:	4628      	mov	r0, r5
    e074:	f01b ffd0 	bl	2a018 <pb_encode_varint>
    e078:	2800      	cmp	r0, #0
    e07a:	d0b6      	beq.n	dfea <encode_field+0x36>
        if (stream->callback == NULL)
    e07c:	6829      	ldr	r1, [r5, #0]
    e07e:	bb79      	cbnz	r1, e0e0 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    e080:	463a      	mov	r2, r7
    e082:	4628      	mov	r0, r5
}
    e084:	b007      	add	sp, #28
    e086:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    e08a:	f7ff be11 	b.w	dcb0 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    e08e:	8aa2      	ldrh	r2, [r4, #20]
    e090:	42b2      	cmp	r2, r6
    e092:	d2db      	bcs.n	e04c <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    e094:	692b      	ldr	r3, [r5, #16]
    e096:	4a3e      	ldr	r2, [pc, #248]	; (e190 <encode_field+0x1dc>)
    e098:	e7a3      	b.n	dfe2 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e09a:	2b05      	cmp	r3, #5
    e09c:	d101      	bne.n	e0a2 <encode_field+0xee>
            size = 8 * (size_t)count;
    e09e:	00f7      	lsls	r7, r6, #3
    e0a0:	e7e5      	b.n	e06e <encode_field+0xba>
            void *pData_orig = field->pData;
    e0a2:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    e0a4:	2214      	movs	r2, #20
    e0a6:	2100      	movs	r1, #0
    e0a8:	a801      	add	r0, sp, #4
    e0aa:	f023 fb6a 	bl	31782 <memset>
            void *pData_orig = field->pData;
    e0ae:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    e0b2:	4621      	mov	r1, r4
    e0b4:	a801      	add	r0, sp, #4
    e0b6:	f7ff fe1d 	bl	dcf4 <pb_enc_varint>
    e0ba:	b928      	cbnz	r0, e0c8 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    e0bc:	692b      	ldr	r3, [r5, #16]
    e0be:	2b00      	cmp	r3, #0
    e0c0:	d192      	bne.n	dfe8 <encode_field+0x34>
    e0c2:	9b05      	ldr	r3, [sp, #20]
    e0c4:	4a33      	ldr	r2, [pc, #204]	; (e194 <encode_field+0x1e0>)
    e0c6:	e78c      	b.n	dfe2 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    e0c8:	69e3      	ldr	r3, [r4, #28]
    e0ca:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    e0cc:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    e0ce:	4413      	add	r3, r2
    e0d0:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    e0d2:	b2bb      	uxth	r3, r7
    e0d4:	429e      	cmp	r6, r3
    e0d6:	d8ec      	bhi.n	e0b2 <encode_field+0xfe>
            size = sizestream.bytes_written;
    e0d8:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    e0da:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    e0de:	e7c6      	b.n	e06e <encode_field+0xba>
    e0e0:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e0e2:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    e0e4:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e0e6:	f003 030e 	and.w	r3, r3, #14
    e0ea:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    e0ec:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e0ee:	d10d      	bne.n	e10c <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    e0f0:	f7ff fe46 	bl	dd80 <pb_enc_fixed>
    e0f4:	2800      	cmp	r0, #0
    e0f6:	f43f af78 	beq.w	dfea <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    e0fa:	69e3      	ldr	r3, [r4, #28]
    e0fc:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    e0fe:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    e100:	4413      	add	r3, r2
    e102:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    e104:	b2bb      	uxth	r3, r7
    e106:	429e      	cmp	r6, r3
    e108:	d8eb      	bhi.n	e0e2 <encode_field+0x12e>
    e10a:	e777      	b.n	dffc <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    e10c:	f7ff fdf2 	bl	dcf4 <pb_enc_varint>
    e110:	e7f0      	b.n	e0f4 <encode_field+0x140>
    e112:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    e116:	7da3      	ldrb	r3, [r4, #22]
    e118:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    e11c:	2b86      	cmp	r3, #134	; 0x86
    e11e:	d127      	bne.n	e170 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    e120:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    e122:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    e124:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    e128:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    e12a:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    e12e:	f1b9 0f00 	cmp.w	r9, #0
    e132:	d11a      	bne.n	e16a <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    e134:	f7ff fe3a 	bl	ddac <pb_encode_tag_for_field>
    e138:	b908      	cbnz	r0, e13e <encode_field+0x18a>
                field->pData = pData_orig;
    e13a:	61e7      	str	r7, [r4, #28]
                if (!status)
    e13c:	e755      	b.n	dfea <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    e13e:	2201      	movs	r2, #1
    e140:	4628      	mov	r0, r5
    e142:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    e144:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    e148:	f7ff fdb2 	bl	dcb0 <pb_write>
                field->pData = pData_orig;
    e14c:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    e14e:	2800      	cmp	r0, #0
    e150:	f43f af4b 	beq.w	dfea <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    e154:	69e3      	ldr	r3, [r4, #28]
    e156:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    e158:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    e15c:	4413      	add	r3, r2
    e15e:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    e160:	fa1f f388 	uxth.w	r3, r8
    e164:	429e      	cmp	r6, r3
    e166:	d8d6      	bhi.n	e116 <encode_field+0x162>
    e168:	e748      	b.n	dffc <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    e16a:	f7ff fe91 	bl	de90 <encode_basic_field>
    e16e:	e7ed      	b.n	e14c <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    e170:	4621      	mov	r1, r4
    e172:	4628      	mov	r0, r5
    e174:	f7ff fe8c 	bl	de90 <encode_basic_field>
    e178:	e7e9      	b.n	e14e <encode_field+0x19a>
        return encode_basic_field(stream, field);
    e17a:	4621      	mov	r1, r4
    e17c:	4628      	mov	r0, r5
}
    e17e:	b007      	add	sp, #28
    e180:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    e184:	f7ff be84 	b.w	de90 <encode_basic_field>
    e188:	00034ffe 	.word	0x00034ffe
    e18c:	00035015 	.word	0x00035015
    e190:	00035024 	.word	0x00035024
    e194:	0003503c 	.word	0x0003503c

0000e198 <pb_encode>:
{
    e198:	b530      	push	{r4, r5, lr}
    e19a:	b095      	sub	sp, #84	; 0x54
    e19c:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    e19e:	4668      	mov	r0, sp
    e1a0:	f01b ff15 	bl	29fce <pb_field_iter_begin_const>
    e1a4:	b370      	cbz	r0, e204 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    e1a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e1aa:	f003 030f 	and.w	r3, r3, #15
    e1ae:	2b0a      	cmp	r3, #10
    e1b0:	d121      	bne.n	e1f6 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    e1b2:	9b07      	ldr	r3, [sp, #28]
    e1b4:	681d      	ldr	r5, [r3, #0]
    while (extension)
    e1b6:	b91d      	cbnz	r5, e1c0 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    e1b8:	4668      	mov	r0, sp
    e1ba:	f01b fefd 	bl	29fb8 <pb_field_iter_next>
    e1be:	e7f1      	b.n	e1a4 <pb_encode+0xc>
        if (extension->type->encode)
    e1c0:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    e1c2:	4629      	mov	r1, r5
        if (extension->type->encode)
    e1c4:	685b      	ldr	r3, [r3, #4]
    e1c6:	b123      	cbz	r3, e1d2 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    e1c8:	4620      	mov	r0, r4
    e1ca:	4798      	blx	r3
        if (!status)
    e1cc:	b158      	cbz	r0, e1e6 <pb_encode+0x4e>
        extension = extension->next;
    e1ce:	68ad      	ldr	r5, [r5, #8]
    e1d0:	e7f1      	b.n	e1b6 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    e1d2:	a80a      	add	r0, sp, #40	; 0x28
    e1d4:	f01b fefd 	bl	29fd2 <pb_field_iter_begin_extension_const>
    e1d8:	b940      	cbnz	r0, e1ec <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    e1da:	6923      	ldr	r3, [r4, #16]
    e1dc:	4a0a      	ldr	r2, [pc, #40]	; (e208 <pb_encode+0x70>)
    e1de:	2b00      	cmp	r3, #0
    e1e0:	bf08      	it	eq
    e1e2:	4613      	moveq	r3, r2
    e1e4:	6123      	str	r3, [r4, #16]
                return false;
    e1e6:	2000      	movs	r0, #0
}
    e1e8:	b015      	add	sp, #84	; 0x54
    e1ea:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    e1ec:	4620      	mov	r0, r4
    e1ee:	a90a      	add	r1, sp, #40	; 0x28
    e1f0:	f7ff fee0 	bl	dfb4 <encode_field>
    e1f4:	e7ea      	b.n	e1cc <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    e1f6:	4669      	mov	r1, sp
    e1f8:	4620      	mov	r0, r4
    e1fa:	f7ff fedb 	bl	dfb4 <encode_field>
    e1fe:	2800      	cmp	r0, #0
    e200:	d1da      	bne.n	e1b8 <pb_encode+0x20>
    e202:	e7f0      	b.n	e1e6 <pb_encode+0x4e>
        return true; /* Empty message type */
    e204:	2001      	movs	r0, #1
    e206:	e7ef      	b.n	e1e8 <pb_encode+0x50>
    e208:	00035043 	.word	0x00035043

0000e20c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e210:	b091      	sub	sp, #68	; 0x44
    e212:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    e214:	f002 0304 	and.w	r3, r2, #4
    e218:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    e21a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    e21e:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    e220:	0784      	lsls	r4, r0, #30
{
    e222:	4605      	mov	r5, r0
    e224:	460e      	mov	r6, r1
    e226:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    e22a:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    e22c:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    e22e:	f040 81bd 	bne.w	e5ac <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    e232:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    e234:	b130      	cbz	r0, e244 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    e236:	2907      	cmp	r1, #7
    e238:	d809      	bhi.n	e24e <cbvprintf_package+0x42>
		return -ENOSPC;
    e23a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    e23e:	b011      	add	sp, #68	; 0x44
    e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    e244:	f001 0607 	and.w	r6, r1, #7
    e248:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    e24a:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    e24e:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    e250:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    e254:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    e258:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    e25a:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    e25e:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    e260:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    e262:	46cb      	mov	fp, r9
	size = sizeof(char *);
    e264:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    e266:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    e26a:	b10d      	cbz	r5, e270 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    e26c:	9a00      	ldr	r2, [sp, #0]
    e26e:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e270:	9805      	ldr	r0, [sp, #20]
    e272:	2800      	cmp	r0, #0
    e274:	f300 80eb 	bgt.w	e44e <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    e278:	4899      	ldr	r0, [pc, #612]	; (e4e0 <cbvprintf_package+0x2d4>)
    e27a:	9a00      	ldr	r2, [sp, #0]
    e27c:	4282      	cmp	r2, r0
    e27e:	d303      	bcc.n	e288 <cbvprintf_package+0x7c>
    e280:	4898      	ldr	r0, [pc, #608]	; (e4e4 <cbvprintf_package+0x2d8>)
    e282:	4282      	cmp	r2, r0
    e284:	f0c0 80e3 	bcc.w	e44e <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e288:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e28a:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e28e:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e290:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e294:	f100 8106 	bmi.w	e4a4 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    e298:	2f0f      	cmp	r7, #15
    e29a:	f200 80b4 	bhi.w	e406 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    e29e:	2d00      	cmp	r5, #0
    e2a0:	f000 8108 	beq.w	e4b4 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    e2a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e2a8:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    e2ac:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    e2ae:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    e2b2:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    e2b6:	9804      	ldr	r0, [sp, #16]
    e2b8:	3001      	adds	r0, #1
    e2ba:	9004      	str	r0, [sp, #16]
    e2bc:	e0ea      	b.n	e494 <cbvprintf_package+0x288>
			switch (*fmt) {
    e2be:	287a      	cmp	r0, #122	; 0x7a
    e2c0:	d860      	bhi.n	e384 <cbvprintf_package+0x178>
    e2c2:	284b      	cmp	r0, #75	; 0x4b
    e2c4:	d80e      	bhi.n	e2e4 <cbvprintf_package+0xd8>
    e2c6:	2847      	cmp	r0, #71	; 0x47
    e2c8:	d85c      	bhi.n	e384 <cbvprintf_package+0x178>
    e2ca:	2829      	cmp	r0, #41	; 0x29
    e2cc:	d82f      	bhi.n	e32e <cbvprintf_package+0x122>
    e2ce:	2825      	cmp	r0, #37	; 0x25
    e2d0:	d055      	beq.n	e37e <cbvprintf_package+0x172>
    e2d2:	d857      	bhi.n	e384 <cbvprintf_package+0x178>
    e2d4:	2820      	cmp	r0, #32
    e2d6:	d07d      	beq.n	e3d4 <cbvprintf_package+0x1c8>
    e2d8:	3823      	subs	r0, #35	; 0x23
    e2da:	f1d0 0b00 	rsbs	fp, r0, #0
    e2de:	eb4b 0b00 	adc.w	fp, fp, r0
    e2e2:	e077      	b.n	e3d4 <cbvprintf_package+0x1c8>
    e2e4:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    e2e8:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    e2ec:	d84a      	bhi.n	e384 <cbvprintf_package+0x178>
    e2ee:	e8df f00c 	tbb	[pc, ip]
    e2f2:	4971      	.short	0x4971
    e2f4:	49494949 	.word	0x49494949
    e2f8:	49494949 	.word	0x49494949
    e2fc:	494c4949 	.word	0x494c4949
    e300:	49494949 	.word	0x49494949
    e304:	5a494949 	.word	0x5a494949
    e308:	5a4c4c49 	.word	0x5a4c4c49
    e30c:	4c715a5a 	.word	0x4c715a5a
    e310:	4971496e 	.word	0x4971496e
    e314:	49184c18 	.word	0x49184c18
    e318:	4c808349 	.word	0x4c808349
    e31c:	494c4949 	.word	0x494c4949
    e320:	80          	.byte	0x80
    e321:	00          	.byte	0x00
    e322:	2000      	movs	r0, #0
    e324:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    e328:	f04f 0a04 	mov.w	sl, #4
    e32c:	e039      	b.n	e3a2 <cbvprintf_package+0x196>
    e32e:	2201      	movs	r2, #1
			switch (*fmt) {
    e330:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    e334:	fa5f fc8c 	uxtb.w	ip, ip
    e338:	fa02 fc0c 	lsl.w	ip, r2, ip
    e33c:	ea1c 0f0e 	tst.w	ip, lr
    e340:	d148      	bne.n	e3d4 <cbvprintf_package+0x1c8>
    e342:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    e346:	d12e      	bne.n	e3a6 <cbvprintf_package+0x19a>
    e348:	ea1c 0b02 	ands.w	fp, ip, r2
    e34c:	d042      	beq.n	e3d4 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    e34e:	3c01      	subs	r4, #1
    e350:	4454      	add	r4, sl
    e352:	f1ca 0c00 	rsb	ip, sl, #0
    e356:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    e35a:	2d00      	cmp	r5, #0
    e35c:	d061      	beq.n	e422 <cbvprintf_package+0x216>
    e35e:	eba3 0c05 	sub.w	ip, r3, r5
    e362:	44a4      	add	ip, r4
    e364:	4566      	cmp	r6, ip
    e366:	f4ff af68 	bcc.w	e23a <cbvprintf_package+0x2e>
		if (is_str_arg) {
    e36a:	2800      	cmp	r0, #0
    e36c:	d168      	bne.n	e440 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    e36e:	2b04      	cmp	r3, #4
    e370:	d147      	bne.n	e402 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    e372:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    e376:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    e378:	2304      	movs	r3, #4
    e37a:	3404      	adds	r4, #4
    e37c:	e02a      	b.n	e3d4 <cbvprintf_package+0x1c8>
				arg_idx--;
    e37e:	9a01      	ldr	r2, [sp, #4]
    e380:	3a01      	subs	r2, #1
    e382:	9201      	str	r2, [sp, #4]
				parsing = false;
    e384:	f04f 0b00 	mov.w	fp, #0
				continue;
    e388:	e024      	b.n	e3d4 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    e38a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    e38e:	286c      	cmp	r0, #108	; 0x6c
    e390:	d134      	bne.n	e3fc <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    e392:	2000      	movs	r0, #0
    e394:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    e398:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    e39a:	2b6c      	cmp	r3, #108	; 0x6c
    e39c:	d1c4      	bne.n	e328 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    e39e:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    e3a2:	4653      	mov	r3, sl
    e3a4:	e7d3      	b.n	e34e <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    e3a6:	f108 0807 	add.w	r8, r8, #7
    e3aa:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    e3ae:	3407      	adds	r4, #7
    e3b0:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    e3b4:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    e3b8:	b135      	cbz	r5, e3c8 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    e3ba:	9806      	ldr	r0, [sp, #24]
    e3bc:	4420      	add	r0, r4
    e3be:	42b0      	cmp	r0, r6
    e3c0:	f63f af3b 	bhi.w	e23a <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    e3c4:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    e3c8:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    e3cc:	3408      	adds	r4, #8
			switch (*fmt) {
    e3ce:	f04f 0a08 	mov.w	sl, #8
    e3d2:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    e3d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    e3d8:	2800      	cmp	r0, #0
    e3da:	d078      	beq.n	e4ce <cbvprintf_package+0x2c2>
			if (!parsing) {
    e3dc:	f1bb 0f00 	cmp.w	fp, #0
    e3e0:	f47f af6d 	bne.w	e2be <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    e3e4:	2825      	cmp	r0, #37	; 0x25
    e3e6:	d1f5      	bne.n	e3d4 <cbvprintf_package+0x1c8>
					parsing = true;
    e3e8:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    e3ec:	9b01      	ldr	r3, [sp, #4]
    e3ee:	3301      	adds	r3, #1
    e3f0:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    e3f2:	f04f 0a04 	mov.w	sl, #4
    e3f6:	e7ec      	b.n	e3d2 <cbvprintf_package+0x1c6>
			switch (*fmt) {
    e3f8:	4658      	mov	r0, fp
    e3fa:	e793      	b.n	e324 <cbvprintf_package+0x118>
    e3fc:	2000      	movs	r0, #0
				parsing = false;
    e3fe:	4683      	mov	fp, r0
    e400:	e7a5      	b.n	e34e <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    e402:	2b08      	cmp	r3, #8
    e404:	d002      	beq.n	e40c <cbvprintf_package+0x200>
					return -EINVAL;
    e406:	f06f 0015 	mvn.w	r0, #21
    e40a:	e718      	b.n	e23e <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    e40c:	f108 0807 	add.w	r8, r8, #7
    e410:	f028 0807 	bic.w	r8, r8, #7
    e414:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    e418:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    e41c:	2308      	movs	r3, #8
    e41e:	3408      	adds	r4, #8
    e420:	e7d8      	b.n	e3d4 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    e422:	b968      	cbnz	r0, e440 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    e424:	2b04      	cmp	r3, #4
    e426:	d102      	bne.n	e42e <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    e428:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    e42c:	e7a4      	b.n	e378 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    e42e:	2b08      	cmp	r3, #8
    e430:	d1e9      	bne.n	e406 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    e432:	f108 0807 	add.w	r8, r8, #7
    e436:	f028 0807 	bic.w	r8, r8, #7
    e43a:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    e43e:	e7ed      	b.n	e41c <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e440:	9a05      	ldr	r2, [sp, #20]
    e442:	3a01      	subs	r2, #1
    e444:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    e446:	f858 2b04 	ldr.w	r2, [r8], #4
    e44a:	9200      	str	r2, [sp, #0]
    e44c:	e70d      	b.n	e26a <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    e44e:	9a03      	ldr	r2, [sp, #12]
    e450:	0790      	lsls	r0, r2, #30
    e452:	d520      	bpl.n	e496 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e454:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e458:	eba4 0e05 	sub.w	lr, r4, r5
    e45c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e460:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    e464:	d2cf      	bcs.n	e406 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    e466:	2f0f      	cmp	r7, #15
    e468:	d8cd      	bhi.n	e406 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    e46a:	b1f5      	cbz	r5, e4aa <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    e46c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e470:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    e474:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    e476:	b2c0      	uxtb	r0, r0
    e478:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    e47c:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    e480:	f1bc 0f00 	cmp.w	ip, #0
    e484:	f43f af17 	beq.w	e2b6 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    e488:	f060 007f 	orn	r0, r0, #127	; 0x7f
    e48c:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    e490:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    e494:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    e496:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    e49a:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    e49e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    e4a0:	9206      	str	r2, [sp, #24]
    e4a2:	e797      	b.n	e3d4 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e4a4:	f04f 0c00 	mov.w	ip, #0
    e4a8:	e7da      	b.n	e460 <cbvprintf_package+0x254>
				} else if (is_ro) {
    e4aa:	f1bc 0f00 	cmp.w	ip, #0
    e4ae:	d001      	beq.n	e4b4 <cbvprintf_package+0x2a8>
					len += 1;
    e4b0:	3601      	adds	r6, #1
    e4b2:	e7ef      	b.n	e494 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    e4b4:	9802      	ldr	r0, [sp, #8]
					len += 2;
    e4b6:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    e4b8:	2800      	cmp	r0, #0
    e4ba:	d1eb      	bne.n	e494 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    e4bc:	9800      	ldr	r0, [sp, #0]
    e4be:	e9cd 3106 	strd	r3, r1, [sp, #24]
    e4c2:	f7fa ffa2 	bl	940a <strlen>
    e4c6:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    e4ca:	4406      	add	r6, r0
    e4cc:	e7e2      	b.n	e494 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    e4ce:	1b63      	subs	r3, r4, r5
    e4d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e4d4:	d297      	bcs.n	e406 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    e4d6:	b93d      	cbnz	r5, e4e8 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    e4d8:	f1a6 0408 	sub.w	r4, r6, #8
    e4dc:	18e0      	adds	r0, r4, r3
    e4de:	e6ae      	b.n	e23e <cbvprintf_package+0x32>
    e4e0:	000326e0 	.word	0x000326e0
    e4e4:	00038990 	.word	0x00038990
	if (rws_pos_en) {
    e4e8:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    e4ea:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    e4ec:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    e4ee:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    e4f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    e4f4:	b1c2      	cbz	r2, e528 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    e4f6:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    e4f8:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    e4fc:	f1b9 0f00 	cmp.w	r9, #0
    e500:	d005      	beq.n	e50e <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    e502:	2200      	movs	r2, #0
    e504:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    e506:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    e50a:	4297      	cmp	r7, r2
    e50c:	d10e      	bne.n	e52c <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    e50e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    e512:	f1c5 0301 	rsb	r3, r5, #1
    e516:	f10d 0820 	add.w	r8, sp, #32
    e51a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    e51c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    e520:	4557      	cmp	r7, sl
    e522:	d112      	bne.n	e54a <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    e524:	1b60      	subs	r0, r4, r5
    e526:	e68a      	b.n	e23e <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    e528:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    e52a:	e7e5      	b.n	e4f8 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    e52c:	f810 3b01 	ldrb.w	r3, [r0], #1
    e530:	0619      	lsls	r1, r3, #24
    e532:	d508      	bpl.n	e546 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    e534:	eb04 0e0c 	add.w	lr, r4, ip
    e538:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    e53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    e53e:	f4ff ae7c 	bcc.w	e23a <cbvprintf_package+0x2e>
			*buf++ = pos;
    e542:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    e546:	3201      	adds	r2, #1
    e548:	e7df      	b.n	e50a <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    e54a:	f1b9 0f00 	cmp.w	r9, #0
    e54e:	d003      	beq.n	e558 <cbvprintf_package+0x34c>
    e550:	f998 2000 	ldrsb.w	r2, [r8]
    e554:	2a00      	cmp	r2, #0
    e556:	db17      	blt.n	e588 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    e558:	9b02      	ldr	r3, [sp, #8]
    e55a:	b1d3      	cbz	r3, e592 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    e55c:	f81a 200b 	ldrb.w	r2, [sl, fp]
    e560:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    e564:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    e566:	9b01      	ldr	r3, [sp, #4]
    e568:	1898      	adds	r0, r3, r2
    e56a:	4420      	add	r0, r4
    e56c:	4286      	cmp	r6, r0
    e56e:	f4ff ae64 	bcc.w	e23a <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    e572:	f898 0000 	ldrb.w	r0, [r8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e576:	9900      	ldr	r1, [sp, #0]
    e578:	f804 0b01 	strb.w	r0, [r4], #1
    e57c:	4620      	mov	r0, r4
    e57e:	9203      	str	r2, [sp, #12]
    e580:	f023 f8c5 	bl	3170e <memcpy>
		buf += size;
    e584:	9a03      	ldr	r2, [sp, #12]
    e586:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    e588:	f10a 0a01 	add.w	sl, sl, #1
    e58c:	f108 0801 	add.w	r8, r8, #1
    e590:	e7c6      	b.n	e520 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    e592:	f898 2000 	ldrb.w	r2, [r8]
    e596:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    e59a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    e59c:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    e59e:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    e5a0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    e5a4:	f7fa ff31 	bl	940a <strlen>
    e5a8:	1c42      	adds	r2, r0, #1
    e5aa:	e7dc      	b.n	e566 <cbvprintf_package+0x35a>
		return -EFAULT;
    e5ac:	f06f 000d 	mvn.w	r0, #13
    e5b0:	e645      	b.n	e23e <cbvprintf_package+0x32>
    e5b2:	bf00      	nop

0000e5b4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    e5b4:	4b01      	ldr	r3, [pc, #4]	; (e5bc <char_out+0x8>)
    e5b6:	681b      	ldr	r3, [r3, #0]
    e5b8:	4718      	bx	r3
    e5ba:	bf00      	nop
    e5bc:	20008474 	.word	0x20008474

0000e5c0 <__printk_hook_install>:
	_char_out = fn;
    e5c0:	4b01      	ldr	r3, [pc, #4]	; (e5c8 <__printk_hook_install+0x8>)
    e5c2:	6018      	str	r0, [r3, #0]
}
    e5c4:	4770      	bx	lr
    e5c6:	bf00      	nop
    e5c8:	20008474 	.word	0x20008474

0000e5cc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    e5cc:	b507      	push	{r0, r1, r2, lr}
    e5ce:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    e5d0:	2100      	movs	r1, #0
    e5d2:	4602      	mov	r2, r0
    e5d4:	9100      	str	r1, [sp, #0]
    e5d6:	4803      	ldr	r0, [pc, #12]	; (e5e4 <vprintk+0x18>)
    e5d8:	f000 f9a2 	bl	e920 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    e5dc:	b003      	add	sp, #12
    e5de:	f85d fb04 	ldr.w	pc, [sp], #4
    e5e2:	bf00      	nop
    e5e4:	0000e5b5 	.word	0x0000e5b5

0000e5e8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    e5e8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    e5ea:	2500      	movs	r5, #0
{
    e5ec:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    e5ee:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    e5f2:	4604      	mov	r4, r0
    e5f4:	9500      	str	r5, [sp, #0]
    e5f6:	a903      	add	r1, sp, #12
    e5f8:	4805      	ldr	r0, [pc, #20]	; (e610 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    e5fa:	9505      	str	r5, [sp, #20]
    e5fc:	f000 f990 	bl	e920 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    e600:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    e604:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    e606:	bfb8      	it	lt
    e608:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    e60a:	b007      	add	sp, #28
    e60c:	bd30      	pop	{r4, r5, pc}
    e60e:	bf00      	nop
    e610:	0002a147 	.word	0x0002a147

0000e614 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    e614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e618:	8b05      	ldrh	r5, [r0, #24]
{
    e61a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    e61c:	0728      	lsls	r0, r5, #28
{
    e61e:	4690      	mov	r8, r2
	if (processing) {
    e620:	d411      	bmi.n	e646 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    e622:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e624:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    e628:	f040 80cd 	bne.w	e7c6 <process_event+0x1b2>
			evt = process_recheck(mgr);
    e62c:	4620      	mov	r0, r4
    e62e:	f01b ff86 	bl	2a53e <process_recheck>
		}

		if (evt == EVT_NOP) {
    e632:	b178      	cbz	r0, e654 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    e634:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e636:	8b21      	ldrh	r1, [r4, #24]
    e638:	2804      	cmp	r0, #4
    e63a:	d811      	bhi.n	e660 <process_event+0x4c>
    e63c:	e8df f000 	tbb	[pc, r0]
    e640:	856d10c3 	.word	0x856d10c3
    e644:	95          	.byte	0x95
    e645:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    e646:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    e648:	bf0c      	ite	eq
    e64a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e64e:	f045 0520 	orrne.w	r5, r5, #32
    e652:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e654:	f388 8811 	msr	BASEPRI, r8
    e658:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    e65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e660:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e664:	45aa      	cmp	sl, r5
    e666:	f000 80a6 	beq.w	e7b6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    e66a:	2700      	movs	r7, #0
    e66c:	46b9      	mov	r9, r7
    e66e:	463e      	mov	r6, r7
    e670:	68a3      	ldr	r3, [r4, #8]
    e672:	2b00      	cmp	r3, #0
    e674:	f000 80bd 	beq.w	e7f2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e678:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    e67c:	8321      	strh	r1, [r4, #24]
    e67e:	f388 8811 	msr	BASEPRI, r8
    e682:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e686:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e688:	2900      	cmp	r1, #0
    e68a:	f000 80bb 	beq.w	e804 <process_event+0x1f0>
	return node->next;
    e68e:	680d      	ldr	r5, [r1, #0]
    e690:	2900      	cmp	r1, #0
    e692:	f000 80b7 	beq.w	e804 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    e696:	4633      	mov	r3, r6
    e698:	4652      	mov	r2, sl
    e69a:	4620      	mov	r0, r4
    e69c:	f8d1 8004 	ldr.w	r8, [r1, #4]
    e6a0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e6a2:	2d00      	cmp	r5, #0
    e6a4:	d076      	beq.n	e794 <process_event+0x180>
    e6a6:	682b      	ldr	r3, [r5, #0]
    e6a8:	4629      	mov	r1, r5
    e6aa:	461d      	mov	r5, r3
    e6ac:	e7f0      	b.n	e690 <process_event+0x7c>
    e6ae:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    e6b2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    e6b4:	2a01      	cmp	r2, #1
    e6b6:	d81b      	bhi.n	e6f0 <process_event+0xdc>
	list->head = NULL;
    e6b8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e6ba:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    e6be:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    e6c0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e6c2:	b289      	uxth	r1, r1
	list->tail = NULL;
    e6c4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    e6c8:	d109      	bne.n	e6de <process_event+0xca>
    e6ca:	463b      	mov	r3, r7
    e6cc:	e003      	b.n	e6d6 <process_event+0xc2>
				mgr->refs += 1U;
    e6ce:	8b62      	ldrh	r2, [r4, #26]
    e6d0:	3201      	adds	r2, #1
    e6d2:	8362      	strh	r2, [r4, #26]
	return node->next;
    e6d4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    e6d6:	2b00      	cmp	r3, #0
    e6d8:	d1f9      	bne.n	e6ce <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e6da:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    e6de:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e6e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    e6e2:	f01b ff2c 	bl	2a53e <process_recheck>
    e6e6:	2800      	cmp	r0, #0
    e6e8:	d07b      	beq.n	e7e2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e6ea:	f041 0120 	orr.w	r1, r1, #32
    e6ee:	e077      	b.n	e7e0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    e6f0:	2b04      	cmp	r3, #4
    e6f2:	d10a      	bne.n	e70a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e6f4:	f021 0107 	bic.w	r1, r1, #7
    e6f8:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    e6fa:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e6fc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    e6fe:	f01b ff1e 	bl	2a53e <process_recheck>
    e702:	b110      	cbz	r0, e70a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e704:	f041 0120 	orr.w	r1, r1, #32
    e708:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e70a:	8b21      	ldrh	r1, [r4, #24]
    e70c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e710:	45aa      	cmp	sl, r5
    e712:	d050      	beq.n	e7b6 <process_event+0x1a2>
    e714:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    e716:	46b9      	mov	r9, r7
    e718:	e7aa      	b.n	e670 <process_event+0x5c>
			transit = mgr->transitions->start;
    e71a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e71c:	f021 0107 	bic.w	r1, r1, #7
    e720:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    e724:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    e726:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    e72a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    e72c:	d12d      	bne.n	e78a <process_event+0x176>
		    || (transit != NULL)) {
    e72e:	f1b9 0f00 	cmp.w	r9, #0
    e732:	d040      	beq.n	e7b6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e734:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    e738:	8321      	strh	r1, [r4, #24]
    e73a:	f388 8811 	msr	BASEPRI, r8
    e73e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    e742:	4620      	mov	r0, r4
    e744:	4939      	ldr	r1, [pc, #228]	; (e82c <process_event+0x218>)
    e746:	47c8      	blx	r9
    e748:	e029      	b.n	e79e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e74a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    e74e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e750:	f041 0104 	orr.w	r1, r1, #4
    e754:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    e756:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    e758:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    e75c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    e75e:	d0e6      	beq.n	e72e <process_event+0x11a>
    e760:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e762:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    e766:	463e      	mov	r6, r7
    e768:	e782      	b.n	e670 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e76a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    e76e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e770:	f041 0105 	orr.w	r1, r1, #5
    e774:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    e776:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    e778:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    e77c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    e77e:	d0d6      	beq.n	e72e <process_event+0x11a>
    e780:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e782:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    e786:	463e      	mov	r6, r7
    e788:	e772      	b.n	e670 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    e78a:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e78c:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    e790:	463e      	mov	r6, r7
    e792:	e76d      	b.n	e670 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e794:	462b      	mov	r3, r5
    e796:	e787      	b.n	e6a8 <process_event+0x94>
			if (transit != NULL) {
    e798:	f1b9 0f00 	cmp.w	r9, #0
    e79c:	d1d1      	bne.n	e742 <process_event+0x12e>
	__asm__ volatile(
    e79e:	f04f 0320 	mov.w	r3, #32
    e7a2:	f3ef 8811 	mrs	r8, BASEPRI
    e7a6:	f383 8812 	msr	BASEPRI_MAX, r3
    e7aa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    e7ae:	8b23      	ldrh	r3, [r4, #24]
    e7b0:	f023 0308 	bic.w	r3, r3, #8
    e7b4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    e7b6:	8b25      	ldrh	r5, [r4, #24]
    e7b8:	06ea      	lsls	r2, r5, #27
    e7ba:	d52e      	bpl.n	e81a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e7bc:	f025 0310 	bic.w	r3, r5, #16
    e7c0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    e7c2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    e7c6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e7c8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    e7ca:	2e00      	cmp	r6, #0
    e7cc:	f6bf af6f 	bge.w	e6ae <process_event+0x9a>
	list->head = NULL;
    e7d0:	2300      	movs	r3, #0
		*clients = mgr->clients;
    e7d2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    e7d4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e7d8:	f021 0107 	bic.w	r1, r1, #7
    e7dc:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e7e0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e7e2:	8b21      	ldrh	r1, [r4, #24]
    e7e4:	f04f 0900 	mov.w	r9, #0
    e7e8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e7ec:	45aa      	cmp	sl, r5
    e7ee:	f47f af3f 	bne.w	e670 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    e7f2:	2f00      	cmp	r7, #0
    e7f4:	d09b      	beq.n	e72e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e7f6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    e7fa:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    e7fc:	f388 8811 	msr	BASEPRI, r8
    e800:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    e804:	2f00      	cmp	r7, #0
    e806:	d0c7      	beq.n	e798 <process_event+0x184>
	return node->next;
    e808:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    e80a:	4639      	mov	r1, r7
    e80c:	4633      	mov	r3, r6
    e80e:	4652      	mov	r2, sl
    e810:	4620      	mov	r0, r4
    e812:	f01b fec0 	bl	2a596 <notify_one>
	list->head = node;
    e816:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    e818:	e7f4      	b.n	e804 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e81a:	06ab      	lsls	r3, r5, #26
    e81c:	f57f af1a 	bpl.w	e654 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e820:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e824:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    e826:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    e82a:	e6ff      	b.n	e62c <process_event+0x18>
    e82c:	0002a5c3 	.word	0x0002a5c3

0000e830 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    e830:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e832:	4c09      	ldr	r4, [pc, #36]	; (e858 <crc8_ccitt+0x28>)
    e834:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    e836:	4291      	cmp	r1, r2
    e838:	d100      	bne.n	e83c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    e83a:	bd10      	pop	{r4, pc}
		val ^= p[i];
    e83c:	f811 3b01 	ldrb.w	r3, [r1], #1
    e840:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e842:	0903      	lsrs	r3, r0, #4
    e844:	5ce3      	ldrb	r3, [r4, r3]
    e846:	0100      	lsls	r0, r0, #4
    e848:	b2c0      	uxtb	r0, r0
    e84a:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e84c:	0918      	lsrs	r0, r3, #4
    e84e:	5c20      	ldrb	r0, [r4, r0]
    e850:	011b      	lsls	r3, r3, #4
    e852:	b2db      	uxtb	r3, r3
    e854:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    e856:	e7ee      	b.n	e836 <crc8_ccitt+0x6>
    e858:	00035066 	.word	0x00035066

0000e85c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    e85c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e85e:	4602      	mov	r2, r0
    e860:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    e862:	270a      	movs	r7, #10
	size_t val = 0;
    e864:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    e866:	4e07      	ldr	r6, [pc, #28]	; (e884 <extract_decimal+0x28>)
    e868:	460b      	mov	r3, r1
    e86a:	781c      	ldrb	r4, [r3, #0]
    e86c:	3101      	adds	r1, #1
    e86e:	5d35      	ldrb	r5, [r6, r4]
    e870:	076d      	lsls	r5, r5, #29
    e872:	d401      	bmi.n	e878 <extract_decimal+0x1c>
	}
	*str = sp;
    e874:	6013      	str	r3, [r2, #0]
	return val;
}
    e876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    e878:	fb07 4300 	mla	r3, r7, r0, r4
    e87c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e880:	e7f2      	b.n	e868 <extract_decimal+0xc>
    e882:	bf00      	nop
    e884:	000385a8 	.word	0x000385a8

0000e888 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    e888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e88c:	4615      	mov	r5, r2
    e88e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    e890:	78d3      	ldrb	r3, [r2, #3]
    e892:	4a22      	ldr	r2, [pc, #136]	; (e91c <encode_uint+0x94>)
	switch (specifier) {
    e894:	2b6f      	cmp	r3, #111	; 0x6f
    e896:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    e89a:	4680      	mov	r8, r0
    e89c:	460f      	mov	r7, r1
    e89e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    e8a2:	d029      	beq.n	e8f8 <encode_uint+0x70>
    e8a4:	d824      	bhi.n	e8f0 <encode_uint+0x68>
		return 10;
    e8a6:	2b58      	cmp	r3, #88	; 0x58
    e8a8:	bf0c      	ite	eq
    e8aa:	2610      	moveq	r6, #16
    e8ac:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    e8ae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    e8b2:	4632      	mov	r2, r6
    e8b4:	2300      	movs	r3, #0
    e8b6:	4640      	mov	r0, r8
    e8b8:	4639      	mov	r1, r7
    e8ba:	f7fa fb41 	bl	8f40 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    e8be:	2a09      	cmp	r2, #9
    e8c0:	b2d4      	uxtb	r4, r2
    e8c2:	d81e      	bhi.n	e902 <encode_uint+0x7a>
    e8c4:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    e8c6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e8c8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    e8ca:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e8ce:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    e8d2:	d301      	bcc.n	e8d8 <encode_uint+0x50>
    e8d4:	45d1      	cmp	r9, sl
    e8d6:	d811      	bhi.n	e8fc <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    e8d8:	782b      	ldrb	r3, [r5, #0]
    e8da:	069b      	lsls	r3, r3, #26
    e8dc:	d505      	bpl.n	e8ea <encode_uint+0x62>
		if (radix == 8) {
    e8de:	2e08      	cmp	r6, #8
    e8e0:	d115      	bne.n	e90e <encode_uint+0x86>
			conv->altform_0 = true;
    e8e2:	78ab      	ldrb	r3, [r5, #2]
    e8e4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    e8e8:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    e8ea:	4648      	mov	r0, r9
    e8ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    e8f0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    e8f4:	2b70      	cmp	r3, #112	; 0x70
    e8f6:	e7d7      	b.n	e8a8 <encode_uint+0x20>
	switch (specifier) {
    e8f8:	2608      	movs	r6, #8
    e8fa:	e7d8      	b.n	e8ae <encode_uint+0x26>
		value /= radix;
    e8fc:	4680      	mov	r8, r0
    e8fe:	460f      	mov	r7, r1
    e900:	e7d7      	b.n	e8b2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e902:	f1bb 0f01 	cmp.w	fp, #1
    e906:	bf0c      	ite	eq
    e908:	3437      	addeq	r4, #55	; 0x37
    e90a:	3457      	addne	r4, #87	; 0x57
    e90c:	e7db      	b.n	e8c6 <encode_uint+0x3e>
		} else if (radix == 16) {
    e90e:	2e10      	cmp	r6, #16
    e910:	d1eb      	bne.n	e8ea <encode_uint+0x62>
			conv->altform_0c = true;
    e912:	78ab      	ldrb	r3, [r5, #2]
    e914:	f043 0310 	orr.w	r3, r3, #16
    e918:	e7e6      	b.n	e8e8 <encode_uint+0x60>
    e91a:	bf00      	nop
    e91c:	000385a8 	.word	0x000385a8

0000e920 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e924:	4682      	mov	sl, r0
    e926:	4617      	mov	r7, r2
    e928:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    e92a:	2500      	movs	r5, #0
{
    e92c:	b097      	sub	sp, #92	; 0x5c
    e92e:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    e930:	7838      	ldrb	r0, [r7, #0]
    e932:	b908      	cbnz	r0, e938 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    e934:	4628      	mov	r0, r5
    e936:	e349      	b.n	efcc <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    e938:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    e93a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    e93c:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    e93e:	d006      	beq.n	e94e <z_cbvprintf_impl+0x2e>
			OUTC('%');
    e940:	9903      	ldr	r1, [sp, #12]
    e942:	47d0      	blx	sl
    e944:	2800      	cmp	r0, #0
    e946:	f2c0 8341 	blt.w	efcc <z_cbvprintf_impl+0x6ac>
    e94a:	3501      	adds	r5, #1
		if (bps == NULL) {
    e94c:	e1f0      	b.n	ed30 <z_cbvprintf_impl+0x410>
		} state = {
    e94e:	2218      	movs	r2, #24
    e950:	2100      	movs	r1, #0
    e952:	a810      	add	r0, sp, #64	; 0x40
    e954:	f022 ff15 	bl	31782 <memset>
	if (*sp == '%') {
    e958:	787b      	ldrb	r3, [r7, #1]
    e95a:	2b25      	cmp	r3, #37	; 0x25
    e95c:	f000 80a3 	beq.w	eaa6 <z_cbvprintf_impl+0x186>
    e960:	2300      	movs	r3, #0
    e962:	4698      	mov	r8, r3
    e964:	469e      	mov	lr, r3
    e966:	469c      	mov	ip, r3
    e968:	4618      	mov	r0, r3
    e96a:	1c79      	adds	r1, r7, #1
    e96c:	460e      	mov	r6, r1
		switch (*sp) {
    e96e:	f811 2b01 	ldrb.w	r2, [r1], #1
    e972:	2a2b      	cmp	r2, #43	; 0x2b
    e974:	f000 80c6 	beq.w	eb04 <z_cbvprintf_impl+0x1e4>
    e978:	f200 80bd 	bhi.w	eaf6 <z_cbvprintf_impl+0x1d6>
    e97c:	2a20      	cmp	r2, #32
    e97e:	f000 80c4 	beq.w	eb0a <z_cbvprintf_impl+0x1ea>
    e982:	2a23      	cmp	r2, #35	; 0x23
    e984:	f000 80c4 	beq.w	eb10 <z_cbvprintf_impl+0x1f0>
    e988:	b12b      	cbz	r3, e996 <z_cbvprintf_impl+0x76>
    e98a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e992:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e996:	f1b8 0f00 	cmp.w	r8, #0
    e99a:	d005      	beq.n	e9a8 <z_cbvprintf_impl+0x88>
    e99c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e9a0:	f043 0320 	orr.w	r3, r3, #32
    e9a4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e9a8:	f1be 0f00 	cmp.w	lr, #0
    e9ac:	d005      	beq.n	e9ba <z_cbvprintf_impl+0x9a>
    e9ae:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e9b2:	f043 0310 	orr.w	r3, r3, #16
    e9b6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e9ba:	f1bc 0f00 	cmp.w	ip, #0
    e9be:	d005      	beq.n	e9cc <z_cbvprintf_impl+0xac>
    e9c0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e9c4:	f043 0308 	orr.w	r3, r3, #8
    e9c8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e9cc:	b128      	cbz	r0, e9da <z_cbvprintf_impl+0xba>
    e9ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e9d2:	f043 0304 	orr.w	r3, r3, #4
    e9d6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    e9da:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e9de:	f003 0144 	and.w	r1, r3, #68	; 0x44
    e9e2:	2944      	cmp	r1, #68	; 0x44
    e9e4:	d103      	bne.n	e9ee <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    e9e6:	f36f 1386 	bfc	r3, #6, #1
    e9ea:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    e9ee:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e9f2:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    e9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e9f8:	9609      	str	r6, [sp, #36]	; 0x24
    e9fa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e9fe:	f040 808c 	bne.w	eb1a <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    ea02:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    ea06:	f043 0301 	orr.w	r3, r3, #1
    ea0a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    ea0e:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    ea10:	781a      	ldrb	r2, [r3, #0]
    ea12:	2a2e      	cmp	r2, #46	; 0x2e
    ea14:	bf0c      	ite	eq
    ea16:	2101      	moveq	r1, #1
    ea18:	2100      	movne	r1, #0
    ea1a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ea1e:	f361 0241 	bfi	r2, r1, #1, #1
    ea22:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    ea26:	d10c      	bne.n	ea42 <z_cbvprintf_impl+0x122>
	++sp;
    ea28:	1c5a      	adds	r2, r3, #1
    ea2a:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    ea2c:	785a      	ldrb	r2, [r3, #1]
    ea2e:	2a2a      	cmp	r2, #42	; 0x2a
    ea30:	f040 8083 	bne.w	eb3a <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    ea34:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    ea38:	3302      	adds	r3, #2
		conv->prec_star = true;
    ea3a:	f042 0204 	orr.w	r2, r2, #4
    ea3e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    ea42:	781a      	ldrb	r2, [r3, #0]
    ea44:	2a6c      	cmp	r2, #108	; 0x6c
    ea46:	f000 80a4 	beq.w	eb92 <z_cbvprintf_impl+0x272>
    ea4a:	f200 8086 	bhi.w	eb5a <z_cbvprintf_impl+0x23a>
    ea4e:	2a68      	cmp	r2, #104	; 0x68
    ea50:	f000 808c 	beq.w	eb6c <z_cbvprintf_impl+0x24c>
    ea54:	2a6a      	cmp	r2, #106	; 0x6a
    ea56:	f000 80a5 	beq.w	eba4 <z_cbvprintf_impl+0x284>
    ea5a:	2a4c      	cmp	r2, #76	; 0x4c
    ea5c:	f000 80aa 	beq.w	ebb4 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    ea60:	461a      	mov	r2, r3
    ea62:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    ea66:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    ea68:	9204      	str	r2, [sp, #16]
    ea6a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    ea6e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    ea72:	f200 8117 	bhi.w	eca4 <z_cbvprintf_impl+0x384>
    ea76:	2b6d      	cmp	r3, #109	; 0x6d
    ea78:	f200 80a9 	bhi.w	ebce <z_cbvprintf_impl+0x2ae>
    ea7c:	2b69      	cmp	r3, #105	; 0x69
    ea7e:	f200 8111 	bhi.w	eca4 <z_cbvprintf_impl+0x384>
    ea82:	2b57      	cmp	r3, #87	; 0x57
    ea84:	f200 80be 	bhi.w	ec04 <z_cbvprintf_impl+0x2e4>
    ea88:	2b41      	cmp	r3, #65	; 0x41
    ea8a:	d003      	beq.n	ea94 <z_cbvprintf_impl+0x174>
    ea8c:	3b45      	subs	r3, #69	; 0x45
    ea8e:	2b02      	cmp	r3, #2
    ea90:	f200 8108 	bhi.w	eca4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    ea94:	2204      	movs	r2, #4
    ea96:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ea9a:	f362 0302 	bfi	r3, r2, #0, #3
    ea9e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    eaa2:	2301      	movs	r3, #1
			break;
    eaa4:	e0ca      	b.n	ec3c <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    eaa6:	1cba      	adds	r2, r7, #2
    eaa8:	9204      	str	r2, [sp, #16]
    eaaa:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    eaae:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    eab2:	07da      	lsls	r2, r3, #31
    eab4:	f140 80fd 	bpl.w	ecb2 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    eab8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    eabc:	f1b9 0f00 	cmp.w	r9, #0
    eac0:	da07      	bge.n	ead2 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    eac2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    eac6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    eaca:	f042 0204 	orr.w	r2, r2, #4
    eace:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    ead2:	075e      	lsls	r6, r3, #29
    ead4:	f140 80f6 	bpl.w	ecc4 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    ead8:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    eadc:	f1bb 0f00 	cmp.w	fp, #0
    eae0:	f280 80f5 	bge.w	ecce <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    eae4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    eae8:	f36f 0341 	bfc	r3, #1, #1
    eaec:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    eaf0:	f04f 3bff 	mov.w	fp, #4294967295
    eaf4:	e0eb      	b.n	ecce <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    eaf6:	2a2d      	cmp	r2, #45	; 0x2d
    eaf8:	d00d      	beq.n	eb16 <z_cbvprintf_impl+0x1f6>
    eafa:	2a30      	cmp	r2, #48	; 0x30
    eafc:	f47f af44 	bne.w	e988 <z_cbvprintf_impl+0x68>
    eb00:	2301      	movs	r3, #1
	} while (loop);
    eb02:	e733      	b.n	e96c <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    eb04:	f04f 0c01 	mov.w	ip, #1
    eb08:	e730      	b.n	e96c <z_cbvprintf_impl+0x4c>
    eb0a:	f04f 0e01 	mov.w	lr, #1
    eb0e:	e72d      	b.n	e96c <z_cbvprintf_impl+0x4c>
    eb10:	f04f 0801 	mov.w	r8, #1
    eb14:	e72a      	b.n	e96c <z_cbvprintf_impl+0x4c>
    eb16:	2001      	movs	r0, #1
    eb18:	e728      	b.n	e96c <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    eb1a:	a809      	add	r0, sp, #36	; 0x24
    eb1c:	f7ff fe9e 	bl	e85c <extract_decimal>
	if (sp != wp) {
    eb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb22:	42b3      	cmp	r3, r6
    eb24:	f43f af74 	beq.w	ea10 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    eb28:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    eb2c:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    eb2e:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    eb30:	f360 0241 	bfi	r2, r0, #1, #1
    eb34:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    eb38:	e76a      	b.n	ea10 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    eb3a:	a809      	add	r0, sp, #36	; 0x24
    eb3c:	f7ff fe8e 	bl	e85c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    eb40:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    eb44:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    eb46:	f3c3 0240 	ubfx	r2, r3, #1, #1
    eb4a:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    eb4e:	f362 0341 	bfi	r3, r2, #1, #1
    eb52:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    eb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb58:	e773      	b.n	ea42 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    eb5a:	2a74      	cmp	r2, #116	; 0x74
    eb5c:	d026      	beq.n	ebac <z_cbvprintf_impl+0x28c>
    eb5e:	2a7a      	cmp	r2, #122	; 0x7a
    eb60:	f47f af7e 	bne.w	ea60 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    eb64:	2106      	movs	r1, #6
    eb66:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eb6a:	e00c      	b.n	eb86 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    eb6c:	785a      	ldrb	r2, [r3, #1]
    eb6e:	2a68      	cmp	r2, #104	; 0x68
    eb70:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eb74:	d106      	bne.n	eb84 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    eb76:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    eb78:	f361 02c6 	bfi	r2, r1, #3, #4
    eb7c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    eb80:	3302      	adds	r3, #2
    eb82:	e76d      	b.n	ea60 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    eb84:	2102      	movs	r1, #2
    eb86:	f361 02c6 	bfi	r2, r1, #3, #4
    eb8a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    eb8e:	3301      	adds	r3, #1
    eb90:	e766      	b.n	ea60 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    eb92:	785a      	ldrb	r2, [r3, #1]
    eb94:	2a6c      	cmp	r2, #108	; 0x6c
    eb96:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eb9a:	d101      	bne.n	eba0 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    eb9c:	2104      	movs	r1, #4
    eb9e:	e7eb      	b.n	eb78 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    eba0:	2103      	movs	r1, #3
    eba2:	e7f0      	b.n	eb86 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    eba4:	2105      	movs	r1, #5
    eba6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ebaa:	e7ec      	b.n	eb86 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    ebac:	2107      	movs	r1, #7
    ebae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ebb2:	e7e8      	b.n	eb86 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    ebb4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    ebb8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    ebbc:	f022 0202 	bic.w	r2, r2, #2
    ebc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    ebc4:	f042 0202 	orr.w	r2, r2, #2
    ebc8:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    ebcc:	e7df      	b.n	eb8e <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    ebce:	3b6e      	subs	r3, #110	; 0x6e
    ebd0:	b2d9      	uxtb	r1, r3
    ebd2:	2301      	movs	r3, #1
    ebd4:	408b      	lsls	r3, r1
    ebd6:	f240 4182 	movw	r1, #1154	; 0x482
    ebda:	420b      	tst	r3, r1
    ebdc:	d138      	bne.n	ec50 <z_cbvprintf_impl+0x330>
    ebde:	f013 0f24 	tst.w	r3, #36	; 0x24
    ebe2:	d152      	bne.n	ec8a <z_cbvprintf_impl+0x36a>
    ebe4:	07d8      	lsls	r0, r3, #31
    ebe6:	d55d      	bpl.n	eca4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    ebe8:	2103      	movs	r1, #3
    ebea:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ebee:	f361 0302 	bfi	r3, r1, #0, #3
    ebf2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ebf6:	f002 0378 	and.w	r3, r2, #120	; 0x78
    ebfa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    ebfe:	424b      	negs	r3, r1
    ec00:	414b      	adcs	r3, r1
    ec02:	e01b      	b.n	ec3c <z_cbvprintf_impl+0x31c>
    ec04:	2001      	movs	r0, #1
	switch (conv->specifier) {
    ec06:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    ec0a:	b2c9      	uxtb	r1, r1
    ec0c:	fa00 f101 	lsl.w	r1, r0, r1
    ec10:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    ec14:	f47f af3e 	bne.w	ea94 <z_cbvprintf_impl+0x174>
    ec18:	f640 0601 	movw	r6, #2049	; 0x801
    ec1c:	4231      	tst	r1, r6
    ec1e:	d11d      	bne.n	ec5c <z_cbvprintf_impl+0x33c>
    ec20:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    ec24:	d03e      	beq.n	eca4 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    ec26:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ec2a:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ec2e:	f002 0278 	and.w	r2, r2, #120	; 0x78
    ec32:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    ec34:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ec38:	d034      	beq.n	eca4 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    ec3a:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    ec3c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    ec40:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ec44:	430b      	orrs	r3, r1
    ec46:	f363 0241 	bfi	r2, r3, #1, #1
    ec4a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    ec4e:	e72e      	b.n	eaae <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    ec50:	2102      	movs	r1, #2
    ec52:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ec56:	f361 0302 	bfi	r3, r1, #0, #3
    ec5a:	e7e8      	b.n	ec2e <z_cbvprintf_impl+0x30e>
    ec5c:	2002      	movs	r0, #2
    ec5e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ec62:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ec66:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ec6a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ec6c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    ec70:	bf02      	ittt	eq
    ec72:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    ec76:	f041 0101 	orreq.w	r1, r1, #1
    ec7a:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    ec7e:	2b63      	cmp	r3, #99	; 0x63
    ec80:	d1db      	bne.n	ec3a <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ec82:	1e13      	subs	r3, r2, #0
    ec84:	bf18      	it	ne
    ec86:	2301      	movne	r3, #1
    ec88:	e7d8      	b.n	ec3c <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    ec8a:	2103      	movs	r1, #3
    ec8c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    ec90:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ec94:	f361 0302 	bfi	r3, r1, #0, #3
    ec98:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    ec9c:	bf14      	ite	ne
    ec9e:	2301      	movne	r3, #1
    eca0:	2300      	moveq	r3, #0
    eca2:	e7cb      	b.n	ec3c <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    eca4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    eca8:	f043 0301 	orr.w	r3, r3, #1
    ecac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    ecb0:	e7c3      	b.n	ec3a <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    ecb2:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    ecb6:	2a00      	cmp	r2, #0
		int width = -1;
    ecb8:	bfac      	ite	ge
    ecba:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    ecbe:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    ecc2:	e706      	b.n	ead2 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    ecc4:	0798      	lsls	r0, r3, #30
    ecc6:	f57f af13 	bpl.w	eaf0 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    ecca:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    ecce:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    ecd0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    ecd4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    ecd8:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    ecdc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    ece0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    ece2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    ece6:	d133      	bne.n	ed50 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    ece8:	1ecb      	subs	r3, r1, #3
    ecea:	2b04      	cmp	r3, #4
    ecec:	d804      	bhi.n	ecf8 <z_cbvprintf_impl+0x3d8>
    ecee:	e8df f003 	tbb	[pc, r3]
    ecf2:	4621      	.short	0x4621
    ecf4:	2146      	.short	0x2146
    ecf6:	21          	.byte	0x21
    ecf7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    ecf8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    ecfa:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    ecfc:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ed00:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    ed04:	d11c      	bne.n	ed40 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    ed06:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    ed0a:	17da      	asrs	r2, r3, #31
    ed0c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    ed10:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    ed12:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ed16:	f013 0603 	ands.w	r6, r3, #3
    ed1a:	d050      	beq.n	edbe <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    ed1c:	463a      	mov	r2, r7
    ed1e:	4650      	mov	r0, sl
    ed20:	9b04      	ldr	r3, [sp, #16]
    ed22:	9903      	ldr	r1, [sp, #12]
    ed24:	f01b fcf3 	bl	2a70e <outs>
    ed28:	2800      	cmp	r0, #0
    ed2a:	f2c0 814f 	blt.w	efcc <z_cbvprintf_impl+0x6ac>
    ed2e:	4405      	add	r5, r0
			continue;
    ed30:	9f04      	ldr	r7, [sp, #16]
    ed32:	e5fd      	b.n	e930 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ed34:	f854 3b04 	ldr.w	r3, [r4], #4
    ed38:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    ed3a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    ed3e:	e7e8      	b.n	ed12 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    ed40:	2902      	cmp	r1, #2
    ed42:	d1e5      	bne.n	ed10 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    ed44:	b21a      	sxth	r2, r3
    ed46:	f343 33c0 	sbfx	r3, r3, #15, #1
    ed4a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    ed4e:	e7df      	b.n	ed10 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ed50:	2b02      	cmp	r3, #2
    ed52:	d124      	bne.n	ed9e <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    ed54:	1ecb      	subs	r3, r1, #3
    ed56:	2b04      	cmp	r3, #4
    ed58:	d804      	bhi.n	ed64 <z_cbvprintf_impl+0x444>
    ed5a:	e8df f003 	tbb	[pc, r3]
    ed5e:	1018      	.short	0x1018
    ed60:	1810      	.short	0x1810
    ed62:	18          	.byte	0x18
    ed63:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    ed64:	2901      	cmp	r1, #1
    ed66:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    ed6a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ed6e:	d014      	beq.n	ed9a <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    ed70:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    ed72:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    ed76:	d1cc      	bne.n	ed12 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    ed78:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    ed7a:	9310      	str	r3, [sp, #64]	; 0x40
    ed7c:	e7c9      	b.n	ed12 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    ed7e:	3407      	adds	r4, #7
    ed80:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    ed84:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ed88:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    ed8c:	e7c1      	b.n	ed12 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    ed8e:	f854 3b04 	ldr.w	r3, [r4], #4
    ed92:	9310      	str	r3, [sp, #64]	; 0x40
    ed94:	2300      	movs	r3, #0
    ed96:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    ed98:	e7bb      	b.n	ed12 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    ed9a:	b2db      	uxtb	r3, r3
    ed9c:	e7cd      	b.n	ed3a <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    ed9e:	2b04      	cmp	r3, #4
    eda0:	d108      	bne.n	edb4 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    eda2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    eda4:	f024 0407 	bic.w	r4, r4, #7
    eda8:	e9d4 2300 	ldrd	r2, r3, [r4]
    edac:	3408      	adds	r4, #8
    edae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    edb2:	e7ae      	b.n	ed12 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    edb4:	2b03      	cmp	r3, #3
    edb6:	d1ac      	bne.n	ed12 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    edb8:	f854 3b04 	ldr.w	r3, [r4], #4
    edbc:	e7dd      	b.n	ed7a <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    edbe:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    edc2:	2878      	cmp	r0, #120	; 0x78
    edc4:	d8b4      	bhi.n	ed30 <z_cbvprintf_impl+0x410>
    edc6:	2862      	cmp	r0, #98	; 0x62
    edc8:	d81c      	bhi.n	ee04 <z_cbvprintf_impl+0x4e4>
    edca:	2825      	cmp	r0, #37	; 0x25
    edcc:	f43f adb8 	beq.w	e940 <z_cbvprintf_impl+0x20>
    edd0:	2858      	cmp	r0, #88	; 0x58
    edd2:	d1ad      	bne.n	ed30 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    edd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    edd8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    eddc:	9300      	str	r3, [sp, #0]
    edde:	aa12      	add	r2, sp, #72	; 0x48
    ede0:	ab0a      	add	r3, sp, #40	; 0x28
    ede2:	f7ff fd51 	bl	e888 <encode_uint>
			if (precision >= 0) {
    ede6:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    edea:	4607      	mov	r7, r0
			if (precision >= 0) {
    edec:	f280 8097 	bge.w	ef1e <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    edf0:	2f00      	cmp	r7, #0
    edf2:	d09d      	beq.n	ed30 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    edf4:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    edf8:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    edfc:	2e00      	cmp	r6, #0
    edfe:	d04e      	beq.n	ee9e <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    ee00:	3001      	adds	r0, #1
    ee02:	e04c      	b.n	ee9e <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    ee04:	3863      	subs	r0, #99	; 0x63
    ee06:	2815      	cmp	r0, #21
    ee08:	d892      	bhi.n	ed30 <z_cbvprintf_impl+0x410>
    ee0a:	a201      	add	r2, pc, #4	; (adr r2, ee10 <z_cbvprintf_impl+0x4f0>)
    ee0c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    ee10:	0000ee8f 	.word	0x0000ee8f
    ee14:	0000eef5 	.word	0x0000eef5
    ee18:	0000ed31 	.word	0x0000ed31
    ee1c:	0000ed31 	.word	0x0000ed31
    ee20:	0000ed31 	.word	0x0000ed31
    ee24:	0000ed31 	.word	0x0000ed31
    ee28:	0000eef5 	.word	0x0000eef5
    ee2c:	0000ed31 	.word	0x0000ed31
    ee30:	0000ed31 	.word	0x0000ed31
    ee34:	0000ed31 	.word	0x0000ed31
    ee38:	0000ed31 	.word	0x0000ed31
    ee3c:	0000ef7d 	.word	0x0000ef7d
    ee40:	0000ef19 	.word	0x0000ef19
    ee44:	0000ef3f 	.word	0x0000ef3f
    ee48:	0000ed31 	.word	0x0000ed31
    ee4c:	0000ed31 	.word	0x0000ed31
    ee50:	0000ee69 	.word	0x0000ee69
    ee54:	0000ed31 	.word	0x0000ed31
    ee58:	0000ef19 	.word	0x0000ef19
    ee5c:	0000ed31 	.word	0x0000ed31
    ee60:	0000ed31 	.word	0x0000ed31
    ee64:	0000ef19 	.word	0x0000ef19
			if (precision >= 0) {
    ee68:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    ee6c:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    ee6e:	db0a      	blt.n	ee86 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    ee70:	4659      	mov	r1, fp
    ee72:	4638      	mov	r0, r7
    ee74:	f022 fe01 	bl	31a7a <strnlen>
			bpe = bps + len;
    ee78:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    ee7c:	2f00      	cmp	r7, #0
    ee7e:	f43f af57 	beq.w	ed30 <z_cbvprintf_impl+0x410>
		char sign = 0;
    ee82:	2600      	movs	r6, #0
    ee84:	e00b      	b.n	ee9e <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    ee86:	4638      	mov	r0, r7
    ee88:	f7fa fabf 	bl	940a <strlen>
    ee8c:	e7f4      	b.n	ee78 <z_cbvprintf_impl+0x558>
		char sign = 0;
    ee8e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    ee90:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ee92:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    ee94:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ee98:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    ee9c:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    ee9e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    eea2:	f013 0210 	ands.w	r2, r3, #16
    eea6:	9205      	str	r2, [sp, #20]
    eea8:	f000 8083 	beq.w	efb2 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    eeac:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    eeae:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    eeb0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    eeb4:	bf48      	it	mi
    eeb6:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    eeb8:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    eeba:	bf48      	it	mi
    eebc:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    eebe:	f1b9 0f00 	cmp.w	r9, #0
    eec2:	f340 8090 	ble.w	efe6 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    eec6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    eeca:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    eece:	f3c2 0380 	ubfx	r3, r2, #2, #1
    eed2:	0750      	lsls	r0, r2, #29
    eed4:	9306      	str	r3, [sp, #24]
    eed6:	f100 8086 	bmi.w	efe6 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    eeda:	0651      	lsls	r1, r2, #25
    eedc:	d579      	bpl.n	efd2 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    eede:	b13e      	cbz	r6, eef0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    eee0:	4630      	mov	r0, r6
    eee2:	9903      	ldr	r1, [sp, #12]
    eee4:	47d0      	blx	sl
    eee6:	2800      	cmp	r0, #0
    eee8:	db70      	blt.n	efcc <z_cbvprintf_impl+0x6ac>
    eeea:	9b06      	ldr	r3, [sp, #24]
    eeec:	3501      	adds	r5, #1
    eeee:	461e      	mov	r6, r3
					pad = '0';
    eef0:	2230      	movs	r2, #48	; 0x30
    eef2:	e06f      	b.n	efd4 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    eef4:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    eef6:	bf5a      	itte	pl
    eef8:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    eefc:	015e      	lslpl	r6, r3, #5
				sign = '+';
    eefe:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    ef00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    ef04:	2b00      	cmp	r3, #0
    ef06:	f6bf af65 	bge.w	edd4 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    ef0a:	4252      	negs	r2, r2
    ef0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ef10:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    ef12:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    ef16:	e75d      	b.n	edd4 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    ef18:	2600      	movs	r6, #0
    ef1a:	e75b      	b.n	edd4 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    ef1c:	2600      	movs	r6, #0
				conv->flag_zero = false;
    ef1e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    ef22:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    ef26:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    ef28:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ef2c:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    ef2e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    ef32:	f67f af5d 	bls.w	edf0 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    ef36:	ebab 0303 	sub.w	r3, fp, r3
    ef3a:	9313      	str	r3, [sp, #76]	; 0x4c
    ef3c:	e758      	b.n	edf0 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    ef3e:	9810      	ldr	r0, [sp, #64]	; 0x40
    ef40:	b380      	cbz	r0, efa4 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ef42:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    ef46:	ab0a      	add	r3, sp, #40	; 0x28
    ef48:	2100      	movs	r1, #0
    ef4a:	f8cd 8000 	str.w	r8, [sp]
    ef4e:	aa12      	add	r2, sp, #72	; 0x48
    ef50:	f7ff fc9a 	bl	e888 <encode_uint>
				conv->altform_0c = true;
    ef54:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    ef58:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    ef5c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ef60:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ef64:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ef68:	4607      	mov	r7, r0
				conv->altform_0c = true;
    ef6a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    ef6e:	dad5      	bge.n	ef1c <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    ef70:	2800      	cmp	r0, #0
    ef72:	f43f aedd 	beq.w	ed30 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    ef76:	eba8 0000 	sub.w	r0, r8, r0
    ef7a:	e782      	b.n	ee82 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    ef7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    ef7e:	2907      	cmp	r1, #7
    ef80:	f63f aed6 	bhi.w	ed30 <z_cbvprintf_impl+0x410>
    ef84:	e8df f001 	tbb	[pc, r1]
    ef88:	0c06040c 	.word	0x0c06040c
    ef8c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    ef90:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    ef92:	e6cd      	b.n	ed30 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    ef94:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    ef96:	e6cb      	b.n	ed30 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    ef98:	17ea      	asrs	r2, r5, #31
    ef9a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    ef9e:	e6c7      	b.n	ed30 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    efa0:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    efa2:	e6c5      	b.n	ed30 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    efa4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; f064 <z_cbvprintf_impl+0x744>
		char sign = 0;
    efa8:	4606      	mov	r6, r0
    efaa:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    efae:	2005      	movs	r0, #5
    efb0:	e775      	b.n	ee9e <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    efb2:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    efb4:	bf48      	it	mi
    efb6:	3001      	addmi	r0, #1
    efb8:	e779      	b.n	eeae <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    efba:	4610      	mov	r0, r2
    efbc:	9307      	str	r3, [sp, #28]
    efbe:	9206      	str	r2, [sp, #24]
    efc0:	9903      	ldr	r1, [sp, #12]
    efc2:	47d0      	blx	sl
    efc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    efc8:	2800      	cmp	r0, #0
    efca:	da04      	bge.n	efd6 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    efcc:	b017      	add	sp, #92	; 0x5c
    efce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    efd2:	2220      	movs	r2, #32
					pad = '0';
    efd4:	464b      	mov	r3, r9
				while (width-- > 0) {
    efd6:	4619      	mov	r1, r3
    efd8:	2900      	cmp	r1, #0
    efda:	f103 33ff 	add.w	r3, r3, #4294967295
    efde:	dcec      	bgt.n	efba <z_cbvprintf_impl+0x69a>
    efe0:	444d      	add	r5, r9
    efe2:	4699      	mov	r9, r3
    efe4:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    efe6:	b12e      	cbz	r6, eff4 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    efe8:	4630      	mov	r0, r6
    efea:	9903      	ldr	r1, [sp, #12]
    efec:	47d0      	blx	sl
    efee:	2800      	cmp	r0, #0
    eff0:	dbec      	blt.n	efcc <z_cbvprintf_impl+0x6ac>
    eff2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    eff4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    eff8:	06da      	lsls	r2, r3, #27
    effa:	d401      	bmi.n	f000 <z_cbvprintf_impl+0x6e0>
    effc:	071b      	lsls	r3, r3, #28
    effe:	d505      	bpl.n	f00c <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    f000:	2030      	movs	r0, #48	; 0x30
    f002:	9903      	ldr	r1, [sp, #12]
    f004:	47d0      	blx	sl
    f006:	2800      	cmp	r0, #0
    f008:	dbe0      	blt.n	efcc <z_cbvprintf_impl+0x6ac>
    f00a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    f00c:	9b05      	ldr	r3, [sp, #20]
    f00e:	b133      	cbz	r3, f01e <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    f010:	9903      	ldr	r1, [sp, #12]
    f012:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    f016:	47d0      	blx	sl
    f018:	2800      	cmp	r0, #0
    f01a:	dbd7      	blt.n	efcc <z_cbvprintf_impl+0x6ac>
    f01c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    f01e:	44ab      	add	fp, r5
    f020:	e005      	b.n	f02e <z_cbvprintf_impl+0x70e>
				OUTC('0');
    f022:	2030      	movs	r0, #48	; 0x30
    f024:	9903      	ldr	r1, [sp, #12]
    f026:	47d0      	blx	sl
    f028:	2800      	cmp	r0, #0
    f02a:	dbcf      	blt.n	efcc <z_cbvprintf_impl+0x6ac>
    f02c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    f02e:	ebab 0305 	sub.w	r3, fp, r5
    f032:	2b00      	cmp	r3, #0
    f034:	dcf5      	bgt.n	f022 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    f036:	4643      	mov	r3, r8
    f038:	463a      	mov	r2, r7
    f03a:	4650      	mov	r0, sl
    f03c:	9903      	ldr	r1, [sp, #12]
    f03e:	f01b fb66 	bl	2a70e <outs>
    f042:	2800      	cmp	r0, #0
    f044:	dbc2      	blt.n	efcc <z_cbvprintf_impl+0x6ac>
    f046:	4405      	add	r5, r0
		while (width > 0) {
    f048:	44a9      	add	r9, r5
    f04a:	eba9 0305 	sub.w	r3, r9, r5
    f04e:	2b00      	cmp	r3, #0
    f050:	f77f ae6e 	ble.w	ed30 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    f054:	2020      	movs	r0, #32
    f056:	9903      	ldr	r1, [sp, #12]
    f058:	47d0      	blx	sl
    f05a:	2800      	cmp	r0, #0
    f05c:	dbb6      	blt.n	efcc <z_cbvprintf_impl+0x6ac>
    f05e:	3501      	adds	r5, #1
			--width;
    f060:	e7f3      	b.n	f04a <z_cbvprintf_impl+0x72a>
    f062:	bf00      	nop
    f064:	0003507b 	.word	0x0003507b

0000f068 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f068:	b148      	cbz	r0, f07e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    f06a:	4b05      	ldr	r3, [pc, #20]	; (f080 <arch_busy_wait+0x18>)
    f06c:	4a05      	ldr	r2, [pc, #20]	; (f084 <arch_busy_wait+0x1c>)
    f06e:	681b      	ldr	r3, [r3, #0]
    f070:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    f074:	4358      	muls	r0, r3
    f076:	4b04      	ldr	r3, [pc, #16]	; (f088 <arch_busy_wait+0x20>)
    f078:	f043 0301 	orr.w	r3, r3, #1
    f07c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    f07e:	4770      	bx	lr
    f080:	20008738 	.word	0x20008738
    f084:	000f4240 	.word	0x000f4240
    f088:	00033120 	.word	0x00033120

0000f08c <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    f08c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    f08e:	ab0b      	add	r3, sp, #44	; 0x2c
    f090:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    f092:	9303      	str	r3, [sp, #12]
    f094:	4b05      	ldr	r3, [pc, #20]	; (f0ac <z_log_msg_runtime_create.constprop.0+0x20>)
    f096:	2201      	movs	r2, #1
    f098:	9302      	str	r3, [sp, #8]
    f09a:	2300      	movs	r3, #0
    f09c:	4618      	mov	r0, r3
    f09e:	e9cd 3300 	strd	r3, r3, [sp]
    f0a2:	f000 f9c3 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    f0a6:	b007      	add	sp, #28
    f0a8:	f85d fb04 	ldr.w	pc, [sp], #4
    f0ac:	00035080 	.word	0x00035080

0000f0b0 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    f0b0:	b570      	push	{r4, r5, r6, lr}
    f0b2:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    f0b4:	a805      	add	r0, sp, #20
    f0b6:	f014 fb2d 	bl	23714 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    f0ba:	4b28      	ldr	r3, [pc, #160]	; (f15c <sync_rtc_setup+0xac>)
    f0bc:	4298      	cmp	r0, r3
    f0be:	d149      	bne.n	f154 <sync_rtc_setup+0xa4>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    f0c0:	f013 fe78 	bl	22db4 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    f0c4:	1e04      	subs	r4, r0, #0
    f0c6:	da0f      	bge.n	f0e8 <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    f0c8:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f0cc:	f014 fb28 	bl	23720 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    f0d0:	4b23      	ldr	r3, [pc, #140]	; (f160 <sync_rtc_setup+0xb0>)
    f0d2:	2201      	movs	r2, #1
    f0d4:	9302      	str	r3, [sp, #8]
    f0d6:	2300      	movs	r3, #0
    f0d8:	4922      	ldr	r1, [pc, #136]	; (f164 <sync_rtc_setup+0xb4>)
    f0da:	4618      	mov	r0, r3
    f0dc:	e9cd 3300 	strd	r3, r3, [sp]
    f0e0:	9403      	str	r4, [sp, #12]
    f0e2:	f7ff ffd3 	bl	f08c <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    f0e6:	e032      	b.n	f14e <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    f0e8:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    f0ec:	4d1e      	ldr	r5, [pc, #120]	; (f168 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    f0ee:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    f0f2:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    f0f4:	f8ad 3016 	strh.w	r3, [sp, #22]
    f0f8:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    f0fa:	9b05      	ldr	r3, [sp, #20]
    f0fc:	b914      	cbnz	r4, f104 <sync_rtc_setup+0x54>
		return -ENOSYS;
    f0fe:	f06f 0457 	mvn.w	r4, #87	; 0x57
    f102:	e7e5      	b.n	f0d0 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f104:	2108      	movs	r1, #8
    f106:	4628      	mov	r0, r5
    f108:	4a18      	ldr	r2, [pc, #96]	; (f16c <sync_rtc_setup+0xbc>)
    f10a:	47a0      	blx	r4
	if (err < 0) {
    f10c:	1e04      	subs	r4, r0, #0
    f10e:	dbdf      	blt.n	f0d0 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    f110:	6933      	ldr	r3, [r6, #16]
    f112:	2b00      	cmp	r3, #0
    f114:	d0f3      	beq.n	f0fe <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    f116:	2201      	movs	r2, #1
    f118:	2108      	movs	r1, #8
    f11a:	4628      	mov	r0, r5
    f11c:	4798      	blx	r3
	if (rv < 0) {
    f11e:	1e04      	subs	r4, r0, #0
    f120:	dbd6      	blt.n	f0d0 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    f122:	2301      	movs	r3, #1
    f124:	f89d 5014 	ldrb.w	r5, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    f128:	4a11      	ldr	r2, [pc, #68]	; (f170 <sync_rtc_setup+0xc0>)
    f12a:	40ab      	lsls	r3, r5
    f12c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    f130:	f89d 0015 	ldrb.w	r0, [sp, #21]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f134:	f89d 6017 	ldrb.w	r6, [sp, #23]
    f138:	f020 fe50 	bl	2fddc <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    f13c:	4b0d      	ldr	r3, [pc, #52]	; (f174 <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    f13e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f142:	00b6      	lsls	r6, r6, #2
    f144:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    f148:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    f14a:	2c00      	cmp	r4, #0
    f14c:	d1c0      	bne.n	f0d0 <sync_rtc_setup+0x20>
}
    f14e:	4620      	mov	r0, r4
    f150:	b006      	add	sp, #24
    f152:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    f154:	f06f 0412 	mvn.w	r4, #18
    f158:	e7ba      	b.n	f0d0 <sync_rtc_setup+0x20>
    f15a:	bf00      	nop
    f15c:	0bad0000 	.word	0x0bad0000
    f160:	00035080 	.word	0x00035080
    f164:	00032ff0 	.word	0x00032ff0
    f168:	000328d8 	.word	0x000328d8
    f16c:	0000f1bd 	.word	0x0000f1bd
    f170:	40017000 	.word	0x40017000
    f174:	4002a180 	.word	0x4002a180

0000f178 <rtc_cb>:
{
    f178:	b538      	push	{r3, r4, r5, lr}
    f17a:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    f17c:	f3c4 2507 	ubfx	r5, r4, #8, #8
    f180:	4628      	mov	r0, r5
    f182:	f013 fc77 	bl	22a74 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    f186:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    f188:	4b0a      	ldr	r3, [pc, #40]	; (f1b4 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    f18a:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    f18c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f190:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    f194:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    f196:	2301      	movs	r3, #1
    f198:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    f19a:	4a07      	ldr	r2, [pc, #28]	; (f1b8 <rtc_cb+0x40>)
    f19c:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    f19e:	4628      	mov	r0, r5
    f1a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    f1a4:	f013 fe24 	bl	22df0 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    f1a8:	4620      	mov	r0, r4
}
    f1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    f1ae:	f014 bab7 	b.w	23720 <nrfx_dppi_channel_free>
    f1b2:	bf00      	nop
    f1b4:	4002a080 	.word	0x4002a080
    f1b8:	40017000 	.word	0x40017000

0000f1bc <mbox_callback>:
{
    f1bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f1be:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    f1c0:	6883      	ldr	r3, [r0, #8]
    f1c2:	691b      	ldr	r3, [r3, #16]
    f1c4:	b10b      	cbz	r3, f1ca <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    f1c6:	2200      	movs	r2, #0
    f1c8:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    f1ca:	f3c4 2607 	ubfx	r6, r4, #8, #8
    f1ce:	4630      	mov	r0, r6
    f1d0:	f013 fc58 	bl	22a84 <z_nrf_rtc_timer_compare_read>
    f1d4:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    f1d6:	4630      	mov	r0, r6
    f1d8:	f020 fe00 	bl	2fddc <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    f1dc:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    f1de:	4b10      	ldr	r3, [pc, #64]	; (f220 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f1e0:	0e22      	lsrs	r2, r4, #24
    f1e2:	0092      	lsls	r2, r2, #2
    f1e4:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    f1e8:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    f1ea:	4630      	mov	r0, r6
    f1ec:	f013 fc42 	bl	22a74 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    f1f0:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    f1f2:	4b0c      	ldr	r3, [pc, #48]	; (f224 <mbox_callback+0x68>)
    f1f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f1f8:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    f1fa:	b2e2      	uxtb	r2, r4
    f1fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    f200:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    f202:	4b09      	ldr	r3, [pc, #36]	; (f228 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    f204:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    f208:	f105 0232 	add.w	r2, r5, #50	; 0x32
    f20c:	9300      	str	r3, [sp, #0]
    f20e:	4630      	mov	r0, r6
    f210:	463b      	mov	r3, r7
    f212:	9401      	str	r4, [sp, #4]
    f214:	0052      	lsls	r2, r2, #1
    f216:	f020 fdea 	bl	2fdee <z_nrf_rtc_timer_set>
}
    f21a:	b003      	add	sp, #12
    f21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f21e:	bf00      	nop
    f220:	4002a180 	.word	0x4002a180
    f224:	4002a080 	.word	0x4002a080
    f228:	0000f179 	.word	0x0000f179

0000f22c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    f22c:	f020 be7d 	b.w	2ff2a <SystemInit>

0000f230 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    f230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f234:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    f236:	482f      	ldr	r0, [pc, #188]	; (f2f4 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    f238:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    f23a:	f01b faef 	bl	2a81c <atomic_inc>
    f23e:	4606      	mov	r6, r0
    f240:	b970      	cbnz	r0, f260 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f242:	4c2d      	ldr	r4, [pc, #180]	; (f2f8 <z_log_init.isra.0+0xc8>)
	uint32_t mask = 0;
    f244:	4605      	mov	r5, r0
    f246:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    f248:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f24c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; f2fc <z_log_init.isra.0+0xcc>
    f250:	4554      	cmp	r4, sl
    f252:	d307      	bcc.n	f264 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    f254:	f1b9 0f00 	cmp.w	r9, #0
    f258:	d002      	beq.n	f260 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    f25a:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    f25e:	b9e5      	cbnz	r5, f29a <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    f260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    f264:	7b23      	ldrb	r3, [r4, #12]
    f266:	b173      	cbz	r3, f286 <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    f268:	6823      	ldr	r3, [r4, #0]
    f26a:	68db      	ldr	r3, [r3, #12]
    f26c:	b10b      	cbz	r3, f272 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    f26e:	4620      	mov	r0, r4
    f270:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    f272:	6823      	ldr	r3, [r4, #0]
    f274:	691b      	ldr	r3, [r3, #16]
    f276:	b943      	cbnz	r3, f28a <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    f278:	6863      	ldr	r3, [r4, #4]
    f27a:	2204      	movs	r2, #4
    f27c:	4620      	mov	r0, r4
    f27e:	6819      	ldr	r1, [r3, #0]
    f280:	f000 f8c0 	bl	f404 <log_backend_enable>
			i++;
    f284:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f286:	3410      	adds	r4, #16
    f288:	e7e2      	b.n	f250 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    f28a:	4620      	mov	r0, r4
    f28c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    f28e:	2800      	cmp	r0, #0
    f290:	d0f2      	beq.n	f278 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    f292:	fa0b f306 	lsl.w	r3, fp, r6
    f296:	431d      	orrs	r5, r3
    f298:	e7f4      	b.n	f284 <z_log_init.isra.0+0x54>
    f29a:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    f29c:	fa95 f4a5 	rbit	r4, r5
    f2a0:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    f2a4:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f2a8:	0126      	lsls	r6, r4, #4
    f2aa:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    f2ae:	ea6f 0b03 	mvn.w	fp, r3
    f2b2:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f2b6:	7b23      	ldrb	r3, [r4, #12]
    f2b8:	b163      	cbz	r3, f2d4 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    f2ba:	f858 3006 	ldr.w	r3, [r8, r6]
    f2be:	691b      	ldr	r3, [r3, #16]
    f2c0:	b993      	cbnz	r3, f2e8 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    f2c2:	4446      	add	r6, r8
			log_backend_enable(backend,
    f2c4:	6873      	ldr	r3, [r6, #4]
    f2c6:	2204      	movs	r2, #4
    f2c8:	4620      	mov	r0, r4
    f2ca:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    f2cc:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    f2d0:	f000 f898 	bl	f404 <log_backend_enable>
	while (mask_cpy) {
    f2d4:	2d00      	cmp	r5, #0
    f2d6:	d1e1      	bne.n	f29c <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    f2d8:	b127      	cbz	r7, f2e4 <z_log_init.isra.0+0xb4>
    f2da:	f44f 70a4 	mov.w	r0, #328	; 0x148
    f2de:	2100      	movs	r1, #0
    f2e0:	f017 f8a4 	bl	2642c <z_impl_k_sleep>
    f2e4:	464d      	mov	r5, r9
    f2e6:	e7ba      	b.n	f25e <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    f2e8:	4620      	mov	r0, r4
    f2ea:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f2ec:	2800      	cmp	r0, #0
    f2ee:	d1f1      	bne.n	f2d4 <z_log_init.isra.0+0xa4>
    f2f0:	e7e7      	b.n	f2c2 <z_log_init.isra.0+0x92>
    f2f2:	bf00      	nop
    f2f4:	2002f87c 	.word	0x2002f87c
    f2f8:	00033000 	.word	0x00033000
    f2fc:	00033010 	.word	0x00033010

0000f300 <log_format_func_t_get>:
}
    f300:	4b01      	ldr	r3, [pc, #4]	; (f308 <log_format_func_t_get+0x8>)
    f302:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f306:	4770      	bx	lr
    f308:	00033528 	.word	0x00033528

0000f30c <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    f30c:	b508      	push	{r3, lr}
    f30e:	4603      	mov	r3, r0
    f310:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    f312:	b12b      	cbz	r3, f320 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    f314:	4a04      	ldr	r2, [pc, #16]	; (f328 <log_set_timestamp_func+0x1c>)
    f316:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    f318:	f000 fa7c 	bl	f814 <log_output_timestamp_freq_set>
	}

	return 0;
    f31c:	2000      	movs	r0, #0
}
    f31e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f320:	f06f 0015 	mvn.w	r0, #21
    f324:	e7fb      	b.n	f31e <log_set_timestamp_func+0x12>
    f326:	bf00      	nop
    f328:	20008478 	.word	0x20008478

0000f32c <log_core_init>:
	panic_mode = false;
    f32c:	2300      	movs	r3, #0
    f32e:	4a04      	ldr	r2, [pc, #16]	; (f340 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    f330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    f334:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    f336:	4a03      	ldr	r2, [pc, #12]	; (f344 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    f338:	4803      	ldr	r0, [pc, #12]	; (f348 <log_core_init+0x1c>)
	dropped_cnt = 0;
    f33a:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    f33c:	f7ff bfe6 	b.w	f30c <log_set_timestamp_func>
    f340:	200317f3 	.word	0x200317f3
    f344:	2002f874 	.word	0x2002f874
    f348:	0002a819 	.word	0x0002a819

0000f34c <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    f34c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    f34e:	4d0b      	ldr	r5, [pc, #44]	; (f37c <z_impl_log_panic+0x30>)
    f350:	7829      	ldrb	r1, [r5, #0]
    f352:	b941      	cbnz	r1, f366 <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    f354:	2001      	movs	r0, #1
    f356:	f7ff ff6b 	bl	f230 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f35a:	4c09      	ldr	r4, [pc, #36]	; (f380 <z_impl_log_panic+0x34>)
    f35c:	4e09      	ldr	r6, [pc, #36]	; (f384 <z_impl_log_panic+0x38>)
    f35e:	42b4      	cmp	r4, r6
    f360:	d302      	bcc.n	f368 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    f362:	2301      	movs	r3, #1
    f364:	702b      	strb	r3, [r5, #0]
}
    f366:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f368:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f36a:	795b      	ldrb	r3, [r3, #5]
    f36c:	b11b      	cbz	r3, f376 <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    f36e:	6823      	ldr	r3, [r4, #0]
    f370:	4620      	mov	r0, r4
    f372:	689b      	ldr	r3, [r3, #8]
    f374:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f376:	3410      	adds	r4, #16
    f378:	e7f1      	b.n	f35e <z_impl_log_panic+0x12>
    f37a:	bf00      	nop
    f37c:	200317f3 	.word	0x200317f3
    f380:	00033000 	.word	0x00033000
    f384:	00033010 	.word	0x00033010

0000f388 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    f388:	b510      	push	{r4, lr}
    f38a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    f38c:	4806      	ldr	r0, [pc, #24]	; (f3a8 <z_log_dropped+0x20>)
    f38e:	f01b fa45 	bl	2a81c <atomic_inc>
	if (buffered) {
    f392:	b13c      	cbz	r4, f3a4 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f394:	4b05      	ldr	r3, [pc, #20]	; (f3ac <z_log_dropped+0x24>)
    f396:	e8d3 1fef 	ldaex	r1, [r3]
    f39a:	3901      	subs	r1, #1
    f39c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f3a0:	2a00      	cmp	r2, #0
    f3a2:	d1f8      	bne.n	f396 <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    f3a4:	bd10      	pop	{r4, pc}
    f3a6:	bf00      	nop
    f3a8:	2002f874 	.word	0x2002f874
    f3ac:	2002f878 	.word	0x2002f878

0000f3b0 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    f3b0:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f3b2:	4b0a      	ldr	r3, [pc, #40]	; (f3dc <z_log_msg_commit+0x2c>)
{
    f3b4:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f3b6:	681b      	ldr	r3, [r3, #0]
    f3b8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f3ba:	4c09      	ldr	r4, [pc, #36]	; (f3e0 <z_log_msg_commit+0x30>)
    f3bc:	4e09      	ldr	r6, [pc, #36]	; (f3e4 <z_log_msg_commit+0x34>)
	msg->hdr.timestamp = timestamp_func();
    f3be:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f3c0:	42b4      	cmp	r4, r6
    f3c2:	d300      	bcc.n	f3c6 <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    f3c4:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    f3c6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    f3c8:	795b      	ldrb	r3, [r3, #5]
    f3ca:	b123      	cbz	r3, f3d6 <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    f3cc:	6823      	ldr	r3, [r4, #0]
    f3ce:	4629      	mov	r1, r5
    f3d0:	4620      	mov	r0, r4
    f3d2:	681b      	ldr	r3, [r3, #0]
    f3d4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f3d6:	3410      	adds	r4, #16
    f3d8:	e7f2      	b.n	f3c0 <z_log_msg_commit+0x10>
    f3da:	bf00      	nop
    f3dc:	20008478 	.word	0x20008478
    f3e0:	00033000 	.word	0x00033000
    f3e4:	00033010 	.word	0x00033010

0000f3e8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    f3e8:	4a04      	ldr	r2, [pc, #16]	; (f3fc <log_source_name_get+0x14>)
    f3ea:	4b05      	ldr	r3, [pc, #20]	; (f400 <log_source_name_get+0x18>)
    f3ec:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    f3ee:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    f3f2:	bf34      	ite	cc
    f3f4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    f3f8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    f3fa:	4770      	bx	lr
    f3fc:	00032e90 	.word	0x00032e90
    f400:	00033000 	.word	0x00033000

0000f404 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    f404:	4b08      	ldr	r3, [pc, #32]	; (f428 <log_backend_enable+0x24>)
{
    f406:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    f408:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    f40a:	6844      	ldr	r4, [r0, #4]
    f40c:	111b      	asrs	r3, r3, #4
    f40e:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    f410:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    f412:	6843      	ldr	r3, [r0, #4]
    f414:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    f416:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    f418:	6843      	ldr	r3, [r0, #4]
    f41a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    f41c:	6843      	ldr	r3, [r0, #4]
    f41e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    f420:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    f422:	f01b ba0b 	b.w	2a83c <z_log_notify_backend_enabled>
    f426:	bf00      	nop
    f428:	00033000 	.word	0x00033000

0000f42c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f430:	b085      	sub	sp, #20
    f432:	af02      	add	r7, sp, #8
    f434:	4604      	mov	r4, r0
    f436:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    f43a:	460e      	mov	r6, r1
    f43c:	4693      	mov	fp, r2
    f43e:	4698      	mov	r8, r3
    f440:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    f442:	f1ba 0f00 	cmp.w	sl, #0
    f446:	d035      	beq.n	f4b4 <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
    f448:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    f44c:	f8cd 9000 	str.w	r9, [sp]
    f450:	2110      	movs	r1, #16
    f452:	4653      	mov	r3, sl
    f454:	2000      	movs	r0, #0
    f456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f458:	f7fe fed8 	bl	e20c <cbvprintf_package>
    f45c:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    f45e:	4a16      	ldr	r2, [pc, #88]	; (f4b8 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
    f460:	f004 0407 	and.w	r4, r4, #7
    f464:	f00b 0b07 	and.w	fp, fp, #7
    f468:	00e4      	lsls	r4, r4, #3
    f46a:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    f46e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    f472:	4314      	orrs	r4, r2
    f474:	4a11      	ldr	r2, [pc, #68]	; (f4bc <z_impl_z_log_msg_runtime_vcreate+0x90>)
    f476:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    f47a:	3517      	adds	r5, #23
    f47c:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    f47e:	f025 0507 	bic.w	r5, r5, #7
    f482:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    f486:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    f488:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    f48a:	f1ba 0f00 	cmp.w	sl, #0
    f48e:	d007      	beq.n	f4a0 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    f490:	f8cd 9000 	str.w	r9, [sp]
    f494:	4653      	mov	r3, sl
    f496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f498:	f105 0010 	add.w	r0, r5, #16
    f49c:	f7fe feb6 	bl	e20c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    f4a0:	4643      	mov	r3, r8
    f4a2:	4622      	mov	r2, r4
    f4a4:	4631      	mov	r1, r6
    f4a6:	4628      	mov	r0, r5
    f4a8:	f01b f9cb 	bl	2a842 <z_log_msg_finalize>
	}
}
    f4ac:	370c      	adds	r7, #12
    f4ae:	46bd      	mov	sp, r7
    f4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    f4b4:	4651      	mov	r1, sl
    f4b6:	e7d2      	b.n	f45e <z_impl_z_log_msg_runtime_vcreate+0x32>
    f4b8:	0007fe00 	.word	0x0007fe00
    f4bc:	7ff80000 	.word	0x7ff80000

0000f4c0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    f4c0:	b40e      	push	{r1, r2, r3}
    f4c2:	b503      	push	{r0, r1, lr}
    f4c4:	ab03      	add	r3, sp, #12
    f4c6:	f853 2b04 	ldr.w	r2, [r3], #4
    f4ca:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f4cc:	4804      	ldr	r0, [pc, #16]	; (f4e0 <print_formatted+0x20>)
	va_start(args, fmt);
    f4ce:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f4d0:	f01b f9fa 	bl	2a8c8 <cbvprintf>
	va_end(args);

	return length;
}
    f4d4:	b002      	add	sp, #8
    f4d6:	f85d eb04 	ldr.w	lr, [sp], #4
    f4da:	b003      	add	sp, #12
    f4dc:	4770      	bx	lr
    f4de:	bf00      	nop
    f4e0:	0002a877 	.word	0x0002a877

0000f4e4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f4e4:	06ca      	lsls	r2, r1, #27
    f4e6:	d405      	bmi.n	f4f4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f4e8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    f4ea:	bf4c      	ite	mi
    f4ec:	4902      	ldrmi	r1, [pc, #8]	; (f4f8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    f4ee:	4903      	ldrpl	r1, [pc, #12]	; (f4fc <newline_print+0x18>)
    f4f0:	f7ff bfe6 	b.w	f4c0 <print_formatted>
	}
}
    f4f4:	4770      	bx	lr
    f4f6:	bf00      	nop
    f4f8:	00034e63 	.word	0x00034e63
    f4fc:	0003493d 	.word	0x0003493d

0000f500 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    f500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f504:	b089      	sub	sp, #36	; 0x24
    f506:	469a      	mov	sl, r3
    f508:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    f50c:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    f510:	9305      	str	r3, [sp, #20]
    f512:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f514:	4604      	mov	r4, r0
    f516:	460d      	mov	r5, r1
    f518:	9e16      	ldr	r6, [sp, #88]	; 0x58
    f51a:	9206      	str	r2, [sp, #24]
    f51c:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    f51e:	f1bb 0f00 	cmp.w	fp, #0
    f522:	f000 8085 	beq.w	f630 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f526:	f006 0308 	and.w	r3, r6, #8
    f52a:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    f52c:	f01b f987 	bl	2a83e <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    f530:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    f534:	4602      	mov	r2, r0
    f536:	2800      	cmp	r0, #0
    f538:	d049      	beq.n	f5ce <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    f53a:	4620      	mov	r0, r4
    f53c:	4985      	ldr	r1, [pc, #532]	; (f754 <log_output_process+0x254>)
    f53e:	f7ff ffbf 	bl	f4c0 <print_formatted>
    f542:	4680      	mov	r8, r0
	if (stamp) {
    f544:	f1b9 0f00 	cmp.w	r9, #0
    f548:	d008      	beq.n	f55c <log_output_process+0x5c>
	if (!format) {
    f54a:	f016 0f44 	tst.w	r6, #68	; 0x44
    f54e:	d140      	bne.n	f5d2 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    f550:	462a      	mov	r2, r5
    f552:	4620      	mov	r0, r4
    f554:	4980      	ldr	r1, [pc, #512]	; (f758 <log_output_process+0x258>)
    f556:	f7ff ffb3 	bl	f4c0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    f55a:	4480      	add	r8, r0
	if (color) {
    f55c:	f006 0301 	and.w	r3, r6, #1
    f560:	b153      	cbz	r3, f578 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    f562:	4b7e      	ldr	r3, [pc, #504]	; (f75c <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
    f564:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    f566:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    f56a:	4b7d      	ldr	r3, [pc, #500]	; (f760 <log_output_process+0x260>)
    f56c:	497d      	ldr	r1, [pc, #500]	; (f764 <log_output_process+0x264>)
    f56e:	2a00      	cmp	r2, #0
    f570:	bf08      	it	eq
    f572:	461a      	moveq	r2, r3
    f574:	f7ff ffa4 	bl	f4c0 <print_formatted>
	if (level_on) {
    f578:	f006 0308 	and.w	r3, r6, #8
    f57c:	2b00      	cmp	r3, #0
    f57e:	d054      	beq.n	f62a <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    f580:	4b79      	ldr	r3, [pc, #484]	; (f768 <log_output_process+0x268>)
    f582:	4620      	mov	r0, r4
    f584:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    f588:	4978      	ldr	r1, [pc, #480]	; (f76c <log_output_process+0x26c>)
    f58a:	f7ff ff99 	bl	f4c0 <print_formatted>
    f58e:	4605      	mov	r5, r0
	if (domain) {
    f590:	9b06      	ldr	r3, [sp, #24]
    f592:	b12b      	cbz	r3, f5a0 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    f594:	461a      	mov	r2, r3
    f596:	4620      	mov	r0, r4
    f598:	4975      	ldr	r1, [pc, #468]	; (f770 <log_output_process+0x270>)
    f59a:	f7ff ff91 	bl	f4c0 <print_formatted>
    f59e:	4405      	add	r5, r0
	if (source) {
    f5a0:	f1ba 0f00 	cmp.w	sl, #0
    f5a4:	d005      	beq.n	f5b2 <log_output_process+0xb2>
		total += print_formatted(output,
    f5a6:	4652      	mov	r2, sl
    f5a8:	4620      	mov	r0, r4
    f5aa:	4972      	ldr	r1, [pc, #456]	; (f774 <log_output_process+0x274>)
    f5ac:	f7ff ff88 	bl	f4c0 <print_formatted>
    f5b0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    f5b2:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    f5b4:	2f00      	cmp	r7, #0
    f5b6:	d149      	bne.n	f64c <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    f5b8:	9b04      	ldr	r3, [sp, #16]
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	d14f      	bne.n	f65e <log_output_process+0x15e>
	if (color) {
    f5be:	07f3      	lsls	r3, r6, #31
    f5c0:	f100 80c1 	bmi.w	f746 <log_output_process+0x246>
	newline_print(output, flags);
    f5c4:	4631      	mov	r1, r6
    f5c6:	4620      	mov	r0, r4
    f5c8:	f7ff ff8c 	bl	f4e4 <newline_print>
}
    f5cc:	e0b5      	b.n	f73a <log_output_process+0x23a>
	uint32_t length = 0U;
    f5ce:	4680      	mov	r8, r0
    f5d0:	e7b8      	b.n	f544 <log_output_process+0x44>
	} else if (freq != 0U) {
    f5d2:	4b69      	ldr	r3, [pc, #420]	; (f778 <log_output_process+0x278>)
    f5d4:	6818      	ldr	r0, [r3, #0]
    f5d6:	2800      	cmp	r0, #0
    f5d8:	d0bf      	beq.n	f55a <log_output_process+0x5a>
		timestamp /= timestamp_div;
    f5da:	4b68      	ldr	r3, [pc, #416]	; (f77c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    f5dc:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f5e0:	681b      	ldr	r3, [r3, #0]
    f5e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    f5e6:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    f5ea:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    f5ee:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    f5f2:	fb09 f505 	mul.w	r5, r9, r5
    f5f6:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f5fa:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    f5fe:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    f602:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f606:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    f60a:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f60e:	fb09 f505 	mul.w	r5, r9, r5
    f612:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    f616:	fb0c 1113 	mls	r1, ip, r3, r1
    f61a:	4620      	mov	r0, r4
    f61c:	9100      	str	r1, [sp, #0]
    f61e:	e9cd e501 	strd	lr, r5, [sp, #4]
    f622:	4957      	ldr	r1, [pc, #348]	; (f780 <log_output_process+0x280>)
    f624:	f7ff ff4c 	bl	f4c0 <print_formatted>
    f628:	e797      	b.n	f55a <log_output_process+0x5a>
	int total = 0;
    f62a:	f006 0508 	and.w	r5, r6, #8
    f62e:	e7af      	b.n	f590 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f630:	f1ba 0f01 	cmp.w	sl, #1
    f634:	d106      	bne.n	f644 <log_output_process+0x144>
	if (package) {
    f636:	2f00      	cmp	r7, #0
    f638:	d165      	bne.n	f706 <log_output_process+0x206>
	if (data_len) {
    f63a:	9b04      	ldr	r3, [sp, #16]
    f63c:	2b00      	cmp	r3, #0
    f63e:	d07c      	beq.n	f73a <log_output_process+0x23a>
		prefix_offset = 0;
    f640:	2500      	movs	r5, #0
    f642:	e00c      	b.n	f65e <log_output_process+0x15e>
	if (package) {
    f644:	2f00      	cmp	r7, #0
    f646:	d0f8      	beq.n	f63a <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f648:	484e      	ldr	r0, [pc, #312]	; (f784 <log_output_process+0x284>)
    f64a:	e05d      	b.n	f708 <log_output_process+0x208>
		cb = out_func;
    f64c:	484e      	ldr	r0, [pc, #312]	; (f788 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    f64e:	463b      	mov	r3, r7
    f650:	4622      	mov	r2, r4
    f652:	494e      	ldr	r1, [pc, #312]	; (f78c <log_output_process+0x28c>)
    f654:	f01a fd44 	bl	2a0e0 <cbpprintf_external>
	if (data_len) {
    f658:	9b04      	ldr	r3, [sp, #16]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d069      	beq.n	f732 <log_output_process+0x232>
		print_formatted(output, " ");
    f65e:	f8df 8130 	ldr.w	r8, [pc, #304]	; f790 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    f662:	f8df 9130 	ldr.w	r9, [pc, #304]	; f794 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f666:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    f668:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f66a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    f66c:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f66e:	bf28      	it	cs
    f670:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    f672:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    f676:	f7ff ff35 	bl	f4e4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    f67a:	4555      	cmp	r5, sl
    f67c:	dc46      	bgt.n	f70c <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
    f67e:	9b05      	ldr	r3, [sp, #20]
    f680:	4649      	mov	r1, r9
    f682:	4620      	mov	r0, r4
    f684:	781a      	ldrb	r2, [r3, #0]
    f686:	f7ff ff1b 	bl	f4c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f68a:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    f68e:	f01a 0f07 	tst.w	sl, #7
    f692:	d103      	bne.n	f69c <log_output_process+0x19c>
			print_formatted(output, " ");
    f694:	4641      	mov	r1, r8
    f696:	4620      	mov	r0, r4
    f698:	f7ff ff12 	bl	f4c0 <print_formatted>
		if (i < length) {
    f69c:	4557      	cmp	r7, sl
    f69e:	d93c      	bls.n	f71a <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
    f6a0:	9b05      	ldr	r3, [sp, #20]
    f6a2:	4649      	mov	r1, r9
    f6a4:	4620      	mov	r0, r4
    f6a6:	f813 200a 	ldrb.w	r2, [r3, sl]
    f6aa:	f7ff ff09 	bl	f4c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f6ae:	f10a 0a01 	add.w	sl, sl, #1
    f6b2:	f1ba 0f10 	cmp.w	sl, #16
    f6b6:	d1ea      	bne.n	f68e <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f6b8:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    f6bc:	4620      	mov	r0, r4
    f6be:	4936      	ldr	r1, [pc, #216]	; (f798 <log_output_process+0x298>)
    f6c0:	f7ff fefe 	bl	f4c0 <print_formatted>
		if (i < length) {
    f6c4:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    f6c6:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    f6c8:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    f6ca:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    f6cc:	4b33      	ldr	r3, [pc, #204]	; (f79c <log_output_process+0x29c>)
    f6ce:	5c99      	ldrb	r1, [r3, r2]
    f6d0:	f011 0f97 	tst.w	r1, #151	; 0x97
    f6d4:	bf08      	it	eq
    f6d6:	222e      	moveq	r2, #46	; 0x2e
    f6d8:	4931      	ldr	r1, [pc, #196]	; (f7a0 <log_output_process+0x2a0>)
    f6da:	f7ff fef1 	bl	f4c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f6de:	f10a 0a01 	add.w	sl, sl, #1
    f6e2:	f1ba 0f10 	cmp.w	sl, #16
    f6e6:	d01d      	beq.n	f724 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
    f6e8:	f01a 0f07 	tst.w	sl, #7
    f6ec:	d103      	bne.n	f6f6 <log_output_process+0x1f6>
			print_formatted(output, " ");
    f6ee:	4641      	mov	r1, r8
    f6f0:	4620      	mov	r0, r4
    f6f2:	f7ff fee5 	bl	f4c0 <print_formatted>
		if (i < length) {
    f6f6:	4557      	cmp	r7, sl
    f6f8:	4652      	mov	r2, sl
    f6fa:	d8e4      	bhi.n	f6c6 <log_output_process+0x1c6>
			print_formatted(output, " ");
    f6fc:	4641      	mov	r1, r8
    f6fe:	4620      	mov	r0, r4
    f700:	f7ff fede 	bl	f4c0 <print_formatted>
    f704:	e7eb      	b.n	f6de <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f706:	4820      	ldr	r0, [pc, #128]	; (f788 <log_output_process+0x288>)
		prefix_offset = 0;
    f708:	465d      	mov	r5, fp
    f70a:	e7a0      	b.n	f64e <log_output_process+0x14e>
		print_formatted(output, " ");
    f70c:	4641      	mov	r1, r8
    f70e:	4620      	mov	r0, r4
    f710:	f7ff fed6 	bl	f4c0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f714:	f10a 0a01 	add.w	sl, sl, #1
    f718:	e7af      	b.n	f67a <log_output_process+0x17a>
			print_formatted(output, "   ");
    f71a:	4620      	mov	r0, r4
    f71c:	4921      	ldr	r1, [pc, #132]	; (f7a4 <log_output_process+0x2a4>)
    f71e:	f7ff fecf 	bl	f4c0 <print_formatted>
    f722:	e7c4      	b.n	f6ae <log_output_process+0x1ae>
		data += length;
    f724:	9b05      	ldr	r3, [sp, #20]
    f726:	443b      	add	r3, r7
    f728:	9305      	str	r3, [sp, #20]
	} while (len);
    f72a:	9b04      	ldr	r3, [sp, #16]
    f72c:	1bdb      	subs	r3, r3, r7
    f72e:	9304      	str	r3, [sp, #16]
    f730:	d199      	bne.n	f666 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    f732:	f1bb 0f00 	cmp.w	fp, #0
    f736:	f47f af42 	bne.w	f5be <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    f73a:	4620      	mov	r0, r4
}
    f73c:	b009      	add	sp, #36	; 0x24
    f73e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    f742:	f01b b8c8 	b.w	2a8d6 <log_output_flush>
		print_formatted(output, "%s", log_color);
    f746:	4620      	mov	r0, r4
    f748:	4a05      	ldr	r2, [pc, #20]	; (f760 <log_output_process+0x260>)
    f74a:	4906      	ldr	r1, [pc, #24]	; (f764 <log_output_process+0x264>)
    f74c:	f7ff feb8 	bl	f4c0 <print_formatted>
}
    f750:	e738      	b.n	f5c4 <log_output_process+0xc4>
    f752:	bf00      	nop
    f754:	000350be 	.word	0x000350be
    f758:	000350c2 	.word	0x000350c2
    f75c:	00033538 	.word	0x00033538
    f760:	00034bf1 	.word	0x00034bf1
    f764:	000359be 	.word	0x000359be
    f768:	0003354c 	.word	0x0003354c
    f76c:	000350e7 	.word	0x000350e7
    f770:	000350ed 	.word	0x000350ed
    f774:	000350f1 	.word	0x000350f1
    f778:	2002f884 	.word	0x2002f884
    f77c:	2002f880 	.word	0x2002f880
    f780:	000350cb 	.word	0x000350cb
    f784:	0002a893 	.word	0x0002a893
    f788:	0002a877 	.word	0x0002a877
    f78c:	0002a8c9 	.word	0x0002a8c9
    f790:	0003845a 	.word	0x0003845a
    f794:	000350f6 	.word	0x000350f6
    f798:	000350fc 	.word	0x000350fc
    f79c:	000385a8 	.word	0x000385a8
    f7a0:	000350fe 	.word	0x000350fe
    f7a4:	00038458 	.word	0x00038458

0000f7a8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    f7ac:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    f7ae:	684b      	ldr	r3, [r1, #4]
    f7b0:	4605      	mov	r5, r0
    f7b2:	460c      	mov	r4, r1
    f7b4:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    f7b6:	688e      	ldr	r6, [r1, #8]
    f7b8:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    f7ba:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    f7be:	b15b      	cbz	r3, f7d8 <log_output_msg_process+0x30>
    f7c0:	4a13      	ldr	r2, [pc, #76]	; (f810 <log_output_msg_process+0x68>)
    f7c2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    f7c4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    f7c8:	2900      	cmp	r1, #0
    f7ca:	db1f      	blt.n	f80c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    f7cc:	7820      	ldrb	r0, [r4, #0]
    f7ce:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f7d2:	f7ff fe09 	bl	f3e8 <log_source_name_get>
    f7d6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    f7d8:	4621      	mov	r1, r4
    f7da:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    f7de:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    f7e0:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    f7e4:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    f7e6:	eb01 0402 	add.w	r4, r1, r2
    f7ea:	bf08      	it	eq
    f7ec:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    f7ee:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    f7f2:	e9cd 0803 	strd	r0, r8, [sp, #12]
    f7f6:	e9cd 1401 	strd	r1, r4, [sp, #4]
    f7fa:	2200      	movs	r2, #0
    f7fc:	4631      	mov	r1, r6
    f7fe:	4628      	mov	r0, r5
    f800:	9700      	str	r7, [sp, #0]
    f802:	f7ff fe7d 	bl	f500 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    f806:	b006      	add	sp, #24
    f808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    f80c:	2300      	movs	r3, #0
    f80e:	e7e3      	b.n	f7d8 <log_output_msg_process+0x30>
    f810:	00032e90 	.word	0x00032e90

0000f814 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f814:	2100      	movs	r1, #0
    f816:	2301      	movs	r3, #1
    f818:	4a06      	ldr	r2, [pc, #24]	; (f834 <log_output_timestamp_freq_set+0x20>)
    f81a:	4290      	cmp	r0, r2
    f81c:	d806      	bhi.n	f82c <log_output_timestamp_freq_set+0x18>
    f81e:	4a06      	ldr	r2, [pc, #24]	; (f838 <log_output_timestamp_freq_set+0x24>)
    f820:	b901      	cbnz	r1, f824 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    f822:	2301      	movs	r3, #1
    f824:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f826:	4b05      	ldr	r3, [pc, #20]	; (f83c <log_output_timestamp_freq_set+0x28>)
    f828:	6018      	str	r0, [r3, #0]
}
    f82a:	4770      	bx	lr
		timestamp_div *= 2U;
    f82c:	2101      	movs	r1, #1
		frequency /= 2U;
    f82e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f830:	005b      	lsls	r3, r3, #1
    f832:	e7f2      	b.n	f81a <log_output_timestamp_freq_set+0x6>
    f834:	000f4240 	.word	0x000f4240
    f838:	2002f880 	.word	0x2002f880
    f83c:	2002f884 	.word	0x2002f884

0000f840 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    f840:	2201      	movs	r2, #1
    f842:	4b01      	ldr	r3, [pc, #4]	; (f848 <log_backend_rtt_init+0x8>)
    f844:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    f846:	4770      	bx	lr
    f848:	200317f4 	.word	0x200317f4

0000f84c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    f84c:	4b01      	ldr	r3, [pc, #4]	; (f854 <format_set+0x8>)
	return 0;
}
    f84e:	2000      	movs	r0, #0
	log_format_current = log_type;
    f850:	6019      	str	r1, [r3, #0]
}
    f852:	4770      	bx	lr
    f854:	2002f89c 	.word	0x2002f89c

0000f858 <panic>:
	panic_mode = true;
    f858:	2201      	movs	r2, #1
    f85a:	4b02      	ldr	r3, [pc, #8]	; (f864 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    f85c:	4802      	ldr	r0, [pc, #8]	; (f868 <panic+0x10>)
    f85e:	701a      	strb	r2, [r3, #0]
    f860:	f01b b839 	b.w	2a8d6 <log_output_flush>
    f864:	200317f5 	.word	0x200317f5
    f868:	0003357c 	.word	0x0003357c

0000f86c <process>:
{
    f86c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f86e:	4b06      	ldr	r3, [pc, #24]	; (f888 <process+0x1c>)
{
    f870:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f872:	6818      	ldr	r0, [r3, #0]
    f874:	f7ff fd44 	bl	f300 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    f878:	4621      	mov	r1, r4
}
    f87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f87e:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    f880:	220f      	movs	r2, #15
    f882:	4802      	ldr	r0, [pc, #8]	; (f88c <process+0x20>)
    f884:	4718      	bx	r3
    f886:	bf00      	nop
    f888:	2002f89c 	.word	0x2002f89c
    f88c:	0003357c 	.word	0x0003357c

0000f890 <data_out_block_mode>:
{
    f890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f892:	4607      	mov	r7, r0
    f894:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    f896:	2404      	movs	r4, #4
    f898:	4d17      	ldr	r5, [pc, #92]	; (f8f8 <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    f89a:	4632      	mov	r2, r6
    f89c:	4639      	mov	r1, r7
    f89e:	2000      	movs	r0, #0
    f8a0:	f015 fcc2 	bl	25228 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    f8a4:	b1c8      	cbz	r0, f8da <data_out_block_mode+0x4a>
	host_present = true;
    f8a6:	2301      	movs	r3, #1
    f8a8:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    f8aa:	4b14      	ldr	r3, [pc, #80]	; (f8fc <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    f8ac:	781b      	ldrb	r3, [r3, #0]
    f8ae:	b92b      	cbnz	r3, f8bc <data_out_block_mode+0x2c>
}
    f8b0:	4630      	mov	r0, r6
    f8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    f8b4:	b95c      	cbnz	r4, f8ce <data_out_block_mode+0x3e>
		host_present = false;
    f8b6:	702c      	strb	r4, [r5, #0]
    f8b8:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    f8bc:	2000      	movs	r0, #0
    f8be:	f015 fcfb 	bl	252b8 <SEGGER_RTT_HasDataUp>
    f8c2:	2800      	cmp	r0, #0
    f8c4:	d0f4      	beq.n	f8b0 <data_out_block_mode+0x20>
    f8c6:	782b      	ldrb	r3, [r5, #0]
    f8c8:	2b00      	cmp	r3, #0
    f8ca:	d1f3      	bne.n	f8b4 <data_out_block_mode+0x24>
    f8cc:	e7f0      	b.n	f8b0 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    f8ce:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    f8d0:	f241 3088 	movw	r0, #5000	; 0x1388
    f8d4:	f021 fd43 	bl	3135e <z_impl_k_busy_wait>
}
    f8d8:	e7f0      	b.n	f8bc <data_out_block_mode+0x2c>
		} else if (host_present) {
    f8da:	782b      	ldrb	r3, [r5, #0]
    f8dc:	b113      	cbz	r3, f8e4 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    f8de:	3c01      	subs	r4, #1
    f8e0:	d104      	bne.n	f8ec <data_out_block_mode+0x5c>
		host_present = false;
    f8e2:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    f8e4:	782b      	ldrb	r3, [r5, #0]
    f8e6:	2b00      	cmp	r3, #0
    f8e8:	d1d7      	bne.n	f89a <data_out_block_mode+0xa>
    f8ea:	e7e1      	b.n	f8b0 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    f8ec:	f241 3088 	movw	r0, #5000	; 0x1388
    f8f0:	f021 fd35 	bl	3135e <z_impl_k_busy_wait>
    f8f4:	e7f6      	b.n	f8e4 <data_out_block_mode+0x54>
    f8f6:	bf00      	nop
    f8f8:	200317f4 	.word	0x200317f4
    f8fc:	200317f5 	.word	0x200317f5

0000f900 <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    f900:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    f902:	8983      	ldrh	r3, [r0, #12]
    f904:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    f906:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    f908:	0c09      	lsrs	r1, r1, #16
    f90a:	fb03 5501 	mla	r5, r3, r1, r5
{
    f90e:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    f910:	e9cd 5304 	strd	r5, r3, [sp, #16]
    f914:	4b11      	ldr	r3, [pc, #68]	; (f95c <nvs_flash_erase_sector+0x5c>)
    f916:	2208      	movs	r2, #8
    f918:	9303      	str	r3, [sp, #12]
    f91a:	4b11      	ldr	r3, [pc, #68]	; (f960 <nvs_flash_erase_sector+0x60>)
{
    f91c:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    f91e:	9302      	str	r3, [sp, #8]
    f920:	2300      	movs	r3, #0
    f922:	4910      	ldr	r1, [pc, #64]	; (f964 <nvs_flash_erase_sector+0x64>)
    f924:	4618      	mov	r0, r3
    f926:	e9cd 3200 	strd	r3, r2, [sp]
    f92a:	2204      	movs	r2, #4
    f92c:	f01b f853 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    f930:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    f932:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f934:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    f936:	6883      	ldr	r3, [r0, #8]
    f938:	4629      	mov	r1, r5
    f93a:	689b      	ldr	r3, [r3, #8]
    f93c:	4798      	blx	r3

	if (rc) {
    f93e:	b950      	cbnz	r0, f956 <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    f940:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f942:	4631      	mov	r1, r6
    f944:	4620      	mov	r0, r4
    f946:	89a3      	ldrh	r3, [r4, #12]
    f948:	7912      	ldrb	r2, [r2, #4]
    f94a:	f01b f81f 	bl	2a98c <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    f94e:	2800      	cmp	r0, #0
    f950:	bf18      	it	ne
    f952:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    f956:	b006      	add	sp, #24
    f958:	bd70      	pop	{r4, r5, r6, pc}
    f95a:	bf00      	nop
    f95c:	000352f4 	.word	0x000352f4
    f960:	00035131 	.word	0x00035131
    f964:	00032f68 	.word	0x00032f68

0000f968 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    f968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    f96c:	884b      	ldrh	r3, [r1, #2]
{
    f96e:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    f970:	9304      	str	r3, [sp, #16]
    f972:	4b1d      	ldr	r3, [pc, #116]	; (f9e8 <nvs_recover_last_ate+0x80>)
    f974:	2408      	movs	r4, #8
    f976:	9303      	str	r3, [sp, #12]
    f978:	4b1c      	ldr	r3, [pc, #112]	; (f9ec <nvs_recover_last_ate+0x84>)
{
    f97a:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    f97c:	9302      	str	r3, [sp, #8]
    f97e:	2300      	movs	r3, #0
{
    f980:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    f982:	4618      	mov	r0, r3
    f984:	e9cd 3400 	strd	r3, r4, [sp]
    f988:	4919      	ldr	r1, [pc, #100]	; (f9f0 <nvs_recover_last_ate+0x88>)
    f98a:	2204      	movs	r2, #4
    f98c:	f01b f823 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f990:	4621      	mov	r1, r4
    f992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f994:	f01b f82f 	bl	2a9f6 <nvs_al_size.isra.0>
    f998:	4680      	mov	r8, r0

	*addr -= ate_size;
    f99a:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    f99c:	f8df 9054 	ldr.w	r9, [pc, #84]	; f9f4 <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    f9a0:	1a24      	subs	r4, r4, r0
    f9a2:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    f9a4:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    f9a8:	42b4      	cmp	r4, r6
    f9aa:	d803      	bhi.n	f9b4 <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    f9ac:	2000      	movs	r0, #0
}
    f9ae:	b009      	add	sp, #36	; 0x24
    f9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f9b4:	2308      	movs	r3, #8
    f9b6:	4621      	mov	r1, r4
    f9b8:	4638      	mov	r0, r7
    f9ba:	aa06      	add	r2, sp, #24
    f9bc:	f01a ff98 	bl	2a8f0 <nvs_flash_rd>
		if (rc) {
    f9c0:	2800      	cmp	r0, #0
    f9c2:	d1f4      	bne.n	f9ae <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    f9c4:	4638      	mov	r0, r7
    f9c6:	a906      	add	r1, sp, #24
    f9c8:	f01b f81f 	bl	2aa0a <nvs_ate_valid>
    f9cc:	b140      	cbz	r0, f9e0 <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    f9ce:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f9d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    f9d6:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    f9da:	4413      	add	r3, r2
    f9dc:	441e      	add	r6, r3
			*addr = ate_end_addr;
    f9de:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    f9e0:	eba4 0408 	sub.w	r4, r4, r8
    f9e4:	e7e0      	b.n	f9a8 <nvs_recover_last_ate+0x40>
    f9e6:	bf00      	nop
    f9e8:	000352df 	.word	0x000352df
    f9ec:	00035152 	.word	0x00035152
    f9f0:	00032f68 	.word	0x00032f68
    f9f4:	ffff0000 	.word	0xffff0000

0000f9f8 <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    f9f8:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    f9fa:	8883      	ldrh	r3, [r0, #4]
{
    f9fc:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    f9fe:	9304      	str	r3, [sp, #16]
    fa00:	4b10      	ldr	r3, [pc, #64]	; (fa44 <nvs_add_gc_done_ate+0x4c>)
    fa02:	2500      	movs	r5, #0
    fa04:	9303      	str	r3, [sp, #12]
    fa06:	4b10      	ldr	r3, [pc, #64]	; (fa48 <nvs_add_gc_done_ate+0x50>)
{
    fa08:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    fa0a:	9302      	str	r3, [sp, #8]
    fa0c:	2308      	movs	r3, #8
    fa0e:	2204      	movs	r2, #4
    fa10:	4628      	mov	r0, r5
    fa12:	e9cd 5300 	strd	r5, r3, [sp]
    fa16:	490d      	ldr	r1, [pc, #52]	; (fa4c <nvs_add_gc_done_ate+0x54>)
    fa18:	462b      	mov	r3, r5
    fa1a:	f01a ffdc 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    fa1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fa22:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fa26:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    fa28:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fa2a:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    fa2e:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    fa32:	f01a ffa2 	bl	2a97a <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    fa36:	4620      	mov	r0, r4
    fa38:	a906      	add	r1, sp, #24
    fa3a:	f01b f8a2 	bl	2ab82 <nvs_flash_ate_wrt>
}
    fa3e:	b009      	add	sp, #36	; 0x24
    fa40:	bd30      	pop	{r4, r5, pc}
    fa42:	bf00      	nop
    fa44:	000352c4 	.word	0x000352c4
    fa48:	00035179 	.word	0x00035179
    fa4c:	00032f68 	.word	0x00032f68

0000fa50 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fa54:	2108      	movs	r1, #8
{
    fa56:	b09b      	sub	sp, #108	; 0x6c
    fa58:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fa5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fa5c:	f01a ffcb 	bl	2a9f6 <nvs_al_size.isra.0>
    fa60:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fa62:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    fa64:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fa66:	0c1b      	lsrs	r3, r3, #16
    fa68:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    fa6a:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fa6c:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    fa6e:	f01a ff4d 	bl	2a90c <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fa72:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    fa76:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fa78:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fa7a:	445e      	add	r6, fp
    fa7c:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fa7e:	2308      	movs	r3, #8
    fa80:	4631      	mov	r1, r6
    fa82:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fa84:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fa86:	f01a ff33 	bl	2a8f0 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    fa8a:	1e02      	subs	r2, r0, #0
    fa8c:	f2c0 80bb 	blt.w	fc06 <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    fa90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fa92:	aa0c      	add	r2, sp, #48	; 0x30
    fa94:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fa96:	2300      	movs	r3, #0
		if (data8[i] != value) {
    fa98:	f812 0b01 	ldrb.w	r0, [r2], #1
    fa9c:	4281      	cmp	r1, r0
    fa9e:	f040 80a1 	bne.w	fbe4 <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    faa2:	3301      	adds	r3, #1
    faa4:	2b08      	cmp	r3, #8
    faa6:	d1f7      	bne.n	fa98 <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    faa8:	68a3      	ldr	r3, [r4, #8]
    faaa:	6862      	ldr	r2, [r4, #4]
    faac:	442b      	add	r3, r5
    faae:	429a      	cmp	r2, r3
    fab0:	f080 8090 	bcs.w	fbd4 <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    fab4:	4659      	mov	r1, fp
    fab6:	4620      	mov	r0, r4
    fab8:	f7ff ff22 	bl	f900 <nvs_flash_erase_sector>
    fabc:	4602      	mov	r2, r0
	if (rc) {
    fabe:	e0a2      	b.n	fc06 <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    fac0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    fac4:	0c36      	lsrs	r6, r6, #16
    fac6:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    fac8:	441e      	add	r6, r3
    faca:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    facc:	aa0e      	add	r2, sp, #56	; 0x38
    face:	4620      	mov	r0, r4
    fad0:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    fad2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    fad6:	f01a ffd0 	bl	2aa7a <nvs_prev_ate>
		if (rc) {
    fada:	4602      	mov	r2, r0
    fadc:	2800      	cmp	r0, #0
    fade:	f040 8092 	bne.w	fc06 <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    fae2:	4620      	mov	r0, r4
    fae4:	a90e      	add	r1, sp, #56	; 0x38
    fae6:	f01a ff90 	bl	2aa0a <nvs_ate_valid>
    faea:	b918      	cbnz	r0, faf4 <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    faec:	9b07      	ldr	r3, [sp, #28]
    faee:	4553      	cmp	r3, sl
    faf0:	d1ec      	bne.n	facc <nvs_gc+0x7c>
    faf2:	e7d9      	b.n	faa8 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    faf4:	6863      	ldr	r3, [r4, #4]
    faf6:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    faf8:	aa10      	add	r2, sp, #64	; 0x40
    fafa:	4620      	mov	r0, r4
    fafc:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    fafe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fb00:	f01a ffbb 	bl	2aa7a <nvs_prev_ate>
			if (rc) {
    fb04:	4602      	mov	r2, r0
    fb06:	2800      	cmp	r0, #0
    fb08:	d17d      	bne.n	fc06 <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    fb0a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    fb0e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fb12:	429a      	cmp	r2, r3
    fb14:	d038      	beq.n	fb88 <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    fb16:	6862      	ldr	r2, [r4, #4]
    fb18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fb1a:	429a      	cmp	r2, r3
    fb1c:	d1ec      	bne.n	faf8 <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    fb1e:	45b2      	cmp	sl, r6
    fb20:	d1e4      	bne.n	faec <nvs_gc+0x9c>
    fb22:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    fb26:	2b00      	cmp	r3, #0
    fb28:	d0e0      	beq.n	faec <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    fb2a:	9305      	str	r3, [sp, #20]
    fb2c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fb30:	2208      	movs	r2, #8
    fb32:	9304      	str	r3, [sp, #16]
    fb34:	4b36      	ldr	r3, [pc, #216]	; (fc10 <nvs_gc+0x1c0>)
    fb36:	4937      	ldr	r1, [pc, #220]	; (fc14 <nvs_gc+0x1c4>)
    fb38:	9303      	str	r3, [sp, #12]
    fb3a:	4b37      	ldr	r3, [pc, #220]	; (fc18 <nvs_gc+0x1c8>)
    fb3c:	9302      	str	r3, [sp, #8]
    fb3e:	2300      	movs	r3, #0
    fb40:	4618      	mov	r0, r3
    fb42:	e9cd 3200 	strd	r3, r2, [sp]
    fb46:	2204      	movs	r2, #4
    fb48:	f01a ff45 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    fb4c:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    fb50:	ea4f 431a 	mov.w	r3, sl, lsr #16
    fb54:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    fb56:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fb58:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    fb5a:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fb5c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    fb60:	f01a ff0b 	bl	2a97a <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    fb64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    fb66:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    fb6a:	681e      	ldr	r6, [r3, #0]
    fb6c:	4276      	negs	r6, r6
	block_size =
    fb6e:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    fb72:	f1b9 0f00 	cmp.w	r9, #0
    fb76:	d10e      	bne.n	fb96 <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    fb78:	4620      	mov	r0, r4
    fb7a:	a90e      	add	r1, sp, #56	; 0x38
    fb7c:	f01b f801 	bl	2ab82 <nvs_flash_ate_wrt>
			if (rc) {
    fb80:	4602      	mov	r2, r0
    fb82:	2800      	cmp	r0, #0
    fb84:	d0b2      	beq.n	faec <nvs_gc+0x9c>
    fb86:	e03e      	b.n	fc06 <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    fb88:	4620      	mov	r0, r4
    fb8a:	a910      	add	r1, sp, #64	; 0x40
    fb8c:	f01a ff3d 	bl	2aa0a <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    fb90:	2800      	cmp	r0, #0
    fb92:	d0c0      	beq.n	fb16 <nvs_gc+0xc6>
    fb94:	e7c3      	b.n	fb1e <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    fb96:	454e      	cmp	r6, r9
    fb98:	46b0      	mov	r8, r6
    fb9a:	bf28      	it	cs
    fb9c:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    fb9e:	aa12      	add	r2, sp, #72	; 0x48
    fba0:	4643      	mov	r3, r8
    fba2:	4639      	mov	r1, r7
    fba4:	4620      	mov	r0, r4
    fba6:	f01a fea3 	bl	2a8f0 <nvs_flash_rd>
		if (rc) {
    fbaa:	4602      	mov	r2, r0
    fbac:	bb58      	cbnz	r0, fc06 <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    fbae:	4643      	mov	r3, r8
    fbb0:	68a1      	ldr	r1, [r4, #8]
    fbb2:	aa12      	add	r2, sp, #72	; 0x48
    fbb4:	4620      	mov	r0, r4
    fbb6:	f01a ffaa 	bl	2ab0e <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    fbba:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    fbbc:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    fbbe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fbc0:	f01a ff19 	bl	2a9f6 <nvs_al_size.isra.0>
    fbc4:	68a3      	ldr	r3, [r4, #8]
    fbc6:	4403      	add	r3, r0
    fbc8:	60a3      	str	r3, [r4, #8]
		if (rc) {
    fbca:	b9e2      	cbnz	r2, fc06 <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    fbcc:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    fbd0:	4447      	add	r7, r8
    fbd2:	e7ce      	b.n	fb72 <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    fbd4:	4620      	mov	r0, r4
    fbd6:	f7ff ff0f 	bl	f9f8 <nvs_add_gc_done_ate>
		if (rc) {
    fbda:	4602      	mov	r2, r0
    fbdc:	2800      	cmp	r0, #0
    fbde:	f43f af69 	beq.w	fab4 <nvs_gc+0x64>
    fbe2:	e010      	b.n	fc06 <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    fbe4:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fbe6:	4620      	mov	r0, r4
    fbe8:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    fbea:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fbec:	f01a ff27 	bl	2aa3e <nvs_close_ate_valid>
    fbf0:	2800      	cmp	r0, #0
    fbf2:	f47f af65 	bne.w	fac0 <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    fbf6:	4620      	mov	r0, r4
    fbf8:	a90a      	add	r1, sp, #40	; 0x28
    fbfa:	f7ff feb5 	bl	f968 <nvs_recover_last_ate>
		if (rc) {
    fbfe:	4602      	mov	r2, r0
    fc00:	2800      	cmp	r0, #0
    fc02:	f43f af63 	beq.w	facc <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    fc06:	4610      	mov	r0, r2
    fc08:	b01b      	add	sp, #108	; 0x6c
    fc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc0e:	bf00      	nop
    fc10:	000352d8 	.word	0x000352d8
    fc14:	00032f68 	.word	0x00032f68
    fc18:	00035196 	.word	0x00035196

0000fc1c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    fc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fc20:	4604      	mov	r4, r0
    fc22:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    fc24:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    fc28:	4638      	mov	r0, r7
    fc2a:	f021 f886 	bl	30d3a <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    fc2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    fc30:	6883      	ldr	r3, [r0, #8]
    fc32:	68db      	ldr	r3, [r3, #12]
    fc34:	4798      	blx	r3
    fc36:	4603      	mov	r3, r0
    fc38:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    fc3a:	b930      	cbnz	r0, fc4a <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    fc3c:	4a90      	ldr	r2, [pc, #576]	; (fe80 <nvs_mount+0x264>)
    fc3e:	9000      	str	r0, [sp, #0]
    fc40:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    fc44:	2201      	movs	r2, #1
    fc46:	498f      	ldr	r1, [pc, #572]	; (fe84 <nvs_mount+0x268>)
    fc48:	e00f      	b.n	fc6a <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    fc4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    fc4c:	6883      	ldr	r3, [r0, #8]
    fc4e:	68db      	ldr	r3, [r3, #12]
    fc50:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    fc52:	6803      	ldr	r3, [r0, #0]
    fc54:	3b01      	subs	r3, #1
    fc56:	2b1f      	cmp	r3, #31
    fc58:	d90f      	bls.n	fc7a <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    fc5a:	4b8b      	ldr	r3, [pc, #556]	; (fe88 <nvs_mount+0x26c>)
    fc5c:	9302      	str	r3, [sp, #8]
    fc5e:	2300      	movs	r3, #0
    fc60:	2201      	movs	r2, #1
    fc62:	4618      	mov	r0, r3
    fc64:	e9cd 3300 	strd	r3, r3, [sp]
    fc68:	4986      	ldr	r1, [pc, #536]	; (fe84 <nvs_mount+0x268>)
    fc6a:	f01a feb4 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    fc6e:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    fc72:	4628      	mov	r0, r5
    fc74:	b00e      	add	sp, #56	; 0x38
    fc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    fc7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fc7c:	6821      	ldr	r1, [r4, #0]
    fc7e:	aa0b      	add	r2, sp, #44	; 0x2c
    fc80:	f01f fdc4 	bl	2f80c <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    fc84:	b108      	cbz	r0, fc8a <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    fc86:	4b81      	ldr	r3, [pc, #516]	; (fe8c <nvs_mount+0x270>)
    fc88:	e7e8      	b.n	fc5c <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    fc8a:	89a5      	ldrh	r5, [r4, #12]
    fc8c:	b12d      	cbz	r5, fc9a <nvs_mount+0x7e>
    fc8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fc90:	fbb5 f2f3 	udiv	r2, r5, r3
    fc94:	fb03 5512 	mls	r5, r3, r2, r5
    fc98:	b10d      	cbz	r5, fc9e <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    fc9a:	4b7d      	ldr	r3, [pc, #500]	; (fe90 <nvs_mount+0x274>)
    fc9c:	e7de      	b.n	fc5c <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    fc9e:	89e3      	ldrh	r3, [r4, #14]
    fca0:	2b01      	cmp	r3, #1
    fca2:	d805      	bhi.n	fcb0 <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    fca4:	4b7b      	ldr	r3, [pc, #492]	; (fe94 <nvs_mount+0x278>)
    fca6:	9500      	str	r5, [sp, #0]
    fca8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    fcac:	462b      	mov	r3, r5
    fcae:	e7c9      	b.n	fc44 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    fcb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    fcb2:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    fcb4:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fcb8:	f04f 33ff 	mov.w	r3, #4294967295
    fcbc:	f04f 32ff 	mov.w	r2, #4294967295
    fcc0:	4638      	mov	r0, r7
    fcc2:	f015 fda3 	bl	2580c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fcc6:	2108      	movs	r1, #8
    fcc8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fcca:	f01a fe94 	bl	2a9f6 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    fcce:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fcd0:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    fcd2:	89e3      	ldrh	r3, [r4, #14]
    fcd4:	fa1f fa85 	uxth.w	sl, r5
    fcd8:	4553      	cmp	r3, sl
    fcda:	d808      	bhi.n	fcee <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    fcdc:	89e3      	ldrh	r3, [r4, #14]
    fcde:	4543      	cmp	r3, r8
    fce0:	d123      	bne.n	fd2a <nvs_mount+0x10e>
	return z_impl_k_mutex_unlock(mutex);
    fce2:	4638      	mov	r0, r7
    fce4:	f015 fe0c 	bl	25900 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    fce8:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    fcec:	e7c1      	b.n	fc72 <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    fcee:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    fcf0:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    fcf2:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    fcf4:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fcf8:	464a      	mov	r2, r9
    fcfa:	2308      	movs	r3, #8
    fcfc:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    fcfe:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fd00:	f01a fe44 	bl	2a98c <nvs_flash_cmp_const>
		if (rc) {
    fd04:	b178      	cbz	r0, fd26 <nvs_mount+0x10a>
			nvs_sector_advance(fs, &addr);
    fd06:	4620      	mov	r0, r4
    fd08:	a906      	add	r1, sp, #24
    fd0a:	f01a fdff 	bl	2a90c <nvs_sector_advance>
			closed_sectors++;
    fd0e:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fd12:	2308      	movs	r3, #8
    fd14:	464a      	mov	r2, r9
    fd16:	4620      	mov	r0, r4
    fd18:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
    fd1a:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fd1e:	f01a fe35 	bl	2a98c <nvs_flash_cmp_const>
			if (!rc) {
    fd22:	2800      	cmp	r0, #0
    fd24:	d0da      	beq.n	fcdc <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    fd26:	3501      	adds	r5, #1
    fd28:	e7d3      	b.n	fcd2 <nvs_mount+0xb6>
	if (i == fs->sector_count) {
    fd2a:	4553      	cmp	r3, sl
    fd2c:	d10b      	bne.n	fd46 <nvs_mount+0x12a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    fd2e:	9906      	ldr	r1, [sp, #24]
    fd30:	2308      	movs	r3, #8
    fd32:	464a      	mov	r2, r9
    fd34:	4620      	mov	r0, r4
    fd36:	1b89      	subs	r1, r1, r6
    fd38:	f01a fe28 	bl	2a98c <nvs_flash_cmp_const>
		if (!rc) {
    fd3c:	b918      	cbnz	r0, fd46 <nvs_mount+0x12a>
			nvs_sector_advance(fs, &addr);
    fd3e:	4620      	mov	r0, r4
    fd40:	a906      	add	r1, sp, #24
    fd42:	f01a fde3 	bl	2a90c <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    fd46:	4620      	mov	r0, r4
    fd48:	a906      	add	r1, sp, #24
    fd4a:	f7ff fe0d 	bl	f968 <nvs_recover_last_ate>
	if (rc) {
    fd4e:	4605      	mov	r5, r0
    fd50:	b118      	cbz	r0, fd5a <nvs_mount+0x13e>
    fd52:	4638      	mov	r0, r7
    fd54:	f015 fdd4 	bl	25900 <z_impl_k_mutex_unlock>
	if (rc) {
    fd58:	e78b      	b.n	fc72 <nvs_mount+0x56>
	fs->ate_wra = addr;
    fd5a:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
    fd5c:	ea4f 4813 	mov.w	r8, r3, lsr #16
    fd60:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
    fd64:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    fd66:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    fd6a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    fd6e:	4299      	cmp	r1, r3
    fd70:	d30f      	bcc.n	fd92 <nvs_mount+0x176>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fd72:	2308      	movs	r3, #8
    fd74:	4620      	mov	r0, r4
    fd76:	aa07      	add	r2, sp, #28
    fd78:	f01a fdba 	bl	2a8f0 <nvs_flash_rd>
		if (rc) {
    fd7c:	4605      	mov	r5, r0
    fd7e:	2800      	cmp	r0, #0
    fd80:	d1e7      	bne.n	fd52 <nvs_mount+0x136>
    fd82:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
    fd84:	f813 2b01 	ldrb.w	r2, [r3], #1
    fd88:	4591      	cmp	r9, r2
    fd8a:	d143      	bne.n	fe14 <nvs_mount+0x1f8>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fd8c:	3501      	adds	r5, #1
    fd8e:	2d08      	cmp	r5, #8
    fd90:	d1f8      	bne.n	fd84 <nvs_mount+0x168>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fd92:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    fd94:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fd96:	0c1b      	lsrs	r3, r3, #16
    fd98:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    fd9a:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fd9c:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
    fd9e:	f01a fdb5 	bl	2a90c <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    fda2:	464a      	mov	r2, r9
    fda4:	4620      	mov	r0, r4
    fda6:	89a3      	ldrh	r3, [r4, #12]
    fda8:	9906      	ldr	r1, [sp, #24]
    fdaa:	f01a fdef 	bl	2a98c <nvs_flash_cmp_const>
	if (rc < 0) {
    fdae:	1e05      	subs	r5, r0, #0
    fdb0:	dbcf      	blt.n	fd52 <nvs_mount+0x136>
		addr = fs->ate_wra + ate_size;
    fdb2:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    fdb4:	f000 8082 	beq.w	febc <nvs_mount+0x2a0>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fdb8:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    fdbc:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fdc0:	89a3      	ldrh	r3, [r4, #12]
    fdc2:	fa1f f288 	uxth.w	r2, r8
    fdc6:	1b9b      	subs	r3, r3, r6
    fdc8:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    fdca:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fdce:	d33d      	bcc.n	fe4c <nvs_mount+0x230>
		LOG_INF("No GC Done marker found: restarting gc");
    fdd0:	4b31      	ldr	r3, [pc, #196]	; (fe98 <nvs_mount+0x27c>)
    fdd2:	2203      	movs	r2, #3
    fdd4:	9302      	str	r3, [sp, #8]
    fdd6:	2300      	movs	r3, #0
    fdd8:	492a      	ldr	r1, [pc, #168]	; (fe84 <nvs_mount+0x268>)
    fdda:	4618      	mov	r0, r3
    fddc:	e9cd 3300 	strd	r3, r3, [sp]
    fde0:	f01a fdf9 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    fde4:	4620      	mov	r0, r4
    fde6:	6861      	ldr	r1, [r4, #4]
    fde8:	f7ff fd8a 	bl	f900 <nvs_flash_erase_sector>
		if (rc) {
    fdec:	4605      	mov	r5, r0
    fdee:	2800      	cmp	r0, #0
    fdf0:	d1af      	bne.n	fd52 <nvs_mount+0x136>
		fs->ate_wra &= ADDR_SECT_MASK;
    fdf2:	6863      	ldr	r3, [r4, #4]
    fdf4:	4a29      	ldr	r2, [pc, #164]	; (fe9c <nvs_mount+0x280>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    fdf6:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    fdf8:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    fdfa:	440b      	add	r3, r1
    fdfc:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    fe00:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    fe02:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    fe04:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    fe06:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    fe08:	f7ff fe22 	bl	fa50 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    fe0c:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fe0e:	2d00      	cmp	r5, #0
    fe10:	d070      	beq.n	fef4 <nvs_mount+0x2d8>
    fe12:	e79e      	b.n	fd52 <nvs_mount+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
    fe14:	4620      	mov	r0, r4
    fe16:	a907      	add	r1, sp, #28
    fe18:	f01a fdf7 	bl	2aa0a <nvs_ate_valid>
    fe1c:	6862      	ldr	r2, [r4, #4]
    fe1e:	b910      	cbnz	r0, fe26 <nvs_mount+0x20a>
		fs->ate_wra -= ate_size;
    fe20:	1b92      	subs	r2, r2, r6
    fe22:	6062      	str	r2, [r4, #4]
    fe24:	e7a1      	b.n	fd6a <nvs_mount+0x14e>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fe26:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    fe2a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    fe2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    fe30:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fe34:	4429      	add	r1, r5
    fe36:	f01a fdde 	bl	2a9f6 <nvs_al_size.isra.0>
    fe3a:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    fe3c:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fe3e:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    fe40:	d1ee      	bne.n	fe20 <nvs_mount+0x204>
    fe42:	2d00      	cmp	r5, #0
    fe44:	d0ec      	beq.n	fe20 <nvs_mount+0x204>
				rc = -ESPIPE;
    fe46:	f06f 051c 	mvn.w	r5, #28
    fe4a:	e090      	b.n	ff6e <nvs_mount+0x352>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fe4c:	2308      	movs	r3, #8
    fe4e:	4641      	mov	r1, r8
    fe50:	4620      	mov	r0, r4
    fe52:	aa09      	add	r2, sp, #36	; 0x24
    fe54:	f01a fd4c 	bl	2a8f0 <nvs_flash_rd>
			if (rc) {
    fe58:	4605      	mov	r5, r0
    fe5a:	2800      	cmp	r0, #0
    fe5c:	f47f af79 	bne.w	fd52 <nvs_mount+0x136>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    fe60:	4620      	mov	r0, r4
    fe62:	a909      	add	r1, sp, #36	; 0x24
    fe64:	f01a fdd1 	bl	2aa0a <nvs_ate_valid>
    fe68:	b138      	cbz	r0, fe7a <nvs_mount+0x25e>
    fe6a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    fe6e:	454b      	cmp	r3, r9
    fe70:	d103      	bne.n	fe7a <nvs_mount+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    fe72:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fe76:	2b00      	cmp	r3, #0
    fe78:	d07f      	beq.n	ff7a <nvs_mount+0x35e>
			addr += ate_size;
    fe7a:	44b0      	add	r8, r6
    fe7c:	e7a0      	b.n	fdc0 <nvs_mount+0x1a4>
    fe7e:	bf00      	nop
    fe80:	000351c0 	.word	0x000351c0
    fe84:	00032f68 	.word	0x00032f68
    fe88:	000351e2 	.word	0x000351e2
    fe8c:	000351ff 	.word	0x000351ff
    fe90:	00035217 	.word	0x00035217
    fe94:	0003522b 	.word	0x0003522b
    fe98:	00035288 	.word	0x00035288
    fe9c:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    fea0:	464a      	mov	r2, r9
    fea2:	4620      	mov	r0, r4
    fea4:	1a5b      	subs	r3, r3, r1
    fea6:	f01a fd71 	bl	2a98c <nvs_flash_cmp_const>
		if (rc < 0) {
    feaa:	1e05      	subs	r5, r0, #0
    feac:	f6ff af51 	blt.w	fd52 <nvs_mount+0x136>
		if (!rc) {
    feb0:	d008      	beq.n	fec4 <nvs_mount+0x2a8>
		fs->data_wra += fs->flash_parameters->write_block_size;
    feb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    feb4:	68a3      	ldr	r3, [r4, #8]
    feb6:	6812      	ldr	r2, [r2, #0]
    feb8:	4413      	add	r3, r2
    feba:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    febc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    fec0:	428b      	cmp	r3, r1
    fec2:	d8ed      	bhi.n	fea0 <nvs_mount+0x284>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    fec4:	6861      	ldr	r1, [r4, #4]
    fec6:	89a3      	ldrh	r3, [r4, #12]
    fec8:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    fecc:	429a      	cmp	r2, r3
    fece:	d19e      	bne.n	fe0e <nvs_mount+0x1f2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    fed0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; ffa8 <nvs_mount+0x38c>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    fed4:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    fed6:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    feda:	429a      	cmp	r2, r3
    fedc:	d097      	beq.n	fe0e <nvs_mount+0x1f2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    fede:	4620      	mov	r0, r4
    fee0:	f7ff fd0e 	bl	f900 <nvs_flash_erase_sector>
		if (rc) {
    fee4:	4605      	mov	r5, r0
    fee6:	2800      	cmp	r0, #0
    fee8:	f47f af33 	bne.w	fd52 <nvs_mount+0x136>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    feec:	6863      	ldr	r3, [r4, #4]
    feee:	ea03 0308 	and.w	r3, r3, r8
    fef2:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    fef4:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fef6:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    fef8:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fefc:	429a      	cmp	r2, r3
    fefe:	d032      	beq.n	ff66 <nvs_mount+0x34a>
    ff00:	4638      	mov	r0, r7
    ff02:	f015 fcfd 	bl	25900 <z_impl_k_mutex_unlock>
	fs->ready = true;
    ff06:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    ff08:	2500      	movs	r5, #0
	fs->ready = true;
    ff0a:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    ff0c:	89a3      	ldrh	r3, [r4, #12]
    ff0e:	4628      	mov	r0, r5
    ff10:	9304      	str	r3, [sp, #16]
    ff12:	89e3      	ldrh	r3, [r4, #14]
    ff14:	2203      	movs	r2, #3
    ff16:	9303      	str	r3, [sp, #12]
    ff18:	4b24      	ldr	r3, [pc, #144]	; (ffac <nvs_mount+0x390>)
    ff1a:	e9cd 5500 	strd	r5, r5, [sp]
    ff1e:	9302      	str	r3, [sp, #8]
    ff20:	4923      	ldr	r1, [pc, #140]	; (ffb0 <nvs_mount+0x394>)
    ff22:	462b      	mov	r3, r5
    ff24:	f01a fd57 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    ff28:	6863      	ldr	r3, [r4, #4]
    ff2a:	4628      	mov	r0, r5
    ff2c:	b29a      	uxth	r2, r3
    ff2e:	0c1b      	lsrs	r3, r3, #16
    ff30:	9303      	str	r3, [sp, #12]
    ff32:	4b20      	ldr	r3, [pc, #128]	; (ffb4 <nvs_mount+0x398>)
    ff34:	9204      	str	r2, [sp, #16]
    ff36:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ff3a:	2203      	movs	r2, #3
    ff3c:	462b      	mov	r3, r5
    ff3e:	491c      	ldr	r1, [pc, #112]	; (ffb0 <nvs_mount+0x394>)
    ff40:	9500      	str	r5, [sp, #0]
    ff42:	f01a fd48 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    ff46:	68a3      	ldr	r3, [r4, #8]
    ff48:	4628      	mov	r0, r5
    ff4a:	b29a      	uxth	r2, r3
    ff4c:	0c1b      	lsrs	r3, r3, #16
    ff4e:	9303      	str	r3, [sp, #12]
    ff50:	4b19      	ldr	r3, [pc, #100]	; (ffb8 <nvs_mount+0x39c>)
    ff52:	9204      	str	r2, [sp, #16]
    ff54:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ff58:	2203      	movs	r2, #3
    ff5a:	462b      	mov	r3, r5
    ff5c:	4914      	ldr	r1, [pc, #80]	; (ffb0 <nvs_mount+0x394>)
    ff5e:	9500      	str	r5, [sp, #0]
    ff60:	f01a fd39 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
	return 0;
    ff64:	e685      	b.n	fc72 <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
    ff66:	4620      	mov	r0, r4
    ff68:	f7ff fd46 	bl	f9f8 <nvs_add_gc_done_ate>
    ff6c:	4605      	mov	r5, r0
    ff6e:	4638      	mov	r0, r7
    ff70:	f015 fcc6 	bl	25900 <z_impl_k_mutex_unlock>
	if (rc) {
    ff74:	2d00      	cmp	r5, #0
    ff76:	d0c6      	beq.n	ff06 <nvs_mount+0x2ea>
    ff78:	e67b      	b.n	fc72 <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
    ff7a:	4b10      	ldr	r3, [pc, #64]	; (ffbc <nvs_mount+0x3a0>)
    ff7c:	2203      	movs	r2, #3
    ff7e:	4628      	mov	r0, r5
    ff80:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ff84:	490a      	ldr	r1, [pc, #40]	; (ffb0 <nvs_mount+0x394>)
    ff86:	462b      	mov	r3, r5
    ff88:	9500      	str	r5, [sp, #0]
    ff8a:	f01a fd24 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ff8e:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    ff90:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ff92:	0c1b      	lsrs	r3, r3, #16
    ff94:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    ff96:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ff98:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
    ff9a:	f01a fcb7 	bl	2a90c <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    ff9e:	4620      	mov	r0, r4
    ffa0:	9906      	ldr	r1, [sp, #24]
    ffa2:	f7ff fcad 	bl	f900 <nvs_flash_erase_sector>
    ffa6:	e731      	b.n	fe0c <nvs_mount+0x1f0>
    ffa8:	ffff0000 	.word	0xffff0000
    ffac:	0003524e 	.word	0x0003524e
    ffb0:	00032f68 	.word	0x00032f68
    ffb4:	00035265 	.word	0x00035265
    ffb8:	00035277 	.word	0x00035277
    ffbc:	000352af 	.word	0x000352af

0000ffc0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    ffc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffc4:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    ffc6:	7c03      	ldrb	r3, [r0, #16]
{
    ffc8:	4604      	mov	r4, r0
    ffca:	4689      	mov	r9, r1
    ffcc:	4690      	mov	r8, r2
    ffce:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    ffd0:	b973      	cbnz	r3, fff0 <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
    ffd2:	4a66      	ldr	r2, [pc, #408]	; (1016c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x16c>)
    ffd4:	4618      	mov	r0, r3
    ffd6:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ffda:	4965      	ldr	r1, [pc, #404]	; (10170 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x170>)
    ffdc:	2201      	movs	r2, #1
    ffde:	9300      	str	r3, [sp, #0]
    ffe0:	f01a fcf9 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    ffe4:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    ffe8:	4630      	mov	r0, r6
    ffea:	b00d      	add	sp, #52	; 0x34
    ffec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fff0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    fff2:	2108      	movs	r1, #8
    fff4:	4610      	mov	r0, r2
    fff6:	f01a fcfe 	bl	2a9f6 <nvs_al_size.isra.0>
    fffa:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    fffc:	4629      	mov	r1, r5
    fffe:	4610      	mov	r0, r2
   10000:	f01a fcf9 	bl	2a9f6 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   10004:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
   10006:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   10008:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   1000c:	42ab      	cmp	r3, r5
   1000e:	f0c0 80a9 	bcc.w	10164 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x164>
   10012:	b11d      	cbz	r5, 1001c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c>
	    ((len > 0) && (data == NULL))) {
   10014:	f1b8 0f00 	cmp.w	r8, #0
   10018:	f000 80a4 	beq.w	10164 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x164>
	wlk_addr = fs->ate_wra;
   1001c:	6863      	ldr	r3, [r4, #4]
   1001e:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   10020:	4620      	mov	r0, r4
   10022:	aa08      	add	r2, sp, #32
   10024:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
   10026:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1002a:	f01a fd26 	bl	2aa7a <nvs_prev_ate>
		if (rc) {
   1002e:	4606      	mov	r6, r0
   10030:	2800      	cmp	r0, #0
   10032:	d1d9      	bne.n	ffe8 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   10034:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10038:	454b      	cmp	r3, r9
   1003a:	d005      	beq.n	10048 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x48>
		if (wlk_addr == fs->ate_wra) {
   1003c:	6862      	ldr	r2, [r4, #4]
   1003e:	9b07      	ldr	r3, [sp, #28]
   10040:	429a      	cmp	r2, r3
   10042:	d1ed      	bne.n	10020 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x20>
		if (len == 0) {
   10044:	b9e5      	cbnz	r5, 10080 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x80>
   10046:	e7cf      	b.n	ffe8 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   10048:	4620      	mov	r0, r4
   1004a:	a908      	add	r1, sp, #32
   1004c:	f01a fcdd 	bl	2aa0a <nvs_ate_valid>
   10050:	2800      	cmp	r0, #0
   10052:	d0f3      	beq.n	1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>
		rd_addr += wlk_ate.offset;
   10054:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
   10058:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
   1005c:	b175      	cbz	r5, 1007c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x7c>
		} else if (len == wlk_ate.len) {
   1005e:	42ab      	cmp	r3, r5
   10060:	d10e      	bne.n	10080 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x80>
		rd_addr &= ADDR_SECT_MASK;
   10062:	ea4f 411b 	mov.w	r1, fp, lsr #16
   10066:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   10068:	4401      	add	r1, r0
   1006a:	462b      	mov	r3, r5
   1006c:	4642      	mov	r2, r8
   1006e:	4620      	mov	r0, r4
   10070:	f01a fc59 	bl	2a926 <nvs_flash_block_cmp>
			if (rc <= 0) {
   10074:	2800      	cmp	r0, #0
   10076:	dc03      	bgt.n	10080 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x80>
   10078:	4606      	mov	r6, r0
   1007a:	e7b5      	b.n	ffe8 <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
   1007c:	2b00      	cmp	r3, #0
   1007e:	d0b3      	beq.n	ffe8 <nvs_write+0x28>
	if (data_size) {
   10080:	2f00      	cmp	r7, #0
   10082:	d13e      	bne.n	10102 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x102>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   10084:	f104 0314 	add.w	r3, r4, #20
   10088:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
   1008a:	f04f 32ff 	mov.w	r2, #4294967295
   1008e:	f04f 33ff 	mov.w	r3, #4294967295
   10092:	f104 0014 	add.w	r0, r4, #20
   10096:	f015 fbb9 	bl	2580c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   1009a:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 10174 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x174>
		if (gc_count == fs->sector_count) {
   1009e:	89e3      	ldrh	r3, [r4, #14]
   100a0:	429e      	cmp	r6, r3
   100a2:	d05c      	beq.n	1015e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x15e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   100a4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   100a8:	18f9      	adds	r1, r7, r3
   100aa:	428a      	cmp	r2, r1
   100ac:	d32c      	bcc.n	10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   100ae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
   100b2:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   100b4:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
   100b6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
   100ba:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
   100be:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
   100c2:	f01a fc5a 	bl	2a97a <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   100c6:	462b      	mov	r3, r5
   100c8:	4642      	mov	r2, r8
   100ca:	68a1      	ldr	r1, [r4, #8]
   100cc:	4620      	mov	r0, r4
   100ce:	f01a fd1e 	bl	2ab0e <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   100d2:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   100d4:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   100d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   100d8:	f01a fc8d 	bl	2a9f6 <nvs_al_size.isra.0>
   100dc:	68a2      	ldr	r2, [r4, #8]
   100de:	4402      	add	r2, r0
   100e0:	60a2      	str	r2, [r4, #8]
	if (rc) {
   100e2:	f1ba 0f00 	cmp.w	sl, #0
   100e6:	d107      	bne.n	100f8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf8>
	rc = nvs_flash_ate_wrt(fs, &entry);
   100e8:	4620      	mov	r0, r4
   100ea:	a90a      	add	r1, sp, #40	; 0x28
   100ec:	f01a fd49 	bl	2ab82 <nvs_flash_ate_wrt>
	rc = len;
   100f0:	2800      	cmp	r0, #0
   100f2:	bf14      	ite	ne
   100f4:	4682      	movne	sl, r0
   100f6:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   100f8:	9805      	ldr	r0, [sp, #20]
   100fa:	f015 fc01 	bl	25900 <z_impl_k_mutex_unlock>
	return rc;
   100fe:	4656      	mov	r6, sl
   10100:	e772      	b.n	ffe8 <nvs_write+0x28>
		required_space = data_size + ate_size;
   10102:	4457      	add	r7, sl
   10104:	b2bf      	uxth	r7, r7
   10106:	e7bd      	b.n	10084 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x84>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10108:	2108      	movs	r1, #8
   1010a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1010c:	f01a fc73 	bl	2a9f6 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   10110:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10114:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
   10118:	2300      	movs	r3, #0
   1011a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1011e:	1813      	adds	r3, r2, r0
   10120:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
   10124:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   10126:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   1012a:	441a      	add	r2, r3
   1012c:	1a10      	subs	r0, r2, r0
   1012e:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   10130:	a80a      	add	r0, sp, #40	; 0x28
   10132:	f01a fc22 	bl	2a97a <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   10136:	a90a      	add	r1, sp, #40	; 0x28
   10138:	4620      	mov	r0, r4
   1013a:	f01a fd22 	bl	2ab82 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1013e:	4620      	mov	r0, r4
   10140:	1d21      	adds	r1, r4, #4
   10142:	f01a fbe3 	bl	2a90c <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   10146:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
   10148:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1014a:	ea03 030b 	and.w	r3, r3, fp
   1014e:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   10150:	f7ff fc7e 	bl	fa50 <nvs_gc>
		if (rc) {
   10154:	4682      	mov	sl, r0
   10156:	2800      	cmp	r0, #0
   10158:	d1ce      	bne.n	100f8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf8>
		gc_count++;
   1015a:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   1015c:	e79f      	b.n	1009e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x9e>
			rc = -ENOSPC;
   1015e:	f06f 0a1b 	mvn.w	sl, #27
   10162:	e7c9      	b.n	100f8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf8>
		return -EINVAL;
   10164:	f06f 0615 	mvn.w	r6, #21
   10168:	e73e      	b.n	ffe8 <nvs_write+0x28>
   1016a:	bf00      	nop
   1016c:	000351ac 	.word	0x000351ac
   10170:	00032f68 	.word	0x00032f68
   10174:	ffff0000 	.word	0xffff0000

00010178 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   10178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1017c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1017e:	7c03      	ldrb	r3, [r0, #16]
{
   10180:	b088      	sub	sp, #32
   10182:	4604      	mov	r4, r0
   10184:	460f      	mov	r7, r1
   10186:	4690      	mov	r8, r2
   10188:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
   1018c:	b96b      	cbnz	r3, 101aa <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
   1018e:	4a2f      	ldr	r2, [pc, #188]	; (1024c <nvs_read_hist+0xd4>)
   10190:	4618      	mov	r0, r3
   10192:	e9cd 3201 	strd	r3, r2, [sp, #4]
   10196:	492e      	ldr	r1, [pc, #184]	; (10250 <nvs_read_hist+0xd8>)
   10198:	2201      	movs	r2, #1
   1019a:	9300      	str	r3, [sp, #0]
   1019c:	f01a fc1b 	bl	2a9d6 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
   101a0:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   101a4:	b008      	add	sp, #32
   101a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   101aa:	2108      	movs	r1, #8
   101ac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   101ae:	f01a fc22 	bl	2a9f6 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   101b2:	89a3      	ldrh	r3, [r4, #12]
   101b4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   101b8:	42b3      	cmp	r3, r6
   101ba:	d343      	bcc.n	10244 <nvs_read_hist+0xcc>
	cnt_his = 0U;
   101bc:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
   101be:	f8d4 a004 	ldr.w	sl, [r4, #4]
   101c2:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   101c6:	454d      	cmp	r5, r9
   101c8:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   101ca:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   101ce:	d909      	bls.n	101e4 <nvs_read_hist+0x6c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   101d0:	6863      	ldr	r3, [r4, #4]
   101d2:	4553      	cmp	r3, sl
   101d4:	d11e      	bne.n	10214 <nvs_read_hist+0x9c>
   101d6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   101da:	42bb      	cmp	r3, r7
   101dc:	d01a      	beq.n	10214 <nvs_read_hist+0x9c>
		return -ENOENT;
   101de:	f06f 0001 	mvn.w	r0, #1
   101e2:	e7df      	b.n	101a4 <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   101e4:	4620      	mov	r0, r4
   101e6:	aa06      	add	r2, sp, #24
   101e8:	a905      	add	r1, sp, #20
   101ea:	f01a fc46 	bl	2aa7a <nvs_prev_ate>
		if (rc) {
   101ee:	2800      	cmp	r0, #0
   101f0:	d1d8      	bne.n	101a4 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   101f2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   101f6:	42bb      	cmp	r3, r7
   101f8:	d106      	bne.n	10208 <nvs_read_hist+0x90>
   101fa:	4620      	mov	r0, r4
   101fc:	a906      	add	r1, sp, #24
   101fe:	f01a fc04 	bl	2aa0a <nvs_ate_valid>
   10202:	b108      	cbz	r0, 10208 <nvs_read_hist+0x90>
			cnt_his++;
   10204:	3501      	adds	r5, #1
   10206:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   10208:	6862      	ldr	r2, [r4, #4]
   1020a:	9b05      	ldr	r3, [sp, #20]
   1020c:	429a      	cmp	r2, r3
   1020e:	d1da      	bne.n	101c6 <nvs_read_hist+0x4e>
		rd_addr = wlk_addr;
   10210:	4651      	mov	r1, sl
   10212:	e7e0      	b.n	101d6 <nvs_read_hist+0x5e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   10214:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   10218:	2b00      	cmp	r3, #0
   1021a:	d0e0      	beq.n	101de <nvs_read_hist+0x66>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1021c:	45a9      	cmp	r9, r5
   1021e:	d8de      	bhi.n	101de <nvs_read_hist+0x66>
	rd_addr += wlk_ate.offset;
   10220:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
   10224:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   10226:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   10228:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1022c:	bf28      	it	cs
   1022e:	4633      	movcs	r3, r6
   10230:	4401      	add	r1, r0
   10232:	4642      	mov	r2, r8
   10234:	4620      	mov	r0, r4
   10236:	f01a fb5b 	bl	2a8f0 <nvs_flash_rd>
	if (rc) {
   1023a:	2800      	cmp	r0, #0
   1023c:	d1b2      	bne.n	101a4 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   1023e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   10242:	e7af      	b.n	101a4 <nvs_read_hist+0x2c>
		return -EINVAL;
   10244:	f06f 0015 	mvn.w	r0, #21
   10248:	e7ac      	b.n	101a4 <nvs_read_hist+0x2c>
   1024a:	bf00      	nop
   1024c:	000351ac 	.word	0x000351ac
   10250:	00032f68 	.word	0x00032f68

00010254 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
   10254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10256:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
   10258:	b960      	cbnz	r0, 10274 <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
   1025a:	4a11      	ldr	r2, [pc, #68]	; (102a0 <ipc_service_open_instance+0x4c>)
   1025c:	9000      	str	r0, [sp, #0]
   1025e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   10262:	4910      	ldr	r1, [pc, #64]	; (102a4 <ipc_service_open_instance+0x50>)
   10264:	2201      	movs	r2, #1
   10266:	f01a fca4 	bl	2abb2 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1026a:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
   1026e:	b005      	add	sp, #20
   10270:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
   10274:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
   10276:	b95b      	cbnz	r3, 10290 <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
   10278:	4a0b      	ldr	r2, [pc, #44]	; (102a8 <ipc_service_open_instance+0x54>)
   1027a:	4618      	mov	r0, r3
   1027c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   10280:	4908      	ldr	r1, [pc, #32]	; (102a4 <ipc_service_open_instance+0x50>)
   10282:	2201      	movs	r2, #1
   10284:	9300      	str	r3, [sp, #0]
   10286:	f01a fc94 	bl	2abb2 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1028a:	f06f 0004 	mvn.w	r0, #4
   1028e:	e7ee      	b.n	1026e <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
   10290:	681b      	ldr	r3, [r3, #0]
   10292:	b11b      	cbz	r3, 1029c <ipc_service_open_instance+0x48>
}
   10294:	b005      	add	sp, #20
   10296:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
   1029a:	4718      	bx	r3
		return 0;
   1029c:	4618      	mov	r0, r3
   1029e:	e7e6      	b.n	1026e <ipc_service_open_instance+0x1a>
   102a0:	00035312 	.word	0x00035312
   102a4:	00032f70 	.word	0x00032f70
   102a8:	00035323 	.word	0x00035323

000102ac <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
   102ac:	b530      	push	{r4, r5, lr}
   102ae:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
   102b0:	b108      	cbz	r0, 102b6 <ipc_service_register_endpoint+0xa>
   102b2:	b101      	cbz	r1, 102b6 <ipc_service_register_endpoint+0xa>
   102b4:	b96a      	cbnz	r2, 102d2 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
   102b6:	4b13      	ldr	r3, [pc, #76]	; (10304 <ipc_service_register_endpoint+0x58>)
   102b8:	2201      	movs	r2, #1
   102ba:	9302      	str	r3, [sp, #8]
   102bc:	2300      	movs	r3, #0
   102be:	4912      	ldr	r1, [pc, #72]	; (10308 <ipc_service_register_endpoint+0x5c>)
   102c0:	4618      	mov	r0, r3
   102c2:	e9cd 3300 	strd	r3, r3, [sp]
   102c6:	f01a fc74 	bl	2abb2 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   102ca:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
   102ce:	b005      	add	sp, #20
   102d0:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
   102d2:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
   102d4:	b10c      	cbz	r4, 102da <ipc_service_register_endpoint+0x2e>
   102d6:	68e5      	ldr	r5, [r4, #12]
   102d8:	b965      	cbnz	r5, 102f4 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
   102da:	4b0c      	ldr	r3, [pc, #48]	; (1030c <ipc_service_register_endpoint+0x60>)
   102dc:	2201      	movs	r2, #1
   102de:	9302      	str	r3, [sp, #8]
   102e0:	2300      	movs	r3, #0
   102e2:	4909      	ldr	r1, [pc, #36]	; (10308 <ipc_service_register_endpoint+0x5c>)
   102e4:	4618      	mov	r0, r3
   102e6:	e9cd 3300 	strd	r3, r3, [sp]
   102ea:	f01a fc62 	bl	2abb2 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   102ee:	f06f 0004 	mvn.w	r0, #4
   102f2:	e7ec      	b.n	102ce <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
   102f4:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
   102f8:	68e3      	ldr	r3, [r4, #12]
}
   102fa:	b005      	add	sp, #20
   102fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
   10300:	4718      	bx	r3
   10302:	bf00      	nop
   10304:	00035341 	.word	0x00035341
   10308:	00032f70 	.word	0x00032f70
   1030c:	00035323 	.word	0x00035323

00010310 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
   10310:	b530      	push	{r4, r5, lr}
   10312:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
   10314:	4604      	mov	r4, r0
{
   10316:	b085      	sub	sp, #20
	if (!ept) {
   10318:	b960      	cbnz	r0, 10334 <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
   1031a:	4b19      	ldr	r3, [pc, #100]	; (10380 <ipc_service_send+0x70>)
   1031c:	9000      	str	r0, [sp, #0]
   1031e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10322:	2201      	movs	r2, #1
   10324:	4603      	mov	r3, r0
   10326:	4917      	ldr	r1, [pc, #92]	; (10384 <ipc_service_send+0x74>)
   10328:	f01a fc43 	bl	2abb2 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1032c:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
   10330:	b005      	add	sp, #20
   10332:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
   10334:	6800      	ldr	r0, [r0, #0]
   10336:	b958      	cbnz	r0, 10350 <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
   10338:	4b13      	ldr	r3, [pc, #76]	; (10388 <ipc_service_send+0x78>)
   1033a:	9000      	str	r0, [sp, #0]
   1033c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10340:	2201      	movs	r2, #1
   10342:	4603      	mov	r3, r0
   10344:	490f      	ldr	r1, [pc, #60]	; (10384 <ipc_service_send+0x74>)
   10346:	f01a fc34 	bl	2abb2 <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
   1034a:	f06f 0001 	mvn.w	r0, #1
   1034e:	e7ef      	b.n	10330 <ipc_service_send+0x20>
	backend = ept->instance->api;
   10350:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
   10352:	b10a      	cbz	r2, 10358 <ipc_service_send+0x48>
   10354:	6895      	ldr	r5, [r2, #8]
   10356:	b965      	cbnz	r5, 10372 <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
   10358:	4b0c      	ldr	r3, [pc, #48]	; (1038c <ipc_service_send+0x7c>)
   1035a:	2201      	movs	r2, #1
   1035c:	9302      	str	r3, [sp, #8]
   1035e:	2300      	movs	r3, #0
   10360:	4908      	ldr	r1, [pc, #32]	; (10384 <ipc_service_send+0x74>)
   10362:	4618      	mov	r0, r3
   10364:	e9cd 3300 	strd	r3, r3, [sp]
   10368:	f01a fc23 	bl	2abb2 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1036c:	f06f 0004 	mvn.w	r0, #4
   10370:	e7de      	b.n	10330 <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
   10372:	460a      	mov	r2, r1
   10374:	46ac      	mov	ip, r5
   10376:	6861      	ldr	r1, [r4, #4]
}
   10378:	b005      	add	sp, #20
   1037a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
   1037e:	4760      	bx	ip
   10380:	0003536d 	.word	0x0003536d
   10384:	00032f70 	.word	0x00032f70
   10388:	0003537e 	.word	0x0003537e
   1038c:	00035323 	.word	0x00035323

00010390 <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
   10390:	2000      	movs	r0, #0
   10392:	4b01      	ldr	r3, [pc, #4]	; (10398 <shared_memory_prepare+0x8>)
   10394:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
   10396:	4770      	bx	lr
   10398:	20070000 	.word	0x20070000

0001039c <advertise_ept>:
{
   1039c:	b530      	push	{r4, r5, lr}
   1039e:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   103a0:	490e      	ldr	r1, [pc, #56]	; (103dc <advertise_ept+0x40>)
{
   103a2:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   103a4:	9102      	str	r1, [sp, #8]
   103a6:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
   103aa:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   103ac:	e9cd 3100 	strd	r3, r1, [sp]
   103b0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   103b4:	f04f 33ff 	mov.w	r3, #4294967295
   103b8:	4620      	mov	r0, r4
   103ba:	f014 fcf1 	bl	24da0 <rpmsg_create_ept>
	if (err != 0) {
   103be:	b950      	cbnz	r0, 103d6 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
   103c0:	2301      	movs	r3, #1
   103c2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
   103c6:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
   103ca:	b123      	cbz	r3, 103d6 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
   103cc:	4620      	mov	r0, r4
}
   103ce:	b005      	add	sp, #20
   103d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
   103d4:	4718      	bx	r3
}
   103d6:	b005      	add	sp, #20
   103d8:	bd30      	pop	{r4, r5, pc}
   103da:	bf00      	nop
   103dc:	0002acc3 	.word	0x0002acc3

000103e0 <get_ept>:
{
   103e0:	b538      	push	{r3, r4, r5, lr}
   103e2:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   103e4:	4611      	mov	r1, r2
{
   103e6:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   103e8:	f01a fc6d 	bl	2acc6 <get_ept_slot_with_name>
	if (ept != NULL) {
   103ec:	4603      	mov	r3, r0
   103ee:	b938      	cbnz	r0, 10400 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
   103f0:	4628      	mov	r0, r5
   103f2:	4904      	ldr	r1, [pc, #16]	; (10404 <get_ept+0x24>)
   103f4:	f01a fc67 	bl	2acc6 <get_ept_slot_with_name>
   103f8:	4603      	mov	r3, r0
	if (ept != NULL) {
   103fa:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
   103fc:	6023      	str	r3, [r4, #0]
}
   103fe:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   10400:	2001      	movs	r0, #1
   10402:	e7fb      	b.n	103fc <get_ept+0x1c>
   10404:	00036445 	.word	0x00036445

00010408 <open>:
{
   10408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1040c:	2301      	movs	r3, #1
   1040e:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
   10410:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   10412:	6846      	ldr	r6, [r0, #4]
{
   10414:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
   10416:	f505 7763 	add.w	r7, r5, #908	; 0x38c
   1041a:	e8d7 2fef 	ldaex	r2, [r7]
   1041e:	2a00      	cmp	r2, #0
   10420:	d103      	bne.n	1042a <open+0x22>
   10422:	e8c7 3fe1 	stlex	r1, r3, [r7]
   10426:	2900      	cmp	r1, #0
   10428:	d1f7      	bne.n	1041a <open+0x12>
   1042a:	f040 80b8 	bne.w	1059e <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   1042e:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10430:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
   10432:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10434:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   10436:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   1043a:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
   1043e:	bf26      	itte	cs
   10440:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
   10444:	fab3 f383 	clzcs	r3, r3
		return 0;
   10448:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
   1044a:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
   1044e:	bf28      	it	cs
   10450:	f1c3 0320 	rsbcs	r3, r3, #32
   10454:	3b01      	subs	r3, #1
	if (num_desc == 0) {
   10456:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
   10458:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
   1045c:	f000 8099 	beq.w	10592 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
   10460:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   10462:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   10464:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
   10466:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   10468:	eb02 0244 	add.w	r2, r2, r4, lsl #1
   1046c:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   1046e:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
   10470:	3209      	adds	r2, #9
   10472:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
   10476:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
   10478:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
   1047c:	440a      	add	r2, r1
	return (buf_size * num);
   1047e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10480:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   10484:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   10486:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   1048a:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
   1048e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10490:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   10492:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   10496:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   1049a:	3303      	adds	r3, #3
   1049c:	4413      	add	r3, r2
   1049e:	f023 0303 	bic.w	r3, r3, #3
   104a2:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
   104a6:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
   104a8:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
   104ac:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
   104b0:	4b3c      	ldr	r3, [pc, #240]	; (105a4 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
   104b2:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
   104b4:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
   104b8:	6831      	ldr	r1, [r6, #0]
   104ba:	f000 fa1d 	bl	108f8 <ipc_static_vrings_init>
	if (err != 0) {
   104be:	4604      	mov	r4, r0
   104c0:	bb30      	cbnz	r0, 10510 <open+0x108>
	const struct backend_config_t *conf = instance->config;
   104c2:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
   104c6:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   104ca:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
   104ce:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   104d2:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
   104d4:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   104d6:	bf08      	it	eq
   104d8:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
   104da:	f020 fd89 	bl	30ff0 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
   104de:	2300      	movs	r3, #0
   104e0:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   104e4:	4930      	ldr	r1, [pc, #192]	; (105a8 <open+0x1a0>)
   104e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   104ea:	eb01 2180 	add.w	r1, r1, r0, lsl #10
   104ee:	9300      	str	r3, [sp, #0]
   104f0:	4658      	mov	r0, fp
   104f2:	4623      	mov	r3, r4
   104f4:	f015 fbf8 	bl	25ce8 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
   104f8:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
   104fc:	492b      	ldr	r1, [pc, #172]	; (105ac <open+0x1a4>)
   104fe:	f020 fd39 	bl	30f74 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
   10502:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
   10506:	6883      	ldr	r3, [r0, #8]
   10508:	685c      	ldr	r4, [r3, #4]
   1050a:	b91c      	cbnz	r4, 10514 <open+0x10c>
		return -ENOSYS;
   1050c:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
   10510:	2100      	movs	r1, #0
   10512:	e037      	b.n	10584 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
   10514:	464b      	mov	r3, r9
   10516:	4a26      	ldr	r2, [pc, #152]	; (105b0 <open+0x1a8>)
   10518:	f8da 1018 	ldr.w	r1, [sl, #24]
   1051c:	47a0      	blx	r4
	if (err != 0) {
   1051e:	4604      	mov	r4, r0
   10520:	2800      	cmp	r0, #0
   10522:	d1f5      	bne.n	10510 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
   10524:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
   10528:	6883      	ldr	r3, [r0, #8]
   1052a:	691b      	ldr	r3, [r3, #16]
   1052c:	2b00      	cmp	r3, #0
   1052e:	d0ed      	beq.n	1050c <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
   10530:	2201      	movs	r2, #1
   10532:	f8da 1018 	ldr.w	r1, [sl, #24]
   10536:	4798      	blx	r3
	if (err != 0) {
   10538:	4604      	mov	r4, r0
   1053a:	2800      	cmp	r0, #0
   1053c:	d1e8      	bne.n	10510 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
   1053e:	4b1d      	ldr	r3, [pc, #116]	; (105b4 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   10540:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
   10542:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
   10546:	4b1c      	ldr	r3, [pc, #112]	; (105b8 <open+0x1b0>)
   10548:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   1054c:	4b1b      	ldr	r3, [pc, #108]	; (105bc <open+0x1b4>)
   1054e:	9303      	str	r3, [sp, #12]
   10550:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
   10554:	9302      	str	r3, [sp, #8]
   10556:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
   1055a:	e9cd 8300 	strd	r8, r3, [sp]
   1055e:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
   10562:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   10564:	f8d5 1388 	ldr.w	r1, [r5, #904]	; 0x388
   10568:	f000 f98e 	bl	10888 <ipc_rpmsg_init>
	if (err != 0) {
   1056c:	4604      	mov	r4, r0
   1056e:	2800      	cmp	r0, #0
   10570:	d1ce      	bne.n	10510 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   10572:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   10576:	f014 fcc1 	bl	24efc <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
   1057a:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   1057c:	f8c5 0390 	str.w	r0, [r5, #912]	; 0x390
	if (data->tx_buffer_size < 0) {
   10580:	db0a      	blt.n	10598 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
   10582:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
   10584:	4638      	mov	r0, r7
   10586:	f01a fbd3 	bl	2ad30 <atomic_set.isra.0>
}
   1058a:	4620      	mov	r0, r4
   1058c:	b005      	add	sp, #20
   1058e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   10592:	f06f 040b 	mvn.w	r4, #11
   10596:	e7bb      	b.n	10510 <open+0x108>
		err = -EINVAL;
   10598:	f06f 0415 	mvn.w	r4, #21
   1059c:	e7b8      	b.n	10510 <open+0x108>
		return -EALREADY;
   1059e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   105a2:	e7f2      	b.n	1058a <open+0x182>
   105a4:	0002ad19 	.word	0x0002ad19
   105a8:	20051ab8 	.word	0x20051ab8
   105ac:	0002acff 	.word	0x0002acff
   105b0:	0002acf3 	.word	0x0002acf3
   105b4:	00010685 	.word	0x00010685
   105b8:	0002add1 	.word	0x0002add1
   105bc:	0002ad61 	.word	0x0002ad61

000105c0 <close>:
{
   105c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   105c4:	4606      	mov	r6, r0
   105c6:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
   105ca:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   105cc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
   105d0:	f505 7763 	add.w	r7, r5, #908	; 0x38c
   105d4:	e8d7 3fef 	ldaex	r3, [r7]
   105d8:	2b02      	cmp	r3, #2
   105da:	d103      	bne.n	105e4 <close+0x24>
   105dc:	e8c7 9fe2 	stlex	r2, r9, [r7]
   105e0:	2a00      	cmp	r2, #0
   105e2:	d1f7      	bne.n	105d4 <close+0x14>
   105e4:	d149      	bne.n	1067a <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
   105e6:	4826      	ldr	r0, [pc, #152]	; (10680 <close+0xc0>)
   105e8:	f105 0140 	add.w	r1, r5, #64	; 0x40
   105ec:	f7f8 ff03 	bl	93f6 <strcmp>
   105f0:	b120      	cbz	r0, 105fc <close+0x3c>
		return -EBUSY;
   105f2:	f06f 040f 	mvn.w	r4, #15
}
   105f6:	4620      	mov	r0, r4
   105f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
   105fc:	4820      	ldr	r0, [pc, #128]	; (10680 <close+0xc0>)
   105fe:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
   10602:	f7f8 fef8 	bl	93f6 <strcmp>
   10606:	2800      	cmp	r0, #0
   10608:	d1f3      	bne.n	105f2 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
   1060a:	4628      	mov	r0, r5
   1060c:	f8d5 1388 	ldr.w	r1, [r5, #904]	; 0x388
   10610:	f01a fc11 	bl	2ae36 <ipc_rpmsg_deinit>
	if (err != 0) {
   10614:	4604      	mov	r4, r0
   10616:	bb70      	cbnz	r0, 10676 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
   10618:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
   1061a:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
   1061c:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
   1061e:	6883      	ldr	r3, [r0, #8]
   10620:	691b      	ldr	r3, [r3, #16]
   10622:	b333      	cbz	r3, 10672 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
   10624:	4622      	mov	r2, r4
   10626:	6989      	ldr	r1, [r1, #24]
   10628:	4798      	blx	r3
	if (err != 0) {
   1062a:	4604      	mov	r4, r0
   1062c:	bb18      	cbnz	r0, 10676 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
   1062e:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
   10632:	4649      	mov	r1, r9
   10634:	4630      	mov	r0, r6
   10636:	f015 fb8f 	bl	25d58 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
   1063a:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
   1063c:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
   10640:	f001 f9ba 	bl	119b8 <z_impl_k_thread_abort>
   10644:	4630      	mov	r0, r6
   10646:	f8d8 1000 	ldr.w	r1, [r8]
   1064a:	f01a fc31 	bl	2aeb0 <ipc_static_vrings_deinit>
	if (err != 0) {
   1064e:	4604      	mov	r4, r0
   10650:	b988      	cbnz	r0, 10676 <close+0xb6>
   10652:	4601      	mov	r1, r0
   10654:	22e8      	movs	r2, #232	; 0xe8
   10656:	4630      	mov	r0, r6
   10658:	f021 f893 	bl	31782 <memset>
   1065c:	4621      	mov	r1, r4
   1065e:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   10662:	4628      	mov	r0, r5
   10664:	f021 f88d 	bl	31782 <memset>
	atomic_set(&data->state, STATE_READY);
   10668:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
   1066a:	4638      	mov	r0, r7
   1066c:	f01a fb60 	bl	2ad30 <atomic_set.isra.0>
	return err;
   10670:	e7c1      	b.n	105f6 <close+0x36>
		return -ENOSYS;
   10672:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
   10676:	2102      	movs	r1, #2
   10678:	e7f7      	b.n	1066a <close+0xaa>
		return -EALREADY;
   1067a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1067e:	e7ba      	b.n	105f6 <close+0x36>
   10680:	00036445 	.word	0x00036445

00010684 <bound_cb>:
{
   10684:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
   10686:	4604      	mov	r4, r0
   10688:	b140      	cbz	r0, 1069c <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   1068a:	2300      	movs	r3, #0
   1068c:	2201      	movs	r2, #1
   1068e:	e9cd 3200 	strd	r3, r2, [sp]
   10692:	4b07      	ldr	r3, [pc, #28]	; (106b0 <bound_cb+0x2c>)
   10694:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   10698:	f014 fb36 	bl	24d08 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
   1069c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1069e:	681b      	ldr	r3, [r3, #0]
   106a0:	b123      	cbz	r3, 106ac <bound_cb+0x28>
		ept->cb->bound(ept->priv);
   106a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
   106a4:	b002      	add	sp, #8
   106a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
   106aa:	4718      	bx	r3
}
   106ac:	b002      	add	sp, #8
   106ae:	bd10      	pop	{r4, pc}
   106b0:	00036445 	.word	0x00036445

000106b4 <send>:
{
   106b4:	b513      	push	{r0, r1, r4, lr}
   106b6:	4604      	mov	r4, r0
   106b8:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   106ba:	6921      	ldr	r1, [r4, #16]
   106bc:	f501 7163 	add.w	r1, r1, #908	; 0x38c
   106c0:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   106c4:	2902      	cmp	r1, #2
   106c6:	d110      	bne.n	106ea <send+0x36>
	if (len == 0) {
   106c8:	b193      	cbz	r3, 106f0 <send+0x3c>
	if (!rpmsg_ept) {
   106ca:	b1a0      	cbz	r0, 106f6 <send+0x42>
   106cc:	2101      	movs	r1, #1
   106ce:	e9cd 3100 	strd	r3, r1, [sp]
   106d2:	4613      	mov	r3, r2
   106d4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   106d8:	f014 fb16 	bl	24d08 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
   106dc:	4b07      	ldr	r3, [pc, #28]	; (106fc <send+0x48>)
		return -ENOMEM;
   106de:	4298      	cmp	r0, r3
   106e0:	bf08      	it	eq
   106e2:	f06f 000b 	mvneq.w	r0, #11
}
   106e6:	b002      	add	sp, #8
   106e8:	bd10      	pop	{r4, pc}
		return -EBUSY;
   106ea:	f06f 000f 	mvn.w	r0, #15
   106ee:	e7fa      	b.n	106e6 <send+0x32>
		return -EBADMSG;
   106f0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   106f4:	e7f7      	b.n	106e6 <send+0x32>
		return -ENOENT;
   106f6:	f06f 0001 	mvn.w	r0, #1
   106fa:	e7f4      	b.n	106e6 <send+0x32>
   106fc:	fffff82e 	.word	0xfffff82e

00010700 <register_ept>:
{
   10700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10704:	4688      	mov	r8, r1
   10706:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
   10708:	6906      	ldr	r6, [r0, #16]
   1070a:	f506 7363 	add.w	r3, r6, #908	; 0x38c
   1070e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   10712:	2b02      	cmp	r3, #2
   10714:	d15f      	bne.n	107d6 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10716:	6813      	ldr	r3, [r2, #0]
   10718:	b923      	cbnz	r3, 10724 <register_ept+0x24>
		return -EINVAL;
   1071a:	f06f 0015 	mvn.w	r0, #21
}
   1071e:	b003      	add	sp, #12
   10720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10724:	781b      	ldrb	r3, [r3, #0]
   10726:	2b00      	cmp	r3, #0
   10728:	d0f7      	beq.n	1071a <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
   1072a:	f8d6 9388 	ldr.w	r9, [r6, #904]	; 0x388
   1072e:	f1b9 0f00 	cmp.w	r9, #0
   10732:	d133      	bne.n	1079c <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   10734:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
   10738:	f04f 32ff 	mov.w	r2, #4294967295
   1073c:	f04f 33ff 	mov.w	r3, #4294967295
   10740:	4638      	mov	r0, r7
   10742:	f015 f863 	bl	2580c <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   10746:	4630      	mov	r0, r6
   10748:	682a      	ldr	r2, [r5, #0]
   1074a:	a901      	add	r1, sp, #4
   1074c:	f7ff fe48 	bl	103e0 <get_ept>
	if (rpmsg_ept == NULL) {
   10750:	9c01      	ldr	r4, [sp, #4]
   10752:	b91c      	cbnz	r4, 1075c <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
   10754:	4638      	mov	r0, r7
   10756:	f01a fae9 	bl	2ad2c <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   1075a:	e7de      	b.n	1071a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   1075c:	f105 0308 	add.w	r3, r5, #8
   10760:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   10762:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
   10764:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
   10768:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
   1076a:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   1076c:	b160      	cbz	r0, 10788 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1076e:	4638      	mov	r0, r7
   10770:	f01a fadc 	bl	2ad2c <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   10774:	4621      	mov	r1, r4
   10776:	4630      	mov	r0, r6
   10778:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1077a:	682a      	ldr	r2, [r5, #0]
   1077c:	f7ff fe0e 	bl	1039c <advertise_ept>
	return 0;
   10780:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
   10782:	f8c8 4000 	str.w	r4, [r8]
	return 0;
   10786:	e7ca      	b.n	1071e <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   10788:	2220      	movs	r2, #32
   1078a:	6829      	ldr	r1, [r5, #0]
   1078c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   10790:	f021 f960 	bl	31a54 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
   10794:	4638      	mov	r0, r7
   10796:	f01a fac9 	bl	2ad2c <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   1079a:	e7f1      	b.n	10780 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
   1079c:	4630      	mov	r0, r6
   1079e:	490f      	ldr	r1, [pc, #60]	; (107dc <register_ept+0xdc>)
   107a0:	f01a fa91 	bl	2acc6 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
   107a4:	4604      	mov	r4, r0
   107a6:	2800      	cmp	r0, #0
   107a8:	d0b7      	beq.n	1071a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   107aa:	f105 0308 	add.w	r3, r5, #8
   107ae:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   107b0:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
   107b2:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
   107b4:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   107b6:	2300      	movs	r3, #0
   107b8:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
   107bc:	2220      	movs	r2, #32
   107be:	6829      	ldr	r1, [r5, #0]
   107c0:	3040      	adds	r0, #64	; 0x40
   107c2:	f021 f947 	bl	31a54 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   107c6:	4622      	mov	r2, r4
   107c8:	2101      	movs	r1, #1
   107ca:	4630      	mov	r0, r6
   107cc:	f000 f83e 	bl	1084c <ipc_rpmsg_register_ept>
	if (err != 0) {
   107d0:	2800      	cmp	r0, #0
   107d2:	d0d5      	beq.n	10780 <register_ept+0x80>
   107d4:	e7a1      	b.n	1071a <register_ept+0x1a>
		return -EBUSY;
   107d6:	f06f 000f 	mvn.w	r0, #15
   107da:	e7a0      	b.n	1071e <register_ept+0x1e>
   107dc:	00036445 	.word	0x00036445

000107e0 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
   107e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107e4:	4605      	mov	r5, r0
   107e6:	460e      	mov	r6, r1
   107e8:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   107ea:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   107ec:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
   107f0:	b085      	sub	sp, #20
   107f2:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
   107f6:	4621      	mov	r1, r4
   107f8:	4630      	mov	r0, r6
   107fa:	f7f8 fdfc 	bl	93f6 <strcmp>
   107fe:	b9e0      	cbnz	r0, 1083a <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10800:	4b11      	ldr	r3, [pc, #68]	; (10848 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
   10802:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10806:	9302      	str	r3, [sp, #8]
   10808:	f8da 3010 	ldr.w	r3, [sl, #16]
   1080c:	4632      	mov	r2, r6
   1080e:	e9cd 8300 	strd	r8, r3, [sp]
   10812:	4629      	mov	r1, r5
   10814:	f04f 33ff 	mov.w	r3, #4294967295
   10818:	4658      	mov	r0, fp
   1081a:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
   1081e:	f014 fabf 	bl	24da0 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
   10822:	b960      	cbnz	r0, 1083e <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
   10824:	2370      	movs	r3, #112	; 0x70
   10826:	2201      	movs	r2, #1
   10828:	fb03 9307 	mla	r3, r3, r7, r9
   1082c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
   10830:	f8da 300c 	ldr.w	r3, [sl, #12]
   10834:	b10b      	cbz	r3, 1083a <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
   10836:	4658      	mov	r0, fp
   10838:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1083a:	3470      	adds	r4, #112	; 0x70
   1083c:	b117      	cbz	r7, 10844 <ns_bind_cb+0x64>
			}
		}
	}
}
   1083e:	b005      	add	sp, #20
   10840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10844:	2701      	movs	r7, #1
   10846:	e7d6      	b.n	107f6 <ns_bind_cb+0x16>
   10848:	0002ae33 	.word	0x0002ae33

0001084c <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
   1084c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1084e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
   10850:	b190      	cbz	r0, 10878 <ipc_rpmsg_register_ept+0x2c>
   10852:	b18a      	cbz	r2, 10878 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
   10854:	2901      	cmp	r1, #1
   10856:	d112      	bne.n	1087e <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
   10858:	4b0a      	ldr	r3, [pc, #40]	; (10884 <ipc_rpmsg_register_ept+0x38>)
   1085a:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   1085e:	9302      	str	r3, [sp, #8]
   10860:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
   10864:	3240      	adds	r2, #64	; 0x40
   10866:	9301      	str	r3, [sp, #4]
   10868:	f04f 33ff 	mov.w	r3, #4294967295
   1086c:	4620      	mov	r0, r4
   1086e:	9300      	str	r3, [sp, #0]
   10870:	f014 fa96 	bl	24da0 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
   10874:	b004      	add	sp, #16
   10876:	bd10      	pop	{r4, pc}
		return -EINVAL;
   10878:	f06f 0015 	mvn.w	r0, #21
   1087c:	e7fa      	b.n	10874 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
   1087e:	2000      	movs	r0, #0
   10880:	e7f8      	b.n	10874 <ipc_rpmsg_register_ept+0x28>
   10882:	bf00      	nop
   10884:	0002ae33 	.word	0x0002ae33

00010888 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
   10888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1088c:	b087      	sub	sp, #28
   1088e:	460e      	mov	r6, r1
   10890:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
   10894:	4614      	mov	r4, r2
   10896:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
   1089a:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
   1089c:	b330      	cbz	r0, 108ec <ipc_rpmsg_init+0x64>
   1089e:	b329      	cbz	r1, 108ec <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
   108a0:	f8df c050 	ldr.w	ip, [pc, #80]	; 108f4 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   108a4:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
   108a8:	2d00      	cmp	r5, #0
   108aa:	bf08      	it	eq
   108ac:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
   108ae:	b99e      	cbnz	r6, 108d8 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
   108b0:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   108b4:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
   108b8:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
   108ba:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   108bc:	f020 f936 	bl	30b2c <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   108c0:	ab03      	add	r3, sp, #12
   108c2:	e9cd 4300 	strd	r4, r3, [sp]
   108c6:	462a      	mov	r2, r5
   108c8:	463b      	mov	r3, r7
   108ca:	4641      	mov	r1, r8
   108cc:	4648      	mov	r0, r9
   108ce:	f014 fb3b 	bl	24f48 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
   108d2:	b007      	add	sp, #28
   108d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   108d8:	2200      	movs	r2, #0
   108da:	4641      	mov	r1, r8
   108dc:	920e      	str	r2, [sp, #56]	; 0x38
   108de:	4648      	mov	r0, r9
   108e0:	462a      	mov	r2, r5
}
   108e2:	b007      	add	sp, #28
   108e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   108e8:	f014 bc58 	b.w	2519c <rpmsg_init_vdev>
		return -EINVAL;
   108ec:	f06f 0015 	mvn.w	r0, #21
   108f0:	e7ef      	b.n	108d2 <ipc_rpmsg_init+0x4a>
   108f2:	bf00      	nop
   108f4:	000107e1 	.word	0x000107e1

000108f8 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
   108f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   108fa:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
   108fc:	4604      	mov	r4, r0
{
   108fe:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
   10900:	2800      	cmp	r0, #0
   10902:	d06f      	beq.n	109e4 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
   10904:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
   10906:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
   10908:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   1090a:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
   1090c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
   10910:	4f36      	ldr	r7, [pc, #216]	; (109ec <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10912:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
   10914:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
   10918:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   1091c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10920:	f04f 33ff 	mov.w	r3, #4294967295
   10924:	9300      	str	r3, [sp, #0]
   10926:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   10928:	f01f fbbe 	bl	300a8 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   1092c:	4a30      	ldr	r2, [pc, #192]	; (109f0 <ipc_static_vrings_init+0xf8>)
   1092e:	ab06      	add	r3, sp, #24
   10930:	e892 0003 	ldmia.w	r2, {r0, r1}
   10934:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
   10938:	4618      	mov	r0, r3
   1093a:	f014 f905 	bl	24b48 <metal_init>
	if (err != 0) {
   1093e:	4605      	mov	r5, r0
   10940:	b9d8      	cbnz	r0, 1097a <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
   10942:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10946:	f014 f8df 	bl	24b08 <metal_register_generic_device>
	if (err != 0) {
   1094a:	4605      	mov	r5, r0
   1094c:	b9a8      	cbnz	r0, 1097a <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
   1094e:	4639      	mov	r1, r7
   10950:	4828      	ldr	r0, [pc, #160]	; (109f4 <ipc_static_vrings_init+0xfc>)
   10952:	aa05      	add	r2, sp, #20
   10954:	f01f fb7a 	bl	3004c <metal_device_open>
	if (err != 0) {
   10958:	4605      	mov	r5, r0
   1095a:	b970      	cbnz	r0, 1097a <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
   1095c:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
   1095e:	689a      	ldr	r2, [r3, #8]
   10960:	b172      	cbz	r2, 10980 <ipc_static_vrings_init+0x88>
   10962:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   10964:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
   10968:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   1096c:	f01a fa92 	bl	2ae94 <virtqueue_allocate>
   10970:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
   10974:	b930      	cbnz	r0, 10984 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
   10976:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
   1097a:	4628      	mov	r0, r5
   1097c:	b009      	add	sp, #36	; 0x24
   1097e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10980:	4603      	mov	r3, r0
   10982:	e7ef      	b.n	10964 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
   10984:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   10988:	f01a fa84 	bl	2ae94 <virtqueue_allocate>
   1098c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
   10990:	2800      	cmp	r0, #0
   10992:	d0f0      	beq.n	10976 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   10994:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   10998:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   1099c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
   109a0:	2304      	movs	r3, #4
   109a2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
   109a6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
   109aa:	2302      	movs	r3, #2
   109ac:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
   109ae:	4b12      	ldr	r3, [pc, #72]	; (109f8 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   109b0:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   109b4:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   109b8:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
   109bc:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   109c0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
   109c4:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
   109c6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   109ca:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   109ce:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   109d2:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
   109d6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
   109da:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
   109de:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
   109e0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
   109e2:	e7ca      	b.n	1097a <ipc_static_vrings_init+0x82>
		return -EINVAL;
   109e4:	f06f 0515 	mvn.w	r5, #21
   109e8:	e7c7      	b.n	1097a <ipc_static_vrings_init+0x82>
   109ea:	bf00      	nop
   109ec:	000353a8 	.word	0x000353a8
   109f0:	00033030 	.word	0x00033030
   109f4:	000353b2 	.word	0x000353b2
   109f8:	000335b8 	.word	0x000335b8

000109fc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   109fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a00:	4605      	mov	r5, r0
	__asm__ volatile(
   10a02:	f04f 0320 	mov.w	r3, #32
   10a06:	f3ef 8611 	mrs	r6, BASEPRI
   10a0a:	f383 8812 	msr	BASEPRI_MAX, r3
   10a0e:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10a12:	f04f 090c 	mov.w	r9, #12
	return list->head;
   10a16:	4b0d      	ldr	r3, [pc, #52]	; (10a4c <pm_state_notify+0x50>)
   10a18:	4f0d      	ldr	r7, [pc, #52]	; (10a50 <pm_state_notify+0x54>)
   10a1a:	681c      	ldr	r4, [r3, #0]
   10a1c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 10a54 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10a20:	b92c      	cbnz	r4, 10a2e <pm_state_notify+0x32>
	__asm__ volatile(
   10a22:	f386 8811 	msr	BASEPRI, r6
   10a26:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   10a2e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   10a32:	2d00      	cmp	r5, #0
   10a34:	bf18      	it	ne
   10a36:	4613      	movne	r3, r2
		if (callback) {
   10a38:	b12b      	cbz	r3, 10a46 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10a3a:	f898 2014 	ldrb.w	r2, [r8, #20]
   10a3e:	fb09 f202 	mul.w	r2, r9, r2
   10a42:	5cb8      	ldrb	r0, [r7, r2]
   10a44:	4798      	blx	r3
	return node->next;
   10a46:	6824      	ldr	r4, [r4, #0]
   10a48:	e7ea      	b.n	10a20 <pm_state_notify+0x24>
   10a4a:	bf00      	nop
   10a4c:	2002f8b8 	.word	0x2002f8b8
   10a50:	2002f8ac 	.word	0x2002f8ac
   10a54:	20030d2c 	.word	0x20030d2c

00010a58 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10a58:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   10a5a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10a5c:	4b16      	ldr	r3, [pc, #88]	; (10ab8 <pm_system_resume+0x60>)
   10a5e:	7d1c      	ldrb	r4, [r3, #20]
   10a60:	f004 031f 	and.w	r3, r4, #31
   10a64:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10a66:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10a68:	4b14      	ldr	r3, [pc, #80]	; (10abc <pm_system_resume+0x64>)
   10a6a:	0961      	lsrs	r1, r4, #5
   10a6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10a70:	e8d3 1fef 	ldaex	r1, [r3]
   10a74:	ea01 0500 	and.w	r5, r1, r0
   10a78:	e8c3 5fe6 	stlex	r6, r5, [r3]
   10a7c:	2e00      	cmp	r6, #0
   10a7e:	d1f7      	bne.n	10a70 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10a80:	420a      	tst	r2, r1
   10a82:	d013      	beq.n	10aac <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   10a84:	4b0e      	ldr	r3, [pc, #56]	; (10ac0 <pm_system_resume+0x68>)
   10a86:	4d0f      	ldr	r5, [pc, #60]	; (10ac4 <pm_system_resume+0x6c>)
   10a88:	b18b      	cbz	r3, 10aae <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10a8a:	230c      	movs	r3, #12
   10a8c:	4363      	muls	r3, r4
   10a8e:	18ea      	adds	r2, r5, r3
   10a90:	7851      	ldrb	r1, [r2, #1]
   10a92:	5ce8      	ldrb	r0, [r5, r3]
   10a94:	f019 fe97 	bl	2a7c6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10a98:	2000      	movs	r0, #0
   10a9a:	f7ff ffaf 	bl	109fc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10a9e:	230c      	movs	r3, #12
   10aa0:	435c      	muls	r4, r3
   10aa2:	2300      	movs	r3, #0
   10aa4:	192a      	adds	r2, r5, r4
   10aa6:	512b      	str	r3, [r5, r4]
   10aa8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10aac:	bd70      	pop	{r4, r5, r6, pc}
   10aae:	f383 8811 	msr	BASEPRI, r3
   10ab2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10ab6:	e7ef      	b.n	10a98 <pm_system_resume+0x40>
   10ab8:	20030d2c 	.word	0x20030d2c
   10abc:	2002f8c0 	.word	0x2002f8c0
   10ac0:	0002a7c7 	.word	0x0002a7c7
   10ac4:	2002f8ac 	.word	0x2002f8ac

00010ac8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10acc:	4b32      	ldr	r3, [pc, #200]	; (10b98 <pm_system_suspend+0xd0>)
{
   10ace:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10ad0:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   10ad2:	f04f 0320 	mov.w	r3, #32
   10ad6:	f3ef 8811 	mrs	r8, BASEPRI
   10ada:	f383 8812 	msr	BASEPRI_MAX, r3
   10ade:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10ae2:	240c      	movs	r4, #12
   10ae4:	436c      	muls	r4, r5
   10ae6:	4b2d      	ldr	r3, [pc, #180]	; (10b9c <pm_system_suspend+0xd4>)
   10ae8:	4e2d      	ldr	r6, [pc, #180]	; (10ba0 <pm_system_suspend+0xd8>)
   10aea:	5d19      	ldrb	r1, [r3, r4]
   10aec:	191a      	adds	r2, r3, r4
   10aee:	2900      	cmp	r1, #0
   10af0:	d047      	beq.n	10b82 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10af2:	ca07      	ldmia	r2, {r0, r1, r2}
   10af4:	eb06 0c04 	add.w	ip, r6, r4
   10af8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10afc:	2200      	movs	r2, #0
   10afe:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   10b00:	f388 8811 	msr	BASEPRI, r8
   10b04:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10b08:	230c      	movs	r3, #12
   10b0a:	436b      	muls	r3, r5
   10b0c:	5cf0      	ldrb	r0, [r6, r3]
   10b0e:	18f2      	adds	r2, r6, r3
   10b10:	b3a8      	cbz	r0, 10b7e <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10b12:	1c7b      	adds	r3, r7, #1
   10b14:	d010      	beq.n	10b38 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10b16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10b1a:	2100      	movs	r1, #0
   10b1c:	f8d2 c008 	ldr.w	ip, [r2, #8]
   10b20:	4c20      	ldr	r4, [pc, #128]	; (10ba4 <pm_system_suspend+0xdc>)
   10b22:	2300      	movs	r3, #0
   10b24:	fbec 4100 	umlal	r4, r1, ip, r0
   10b28:	4a1f      	ldr	r2, [pc, #124]	; (10ba8 <pm_system_suspend+0xe0>)
   10b2a:	4620      	mov	r0, r4
   10b2c:	f7f8 fa08 	bl	8f40 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10b30:	2101      	movs	r1, #1
   10b32:	1a38      	subs	r0, r7, r0
   10b34:	f020 fbf1 	bl	3131a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10b38:	f015 fbba 	bl	262b0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10b3c:	2001      	movs	r0, #1
   10b3e:	f7ff ff5d 	bl	109fc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10b42:	4b1a      	ldr	r3, [pc, #104]	; (10bac <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10b44:	096a      	lsrs	r2, r5, #5
   10b46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10b4a:	2201      	movs	r2, #1
   10b4c:	f005 011f 	and.w	r1, r5, #31
   10b50:	408a      	lsls	r2, r1
   10b52:	e8d3 0fef 	ldaex	r0, [r3]
   10b56:	4310      	orrs	r0, r2
   10b58:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10b5c:	2900      	cmp	r1, #0
   10b5e:	d1f8      	bne.n	10b52 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
   10b60:	4b13      	ldr	r3, [pc, #76]	; (10bb0 <pm_system_suspend+0xe8>)
   10b62:	b13b      	cbz	r3, 10b74 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
   10b64:	230c      	movs	r3, #12
   10b66:	fb03 f005 	mul.w	r0, r3, r5
   10b6a:	1833      	adds	r3, r6, r0
   10b6c:	7859      	ldrb	r1, [r3, #1]
   10b6e:	5c30      	ldrb	r0, [r6, r0]
   10b70:	f019 fe1d 	bl	2a7ae <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10b74:	f7ff ff70 	bl	10a58 <pm_system_resume>
	k_sched_unlock();
   10b78:	f015 fbae 	bl	262d8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   10b7c:	2001      	movs	r0, #1
}
   10b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   10b82:	4601      	mov	r1, r0
   10b84:	4628      	mov	r0, r5
   10b86:	f000 f815 	bl	10bb4 <pm_policy_next_state>
		if (info != NULL) {
   10b8a:	2800      	cmp	r0, #0
   10b8c:	d0b8      	beq.n	10b00 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   10b8e:	c807      	ldmia	r0, {r0, r1, r2}
   10b90:	4434      	add	r4, r6
   10b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10b96:	e7b3      	b.n	10b00 <pm_system_suspend+0x38>
   10b98:	20030d2c 	.word	0x20030d2c
   10b9c:	2002f8a0 	.word	0x2002f8a0
   10ba0:	2002f8ac 	.word	0x2002f8ac
   10ba4:	000f423f 	.word	0x000f423f
   10ba8:	000f4240 	.word	0x000f4240
   10bac:	2002f8c0 	.word	0x2002f8c0
   10bb0:	0002a7af 	.word	0x0002a7af

00010bb4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bb8:	b085      	sub	sp, #20
   10bba:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10bbc:	a903      	add	r1, sp, #12
   10bbe:	f000 f843 	bl	10c48 <pm_state_cpu_get_all>
   10bc2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10bc6:	4604      	mov	r4, r0
   10bc8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10bcc:	4b1b      	ldr	r3, [pc, #108]	; (10c3c <pm_policy_next_state+0x88>)
   10bce:	9d03      	ldr	r5, [sp, #12]
   10bd0:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10bd4:	1e43      	subs	r3, r0, #1
   10bd6:	b21b      	sxth	r3, r3
   10bd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10bdc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10c40 <pm_policy_next_state+0x8c>
   10be0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10be4:	b924      	cbnz	r4, 10bf0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10be6:	46a1      	mov	r9, r4
}
   10be8:	4648      	mov	r0, r9
   10bea:	b005      	add	sp, #20
   10bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bf0:	46c4      	mov	ip, r8
   10bf2:	4659      	mov	r1, fp
   10bf4:	6868      	ldr	r0, [r5, #4]
   10bf6:	2300      	movs	r3, #0
   10bf8:	fbe0 c107 	umlal	ip, r1, r0, r7
   10bfc:	4a11      	ldr	r2, [pc, #68]	; (10c44 <pm_policy_next_state+0x90>)
   10bfe:	4660      	mov	r0, ip
   10c00:	f7f8 f99e 	bl	8f40 <__aeabi_uldivmod>
   10c04:	46c4      	mov	ip, r8
   10c06:	4659      	mov	r1, fp
   10c08:	9001      	str	r0, [sp, #4]
   10c0a:	68a8      	ldr	r0, [r5, #8]
   10c0c:	2300      	movs	r3, #0
   10c0e:	fbe0 c107 	umlal	ip, r1, r0, r7
   10c12:	4a0c      	ldr	r2, [pc, #48]	; (10c44 <pm_policy_next_state+0x90>)
   10c14:	4660      	mov	r0, ip
   10c16:	f7f8 f993 	bl	8f40 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10c1a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   10c1e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10c20:	d001      	beq.n	10c26 <pm_policy_next_state+0x72>
   10c22:	4582      	cmp	sl, r0
   10c24:	d905      	bls.n	10c32 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10c26:	1c73      	adds	r3, r6, #1
   10c28:	d0de      	beq.n	10be8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   10c2a:	9b01      	ldr	r3, [sp, #4]
   10c2c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10c2e:	42b0      	cmp	r0, r6
   10c30:	d9da      	bls.n	10be8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10c32:	3c01      	subs	r4, #1
   10c34:	b2a4      	uxth	r4, r4
   10c36:	3d0c      	subs	r5, #12
   10c38:	e7d4      	b.n	10be4 <pm_policy_next_state+0x30>
   10c3a:	bf00      	nop
   10c3c:	200084a8 	.word	0x200084a8
   10c40:	000f423f 	.word	0x000f423f
   10c44:	000f4240 	.word	0x000f4240

00010c48 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10c48:	b908      	cbnz	r0, 10c4e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10c4a:	4b02      	ldr	r3, [pc, #8]	; (10c54 <pm_state_cpu_get_all+0xc>)
   10c4c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10c4e:	2000      	movs	r0, #0
   10c50:	4770      	bx	lr
   10c52:	bf00      	nop
   10c54:	000335dc 	.word	0x000335dc

00010c58 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10c58:	4b03      	ldr	r3, [pc, #12]	; (10c68 <nus_ccc_cfg_changed+0x10>)
   10c5a:	689b      	ldr	r3, [r3, #8]
   10c5c:	b11b      	cbz	r3, 10c66 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   10c5e:	1e48      	subs	r0, r1, #1
   10c60:	bf18      	it	ne
   10c62:	2001      	movne	r0, #1
   10c64:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   10c66:	4770      	bx	lr
   10c68:	2002f8c4 	.word	0x2002f8c4

00010c6c <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   10c6c:	b510      	push	{r4, lr}
   10c6e:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   10c70:	4b03      	ldr	r3, [pc, #12]	; (10c80 <on_receive+0x14>)
{
   10c72:	4611      	mov	r1, r2
	if (nus_cb.received) {
   10c74:	681b      	ldr	r3, [r3, #0]
   10c76:	b10b      	cbz	r3, 10c7c <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   10c78:	4622      	mov	r2, r4
   10c7a:	4798      	blx	r3
}
	return len;
}
   10c7c:	4620      	mov	r0, r4
   10c7e:	bd10      	pop	{r4, pc}
   10c80:	2002f8c4 	.word	0x2002f8c4

00010c84 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   10c84:	4b02      	ldr	r3, [pc, #8]	; (10c90 <on_sent+0xc>)
   10c86:	685b      	ldr	r3, [r3, #4]
   10c88:	b103      	cbz	r3, 10c8c <on_sent+0x8>
		nus_cb.sent(conn);
   10c8a:	4718      	bx	r3
	}
}
   10c8c:	4770      	bx	lr
   10c8e:	bf00      	nop
   10c90:	2002f8c4 	.word	0x2002f8c4

00010c94 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   10c94:	b130      	cbz	r0, 10ca4 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   10c96:	4b04      	ldr	r3, [pc, #16]	; (10ca8 <bt_nus_init+0x14>)
   10c98:	6802      	ldr	r2, [r0, #0]
   10c9a:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   10c9c:	6842      	ldr	r2, [r0, #4]
   10c9e:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   10ca0:	6882      	ldr	r2, [r0, #8]
   10ca2:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   10ca4:	2000      	movs	r0, #0
   10ca6:	4770      	bx	lr
   10ca8:	2002f8c4 	.word	0x2002f8c4

00010cac <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   10cac:	b570      	push	{r4, r5, r6, lr}
   10cae:	460e      	mov	r6, r1
   10cb0:	4615      	mov	r5, r2
   10cb2:	4604      	mov	r4, r0
   10cb4:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   10cb6:	2100      	movs	r1, #0
   10cb8:	2218      	movs	r2, #24
   10cba:	4668      	mov	r0, sp
   10cbc:	f020 fd61 	bl	31782 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   10cc0:	490b      	ldr	r1, [pc, #44]	; (10cf0 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   10cc2:	4b0c      	ldr	r3, [pc, #48]	; (10cf4 <bt_nus_send+0x48>)
	params.data = data;
   10cc4:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   10cc8:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   10ccc:	9304      	str	r3, [sp, #16]

	if (!conn) {
   10cce:	b92c      	cbnz	r4, 10cdc <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10cd0:	4669      	mov	r1, sp
   10cd2:	4620      	mov	r0, r4
   10cd4:	f00d fc02 	bl	1e4dc <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10cd8:	b006      	add	sp, #24
   10cda:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   10cdc:	2201      	movs	r2, #1
   10cde:	4620      	mov	r0, r4
   10ce0:	f01d fe3a 	bl	2e958 <bt_gatt_is_subscribed>
   10ce4:	2800      	cmp	r0, #0
   10ce6:	d1f3      	bne.n	10cd0 <bt_nus_send+0x24>
		return -EINVAL;
   10ce8:	f06f 0015 	mvn.w	r0, #21
   10cec:	e7f4      	b.n	10cd8 <bt_nus_send+0x2c>
   10cee:	bf00      	nop
   10cf0:	00033604 	.word	0x00033604
   10cf4:	00010c85 	.word	0x00010c85

00010cf8 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10cf8:	4904      	ldr	r1, [pc, #16]	; (10d0c <sub_bytes+0x14>)
   10cfa:	1e43      	subs	r3, r0, #1
   10cfc:	300f      	adds	r0, #15
   10cfe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10d02:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10d04:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10d06:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10d08:	d1f9      	bne.n	10cfe <sub_bytes+0x6>
	}
}
   10d0a:	4770      	bx	lr
   10d0c:	000353c4 	.word	0x000353c4

00010d10 <tc_aes128_set_encrypt_key>:
{
   10d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d12:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10d14:	4e26      	ldr	r6, [pc, #152]	; (10db0 <tc_aes128_set_encrypt_key+0xa0>)
{
   10d16:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10d18:	ad01      	add	r5, sp, #4
{
   10d1a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10d1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10d20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10d24:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10d28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   10d2c:	4638      	mov	r0, r7
   10d2e:	2f00      	cmp	r7, #0
   10d30:	d039      	beq.n	10da6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10d32:	2c00      	cmp	r4, #0
   10d34:	d039      	beq.n	10daa <tc_aes128_set_encrypt_key+0x9a>
   10d36:	1f38      	subs	r0, r7, #4
   10d38:	4602      	mov	r2, r0
   10d3a:	4621      	mov	r1, r4
   10d3c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10d3e:	784b      	ldrb	r3, [r1, #1]
   10d40:	780d      	ldrb	r5, [r1, #0]
   10d42:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10d44:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10d48:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   10d4a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10d4c:	432b      	orrs	r3, r5
   10d4e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10d52:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10d54:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10d58:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10d5c:	d1ef      	bne.n	10d3e <tc_aes128_set_encrypt_key+0x2e>
   10d5e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10d60:	4c14      	ldr	r4, [pc, #80]	; (10db4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   10d62:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10d64:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10d66:	d116      	bne.n	10d96 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10d68:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10d6c:	5ca5      	ldrb	r5, [r4, r2]
   10d6e:	0e1a      	lsrs	r2, r3, #24
   10d70:	5ca2      	ldrb	r2, [r4, r2]
   10d72:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   10d76:	f3c3 2507 	ubfx	r5, r3, #8, #8
   10d7a:	5d65      	ldrb	r5, [r4, r5]
   10d7c:	b2db      	uxtb	r3, r3
   10d7e:	5ce3      	ldrb	r3, [r4, r3]
   10d80:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10d84:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10d88:	f021 0303 	bic.w	r3, r1, #3
   10d8c:	3330      	adds	r3, #48	; 0x30
   10d8e:	446b      	add	r3, sp
   10d90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10d94:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   10d96:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   10d9a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10d9c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10d9e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10da0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10da2:	d1de      	bne.n	10d62 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   10da4:	2001      	movs	r0, #1
}
   10da6:	b00d      	add	sp, #52	; 0x34
   10da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   10daa:	4620      	mov	r0, r4
   10dac:	e7fb      	b.n	10da6 <tc_aes128_set_encrypt_key+0x96>
   10dae:	bf00      	nop
   10db0:	00033038 	.word	0x00033038
   10db4:	000353c4 	.word	0x000353c4

00010db8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   10db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10dbc:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10dbe:	6803      	ldr	r3, [r0, #0]
{
   10dc0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10dc2:	9302      	str	r3, [sp, #8]
   10dc4:	6843      	ldr	r3, [r0, #4]
   10dc6:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 10f84 <compress+0x1cc>
   10dca:	9303      	str	r3, [sp, #12]
   10dcc:	6883      	ldr	r3, [r0, #8]
   10dce:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   10dd2:	9304      	str	r3, [sp, #16]
   10dd4:	68c3      	ldr	r3, [r0, #12]
   10dd6:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10dd8:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10dda:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10dde:	9306      	str	r3, [sp, #24]
   10de0:	6943      	ldr	r3, [r0, #20]
   10de2:	9307      	str	r3, [sp, #28]
   10de4:	6983      	ldr	r3, [r0, #24]
   10de6:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   10dea:	9308      	str	r3, [sp, #32]
   10dec:	69c3      	ldr	r3, [r0, #28]
   10dee:	4698      	mov	r8, r3
   10df0:	9309      	str	r3, [sp, #36]	; 0x24
   10df2:	9b08      	ldr	r3, [sp, #32]
   10df4:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   10df6:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   10df8:	ab0c      	add	r3, sp, #48	; 0x30
   10dfa:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10dfc:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   10e00:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   10e02:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10e06:	44a9      	add	r9, r5
   10e08:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   10e0c:	9d00      	ldr	r5, [sp, #0]
   10e0e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   10e12:	444b      	add	r3, r9
   10e14:	ea25 0502 	bic.w	r5, r5, r2
   10e18:	ea02 090c 	and.w	r9, r2, ip
   10e1c:	ea85 0509 	eor.w	r5, r5, r9
   10e20:	442b      	add	r3, r5
   10e22:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   10e24:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   10e28:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   10e2c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10e30:	4025      	ands	r5, r4
   10e32:	ea06 090b 	and.w	r9, r6, fp
   10e36:	ea85 0509 	eor.w	r5, r5, r9
   10e3a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   10e3e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10e40:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   10e42:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   10e44:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   10e48:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   10e4a:	46de      	mov	lr, fp
   10e4c:	f8dd 8000 	ldr.w	r8, [sp]
   10e50:	f040 8088 	bne.w	10f64 <compress+0x1ac>
   10e54:	f04f 0a10 	mov.w	sl, #16
   10e58:	494b      	ldr	r1, [pc, #300]	; (10f88 <compress+0x1d0>)
   10e5a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   10e5c:	4651      	mov	r1, sl
   10e5e:	f10a 0a01 	add.w	sl, sl, #1
   10e62:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10e66:	f00a 070f 	and.w	r7, sl, #15
   10e6a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10e6e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10e72:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   10e76:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   10e7a:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   10e7c:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   10e80:	f101 070e 	add.w	r7, r1, #14
   10e84:	f007 070f 	and.w	r7, r7, #15
   10e88:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10e8c:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10e90:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   10e92:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   10e96:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   10e9a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10e9e:	f001 010f 	and.w	r1, r1, #15
   10ea2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10ea6:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   10eaa:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   10eae:	f859 ec40 	ldr.w	lr, [r9, #-64]
   10eb2:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   10eb6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10eba:	4471      	add	r1, lr
		s0 = sigma0(s0);
   10ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
   10ec0:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   10ec4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10ec8:	4441      	add	r1, r8
		s1 = sigma1(s1);
   10eca:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10ece:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10ed0:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10ed4:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10ed8:	ea2c 0705 	bic.w	r7, ip, r5
   10edc:	ea87 0708 	eor.w	r7, r7, r8
   10ee0:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10ee4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10ee8:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   10eec:	4477      	add	r7, lr
   10eee:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10ef2:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10ef6:	4477      	add	r7, lr
   10ef8:	440f      	add	r7, r1
   10efa:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   10efc:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10f00:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   10f02:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10f06:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   10f0a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   10f0e:	ea07 0703 	and.w	r7, r7, r3
   10f12:	ea04 0806 	and.w	r8, r4, r6
   10f16:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   10f1a:	ea87 0708 	eor.w	r7, r7, r8
   10f1e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10f20:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   10f22:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   10f26:	f8cd c000 	str.w	ip, [sp]
   10f2a:	46b3      	mov	fp, r6
   10f2c:	d122      	bne.n	10f74 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   10f2e:	9902      	ldr	r1, [sp, #8]
   10f30:	4439      	add	r1, r7
   10f32:	6001      	str	r1, [r0, #0]
   10f34:	9903      	ldr	r1, [sp, #12]
   10f36:	4419      	add	r1, r3
   10f38:	9b04      	ldr	r3, [sp, #16]
   10f3a:	6041      	str	r1, [r0, #4]
   10f3c:	4423      	add	r3, r4
   10f3e:	6083      	str	r3, [r0, #8]
   10f40:	9b05      	ldr	r3, [sp, #20]
   10f42:	4433      	add	r3, r6
   10f44:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   10f46:	9b06      	ldr	r3, [sp, #24]
   10f48:	4473      	add	r3, lr
   10f4a:	6103      	str	r3, [r0, #16]
   10f4c:	9b07      	ldr	r3, [sp, #28]
   10f4e:	442b      	add	r3, r5
   10f50:	6143      	str	r3, [r0, #20]
   10f52:	9b08      	ldr	r3, [sp, #32]
   10f54:	4413      	add	r3, r2
   10f56:	6183      	str	r3, [r0, #24]
   10f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f5a:	4463      	add	r3, ip
   10f5c:	61c3      	str	r3, [r0, #28]
}
   10f5e:	b01d      	add	sp, #116	; 0x74
   10f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f64:	46b3      	mov	fp, r6
   10f66:	f8cd c000 	str.w	ip, [sp]
   10f6a:	4626      	mov	r6, r4
   10f6c:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   10f6e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10f70:	462a      	mov	r2, r5
   10f72:	e740      	b.n	10df6 <compress+0x3e>
   10f74:	4694      	mov	ip, r2
   10f76:	4626      	mov	r6, r4
   10f78:	462a      	mov	r2, r5
   10f7a:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10f7c:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   10f7e:	463b      	mov	r3, r7
   10f80:	e76c      	b.n	10e5c <compress+0xa4>
   10f82:	bf00      	nop
   10f84:	00033654 	.word	0x00033654
   10f88:	00033690 	.word	0x00033690

00010f8c <tc_sha256_init>:
{
   10f8c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   10f8e:	4604      	mov	r4, r0
   10f90:	b1c8      	cbz	r0, 10fc6 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   10f92:	2270      	movs	r2, #112	; 0x70
   10f94:	2100      	movs	r1, #0
   10f96:	f019 ffc8 	bl	2af2a <_set>
	s->iv[1] = 0xbb67ae85;
   10f9a:	4b0b      	ldr	r3, [pc, #44]	; (10fc8 <tc_sha256_init+0x3c>)
   10f9c:	4a0b      	ldr	r2, [pc, #44]	; (10fcc <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   10f9e:	490c      	ldr	r1, [pc, #48]	; (10fd0 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   10fa0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   10fa4:	4b0b      	ldr	r3, [pc, #44]	; (10fd4 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   10fa6:	480c      	ldr	r0, [pc, #48]	; (10fd8 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   10fa8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   10fac:	4b0b      	ldr	r3, [pc, #44]	; (10fdc <tc_sha256_init+0x50>)
   10fae:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   10fb2:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   10fb4:	4b0a      	ldr	r3, [pc, #40]	; (10fe0 <tc_sha256_init+0x54>)
   10fb6:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   10fb8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   10fbc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   10fc0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   10fc4:	61e3      	str	r3, [r4, #28]
}
   10fc6:	bd10      	pop	{r4, pc}
   10fc8:	bb67ae85 	.word	0xbb67ae85
   10fcc:	6a09e667 	.word	0x6a09e667
   10fd0:	3c6ef372 	.word	0x3c6ef372
   10fd4:	a54ff53a 	.word	0xa54ff53a
   10fd8:	510e527f 	.word	0x510e527f
   10fdc:	9b05688c 	.word	0x9b05688c
   10fe0:	1f83d9ab 	.word	0x1f83d9ab

00010fe4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10fe4:	4901      	ldr	r1, [pc, #4]	; (10fec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10fe6:	2210      	movs	r2, #16
	str	r2, [r1]
   10fe8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   10fea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   10fec:	e000ed10 	.word	0xe000ed10

00010ff0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10ff0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10ff2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10ff4:	f380 8811 	msr	BASEPRI, r0
	isb
   10ff8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   10ffc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11000:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   11002:	b662      	cpsie	i
	isb
   11004:	f3bf 8f6f 	isb	sy

	bx	lr
   11008:	4770      	bx	lr
   1100a:	bf00      	nop

0001100c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1100c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1100e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11010:	f381 8811 	msr	BASEPRI, r1

	wfe
   11014:	bf20      	wfe

	msr	BASEPRI, r0
   11016:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1101a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1101c:	4770      	bx	lr
   1101e:	bf00      	nop

00011020 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11020:	b570      	push	{r4, r5, r6, lr}
   11022:	4606      	mov	r6, r0

	if (esf != NULL) {
   11024:	460d      	mov	r5, r1
{
   11026:	b086      	sub	sp, #24
	if (esf != NULL) {
   11028:	2900      	cmp	r1, #0
   1102a:	d038      	beq.n	1109e <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1102c:	2400      	movs	r4, #0
   1102e:	688b      	ldr	r3, [r1, #8]
   11030:	2201      	movs	r2, #1
   11032:	9305      	str	r3, [sp, #20]
   11034:	684b      	ldr	r3, [r1, #4]
   11036:	4620      	mov	r0, r4
   11038:	9304      	str	r3, [sp, #16]
   1103a:	680b      	ldr	r3, [r1, #0]
   1103c:	491b      	ldr	r1, [pc, #108]	; (110ac <z_arm_fatal_error+0x8c>)
   1103e:	9303      	str	r3, [sp, #12]
   11040:	4b1b      	ldr	r3, [pc, #108]	; (110b0 <z_arm_fatal_error+0x90>)
   11042:	e9cd 4400 	strd	r4, r4, [sp]
   11046:	9302      	str	r3, [sp, #8]
   11048:	4623      	mov	r3, r4
   1104a:	f01a fbac 	bl	2b7a6 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1104e:	696b      	ldr	r3, [r5, #20]
   11050:	2201      	movs	r2, #1
   11052:	9305      	str	r3, [sp, #20]
   11054:	692b      	ldr	r3, [r5, #16]
   11056:	4620      	mov	r0, r4
   11058:	9304      	str	r3, [sp, #16]
   1105a:	68eb      	ldr	r3, [r5, #12]
   1105c:	4913      	ldr	r1, [pc, #76]	; (110ac <z_arm_fatal_error+0x8c>)
   1105e:	9303      	str	r3, [sp, #12]
   11060:	4b14      	ldr	r3, [pc, #80]	; (110b4 <z_arm_fatal_error+0x94>)
   11062:	9400      	str	r4, [sp, #0]
   11064:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11068:	4623      	mov	r3, r4
   1106a:	f01a fb9c 	bl	2b7a6 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1106e:	69eb      	ldr	r3, [r5, #28]
   11070:	2201      	movs	r2, #1
   11072:	9303      	str	r3, [sp, #12]
   11074:	4b10      	ldr	r3, [pc, #64]	; (110b8 <z_arm_fatal_error+0x98>)
   11076:	4620      	mov	r0, r4
   11078:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1107c:	490b      	ldr	r1, [pc, #44]	; (110ac <z_arm_fatal_error+0x8c>)
   1107e:	4623      	mov	r3, r4
   11080:	9400      	str	r4, [sp, #0]
   11082:	f01a fb90 	bl	2b7a6 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   11086:	69ab      	ldr	r3, [r5, #24]
   11088:	2201      	movs	r2, #1
   1108a:	9303      	str	r3, [sp, #12]
   1108c:	4b0b      	ldr	r3, [pc, #44]	; (110bc <z_arm_fatal_error+0x9c>)
   1108e:	4620      	mov	r0, r4
   11090:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11094:	4905      	ldr	r1, [pc, #20]	; (110ac <z_arm_fatal_error+0x8c>)
   11096:	4623      	mov	r3, r4
   11098:	9400      	str	r4, [sp, #0]
   1109a:	f01a fb84 	bl	2b7a6 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1109e:	4629      	mov	r1, r5
   110a0:	4630      	mov	r0, r6
}
   110a2:	b006      	add	sp, #24
   110a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   110a8:	f014 b916 	b.w	252d8 <z_fatal_error>
   110ac:	00032fb0 	.word	0x00032fb0
   110b0:	000354c4 	.word	0x000354c4
   110b4:	000354f3 	.word	0x000354f3
   110b8:	00035522 	.word	0x00035522
   110bc:	00035531 	.word	0x00035531

000110c0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   110c0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   110c2:	2800      	cmp	r0, #0
   110c4:	db07      	blt.n	110d6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   110c6:	2301      	movs	r3, #1
   110c8:	0941      	lsrs	r1, r0, #5
   110ca:	4a03      	ldr	r2, [pc, #12]	; (110d8 <arch_irq_enable+0x18>)
   110cc:	f000 001f 	and.w	r0, r0, #31
   110d0:	4083      	lsls	r3, r0
   110d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   110d6:	4770      	bx	lr
   110d8:	e000e100 	.word	0xe000e100

000110dc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   110dc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   110de:	2800      	cmp	r0, #0
   110e0:	db0c      	blt.n	110fc <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   110e2:	2201      	movs	r2, #1
   110e4:	4906      	ldr	r1, [pc, #24]	; (11100 <arch_irq_disable+0x24>)
   110e6:	0943      	lsrs	r3, r0, #5
   110e8:	f000 001f 	and.w	r0, r0, #31
   110ec:	4082      	lsls	r2, r0
   110ee:	3320      	adds	r3, #32
   110f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   110f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   110f8:	f3bf 8f6f 	isb	sy
}
   110fc:	4770      	bx	lr
   110fe:	bf00      	nop
   11100:	e000e100 	.word	0xe000e100

00011104 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11104:	4b05      	ldr	r3, [pc, #20]	; (1111c <arch_irq_is_enabled+0x18>)
   11106:	0942      	lsrs	r2, r0, #5
   11108:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1110c:	2301      	movs	r3, #1
   1110e:	f000 001f 	and.w	r0, r0, #31
   11112:	fa03 f000 	lsl.w	r0, r3, r0
}
   11116:	4010      	ands	r0, r2
   11118:	4770      	bx	lr
   1111a:	bf00      	nop
   1111c:	e000e100 	.word	0xe000e100

00011120 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11120:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11122:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   11124:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11128:	bfac      	ite	ge
   1112a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1112e:	4b06      	ldrlt	r3, [pc, #24]	; (11148 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11130:	ea4f 1141 	mov.w	r1, r1, lsl #5
   11134:	b2c9      	uxtb	r1, r1
   11136:	bfab      	itete	ge
   11138:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1113c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11140:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11144:	5419      	strblt	r1, [r3, r0]
}
   11146:	4770      	bx	lr
   11148:	e000ed14 	.word	0xe000ed14

0001114c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1114c:	bf30      	wfi
    b z_SysNmiOnReset
   1114e:	f7ff bffd 	b.w	1114c <z_SysNmiOnReset>
   11152:	bf00      	nop

00011154 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11154:	4a0b      	ldr	r2, [pc, #44]	; (11184 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   11156:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11158:	4b0b      	ldr	r3, [pc, #44]	; (11188 <z_arm_prep_c+0x34>)
   1115a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1115e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11160:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11164:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11168:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1116c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11174:	f014 f950 	bl	25418 <z_bss_zero>
	z_data_copy();
   11178:	f015 f9ea 	bl	26550 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1117c:	f000 fb96 	bl	118ac <z_arm_interrupt_init>
	z_cstart();
   11180:	f014 f98e 	bl	254a0 <z_cstart>
   11184:	00008000 	.word	0x00008000
   11188:	e000ed00 	.word	0xe000ed00

0001118c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1118c:	4a0a      	ldr	r2, [pc, #40]	; (111b8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1118e:	490b      	ldr	r1, [pc, #44]	; (111bc <arch_swap+0x30>)
	_current->arch.basepri = key;
   11190:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11192:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   11194:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	_current->arch.swap_return_value = _k_neg_eagain;
   11198:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1119c:	4908      	ldr	r1, [pc, #32]	; (111c0 <arch_swap+0x34>)
   1119e:	684b      	ldr	r3, [r1, #4]
   111a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   111a4:	604b      	str	r3, [r1, #4]
   111a6:	2300      	movs	r3, #0
   111a8:	f383 8811 	msr	BASEPRI, r3
   111ac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   111b0:	6893      	ldr	r3, [r2, #8]
}
   111b2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   111b6:	4770      	bx	lr
   111b8:	20030d2c 	.word	0x20030d2c
   111bc:	0003409c 	.word	0x0003409c
   111c0:	e000ed00 	.word	0xe000ed00

000111c4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   111c4:	4916      	ldr	r1, [pc, #88]	; (11220 <z_arm_pendsv+0x5c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   111c6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   111c8:	f882 e0a1 	strb.w	lr, [r2, #161]	; 0xa1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   111cc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   111d0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   111d2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   111d6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   111da:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   111dc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   111e0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   111e4:	4f0f      	ldr	r7, [pc, #60]	; (11224 <z_arm_pendsv+0x60>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   111e6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   111ea:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   111ec:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   111ee:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   111f0:	f992 e0a1 	ldrsb.w	lr, [r2, #161]	; 0xa1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   111f4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    movs r3, #0
   111f8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   111fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   111fe:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11202:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11206:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1120a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1120e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   11212:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   11214:	f01a fae6 	bl	2b7e4 <configure_builtin_stack_guard>
    pop {r2, lr}
   11218:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1121c:	4770      	bx	lr
   1121e:	0000      	.short	0x0000
    ldr r1, =_kernel
   11220:	20030d2c 	.word	0x20030d2c
    ldr v4, =_SCS_ICSR
   11224:	e000ed04 	.word	0xe000ed04

00011228 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11228:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1122c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1122e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11232:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11236:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11238:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1123c:	2902      	cmp	r1, #2
    beq _oops
   1123e:	d0ff      	beq.n	11240 <_oops>

00011240 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11240:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   11242:	f01a fac0 	bl	2b7c6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   11246:	bd01      	pop	{r0, pc}

00011248 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11248:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1124c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1124e:	490d      	ldr	r1, [pc, #52]	; (11284 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   11250:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   11254:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   11256:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1125a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1125e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   11260:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   11264:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1126c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11270:	2300      	movs	r3, #0
   11272:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   11276:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1127a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1127c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1127e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11282:	4770      	bx	lr
   11284:	0002a1a1 	.word	0x0002a1a1

00011288 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11288:	4b09      	ldr	r3, [pc, #36]	; (112b0 <arch_switch_to_main_thread+0x28>)
   1128a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1128c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   11290:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11294:	4610      	mov	r0, r2
   11296:	f381 8809 	msr	PSP, r1
   1129a:	2100      	movs	r1, #0
   1129c:	b663      	cpsie	if
   1129e:	f381 8811 	msr	BASEPRI, r1
   112a2:	f3bf 8f6f 	isb	sy
   112a6:	2200      	movs	r2, #0
   112a8:	2300      	movs	r3, #0
   112aa:	f018 ff79 	bl	2a1a0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   112ae:	bf00      	nop
   112b0:	20030d2c 	.word	0x20030d2c

000112b4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   112b4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   112b6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   112b8:	4a0b      	ldr	r2, [pc, #44]	; (112e8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   112ba:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   112bc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   112be:	bf1e      	ittt	ne
	movne	r1, #0
   112c0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   112c2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   112c4:	f01f fd2a 	blne	30d1c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   112c8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   112ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   112ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   112d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   112d6:	4905      	ldr	r1, [pc, #20]	; (112ec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   112d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   112da:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   112dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   112de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   112e2:	4903      	ldr	r1, [pc, #12]	; (112f0 <_isr_wrapper+0x3c>)
	bx r1
   112e4:	4708      	bx	r1
   112e6:	0000      	.short	0x0000
	ldr r2, =_kernel
   112e8:	20030d2c 	.word	0x20030d2c
	ldr r1, =_sw_isr_table
   112ec:	00032938 	.word	0x00032938
	ldr r1, =z_arm_int_exit
   112f0:	000112f5 	.word	0x000112f5

000112f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   112f4:	4b04      	ldr	r3, [pc, #16]	; (11308 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   112f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   112f8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   112fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   112fc:	d003      	beq.n	11306 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   112fe:	4903      	ldr	r1, [pc, #12]	; (1130c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11304:	600a      	str	r2, [r1, #0]

00011306 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11306:	4770      	bx	lr
	ldr r3, =_kernel
   11308:	20030d2c 	.word	0x20030d2c
	ldr r1, =_SCS_ICSR
   1130c:	e000ed04 	.word	0xe000ed04

00011310 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11310:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   11312:	2400      	movs	r4, #0
   11314:	4b3d      	ldr	r3, [pc, #244]	; (1140c <mem_manage_fault.constprop.0+0xfc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11316:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   11318:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1131a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1131c:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1131e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   11320:	2201      	movs	r2, #1
   11322:	4620      	mov	r0, r4
   11324:	e9cd 4400 	strd	r4, r4, [sp]
   11328:	4939      	ldr	r1, [pc, #228]	; (11410 <mem_manage_fault.constprop.0+0x100>)
   1132a:	f01a fa60 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1132e:	4b39      	ldr	r3, [pc, #228]	; (11414 <mem_manage_fault.constprop.0+0x104>)
   11330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11332:	06dd      	lsls	r5, r3, #27
   11334:	d509      	bpl.n	1134a <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   11336:	4b38      	ldr	r3, [pc, #224]	; (11418 <mem_manage_fault.constprop.0+0x108>)
   11338:	2201      	movs	r2, #1
   1133a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1133e:	4620      	mov	r0, r4
   11340:	4623      	mov	r3, r4
   11342:	4933      	ldr	r1, [pc, #204]	; (11410 <mem_manage_fault.constprop.0+0x100>)
   11344:	9400      	str	r4, [sp, #0]
   11346:	f01a fa52 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1134a:	4b32      	ldr	r3, [pc, #200]	; (11414 <mem_manage_fault.constprop.0+0x104>)
   1134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1134e:	0718      	lsls	r0, r3, #28
   11350:	d509      	bpl.n	11366 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   11352:	4b32      	ldr	r3, [pc, #200]	; (1141c <mem_manage_fault.constprop.0+0x10c>)
   11354:	2201      	movs	r2, #1
   11356:	9302      	str	r3, [sp, #8]
   11358:	2300      	movs	r3, #0
   1135a:	492d      	ldr	r1, [pc, #180]	; (11410 <mem_manage_fault.constprop.0+0x100>)
   1135c:	4618      	mov	r0, r3
   1135e:	e9cd 3300 	strd	r3, r3, [sp]
   11362:	f01a fa44 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11366:	4d2b      	ldr	r5, [pc, #172]	; (11414 <mem_manage_fault.constprop.0+0x104>)
   11368:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1136a:	0799      	lsls	r1, r3, #30
   1136c:	d51e      	bpl.n	113ac <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   1136e:	2400      	movs	r4, #0
   11370:	4b2b      	ldr	r3, [pc, #172]	; (11420 <mem_manage_fault.constprop.0+0x110>)
   11372:	2201      	movs	r2, #1
   11374:	9302      	str	r3, [sp, #8]
   11376:	4620      	mov	r0, r4
   11378:	4623      	mov	r3, r4
   1137a:	e9cd 4400 	strd	r4, r4, [sp]
   1137e:	4924      	ldr	r1, [pc, #144]	; (11410 <mem_manage_fault.constprop.0+0x100>)
   11380:	f01a fa35 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   11384:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11386:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11388:	0612      	lsls	r2, r2, #24
   1138a:	d50f      	bpl.n	113ac <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1138c:	9303      	str	r3, [sp, #12]
   1138e:	4b25      	ldr	r3, [pc, #148]	; (11424 <mem_manage_fault.constprop.0+0x114>)
   11390:	2201      	movs	r2, #1
   11392:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11396:	4620      	mov	r0, r4
   11398:	4623      	mov	r3, r4
   1139a:	491d      	ldr	r1, [pc, #116]	; (11410 <mem_manage_fault.constprop.0+0x100>)
   1139c:	9400      	str	r4, [sp, #0]
   1139e:	f01a fa26 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   113a2:	b11f      	cbz	r7, 113ac <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   113a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   113a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   113aa:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   113ac:	4b19      	ldr	r3, [pc, #100]	; (11414 <mem_manage_fault.constprop.0+0x104>)
   113ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113b0:	07dc      	lsls	r4, r3, #31
   113b2:	d509      	bpl.n	113c8 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   113b4:	4b1c      	ldr	r3, [pc, #112]	; (11428 <mem_manage_fault.constprop.0+0x118>)
   113b6:	2201      	movs	r2, #1
   113b8:	9302      	str	r3, [sp, #8]
   113ba:	2300      	movs	r3, #0
   113bc:	4914      	ldr	r1, [pc, #80]	; (11410 <mem_manage_fault.constprop.0+0x100>)
   113be:	4618      	mov	r0, r3
   113c0:	e9cd 3300 	strd	r3, r3, [sp]
   113c4:	f01a fa13 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   113c8:	4b12      	ldr	r3, [pc, #72]	; (11414 <mem_manage_fault.constprop.0+0x104>)
   113ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113cc:	0698      	lsls	r0, r3, #26
   113ce:	d509      	bpl.n	113e4 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   113d0:	4b16      	ldr	r3, [pc, #88]	; (1142c <mem_manage_fault.constprop.0+0x11c>)
   113d2:	2201      	movs	r2, #1
   113d4:	9302      	str	r3, [sp, #8]
   113d6:	2300      	movs	r3, #0
   113d8:	490d      	ldr	r1, [pc, #52]	; (11410 <mem_manage_fault.constprop.0+0x100>)
   113da:	4618      	mov	r0, r3
   113dc:	e9cd 3300 	strd	r3, r3, [sp]
   113e0:	f01a fa05 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   113e4:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   113e6:	4b0b      	ldr	r3, [pc, #44]	; (11414 <mem_manage_fault.constprop.0+0x104>)
   113e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   113ea:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   113ec:	bf58      	it	pl
   113ee:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   113f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   113f2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   113f4:	bf42      	ittt	mi
   113f6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   113f8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   113fc:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   113fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11400:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11404:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11406:	7030      	strb	r0, [r6, #0]

	return reason;
}
   11408:	b005      	add	sp, #20
   1140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1140c:	0003555f 	.word	0x0003555f
   11410:	00032fb0 	.word	0x00032fb0
   11414:	e000ed00 	.word	0xe000ed00
   11418:	00035575 	.word	0x00035575
   1141c:	000355a8 	.word	0x000355a8
   11420:	000355bb 	.word	0x000355bb
   11424:	000355d3 	.word	0x000355d3
   11428:	000355e9 	.word	0x000355e9
   1142c:	00035608 	.word	0x00035608

00011430 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11430:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   11432:	2400      	movs	r4, #0
   11434:	4b3b      	ldr	r3, [pc, #236]	; (11524 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11436:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   11438:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1143a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   1143c:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1143e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   11440:	2201      	movs	r2, #1
   11442:	4620      	mov	r0, r4
   11444:	e9cd 4400 	strd	r4, r4, [sp]
   11448:	4937      	ldr	r1, [pc, #220]	; (11528 <bus_fault.constprop.0+0xf8>)
   1144a:	f01a f9d0 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1144e:	4b37      	ldr	r3, [pc, #220]	; (1152c <bus_fault.constprop.0+0xfc>)
   11450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11452:	04db      	lsls	r3, r3, #19
   11454:	d509      	bpl.n	1146a <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   11456:	4b36      	ldr	r3, [pc, #216]	; (11530 <bus_fault.constprop.0+0x100>)
   11458:	2201      	movs	r2, #1
   1145a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1145e:	4620      	mov	r0, r4
   11460:	4623      	mov	r3, r4
   11462:	4931      	ldr	r1, [pc, #196]	; (11528 <bus_fault.constprop.0+0xf8>)
   11464:	9400      	str	r4, [sp, #0]
   11466:	f01a f9c2 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1146a:	4b30      	ldr	r3, [pc, #192]	; (1152c <bus_fault.constprop.0+0xfc>)
   1146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1146e:	051d      	lsls	r5, r3, #20
   11470:	d509      	bpl.n	11486 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   11472:	4b30      	ldr	r3, [pc, #192]	; (11534 <bus_fault.constprop.0+0x104>)
   11474:	2201      	movs	r2, #1
   11476:	9302      	str	r3, [sp, #8]
   11478:	2300      	movs	r3, #0
   1147a:	492b      	ldr	r1, [pc, #172]	; (11528 <bus_fault.constprop.0+0xf8>)
   1147c:	4618      	mov	r0, r3
   1147e:	e9cd 3300 	strd	r3, r3, [sp]
   11482:	f01a f9b4 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11486:	4d29      	ldr	r5, [pc, #164]	; (1152c <bus_fault.constprop.0+0xfc>)
   11488:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1148a:	059c      	lsls	r4, r3, #22
   1148c:	d51e      	bpl.n	114cc <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   1148e:	2400      	movs	r4, #0
   11490:	4b29      	ldr	r3, [pc, #164]	; (11538 <bus_fault.constprop.0+0x108>)
   11492:	2201      	movs	r2, #1
   11494:	4620      	mov	r0, r4
   11496:	9302      	str	r3, [sp, #8]
   11498:	e9cd 4400 	strd	r4, r4, [sp]
   1149c:	4623      	mov	r3, r4
   1149e:	4922      	ldr	r1, [pc, #136]	; (11528 <bus_fault.constprop.0+0xf8>)
   114a0:	f01a f9a5 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   114a4:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   114a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   114a8:	0410      	lsls	r0, r2, #16
   114aa:	d50f      	bpl.n	114cc <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   114ac:	9303      	str	r3, [sp, #12]
   114ae:	4b23      	ldr	r3, [pc, #140]	; (1153c <bus_fault.constprop.0+0x10c>)
   114b0:	2201      	movs	r2, #1
   114b2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   114b6:	4620      	mov	r0, r4
   114b8:	4623      	mov	r3, r4
   114ba:	491b      	ldr	r1, [pc, #108]	; (11528 <bus_fault.constprop.0+0xf8>)
   114bc:	9400      	str	r4, [sp, #0]
   114be:	f01a f996 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   114c2:	b11f      	cbz	r7, 114cc <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   114c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   114c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   114ca:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   114cc:	4b17      	ldr	r3, [pc, #92]	; (1152c <bus_fault.constprop.0+0xfc>)
   114ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   114d0:	0559      	lsls	r1, r3, #21
   114d2:	d509      	bpl.n	114e8 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   114d4:	4b1a      	ldr	r3, [pc, #104]	; (11540 <bus_fault.constprop.0+0x110>)
   114d6:	2201      	movs	r2, #1
   114d8:	9302      	str	r3, [sp, #8]
   114da:	2300      	movs	r3, #0
   114dc:	4912      	ldr	r1, [pc, #72]	; (11528 <bus_fault.constprop.0+0xf8>)
   114de:	4618      	mov	r0, r3
   114e0:	e9cd 3300 	strd	r3, r3, [sp]
   114e4:	f01a f983 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   114e8:	4a10      	ldr	r2, [pc, #64]	; (1152c <bus_fault.constprop.0+0xfc>)
   114ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
   114ec:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   114f0:	d012      	beq.n	11518 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   114f2:	4b14      	ldr	r3, [pc, #80]	; (11544 <bus_fault.constprop.0+0x114>)
   114f4:	9302      	str	r3, [sp, #8]
   114f6:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   114f8:	2201      	movs	r2, #1
   114fa:	4618      	mov	r0, r3
   114fc:	e9cd 3300 	strd	r3, r3, [sp]
   11500:	4909      	ldr	r1, [pc, #36]	; (11528 <bus_fault.constprop.0+0xf8>)
   11502:	f01a f974 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   11506:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11508:	4a08      	ldr	r2, [pc, #32]	; (1152c <bus_fault.constprop.0+0xfc>)
   1150a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1150c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11510:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11512:	7030      	strb	r0, [r6, #0]

	return reason;
}
   11514:	b005      	add	sp, #20
   11516:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11518:	6a92      	ldr	r2, [r2, #40]	; 0x28
   1151a:	0492      	lsls	r2, r2, #18
   1151c:	d5f3      	bpl.n	11506 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1151e:	4a0a      	ldr	r2, [pc, #40]	; (11548 <bus_fault.constprop.0+0x118>)
   11520:	9202      	str	r2, [sp, #8]
   11522:	e7e9      	b.n	114f8 <bus_fault.constprop.0+0xc8>
   11524:	00035637 	.word	0x00035637
   11528:	00032fb0 	.word	0x00032fb0
   1152c:	e000ed00 	.word	0xe000ed00
   11530:	0003564d 	.word	0x0003564d
   11534:	000355a8 	.word	0x000355a8
   11538:	0003565e 	.word	0x0003565e
   1153c:	00035677 	.word	0x00035677
   11540:	0003568c 	.word	0x0003568c
   11544:	000356a7 	.word	0x000356a7
   11548:	00035608 	.word	0x00035608

0001154c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1154c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1154e:	2400      	movs	r4, #0
   11550:	4b3b      	ldr	r3, [pc, #236]	; (11640 <usage_fault.constprop.0+0xf4>)
   11552:	2201      	movs	r2, #1
   11554:	9302      	str	r3, [sp, #8]
   11556:	4620      	mov	r0, r4
   11558:	4623      	mov	r3, r4
   1155a:	e9cd 4400 	strd	r4, r4, [sp]
   1155e:	4939      	ldr	r1, [pc, #228]	; (11644 <usage_fault.constprop.0+0xf8>)
   11560:	f01a f945 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11564:	4b38      	ldr	r3, [pc, #224]	; (11648 <usage_fault.constprop.0+0xfc>)
   11566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11568:	019b      	lsls	r3, r3, #6
   1156a:	d509      	bpl.n	11580 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   1156c:	4b37      	ldr	r3, [pc, #220]	; (1164c <usage_fault.constprop.0+0x100>)
   1156e:	2201      	movs	r2, #1
   11570:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11574:	4620      	mov	r0, r4
   11576:	4623      	mov	r3, r4
   11578:	4932      	ldr	r1, [pc, #200]	; (11644 <usage_fault.constprop.0+0xf8>)
   1157a:	9400      	str	r4, [sp, #0]
   1157c:	f01a f937 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11580:	4b31      	ldr	r3, [pc, #196]	; (11648 <usage_fault.constprop.0+0xfc>)
   11582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11584:	01dc      	lsls	r4, r3, #7
   11586:	d509      	bpl.n	1159c <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   11588:	4b31      	ldr	r3, [pc, #196]	; (11650 <usage_fault.constprop.0+0x104>)
   1158a:	2201      	movs	r2, #1
   1158c:	9302      	str	r3, [sp, #8]
   1158e:	2300      	movs	r3, #0
   11590:	492c      	ldr	r1, [pc, #176]	; (11644 <usage_fault.constprop.0+0xf8>)
   11592:	4618      	mov	r0, r3
   11594:	e9cd 3300 	strd	r3, r3, [sp]
   11598:	f01a f929 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1159c:	4b2a      	ldr	r3, [pc, #168]	; (11648 <usage_fault.constprop.0+0xfc>)
   1159e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   115a0:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   115a4:	d00a      	beq.n	115bc <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   115a6:	4b2b      	ldr	r3, [pc, #172]	; (11654 <usage_fault.constprop.0+0x108>)
   115a8:	2201      	movs	r2, #1
   115aa:	9302      	str	r3, [sp, #8]
   115ac:	2300      	movs	r3, #0
   115ae:	4925      	ldr	r1, [pc, #148]	; (11644 <usage_fault.constprop.0+0xf8>)
   115b0:	4618      	mov	r0, r3
   115b2:	e9cd 3300 	strd	r3, r3, [sp]
   115b6:	f01a f91a 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   115ba:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   115bc:	4b22      	ldr	r3, [pc, #136]	; (11648 <usage_fault.constprop.0+0xfc>)
   115be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115c0:	0318      	lsls	r0, r3, #12
   115c2:	d509      	bpl.n	115d8 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   115c4:	4b24      	ldr	r3, [pc, #144]	; (11658 <usage_fault.constprop.0+0x10c>)
   115c6:	2201      	movs	r2, #1
   115c8:	9302      	str	r3, [sp, #8]
   115ca:	2300      	movs	r3, #0
   115cc:	491d      	ldr	r1, [pc, #116]	; (11644 <usage_fault.constprop.0+0xf8>)
   115ce:	4618      	mov	r0, r3
   115d0:	e9cd 3300 	strd	r3, r3, [sp]
   115d4:	f01a f90b 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   115d8:	4b1b      	ldr	r3, [pc, #108]	; (11648 <usage_fault.constprop.0+0xfc>)
   115da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115dc:	0359      	lsls	r1, r3, #13
   115de:	d509      	bpl.n	115f4 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   115e0:	4b1e      	ldr	r3, [pc, #120]	; (1165c <usage_fault.constprop.0+0x110>)
   115e2:	2201      	movs	r2, #1
   115e4:	9302      	str	r3, [sp, #8]
   115e6:	2300      	movs	r3, #0
   115e8:	4916      	ldr	r1, [pc, #88]	; (11644 <usage_fault.constprop.0+0xf8>)
   115ea:	4618      	mov	r0, r3
   115ec:	e9cd 3300 	strd	r3, r3, [sp]
   115f0:	f01a f8fd 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   115f4:	4b14      	ldr	r3, [pc, #80]	; (11648 <usage_fault.constprop.0+0xfc>)
   115f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115f8:	039a      	lsls	r2, r3, #14
   115fa:	d509      	bpl.n	11610 <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   115fc:	4b18      	ldr	r3, [pc, #96]	; (11660 <usage_fault.constprop.0+0x114>)
   115fe:	2201      	movs	r2, #1
   11600:	9302      	str	r3, [sp, #8]
   11602:	2300      	movs	r3, #0
   11604:	490f      	ldr	r1, [pc, #60]	; (11644 <usage_fault.constprop.0+0xf8>)
   11606:	4618      	mov	r0, r3
   11608:	e9cd 3300 	strd	r3, r3, [sp]
   1160c:	f01a f8ef 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11610:	4b0d      	ldr	r3, [pc, #52]	; (11648 <usage_fault.constprop.0+0xfc>)
   11612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11614:	03db      	lsls	r3, r3, #15
   11616:	d509      	bpl.n	1162c <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11618:	4b12      	ldr	r3, [pc, #72]	; (11664 <usage_fault.constprop.0+0x118>)
   1161a:	2201      	movs	r2, #1
   1161c:	9302      	str	r3, [sp, #8]
   1161e:	2300      	movs	r3, #0
   11620:	4908      	ldr	r1, [pc, #32]	; (11644 <usage_fault.constprop.0+0xf8>)
   11622:	4618      	mov	r0, r3
   11624:	e9cd 3300 	strd	r3, r3, [sp]
   11628:	f01a f8e1 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1162c:	4a06      	ldr	r2, [pc, #24]	; (11648 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   1162e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11630:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11632:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11636:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1163a:	6293      	str	r3, [r2, #40]	; 0x28
}
   1163c:	b004      	add	sp, #16
   1163e:	bd10      	pop	{r4, pc}
   11640:	000356bf 	.word	0x000356bf
   11644:	00032fb0 	.word	0x00032fb0
   11648:	e000ed00 	.word	0xe000ed00
   1164c:	000356d7 	.word	0x000356d7
   11650:	000356ea 	.word	0x000356ea
   11654:	00035704 	.word	0x00035704
   11658:	0003572e 	.word	0x0003572e
   1165c:	0003574c 	.word	0x0003574c
   11660:	00035771 	.word	0x00035771
   11664:	0003578b 	.word	0x0003578b

00011668 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1166c:	4b78      	ldr	r3, [pc, #480]	; (11850 <z_arm_fault+0x1e8>)
{
   1166e:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11670:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   11674:	4689      	mov	r9, r1
   11676:	4616      	mov	r6, r2
   11678:	2500      	movs	r5, #0
   1167a:	b091      	sub	sp, #68	; 0x44
   1167c:	f3c8 0708 	ubfx	r7, r8, #0, #9
   11680:	f385 8811 	msr	BASEPRI, r5
   11684:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11688:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1168c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11690:	d125      	bne.n	116de <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   11692:	f012 0301 	ands.w	r3, r2, #1
   11696:	d122      	bne.n	116de <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11698:	0651      	lsls	r1, r2, #25
   1169a:	d403      	bmi.n	116a4 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1169c:	0732      	lsls	r2, r6, #28
   1169e:	d40d      	bmi.n	116bc <z_arm_fault+0x54>
			*nested_exc = true;
   116a0:	2501      	movs	r5, #1
   116a2:	e00d      	b.n	116c0 <z_arm_fault+0x58>
		PR_FAULT_INFO("Exception occurred in Secure State");
   116a4:	4a6b      	ldr	r2, [pc, #428]	; (11854 <z_arm_fault+0x1ec>)
   116a6:	4618      	mov	r0, r3
   116a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   116ac:	496a      	ldr	r1, [pc, #424]	; (11858 <z_arm_fault+0x1f0>)
   116ae:	2201      	movs	r2, #1
   116b0:	9300      	str	r3, [sp, #0]
   116b2:	f01a f89c 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   116b6:	f016 0604 	ands.w	r6, r6, #4
   116ba:	d000      	beq.n	116be <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
   116bc:	464c      	mov	r4, r9
	*nested_exc = false;
   116be:	2500      	movs	r5, #0
	*recoverable = false;
   116c0:	f04f 0900 	mov.w	r9, #0
	switch (fault) {
   116c4:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   116c6:	f88d 901f 	strb.w	r9, [sp, #31]
	switch (fault) {
   116ca:	2b09      	cmp	r3, #9
   116cc:	f200 80a6 	bhi.w	1181c <z_arm_fault+0x1b4>
   116d0:	e8df f003 	tbb	[pc, r3]
   116d4:	969e9a07 	.word	0x969e9a07
   116d8:	a4a4a4a4 	.word	0xa4a4a4a4
   116dc:	a2a4      	.short	0xa2a4
		return NULL;
   116de:	462c      	mov	r4, r5
   116e0:	e7ee      	b.n	116c0 <z_arm_fault+0x58>
	PR_FAULT_INFO("***** HARD FAULT *****");
   116e2:	4b5e      	ldr	r3, [pc, #376]	; (1185c <z_arm_fault+0x1f4>)
   116e4:	2201      	movs	r2, #1
   116e6:	e9cd 9301 	strd	r9, r3, [sp, #4]
   116ea:	2300      	movs	r3, #0
   116ec:	495a      	ldr	r1, [pc, #360]	; (11858 <z_arm_fault+0x1f0>)
   116ee:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   116f0:	4f57      	ldr	r7, [pc, #348]	; (11850 <z_arm_fault+0x1e8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   116f2:	f8cd 9000 	str.w	r9, [sp]
   116f6:	f01a f87a 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   116fa:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   116fe:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   11700:	f016 0602 	ands.w	r6, r6, #2
   11704:	d005      	beq.n	11712 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   11706:	4b56      	ldr	r3, [pc, #344]	; (11860 <z_arm_fault+0x1f8>)
	PR_FAULT_INFO(
   11708:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1170c:	f8cd 9000 	str.w	r9, [sp]
   11710:	e006      	b.n	11720 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11714:	2b00      	cmp	r3, #0
   11716:	da0b      	bge.n	11730 <z_arm_fault+0xc8>
		PR_EXC("  Debug event");
   11718:	4b52      	ldr	r3, [pc, #328]	; (11864 <z_arm_fault+0x1fc>)
   1171a:	9600      	str	r6, [sp, #0]
   1171c:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
   11720:	2300      	movs	r3, #0
   11722:	2201      	movs	r2, #1
   11724:	4618      	mov	r0, r3
   11726:	494c      	ldr	r1, [pc, #304]	; (11858 <z_arm_fault+0x1f0>)
   11728:	f01a f861 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1172c:	2300      	movs	r3, #0
   1172e:	e030      	b.n	11792 <z_arm_fault+0x12a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11732:	005b      	lsls	r3, r3, #1
   11734:	d5fa      	bpl.n	1172c <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
   11736:	4b4c      	ldr	r3, [pc, #304]	; (11868 <z_arm_fault+0x200>)
   11738:	2201      	movs	r2, #1
   1173a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1173e:	4630      	mov	r0, r6
   11740:	4633      	mov	r3, r6
   11742:	4945      	ldr	r1, [pc, #276]	; (11858 <z_arm_fault+0x1f0>)
   11744:	9600      	str	r6, [sp, #0]
   11746:	f01a f852 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1174a:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1174c:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11752:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11758:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1175c:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1175e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11766:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11768:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1176c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11770:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11774:	429a      	cmp	r2, r3
   11776:	d12c      	bne.n	117d2 <z_arm_fault+0x16a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   11778:	6823      	ldr	r3, [r4, #0]
   1177a:	2201      	movs	r2, #1
   1177c:	9303      	str	r3, [sp, #12]
   1177e:	4b3b      	ldr	r3, [pc, #236]	; (1186c <z_arm_fault+0x204>)
   11780:	4630      	mov	r0, r6
   11782:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11786:	4934      	ldr	r1, [pc, #208]	; (11858 <z_arm_fault+0x1f0>)
   11788:	4633      	mov	r3, r6
   1178a:	9600      	str	r6, [sp, #0]
   1178c:	f01a f82f 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   11790:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11792:	f89d 201f 	ldrb.w	r2, [sp, #31]
   11796:	b9ca      	cbnz	r2, 117cc <z_arm_fault+0x164>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11798:	ae08      	add	r6, sp, #32
   1179a:	f104 0720 	add.w	r7, r4, #32
   1179e:	4632      	mov	r2, r6
   117a0:	6820      	ldr	r0, [r4, #0]
   117a2:	6861      	ldr	r1, [r4, #4]
   117a4:	3408      	adds	r4, #8
   117a6:	c203      	stmia	r2!, {r0, r1}
   117a8:	42bc      	cmp	r4, r7
   117aa:	4616      	mov	r6, r2
   117ac:	d1f7      	bne.n	1179e <z_arm_fault+0x136>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   117ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   117b0:	2d00      	cmp	r5, #0
   117b2:	d047      	beq.n	11844 <z_arm_fault+0x1dc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   117b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
   117b8:	b921      	cbnz	r1, 117c4 <z_arm_fault+0x15c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   117ba:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   117be:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   117c2:	920f      	str	r2, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   117c4:	4618      	mov	r0, r3
   117c6:	a908      	add	r1, sp, #32
   117c8:	f7ff fc2a 	bl	11020 <z_arm_fatal_error>
}
   117cc:	b011      	add	sp, #68	; 0x44
   117ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   117d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   117d4:	b2db      	uxtb	r3, r3
   117d6:	b12b      	cbz	r3, 117e4 <z_arm_fault+0x17c>
			reason = mem_manage_fault(esf, 1, recoverable);
   117d8:	2001      	movs	r0, #1
   117da:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   117de:	f7ff fd97 	bl	11310 <mem_manage_fault.constprop.0>
   117e2:	e00f      	b.n	11804 <z_arm_fault+0x19c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   117e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   117e6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   117ea:	d005      	beq.n	117f8 <z_arm_fault+0x190>
			reason = bus_fault(esf, 1, recoverable);
   117ec:	2001      	movs	r0, #1
   117ee:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   117f2:	f7ff fe1d 	bl	11430 <bus_fault.constprop.0>
   117f6:	e005      	b.n	11804 <z_arm_fault+0x19c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   117f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   117fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   117fe:	d395      	bcc.n	1172c <z_arm_fault+0xc4>
			reason = usage_fault(esf);
   11800:	f7ff fea4 	bl	1154c <usage_fault.constprop.0>
   11804:	4603      	mov	r3, r0
   11806:	e7c4      	b.n	11792 <z_arm_fault+0x12a>
		reason = mem_manage_fault(esf, 0, recoverable);
   11808:	2000      	movs	r0, #0
   1180a:	f10d 011f 	add.w	r1, sp, #31
   1180e:	e7e6      	b.n	117de <z_arm_fault+0x176>
		reason = bus_fault(esf, 0, recoverable);
   11810:	2000      	movs	r0, #0
   11812:	f10d 011f 	add.w	r1, sp, #31
   11816:	e7ec      	b.n	117f2 <z_arm_fault+0x18a>
	PR_FAULT_INFO(
   11818:	4b15      	ldr	r3, [pc, #84]	; (11870 <z_arm_fault+0x208>)
   1181a:	e775      	b.n	11708 <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
   1181c:	4a15      	ldr	r2, [pc, #84]	; (11874 <z_arm_fault+0x20c>)
   1181e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   11822:	4b15      	ldr	r3, [pc, #84]	; (11878 <z_arm_fault+0x210>)
   11824:	bf18      	it	ne
   11826:	4613      	movne	r3, r2
   11828:	3f10      	subs	r7, #16
   1182a:	e9cd 3703 	strd	r3, r7, [sp, #12]
   1182e:	4b13      	ldr	r3, [pc, #76]	; (1187c <z_arm_fault+0x214>)
   11830:	2201      	movs	r2, #1
   11832:	9302      	str	r3, [sp, #8]
   11834:	2300      	movs	r3, #0
   11836:	4908      	ldr	r1, [pc, #32]	; (11858 <z_arm_fault+0x1f0>)
   11838:	4618      	mov	r0, r3
   1183a:	e9cd 3300 	strd	r3, r3, [sp]
   1183e:	f019 ffd6 	bl	2b7ee <z_log_msg_runtime_create.constprop.0>
}
   11842:	e773      	b.n	1172c <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11844:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   11848:	f022 0201 	bic.w	r2, r2, #1
   1184c:	e7b9      	b.n	117c2 <z_arm_fault+0x15a>
   1184e:	bf00      	nop
   11850:	e000ed00 	.word	0xe000ed00
   11854:	000357e4 	.word	0x000357e4
   11858:	00032fb0 	.word	0x00032fb0
   1185c:	00035807 	.word	0x00035807
   11860:	0003581e 	.word	0x0003581e
   11864:	0003583f 	.word	0x0003583f
   11868:	0003584d 	.word	0x0003584d
   1186c:	0003586c 	.word	0x0003586c
   11870:	00035888 	.word	0x00035888
   11874:	000357cb 	.word	0x000357cb
   11878:	000357b6 	.word	0x000357b6
   1187c:	000358ac 	.word	0x000358ac

00011880 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11880:	4b04      	ldr	r3, [pc, #16]	; (11894 <z_arm_fault_init+0x14>)
   11882:	695a      	ldr	r2, [r3, #20]
   11884:	f042 0210 	orr.w	r2, r2, #16
   11888:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1188a:	695a      	ldr	r2, [r3, #20]
   1188c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11890:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11892:	4770      	bx	lr
   11894:	e000ed00 	.word	0xe000ed00

00011898 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11898:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1189c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   118a0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   118a2:	4672      	mov	r2, lr
	bl z_arm_fault
   118a4:	f7ff fee0 	bl	11668 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   118a8:	bd01      	pop	{r0, pc}
   118aa:	bf00      	nop

000118ac <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   118ac:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   118ae:	2120      	movs	r1, #32
   118b0:	4803      	ldr	r0, [pc, #12]	; (118c0 <z_arm_interrupt_init+0x14>)
   118b2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   118b4:	3301      	adds	r3, #1
   118b6:	2b45      	cmp	r3, #69	; 0x45
   118b8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   118bc:	d1f9      	bne.n	118b2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   118be:	4770      	bx	lr
   118c0:	e000e100 	.word	0xe000e100

000118c4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   118c4:	2000      	movs	r0, #0
    msr CONTROL, r0
   118c6:	f380 8814 	msr	CONTROL, r0
    isb
   118ca:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   118ce:	2000      	movs	r0, #0
    msr MSPLIM, r0
   118d0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   118d4:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   118d8:	f7fd fca8 	bl	f22c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   118dc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   118de:	490e      	ldr	r1, [pc, #56]	; (11918 <__start+0x54>)
    str r0, [r1]
   118e0:	6008      	str	r0, [r1, #0]
    dsb
   118e2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   118e6:	480d      	ldr	r0, [pc, #52]	; (1191c <__start+0x58>)
    msr msp, r0
   118e8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   118ec:	f000 f83e 	bl	1196c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   118f0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   118f2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   118f6:	480a      	ldr	r0, [pc, #40]	; (11920 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   118f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   118fc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   118fe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11902:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11906:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11908:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1190a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1190e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11912:	f7ff fc1f 	bl	11154 <z_arm_prep_c>
   11916:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   11918:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1191c:	20053aa8 	.word	0x20053aa8
    ldr r0, =z_interrupt_stacks
   11920:	20052d68 	.word	0x20052d68

00011924 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11924:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11928:	4905      	ldr	r1, [pc, #20]	; (11940 <sys_arch_reboot+0x1c>)
   1192a:	4b06      	ldr	r3, [pc, #24]	; (11944 <sys_arch_reboot+0x20>)
   1192c:	68ca      	ldr	r2, [r1, #12]
   1192e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11932:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11934:	60cb      	str	r3, [r1, #12]
   11936:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1193a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1193c:	e7fd      	b.n	1193a <sys_arch_reboot+0x16>
   1193e:	bf00      	nop
   11940:	e000ed00 	.word	0xe000ed00
   11944:	05fa0004 	.word	0x05fa0004

00011948 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   11948:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1194a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1194c:	4906      	ldr	r1, [pc, #24]	; (11968 <z_arm_clear_arm_mpu_config+0x20>)
   1194e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   11952:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   11956:	4293      	cmp	r3, r2
   11958:	db00      	blt.n	1195c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1195a:	4770      	bx	lr
  mpu->RNR = rnr;
   1195c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   11960:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   11964:	3301      	adds	r3, #1
   11966:	e7f6      	b.n	11956 <z_arm_clear_arm_mpu_config+0xe>
   11968:	e000ed00 	.word	0xe000ed00

0001196c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1196c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1196e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11970:	2400      	movs	r4, #0
   11972:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11976:	f7ff ffe7 	bl	11948 <z_arm_clear_arm_mpu_config>
   1197a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1197c:	f04f 30ff 	mov.w	r0, #4294967295
   11980:	4a0c      	ldr	r2, [pc, #48]	; (119b4 <z_arm_init_arch_hw_at_boot+0x48>)
   11982:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11986:	3301      	adds	r3, #1
   11988:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1198a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1198e:	d1f8      	bne.n	11982 <z_arm_init_arch_hw_at_boot+0x16>
   11990:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11992:	f04f 30ff 	mov.w	r0, #4294967295
   11996:	4a07      	ldr	r2, [pc, #28]	; (119b4 <z_arm_init_arch_hw_at_boot+0x48>)
   11998:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1199c:	3301      	adds	r3, #1
   1199e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   119a0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   119a4:	d1f8      	bne.n	11998 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   119a6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   119a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   119ac:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   119b0:	bd10      	pop	{r4, pc}
   119b2:	bf00      	nop
   119b4:	e000e100 	.word	0xe000e100

000119b8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   119b8:	4b08      	ldr	r3, [pc, #32]	; (119dc <z_impl_k_thread_abort+0x24>)
   119ba:	689b      	ldr	r3, [r3, #8]
   119bc:	4283      	cmp	r3, r0
   119be:	d10b      	bne.n	119d8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   119c0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   119c4:	b143      	cbz	r3, 119d8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   119c6:	4b06      	ldr	r3, [pc, #24]	; (119e0 <z_impl_k_thread_abort+0x28>)
   119c8:	685a      	ldr	r2, [r3, #4]
   119ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   119ce:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   119d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   119d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   119d6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   119d8:	f014 bd48 	b.w	2646c <z_thread_abort>
   119dc:	20030d2c 	.word	0x20030d2c
   119e0:	e000ed00 	.word	0xe000ed00

000119e4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   119e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   119e6:	4c09      	ldr	r4, [pc, #36]	; (11a0c <z_arm_configure_static_mpu_regions+0x28>)
   119e8:	4a09      	ldr	r2, [pc, #36]	; (11a10 <z_arm_configure_static_mpu_regions+0x2c>)
   119ea:	4623      	mov	r3, r4
   119ec:	2101      	movs	r1, #1
   119ee:	4809      	ldr	r0, [pc, #36]	; (11a14 <z_arm_configure_static_mpu_regions+0x30>)
   119f0:	f000 f918 	bl	11c24 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   119f4:	2300      	movs	r3, #0
   119f6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   119f8:	4b07      	ldr	r3, [pc, #28]	; (11a18 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   119fa:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   119fc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   119fe:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11a00:	9301      	str	r3, [sp, #4]
   11a02:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11a04:	f000 f918 	bl	11c38 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11a08:	b004      	add	sp, #16
   11a0a:	bd10      	pop	{r4, pc}
   11a0c:	20070000 	.word	0x20070000
   11a10:	20008000 	.word	0x20008000
   11a14:	00033754 	.word	0x00033754
   11a18:	20008fb8 	.word	0x20008fb8

00011a1c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11a1c:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11a1e:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11a20:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11a22:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11a26:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11a2a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11a2c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11a2e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11a30:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   11a34:	4905      	ldr	r1, [pc, #20]	; (11a4c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11a36:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11a3a:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   11a3e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   11a42:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   11a46:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11a4a:	bd10      	pop	{r4, pc}
   11a4c:	e000ed00 	.word	0xe000ed00

00011a50 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   11a50:	2807      	cmp	r0, #7
{
   11a52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11a54:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   11a56:	d90f      	bls.n	11a78 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11a58:	4b09      	ldr	r3, [pc, #36]	; (11a80 <region_allocate_and_init+0x30>)
   11a5a:	9003      	str	r0, [sp, #12]
   11a5c:	9302      	str	r3, [sp, #8]
   11a5e:	2300      	movs	r3, #0
   11a60:	2201      	movs	r2, #1
   11a62:	4618      	mov	r0, r3
   11a64:	e9cd 3300 	strd	r3, r3, [sp]
   11a68:	4906      	ldr	r1, [pc, #24]	; (11a84 <region_allocate_and_init+0x34>)
   11a6a:	f019 fedb 	bl	2b824 <z_log_msg_runtime_create.constprop.0>
   11a6e:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   11a72:	4620      	mov	r0, r4
   11a74:	b004      	add	sp, #16
   11a76:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   11a78:	f7ff ffd0 	bl	11a1c <region_init>
	return index;
   11a7c:	e7f9      	b.n	11a72 <region_allocate_and_init+0x22>
   11a7e:	bf00      	nop
   11a80:	000358c3 	.word	0x000358c3
   11a84:	00032f98 	.word	0x00032f98

00011a88 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a8c:	4689      	mov	r9, r1
   11a8e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11a90:	4606      	mov	r6, r0
   11a92:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   11a96:	4d54      	ldr	r5, [pc, #336]	; (11be8 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11a98:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   11a9a:	45c8      	cmp	r8, r9
   11a9c:	da2d      	bge.n	11afa <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   11a9e:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11aa2:	f1ba 0f00 	cmp.w	sl, #0
   11aa6:	d04a      	beq.n	11b3e <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   11aa8:	f1ba 0f1f 	cmp.w	sl, #31
   11aac:	d917      	bls.n	11ade <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   11aae:	f01a 0f1f 	tst.w	sl, #31
   11ab2:	d114      	bne.n	11ade <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   11ab4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11ab8:	f01b 0f1f 	tst.w	fp, #31
   11abc:	d10f      	bne.n	11ade <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11abe:	4658      	mov	r0, fp
   11ac0:	f019 fea7 	bl	2b812 <arm_cmse_mpu_region_get>
   11ac4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11ac6:	eb0a 000b 	add.w	r0, sl, fp
   11aca:	3801      	subs	r0, #1
   11acc:	f019 fea1 	bl	2b812 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11ad0:	4287      	cmp	r7, r0
   11ad2:	d016      	beq.n	11b02 <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11ad4:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11ad8:	4b44      	ldr	r3, [pc, #272]	; (11bec <mpu_configure_regions_and_partition.constprop.0+0x164>)
   11ada:	9703      	str	r7, [sp, #12]
   11adc:	e002      	b.n	11ae4 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11ade:	4b44      	ldr	r3, [pc, #272]	; (11bf0 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   11ae0:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   11ae4:	9302      	str	r3, [sp, #8]
   11ae6:	2300      	movs	r3, #0
   11ae8:	2201      	movs	r2, #1
   11aea:	4618      	mov	r0, r3
   11aec:	e9cd 3300 	strd	r3, r3, [sp]
   11af0:	4940      	ldr	r1, [pc, #256]	; (11bf4 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   11af2:	f019 fe97 	bl	2b824 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   11af6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11afa:	4620      	mov	r0, r4
   11afc:	b009      	add	sp, #36	; 0x24
   11afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11b02:	f117 0f16 	cmn.w	r7, #22
   11b06:	d0e7      	beq.n	11ad8 <mpu_configure_regions_and_partition.constprop.0+0x50>
   11b08:	42bc      	cmp	r4, r7
   11b0a:	dde5      	ble.n	11ad8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   11b0c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11b10:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   11b14:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11b18:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11b1c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11b20:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11b24:	e9d6 3200 	ldrd	r3, r2, [r6]
   11b28:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   11b2a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11b2c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   11b30:	d11d      	bne.n	11b6e <mpu_configure_regions_and_partition.constprop.0+0xe6>
   11b32:	45d3      	cmp	fp, sl
   11b34:	d107      	bne.n	11b46 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   11b36:	4631      	mov	r1, r6
   11b38:	b2f8      	uxtb	r0, r7
   11b3a:	f019 fe83 	bl	2b844 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11b3e:	f108 0801 	add.w	r8, r8, #1
   11b42:	360c      	adds	r6, #12
   11b44:	e7a9      	b.n	11a9a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   11b46:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   11b48:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11b4c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   11b50:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   11b54:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   11b58:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   11b5a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   11b5e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   11b60:	f019 fe70 	bl	2b844 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11b64:	f110 0f16 	cmn.w	r0, #22
   11b68:	d0c5      	beq.n	11af6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   11b6a:	1c44      	adds	r4, r0, #1
   11b6c:	e7e7      	b.n	11b3e <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   11b6e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11b72:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   11b76:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11b78:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11b7c:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11b80:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   11b82:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   11b84:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   11b86:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   11b88:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   11b8c:	d0e8      	beq.n	11b60 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   11b8e:	f019 fe59 	bl	2b844 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11b92:	f110 0f16 	cmn.w	r0, #22
   11b96:	d0ae      	beq.n	11af6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   11b98:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11b9c:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11ba0:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   11ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
   11ba8:	f362 0304 	bfi	r3, r2, #0, #5
   11bac:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   11bb0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11bb4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11bb8:	085b      	lsrs	r3, r3, #1
   11bba:	f363 1247 	bfi	r2, r3, #5, #3
   11bbe:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   11bc2:	e9d6 3200 	ldrd	r3, r2, [r6]
   11bc6:	4413      	add	r3, r2
   11bc8:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11bca:	f023 031f 	bic.w	r3, r3, #31
   11bce:	445b      	add	r3, fp
   11bd0:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   11bd4:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   11bd6:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   11bda:	a904      	add	r1, sp, #16
   11bdc:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   11bde:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   11be0:	f7ff ff36 	bl	11a50 <region_allocate_and_init>
   11be4:	e7be      	b.n	11b64 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   11be6:	bf00      	nop
   11be8:	e000ed00 	.word	0xe000ed00
   11bec:	0003590c 	.word	0x0003590c
   11bf0:	000358e9 	.word	0x000358e9
   11bf4:	00032f98 	.word	0x00032f98

00011bf8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11bf8:	2205      	movs	r2, #5
   11bfa:	4b04      	ldr	r3, [pc, #16]	; (11c0c <arm_core_mpu_enable+0x14>)
   11bfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11c00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11c04:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11c08:	4770      	bx	lr
   11c0a:	bf00      	nop
   11c0c:	e000ed00 	.word	0xe000ed00

00011c10 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11c10:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11c14:	2200      	movs	r2, #0
   11c16:	4b02      	ldr	r3, [pc, #8]	; (11c20 <arm_core_mpu_disable+0x10>)
   11c18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11c1c:	4770      	bx	lr
   11c1e:	bf00      	nop
   11c20:	e000ed00 	.word	0xe000ed00

00011c24 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11c24:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11c26:	4c03      	ldr	r4, [pc, #12]	; (11c34 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11c28:	7822      	ldrb	r2, [r4, #0]
   11c2a:	f7ff ff2d 	bl	11a88 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11c2e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   11c30:	bd10      	pop	{r4, pc}
   11c32:	bf00      	nop
   11c34:	200317f7 	.word	0x200317f7

00011c38 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   11c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c3c:	4d29      	ldr	r5, [pc, #164]	; (11ce4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   11c3e:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   11c40:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11c42:	f04f 0800 	mov.w	r8, #0
   11c46:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   11c48:	4f27      	ldr	r7, [pc, #156]	; (11ce8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11c4a:	45d0      	cmp	r8, sl
   11c4c:	da1b      	bge.n	11c86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11c4e:	f8d6 9004 	ldr.w	r9, [r6, #4]
   11c52:	f1b9 0f00 	cmp.w	r9, #0
   11c56:	d03f      	beq.n	11cd8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11c58:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11c5a:	4608      	mov	r0, r1
   11c5c:	9101      	str	r1, [sp, #4]
   11c5e:	f019 fdd8 	bl	2b812 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11c62:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11c64:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11c66:	eb09 0001 	add.w	r0, r9, r1
   11c6a:	3801      	subs	r0, #1
   11c6c:	f019 fdd1 	bl	2b812 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11c70:	4284      	cmp	r4, r0
   11c72:	f04f 0214 	mov.w	r2, #20
   11c76:	4b1d      	ldr	r3, [pc, #116]	; (11cec <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   11c78:	d008      	beq.n	11c8c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   11c7a:	fb02 f308 	mul.w	r3, r2, r8
   11c7e:	f06f 0215 	mvn.w	r2, #21
   11c82:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   11c86:	b003      	add	sp, #12
   11c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11c8c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11c90:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11c92:	d0f8      	beq.n	11c86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11c94:	7819      	ldrb	r1, [r3, #0]
   11c96:	42a1      	cmp	r1, r4
   11c98:	ddf5      	ble.n	11c86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   11c9a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   11c9e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   11ca2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   11ca6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11caa:	f100 0108 	add.w	r1, r0, #8
   11cae:	7b00      	ldrb	r0, [r0, #12]
   11cb0:	f364 0004 	bfi	r0, r4, #0, #5
   11cb4:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   11cb6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11cba:	790c      	ldrb	r4, [r1, #4]
   11cbc:	0840      	lsrs	r0, r0, #1
   11cbe:	f360 1447 	bfi	r4, r0, #5, #3
   11cc2:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   11cc4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11cc8:	f021 011f 	bic.w	r1, r1, #31
   11ccc:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   11cce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   11cd2:	f021 011f 	bic.w	r1, r1, #31
   11cd6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11cd8:	f108 0801 	add.w	r8, r8, #1
   11cdc:	3514      	adds	r5, #20
   11cde:	360c      	adds	r6, #12
   11ce0:	e7b3      	b.n	11c4a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   11ce2:	bf00      	nop
   11ce4:	2002f8d0 	.word	0x2002f8d0
   11ce8:	e000ed00 	.word	0xe000ed00
   11cec:	200317f7 	.word	0x200317f7

00011cf0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   11cf0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11cf2:	4d0e      	ldr	r5, [pc, #56]	; (11d2c <z_arm_mpu_init+0x3c>)
   11cf4:	682c      	ldr	r4, [r5, #0]
   11cf6:	2c08      	cmp	r4, #8
   11cf8:	d815      	bhi.n	11d26 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11cfa:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   11cfc:	f7ff ff88 	bl	11c10 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   11d00:	4b0b      	ldr	r3, [pc, #44]	; (11d30 <z_arm_mpu_init+0x40>)
   11d02:	4a0c      	ldr	r2, [pc, #48]	; (11d34 <z_arm_mpu_init+0x44>)
   11d04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11d08:	4284      	cmp	r4, r0
   11d0a:	d105      	bne.n	11d18 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11d0c:	4b0a      	ldr	r3, [pc, #40]	; (11d38 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   11d0e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   11d10:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11d12:	f7ff ff71 	bl	11bf8 <arm_core_mpu_enable>
}
   11d16:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11d18:	6869      	ldr	r1, [r5, #4]
   11d1a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11d1e:	f7ff fe7d 	bl	11a1c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11d22:	3001      	adds	r0, #1
   11d24:	e7f0      	b.n	11d08 <z_arm_mpu_init+0x18>
		return -1;
   11d26:	f04f 30ff 	mov.w	r0, #4294967295
   11d2a:	e7f4      	b.n	11d16 <z_arm_mpu_init+0x26>
   11d2c:	00033760 	.word	0x00033760
   11d30:	e000ed00 	.word	0xe000ed00
   11d34:	0044ffaa 	.word	0x0044ffaa
   11d38:	200317f7 	.word	0x200317f7

00011d3c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11d3c:	4b01      	ldr	r3, [pc, #4]	; (11d44 <__stdout_hook_install+0x8>)
   11d3e:	6018      	str	r0, [r3, #0]
}
   11d40:	4770      	bx	lr
   11d42:	bf00      	nop
   11d44:	200084e4 	.word	0x200084e4

00011d48 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   11d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d4a:	4606      	mov	r6, r0
   11d4c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   11d4e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   11d50:	4f06      	ldr	r7, [pc, #24]	; (11d6c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   11d52:	42ac      	cmp	r4, r5
   11d54:	da08      	bge.n	11d68 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   11d56:	683b      	ldr	r3, [r7, #0]
   11d58:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11d5a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   11d5c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   11d5e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11d62:	d001      	beq.n	11d68 <z_impl_zephyr_read_stdin+0x20>
   11d64:	280d      	cmp	r0, #13
   11d66:	d1f4      	bne.n	11d52 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   11d68:	4620      	mov	r0, r4
   11d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d6c:	200084e0 	.word	0x200084e0

00011d70 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   11d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d72:	460d      	mov	r5, r1
   11d74:	4f09      	ldr	r7, [pc, #36]	; (11d9c <z_impl_zephyr_write_stdout+0x2c>)
   11d76:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11d78:	f1c0 0401 	rsb	r4, r0, #1
   11d7c:	19a3      	adds	r3, r4, r6
   11d7e:	429d      	cmp	r5, r3
   11d80:	dc01      	bgt.n	11d86 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   11d82:	4628      	mov	r0, r5
   11d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11d86:	7873      	ldrb	r3, [r6, #1]
   11d88:	2b0a      	cmp	r3, #10
   11d8a:	d102      	bne.n	11d92 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11d8c:	200d      	movs	r0, #13
   11d8e:	683b      	ldr	r3, [r7, #0]
   11d90:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11d92:	683b      	ldr	r3, [r7, #0]
   11d94:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11d98:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11d9a:	e7ef      	b.n	11d7c <z_impl_zephyr_write_stdout+0xc>
   11d9c:	200084e4 	.word	0x200084e4

00011da0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11da0:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11da2:	2105      	movs	r1, #5
   11da4:	4801      	ldr	r0, [pc, #4]	; (11dac <_exit+0xc>)
   11da6:	f7ff ffe3 	bl	11d70 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11daa:	e7fe      	b.n	11daa <_exit+0xa>
   11dac:	0003592f 	.word	0x0003592f

00011db0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11db0:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11db2:	4c07      	ldr	r4, [pc, #28]	; (11dd0 <_sbrk+0x20>)
   11db4:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11db6:	18c2      	adds	r2, r0, r3
   11db8:	4806      	ldr	r0, [pc, #24]	; (11dd4 <_sbrk+0x24>)
   11dba:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11dbe:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   11dc2:	428a      	cmp	r2, r1
		heap_sz += count;
   11dc4:	bf36      	itet	cc
   11dc6:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11dc8:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11dcc:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   11dce:	bd10      	pop	{r4, pc}
   11dd0:	2002f8e4 	.word	0x2002f8e4
   11dd4:	2005cb04 	.word	0x2005cb04

00011dd8 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11dd8:	b508      	push	{r3, lr}
   11dda:	211d      	movs	r1, #29
   11ddc:	4804      	ldr	r0, [pc, #16]	; (11df0 <__chk_fail+0x18>)
   11dde:	f7ff ffc7 	bl	11d70 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11de2:	4040      	eors	r0, r0
   11de4:	f380 8811 	msr	BASEPRI, r0
   11de8:	f04f 0003 	mov.w	r0, #3
   11dec:	df02      	svc	2
	CODE_UNREACHABLE;
   11dee:	bf00      	nop
   11df0:	00035935 	.word	0x00035935

00011df4 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11df4:	2000      	movs	r0, #0
   11df6:	4b02      	ldr	r3, [pc, #8]	; (11e00 <remoteproc_mgr_boot+0xc>)
   11df8:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11dfc:	4770      	bx	lr
   11dfe:	bf00      	nop
   11e00:	40005000 	.word	0x40005000

00011e04 <get_battery_level>:
	/* Do not change the default value */
}

static uint8_t get_battery_level(void)
{
	if (get_battery_level_user != NULL) {
   11e04:	4b02      	ldr	r3, [pc, #8]	; (11e10 <get_battery_level+0xc>)
   11e06:	681b      	ldr	r3, [r3, #0]
   11e08:	b103      	cbz	r3, 11e0c <get_battery_level+0x8>
		return get_battery_level_user();
   11e0a:	4718      	bx	r3
	}

	return 255;
}
   11e0c:	20ff      	movs	r0, #255	; 0xff
   11e0e:	4770      	bx	lr
   11e10:	2002f8ec 	.word	0x2002f8ec

00011e14 <lorawan_init>:
	list->head = NULL;
   11e14:	2000      	movs	r0, #0
   11e16:	4b0a      	ldr	r3, [pc, #40]	; (11e40 <lorawan_init+0x2c>)
{
	ARG_UNUSED(dev);

	sys_slist_init(&dl_callbacks);

	mac_primitives.MacMcpsConfirm = mcps_confirm_handler;
   11e18:	4a0a      	ldr	r2, [pc, #40]	; (11e44 <lorawan_init+0x30>)
	list->tail = NULL;
   11e1a:	e9c3 0000 	strd	r0, r0, [r3]
   11e1e:	4b0a      	ldr	r3, [pc, #40]	; (11e48 <lorawan_init+0x34>)
   11e20:	601a      	str	r2, [r3, #0]
	mac_primitives.MacMcpsIndication = mcps_indication_handler;
   11e22:	4a0a      	ldr	r2, [pc, #40]	; (11e4c <lorawan_init+0x38>)
   11e24:	605a      	str	r2, [r3, #4]
	mac_primitives.MacMlmeConfirm = mlme_confirm_handler;
   11e26:	4a0a      	ldr	r2, [pc, #40]	; (11e50 <lorawan_init+0x3c>)
   11e28:	609a      	str	r2, [r3, #8]
	mac_primitives.MacMlmeIndication = mlme_indication_handler;
   11e2a:	4a0a      	ldr	r2, [pc, #40]	; (11e54 <lorawan_init+0x40>)
   11e2c:	60da      	str	r2, [r3, #12]
	mac_callbacks.GetBatteryLevel = get_battery_level;
   11e2e:	4b0a      	ldr	r3, [pc, #40]	; (11e58 <lorawan_init+0x44>)
   11e30:	4a0a      	ldr	r2, [pc, #40]	; (11e5c <lorawan_init+0x48>)
	mac_callbacks.GetTemperatureLevel = NULL;

	if (IS_ENABLED(CONFIG_LORAWAN_NVM_NONE)) {
		mac_callbacks.NvmDataChange = NULL;
   11e32:	6098      	str	r0, [r3, #8]
	mac_callbacks.GetTemperatureLevel = NULL;
   11e34:	e9c3 2000 	strd	r2, r0, [r3]
	} else {
		mac_callbacks.NvmDataChange = lorawan_nvm_data_mgmt_event;
	}

	mac_callbacks.MacProcessNotify = mac_process_notify;
   11e38:	4a09      	ldr	r2, [pc, #36]	; (11e60 <lorawan_init+0x4c>)
   11e3a:	60da      	str	r2, [r3, #12]

	return 0;
}
   11e3c:	4770      	bx	lr
   11e3e:	bf00      	nop
   11e40:	2002f910 	.word	0x2002f910
   11e44:	00012059 	.word	0x00012059
   11e48:	2002f900 	.word	0x2002f900
   11e4c:	00011f75 	.word	0x00011f75
   11e50:	00011e65 	.word	0x00011e65
   11e54:	00012025 	.word	0x00012025
   11e58:	2002f8f0 	.word	0x2002f8f0
   11e5c:	00011e05 	.word	0x00011e05
   11e60:	0002b8f3 	.word	0x0002b8f3

00011e64 <mlme_confirm_handler>:
{
   11e64:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   11e66:	7803      	ldrb	r3, [r0, #0]
{
   11e68:	b090      	sub	sp, #64	; 0x40
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   11e6a:	9304      	str	r3, [sp, #16]
   11e6c:	4b23      	ldr	r3, [pc, #140]	; (11efc <mlme_confirm_handler+0x98>)
   11e6e:	2600      	movs	r6, #0
   11e70:	9303      	str	r3, [sp, #12]
   11e72:	4b23      	ldr	r3, [pc, #140]	; (11f00 <mlme_confirm_handler+0x9c>)
{
   11e74:	4605      	mov	r5, r0
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   11e76:	9302      	str	r3, [sp, #8]
   11e78:	2308      	movs	r3, #8
   11e7a:	2204      	movs	r2, #4
   11e7c:	e9cd 6300 	strd	r6, r3, [sp]
   11e80:	4630      	mov	r0, r6
   11e82:	4633      	mov	r3, r6
   11e84:	491f      	ldr	r1, [pc, #124]	; (11f04 <mlme_confirm_handler+0xa0>)
   11e86:	f019 fd36 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
	if (mlme_confirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   11e8a:	786c      	ldrb	r4, [r5, #1]
   11e8c:	b174      	cbz	r4, 11eac <mlme_confirm_handler+0x48>
		LOG_ERR("MlmeConfirm failed : %s",
   11e8e:	4620      	mov	r0, r4
   11e90:	f000 fb64 	bl	1255c <lorawan_eventinfo2str>
   11e94:	4b1c      	ldr	r3, [pc, #112]	; (11f08 <mlme_confirm_handler+0xa4>)
   11e96:	2201      	movs	r2, #1
   11e98:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11e9c:	4633      	mov	r3, r6
   11e9e:	9003      	str	r0, [sp, #12]
   11ea0:	9600      	str	r6, [sp, #0]
		LOG_INF("Joined network! DevAddr: %08x", mib_req.Param.DevAddr);
   11ea2:	4618      	mov	r0, r3
   11ea4:	4917      	ldr	r1, [pc, #92]	; (11f04 <mlme_confirm_handler+0xa0>)
   11ea6:	f019 fd26 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
   11eaa:	e004      	b.n	11eb6 <mlme_confirm_handler+0x52>
	switch (mlme_confirm->MlmeRequest) {
   11eac:	782b      	ldrb	r3, [r5, #0]
   11eae:	2b01      	cmp	r3, #1
   11eb0:	d009      	beq.n	11ec6 <mlme_confirm_handler+0x62>
   11eb2:	2b04      	cmp	r3, #4
   11eb4:	d016      	beq.n	11ee4 <mlme_confirm_handler+0x80>
	last_mlme_confirm_status = mlme_confirm->Status;
   11eb6:	786a      	ldrb	r2, [r5, #1]
   11eb8:	4b14      	ldr	r3, [pc, #80]	; (11f0c <mlme_confirm_handler+0xa8>)
   11eba:	701a      	strb	r2, [r3, #0]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   11ebc:	4814      	ldr	r0, [pc, #80]	; (11f10 <mlme_confirm_handler+0xac>)
   11ebe:	f013 fd91 	bl	259e4 <z_impl_k_sem_give>
}
   11ec2:	b010      	add	sp, #64	; 0x40
   11ec4:	bd70      	pop	{r4, r5, r6, pc}
		mib_req.Type = MIB_DEV_ADDR;
   11ec6:	2307      	movs	r3, #7
		LoRaMacMibGetRequestConfirm(&mib_req);
   11ec8:	a806      	add	r0, sp, #24
		mib_req.Type = MIB_DEV_ADDR;
   11eca:	f88d 3018 	strb.w	r3, [sp, #24]
		LoRaMacMibGetRequestConfirm(&mib_req);
   11ece:	f005 f81f 	bl	16f10 <LoRaMacMibGetRequestConfirm>
		LOG_INF("Joined network! DevAddr: %08x", mib_req.Param.DevAddr);
   11ed2:	9b07      	ldr	r3, [sp, #28]
   11ed4:	2203      	movs	r2, #3
   11ed6:	9303      	str	r3, [sp, #12]
   11ed8:	4b0e      	ldr	r3, [pc, #56]	; (11f14 <mlme_confirm_handler+0xb0>)
   11eda:	9400      	str	r4, [sp, #0]
   11edc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11ee0:	4623      	mov	r3, r4
   11ee2:	e7de      	b.n	11ea2 <mlme_confirm_handler+0x3e>
		LOG_INF("Link check not implemented yet!");
   11ee4:	4b0c      	ldr	r3, [pc, #48]	; (11f18 <mlme_confirm_handler+0xb4>)
   11ee6:	2203      	movs	r2, #3
   11ee8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11eec:	4620      	mov	r0, r4
   11eee:	4623      	mov	r3, r4
   11ef0:	4904      	ldr	r1, [pc, #16]	; (11f04 <mlme_confirm_handler+0xa0>)
   11ef2:	9400      	str	r4, [sp, #0]
   11ef4:	f019 fcff 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
   11ef8:	e7dd      	b.n	11eb6 <mlme_confirm_handler+0x52>
   11efa:	bf00      	nop
   11efc:	00035c17 	.word	0x00035c17
   11f00:	0003597b 	.word	0x0003597b
   11f04:	00032f88 	.word	0x00032f88
   11f08:	000359a9 	.word	0x000359a9
   11f0c:	200317f8 	.word	0x200317f8
   11f10:	20008d90 	.word	0x20008d90
   11f14:	000359c1 	.word	0x000359c1
   11f18:	000359df 	.word	0x000359df

00011f1c <datarate_observe>:
	mib_req.Type = MIB_CHANNELS_DATARATE;
   11f1c:	232d      	movs	r3, #45	; 0x2d
{
   11f1e:	b530      	push	{r4, r5, lr}
	if ((mib_req.Param.ChannelsDatarate != current_datarate) ||
   11f20:	4c10      	ldr	r4, [pc, #64]	; (11f64 <datarate_observe+0x48>)
{
   11f22:	b08f      	sub	sp, #60	; 0x3c
   11f24:	4605      	mov	r5, r0
	LoRaMacMibGetRequestConfirm(&mib_req);
   11f26:	a804      	add	r0, sp, #16
	mib_req.Type = MIB_CHANNELS_DATARATE;
   11f28:	f88d 3010 	strb.w	r3, [sp, #16]
	LoRaMacMibGetRequestConfirm(&mib_req);
   11f2c:	f004 fff0 	bl	16f10 <LoRaMacMibGetRequestConfirm>
	if ((mib_req.Param.ChannelsDatarate != current_datarate) ||
   11f30:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   11f34:	7822      	ldrb	r2, [r4, #0]
   11f36:	4293      	cmp	r3, r2
   11f38:	d100      	bne.n	11f3c <datarate_observe+0x20>
   11f3a:	b18d      	cbz	r5, 11f60 <datarate_observe+0x44>
		current_datarate = mib_req.Param.ChannelsDatarate;
   11f3c:	b2d8      	uxtb	r0, r3
		if (dr_change_cb) {
   11f3e:	4b0a      	ldr	r3, [pc, #40]	; (11f68 <datarate_observe+0x4c>)
		current_datarate = mib_req.Param.ChannelsDatarate;
   11f40:	7020      	strb	r0, [r4, #0]
		if (dr_change_cb) {
   11f42:	681b      	ldr	r3, [r3, #0]
   11f44:	b103      	cbz	r3, 11f48 <datarate_observe+0x2c>
			dr_change_cb(current_datarate);
   11f46:	4798      	blx	r3
		LOG_INF("Datarate changed: DR_%d", current_datarate);
   11f48:	7823      	ldrb	r3, [r4, #0]
   11f4a:	2203      	movs	r2, #3
   11f4c:	9303      	str	r3, [sp, #12]
   11f4e:	4b07      	ldr	r3, [pc, #28]	; (11f6c <datarate_observe+0x50>)
   11f50:	4907      	ldr	r1, [pc, #28]	; (11f70 <datarate_observe+0x54>)
   11f52:	9302      	str	r3, [sp, #8]
   11f54:	2300      	movs	r3, #0
   11f56:	4618      	mov	r0, r3
   11f58:	e9cd 3300 	strd	r3, r3, [sp]
   11f5c:	f019 fccb 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
}
   11f60:	b00f      	add	sp, #60	; 0x3c
   11f62:	bd30      	pop	{r4, r5, pc}
   11f64:	200317fb 	.word	0x200317fb
   11f68:	2002f8e8 	.word	0x2002f8e8
   11f6c:	000359ff 	.word	0x000359ff
   11f70:	00032f88 	.word	0x00032f88

00011f74 <mcps_indication_handler>:
{
   11f74:	b5f0      	push	{r4, r5, r6, r7, lr}
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   11f76:	7803      	ldrb	r3, [r0, #0]
{
   11f78:	b087      	sub	sp, #28
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   11f7a:	9304      	str	r3, [sp, #16]
   11f7c:	4b23      	ldr	r3, [pc, #140]	; (1200c <mcps_indication_handler+0x98>)
   11f7e:	2400      	movs	r4, #0
   11f80:	9303      	str	r3, [sp, #12]
   11f82:	4b23      	ldr	r3, [pc, #140]	; (12010 <mcps_indication_handler+0x9c>)
{
   11f84:	4605      	mov	r5, r0
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   11f86:	9302      	str	r3, [sp, #8]
   11f88:	2308      	movs	r3, #8
   11f8a:	4620      	mov	r0, r4
   11f8c:	e9cd 4300 	strd	r4, r3, [sp]
   11f90:	2204      	movs	r2, #4
   11f92:	4623      	mov	r3, r4
   11f94:	491f      	ldr	r1, [pc, #124]	; (12014 <mcps_indication_handler+0xa0>)
   11f96:	f019 fcae 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
	if (mcps_indication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   11f9a:	7868      	ldrb	r0, [r5, #1]
   11f9c:	b170      	cbz	r0, 11fbc <mcps_indication_handler+0x48>
		LOG_ERR("McpsIndication failed : %s",
   11f9e:	f000 fadd 	bl	1255c <lorawan_eventinfo2str>
   11fa2:	4b1d      	ldr	r3, [pc, #116]	; (12018 <mcps_indication_handler+0xa4>)
   11fa4:	9003      	str	r0, [sp, #12]
   11fa6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11faa:	2201      	movs	r2, #1
   11fac:	4623      	mov	r3, r4
   11fae:	4620      	mov	r0, r4
   11fb0:	4918      	ldr	r1, [pc, #96]	; (12014 <mcps_indication_handler+0xa0>)
   11fb2:	9400      	str	r4, [sp, #0]
   11fb4:	f019 fc9f 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
}
   11fb8:	b007      	add	sp, #28
   11fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (lorawan_adr_enable) {
   11fbc:	4b17      	ldr	r3, [pc, #92]	; (1201c <mcps_indication_handler+0xa8>)
   11fbe:	781b      	ldrb	r3, [r3, #0]
   11fc0:	b10b      	cbz	r3, 11fc6 <mcps_indication_handler+0x52>
		datarate_observe(false);
   11fc2:	f7ff ffab 	bl	11f1c <datarate_observe>
	return list->head;
   11fc6:	4b16      	ldr	r3, [pc, #88]	; (12020 <mcps_indication_handler+0xac>)
   11fc8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   11fca:	2c00      	cmp	r4, #0
   11fcc:	d0f4      	beq.n	11fb8 <mcps_indication_handler+0x44>
		if ((cb->port == LW_RECV_PORT_ANY) ||
   11fce:	f64f 77ff 	movw	r7, #65535	; 0xffff
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   11fd2:	3c08      	subs	r4, #8
		if ((cb->port == LW_RECV_PORT_ANY) ||
   11fd4:	8823      	ldrh	r3, [r4, #0]
		    (cb->port == mcps_indication->Port)) {
   11fd6:	78e8      	ldrb	r0, [r5, #3]
		if ((cb->port == LW_RECV_PORT_ANY) ||
   11fd8:	42bb      	cmp	r3, r7
   11fda:	d001      	beq.n	11fe0 <mcps_indication_handler+0x6c>
   11fdc:	4283      	cmp	r3, r0
   11fde:	d110      	bne.n	12002 <mcps_indication_handler+0x8e>
			cb->cb(mcps_indication->Port,
   11fe0:	68ab      	ldr	r3, [r5, #8]
   11fe2:	7969      	ldrb	r1, [r5, #5]
   11fe4:	9301      	str	r3, [sp, #4]
   11fe6:	7b2b      	ldrb	r3, [r5, #12]
   11fe8:	f101 3cff 	add.w	ip, r1, #4294967295
   11fec:	9300      	str	r3, [sp, #0]
   11fee:	f1dc 0100 	rsbs	r1, ip, #0
   11ff2:	6866      	ldr	r6, [r4, #4]
   11ff4:	f995 3010 	ldrsb.w	r3, [r5, #16]
   11ff8:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
   11ffc:	eb41 010c 	adc.w	r1, r1, ip
   12000:	47b0      	blx	r6
	return node->next;
   12002:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   12004:	2c00      	cmp	r4, #0
   12006:	d0d7      	beq.n	11fb8 <mcps_indication_handler+0x44>
   12008:	3c08      	subs	r4, #8
   1200a:	e7e3      	b.n	11fd4 <mcps_indication_handler+0x60>
   1200c:	00035bff 	.word	0x00035bff
   12010:	00035a17 	.word	0x00035a17
   12014:	00032f88 	.word	0x00032f88
   12018:	00035a36 	.word	0x00035a36
   1201c:	200317fa 	.word	0x200317fa
   12020:	2002f910 	.word	0x2002f910

00012024 <mlme_indication_handler>:
{
   12024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("Received MlmeIndication %d", mlme_indication->MlmeIndication);
   12026:	7803      	ldrb	r3, [r0, #0]
   12028:	2208      	movs	r2, #8
   1202a:	9304      	str	r3, [sp, #16]
   1202c:	4b07      	ldr	r3, [pc, #28]	; (1204c <mlme_indication_handler+0x28>)
   1202e:	4908      	ldr	r1, [pc, #32]	; (12050 <mlme_indication_handler+0x2c>)
   12030:	9303      	str	r3, [sp, #12]
   12032:	4b08      	ldr	r3, [pc, #32]	; (12054 <mlme_indication_handler+0x30>)
   12034:	9302      	str	r3, [sp, #8]
   12036:	2300      	movs	r3, #0
   12038:	e9cd 3200 	strd	r3, r2, [sp]
   1203c:	4618      	mov	r0, r3
   1203e:	2204      	movs	r2, #4
   12040:	f019 fc59 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
}
   12044:	b007      	add	sp, #28
   12046:	f85d fb04 	ldr.w	pc, [sp], #4
   1204a:	bf00      	nop
   1204c:	00035c2c 	.word	0x00035c2c
   12050:	00032f88 	.word	0x00032f88
   12054:	00035a51 	.word	0x00035a51

00012058 <mcps_confirm_handler>:
{
   12058:	b5f0      	push	{r4, r5, r6, r7, lr}
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   1205a:	2400      	movs	r4, #0
   1205c:	2608      	movs	r6, #8
{
   1205e:	4605      	mov	r5, r0
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   12060:	7803      	ldrb	r3, [r0, #0]
{
   12062:	b087      	sub	sp, #28
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   12064:	9304      	str	r3, [sp, #16]
   12066:	4f19      	ldr	r7, [pc, #100]	; (120cc <mcps_confirm_handler+0x74>)
   12068:	4b19      	ldr	r3, [pc, #100]	; (120d0 <mcps_confirm_handler+0x78>)
   1206a:	2204      	movs	r2, #4
   1206c:	9302      	str	r3, [sp, #8]
   1206e:	4620      	mov	r0, r4
   12070:	4623      	mov	r3, r4
   12072:	e9cd 4600 	strd	r4, r6, [sp]
   12076:	4917      	ldr	r1, [pc, #92]	; (120d4 <mcps_confirm_handler+0x7c>)
   12078:	9703      	str	r7, [sp, #12]
   1207a:	f019 fc3c 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
	if (mcps_confirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   1207e:	786b      	ldrb	r3, [r5, #1]
   12080:	b1e3      	cbz	r3, 120bc <mcps_confirm_handler+0x64>
		LOG_ERR("McpsRequest failed : %s",
   12082:	4618      	mov	r0, r3
   12084:	f000 fa6a 	bl	1255c <lorawan_eventinfo2str>
   12088:	4b13      	ldr	r3, [pc, #76]	; (120d8 <mcps_confirm_handler+0x80>)
   1208a:	2201      	movs	r2, #1
   1208c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12090:	4623      	mov	r3, r4
   12092:	9003      	str	r0, [sp, #12]
   12094:	9400      	str	r4, [sp, #0]
		LOG_DBG("McpsRequest success!");
   12096:	4618      	mov	r0, r3
   12098:	490e      	ldr	r1, [pc, #56]	; (120d4 <mcps_confirm_handler+0x7c>)
   1209a:	f019 fc2c 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
	if (lorawan_adr_enable) {
   1209e:	4b0f      	ldr	r3, [pc, #60]	; (120dc <mcps_confirm_handler+0x84>)
   120a0:	781b      	ldrb	r3, [r3, #0]
   120a2:	b113      	cbz	r3, 120aa <mcps_confirm_handler+0x52>
		datarate_observe(false);
   120a4:	2000      	movs	r0, #0
   120a6:	f7ff ff39 	bl	11f1c <datarate_observe>
	last_mcps_confirm_status = mcps_confirm->Status;
   120aa:	786a      	ldrb	r2, [r5, #1]
   120ac:	4b0c      	ldr	r3, [pc, #48]	; (120e0 <mcps_confirm_handler+0x88>)
   120ae:	701a      	strb	r2, [r3, #0]
   120b0:	480c      	ldr	r0, [pc, #48]	; (120e4 <mcps_confirm_handler+0x8c>)
}
   120b2:	b007      	add	sp, #28
   120b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   120b8:	f013 bc94 	b.w	259e4 <z_impl_k_sem_give>
		LOG_DBG("McpsRequest success!");
   120bc:	4a0a      	ldr	r2, [pc, #40]	; (120e8 <mcps_confirm_handler+0x90>)
   120be:	9703      	str	r7, [sp, #12]
   120c0:	e9cd 6201 	strd	r6, r2, [sp, #4]
   120c4:	9300      	str	r3, [sp, #0]
   120c6:	2204      	movs	r2, #4
   120c8:	e7e5      	b.n	12096 <mcps_confirm_handler+0x3e>
   120ca:	bf00      	nop
   120cc:	00035bea 	.word	0x00035bea
   120d0:	00035a70 	.word	0x00035a70
   120d4:	00032f88 	.word	0x00032f88
   120d8:	00035a9e 	.word	0x00035a9e
   120dc:	200317fa 	.word	0x200317fa
   120e0:	200317f9 	.word	0x200317f9
   120e4:	20008d78 	.word	0x20008d78
   120e8:	00035ab6 	.word	0x00035ab6

000120ec <lorawan_set_region>:
{
   120ec:	b510      	push	{r4, lr}
	switch (region) {
   120ee:	2805      	cmp	r0, #5
{
   120f0:	b086      	sub	sp, #24
	switch (region) {
   120f2:	d113      	bne.n	1211c <lorawan_set_region+0x30>
		selected_region = LORAMAC_REGION_EU868;
   120f4:	4b10      	ldr	r3, [pc, #64]	; (12138 <lorawan_set_region+0x4c>)
	LOG_DBG("Selected region %d", region);
   120f6:	2400      	movs	r4, #0
		selected_region = LORAMAC_REGION_EU868;
   120f8:	7018      	strb	r0, [r3, #0]
	LOG_DBG("Selected region %d", region);
   120fa:	4b10      	ldr	r3, [pc, #64]	; (1213c <lorawan_set_region+0x50>)
   120fc:	9004      	str	r0, [sp, #16]
   120fe:	9303      	str	r3, [sp, #12]
   12100:	4b0f      	ldr	r3, [pc, #60]	; (12140 <lorawan_set_region+0x54>)
   12102:	4620      	mov	r0, r4
   12104:	9302      	str	r3, [sp, #8]
   12106:	2308      	movs	r3, #8
   12108:	2204      	movs	r2, #4
   1210a:	e9cd 4300 	strd	r4, r3, [sp]
   1210e:	490d      	ldr	r1, [pc, #52]	; (12144 <lorawan_set_region+0x58>)
   12110:	4623      	mov	r3, r4
   12112:	f019 fbf0 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
	return 0;
   12116:	4620      	mov	r0, r4
}
   12118:	b006      	add	sp, #24
   1211a:	bd10      	pop	{r4, pc}
		LOG_ERR("No support for region %d!", region);
   1211c:	4b0a      	ldr	r3, [pc, #40]	; (12148 <lorawan_set_region+0x5c>)
	switch (region) {
   1211e:	9003      	str	r0, [sp, #12]
		LOG_ERR("No support for region %d!", region);
   12120:	9302      	str	r3, [sp, #8]
   12122:	2300      	movs	r3, #0
   12124:	2201      	movs	r2, #1
   12126:	4618      	mov	r0, r3
   12128:	e9cd 3300 	strd	r3, r3, [sp]
   1212c:	4905      	ldr	r1, [pc, #20]	; (12144 <lorawan_set_region+0x58>)
   1212e:	f019 fbe2 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   12132:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12136:	e7ef      	b.n	12118 <lorawan_set_region+0x2c>
   12138:	20008ac6 	.word	0x20008ac6
   1213c:	00035c5f 	.word	0x00035c5f
   12140:	00035acf 	.word	0x00035acf
   12144:	00032f88 	.word	0x00032f88
   12148:	00035ae6 	.word	0x00035ae6

0001214c <lorawan_join>:
{
   1214c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1214e:	4604      	mov	r4, r0
   12150:	b09f      	sub	sp, #124	; 0x7c
	return z_impl_k_mutex_lock(mutex, timeout);
   12152:	f04f 32ff 	mov.w	r2, #4294967295
   12156:	f04f 33ff 	mov.w	r3, #4294967295
   1215a:	486e      	ldr	r0, [pc, #440]	; (12314 <lorawan_join+0x1c8>)
   1215c:	f013 fb56 	bl	2580c <z_impl_k_mutex_lock>
	mib_req.Param.EnablePublicNetwork = true;
   12160:	2601      	movs	r6, #1
	mib_req.Type = MIB_PUBLIC_NETWORK;
   12162:	231d      	movs	r3, #29
	LoRaMacMibSetRequestConfirm(&mib_req);
   12164:	a80a      	add	r0, sp, #40	; 0x28
	mib_req.Type = MIB_PUBLIC_NETWORK;
   12166:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	mib_req.Param.EnablePublicNetwork = true;
   1216a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	LoRaMacMibSetRequestConfirm(&mib_req);
   1216e:	f004 ffaf 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	if (join_cfg->mode == LORAWAN_ACT_OTAA) {
   12172:	7d25      	ldrb	r5, [r4, #20]
   12174:	2d00      	cmp	r5, #0
   12176:	d176      	bne.n	12266 <lorawan_join+0x11a>
	mlme_req.Req.Join.Datarate = default_datarate;
   12178:	4b67      	ldr	r3, [pc, #412]	; (12318 <lorawan_join+0x1cc>)
	mlme_req.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
   1217a:	2702      	movs	r7, #2
	mlme_req.Req.Join.Datarate = default_datarate;
   1217c:	781b      	ldrb	r3, [r3, #0]
		if (LoRaMacMibGetRequestConfirm(&mib_req) !=
   1217e:	a814      	add	r0, sp, #80	; 0x50
	mlme_req.Req.Join.Datarate = default_datarate;
   12180:	f88d 3019 	strb.w	r3, [sp, #25]
		mib_req.Type = MIB_NVM_CTXS;
   12184:	2334      	movs	r3, #52	; 0x34
	mlme_req.Type = MLME_JOIN;
   12186:	f88d 6014 	strb.w	r6, [sp, #20]
	mlme_req.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
   1218a:	f88d 7018 	strb.w	r7, [sp, #24]
		mib_req.Type = MIB_NVM_CTXS;
   1218e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		if (LoRaMacMibGetRequestConfirm(&mib_req) !=
   12192:	f004 febd 	bl	16f10 <LoRaMacMibGetRequestConfirm>
   12196:	b328      	cbz	r0, 121e4 <lorawan_join+0x98>
			LOG_ERR("Could not get NVM context");
   12198:	4b60      	ldr	r3, [pc, #384]	; (1231c <lorawan_join+0x1d0>)
   1219a:	4632      	mov	r2, r6
   1219c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   121a0:	4628      	mov	r0, r5
   121a2:	462b      	mov	r3, r5
   121a4:	495e      	ldr	r1, [pc, #376]	; (12320 <lorawan_join+0x1d4>)
   121a6:	9500      	str	r5, [sp, #0]
   121a8:	f019 fba5 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   121ac:	24ea      	movs	r4, #234	; 0xea
			LOG_ERR("OTAA join failed: %s",
   121ae:	4620      	mov	r0, r4
   121b0:	f000 f9c8 	bl	12544 <lorawan_status2str>
   121b4:	4b5b      	ldr	r3, [pc, #364]	; (12324 <lorawan_join+0x1d8>)
   121b6:	9003      	str	r0, [sp, #12]
   121b8:	9302      	str	r3, [sp, #8]
   121ba:	2300      	movs	r3, #0
   121bc:	2201      	movs	r2, #1
   121be:	4618      	mov	r0, r3
   121c0:	e9cd 3300 	strd	r3, r3, [sp]
   121c4:	4956      	ldr	r1, [pc, #344]	; (12320 <lorawan_join+0x1d4>)
   121c6:	f019 fb96 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
			ret = lorawan_status2errno(status);
   121ca:	4620      	mov	r0, r4
   121cc:	f000 f9d2 	bl	12574 <lorawan_status2errno>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
   121d0:	4604      	mov	r4, r0
	if (ret == 0) {
   121d2:	2800      	cmp	r0, #0
   121d4:	f000 8088 	beq.w	122e8 <lorawan_join+0x19c>
	return z_impl_k_mutex_unlock(mutex);
   121d8:	484e      	ldr	r0, [pc, #312]	; (12314 <lorawan_join+0x1c8>)
   121da:	f013 fb91 	bl	25900 <z_impl_k_mutex_unlock>
}
   121de:	4620      	mov	r0, r4
   121e0:	b01f      	add	sp, #124	; 0x7c
   121e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mib_req.Param.Contexts->Crypto.DevNonce =
   121e4:	68e2      	ldr	r2, [r4, #12]
   121e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   121e8:	a814      	add	r0, sp, #80	; 0x50
		mib_req.Param.Contexts->Crypto.DevNonce =
   121ea:	809a      	strh	r2, [r3, #4]
	mib_req.Param.DevEui = join_cfg->dev_eui;
   121ec:	6923      	ldr	r3, [r4, #16]
	mib_req.Type = MIB_DEV_EUI;
   121ee:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
	mib_req.Param.DevEui = join_cfg->dev_eui;
   121f2:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   121f4:	f004 ff6c 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_JOIN_EUI;
   121f8:	2303      	movs	r3, #3
   121fa:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.JoinEui = join_cfg->otaa.join_eui;
   121fe:	6823      	ldr	r3, [r4, #0]
	LoRaMacMibSetRequestConfirm(&mib_req);
   12200:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.JoinEui = join_cfg->otaa.join_eui;
   12202:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12204:	f004 ff64 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_KEY;
   12208:	2309      	movs	r3, #9
	mib_req.Type = MIB_APP_KEY;
   1220a:	2508      	movs	r5, #8
	mib_req.Type = MIB_NWK_KEY;
   1220c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NwkKey = join_cfg->otaa.nwk_key;
   12210:	6863      	ldr	r3, [r4, #4]
	LoRaMacMibSetRequestConfirm(&mib_req);
   12212:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NwkKey = join_cfg->otaa.nwk_key;
   12214:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12216:	f004 ff5b 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Param.AppKey = join_cfg->otaa.app_key;
   1221a:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   1221c:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AppKey = join_cfg->otaa.app_key;
   1221e:	9315      	str	r3, [sp, #84]	; 0x54
	mib_req.Type = MIB_APP_KEY;
   12220:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
   12224:	f004 ff54 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	return LoRaMacMlmeRequest(&mlme_req);
   12228:	a805      	add	r0, sp, #20
   1222a:	f005 fa29 	bl	17680 <LoRaMacMlmeRequest>
   1222e:	4603      	mov	r3, r0
   12230:	4604      	mov	r4, r0
		if (status != LORAMAC_STATUS_OK) {
   12232:	2800      	cmp	r0, #0
   12234:	d1bb      	bne.n	121ae <lorawan_join+0x62>
		LOG_DBG("Network join request sent!");
   12236:	4a3c      	ldr	r2, [pc, #240]	; (12328 <lorawan_join+0x1dc>)
   12238:	4939      	ldr	r1, [pc, #228]	; (12320 <lorawan_join+0x1d4>)
   1223a:	9203      	str	r2, [sp, #12]
   1223c:	4a3b      	ldr	r2, [pc, #236]	; (1232c <lorawan_join+0x1e0>)
   1223e:	9000      	str	r0, [sp, #0]
   12240:	e9cd 5201 	strd	r5, r2, [sp, #4]
   12244:	2204      	movs	r2, #4
   12246:	f019 fb56 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_sem_take(sem, timeout);
   1224a:	f04f 33ff 	mov.w	r3, #4294967295
   1224e:	f04f 32ff 	mov.w	r2, #4294967295
   12252:	4837      	ldr	r0, [pc, #220]	; (12330 <lorawan_join+0x1e4>)
   12254:	f013 fbec 	bl	25a30 <z_impl_k_sem_take>
		if (last_mlme_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
   12258:	4b36      	ldr	r3, [pc, #216]	; (12334 <lorawan_join+0x1e8>)
   1225a:	7818      	ldrb	r0, [r3, #0]
   1225c:	2800      	cmp	r0, #0
   1225e:	d043      	beq.n	122e8 <lorawan_join+0x19c>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
   12260:	f000 f99a 	bl	12598 <lorawan_eventinfo2errno>
   12264:	e7b4      	b.n	121d0 <lorawan_join+0x84>
	} else if (join_cfg->mode == LORAWAN_ACT_ABP) {
   12266:	2d01      	cmp	r5, #1
   12268:	d150      	bne.n	1230c <lorawan_join+0x1c0>
	mib_req.Type = MIB_ABP_LORAWAN_VERSION;
   1226a:	2335      	movs	r3, #53	; 0x35
   1226c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.AbpLrWanVersion.Value = LORAWAN_ABP_VERSION;
   12270:	4b31      	ldr	r3, [pc, #196]	; (12338 <lorawan_join+0x1ec>)
	LoRaMacMibSetRequestConfirm(&mib_req);
   12272:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AbpLrWanVersion.Value = LORAWAN_ABP_VERSION;
   12274:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12276:	f004 ff2b 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NET_ID;
   1227a:	2306      	movs	r3, #6
   1227c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NetID = 0;
   12280:	2300      	movs	r3, #0
	LoRaMacMibSetRequestConfirm(&mib_req);
   12282:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NetID = 0;
   12284:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12286:	f004 ff23 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_DEV_ADDR;
   1228a:	2307      	movs	r3, #7
   1228c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.DevAddr = join_cfg->abp.dev_addr;
   12290:	6823      	ldr	r3, [r4, #0]
	LoRaMacMibSetRequestConfirm(&mib_req);
   12292:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.DevAddr = join_cfg->abp.dev_addr;
   12294:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12296:	f004 ff1b 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_F_NWK_S_INT_KEY;
   1229a:	230c      	movs	r3, #12
   1229c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.FNwkSIntKey = join_cfg->abp.nwk_skey;
   122a0:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   122a2:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.FNwkSIntKey = join_cfg->abp.nwk_skey;
   122a4:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   122a6:	f004 ff13 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_S_NWK_S_INT_KEY;
   122aa:	230d      	movs	r3, #13
   122ac:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.SNwkSIntKey = join_cfg->abp.nwk_skey;
   122b0:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   122b2:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.SNwkSIntKey = join_cfg->abp.nwk_skey;
   122b4:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   122b6:	f004 ff0b 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_S_ENC_KEY;
   122ba:	230e      	movs	r3, #14
   122bc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NwkSEncKey = join_cfg->abp.nwk_skey;
   122c0:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   122c2:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NwkSEncKey = join_cfg->abp.nwk_skey;
   122c4:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   122c6:	f004 ff03 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_APP_S_KEY;
   122ca:	230f      	movs	r3, #15
   122cc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.AppSKey = join_cfg->abp.app_skey;
   122d0:	6863      	ldr	r3, [r4, #4]
	LoRaMacMibSetRequestConfirm(&mib_req);
   122d2:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AppSKey = join_cfg->abp.app_skey;
   122d4:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   122d6:	f004 fefb 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	LoRaMacMibSetRequestConfirm(&mib_req);
   122da:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Type = MIB_NETWORK_ACTIVATION;
   122dc:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	mib_req.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
   122e0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   122e4:	f004 fef4 	bl	170d0 <LoRaMacMibSetRequestConfirm>
		if (!lorawan_adr_enable) {
   122e8:	4b14      	ldr	r3, [pc, #80]	; (1233c <lorawan_join+0x1f0>)
   122ea:	781b      	ldrb	r3, [r3, #0]
   122ec:	b94b      	cbnz	r3, 12302 <lorawan_join+0x1b6>
			mib_req.Type = MIB_CHANNELS_DATARATE;
   122ee:	232d      	movs	r3, #45	; 0x2d
   122f0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
			mib_req.Param.ChannelsDatarate = default_datarate;
   122f4:	4b08      	ldr	r3, [pc, #32]	; (12318 <lorawan_join+0x1cc>)
			LoRaMacMibSetRequestConfirm(&mib_req);
   122f6:	a814      	add	r0, sp, #80	; 0x50
			mib_req.Param.ChannelsDatarate = default_datarate;
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
			LoRaMacMibSetRequestConfirm(&mib_req);
   122fe:	f004 fee7 	bl	170d0 <LoRaMacMibSetRequestConfirm>
		datarate_observe(true);
   12302:	2001      	movs	r0, #1
   12304:	f7ff fe0a 	bl	11f1c <datarate_observe>
   12308:	2400      	movs	r4, #0
   1230a:	e765      	b.n	121d8 <lorawan_join+0x8c>
		ret = -EINVAL;
   1230c:	f06f 0415 	mvn.w	r4, #21
   12310:	e762      	b.n	121d8 <lorawan_join+0x8c>
   12312:	bf00      	nop
   12314:	20008c04 	.word	0x20008c04
   12318:	200317fc 	.word	0x200317fc
   1231c:	00035b00 	.word	0x00035b00
   12320:	00032f88 	.word	0x00032f88
   12324:	00035b1a 	.word	0x00035b1a
   12328:	00035c52 	.word	0x00035c52
   1232c:	00035b2f 	.word	0x00035b2f
   12330:	20008d90 	.word	0x20008d90
   12334:	200317f8 	.word	0x200317f8
   12338:	01000300 	.word	0x01000300
   1233c:	200317fa 	.word	0x200317fa

00012340 <lorawan_enable_adr>:
{
   12340:	b500      	push	{lr}
	if (enable != lorawan_adr_enable) {
   12342:	4b08      	ldr	r3, [pc, #32]	; (12364 <lorawan_enable_adr+0x24>)
{
   12344:	b08b      	sub	sp, #44	; 0x2c
	if (enable != lorawan_adr_enable) {
   12346:	781a      	ldrb	r2, [r3, #0]
   12348:	4282      	cmp	r2, r0
   1234a:	d008      	beq.n	1235e <lorawan_enable_adr+0x1e>
		lorawan_adr_enable = enable;
   1234c:	7018      	strb	r0, [r3, #0]
		mib_req.Type = MIB_ADR;
   1234e:	2305      	movs	r3, #5
		mib_req.Param.AdrEnable = lorawan_adr_enable;
   12350:	f88d 0004 	strb.w	r0, [sp, #4]
		LoRaMacMibSetRequestConfirm(&mib_req);
   12354:	4668      	mov	r0, sp
		mib_req.Type = MIB_ADR;
   12356:	f88d 3000 	strb.w	r3, [sp]
		LoRaMacMibSetRequestConfirm(&mib_req);
   1235a:	f004 feb9 	bl	170d0 <LoRaMacMibSetRequestConfirm>
}
   1235e:	b00b      	add	sp, #44	; 0x2c
   12360:	f85d fb04 	ldr.w	pc, [sp], #4
   12364:	200317fa 	.word	0x200317fa

00012368 <lorawan_send>:
{
   12368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1236a:	4607      	mov	r7, r0
   1236c:	4615      	mov	r5, r2
   1236e:	461c      	mov	r4, r3
	if (data == NULL) {
   12370:	460e      	mov	r6, r1
{
   12372:	b08b      	sub	sp, #44	; 0x2c
	if (data == NULL) {
   12374:	2900      	cmp	r1, #0
   12376:	d05f      	beq.n	12438 <lorawan_send+0xd0>
	return z_impl_k_mutex_lock(mutex, timeout);
   12378:	f04f 32ff 	mov.w	r2, #4294967295
   1237c:	f04f 33ff 	mov.w	r3, #4294967295
   12380:	482f      	ldr	r0, [pc, #188]	; (12440 <lorawan_send+0xd8>)
   12382:	f013 fa43 	bl	2580c <z_impl_k_mutex_lock>
	status = LoRaMacQueryTxPossible(len, &tx_info);
   12386:	4628      	mov	r0, r5
   12388:	a904      	add	r1, sp, #16
   1238a:	f004 fd5f 	bl	16e4c <LoRaMacQueryTxPossible>
	if (status != LORAMAC_STATUS_OK) {
   1238e:	b388      	cbz	r0, 123f4 <lorawan_send+0x8c>
		LOG_ERR("LoRaWAN Query Tx Possible Failed: %s",
   12390:	f000 f8d8 	bl	12544 <lorawan_status2str>
   12394:	2400      	movs	r4, #0
		empty_frame = true;
   12396:	2501      	movs	r5, #1
		LOG_ERR("LoRaWAN Query Tx Possible Failed: %s",
   12398:	4b2a      	ldr	r3, [pc, #168]	; (12444 <lorawan_send+0xdc>)
   1239a:	9003      	str	r0, [sp, #12]
   1239c:	9302      	str	r3, [sp, #8]
   1239e:	2201      	movs	r2, #1
   123a0:	4623      	mov	r3, r4
   123a2:	4620      	mov	r0, r4
   123a4:	e9cd 4400 	strd	r4, r4, [sp]
   123a8:	4927      	ldr	r1, [pc, #156]	; (12448 <lorawan_send+0xe0>)
   123aa:	f019 faa4 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
		mcps_req.Type = MCPS_UNCONFIRMED;
   123ae:	f88d 4014 	strb.w	r4, [sp, #20]
		mcps_req.Req.Unconfirmed.fBuffer = NULL;
   123b2:	9407      	str	r4, [sp, #28]
		mcps_req.Req.Unconfirmed.fBufferSize = 0;
   123b4:	f8ad 4020 	strh.w	r4, [sp, #32]
	status = LoRaMacMcpsRequest(&mcps_req);
   123b8:	a805      	add	r0, sp, #20
		mcps_req.Req.Unconfirmed.Datarate = DR_0;
   123ba:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
	status = LoRaMacMcpsRequest(&mcps_req);
   123be:	f005 fa57 	bl	17870 <LoRaMacMcpsRequest>
	if (status != LORAMAC_STATUS_OK) {
   123c2:	4604      	mov	r4, r0
   123c4:	b330      	cbz	r0, 12414 <lorawan_send+0xac>
		LOG_ERR("LoRaWAN Send failed: %s", lorawan_status2str(status));
   123c6:	f000 f8bd 	bl	12544 <lorawan_status2str>
   123ca:	4b20      	ldr	r3, [pc, #128]	; (1244c <lorawan_send+0xe4>)
   123cc:	2201      	movs	r2, #1
   123ce:	9302      	str	r3, [sp, #8]
   123d0:	2300      	movs	r3, #0
   123d2:	491d      	ldr	r1, [pc, #116]	; (12448 <lorawan_send+0xe0>)
   123d4:	e9cd 3300 	strd	r3, r3, [sp]
   123d8:	9003      	str	r0, [sp, #12]
   123da:	4618      	mov	r0, r3
   123dc:	f019 fa8b 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
		ret = lorawan_status2errno(status);
   123e0:	4620      	mov	r0, r4
   123e2:	f000 f8c7 	bl	12574 <lorawan_status2errno>
   123e6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   123e8:	4815      	ldr	r0, [pc, #84]	; (12440 <lorawan_send+0xd8>)
   123ea:	f013 fa89 	bl	25900 <z_impl_k_mutex_unlock>
}
   123ee:	4620      	mov	r0, r4
   123f0:	b00b      	add	sp, #44	; 0x2c
   123f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (type) {
   123f4:	b15c      	cbz	r4, 1240e <lorawan_send+0xa6>
   123f6:	2c01      	cmp	r4, #1
   123f8:	d009      	beq.n	1240e <lorawan_send+0xa6>
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   123fa:	4b15      	ldr	r3, [pc, #84]	; (12450 <lorawan_send+0xe8>)
		mcps_req.Req.Unconfirmed.fBufferSize = len;
   123fc:	f8ad 5020 	strh.w	r5, [sp, #32]
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   12400:	f993 4000 	ldrsb.w	r4, [r3]
	bool empty_frame = false;
   12404:	2500      	movs	r5, #0
		mcps_req.Req.Unconfirmed.fPort = port;
   12406:	f88d 7018 	strb.w	r7, [sp, #24]
		mcps_req.Req.Unconfirmed.fBuffer = data;
   1240a:	9607      	str	r6, [sp, #28]
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   1240c:	e7d4      	b.n	123b8 <lorawan_send+0x50>
			mcps_req.Type = MCPS_CONFIRMED;
   1240e:	f88d 4014 	strb.w	r4, [sp, #20]
			break;
   12412:	e7f2      	b.n	123fa <lorawan_send+0x92>
	return z_impl_k_sem_take(sem, timeout);
   12414:	f04f 33ff 	mov.w	r3, #4294967295
   12418:	f04f 32ff 	mov.w	r2, #4294967295
   1241c:	480d      	ldr	r0, [pc, #52]	; (12454 <lorawan_send+0xec>)
   1241e:	f013 fb07 	bl	25a30 <z_impl_k_sem_take>
	if (last_mcps_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
   12422:	4b0d      	ldr	r3, [pc, #52]	; (12458 <lorawan_send+0xf0>)
   12424:	7818      	ldrb	r0, [r3, #0]
   12426:	b108      	cbz	r0, 1242c <lorawan_send+0xc4>
		ret = lorawan_eventinfo2errno(last_mcps_confirm_status);
   12428:	f000 f8b6 	bl	12598 <lorawan_eventinfo2errno>
		ret = -EAGAIN;
   1242c:	2d00      	cmp	r5, #0
	int ret = 0;
   1242e:	4604      	mov	r4, r0
		ret = -EAGAIN;
   12430:	bf18      	it	ne
   12432:	f06f 040a 	mvnne.w	r4, #10
   12436:	e7d7      	b.n	123e8 <lorawan_send+0x80>
		return -EINVAL;
   12438:	f06f 0415 	mvn.w	r4, #21
   1243c:	e7d7      	b.n	123ee <lorawan_send+0x86>
   1243e:	bf00      	nop
   12440:	20008c18 	.word	0x20008c18
   12444:	00035b4e 	.word	0x00035b4e
   12448:	00032f88 	.word	0x00032f88
   1244c:	00035b73 	.word	0x00035b73
   12450:	200317fb 	.word	0x200317fb
   12454:	20008d78 	.word	0x20008d78
   12458:	200317f9 	.word	0x200317f9

0001245c <lorawan_register_downlink_callback>:
	parent->next = child;
   1245c:	2300      	movs	r3, #0
   1245e:	6083      	str	r3, [r0, #8]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   12460:	4b05      	ldr	r3, [pc, #20]	; (12478 <lorawan_register_downlink_callback+0x1c>)
	sys_slist_append(&dl_callbacks, &cb->node);
   12462:	f100 0208 	add.w	r2, r0, #8
   12466:	6859      	ldr	r1, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12468:	b911      	cbnz	r1, 12470 <lorawan_register_downlink_callback+0x14>
	list->head = node;
   1246a:	e9c3 2200 	strd	r2, r2, [r3]
}
   1246e:	4770      	bx	lr
	parent->next = child;
   12470:	600a      	str	r2, [r1, #0]
	list->tail = node;
   12472:	605a      	str	r2, [r3, #4]
}
   12474:	4770      	bx	lr
   12476:	bf00      	nop
   12478:	2002f910 	.word	0x2002f910

0001247c <lorawan_register_dr_changed_callback>:
	dr_change_cb = cb;
   1247c:	4b01      	ldr	r3, [pc, #4]	; (12484 <lorawan_register_dr_changed_callback+0x8>)
   1247e:	6018      	str	r0, [r3, #0]
}
   12480:	4770      	bx	lr
   12482:	bf00      	nop
   12484:	2002f8e8 	.word	0x2002f8e8

00012488 <lorawan_start>:
{
   12488:	b570      	push	{r4, r5, r6, lr}
	status = LoRaMacInitialization(&mac_primitives, &mac_callbacks,
   1248a:	4e24      	ldr	r6, [pc, #144]	; (1251c <lorawan_start+0x94>)
   1248c:	4924      	ldr	r1, [pc, #144]	; (12520 <lorawan_start+0x98>)
   1248e:	7832      	ldrb	r2, [r6, #0]
   12490:	4824      	ldr	r0, [pc, #144]	; (12524 <lorawan_start+0x9c>)
{
   12492:	b092      	sub	sp, #72	; 0x48
	status = LoRaMacInitialization(&mac_primitives, &mac_callbacks,
   12494:	f004 fb0c 	bl	16ab0 <LoRaMacInitialization>
	if (status != LORAMAC_STATUS_OK) {
   12498:	4604      	mov	r4, r0
   1249a:	b180      	cbz	r0, 124be <lorawan_start+0x36>
		LOG_ERR("LoRaMacInitialization failed: %s",
   1249c:	f000 f852 	bl	12544 <lorawan_status2str>
   124a0:	4b21      	ldr	r3, [pc, #132]	; (12528 <lorawan_start+0xa0>)
   124a2:	9003      	str	r0, [sp, #12]
   124a4:	9302      	str	r3, [sp, #8]
   124a6:	2300      	movs	r3, #0
   124a8:	e9cd 3300 	strd	r3, r3, [sp]
		LOG_ERR("Failed to start the LoRaMAC stack: %s",
   124ac:	4618      	mov	r0, r3
   124ae:	2201      	movs	r2, #1
   124b0:	491e      	ldr	r1, [pc, #120]	; (1252c <lorawan_start+0xa4>)
   124b2:	f019 fa20 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   124b6:	f06f 0015 	mvn.w	r0, #21
}
   124ba:	b012      	add	sp, #72	; 0x48
   124bc:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("LoRaMAC Initialized");
   124be:	4b1c      	ldr	r3, [pc, #112]	; (12530 <lorawan_start+0xa8>)
   124c0:	2204      	movs	r2, #4
   124c2:	9303      	str	r3, [sp, #12]
   124c4:	4b1b      	ldr	r3, [pc, #108]	; (12534 <lorawan_start+0xac>)
   124c6:	4919      	ldr	r1, [pc, #100]	; (1252c <lorawan_start+0xa4>)
   124c8:	9302      	str	r3, [sp, #8]
   124ca:	2308      	movs	r3, #8
   124cc:	e9cd 0300 	strd	r0, r3, [sp]
   124d0:	4603      	mov	r3, r0
   124d2:	f019 fa10 	bl	2b8f6 <z_log_msg_runtime_create.constprop.0>
	status = LoRaMacStart();
   124d6:	f004 fcb1 	bl	16e3c <LoRaMacStart>
	if (status != LORAMAC_STATUS_OK) {
   124da:	4605      	mov	r5, r0
   124dc:	b140      	cbz	r0, 124f0 <lorawan_start+0x68>
		LOG_ERR("Failed to start the LoRaMAC stack: %s",
   124de:	f000 f831 	bl	12544 <lorawan_status2str>
   124e2:	4b15      	ldr	r3, [pc, #84]	; (12538 <lorawan_start+0xb0>)
   124e4:	9003      	str	r0, [sp, #12]
   124e6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   124ea:	9400      	str	r4, [sp, #0]
   124ec:	4623      	mov	r3, r4
   124ee:	e7dd      	b.n	124ac <lorawan_start+0x24>
	phy_params.Attribute = PHY_DEF_TX_DR;
   124f0:	2306      	movs	r3, #6
	phy_param = RegionGetPhyParam(selected_region, &phy_params);
   124f2:	a906      	add	r1, sp, #24
   124f4:	7830      	ldrb	r0, [r6, #0]
	phy_params.Attribute = PHY_DEF_TX_DR;
   124f6:	f88d 3018 	strb.w	r3, [sp, #24]
	phy_param = RegionGetPhyParam(selected_region, &phy_params);
   124fa:	f01a fa8e 	bl	2ca1a <RegionGetPhyParam>
	default_datarate = phy_param.Value;
   124fe:	4b0f      	ldr	r3, [pc, #60]	; (1253c <lorawan_start+0xb4>)
   12500:	b2c0      	uxtb	r0, r0
   12502:	7018      	strb	r0, [r3, #0]
	current_datarate = default_datarate;
   12504:	4b0e      	ldr	r3, [pc, #56]	; (12540 <lorawan_start+0xb8>)
   12506:	7018      	strb	r0, [r3, #0]
	mib_req.Type = MIB_SYSTEM_MAX_RX_ERROR;
   12508:	2330      	movs	r3, #48	; 0x30
   1250a:	f88d 3020 	strb.w	r3, [sp, #32]
	mib_req.Param.SystemMaxRxError = CONFIG_LORAWAN_SYSTEM_MAX_RX_ERROR;
   1250e:	23c8      	movs	r3, #200	; 0xc8
	LoRaMacMibSetRequestConfirm(&mib_req);
   12510:	a808      	add	r0, sp, #32
	mib_req.Param.SystemMaxRxError = CONFIG_LORAWAN_SYSTEM_MAX_RX_ERROR;
   12512:	9309      	str	r3, [sp, #36]	; 0x24
	LoRaMacMibSetRequestConfirm(&mib_req);
   12514:	f004 fddc 	bl	170d0 <LoRaMacMibSetRequestConfirm>
	return 0;
   12518:	4628      	mov	r0, r5
   1251a:	e7ce      	b.n	124ba <lorawan_start+0x32>
   1251c:	20008ac6 	.word	0x20008ac6
   12520:	2002f8f0 	.word	0x2002f8f0
   12524:	2002f900 	.word	0x2002f900
   12528:	00035b8b 	.word	0x00035b8b
   1252c:	00032f88 	.word	0x00032f88
   12530:	00035c44 	.word	0x00035c44
   12534:	00035bac 	.word	0x00035bac
   12538:	00035bc4 	.word	0x00035bc4
   1253c:	200317fc 	.word	0x200317fc
   12540:	200317fb 	.word	0x200317fb

00012544 <lorawan_status2str>:
	[LORAMAC_STATUS_ERROR] = "Unknown error",
};

const char *lorawan_status2str(unsigned int status)
{
	if (status < ARRAY_SIZE(status2str)) {
   12544:	2817      	cmp	r0, #23
		return status2str[status];
   12546:	bf9a      	itte	ls
   12548:	4b02      	ldrls	r3, [pc, #8]	; (12554 <lorawan_status2str+0x10>)
   1254a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown status!";
   1254e:	4802      	ldrhi	r0, [pc, #8]	; (12558 <lorawan_status2str+0x14>)
	}
}
   12550:	4770      	bx	lr
   12552:	bf00      	nop
   12554:	00033864 	.word	0x00033864
   12558:	00035c7a 	.word	0x00035c7a

0001255c <lorawan_eventinfo2str>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = "Beacon not found",
};

const char *lorawan_eventinfo2str(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2str)) {
   1255c:	280f      	cmp	r0, #15
		return eventinfo2str[status];
   1255e:	bf9a      	itte	ls
   12560:	4b02      	ldrls	r3, [pc, #8]	; (1256c <lorawan_eventinfo2str+0x10>)
   12562:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown event!";
   12566:	4802      	ldrhi	r0, [pc, #8]	; (12570 <lorawan_eventinfo2str+0x14>)
	}
}
   12568:	4770      	bx	lr
   1256a:	bf00      	nop
   1256c:	00033824 	.word	0x00033824
   12570:	00035c8a 	.word	0x00035c8a

00012574 <lorawan_status2errno>:
	[LORAMAC_STATUS_MC_GROUP_UNDEFINED] = -EINVAL,
};

const int lorawan_status2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
   12574:	2816      	cmp	r0, #22
{
   12576:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
   12578:	d808      	bhi.n	1258c <lorawan_status2errno+0x18>
   1257a:	4a06      	ldr	r2, [pc, #24]	; (12594 <lorawan_status2errno+0x20>)
   1257c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   12580:	b930      	cbnz	r0, 12590 <lorawan_status2errno+0x1c>
		return status2errno[status];
	} else {
		return status == LORAMAC_STATUS_OK ? 0 : -EINVAL;
   12582:	2b00      	cmp	r3, #0
   12584:	bf18      	it	ne
   12586:	f06f 0015 	mvnne.w	r0, #21
   1258a:	4770      	bx	lr
   1258c:	f06f 0015 	mvn.w	r0, #21
	}
}
   12590:	4770      	bx	lr
   12592:	bf00      	nop
   12594:	000337c8 	.word	0x000337c8

00012598 <lorawan_eventinfo2errno>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = -EINVAL,
};

const int lorawan_eventinfo2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   12598:	280f      	cmp	r0, #15
{
   1259a:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   1259c:	d808      	bhi.n	125b0 <lorawan_eventinfo2errno+0x18>
	    eventinfo2errno[status] != 0) {
   1259e:	4a06      	ldr	r2, [pc, #24]	; (125b8 <lorawan_eventinfo2errno+0x20>)
   125a0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   125a4:	b930      	cbnz	r0, 125b4 <lorawan_eventinfo2errno+0x1c>
		return eventinfo2errno[status];
	} else {
		return status == LORAMAC_EVENT_INFO_STATUS_OK ? 0 : -EINVAL;
   125a6:	2b00      	cmp	r3, #0
   125a8:	bf18      	it	ne
   125aa:	f06f 0015 	mvnne.w	r0, #21
   125ae:	4770      	bx	lr
   125b0:	f06f 0015 	mvn.w	r0, #21
	}
}
   125b4:	4770      	bx	lr
   125b6:	bf00      	nop
   125b8:	00033788 	.word	0x00033788

000125bc <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
   125bc:	4801      	ldr	r0, [pc, #4]	; (125c4 <timer_callback+0x8>)
   125be:	f013 bb8d 	b.w	25cdc <k_work_submit>
   125c2:	bf00      	nop
   125c4:	200084e8 	.word	0x200084e8

000125c8 <RtcBkupWrite>:

K_TIMER_DEFINE(lora_timer, timer_callback, NULL);

void RtcBkupWrite(uint32_t data0, uint32_t data1)
{
	backup_reg[0] = data0;
   125c8:	4b01      	ldr	r3, [pc, #4]	; (125d0 <RtcBkupWrite+0x8>)
   125ca:	6018      	str	r0, [r3, #0]
	backup_reg[1] = data1;
   125cc:	6059      	str	r1, [r3, #4]
}
   125ce:	4770      	bx	lr
   125d0:	2002f918 	.word	0x2002f918

000125d4 <RtcBkupRead>:

void RtcBkupRead(uint32_t *data0, uint32_t *data1)
{
	*data0 = backup_reg[0];
   125d4:	4b02      	ldr	r3, [pc, #8]	; (125e0 <RtcBkupRead+0xc>)
   125d6:	681a      	ldr	r2, [r3, #0]
	*data1 = backup_reg[1];
   125d8:	685b      	ldr	r3, [r3, #4]
	*data0 = backup_reg[0];
   125da:	6002      	str	r2, [r0, #0]
	*data1 = backup_reg[1];
   125dc:	600b      	str	r3, [r1, #0]
}
   125de:	4770      	bx	lr
   125e0:	2002f918 	.word	0x2002f918

000125e4 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
   125e4:	b508      	push	{r3, lr}
	return (k_uptime_get_32() - saved_time);
   125e6:	f019 f9a8 	bl	2b93a <k_uptime_get_32>
   125ea:	4b02      	ldr	r3, [pc, #8]	; (125f4 <RtcGetTimerElapsedTime+0x10>)
   125ec:	681b      	ldr	r3, [r3, #0]
}
   125ee:	1ac0      	subs	r0, r0, r3
   125f0:	bd08      	pop	{r3, pc}
   125f2:	bf00      	nop
   125f4:	2002f920 	.word	0x2002f920

000125f8 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
   125f8:	4801      	ldr	r0, [pc, #4]	; (12600 <RtcStopAlarm+0x8>)
   125fa:	f01e bee2 	b.w	313c2 <z_impl_k_timer_stop>
   125fe:	bf00      	nop
   12600:	20008b00 	.word	0x20008b00

00012604 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
   12604:	b507      	push	{r0, r1, r2, lr}
   12606:	4601      	mov	r1, r0
			return ((t * to_hz + off) / from_hz);
   12608:	f240 30e7 	movw	r0, #999	; 0x3e7
   1260c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12610:	2300      	movs	r3, #0
   12612:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   12616:	0c49      	lsrs	r1, r1, #17
   12618:	f7f6 fc92 	bl	8f40 <__aeabi_uldivmod>
   1261c:	4602      	mov	r2, r0
   1261e:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   12620:	2100      	movs	r1, #0
   12622:	2000      	movs	r0, #0
   12624:	e9cd 0100 	strd	r0, r1, [sp]
   12628:	4802      	ldr	r0, [pc, #8]	; (12634 <RtcSetAlarm+0x30>)
   1262a:	f014 f957 	bl	268dc <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
   1262e:	b003      	add	sp, #12
   12630:	f85d fb04 	ldr.w	pc, [sp], #4
   12634:	20008b00 	.word	0x20008b00

00012638 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
   12638:	b508      	push	{r3, lr}
	saved_time = k_uptime_get_32();
   1263a:	f019 f97e 	bl	2b93a <k_uptime_get_32>
   1263e:	4b01      	ldr	r3, [pc, #4]	; (12644 <RtcSetTimerContext+0xc>)
   12640:	6018      	str	r0, [r3, #0]

	return saved_time;
}
   12642:	bd08      	pop	{r3, pc}
   12644:	2002f920 	.word	0x2002f920

00012648 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
   12648:	4b01      	ldr	r3, [pc, #4]	; (12650 <RtcGetTimerContext+0x8>)
   1264a:	6818      	ldr	r0, [r3, #0]
   1264c:	4770      	bx	lr
   1264e:	bf00      	nop
   12650:	2002f920 	.word	0x2002f920

00012654 <sx12xx_ev_rx_done>:
	return true;
}

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
   12654:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
   12658:	4c23      	ldr	r4, [pc, #140]	; (126e8 <sx12xx_ev_rx_done+0x94>)
{
   1265a:	469a      	mov	sl, r3

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
   1265c:	e9d4 9301 	ldrd	r9, r3, [r4, #4]
{
   12660:	4607      	mov	r7, r0
   12662:	460d      	mov	r5, r1
   12664:	4616      	mov	r6, r2
	if (dev_data.async_rx_cb) {
   12666:	b17b      	cbz	r3, 12688 <sx12xx_ev_rx_done+0x34>
		/* Start receiving again */
		Radio.Rx(0);
   12668:	4b20      	ldr	r3, [pc, #128]	; (126ec <sx12xx_ev_rx_done+0x98>)
   1266a:	2000      	movs	r0, #0
   1266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1266e:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
   12670:	f8cd a000 	str.w	sl, [sp]
   12674:	4633      	mov	r3, r6
   12676:	462a      	mov	r2, r5
   12678:	4639      	mov	r1, r7
   1267a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1267e:	6820      	ldr	r0, [r4, #0]
   12680:	47c0      	blx	r8
	/* Completely release modem */
	dev_data.operation_done = NULL;
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
   12682:	b002      	add	sp, #8
   12684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12688:	2302      	movs	r3, #2
   1268a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1268e:	e8d2 1fef 	ldaex	r1, [r2]
   12692:	2901      	cmp	r1, #1
   12694:	d103      	bne.n	1269e <sx12xx_ev_rx_done+0x4a>
   12696:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1269a:	2800      	cmp	r0, #0
   1269c:	d1f7      	bne.n	1268e <sx12xx_ev_rx_done+0x3a>
   1269e:	4690      	mov	r8, r2
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
   126a0:	d1ef      	bne.n	12682 <sx12xx_ev_rx_done+0x2e>
	if (size < *dev_data.rx_params.size) {
   126a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   126a4:	4639      	mov	r1, r7
   126a6:	781a      	ldrb	r2, [r3, #0]
   126a8:	42aa      	cmp	r2, r5
		*dev_data.rx_params.size = size;
   126aa:	bf88      	it	hi
   126ac:	701d      	strbhi	r5, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
   126ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   126b0:	6c60      	ldr	r0, [r4, #68]	; 0x44
   126b2:	781a      	ldrb	r2, [r3, #0]
   126b4:	f01f f82b 	bl	3170e <memcpy>
	if (dev_data.rx_params.rssi) {
   126b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   126ba:	b103      	cbz	r3, 126be <sx12xx_ev_rx_done+0x6a>
		*dev_data.rx_params.rssi = rssi;
   126bc:	801e      	strh	r6, [r3, #0]
	if (dev_data.rx_params.snr) {
   126be:	6d23      	ldr	r3, [r4, #80]	; 0x50
   126c0:	b10b      	cbz	r3, 126c6 <sx12xx_ev_rx_done+0x72>
		*dev_data.rx_params.snr = snr;
   126c2:	f883 a000 	strb.w	sl, [r3]
	Radio.Sleep();
   126c6:	4b09      	ldr	r3, [pc, #36]	; (126ec <sx12xx_ev_rx_done+0x98>)
   126c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   126ca:	4798      	blx	r3
	dev_data.operation_done = NULL;
   126cc:	2100      	movs	r1, #0
   126ce:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   126d0:	e8d8 3fef 	ldaex	r3, [r8]
   126d4:	e8c8 1fe2 	stlex	r2, r1, [r8]
   126d8:	2a00      	cmp	r2, #0
   126da:	d1f9      	bne.n	126d0 <sx12xx_ev_rx_done+0x7c>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   126dc:	4648      	mov	r0, r9
}
   126de:	b002      	add	sp, #8
   126e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126e4:	f014 b9a2 	b.w	26a2c <z_impl_k_poll_signal_raise>
   126e8:	2002f924 	.word	0x2002f924
   126ec:	000338dc 	.word	0x000338dc

000126f0 <modem_release.constprop.0>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   126f0:	2302      	movs	r3, #2
static bool modem_release(struct sx12xx_data *data)
   126f2:	b510      	push	{r4, lr}
   126f4:	4c0d      	ldr	r4, [pc, #52]	; (1272c <modem_release.constprop.0+0x3c>)
   126f6:	e8d4 2fef 	ldaex	r2, [r4]
   126fa:	2a01      	cmp	r2, #1
   126fc:	d103      	bne.n	12706 <modem_release.constprop.0+0x16>
   126fe:	e8c4 3fe1 	stlex	r1, r3, [r4]
   12702:	2900      	cmp	r1, #0
   12704:	d1f7      	bne.n	126f6 <modem_release.constprop.0+0x6>
   12706:	bf0c      	ite	eq
   12708:	2001      	moveq	r0, #1
   1270a:	2000      	movne	r0, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
   1270c:	d10c      	bne.n	12728 <modem_release.constprop.0+0x38>
	Radio.Sleep();
   1270e:	4b08      	ldr	r3, [pc, #32]	; (12730 <modem_release.constprop.0+0x40>)
   12710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12712:	4798      	blx	r3
	data->operation_done = NULL;
   12714:	2300      	movs	r3, #0
   12716:	f844 3c3c 	str.w	r3, [r4, #-60]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1271a:	e8d4 2fef 	ldaex	r2, [r4]
   1271e:	e8c4 3fe1 	stlex	r1, r3, [r4]
   12722:	2900      	cmp	r1, #0
   12724:	d1f9      	bne.n	1271a <modem_release.constprop.0+0x2a>
	return true;
   12726:	2001      	movs	r0, #1
}
   12728:	bd10      	pop	{r4, pc}
   1272a:	bf00      	nop
   1272c:	2002f964 	.word	0x2002f964
   12730:	000338dc 	.word	0x000338dc

00012734 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
   12734:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
   12736:	4b06      	ldr	r3, [pc, #24]	; (12750 <sx12xx_ev_tx_done+0x1c>)
   12738:	685c      	ldr	r4, [r3, #4]

	if (modem_release(&dev_data)) {
   1273a:	f7ff ffd9 	bl	126f0 <modem_release.constprop.0>
   1273e:	b130      	cbz	r0, 1274e <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
   12740:	b12c      	cbz	r4, 1274e <sx12xx_ev_tx_done+0x1a>
   12742:	2100      	movs	r1, #0
   12744:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
   12746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1274a:	f014 b96f 	b.w	26a2c <z_impl_k_poll_signal_raise>
   1274e:	bd10      	pop	{r4, pc}
   12750:	2002f924 	.word	0x2002f924

00012754 <__sx12xx_configure_pin>:
{
   12754:	b5f0      	push	{r4, r5, r6, r7, lr}
   12756:	4604      	mov	r4, r0
   12758:	460e      	mov	r6, r1
	if (!device_is_ready(gpio->port)) {
   1275a:	6800      	ldr	r0, [r0, #0]
{
   1275c:	b087      	sub	sp, #28
   1275e:	f01e fa02 	bl	30b66 <z_device_is_ready>
   12762:	6825      	ldr	r5, [r4, #0]
   12764:	4603      	mov	r3, r0
	if (!device_is_ready(gpio->port)) {
   12766:	b970      	cbnz	r0, 12786 <__sx12xx_configure_pin+0x32>
		LOG_ERR("GPIO device not ready %s", gpio->port->name);
   12768:	682a      	ldr	r2, [r5, #0]
   1276a:	491f      	ldr	r1, [pc, #124]	; (127e8 <__sx12xx_configure_pin+0x94>)
   1276c:	9203      	str	r2, [sp, #12]
   1276e:	4a1f      	ldr	r2, [pc, #124]	; (127ec <__sx12xx_configure_pin+0x98>)
   12770:	9000      	str	r0, [sp, #0]
   12772:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12776:	2201      	movs	r2, #1
   12778:	f019 f927 	bl	2b9ca <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1277c:	f06f 0512 	mvn.w	r5, #18
}
   12780:	4628      	mov	r0, r5
   12782:	b007      	add	sp, #28
   12784:	bdf0      	pop	{r4, r5, r6, r7, pc}
				  spec->dt_flags | extra_flags);
   12786:	88e3      	ldrh	r3, [r4, #6]
				  spec->pin,
   12788:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   1278a:	4333      	orrs	r3, r6
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1278c:	02d8      	lsls	r0, r3, #11
	const struct gpio_driver_api *api =
   1278e:	f8d5 c008 	ldr.w	ip, [r5, #8]
	struct gpio_driver_data *data =
   12792:	692f      	ldr	r7, [r5, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   12794:	d506      	bpl.n	127a4 <__sx12xx_configure_pin+0x50>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   12796:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   1279a:	d003      	beq.n	127a4 <__sx12xx_configure_pin+0x50>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1279c:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1279e:	bf48      	it	mi
   127a0:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   127a4:	2601      	movs	r6, #1
   127a6:	6838      	ldr	r0, [r7, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   127a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   127ac:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   127ae:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   127b0:	bf4c      	ite	mi
   127b2:	4330      	orrmi	r0, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   127b4:	43b0      	bicpl	r0, r6
   127b6:	6038      	str	r0, [r7, #0]
	return api->pin_configure(port, pin, flags);
   127b8:	f8dc 3000 	ldr.w	r3, [ip]
   127bc:	4628      	mov	r0, r5
   127be:	4798      	blx	r3
	if (err) {
   127c0:	4605      	mov	r5, r0
   127c2:	2800      	cmp	r0, #0
   127c4:	d0dc      	beq.n	12780 <__sx12xx_configure_pin+0x2c>
		LOG_ERR("Cannot configure gpio %s %d: %d", gpio->port->name,
   127c6:	9005      	str	r0, [sp, #20]
   127c8:	7923      	ldrb	r3, [r4, #4]
   127ca:	2201      	movs	r2, #1
   127cc:	9304      	str	r3, [sp, #16]
   127ce:	6823      	ldr	r3, [r4, #0]
   127d0:	4905      	ldr	r1, [pc, #20]	; (127e8 <__sx12xx_configure_pin+0x94>)
   127d2:	681b      	ldr	r3, [r3, #0]
   127d4:	9303      	str	r3, [sp, #12]
   127d6:	4b06      	ldr	r3, [pc, #24]	; (127f0 <__sx12xx_configure_pin+0x9c>)
   127d8:	9302      	str	r3, [sp, #8]
   127da:	2300      	movs	r3, #0
   127dc:	4618      	mov	r0, r3
   127de:	e9cd 3300 	strd	r3, r3, [sp]
   127e2:	f019 f8f2 	bl	2b9ca <z_log_msg_runtime_create.constprop.0>
		return err;
   127e6:	e7cb      	b.n	12780 <__sx12xx_configure_pin+0x2c>
   127e8:	00032fe8 	.word	0x00032fe8
   127ec:	00035f12 	.word	0x00035f12
   127f0:	00035f2b 	.word	0x00035f2b

000127f4 <sx12xx_lora_send_async>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   127f4:	2001      	movs	r0, #1
	return ret;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
   127f6:	b570      	push	{r4, r5, r6, lr}
   127f8:	460d      	mov	r5, r1
   127fa:	490d      	ldr	r1, [pc, #52]	; (12830 <sx12xx_lora_send_async+0x3c>)
   127fc:	e8d1 4fef 	ldaex	r4, [r1]
   12800:	2c00      	cmp	r4, #0
   12802:	d103      	bne.n	1280c <sx12xx_lora_send_async+0x18>
   12804:	e8c1 0fe6 	stlex	r6, r0, [r1]
   12808:	2e00      	cmp	r6, #0
   1280a:	d1f7      	bne.n	127fc <sx12xx_lora_send_async+0x8>
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
   1280c:	d10c      	bne.n	12828 <sx12xx_lora_send_async+0x34>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   1280e:	4e09      	ldr	r6, [pc, #36]	; (12834 <sx12xx_lora_send_async+0x40>)
   12810:	b2d4      	uxtb	r4, r2
	dev_data.operation_done = async;
   12812:	f841 3c3c 	str.w	r3, [r1, #-60]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   12816:	4621      	mov	r1, r4
   12818:	6d73      	ldr	r3, [r6, #84]	; 0x54
   1281a:	4798      	blx	r3

	Radio.Send(data, data_len);
   1281c:	4628      	mov	r0, r5
   1281e:	4621      	mov	r1, r4
   12820:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12822:	4798      	blx	r3

	return 0;
   12824:	2000      	movs	r0, #0
}
   12826:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   12828:	f06f 000f 	mvn.w	r0, #15
   1282c:	e7fb      	b.n	12826 <sx12xx_lora_send_async+0x32>
   1282e:	bf00      	nop
   12830:	2002f964 	.word	0x2002f964
   12834:	000338dc 	.word	0x000338dc

00012838 <sx12xx_lora_send>:
{
   12838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   1283c:	2400      	movs	r4, #0
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   1283e:	2601      	movs	r6, #1
{
   12840:	b090      	sub	sp, #64	; 0x40
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12842:	ad07      	add	r5, sp, #28
{
   12844:	4681      	mov	r9, r0
   12846:	468a      	mov	sl, r1
   12848:	4617      	mov	r7, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   1284a:	4621      	mov	r1, r4
   1284c:	2210      	movs	r2, #16
	if (!dev_data.tx_cfg.frequency) {
   1284e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 12920 <sx12xx_lora_send+0xe8>
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12852:	a80b      	add	r0, sp, #44	; 0x2c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12854:	e9cd 5507 	strd	r5, r5, [sp, #28]
   12858:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   1285c:	f01e ff91 	bl	31782 <memset>
   12860:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
	if (!dev_data.tx_cfg.frequency) {
   12864:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12868:	950f      	str	r5, [sp, #60]	; 0x3c
	if (!dev_data.tx_cfg.frequency) {
   1286a:	2b00      	cmp	r3, #0
   1286c:	d054      	beq.n	12918 <sx12xx_lora_send+0xe0>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
   1286e:	462b      	mov	r3, r5
   12870:	463a      	mov	r2, r7
   12872:	4651      	mov	r1, sl
   12874:	4648      	mov	r0, r9
   12876:	f7ff ffbd 	bl	127f4 <sx12xx_lora_send_async>
	if (ret < 0) {
   1287a:	1e05      	subs	r5, r0, #0
   1287c:	db48      	blt.n	12910 <sx12xx_lora_send+0xd8>
	air_time = Radio.TimeOnAir(MODEM_LORA,
   1287e:	b2fb      	uxtb	r3, r7
   12880:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12884:	9603      	str	r6, [sp, #12]
   12886:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   1288a:	4d26      	ldr	r5, [pc, #152]	; (12924 <sx12xx_lora_send+0xec>)
   1288c:	9300      	str	r3, [sp, #0]
   1288e:	f898 3036 	ldrb.w	r3, [r8, #54]	; 0x36
   12892:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
   12896:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
   1289a:	4630      	mov	r0, r6
   1289c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
   1289e:	47a8      	blx	r5
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
   128a0:	4b21      	ldr	r3, [pc, #132]	; (12928 <sx12xx_lora_send+0xf0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
   128a2:	4605      	mov	r5, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
   128a4:	9303      	str	r3, [sp, #12]
   128a6:	4b21      	ldr	r3, [pc, #132]	; (1292c <sx12xx_lora_send+0xf4>)
   128a8:	e9cd 7004 	strd	r7, r0, [sp, #16]
   128ac:	9302      	str	r3, [sp, #8]
   128ae:	2308      	movs	r3, #8
   128b0:	4620      	mov	r0, r4
   128b2:	e9cd 4300 	strd	r4, r3, [sp]
   128b6:	2204      	movs	r2, #4
   128b8:	4623      	mov	r3, r4
   128ba:	491d      	ldr	r1, [pc, #116]	; (12930 <sx12xx_lora_send+0xf8>)
   128bc:	f019 f885 	bl	2b9ca <z_log_msg_runtime_create.constprop.0>
   128c0:	f240 30e7 	movw	r0, #999	; 0x3e7
   128c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   128c8:	2300      	movs	r3, #0
   128ca:	eb00 4005 	add.w	r0, r0, r5, lsl #16
   128ce:	f3c5 410e 	ubfx	r1, r5, #16, #15
   128d2:	f7f6 fb35 	bl	8f40 <__aeabi_uldivmod>
   128d6:	4602      	mov	r2, r0
   128d8:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
   128da:	4631      	mov	r1, r6
   128dc:	a80b      	add	r0, sp, #44	; 0x2c
   128de:	f014 f849 	bl	26974 <z_impl_k_poll>
	if (ret < 0) {
   128e2:	1e05      	subs	r5, r0, #0
   128e4:	da14      	bge.n	12910 <sx12xx_lora_send+0xd8>
		LOG_ERR("Packet transmission failed!");
   128e6:	4b13      	ldr	r3, [pc, #76]	; (12934 <sx12xx_lora_send+0xfc>)
   128e8:	4632      	mov	r2, r6
   128ea:	4620      	mov	r0, r4
   128ec:	e9cd 4301 	strd	r4, r3, [sp, #4]
   128f0:	490f      	ldr	r1, [pc, #60]	; (12930 <sx12xx_lora_send+0xf8>)
   128f2:	4623      	mov	r3, r4
   128f4:	9400      	str	r4, [sp, #0]
   128f6:	f019 f868 	bl	2b9ca <z_log_msg_runtime_create.constprop.0>
		if (!modem_release(&dev_data)) {
   128fa:	f7ff fef9 	bl	126f0 <modem_release.constprop.0>
   128fe:	b938      	cbnz	r0, 12910 <sx12xx_lora_send+0xd8>
   12900:	f04f 32ff 	mov.w	r2, #4294967295
   12904:	f04f 33ff 	mov.w	r3, #4294967295
   12908:	4631      	mov	r1, r6
   1290a:	a80b      	add	r0, sp, #44	; 0x2c
   1290c:	f014 f832 	bl	26974 <z_impl_k_poll>
}
   12910:	4628      	mov	r0, r5
   12912:	b010      	add	sp, #64	; 0x40
   12914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   12918:	f06f 0515 	mvn.w	r5, #21
   1291c:	e7f8      	b.n	12910 <sx12xx_lora_send+0xd8>
   1291e:	bf00      	nop
   12920:	2002f924 	.word	0x2002f924
   12924:	000338dc 	.word	0x000338dc
   12928:	00035fa0 	.word	0x00035fa0
   1292c:	00035f4b 	.word	0x00035f4b
   12930:	00032fe8 	.word	0x00032fe8
   12934:	00035f74 	.word	0x00035f74

00012938 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
   12938:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   1293a:	2400      	movs	r4, #0
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   1293c:	2601      	movs	r6, #1
{
   1293e:	b091      	sub	sp, #68	; 0x44
   12940:	f88d 2017 	strb.w	r2, [sp, #23]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12944:	ad07      	add	r5, sp, #28
{
   12946:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12948:	2210      	movs	r2, #16
   1294a:	4621      	mov	r1, r4
   1294c:	a80b      	add	r0, sp, #44	; 0x2c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   1294e:	e9cd 5507 	strd	r5, r5, [sp, #28]
   12952:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12956:	f01e ff14 	bl	31782 <memset>
   1295a:	4b22      	ldr	r3, [pc, #136]	; (129e4 <sx12xx_lora_recv+0xac>)
   1295c:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
   12960:	950f      	str	r5, [sp, #60]	; 0x3c
   12962:	e8d3 2fef 	ldaex	r2, [r3]
   12966:	42a2      	cmp	r2, r4
   12968:	d103      	bne.n	12972 <sx12xx_lora_recv+0x3a>
   1296a:	e8c3 6fe1 	stlex	r1, r6, [r3]
   1296e:	2900      	cmp	r1, #0
   12970:	d1f7      	bne.n	12962 <sx12xx_lora_recv+0x2a>
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
   12972:	d134      	bne.n	129de <sx12xx_lora_recv+0xa6>
	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
   12974:	f10d 0217 	add.w	r2, sp, #23
   12978:	609a      	str	r2, [r3, #8]
	dev_data.rx_params.rssi = rssi;
   1297a:	9a18      	ldr	r2, [sp, #96]	; 0x60
	dev_data.operation_done = &done;
   1297c:	e943 540f 	strd	r5, r4, [r3, #-60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
   12980:	60da      	str	r2, [r3, #12]
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12982:	4d19      	ldr	r5, [pc, #100]	; (129e8 <sx12xx_lora_recv+0xb0>)
	dev_data.rx_params.snr = snr;
   12984:	9a19      	ldr	r2, [sp, #100]	; 0x64
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12986:	21ff      	movs	r1, #255	; 0xff
	dev_data.rx_params.snr = snr;
   12988:	611a      	str	r2, [r3, #16]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1298a:	4630      	mov	r0, r6
	dev_data.rx_params.buf = data;
   1298c:	605f      	str	r7, [r3, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1298e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   12990:	4798      	blx	r3
	Radio.Rx(0);
   12992:	4620      	mov	r0, r4
   12994:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   12996:	4798      	blx	r3
   12998:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1299c:	4631      	mov	r1, r6
   1299e:	a80b      	add	r0, sp, #44	; 0x2c
   129a0:	f013 ffe8 	bl	26974 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
   129a4:	1e05      	subs	r5, r0, #0
   129a6:	da0a      	bge.n	129be <sx12xx_lora_recv+0x86>
		if (!modem_release(&dev_data)) {
   129a8:	f7ff fea2 	bl	126f0 <modem_release.constprop.0>
   129ac:	b950      	cbnz	r0, 129c4 <sx12xx_lora_recv+0x8c>
   129ae:	f04f 32ff 	mov.w	r2, #4294967295
   129b2:	f04f 33ff 	mov.w	r3, #4294967295
   129b6:	4631      	mov	r1, r6
   129b8:	a80b      	add	r0, sp, #44	; 0x2c
   129ba:	f013 ffdb 	bl	26974 <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
   129be:	f89d 5017 	ldrb.w	r5, [sp, #23]
   129c2:	e009      	b.n	129d8 <sx12xx_lora_recv+0xa0>
		LOG_INF("Receive timeout");
   129c4:	4b09      	ldr	r3, [pc, #36]	; (129ec <sx12xx_lora_recv+0xb4>)
   129c6:	2203      	movs	r2, #3
   129c8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   129cc:	4620      	mov	r0, r4
   129ce:	4623      	mov	r3, r4
   129d0:	4907      	ldr	r1, [pc, #28]	; (129f0 <sx12xx_lora_recv+0xb8>)
   129d2:	9400      	str	r4, [sp, #0]
   129d4:	f018 fff9 	bl	2b9ca <z_log_msg_runtime_create.constprop.0>
}
   129d8:	4628      	mov	r0, r5
   129da:	b011      	add	sp, #68	; 0x44
   129dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
   129de:	f06f 050f 	mvn.w	r5, #15
   129e2:	e7f9      	b.n	129d8 <sx12xx_lora_recv+0xa0>
   129e4:	2002f964 	.word	0x2002f964
   129e8:	000338dc 	.word	0x000338dc
   129ec:	00035f90 	.word	0x00035f90
   129f0:	00032fe8 	.word	0x00032fe8

000129f4 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
   129f4:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
   129f6:	b929      	cbnz	r1, 12a04 <sx12xx_lora_recv_async+0x10>
		if (!modem_release(&dev_data)) {
   129f8:	f7ff fe7a 	bl	126f0 <modem_release.constprop.0>
   129fc:	b9b0      	cbnz	r0, 12a2c <sx12xx_lora_recv_async+0x38>
			/* Not receiving or already being stopped */
			return -EINVAL;
   129fe:	f06f 0015 	mvn.w	r0, #21
	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
	Radio.Rx(0);

	return 0;
}
   12a02:	bd10      	pop	{r4, pc}
   12a04:	2001      	movs	r0, #1
   12a06:	4b0c      	ldr	r3, [pc, #48]	; (12a38 <sx12xx_lora_recv_async+0x44>)
   12a08:	e8d3 2fef 	ldaex	r2, [r3]
   12a0c:	2a00      	cmp	r2, #0
   12a0e:	d103      	bne.n	12a18 <sx12xx_lora_recv_async+0x24>
   12a10:	e8c3 0fe4 	stlex	r4, r0, [r3]
   12a14:	2c00      	cmp	r4, #0
   12a16:	d1f7      	bne.n	12a08 <sx12xx_lora_recv_async+0x14>
	if (!modem_acquire(&dev_data)) {
   12a18:	d10a      	bne.n	12a30 <sx12xx_lora_recv_async+0x3c>
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12a1a:	4c08      	ldr	r4, [pc, #32]	; (12a3c <sx12xx_lora_recv_async+0x48>)
	dev_data.async_rx_cb = cb;
   12a1c:	f843 1c38 	str.w	r1, [r3, #-56]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12a20:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12a22:	21ff      	movs	r1, #255	; 0xff
   12a24:	4798      	blx	r3
	Radio.Rx(0);
   12a26:	2000      	movs	r0, #0
   12a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a2a:	4798      	blx	r3
		return 0;
   12a2c:	2000      	movs	r0, #0
   12a2e:	e7e8      	b.n	12a02 <sx12xx_lora_recv_async+0xe>
		return -EBUSY;
   12a30:	f06f 000f 	mvn.w	r0, #15
   12a34:	e7e5      	b.n	12a02 <sx12xx_lora_recv_async+0xe>
   12a36:	bf00      	nop
   12a38:	2002f964 	.word	0x2002f964
   12a3c:	000338dc 	.word	0x000338dc

00012a40 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
   12a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a42:	460c      	mov	r4, r1
   12a44:	2701      	movs	r7, #1
   12a46:	4d29      	ldr	r5, [pc, #164]	; (12aec <sx12xx_lora_config+0xac>)
   12a48:	b08b      	sub	sp, #44	; 0x2c
   12a4a:	e8d5 3fef 	ldaex	r3, [r5]
   12a4e:	2b00      	cmp	r3, #0
   12a50:	d103      	bne.n	12a5a <sx12xx_lora_config+0x1a>
   12a52:	e8c5 7fe2 	stlex	r2, r7, [r5]
   12a56:	2a00      	cmp	r2, #0
   12a58:	d1f7      	bne.n	12a4a <sx12xx_lora_config+0xa>
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
   12a5a:	d143      	bne.n	12ae4 <sx12xx_lora_config+0xa4>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
   12a5c:	4e24      	ldr	r6, [pc, #144]	; (12af0 <sx12xx_lora_config+0xb0>)
   12a5e:	6820      	ldr	r0, [r4, #0]
   12a60:	68f3      	ldr	r3, [r6, #12]
   12a62:	4798      	blx	r3

	if (config->tx) {
   12a64:	7ae3      	ldrb	r3, [r4, #11]
   12a66:	b34b      	cbz	r3, 12abc <sx12xx_lora_config+0x7c>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
   12a68:	4623      	mov	r3, r4
   12a6a:	3d10      	subs	r5, #16
   12a6c:	f104 0710 	add.w	r7, r4, #16
   12a70:	462a      	mov	r2, r5
   12a72:	6818      	ldr	r0, [r3, #0]
   12a74:	6859      	ldr	r1, [r3, #4]
   12a76:	3308      	adds	r3, #8
   12a78:	c203      	stmia	r2!, {r0, r1}
   12a7a:	42bb      	cmp	r3, r7
   12a7c:	4615      	mov	r5, r2
   12a7e:	d1f7      	bne.n	12a70 <sx12xx_lora_config+0x30>
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
   12a80:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   12a84:	2200      	movs	r2, #0
   12a86:	2001      	movs	r0, #1
   12a88:	9308      	str	r3, [sp, #32]
   12a8a:	7b23      	ldrb	r3, [r4, #12]
   12a8c:	e9cd 2205 	strd	r2, r2, [sp, #20]
   12a90:	e9cd 2003 	strd	r2, r0, [sp, #12]
   12a94:	9307      	str	r3, [sp, #28]
   12a96:	8923      	ldrh	r3, [r4, #8]
   12a98:	69f5      	ldr	r5, [r6, #28]
   12a9a:	9302      	str	r3, [sp, #8]
   12a9c:	79a3      	ldrb	r3, [r4, #6]
   12a9e:	9301      	str	r3, [sp, #4]
   12aa0:	7963      	ldrb	r3, [r4, #5]
   12aa2:	9300      	str	r3, [sp, #0]
   12aa4:	7923      	ldrb	r3, [r4, #4]
   12aa6:	f994 100a 	ldrsb.w	r1, [r4, #10]
   12aaa:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, config->iq_inverted, true);
	}

	Radio.SetPublicNetwork(config->public_network);
   12aac:	6db3      	ldr	r3, [r6, #88]	; 0x58
   12aae:	7b60      	ldrb	r0, [r4, #13]
   12ab0:	4798      	blx	r3

	modem_release(&dev_data);
   12ab2:	f7ff fe1d 	bl	126f0 <modem_release.constprop.0>
	return 0;
   12ab6:	2000      	movs	r0, #0
}
   12ab8:	b00b      	add	sp, #44	; 0x2c
   12aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
   12abc:	9709      	str	r7, [sp, #36]	; 0x24
   12abe:	7b22      	ldrb	r2, [r4, #12]
   12ac0:	e9cd 3305 	strd	r3, r3, [sp, #20]
   12ac4:	e9cd 3207 	strd	r3, r2, [sp, #28]
   12ac8:	220a      	movs	r2, #10
   12aca:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12ace:	9202      	str	r2, [sp, #8]
   12ad0:	8922      	ldrh	r2, [r4, #8]
   12ad2:	4638      	mov	r0, r7
   12ad4:	e9cd 3200 	strd	r3, r2, [sp]
   12ad8:	69b5      	ldr	r5, [r6, #24]
   12ada:	79a3      	ldrb	r3, [r4, #6]
   12adc:	7962      	ldrb	r2, [r4, #5]
   12ade:	7921      	ldrb	r1, [r4, #4]
   12ae0:	47a8      	blx	r5
   12ae2:	e7e3      	b.n	12aac <sx12xx_lora_config+0x6c>
		return -EBUSY;
   12ae4:	f06f 000f 	mvn.w	r0, #15
   12ae8:	e7e6      	b.n	12ab8 <sx12xx_lora_config+0x78>
   12aea:	bf00      	nop
   12aec:	2002f964 	.word	0x2002f964
   12af0:	000338dc 	.word	0x000338dc

00012af4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
   12af4:	b538      	push	{r3, r4, r5, lr}
   12af6:	2401      	movs	r4, #1
   12af8:	4608      	mov	r0, r1
   12afa:	4611      	mov	r1, r2
   12afc:	461a      	mov	r2, r3
   12afe:	4b09      	ldr	r3, [pc, #36]	; (12b24 <sx12xx_lora_test_cw+0x30>)
   12b00:	e8d3 5fef 	ldaex	r5, [r3]
   12b04:	2d00      	cmp	r5, #0
   12b06:	d104      	bne.n	12b12 <sx12xx_lora_test_cw+0x1e>
   12b08:	e8c3 4fec 	stlex	ip, r4, [r3]
   12b0c:	f1bc 0f00 	cmp.w	ip, #0
   12b10:	d1f6      	bne.n	12b00 <sx12xx_lora_test_cw+0xc>
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
   12b12:	d104      	bne.n	12b1e <sx12xx_lora_test_cw+0x2a>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
   12b14:	4b04      	ldr	r3, [pc, #16]	; (12b28 <sx12xx_lora_test_cw+0x34>)
   12b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   12b18:	4798      	blx	r3
	return 0;
   12b1a:	2000      	movs	r0, #0
}
   12b1c:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   12b1e:	f06f 000f 	mvn.w	r0, #15
   12b22:	e7fb      	b.n	12b1c <sx12xx_lora_test_cw+0x28>
   12b24:	2002f964 	.word	0x2002f964
   12b28:	000338dc 	.word	0x000338dc

00012b2c <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
   12b2c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12b2e:	2400      	movs	r4, #0
   12b30:	4b0b      	ldr	r3, [pc, #44]	; (12b60 <sx12xx_init+0x34>)
   12b32:	e8d3 2fef 	ldaex	r2, [r3]
   12b36:	e8c3 4fe1 	stlex	r1, r4, [r3]
   12b3a:	2900      	cmp	r1, #0
   12b3c:	d1f9      	bne.n	12b32 <sx12xx_init+0x6>
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   12b3e:	4909      	ldr	r1, [pc, #36]	; (12b64 <sx12xx_init+0x38>)
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
   12b40:	4d09      	ldr	r5, [pc, #36]	; (12b68 <sx12xx_init+0x3c>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   12b42:	f843 1c34 	str.w	r1, [r3, #-52]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   12b46:	4909      	ldr	r1, [pc, #36]	; (12b6c <sx12xx_init+0x40>)
	Radio.Init(&dev_data.events);
   12b48:	682a      	ldr	r2, [r5, #0]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   12b4a:	f843 1c2c 	str.w	r1, [r3, #-44]
	dev_data.dev = dev;
   12b4e:	f843 0c40 	str.w	r0, [r3, #-64]
	Radio.Init(&dev_data.events);
   12b52:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   12b56:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
   12b58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   12b5a:	4798      	blx	r3

	return 0;
}
   12b5c:	4620      	mov	r0, r4
   12b5e:	bd38      	pop	{r3, r4, r5, pc}
   12b60:	2002f964 	.word	0x2002f964
   12b64:	00012735 	.word	0x00012735
   12b68:	000338dc 	.word	0x000338dc
   12b6c:	00012655 	.word	0x00012655

00012b70 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
   12b70:	4b03      	ldr	r3, [pc, #12]	; (12b80 <sx127x_dio_work_handle+0x10>)
   12b72:	1ac0      	subs	r0, r0, r3

	(*DioIrq[dio])(NULL);
   12b74:	4b03      	ldr	r3, [pc, #12]	; (12b84 <sx127x_dio_work_handle+0x14>)
	int dio = work - dev_data.dio_work;
   12b76:	1100      	asrs	r0, r0, #4
	(*DioIrq[dio])(NULL);
   12b78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   12b7c:	2000      	movs	r0, #0
   12b7e:	4718      	bx	r3
   12b80:	2002f990 	.word	0x2002f990
   12b84:	20008508 	.word	0x20008508

00012b88 <sx127x_irq_callback>:
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == sx127x_dios[i].port &&
   12b88:	4b08      	ldr	r3, [pc, #32]	; (12bac <sx127x_irq_callback+0x24>)
   12b8a:	4283      	cmp	r3, r0
   12b8c:	d10d      	bne.n	12baa <sx127x_irq_callback+0x22>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   12b8e:	fa92 f3a2 	rbit	r3, r2
   12b92:	fab3 f383 	clz	r3, r3
   12b96:	b142      	cbz	r2, 12baa <sx127x_irq_callback+0x22>
   12b98:	2b0b      	cmp	r3, #11
   12b9a:	d102      	bne.n	12ba2 <sx127x_irq_callback+0x1a>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
   12b9c:	4804      	ldr	r0, [pc, #16]	; (12bb0 <sx127x_irq_callback+0x28>)
   12b9e:	f013 b89d 	b.w	25cdc <k_work_submit>
		if (dev == sx127x_dios[i].port &&
   12ba2:	2b0c      	cmp	r3, #12
   12ba4:	d101      	bne.n	12baa <sx127x_irq_callback+0x22>
			k_work_submit(&dev_data.dio_work[i]);
   12ba6:	4803      	ldr	r0, [pc, #12]	; (12bb4 <sx127x_irq_callback+0x2c>)
   12ba8:	e7f9      	b.n	12b9e <sx127x_irq_callback+0x16>
		}
	}
}
   12baa:	4770      	bx	lr
   12bac:	00032800 	.word	0x00032800
   12bb0:	2002f990 	.word	0x2002f990
   12bb4:	2002f9a0 	.word	0x2002f9a0

00012bb8 <gpio_pin_set_dt.constprop.0.isra.0>:
	const struct gpio_driver_data *const data =
   12bb8:	4b08      	ldr	r3, [pc, #32]	; (12bdc <gpio_pin_set_dt.constprop.0.isra.0+0x24>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12bba:	691a      	ldr	r2, [r3, #16]
   12bbc:	6812      	ldr	r2, [r2, #0]
   12bbe:	0552      	lsls	r2, r2, #21
		value = (value != 0) ? 0 : 1;
   12bc0:	bf48      	it	mi
   12bc2:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
   12bc6:	b128      	cbz	r0, 12bd4 <gpio_pin_set_dt.constprop.0.isra.0+0x1c>
	return api->port_set_bits_raw(port, pins);
   12bc8:	689b      	ldr	r3, [r3, #8]
   12bca:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   12bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12bd0:	4802      	ldr	r0, [pc, #8]	; (12bdc <gpio_pin_set_dt.constprop.0.isra.0+0x24>)
   12bd2:	4718      	bx	r3
   12bd4:	689b      	ldr	r3, [r3, #8]
   12bd6:	691b      	ldr	r3, [r3, #16]
   12bd8:	e7f8      	b.n	12bcc <gpio_pin_set_dt.constprop.0.isra.0+0x14>
   12bda:	bf00      	nop
   12bdc:	00032800 	.word	0x00032800

00012be0 <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
   12be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be4:	4680      	mov	r8, r0
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   12be6:	2600      	movs	r6, #0
   12be8:	4c36      	ldr	r4, [pc, #216]	; (12cc4 <SX1276IoIrqInit+0xe4>)
   12bea:	4d37      	ldr	r5, [pc, #220]	; (12cc8 <SX1276IoIrqInit+0xe8>)
			LOG_ERR("GPIO port %s not ready",
				sx127x_dios[i].port->name);
			return;
		}

		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   12bec:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 12ccc <SX1276IoIrqInit+0xec>
{
   12bf0:	b085      	sub	sp, #20
		if (!irqHandlers[i]) {
   12bf2:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   12bf6:	2b00      	cmp	r3, #0
   12bf8:	d05d      	beq.n	12cb6 <SX1276IoIrqInit+0xd6>
		if (!device_is_ready(sx127x_dios[i].port)) {
   12bfa:	6827      	ldr	r7, [r4, #0]
   12bfc:	4638      	mov	r0, r7
   12bfe:	f01d ffb2 	bl	30b66 <z_device_is_ready>
   12c02:	4603      	mov	r3, r0
   12c04:	b960      	cbnz	r0, 12c20 <SX1276IoIrqInit+0x40>
			LOG_ERR("GPIO port %s not ready",
   12c06:	683a      	ldr	r2, [r7, #0]
   12c08:	4931      	ldr	r1, [pc, #196]	; (12cd0 <SX1276IoIrqInit+0xf0>)
   12c0a:	9203      	str	r2, [sp, #12]
   12c0c:	4a31      	ldr	r2, [pc, #196]	; (12cd4 <SX1276IoIrqInit+0xf4>)
   12c0e:	9000      	str	r0, [sp, #0]
   12c10:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12c14:	2201      	movs	r2, #1
   12c16:	f018 feea 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
		}
		gpio_pin_interrupt_configure_dt(&sx127x_dios[i],
						GPIO_INT_EDGE_TO_ACTIVE);
	}

}
   12c1a:	b005      	add	sp, #20
   12c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   12c20:	eb0b 1006 	add.w	r0, fp, r6, lsl #4
   12c24:	492c      	ldr	r1, [pc, #176]	; (12cd8 <SX1276IoIrqInit+0xf8>)
   12c26:	f01e f9a5 	bl	30f74 <k_work_init>
				  spec->dt_flags | extra_flags);
   12c2a:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
   12c2c:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   12c2e:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   12c30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12c34:	f013 0f01 	tst.w	r3, #1
   12c38:	f04f 0301 	mov.w	r3, #1
	struct gpio_driver_data *data =
   12c3c:	f8d0 e010 	ldr.w	lr, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12c40:	fa03 f301 	lsl.w	r3, r3, r1
   12c44:	f8de c000 	ldr.w	ip, [lr]
	const struct gpio_driver_api *api =
   12c48:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12c4c:	bf14      	ite	ne
   12c4e:	ea43 030c 	orrne.w	r3, r3, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12c52:	ea2c 0303 	biceq.w	r3, ip, r3
   12c56:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   12c5a:	f8d9 3000 	ldr.w	r3, [r9]
   12c5e:	4798      	blx	r3
				   BIT(sx127x_dios[i].pin));
   12c60:	2201      	movs	r2, #1
   12c62:	f894 9004 	ldrb.w	r9, [r4, #4]
	callback->handler = handler;
   12c66:	4b1d      	ldr	r3, [pc, #116]	; (12cdc <SX1276IoIrqInit+0xfc>)
   12c68:	fa02 fa09 	lsl.w	sl, r2, r9
	callback->pin_mask = pin_mask;
   12c6c:	e9c5 3a01 	strd	r3, sl, [r5, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   12c70:	68bb      	ldr	r3, [r7, #8]
   12c72:	69db      	ldr	r3, [r3, #28]
   12c74:	b953      	cbnz	r3, 12c8c <SX1276IoIrqInit+0xac>
			LOG_ERR("Could not set gpio callback.");
   12c76:	4b1a      	ldr	r3, [pc, #104]	; (12ce0 <SX1276IoIrqInit+0x100>)
   12c78:	2201      	movs	r2, #1
   12c7a:	9302      	str	r3, [sp, #8]
   12c7c:	2300      	movs	r3, #0
   12c7e:	4914      	ldr	r1, [pc, #80]	; (12cd0 <SX1276IoIrqInit+0xf0>)
   12c80:	4618      	mov	r0, r3
   12c82:	e9cd 3300 	strd	r3, r3, [sp]
   12c86:	f018 feb2 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
			return;
   12c8a:	e7c6      	b.n	12c1a <SX1276IoIrqInit+0x3a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   12c8c:	4629      	mov	r1, r5
   12c8e:	4638      	mov	r0, r7
   12c90:	4798      	blx	r3
		if (gpio_add_callback(sx127x_dios[i].port, &callbacks[i]) < 0) {
   12c92:	2800      	cmp	r0, #0
   12c94:	dbef      	blt.n	12c76 <SX1276IoIrqInit+0x96>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   12c96:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   12c98:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   12c9a:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   12c9c:	6812      	ldr	r2, [r2, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   12c9e:	699f      	ldr	r7, [r3, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   12ca0:	ea1a 0f02 	tst.w	sl, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
   12ca4:	bf14      	ite	ne
   12ca6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   12caa:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   12cae:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   12cb2:	4649      	mov	r1, r9
   12cb4:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   12cb6:	3408      	adds	r4, #8
   12cb8:	350c      	adds	r5, #12
   12cba:	2e00      	cmp	r6, #0
   12cbc:	d1ad      	bne.n	12c1a <SX1276IoIrqInit+0x3a>
   12cbe:	2601      	movs	r6, #1
   12cc0:	e797      	b.n	12bf2 <SX1276IoIrqInit+0x12>
   12cc2:	bf00      	nop
   12cc4:	00033960 	.word	0x00033960
   12cc8:	2002f978 	.word	0x2002f978
   12ccc:	2002f990 	.word	0x2002f990
   12cd0:	00032fe0 	.word	0x00032fe0
   12cd4:	00035fbf 	.word	0x00035fbf
   12cd8:	00012b71 	.word	0x00012b71
   12cdc:	00012b89 	.word	0x00012b89
   12ce0:	00035fd6 	.word	0x00035fd6

00012ce4 <sx127x_read>:

	return spi_write_dt(&dev_config.bus, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
   12ce4:	b510      	push	{r4, lr}
   12ce6:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
   12ce8:	f10d 0307 	add.w	r3, sp, #7
   12cec:	9306      	str	r3, [sp, #24]
   12cee:	2301      	movs	r3, #1
   12cf0:	e9cd 3107 	strd	r3, r1, [sp, #28]
	struct spi_buf_set tx = {
   12cf4:	2302      	movs	r3, #2
	return sx127x_transceive(reg_addr, false, data, len);
   12cf6:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   12cf8:	aa06      	add	r2, sp, #24
		const struct spi_buf_set rx = {
   12cfa:	e9cd 3203 	strd	r3, r2, [sp, #12]
   12cfe:	f88d 0007 	strb.w	r0, [sp, #7]
	struct spi_buf_set tx = {
   12d02:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
   12d04:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   12d06:	4804      	ldr	r0, [pc, #16]	; (12d18 <sx127x_read+0x34>)
   12d08:	4904      	ldr	r1, [pc, #16]	; (12d1c <sx127x_read+0x38>)
   12d0a:	6883      	ldr	r3, [r0, #8]
   12d0c:	aa02      	add	r2, sp, #8
   12d0e:	681c      	ldr	r4, [r3, #0]
   12d10:	ab04      	add	r3, sp, #16
   12d12:	47a0      	blx	r4
}
   12d14:	b00a      	add	sp, #40	; 0x28
   12d16:	bd10      	pop	{r4, pc}
   12d18:	000328f0 	.word	0x000328f0
   12d1c:	0003394c 	.word	0x0003394c

00012d20 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
   12d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12d22:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
   12d24:	b2c0      	uxtb	r0, r0
   12d26:	f7ff ffdd 	bl	12ce4 <sx127x_read>
	if (ret < 0) {
   12d2a:	2800      	cmp	r0, #0
   12d2c:	da0a      	bge.n	12d44 <SX1276ReadBuffer+0x24>
		LOG_ERR("Unable to read address: 0x%x", addr);
   12d2e:	4b06      	ldr	r3, [pc, #24]	; (12d48 <SX1276ReadBuffer+0x28>)
   12d30:	2201      	movs	r2, #1
   12d32:	9302      	str	r3, [sp, #8]
   12d34:	2300      	movs	r3, #0
   12d36:	4905      	ldr	r1, [pc, #20]	; (12d4c <SX1276ReadBuffer+0x2c>)
   12d38:	4618      	mov	r0, r3
   12d3a:	e9cd 3300 	strd	r3, r3, [sp]
   12d3e:	9403      	str	r4, [sp, #12]
   12d40:	f018 fe55 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
	}
}
   12d44:	b004      	add	sp, #16
   12d46:	bd10      	pop	{r4, pc}
   12d48:	00035ff3 	.word	0x00035ff3
   12d4c:	00032fe0 	.word	0x00032fe0

00012d50 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
   12d50:	b530      	push	{r4, r5, lr}
   12d52:	4605      	mov	r5, r0
   12d54:	b087      	sub	sp, #28
   12d56:	482f      	ldr	r0, [pc, #188]	; (12e14 <sx127x_lora_init+0xc4>)
   12d58:	f01d ff05 	bl	30b66 <z_device_is_ready>
	if (!device_is_ready(spec->bus)) {
   12d5c:	b368      	cbz	r0, 12dba <sx127x_lora_init+0x6a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   12d5e:	4b2e      	ldr	r3, [pc, #184]	; (12e18 <sx127x_lora_init+0xc8>)
   12d60:	6818      	ldr	r0, [r3, #0]
   12d62:	f01d ff00 	bl	30b66 <z_device_is_ready>
	if (spec->config.cs &&
   12d66:	b340      	cbz	r0, 12dba <sx127x_lora_init+0x6a>
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
   12d68:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
   12d6c:	482b      	ldr	r0, [pc, #172]	; (12e1c <sx127x_lora_init+0xcc>)
   12d6e:	f7ff fcf1 	bl	12754 <__sx12xx_configure_pin>
	if (ret) {
   12d72:	4604      	mov	r4, r0
   12d74:	bb68      	cbnz	r0, 12dd2 <sx127x_lora_init+0x82>
	return z_impl_k_sleep(timeout);
   12d76:	2100      	movs	r1, #0
   12d78:	f640 40cd 	movw	r0, #3277	; 0xccd
   12d7c:	f013 fb56 	bl	2642c <z_impl_k_sleep>
		return ret;
	}

	k_sleep(K_MSEC(100));
	gpio_pin_set_dt(&dev_config.reset, 0);
   12d80:	4620      	mov	r0, r4
   12d82:	f7ff ff19 	bl	12bb8 <gpio_pin_set_dt.constprop.0.isra.0>
   12d86:	2100      	movs	r1, #0
   12d88:	f640 40cd 	movw	r0, #3277	; 0xccd
   12d8c:	f013 fb4e 	bl	2642c <z_impl_k_sleep>
	k_sleep(K_MSEC(100));

	ret = sx127x_read(REG_VERSION, &regval, 1);
   12d90:	2201      	movs	r2, #1
   12d92:	2042      	movs	r0, #66	; 0x42
   12d94:	f10d 0117 	add.w	r1, sp, #23
   12d98:	f7ff ffa4 	bl	12ce4 <sx127x_read>
	if (ret < 0) {
   12d9c:	2800      	cmp	r0, #0
   12d9e:	da1b      	bge.n	12dd8 <sx127x_lora_init+0x88>
		LOG_ERR("Unable to read version info");
   12da0:	4b1f      	ldr	r3, [pc, #124]	; (12e20 <sx127x_lora_init+0xd0>)
   12da2:	4620      	mov	r0, r4
   12da4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12da8:	9400      	str	r4, [sp, #0]
   12daa:	4623      	mov	r3, r4
   12dac:	2201      	movs	r2, #1
   12dae:	491d      	ldr	r1, [pc, #116]	; (12e24 <sx127x_lora_init+0xd4>)
   12db0:	f018 fe1d 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   12db4:	f06f 0404 	mvn.w	r4, #4
   12db8:	e00b      	b.n	12dd2 <sx127x_lora_init+0x82>
		LOG_ERR("SPI device not ready");
   12dba:	4b1b      	ldr	r3, [pc, #108]	; (12e28 <sx127x_lora_init+0xd8>)
   12dbc:	2201      	movs	r2, #1
   12dbe:	9302      	str	r3, [sp, #8]
   12dc0:	2300      	movs	r3, #0
   12dc2:	4918      	ldr	r1, [pc, #96]	; (12e24 <sx127x_lora_init+0xd4>)
   12dc4:	4618      	mov	r0, r3
   12dc6:	e9cd 3300 	strd	r3, r3, [sp]
   12dca:	f018 fe10 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   12dce:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
   12dd2:	4620      	mov	r0, r4
   12dd4:	b007      	add	sp, #28
   12dd6:	bd30      	pop	{r4, r5, pc}
	LOG_INF("SX127x version 0x%02x found", regval);
   12dd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12ddc:	2203      	movs	r2, #3
   12dde:	9303      	str	r3, [sp, #12]
   12de0:	4b12      	ldr	r3, [pc, #72]	; (12e2c <sx127x_lora_init+0xdc>)
   12de2:	4620      	mov	r0, r4
   12de4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12de8:	490e      	ldr	r1, [pc, #56]	; (12e24 <sx127x_lora_init+0xd4>)
   12dea:	4623      	mov	r3, r4
   12dec:	9400      	str	r4, [sp, #0]
   12dee:	f018 fdfe 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
	ret = sx12xx_init(dev);
   12df2:	4628      	mov	r0, r5
   12df4:	f7ff fe9a 	bl	12b2c <sx12xx_init>
	if (ret < 0) {
   12df8:	1e05      	subs	r5, r0, #0
   12dfa:	daea      	bge.n	12dd2 <sx127x_lora_init+0x82>
		LOG_ERR("Failed to initialize SX12xx common");
   12dfc:	4b0c      	ldr	r3, [pc, #48]	; (12e30 <sx127x_lora_init+0xe0>)
   12dfe:	4620      	mov	r0, r4
   12e00:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12e04:	9400      	str	r4, [sp, #0]
   12e06:	4623      	mov	r3, r4
   12e08:	2201      	movs	r2, #1
   12e0a:	4906      	ldr	r1, [pc, #24]	; (12e24 <sx127x_lora_init+0xd4>)
   12e0c:	f018 fdef 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
		return ret;
   12e10:	462c      	mov	r4, r5
   12e12:	e7de      	b.n	12dd2 <sx127x_lora_init+0x82>
   12e14:	000328f0 	.word	0x000328f0
   12e18:	200084f8 	.word	0x200084f8
   12e1c:	00033958 	.word	0x00033958
   12e20:	00036025 	.word	0x00036025
   12e24:	00032fe0 	.word	0x00032fe0
   12e28:	00036010 	.word	0x00036010
   12e2c:	00036041 	.word	0x00036041
   12e30:	0003605d 	.word	0x0003605d

00012e34 <sx127x_write>:
{
   12e34:	b510      	push	{r4, lr}
   12e36:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
   12e38:	f10d 0307 	add.w	r3, sp, #7
   12e3c:	9304      	str	r3, [sp, #16]
   12e3e:	2301      	movs	r3, #1
   12e40:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
   12e44:	ab04      	add	r3, sp, #16
   12e46:	9302      	str	r3, [sp, #8]
   12e48:	2302      	movs	r3, #2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   12e4a:	f060 007f 	orn	r0, r0, #127	; 0x7f
   12e4e:	f88d 0007 	strb.w	r0, [sp, #7]
   12e52:	9207      	str	r2, [sp, #28]
	struct spi_buf_set tx = {
   12e54:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   12e56:	4804      	ldr	r0, [pc, #16]	; (12e68 <sx127x_write+0x34>)
   12e58:	4904      	ldr	r1, [pc, #16]	; (12e6c <sx127x_write+0x38>)
   12e5a:	6883      	ldr	r3, [r0, #8]
   12e5c:	aa02      	add	r2, sp, #8
   12e5e:	681c      	ldr	r4, [r3, #0]
   12e60:	2300      	movs	r3, #0
   12e62:	47a0      	blx	r4
}
   12e64:	b008      	add	sp, #32
   12e66:	bd10      	pop	{r4, pc}
   12e68:	000328f0 	.word	0x000328f0
   12e6c:	0003394c 	.word	0x0003394c

00012e70 <SX1276WriteBuffer>:
{
   12e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12e72:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
   12e74:	b2c0      	uxtb	r0, r0
   12e76:	f7ff ffdd 	bl	12e34 <sx127x_write>
	if (ret < 0) {
   12e7a:	2800      	cmp	r0, #0
   12e7c:	da0a      	bge.n	12e94 <SX1276WriteBuffer+0x24>
		LOG_ERR("Unable to write address: 0x%x", addr);
   12e7e:	4b06      	ldr	r3, [pc, #24]	; (12e98 <SX1276WriteBuffer+0x28>)
   12e80:	2201      	movs	r2, #1
   12e82:	9302      	str	r3, [sp, #8]
   12e84:	2300      	movs	r3, #0
   12e86:	4905      	ldr	r1, [pc, #20]	; (12e9c <SX1276WriteBuffer+0x2c>)
   12e88:	4618      	mov	r0, r3
   12e8a:	e9cd 3300 	strd	r3, r3, [sp]
   12e8e:	9403      	str	r4, [sp, #12]
   12e90:	f018 fdad 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
}
   12e94:	b004      	add	sp, #16
   12e96:	bd10      	pop	{r4, pc}
   12e98:	00036080 	.word	0x00036080
   12e9c:	00032fe0 	.word	0x00032fe0

00012ea0 <SX1276SetRfTxPower>:
{
   12ea0:	b530      	push	{r4, r5, lr}
	uint8_t pa_config = 0;
   12ea2:	2400      	movs	r4, #0
{
   12ea4:	b087      	sub	sp, #28
   12ea6:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   12ea8:	2201      	movs	r2, #1
   12eaa:	204d      	movs	r0, #77	; 0x4d
   12eac:	f10d 0117 	add.w	r1, sp, #23
	uint8_t pa_config = 0;
   12eb0:	f88d 4016 	strb.w	r4, [sp, #22]
	uint8_t pa_dac = 0;
   12eb4:	f88d 4017 	strb.w	r4, [sp, #23]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   12eb8:	f7ff ff14 	bl	12ce4 <sx127x_read>
	if (ret < 0) {
   12ebc:	42a0      	cmp	r0, r4
   12ebe:	da0b      	bge.n	12ed8 <SX1276SetRfTxPower+0x38>
		LOG_ERR("Unable to read PA dac");
   12ec0:	4b21      	ldr	r3, [pc, #132]	; (12f48 <SX1276SetRfTxPower+0xa8>)
   12ec2:	9400      	str	r4, [sp, #0]
   12ec4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12ec8:	4623      	mov	r3, r4
		LOG_ERR("Unable to write PA dac");
   12eca:	2201      	movs	r2, #1
   12ecc:	4618      	mov	r0, r3
   12ece:	491f      	ldr	r1, [pc, #124]	; (12f4c <SX1276SetRfTxPower+0xac>)
   12ed0:	f018 fd8d 	bl	2b9ee <z_log_msg_runtime_create.constprop.0>
}
   12ed4:	b007      	add	sp, #28
   12ed6:	bd30      	pop	{r4, r5, pc}
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12ed8:	2d14      	cmp	r5, #20
   12eda:	462a      	mov	r2, r5
   12edc:	bfa8      	it	ge
   12ede:	2214      	movge	r2, #20
   12ee0:	2a02      	cmp	r2, #2
   12ee2:	bfb8      	it	lt
   12ee4:	2202      	movlt	r2, #2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   12ee6:	f89d 1017 	ldrb.w	r1, [sp, #23]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   12eea:	f89d 3016 	ldrb.w	r3, [sp, #22]
		if (power > 17) {
   12eee:	2d11      	cmp	r5, #17
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12ef0:	b2d2      	uxtb	r2, r2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   12ef2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12ef6:	bfcc      	ite	gt
   12ef8:	3a05      	subgt	r2, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12efa:	3a02      	suble	r2, #2
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   12efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			pa_dac |= SX127X_PADAC_20DBM_ON;
   12f00:	bfcc      	ite	gt
   12f02:	f041 0107 	orrgt.w	r1, r1, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   12f06:	f041 0104 	orrle.w	r1, r1, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12f0a:	4313      	orrs	r3, r2
   12f0c:	b2db      	uxtb	r3, r3
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   12f0e:	f88d 1017 	strb.w	r1, [sp, #23]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   12f12:	2201      	movs	r2, #1
   12f14:	2009      	movs	r0, #9
   12f16:	f10d 0116 	add.w	r1, sp, #22
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   12f1a:	f88d 3016 	strb.w	r3, [sp, #22]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   12f1e:	f7ff ff89 	bl	12e34 <sx127x_write>
	if (ret < 0) {
   12f22:	2800      	cmp	r0, #0
   12f24:	da05      	bge.n	12f32 <SX1276SetRfTxPower+0x92>
		LOG_ERR("Unable to write PA config");
   12f26:	4b0a      	ldr	r3, [pc, #40]	; (12f50 <SX1276SetRfTxPower+0xb0>)
		LOG_ERR("Unable to write PA dac");
   12f28:	9302      	str	r3, [sp, #8]
   12f2a:	2300      	movs	r3, #0
   12f2c:	e9cd 3300 	strd	r3, r3, [sp]
   12f30:	e7cb      	b.n	12eca <SX1276SetRfTxPower+0x2a>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
   12f32:	2201      	movs	r2, #1
   12f34:	204d      	movs	r0, #77	; 0x4d
   12f36:	f10d 0117 	add.w	r1, sp, #23
   12f3a:	f7ff ff7b 	bl	12e34 <sx127x_write>
	if (ret < 0) {
   12f3e:	2800      	cmp	r0, #0
   12f40:	dac8      	bge.n	12ed4 <SX1276SetRfTxPower+0x34>
		LOG_ERR("Unable to write PA dac");
   12f42:	4b04      	ldr	r3, [pc, #16]	; (12f54 <SX1276SetRfTxPower+0xb4>)
   12f44:	e7f0      	b.n	12f28 <SX1276SetRfTxPower+0x88>
   12f46:	bf00      	nop
   12f48:	0003609e 	.word	0x0003609e
   12f4c:	00032fe0 	.word	0x00032fe0
   12f50:	000360b4 	.word	0x000360b4
   12f54:	000360ce 	.word	0x000360ce

00012f58 <SX1276GetDio1PinState>:
{
   12f58:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
   12f5a:	4809      	ldr	r0, [pc, #36]	; (12f80 <SX1276GetDio1PinState+0x28>)
   12f5c:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   12f5e:	6883      	ldr	r3, [r0, #8]
   12f60:	a901      	add	r1, sp, #4
   12f62:	685b      	ldr	r3, [r3, #4]
   12f64:	4798      	blx	r3
	if (ret == 0) {
   12f66:	b920      	cbnz	r0, 12f72 <SX1276GetDio1PinState+0x1a>
		*value ^= data->invert;
   12f68:	6823      	ldr	r3, [r4, #0]
   12f6a:	9801      	ldr	r0, [sp, #4]
   12f6c:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   12f6e:	f3c0 3000 	ubfx	r0, r0, #12, #1
}
   12f72:	2800      	cmp	r0, #0
   12f74:	bfd4      	ite	le
   12f76:	2000      	movle	r0, #0
   12f78:	2001      	movgt	r0, #1
   12f7a:	b002      	add	sp, #8
   12f7c:	bd10      	pop	{r4, pc}
   12f7e:	bf00      	nop
   12f80:	00032800 	.word	0x00032800

00012f84 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
   12f84:	f243 0039 	movw	r0, #12345	; 0x3039
   12f88:	4b06      	ldr	r3, [pc, #24]	; (12fa4 <rand1+0x20>)
   12f8a:	4907      	ldr	r1, [pc, #28]	; (12fa8 <rand1+0x24>)
   12f8c:	681a      	ldr	r2, [r3, #0]
   12f8e:	fb01 0002 	mla	r0, r1, r2, r0
   12f92:	6018      	str	r0, [r3, #0]
   12f94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   12f98:	fbb0 f3f3 	udiv	r3, r0, r3
   12f9c:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
   12fa0:	1ac0      	subs	r0, r0, r3
   12fa2:	4770      	bx	lr
   12fa4:	20008504 	.word	0x20008504
   12fa8:	41c64e6d 	.word	0x41c64e6d

00012fac <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
   12fac:	4b01      	ldr	r3, [pc, #4]	; (12fb4 <srand1+0x8>)
   12fae:	6018      	str	r0, [r3, #0]
}
   12fb0:	4770      	bx	lr
   12fb2:	bf00      	nop
   12fb4:	20008504 	.word	0x20008504

00012fb8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
   12fb8:	b530      	push	{r4, r5, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
   12fba:	b130      	cbz	r0, 12fca <Crc32+0x12>
    uint32_t crc = 0xFFFFFFFF;
   12fbc:	f04f 33ff 	mov.w	r3, #4294967295
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   12fc0:	4d09      	ldr	r5, [pc, #36]	; (12fe8 <Crc32+0x30>)
   12fc2:	4401      	add	r1, r0
    for( uint16_t i = 0; i < length; ++i )
   12fc4:	4281      	cmp	r1, r0
   12fc6:	d101      	bne.n	12fcc <Crc32+0x14>
        }
    }

    return ~crc;
   12fc8:	43d8      	mvns	r0, r3
}
   12fca:	bd30      	pop	{r4, r5, pc}
        crc ^= ( uint32_t )buffer[i];
   12fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
   12fd0:	4053      	eors	r3, r2
   12fd2:	2208      	movs	r2, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   12fd4:	f343 0400 	sbfx	r4, r3, #0, #1
        for( uint16_t i = 0; i < 8; i++ )
   12fd8:	3a01      	subs	r2, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   12fda:	402c      	ands	r4, r5
        for( uint16_t i = 0; i < 8; i++ )
   12fdc:	b292      	uxth	r2, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   12fde:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
   12fe2:	2a00      	cmp	r2, #0
   12fe4:	d1f6      	bne.n	12fd4 <Crc32+0x1c>
   12fe6:	e7ed      	b.n	12fc4 <Crc32+0xc>
   12fe8:	edb88320 	.word	0xedb88320

00012fec <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   12fec:	4a04      	ldr	r2, [pc, #16]	; (13000 <TimerInsertNewHeadTimer+0x14>)
   12fee:	6813      	ldr	r3, [r2, #0]

    if( cur != NULL )
   12ff0:	b10b      	cbz	r3, 12ff6 <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
   12ff2:	2100      	movs	r1, #0
   12ff4:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
   12ff6:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
   12ff8:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
   12ffa:	f018 be10 	b.w	2bc1e <TimerSetTimeout>
   12ffe:	bf00      	nop
   13000:	2002f9b0 	.word	0x2002f9b0

00013004 <TimerStart>:
{
   13004:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13006:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   13008:	a801      	add	r0, sp, #4
   1300a:	f018 fcce 	bl	2b9aa <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
   1300e:	b16c      	cbz	r4, 1302c <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   13010:	4d17      	ldr	r5, [pc, #92]	; (13070 <TimerStart+0x6c>)
   13012:	682a      	ldr	r2, [r5, #0]
   13014:	4613      	mov	r3, r2

    while( cur != NULL )
   13016:	b973      	cbnz	r3, 13036 <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
   13018:	6863      	ldr	r3, [r4, #4]
   1301a:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
   1301c:	2301      	movs	r3, #1
   1301e:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
   13020:	b96a      	cbnz	r2, 1303e <TimerStart+0x3a>
        RtcSetTimerContext( );
   13022:	f7ff fb09 	bl	12638 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
   13026:	4620      	mov	r0, r4
   13028:	f7ff ffe0 	bl	12fec <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
   1302c:	a801      	add	r0, sp, #4
   1302e:	f018 fcc6 	bl	2b9be <BoardCriticalSectionEnd>
}
   13032:	b003      	add	sp, #12
   13034:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
   13036:	429c      	cmp	r4, r3
   13038:	d0f8      	beq.n	1302c <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
   1303a:	695b      	ldr	r3, [r3, #20]
   1303c:	e7eb      	b.n	13016 <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
   1303e:	f7ff fad1 	bl	125e4 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
   13042:	6823      	ldr	r3, [r4, #0]
   13044:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
   13046:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
   13048:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
   1304a:	681a      	ldr	r2, [r3, #0]
   1304c:	4290      	cmp	r0, r2
   1304e:	d3ea      	bcc.n	13026 <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
   13050:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
   13052:	6959      	ldr	r1, [r3, #20]
   13054:	b911      	cbnz	r1, 1305c <TimerStart+0x58>
    cur->Next = obj;
   13056:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
   13058:	6161      	str	r1, [r4, #20]
   1305a:	e7e7      	b.n	1302c <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
   1305c:	6811      	ldr	r1, [r2, #0]
   1305e:	4288      	cmp	r0, r1
   13060:	d902      	bls.n	13068 <TimerStart+0x64>
            next = next->Next;
   13062:	4613      	mov	r3, r2
   13064:	6952      	ldr	r2, [r2, #20]
   13066:	e7f4      	b.n	13052 <TimerStart+0x4e>
            cur->Next = obj;
   13068:	615c      	str	r4, [r3, #20]
            obj->Next = next;
   1306a:	6162      	str	r2, [r4, #20]
            return;
   1306c:	e7de      	b.n	1302c <TimerStart+0x28>
   1306e:	bf00      	nop
   13070:	2002f9b0 	.word	0x2002f9b0

00013074 <TimerIrqHandler>:
{
   13074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
   13076:	f7ff fae7 	bl	12648 <RtcGetTimerContext>
    if( TimerListHead != NULL )
   1307a:	4c1c      	ldr	r4, [pc, #112]	; (130ec <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
   1307c:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
   1307e:	f7ff fadb 	bl	12638 <RtcSetTimerContext>
    if( TimerListHead != NULL )
   13082:	6823      	ldr	r3, [r4, #0]
   13084:	b1a3      	cbz	r3, 130b0 <TimerIrqHandler+0x3c>
    uint32_t deltaContext = now - old; // intentional wrap around
   13086:	461e      	mov	r6, r3
   13088:	1b47      	subs	r7, r0, r5
                next->Timestamp -= deltaContext;
   1308a:	1a2d      	subs	r5, r5, r0
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   1308c:	6971      	ldr	r1, [r6, #20]
   1308e:	b929      	cbnz	r1, 1309c <TimerIrqHandler+0x28>
        TimerListHead = TimerListHead->Next;
   13090:	695a      	ldr	r2, [r3, #20]
        cur->IsStarted = false;
   13092:	7219      	strb	r1, [r3, #8]
        TimerListHead = TimerListHead->Next;
   13094:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   13096:	68da      	ldr	r2, [r3, #12]
   13098:	b942      	cbnz	r2, 130ac <TimerIrqHandler+0x38>
   1309a:	e7fe      	b.n	1309a <TimerIrqHandler+0x26>
            if( next->Timestamp > deltaContext )
   1309c:	680a      	ldr	r2, [r1, #0]
   1309e:	42ba      	cmp	r2, r7
                next->Timestamp = 0;
   130a0:	bf94      	ite	ls
   130a2:	2200      	movls	r2, #0
                next->Timestamp -= deltaContext;
   130a4:	1952      	addhi	r2, r2, r5
   130a6:	600a      	str	r2, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   130a8:	6976      	ldr	r6, [r6, #20]
   130aa:	e7ef      	b.n	1308c <TimerIrqHandler+0x18>
        ExecuteCallBack( cur->Callback, cur->Context );
   130ac:	6918      	ldr	r0, [r3, #16]
   130ae:	4790      	blx	r2
        cur->IsStarted = false;
   130b0:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   130b2:	6823      	ldr	r3, [r4, #0]
   130b4:	b92b      	cbnz	r3, 130c2 <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   130b6:	6820      	ldr	r0, [r4, #0]
   130b8:	b980      	cbnz	r0, 130dc <TimerIrqHandler+0x68>
}
   130ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
   130bc:	6918      	ldr	r0, [r3, #16]
   130be:	4790      	blx	r2
   130c0:	e7f7      	b.n	130b2 <TimerIrqHandler+0x3e>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   130c2:	681d      	ldr	r5, [r3, #0]
   130c4:	f7ff fa8e 	bl	125e4 <RtcGetTimerElapsedTime>
   130c8:	4285      	cmp	r5, r0
   130ca:	d2f4      	bcs.n	130b6 <TimerIrqHandler+0x42>
        cur = TimerListHead;
   130cc:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
   130ce:	695a      	ldr	r2, [r3, #20]
        cur->IsStarted = false;
   130d0:	721e      	strb	r6, [r3, #8]
        TimerListHead = TimerListHead->Next;
   130d2:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   130d4:	68da      	ldr	r2, [r3, #12]
   130d6:	2a00      	cmp	r2, #0
   130d8:	d1f0      	bne.n	130bc <TimerIrqHandler+0x48>
   130da:	e7fe      	b.n	130da <TimerIrqHandler+0x66>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   130dc:	7a43      	ldrb	r3, [r0, #9]
   130de:	2b00      	cmp	r3, #0
   130e0:	d1eb      	bne.n	130ba <TimerIrqHandler+0x46>
}
   130e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerSetTimeout( TimerListHead );
   130e6:	f018 bd9a 	b.w	2bc1e <TimerSetTimeout>
   130ea:	bf00      	nop
   130ec:	2002f9b0 	.word	0x2002f9b0

000130f0 <TimerStop>:
{
   130f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
   130f2:	4d13      	ldr	r5, [pc, #76]	; (13140 <TimerStop+0x50>)
{
   130f4:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   130f6:	a801      	add	r0, sp, #4
   130f8:	f018 fc57 	bl	2b9aa <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
   130fc:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
   130fe:	b16b      	cbz	r3, 1311c <TimerStop+0x2c>
   13100:	b164      	cbz	r4, 1311c <TimerStop+0x2c>
    obj->IsStarted = false;
   13102:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
   13104:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
   13106:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
   13108:	d111      	bne.n	1312e <TimerStop+0x3e>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   1310a:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
   1310c:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   1310e:	b161      	cbz	r1, 1312a <TimerStop+0x3a>
            TimerListHead->IsNext2Expire = false;
   13110:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
   13112:	b144      	cbz	r4, 13126 <TimerStop+0x36>
                TimerSetTimeout( TimerListHead );
   13114:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
   13116:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
   13118:	f018 fd81 	bl	2bc1e <TimerSetTimeout>
        CRITICAL_SECTION_END( );
   1311c:	a801      	add	r0, sp, #4
   1311e:	f018 fc4e 	bl	2b9be <BoardCriticalSectionEnd>
}
   13122:	b003      	add	sp, #12
   13124:	bd30      	pop	{r4, r5, pc}
                RtcStopAlarm( );
   13126:	f7ff fa67 	bl	125f8 <RtcStopAlarm>
                TimerListHead = NULL;
   1312a:	602c      	str	r4, [r5, #0]
   1312c:	e7f6      	b.n	1311c <TimerStop+0x2c>
                cur = cur->Next;
   1312e:	461a      	mov	r2, r3
   13130:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
   13132:	2b00      	cmp	r3, #0
   13134:	d0f2      	beq.n	1311c <TimerStop+0x2c>
            if( cur == obj )
   13136:	429c      	cmp	r4, r3
   13138:	d1f9      	bne.n	1312e <TimerStop+0x3e>
                if( cur->Next != NULL )
   1313a:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
   1313c:	6153      	str	r3, [r2, #20]
   1313e:	e7ed      	b.n	1311c <TimerStop+0x2c>
   13140:	2002f9b0 	.word	0x2002f9b0

00013144 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   13144:	4b09      	ldr	r3, [pc, #36]	; (1316c <GetFskBandwidthRegValue+0x28>)
{
   13146:	2200      	movs	r2, #0
   13148:	4619      	mov	r1, r3
   1314a:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
   1314c:	681c      	ldr	r4, [r3, #0]
   1314e:	4284      	cmp	r4, r0
   13150:	d802      	bhi.n	13158 <GetFskBandwidthRegValue+0x14>
   13152:	689c      	ldr	r4, [r3, #8]
   13154:	4284      	cmp	r4, r0
   13156:	d805      	bhi.n	13164 <GetFskBandwidthRegValue+0x20>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   13158:	3201      	adds	r2, #1
   1315a:	2a15      	cmp	r2, #21
   1315c:	f103 0308 	add.w	r3, r3, #8
   13160:	d1f4      	bne.n	1314c <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
   13162:	e7fe      	b.n	13162 <GetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i].RegValue;
   13164:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   13168:	7908      	ldrb	r0, [r1, #4]
}
   1316a:	bd10      	pop	{r4, pc}
   1316c:	0003397c 	.word	0x0003397c

00013170 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
   13170:	4b05      	ldr	r3, [pc, #20]	; (13188 <SX1276OnDio4Irq+0x18>)
   13172:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   13176:	b92a      	cbnz	r2, 13184 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
   13178:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   1317c:	b912      	cbnz	r2, 13184 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   1317e:	2201      	movs	r2, #1
   13180:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
   13184:	4770      	bx	lr
   13186:	bf00      	nop
   13188:	2002f9fc 	.word	0x2002f9fc

0001318c <SX1276GetStatus>:
}
   1318c:	4b01      	ldr	r3, [pc, #4]	; (13194 <SX1276GetStatus+0x8>)
   1318e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   13192:	4770      	bx	lr
   13194:	2002f9fc 	.word	0x2002f9fc

00013198 <SX1276GetTimeOnAir>:
{
   13198:	b5f0      	push	{r4, r5, r6, r7, lr}
   1319a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1319e:	f89d c018 	ldrb.w	ip, [sp, #24]
   131a2:	f89d e01c 	ldrb.w	lr, [sp, #28]
   131a6:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
   131aa:	b140      	cbz	r0, 131be <SX1276GetTimeOnAir+0x26>
   131ac:	2801      	cmp	r0, #1
   131ae:	d014      	beq.n	131da <SX1276GetTimeOnAir+0x42>
   131b0:	2201      	movs	r2, #1
   131b2:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
   131b4:	1898      	adds	r0, r3, r2
   131b6:	3801      	subs	r0, #1
   131b8:	fbb0 f0f2 	udiv	r0, r0, r2
}
   131bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
   131be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
           ( ( fixLen == false ) ? 8 : 0 ) +
   131c2:	f08c 0c01 	eor.w	ip, ip, #1
    return ( preambleLen << 3 ) +
   131c6:	00e3      	lsls	r3, r4, #3
   131c8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
   131cc:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
   131ce:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
             ( syncWordLength << 3 ) +
   131d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
   131d6:	434b      	muls	r3, r1
        break;
   131d8:	e7ec      	b.n	131b4 <SX1276GetTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
   131da:	1f50      	subs	r0, r2, #5
   131dc:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
   131de:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
   131e2:	d804      	bhi.n	131ee <SX1276GetTimeOnAir+0x56>
        if( preambleLen < 12 )
   131e4:	2c0c      	cmp	r4, #12
   131e6:	bf38      	it	cc
   131e8:	240c      	movcc	r4, #12
    bool    lowDatareOptimize = false;
   131ea:	2700      	movs	r7, #0
   131ec:	e006      	b.n	131fc <SX1276GetTimeOnAir+0x64>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   131ee:	b9c9      	cbnz	r1, 13224 <SX1276GetTimeOnAir+0x8c>
   131f0:	f1a2 070b 	sub.w	r7, r2, #11
   131f4:	2f01      	cmp	r7, #1
   131f6:	bf8c      	ite	hi
   131f8:	2700      	movhi	r7, #0
   131fa:	2701      	movls	r7, #1
                            ( fixLen ? 0 : 20 );
   131fc:	f1bc 0f00 	cmp.w	ip, #0
                            ( crcOn ? 16 : 0 ) -
   13200:	ea4f 1005 	mov.w	r0, r5, lsl #4
                            ( fixLen ? 0 : 20 );
   13204:	bf0c      	ite	eq
   13206:	2514      	moveq	r5, #20
   13208:	2500      	movne	r5, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
   1320a:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
   1320e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
   13212:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
   13214:	ea4f 0682 	mov.w	r6, r2, lsl #2
   13218:	4428      	add	r0, r5
            ceilDenominator = 4 * ( datarate - 2 );
   1321a:	f1a2 0c02 	sub.w	ip, r2, #2
    if( datarate <= 6 )
   1321e:	d808      	bhi.n	13232 <SX1276GetTimeOnAir+0x9a>
            ceilDenominator = 4 * datarate;
   13220:	4635      	mov	r5, r6
   13222:	e00b      	b.n	1323c <SX1276GetTimeOnAir+0xa4>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13224:	2901      	cmp	r1, #1
   13226:	d1e0      	bne.n	131ea <SX1276GetTimeOnAir+0x52>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
   13228:	f1a2 000c 	sub.w	r0, r2, #12
   1322c:	4247      	negs	r7, r0
   1322e:	4147      	adcs	r7, r0
   13230:	e7e4      	b.n	131fc <SX1276GetTimeOnAir+0x64>
        ceilNumerator += 8;
   13232:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
   13234:	2f00      	cmp	r7, #0
   13236:	d0f3      	beq.n	13220 <SX1276GetTimeOnAir+0x88>
            ceilDenominator = 4 * ( datarate - 2 );
   13238:	ea4f 058c 	mov.w	r5, ip, lsl #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
   1323c:	2800      	cmp	r0, #0
   1323e:	bfac      	ite	ge
   13240:	182e      	addge	r6, r5, r0
   13242:	1c2e      	addlt	r6, r5, #0
   13244:	1e70      	subs	r0, r6, #1
   13246:	fb90 f0f5 	sdiv	r0, r0, r5
   1324a:	fb03 4400 	mla	r4, r3, r0, r4
    if( datarate <= 6 )
   1324e:	2a06      	cmp	r2, #6
    int32_t intermediate =
   13250:	bf8c      	ite	hi
   13252:	340c      	addhi	r4, #12
        intermediate += 2;
   13254:	340e      	addls	r4, #14
    switch( bw )
   13256:	2902      	cmp	r1, #2
   13258:	d80a      	bhi.n	13270 <SX1276GetTimeOnAir+0xd8>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
   1325a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
   1325e:	00a3      	lsls	r3, r4, #2
   13260:	3301      	adds	r3, #1
   13262:	fa03 f30c 	lsl.w	r3, r3, ip
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
   13266:	4353      	muls	r3, r2
   13268:	4a02      	ldr	r2, [pc, #8]	; (13274 <SX1276GetTimeOnAir+0xdc>)
   1326a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1326e:	e7a1      	b.n	131b4 <SX1276GetTimeOnAir+0x1c>
    return ( numerator + denominator - 1 ) / denominator;
   13270:	deff      	udf	#255	; 0xff
   13272:	bf00      	nop
   13274:	00033970 	.word	0x00033970

00013278 <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   13278:	f643 5309 	movw	r3, #15625	; 0x3d09
   1327c:	fbb0 f2f3 	udiv	r2, r0, r3
{
   13280:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   13282:	f641 6484 	movw	r4, #7812	; 0x1e84
   13286:	fb03 0112 	mls	r1, r3, r2, r0
   1328a:	eb04 2401 	add.w	r4, r4, r1, lsl #8
   1328e:	fbb4 f4f3 	udiv	r4, r4, r3
    SX1276.Settings.Channel = freq;
   13292:	4b0a      	ldr	r3, [pc, #40]	; (132bc <SX1276SetChannel+0x44>)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
   13294:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276.Settings.Channel = freq;
   13298:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
   1329c:	f3c4 4107 	ubfx	r1, r4, #16, #8
   132a0:	2006      	movs	r0, #6
   132a2:	f018 fd03 	bl	2bcac <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
   132a6:	f3c4 2107 	ubfx	r1, r4, #8, #8
   132aa:	2007      	movs	r0, #7
   132ac:	f018 fcfe 	bl	2bcac <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
   132b0:	b2e1      	uxtb	r1, r4
   132b2:	2008      	movs	r0, #8
}
   132b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
   132b8:	f018 bcf8 	b.w	2bcac <SX1276Write>
   132bc:	2002f9fc 	.word	0x2002f9fc

000132c0 <SX1276OnDio3Irq>:
{
   132c0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
   132c2:	4b11      	ldr	r3, [pc, #68]	; (13308 <SX1276OnDio3Irq+0x48>)
   132c4:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
   132c8:	2e01      	cmp	r6, #1
   132ca:	d11c      	bne.n	13306 <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
   132cc:	2012      	movs	r0, #18
   132ce:	f018 fcf8 	bl	2bcc2 <SX1276Read>
   132d2:	f010 0401 	ands.w	r4, r0, #1
   132d6:	4d0d      	ldr	r5, [pc, #52]	; (1330c <SX1276OnDio3Irq+0x4c>)
   132d8:	d00b      	beq.n	132f2 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
   132da:	2105      	movs	r1, #5
   132dc:	2012      	movs	r0, #18
   132de:	f018 fce5 	bl	2bcac <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   132e2:	682b      	ldr	r3, [r5, #0]
   132e4:	b17b      	cbz	r3, 13306 <SX1276OnDio3Irq+0x46>
   132e6:	699b      	ldr	r3, [r3, #24]
   132e8:	b16b      	cbz	r3, 13306 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
   132ea:	4630      	mov	r0, r6
}
   132ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
   132f0:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
   132f2:	2104      	movs	r1, #4
   132f4:	2012      	movs	r0, #18
   132f6:	f018 fcd9 	bl	2bcac <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   132fa:	682b      	ldr	r3, [r5, #0]
   132fc:	b11b      	cbz	r3, 13306 <SX1276OnDio3Irq+0x46>
   132fe:	699b      	ldr	r3, [r3, #24]
   13300:	b10b      	cbz	r3, 13306 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
   13302:	4620      	mov	r0, r4
   13304:	e7f2      	b.n	132ec <SX1276OnDio3Irq+0x2c>
}
   13306:	bd70      	pop	{r4, r5, r6, pc}
   13308:	2002f9fc 	.word	0x2002f9fc
   1330c:	2002fb40 	.word	0x2002fb40

00013310 <SX1276OnDio2Irq>:
{
   13310:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   13312:	4c31      	ldr	r4, [pc, #196]	; (133d8 <SX1276OnDio2Irq+0xc8>)
   13314:	f894 10e0 	ldrb.w	r1, [r4, #224]	; 0xe0
   13318:	2901      	cmp	r1, #1
   1331a:	d002      	beq.n	13322 <SX1276OnDio2Irq+0x12>
   1331c:	2902      	cmp	r1, #2
   1331e:	d052      	beq.n	133c6 <SX1276OnDio2Irq+0xb6>
}
   13320:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   13322:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13326:	b1cb      	cbz	r3, 1335c <SX1276OnDio2Irq+0x4c>
   13328:	2b01      	cmp	r3, #1
   1332a:	d1f9      	bne.n	13320 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   1332c:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   13330:	2b00      	cmp	r3, #0
   13332:	d0f5      	beq.n	13320 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   13334:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   13336:	2012      	movs	r0, #18
   13338:	f018 fcb8 	bl	2bcac <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
   1333c:	4b27      	ldr	r3, [pc, #156]	; (133dc <SX1276OnDio2Irq+0xcc>)
   1333e:	681b      	ldr	r3, [r3, #0]
   13340:	2b00      	cmp	r3, #0
   13342:	d0ed      	beq.n	13320 <SX1276OnDio2Irq+0x10>
   13344:	695c      	ldr	r4, [r3, #20]
   13346:	2c00      	cmp	r4, #0
   13348:	d0ea      	beq.n	13320 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   1334a:	201c      	movs	r0, #28
   1334c:	f018 fcb9 	bl	2bcc2 <SX1276Read>
   13350:	4623      	mov	r3, r4
}
   13352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   13356:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1335a:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
   1335c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1335e:	bb6b      	cbnz	r3, 133bc <SX1276OnDio2Irq+0xac>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   13360:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
   13364:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   13368:	2b00      	cmp	r3, #0
   1336a:	d1d9      	bne.n	13320 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
   1336c:	481c      	ldr	r0, [pc, #112]	; (133e0 <SX1276OnDio2Irq+0xd0>)
   1336e:	f7ff febf 	bl	130f0 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
   13372:	2301      	movs	r3, #1
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   13374:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
   13376:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   1337a:	f018 fca2 	bl	2bcc2 <SX1276Read>
   1337e:	0840      	lsrs	r0, r0, #1
   13380:	4240      	negs	r0, r0
   13382:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   13386:	201b      	movs	r0, #27
   13388:	f018 fc9b 	bl	2bcc2 <SX1276Read>
   1338c:	4605      	mov	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
   1338e:	201c      	movs	r0, #28
   13390:	f018 fc97 	bl	2bcc2 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13394:	f643 5309 	movw	r3, #15625	; 0x3d09
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   13398:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   1339c:	b2c0      	uxtb	r0, r0
   1339e:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
   133a0:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   133a2:	435d      	muls	r5, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   133a4:	3080      	adds	r0, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   133a6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
   133aa:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   133ac:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
   133b0:	f018 fc87 	bl	2bcc2 <SX1276Read>
   133b4:	0940      	lsrs	r0, r0, #5
   133b6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
   133ba:	e7b1      	b.n	13320 <SX1276OnDio2Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
   133bc:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   133c0:	2b00      	cmp	r3, #0
   133c2:	d0ad      	beq.n	13320 <SX1276OnDio2Irq+0x10>
   133c4:	e7ce      	b.n	13364 <SX1276OnDio2Irq+0x54>
            switch( SX1276.Settings.Modem )
   133c6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   133ca:	2b01      	cmp	r3, #1
   133cc:	d1a8      	bne.n	13320 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   133ce:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   133d2:	2b00      	cmp	r3, #0
   133d4:	d0a4      	beq.n	13320 <SX1276OnDio2Irq+0x10>
   133d6:	e7ae      	b.n	13336 <SX1276OnDio2Irq+0x26>
   133d8:	2002f9fc 	.word	0x2002f9fc
   133dc:	2002fb40 	.word	0x2002fb40
   133e0:	2002f9b4 	.word	0x2002f9b4

000133e4 <SX1276OnDio1Irq>:
{
   133e4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   133e6:	4c40      	ldr	r4, [pc, #256]	; (134e8 <SX1276OnDio1Irq+0x104>)
   133e8:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
   133ec:	2d01      	cmp	r5, #1
   133ee:	d002      	beq.n	133f6 <SX1276OnDio1Irq+0x12>
   133f0:	2d02      	cmp	r5, #2
   133f2:	d059      	beq.n	134a8 <SX1276OnDio1Irq+0xc4>
}
   133f4:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   133f6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   133fa:	b1cb      	cbz	r3, 13430 <SX1276OnDio1Irq+0x4c>
   133fc:	2b01      	cmp	r3, #1
   133fe:	d1f9      	bne.n	133f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
   13400:	f7ff fdaa 	bl	12f58 <SX1276GetDio1PinState>
   13404:	2800      	cmp	r0, #0
   13406:	d0f5      	beq.n	133f4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
   13408:	4838      	ldr	r0, [pc, #224]	; (134ec <SX1276OnDio1Irq+0x108>)
   1340a:	f7ff fe71 	bl	130f0 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
   1340e:	2180      	movs	r1, #128	; 0x80
   13410:	2012      	movs	r0, #18
   13412:	f018 fc4b 	bl	2bcac <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   13416:	2300      	movs	r3, #0
   13418:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1341c:	4b34      	ldr	r3, [pc, #208]	; (134f0 <SX1276OnDio1Irq+0x10c>)
   1341e:	681b      	ldr	r3, [r3, #0]
   13420:	2b00      	cmp	r3, #0
   13422:	d0e7      	beq.n	133f4 <SX1276OnDio1Irq+0x10>
   13424:	68db      	ldr	r3, [r3, #12]
   13426:	2b00      	cmp	r3, #0
   13428:	d0e4      	beq.n	133f4 <SX1276OnDio1Irq+0x10>
}
   1342a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
   1342e:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 0 )
   13430:	f7ff fd92 	bl	12f58 <SX1276GetDio1PinState>
   13434:	2800      	cmp	r0, #0
   13436:	d0dd      	beq.n	133f4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
   13438:	482e      	ldr	r0, [pc, #184]	; (134f4 <SX1276OnDio1Irq+0x110>)
   1343a:	f7ff fe59 	bl	130f0 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1343e:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   13442:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   13446:	4313      	orrs	r3, r2
   13448:	b29b      	uxth	r3, r3
   1344a:	b93b      	cbnz	r3, 1345c <SX1276OnDio1Irq+0x78>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1344c:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
   13450:	b9e8      	cbnz	r0, 1348e <SX1276OnDio1Irq+0xaa>
    SX1276ReadBuffer( 0, buffer, size );
   13452:	462a      	mov	r2, r5
   13454:	f504 718b 	add.w	r1, r4, #278	; 0x116
   13458:	f7ff fc62 	bl	12d20 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   1345c:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   13460:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   13464:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   13468:	4923      	ldr	r1, [pc, #140]	; (134f8 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   1346a:	1a12      	subs	r2, r2, r0
   1346c:	429a      	cmp	r2, r3
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   1346e:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   13470:	db13      	blt.n	1349a <SX1276OnDio1Irq+0xb6>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   13472:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
   13474:	b2d2      	uxtb	r2, r2
   13476:	2000      	movs	r0, #0
   13478:	f7ff fc52 	bl	12d20 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
   1347c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   13480:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   13484:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   13486:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   13488:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
   1348c:	e7b2      	b.n	133f4 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1348e:	2032      	movs	r0, #50	; 0x32
   13490:	f018 fc17 	bl	2bcc2 <SX1276Read>
   13494:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   13498:	e7e0      	b.n	1345c <SX1276OnDio1Irq+0x78>
    SX1276ReadBuffer( 0, buffer, size );
   1349a:	2000      	movs	r0, #0
   1349c:	b2d2      	uxtb	r2, r2
   1349e:	f7ff fc3f 	bl	12d20 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   134a2:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   134a6:	e7ef      	b.n	13488 <SX1276OnDio1Irq+0xa4>
            switch( SX1276.Settings.Modem )
   134a8:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
   134ac:	2d00      	cmp	r5, #0
   134ae:	d1a1      	bne.n	133f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
   134b0:	f7ff fd52 	bl	12f58 <SX1276GetDio1PinState>
   134b4:	2801      	cmp	r0, #1
   134b6:	d09d      	beq.n	133f4 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   134b8:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   134bc:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   134c0:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   134c4:	490c      	ldr	r1, [pc, #48]	; (134f8 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   134c6:	1a1b      	subs	r3, r3, r0
   134c8:	4293      	cmp	r3, r2
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   134ca:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   134cc:	dd07      	ble.n	134de <SX1276OnDio1Irq+0xfa>
    SX1276WriteBuffer( 0, buffer, size );
   134ce:	4628      	mov	r0, r5
   134d0:	f7ff fcce 	bl	12e70 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   134d4:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   134d8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   134dc:	e7d3      	b.n	13486 <SX1276OnDio1Irq+0xa2>
    SX1276WriteBuffer( 0, buffer, size );
   134de:	4628      	mov	r0, r5
   134e0:	b2da      	uxtb	r2, r3
   134e2:	f7ff fcc5 	bl	12e70 <SX1276WriteBuffer>
   134e6:	e7dc      	b.n	134a2 <SX1276OnDio1Irq+0xbe>
   134e8:	2002f9fc 	.word	0x2002f9fc
   134ec:	2002f9cc 	.word	0x2002f9cc
   134f0:	2002fb40 	.word	0x2002fb40
   134f4:	2002f9b4 	.word	0x2002f9b4
   134f8:	200317fd 	.word	0x200317fd

000134fc <SX1276OnDio0Irq>:
    volatile uint8_t irqFlags = 0;
   134fc:	2300      	movs	r3, #0
{
   134fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   13500:	4c8e      	ldr	r4, [pc, #568]	; (1373c <SX1276OnDio0Irq+0x240>)
    volatile uint8_t irqFlags = 0;
   13502:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
   13506:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1350a:	2b01      	cmp	r3, #1
   1350c:	d004      	beq.n	13518 <SX1276OnDio0Irq+0x1c>
   1350e:	2b02      	cmp	r3, #2
   13510:	f000 80ff 	beq.w	13712 <SX1276OnDio0Irq+0x216>
}
   13514:	b002      	add	sp, #8
   13516:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   13518:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1351c:	b33b      	cbz	r3, 1356e <SX1276OnDio0Irq+0x72>
   1351e:	2b01      	cmp	r3, #1
   13520:	d1f8      	bne.n	13514 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
   13522:	2140      	movs	r1, #64	; 0x40
   13524:	2012      	movs	r0, #18
   13526:	f018 fbc1 	bl	2bcac <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
   1352a:	2012      	movs	r0, #18
   1352c:	f018 fbc9 	bl	2bcc2 <SX1276Read>
   13530:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
   13534:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13538:	4d81      	ldr	r5, [pc, #516]	; (13740 <SX1276OnDio0Irq+0x244>)
   1353a:	f013 0f20 	tst.w	r3, #32
   1353e:	f000 8093 	beq.w	13668 <SX1276OnDio0Irq+0x16c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
   13542:	2120      	movs	r1, #32
   13544:	2012      	movs	r0, #18
   13546:	f018 fbb1 	bl	2bcac <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
   1354a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1354e:	b90b      	cbnz	r3, 13554 <SX1276OnDio0Irq+0x58>
                            SX1276.Settings.State = RF_IDLE;
   13550:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
   13554:	487b      	ldr	r0, [pc, #492]	; (13744 <SX1276OnDio0Irq+0x248>)
   13556:	f7ff fdcb 	bl	130f0 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1355a:	682b      	ldr	r3, [r5, #0]
   1355c:	2b00      	cmp	r3, #0
   1355e:	d0d9      	beq.n	13514 <SX1276OnDio0Irq+0x18>
   13560:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   13562:	2b00      	cmp	r3, #0
   13564:	d0d6      	beq.n	13514 <SX1276OnDio0Irq+0x18>
}
   13566:	b002      	add	sp, #8
   13568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
   1356c:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
   1356e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   13572:	4d73      	ldr	r5, [pc, #460]	; (13740 <SX1276OnDio0Irq+0x244>)
   13574:	b393      	cbz	r3, 135dc <SX1276OnDio0Irq+0xe0>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
   13576:	203f      	movs	r0, #63	; 0x3f
   13578:	f018 fba3 	bl	2bcc2 <SX1276Read>
   1357c:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
   13580:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13584:	079b      	lsls	r3, r3, #30
   13586:	d429      	bmi.n	135dc <SX1276OnDio0Irq+0xe0>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   13588:	210b      	movs	r1, #11
   1358a:	203e      	movs	r0, #62	; 0x3e
   1358c:	f018 fb8e 	bl	2bcac <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   13590:	2110      	movs	r1, #16
   13592:	203f      	movs	r0, #63	; 0x3f
   13594:	f018 fb8a 	bl	2bcac <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
   13598:	486a      	ldr	r0, [pc, #424]	; (13744 <SX1276OnDio0Irq+0x248>)
   1359a:	f7ff fda9 	bl	130f0 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
   1359e:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
   135a2:	b98e      	cbnz	r6, 135c8 <SX1276OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
   135a4:	4868      	ldr	r0, [pc, #416]	; (13748 <SX1276OnDio0Irq+0x24c>)
   135a6:	f7ff fda3 	bl	130f0 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
   135aa:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   135ae:	682b      	ldr	r3, [r5, #0]
   135b0:	b113      	cbz	r3, 135b8 <SX1276OnDio0Irq+0xbc>
   135b2:	691b      	ldr	r3, [r3, #16]
   135b4:	b103      	cbz	r3, 135b8 <SX1276OnDio0Irq+0xbc>
                            RadioEvents->RxError( );
   135b6:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   135b8:	2300      	movs	r3, #0
   135ba:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
   135be:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
   135c2:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
   135c6:	e7a5      	b.n	13514 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   135c8:	200d      	movs	r0, #13
   135ca:	f018 fb7a 	bl	2bcc2 <SX1276Read>
   135ce:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   135d2:	b2c9      	uxtb	r1, r1
   135d4:	200d      	movs	r0, #13
   135d6:	f018 fb69 	bl	2bcac <SX1276Write>
   135da:	e7e8      	b.n	135ae <SX1276OnDio0Irq+0xb2>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   135dc:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   135e0:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
   135e4:	4e59      	ldr	r6, [pc, #356]	; (1374c <SX1276OnDio0Irq+0x250>)
   135e6:	ea52 0301 	orrs.w	r3, r2, r1
   135ea:	d10a      	bne.n	13602 <SX1276OnDio0Irq+0x106>
                    if( SX1276.Settings.Fsk.FixLen == false )
   135ec:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
   135f0:	bb50      	cbnz	r0, 13648 <SX1276OnDio0Irq+0x14c>
    SX1276ReadBuffer( 0, buffer, size );
   135f2:	2201      	movs	r2, #1
   135f4:	4956      	ldr	r1, [pc, #344]	; (13750 <SX1276OnDio0Irq+0x254>)
   135f6:	f7ff fb93 	bl	12d20 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   135fa:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
   135fe:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   13602:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
   13604:	2000      	movs	r0, #0
   13606:	b2d2      	uxtb	r2, r2
   13608:	4431      	add	r1, r6
   1360a:	f7ff fb89 	bl	12d20 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1360e:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
   13612:	484c      	ldr	r0, [pc, #304]	; (13744 <SX1276OnDio0Irq+0x248>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   13614:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
   13618:	f7ff fd6a 	bl	130f0 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
   1361c:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   13620:	b9c3      	cbnz	r3, 13654 <SX1276OnDio0Irq+0x158>
                    TimerStop( &RxTimeoutSyncWord );
   13622:	4849      	ldr	r0, [pc, #292]	; (13748 <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.State = RF_IDLE;
   13624:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
   13628:	f7ff fd62 	bl	130f0 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1362c:	682b      	ldr	r3, [r5, #0]
   1362e:	2b00      	cmp	r3, #0
   13630:	d0c2      	beq.n	135b8 <SX1276OnDio0Irq+0xbc>
   13632:	689d      	ldr	r5, [r3, #8]
   13634:	2d00      	cmp	r5, #0
   13636:	d0bf      	beq.n	135b8 <SX1276OnDio0Irq+0xbc>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
   13638:	2300      	movs	r3, #0
   1363a:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
   1363e:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   13642:	4842      	ldr	r0, [pc, #264]	; (1374c <SX1276OnDio0Irq+0x250>)
   13644:	47a8      	blx	r5
   13646:	e7b7      	b.n	135b8 <SX1276OnDio0Irq+0xbc>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   13648:	2032      	movs	r0, #50	; 0x32
   1364a:	f018 fb3a 	bl	2bcc2 <SX1276Read>
   1364e:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   13652:	e7d2      	b.n	135fa <SX1276OnDio0Irq+0xfe>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   13654:	200d      	movs	r0, #13
   13656:	f018 fb34 	bl	2bcc2 <SX1276Read>
   1365a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1365e:	b2c9      	uxtb	r1, r1
   13660:	200d      	movs	r0, #13
   13662:	f018 fb23 	bl	2bcac <SX1276Write>
   13666:	e7e1      	b.n	1362c <SX1276OnDio0Irq+0x130>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
   13668:	2019      	movs	r0, #25
   1366a:	f018 fb2a 	bl	2bcc2 <SX1276Read>
   1366e:	b240      	sxtb	r0, r0
   13670:	3002      	adds	r0, #2
   13672:	1080      	asrs	r0, r0, #2
   13674:	f884 013c 	strb.w	r0, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   13678:	201a      	movs	r0, #26
   1367a:	f018 fb22 	bl	2bcc2 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1367e:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
   13682:	4934      	ldr	r1, [pc, #208]	; (13754 <SX1276OnDio0Irq+0x258>)
   13684:	2a00      	cmp	r2, #0
   13686:	f340 130b 	sbfx	r3, r0, #4, #12
   1368a:	da3a      	bge.n	13702 <SX1276OnDio0Irq+0x206>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1368c:	f8d4 60e4 	ldr.w	r6, [r4, #228]	; 0xe4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
   13690:	b292      	uxth	r2, r2
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13692:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   13694:	bf8c      	ite	hi
   13696:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   13698:	3aa4      	subls	r2, #164	; 0xa4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   1369a:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   1369c:	4410      	add	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1369e:	4403      	add	r3, r0
   136a0:	b21b      	sxth	r3, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   136a2:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   136a4:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   136a8:	f018 fb0b 	bl	2bcc2 <SX1276Read>
   136ac:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
   136b0:	2010      	movs	r0, #16
   136b2:	f018 fb06 	bl	2bcc2 <SX1276Read>
   136b6:	4601      	mov	r1, r0
   136b8:	200d      	movs	r0, #13
   136ba:	f018 faf7 	bl	2bcac <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
   136be:	2000      	movs	r0, #0
   136c0:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
   136c4:	4921      	ldr	r1, [pc, #132]	; (1374c <SX1276OnDio0Irq+0x250>)
   136c6:	f7ff fb2b 	bl	12d20 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
   136ca:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   136ce:	b90b      	cbnz	r3, 136d4 <SX1276OnDio0Irq+0x1d8>
                        SX1276.Settings.State = RF_IDLE;
   136d0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
   136d4:	481b      	ldr	r0, [pc, #108]	; (13744 <SX1276OnDio0Irq+0x248>)
   136d6:	f7ff fd0b 	bl	130f0 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   136da:	682b      	ldr	r3, [r5, #0]
   136dc:	2b00      	cmp	r3, #0
   136de:	f43f af19 	beq.w	13514 <SX1276OnDio0Irq+0x18>
   136e2:	689d      	ldr	r5, [r3, #8]
   136e4:	2d00      	cmp	r5, #0
   136e6:	f43f af15 	beq.w	13514 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   136ea:	46ac      	mov	ip, r5
   136ec:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
   136f0:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
   136f4:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   136f8:	4814      	ldr	r0, [pc, #80]	; (1374c <SX1276OnDio0Irq+0x250>)
}
   136fa:	b002      	add	sp, #8
   136fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   13700:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13702:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   13706:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13708:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   1370a:	bf8c      	ite	hi
   1370c:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1370e:	38a4      	subls	r0, #164	; 0xa4
   13710:	e7c5      	b.n	1369e <SX1276OnDio0Irq+0x1a2>
            TimerStop( &TxTimeoutTimer );
   13712:	4811      	ldr	r0, [pc, #68]	; (13758 <SX1276OnDio0Irq+0x25c>)
   13714:	f7ff fcec 	bl	130f0 <TimerStop>
            switch( SX1276.Settings.Modem )
   13718:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1371c:	2b01      	cmp	r3, #1
   1371e:	d103      	bne.n	13728 <SX1276OnDio0Irq+0x22c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
   13720:	2108      	movs	r1, #8
   13722:	2012      	movs	r0, #18
   13724:	f018 fac2 	bl	2bcac <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   13728:	2300      	movs	r3, #0
   1372a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1372e:	4b04      	ldr	r3, [pc, #16]	; (13740 <SX1276OnDio0Irq+0x244>)
   13730:	681b      	ldr	r3, [r3, #0]
   13732:	2b00      	cmp	r3, #0
   13734:	f43f aeee 	beq.w	13514 <SX1276OnDio0Irq+0x18>
   13738:	681b      	ldr	r3, [r3, #0]
   1373a:	e712      	b.n	13562 <SX1276OnDio0Irq+0x66>
   1373c:	2002f9fc 	.word	0x2002f9fc
   13740:	2002fb40 	.word	0x2002fb40
   13744:	2002f9cc 	.word	0x2002f9cc
   13748:	2002f9b4 	.word	0x2002f9b4
   1374c:	200317fd 	.word	0x200317fd
   13750:	2002fb12 	.word	0x2002fb12
   13754:	1f4add40 	.word	0x1f4add40
   13758:	2002f9e4 	.word	0x2002f9e4

0001375c <RxChainCalibration>:
{
   1375c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
   1375e:	2009      	movs	r0, #9
   13760:	f018 faaf 	bl	2bcc2 <SX1276Read>
   13764:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   13766:	2006      	movs	r0, #6
   13768:	f018 faab 	bl	2bcc2 <SX1276Read>
   1376c:	4606      	mov	r6, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
   1376e:	2007      	movs	r0, #7
   13770:	f018 faa7 	bl	2bcc2 <SX1276Read>
   13774:	0204      	lsls	r4, r0, #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
   13776:	2008      	movs	r0, #8
   13778:	f018 faa3 	bl	2bcc2 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   1377c:	f643 5309 	movw	r3, #15625	; 0x3d09
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   13780:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   13784:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13786:	b2c0      	uxtb	r0, r0
   13788:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
   1378a:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   1378c:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   1378e:	3080      	adds	r0, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
   13790:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   13792:	eb04 2410 	add.w	r4, r4, r0, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
   13796:	2009      	movs	r0, #9
   13798:	f018 fa88 	bl	2bcac <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   1379c:	203b      	movs	r0, #59	; 0x3b
   1379e:	f018 fa90 	bl	2bcc2 <SX1276Read>
   137a2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   137a6:	b2c9      	uxtb	r1, r1
   137a8:	203b      	movs	r0, #59	; 0x3b
   137aa:	f018 fa7f 	bl	2bcac <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   137ae:	203b      	movs	r0, #59	; 0x3b
   137b0:	f018 fa87 	bl	2bcc2 <SX1276Read>
   137b4:	0682      	lsls	r2, r0, #26
   137b6:	d4fa      	bmi.n	137ae <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
   137b8:	480c      	ldr	r0, [pc, #48]	; (137ec <RxChainCalibration+0x90>)
   137ba:	f7ff fd5d 	bl	13278 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   137be:	203b      	movs	r0, #59	; 0x3b
   137c0:	f018 fa7f 	bl	2bcc2 <SX1276Read>
   137c4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   137c8:	b2c9      	uxtb	r1, r1
   137ca:	203b      	movs	r0, #59	; 0x3b
   137cc:	f018 fa6e 	bl	2bcac <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   137d0:	203b      	movs	r0, #59	; 0x3b
   137d2:	f018 fa76 	bl	2bcc2 <SX1276Read>
   137d6:	0683      	lsls	r3, r0, #26
   137d8:	d4fa      	bmi.n	137d0 <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
   137da:	4629      	mov	r1, r5
   137dc:	2009      	movs	r0, #9
   137de:	f018 fa65 	bl	2bcac <SX1276Write>
    SX1276SetChannel( initialFreq );
   137e2:	4620      	mov	r0, r4
}
   137e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
   137e8:	f7ff bd46 	b.w	13278 <SX1276SetChannel>
   137ec:	33bca100 	.word	0x33bca100

000137f0 <SX1276SetSleep>:
{
   137f0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   137f2:	480a      	ldr	r0, [pc, #40]	; (1381c <SX1276SetSleep+0x2c>)
   137f4:	f7ff fc7c 	bl	130f0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   137f8:	4809      	ldr	r0, [pc, #36]	; (13820 <SX1276SetSleep+0x30>)
   137fa:	f7ff fc79 	bl	130f0 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   137fe:	4809      	ldr	r0, [pc, #36]	; (13824 <SX1276SetSleep+0x34>)
   13800:	f7ff fc76 	bl	130f0 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   13804:	2000      	movs	r0, #0
   13806:	f018 fa67 	bl	2bcd8 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
   1380a:	2000      	movs	r0, #0
   1380c:	f018 f901 	bl	2ba12 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
   13810:	2200      	movs	r2, #0
   13812:	4b05      	ldr	r3, [pc, #20]	; (13828 <SX1276SetSleep+0x38>)
   13814:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   13818:	bd08      	pop	{r3, pc}
   1381a:	bf00      	nop
   1381c:	2002f9cc 	.word	0x2002f9cc
   13820:	2002f9e4 	.word	0x2002f9e4
   13824:	2002f9b4 	.word	0x2002f9b4
   13828:	2002f9fc 	.word	0x2002f9fc

0001382c <SX1276SetStby>:
{
   1382c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   1382e:	4808      	ldr	r0, [pc, #32]	; (13850 <SX1276SetStby+0x24>)
   13830:	f7ff fc5e 	bl	130f0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   13834:	4807      	ldr	r0, [pc, #28]	; (13854 <SX1276SetStby+0x28>)
   13836:	f7ff fc5b 	bl	130f0 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   1383a:	4807      	ldr	r0, [pc, #28]	; (13858 <SX1276SetStby+0x2c>)
   1383c:	f7ff fc58 	bl	130f0 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
   13840:	2001      	movs	r0, #1
   13842:	f018 fa49 	bl	2bcd8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
   13846:	2200      	movs	r2, #0
   13848:	4b04      	ldr	r3, [pc, #16]	; (1385c <SX1276SetStby+0x30>)
   1384a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1384e:	bd08      	pop	{r3, pc}
   13850:	2002f9cc 	.word	0x2002f9cc
   13854:	2002f9e4 	.word	0x2002f9e4
   13858:	2002f9b4 	.word	0x2002f9b4
   1385c:	2002f9fc 	.word	0x2002f9fc

00013860 <SX1276Send>:
{
   13860:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
   13862:	4c60      	ldr	r4, [pc, #384]	; (139e4 <SX1276Send+0x184>)
{
   13864:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
   13866:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
   1386a:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
   1386e:	b1db      	cbz	r3, 138a8 <SX1276Send+0x48>
   13870:	2b01      	cmp	r3, #1
   13872:	d045      	beq.n	13900 <SX1276Send+0xa0>
   13874:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
   13876:	485c      	ldr	r0, [pc, #368]	; (139e8 <SX1276Send+0x188>)
   13878:	f7ff fc3a 	bl	130f0 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1387c:	4629      	mov	r1, r5
   1387e:	485b      	ldr	r0, [pc, #364]	; (139ec <SX1276Send+0x18c>)
   13880:	f018 f9eb 	bl	2bc5a <TimerSetValue>
    switch( SX1276.Settings.Modem )
   13884:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13888:	2b00      	cmp	r3, #0
   1388a:	d076      	beq.n	1397a <SX1276Send+0x11a>
   1388c:	2b01      	cmp	r3, #1
   1388e:	f000 808c 	beq.w	139aa <SX1276Send+0x14a>
    SX1276.Settings.State = RF_TX_RUNNING;
   13892:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
   13894:	4855      	ldr	r0, [pc, #340]	; (139ec <SX1276Send+0x18c>)
    SX1276.Settings.State = RF_TX_RUNNING;
   13896:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   1389a:	f7ff fbb3 	bl	13004 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1389e:	2003      	movs	r0, #3
   138a0:	f018 fa1a 	bl	2bcd8 <SX1276SetOpMode>
}
   138a4:	b003      	add	sp, #12
   138a6:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
   138a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
            if( SX1276.Settings.Fsk.FixLen == false )
   138ac:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   138b0:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
   138b4:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
   138b8:	b9f0      	cbnz	r0, 138f8 <SX1276Send+0x98>
    SX1276WriteBuffer( 0, buffer, size );
   138ba:	2201      	movs	r2, #1
   138bc:	f10d 0107 	add.w	r1, sp, #7
   138c0:	f7ff fad6 	bl	12e70 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
   138c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   138c8:	1e53      	subs	r3, r2, #1
   138ca:	2b3f      	cmp	r3, #63	; 0x3f
   138cc:	d904      	bls.n	138d8 <SX1276Send+0x78>
                memcpy1( RxTxBuffer, buffer, size );
   138ce:	4629      	mov	r1, r5
   138d0:	4847      	ldr	r0, [pc, #284]	; (139f0 <SX1276Send+0x190>)
   138d2:	f018 f8be 	bl	2ba52 <memcpy1>
   138d6:	2220      	movs	r2, #32
    SX1276WriteBuffer( 0, buffer, size );
   138d8:	4629      	mov	r1, r5
   138da:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
   138dc:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
   138e0:	f7ff fac6 	bl	12e70 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   138e4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   138e8:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
   138ec:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   138f0:	4413      	add	r3, r2
   138f2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
   138f6:	e7be      	b.n	13876 <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
   138f8:	2032      	movs	r0, #50	; 0x32
   138fa:	f018 f9d7 	bl	2bcac <SX1276Write>
   138fe:	e7e1      	b.n	138c4 <SX1276Send+0x64>
            if( SX1276.Settings.LoRa.IqInverted == true )
   13900:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   13904:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   13906:	b36b      	cbz	r3, 13964 <SX1276Send+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   13908:	f018 f9db 	bl	2bcc2 <SX1276Read>
   1390c:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   13910:	2033      	movs	r0, #51	; 0x33
   13912:	f018 f9cb 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   13916:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13918:	203b      	movs	r0, #59	; 0x3b
   1391a:	f018 f9c7 	bl	2bcac <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
   1391e:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   13922:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
   13924:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   13928:	f018 f9c0 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
   1392c:	2100      	movs	r1, #0
   1392e:	200e      	movs	r0, #14
   13930:	f018 f9bc 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   13934:	2100      	movs	r1, #0
   13936:	200d      	movs	r0, #13
   13938:	f018 f9b8 	bl	2bcac <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
   1393c:	2001      	movs	r0, #1
   1393e:	f018 f9c0 	bl	2bcc2 <SX1276Read>
   13942:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
   13946:	d104      	bne.n	13952 <SX1276Send+0xf2>
                SX1276SetStby( );
   13948:	f7ff ff70 	bl	1382c <SX1276SetStby>
                DelayMs( 1 );
   1394c:	2001      	movs	r0, #1
   1394e:	f018 f9ab 	bl	2bca8 <DelayMs>
    SX1276WriteBuffer( 0, buffer, size );
   13952:	4629      	mov	r1, r5
   13954:	2000      	movs	r0, #0
   13956:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1395a:	f7ff fa89 	bl	12e70 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
   1395e:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
   13962:	e788      	b.n	13876 <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   13964:	f018 f9ad 	bl	2bcc2 <SX1276Read>
   13968:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1396c:	f041 0101 	orr.w	r1, r1, #1
   13970:	2033      	movs	r0, #51	; 0x33
   13972:	f018 f99b 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13976:	211d      	movs	r1, #29
   13978:	e7ce      	b.n	13918 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1397a:	2040      	movs	r0, #64	; 0x40
   1397c:	f018 f9a1 	bl	2bcc2 <SX1276Read>
   13980:	f000 0103 	and.w	r1, r0, #3
   13984:	2040      	movs	r0, #64	; 0x40
   13986:	f018 f991 	bl	2bcac <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   1398a:	2041      	movs	r0, #65	; 0x41
   1398c:	f018 f999 	bl	2bcc2 <SX1276Read>
   13990:	f000 013e 	and.w	r1, r0, #62	; 0x3e
   13994:	2041      	movs	r0, #65	; 0x41
   13996:	f018 f989 	bl	2bcac <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   1399a:	2035      	movs	r0, #53	; 0x35
   1399c:	f018 f991 	bl	2bcc2 <SX1276Read>
   139a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   139a4:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
   139a8:	e773      	b.n	13892 <SX1276Send+0x32>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   139aa:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   139ae:	b173      	cbz	r3, 139ce <SX1276Send+0x16e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   139b0:	21f5      	movs	r1, #245	; 0xf5
   139b2:	2011      	movs	r0, #17
   139b4:	f018 f97a 	bl	2bcac <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
   139b8:	2040      	movs	r0, #64	; 0x40
   139ba:	f018 f982 	bl	2bcc2 <SX1276Read>
   139be:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   139c2:	2040      	movs	r0, #64	; 0x40
   139c4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   139c8:	f018 f970 	bl	2bcac <SX1276Write>
   139cc:	e761      	b.n	13892 <SX1276Send+0x32>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   139ce:	21f7      	movs	r1, #247	; 0xf7
   139d0:	2011      	movs	r0, #17
   139d2:	f018 f96b 	bl	2bcac <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   139d6:	2040      	movs	r0, #64	; 0x40
   139d8:	f018 f973 	bl	2bcc2 <SX1276Read>
   139dc:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   139e0:	e7ef      	b.n	139c2 <SX1276Send+0x162>
   139e2:	bf00      	nop
   139e4:	2002f9fc 	.word	0x2002f9fc
   139e8:	2002f9cc 	.word	0x2002f9cc
   139ec:	2002f9e4 	.word	0x2002f9e4
   139f0:	200317fd 	.word	0x200317fd

000139f4 <SX1276SetRx>:
{
   139f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
   139f6:	4c82      	ldr	r4, [pc, #520]	; (13c00 <SX1276SetRx+0x20c>)
{
   139f8:	4605      	mov	r5, r0
    TimerStop( &TxTimeoutTimer );
   139fa:	4882      	ldr	r0, [pc, #520]	; (13c04 <SX1276SetRx+0x210>)
   139fc:	f7ff fb78 	bl	130f0 <TimerStop>
    switch( SX1276.Settings.Modem )
   13a00:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
   13a04:	b14e      	cbz	r6, 13a1a <SX1276SetRx+0x26>
   13a06:	2e01      	cmp	r6, #1
   13a08:	d04d      	beq.n	13aa6 <SX1276SetRx+0xb2>
    SX1276.Settings.State = RF_RX_RUNNING;
   13a0a:	2301      	movs	r3, #1
   13a0c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   13a10:	2d00      	cmp	r5, #0
   13a12:	f000 80f2 	beq.w	13bfa <SX1276SetRx+0x206>
    bool rxContinuous = false;
   13a16:	2700      	movs	r7, #0
   13a18:	e029      	b.n	13a6e <SX1276SetRx+0x7a>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13a1a:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
   13a1c:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13a20:	f018 f94f 	bl	2bcc2 <SX1276Read>
   13a24:	f000 0103 	and.w	r1, r0, #3
   13a28:	f041 010c 	orr.w	r1, r1, #12
   13a2c:	2040      	movs	r0, #64	; 0x40
   13a2e:	f018 f93d 	bl	2bcac <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   13a32:	2041      	movs	r0, #65	; 0x41
   13a34:	f018 f945 	bl	2bcc2 <SX1276Read>
   13a38:	f060 013e 	orn	r1, r0, #62	; 0x3e
   13a3c:	b2c9      	uxtb	r1, r1
   13a3e:	2041      	movs	r0, #65	; 0x41
   13a40:	f018 f934 	bl	2bcac <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   13a44:	2035      	movs	r0, #53	; 0x35
   13a46:	f018 f93c 	bl	2bcc2 <SX1276Read>
   13a4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13a4e:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
   13a52:	211e      	movs	r1, #30
   13a54:	200d      	movs	r0, #13
   13a56:	f018 f929 	bl	2bcac <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   13a5a:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   13a5e:	f8a4 6118 	strh.w	r6, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   13a62:	f8a4 6116 	strh.w	r6, [r4, #278]	; 0x116
    SX1276.Settings.State = RF_RX_RUNNING;
   13a66:	2301      	movs	r3, #1
   13a68:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   13a6c:	b135      	cbz	r5, 13a7c <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
   13a6e:	4866      	ldr	r0, [pc, #408]	; (13c08 <SX1276SetRx+0x214>)
   13a70:	4629      	mov	r1, r5
   13a72:	f018 f8f2 	bl	2bc5a <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
   13a76:	4864      	ldr	r0, [pc, #400]	; (13c08 <SX1276SetRx+0x214>)
   13a78:	f7ff fac4 	bl	13004 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
   13a7c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13a80:	2b00      	cmp	r3, #0
   13a82:	f040 80b4 	bne.w	13bee <SX1276SetRx+0x1fa>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
   13a86:	2005      	movs	r0, #5
   13a88:	f018 f926 	bl	2bcd8 <SX1276SetOpMode>
        if( rxContinuous == false )
   13a8c:	2f00      	cmp	r7, #0
   13a8e:	f040 80b6 	bne.w	13bfe <SX1276SetRx+0x20a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
   13a92:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   13a96:	485d      	ldr	r0, [pc, #372]	; (13c0c <SX1276SetRx+0x218>)
   13a98:	f018 f8df 	bl	2bc5a <TimerSetValue>
}
   13a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
   13aa0:	485a      	ldr	r0, [pc, #360]	; (13c0c <SX1276SetRx+0x218>)
   13aa2:	f7ff baaf 	b.w	13004 <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
   13aa6:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   13aaa:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   13aac:	b333      	cbz	r3, 13afc <SX1276SetRx+0x108>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   13aae:	f018 f908 	bl	2bcc2 <SX1276Read>
   13ab2:	f040 0141 	orr.w	r1, r0, #65	; 0x41
   13ab6:	b2c9      	uxtb	r1, r1
   13ab8:	2033      	movs	r0, #51	; 0x33
   13aba:	f018 f8f7 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   13abe:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13ac0:	203b      	movs	r0, #59	; 0x3b
   13ac2:	f018 f8f3 	bl	2bcac <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   13ac6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   13aca:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   13acc:	2b08      	cmp	r3, #8
   13ace:	d87d      	bhi.n	13bcc <SX1276SetRx+0x1d8>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   13ad0:	f018 f8f7 	bl	2bcc2 <SX1276Read>
   13ad4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   13ad8:	2031      	movs	r0, #49	; 0x31
   13ada:	f018 f8e7 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
   13ade:	2100      	movs	r1, #0
   13ae0:	2030      	movs	r0, #48	; 0x30
   13ae2:	f018 f8e3 	bl	2bcac <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
   13ae6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13aea:	2b08      	cmp	r3, #8
   13aec:	d81c      	bhi.n	13b28 <SX1276SetRx+0x134>
   13aee:	e8df f003 	tbb	[pc, r3]
   13af2:	3610      	.short	0x3610
   13af4:	5e544a40 	.word	0x5e544a40
   13af8:	6868      	.short	0x6868
   13afa:	68          	.byte	0x68
   13afb:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   13afc:	f018 f8e1 	bl	2bcc2 <SX1276Read>
   13b00:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   13b04:	f041 0101 	orr.w	r1, r1, #1
   13b08:	2033      	movs	r0, #51	; 0x33
   13b0a:	f018 f8cf 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13b0e:	211d      	movs	r1, #29
   13b10:	e7d6      	b.n	13ac0 <SX1276SetRx+0xcc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
   13b12:	202f      	movs	r0, #47	; 0x2f
   13b14:	2148      	movs	r1, #72	; 0x48
   13b16:	f018 f8c9 	bl	2bcac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
   13b1a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13b1e:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
   13b22:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   13b24:	f7ff fba8 	bl	13278 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13b28:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
   13b2c:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13b30:	2b00      	cmp	r3, #0
   13b32:	d052      	beq.n	13bda <SX1276SetRx+0x1e6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   13b34:	211d      	movs	r1, #29
   13b36:	2011      	movs	r0, #17
   13b38:	f018 f8b8 	bl	2bcac <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
   13b3c:	2040      	movs	r0, #64	; 0x40
   13b3e:	f018 f8c0 	bl	2bcc2 <SX1276Read>
   13b42:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   13b46:	2040      	movs	r0, #64	; 0x40
   13b48:	f018 f8b0 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
   13b4c:	2100      	movs	r1, #0
   13b4e:	200f      	movs	r0, #15
   13b50:	f018 f8ac 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   13b54:	2100      	movs	r1, #0
   13b56:	200d      	movs	r0, #13
   13b58:	f018 f8a8 	bl	2bcac <SX1276Write>
        break;
   13b5c:	e783      	b.n	13a66 <SX1276SetRx+0x72>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13b5e:	202f      	movs	r0, #47	; 0x2f
   13b60:	2144      	movs	r1, #68	; 0x44
   13b62:	f018 f8a3 	bl	2bcac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   13b66:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13b6a:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
   13b6e:	3034      	adds	r0, #52	; 0x34
   13b70:	e7d8      	b.n	13b24 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13b72:	202f      	movs	r0, #47	; 0x2f
   13b74:	2144      	movs	r1, #68	; 0x44
   13b76:	f018 f899 	bl	2bcac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
   13b7a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13b7e:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
   13b82:	3004      	adds	r0, #4
   13b84:	e7ce      	b.n	13b24 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13b86:	202f      	movs	r0, #47	; 0x2f
   13b88:	2144      	movs	r1, #68	; 0x44
   13b8a:	f018 f88f 	bl	2bcac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
   13b8e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13b92:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
   13b96:	305e      	adds	r0, #94	; 0x5e
   13b98:	e7c4      	b.n	13b24 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13b9a:	202f      	movs	r0, #47	; 0x2f
   13b9c:	2144      	movs	r1, #68	; 0x44
   13b9e:	f018 f885 	bl	2bcac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
   13ba2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13ba6:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
   13baa:	3012      	adds	r0, #18
   13bac:	e7ba      	b.n	13b24 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13bae:	202f      	movs	r0, #47	; 0x2f
   13bb0:	2144      	movs	r1, #68	; 0x44
   13bb2:	f018 f87b 	bl	2bcac <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   13bb6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13bba:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
   13bbe:	30c6      	adds	r0, #198	; 0xc6
   13bc0:	e7b0      	b.n	13b24 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
   13bc2:	2140      	movs	r1, #64	; 0x40
   13bc4:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
   13bc6:	f018 f871 	bl	2bcac <SX1276Write>
   13bca:	e7ad      	b.n	13b28 <SX1276SetRx+0x134>
   13bcc:	f018 f879 	bl	2bcc2 <SX1276Read>
   13bd0:	f060 017f 	orn	r1, r0, #127	; 0x7f
   13bd4:	b2c9      	uxtb	r1, r1
   13bd6:	2031      	movs	r0, #49	; 0x31
   13bd8:	e7f5      	b.n	13bc6 <SX1276SetRx+0x1d2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   13bda:	211f      	movs	r1, #31
   13bdc:	2011      	movs	r0, #17
   13bde:	f018 f865 	bl	2bcac <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   13be2:	2040      	movs	r0, #64	; 0x40
   13be4:	f018 f86d 	bl	2bcc2 <SX1276Read>
   13be8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   13bec:	e7ab      	b.n	13b46 <SX1276SetRx+0x152>
        if( rxContinuous == true )
   13bee:	b127      	cbz	r7, 13bfa <SX1276SetRx+0x206>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
   13bf0:	2005      	movs	r0, #5
}
   13bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
   13bf6:	f018 b86f 	b.w	2bcd8 <SX1276SetOpMode>
   13bfa:	2006      	movs	r0, #6
   13bfc:	e7f9      	b.n	13bf2 <SX1276SetRx+0x1fe>
}
   13bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c00:	2002f9fc 	.word	0x2002f9fc
   13c04:	2002f9e4 	.word	0x2002f9e4
   13c08:	2002f9cc 	.word	0x2002f9cc
   13c0c:	2002f9b4 	.word	0x2002f9b4

00013c10 <SX1276ReadRssi>:
{
   13c10:	b508      	push	{r3, lr}
    switch( modem )
   13c12:	b120      	cbz	r0, 13c1e <SX1276ReadRssi+0xe>
   13c14:	2801      	cmp	r0, #1
   13c16:	d00a      	beq.n	13c2e <SX1276ReadRssi+0x1e>
   13c18:	f04f 30ff 	mov.w	r0, #4294967295
}
   13c1c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   13c1e:	2011      	movs	r0, #17
   13c20:	f018 f84f 	bl	2bcc2 <SX1276Read>
   13c24:	f3c0 0047 	ubfx	r0, r0, #1, #8
   13c28:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   13c2a:	b200      	sxth	r0, r0
   13c2c:	e7f6      	b.n	13c1c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13c2e:	4b07      	ldr	r3, [pc, #28]	; (13c4c <SX1276ReadRssi+0x3c>)
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   13c30:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13c32:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   13c36:	4b06      	ldr	r3, [pc, #24]	; (13c50 <SX1276ReadRssi+0x40>)
   13c38:	429a      	cmp	r2, r3
   13c3a:	d903      	bls.n	13c44 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   13c3c:	f018 f841 	bl	2bcc2 <SX1276Read>
   13c40:	389d      	subs	r0, #157	; 0x9d
   13c42:	e7f2      	b.n	13c2a <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   13c44:	f018 f83d 	bl	2bcc2 <SX1276Read>
   13c48:	38a4      	subs	r0, #164	; 0xa4
   13c4a:	e7ee      	b.n	13c2a <SX1276ReadRssi+0x1a>
   13c4c:	2002f9fc 	.word	0x2002f9fc
   13c50:	1f4add40 	.word	0x1f4add40

00013c54 <SX1276SetModem>:
{
   13c54:	b510      	push	{r4, lr}
   13c56:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
   13c58:	2001      	movs	r0, #1
   13c5a:	f018 f832 	bl	2bcc2 <SX1276Read>
   13c5e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
   13c62:	42a0      	cmp	r0, r4
   13c64:	4b17      	ldr	r3, [pc, #92]	; (13cc4 <SX1276SetModem+0x70>)
   13c66:	d102      	bne.n	13c6e <SX1276SetModem+0x1a>
   13c68:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
   13c6c:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
   13c6e:	2c01      	cmp	r4, #1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13c70:	f04f 0000 	mov.w	r0, #0
    SX1276.Settings.Modem = modem;
   13c74:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
   13c78:	d013      	beq.n	13ca2 <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13c7a:	f018 f82d 	bl	2bcd8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
   13c7e:	2001      	movs	r0, #1
   13c80:	f018 f81f 	bl	2bcc2 <SX1276Read>
   13c84:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   13c88:	2001      	movs	r0, #1
   13c8a:	f018 f80f 	bl	2bcac <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   13c8e:	2100      	movs	r1, #0
   13c90:	2040      	movs	r0, #64	; 0x40
   13c92:	f018 f80b 	bl	2bcac <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
   13c96:	2130      	movs	r1, #48	; 0x30
}
   13c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   13c9c:	2041      	movs	r0, #65	; 0x41
   13c9e:	f018 b805 	b.w	2bcac <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13ca2:	f018 f819 	bl	2bcd8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
   13ca6:	4620      	mov	r0, r4
   13ca8:	f018 f80b 	bl	2bcc2 <SX1276Read>
   13cac:	f060 017f 	orn	r1, r0, #127	; 0x7f
   13cb0:	b2c9      	uxtb	r1, r1
   13cb2:	4620      	mov	r0, r4
   13cb4:	f017 fffa 	bl	2bcac <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   13cb8:	2100      	movs	r1, #0
   13cba:	2040      	movs	r0, #64	; 0x40
   13cbc:	f017 fff6 	bl	2bcac <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   13cc0:	2100      	movs	r1, #0
   13cc2:	e7e9      	b.n	13c98 <SX1276SetModem+0x44>
   13cc4:	2002f9fc 	.word	0x2002f9fc

00013cc8 <SX1276Init>:
{
   13cc8:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
   13cca:	4b17      	ldr	r3, [pc, #92]	; (13d28 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   13ccc:	4917      	ldr	r1, [pc, #92]	; (13d2c <SX1276Init+0x64>)
    RadioEvents = events;
   13cce:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   13cd0:	4817      	ldr	r0, [pc, #92]	; (13d30 <SX1276Init+0x68>)
   13cd2:	f017 ffba 	bl	2bc4a <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
   13cd6:	4915      	ldr	r1, [pc, #84]	; (13d2c <SX1276Init+0x64>)
   13cd8:	4816      	ldr	r0, [pc, #88]	; (13d34 <SX1276Init+0x6c>)
   13cda:	f017 ffb6 	bl	2bc4a <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
   13cde:	4913      	ldr	r1, [pc, #76]	; (13d2c <SX1276Init+0x64>)
   13ce0:	4815      	ldr	r0, [pc, #84]	; (13d38 <SX1276Init+0x70>)
   13ce2:	f017 ffb2 	bl	2bc4a <TimerInit>
    SX1276Reset( );
   13ce6:	f017 fe96 	bl	2ba16 <SX1276Reset>
    RxChainCalibration( );
   13cea:	f7ff fd37 	bl	1375c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   13cee:	2000      	movs	r0, #0
   13cf0:	f017 fff2 	bl	2bcd8 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
   13cf4:	4811      	ldr	r0, [pc, #68]	; (13d3c <SX1276Init+0x74>)
   13cf6:	f7fe ff73 	bl	12be0 <SX1276IoIrqInit>
   13cfa:	2500      	movs	r5, #0
   13cfc:	4c10      	ldr	r4, [pc, #64]	; (13d40 <SX1276Init+0x78>)
        SX1276SetModem( RadioRegsInit[i].Modem );
   13cfe:	7820      	ldrb	r0, [r4, #0]
   13d00:	f7ff ffa8 	bl	13c54 <SX1276SetModem>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   13d04:	3501      	adds	r5, #1
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   13d06:	78a1      	ldrb	r1, [r4, #2]
   13d08:	7860      	ldrb	r0, [r4, #1]
   13d0a:	f017 ffcf 	bl	2bcac <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   13d0e:	2d10      	cmp	r5, #16
   13d10:	f104 0403 	add.w	r4, r4, #3
   13d14:	d1f3      	bne.n	13cfe <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
   13d16:	2000      	movs	r0, #0
   13d18:	f7ff ff9c 	bl	13c54 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
   13d1c:	2200      	movs	r2, #0
   13d1e:	4b09      	ldr	r3, [pc, #36]	; (13d44 <SX1276Init+0x7c>)
   13d20:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   13d24:	bd38      	pop	{r3, r4, r5, pc}
   13d26:	bf00      	nop
   13d28:	2002fb40 	.word	0x2002fb40
   13d2c:	00014309 	.word	0x00014309
   13d30:	2002f9e4 	.word	0x2002f9e4
   13d34:	2002f9cc 	.word	0x2002f9cc
   13d38:	2002f9b4 	.word	0x2002f9b4
   13d3c:	20008508 	.word	0x20008508
   13d40:	000360f3 	.word	0x000360f3
   13d44:	2002f9fc 	.word	0x2002f9fc

00013d48 <SX1276SetRxConfig>:
{
   13d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d4c:	4605      	mov	r5, r0
   13d4e:	b087      	sub	sp, #28
   13d50:	9300      	str	r3, [sp, #0]
   13d52:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13d54:	460c      	mov	r4, r1
   13d56:	9301      	str	r3, [sp, #4]
   13d58:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   13d5c:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
   13d60:	9302      	str	r3, [sp, #8]
   13d62:	4616      	mov	r6, r2
   13d64:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   13d68:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   13d6c:	9303      	str	r3, [sp, #12]
   13d6e:	9204      	str	r2, [sp, #16]
   13d70:	9105      	str	r1, [sp, #20]
   13d72:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
   13d76:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
   13d7a:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   13d7e:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
   13d82:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    SX1276SetModem( modem );
   13d86:	f7ff ff65 	bl	13c54 <SX1276SetModem>
    SX1276SetStby( );
   13d8a:	f7ff fd4f 	bl	1382c <SX1276SetStby>
    switch( modem )
   13d8e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
   13d92:	b12d      	cbz	r5, 13da0 <SX1276SetRxConfig+0x58>
   13d94:	2d01      	cmp	r5, #1
   13d96:	9905      	ldr	r1, [sp, #20]
   13d98:	d06b      	beq.n	13e72 <SX1276SetRxConfig+0x12a>
}
   13d9a:	b007      	add	sp, #28
   13d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   13da0:	498f      	ldr	r1, [pc, #572]	; (13fe0 <SX1276SetRxConfig+0x298>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
   13da2:	9801      	ldr	r0, [sp, #4]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
   13da4:	f881 3102 	strb.w	r3, [r1, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
   13da8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   13dac:	fb03 f30b 	mul.w	r3, r3, fp
   13db0:	fbb3 f3f6 	udiv	r3, r3, r6
   13db4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   13db8:	4b8a      	ldr	r3, [pc, #552]	; (13fe4 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.Fsk.Datarate = datarate;
   13dba:	f8c1 60f8 	str.w	r6, [r1, #248]	; 0xf8
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   13dbe:	fbb3 f6f6 	udiv	r6, r3, r6
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   13dc2:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
   13dc6:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   13dca:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   13dce:	2002      	movs	r0, #2
            SX1276.Settings.Fsk.FixLen = fixLen;
   13dd0:	f881 80fe 	strb.w	r8, [r1, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
   13dd4:	f881 90ff 	strb.w	r9, [r1, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
   13dd8:	f881 a100 	strb.w	sl, [r1, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   13ddc:	f8a1 70fc 	strh.w	r7, [r1, #252]	; 0xfc
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   13de0:	f3c6 2107 	ubfx	r1, r6, #8, #8
   13de4:	f017 ff62 	bl	2bcac <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
   13de8:	b2f1      	uxtb	r1, r6
   13dea:	2003      	movs	r0, #3
   13dec:	f017 ff5e 	bl	2bcac <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
   13df0:	4620      	mov	r0, r4
   13df2:	f7ff f9a7 	bl	13144 <GetFskBandwidthRegValue>
   13df6:	4601      	mov	r1, r0
   13df8:	2012      	movs	r0, #18
   13dfa:	f017 ff57 	bl	2bcac <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
   13dfe:	9801      	ldr	r0, [sp, #4]
   13e00:	f7ff f9a0 	bl	13144 <GetFskBandwidthRegValue>
   13e04:	4601      	mov	r1, r0
   13e06:	2013      	movs	r0, #19
   13e08:	f017 ff50 	bl	2bcac <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   13e0c:	2025      	movs	r0, #37	; 0x25
   13e0e:	0a39      	lsrs	r1, r7, #8
   13e10:	f017 ff4c 	bl	2bcac <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   13e14:	2026      	movs	r0, #38	; 0x26
   13e16:	b2f9      	uxtb	r1, r7
   13e18:	f017 ff48 	bl	2bcac <SX1276Write>
            if( fixLen == 1 )
   13e1c:	f1b8 0f00 	cmp.w	r8, #0
   13e20:	d01b      	beq.n	13e5a <SX1276SetRxConfig+0x112>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
   13e22:	4649      	mov	r1, r9
   13e24:	2032      	movs	r0, #50	; 0x32
   13e26:	f017 ff41 	bl	2bcac <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   13e2a:	2030      	movs	r0, #48	; 0x30
   13e2c:	f017 ff49 	bl	2bcc2 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
   13e30:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   13e34:	4305      	orrs	r5, r0
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
   13e36:	ea45 110a 	orr.w	r1, r5, sl, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
   13e3a:	b2c9      	uxtb	r1, r1
   13e3c:	2030      	movs	r0, #48	; 0x30
   13e3e:	f017 ff35 	bl	2bcac <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   13e42:	2031      	movs	r0, #49	; 0x31
   13e44:	f017 ff3d 	bl	2bcc2 <SX1276Read>
   13e48:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   13e4c:	2031      	movs	r0, #49	; 0x31
   13e4e:	b2c9      	uxtb	r1, r1
}
   13e50:	b007      	add	sp, #28
   13e52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   13e56:	f017 bf29 	b.w	2bcac <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
   13e5a:	21ff      	movs	r1, #255	; 0xff
   13e5c:	2032      	movs	r0, #50	; 0x32
   13e5e:	f017 ff25 	bl	2bcac <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   13e62:	2030      	movs	r0, #48	; 0x30
   13e64:	f017 ff2d 	bl	2bcc2 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   13e68:	f06f 057f 	mvn.w	r5, #127	; 0x7f
                           RF_PACKETCONFIG1_CRC_MASK &
   13e6c:	f000 006f 	and.w	r0, r0, #111	; 0x6f
   13e70:	e7e0      	b.n	13e34 <SX1276SetRxConfig+0xec>
            if( bandwidth > 2 )
   13e72:	2c02      	cmp	r4, #2
   13e74:	d900      	bls.n	13e78 <SX1276SetRxConfig+0x130>
                while( 1 );
   13e76:	e7fe      	b.n	13e76 <SX1276SetRxConfig+0x12e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   13e78:	4d59      	ldr	r5, [pc, #356]	; (13fe0 <SX1276SetRxConfig+0x298>)
            else if( datarate < 6 )
   13e7a:	2e06      	cmp	r6, #6
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
   13e7c:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
            else if( datarate < 6 )
   13e80:	4633      	mov	r3, r6
   13e82:	bf38      	it	cc
   13e84:	2306      	movcc	r3, #6
            bandwidth += 7;
   13e86:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   13e88:	2b0c      	cmp	r3, #12
            SX1276.Settings.LoRa.Coderate = coderate;
   13e8a:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   13e8c:	f885 112f 	strb.w	r1, [r5, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   13e90:	9902      	ldr	r1, [sp, #8]
   13e92:	bf28      	it	cs
   13e94:	230c      	movcs	r3, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13e96:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
   13e98:	e9c5 4648 	strd	r4, r6, [r5, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
   13e9c:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   13ea0:	f8a5 712a 	strh.w	r7, [r5, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
   13ea4:	f885 812c 	strb.w	r8, [r5, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
   13ea8:	f885 912d 	strb.w	r9, [r5, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
   13eac:	f885 a12e 	strb.w	sl, [r5, #302]	; 0x12e
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   13eb0:	f885 1130 	strb.w	r1, [r5, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   13eb4:	f885 2131 	strb.w	r2, [r5, #305]	; 0x131
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13eb8:	d177      	bne.n	13faa <SX1276SetRxConfig+0x262>
   13eba:	f1a3 020b 	sub.w	r2, r3, #11
   13ebe:	2a01      	cmp	r2, #1
   13ec0:	bf8c      	ite	hi
   13ec2:	2200      	movhi	r2, #0
   13ec4:	2201      	movls	r2, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   13ec6:	201d      	movs	r0, #29
   13ec8:	f885 2128 	strb.w	r2, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG1,
   13ecc:	9301      	str	r3, [sp, #4]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   13ece:	f017 fef8 	bl	2bcc2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   13ed2:	9b00      	ldr	r3, [sp, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
   13ed4:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   13ed6:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
   13eda:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
   13ede:	b2c9      	uxtb	r1, r1
   13ee0:	f017 fee4 	bl	2bcac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   13ee4:	201e      	movs	r0, #30
   13ee6:	f017 feec 	bl	2bcc2 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG2,
   13eea:	9b01      	ldr	r3, [sp, #4]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
   13eec:	f3cb 2101 	ubfx	r1, fp, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
   13ef0:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
   13ef4:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
   13ef8:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
   13efc:	4301      	orrs	r1, r0
   13efe:	b2c9      	uxtb	r1, r1
   13f00:	201e      	movs	r0, #30
   13f02:	f017 fed3 	bl	2bcac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   13f06:	2026      	movs	r0, #38	; 0x26
   13f08:	f017 fedb 	bl	2bcc2 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   13f0c:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
   13f10:	f020 0108 	bic.w	r1, r0, #8
   13f14:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
   13f18:	2026      	movs	r0, #38	; 0x26
   13f1a:	b2c9      	uxtb	r1, r1
   13f1c:	f017 fec6 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
   13f20:	201f      	movs	r0, #31
   13f22:	fa5f f18b 	uxtb.w	r1, fp
   13f26:	f017 fec1 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   13f2a:	2020      	movs	r0, #32
   13f2c:	0a39      	lsrs	r1, r7, #8
   13f2e:	f017 febd 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   13f32:	2021      	movs	r0, #33	; 0x21
   13f34:	b2f9      	uxtb	r1, r7
   13f36:	f017 feb9 	bl	2bcac <SX1276Write>
            if( fixLen == 1 )
   13f3a:	f1b8 0f00 	cmp.w	r8, #0
   13f3e:	d003      	beq.n	13f48 <SX1276SetRxConfig+0x200>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
   13f40:	4649      	mov	r1, r9
   13f42:	2022      	movs	r0, #34	; 0x22
   13f44:	f017 feb2 	bl	2bcac <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13f48:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
   13f4c:	b16b      	cbz	r3, 13f6a <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   13f4e:	2044      	movs	r0, #68	; 0x44
   13f50:	f017 feb7 	bl	2bcc2 <SX1276Read>
   13f54:	f060 017f 	orn	r1, r0, #127	; 0x7f
   13f58:	b2c9      	uxtb	r1, r1
   13f5a:	2044      	movs	r0, #68	; 0x44
   13f5c:	f017 fea6 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   13f60:	2024      	movs	r0, #36	; 0x24
   13f62:	f895 1130 	ldrb.w	r1, [r5, #304]	; 0x130
   13f66:	f017 fea1 	bl	2bcac <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   13f6a:	2c09      	cmp	r4, #9
   13f6c:	d12a      	bne.n	13fc4 <SX1276SetRxConfig+0x27c>
   13f6e:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
   13f72:	4b1d      	ldr	r3, [pc, #116]	; (13fe8 <SX1276SetRxConfig+0x2a0>)
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   13f74:	2102      	movs	r1, #2
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   13f76:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   13f78:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   13f7c:	d91e      	bls.n	13fbc <SX1276SetRxConfig+0x274>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   13f7e:	f017 fe95 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
   13f82:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
   13f84:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
   13f86:	f017 fe91 	bl	2bcac <SX1276Write>
            if( datarate == 6 )
   13f8a:	2e06      	cmp	r6, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   13f8c:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
   13f90:	d81b      	bhi.n	13fca <SX1276SetRxConfig+0x282>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   13f92:	f017 fe96 	bl	2bcc2 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   13f96:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   13f9a:	f041 0105 	orr.w	r1, r1, #5
   13f9e:	2031      	movs	r0, #49	; 0x31
   13fa0:	f017 fe84 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   13fa4:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   13fa6:	2037      	movs	r0, #55	; 0x37
   13fa8:	e752      	b.n	13e50 <SX1276SetRxConfig+0x108>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13faa:	2c08      	cmp	r4, #8
   13fac:	d104      	bne.n	13fb8 <SX1276SetRxConfig+0x270>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   13fae:	2e0b      	cmp	r6, #11
   13fb0:	bf94      	ite	ls
   13fb2:	2200      	movls	r2, #0
   13fb4:	2201      	movhi	r2, #1
   13fb6:	e786      	b.n	13ec6 <SX1276SetRxConfig+0x17e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   13fb8:	2200      	movs	r2, #0
   13fba:	e784      	b.n	13ec6 <SX1276SetRxConfig+0x17e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   13fbc:	f017 fe76 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
   13fc0:	217f      	movs	r1, #127	; 0x7f
   13fc2:	e7df      	b.n	13f84 <SX1276SetRxConfig+0x23c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
   13fc4:	2103      	movs	r1, #3
   13fc6:	2036      	movs	r0, #54	; 0x36
   13fc8:	e7dd      	b.n	13f86 <SX1276SetRxConfig+0x23e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   13fca:	f017 fe7a 	bl	2bcc2 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   13fce:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   13fd2:	f041 0103 	orr.w	r1, r1, #3
   13fd6:	2031      	movs	r0, #49	; 0x31
   13fd8:	f017 fe68 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   13fdc:	210a      	movs	r1, #10
   13fde:	e7e2      	b.n	13fa6 <SX1276SetRxConfig+0x25e>
   13fe0:	2002f9fc 	.word	0x2002f9fc
   13fe4:	01e84800 	.word	0x01e84800
   13fe8:	1f4add40 	.word	0x1f4add40

00013fec <SX1276SetTxConfig>:
{
   13fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff0:	468a      	mov	sl, r1
   13ff2:	b087      	sub	sp, #28
   13ff4:	461e      	mov	r6, r3
   13ff6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   13ffa:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   13ffe:	9305      	str	r3, [sp, #20]
   14000:	4617      	mov	r7, r2
   14002:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   14006:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14008:	9302      	str	r3, [sp, #8]
   1400a:	9104      	str	r1, [sp, #16]
   1400c:	9203      	str	r2, [sp, #12]
   1400e:	9001      	str	r0, [sp, #4]
   14010:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   14014:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   14018:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
   1401c:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
   14020:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
   14024:	f7ff fe16 	bl	13c54 <SX1276SetModem>
    SX1276SetStby( );
   14028:	f7ff fc00 	bl	1382c <SX1276SetStby>
    SX1276SetRfTxPower( power );
   1402c:	4650      	mov	r0, sl
   1402e:	f7fe ff37 	bl	12ea0 <SX1276SetRfTxPower>
    switch( modem )
   14032:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
   14036:	9b01      	ldr	r3, [sp, #4]
   14038:	b12b      	cbz	r3, 14046 <SX1276SetTxConfig+0x5a>
   1403a:	2b01      	cmp	r3, #1
   1403c:	9b05      	ldr	r3, [sp, #20]
   1403e:	d05b      	beq.n	140f8 <SX1276SetTxConfig+0x10c>
}
   14040:	b007      	add	sp, #28
   14042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
   14046:	4b76      	ldr	r3, [pc, #472]	; (14220 <SX1276SetTxConfig+0x234>)
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
   14048:	2004      	movs	r0, #4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   1404a:	e9c3 763b 	strd	r7, r6, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.FixLen = fixLen;
   1404e:	f883 50fe 	strb.w	r5, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
   14052:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   14056:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
   1405a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            SX1276.Settings.Fsk.Power = power;
   1405e:	f883 a0e8 	strb.w	sl, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
   14062:	f8c3 80f8 	str.w	r8, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   14066:	f8a3 90fc 	strh.w	r9, [r3, #252]	; 0xfc
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   1406a:	f643 5309 	movw	r3, #15625	; 0x3d09
   1406e:	fbb7 f2f3 	udiv	r2, r7, r3
   14072:	f641 6684 	movw	r6, #7812	; 0x1e84
   14076:	fb03 7712 	mls	r7, r3, r2, r7
   1407a:	eb06 2607 	add.w	r6, r6, r7, lsl #8
   1407e:	fbb6 f6f3 	udiv	r6, r6, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
   14082:	eb06 2602 	add.w	r6, r6, r2, lsl #8
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
   14086:	f3c6 2107 	ubfx	r1, r6, #8, #8
   1408a:	f017 fe0f 	bl	2bcac <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
   1408e:	b2f1      	uxtb	r1, r6
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   14090:	4e64      	ldr	r6, [pc, #400]	; (14224 <SX1276SetTxConfig+0x238>)
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
   14092:	2005      	movs	r0, #5
   14094:	f017 fe0a 	bl	2bcac <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   14098:	fbb6 f6f8 	udiv	r6, r6, r8
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   1409c:	2002      	movs	r0, #2
   1409e:	f3c6 2107 	ubfx	r1, r6, #8, #8
   140a2:	f017 fe03 	bl	2bcac <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
   140a6:	2003      	movs	r0, #3
   140a8:	b2f1      	uxtb	r1, r6
   140aa:	f017 fdff 	bl	2bcac <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   140ae:	2025      	movs	r0, #37	; 0x25
   140b0:	ea4f 2119 	mov.w	r1, r9, lsr #8
   140b4:	f017 fdfa 	bl	2bcac <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
   140b8:	fa5f f189 	uxtb.w	r1, r9
   140bc:	2026      	movs	r0, #38	; 0x26
   140be:	f017 fdf5 	bl	2bcac <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   140c2:	2030      	movs	r0, #48	; 0x30
   140c4:	f017 fdfd 	bl	2bcc2 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   140c8:	f085 0501 	eor.w	r5, r5, #1
                           ( crcOn << 4 ) );
   140cc:	0124      	lsls	r4, r4, #4
            SX1276Write( REG_PACKETCONFIG1,
   140ce:	f000 006f 	and.w	r0, r0, #111	; 0x6f
   140d2:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
   140d6:	4304      	orrs	r4, r0
   140d8:	b2e1      	uxtb	r1, r4
   140da:	2030      	movs	r0, #48	; 0x30
   140dc:	f017 fde6 	bl	2bcac <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   140e0:	2031      	movs	r0, #49	; 0x31
   140e2:	f017 fdee 	bl	2bcc2 <SX1276Read>
   140e6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   140ea:	2031      	movs	r0, #49	; 0x31
   140ec:	b2c9      	uxtb	r1, r1
}
   140ee:	b007      	add	sp, #28
   140f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   140f4:	f017 bdda 	b.w	2bcac <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
   140f8:	4f49      	ldr	r7, [pc, #292]	; (14220 <SX1276SetTxConfig+0x234>)
            if( bandwidth > 2 )
   140fa:	2e02      	cmp	r6, #2
            SX1276.Settings.LoRa.Power = power;
   140fc:	f887 a11c 	strb.w	sl, [r7, #284]	; 0x11c
            if( bandwidth > 2 )
   14100:	d900      	bls.n	14104 <SX1276SetTxConfig+0x118>
                while( 1 );
   14102:	e7fe      	b.n	14102 <SX1276SetTxConfig+0x116>
            else if( datarate < 6 )
   14104:	f1b8 0f06 	cmp.w	r8, #6
   14108:	46c2      	mov	sl, r8
   1410a:	bf38      	it	cc
   1410c:	f04f 0a06 	movcc.w	sl, #6
            bandwidth += 7;
   14110:	3607      	adds	r6, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   14112:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   14116:	9802      	ldr	r0, [sp, #8]
   14118:	bf28      	it	cs
   1411a:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   1411e:	2e07      	cmp	r6, #7
            SX1276.Settings.LoRa.Datarate = datarate;
   14120:	e9c7 6848 	strd	r6, r8, [r7, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
   14124:	f887 b129 	strb.w	fp, [r7, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   14128:	f8a7 912a 	strh.w	r9, [r7, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
   1412c:	f887 512c 	strb.w	r5, [r7, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   14130:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   14134:	f887 0130 	strb.w	r0, [r7, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
   14138:	f887 412e 	strb.w	r4, [r7, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   1413c:	f887 1131 	strb.w	r1, [r7, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
   14140:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   14144:	d156      	bne.n	141f4 <SX1276SetTxConfig+0x208>
   14146:	f1aa 020b 	sub.w	r2, sl, #11
   1414a:	2a01      	cmp	r2, #1
   1414c:	bf8c      	ite	hi
   1414e:	2200      	movhi	r2, #0
   14150:	2201      	movls	r2, #1
   14152:	f887 2128 	strb.w	r2, [r7, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   14156:	b16b      	cbz	r3, 14174 <SX1276SetTxConfig+0x188>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   14158:	2044      	movs	r0, #68	; 0x44
   1415a:	f017 fdb2 	bl	2bcc2 <SX1276Read>
   1415e:	f060 017f 	orn	r1, r0, #127	; 0x7f
   14162:	b2c9      	uxtb	r1, r1
   14164:	2044      	movs	r0, #68	; 0x44
   14166:	f017 fda1 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   1416a:	2024      	movs	r0, #36	; 0x24
   1416c:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
   14170:	f017 fd9c 	bl	2bcac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   14174:	201d      	movs	r0, #29
   14176:	f017 fda4 	bl	2bcc2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   1417a:	ea45 014b 	orr.w	r1, r5, fp, lsl #1
   1417e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
   14182:	b2c9      	uxtb	r1, r1
   14184:	201d      	movs	r0, #29
   14186:	f017 fd91 	bl	2bcac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   1418a:	201e      	movs	r0, #30
   1418c:	f017 fd99 	bl	2bcc2 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
   14190:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
   14192:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
   14196:	ea44 140a 	orr.w	r4, r4, sl, lsl #4
   1419a:	4304      	orrs	r4, r0
   1419c:	b2e1      	uxtb	r1, r4
   1419e:	201e      	movs	r0, #30
   141a0:	f017 fd84 	bl	2bcac <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   141a4:	2026      	movs	r0, #38	; 0x26
   141a6:	f017 fd8c 	bl	2bcc2 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   141aa:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
   141ae:	f020 0108 	bic.w	r1, r0, #8
   141b2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
   141b6:	2026      	movs	r0, #38	; 0x26
   141b8:	b2c9      	uxtb	r1, r1
   141ba:	f017 fd77 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   141be:	2020      	movs	r0, #32
   141c0:	ea4f 2119 	mov.w	r1, r9, lsr #8
   141c4:	f017 fd72 	bl	2bcac <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
   141c8:	2021      	movs	r0, #33	; 0x21
   141ca:	fa5f f189 	uxtb.w	r1, r9
   141ce:	f017 fd6d 	bl	2bcac <SX1276Write>
            if( datarate == 6 )
   141d2:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   141d6:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
   141da:	d815      	bhi.n	14208 <SX1276SetTxConfig+0x21c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   141dc:	f017 fd71 	bl	2bcc2 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   141e0:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   141e4:	f041 0105 	orr.w	r1, r1, #5
   141e8:	2031      	movs	r0, #49	; 0x31
   141ea:	f017 fd5f 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   141ee:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   141f0:	2037      	movs	r0, #55	; 0x37
   141f2:	e77c      	b.n	140ee <SX1276SetTxConfig+0x102>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   141f4:	2e08      	cmp	r6, #8
   141f6:	d105      	bne.n	14204 <SX1276SetTxConfig+0x218>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   141f8:	f1b8 0f0b 	cmp.w	r8, #11
   141fc:	bf94      	ite	ls
   141fe:	2200      	movls	r2, #0
   14200:	2201      	movhi	r2, #1
   14202:	e7a6      	b.n	14152 <SX1276SetTxConfig+0x166>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   14204:	2200      	movs	r2, #0
   14206:	e7a4      	b.n	14152 <SX1276SetTxConfig+0x166>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   14208:	f017 fd5b 	bl	2bcc2 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   1420c:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   14210:	f041 0103 	orr.w	r1, r1, #3
   14214:	2031      	movs	r0, #49	; 0x31
   14216:	f017 fd49 	bl	2bcac <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   1421a:	210a      	movs	r1, #10
   1421c:	e7e8      	b.n	141f0 <SX1276SetTxConfig+0x204>
   1421e:	bf00      	nop
   14220:	2002f9fc 	.word	0x2002f9fc
   14224:	01e84800 	.word	0x01e84800

00014228 <SX1276SetTxContinuousWave>:
    uint32_t timeout = ( uint32_t )time * 1000;
   14228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   1422c:	b530      	push	{r4, r5, lr}
   1422e:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
   14230:	fb03 f402 	mul.w	r4, r3, r2
{
   14234:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
   14236:	f7ff f81f 	bl	13278 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
   1423a:	2300      	movs	r3, #0
   1423c:	2205      	movs	r2, #5
   1423e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14242:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   14246:	4618      	mov	r0, r3
   14248:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1424c:	e9cd 3304 	strd	r3, r3, [sp, #16]
   14250:	9303      	str	r3, [sp, #12]
   14252:	4629      	mov	r1, r5
   14254:	9200      	str	r2, [sp, #0]
   14256:	9408      	str	r4, [sp, #32]
   14258:	461a      	mov	r2, r3
   1425a:	f7ff fec7 	bl	13fec <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
   1425e:	2031      	movs	r0, #49	; 0x31
   14260:	f017 fd2f 	bl	2bcc2 <SX1276Read>
   14264:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   14268:	2031      	movs	r0, #49	; 0x31
   1426a:	f017 fd1f 	bl	2bcac <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1426e:	4d0d      	ldr	r5, [pc, #52]	; (142a4 <SX1276SetTxContinuousWave+0x7c>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
   14270:	21f0      	movs	r1, #240	; 0xf0
   14272:	2040      	movs	r0, #64	; 0x40
   14274:	f017 fd1a 	bl	2bcac <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
   14278:	21a0      	movs	r1, #160	; 0xa0
   1427a:	2041      	movs	r0, #65	; 0x41
   1427c:	f017 fd16 	bl	2bcac <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   14280:	4621      	mov	r1, r4
   14282:	4628      	mov	r0, r5
   14284:	f017 fce9 	bl	2bc5a <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
   14288:	2202      	movs	r2, #2
   1428a:	4b07      	ldr	r3, [pc, #28]	; (142a8 <SX1276SetTxContinuousWave+0x80>)
    TimerStart( &TxTimeoutTimer );
   1428c:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
   1428e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   14292:	f7fe feb7 	bl	13004 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   14296:	2003      	movs	r0, #3
}
   14298:	b00b      	add	sp, #44	; 0x2c
   1429a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1429e:	f017 bd1b 	b.w	2bcd8 <SX1276SetOpMode>
   142a2:	bf00      	nop
   142a4:	2002f9e4 	.word	0x2002f9e4
   142a8:	2002f9fc 	.word	0x2002f9fc

000142ac <SX1276SetMaxPayloadLength>:
{
   142ac:	b538      	push	{r3, r4, r5, lr}
   142ae:	4605      	mov	r5, r0
   142b0:	460c      	mov	r4, r1
    SX1276SetModem( modem );
   142b2:	f7ff fccf 	bl	13c54 <SX1276SetModem>
    switch( modem )
   142b6:	b115      	cbz	r5, 142be <SX1276SetMaxPayloadLength+0x12>
   142b8:	2d01      	cmp	r5, #1
   142ba:	d00b      	beq.n	142d4 <SX1276SetMaxPayloadLength+0x28>
}
   142bc:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
   142be:	4b07      	ldr	r3, [pc, #28]	; (142dc <SX1276SetMaxPayloadLength+0x30>)
   142c0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   142c4:	2b00      	cmp	r3, #0
   142c6:	d1f9      	bne.n	142bc <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
   142c8:	4621      	mov	r1, r4
   142ca:	2032      	movs	r0, #50	; 0x32
}
   142cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
   142d0:	f017 bcec 	b.w	2bcac <SX1276Write>
   142d4:	4621      	mov	r1, r4
   142d6:	2023      	movs	r0, #35	; 0x23
   142d8:	e7f8      	b.n	142cc <SX1276SetMaxPayloadLength+0x20>
   142da:	bf00      	nop
   142dc:	2002f9fc 	.word	0x2002f9fc

000142e0 <SX1276SetPublicNetwork>:
{
   142e0:	b510      	push	{r4, lr}
   142e2:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
   142e4:	2001      	movs	r0, #1
   142e6:	f7ff fcb5 	bl	13c54 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
   142ea:	4b06      	ldr	r3, [pc, #24]	; (14304 <SX1276SetPublicNetwork+0x24>)
   142ec:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
   142f0:	b12c      	cbz	r4, 142fe <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
   142f2:	2134      	movs	r1, #52	; 0x34
}
   142f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
   142f8:	2039      	movs	r0, #57	; 0x39
   142fa:	f017 bcd7 	b.w	2bcac <SX1276Write>
   142fe:	2112      	movs	r1, #18
   14300:	e7f8      	b.n	142f4 <SX1276SetPublicNetwork+0x14>
   14302:	bf00      	nop
   14304:	2002f9fc 	.word	0x2002f9fc

00014308 <SX1276OnTimeoutIrq>:
{
   14308:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1430a:	4c2d      	ldr	r4, [pc, #180]	; (143c0 <SX1276OnTimeoutIrq+0xb8>)
   1430c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   14310:	2b01      	cmp	r3, #1
   14312:	d002      	beq.n	1431a <SX1276OnTimeoutIrq+0x12>
   14314:	2b02      	cmp	r3, #2
   14316:	d02d      	beq.n	14374 <SX1276OnTimeoutIrq+0x6c>
}
   14318:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
   1431a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1431e:	b9cb      	cbnz	r3, 14354 <SX1276OnTimeoutIrq+0x4c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   14320:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   14324:	210b      	movs	r1, #11
   14326:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   14328:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   1432c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   14330:	f017 fcbc 	bl	2bcac <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   14334:	2110      	movs	r1, #16
   14336:	203f      	movs	r0, #63	; 0x3f
   14338:	f017 fcb8 	bl	2bcac <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
   1433c:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   14340:	b193      	cbz	r3, 14368 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   14342:	200d      	movs	r0, #13
   14344:	f017 fcbd 	bl	2bcc2 <SX1276Read>
   14348:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1434c:	b2c9      	uxtb	r1, r1
   1434e:	200d      	movs	r0, #13
   14350:	f017 fcac 	bl	2bcac <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   14354:	4b1b      	ldr	r3, [pc, #108]	; (143c4 <SX1276OnTimeoutIrq+0xbc>)
   14356:	681b      	ldr	r3, [r3, #0]
   14358:	2b00      	cmp	r3, #0
   1435a:	d0dd      	beq.n	14318 <SX1276OnTimeoutIrq+0x10>
   1435c:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1435e:	2b00      	cmp	r3, #0
   14360:	d0da      	beq.n	14318 <SX1276OnTimeoutIrq+0x10>
}
   14362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
   14366:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   14368:	4817      	ldr	r0, [pc, #92]	; (143c8 <SX1276OnTimeoutIrq+0xc0>)
                SX1276.Settings.State = RF_IDLE;
   1436a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
   1436e:	f7fe febf 	bl	130f0 <TimerStop>
   14372:	e7ef      	b.n	14354 <SX1276OnTimeoutIrq+0x4c>
        SX1276Reset( );
   14374:	f017 fb4f 	bl	2ba16 <SX1276Reset>
        RxChainCalibration( );
   14378:	f7ff f9f0 	bl	1375c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1437c:	2000      	movs	r0, #0
   1437e:	f017 fcab 	bl	2bcd8 <SX1276SetOpMode>
   14382:	2600      	movs	r6, #0
   14384:	4d11      	ldr	r5, [pc, #68]	; (143cc <SX1276OnTimeoutIrq+0xc4>)
            SX1276SetModem( RadioRegsInit[i].Modem );
   14386:	7828      	ldrb	r0, [r5, #0]
   14388:	f7ff fc64 	bl	13c54 <SX1276SetModem>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1438c:	3601      	adds	r6, #1
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1438e:	78a9      	ldrb	r1, [r5, #2]
   14390:	7868      	ldrb	r0, [r5, #1]
   14392:	f017 fc8b 	bl	2bcac <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   14396:	2e10      	cmp	r6, #16
   14398:	f105 0503 	add.w	r5, r5, #3
   1439c:	d1f3      	bne.n	14386 <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
   1439e:	2000      	movs	r0, #0
   143a0:	f7ff fc58 	bl	13c54 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
   143a4:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
   143a8:	f7ff ff9a 	bl	142e0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
   143ac:	2300      	movs	r3, #0
   143ae:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   143b2:	4b04      	ldr	r3, [pc, #16]	; (143c4 <SX1276OnTimeoutIrq+0xbc>)
   143b4:	681b      	ldr	r3, [r3, #0]
   143b6:	2b00      	cmp	r3, #0
   143b8:	d0ae      	beq.n	14318 <SX1276OnTimeoutIrq+0x10>
   143ba:	685b      	ldr	r3, [r3, #4]
   143bc:	e7cf      	b.n	1435e <SX1276OnTimeoutIrq+0x56>
   143be:	bf00      	nop
   143c0:	2002f9fc 	.word	0x2002f9fc
   143c4:	2002fb40 	.word	0x2002fb40
   143c8:	2002f9b4 	.word	0x2002f9b4
   143cc:	000360f3 	.word	0x000360f3

000143d0 <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
   143d0:	f1a1 0310 	sub.w	r3, r1, #16
   143d4:	b2db      	uxtb	r3, r3
   143d6:	2b10      	cmp	r3, #16
{
   143d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   143dc:	4604      	mov	r4, r0
    switch( keylen )
   143de:	d804      	bhi.n	143ea <aes_set_key+0x1a>
   143e0:	483c      	ldr	r0, [pc, #240]	; (144d4 <aes_set_key+0x104>)
   143e2:	fa20 f303 	lsr.w	r3, r0, r3
   143e6:	07db      	lsls	r3, r3, #31
   143e8:	d405      	bmi.n	143f6 <aes_set_key+0x26>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
   143ea:	2300      	movs	r3, #0
        return ( uint8_t )-1;
   143ec:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
   143ee:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
   143f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch( keylen )
   143f6:	4625      	mov	r5, r4
   143f8:	1e56      	subs	r6, r2, #1
        *d++ = *s++;
   143fa:	f815 3b01 	ldrb.w	r3, [r5], #1
   143fe:	f806 3f01 	strb.w	r3, [r6, #1]!
    while( nn-- )
   14402:	1b63      	subs	r3, r4, r5
   14404:	440b      	add	r3, r1
   14406:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
   1440a:	d1f6      	bne.n	143fa <aes_set_key+0x2a>
    ctx->rnd = (hi >> 4) - 1;
   1440c:	4688      	mov	r8, r1
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1440e:	f04f 0e01 	mov.w	lr, #1
    hi = (keylen + 28) << 2;
   14412:	f101 031c 	add.w	r3, r1, #28
   14416:	009b      	lsls	r3, r3, #2
   14418:	fa5f fc83 	uxtb.w	ip, r3
    ctx->rnd = (hi >> 4) - 1;
   1441c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   14420:	3b01      	subs	r3, #1
            t0 = s_box(t1) ^ rc;
   14422:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 144d8 <aes_set_key+0x108>
    ctx->rnd = (hi >> 4) - 1;
   14426:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1442a:	1853      	adds	r3, r2, r1
        if( cc % keylen == 0 )
   1442c:	fbb8 faf1 	udiv	sl, r8, r1
   14430:	fb01 8a1a 	mls	sl, r1, sl, r8
   14434:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
   14438:	f813 7c04 	ldrb.w	r7, [r3, #-4]
        t1 = ctx->ksch[cc - 3];
   1443c:	f813 6c03 	ldrb.w	r6, [r3, #-3]
        t2 = ctx->ksch[cc - 2];
   14440:	f813 5c02 	ldrb.w	r5, [r3, #-2]
        t3 = ctx->ksch[cc - 1];
   14444:	f813 4c01 	ldrb.w	r4, [r3, #-1]
        if( cc % keylen == 0 )
   14448:	d133      	bne.n	144b2 <aes_set_key+0xe2>
            t0 = s_box(t1) ^ rc;
   1444a:	f819 a006 	ldrb.w	sl, [r9, r6]
            t1 = s_box(t2);
   1444e:	f819 6005 	ldrb.w	r6, [r9, r5]
            t2 = s_box(t3);
   14452:	f819 5004 	ldrb.w	r5, [r9, r4]
            t3 = s_box(tt);
   14456:	f819 4007 	ldrb.w	r4, [r9, r7]
            rc = f2(rc);
   1445a:	ea4f 17de 	mov.w	r7, lr, lsr #7
   1445e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
            t0 = s_box(t1) ^ rc;
   14462:	ea8e 0a0a 	eor.w	sl, lr, sl
            rc = f2(rc);
   14466:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   1446a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
   1446e:	b2ff      	uxtb	r7, r7
   14470:	fa5f fe8e 	uxtb.w	lr, lr
   14474:	ea87 0e0e 	eor.w	lr, r7, lr
            t0 = s_box(t1) ^ rc;
   14478:	4657      	mov	r7, sl
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
   1447a:	f892 a000 	ldrb.w	sl, [r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1447e:	f108 0804 	add.w	r8, r8, #4
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
   14482:	ea87 070a 	eor.w	r7, r7, sl
   14486:	701f      	strb	r7, [r3, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
   14488:	7857      	ldrb	r7, [r2, #1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1448a:	fa5f f888 	uxtb.w	r8, r8
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
   1448e:	407e      	eors	r6, r7
   14490:	705e      	strb	r6, [r3, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
   14492:	7896      	ldrb	r6, [r2, #2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   14494:	45c4      	cmp	ip, r8
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
   14496:	ea85 0506 	eor.w	r5, r5, r6
   1449a:	709d      	strb	r5, [r3, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
   1449c:	78d5      	ldrb	r5, [r2, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1449e:	f103 0304 	add.w	r3, r3, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
   144a2:	ea84 0405 	eor.w	r4, r4, r5
   144a6:	f803 4c01 	strb.w	r4, [r3, #-1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   144aa:	f102 0204 	add.w	r2, r2, #4
   144ae:	d8bd      	bhi.n	1442c <aes_set_key+0x5c>
   144b0:	e79f      	b.n	143f2 <aes_set_key+0x22>
        else if( keylen > 24 && cc % keylen == 16 )
   144b2:	2918      	cmp	r1, #24
   144b4:	d9e1      	bls.n	1447a <aes_set_key+0xaa>
   144b6:	f1ba 0f10 	cmp.w	sl, #16
   144ba:	d1de      	bne.n	1447a <aes_set_key+0xaa>
            t0 = s_box(t0);
   144bc:	f8df a018 	ldr.w	sl, [pc, #24]	; 144d8 <aes_set_key+0x108>
   144c0:	f81a 7007 	ldrb.w	r7, [sl, r7]
            t1 = s_box(t1);
   144c4:	f81a 6006 	ldrb.w	r6, [sl, r6]
            t2 = s_box(t2);
   144c8:	f81a 5005 	ldrb.w	r5, [sl, r5]
            t3 = s_box(t3);
   144cc:	f81a 4004 	ldrb.w	r4, [sl, r4]
   144d0:	e7d3      	b.n	1447a <aes_set_key+0xaa>
   144d2:	bf00      	nop
   144d4:	00010101 	.word	0x00010101
   144d8:	00036323 	.word	0x00036323

000144dc <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
   144dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ctx->rnd )
   144e0:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
   144e4:	b0a3      	sub	sp, #140	; 0x8c
   144e6:	911d      	str	r1, [sp, #116]	; 0x74
   144e8:	921b      	str	r2, [sp, #108]	; 0x6c
    if( ctx->rnd )
   144ea:	9301      	str	r3, [sp, #4]
   144ec:	2b00      	cmp	r3, #0
   144ee:	f000 8153 	beq.w	14798 <aes_encrypt+0x2bc>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
   144f2:	4601      	mov	r1, r0
   144f4:	a81e      	add	r0, sp, #120	; 0x78
   144f6:	f017 fca1 	bl	2be3c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
   144fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   144fc:	4ca7      	ldr	r4, [pc, #668]	; (1479c <aes_encrypt+0x2c0>)
   144fe:	3310      	adds	r3, #16
   14500:	9302      	str	r3, [sp, #8]
        for( r = 1 ; r < ctx->rnd ; ++r )
   14502:	2300      	movs	r3, #0
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14504:	4da6      	ldr	r5, [pc, #664]	; (147a0 <aes_encrypt+0x2c4>)
   14506:	4ea7      	ldr	r6, [pc, #668]	; (147a4 <aes_encrypt+0x2c8>)
        for( r = 1 ; r < ctx->rnd ; ++r )
   14508:	9303      	str	r3, [sp, #12]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   1450a:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
   1450e:	f89d c081 	ldrb.w	ip, [sp, #129]	; 0x81
   14512:	9004      	str	r0, [sp, #16]
   14514:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
   14518:	9b02      	ldr	r3, [sp, #8]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   1451a:	9005      	str	r0, [sp, #20]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   1451c:	5c20      	ldrb	r0, [r4, r0]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   1451e:	f89d 8078 	ldrb.w	r8, [sp, #120]	; 0x78
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   14522:	9006      	str	r0, [sp, #24]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14524:	f89d 007b 	ldrb.w	r0, [sp, #123]	; 0x7b
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14528:	f89d e07d 	ldrb.w	lr, [sp, #125]	; 0x7d
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   1452c:	9007      	str	r0, [sp, #28]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   1452e:	5c20      	ldrb	r0, [r4, r0]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14530:	f89d a082 	ldrb.w	sl, [sp, #130]	; 0x82
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   14534:	9008      	str	r0, [sp, #32]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   14536:	9804      	ldr	r0, [sp, #16]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14538:	f89d 9087 	ldrb.w	r9, [sp, #135]	; 0x87
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   1453c:	5c20      	ldrb	r0, [r4, r0]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
   1453e:	931c      	str	r3, [sp, #112]	; 0x70
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   14540:	9009      	str	r0, [sp, #36]	; 0x24
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14542:	f814 000c 	ldrb.w	r0, [r4, ip]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14546:	f814 200a 	ldrb.w	r2, [r4, sl]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   1454a:	900a      	str	r0, [sp, #40]	; 0x28
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   1454c:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14550:	f814 3009 	ldrb.w	r3, [r4, r9]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   14554:	900b      	str	r0, [sp, #44]	; 0x2c
   14556:	f89d 0085 	ldrb.w	r0, [sp, #133]	; 0x85
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   1455a:	f814 1008 	ldrb.w	r1, [r4, r8]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   1455e:	900c      	str	r0, [sp, #48]	; 0x30
   14560:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14564:	f814 700e 	ldrb.w	r7, [r4, lr]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   14568:	900d      	str	r0, [sp, #52]	; 0x34
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   1456a:	5c20      	ldrb	r0, [r4, r0]
   1456c:	900e      	str	r0, [sp, #56]	; 0x38
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   1456e:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
   14572:	900f      	str	r0, [sp, #60]	; 0x3c
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   14574:	5c20      	ldrb	r0, [r4, r0]
   14576:	9010      	str	r0, [sp, #64]	; 0x40
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   14578:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1457a:	5c20      	ldrb	r0, [r4, r0]
   1457c:	9011      	str	r0, [sp, #68]	; 0x44
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   1457e:	980c      	ldr	r0, [sp, #48]	; 0x30
   14580:	5c20      	ldrb	r0, [r4, r0]
   14582:	9012      	str	r0, [sp, #72]	; 0x48
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   14584:	f89d 0084 	ldrb.w	r0, [sp, #132]	; 0x84
   14588:	9013      	str	r0, [sp, #76]	; 0x4c
   1458a:	f89d 0079 	ldrb.w	r0, [sp, #121]	; 0x79
   1458e:	9014      	str	r0, [sp, #80]	; 0x50
   14590:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
   14594:	9015      	str	r0, [sp, #84]	; 0x54
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   14596:	5c20      	ldrb	r0, [r4, r0]
   14598:	9016      	str	r0, [sp, #88]	; 0x58
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   1459a:	f89d 0083 	ldrb.w	r0, [sp, #131]	; 0x83
   1459e:	9017      	str	r0, [sp, #92]	; 0x5c
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   145a0:	5c20      	ldrb	r0, [r4, r0]
   145a2:	9018      	str	r0, [sp, #96]	; 0x60
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   145a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   145a6:	5c20      	ldrb	r0, [r4, r0]
   145a8:	9019      	str	r0, [sp, #100]	; 0x64
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   145aa:	9814      	ldr	r0, [sp, #80]	; 0x50
   145ac:	5c20      	ldrb	r0, [r4, r0]
   145ae:	901a      	str	r0, [sp, #104]	; 0x68
        for( r = 1 ; r < ctx->rnd ; ++r )
   145b0:	9803      	ldr	r0, [sp, #12]
   145b2:	3001      	adds	r0, #1
   145b4:	9003      	str	r0, [sp, #12]
   145b6:	9802      	ldr	r0, [sp, #8]
   145b8:	f8dd b004 	ldr.w	fp, [sp, #4]
   145bc:	3010      	adds	r0, #16
   145be:	9002      	str	r0, [sp, #8]
   145c0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   145c4:	4583      	cmp	fp, r0
   145c6:	d836      	bhi.n	14636 <aes_encrypt+0x15a>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   145c8:	f88d 1078 	strb.w	r1, [sp, #120]	; 0x78
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   145cc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   145d0:	9909      	ldr	r1, [sp, #36]	; 0x24
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   145d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   145d4:	f88d 107c 	strb.w	r1, [sp, #124]	; 0x7c
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   145d8:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   145dc:	9911      	ldr	r1, [sp, #68]	; 0x44
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   145de:	9a06      	ldr	r2, [sp, #24]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   145e0:	f88d 1080 	strb.w	r1, [sp, #128]	; 0x80
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   145e4:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   145e8:	9919      	ldr	r1, [sp, #100]	; 0x64
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   145ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   145ec:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   145f0:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   145f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   145f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   145f8:	f88d 107d 	strb.w	r1, [sp, #125]	; 0x7d
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   145fc:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   14600:	9912      	ldr	r1, [sp, #72]	; 0x48
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   14602:	9a10      	ldr	r2, [sp, #64]	; 0x40
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   14604:	f88d 1081 	strb.w	r1, [sp, #129]	; 0x81
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   14608:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   1460c:	991a      	ldr	r1, [sp, #104]	; 0x68
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   1460e:	9a08      	ldr	r2, [sp, #32]
   14610:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   14614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14616:	981d      	ldr	r0, [sp, #116]	; 0x74
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   14618:	f88d 1085 	strb.w	r1, [sp, #133]	; 0x85
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   1461c:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   14620:	a91e      	add	r1, sp, #120	; 0x78
   14622:	eb03 120b 	add.w	r2, r3, fp, lsl #4
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14626:	f88d 7079 	strb.w	r7, [sp, #121]	; 0x79
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   1462a:	f017 fc07 	bl	2be3c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
   1462e:	2000      	movs	r0, #0
}
   14630:	b023      	add	sp, #140	; 0x8c
   14632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14636:	f815 b008 	ldrb.w	fp, [r5, r8]
   1463a:	ea82 0003 	eor.w	r0, r2, r3
   1463e:	ea8b 0000 	eor.w	r0, fp, r0
   14642:	f816 b00e 	ldrb.w	fp, [r6, lr]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   14646:	404b      	eors	r3, r1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14648:	ea80 000b 	eor.w	r0, r0, fp
   1464c:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   14650:	f815 000e 	ldrb.w	r0, [r5, lr]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   14654:	407a      	eors	r2, r7
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   14656:	4043      	eors	r3, r0
   14658:	f816 000a 	ldrb.w	r0, [r6, sl]
   1465c:	4043      	eors	r3, r0
   1465e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   14662:	ea81 0307 	eor.w	r3, r1, r7
   14666:	f815 100a 	ldrb.w	r1, [r5, sl]
    xor_block(d, k);
   1466a:	a81e      	add	r0, sp, #120	; 0x78
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   1466c:	4059      	eors	r1, r3
   1466e:	f816 3009 	ldrb.w	r3, [r6, r9]
   14672:	4059      	eors	r1, r3
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   14674:	f816 3008 	ldrb.w	r3, [r6, r8]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   14678:	f88d 107a 	strb.w	r1, [sp, #122]	; 0x7a
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   1467c:	4053      	eors	r3, r2
   1467e:	f815 2009 	ldrb.w	r2, [r5, r9]
   14682:	4053      	eors	r3, r2
   14684:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14688:	9a08      	ldr	r2, [sp, #32]
   1468a:	9b06      	ldr	r3, [sp, #24]
   1468c:	4053      	eors	r3, r2
   1468e:	9a04      	ldr	r2, [sp, #16]
   14690:	5caa      	ldrb	r2, [r5, r2]
   14692:	4053      	eors	r3, r2
   14694:	f816 200c 	ldrb.w	r2, [r6, ip]
   14698:	4053      	eors	r3, r2
   1469a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
   1469e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   146a2:	405a      	eors	r2, r3
   146a4:	f815 300c 	ldrb.w	r3, [r5, ip]
   146a8:	4053      	eors	r3, r2
   146aa:	9a05      	ldr	r2, [sp, #20]
   146ac:	5cb2      	ldrb	r2, [r6, r2]
   146ae:	4053      	eors	r3, r2
   146b0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
   146b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   146b8:	405a      	eors	r2, r3
   146ba:	9b05      	ldr	r3, [sp, #20]
   146bc:	5ceb      	ldrb	r3, [r5, r3]
   146be:	4053      	eors	r3, r2
   146c0:	9a07      	ldr	r2, [sp, #28]
   146c2:	5cb2      	ldrb	r2, [r6, r2]
   146c4:	4053      	eors	r3, r2
   146c6:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
   146ca:	9b06      	ldr	r3, [sp, #24]
   146cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   146ce:	4053      	eors	r3, r2
   146d0:	9a04      	ldr	r2, [sp, #16]
   146d2:	5cb2      	ldrb	r2, [r6, r2]
   146d4:	405a      	eors	r2, r3
   146d6:	9b07      	ldr	r3, [sp, #28]
   146d8:	5ceb      	ldrb	r3, [r5, r3]
   146da:	405a      	eors	r2, r3
   146dc:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   146e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   146e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   146e4:	4053      	eors	r3, r2
   146e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   146e8:	5caa      	ldrb	r2, [r5, r2]
   146ea:	4053      	eors	r3, r2
   146ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   146ee:	5cb2      	ldrb	r2, [r6, r2]
   146f0:	4053      	eors	r3, r2
   146f2:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
   146f6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
   146fa:	405a      	eors	r2, r3
   146fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   146fe:	5ceb      	ldrb	r3, [r5, r3]
   14700:	4053      	eors	r3, r2
   14702:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14704:	5cb2      	ldrb	r2, [r6, r2]
   14706:	4053      	eors	r3, r2
   14708:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
   1470c:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   14710:	405a      	eors	r2, r3
   14712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14714:	5ceb      	ldrb	r3, [r5, r3]
   14716:	4053      	eors	r3, r2
   14718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1471a:	5cb2      	ldrb	r2, [r6, r2]
   1471c:	4053      	eors	r3, r2
   1471e:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
   14722:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14726:	4053      	eors	r3, r2
   14728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1472a:	5cb2      	ldrb	r2, [r6, r2]
   1472c:	405a      	eors	r2, r3
   1472e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14730:	5ceb      	ldrb	r3, [r5, r3]
    xor_block(d, k);
   14732:	991c      	ldr	r1, [sp, #112]	; 0x70
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
   14734:	405a      	eors	r2, r3
   14736:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   1473a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1473c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1473e:	4053      	eors	r3, r2
   14740:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14742:	5caa      	ldrb	r2, [r5, r2]
   14744:	4053      	eors	r3, r2
   14746:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14748:	5cb2      	ldrb	r2, [r6, r2]
   1474a:	4053      	eors	r3, r2
   1474c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
   14750:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
   14754:	405a      	eors	r2, r3
   14756:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14758:	5ceb      	ldrb	r3, [r5, r3]
   1475a:	4053      	eors	r3, r2
   1475c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1475e:	5cb2      	ldrb	r2, [r6, r2]
   14760:	4053      	eors	r3, r2
   14762:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
   14766:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
   1476a:	405a      	eors	r2, r3
   1476c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1476e:	5ceb      	ldrb	r3, [r5, r3]
   14770:	4053      	eors	r3, r2
   14772:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14774:	5cb2      	ldrb	r2, [r6, r2]
   14776:	4053      	eors	r3, r2
   14778:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
   1477c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1477e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14780:	4053      	eors	r3, r2
   14782:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14784:	5cb2      	ldrb	r2, [r6, r2]
   14786:	4053      	eors	r3, r2
   14788:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1478a:	5caa      	ldrb	r2, [r5, r2]
   1478c:	4053      	eors	r3, r2
   1478e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    xor_block(d, k);
   14792:	f017 fb12 	bl	2bdba <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
   14796:	e6b8      	b.n	1450a <aes_encrypt+0x2e>
        return ( uint8_t )-1;
   14798:	20ff      	movs	r0, #255	; 0xff
   1479a:	e749      	b.n	14630 <aes_encrypt+0x154>
   1479c:	00036323 	.word	0x00036323
   147a0:	00036223 	.word	0x00036223
   147a4:	00036123 	.word	0x00036123

000147a8 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
   147a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   147ac:	b0cb      	sub	sp, #300	; 0x12c
   147ae:	4606      	mov	r6, r0
   147b0:	4617      	mov	r7, r2
   147b2:	4698      	mov	r8, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
   147b4:	460d      	mov	r5, r1
{
   147b6:	f8dd 9148 	ldr.w	r9, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
   147ba:	b389      	cbz	r1, 14820 <ComputeCmac+0x78>
   147bc:	f1b9 0f00 	cmp.w	r9, #0
   147c0:	d02e      	beq.n	14820 <ComputeCmac+0x78>
        if( SeNvm->KeyList[i].KeyID == keyID )
   147c2:	2400      	movs	r4, #0
    }

    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
   147c4:	a804      	add	r0, sp, #16
   147c6:	f017 fb7b 	bl	2bec0 <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
   147ca:	4b16      	ldr	r3, [pc, #88]	; (14824 <ComputeCmac+0x7c>)
   147cc:	6819      	ldr	r1, [r3, #0]
   147ce:	f101 0314 	add.w	r3, r1, #20
   147d2:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   147d6:	5c1a      	ldrb	r2, [r3, r0]
   147d8:	4542      	cmp	r2, r8
   147da:	d113      	bne.n	14804 <ComputeCmac+0x5c>
    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
   147dc:	3015      	adds	r0, #21
   147de:	4401      	add	r1, r0
   147e0:	a804      	add	r0, sp, #16
   147e2:	f017 fb7d 	bl	2bee0 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
   147e6:	b9a6      	cbnz	r6, 14812 <ComputeCmac+0x6a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
   147e8:	463a      	mov	r2, r7
   147ea:	4629      	mov	r1, r5
   147ec:	a804      	add	r0, sp, #16
   147ee:	f017 fb7c 	bl	2beea <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
   147f2:	4668      	mov	r0, sp
   147f4:	a904      	add	r1, sp, #16
   147f6:	f017 fbe3 	bl	2bfc0 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
   147fa:	9b00      	ldr	r3, [sp, #0]
   147fc:	2000      	movs	r0, #0
   147fe:	f8c9 3000 	str.w	r3, [r9]
   14802:	e003      	b.n	1480c <ComputeCmac+0x64>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   14804:	3401      	adds	r4, #1
   14806:	2c17      	cmp	r4, #23
   14808:	d1e3      	bne.n	147d2 <ComputeCmac+0x2a>
   1480a:	2003      	movs	r0, #3
                              ( uint32_t ) Cmac[0] );
    }

    return retval;
}
   1480c:	b04b      	add	sp, #300	; 0x12c
   1480e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
   14812:	2210      	movs	r2, #16
   14814:	4631      	mov	r1, r6
   14816:	eb0d 0002 	add.w	r0, sp, r2
   1481a:	f017 fb66 	bl	2beea <AES_CMAC_Update>
   1481e:	e7e3      	b.n	147e8 <ComputeCmac+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
   14820:	2002      	movs	r0, #2
   14822:	e7f3      	b.n	1480c <ComputeCmac+0x64>
   14824:	2002fb44 	.word	0x2002fb44

00014828 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
   14828:	b530      	push	{r4, r5, lr}
   1482a:	b0e9      	sub	sp, #420	; 0x1a4
    SecureElementNvmData_t seNvmInit =
   1482c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   14830:	2100      	movs	r1, #0
{
   14832:	4604      	mov	r4, r0
    SecureElementNvmData_t seNvmInit =
   14834:	4668      	mov	r0, sp
   14836:	f01c ffa4 	bl	31782 <memset>
   1483a:	4b28      	ldr	r3, [pc, #160]	; (148dc <SecureElementInit+0xb4>)
   1483c:	f10d 0215 	add.w	r2, sp, #21
   14840:	f103 0120 	add.w	r1, r3, #32
   14844:	f853 0b04 	ldr.w	r0, [r3], #4
   14848:	428b      	cmp	r3, r1
   1484a:	f842 0b04 	str.w	r0, [r2], #4
   1484e:	d1f9      	bne.n	14844 <SecureElementInit+0x1c>
   14850:	881b      	ldrh	r3, [r3, #0]
   14852:	4923      	ldr	r1, [pc, #140]	; (148e0 <SecureElementInit+0xb8>)
   14854:	8013      	strh	r3, [r2, #0]
   14856:	2303      	movs	r3, #3
   14858:	2245      	movs	r2, #69	; 0x45
   1485a:	a816      	add	r0, sp, #88	; 0x58
   1485c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
   14860:	f01c ff55 	bl	3170e <memcpy>
   14864:	237f      	movs	r3, #127	; 0x7f
   14866:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
   1486a:	2380      	movs	r3, #128	; 0x80
   1486c:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
   14870:	2381      	movs	r3, #129	; 0x81
   14872:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
   14876:	2382      	movs	r3, #130	; 0x82
   14878:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
   1487c:	2383      	movs	r3, #131	; 0x83
   1487e:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
   14882:	2384      	movs	r3, #132	; 0x84
   14884:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
   14888:	2385      	movs	r3, #133	; 0x85
   1488a:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
   1488e:	2386      	movs	r3, #134	; 0x86
   14890:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
   14894:	2387      	movs	r3, #135	; 0x87
   14896:	f88d 3135 	strb.w	r3, [sp, #309]	; 0x135
   1489a:	2388      	movs	r3, #136	; 0x88
   1489c:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
   148a0:	2389      	movs	r3, #137	; 0x89
   148a2:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   148a6:	238a      	movs	r3, #138	; 0x8a
   148a8:	f88d 3168 	strb.w	r3, [sp, #360]	; 0x168
   148ac:	238b      	movs	r3, #139	; 0x8b
   148ae:	f88d 3179 	strb.w	r3, [sp, #377]	; 0x179
   148b2:	238c      	movs	r3, #140	; 0x8c
   148b4:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
   148b8:	b16c      	cbz	r4, 148d6 <SecureElementInit+0xae>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
   148ba:	4d0a      	ldr	r5, [pc, #40]	; (148e4 <SecureElementInit+0xbc>)

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
   148bc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   148c0:	4669      	mov	r1, sp
   148c2:	4620      	mov	r0, r4
    SeNvm = nvm;
   148c4:	602c      	str	r4, [r5, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
   148c6:	f017 f8c4 	bl	2ba52 <memcpy1>

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    // Get a DevEUI from MCU unique ID
    SoftSeHalGetUniqueId( SeNvm->DevEui );
   148ca:	6828      	ldr	r0, [r5, #0]
   148cc:	f017 fcf0 	bl	2c2b0 <SoftSeHalGetUniqueId>
#endif
#endif
    return SECURE_ELEMENT_SUCCESS;
   148d0:	2000      	movs	r0, #0
}
   148d2:	b069      	add	sp, #420	; 0x1a4
   148d4:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   148d6:	2002      	movs	r0, #2
   148d8:	e7fb      	b.n	148d2 <SecureElementInit+0xaa>
   148da:	bf00      	nop
   148dc:	00036423 	.word	0x00036423
   148e0:	00036446 	.word	0x00036446
   148e4:	2002fb44 	.word	0x2002fb44

000148e8 <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
   148e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148ec:	460d      	mov	r5, r1
   148ee:	4616      	mov	r6, r2
   148f0:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
   148f2:	4607      	mov	r7, r0
{
   148f4:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
   148f6:	b370      	cbz	r0, 14956 <SecureElementAesEncrypt+0x6e>
   148f8:	b36b      	cbz	r3, 14956 <SecureElementAesEncrypt+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
   148fa:	f011 040f 	ands.w	r4, r1, #15
   148fe:	d12c      	bne.n	1495a <SecureElementAesEncrypt+0x72>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
   14900:	22f0      	movs	r2, #240	; 0xf0
   14902:	4621      	mov	r1, r4
   14904:	a801      	add	r0, sp, #4
   14906:	f017 f8b8 	bl	2ba7a <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
   1490a:	4621      	mov	r1, r4
   1490c:	4b14      	ldr	r3, [pc, #80]	; (14960 <SecureElementAesEncrypt+0x78>)
   1490e:	6818      	ldr	r0, [r3, #0]
   14910:	f100 0214 	add.w	r2, r0, #20
   14914:	eb01 1301 	add.w	r3, r1, r1, lsl #4
   14918:	5cd4      	ldrb	r4, [r2, r3]
   1491a:	42b4      	cmp	r4, r6
   1491c:	d10b      	bne.n	14936 <SecureElementAesEncrypt+0x4e>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        aes_set_key( pItem->KeyValue, 16, &aesContext );
   1491e:	3315      	adds	r3, #21
   14920:	2110      	movs	r1, #16
   14922:	aa01      	add	r2, sp, #4
   14924:	4418      	add	r0, r3
   14926:	f7ff fd53 	bl	143d0 <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
   1492a:	462c      	mov	r4, r5
   1492c:	1b2e      	subs	r6, r5, r4
   1492e:	b2f6      	uxtb	r6, r6
   14930:	b944      	cbnz	r4, 14944 <SecureElementAesEncrypt+0x5c>
   14932:	4620      	mov	r0, r4
   14934:	e003      	b.n	1493e <SecureElementAesEncrypt+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   14936:	3101      	adds	r1, #1
   14938:	2917      	cmp	r1, #23
   1493a:	d1eb      	bne.n	14914 <SecureElementAesEncrypt+0x2c>
   1493c:	2003      	movs	r0, #3
            block = block + 16;
            size  = size - 16;
        }
    }
    return retval;
}
   1493e:	b03e      	add	sp, #248	; 0xf8
   14940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
   14944:	aa01      	add	r2, sp, #4
   14946:	eb08 0106 	add.w	r1, r8, r6
   1494a:	19b8      	adds	r0, r7, r6
            size  = size - 16;
   1494c:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
   1494e:	f7ff fdc5 	bl	144dc <aes_encrypt>
            size  = size - 16;
   14952:	b2a4      	uxth	r4, r4
   14954:	e7ea      	b.n	1492c <SecureElementAesEncrypt+0x44>
        return SECURE_ELEMENT_ERROR_NPE;
   14956:	2002      	movs	r0, #2
   14958:	e7f1      	b.n	1493e <SecureElementAesEncrypt+0x56>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
   1495a:	2005      	movs	r0, #5
   1495c:	e7ef      	b.n	1493e <SecureElementAesEncrypt+0x56>
   1495e:	bf00      	nop
   14960:	2002fb44 	.word	0x2002fb44

00014964 <SecureElementSetKey.part.0>:
        if( SeNvm->KeyList[i].KeyID == keyID )
   14964:	2200      	movs	r2, #0
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   14966:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
   14968:	4e1c      	ldr	r6, [pc, #112]	; (149dc <SecureElementSetKey.part.0+0x78>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   1496a:	4603      	mov	r3, r0
        if( SeNvm->KeyList[i].KeyID == keyID )
   1496c:	6834      	ldr	r4, [r6, #0]
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   1496e:	4608      	mov	r0, r1
   14970:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
   14972:	f104 0114 	add.w	r1, r4, #20
   14976:	eb02 1502 	add.w	r5, r2, r2, lsl #4
   1497a:	5d4f      	ldrb	r7, [r1, r5]
   1497c:	429f      	cmp	r7, r3
   1497e:	d127      	bne.n	149d0 <SecureElementSetKey.part.0+0x6c>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
   14980:	2b80      	cmp	r3, #128	; 0x80
   14982:	f105 0515 	add.w	r5, r5, #21
   14986:	d008      	beq.n	1499a <SecureElementSetKey.part.0+0x36>
   14988:	337d      	adds	r3, #125	; 0x7d
   1498a:	b2db      	uxtb	r3, r3
   1498c:	2b06      	cmp	r3, #6
   1498e:	d818      	bhi.n	149c2 <SecureElementSetKey.part.0+0x5e>
   14990:	2249      	movs	r2, #73	; 0x49
   14992:	fa22 f303 	lsr.w	r3, r2, r3
   14996:	07db      	lsls	r3, r3, #31
   14998:	d513      	bpl.n	149c2 <SecureElementSetKey.part.0+0x5e>
                uint8_t               decryptedKey[16] = { 0 };
   1499a:	2300      	movs	r3, #0
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
   1499c:	227f      	movs	r2, #127	; 0x7f
   1499e:	2110      	movs	r1, #16
                uint8_t               decryptedKey[16] = { 0 };
   149a0:	e9cd 3300 	strd	r3, r3, [sp]
   149a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
   149a8:	466b      	mov	r3, sp
   149aa:	f7ff ff9d 	bl	148e8 <SecureElementAesEncrypt>
   149ae:	4604      	mov	r4, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
   149b0:	6830      	ldr	r0, [r6, #0]
   149b2:	2210      	movs	r2, #16
   149b4:	4669      	mov	r1, sp
   149b6:	4428      	add	r0, r5
   149b8:	f017 f84b 	bl	2ba52 <memcpy1>
}
   149bc:	4620      	mov	r0, r4
   149be:	b005      	add	sp, #20
   149c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
   149c2:	4601      	mov	r1, r0
   149c4:	2210      	movs	r2, #16
   149c6:	1960      	adds	r0, r4, r5
   149c8:	f017 f843 	bl	2ba52 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
   149cc:	2400      	movs	r4, #0
   149ce:	e7f5      	b.n	149bc <SecureElementSetKey.part.0+0x58>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   149d0:	3201      	adds	r2, #1
   149d2:	2a17      	cmp	r2, #23
   149d4:	d1cf      	bne.n	14976 <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   149d6:	2403      	movs	r4, #3
   149d8:	e7f0      	b.n	149bc <SecureElementSetKey.part.0+0x58>
   149da:	bf00      	nop
   149dc:	2002fb44 	.word	0x2002fb44

000149e0 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
   149e0:	4601      	mov	r1, r0
{
   149e2:	b508      	push	{r3, lr}
    if( devEui == NULL )
   149e4:	b130      	cbz	r0, 149f4 <SecureElementSetDevEui+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
   149e6:	4b04      	ldr	r3, [pc, #16]	; (149f8 <SecureElementSetDevEui+0x18>)
   149e8:	2208      	movs	r2, #8
   149ea:	6818      	ldr	r0, [r3, #0]
   149ec:	f017 f831 	bl	2ba52 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   149f0:	2000      	movs	r0, #0
}
   149f2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   149f4:	2002      	movs	r0, #2
   149f6:	e7fc      	b.n	149f2 <SecureElementSetDevEui+0x12>
   149f8:	2002fb44 	.word	0x2002fb44

000149fc <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
   149fc:	4b01      	ldr	r3, [pc, #4]	; (14a04 <SecureElementGetDevEui+0x8>)
   149fe:	6818      	ldr	r0, [r3, #0]
   14a00:	4770      	bx	lr
   14a02:	bf00      	nop
   14a04:	2002fb44 	.word	0x2002fb44

00014a08 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
   14a08:	4601      	mov	r1, r0
{
   14a0a:	b508      	push	{r3, lr}
    if( joinEui == NULL )
   14a0c:	b138      	cbz	r0, 14a1e <SecureElementSetJoinEui+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
   14a0e:	2208      	movs	r2, #8
   14a10:	4b04      	ldr	r3, [pc, #16]	; (14a24 <SecureElementSetJoinEui+0x1c>)
   14a12:	6818      	ldr	r0, [r3, #0]
   14a14:	4410      	add	r0, r2
   14a16:	f017 f81c 	bl	2ba52 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   14a1a:	2000      	movs	r0, #0
}
   14a1c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14a1e:	2002      	movs	r0, #2
   14a20:	e7fc      	b.n	14a1c <SecureElementSetJoinEui+0x14>
   14a22:	bf00      	nop
   14a24:	2002fb44 	.word	0x2002fb44

00014a28 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
   14a28:	4b01      	ldr	r3, [pc, #4]	; (14a30 <SecureElementGetJoinEui+0x8>)
   14a2a:	6818      	ldr	r0, [r3, #0]
}
   14a2c:	3008      	adds	r0, #8
   14a2e:	4770      	bx	lr
   14a30:	2002fb44 	.word	0x2002fb44

00014a34 <SecureElementSetPin>:

SecureElementStatus_t SecureElementSetPin( uint8_t* pin )
{
    if( pin == NULL )
   14a34:	4601      	mov	r1, r0
{
   14a36:	b508      	push	{r3, lr}
    if( pin == NULL )
   14a38:	b138      	cbz	r0, 14a4a <SecureElementSetPin+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
   14a3a:	4b05      	ldr	r3, [pc, #20]	; (14a50 <SecureElementSetPin+0x1c>)
   14a3c:	2204      	movs	r2, #4
   14a3e:	6818      	ldr	r0, [r3, #0]
   14a40:	3010      	adds	r0, #16
   14a42:	f017 f806 	bl	2ba52 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   14a46:	2000      	movs	r0, #0
}
   14a48:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14a4a:	2002      	movs	r0, #2
   14a4c:	e7fc      	b.n	14a48 <SecureElementSetPin+0x14>
   14a4e:	bf00      	nop
   14a50:	2002fb44 	.word	0x2002fb44

00014a54 <SecureElementGetPin>:

uint8_t* SecureElementGetPin( void )
{
    return SeNvm->Pin;
   14a54:	4b01      	ldr	r3, [pc, #4]	; (14a5c <SecureElementGetPin+0x8>)
   14a56:	6818      	ldr	r0, [r3, #0]
}
   14a58:	3010      	adds	r0, #16
   14a5a:	4770      	bx	lr
   14a5c:	2002fb44 	.word	0x2002fb44

00014a60 <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
   14a60:	4a06      	ldr	r2, [pc, #24]	; (14a7c <OnRadioTxTimeout+0x1c>)
   14a62:	7813      	ldrb	r3, [r2, #0]
   14a64:	f043 0308 	orr.w	r3, r3, #8
   14a68:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14a6a:	4b05      	ldr	r3, [pc, #20]	; (14a80 <OnRadioTxTimeout+0x20>)
   14a6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14a70:	b113      	cbz	r3, 14a78 <OnRadioTxTimeout+0x18>
   14a72:	68db      	ldr	r3, [r3, #12]
   14a74:	b103      	cbz	r3, 14a78 <OnRadioTxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14a76:	4718      	bx	r3
    }
}
   14a78:	4770      	bx	lr
   14a7a:	bf00      	nop
   14a7c:	2002fb5c 	.word	0x2002fb5c
   14a80:	2003004c 	.word	0x2003004c

00014a84 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
   14a84:	4a06      	ldr	r2, [pc, #24]	; (14aa0 <OnRadioRxError+0x1c>)
   14a86:	7813      	ldrb	r3, [r2, #0]
   14a88:	f043 0304 	orr.w	r3, r3, #4
   14a8c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14a8e:	4b05      	ldr	r3, [pc, #20]	; (14aa4 <OnRadioRxError+0x20>)
   14a90:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14a94:	b113      	cbz	r3, 14a9c <OnRadioRxError+0x18>
   14a96:	68db      	ldr	r3, [r3, #12]
   14a98:	b103      	cbz	r3, 14a9c <OnRadioRxError+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14a9a:	4718      	bx	r3
    }
}
   14a9c:	4770      	bx	lr
   14a9e:	bf00      	nop
   14aa0:	2002fb5c 	.word	0x2002fb5c
   14aa4:	2003004c 	.word	0x2003004c

00014aa8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
   14aa8:	4a06      	ldr	r2, [pc, #24]	; (14ac4 <OnRadioRxTimeout+0x1c>)
   14aaa:	7813      	ldrb	r3, [r2, #0]
   14aac:	f043 0302 	orr.w	r3, r3, #2
   14ab0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14ab2:	4b05      	ldr	r3, [pc, #20]	; (14ac8 <OnRadioRxTimeout+0x20>)
   14ab4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14ab8:	b113      	cbz	r3, 14ac0 <OnRadioRxTimeout+0x18>
   14aba:	68db      	ldr	r3, [r3, #12]
   14abc:	b103      	cbz	r3, 14ac0 <OnRadioRxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14abe:	4718      	bx	r3
    }
}
   14ac0:	4770      	bx	lr
   14ac2:	bf00      	nop
   14ac4:	2002fb5c 	.word	0x2002fb5c
   14ac8:	2003004c 	.word	0x2003004c

00014acc <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14acc:	4b04      	ldr	r3, [pc, #16]	; (14ae0 <UpdateRxSlotIdleState+0x14>)
   14ace:	4a05      	ldr	r2, [pc, #20]	; (14ae4 <UpdateRxSlotIdleState+0x18>)
   14ad0:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
   14ad4:	2b02      	cmp	r3, #2
   14ad6:	bf18      	it	ne
   14ad8:	2306      	movne	r3, #6
   14ada:	f882 348c 	strb.w	r3, [r2, #1164]	; 0x48c
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
   14ade:	4770      	bx	lr
   14ae0:	2002fbf0 	.word	0x2002fbf0
   14ae4:	2003004c 	.word	0x2003004c

00014ae8 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
   14ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14aea:	4b09      	ldr	r3, [pc, #36]	; (14b10 <GetMaxAppPayloadWithoutFOptsLength+0x28>)
    getPhy.Datarate = datarate;
   14aec:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14af0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14af4:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14af8:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
   14afc:	220d      	movs	r2, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14afe:	a902      	add	r1, sp, #8
    getPhy.Attribute = PHY_MAX_PAYLOAD;
   14b00:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14b04:	f017 ff89 	bl	2ca1a <RegionGetPhyParam>

    return phyParam.Value;
}
   14b08:	b2c0      	uxtb	r0, r0
   14b0a:	b005      	add	sp, #20
   14b0c:	f85d fb04 	ldr.w	pc, [sp], #4
   14b10:	2002fbf0 	.word	0x2002fbf0

00014b14 <OnRetransmitTimeoutTimerEvent>:
{
   14b14:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
   14b16:	4809      	ldr	r0, [pc, #36]	; (14b3c <OnRetransmitTimeoutTimerEvent+0x28>)
   14b18:	f7fe faea 	bl	130f0 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
   14b1c:	4b08      	ldr	r3, [pc, #32]	; (14b40 <OnRetransmitTimeoutTimerEvent+0x2c>)
   14b1e:	f893 241a 	ldrb.w	r2, [r3, #1050]	; 0x41a
   14b22:	b112      	cbz	r2, 14b2a <OnRetransmitTimeoutTimerEvent+0x16>
        MacCtx.RetransmitTimeoutRetry = true;
   14b24:	2201      	movs	r2, #1
   14b26:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14b2a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14b2e:	b123      	cbz	r3, 14b3a <OnRetransmitTimeoutTimerEvent+0x26>
   14b30:	68db      	ldr	r3, [r3, #12]
   14b32:	b113      	cbz	r3, 14b3a <OnRetransmitTimeoutTimerEvent+0x26>
}
   14b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14b38:	4718      	bx	r3
}
   14b3a:	bd10      	pop	{r4, pc}
   14b3c:	2003044c 	.word	0x2003044c
   14b40:	2003004c 	.word	0x2003004c

00014b44 <PrepareRxDoneAbort>:
{
   14b44:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
   14b46:	4c0c      	ldr	r4, [pc, #48]	; (14b78 <PrepareRxDoneAbort+0x34>)
   14b48:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   14b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14b50:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
   14b54:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   14b58:	b113      	cbz	r3, 14b60 <PrepareRxDoneAbort+0x1c>
        OnRetransmitTimeoutTimerEvent( NULL );
   14b5a:	2000      	movs	r0, #0
   14b5c:	f7ff ffda 	bl	14b14 <OnRetransmitTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
   14b60:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   14b64:	f023 0312 	bic.w	r3, r3, #18
   14b68:	f043 0312 	orr.w	r3, r3, #18
   14b6c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
}
   14b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
   14b74:	f7ff bfaa 	b.w	14acc <UpdateRxSlotIdleState>
   14b78:	2003004c 	.word	0x2003004c

00014b7c <HandleRadioRxErrorTimeout>:
{
   14b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14b7e:	4e2e      	ldr	r6, [pc, #184]	; (14c38 <HandleRadioRxErrorTimeout+0xbc>)
{
   14b80:	4607      	mov	r7, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14b82:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
{
   14b86:	460d      	mov	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14b88:	2b02      	cmp	r3, #2
   14b8a:	d002      	beq.n	14b92 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
   14b8c:	4b2b      	ldr	r3, [pc, #172]	; (14c3c <HandleRadioRxErrorTimeout+0xc0>)
   14b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14b90:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
   14b92:	f017 fc27 	bl	2c3e4 <LoRaMacClassBIsBeaconExpected>
   14b96:	4604      	mov	r4, r0
   14b98:	b980      	cbnz	r0, 14bbc <HandleRadioRxErrorTimeout+0x40>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   14b9a:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   14b9e:	2b01      	cmp	r3, #1
   14ba0:	d016      	beq.n	14bd0 <HandleRadioRxErrorTimeout+0x54>
            if( MacCtx.NodeAckRequested == true )
   14ba2:	4c27      	ldr	r4, [pc, #156]	; (14c40 <HandleRadioRxErrorTimeout+0xc4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   14ba4:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
            if( MacCtx.NodeAckRequested == true )
   14ba8:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   14bac:	b36a      	cbz	r2, 14c0a <HandleRadioRxErrorTimeout+0x8e>
            if( MacCtx.NodeAckRequested == true )
   14bae:	b10b      	cbz	r3, 14bb4 <HandleRadioRxErrorTimeout+0x38>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
   14bb0:	f884 5445 	strb.w	r5, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
   14bb4:	4628      	mov	r0, r5
   14bb6:	f003 f8b7 	bl	17d28 <LoRaMacConfirmQueueSetStatusCmn>
   14bba:	e036      	b.n	14c2a <HandleRadioRxErrorTimeout+0xae>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
   14bbc:	2002      	movs	r0, #2
   14bbe:	f017 fc07 	bl	2c3d0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
   14bc2:	2000      	movs	r0, #0
   14bc4:	f017 fc09 	bl	2c3da <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   14bc8:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   14bcc:	2b01      	cmp	r3, #1
   14bce:	d111      	bne.n	14bf4 <HandleRadioRxErrorTimeout+0x78>
        if( LoRaMacClassBIsPingExpected( ) == true )
   14bd0:	f017 fc0a 	bl	2c3e8 <LoRaMacClassBIsPingExpected>
   14bd4:	b190      	cbz	r0, 14bfc <HandleRadioRxErrorTimeout+0x80>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   14bd6:	2000      	movs	r0, #0
   14bd8:	f017 fbfb 	bl	2c3d2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
   14bdc:	2000      	movs	r0, #0
   14bde:	f017 fbfd 	bl	2c3dc <LoRaMacClassBPingSlotTimerEvent>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
   14be2:	f017 fc03 	bl	2c3ec <LoRaMacClassBIsMulticastExpected>
   14be6:	b128      	cbz	r0, 14bf4 <HandleRadioRxErrorTimeout+0x78>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   14be8:	2000      	movs	r0, #0
   14bea:	f017 fbf3 	bl	2c3d4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
   14bee:	2000      	movs	r0, #0
   14bf0:	f017 fbf5 	bl	2c3de <LoRaMacClassBMulticastSlotTimerEvent>
}
   14bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    UpdateRxSlotIdleState( );
   14bf8:	f7ff bf68 	b.w	14acc <UpdateRxSlotIdleState>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
   14bfc:	f017 fbf6 	bl	2c3ec <LoRaMacClassBIsMulticastExpected>
   14c00:	2800      	cmp	r0, #0
   14c02:	d1f1      	bne.n	14be8 <HandleRadioRxErrorTimeout+0x6c>
    if( classBRx == false )
   14c04:	2c00      	cmp	r4, #0
   14c06:	d0cc      	beq.n	14ba2 <HandleRadioRxErrorTimeout+0x26>
   14c08:	e7f4      	b.n	14bf4 <HandleRadioRxErrorTimeout+0x78>
            if( MacCtx.NodeAckRequested == true )
   14c0a:	b10b      	cbz	r3, 14c10 <HandleRadioRxErrorTimeout+0x94>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
   14c0c:	f884 7445 	strb.w	r7, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
   14c10:	4638      	mov	r0, r7
   14c12:	f003 f889 	bl	17d28 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
   14c16:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   14c18:	f017 f837 	bl	2bc8a <TimerGetElapsedTime>
   14c1c:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
   14c20:	4298      	cmp	r0, r3
   14c22:	d3e7      	bcc.n	14bf4 <HandleRadioRxErrorTimeout+0x78>
                TimerStop( &MacCtx.RxWindowTimer2 );
   14c24:	4807      	ldr	r0, [pc, #28]	; (14c44 <HandleRadioRxErrorTimeout+0xc8>)
   14c26:	f7fe fa63 	bl	130f0 <TimerStop>
            MacCtx.MacFlags.Bits.MacDone = 1;
   14c2a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   14c2e:	f043 0310 	orr.w	r3, r3, #16
   14c32:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   14c36:	e7dd      	b.n	14bf4 <HandleRadioRxErrorTimeout+0x78>
   14c38:	2002fbf0 	.word	0x2002fbf0
   14c3c:	000338dc 	.word	0x000338dc
   14c40:	2003004c 	.word	0x2003004c
   14c44:	200303ec 	.word	0x200303ec

00014c48 <OnRadioRxDone>:
{
   14c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c4c:	4616      	mov	r6, r2
   14c4e:	461d      	mov	r5, r3
   14c50:	4680      	mov	r8, r0
   14c52:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
   14c54:	f017 f812 	bl	2bc7c <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14c58:	4a0b      	ldr	r2, [pc, #44]	; (14c88 <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
   14c5a:	4c0c      	ldr	r4, [pc, #48]	; (14c8c <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14c5c:	7813      	ldrb	r3, [r2, #0]
    RxDoneParams.Payload = payload;
   14c5e:	e9c4 0800 	strd	r0, r8, [r4]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14c62:	f023 0311 	bic.w	r3, r3, #17
   14c66:	f043 0311 	orr.w	r3, r3, #17
   14c6a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14c6c:	4b08      	ldr	r3, [pc, #32]	; (14c90 <OnRadioRxDone+0x48>)
    RxDoneParams.Size = size;
   14c6e:	8127      	strh	r7, [r4, #8]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14c70:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
    RxDoneParams.Rssi = rssi;
   14c74:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
   14c76:	7325      	strb	r5, [r4, #12]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14c78:	b123      	cbz	r3, 14c84 <OnRadioRxDone+0x3c>
   14c7a:	68db      	ldr	r3, [r3, #12]
   14c7c:	b113      	cbz	r3, 14c84 <OnRadioRxDone+0x3c>
}
   14c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14c82:	4718      	bx	r3
}
   14c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c88:	2002fb5c 	.word	0x2002fb5c
   14c8c:	2002fb48 	.word	0x2002fb48
   14c90:	2003004c 	.word	0x2003004c

00014c94 <OnRadioTxDone>:
{
   14c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14c96:	f016 fff1 	bl	2bc7c <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
   14c9a:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14c9c:	4b0d      	ldr	r3, [pc, #52]	; (14cd4 <OnRadioTxDone+0x40>)
    MacCtx.LastTxSysTime = SysTimeGet( );
   14c9e:	4d0e      	ldr	r5, [pc, #56]	; (14cd8 <OnRadioTxDone+0x44>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14ca0:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
   14ca2:	4620      	mov	r0, r4
   14ca4:	f016 ff47 	bl	2bb36 <SysTimeGet>
   14ca8:	e894 0003 	ldmia.w	r4, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
   14cac:	4a0b      	ldr	r2, [pc, #44]	; (14cdc <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
   14cae:	f505 734e 	add.w	r3, r5, #824	; 0x338
   14cb2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
   14cb6:	7813      	ldrb	r3, [r2, #0]
   14cb8:	f043 0320 	orr.w	r3, r3, #32
   14cbc:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14cbe:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
   14cc2:	b12b      	cbz	r3, 14cd0 <OnRadioTxDone+0x3c>
   14cc4:	68db      	ldr	r3, [r3, #12]
   14cc6:	b11b      	cbz	r3, 14cd0 <OnRadioTxDone+0x3c>
}
   14cc8:	b003      	add	sp, #12
   14cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14cce:	4718      	bx	r3
}
   14cd0:	b003      	add	sp, #12
   14cd2:	bd30      	pop	{r4, r5, pc}
   14cd4:	2002fb58 	.word	0x2002fb58
   14cd8:	2003004c 	.word	0x2003004c
   14cdc:	2002fb5c 	.word	0x2002fb5c

00014ce0 <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
   14ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   14ce4:	2600      	movs	r6, #0
    MacCtx.ChannelsNbTransCounter = 0;
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;

    Nvm.MacGroup2.MaxDCycle = 0;
    Nvm.MacGroup2.AggregatedDCycle = 1;
   14ce6:	f04f 0801 	mov.w	r8, #1
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   14cea:	4c47      	ldr	r4, [pc, #284]	; (14e08 <ResetMacParameters+0x128>)
{
   14cec:	b090      	sub	sp, #64	; 0x40

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   14cee:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   14cf2:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   14cf6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
   14cfa:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    MacCtx.ResponseTimeoutStartTime = 0;
   14cfe:	4d43      	ldr	r5, [pc, #268]	; (14e0c <ResetMacParameters+0x12c>)
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
   14d00:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   14d04:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   14d08:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   14d0c:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
   14d10:	f104 0384 	add.w	r3, r4, #132	; 0x84
   14d14:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
   14d18:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   14d1c:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
   14d20:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
   14d24:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    Nvm.MacGroup1.AdrAckCounter = 0;
   14d28:	63a6      	str	r6, [r4, #56]	; 0x38
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
   14d2a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   14d2e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    Nvm.MacGroup2.MaxDCycle = 0;
   14d32:	f884 61a3 	strb.w	r6, [r4, #419]	; 0x1a3
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   14d36:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    Nvm.MacGroup2.DownlinkReceived = false;

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
   14d3a:	f504 735e 	add.w	r3, r4, #888	; 0x378
   14d3e:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
   14d40:	f504 735f 	add.w	r3, r4, #892	; 0x37c
   14d44:	9304      	str	r3, [sp, #16]
    params.Bands = &RegionBands;
   14d46:	4b32      	ldr	r3, [pc, #200]	; (14e10 <ResetMacParameters+0x130>)
    Nvm.MacGroup2.AggregatedDCycle = 1;
   14d48:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
    Nvm.MacGroup1.SrvAckRequested = false;
   14d4c:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   14d50:	f884 61a5 	strb.w	r6, [r4, #421]	; 0x1a5
    Nvm.MacGroup2.DownlinkReceived = false;
   14d54:	f884 61a6 	strb.w	r6, [r4, #422]	; 0x1a6
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   14d58:	a903      	add	r1, sp, #12
    MacCtx.ResponseTimeoutStartTime = 0;
   14d5a:	f8c5 6500 	str.w	r6, [r5, #1280]	; 0x500
    MacCtx.ChannelsNbTransCounter = 0;
   14d5e:	f8a5 6418 	strh.w	r6, [r5, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
   14d62:	f885 641a 	strb.w	r6, [r5, #1050]	; 0x41a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
   14d66:	f88d 8018 	strb.w	r8, [sp, #24]
    params.Bands = &RegionBands;
   14d6a:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   14d6c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   14d70:	f017 fe63 	bl	2ca3a <RegionInitDefaults>
    // Initialize channel index.
    MacCtx.Channel = 0;

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   14d74:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   14d76:	f885 63d4 	strb.w	r6, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   14d7a:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14d7e:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    MacCtx.RxWindow2Config.RxContinuous = false;
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14d82:	f505 7775 	add.w	r7, r5, #980	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14d86:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14d8a:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14d8e:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14d92:	f885 33e7 	strb.w	r3, [r5, #999]	; 0x3e7
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14d96:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   14d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    MacCtx.RxWindow2Config.RxContinuous = false;
   14d9a:	f885 63e5 	strb.w	r6, [r5, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   14d9e:	f885 83e6 	strb.w	r8, [r5, #998]	; 0x3e6
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14da2:	683b      	ldr	r3, [r7, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
    classBCallbacks.MacProcessNotify = NULL;
   14da4:	e9cd 6601 	strd	r6, r6, [sp, #4]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14da8:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   14daa:	2302      	movs	r3, #2
   14dac:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa

    if( MacCtx.MacCallbacks != NULL )
   14db0:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
    MacCtx.Channel = 0;
   14db4:	f885 641b 	strb.w	r6, [r5, #1051]	; 0x41b
    MacCtx.RxWindowCConfig.RxContinuous = true;
   14db8:	f885 83f9 	strb.w	r8, [r5, #1017]	; 0x3f9
    if( MacCtx.MacCallbacks != NULL )
   14dbc:	b11b      	cbz	r3, 14dc6 <ResetMacParameters+0xe6>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
   14dbe:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
   14dc0:	68db      	ldr	r3, [r3, #12]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
   14dc2:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
   14dc4:	9302      	str	r3, [sp, #8]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
   14dc6:	4b13      	ldr	r3, [pc, #76]	; (14e14 <ResetMacParameters+0x134>)
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   14dc8:	a901      	add	r1, sp, #4
    classBParams.McpsIndication = &MacCtx.McpsIndication;
   14dca:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
   14dce:	9208      	str	r2, [sp, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
   14dd0:	f1a3 0214 	sub.w	r2, r3, #20
   14dd4:	9209      	str	r2, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
   14dd6:	4a10      	ldr	r2, [pc, #64]	; (14e18 <ResetMacParameters+0x138>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
   14dd8:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
   14dda:	3321      	adds	r3, #33	; 0x21
   14ddc:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
   14dde:	f1a2 0384 	sub.w	r3, r2, #132	; 0x84
   14de2:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
   14de4:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   14de8:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
   14dea:	1d13      	adds	r3, r2, #4
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
   14dec:	920b      	str	r2, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
   14dee:	930e      	str	r3, [sp, #56]	; 0x38
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   14df0:	a807      	add	r0, sp, #28
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
   14df2:	f102 03dc 	add.w	r3, r2, #220	; 0xdc
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   14df6:	f502 725a 	add.w	r2, r2, #872	; 0x368
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
   14dfa:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   14dfc:	f017 fae7 	bl	2c3ce <LoRaMacClassBInit>
}
   14e00:	b010      	add	sp, #64	; 0x40
   14e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e06:	bf00      	nop
   14e08:	2002fbf0 	.word	0x2002fbf0
   14e0c:	2003004c 	.word	0x2003004c
   14e10:	2002fb60 	.word	0x2002fb60
   14e14:	200304b8 	.word	0x200304b8
   14e18:	2002fccc 	.word	0x2002fccc

00014e1c <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
   14e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   14e1e:	4e12      	ldr	r6, [pc, #72]	; (14e68 <OpenContinuousRxCWindow+0x4c>)
   14e20:	4d12      	ldr	r5, [pc, #72]	; (14e6c <OpenContinuousRxCWindow+0x50>)
   14e22:	9600      	str	r6, [sp, #0]
   14e24:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   14e26:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
   14e2a:	f995 1088 	ldrsb.w	r1, [r5, #136]	; 0x88
   14e2e:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   14e32:	f017 fe1e 	bl	2ca72 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   14e36:	2302      	movs	r3, #2
   14e38:	74b3      	strb	r3, [r6, #18]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14e3a:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   14e3e:	4631      	mov	r1, r6
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14e40:	74f3      	strb	r3, [r6, #19]
    MacCtx.RxWindowCConfig.RxContinuous = true;
   14e42:	2301      	movs	r3, #1
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   14e44:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   14e48:	f106 023c 	add.w	r2, r6, #60	; 0x3c
    MacCtx.RxWindowCConfig.RxContinuous = true;
   14e4c:	7473      	strb	r3, [r6, #17]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   14e4e:	f017 fe1d 	bl	2ca8c <RegionRxConfig>
   14e52:	b130      	cbz	r0, 14e62 <OpenContinuousRxCWindow+0x46>
    {
        Radio.Rx( 0 ); // Continuous mode
   14e54:	4b06      	ldr	r3, [pc, #24]	; (14e70 <OpenContinuousRxCWindow+0x54>)
   14e56:	2000      	movs	r0, #0
   14e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14e5a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
   14e5c:	7cb3      	ldrb	r3, [r6, #18]
   14e5e:	f886 30a4 	strb.w	r3, [r6, #164]	; 0xa4
    }
}
   14e62:	b002      	add	sp, #8
   14e64:	bd70      	pop	{r4, r5, r6, pc}
   14e66:	bf00      	nop
   14e68:	20030434 	.word	0x20030434
   14e6c:	2002fbf0 	.word	0x2002fbf0
   14e70:	000338dc 	.word	0x000338dc

00014e74 <SwitchClass>:
{
   14e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
   14e76:	4c38      	ldr	r4, [pc, #224]	; (14f58 <SwitchClass+0xe4>)
{
   14e78:	4606      	mov	r6, r0
    switch( Nvm.MacGroup2.DeviceClass )
   14e7a:	f894 51a0 	ldrb.w	r5, [r4, #416]	; 0x1a0
   14e7e:	2d01      	cmp	r5, #1
   14e80:	d00d      	beq.n	14e9e <SwitchClass+0x2a>
   14e82:	2d02      	cmp	r5, #2
   14e84:	d060      	beq.n	14f48 <SwitchClass+0xd4>
   14e86:	b935      	cbnz	r5, 14e96 <SwitchClass+0x22>
            if( deviceClass == CLASS_A )
   14e88:	b938      	cbnz	r0, 14e9a <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
   14e8a:	e9d4 011f 	ldrd	r0, r1, [r4, #124]	; 0x7c
   14e8e:	f104 0384 	add.w	r3, r4, #132	; 0x84
   14e92:	e883 0003 	stmia.w	r3, {r0, r1}
                status = LORAMAC_STATUS_OK;
   14e96:	2003      	movs	r0, #3
}
   14e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
   14e9a:	2801      	cmp	r0, #1
   14e9c:	d106      	bne.n	14eac <SwitchClass+0x38>
            status = LoRaMacClassBSwitchClass( deviceClass );
   14e9e:	f017 faac 	bl	2c3fa <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
   14ea2:	2800      	cmp	r0, #0
   14ea4:	d1f8      	bne.n	14e98 <SwitchClass+0x24>
                Nvm.MacGroup2.DeviceClass = deviceClass;
   14ea6:	f884 61a0 	strb.w	r6, [r4, #416]	; 0x1a0
   14eaa:	e7f5      	b.n	14e98 <SwitchClass+0x24>
            if( deviceClass == CLASS_C )
   14eac:	2802      	cmp	r0, #2
   14eae:	d1f2      	bne.n	14e96 <SwitchClass+0x22>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14eb0:	4f2a      	ldr	r7, [pc, #168]	; (14f5c <SwitchClass+0xe8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
   14eb2:	f884 01a0 	strb.w	r0, [r4, #416]	; 0x1a0
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   14eb6:	f507 7c7a 	add.w	ip, r7, #1000	; 0x3e8
   14eba:	f507 7e75 	add.w	lr, r7, #980	; 0x3d4
   14ebe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14ec2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14ec6:	f8de 3000 	ldr.w	r3, [lr]
   14eca:	f8cc 3000 	str.w	r3, [ip]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   14ece:	4623      	mov	r3, r4
   14ed0:	f887 63fa 	strb.w	r6, [r7, #1018]	; 0x3fa
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
   14ed4:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   14ed8:	b382      	cbz	r2, 14f3c <SwitchClass+0xc8>
   14eda:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14ede:	2a02      	cmp	r2, #2
   14ee0:	d12c      	bne.n	14f3c <SwitchClass+0xc8>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
   14ee2:	2330      	movs	r3, #48	; 0x30
   14ee4:	fb03 4505 	mla	r5, r3, r5, r4
   14ee8:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
   14eec:	f895 2100 	ldrb.w	r2, [r5, #256]	; 0x100
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
   14ef0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   14ef4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14ef8:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
   14efc:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14f00:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
   14f04:	2303      	movs	r3, #3
   14f06:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
                        MacCtx.RxWindowCConfig.RxContinuous = true;
   14f0a:	2301      	movs	r3, #1
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   14f0c:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
                        MacCtx.RxWindowCConfig.RxContinuous = true;
   14f10:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   14f14:	f887 23e8 	strb.w	r2, [r7, #1000]	; 0x3e8
                MacCtx.NodeAckRequested = false;
   14f18:	2300      	movs	r3, #0
   14f1a:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
                Radio.Sleep( );
   14f1e:	4b10      	ldr	r3, [pc, #64]	; (14f60 <SwitchClass+0xec>)
   14f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14f22:	4798      	blx	r3
                OpenContinuousRxCWindow( );
   14f24:	f7ff ff7a 	bl	14e1c <OpenContinuousRxCWindow>
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   14f28:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   14f2c:	b123      	cbz	r3, 14f38 <SwitchClass+0xc4>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
   14f2e:	2201      	movs	r2, #1
   14f30:	2020      	movs	r0, #32
   14f32:	490c      	ldr	r1, [pc, #48]	; (14f64 <SwitchClass+0xf0>)
   14f34:	f002 fd8c 	bl	17a50 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_OK;
   14f38:	2000      	movs	r0, #0
   14f3a:	e7ad      	b.n	14e98 <SwitchClass+0x24>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
   14f3c:	3501      	adds	r5, #1
   14f3e:	2d04      	cmp	r5, #4
   14f40:	f103 0330 	add.w	r3, r3, #48	; 0x30
   14f44:	d1c6      	bne.n	14ed4 <SwitchClass+0x60>
   14f46:	e7e7      	b.n	14f18 <SwitchClass+0xa4>
            if( deviceClass == CLASS_A )
   14f48:	2800      	cmp	r0, #0
   14f4a:	d1a4      	bne.n	14e96 <SwitchClass+0x22>
                Radio.Sleep( );
   14f4c:	4b04      	ldr	r3, [pc, #16]	; (14f60 <SwitchClass+0xec>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
   14f4e:	f884 01a0 	strb.w	r0, [r4, #416]	; 0x1a0
                Radio.Sleep( );
   14f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14f54:	4798      	blx	r3
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   14f56:	e7e7      	b.n	14f28 <SwitchClass+0xb4>
   14f58:	2002fbf0 	.word	0x2002fbf0
   14f5c:	2003004c 	.word	0x2003004c
   14f60:	000338dc 	.word	0x000338dc
   14f64:	2002fd90 	.word	0x2002fd90

00014f68 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
   14f68:	b570      	push	{r4, r5, r6, lr}
   14f6a:	460c      	mov	r4, r1
    Radio.Standby( );
   14f6c:	4e0a      	ldr	r6, [pc, #40]	; (14f98 <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   14f6e:	4d0b      	ldr	r5, [pc, #44]	; (14f9c <RxWindowSetup.constprop.0+0x34>)
    TimerStop( rxTimer );
   14f70:	f7fe f8be 	bl	130f0 <TimerStop>
    Radio.Standby( );
   14f74:	6b33      	ldr	r3, [r6, #48]	; 0x30
   14f76:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   14f78:	4621      	mov	r1, r4
   14f7a:	4a09      	ldr	r2, [pc, #36]	; (14fa0 <RxWindowSetup.constprop.0+0x38>)
   14f7c:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   14f80:	f017 fd84 	bl	2ca8c <RegionRxConfig>
   14f84:	b130      	cbz	r0, 14f94 <RxWindowSetup.constprop.0+0x2c>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
   14f86:	6b73      	ldr	r3, [r6, #52]	; 0x34
   14f88:	6e68      	ldr	r0, [r5, #100]	; 0x64
   14f8a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
   14f8c:	7ca2      	ldrb	r2, [r4, #18]
   14f8e:	4b05      	ldr	r3, [pc, #20]	; (14fa4 <RxWindowSetup.constprop.0+0x3c>)
   14f90:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
}
   14f94:	bd70      	pop	{r4, r5, r6, pc}
   14f96:	bf00      	nop
   14f98:	000338dc 	.word	0x000338dc
   14f9c:	2002fbf0 	.word	0x2002fbf0
   14fa0:	20030470 	.word	0x20030470
   14fa4:	2003004c 	.word	0x2003004c

00014fa8 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
   14fa8:	480e      	ldr	r0, [pc, #56]	; (14fe4 <OnRxWindow1TimerEvent+0x3c>)
   14faa:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   14fae:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
   14fb2:	f880 33c0 	strb.w	r3, [r0, #960]	; 0x3c0
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
   14fb6:	4b0c      	ldr	r3, [pc, #48]	; (14fe8 <OnRxWindow1TimerEvent+0x40>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   14fb8:	f500 7062 	add.w	r0, r0, #904	; 0x388
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
   14fbc:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
   14fc0:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14fc4:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14fc8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   14fcc:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    MacCtx.RxWindow1Config.RxContinuous = false;
   14fd0:	2200      	movs	r2, #0
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   14fd2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
    MacCtx.RxWindow1Config.RxContinuous = false;
   14fd6:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
   14fda:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   14fde:	f7ff bfc3 	b.w	14f68 <RxWindowSetup.constprop.0>
   14fe2:	bf00      	nop
   14fe4:	2003004c 	.word	0x2003004c
   14fe8:	2002fbf0 	.word	0x2002fbf0

00014fec <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   14fec:	480f      	ldr	r0, [pc, #60]	; (1502c <OnRxWindow2TimerEvent+0x40>)
   14fee:	f890 348c 	ldrb.w	r3, [r0, #1164]	; 0x48c
   14ff2:	b1d3      	cbz	r3, 1502a <OnRxWindow2TimerEvent+0x3e>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   14ff4:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   14ff8:	f500 7175 	add.w	r1, r0, #980	; 0x3d4
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   14ffc:	f880 33d4 	strb.w	r3, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   15000:	4b0b      	ldr	r3, [pc, #44]	; (15030 <OnRxWindow2TimerEvent+0x44>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   15002:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   15006:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   15008:	6382      	str	r2, [r0, #56]	; 0x38
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1500a:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   1500e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   15012:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    MacCtx.RxWindow2Config.RxContinuous = false;
   15016:	2200      	movs	r2, #0
   15018:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   1501c:	2201      	movs	r2, #1
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   1501e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   15022:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   15026:	f7ff bf9f 	b.w	14f68 <RxWindowSetup.constprop.0>
}
   1502a:	4770      	bx	lr
   1502c:	2003004c 	.word	0x2003004c
   15030:	2002fbf0 	.word	0x2002fbf0

00015034 <StopRetransmission.isra.0>:
        counter++;
    }
    return counter;
}

static bool StopRetransmission( void )
   15034:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
    // Increase Rejoin Uplinks counter
    if( Nvm.MacGroup2.Rejoin0UplinksLimit != 0 )
   15036:	4d21      	ldr	r5, [pc, #132]	; (150bc <StopRetransmission.isra.0+0x88>)
   15038:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   1503c:	b113      	cbz	r3, 15044 <StopRetransmission.isra.0+0x10>
    {
        Nvm.MacGroup1.Rejoin0UplinksCounter++;
   1503e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   15040:	3301      	adds	r3, #1
   15042:	64eb      	str	r3, [r5, #76]	; 0x4c
    }

    if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   15044:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   15048:	4c1d      	ldr	r4, [pc, #116]	; (150c0 <StopRetransmission.isra.0+0x8c>)
   1504a:	b1cb      	cbz	r3, 15080 <StopRetransmission.isra.0+0x4c>
    {
        MacCommand_t* macCmd;
        if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
   1504c:	200b      	movs	r0, #11
   1504e:	a901      	add	r1, sp, #4
   15050:	f002 fd68 	bl	17b24 <LoRaMacCommandsGetCmd>
   15054:	b9a0      	cbnz	r0, 15080 <StopRetransmission.isra.0+0x4c>
        {
            // Increase the Rekey Uplinks counter
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   15056:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52

            /*
             * If the device has not received a RekeyConf within
             * the first ADR_ACK_LIMIT uplinks it SHALL revert to the Join state.
             */
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   1505a:	f8b4 23fc 	ldrh.w	r2, [r4, #1020]	; 0x3fc
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   1505e:	3301      	adds	r3, #1
   15060:	b29b      	uxth	r3, r3
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   15062:	429a      	cmp	r2, r3
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   15064:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   15068:	d10a      	bne.n	15080 <StopRetransmission.isra.0+0x4c>
            {
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
                MacCtx.MacFlags.Bits.MlmeInd = 1;
   1506a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   1506e:	f885 01b8 	strb.w	r0, [r5, #440]	; 0x1b8
                MacCtx.MacFlags.Bits.MlmeInd = 1;
   15072:	f043 0308 	orr.w	r3, r3, #8
   15076:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
   1507a:	230e      	movs	r3, #14
   1507c:	f884 346c 	strb.w	r3, [r4, #1132]	; 0x46c
            }
        }
    }

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
   15080:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   15084:	0799      	lsls	r1, r3, #30
   15086:	d503      	bpl.n	15090 <StopRetransmission.isra.0+0x5c>
   15088:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1508c:	2b01      	cmp	r3, #1
   1508e:	d907      	bls.n	150a0 <StopRetransmission.isra.0+0x6c>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
   15090:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
   15094:	b123      	cbz	r3, 150a0 <StopRetransmission.isra.0+0x6c>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
   15096:	6bab      	ldr	r3, [r5, #56]	; 0x38
    if( counter < ADR_ACK_COUNTER_MAX )
   15098:	1c5a      	adds	r2, r3, #1
        counter++;
   1509a:	bf18      	it	ne
   1509c:	3301      	addne	r3, #1
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
   1509e:	63ab      	str	r3, [r5, #56]	; 0x38
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
   150a0:	2300      	movs	r3, #0
   150a2:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
   150a6:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   150aa:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   150ae:	f023 0302 	bic.w	r3, r3, #2
   150b2:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return true;
}
   150b6:	b003      	add	sp, #12
   150b8:	bd30      	pop	{r4, r5, pc}
   150ba:	bf00      	nop
   150bc:	2002fbf0 	.word	0x2002fbf0
   150c0:	2003004c 	.word	0x2003004c

000150c4 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
   150c4:	4b07      	ldr	r3, [pc, #28]	; (150e4 <LoRaMacIsBusy+0x20>)
   150c6:	781b      	ldrb	r3, [r3, #0]
   150c8:	07db      	lsls	r3, r3, #31
   150ca:	d409      	bmi.n	150e0 <LoRaMacIsBusy+0x1c>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
   150cc:	4b06      	ldr	r3, [pc, #24]	; (150e8 <LoRaMacIsBusy+0x24>)
   150ce:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
   150d2:	b92a      	cbnz	r2, 150e0 <LoRaMacIsBusy+0x1c>
   150d4:	f893 048e 	ldrb.w	r0, [r3, #1166]	; 0x48e
   150d8:	3801      	subs	r0, #1
   150da:	bf18      	it	ne
   150dc:	2001      	movne	r0, #1
   150de:	4770      	bx	lr
        return true;
   150e0:	2001      	movs	r0, #1
}
   150e2:	4770      	bx	lr
   150e4:	2002fb5c 	.word	0x2002fb5c
   150e8:	2003004c 	.word	0x2003004c

000150ec <PrepareFrame>:
{
   150ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   150f0:	4690      	mov	r8, r2
    MacCtx.PktBufferLen = 0;
   150f2:	2200      	movs	r2, #0
        fBufferSize = 0;
   150f4:	1e1d      	subs	r5, r3, #0
{
   150f6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
        fBufferSize = 0;
   150fa:	bf08      	it	eq
   150fc:	4691      	moveq	r9, r2
{
   150fe:	4607      	mov	r7, r0
    MacCtx.PktBufferLen = 0;
   15100:	4c49      	ldr	r4, [pc, #292]	; (15228 <PrepareFrame+0x13c>)
    size_t macCmdsSize = 0;
   15102:	e9cd 2200 	strd	r2, r2, [sp]
    MacCtx.PktBufferLen = 0;
   15106:	8022      	strh	r2, [r4, #0]
    MacCtx.NodeAckRequested = false;
   15108:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
{
   1510c:	460e      	mov	r6, r1
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
   1510e:	464a      	mov	r2, r9
   15110:	4629      	mov	r1, r5
   15112:	f504 709c 	add.w	r0, r4, #312	; 0x138
   15116:	f016 fc9c 	bl	2ba52 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
   1511a:	fa5f f289 	uxtb.w	r2, r9
   1511e:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
   15122:	783b      	ldrb	r3, [r7, #0]
   15124:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
   15126:	783b      	ldrb	r3, [r7, #0]
   15128:	095b      	lsrs	r3, r3, #5
   1512a:	2b04      	cmp	r3, #4
   1512c:	d007      	beq.n	1513e <PrepareFrame+0x52>
   1512e:	2b07      	cmp	r3, #7
   15130:	d069      	beq.n	15206 <PrepareFrame+0x11a>
   15132:	2b02      	cmp	r3, #2
   15134:	d006      	beq.n	15144 <PrepareFrame+0x58>
   15136:	2002      	movs	r0, #2
}
   15138:	b003      	add	sp, #12
   1513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.NodeAckRequested = true;
   1513e:	2301      	movs	r3, #1
   15140:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
   15144:	2304      	movs	r3, #4
   15146:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   1514a:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
   1514c:	4d37      	ldr	r5, [pc, #220]	; (1522c <PrepareFrame+0x140>)
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   1514e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
   15152:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
   15156:	783b      	ldrb	r3, [r7, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   15158:	4f35      	ldr	r7, [pc, #212]	; (15230 <PrepareFrame+0x144>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
   1515a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   1515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
            MacCtx.TxMsg.Message.Data.FPort = fPort;
   15162:	f884 8128 	strb.w	r8, [r4, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   15166:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   1516a:	7833      	ldrb	r3, [r6, #0]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   1516c:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   1516e:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
   15172:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
   15176:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
   1517a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   1517e:	f002 ff47 	bl	18010 <LoRaMacCryptoGetFCntUp>
   15182:	2800      	cmp	r0, #0
   15184:	d14e      	bne.n	15224 <PrepareFrame+0x138>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
   15186:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.AckReceived = false;
   15188:	f8a4 0448 	strh.w	r0, [r4, #1096]	; 0x448
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   1518c:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
   1518e:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
   15192:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   15196:	f002 fcf3 	bl	17b80 <LoRaMacCommandsGetSizeSerializedCmds>
   1519a:	2800      	cmp	r0, #0
   1519c:	d140      	bne.n	15220 <PrepareFrame+0x134>
            if( macCmdsSize > 0 )
   1519e:	9b01      	ldr	r3, [sp, #4]
   151a0:	b90b      	cbnz	r3, 151a6 <PrepareFrame+0xba>
    return LORAMAC_STATUS_OK;
   151a2:	2000      	movs	r0, #0
   151a4:	e7c8      	b.n	15138 <PrepareFrame+0x4c>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
   151a6:	f997 0049 	ldrsb.w	r0, [r7, #73]	; 0x49
   151aa:	f7ff fc9d 	bl	14ae8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
   151ae:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
   151b2:	b1cb      	cbz	r3, 151e8 <PrepareFrame+0xfc>
   151b4:	9b01      	ldr	r3, [sp, #4]
   151b6:	2b0f      	cmp	r3, #15
   151b8:	d80e      	bhi.n	151d8 <PrepareFrame+0xec>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
   151ba:	200f      	movs	r0, #15
   151bc:	f505 728b 	add.w	r2, r5, #278	; 0x116
   151c0:	a901      	add	r1, sp, #4
   151c2:	f002 fce9 	bl	17b98 <LoRaMacCommandsSerializeCmds>
   151c6:	bb58      	cbnz	r0, 15220 <PrepareFrame+0x134>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
   151c8:	7833      	ldrb	r3, [r6, #0]
   151ca:	9a01      	ldr	r2, [sp, #4]
   151cc:	f362 0303 	bfi	r3, r2, #0, #4
   151d0:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   151d2:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
   151d6:	e7e4      	b.n	151a2 <PrepareFrame+0xb6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
   151d8:	f205 5202 	addw	r2, r5, #1282	; 0x502
   151dc:	a901      	add	r1, sp, #4
   151de:	f002 fcdb 	bl	17b98 <LoRaMacCommandsSerializeCmds>
   151e2:	b9e8      	cbnz	r0, 15220 <PrepareFrame+0x134>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
   151e4:	200a      	movs	r0, #10
   151e6:	e7a7      	b.n	15138 <PrepareFrame+0x4c>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
   151e8:	f205 5502 	addw	r5, r5, #1282	; 0x502
   151ec:	462a      	mov	r2, r5
   151ee:	a901      	add	r1, sp, #4
   151f0:	f002 fcd2 	bl	17b98 <LoRaMacCommandsSerializeCmds>
   151f4:	b9a0      	cbnz	r0, 15220 <PrepareFrame+0x134>
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
   151f6:	9b01      	ldr	r3, [sp, #4]
                    MacCtx.TxMsg.Message.Data.FPort = 0;
   151f8:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
   151fc:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
   15200:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   15204:	e7cd      	b.n	151a2 <PrepareFrame+0xb6>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
   15206:	2d00      	cmp	r5, #0
   15208:	d0cb      	beq.n	151a2 <PrepareFrame+0xb6>
   1520a:	2a00      	cmp	r2, #0
   1520c:	d0c9      	beq.n	151a2 <PrepareFrame+0xb6>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
   1520e:	4629      	mov	r1, r5
   15210:	1ce0      	adds	r0, r4, #3
   15212:	f016 fc1e 	bl	2ba52 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
   15216:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
   1521a:	3301      	adds	r3, #1
   1521c:	8023      	strh	r3, [r4, #0]
   1521e:	e7c0      	b.n	151a2 <PrepareFrame+0xb6>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   15220:	2013      	movs	r0, #19
   15222:	e789      	b.n	15138 <PrepareFrame+0x4c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
   15224:	2012      	movs	r0, #18
   15226:	e787      	b.n	15138 <PrepareFrame+0x4c>
   15228:	2003004c 	.word	0x2003004c
   1522c:	2003004e 	.word	0x2003004e
   15230:	2002fbf0 	.word	0x2002fbf0

00015234 <SendFrameOnChannel>:
    int8_t txPower = 0;
   15234:	2300      	movs	r3, #0
{
   15236:	b570      	push	{r4, r5, r6, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15238:	4d4a      	ldr	r5, [pc, #296]	; (15364 <SendFrameOnChannel+0x130>)
{
   1523a:	b086      	sub	sp, #24
    int8_t txPower = 0;
   1523c:	f88d 3003 	strb.w	r3, [sp, #3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15240:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    txConfig.PktLen = MacCtx.PktBufferLen;
   15244:	4c48      	ldr	r4, [pc, #288]	; (15368 <SendFrameOnChannel+0x134>)
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15246:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
   1524a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
{
   1524e:	4606      	mov	r6, r0
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
   15250:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
   15254:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    txConfig.Channel = channel;
   15258:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
   1525c:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   1525e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   15262:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   15266:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
   15268:	8823      	ldrh	r3, [r4, #0]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   1526a:	f10d 0203 	add.w	r2, sp, #3
    txConfig.PktLen = MacCtx.PktBufferLen;
   1526e:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   15272:	a902      	add	r1, sp, #8
   15274:	f204 431c 	addw	r3, r4, #1052	; 0x41c
   15278:	f017 fc11 	bl	2ca9e <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   1527c:	2301      	movs	r3, #1
   1527e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15282:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    MacCtx.McpsConfirm.Channel = channel;
   15286:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   1528a:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
   1528e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15292:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
   15296:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
   1529a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
   1529e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
   152a2:	f017 f8a5 	bl	2c3f0 <LoRaMacClassBIsBeaconModeActive>
   152a6:	b9b0      	cbnz	r0, 152d6 <SendFrameOnChannel+0xa2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   152a8:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   152ac:	2b01      	cmp	r3, #1
   152ae:	d101      	bne.n	152b4 <SendFrameOnChannel+0x80>
        LoRaMacClassBStopRxSlots( );
   152b0:	f017 f8b2 	bl	2c418 <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
   152b4:	f017 f89f 	bl	2c3f6 <LoRaMacClassBHaltBeaconing>
    uint32_t fCntUp = 0;
   152b8:	2300      	movs	r3, #0
   152ba:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
   152bc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
   152c0:	f995 5049 	ldrsb.w	r5, [r5, #73]	; 0x49
   152c4:	f894 641b 	ldrb.w	r6, [r4, #1051]	; 0x41b
    switch( MacCtx.TxMsg.Type )
   152c8:	2b04      	cmp	r3, #4
   152ca:	d80c      	bhi.n	152e6 <SendFrameOnChannel+0xb2>
   152cc:	e8df f003 	tbb	[pc, r3]
   152d0:	0b312d0e 	.word	0x0b312d0e
   152d4:	35          	.byte	0x35
   152d5:	00          	.byte	0x00
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
   152d6:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
   152da:	f017 f89b 	bl	2c414 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
   152de:	2800      	cmp	r0, #0
   152e0:	d0e2      	beq.n	152a8 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
   152e2:	2010      	movs	r0, #16
   152e4:	e000      	b.n	152e8 <SendFrameOnChannel+0xb4>
            return LORAMAC_STATUS_PARAMETER_INVALID;
   152e6:	2003      	movs	r0, #3
}
   152e8:	b006      	add	sp, #24
   152ea:	bd70      	pop	{r4, r5, r6, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
   152ec:	481f      	ldr	r0, [pc, #124]	; (1536c <SendFrameOnChannel+0x138>)
   152ee:	f002 fec9 	bl	18084 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
   152f2:	2800      	cmp	r0, #0
   152f4:	d132      	bne.n	1535c <SendFrameOnChannel+0x128>
    MacCtx.ResponseTimeoutStartTime = 0;
   152f6:	2500      	movs	r5, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   152f8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   152fc:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   15300:	f043 0302 	orr.w	r3, r3, #2
   15304:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
   15308:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   1530c:	4818      	ldr	r0, [pc, #96]	; (15370 <SendFrameOnChannel+0x13c>)
    MacCtx.ChannelsNbTransCounter++;
   1530e:	3301      	adds	r3, #1
   15310:	b2db      	uxtb	r3, r3
   15312:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
   15316:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   1531a:	4b16      	ldr	r3, [pc, #88]	; (15374 <SendFrameOnChannel+0x140>)
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin1.BufSize;
   1531c:	8021      	strh	r1, [r4, #0]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   1531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    MacCtx.ResponseTimeoutStartTime = 0;
   15320:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   15324:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
   15326:	4628      	mov	r0, r5
   15328:	e7de      	b.n	152e8 <SendFrameOnChannel+0xb4>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType1( &MacCtx.TxMsg.Message.ReJoin1 );
   1532a:	4810      	ldr	r0, [pc, #64]	; (1536c <SendFrameOnChannel+0x138>)
   1532c:	f002 ff00 	bl	18130 <LoRaMacCryptoPrepareReJoinType1>
   15330:	e7df      	b.n	152f2 <SendFrameOnChannel+0xbe>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType0or2( &MacCtx.TxMsg.Message.ReJoin0or2 );
   15332:	480e      	ldr	r0, [pc, #56]	; (1536c <SendFrameOnChannel+0x138>)
   15334:	f002 ff28 	bl	18188 <LoRaMacCryptoPrepareReJoinType0or2>
   15338:	e7db      	b.n	152f2 <SendFrameOnChannel+0xbe>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   1533a:	a801      	add	r0, sp, #4
   1533c:	f002 fe68 	bl	18010 <LoRaMacCryptoGetFCntUp>
   15340:	b970      	cbnz	r0, 15360 <SendFrameOnChannel+0x12c>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
   15342:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
   15346:	b113      	cbz	r3, 1534e <SendFrameOnChannel+0x11a>
                fCntUp -= 1;
   15348:	9b01      	ldr	r3, [sp, #4]
   1534a:	3b01      	subs	r3, #1
   1534c:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
   1534e:	4632      	mov	r2, r6
   15350:	4b06      	ldr	r3, [pc, #24]	; (1536c <SendFrameOnChannel+0x138>)
   15352:	9801      	ldr	r0, [sp, #4]
   15354:	b2e9      	uxtb	r1, r5
   15356:	f002 ff41 	bl	181dc <LoRaMacCryptoSecureMessage>
   1535a:	e7ca      	b.n	152f2 <SendFrameOnChannel+0xbe>
                return LORAMAC_STATUS_CRYPTO_ERROR;
   1535c:	2011      	movs	r0, #17
   1535e:	e7c3      	b.n	152e8 <SendFrameOnChannel+0xb4>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
   15360:	2012      	movs	r0, #18
   15362:	e7c1      	b.n	152e8 <SendFrameOnChannel+0xb4>
   15364:	2002fbf0 	.word	0x2002fbf0
   15368:	2003004c 	.word	0x2003004c
   1536c:	20030154 	.word	0x20030154
   15370:	2003004e 	.word	0x2003004e
   15374:	000338dc 	.word	0x000338dc

00015378 <ScheduleTx>:
{
   15378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1537c:	b08e      	sub	sp, #56	; 0x38
   1537e:	4607      	mov	r7, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
   15380:	f017 f830 	bl	2c3e4 <LoRaMacClassBIsBeaconExpected>
   15384:	2800      	cmp	r0, #0
   15386:	f040 80d3 	bne.w	15530 <ScheduleTx+0x1b8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   1538a:	4c6a      	ldr	r4, [pc, #424]	; (15534 <ScheduleTx+0x1bc>)
   1538c:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   15390:	2b01      	cmp	r3, #1
   15392:	d009      	beq.n	153a8 <ScheduleTx+0x30>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
   15394:	6c23      	ldr	r3, [r4, #64]	; 0x40
   15396:	4d68      	ldr	r5, [pc, #416]	; (15538 <ScheduleTx+0x1c0>)
   15398:	b19b      	cbz	r3, 153c2 <ScheduleTx+0x4a>
    switch( MacCtx.TxMsg.Type )
   1539a:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   1539e:	b1c3      	cbz	r3, 153d2 <ScheduleTx+0x5a>
   153a0:	2b04      	cmp	r3, #4
   153a2:	d01c      	beq.n	153de <ScheduleTx+0x66>
   153a4:	2603      	movs	r6, #3
   153a6:	e003      	b.n	153b0 <ScheduleTx+0x38>
        if( LoRaMacClassBIsPingExpected( ) == true )
   153a8:	f017 f81e 	bl	2c3e8 <LoRaMacClassBIsPingExpected>
   153ac:	b120      	cbz	r0, 153b8 <ScheduleTx+0x40>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
   153ae:	260f      	movs	r6, #15
}
   153b0:	4630      	mov	r0, r6
   153b2:	b00e      	add	sp, #56	; 0x38
   153b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
   153b8:	f017 f818 	bl	2c3ec <LoRaMacClassBIsMulticastExpected>
   153bc:	2800      	cmp	r0, #0
   153be:	d0e9      	beq.n	15394 <ScheduleTx+0x1c>
   153c0:	e7f5      	b.n	153ae <ScheduleTx+0x36>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
   153c2:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   153c6:	f8d5 241c 	ldr.w	r2, [r5, #1052]	; 0x41c
   153ca:	3b01      	subs	r3, #1
   153cc:	4353      	muls	r3, r2
   153ce:	6423      	str	r3, [r4, #64]	; 0x40
   153d0:	e7e3      	b.n	1539a <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
   153d2:	485a      	ldr	r0, [pc, #360]	; (1553c <ScheduleTx+0x1c4>)
   153d4:	f017 fa0d 	bl	2c7f2 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
   153d8:	b128      	cbz	r0, 153e6 <ScheduleTx+0x6e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
   153da:	2611      	movs	r6, #17
   153dc:	e7e8      	b.n	153b0 <ScheduleTx+0x38>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
   153de:	4857      	ldr	r0, [pc, #348]	; (1553c <ScheduleTx+0x1c4>)
   153e0:	f017 faab 	bl	2c93a <LoRaMacSerializerData>
   153e4:	e7f8      	b.n	153d8 <ScheduleTx+0x60>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   153e6:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   153ea:	f10d 0818 	add.w	r8, sp, #24
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   153ee:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
   153f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   153f2:	4640      	mov	r0, r8
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
   153f4:	9308      	str	r3, [sp, #32]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   153f6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   153fa:	ae02      	add	r6, sp, #8
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   153fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
   15400:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   15404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   15408:	f016 fbb8 	bl	2bb7c <SysTimeGetMcuTime>
   1540c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   15410:	4630      	mov	r0, r6
   15412:	9300      	str	r3, [sp, #0]
   15414:	e898 0006 	ldmia.w	r8, {r1, r2}
   15418:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
   1541c:	f016 fb4f 	bl	2babe <SysTimeSub>
   15420:	e896 0003 	ldmia.w	r6, {r0, r1}
   15424:	ab0b      	add	r3, sp, #44	; 0x2c
   15426:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
   1542a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    nextChan.Joined = true;
   1542c:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
   1542e:	9309      	str	r3, [sp, #36]	; 0x24
    nextChan.LastTxIsJoinRequest = false;
   15430:	2300      	movs	r3, #0
   15432:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    nextChan.PktLen = MacCtx.PktBufferLen;
   15436:	882b      	ldrh	r3, [r5, #0]
    nextChan.Joined = true;
   15438:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    nextChan.PktLen = MacCtx.PktBufferLen;
   1543c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   15440:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
   15444:	b91b      	cbnz	r3, 1544e <ScheduleTx+0xd6>
        nextChan.LastTxIsJoinRequest = true;
   15446:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
        nextChan.Joined = false;
   1544a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
   1544e:	4b3c      	ldr	r3, [pc, #240]	; (15540 <ScheduleTx+0x1c8>)
   15450:	a908      	add	r1, sp, #32
   15452:	9300      	str	r3, [sp, #0]
   15454:	4b3b      	ldr	r3, [pc, #236]	; (15544 <ScheduleTx+0x1cc>)
   15456:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   1545a:	f1a3 02e1 	sub.w	r2, r3, #225	; 0xe1
   1545e:	f017 fb60 	bl	2cb22 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
   15462:	4606      	mov	r6, r0
   15464:	b1a0      	cbz	r0, 15490 <ScheduleTx+0x118>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
   15466:	280b      	cmp	r0, #11
   15468:	d1a2      	bne.n	153b0 <ScheduleTx+0x38>
   1546a:	2f00      	cmp	r7, #0
   1546c:	d0a0      	beq.n	153b0 <ScheduleTx+0x38>
            if( MacCtx.DutyCycleWaitTime != 0 )
   1546e:	f8d5 14fc 	ldr.w	r1, [r5, #1276]	; 0x4fc
   15472:	b159      	cbz	r1, 1548c <ScheduleTx+0x114>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
   15474:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
   15478:	4833      	ldr	r0, [pc, #204]	; (15548 <ScheduleTx+0x1d0>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
   1547a:	f043 0320 	orr.w	r3, r3, #32
   1547e:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
   15482:	f016 fbea 	bl	2bc5a <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
   15486:	4830      	ldr	r0, [pc, #192]	; (15548 <ScheduleTx+0x1d0>)
   15488:	f7fd fdbc 	bl	13004 <TimerStart>
            return LORAMAC_STATUS_OK;
   1548c:	2600      	movs	r6, #0
   1548e:	e78f      	b.n	153b0 <ScheduleTx+0x38>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   15490:	f894 8058 	ldrb.w	r8, [r4, #88]	; 0x58
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
   15494:	f994 3079 	ldrsb.w	r3, [r4, #121]	; 0x79
   15498:	f994 2049 	ldrsb.w	r2, [r4, #73]	; 0x49
   1549c:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   154a0:	4640      	mov	r0, r8
   154a2:	f017 fb4c 	bl	2cb3e <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   154a6:	4f29      	ldr	r7, [pc, #164]	; (1554c <ScheduleTx+0x1d4>)
   154a8:	b241      	sxtb	r1, r0
   154aa:	9700      	str	r7, [sp, #0]
   154ac:	4640      	mov	r0, r8
   154ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   154b0:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   154b4:	3714      	adds	r7, #20
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   154b6:	f017 fadc 	bl	2ca72 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   154ba:	9700      	str	r7, [sp, #0]
   154bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   154be:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   154c2:	f994 1080 	ldrsb.w	r1, [r4, #128]	; 0x80
   154c6:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   154ca:	f017 fad2 	bl	2ca72 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   154ce:	f8d5 13cc 	ldr.w	r1, [r5, #972]	; 0x3cc
   154d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   154d4:	f8d5 23e0 	ldr.w	r2, [r5, #992]	; 0x3e0
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   154d8:	440b      	add	r3, r1
   154da:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   154de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   154e0:	4413      	add	r3, r2
   154e2:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   154e6:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
   154ea:	b96b      	cbnz	r3, 15508 <ScheduleTx+0x190>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   154ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
   154ee:	440b      	add	r3, r1
   154f0:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   154f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   154f6:	4413      	add	r3, r2
   154f8:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    return SendFrameOnChannel( MacCtx.Channel );
   154fc:	f895 041b 	ldrb.w	r0, [r5, #1051]	; 0x41b
   15500:	f7ff fe98 	bl	15234 <SendFrameOnChannel>
   15504:	4606      	mov	r6, r0
   15506:	e753      	b.n	153b0 <ScheduleTx+0x38>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   15508:	a805      	add	r0, sp, #20
    size_t macCmdsSize = 0;
   1550a:	9605      	str	r6, [sp, #20]
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   1550c:	f002 fb38 	bl	17b80 <LoRaMacCommandsGetSizeSerializedCmds>
   15510:	b960      	cbnz	r0, 1552c <ScheduleTx+0x1b4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
   15512:	f994 0049 	ldrsb.w	r0, [r4, #73]	; 0x49
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
   15516:	f895 6237 	ldrb.w	r6, [r5, #567]	; 0x237
   1551a:	f89d 7014 	ldrb.w	r7, [sp, #20]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
   1551e:	f7ff fae3 	bl	14ae8 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
   15522:	443e      	add	r6, r7
   15524:	42b0      	cmp	r0, r6
   15526:	d2e9      	bcs.n	154fc <ScheduleTx+0x184>
            return LORAMAC_STATUS_LENGTH_ERROR;
   15528:	2608      	movs	r6, #8
   1552a:	e741      	b.n	153b0 <ScheduleTx+0x38>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   1552c:	2613      	movs	r6, #19
   1552e:	e73f      	b.n	153b0 <ScheduleTx+0x38>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
   15530:	260e      	movs	r6, #14
   15532:	e73d      	b.n	153b0 <ScheduleTx+0x38>
   15534:	2002fbf0 	.word	0x2002fbf0
   15538:	2003004c 	.word	0x2003004c
   1553c:	20030154 	.word	0x20030154
   15540:	2002fc30 	.word	0x2002fc30
   15544:	20030548 	.word	0x20030548
   15548:	200303bc 	.word	0x200303bc
   1554c:	2003040c 	.word	0x2003040c

00015550 <OnTxDelayedTimerEvent>:
{
   15550:	b510      	push	{r4, lr}
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   15552:	4c18      	ldr	r4, [pc, #96]	; (155b4 <OnTxDelayedTimerEvent+0x64>)
    TimerStop( &MacCtx.TxDelayedTimer );
   15554:	4818      	ldr	r0, [pc, #96]	; (155b8 <OnTxDelayedTimerEvent+0x68>)
   15556:	f7fd fdcb 	bl	130f0 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   1555a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
   1555e:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   15562:	f023 0320 	bic.w	r3, r3, #32
   15566:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( startTimeInMs != 0 )
   1556a:	b148      	cbz	r0, 15580 <OnTxDelayedTimerEvent+0x30>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
   1556c:	f016 fb8d 	bl	2bc8a <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
   15570:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   15574:	d904      	bls.n	15580 <OnTxDelayedTimerEvent+0x30>
            Nvm.MacGroup1.SrvAckRequested = false;
   15576:	2200      	movs	r2, #0
   15578:	4b10      	ldr	r3, [pc, #64]	; (155bc <OnTxDelayedTimerEvent+0x6c>)
   1557a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   1557e:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
   15580:	2001      	movs	r0, #1
   15582:	f7ff fef9 	bl	15378 <ScheduleTx>
   15586:	2800      	cmp	r0, #0
   15588:	d0f9      	beq.n	1557e <OnTxDelayedTimerEvent+0x2e>
   1558a:	280b      	cmp	r0, #11
   1558c:	d0f7      	beq.n	1557e <OnTxDelayedTimerEvent+0x2e>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
   1558e:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15590:	4b0a      	ldr	r3, [pc, #40]	; (155bc <OnTxDelayedTimerEvent+0x6c>)
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
   15592:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15596:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   1559a:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
   1559e:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
   155a2:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
   155a6:	f002 fbbf 	bl	17d28 <LoRaMacConfirmQueueSetStatusCmn>
}
   155aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
   155ae:	f7ff bd41 	b.w	15034 <StopRetransmission.isra.0>
   155b2:	bf00      	nop
   155b4:	2003004c 	.word	0x2003004c
   155b8:	200303bc 	.word	0x200303bc
   155bc:	2002fbf0 	.word	0x2002fbf0

000155c0 <Send>:
{
   155c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   155c4:	4c3b      	ldr	r4, [pc, #236]	; (156b4 <Send+0xf4>)
   155c6:	460e      	mov	r6, r1
   155c8:	4617      	mov	r7, r2
   155ca:	4699      	mov	r9, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   155cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   155ce:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   155d2:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
{
   155d6:	b08b      	sub	sp, #44	; 0x2c
   155d8:	4605      	mov	r5, r0
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
   155da:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
   155de:	ba5b      	rev16	r3, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   155e0:	9104      	str	r1, [sp, #16]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   155e2:	2a00      	cmp	r2, #0
   155e4:	d064      	beq.n	156b0 <Send+0xf0>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
   155e6:	f894 21a3 	ldrb.w	r2, [r4, #419]	; 0x1a3
   155ea:	b902      	cbnz	r2, 155ee <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
   155ec:	6422      	str	r2, [r4, #64]	; 0x40
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
   155ee:	f04f 0200 	mov.w	r2, #0
   155f2:	f894 01a2 	ldrb.w	r0, [r4, #418]	; 0x1a2
   155f6:	f360 12c7 	bfi	r2, r0, #7, #1
   155fa:	f88d 200c 	strb.w	r2, [sp, #12]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   155fe:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
   15602:	2a01      	cmp	r2, #1
        fCtrl.Bits.FPending      = 1;
   15604:	bf02      	ittt	eq
   15606:	f89d 200c 	ldrbeq.w	r2, [sp, #12]
   1560a:	f042 0210 	orreq.w	r2, r2, #16
   1560e:	f88d 200c 	strbeq.w	r2, [sp, #12]
    if( Nvm.MacGroup1.SrvAckRequested == true )
   15612:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   15616:	b12a      	cbz	r2, 15624 <Send+0x64>
        fCtrl.Bits.Ack = 1;
   15618:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1561c:	f042 0220 	orr.w	r2, r2, #32
   15620:	f88d 200c 	strb.w	r2, [sp, #12]
    adrNext.UpdateChanMask = true;
   15624:	2201      	movs	r2, #1
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15626:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   1562a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    adrNext.UpdateChanMask = true;
   1562e:	f88d 2014 	strb.w	r2, [sp, #20]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15632:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15636:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   1563a:	4a1f      	ldr	r2, [pc, #124]	; (156b8 <Send+0xf8>)
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1563c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
   15640:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   15644:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
    adrNext.Region = Nvm.MacGroup2.Region;
   15648:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   1564c:	ab04      	add	r3, sp, #16
   1564e:	9300      	str	r3, [sp, #0]
   15650:	4b1a      	ldr	r3, [pc, #104]	; (156bc <Send+0xfc>)
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
   15652:	f88d 0015 	strb.w	r0, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   15656:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   15658:	9207      	str	r2, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   1565a:	f1a3 012f 	sub.w	r1, r3, #47	; 0x2f
   1565e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15662:	a805      	add	r0, sp, #20
   15664:	f016 fe45 	bl	2c2f2 <LoRaMacAdrCalcNext>
   15668:	f89d 300c 	ldrb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
   1566c:	4632      	mov	r2, r6
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   1566e:	f360 1386 	bfi	r3, r0, #6, #1
   15672:	f88d 300c 	strb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
   15676:	4628      	mov	r0, r5
   15678:	463b      	mov	r3, r7
   1567a:	f8cd 9000 	str.w	r9, [sp]
   1567e:	a903      	add	r1, sp, #12
   15680:	f7ff fd34 	bl	150ec <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
   15684:	b108      	cbz	r0, 1568a <Send+0xca>
   15686:	280a      	cmp	r0, #10
   15688:	d103      	bne.n	15692 <Send+0xd2>
        status = ScheduleTx( false );
   1568a:	2000      	movs	r0, #0
   1568c:	f7ff fe74 	bl	15378 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
   15690:	b120      	cbz	r0, 1569c <Send+0xdc>
        Nvm.MacGroup1.ChannelsTxPower = txPower;
   15692:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
}
   15696:	b00b      	add	sp, #44	; 0x2c
   15698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
   1569c:	9b04      	ldr	r3, [sp, #16]
        Nvm.MacGroup1.SrvAckRequested = false;
   1569e:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
   156a2:	63a3      	str	r3, [r4, #56]	; 0x38
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
   156a4:	f002 fa4c 	bl	17b40 <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   156a8:	2800      	cmp	r0, #0
   156aa:	bf18      	it	ne
   156ac:	2013      	movne	r0, #19
   156ae:	e7f2      	b.n	15696 <Send+0xd6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
   156b0:	2007      	movs	r0, #7
   156b2:	e7f0      	b.n	15696 <Send+0xd6>
   156b4:	2002fbf0 	.word	0x2002fbf0
   156b8:	2003004c 	.word	0x2003004c
   156bc:	2002fc68 	.word	0x2002fc68

000156c0 <SendReJoinReq>:
    switch( joinReqType )
   156c0:	2802      	cmp	r0, #2
{
   156c2:	b570      	push	{r4, r5, r6, lr}
   156c4:	4604      	mov	r4, r0
    switch( joinReqType )
   156c6:	d001      	beq.n	156cc <SendReJoinReq+0xc>
   156c8:	d82b      	bhi.n	15722 <SendReJoinReq+0x62>
   156ca:	bb88      	cbnz	r0, 15730 <SendReJoinReq+0x70>
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   156cc:	2201      	movs	r2, #1
   156ce:	4b3c      	ldr	r3, [pc, #240]	; (157c0 <SendReJoinReq+0x100>)
   156d0:	4d3c      	ldr	r5, [pc, #240]	; (157c4 <SendReJoinReq+0x104>)
   156d2:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
   156d6:	2202      	movs	r2, #2
   156d8:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
   156dc:	18aa      	adds	r2, r5, r2
            if( joinReqType == REJOIN_REQ_0 )
   156de:	3c00      	subs	r4, #0
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
   156e0:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   156e4:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
            if( joinReqType == REJOIN_REQ_0 )
   156e8:	bf18      	it	ne
   156ea:	2401      	movne	r4, #1
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
   156ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   156f0:	f8a5 210c 	strh.w	r2, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
   156f4:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
   156f8:	0a1a      	lsrs	r2, r3, #8
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
   156fa:	0c1b      	lsrs	r3, r3, #16
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
   156fc:	f885 2110 	strb.w	r2, [r5, #272]	; 0x110
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
   15700:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
            if( joinReqType == REJOIN_REQ_0 )
   15704:	0064      	lsls	r4, r4, #1
   15706:	f885 410e 	strb.w	r4, [r5, #270]	; 0x10e
            memcpy1( MacCtx.TxMsg.Message.ReJoin0or2.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   1570a:	f7ff f977 	bl	149fc <SecureElementGetDevEui>
   1570e:	2208      	movs	r2, #8
   15710:	4601      	mov	r1, r0
   15712:	f505 7089 	add.w	r0, r5, #274	; 0x112
   15716:	f016 f99c 	bl	2ba52 <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
   1571a:	2008      	movs	r0, #8
   1571c:	f505 718d 	add.w	r1, r5, #282	; 0x11a
   15720:	e029      	b.n	15776 <SendReJoinReq+0xb6>
    switch( joinReqType )
   15722:	28ff      	cmp	r0, #255	; 0xff
   15724:	d02d      	beq.n	15782 <SendReJoinReq+0xc2>
{
   15726:	2001      	movs	r0, #1
}
   15728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = ScheduleTx( allowDelayedTx );
   1572c:	f7ff be24 	b.w	15378 <ScheduleTx>
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   15730:	2301      	movs	r3, #1
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
   15732:	4c24      	ldr	r4, [pc, #144]	; (157c4 <SendReJoinReq+0x104>)
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   15734:	4a22      	ldr	r2, [pc, #136]	; (157c0 <SendReJoinReq+0x100>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
   15736:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   1573a:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
   1573e:	1ca2      	adds	r2, r4, #2
   15740:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   15744:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
   15748:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.ReJoin1.ReJoinType = 1;
   1574c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
   15750:	f7ff f96a 	bl	14a28 <SecureElementGetJoinEui>
   15754:	2208      	movs	r2, #8
   15756:	4601      	mov	r1, r0
   15758:	f204 100f 	addw	r0, r4, #271	; 0x10f
   1575c:	f016 f979 	bl	2ba52 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   15760:	f7ff f94c 	bl	149fc <SecureElementGetDevEui>
   15764:	2208      	movs	r2, #8
   15766:	4601      	mov	r1, r0
   15768:	f204 1017 	addw	r0, r4, #279	; 0x117
   1576c:	f016 f971 	bl	2ba52 <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
   15770:	2009      	movs	r0, #9
   15772:	f504 7190 	add.w	r1, r4, #288	; 0x120
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
   15776:	f002 fc57 	bl	18028 <LoRaMacCryptoGetRJcount>
   1577a:	2800      	cmp	r0, #0
   1577c:	d0d3      	beq.n	15726 <SendReJoinReq+0x66>
}
   1577e:	2011      	movs	r0, #17
   15780:	bd70      	pop	{r4, r5, r6, pc}
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
   15782:	2600      	movs	r6, #0
   15784:	4d0f      	ldr	r5, [pc, #60]	; (157c4 <SendReJoinReq+0x104>)
            SwitchClass( CLASS_A );
   15786:	2000      	movs	r0, #0
   15788:	f7ff fb74 	bl	14e74 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
   1578c:	1cab      	adds	r3, r5, #2
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   1578e:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
   15792:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
   15796:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
   1579a:	f7ff f945 	bl	14a28 <SecureElementGetJoinEui>
   1579e:	2208      	movs	r2, #8
   157a0:	4601      	mov	r1, r0
   157a2:	f505 7087 	add.w	r0, r5, #270	; 0x10e
   157a6:	f016 f954 	bl	2ba52 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   157aa:	f7ff f927 	bl	149fc <SecureElementGetDevEui>
   157ae:	2208      	movs	r2, #8
   157b0:	4601      	mov	r1, r0
   157b2:	f505 708b 	add.w	r0, r5, #278	; 0x116
   157b6:	f016 f94c 	bl	2ba52 <memcpy1>
            allowDelayedTx = false;
   157ba:	4630      	mov	r0, r6
            break;
   157bc:	e7b4      	b.n	15728 <SendReJoinReq+0x68>
   157be:	bf00      	nop
   157c0:	2002fbf0 	.word	0x2002fbf0
   157c4:	2003004c 	.word	0x2003004c

000157c8 <OnForceRejoinReqCycleTimerEvent>:
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    TimerStart( &MacCtx.Rejoin2CycleTimer );
}

static void OnForceRejoinReqCycleTimerEvent( void* context )
{
   157c8:	b510      	push	{r4, lr}
    if( Nvm.MacGroup1.ForceRejoinRetriesCounter == Nvm.MacGroup2.ForceRejoinMaxRetries )
   157ca:	4c0e      	ldr	r4, [pc, #56]	; (15804 <OnForceRejoinReqCycleTimerEvent+0x3c>)
   157cc:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   157d0:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
   157d4:	429a      	cmp	r2, r3
   157d6:	d105      	bne.n	157e4 <OnForceRejoinReqCycleTimerEvent+0x1c>
    {
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   157d8:	480b      	ldr	r0, [pc, #44]	; (15808 <OnForceRejoinReqCycleTimerEvent+0x40>)
   157da:	f7fd fc89 	bl	130f0 <TimerStop>
        Nvm.MacGroup1.ForceRejoinRetriesCounter = 0;
   157de:	2300      	movs	r3, #0
   157e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    }

    Nvm.MacGroup1.ForceRejoinRetriesCounter ++;
   157e4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   157e8:	3301      	adds	r3, #1
   157ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   157ee:	f894 31c1 	ldrb.w	r3, [r4, #449]	; 0x1c1
    }
    else
    {
        SendReJoinReq( REJOIN_REQ_2 );
    }
}
   157f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   157f6:	2b01      	cmp	r3, #1
        SendReJoinReq( REJOIN_REQ_0 );
   157f8:	bf94      	ite	ls
   157fa:	2000      	movls	r0, #0
        SendReJoinReq( REJOIN_REQ_2 );
   157fc:	2002      	movhi	r0, #2
   157fe:	f7ff bf5f 	b.w	156c0 <SendReJoinReq>
   15802:	bf00      	nop
   15804:	2002fbf0 	.word	0x2002fbf0
   15808:	20030524 	.word	0x20030524

0001580c <OnRejoin2CycleTimerEvent>:
{
   1580c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin2CycleTimer );
   1580e:	480f      	ldr	r0, [pc, #60]	; (1584c <OnRejoin2CycleTimerEvent+0x40>)
   15810:	f7fd fc6e 	bl	130f0 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
   15814:	4b0e      	ldr	r3, [pc, #56]	; (15850 <OnRejoin2CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   15816:	4a0f      	ldr	r2, [pc, #60]	; (15854 <OnRejoin2CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
   15818:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
    if( rejoinCycleTime > 4294967 )
   1581c:	4c0e      	ldr	r4, [pc, #56]	; (15858 <OnRejoin2CycleTimerEvent+0x4c>)
   1581e:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   15820:	bf84      	itt	hi
   15822:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   15826:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_2 );
   15828:	f04f 0002 	mov.w	r0, #2
        *timeInMiliSec = rejoinCycleTime * 1000;
   1582c:	bf88      	it	hi
   1582e:	f8c4 34f8 	strhi.w	r3, [r4, #1272]	; 0x4f8
    SendReJoinReq( REJOIN_REQ_2 );
   15832:	f7ff ff45 	bl	156c0 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
   15836:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   1583a:	4804      	ldr	r0, [pc, #16]	; (1584c <OnRejoin2CycleTimerEvent+0x40>)
   1583c:	f016 fa0d 	bl	2bc5a <TimerSetValue>
}
   15840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin2CycleTimer );
   15844:	4801      	ldr	r0, [pc, #4]	; (1584c <OnRejoin2CycleTimerEvent+0x40>)
   15846:	f7fd bbdd 	b.w	13004 <TimerStart>
   1584a:	bf00      	nop
   1584c:	2003050c 	.word	0x2003050c
   15850:	2002fbf0 	.word	0x2002fbf0
   15854:	00418937 	.word	0x00418937
   15858:	2003004c 	.word	0x2003004c

0001585c <OnRejoin1CycleTimerEvent>:
{
   1585c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin1CycleTimer );
   1585e:	480f      	ldr	r0, [pc, #60]	; (1589c <OnRejoin1CycleTimerEvent+0x40>)
   15860:	f7fd fc46 	bl	130f0 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
   15864:	4b0e      	ldr	r3, [pc, #56]	; (158a0 <OnRejoin1CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   15866:	4a0f      	ldr	r2, [pc, #60]	; (158a4 <OnRejoin1CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
   15868:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
    if( rejoinCycleTime > 4294967 )
   1586c:	4c0e      	ldr	r4, [pc, #56]	; (158a8 <OnRejoin1CycleTimerEvent+0x4c>)
   1586e:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   15870:	bf84      	itt	hi
   15872:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   15876:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_1 );
   15878:	f04f 0001 	mov.w	r0, #1
        *timeInMiliSec = rejoinCycleTime * 1000;
   1587c:	bf88      	it	hi
   1587e:	f8c4 34f4 	strhi.w	r3, [r4, #1268]	; 0x4f4
    SendReJoinReq( REJOIN_REQ_1 );
   15882:	f7ff ff1d 	bl	156c0 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   15886:	f8d4 14f4 	ldr.w	r1, [r4, #1268]	; 0x4f4
   1588a:	4804      	ldr	r0, [pc, #16]	; (1589c <OnRejoin1CycleTimerEvent+0x40>)
   1588c:	f016 f9e5 	bl	2bc5a <TimerSetValue>
}
   15890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin1CycleTimer );
   15894:	4801      	ldr	r0, [pc, #4]	; (1589c <OnRejoin1CycleTimerEvent+0x40>)
   15896:	f7fd bbb5 	b.w	13004 <TimerStart>
   1589a:	bf00      	nop
   1589c:	200304f4 	.word	0x200304f4
   158a0:	2002fbf0 	.word	0x2002fbf0
   158a4:	00418937 	.word	0x00418937
   158a8:	2003004c 	.word	0x2003004c

000158ac <OnRejoin0CycleTimerEvent>:
{
   158ac:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin0CycleTimer );
   158ae:	480f      	ldr	r0, [pc, #60]	; (158ec <OnRejoin0CycleTimerEvent+0x40>)
   158b0:	f7fd fc1e 	bl	130f0 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
   158b4:	4b0e      	ldr	r3, [pc, #56]	; (158f0 <OnRejoin0CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   158b6:	4a0f      	ldr	r2, [pc, #60]	; (158f4 <OnRejoin0CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
   158b8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   158bc:	4c0e      	ldr	r4, [pc, #56]	; (158f8 <OnRejoin0CycleTimerEvent+0x4c>)
   158be:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   158c0:	bf84      	itt	hi
   158c2:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   158c6:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_0 );
   158c8:	f04f 0000 	mov.w	r0, #0
        *timeInMiliSec = rejoinCycleTime * 1000;
   158cc:	bf88      	it	hi
   158ce:	f8c4 34f0 	strhi.w	r3, [r4, #1264]	; 0x4f0
    SendReJoinReq( REJOIN_REQ_0 );
   158d2:	f7ff fef5 	bl	156c0 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   158d6:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
   158da:	4804      	ldr	r0, [pc, #16]	; (158ec <OnRejoin0CycleTimerEvent+0x40>)
   158dc:	f016 f9bd 	bl	2bc5a <TimerSetValue>
}
   158e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin0CycleTimer );
   158e4:	4801      	ldr	r0, [pc, #4]	; (158ec <OnRejoin0CycleTimerEvent+0x40>)
   158e6:	f7fd bb8d 	b.w	13004 <TimerStart>
   158ea:	bf00      	nop
   158ec:	200304dc 	.word	0x200304dc
   158f0:	2002fbf0 	.word	0x2002fbf0
   158f4:	00418937 	.word	0x00418937
   158f8:	2003004c 	.word	0x2003004c

000158fc <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   158fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t status = 0;
   15900:	f04f 0900 	mov.w	r9, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   15904:	b08f      	sub	sp, #60	; 0x3c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
   15906:	2b01      	cmp	r3, #1
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   15908:	4606      	mov	r6, r0
   1590a:	460f      	mov	r7, r1
   1590c:	4690      	mov	r8, r2
    uint8_t status = 0;
   1590e:	f88d 9009 	strb.w	r9, [sp, #9]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   15912:	f8ad 900c 	strh.w	r9, [sp, #12]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
   15916:	d802      	bhi.n	1591e <ProcessMacCommands.constprop.0+0x22>
   15918:	464c      	mov	r4, r9
    while( macIndex < commandsSize )
   1591a:	42bc      	cmp	r4, r7
   1591c:	d302      	bcc.n	15924 <ProcessMacCommands.constprop.0+0x28>
}
   1591e:	b00f      	add	sp, #60	; 0x3c
   15920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
   15924:	5d30      	ldrb	r0, [r6, r4]
   15926:	f002 f96b 	bl	17c00 <LoRaMacCommandsGetCmdSize>
   1592a:	4420      	add	r0, r4
   1592c:	42b8      	cmp	r0, r7
   1592e:	dcf6      	bgt.n	1591e <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
   15930:	5d33      	ldrb	r3, [r6, r4]
   15932:	1c65      	adds	r5, r4, #1
   15934:	3b01      	subs	r3, #1
   15936:	b2ed      	uxtb	r5, r5
   15938:	2b1f      	cmp	r3, #31
   1593a:	d8f0      	bhi.n	1591e <ProcessMacCommands.constprop.0+0x22>
   1593c:	a201      	add	r2, pc, #4	; (adr r2, 15944 <ProcessMacCommands.constprop.0+0x48>)
   1593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15942:	bf00      	nop
   15944:	000159c5 	.word	0x000159c5
   15948:	000159e5 	.word	0x000159e5
   1594c:	00015a0f 	.word	0x00015a0f
   15950:	00015b0d 	.word	0x00015b0d
   15954:	00015b35 	.word	0x00015b35
   15958:	00015bb5 	.word	0x00015bb5
   1595c:	00015bdb 	.word	0x00015bdb
   15960:	00015c41 	.word	0x00015c41
   15964:	00015c71 	.word	0x00015c71
   15968:	00015cff 	.word	0x00015cff
   1596c:	00015ceb 	.word	0x00015ceb
   15970:	00015d53 	.word	0x00015d53
   15974:	00015e57 	.word	0x00015e57
   15978:	00015d79 	.word	0x00015d79
   1597c:	00015de5 	.word	0x00015de5
   15980:	00015eff 	.word	0x00015eff
   15984:	00015f27 	.word	0x00015f27
   15988:	00015f79 	.word	0x00015f79
   1598c:	00015fad 	.word	0x00015fad
   15990:	0001591f 	.word	0x0001591f
   15994:	0001591f 	.word	0x0001591f
   15998:	0001591f 	.word	0x0001591f
   1599c:	0001591f 	.word	0x0001591f
   159a0:	0001591f 	.word	0x0001591f
   159a4:	0001591f 	.word	0x0001591f
   159a8:	0001591f 	.word	0x0001591f
   159ac:	0001591f 	.word	0x0001591f
   159b0:	0001591f 	.word	0x0001591f
   159b4:	0001591f 	.word	0x0001591f
   159b8:	0001591f 	.word	0x0001591f
   159bc:	0001591f 	.word	0x0001591f
   159c0:	00015e49 	.word	0x00015e49
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
   159c4:	4ba8      	ldr	r3, [pc, #672]	; (15c68 <ProcessMacCommands.constprop.0+0x36c>)
   159c6:	5d72      	ldrb	r2, [r6, r5]
   159c8:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
   159cc:	429a      	cmp	r2, r3
   159ce:	d806      	bhi.n	159de <ProcessMacCommands.constprop.0+0xe2>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   159d0:	2001      	movs	r0, #1
   159d2:	a905      	add	r1, sp, #20
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   159d4:	f002 f8a6 	bl	17b24 <LoRaMacCommandsGetCmd>
   159d8:	2800      	cmp	r0, #0
   159da:	f000 8238 	beq.w	15e4e <ProcessMacCommands.constprop.0+0x552>
                macIndex++;
   159de:	3402      	adds	r4, #2
   159e0:	b2e5      	uxtb	r5, r4
   159e2:	e012      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
   159e4:	2004      	movs	r0, #4
   159e6:	f002 f9b9 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   159ea:	b170      	cbz	r0, 15a0a <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
   159ec:	2104      	movs	r1, #4
   159ee:	2000      	movs	r0, #0
   159f0:	f002 f978 	bl	17ce4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
   159f4:	5d72      	ldrb	r2, [r6, r5]
   159f6:	4b9d      	ldr	r3, [pc, #628]	; (15c6c <ProcessMacCommands.constprop.0+0x370>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
   159f8:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
   159fa:	3402      	adds	r4, #2
   159fc:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
   15a00:	b2e4      	uxtb	r4, r4
   15a02:	5d32      	ldrb	r2, [r6, r4]
   15a04:	b2ed      	uxtb	r5, r5
   15a06:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                uint8_t eirpDwellTime = payload[macIndex++];
   15a0a:	462c      	mov	r4, r5
   15a0c:	e785      	b.n	1591a <ProcessMacCommands.constprop.0+0x1e>
                int8_t linkAdrDatarate = DR_0;
   15a0e:	2300      	movs	r3, #0
   15a10:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
   15a14:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
   15a18:	f88d 3010 	strb.w	r3, [sp, #16]
                uint8_t linkAdrNbBytesParsed = 0;
   15a1c:	f88d 3018 	strb.w	r3, [sp, #24]
                if( adrBlockFound == false )
   15a20:	f1b9 0f00 	cmp.w	r9, #0
   15a24:	d16d      	bne.n	15b02 <ProcessMacCommands.constprop.0+0x206>
                            linkAdrReq.PayloadSize = 5;
   15a26:	f04f 0905 	mov.w	r9, #5
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15a2a:	4c8f      	ldr	r4, [pc, #572]	; (15c68 <ProcessMacCommands.constprop.0+0x36c>)
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15a2c:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15a30:	1e6b      	subs	r3, r5, #1
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15a32:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
   15a36:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15a3a:	4433      	add	r3, r6
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
   15a3c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
   15a40:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15a44:	930b      	str	r3, [sp, #44]	; 0x2c
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
   15a46:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15a4a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15a4e:	f894 31a2 	ldrb.w	r3, [r4, #418]	; 0x1a2
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15a52:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
   15a56:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15a5a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
   15a5e:	920a      	str	r2, [sp, #40]	; 0x28
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
   15a60:	b373      	cbz	r3, 15ac0 <ProcessMacCommands.constprop.0+0x1c4>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
   15a62:	1c7b      	adds	r3, r7, #1
   15a64:	1b5b      	subs	r3, r3, r5
   15a66:	b2db      	uxtb	r3, r3
   15a68:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
   15a6c:	ab06      	add	r3, sp, #24
   15a6e:	9301      	str	r3, [sp, #4]
   15a70:	ab04      	add	r3, sp, #16
   15a72:	9300      	str	r3, [sp, #0]
   15a74:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   15a78:	f10d 030b 	add.w	r3, sp, #11
   15a7c:	f10d 020a 	add.w	r2, sp, #10
   15a80:	a90a      	add	r1, sp, #40	; 0x28
   15a82:	f017 f819 	bl	2cab8 <RegionLinkAdrReq>
   15a86:	f88d 0009 	strb.w	r0, [sp, #9]
                        if( ( status & 0x07 ) == 0x07 )
   15a8a:	f000 0007 	and.w	r0, r0, #7
   15a8e:	2807      	cmp	r0, #7
   15a90:	d113      	bne.n	15aba <ProcessMacCommands.constprop.0+0x1be>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
   15a92:	f994 2049 	ldrsb.w	r2, [r4, #73]	; 0x49
   15a96:	f99d 300a 	ldrsb.w	r3, [sp, #10]
   15a9a:	429a      	cmp	r2, r3
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
   15a9c:	bfb8      	it	lt
   15a9e:	2201      	movlt	r2, #1
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
   15aa0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
   15aa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
   15aa8:	bfb8      	it	lt
   15aaa:	f884 21a5 	strblt.w	r2, [r4, #421]	; 0x1a5
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
   15aae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
   15ab2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   15ab6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                            linkAdrReq.PayloadSize = 5;
   15aba:	f04f 0a00 	mov.w	sl, #0
   15abe:	e009      	b.n	15ad4 <ProcessMacCommands.constprop.0+0x1d8>
   15ac0:	2305      	movs	r3, #5
   15ac2:	e7d1      	b.n	15a68 <ProcessMacCommands.constprop.0+0x16c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
   15ac4:	2201      	movs	r2, #1
   15ac6:	2003      	movs	r0, #3
   15ac8:	f10d 0109 	add.w	r1, sp, #9
   15acc:	f001 ffc0 	bl	17a50 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
   15ad0:	f10a 0a01 	add.w	sl, sl, #1
   15ad4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   15ad8:	fa5f f28a 	uxtb.w	r2, sl
   15adc:	fbb3 f1f9 	udiv	r1, r3, r9
   15ae0:	4291      	cmp	r1, r2
   15ae2:	d8ef      	bhi.n	15ac4 <ProcessMacCommands.constprop.0+0x1c8>
                        macIndex += linkAdrNbBytesParsed - 1;
   15ae4:	442b      	add	r3, r5
   15ae6:	b2dd      	uxtb	r5, r3
   15ae8:	1e6b      	subs	r3, r5, #1
   15aea:	b2db      	uxtb	r3, r3
                        if( macIndex >= commandsSize )
   15aec:	429f      	cmp	r7, r3
   15aee:	d90b      	bls.n	15b08 <ProcessMacCommands.constprop.0+0x20c>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
   15af0:	5cf2      	ldrb	r2, [r6, r3]
   15af2:	2a03      	cmp	r2, #3
   15af4:	d09a      	beq.n	15a2c <ProcessMacCommands.constprop.0+0x130>
                        macIndex--;
   15af6:	42af      	cmp	r7, r5
   15af8:	bf88      	it	hi
   15afa:	461d      	movhi	r5, r3
                break;
   15afc:	f04f 0901 	mov.w	r9, #1
   15b00:	e783      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                    macIndex += 4;
   15b02:	3405      	adds	r4, #5
   15b04:	b2e5      	uxtb	r5, r4
   15b06:	e7f9      	b.n	15afc <ProcessMacCommands.constprop.0+0x200>
   15b08:	461d      	mov	r5, r3
   15b0a:	e7f7      	b.n	15afc <ProcessMacCommands.constprop.0+0x200>
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15b0c:	2201      	movs	r2, #1
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15b0e:	5d73      	ldrb	r3, [r6, r5]
   15b10:	4955      	ldr	r1, [pc, #340]	; (15c68 <ProcessMacCommands.constprop.0+0x36c>)
   15b12:	f003 030f 	and.w	r3, r3, #15
   15b16:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15b1a:	2004      	movs	r0, #4
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15b1c:	fa02 f303 	lsl.w	r3, r2, r3
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15b20:	2200      	movs	r2, #0
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15b22:	3402      	adds	r4, #2
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15b24:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15b28:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15b2a:	a903      	add	r1, sp, #12
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15b2c:	f001 ff90 	bl	17a50 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
   15b30:	4625      	mov	r5, r4
   15b32:	e76a      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                status = 0x07;
   15b34:	2307      	movs	r3, #7
   15b36:	f88d 3009 	strb.w	r3, [sp, #9]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15b3a:	5d73      	ldrb	r3, [r6, r5]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15b3c:	1d65      	adds	r5, r4, #5
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15b3e:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
   15b42:	f003 030f 	and.w	r3, r3, #15
   15b46:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15b4a:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15b4c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15b4e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15b52:	5cf2      	ldrb	r2, [r6, r3]
   15b54:	1d23      	adds	r3, r4, #4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15b56:	b2db      	uxtb	r3, r3
   15b58:	5cf3      	ldrb	r3, [r6, r3]
                macIndex++;
   15b5a:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15b5c:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15b5e:	041b      	lsls	r3, r3, #16
   15b60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15b64:	5d32      	ldrb	r2, [r6, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15b66:	4c40      	ldr	r4, [pc, #256]	; (15c68 <ProcessMacCommands.constprop.0+0x36c>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15b68:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
   15b6a:	2264      	movs	r2, #100	; 0x64
   15b6c:	4353      	muls	r3, r2
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15b6e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   15b72:	a90a      	add	r1, sp, #40	; 0x28
                rxParamSetupReq.Frequency *= 100;
   15b74:	930b      	str	r3, [sp, #44]	; 0x2c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15b76:	f016 ffaf 	bl	2cad8 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
   15b7a:	f000 0307 	and.w	r3, r0, #7
   15b7e:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15b80:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15b82:	f88d 0009 	strb.w	r0, [sp, #9]
                if( ( status & 0x07 ) == 0x07 )
   15b86:	d10d      	bne.n	15ba4 <ProcessMacCommands.constprop.0+0x2a8>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
   15b88:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   15b8c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
   15b90:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
   15b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b96:	67e3      	str	r3, [r4, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
   15b98:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
   15b9c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   15ba0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
                macCmdPayload[0] = status;
   15ba4:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
   15ba8:	2201      	movs	r2, #1
   15baa:	2005      	movs	r0, #5
   15bac:	a903      	add	r1, sp, #12
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
   15bae:	f001 ff4f 	bl	17a50 <LoRaMacCommandsAddCmd>
                break;
   15bb2:	e72a      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
   15bb4:	4b2d      	ldr	r3, [pc, #180]	; (15c6c <ProcessMacCommands.constprop.0+0x370>)
   15bb6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   15bba:	b163      	cbz	r3, 15bd6 <ProcessMacCommands.constprop.0+0x2da>
   15bbc:	681b      	ldr	r3, [r3, #0]
   15bbe:	b153      	cbz	r3, 15bd6 <ProcessMacCommands.constprop.0+0x2da>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
   15bc0:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
   15bc2:	f008 033f 	and.w	r3, r8, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
   15bc6:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
   15bca:	2202      	movs	r2, #2
   15bcc:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
   15bce:	f88d 300d 	strb.w	r3, [sp, #13]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
   15bd2:	a903      	add	r1, sp, #12
   15bd4:	e7eb      	b.n	15bae <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
   15bd6:	20ff      	movs	r0, #255	; 0xff
   15bd8:	e7f3      	b.n	15bc2 <ProcessMacCommands.constprop.0+0x2c6>
                status = 0x03;
   15bda:	2303      	movs	r3, #3
   15bdc:	f88d 3009 	strb.w	r3, [sp, #9]
                newChannelReq.ChannelId = payload[macIndex++];
   15be0:	5d73      	ldrb	r3, [r6, r5]
                chParam.DrRange.Value = payload[macIndex++];
   15be2:	1da5      	adds	r5, r4, #6
                newChannelReq.ChannelId = payload[macIndex++];
   15be4:	f88d 301c 	strb.w	r3, [sp, #28]
                newChannelReq.NewChannel = &chParam;
   15be8:	ab0a      	add	r3, sp, #40	; 0x28
   15bea:	9306      	str	r3, [sp, #24]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
   15bec:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15bee:	b2db      	uxtb	r3, r3
   15bf0:	5cf2      	ldrb	r2, [r6, r3]
   15bf2:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15bf4:	b2db      	uxtb	r3, r3
   15bf6:	5cf3      	ldrb	r3, [r6, r3]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15bf8:	a906      	add	r1, sp, #24
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15bfa:	041b      	lsls	r3, r3, #16
   15bfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                newChannelReq.ChannelId = payload[macIndex++];
   15c00:	1ca2      	adds	r2, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
   15c02:	b2d2      	uxtb	r2, r2
   15c04:	5cb2      	ldrb	r2, [r6, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15c06:	3405      	adds	r4, #5
   15c08:	4313      	orrs	r3, r2
                chParam.Frequency *= 100;
   15c0a:	2264      	movs	r2, #100	; 0x64
   15c0c:	4353      	muls	r3, r2
   15c0e:	930a      	str	r3, [sp, #40]	; 0x28
                chParam.Rx1Frequency = 0;
   15c10:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
   15c12:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
   15c14:	930b      	str	r3, [sp, #44]	; 0x2c
                chParam.DrRange.Value = payload[macIndex++];
   15c16:	5d33      	ldrb	r3, [r6, r4]
   15c18:	b2ed      	uxtb	r5, r5
   15c1a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15c1e:	4b12      	ldr	r3, [pc, #72]	; (15c68 <ProcessMacCommands.constprop.0+0x36c>)
   15c20:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   15c24:	f016 ff5f 	bl	2cae6 <RegionNewChannelReq>
   15c28:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
   15c2a:	2800      	cmp	r0, #0
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15c2c:	f88d 3009 	strb.w	r3, [sp, #9]
                if( ( int8_t )status >= 0 )
   15c30:	f6ff aeeb 	blt.w	15a0a <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
   15c34:	2201      	movs	r2, #1
   15c36:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
   15c38:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
   15c3c:	a903      	add	r1, sp, #12
   15c3e:	e7b6      	b.n	15bae <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t delay = payload[macIndex++] & 0x0F;
   15c40:	5d73      	ldrb	r3, [r6, r5]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
   15c42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15c46:	f003 030f 	and.w	r3, r3, #15
   15c4a:	2b01      	cmp	r3, #1
   15c4c:	bf38      	it	cc
   15c4e:	2301      	movcc	r3, #1
   15c50:	4353      	muls	r3, r2
   15c52:	4a05      	ldr	r2, [pc, #20]	; (15c68 <ProcessMacCommands.constprop.0+0x36c>)
                uint8_t delay = payload[macIndex++] & 0x0F;
   15c54:	3402      	adds	r4, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
   15c56:	6693      	str	r3, [r2, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
   15c58:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   15c5c:	66d3      	str	r3, [r2, #108]	; 0x6c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
   15c5e:	2008      	movs	r0, #8
   15c60:	2200      	movs	r2, #0
                uint8_t delay = payload[macIndex++] & 0x0F;
   15c62:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
   15c64:	a903      	add	r1, sp, #12
   15c66:	e761      	b.n	15b2c <ProcessMacCommands.constprop.0+0x230>
   15c68:	2002fbf0 	.word	0x2002fbf0
   15c6c:	2003004c 	.word	0x2003004c
                uint8_t eirpDwellTime = payload[macIndex++];
   15c70:	5d73      	ldrb	r3, [r6, r5]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15c72:	4dbb      	ldr	r5, [pc, #748]	; (15f60 <ProcessMacCommands.constprop.0+0x664>)
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
   15c74:	f3c3 1240 	ubfx	r2, r3, #5, #1
   15c78:	f88d 2011 	strb.w	r2, [sp, #17]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15c7c:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
   15c80:	f3c3 1200 	ubfx	r2, r3, #4, #1
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15c84:	a904      	add	r1, sp, #16
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
   15c86:	f003 030f 	and.w	r3, r3, #15
   15c8a:	f88d 2010 	strb.w	r2, [sp, #16]
   15c8e:	f88d 3012 	strb.w	r3, [sp, #18]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15c92:	f016 ff2f 	bl	2caf4 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
   15c96:	3402      	adds	r4, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15c98:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
   15c9a:	b2e4      	uxtb	r4, r4
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15c9c:	f43f af48 	beq.w	15b30 <ProcessMacCommands.constprop.0+0x234>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15ca0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15ca4:	4aaf      	ldr	r2, [pc, #700]	; (15f64 <ProcessMacCommands.constprop.0+0x668>)
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15ca6:	f8a5 308c 	strh.w	r3, [r5, #140]	; 0x8c
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15caa:	f89d 3012 	ldrb.w	r3, [sp, #18]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15cae:	f89d a010 	ldrb.w	sl, [sp, #16]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15cb2:	5cd0      	ldrb	r0, [r2, r3]
   15cb4:	f7f2 ff4c 	bl	8b50 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
   15cb8:	2302      	movs	r3, #2
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15cba:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15cbe:	a90a      	add	r1, sp, #40	; 0x28
   15cc0:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                    getPhy.Attribute = PHY_MIN_TX_DR;
   15cc4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15cc8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15ccc:	f016 fea5 	bl	2ca1a <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15cd0:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15cd4:	9006      	str	r0, [sp, #24]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15cd6:	b240      	sxtb	r0, r0
   15cd8:	4298      	cmp	r0, r3
   15cda:	bfb8      	it	lt
   15cdc:	4618      	movlt	r0, r3
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15cde:	2200      	movs	r2, #0
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15ce0:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15ce4:	a903      	add	r1, sp, #12
   15ce6:	2009      	movs	r0, #9
   15ce8:	e720      	b.n	15b2c <ProcessMacCommands.constprop.0+0x230>
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
   15cea:	4b9d      	ldr	r3, [pc, #628]	; (15f60 <ProcessMacCommands.constprop.0+0x664>)
   15cec:	5d72      	ldrb	r2, [r6, r5]
   15cee:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
   15cf2:	429a      	cmp	r2, r3
   15cf4:	f63f ae73 	bhi.w	159de <ProcessMacCommands.constprop.0+0xe2>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15cf8:	200b      	movs	r0, #11
   15cfa:	a905      	add	r1, sp, #20
   15cfc:	e66a      	b.n	159d4 <ProcessMacCommands.constprop.0+0xd8>
                status = 0x03;
   15cfe:	2303      	movs	r3, #3
   15d00:	f88d 3009 	strb.w	r3, [sp, #9]
                dlChannelReq.ChannelId = payload[macIndex++];
   15d04:	5d73      	ldrb	r3, [r6, r5]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15d06:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
   15d08:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   15d0c:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15d0e:	b2db      	uxtb	r3, r3
   15d10:	5cf2      	ldrb	r2, [r6, r3]
   15d12:	1d23      	adds	r3, r4, #4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15d14:	b2db      	uxtb	r3, r3
   15d16:	5cf3      	ldrb	r3, [r6, r3]
                dlChannelReq.ChannelId = payload[macIndex++];
   15d18:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15d1a:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   15d1c:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15d1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   15d22:	5d32      	ldrb	r2, [r6, r4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   15d24:	a90a      	add	r1, sp, #40	; 0x28
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15d26:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
   15d28:	2264      	movs	r2, #100	; 0x64
   15d2a:	4353      	muls	r3, r2
   15d2c:	930b      	str	r3, [sp, #44]	; 0x2c
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   15d2e:	4b8c      	ldr	r3, [pc, #560]	; (15f60 <ProcessMacCommands.constprop.0+0x664>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15d30:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   15d32:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   15d36:	f016 fee4 	bl	2cb02 <RegionDlChannelReq>
   15d3a:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
   15d3c:	2800      	cmp	r0, #0
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   15d3e:	f88d 3009 	strb.w	r3, [sp, #9]
                if( ( int8_t )status >= 0 )
   15d42:	f6ff ae62 	blt.w	15a0a <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
   15d46:	2201      	movs	r2, #1
   15d48:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
   15d4a:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
   15d4e:	a903      	add	r1, sp, #12
   15d50:	e72d      	b.n	15bae <ProcessMacCommands.constprop.0+0x2b2>
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   15d52:	2301      	movs	r3, #1
                uint8_t delayExp = 0x0F & payload[macIndex];
   15d54:	5d72      	ldrb	r2, [r6, r5]
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   15d56:	4884      	ldr	r0, [pc, #528]	; (15f68 <ProcessMacCommands.constprop.0+0x66c>)
   15d58:	f002 010f 	and.w	r1, r2, #15
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   15d5c:	0912      	lsrs	r2, r2, #4
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   15d5e:	fa03 f101 	lsl.w	r1, r3, r1
                macIndex++;
   15d62:	3402      	adds	r4, #2
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   15d64:	4093      	lsls	r3, r2
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   15d66:	f8a0 13fe 	strh.w	r1, [r0, #1022]	; 0x3fe
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   15d6a:	f8a0 33fc 	strh.w	r3, [r0, #1020]	; 0x3fc
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15d6e:	2200      	movs	r2, #0
   15d70:	200c      	movs	r0, #12
                macIndex++;
   15d72:	b2e5      	uxtb	r5, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15d74:	a903      	add	r1, sp, #12
   15d76:	e71a      	b.n	15bae <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
   15d78:	f816 b005 	ldrb.w	fp, [r6, r5]
                Nvm.MacGroup2.ForceRejoinMaxRetries = 0x07 & payload[macIndex];
   15d7c:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 15f60 <ProcessMacCommands.constprop.0+0x664>
   15d80:	f00b 0307 	and.w	r3, fp, #7
   15d84:	f88a 31c0 	strb.w	r3, [sl, #448]	; 0x1c0
                macIndex++;
   15d88:	1ca3      	adds	r3, r4, #2
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
   15d8a:	b2db      	uxtb	r3, r3
   15d8c:	5cf2      	ldrb	r2, [r6, r3]
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   15d8e:	2120      	movs	r1, #32
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
   15d90:	f3c2 1202 	ubfx	r2, r2, #4, #3
   15d94:	f88a 21c1 	strb.w	r2, [sl, #449]	; 0x1c1
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
   15d98:	5cf3      	ldrb	r3, [r6, r3]
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   15d9a:	2000      	movs	r0, #0
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
   15d9c:	f003 030f 	and.w	r3, r3, #15
   15da0:	f88a 3049 	strb.w	r3, [sl, #73]	; 0x49
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   15da4:	f015 fe48 	bl	2ba38 <randr>
   15da8:	2120      	movs	r1, #32
   15daa:	f3cb 0bc2 	ubfx	fp, fp, #3, #3
    if( rejoinCycleTime > 4294967 )
   15dae:	4b6f      	ldr	r3, [pc, #444]	; (15f6c <ProcessMacCommands.constprop.0+0x670>)
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   15db0:	fa01 f10b 	lsl.w	r1, r1, fp
   15db4:	4401      	add	r1, r0
    if( rejoinCycleTime > 4294967 )
   15db6:	4299      	cmp	r1, r3
        *timeInMiliSec = rejoinCycleTime * 1000;
   15db8:	bf8a      	itet	hi
   15dba:	f44f 737a 	movhi.w	r3, #1000	; 0x3e8
                uint32_t forceRejoinReqCycleTime = 0;
   15dbe:	2100      	movls	r1, #0
        *timeInMiliSec = rejoinCycleTime * 1000;
   15dc0:	4359      	mulhi	r1, r3
                TimerSetValue( &MacCtx.ForceRejoinReqCycleTimer, forceRejoinReqCycleTime );
   15dc2:	486b      	ldr	r0, [pc, #428]	; (15f70 <ProcessMacCommands.constprop.0+0x674>)
   15dc4:	f015 ff49 	bl	2bc5a <TimerSetValue>
                if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   15dc8:	f89a 31c1 	ldrb.w	r3, [sl, #449]	; 0x1c1
                macIndex ++;
   15dcc:	3403      	adds	r4, #3
                if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   15dce:	2b01      	cmp	r3, #1
                    SendReJoinReq( REJOIN_REQ_0 );
   15dd0:	bf94      	ite	ls
   15dd2:	2000      	movls	r0, #0
                    SendReJoinReq( REJOIN_REQ_2 );
   15dd4:	2002      	movhi	r0, #2
   15dd6:	f7ff fc73 	bl	156c0 <SendReJoinReq>
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
   15dda:	4865      	ldr	r0, [pc, #404]	; (15f70 <ProcessMacCommands.constprop.0+0x674>)
                macIndex ++;
   15ddc:	b2e5      	uxtb	r5, r4
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
   15dde:	f7fd f911 	bl	13004 <TimerStart>
                break;
   15de2:	e612      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                macIndex ++;
   15de4:	3402      	adds	r4, #2
                uint8_t maxCountN = 0x0F & payload[macIndex];
   15de6:	5d73      	ldrb	r3, [r6, r5]
                macIndex ++;
   15de8:	b2e5      	uxtb	r5, r4
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15dea:	2401      	movs	r4, #1
                uint8_t maxTimeN = 0x0F & ( payload[macIndex] >> 4 );
   15dec:	091a      	lsrs	r2, r3, #4
                uint8_t maxCountN = 0x0F & payload[macIndex];
   15dee:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15df2:	485b      	ldr	r0, [pc, #364]	; (15f60 <ProcessMacCommands.constprop.0+0x664>)
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
   15df4:	3304      	adds	r3, #4
   15df6:	fa04 f303 	lsl.w	r3, r4, r3
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15dfa:	320a      	adds	r2, #10
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
   15dfc:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
    if( rejoinCycleTime > 4294967 )
   15e00:	4b5a      	ldr	r3, [pc, #360]	; (15f6c <ProcessMacCommands.constprop.0+0x670>)
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15e02:	fa04 f102 	lsl.w	r1, r4, r2
    if( rejoinCycleTime > 4294967 )
   15e06:	4299      	cmp	r1, r3
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   15e08:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   15e0c:	dd1a      	ble.n	15e44 <ProcessMacCommands.constprop.0+0x548>
        *timeInMiliSec = rejoinCycleTime * 1000;
   15e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15e12:	f8df a154 	ldr.w	sl, [pc, #340]	; 15f68 <ProcessMacCommands.constprop.0+0x66c>
   15e16:	4093      	lsls	r3, r2
   15e18:	f8ca 34f0 	str.w	r3, [sl, #1264]	; 0x4f0
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
   15e1c:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   15e20:	f7fd f966 	bl	130f0 <TimerStop>
                    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   15e24:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   15e28:	f8da 14f0 	ldr.w	r1, [sl, #1264]	; 0x4f0
   15e2c:	f015 ff15 	bl	2bc5a <TimerSetValue>
                    TimerStart( &MacCtx.Rejoin0CycleTimer );
   15e30:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   15e34:	f7fd f8e6 	bl	13004 <TimerStart>
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
   15e38:	2201      	movs	r2, #1
   15e3a:	200f      	movs	r0, #15
                macCmdPayload[0] = timeOK;
   15e3c:	f88d 400c 	strb.w	r4, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
   15e40:	a903      	add	r1, sp, #12
   15e42:	e6b4      	b.n	15bae <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t timeOK = 0;
   15e44:	2400      	movs	r4, #0
   15e46:	e7f7      	b.n	15e38 <ProcessMacCommands.constprop.0+0x53c>
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15e48:	2020      	movs	r0, #32
   15e4a:	a905      	add	r1, sp, #20
   15e4c:	e5c2      	b.n	159d4 <ProcessMacCommands.constprop.0+0xd8>
                    LoRaMacCommandsRemoveCmd( macCmd );
   15e4e:	9805      	ldr	r0, [sp, #20]
   15e50:	f001 fe3a 	bl	17ac8 <LoRaMacCommandsRemoveCmd>
   15e54:	e5c3      	b.n	159de <ProcessMacCommands.constprop.0+0xe2>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
   15e56:	2008      	movs	r0, #8
   15e58:	f001 ff80 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   15e5c:	f8df b108 	ldr.w	fp, [pc, #264]	; 15f68 <ProcessMacCommands.constprop.0+0x66c>
   15e60:	2800      	cmp	r0, #0
   15e62:	d049      	beq.n	15ef8 <ProcessMacCommands.constprop.0+0x5fc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
   15e64:	2108      	movs	r1, #8
   15e66:	2000      	movs	r0, #0
   15e68:	f001 ff3c 	bl	17ce4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
   15e6c:	2300      	movs	r3, #0
   15e6e:	f8ad 301e 	strh.w	r3, [sp, #30]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
   15e72:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
   15e74:	b2db      	uxtb	r3, r3
   15e76:	5cf2      	ldrb	r2, [r6, r3]
   15e78:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   15e7a:	b2db      	uxtb	r3, r3
   15e7c:	f816 a003 	ldrb.w	sl, [r6, r3]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
   15e80:	5d73      	ldrb	r3, [r6, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   15e82:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
   15e86:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   15e8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   15e8e:	ea4a 0a03 	orr.w	sl, sl, r3
   15e92:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   15e94:	b2db      	uxtb	r3, r3
   15e96:	5cf3      	ldrb	r3, [r6, r3]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   15e98:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   15e9a:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   15e9c:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   15e9e:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   15ea2:	5d33      	ldrb	r3, [r6, r4]
                    sysTimeCurrent = SysTimeGet( );
   15ea4:	ac0a      	add	r4, sp, #40	; 0x28
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   15ea6:	4353      	muls	r3, r2
                    sysTimeCurrent = SysTimeGet( );
   15ea8:	4620      	mov	r0, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   15eaa:	121b      	asrs	r3, r3, #8
   15eac:	f8ad 301c 	strh.w	r3, [sp, #28]
                    sysTimeCurrent = SysTimeGet( );
   15eb0:	f015 fe41 	bl	2bb36 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
   15eb4:	4b2f      	ldr	r3, [pc, #188]	; (15f74 <ProcessMacCommands.constprop.0+0x678>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
   15eb6:	a808      	add	r0, sp, #32
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
   15eb8:	4453      	add	r3, sl
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
   15eba:	9306      	str	r3, [sp, #24]
   15ebc:	f8db 333c 	ldr.w	r3, [fp, #828]	; 0x33c
   15ec0:	f10d 0a18 	add.w	sl, sp, #24
   15ec4:	9300      	str	r3, [sp, #0]
   15ec6:	f8db 3338 	ldr.w	r3, [fp, #824]	; 0x338
   15eca:	e89a 0006 	ldmia.w	sl, {r1, r2}
   15ece:	f015 fdf6 	bl	2babe <SysTimeSub>
   15ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15ed4:	4650      	mov	r0, sl
   15ed6:	9300      	str	r3, [sp, #0]
   15ed8:	e894 0006 	ldmia.w	r4, {r1, r2}
   15edc:	9b08      	ldr	r3, [sp, #32]
   15ede:	f015 fdd3 	bl	2ba88 <SysTimeAdd>
                    SysTimeSet( sysTime );
   15ee2:	e89a 0003 	ldmia.w	sl, {r0, r1}
   15ee6:	f015 fe05 	bl	2baf4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
   15eea:	f016 fa90 	bl	2c40e <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
   15eee:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   15ef0:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
   15ef2:	f88b 343c 	strb.w	r3, [fp, #1084]	; 0x43c
   15ef6:	e588      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
   15ef8:	f88b 043c 	strb.w	r0, [fp, #1084]	; 0x43c
   15efc:	e585      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
   15efe:	200b      	movs	r0, #11
   15f00:	f001 ff2c 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   15f04:	2800      	cmp	r0, #0
   15f06:	f43f ad80 	beq.w	15a0a <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
   15f0a:	210b      	movs	r1, #11
   15f0c:	2000      	movs	r0, #0
   15f0e:	f001 fee9 	bl	17ce4 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
   15f12:	4b15      	ldr	r3, [pc, #84]	; (15f68 <ProcessMacCommands.constprop.0+0x66c>)
   15f14:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
   15f18:	3b04      	subs	r3, #4
   15f1a:	2b01      	cmp	r3, #1
   15f1c:	f67f ad75 	bls.w	15a0a <ProcessMacCommands.constprop.0+0x10e>
                        LoRaMacClassBPingSlotInfoAns( );
   15f20:	f016 fa71 	bl	2c406 <LoRaMacClassBPingSlotInfoAns>
   15f24:	e571      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                frequency = ( uint32_t )payload[macIndex++];
   15f26:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
   15f28:	b2db      	uxtb	r3, r3
   15f2a:	5cf1      	ldrb	r1, [r6, r3]
   15f2c:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   15f2e:	b2db      	uxtb	r3, r3
   15f30:	5cf3      	ldrb	r3, [r6, r3]
                frequency = ( uint32_t )payload[macIndex++];
   15f32:	5d72      	ldrb	r2, [r6, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   15f34:	041b      	lsls	r3, r3, #16
   15f36:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
   15f3a:	2164      	movs	r1, #100	; 0x64
                datarate = payload[macIndex++] & 0x0F;
   15f3c:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   15f3e:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
   15f40:	b2e4      	uxtb	r4, r4
   15f42:	5d30      	ldrb	r0, [r6, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   15f44:	4313      	orrs	r3, r2
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
   15f46:	4359      	muls	r1, r3
   15f48:	f000 000f 	and.w	r0, r0, #15
   15f4c:	f016 fa5c 	bl	2c408 <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
   15f50:	b2ed      	uxtb	r5, r5
                macCmdPayload[0] = status;
   15f52:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
   15f56:	2201      	movs	r2, #1
   15f58:	2011      	movs	r0, #17
   15f5a:	a903      	add	r1, sp, #12
   15f5c:	e627      	b.n	15bae <ProcessMacCommands.constprop.0+0x2b2>
   15f5e:	bf00      	nop
   15f60:	2002fbf0 	.word	0x2002fbf0
   15f64:	0003648c 	.word	0x0003648c
   15f68:	2003004c 	.word	0x2003004c
   15f6c:	00418937 	.word	0x00418937
   15f70:	20030524 	.word	0x20030524
   15f74:	12d53d80 	.word	0x12d53d80
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
   15f78:	200c      	movs	r0, #12
   15f7a:	f001 feef 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   15f7e:	2800      	cmp	r0, #0
   15f80:	f43f ad43 	beq.w	15a0a <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
   15f84:	210c      	movs	r1, #12
   15f86:	2000      	movs	r0, #0
   15f88:	f001 feac 	bl	17ce4 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
   15f8c:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   15f8e:	b2db      	uxtb	r3, r3
   15f90:	5cf0      	ldrb	r0, [r6, r3]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   15f92:	4a12      	ldr	r2, [pc, #72]	; (15fdc <ProcessMacCommands.constprop.0+0x6e0>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   15f94:	5d73      	ldrb	r3, [r6, r5]
                    beaconTimingChannel = payload[macIndex++];
   15f96:	1d25      	adds	r5, r4, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   15f98:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
   15f9a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   15f9c:	6812      	ldr	r2, [r2, #0]
   15f9e:	5d31      	ldrb	r1, [r6, r4]
   15fa0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
                    beaconTimingChannel = payload[macIndex++];
   15fa4:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   15fa6:	f016 fa31 	bl	2c40c <LoRaMacClassBBeaconTimingAns>
   15faa:	e52e      	b.n	15a0a <ProcessMacCommands.constprop.0+0x10e>
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
   15fac:	2064      	movs	r0, #100	; 0x64
                    frequency = ( uint32_t )payload[macIndex++];
   15fae:	5d72      	ldrb	r2, [r6, r5]
   15fb0:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   15fb2:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
   15fb4:	3403      	adds	r4, #3
   15fb6:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   15fb8:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
   15fba:	5cf1      	ldrb	r1, [r6, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   15fbc:	5d33      	ldrb	r3, [r6, r4]
   15fbe:	b2ed      	uxtb	r5, r5
   15fc0:	041b      	lsls	r3, r3, #16
   15fc2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   15fc6:	4313      	orrs	r3, r2
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
   15fc8:	4358      	muls	r0, r3
   15fca:	f016 fa21 	bl	2c410 <LoRaMacClassBBeaconFreqReq>
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
   15fce:	2201      	movs	r2, #1
   15fd0:	f88d 000c 	strb.w	r0, [sp, #12]
   15fd4:	a903      	add	r1, sp, #12
   15fd6:	2013      	movs	r0, #19
   15fd8:	e5e9      	b.n	15bae <ProcessMacCommands.constprop.0+0x2b2>
   15fda:	bf00      	nop
   15fdc:	2002fb48 	.word	0x2002fb48

00015fe0 <SetTxContinuousWave>:
{
   15fe0:	b510      	push	{r4, lr}
   15fe2:	4604      	mov	r4, r0
   15fe4:	4608      	mov	r0, r1
   15fe6:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
   15fe8:	4b06      	ldr	r3, [pc, #24]	; (16004 <SetTxContinuousWave+0x24>)
   15fea:	4622      	mov	r2, r4
   15fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15fee:	b249      	sxtb	r1, r1
   15ff0:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   15ff2:	4a05      	ldr	r2, [pc, #20]	; (16008 <SetTxContinuousWave+0x28>)
}
   15ff4:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   15ff6:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
   15ffa:	f043 0302 	orr.w	r3, r3, #2
   15ffe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
   16002:	bd10      	pop	{r4, pc}
   16004:	000338dc 	.word	0x000338dc
   16008:	2003004c 	.word	0x2003004c

0001600c <LoRaMacProcess>:
{
   1600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16010:	b0ab      	sub	sp, #172	; 0xac
    CRITICAL_SECTION_BEGIN( );
   16012:	a80a      	add	r0, sp, #40	; 0x28
   16014:	f015 fcc9 	bl	2b9aa <BoardCriticalSectionBegin>
    LoRaMacRadioEvents.Value = 0;
   16018:	2300      	movs	r3, #0
    events = LoRaMacRadioEvents;
   1601a:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 162f4 <LoRaMacProcess+0x2e8>
    CRITICAL_SECTION_END( );
   1601e:	a80a      	add	r0, sp, #40	; 0x28
    events = LoRaMacRadioEvents;
   16020:	f8db 5000 	ldr.w	r5, [fp]
    LoRaMacRadioEvents.Value = 0;
   16024:	4cb4      	ldr	r4, [pc, #720]	; (162f8 <LoRaMacProcess+0x2ec>)
   16026:	f8cb 3000 	str.w	r3, [fp]
    CRITICAL_SECTION_END( );
   1602a:	f015 fcc8 	bl	2b9be <BoardCriticalSectionEnd>
    if( events.Value != 0 )
   1602e:	2d00      	cmp	r5, #0
   16030:	f000 80d8 	beq.w	161e4 <LoRaMacProcess+0x1d8>
        if( events.Events.TxDone == 1 )
   16034:	b2eb      	uxtb	r3, r5
   16036:	06a9      	lsls	r1, r5, #26
   16038:	9303      	str	r3, [sp, #12]
   1603a:	d559      	bpl.n	160f0 <LoRaMacProcess+0xe4>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   1603c:	4daf      	ldr	r5, [pc, #700]	; (162fc <LoRaMacProcess+0x2f0>)
   1603e:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   16042:	2b02      	cmp	r3, #2
   16044:	d002      	beq.n	1604c <LoRaMacProcess+0x40>
        Radio.Sleep( );
   16046:	4bae      	ldr	r3, [pc, #696]	; (16300 <LoRaMacProcess+0x2f4>)
   16048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1604a:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
   1604c:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
   16050:	48ac      	ldr	r0, [pc, #688]	; (16304 <LoRaMacProcess+0x2f8>)
   16052:	f015 fe02 	bl	2bc5a <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
   16056:	48ab      	ldr	r0, [pc, #684]	; (16304 <LoRaMacProcess+0x2f8>)
   16058:	f7fc ffd4 	bl	13004 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
   1605c:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
   16060:	48a9      	ldr	r0, [pc, #676]	; (16308 <LoRaMacProcess+0x2fc>)
   16062:	f015 fdfa 	bl	2bc5a <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
   16066:	48a8      	ldr	r0, [pc, #672]	; (16308 <LoRaMacProcess+0x2fc>)
   16068:	f7fc ffcc 	bl	13004 <TimerStart>
    if( MacCtx.NodeAckRequested == true )
   1606c:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   16070:	2b00      	cmp	r3, #0
   16072:	f000 8106 	beq.w	16282 <LoRaMacProcess+0x276>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
   16076:	2314      	movs	r3, #20
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16078:	a914      	add	r1, sp, #80	; 0x50
   1607a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
   1607e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16082:	f016 fcca 	bl	2ca1a <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
   16086:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1608a:	9011      	str	r0, [sp, #68]	; 0x44
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
   1608c:	4401      	add	r1, r0
   1608e:	489f      	ldr	r0, [pc, #636]	; (1630c <LoRaMacProcess+0x300>)
   16090:	f015 fde3 	bl	2bc5a <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
   16094:	489d      	ldr	r0, [pc, #628]	; (1630c <LoRaMacProcess+0x300>)
   16096:	f7fc ffb5 	bl	13004 <TimerStart>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   1609a:	4b9d      	ldr	r3, [pc, #628]	; (16310 <LoRaMacProcess+0x304>)
    txDone.Channel = MacCtx.Channel;
   1609c:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   160a0:	681b      	ldr	r3, [r3, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   160a2:	af0f      	add	r7, sp, #60	; 0x3c
   160a4:	4638      	mov	r0, r7
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   160a6:	63eb      	str	r3, [r5, #60]	; 0x3c
    txDone.Channel = MacCtx.Channel;
   160a8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
   160ac:	931f      	str	r3, [sp, #124]	; 0x7c
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   160ae:	f015 fd65 	bl	2bb7c <SysTimeGetMcuTime>
   160b2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   160b6:	ae06      	add	r6, sp, #24
   160b8:	9300      	str	r3, [sp, #0]
   160ba:	4630      	mov	r0, r6
   160bc:	e897 0006 	ldmia.w	r7, {r1, r2}
   160c0:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
   160c4:	f015 fcfb 	bl	2babe <SysTimeSub>
   160c8:	e896 0003 	ldmia.w	r6, {r0, r1}
   160cc:	ab21      	add	r3, sp, #132	; 0x84
   160ce:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
   160d2:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   160d6:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
   160da:	9320      	str	r3, [sp, #128]	; 0x80
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   160dc:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   160e0:	a91e      	add	r1, sp, #120	; 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   160e2:	3b00      	subs	r3, #0
   160e4:	bf18      	it	ne
   160e6:	2301      	movne	r3, #1
   160e8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   160ec:	f016 fc9f 	bl	2ca2e <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
   160f0:	9b03      	ldr	r3, [sp, #12]
   160f2:	06da      	lsls	r2, r3, #27
   160f4:	d54a      	bpl.n	1618c <LoRaMacProcess+0x180>
    uint32_t downLinkCounter = 0;
   160f6:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
   160f8:	4d80      	ldr	r5, [pc, #512]	; (162fc <LoRaMacProcess+0x2f0>)
    uint8_t *payload = RxDoneParams.Payload;
   160fa:	f8df 9218 	ldr.w	r9, [pc, #536]	; 16314 <LoRaMacProcess+0x308>
    uint32_t address = Nvm.MacGroup2.DevAddr;
   160fe:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
    int16_t rssi = RxDoneParams.Rssi;
   16102:	f9b9 a00a 	ldrsh.w	sl, [r9, #10]
    uint32_t address = Nvm.MacGroup2.DevAddr;
   16106:	9205      	str	r2, [sp, #20]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   16108:	f89b 2000 	ldrb.w	r2, [fp]
    int8_t snr = RxDoneParams.Snr;
   1610c:	f999 700c 	ldrsb.w	r7, [r9, #12]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   16110:	f363 0200 	bfi	r2, r3, #0, #1
    uint32_t downLinkCounter = 0;
   16114:	930c      	str	r3, [sp, #48]	; 0x30
    uint8_t macCmdPayload[2] = { 0 };
   16116:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   1611a:	f88b 2000 	strb.w	r2, [fp]
    MacCtx.McpsConfirm.AckReceived = false;
   1611e:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
   16122:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
    MacCtx.McpsIndication.Multicast = 0;
   16126:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
   1612a:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
   1612e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
   16132:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.AckReceived = false;
   16136:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
   1613a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
   1613e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
   16142:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
   16146:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
   1614a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
   1614e:	4b6c      	ldr	r3, [pc, #432]	; (16300 <LoRaMacProcess+0x2f4>)
    MacCtx.McpsIndication.Rssi = rssi;
   16150:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    Radio.Sleep( );
   16154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    MacCtx.McpsIndication.Snr = snr;
   16156:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
   1615a:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint8_t *payload = RxDoneParams.Payload;
   1615e:	f8d9 8004 	ldr.w	r8, [r9, #4]
    uint16_t size = RxDoneParams.Size;
   16162:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    Radio.Sleep( );
   16166:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
   16168:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1616c:	b913      	cbnz	r3, 16174 <LoRaMacProcess+0x168>
        TimerStop( &MacCtx.RxWindowTimer2 );
   1616e:	4866      	ldr	r0, [pc, #408]	; (16308 <LoRaMacProcess+0x2fc>)
   16170:	f7fc ffbe 	bl	130f0 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
   16174:	4631      	mov	r1, r6
   16176:	4640      	mov	r0, r8
   16178:	f016 f932 	bl	2c3e0 <LoRaMacClassBRxBeacon>
   1617c:	4683      	mov	fp, r0
   1617e:	2800      	cmp	r0, #0
   16180:	f000 8082 	beq.w	16288 <LoRaMacProcess+0x27c>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
   16184:	f8a4 a47e 	strh.w	sl, [r4, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
   16188:	f884 7480 	strb.w	r7, [r4, #1152]	; 0x480
        if( events.Events.TxTimeout == 1 )
   1618c:	9b03      	ldr	r3, [sp, #12]
   1618e:	0719      	lsls	r1, r3, #28
   16190:	d51a      	bpl.n	161c8 <LoRaMacProcess+0x1bc>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   16192:	4b5a      	ldr	r3, [pc, #360]	; (162fc <LoRaMacProcess+0x2f0>)
   16194:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   16198:	2b02      	cmp	r3, #2
   1619a:	d002      	beq.n	161a2 <LoRaMacProcess+0x196>
        Radio.Sleep( );
   1619c:	4b58      	ldr	r3, [pc, #352]	; (16300 <LoRaMacProcess+0x2f4>)
   1619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   161a0:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
   161a2:	2002      	movs	r0, #2
    UpdateRxSlotIdleState( );
   161a4:	f7fe fc92 	bl	14acc <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
   161a8:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
   161ac:	f001 fdbc 	bl	17d28 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
   161b0:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   161b4:	b113      	cbz	r3, 161bc <LoRaMacProcess+0x1b0>
        MacCtx.RetransmitTimeoutRetry = true;
   161b6:	2301      	movs	r3, #1
   161b8:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
   161bc:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   161c0:	f043 0310 	orr.w	r3, r3, #16
   161c4:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( events.Events.RxError == 1 )
   161c8:	9b03      	ldr	r3, [sp, #12]
   161ca:	075a      	lsls	r2, r3, #29
   161cc:	d503      	bpl.n	161d6 <LoRaMacProcess+0x1ca>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
   161ce:	2106      	movs	r1, #6
   161d0:	2005      	movs	r0, #5
   161d2:	f7fe fcd3 	bl	14b7c <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
   161d6:	9b03      	ldr	r3, [sp, #12]
   161d8:	079b      	lsls	r3, r3, #30
   161da:	d503      	bpl.n	161e4 <LoRaMacProcess+0x1d8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
   161dc:	2104      	movs	r1, #4
   161de:	2003      	movs	r0, #3
   161e0:	f7fe fccc 	bl	14b7c <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
   161e4:	f016 f91a 	bl	2c41c <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
   161e8:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
   161ec:	06d7      	lsls	r7, r2, #27
   161ee:	f140 8389 	bpl.w	16904 <LoRaMacProcess+0x8f8>
    MacCtx.AllowRequests = requestState;
   161f2:	2300      	movs	r3, #0
   161f4:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
   161f8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   161fc:	061e      	lsls	r6, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   161fe:	bf44      	itt	mi
   16200:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
   16204:	f8c4 3340 	strmi.w	r3, [r4, #832]	; 0x340
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
   16208:	f012 0f05 	tst.w	r2, #5
   1620c:	f000 82f3 	beq.w	167f6 <LoRaMacProcess+0x7ea>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
   16210:	200a      	movs	r0, #10
   16212:	f001 fda3 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   16216:	2800      	cmp	r0, #0
   16218:	f000 82ed 	beq.w	167f6 <LoRaMacProcess+0x7ea>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
   1621c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
   16220:	07dd      	lsls	r5, r3, #31
   16222:	f100 82e8 	bmi.w	167f6 <LoRaMacProcess+0x7ea>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16226:	0758      	lsls	r0, r3, #29
   16228:	f140 82ff 	bpl.w	1682a <LoRaMacProcess+0x81e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   1622c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   16230:	f023 0302 	bic.w	r3, r3, #2
   16234:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.MacState == LORAMAC_IDLE )
   16238:	f8d4 1340 	ldr.w	r1, [r4, #832]	; 0x340
   1623c:	2900      	cmp	r1, #0
   1623e:	f040 8358 	bne.w	168f2 <LoRaMacProcess+0x8e6>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   16242:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16246:	f013 0001 	ands.w	r0, r3, #1
        if( reqEvents.Bits.MlmeReq == 1 )
   1624a:	f003 0504 	and.w	r5, r3, #4
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   1624e:	f000 8342 	beq.w	168d6 <LoRaMacProcess+0x8ca>
            MacCtx.MacFlags.Bits.McpsReq = 0;
   16252:	f361 0300 	bfi	r3, r1, #0, #1
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16256:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.McpsReq = 0;
   16258:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   1625c:	b2da      	uxtb	r2, r3
   1625e:	d504      	bpl.n	1626a <LoRaMacProcess+0x25e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   16260:	4613      	mov	r3, r2
   16262:	f361 0382 	bfi	r3, r1, #2, #1
   16266:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   1626a:	2301      	movs	r3, #1
   1626c:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
   16270:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16274:	4828      	ldr	r0, [pc, #160]	; (16318 <LoRaMacProcess+0x30c>)
   16276:	681b      	ldr	r3, [r3, #0]
   16278:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
   1627a:	2d00      	cmp	r5, #0
   1627c:	f000 8331 	beq.w	168e2 <LoRaMacProcess+0x8d6>
   16280:	e3d8      	b.n	16a34 <LoRaMacProcess+0xa28>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   16282:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
   16286:	e708      	b.n	1609a <LoRaMacProcess+0x8e>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   16288:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   1628c:	2b01      	cmp	r3, #1
   1628e:	d10c      	bne.n	162aa <LoRaMacProcess+0x29e>
        if( LoRaMacClassBIsPingExpected( ) == true )
   16290:	f016 f8aa 	bl	2c3e8 <LoRaMacClassBIsPingExpected>
   16294:	4682      	mov	sl, r0
   16296:	b188      	cbz	r0, 162bc <LoRaMacProcess+0x2b0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   16298:	4658      	mov	r0, fp
   1629a:	f016 f89a 	bl	2c3d2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
   1629e:	4658      	mov	r0, fp
   162a0:	f016 f89c 	bl	2c3dc <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
   162a4:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   162a6:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
   162aa:	f898 b000 	ldrb.w	fp, [r8]
    if( macHdr.Bits.Major != 0 )
   162ae:	f01b 0f03 	tst.w	fp, #3
   162b2:	d00f      	beq.n	162d4 <LoRaMacProcess+0x2c8>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   162b4:	2301      	movs	r3, #1
   162b6:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
   162ba:	e187      	b.n	165cc <LoRaMacProcess+0x5c0>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
   162bc:	f016 f896 	bl	2c3ec <LoRaMacClassBIsMulticastExpected>
   162c0:	2800      	cmp	r0, #0
   162c2:	d0f2      	beq.n	162aa <LoRaMacProcess+0x29e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   162c4:	4650      	mov	r0, sl
   162c6:	f016 f885 	bl	2c3d4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
   162ca:	4650      	mov	r0, sl
   162cc:	f016 f887 	bl	2c3de <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   162d0:	2305      	movs	r3, #5
   162d2:	e7e8      	b.n	162a6 <LoRaMacProcess+0x29a>
    switch( macHdr.Bits.MType )
   162d4:	ea4f 135b 	mov.w	r3, fp, lsr #5
   162d8:	3b01      	subs	r3, #1
   162da:	2b06      	cmp	r3, #6
   162dc:	f200 8277 	bhi.w	167ce <LoRaMacProcess+0x7c2>
   162e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   162e4:	0275001c 	.word	0x0275001c
   162e8:	027500c9 	.word	0x027500c9
   162ec:	027500c6 	.word	0x027500c6
   162f0:	0265      	.short	0x0265
   162f2:	bf00      	nop
   162f4:	2002fb5c 	.word	0x2002fb5c
   162f8:	2003004c 	.word	0x2003004c
   162fc:	2002fbf0 	.word	0x2002fbf0
   16300:	000338dc 	.word	0x000338dc
   16304:	200303d4 	.word	0x200303d4
   16308:	200303ec 	.word	0x200303ec
   1630c:	2003044c 	.word	0x2003044c
   16310:	2002fb58 	.word	0x2002fb58
   16314:	2002fb48 	.word	0x2002fb48
   16318:	20030490 	.word	0x20030490
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
   1631c:	2e10      	cmp	r6, #16
   1631e:	d9c9      	bls.n	162b4 <LoRaMacProcess+0x2a8>
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
   16320:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
            macMsgJoinAccept.BufSize = size;
   16324:	b2f6      	uxtb	r6, r6
            macMsgJoinAccept.Buffer = payload;
   16326:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
            macMsgJoinAccept.BufSize = size;
   1632a:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
   1632e:	b11b      	cbz	r3, 16338 <LoRaMacProcess+0x32c>
   16330:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   16334:	2b00      	cmp	r3, #0
   16336:	d0bd      	beq.n	162b4 <LoRaMacProcess+0x2a8>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
   16338:	f7fe fb76 	bl	14a28 <SecureElementGetJoinEui>
   1633c:	aa14      	add	r2, sp, #80	; 0x50
   1633e:	4601      	mov	r1, r0
   16340:	20ff      	movs	r0, #255	; 0xff
   16342:	f002 f8d3 	bl	184ec <LoRaMacCryptoHandleJoinAccept>
   16346:	4607      	mov	r7, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   16348:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   1634c:	2207      	movs	r2, #7
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   1634e:	f3c3 0303 	ubfx	r3, r3, #0, #4
   16352:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   16356:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   1635a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   1635e:	a91e      	add	r1, sp, #120	; 0x78
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   16360:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   16364:	f016 fb6f 	bl	2ca46 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
   16368:	2f00      	cmp	r7, #0
   1636a:	d177      	bne.n	1645c <LoRaMacProcess+0x450>
   1636c:	2800      	cmp	r0, #0
   1636e:	d075      	beq.n	1645c <LoRaMacProcess+0x450>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   16370:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
   16374:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   16378:	041b      	lsls	r3, r3, #16
   1637a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
   1637e:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
                if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )
   16382:	f99d 1060 	ldrsb.w	r1, [sp, #96]	; 0x60
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   16386:	4313      	orrs	r3, r2
   16388:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
   1638c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
   1638e:	f04f 0801 	mov.w	r8, #1
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
   16392:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   16396:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   1639a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   1639e:	f3c3 1202 	ubfx	r2, r3, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   163a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
   163a6:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   163aa:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
   163ae:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   163b2:	f885 2079 	strb.w	r2, [r5, #121]	; 0x79
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
   163b6:	2b01      	cmp	r3, #1
   163b8:	bf38      	it	cc
   163ba:	2301      	movcc	r3, #1
   163bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   163c0:	4353      	muls	r3, r2
   163c2:	66ab      	str	r3, [r5, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
   163c4:	4413      	add	r3, r2
   163c6:	66eb      	str	r3, [r5, #108]	; 0x6c
                    Nvm.MacGroup2.Version.Value = LORAMAC_FALLBACK_VERSION;
   163c8:	4aa9      	ldr	r2, [pc, #676]	; (16670 <LoRaMacProcess+0x664>)
   163ca:	4baa      	ldr	r3, [pc, #680]	; (16674 <LoRaMacProcess+0x668>)
                applyCFList.Size = size - 17;
   163cc:	3e11      	subs	r6, #17
                    Nvm.MacGroup2.Version.Value = LORAMAC_FALLBACK_VERSION;
   163ce:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   163d2:	bf38      	it	cc
   163d4:	4613      	movcc	r3, r2
   163d6:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
                applyCFList.Payload = macMsgJoinAccept.CFList;
   163da:	f10d 0362 	add.w	r3, sp, #98	; 0x62
   163de:	9312      	str	r3, [sp, #72]	; 0x48
                applyCFList.JoinChannel = MacCtx.Channel;
   163e0:	f894 341b 	ldrb.w	r3, [r4, #1051]	; 0x41b
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   163e4:	a911      	add	r1, sp, #68	; 0x44
                applyCFList.JoinChannel = MacCtx.Channel;
   163e6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
   163ea:	f885 8078 	strb.w	r8, [r5, #120]	; 0x78
                applyCFList.Size = size - 17;
   163ee:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   163f2:	f016 fb31 	bl	2ca58 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
   163f6:	2302      	movs	r3, #2
   163f8:	f885 31b8 	strb.w	r3, [r5, #440]	; 0x1b8
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   163fc:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   16400:	b143      	cbz	r3, 16414 <LoRaMacProcess+0x408>
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
   16402:	4642      	mov	r2, r8
   16404:	200b      	movs	r0, #11
   16406:	a909      	add	r1, sp, #36	; 0x24
                    Nvm.MacGroup1.RekeyIndUplinksCounter = 0;
   16408:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
                    macCmdPayload[0] = Nvm.MacGroup2.Version.Fields.Minor;
   1640c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
   16410:	f001 fb1e 	bl	17a50 <LoRaMacCommandsAddCmd>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   16414:	2001      	movs	r0, #1
   16416:	f001 fca1 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   1641a:	b118      	cbz	r0, 16424 <LoRaMacProcess+0x418>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
   1641c:	2101      	movs	r1, #1
   1641e:	2000      	movs	r0, #0
   16420:	f001 fc60 	bl	17ce4 <LoRaMacConfirmQueueSetStatus>
                if( Nvm.MacGroup2.IsRejoinAcceptPending == true )
   16424:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   16428:	b12b      	cbz	r3, 16436 <LoRaMacProcess+0x42a>
                    Nvm.MacGroup2.IsRejoinAcceptPending = false;
   1642a:	2300      	movs	r3, #0
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   1642c:	4892      	ldr	r0, [pc, #584]	; (16678 <LoRaMacProcess+0x66c>)
                    Nvm.MacGroup2.IsRejoinAcceptPending = false;
   1642e:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   16432:	f7fc fe5d 	bl	130f0 <TimerStop>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16436:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1643a:	2b01      	cmp	r3, #1
   1643c:	f200 81d5 	bhi.w	167ea <LoRaMacProcess+0x7de>
        if( MacCtx.NodeAckRequested == true )
   16440:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   16444:	2b00      	cmp	r3, #0
   16446:	f040 81c8 	bne.w	167da <LoRaMacProcess+0x7ce>
        MacCtx.MacFlags.Bits.MacDone = 1;
   1644a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   1644e:	f043 0310 	orr.w	r3, r3, #16
   16452:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
   16456:	f7fe fb39 	bl	14acc <UpdateRxSlotIdleState>
   1645a:	e697      	b.n	1618c <LoRaMacProcess+0x180>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   1645c:	2001      	movs	r0, #1
   1645e:	f001 fc7d 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   16462:	2800      	cmp	r0, #0
   16464:	d0e7      	beq.n	16436 <LoRaMacProcess+0x42a>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
   16466:	2101      	movs	r1, #1
   16468:	2007      	movs	r0, #7
   1646a:	f001 fc3b 	bl	17ce4 <LoRaMacConfirmQueueSetStatus>
   1646e:	e7e2      	b.n	16436 <LoRaMacProcess+0x42a>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
   16470:	2301      	movs	r3, #1
   16472:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   16476:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1647a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1647e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
   16482:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16486:	a90d      	add	r1, sp, #52	; 0x34
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
   16488:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            getPhy.Attribute = PHY_MAX_PAYLOAD;
   1648c:	230d      	movs	r3, #13
   1648e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16492:	f016 fac2 	bl	2ca1a <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
   16496:	f1a6 030d 	sub.w	r3, r6, #13
   1649a:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1649c:	900b      	str	r0, [sp, #44]	; 0x2c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
   1649e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   164a2:	b200      	sxth	r0, r0
   164a4:	4283      	cmp	r3, r0
   164a6:	f73f af05 	bgt.w	162b4 <LoRaMacProcess+0x2a8>
   164aa:	2e0b      	cmp	r6, #11
   164ac:	f67f af02 	bls.w	162b4 <LoRaMacProcess+0x2a8>
            macMsgData.FRMPayload = MacCtx.RxPayload;
   164b0:	4b72      	ldr	r3, [pc, #456]	; (1667c <LoRaMacProcess+0x670>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
   164b2:	a81e      	add	r0, sp, #120	; 0x78
            macMsgData.FRMPayload = MacCtx.RxPayload;
   164b4:	9327      	str	r3, [sp, #156]	; 0x9c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
   164b6:	23ff      	movs	r3, #255	; 0xff
            macMsgData.Buffer = payload;
   164b8:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
            macMsgData.BufSize = size;
   164bc:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
   164c0:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
   164c4:	f016 f92b 	bl	2c71e <LoRaMacParserData>
   164c8:	4680      	mov	r8, r0
   164ca:	2800      	cmp	r0, #0
   164cc:	f47f aef2 	bne.w	162b4 <LoRaMacProcess+0x2a8>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   164d0:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   164d4:	2b01      	cmp	r3, #1
   164d6:	d114      	bne.n	16502 <LoRaMacProcess+0x4f6>
                if( LoRaMacClassBIsPingExpected( ) == true )
   164d8:	f015 ff86 	bl	2c3e8 <LoRaMacClassBIsPingExpected>
   164dc:	4606      	mov	r6, r0
   164de:	2800      	cmp	r0, #0
   164e0:	d043      	beq.n	1656a <LoRaMacProcess+0x55e>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   164e2:	4640      	mov	r0, r8
   164e4:	f015 ff75 	bl	2c3d2 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
   164e8:	4640      	mov	r0, r8
   164ea:	f015 ff77 	bl	2c3dc <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
   164ee:	2304      	movs	r3, #4
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
   164f0:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   164f4:	9820      	ldr	r0, [sp, #128]	; 0x80
   164f6:	f3c1 1100 	ubfx	r1, r1, #4, #1
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   164fa:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
   164fe:	f015 ff8c 	bl	2c41a <LoRaMacClassBSetFPendingBit>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
   16502:	9a20      	ldr	r2, [sp, #128]	; 0x80
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
   16504:	a914      	add	r1, sp, #80	; 0x50
   16506:	a81e      	add	r0, sp, #120	; 0x78
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
   16508:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
   1650c:	f015 fed2 	bl	2c2b4 <DetermineFrameType>
   16510:	4680      	mov	r8, r0
   16512:	2800      	cmp	r0, #0
   16514:	f47f aece 	bne.w	162b4 <LoRaMacProcess+0x2a8>
            downLinkCounter = 0;
   16518:	4603      	mov	r3, r0
   1651a:	4959      	ldr	r1, [pc, #356]	; (16680 <LoRaMacProcess+0x674>)
   1651c:	900c      	str	r0, [sp, #48]	; 0x30
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
   1651e:	f8d1 00e4 	ldr.w	r0, [r1, #228]	; 0xe4
   16522:	4282      	cmp	r2, r0
   16524:	d12d      	bne.n	16582 <LoRaMacProcess+0x576>
   16526:	f891 60e1 	ldrb.w	r6, [r1, #225]	; 0xe1
   1652a:	b356      	cbz	r6, 16582 <LoRaMacProcess+0x576>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
   1652c:	2230      	movs	r2, #48	; 0x30
   1652e:	fb02 5303 	mla	r3, r2, r3, r5
   16532:	f893 a0e2 	ldrb.w	sl, [r3, #226]	; 0xe2
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
   16536:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1653a:	681b      	ldr	r3, [r3, #0]
   1653c:	930c      	str	r3, [sp, #48]	; 0x30
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
   1653e:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   16542:	2b02      	cmp	r3, #2
   16544:	d102      	bne.n	1654c <LoRaMacProcess+0x540>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
   16546:	2303      	movs	r3, #3
   16548:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
   1654c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   16550:	2b03      	cmp	r3, #3
   16552:	f47f aeaf 	bne.w	162b4 <LoRaMacProcess+0x2a8>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
   16556:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   1655a:	f013 0f60 	tst.w	r3, #96	; 0x60
   1655e:	f47f aea9 	bne.w	162b4 <LoRaMacProcess+0x2a8>
   16562:	f04f 0801 	mov.w	r8, #1
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
   16566:	9005      	str	r0, [sp, #20]
   16568:	e011      	b.n	1658e <LoRaMacProcess+0x582>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
   1656a:	f015 ff3f 	bl	2c3ec <LoRaMacClassBIsMulticastExpected>
   1656e:	2800      	cmp	r0, #0
   16570:	d0c7      	beq.n	16502 <LoRaMacProcess+0x4f6>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   16572:	4630      	mov	r0, r6
   16574:	f015 ff2e 	bl	2c3d4 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
   16578:	4630      	mov	r0, r6
   1657a:	f015 ff30 	bl	2c3de <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   1657e:	2305      	movs	r3, #5
   16580:	e7b6      	b.n	164f0 <LoRaMacProcess+0x4e4>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
   16582:	3301      	adds	r3, #1
   16584:	2b04      	cmp	r3, #4
   16586:	f101 0130 	add.w	r1, r1, #48	; 0x30
   1658a:	d1c8      	bne.n	1651e <LoRaMacProcess+0x512>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
   1658c:	469a      	mov	sl, r3
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
   1658e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   16592:	f895 61b6 	ldrb.w	r6, [r5, #438]	; 0x1b6
   16596:	9304      	str	r3, [sp, #16]
    switch( addrID )
   16598:	f1ba 0f04 	cmp.w	sl, #4
   1659c:	d810      	bhi.n	165c0 <LoRaMacProcess+0x5b4>
   1659e:	e8df f00a 	tbb	[pc, sl]
   165a2:	0324      	.short	0x0324
   165a4:	2220      	.short	0x2220
   165a6:	18          	.byte	0x18
   165a7:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_1;
   165a8:	2605      	movs	r6, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
   165aa:	4630      	mov	r0, r6
   165ac:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
   165b0:	aa0c      	add	r2, sp, #48	; 0x30
   165b2:	f016 f829 	bl	2c608 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   165b6:	b1f0      	cbz	r0, 165f6 <LoRaMacProcess+0x5ea>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
   165b8:	2807      	cmp	r0, #7
   165ba:	d101      	bne.n	165c0 <LoRaMacProcess+0x5b4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
   165bc:	2308      	movs	r3, #8
   165be:	e000      	b.n	165c2 <LoRaMacProcess+0x5b6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   165c0:	2301      	movs	r3, #1
   165c2:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   165c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   165c8:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
   165cc:	f7fe faba 	bl	14b44 <PrepareRxDoneAbort>
                return;
   165d0:	e5dc      	b.n	1618c <LoRaMacProcess+0x180>
            if( lrWanVersion.Fields.Minor == 1 )
   165d2:	2e01      	cmp	r6, #1
   165d4:	d10b      	bne.n	165ee <LoRaMacProcess+0x5e2>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
   165d6:	9b04      	ldr	r3, [sp, #16]
   165d8:	b15b      	cbz	r3, 165f2 <LoRaMacProcess+0x5e6>
                    *fCntID = A_FCNT_DOWN;
   165da:	2b03      	cmp	r3, #3
   165dc:	bf08      	it	eq
   165de:	2602      	moveq	r6, #2
   165e0:	e7e3      	b.n	165aa <LoRaMacProcess+0x59e>
            *fCntID = MC_FCNT_DOWN_2;
   165e2:	2606      	movs	r6, #6
            break;
   165e4:	e7e1      	b.n	165aa <LoRaMacProcess+0x59e>
            *fCntID = MC_FCNT_DOWN_3;
   165e6:	2607      	movs	r6, #7
            break;
   165e8:	e7df      	b.n	165aa <LoRaMacProcess+0x59e>
    switch( addrID )
   165ea:	2604      	movs	r6, #4
   165ec:	e7dd      	b.n	165aa <LoRaMacProcess+0x59e>
                *fCntID = FCNT_DOWN;
   165ee:	2603      	movs	r6, #3
   165f0:	e7db      	b.n	165aa <LoRaMacProcess+0x59e>
                    *fCntID = A_FCNT_DOWN;
   165f2:	2602      	movs	r6, #2
   165f4:	e7d9      	b.n	165aa <LoRaMacProcess+0x59e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
   165f6:	ab1e      	add	r3, sp, #120	; 0x78
   165f8:	9300      	str	r3, [sp, #0]
   165fa:	4632      	mov	r2, r6
   165fc:	4650      	mov	r0, sl
   165fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16600:	9905      	ldr	r1, [sp, #20]
   16602:	f001 feb1 	bl	18368 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   16606:	b120      	cbz	r0, 16612 <LoRaMacProcess+0x606>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
   16608:	2802      	cmp	r0, #2
   1660a:	bf14      	ite	ne
   1660c:	230b      	movne	r3, #11
   1660e:	230a      	moveq	r3, #10
   16610:	e651      	b.n	162b6 <LoRaMacProcess+0x2aa>
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   16612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16614:	f894 6431 	ldrb.w	r6, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   16618:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   1661c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16620:	2e01      	cmp	r6, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   16622:	f3c3 1340 	ubfx	r3, r3, #5, #1
   16626:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   1662a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
                Nvm.MacGroup2.DownlinkReceived = true;
   1662e:	bf9e      	ittt	ls
   16630:	2301      	movls	r3, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
   16632:	63a8      	strls	r0, [r5, #56]	; 0x38
                Nvm.MacGroup2.DownlinkReceived = true;
   16634:	f885 31a6 	strbls.w	r3, [r5, #422]	; 0x1a6
            if( multicast == 1 )
   16638:	f1b8 0f01 	cmp.w	r8, #1
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   1663c:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
   16640:	f884 8422 	strb.w	r8, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
   16644:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
   16648:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   1664c:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            if( multicast == 1 )
   16650:	d118      	bne.n	16684 <LoRaMacProcess+0x678>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
   16652:	2302      	movs	r3, #2
   16654:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   16658:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   1665c:	b91b      	cbnz	r3, 16666 <LoRaMacProcess+0x65a>
   1665e:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   16662:	06db      	lsls	r3, r3, #27
   16664:	d52d      	bpl.n	166c2 <LoRaMacProcess+0x6b6>
   16666:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   1666a:	b36b      	cbz	r3, 166c8 <LoRaMacProcess+0x6bc>
   1666c:	e029      	b.n	166c2 <LoRaMacProcess+0x6b6>
   1666e:	bf00      	nop
   16670:	01000400 	.word	0x01000400
   16674:	01010100 	.word	0x01010100
   16678:	20030524 	.word	0x20030524
   1667c:	20030284 	.word	0x20030284
   16680:	2002fbf0 	.word	0x2002fbf0
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
   16684:	f00b 0be0 	and.w	fp, fp, #224	; 0xe0
   16688:	f1bb 0fa0 	cmp.w	fp, #160	; 0xa0
   1668c:	d132      	bne.n	166f4 <LoRaMacProcess+0x6e8>
                    Nvm.MacGroup1.SrvAckRequested = true;
   1668e:	2101      	movs	r1, #1
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
   16690:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
                    Nvm.MacGroup1.SrvAckRequested = true;
   16694:	f885 104a 	strb.w	r1, [r5, #74]	; 0x4a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
   16698:	b90b      	cbnz	r3, 1669e <LoRaMacProcess+0x692>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
   1669a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1669c:	646b      	str	r3, [r5, #68]	; 0x44
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
   1669e:	2e01      	cmp	r6, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
   166a0:	f884 1420 	strb.w	r1, [r4, #1056]	; 0x420
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
   166a4:	f240 81d5 	bls.w	16a52 <LoRaMacProcess+0xa46>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
   166a8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   166ac:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
   166b0:	f8d9 3000 	ldr.w	r3, [r9]
   166b4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   166b8:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   166bc:	2b00      	cmp	r3, #0
   166be:	f000 81f1 	beq.w	16aa4 <LoRaMacProcess+0xa98>
   166c2:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   166c6:	b113      	cbz	r3, 166ce <LoRaMacProcess+0x6c2>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   166c8:	2301      	movs	r3, #1
   166ca:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   166ce:	2e01      	cmp	r6, #1
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
   166d0:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   166d4:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   166d8:	d805      	bhi.n	166e6 <LoRaMacProcess+0x6da>
        if( request == MCPS_CONFIRMED )
   166da:	2a01      	cmp	r2, #1
   166dc:	d101      	bne.n	166e2 <LoRaMacProcess+0x6d6>
            if( fCtrl.Bits.Ack == 1 )
   166de:	069e      	lsls	r6, r3, #26
   166e0:	d501      	bpl.n	166e6 <LoRaMacProcess+0x6da>
                LoRaMacCommandsRemoveStickyAnsCmds( );
   166e2:	f001 fa3b 	bl	17b5c <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
   166e6:	9a04      	ldr	r2, [sp, #16]
   166e8:	2a03      	cmp	r2, #3
   166ea:	d85a      	bhi.n	167a2 <LoRaMacProcess+0x796>
   166ec:	e8df f002 	tbb	[pc, r2]
   166f0:	12522108 	.word	0x12522108
                    Nvm.MacGroup1.SrvAckRequested = false;
   166f4:	2300      	movs	r3, #0
   166f6:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
   166fa:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   166fe:	e7ae      	b.n	1665e <LoRaMacProcess+0x652>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
   16700:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   16704:	463a      	mov	r2, r7
   16706:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1670a:	f001 010f 	and.w	r1, r1, #15
   1670e:	a822      	add	r0, sp, #136	; 0x88
   16710:	f7ff f8f4 	bl	158fc <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
   16714:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
   16718:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
   1671c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1671e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
   16722:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
   16726:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
   1672a:	2301      	movs	r3, #1
   1672c:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
                    break;
   16730:	e00d      	b.n	1674e <LoRaMacProcess+0x742>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
   16732:	463a      	mov	r2, r7
   16734:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   16738:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1673c:	f001 010f 	and.w	r1, r1, #15
   16740:	a822      	add	r0, sp, #136	; 0x88
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
   16742:	f7ff f8db 	bl	158fc <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
   16746:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
   1674a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            if( Nvm.MacGroup2.IsRejoinAcceptPending == true )
   1674e:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   16752:	b15b      	cbz	r3, 1676c <LoRaMacProcess+0x760>
                Nvm.MacGroup2.IsRejoinAcceptPending = false;
   16754:	2600      	movs	r6, #0
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   16756:	48c6      	ldr	r0, [pc, #792]	; (16a70 <LoRaMacProcess+0xa64>)
                Nvm.MacGroup2.IsRejoinAcceptPending = false;
   16758:	f885 61d0 	strb.w	r6, [r5, #464]	; 0x1d0
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   1675c:	f7fc fcc8 	bl	130f0 <TimerStop>
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16760:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16764:	0758      	lsls	r0, r3, #29
                    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   16766:	bf48      	it	mi
   16768:	f884 6459 	strbmi.w	r6, [r4, #1113]	; 0x459
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && (Nvm.MacGroup2.IsCertPortOn == false ) )
   1676c:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
   16770:	2ae0      	cmp	r2, #224	; 0xe0
   16772:	d108      	bne.n	16786 <LoRaMacProcess+0x77a>
   16774:	f895 31a7 	ldrb.w	r3, [r5, #423]	; 0x1a7
   16778:	b92b      	cbnz	r3, 16786 <LoRaMacProcess+0x77a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
   1677a:	f884 2423 	strb.w	r2, [r4, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
   1677e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
   16782:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
   16786:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   1678a:	f043 0302 	orr.w	r3, r3, #2
   1678e:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            break;
   16792:	e650      	b.n	16436 <LoRaMacProcess+0x42a>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
   16794:	463a      	mov	r2, r7
   16796:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1679a:	f89d 10a0 	ldrb.w	r1, [sp, #160]	; 0xa0
   1679e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   167a0:	e7cf      	b.n	16742 <LoRaMacProcess+0x736>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   167a2:	2301      	movs	r3, #1
   167a4:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
   167a8:	f7fe f9cc 	bl	14b44 <PrepareRxDoneAbort>
                    break;
   167ac:	e7cf      	b.n	1674e <LoRaMacProcess+0x742>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
   167ae:	4db1      	ldr	r5, [pc, #708]	; (16a74 <LoRaMacProcess+0xa68>)
   167b0:	3e01      	subs	r6, #1
   167b2:	4628      	mov	r0, r5
   167b4:	b2b2      	uxth	r2, r6
   167b6:	f108 0101 	add.w	r1, r8, #1
   167ba:	f015 f94a 	bl	2ba52 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
   167be:	2303      	movs	r3, #3
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
   167c0:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
   167c4:	f8a4 3420 	strh.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
   167c8:	f884 642c 	strb.w	r6, [r4, #1068]	; 0x42c
   167cc:	e7db      	b.n	16786 <LoRaMacProcess+0x77a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   167ce:	2301      	movs	r3, #1
   167d0:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
   167d4:	f7fe f9b6 	bl	14b44 <PrepareRxDoneAbort>
            break;
   167d8:	e62d      	b.n	16436 <LoRaMacProcess+0x42a>
            if( MacCtx.McpsConfirm.AckReceived == true )
   167da:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
   167de:	2b00      	cmp	r3, #0
   167e0:	f43f ae33 	beq.w	1644a <LoRaMacProcess+0x43e>
                OnRetransmitTimeoutTimerEvent( NULL );
   167e4:	2000      	movs	r0, #0
   167e6:	f7fe f995 	bl	14b14 <OnRetransmitTimeoutTimerEvent>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
   167ea:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   167ee:	2b02      	cmp	r3, #2
   167f0:	f43f ae31 	beq.w	16456 <LoRaMacProcess+0x44a>
   167f4:	e629      	b.n	1644a <LoRaMacProcess+0x43e>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   167f6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   167fa:	0759      	lsls	r1, r3, #29
   167fc:	d515      	bpl.n	1682a <LoRaMacProcess+0x81e>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   167fe:	2001      	movs	r0, #1
   16800:	f001 faac 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   16804:	b160      	cbz	r0, 16820 <LoRaMacProcess+0x814>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
   16806:	2001      	movs	r0, #1
   16808:	f001 fa7e 	bl	17d08 <LoRaMacConfirmQueueGetStatus>
   1680c:	b908      	cbnz	r0, 16812 <LoRaMacProcess+0x806>
                MacCtx.ChannelsNbTransCounter = 0;
   1680e:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   16812:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   16816:	f023 0302 	bic.w	r3, r3, #2
   1681a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
   1681e:	e004      	b.n	1682a <LoRaMacProcess+0x81e>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
   16820:	2005      	movs	r0, #5
   16822:	f001 fa9b 	bl	17d5c <LoRaMacConfirmQueueIsCmdActive>
   16826:	2800      	cmp	r0, #0
   16828:	d1f3      	bne.n	16812 <LoRaMacProcess+0x806>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   1682a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   1682e:	07da      	lsls	r2, r3, #31
   16830:	f57f ad02 	bpl.w	16238 <LoRaMacProcess+0x22c>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
   16834:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   16838:	b10a      	cbz	r2, 1683e <LoRaMacProcess+0x832>
   1683a:	2a03      	cmp	r2, #3
   1683c:	d12b      	bne.n	16896 <LoRaMacProcess+0x88a>
    if( counter >= limit )
   1683e:	4a8e      	ldr	r2, [pc, #568]	; (16a78 <LoRaMacProcess+0xa6c>)
   16840:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   16844:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   16848:	4291      	cmp	r1, r2
   1684a:	d205      	bcs.n	16858 <LoRaMacProcess+0x84c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   1684c:	079b      	lsls	r3, r3, #30
   1684e:	d536      	bpl.n	168be <LoRaMacProcess+0x8b2>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16850:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16854:	2b01      	cmp	r3, #1
   16856:	d832      	bhi.n	168be <LoRaMacProcess+0x8b2>
            TimerStop( &MacCtx.TxDelayedTimer );
   16858:	4888      	ldr	r0, [pc, #544]	; (16a7c <LoRaMacProcess+0xa70>)
   1685a:	f7fc fc49 	bl	130f0 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   1685e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   16862:	f023 0320 	bic.w	r3, r3, #32
   16866:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
   1686a:	f7fe fbe3 	bl	15034 <StopRetransmission.isra.0>
    if( ( Nvm.MacGroup2.Rejoin0UplinksLimit == Nvm.MacGroup1.Rejoin0UplinksCounter ) &&
   1686e:	4b82      	ldr	r3, [pc, #520]	; (16a78 <LoRaMacProcess+0xa6c>)
   16870:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   16874:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   16876:	428a      	cmp	r2, r1
   16878:	f47f acde 	bne.w	16238 <LoRaMacProcess+0x22c>
   1687c:	f893 11b6 	ldrb.w	r1, [r3, #438]	; 0x1b6
   16880:	2900      	cmp	r1, #0
   16882:	f43f acd9 	beq.w	16238 <LoRaMacProcess+0x22c>
        ( Nvm.MacGroup2.Version.Fields.Minor >= 1 ) &&
   16886:	2a00      	cmp	r2, #0
   16888:	f43f acd6 	beq.w	16238 <LoRaMacProcess+0x22c>
        Nvm.MacGroup1.Rejoin0UplinksCounter = 0;
   1688c:	2000      	movs	r0, #0
   1688e:	64d8      	str	r0, [r3, #76]	; 0x4c
                SendReJoinReq( REJOIN_REQ_0 );
   16890:	f7fe ff16 	bl	156c0 <SendReJoinReq>
   16894:	e4d0      	b.n	16238 <LoRaMacProcess+0x22c>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
   16896:	2a01      	cmp	r2, #1
   16898:	d111      	bne.n	168be <LoRaMacProcess+0x8b2>
            if( MacCtx.RetransmitTimeoutRetry == true )
   1689a:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   1689e:	2a00      	cmp	r2, #0
   168a0:	f43f acca 	beq.w	16238 <LoRaMacProcess+0x22c>
    if( counter >= limit )
   168a4:	4a74      	ldr	r2, [pc, #464]	; (16a78 <LoRaMacProcess+0xa6c>)
   168a6:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   168aa:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   168ae:	4291      	cmp	r1, r2
   168b0:	d2d2      	bcs.n	16858 <LoRaMacProcess+0x84c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   168b2:	079f      	lsls	r7, r3, #30
   168b4:	d503      	bpl.n	168be <LoRaMacProcess+0x8b2>
        if( stopRetransmission == true )
   168b6:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
   168ba:	2b00      	cmp	r3, #0
   168bc:	d1cc      	bne.n	16858 <LoRaMacProcess+0x84c>
            MacCtx.RetransmitTimeoutRetry = false;
   168be:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
   168c0:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
   168c4:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
            MacCtx.MacFlags.Bits.MacDone = 0;
   168c8:	f36f 1304 	bfc	r3, #4, #1
   168cc:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            OnTxDelayedTimerEvent( NULL );
   168d0:	f7fe fe3e 	bl	15550 <OnTxDelayedTimerEvent>
   168d4:	e4b0      	b.n	16238 <LoRaMacProcess+0x22c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   168d6:	2201      	movs	r2, #1
   168d8:	2d00      	cmp	r5, #0
   168da:	f040 80a5 	bne.w	16a28 <LoRaMacProcess+0xa1c>
    MacCtx.AllowRequests = requestState;
   168de:	f884 248e 	strb.w	r2, [r4, #1166]	; 0x48e
        LoRaMacClassBResumeBeaconing( );
   168e2:	f015 fd89 	bl	2c3f8 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
   168e6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   168ea:	f36f 1304 	bfc	r3, #4, #1
   168ee:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   168f2:	2301      	movs	r3, #1
   168f4:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        MacCtx.MacFlags.Bits.NvmHandle = 1;
   168f8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   168fc:	f043 0320 	orr.w	r3, r3, #32
   16900:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
   16904:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16908:	0718      	lsls	r0, r3, #28
   1690a:	d508      	bpl.n	1691e <LoRaMacProcess+0x912>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
   1690c:	f36f 03c3 	bfc	r3, #3, #1
   16910:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
   16914:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16918:	4859      	ldr	r0, [pc, #356]	; (16a80 <LoRaMacProcess+0xa74>)
   1691a:	68db      	ldr	r3, [r3, #12]
   1691c:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   1691e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16922:	0799      	lsls	r1, r3, #30
   16924:	d508      	bpl.n	16938 <LoRaMacProcess+0x92c>
        MacCtx.MacFlags.Bits.McpsInd = 0;
   16926:	f36f 0341 	bfc	r3, #1, #1
   1692a:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
   1692e:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16932:	4854      	ldr	r0, [pc, #336]	; (16a84 <LoRaMacProcess+0xa78>)
   16934:	685b      	ldr	r3, [r3, #4]
   16936:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
   16938:	f894 348c 	ldrb.w	r3, [r4, #1164]	; 0x48c
   1693c:	2b02      	cmp	r3, #2
   1693e:	d101      	bne.n	16944 <LoRaMacProcess+0x938>
        OpenContinuousRxCWindow( );
   16940:	f7fe fa6c 	bl	14e1c <OpenContinuousRxCWindow>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
   16944:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16948:	069a      	lsls	r2, r3, #26
   1694a:	f140 80ae 	bpl.w	16aaa <LoRaMacProcess+0xa9e>
    if( MacCtx.MacState != LORAMAC_IDLE )
   1694e:	f8d4 5340 	ldr.w	r5, [r4, #832]	; 0x340
        MacCtx.MacFlags.Bits.NvmHandle = 0;
   16952:	f36f 1345 	bfc	r3, #5, #1
   16956:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState != LORAMAC_IDLE )
   1695a:	2d00      	cmp	r5, #0
   1695c:	f040 80a5 	bne.w	16aaa <LoRaMacProcess+0xa9e>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
   16960:	4e45      	ldr	r6, [pc, #276]	; (16a78 <LoRaMacProcess+0xa6c>)
   16962:	2134      	movs	r1, #52	; 0x34
   16964:	4630      	mov	r0, r6
   16966:	f7fc fb27 	bl	12fb8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
   1696a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   1696c:	211c      	movs	r1, #28
    if( crc != nvmData->Crypto.Crc32 )
   1696e:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
   16970:	bf18      	it	ne
   16972:	6370      	strne	r0, [r6, #52]	; 0x34
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   16974:	4844      	ldr	r0, [pc, #272]	; (16a88 <LoRaMacProcess+0xa7c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
   16976:	bf18      	it	ne
   16978:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   1697a:	f7fc fb1d 	bl	12fb8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
   1697e:	6d73      	ldr	r3, [r6, #84]	; 0x54
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   16980:	f44f 71be 	mov.w	r1, #380	; 0x17c
    if( crc != nvmData->MacGroup1.Crc32 )
   16984:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
   16986:	bf18      	it	ne
   16988:	6570      	strne	r0, [r6, #84]	; 0x54
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   1698a:	4840      	ldr	r0, [pc, #256]	; (16a8c <LoRaMacProcess+0xa80>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
   1698c:	bf18      	it	ne
   1698e:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   16992:	f7fc fb11 	bl	12fb8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
   16996:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   1699a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    if( crc != nvmData->MacGroup2.Crc32 )
   1699e:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
   169a0:	bf18      	it	ne
   169a2:	f8c6 01d4 	strne.w	r0, [r6, #468]	; 0x1d4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   169a6:	483a      	ldr	r0, [pc, #232]	; (16a90 <LoRaMacProcess+0xa84>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
   169a8:	bf18      	it	ne
   169aa:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   169ae:	f7fc fb03 	bl	12fb8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
   169b2:	f8d6 3374 	ldr.w	r3, [r6, #884]	; 0x374
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   169b6:	2100      	movs	r1, #0
    if( crc != nvmData->SecureElement.Crc32 )
   169b8:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
   169ba:	bf18      	it	ne
   169bc:	f8c6 0374 	strne.w	r0, [r6, #884]	; 0x374
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   169c0:	4834      	ldr	r0, [pc, #208]	; (16a94 <LoRaMacProcess+0xa88>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
   169c2:	bf18      	it	ne
   169c4:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   169c8:	f7fc faf6 	bl	12fb8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
   169cc:	f8d6 3378 	ldr.w	r3, [r6, #888]	; 0x378
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   169d0:	21c4      	movs	r1, #196	; 0xc4
    if( crc != nvmData->RegionGroup1.Crc32 )
   169d2:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
   169d4:	bf18      	it	ne
   169d6:	f8c6 0378 	strne.w	r0, [r6, #888]	; 0x378
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   169da:	482f      	ldr	r0, [pc, #188]	; (16a98 <LoRaMacProcess+0xa8c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
   169dc:	bf18      	it	ne
   169de:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   169e2:	f7fc fae9 	bl	12fb8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
   169e6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   169ea:	2114      	movs	r1, #20
    if( crc != nvmData->RegionGroup2.Crc32 )
   169ec:	4298      	cmp	r0, r3
        nvmData->RegionGroup2.Crc32 = crc;
   169ee:	bf18      	it	ne
   169f0:	f8c6 0440 	strne.w	r0, [r6, #1088]	; 0x440
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   169f4:	4829      	ldr	r0, [pc, #164]	; (16a9c <LoRaMacProcess+0xa90>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
   169f6:	bf18      	it	ne
   169f8:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   169fc:	f7fc fadc 	bl	12fb8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
   16a00:	f8d6 3458 	ldr.w	r3, [r6, #1112]	; 0x458
   16a04:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16a06:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        nvmData->ClassB.Crc32 = crc;
   16a0a:	bf1c      	itt	ne
   16a0c:	f8c6 0458 	strne.w	r0, [r6, #1112]	; 0x458
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
   16a10:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16a14:	2b00      	cmp	r3, #0
   16a16:	d048      	beq.n	16aaa <LoRaMacProcess+0xa9e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
   16a18:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	d045      	beq.n	16aaa <LoRaMacProcess+0xa9e>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
   16a1e:	4628      	mov	r0, r5
}
   16a20:	b02b      	add	sp, #172	; 0xac
   16a22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
   16a26:	4718      	bx	r3
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   16a28:	f360 0382 	bfi	r3, r0, #2, #1
   16a2c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   16a30:	f884 248e 	strb.w	r2, [r4, #1166]	; 0x48e
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
   16a34:	481a      	ldr	r0, [pc, #104]	; (16aa0 <LoRaMacProcess+0xa94>)
   16a36:	f001 f99d 	bl	17d74 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
   16a3a:	f001 f9c9 	bl	17dd0 <LoRaMacConfirmQueueGetCnt>
   16a3e:	2800      	cmp	r0, #0
   16a40:	f43f af4f 	beq.w	168e2 <LoRaMacProcess+0x8d6>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
   16a44:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16a48:	f043 0304 	orr.w	r3, r3, #4
   16a4c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   16a50:	e747      	b.n	168e2 <LoRaMacProcess+0x8d6>
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   16a52:	f895 01a0 	ldrb.w	r0, [r5, #416]	; 0x1a0
   16a56:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   16a5a:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   16a5e:	b120      	cbz	r0, 16a6a <LoRaMacProcess+0xa5e>
   16a60:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
   16a64:	2800      	cmp	r0, #0
   16a66:	f43f ae38 	beq.w	166da <LoRaMacProcess+0x6ce>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   16a6a:	f884 1425 	strb.w	r1, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   16a6e:	e634      	b.n	166da <LoRaMacProcess+0x6ce>
   16a70:	20030524 	.word	0x20030524
   16a74:	20030284 	.word	0x20030284
   16a78:	2002fbf0 	.word	0x2002fbf0
   16a7c:	200303bc 	.word	0x200303bc
   16a80:	200304b8 	.word	0x200304b8
   16a84:	2003046c 	.word	0x2003046c
   16a88:	2002fc28 	.word	0x2002fc28
   16a8c:	2002fc48 	.word	0x2002fc48
   16a90:	2002fdc8 	.word	0x2002fdc8
   16a94:	2002ff68 	.word	0x2002ff68
   16a98:	2002ff6c 	.word	0x2002ff6c
   16a9c:	20030034 	.word	0x20030034
   16aa0:	200304a4 	.word	0x200304a4
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   16aa4:	f884 1425 	strb.w	r1, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   16aa8:	e61d      	b.n	166e6 <LoRaMacProcess+0x6da>
}
   16aaa:	b02b      	add	sp, #172	; 0xac
   16aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016ab0 <LoRaMacInitialization>:
{
   16ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ab4:	4689      	mov	r9, r1
   16ab6:	4690      	mov	r8, r2
    if( ( primitives == NULL ) ||
   16ab8:	4606      	mov	r6, r0
{
   16aba:	b08b      	sub	sp, #44	; 0x2c
    if( ( primitives == NULL ) ||
   16abc:	2800      	cmp	r0, #0
   16abe:	f000 818f 	beq.w	16de0 <LoRaMacInitialization+0x330>
   16ac2:	2900      	cmp	r1, #0
   16ac4:	f000 818c 	beq.w	16de0 <LoRaMacInitialization+0x330>
    if( ( primitives->MacMcpsConfirm == NULL ) ||
   16ac8:	6803      	ldr	r3, [r0, #0]
   16aca:	2b00      	cmp	r3, #0
   16acc:	f000 8188 	beq.w	16de0 <LoRaMacInitialization+0x330>
   16ad0:	6843      	ldr	r3, [r0, #4]
   16ad2:	2b00      	cmp	r3, #0
   16ad4:	f000 8184 	beq.w	16de0 <LoRaMacInitialization+0x330>
        ( primitives->MacMcpsIndication == NULL ) ||
   16ad8:	6883      	ldr	r3, [r0, #8]
   16ada:	2b00      	cmp	r3, #0
   16adc:	f000 8180 	beq.w	16de0 <LoRaMacInitialization+0x330>
        ( primitives->MacMlmeConfirm == NULL ) ||
   16ae0:	68c3      	ldr	r3, [r0, #12]
   16ae2:	2b00      	cmp	r3, #0
   16ae4:	f000 817c 	beq.w	16de0 <LoRaMacInitialization+0x330>
    if( RegionIsActive( region ) == false )
   16ae8:	4610      	mov	r0, r2
   16aea:	f015 ff92 	bl	2ca12 <RegionIsActive>
   16aee:	2800      	cmp	r0, #0
   16af0:	f000 8178 	beq.w	16de4 <LoRaMacInitialization+0x334>
    Nvm.MacGroup2.DeviceClass = CLASS_A;
   16af4:	2700      	movs	r7, #0
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
   16af6:	4cbd      	ldr	r4, [pc, #756]	; (16dec <LoRaMacInitialization+0x33c>)
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
   16af8:	4dbd      	ldr	r5, [pc, #756]	; (16df0 <LoRaMacInitialization+0x340>)
    LoRaMacConfirmQueueInit( primitives );
   16afa:	4630      	mov	r0, r6
   16afc:	f001 f8a4 	bl	17c48 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
   16b00:	f240 425c 	movw	r2, #1116	; 0x45c
   16b04:	2100      	movs	r1, #0
   16b06:	4620      	mov	r0, r4
   16b08:	f014 ffb7 	bl	2ba7a <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
   16b0c:	f240 5284 	movw	r2, #1412	; 0x584
   16b10:	2100      	movs	r1, #0
   16b12:	4628      	mov	r0, r5
   16b14:	f014 ffb1 	bl	2ba7a <memset1>
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
   16b18:	4bb6      	ldr	r3, [pc, #728]	; (16df4 <LoRaMacInitialization+0x344>)
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16b1a:	4640      	mov	r0, r8
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
   16b1c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    params.NvmGroup1 = &Nvm.RegionGroup1;
   16b20:	f504 735e 	add.w	r3, r4, #888	; 0x378
   16b24:	9306      	str	r3, [sp, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
   16b26:	f504 735f 	add.w	r3, r4, #892	; 0x37c
   16b2a:	9307      	str	r3, [sp, #28]
    params.Bands = &RegionBands;
   16b2c:	4bb2      	ldr	r3, [pc, #712]	; (16df8 <LoRaMacInitialization+0x348>)
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16b2e:	a906      	add	r1, sp, #24
    Nvm.MacGroup2.Region = region;
   16b30:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
    Nvm.MacGroup2.DeviceClass = CLASS_A;
   16b34:	f884 71a0 	strb.w	r7, [r4, #416]	; 0x1a0
    params.Type = INIT_TYPE_DEFAULTS;
   16b38:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    params.Bands = &RegionBands;
   16b3c:	9308      	str	r3, [sp, #32]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16b3e:	f015 ff7c 	bl	2ca3a <RegionInitDefaults>
    getPhy.Attribute = PHY_DUTY_CYCLE;
   16b42:	230e      	movs	r3, #14
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b44:	a904      	add	r1, sp, #16
   16b46:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DUTY_CYCLE;
   16b4a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b4e:	f015 ff64 	bl	2ca1a <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
   16b52:	1bc0      	subs	r0, r0, r7
   16b54:	bf18      	it	ne
   16b56:	2001      	movne	r0, #1
    getPhy.Attribute = PHY_DEF_TX_POWER;
   16b58:	f04f 0b0a 	mov.w	fp, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
   16b5c:	f884 01a4 	strb.w	r0, [r4, #420]	; 0x1a4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b60:	a904      	add	r1, sp, #16
   16b62:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_TX_POWER;
   16b66:	f88d b010 	strb.w	fp, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b6a:	f015 ff56 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_TX_DR;
   16b6e:	f04f 0a06 	mov.w	sl, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
   16b72:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b76:	a904      	add	r1, sp, #16
   16b78:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_TX_DR;
   16b7c:	f88d a010 	strb.w	sl, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b80:	f015 ff4b 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
   16b84:	230f      	movs	r3, #15
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
   16b86:	f884 00d5 	strb.w	r0, [r4, #213]	; 0xd5
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b8a:	a904      	add	r1, sp, #16
   16b8c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
   16b90:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b94:	f015 ff41 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
   16b98:	2310      	movs	r3, #16
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
   16b9a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16b9e:	eb0d 0103 	add.w	r1, sp, r3
   16ba2:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
   16ba6:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16baa:	f015 ff36 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
   16bae:	2311      	movs	r3, #17
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
   16bb0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16bb4:	a904      	add	r1, sp, #16
   16bb6:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
   16bba:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16bbe:	f015 ff2c 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
   16bc2:	2312      	movs	r3, #18
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
   16bc4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16bc8:	a904      	add	r1, sp, #16
   16bca:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
   16bce:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16bd2:	f015 ff22 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
   16bd6:	2313      	movs	r3, #19
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
   16bd8:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16bdc:	a904      	add	r1, sp, #16
   16bde:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
   16be2:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16be6:	f015 ff18 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
   16bea:	2315      	movs	r3, #21
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
   16bec:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16bf0:	a904      	add	r1, sp, #16
   16bf2:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
   16bf6:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16bfa:	f015 ff0e 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
   16bfe:	2316      	movs	r3, #22
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
   16c00:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c04:	a904      	add	r1, sp, #16
   16c06:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
   16c0a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c0e:	f015 ff04 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_RX2_DR;
   16c12:	2317      	movs	r3, #23
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
   16c14:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
   16c18:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c1c:	a904      	add	r1, sp, #16
   16c1e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_RX2_DR;
   16c22:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c26:	f015 fef8 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
   16c2a:	231c      	movs	r3, #28
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
   16c2c:	b2c0      	uxtb	r0, r0
   16c2e:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
   16c32:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c36:	a904      	add	r1, sp, #16
   16c38:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
   16c3c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c40:	f015 feeb 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
   16c44:	231d      	movs	r3, #29
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
   16c46:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c4a:	a904      	add	r1, sp, #16
   16c4c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
   16c50:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c54:	f015 fee1 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
   16c58:	231e      	movs	r3, #30
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
   16c5a:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c5e:	a904      	add	r1, sp, #16
   16c60:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
   16c64:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c68:	f015 fed7 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
   16c6c:	231f      	movs	r3, #31
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
   16c6e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c72:	a904      	add	r1, sp, #16
   16c74:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
   16c78:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c7c:	f015 fecd 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
   16c80:	230b      	movs	r3, #11
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
   16c82:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c86:	a904      	add	r1, sp, #16
   16c88:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
   16c8c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c90:	f015 fec3 	bl	2ca1a <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
   16c94:	230c      	movs	r3, #12
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c96:	a904      	add	r1, sp, #16
    MacCtx.AdrAckLimit = phyParam.Value;
   16c98:	f8a5 03fc 	strh.w	r0, [r5, #1020]	; 0x3fc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16c9c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
   16ca0:	f04f 0801 	mov.w	r8, #1
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
   16ca4:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ca8:	f015 feb7 	bl	2ca1a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
   16cac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16cb0:	9003      	str	r0, [sp, #12]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
   16cb2:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
   16cb4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    MacCtx.AdrAckDelay = phyParam.Value;
   16cb8:	f8a5 03fe 	strh.w	r0, [r5, #1022]	; 0x3fe
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
   16cbc:	66a3      	str	r3, [r4, #104]	; 0x68
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
   16cbe:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
   16cc2:	f884 80b4 	strb.w	r8, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
   16cc6:	66e3      	str	r3, [r4, #108]	; 0x6c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
   16cc8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
   16ccc:	f8c4 b098 	str.w	fp, [r4, #152]	; 0x98
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
   16cd0:	6723      	str	r3, [r4, #112]	; 0x70
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
   16cd2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
   16cd6:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
   16cda:	6763      	str	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
   16cdc:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
   16ce0:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
   16ce4:	f884 8078 	strb.w	r8, [r4, #120]	; 0x78
    Nvm.MacGroup2.IsCertPortOn = true;
   16ce8:	f884 81a7 	strb.w	r8, [r4, #423]	; 0x1a7
    ResetMacParameters( );
   16cec:	f7fd fff8 	bl	14ce0 <ResetMacParameters>
    MacCtx.MacCallbacks = callbacks;
   16cf0:	e9c5 69d1 	strd	r6, r9, [r5, #836]	; 0x344
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
   16cf4:	466e      	mov	r6, sp
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
   16cf6:	4941      	ldr	r1, [pc, #260]	; (16dfc <LoRaMacInitialization+0x34c>)
   16cf8:	f505 705c 	add.w	r0, r5, #880	; 0x370
    Nvm.MacGroup1.AggregatedTimeOff = 0;
   16cfc:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
    MacCtx.MacFlags.Value = 0;
   16d00:	f885 748d 	strb.w	r7, [r5, #1165]	; 0x48d
    Nvm.MacGroup2.PublicNetwork = true;
   16d04:	f884 81a1 	strb.w	r8, [r4, #417]	; 0x1a1
    MacCtx.MacState = LORAMAC_STOPPED;
   16d08:	f8c5 8340 	str.w	r8, [r5, #832]	; 0x340
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
   16d0c:	f014 ff9d 	bl	2bc4a <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
   16d10:	493b      	ldr	r1, [pc, #236]	; (16e00 <LoRaMacInitialization+0x350>)
   16d12:	f505 7062 	add.w	r0, r5, #904	; 0x388
   16d16:	f014 ff98 	bl	2bc4a <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
   16d1a:	493a      	ldr	r1, [pc, #232]	; (16e04 <LoRaMacInitialization+0x354>)
   16d1c:	f505 7068 	add.w	r0, r5, #928	; 0x3a0
   16d20:	f014 ff93 	bl	2bc4a <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
   16d24:	4938      	ldr	r1, [pc, #224]	; (16e08 <LoRaMacInitialization+0x358>)
   16d26:	f505 6080 	add.w	r0, r5, #1024	; 0x400
   16d2a:	f014 ff8e 	bl	2bc4a <TimerInit>
    TimerInit( &MacCtx.Rejoin0CycleTimer, OnRejoin0CycleTimerEvent );
   16d2e:	4937      	ldr	r1, [pc, #220]	; (16e0c <LoRaMacInitialization+0x35c>)
   16d30:	f505 6092 	add.w	r0, r5, #1168	; 0x490
   16d34:	f014 ff89 	bl	2bc4a <TimerInit>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
   16d38:	4935      	ldr	r1, [pc, #212]	; (16e10 <LoRaMacInitialization+0x360>)
   16d3a:	f505 6095 	add.w	r0, r5, #1192	; 0x4a8
   16d3e:	f014 ff84 	bl	2bc4a <TimerInit>
    TimerInit( &MacCtx.Rejoin2CycleTimer, OnRejoin2CycleTimerEvent );
   16d42:	4934      	ldr	r1, [pc, #208]	; (16e14 <LoRaMacInitialization+0x364>)
   16d44:	f505 6098 	add.w	r0, r5, #1216	; 0x4c0
   16d48:	f014 ff7f 	bl	2bc4a <TimerInit>
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
   16d4c:	4932      	ldr	r1, [pc, #200]	; (16e18 <LoRaMacInitialization+0x368>)
   16d4e:	f505 609b 	add.w	r0, r5, #1240	; 0x4d8
   16d52:	f014 ff7a 	bl	2bc4a <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
   16d56:	4630      	mov	r0, r6
   16d58:	f014 ff10 	bl	2bb7c <SysTimeGetMcuTime>
   16d5c:	e896 0003 	ldmia.w	r6, {r0, r1}
   16d60:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
   16d64:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Value = 0;
   16d68:	4b2c      	ldr	r3, [pc, #176]	; (16e1c <LoRaMacInitialization+0x36c>)
    Radio.Init( &MacCtx.RadioEvents );
   16d6a:	f505 7053 	add.w	r0, r5, #844	; 0x34c
    LoRaMacRadioEvents.Value = 0;
   16d6e:	601f      	str	r7, [r3, #0]
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
   16d70:	4b2b      	ldr	r3, [pc, #172]	; (16e20 <LoRaMacInitialization+0x370>)
    Radio.Init( &MacCtx.RadioEvents );
   16d72:	4f2c      	ldr	r7, [pc, #176]	; (16e24 <LoRaMacInitialization+0x374>)
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
   16d74:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
   16d78:	4b2b      	ldr	r3, [pc, #172]	; (16e28 <LoRaMacInitialization+0x378>)
   16d7a:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
   16d7e:	4b2b      	ldr	r3, [pc, #172]	; (16e2c <LoRaMacInitialization+0x37c>)
   16d80:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
   16d84:	4b2a      	ldr	r3, [pc, #168]	; (16e30 <LoRaMacInitialization+0x380>)
   16d86:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
   16d8a:	4b2a      	ldr	r3, [pc, #168]	; (16e34 <LoRaMacInitialization+0x384>)
   16d8c:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
   16d90:	683b      	ldr	r3, [r7, #0]
   16d92:	4798      	blx	r3
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
   16d94:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   16d98:	f7fd fd46 	bl	14828 <SecureElementInit>
   16d9c:	b120      	cbz	r0, 16da8 <LoRaMacInitialization+0x2f8>
        return LORAMAC_STATUS_CRYPTO_ERROR;
   16d9e:	2611      	movs	r6, #17
}
   16da0:	4630      	mov	r0, r6
   16da2:	b00b      	add	sp, #44	; 0x2c
   16da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
   16da8:	4620      	mov	r0, r4
   16daa:	f001 f90b 	bl	17fc4 <LoRaMacCryptoInit>
   16dae:	2800      	cmp	r0, #0
   16db0:	d1f5      	bne.n	16d9e <LoRaMacInitialization+0x2ee>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
   16db2:	f000 fe3f 	bl	17a34 <LoRaMacCommandsInit>
   16db6:	b9b8      	cbnz	r0, 16de8 <LoRaMacInitialization+0x338>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
   16db8:	481f      	ldr	r0, [pc, #124]	; (16e38 <LoRaMacInitialization+0x388>)
   16dba:	f001 f94d 	bl	18058 <LoRaMacCryptoSetMulticastReference>
   16dbe:	4606      	mov	r6, r0
   16dc0:	2800      	cmp	r0, #0
   16dc2:	d1ec      	bne.n	16d9e <LoRaMacInitialization+0x2ee>
    srand1( Radio.Random( ) );
   16dc4:	697b      	ldr	r3, [r7, #20]
   16dc6:	4798      	blx	r3
   16dc8:	f7fc f8f0 	bl	12fac <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
   16dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16dce:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
   16dd2:	4798      	blx	r3
    Radio.Sleep( );
   16dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16dd6:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
   16dd8:	2301      	movs	r3, #1
   16dda:	f885 348e 	strb.w	r3, [r5, #1166]	; 0x48e
    return LORAMAC_STATUS_OK;
   16dde:	e7df      	b.n	16da0 <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   16de0:	2603      	movs	r6, #3
   16de2:	e7dd      	b.n	16da0 <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
   16de4:	2609      	movs	r6, #9
   16de6:	e7db      	b.n	16da0 <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   16de8:	2613      	movs	r6, #19
   16dea:	e7d9      	b.n	16da0 <LoRaMacInitialization+0x2f0>
   16dec:	2002fbf0 	.word	0x2002fbf0
   16df0:	2003004c 	.word	0x2003004c
   16df4:	01010100 	.word	0x01010100
   16df8:	2002fb60 	.word	0x2002fb60
   16dfc:	00015551 	.word	0x00015551
   16e00:	00014fa9 	.word	0x00014fa9
   16e04:	00014fed 	.word	0x00014fed
   16e08:	00014b15 	.word	0x00014b15
   16e0c:	000158ad 	.word	0x000158ad
   16e10:	0001585d 	.word	0x0001585d
   16e14:	0001580d 	.word	0x0001580d
   16e18:	000157c9 	.word	0x000157c9
   16e1c:	2002fb5c 	.word	0x2002fb5c
   16e20:	00014c95 	.word	0x00014c95
   16e24:	000338dc 	.word	0x000338dc
   16e28:	00014c49 	.word	0x00014c49
   16e2c:	00014a85 	.word	0x00014a85
   16e30:	00014a61 	.word	0x00014a61
   16e34:	00014aa9 	.word	0x00014aa9
   16e38:	2002fcd0 	.word	0x2002fcd0

00016e3c <LoRaMacStart>:
    MacCtx.MacState = LORAMAC_IDLE;
   16e3c:	2000      	movs	r0, #0
   16e3e:	4b02      	ldr	r3, [pc, #8]	; (16e48 <LoRaMacStart+0xc>)
   16e40:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
}
   16e44:	4770      	bx	lr
   16e46:	bf00      	nop
   16e48:	2003004c 	.word	0x2003004c

00016e4c <LoRaMacQueryTxPossible>:
{
   16e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t macCmdsSize = 0;
   16e4e:	2700      	movs	r7, #0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   16e50:	4b2d      	ldr	r3, [pc, #180]	; (16f08 <LoRaMacQueryTxPossible+0xbc>)
{
   16e52:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   16e54:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
{
   16e58:	4605      	mov	r5, r0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   16e5a:	f88d 2009 	strb.w	r2, [sp, #9]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   16e5e:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   16e62:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   16e64:	f88d 200a 	strb.w	r2, [sp, #10]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   16e68:	4a28      	ldr	r2, [pc, #160]	; (16f0c <LoRaMacQueryTxPossible+0xc0>)
    if( txInfo == NULL )
   16e6a:	460c      	mov	r4, r1
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   16e6c:	f892 0418 	ldrb.w	r0, [r2, #1048]	; 0x418
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   16e70:	9603      	str	r6, [sp, #12]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   16e72:	f88d 000b 	strb.w	r0, [sp, #11]
    size_t macCmdsSize = 0;
   16e76:	9704      	str	r7, [sp, #16]
    if( txInfo == NULL )
   16e78:	2900      	cmp	r1, #0
   16e7a:	d040      	beq.n	16efe <LoRaMacQueryTxPossible+0xb2>
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   16e7c:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   16e80:	f893 11a2 	ldrb.w	r1, [r3, #418]	; 0x1a2
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   16e84:	9207      	str	r2, [sp, #28]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   16e86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   16e8a:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   16e8e:	ba52      	rev16	r2, r2
   16e90:	f8ad 2020 	strh.w	r2, [sp, #32]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   16e94:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
    adrNext.Region = Nvm.MacGroup2.Region;
   16e98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
   16e9c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    adrNext.Region = Nvm.MacGroup2.Region;
   16ea0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   16ea4:	ab03      	add	r3, sp, #12
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   16ea6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   16eaa:	9300      	str	r3, [sp, #0]
   16eac:	f10d 020a 	add.w	r2, sp, #10
   16eb0:	f10d 030b 	add.w	r3, sp, #11
   16eb4:	f10d 0109 	add.w	r1, sp, #9
   16eb8:	a805      	add	r0, sp, #20
    adrNext.UpdateChanMask = false;
   16eba:	f88d 7014 	strb.w	r7, [sp, #20]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   16ebe:	9606      	str	r6, [sp, #24]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   16ec0:	f015 fa17 	bl	2c2f2 <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
   16ec4:	f99d 0009 	ldrsb.w	r0, [sp, #9]
   16ec8:	f7fd fe0e 	bl	14ae8 <GetMaxAppPayloadWithoutFOptsLength>
   16ecc:	7060      	strb	r0, [r4, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   16ece:	a804      	add	r0, sp, #16
   16ed0:	f000 fe56 	bl	17b80 <LoRaMacCommandsGetSizeSerializedCmds>
   16ed4:	b9a8      	cbnz	r0, 16f02 <LoRaMacQueryTxPossible+0xb6>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
   16ed6:	9a04      	ldr	r2, [sp, #16]
   16ed8:	2a0f      	cmp	r2, #15
   16eda:	d80c      	bhi.n	16ef6 <LoRaMacQueryTxPossible+0xaa>
   16edc:	7863      	ldrb	r3, [r4, #1]
   16ede:	429a      	cmp	r2, r3
   16ee0:	d809      	bhi.n	16ef6 <LoRaMacQueryTxPossible+0xaa>
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
   16ee2:	4415      	add	r5, r2
   16ee4:	42ab      	cmp	r3, r5
   16ee6:	bf2c      	ite	cs
   16ee8:	2000      	movcs	r0, #0
   16eea:	2001      	movcc	r0, #1
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
   16eec:	1a99      	subs	r1, r3, r2
   16eee:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
   16ef0:	00c0      	lsls	r0, r0, #3
}
   16ef2:	b00b      	add	sp, #44	; 0x2c
   16ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
   16ef6:	2300      	movs	r3, #0
           return LORAMAC_STATUS_LENGTH_ERROR;
   16ef8:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
   16efa:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
   16efc:	e7f9      	b.n	16ef2 <LoRaMacQueryTxPossible+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   16efe:	2003      	movs	r0, #3
   16f00:	e7f7      	b.n	16ef2 <LoRaMacQueryTxPossible+0xa6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   16f02:	2013      	movs	r0, #19
   16f04:	e7f5      	b.n	16ef2 <LoRaMacQueryTxPossible+0xa6>
   16f06:	bf00      	nop
   16f08:	2002fbf0 	.word	0x2002fbf0
   16f0c:	2003004c 	.word	0x2003004c

00016f10 <LoRaMacMibGetRequestConfirm>:
{
   16f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( mibGet == NULL )
   16f12:	4604      	mov	r4, r0
   16f14:	2800      	cmp	r0, #0
   16f16:	f000 80cf 	beq.w	170b8 <LoRaMacMibGetRequestConfirm+0x1a8>
    switch( mibGet->Type )
   16f1a:	7803      	ldrb	r3, [r0, #0]
   16f1c:	2b47      	cmp	r3, #71	; 0x47
   16f1e:	f200 80c6 	bhi.w	170ae <LoRaMacMibGetRequestConfirm+0x19e>
   16f22:	e8df f003 	tbb	[pc, r3]
   16f26:	2b24      	.short	0x2b24
   16f28:	3936332f 	.word	0x3936332f
   16f2c:	c4c4423d 	.word	0xc4c4423d
   16f30:	c4c4c4c4 	.word	0xc4c4c4c4
   16f34:	c4c4c4c4 	.word	0xc4c4c4c4
   16f38:	c4c4c4c4 	.word	0xc4c4c4c4
   16f3c:	c4c4c4c4 	.word	0xc4c4c4c4
   16f40:	46c4c4c4 	.word	0x46c4c4c4
   16f44:	5e5b544a 	.word	0x5e5b544a
   16f48:	68646661 	.word	0x68646661
   16f4c:	75726f6c 	.word	0x75726f6c
   16f50:	8e8a7b78 	.word	0x8e8a7b78
   16f54:	9d9a9296 	.word	0x9d9a9296
   16f58:	c4a6a8a1 	.word	0xc4a6a8a1
   16f5c:	c0bcb8ac 	.word	0xc0bcb8ac
   16f60:	c4c4c4c4 	.word	0xc4c4c4c4
   16f64:	c4c4c4c4 	.word	0xc4c4c4c4
   16f68:	c4c4c4c4 	.word	0xc4c4c4c4
   16f6c:	b4c4      	.short	0xb4c4
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
   16f6e:	4b53      	ldr	r3, [pc, #332]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   16f70:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   16f74:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
   16f76:	2000      	movs	r0, #0
}
   16f78:	b004      	add	sp, #16
   16f7a:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   16f7c:	4b4f      	ldr	r3, [pc, #316]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   16f7e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
   16f82:	e7f7      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
   16f84:	f7fd fd3a 	bl	149fc <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
   16f88:	6060      	str	r0, [r4, #4]
            break;
   16f8a:	e7f4      	b.n	16f76 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
   16f8c:	f7fd fd4c 	bl	14a28 <SecureElementGetJoinEui>
   16f90:	e7fa      	b.n	16f88 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.SePin = SecureElementGetPin( );
   16f92:	f7fd fd5f 	bl	14a54 <SecureElementGetPin>
   16f96:	e7f7      	b.n	16f88 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
   16f98:	4b48      	ldr	r3, [pc, #288]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   16f9a:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
   16f9e:	e7e9      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
   16fa0:	4b46      	ldr	r3, [pc, #280]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   16fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
            mibGet->Param.Rejoin2CycleInSec = Nvm.MacGroup2.Rejoin2CycleInSec;
   16fa6:	6063      	str	r3, [r4, #4]
            break;
   16fa8:	e7e5      	b.n	16f76 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
   16faa:	4b44      	ldr	r3, [pc, #272]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   16fac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   16fb0:	e7f9      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
   16fb2:	4b42      	ldr	r3, [pc, #264]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   16fb4:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
   16fb8:	e7dc      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            getPhy.Attribute = PHY_CHANNELS;
   16fba:	231b      	movs	r3, #27
            getPhy.Attribute = PHY_CHANNELS_MASK;
   16fbc:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16fc0:	4b3e      	ldr	r3, [pc, #248]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   16fc2:	a902      	add	r1, sp, #8
   16fc4:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   16fc8:	f015 fd27 	bl	2ca1a <RegionGetPhyParam>
   16fcc:	e7dc      	b.n	16f88 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
   16fce:	4b3c      	ldr	r3, [pc, #240]	; (170c0 <LoRaMacMibGetRequestConfirm+0x1b0>)
   16fd0:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   16fd2:	e893 0003 	ldmia.w	r3, {r0, r1}
   16fd6:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
   16fda:	e7cc      	b.n	16f76 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   16fdc:	4b39      	ldr	r3, [pc, #228]	; (170c4 <LoRaMacMibGetRequestConfirm+0x1b4>)
   16fde:	3404      	adds	r4, #4
   16fe0:	e7f7      	b.n	16fd2 <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
   16fe2:	4b39      	ldr	r3, [pc, #228]	; (170c8 <LoRaMacMibGetRequestConfirm+0x1b8>)
   16fe4:	3404      	adds	r4, #4
   16fe6:	e7f4      	b.n	16fd2 <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   16fe8:	4b38      	ldr	r3, [pc, #224]	; (170cc <LoRaMacMibGetRequestConfirm+0x1bc>)
   16fea:	3404      	adds	r4, #4
   16fec:	e7f1      	b.n	16fd2 <LoRaMacMibGetRequestConfirm+0xc2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
   16fee:	2319      	movs	r3, #25
   16ff0:	e7e4      	b.n	16fbc <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_MASK;
   16ff2:	2318      	movs	r3, #24
   16ff4:	e7e2      	b.n	16fbc <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   16ff6:	4b31      	ldr	r3, [pc, #196]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   16ff8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   16ffc:	e7ba      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
   16ffe:	4b2f      	ldr	r3, [pc, #188]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   17002:	e7d0      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
   17004:	4b2d      	ldr	r3, [pc, #180]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   17008:	e7cd      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
   1700a:	4b2c      	ldr	r3, [pc, #176]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   1700c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1700e:	e7ca      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
   17010:	4b2a      	ldr	r3, [pc, #168]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   17014:	e7c7      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
   17016:	4b29      	ldr	r3, [pc, #164]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1701a:	e7c4      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            getPhy.Attribute = PHY_MIN_TX_DR;
   1701c:	2302      	movs	r3, #2
   1701e:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17022:	4b26      	ldr	r3, [pc, #152]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17024:	a902      	add	r1, sp, #8
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17026:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1702a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1702e:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17032:	f015 fcf2 	bl	2ca1a <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
   17036:	7120      	strb	r0, [r4, #4]
            break;
   17038:	e79d      	b.n	16f76 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   1703a:	4b20      	ldr	r3, [pc, #128]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   1703c:	f993 30d5 	ldrsb.w	r3, [r3, #213]	; 0xd5
   17040:	e798      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
   17042:	4b1e      	ldr	r3, [pc, #120]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17044:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
   17048:	e794      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   1704a:	4b1c      	ldr	r3, [pc, #112]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   1704c:	f993 30d4 	ldrsb.w	r3, [r3, #212]	; 0xd4
   17050:	e790      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
   17052:	4b1a      	ldr	r3, [pc, #104]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17054:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
   17058:	e78c      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
   1705a:	4b18      	ldr	r3, [pc, #96]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   1705c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1705e:	e7a2      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
   17060:	4b16      	ldr	r3, [pc, #88]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17062:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   17066:	e785      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   17068:	4b14      	ldr	r3, [pc, #80]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   1706a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   1706e:	6063      	str	r3, [r4, #4]
            break;
   17070:	e781      	b.n	16f76 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.Contexts = GetNvmData( );
   17072:	4b12      	ldr	r3, [pc, #72]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17074:	e797      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   17076:	4b11      	ldr	r3, [pc, #68]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17078:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   1707c:	e7f7      	b.n	1706e <LoRaMacMibGetRequestConfirm+0x15e>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
   1707e:	4b0f      	ldr	r3, [pc, #60]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17080:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   17084:	6043      	str	r3, [r0, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
   17086:	f001 faf1 	bl	1866c <RegionGetVersion>
   1708a:	60a0      	str	r0, [r4, #8]
            break;
   1708c:	e773      	b.n	16f76 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
   1708e:	4b0b      	ldr	r3, [pc, #44]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17090:	f893 31a7 	ldrb.w	r3, [r3, #423]	; 0x1a7
   17094:	e76e      	b.n	16f74 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.Rejoin0CycleInSec = Nvm.MacGroup2.Rejoin0CycleInSec;
   17096:	4b09      	ldr	r3, [pc, #36]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   17098:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   1709c:	e783      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.Rejoin1CycleInSec = Nvm.MacGroup2.Rejoin1CycleInSec;
   1709e:	4b07      	ldr	r3, [pc, #28]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   170a0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
   170a4:	e77f      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.Rejoin2CycleInSec = Nvm.MacGroup2.Rejoin2CycleInSec;
   170a6:	4b05      	ldr	r3, [pc, #20]	; (170bc <LoRaMacMibGetRequestConfirm+0x1ac>)
   170a8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
   170ac:	e77b      	b.n	16fa6 <LoRaMacMibGetRequestConfirm+0x96>
}
   170ae:	b004      	add	sp, #16
   170b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
   170b4:	f015 b9a3 	b.w	2c3fe <LoRaMacClassBMibGetRequestConfirm>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   170b8:	2003      	movs	r0, #3
   170ba:	e75d      	b.n	16f78 <LoRaMacMibGetRequestConfirm+0x68>
   170bc:	2002fbf0 	.word	0x2002fbf0
   170c0:	2002fc6c 	.word	0x2002fc6c
   170c4:	2002fca8 	.word	0x2002fca8
   170c8:	2002fc74 	.word	0x2002fc74
   170cc:	2002fcb0 	.word	0x2002fcb0

000170d0 <LoRaMacMibSetRequestConfirm>:
{
   170d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if( mibSet == NULL )
   170d2:	4604      	mov	r4, r0
   170d4:	b910      	cbnz	r0, 170dc <LoRaMacMibSetRequestConfirm+0xc>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   170d6:	2003      	movs	r0, #3
}
   170d8:	b004      	add	sp, #16
   170da:	bd70      	pop	{r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
   170dc:	4d9c      	ldr	r5, [pc, #624]	; (17350 <LoRaMacMibSetRequestConfirm+0x280>)
   170de:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
   170e2:	079a      	lsls	r2, r3, #30
   170e4:	f100 82b5 	bmi.w	17652 <LoRaMacMibSetRequestConfirm+0x582>
    switch( mibSet->Type )
   170e8:	7802      	ldrb	r2, [r0, #0]
   170ea:	2a47      	cmp	r2, #71	; 0x47
   170ec:	f200 82ae 	bhi.w	1764c <LoRaMacMibSetRequestConfirm+0x57c>
   170f0:	e8df f012 	tbh	[pc, r2, lsl #1]
   170f4:	004d0048 	.word	0x004d0048
   170f8:	0061005b 	.word	0x0061005b
   170fc:	00690065 	.word	0x00690065
   17100:	0073006e 	.word	0x0073006e
   17104:	00830078 	.word	0x00830078
   17108:	008f0089 	.word	0x008f0089
   1710c:	009b0095 	.word	0x009b0095
   17110:	00a700a1 	.word	0x00a700a1
   17114:	00b300ad 	.word	0x00b300ad
   17118:	00bf00b9 	.word	0x00bf00b9
   1711c:	00cb00c5 	.word	0x00cb00c5
   17120:	00d700d1 	.word	0x00d700d1
   17124:	00e300dd 	.word	0x00e300dd
   17128:	00ef00e9 	.word	0x00ef00e9
   1712c:	00fb00f5 	.word	0x00fb00f5
   17130:	010302ac 	.word	0x010302ac
   17134:	0134011a 	.word	0x0134011a
   17138:	017d015b 	.word	0x017d015b
   1713c:	0181016e 	.word	0x0181016e
   17140:	018e018a 	.word	0x018e018a
   17144:	01960192 	.word	0x01960192
   17148:	02ac019a 	.word	0x02ac019a
   1714c:	01b0019e 	.word	0x01b0019e
   17150:	01c601d8 	.word	0x01c601d8
   17154:	01f001ea 	.word	0x01f001ea
   17158:	01fc01f7 	.word	0x01fc01f7
   1715c:	02770201 	.word	0x02770201
   17160:	028802ac 	.word	0x028802ac
   17164:	02ac029b 	.word	0x02ac029b
   17168:	02ac02ac 	.word	0x02ac02ac
   1716c:	02ac02ac 	.word	0x02ac02ac
   17170:	02ac02ac 	.word	0x02ac02ac
   17174:	02ac02ac 	.word	0x02ac02ac
   17178:	02ac02ac 	.word	0x02ac02ac
   1717c:	02ac02ac 	.word	0x02ac02ac
   17180:	028302ac 	.word	0x028302ac
            status = SwitchClass( mibSet->Param.Class );
   17184:	7900      	ldrb	r0, [r0, #4]
   17186:	f7fd fe75 	bl	14e74 <SwitchClass>
    if( status == LORAMAC_STATUS_OK )
   1718a:	b130      	cbz	r0, 1719a <LoRaMacMibSetRequestConfirm+0xca>
   1718c:	e7a4      	b.n	170d8 <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
   1718e:	7903      	ldrb	r3, [r0, #4]
   17190:	2b02      	cmp	r3, #2
   17192:	d0a0      	beq.n	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
   17194:	4a6f      	ldr	r2, [pc, #444]	; (17354 <LoRaMacMibSetRequestConfirm+0x284>)
   17196:	f882 31b8 	strb.w	r3, [r2, #440]	; 0x1b8
        MacCtx.MacFlags.Bits.NvmHandle = 1;
   1719a:	f895 348d 	ldrb.w	r3, [r5, #1165]	; 0x48d
   1719e:	2000      	movs	r0, #0
   171a0:	f043 0320 	orr.w	r3, r3, #32
   171a4:	f885 348d 	strb.w	r3, [r5, #1165]	; 0x48d
   171a8:	e796      	b.n	170d8 <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
   171aa:	6840      	ldr	r0, [r0, #4]
   171ac:	f7fd fc18 	bl	149e0 <SecureElementSetDevEui>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
   171b0:	2800      	cmp	r0, #0
   171b2:	d0f2      	beq.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
   171b4:	e78f      	b.n	170d6 <LoRaMacMibSetRequestConfirm+0x6>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
   171b6:	6840      	ldr	r0, [r0, #4]
   171b8:	f7fd fc26 	bl	14a08 <SecureElementSetJoinEui>
   171bc:	e7f8      	b.n	171b0 <LoRaMacMibSetRequestConfirm+0xe0>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
   171be:	6840      	ldr	r0, [r0, #4]
   171c0:	f7fd fc38 	bl	14a34 <SecureElementSetPin>
   171c4:	e7f4      	b.n	171b0 <LoRaMacMibSetRequestConfirm+0xe0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
   171c6:	7902      	ldrb	r2, [r0, #4]
   171c8:	4b62      	ldr	r3, [pc, #392]	; (17354 <LoRaMacMibSetRequestConfirm+0x284>)
   171ca:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
    if( status == LORAMAC_STATUS_OK )
   171ce:	e7e4      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
   171d0:	6842      	ldr	r2, [r0, #4]
   171d2:	4b60      	ldr	r3, [pc, #384]	; (17354 <LoRaMacMibSetRequestConfirm+0x284>)
   171d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    if( status == LORAMAC_STATUS_OK )
   171d8:	e7df      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
   171da:	6842      	ldr	r2, [r0, #4]
   171dc:	4b5d      	ldr	r3, [pc, #372]	; (17354 <LoRaMacMibSetRequestConfirm+0x284>)
   171de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    if( status == LORAMAC_STATUS_OK )
   171e2:	e7da      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.AppKey != NULL )
   171e4:	6841      	ldr	r1, [r0, #4]
   171e6:	2900      	cmp	r1, #0
   171e8:	f43f af75 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
   171ec:	2000      	movs	r0, #0
   171ee:	f001 f963 	bl	184b8 <LoRaMacCryptoSetKey>
   171f2:	2800      	cmp	r0, #0
   171f4:	d0d1      	beq.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
   171f6:	2011      	movs	r0, #17
   171f8:	e76e      	b.n	170d8 <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NwkKey != NULL )
   171fa:	6841      	ldr	r1, [r0, #4]
   171fc:	2900      	cmp	r1, #0
   171fe:	f43f af6a 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
   17202:	2001      	movs	r0, #1
   17204:	e7f3      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.JSIntKey != NULL )
   17206:	6841      	ldr	r1, [r0, #4]
   17208:	2900      	cmp	r1, #0
   1720a:	f43f af64 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
   1720e:	2002      	movs	r0, #2
   17210:	e7ed      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.JSEncKey != NULL )
   17212:	6841      	ldr	r1, [r0, #4]
   17214:	2900      	cmp	r1, #0
   17216:	f43f af5e 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
   1721a:	2003      	movs	r0, #3
   1721c:	e7e7      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.FNwkSIntKey != NULL )
   1721e:	6841      	ldr	r1, [r0, #4]
   17220:	2900      	cmp	r1, #0
   17222:	f43f af58 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
   17226:	2004      	movs	r0, #4
   17228:	e7e1      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.SNwkSIntKey != NULL )
   1722a:	6841      	ldr	r1, [r0, #4]
   1722c:	2900      	cmp	r1, #0
   1722e:	f43f af52 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
   17232:	2005      	movs	r0, #5
   17234:	e7db      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.NwkSEncKey != NULL )
   17236:	6841      	ldr	r1, [r0, #4]
   17238:	2900      	cmp	r1, #0
   1723a:	f43f af4c 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
   1723e:	2006      	movs	r0, #6
   17240:	e7d5      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.AppSKey != NULL )
   17242:	6841      	ldr	r1, [r0, #4]
   17244:	2900      	cmp	r1, #0
   17246:	f43f af46 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
   1724a:	2007      	movs	r0, #7
   1724c:	e7cf      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKEKey != NULL )
   1724e:	6841      	ldr	r1, [r0, #4]
   17250:	2900      	cmp	r1, #0
   17252:	f43f af40 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
   17256:	207f      	movs	r0, #127	; 0x7f
   17258:	e7c9      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey0 != NULL )
   1725a:	6841      	ldr	r1, [r0, #4]
   1725c:	2900      	cmp	r1, #0
   1725e:	f43f af3a 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
   17262:	2080      	movs	r0, #128	; 0x80
   17264:	e7c3      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey0 != NULL )
   17266:	6841      	ldr	r1, [r0, #4]
   17268:	2900      	cmp	r1, #0
   1726a:	f43f af34 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
   1726e:	2081      	movs	r0, #129	; 0x81
   17270:	e7bd      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey0 != NULL )
   17272:	6841      	ldr	r1, [r0, #4]
   17274:	2900      	cmp	r1, #0
   17276:	f43f af2e 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
   1727a:	2082      	movs	r0, #130	; 0x82
   1727c:	e7b7      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey1 != NULL )
   1727e:	6841      	ldr	r1, [r0, #4]
   17280:	2900      	cmp	r1, #0
   17282:	f43f af28 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
   17286:	2083      	movs	r0, #131	; 0x83
   17288:	e7b1      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey1 != NULL )
   1728a:	6841      	ldr	r1, [r0, #4]
   1728c:	2900      	cmp	r1, #0
   1728e:	f43f af22 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
   17292:	2084      	movs	r0, #132	; 0x84
   17294:	e7ab      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey1 != NULL )
   17296:	6841      	ldr	r1, [r0, #4]
   17298:	2900      	cmp	r1, #0
   1729a:	f43f af1c 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
   1729e:	2085      	movs	r0, #133	; 0x85
   172a0:	e7a5      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey2 != NULL )
   172a2:	6841      	ldr	r1, [r0, #4]
   172a4:	2900      	cmp	r1, #0
   172a6:	f43f af16 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
   172aa:	2086      	movs	r0, #134	; 0x86
   172ac:	e79f      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey2 != NULL )
   172ae:	6841      	ldr	r1, [r0, #4]
   172b0:	2900      	cmp	r1, #0
   172b2:	f43f af10 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
   172b6:	2087      	movs	r0, #135	; 0x87
   172b8:	e799      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey2 != NULL )
   172ba:	6841      	ldr	r1, [r0, #4]
   172bc:	2900      	cmp	r1, #0
   172be:	f43f af0a 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
   172c2:	2088      	movs	r0, #136	; 0x88
   172c4:	e793      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey3 != NULL )
   172c6:	6841      	ldr	r1, [r0, #4]
   172c8:	2900      	cmp	r1, #0
   172ca:	f43f af04 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
   172ce:	2089      	movs	r0, #137	; 0x89
   172d0:	e78d      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey3 != NULL )
   172d2:	6841      	ldr	r1, [r0, #4]
   172d4:	2900      	cmp	r1, #0
   172d6:	f43f aefe 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
   172da:	208a      	movs	r0, #138	; 0x8a
   172dc:	e787      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey3 != NULL )
   172de:	6841      	ldr	r1, [r0, #4]
   172e0:	2900      	cmp	r1, #0
   172e2:	f43f aef8 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
   172e6:	208b      	movs	r0, #139	; 0x8b
   172e8:	e781      	b.n	171ee <LoRaMacMibSetRequestConfirm+0x11e>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
   172ea:	7900      	ldrb	r0, [r0, #4]
   172ec:	4b19      	ldr	r3, [pc, #100]	; (17354 <LoRaMacMibSetRequestConfirm+0x284>)
   172ee:	f883 01a1 	strb.w	r0, [r3, #417]	; 0x1a1
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
   172f2:	4b19      	ldr	r3, [pc, #100]	; (17358 <LoRaMacMibSetRequestConfirm+0x288>)
   172f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   172f6:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
   172f8:	e74f      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   172fa:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   172fc:	4e15      	ldr	r6, [pc, #84]	; (17354 <LoRaMacMibSetRequestConfirm+0x284>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   172fe:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17302:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17306:	2207      	movs	r2, #7
   17308:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   1730c:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1730e:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17312:	f015 fb98 	bl	2ca46 <RegionVerify>
   17316:	2800      	cmp	r0, #0
   17318:	f43f aedd 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
   1731c:	367c      	adds	r6, #124	; 0x7c
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
   1731e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   17322:	e886 0003 	stmia.w	r6, {r0, r1}
    if( status == LORAMAC_STATUS_OK )
   17326:	e738      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   17328:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1732a:	4e0a      	ldr	r6, [pc, #40]	; (17354 <LoRaMacMibSetRequestConfirm+0x284>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   1732c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17330:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17334:	2207      	movs	r2, #7
   17336:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   1733a:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1733c:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17340:	f015 fb81 	bl	2ca46 <RegionVerify>
   17344:	2800      	cmp	r0, #0
   17346:	f43f aec6 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
   1734a:	36b8      	adds	r6, #184	; 0xb8
   1734c:	e7e7      	b.n	1731e <LoRaMacMibSetRequestConfirm+0x24e>
   1734e:	bf00      	nop
   17350:	2003004c 	.word	0x2003004c
   17354:	2002fbf0 	.word	0x2002fbf0
   17358:	000338dc 	.word	0x000338dc
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   1735c:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1735e:	4ebe      	ldr	r6, [pc, #760]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   17360:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17364:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17368:	2207      	movs	r2, #7
   1736a:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   1736e:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17370:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17374:	f015 fb67 	bl	2ca46 <RegionVerify>
   17378:	2800      	cmp	r0, #0
   1737a:	f43f aeac 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
   1737e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   17382:	f106 0384 	add.w	r3, r6, #132	; 0x84
   17386:	e883 0003 	stmia.w	r3, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
   1738a:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   1738e:	2b02      	cmp	r3, #2
   17390:	f47f af03 	bne.w	1719a <LoRaMacMibSetRequestConfirm+0xca>
   17394:	f896 31b8 	ldrb.w	r3, [r6, #440]	; 0x1b8
   17398:	2b00      	cmp	r3, #0
   1739a:	f43f aefe 	beq.w	1719a <LoRaMacMibSetRequestConfirm+0xca>
                    Radio.Sleep( );
   1739e:	4baf      	ldr	r3, [pc, #700]	; (1765c <LoRaMacMibSetRequestConfirm+0x58c>)
   173a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   173a2:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
   173a4:	f7fd fd3a 	bl	14e1c <OpenContinuousRxCWindow>
    if( status == LORAMAC_STATUS_OK )
   173a8:	e6f7      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   173aa:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   173ac:	4eaa      	ldr	r6, [pc, #680]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   173ae:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   173b2:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   173b6:	2207      	movs	r2, #7
   173b8:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   173bc:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   173be:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   173c2:	f015 fb40 	bl	2ca46 <RegionVerify>
   173c6:	2800      	cmp	r0, #0
   173c8:	f43f ae85 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
   173cc:	36c0      	adds	r6, #192	; 0xc0
   173ce:	e7a6      	b.n	1731e <LoRaMacMibSetRequestConfirm+0x24e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
   173d0:	6843      	ldr	r3, [r0, #4]
   173d2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
   173d4:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
   173d6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
   173da:	4b9f      	ldr	r3, [pc, #636]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   173dc:	a902      	add	r1, sp, #8
   173de:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   173e2:	f015 fb3f 	bl	2ca64 <RegionChanMaskSet>
   173e6:	2800      	cmp	r0, #0
   173e8:	f47f aed7 	bne.w	1719a <LoRaMacMibSetRequestConfirm+0xca>
   173ec:	e673      	b.n	170d6 <LoRaMacMibSetRequestConfirm+0x6>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
   173ee:	6843      	ldr	r3, [r0, #4]
   173f0:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
   173f2:	2300      	movs	r3, #0
   173f4:	e7ef      	b.n	173d6 <LoRaMacMibSetRequestConfirm+0x306>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
   173f6:	7903      	ldrb	r3, [r0, #4]
   173f8:	1e5a      	subs	r2, r3, #1
   173fa:	2a0e      	cmp	r2, #14
   173fc:	f63f ae6b 	bhi.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
   17400:	4a95      	ldr	r2, [pc, #596]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   17402:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
    if( status == LORAMAC_STATUS_OK )
   17406:	e6c8      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
   17408:	6842      	ldr	r2, [r0, #4]
   1740a:	4b93      	ldr	r3, [pc, #588]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   1740c:	665a      	str	r2, [r3, #100]	; 0x64
    if( status == LORAMAC_STATUS_OK )
   1740e:	e6c4      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
   17410:	6842      	ldr	r2, [r0, #4]
   17412:	4b91      	ldr	r3, [pc, #580]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   17414:	669a      	str	r2, [r3, #104]	; 0x68
    if( status == LORAMAC_STATUS_OK )
   17416:	e6c0      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
   17418:	6842      	ldr	r2, [r0, #4]
   1741a:	4b8f      	ldr	r3, [pc, #572]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   1741c:	66da      	str	r2, [r3, #108]	; 0x6c
    if( status == LORAMAC_STATUS_OK )
   1741e:	e6bc      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
   17420:	6842      	ldr	r2, [r0, #4]
   17422:	4b8d      	ldr	r3, [pc, #564]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   17424:	671a      	str	r2, [r3, #112]	; 0x70
    if( status == LORAMAC_STATUS_OK )
   17426:	e6b8      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
   17428:	6842      	ldr	r2, [r0, #4]
   1742a:	4b8b      	ldr	r3, [pc, #556]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   1742c:	675a      	str	r2, [r3, #116]	; 0x74
    if( status == LORAMAC_STATUS_OK )
   1742e:	e6b4      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   17430:	4c89      	ldr	r4, [pc, #548]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
   17432:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   17434:	2206      	movs	r2, #6
   17436:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   1743a:	a901      	add	r1, sp, #4
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
   1743c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   17440:	f015 fb01 	bl	2ca46 <RegionVerify>
   17444:	2800      	cmp	r0, #0
   17446:	f43f ae46 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
   1744a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1744e:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
    if( status == LORAMAC_STATUS_OK )
   17452:	e6a2      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
   17454:	7903      	ldrb	r3, [r0, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17456:	4c80      	ldr	r4, [pc, #512]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
   17458:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1745c:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   17460:	2205      	movs	r2, #5
   17462:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   17466:	a901      	add	r1, sp, #4
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17468:	f88d 3006 	strb.w	r3, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   1746c:	f015 faeb 	bl	2ca46 <RegionVerify>
   17470:	2800      	cmp	r0, #0
   17472:	f43f ae30 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
   17476:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1747a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    if( status == LORAMAC_STATUS_OK )
   1747e:	e68c      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   17480:	4c75      	ldr	r4, [pc, #468]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
   17482:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   17484:	220a      	movs	r2, #10
   17486:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   1748a:	a901      	add	r1, sp, #4
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
   1748c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   17490:	f015 fad9 	bl	2ca46 <RegionVerify>
   17494:	2800      	cmp	r0, #0
   17496:	f43f ae1e 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
   1749a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1749e:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
    if( status == LORAMAC_STATUS_OK )
   174a2:	e67a      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   174a4:	4c6c      	ldr	r4, [pc, #432]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
   174a6:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   174a8:	2209      	movs	r2, #9
   174aa:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   174ae:	a901      	add	r1, sp, #4
            verify.TxPower = mibSet->Param.ChannelsTxPower;
   174b0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   174b4:	f015 fac7 	bl	2ca46 <RegionVerify>
   174b8:	2800      	cmp	r0, #0
   174ba:	f43f ae0c 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
   174be:	f89d 3004 	ldrb.w	r3, [sp, #4]
   174c2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if( status == LORAMAC_STATUS_OK )
   174c6:	e668      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
   174c8:	6842      	ldr	r2, [r0, #4]
   174ca:	4b63      	ldr	r3, [pc, #396]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   174cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   174d0:	65da      	str	r2, [r3, #92]	; 0x5c
    if( status == LORAMAC_STATUS_OK )
   174d2:	e662      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
   174d4:	7902      	ldrb	r2, [r0, #4]
   174d6:	4b60      	ldr	r3, [pc, #384]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   174d8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
   174dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    if( status == LORAMAC_STATUS_OK )
   174e0:	e65b      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
   174e2:	6842      	ldr	r2, [r0, #4]
   174e4:	4b5c      	ldr	r3, [pc, #368]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   174e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    if( status == LORAMAC_STATUS_OK )
   174ea:	e656      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
   174ec:	6842      	ldr	r2, [r0, #4]
   174ee:	4b5a      	ldr	r3, [pc, #360]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   174f0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    if( status == LORAMAC_STATUS_OK )
   174f4:	e651      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.Contexts != 0 )
   174f6:	6844      	ldr	r4, [r0, #4]
   174f8:	2c00      	cmp	r4, #0
   174fa:	f43f adec 	beq.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
    if( MacCtx.MacState != LORAMAC_STOPPED )
   174fe:	2b01      	cmp	r3, #1
   17500:	f040 80a7 	bne.w	17652 <LoRaMacMibSetRequestConfirm+0x582>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
   17504:	2134      	movs	r1, #52	; 0x34
   17506:	4620      	mov	r0, r4
   17508:	f7fb fd56 	bl	12fb8 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
   1750c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1750e:	4298      	cmp	r0, r3
   17510:	d104      	bne.n	1751c <LoRaMacMibSetRequestConfirm+0x44c>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
   17512:	2238      	movs	r2, #56	; 0x38
   17514:	4621      	mov	r1, r4
   17516:	4850      	ldr	r0, [pc, #320]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   17518:	f014 fa9b 	bl	2ba52 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
   1751c:	f104 0638 	add.w	r6, r4, #56	; 0x38
   17520:	211c      	movs	r1, #28
   17522:	4630      	mov	r0, r6
   17524:	f7fb fd48 	bl	12fb8 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
   17528:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1752a:	4298      	cmp	r0, r3
   1752c:	d104      	bne.n	17538 <LoRaMacMibSetRequestConfirm+0x468>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
   1752e:	2220      	movs	r2, #32
   17530:	4631      	mov	r1, r6
   17532:	484b      	ldr	r0, [pc, #300]	; (17660 <LoRaMacMibSetRequestConfirm+0x590>)
   17534:	f014 fa8d 	bl	2ba52 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
   17538:	f104 0658 	add.w	r6, r4, #88	; 0x58
   1753c:	f44f 71be 	mov.w	r1, #380	; 0x17c
   17540:	4630      	mov	r0, r6
   17542:	f7fb fd39 	bl	12fb8 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
   17546:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   1754a:	4298      	cmp	r0, r3
   1754c:	d118      	bne.n	17580 <LoRaMacMibSetRequestConfirm+0x4b0>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
   1754e:	f44f 72c0 	mov.w	r2, #384	; 0x180
   17552:	4631      	mov	r1, r6
   17554:	4843      	ldr	r0, [pc, #268]	; (17664 <LoRaMacMibSetRequestConfirm+0x594>)
   17556:	f014 fa7c 	bl	2ba52 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   1755a:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
   1755e:	f885 33e8 	strb.w	r3, [r5, #1000]	; 0x3e8
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   17562:	4b3d      	ldr	r3, [pc, #244]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   17564:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17568:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   1756c:	f8c5 23ec 	str.w	r2, [r5, #1004]	; 0x3ec
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17570:	f885 33f8 	strb.w	r3, [r5, #1016]	; 0x3f8
        MacCtx.RxWindowCConfig.RxContinuous = true;
   17574:	2301      	movs	r3, #1
   17576:	f885 33f9 	strb.w	r3, [r5, #1017]	; 0x3f9
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   1757a:	2302      	movs	r3, #2
   1757c:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
   17580:	f504 76ec 	add.w	r6, r4, #472	; 0x1d8
   17584:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   17588:	4630      	mov	r0, r6
   1758a:	f7fb fd15 	bl	12fb8 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
   1758e:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
   17592:	4298      	cmp	r0, r3
   17594:	d105      	bne.n	175a2 <LoRaMacMibSetRequestConfirm+0x4d2>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
   17596:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1759a:	4631      	mov	r1, r6
   1759c:	4832      	ldr	r0, [pc, #200]	; (17668 <LoRaMacMibSetRequestConfirm+0x598>)
   1759e:	f014 fa58 	bl	2ba52 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
   175a2:	f504 765e 	add.w	r6, r4, #888	; 0x378
   175a6:	2100      	movs	r1, #0
   175a8:	4630      	mov	r0, r6
   175aa:	f7fb fd05 	bl	12fb8 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
   175ae:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
   175b2:	4298      	cmp	r0, r3
   175b4:	d104      	bne.n	175c0 <LoRaMacMibSetRequestConfirm+0x4f0>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
   175b6:	2204      	movs	r2, #4
   175b8:	4631      	mov	r1, r6
   175ba:	482c      	ldr	r0, [pc, #176]	; (1766c <LoRaMacMibSetRequestConfirm+0x59c>)
   175bc:	f014 fa49 	bl	2ba52 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
   175c0:	f204 4644 	addw	r6, r4, #1092	; 0x444
   175c4:	2114      	movs	r1, #20
   175c6:	4630      	mov	r0, r6
   175c8:	f7fb fcf6 	bl	12fb8 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
   175cc:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   175d0:	4298      	cmp	r0, r3
   175d2:	f47f ade2 	bne.w	1719a <LoRaMacMibSetRequestConfirm+0xca>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
   175d6:	2218      	movs	r2, #24
   175d8:	4631      	mov	r1, r6
   175da:	4825      	ldr	r0, [pc, #148]	; (17670 <LoRaMacMibSetRequestConfirm+0x5a0>)
   175dc:	f014 fa39 	bl	2ba52 <memcpy1>
    if( status == LORAMAC_STATUS_OK )
   175e0:	e5db      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
   175e2:	7983      	ldrb	r3, [r0, #6]
   175e4:	2b01      	cmp	r3, #1
   175e6:	f63f ad76 	bhi.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
   175ea:	6842      	ldr	r2, [r0, #4]
   175ec:	4b1a      	ldr	r3, [pc, #104]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   175ee:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
   175f2:	6840      	ldr	r0, [r0, #4]
   175f4:	f000 fd04 	bl	18000 <LoRaMacCryptoSetLrWanVersion>
   175f8:	e5fb      	b.n	171f2 <LoRaMacMibSetRequestConfirm+0x122>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
   175fa:	7902      	ldrb	r2, [r0, #4]
   175fc:	4b16      	ldr	r3, [pc, #88]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   175fe:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
    if( status == LORAMAC_STATUS_OK )
   17602:	e5ca      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
            if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
   17604:	4b14      	ldr	r3, [pc, #80]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   17606:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   1760a:	4b1a      	ldr	r3, [pc, #104]	; (17674 <LoRaMacMibSetRequestConfirm+0x5a4>)
   1760c:	4299      	cmp	r1, r3
   1760e:	f67f ad62 	bls.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
        *timeInMiliSec = rejoinCycleTime * 1000;
   17612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17616:	4359      	muls	r1, r3
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   17618:	4817      	ldr	r0, [pc, #92]	; (17678 <LoRaMacMibSetRequestConfirm+0x5a8>)
        *timeInMiliSec = rejoinCycleTime * 1000;
   1761a:	f8c5 14f0 	str.w	r1, [r5, #1264]	; 0x4f0
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   1761e:	f014 fb1c 	bl	2bc5a <TimerSetValue>
                TimerStart( &MacCtx.Rejoin0CycleTimer );
   17622:	4815      	ldr	r0, [pc, #84]	; (17678 <LoRaMacMibSetRequestConfirm+0x5a8>)
                TimerStart( &MacCtx.Rejoin1CycleTimer );
   17624:	f7fb fcee 	bl	13004 <TimerStart>
    if( status == LORAMAC_STATUS_OK )
   17628:	e5b7      	b.n	1719a <LoRaMacMibSetRequestConfirm+0xca>
           if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime ) == true )
   1762a:	4b0b      	ldr	r3, [pc, #44]	; (17658 <LoRaMacMibSetRequestConfirm+0x588>)
   1762c:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
    if( rejoinCycleTime > 4294967 )
   17630:	4b10      	ldr	r3, [pc, #64]	; (17674 <LoRaMacMibSetRequestConfirm+0x5a4>)
   17632:	4299      	cmp	r1, r3
   17634:	f67f ad4f 	bls.w	170d6 <LoRaMacMibSetRequestConfirm+0x6>
        *timeInMiliSec = rejoinCycleTime * 1000;
   17638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1763c:	4359      	muls	r1, r3
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   1763e:	480f      	ldr	r0, [pc, #60]	; (1767c <LoRaMacMibSetRequestConfirm+0x5ac>)
        *timeInMiliSec = rejoinCycleTime * 1000;
   17640:	f8c5 14f4 	str.w	r1, [r5, #1268]	; 0x4f4
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   17644:	f014 fb09 	bl	2bc5a <TimerSetValue>
                TimerStart( &MacCtx.Rejoin1CycleTimer );
   17648:	480c      	ldr	r0, [pc, #48]	; (1767c <LoRaMacMibSetRequestConfirm+0x5ac>)
   1764a:	e7eb      	b.n	17624 <LoRaMacMibSetRequestConfirm+0x554>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
   1764c:	f014 fed9 	bl	2c402 <LoRaMacMibClassBSetRequestConfirm>
            break;
   17650:	e59b      	b.n	1718a <LoRaMacMibSetRequestConfirm+0xba>
        return LORAMAC_STATUS_BUSY;
   17652:	2001      	movs	r0, #1
   17654:	e540      	b.n	170d8 <LoRaMacMibSetRequestConfirm+0x8>
   17656:	bf00      	nop
   17658:	2002fbf0 	.word	0x2002fbf0
   1765c:	000338dc 	.word	0x000338dc
   17660:	2002fc28 	.word	0x2002fc28
   17664:	2002fc48 	.word	0x2002fc48
   17668:	2002fdc8 	.word	0x2002fdc8
   1766c:	2002ff68 	.word	0x2002ff68
   17670:	20030034 	.word	0x20030034
   17674:	00418937 	.word	0x00418937
   17678:	200304dc 	.word	0x200304dc
   1767c:	200304f4 	.word	0x200304f4

00017680 <LoRaMacMlmeRequest>:
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   17680:	2300      	movs	r3, #0
{
   17682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17686:	b086      	sub	sp, #24
    if( mlmeRequest == NULL )
   17688:	4605      	mov	r5, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   1768a:	f8ad 3000 	strh.w	r3, [sp]
    if( mlmeRequest == NULL )
   1768e:	2800      	cmp	r0, #0
   17690:	f000 80e6 	beq.w	17860 <LoRaMacMlmeRequest+0x1e0>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
   17694:	6103      	str	r3, [r0, #16]
    if( LoRaMacIsBusy( ) == true )
   17696:	f7fd fd15 	bl	150c4 <LoRaMacIsBusy>
   1769a:	b120      	cbz	r0, 176a6 <LoRaMacMlmeRequest+0x26>
        return LORAMAC_STATUS_BUSY;
   1769c:	2601      	movs	r6, #1
}
   1769e:	4630      	mov	r0, r6
   176a0:	b006      	add	sp, #24
   176a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
   176a6:	f000 fb99 	bl	17ddc <LoRaMacConfirmQueueIsFull>
   176aa:	2800      	cmp	r0, #0
   176ac:	d1f6      	bne.n	1769c <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
   176ae:	f000 fb8f 	bl	17dd0 <LoRaMacConfirmQueueGetCnt>
   176b2:	4601      	mov	r1, r0
   176b4:	b918      	cbnz	r0, 176be <LoRaMacMlmeRequest+0x3e>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
   176b6:	2214      	movs	r2, #20
   176b8:	486a      	ldr	r0, [pc, #424]	; (17864 <LoRaMacMlmeRequest+0x1e4>)
   176ba:	f014 f9de 	bl	2ba7a <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   176be:	2201      	movs	r2, #1
    queueElement.ReadyToHandle = false;
   176c0:	2100      	movs	r1, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   176c2:	4c69      	ldr	r4, [pc, #420]	; (17868 <LoRaMacMlmeRequest+0x1e8>)
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   176c4:	f88d 2005 	strb.w	r2, [sp, #5]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
   176c8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   176cc:	f884 2459 	strb.w	r2, [r4, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
   176d0:	f043 0304 	orr.w	r3, r3, #4
   176d4:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    queueElement.Request = mlmeRequest->Type;
   176d8:	782b      	ldrb	r3, [r5, #0]
    queueElement.ReadyToHandle = false;
   176da:	f8ad 1006 	strh.w	r1, [sp, #6]
    queueElement.Request = mlmeRequest->Type;
   176de:	f88d 3004 	strb.w	r3, [sp, #4]
    switch( mlmeRequest->Type )
   176e2:	3b01      	subs	r3, #1
   176e4:	2b0b      	cmp	r3, #11
   176e6:	d807      	bhi.n	176f8 <LoRaMacMlmeRequest+0x78>
   176e8:	e8df f003 	tbb	[pc, r3]
   176ec:	78736217 	.word	0x78736217
   176f0:	88060682 	.word	0x88060682
   176f4:	a594a906 	.word	0xa594a906
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
   176f8:	2602      	movs	r6, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   176fa:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   176fe:	612b      	str	r3, [r5, #16]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
   17700:	f000 fb66 	bl	17dd0 <LoRaMacConfirmQueueGetCnt>
   17704:	2800      	cmp	r0, #0
   17706:	d1ca      	bne.n	1769e <LoRaMacMlmeRequest+0x1e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   17708:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.NodeAckRequested = false;
   1770c:	f884 041a 	strb.w	r0, [r4, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   17710:	f360 0382 	bfi	r3, r0, #2, #1
   17714:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   17718:	e7c1      	b.n	1769e <LoRaMacMlmeRequest+0x1e>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
   1771a:	f8d4 6340 	ldr.w	r6, [r4, #832]	; 0x340
   1771e:	f016 0620 	ands.w	r6, r6, #32
   17722:	d1bb      	bne.n	1769c <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
   17724:	792f      	ldrb	r7, [r5, #4]
   17726:	2f02      	cmp	r7, #2
   17728:	d120      	bne.n	1776c <LoRaMacMlmeRequest+0xec>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   1772a:	4f50      	ldr	r7, [pc, #320]	; (1786c <LoRaMacMlmeRequest+0x1ec>)
                ResetMacParameters( );
   1772c:	f7fd fad8 	bl	14ce0 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   17730:	4632      	mov	r2, r6
   17732:	f995 1005 	ldrsb.w	r1, [r5, #5]
   17736:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
   1773a:	f015 f9e9 	bl	2cb10 <RegionAlternateDr>
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
   1773e:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   17740:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
                status = SendReJoinReq( JOIN_REQ );
   17744:	20ff      	movs	r0, #255	; 0xff
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
   17746:	f88d 3005 	strb.w	r3, [sp, #5]
                status = SendReJoinReq( JOIN_REQ );
   1774a:	f7fd ffb9 	bl	156c0 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
   1774e:	4606      	mov	r6, r0
   17750:	b358      	cbz	r0, 177aa <LoRaMacMlmeRequest+0x12a>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
   17752:	2201      	movs	r2, #1
   17754:	f995 1005 	ldrsb.w	r1, [r5, #5]
   17758:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
   1775c:	f015 f9d8 	bl	2cb10 <RegionAlternateDr>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17760:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
   17764:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17768:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   1776a:	e7c9      	b.n	17700 <LoRaMacMlmeRequest+0x80>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
   1776c:	2f01      	cmp	r7, #1
   1776e:	d1c3      	bne.n	176f8 <LoRaMacMlmeRequest+0x78>
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   17770:	2302      	movs	r3, #2
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   17772:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1786c <LoRaMacMlmeRequest+0x1ec>
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   17776:	a902      	add	r1, sp, #8
   17778:	f898 0058 	ldrb.w	r0, [r8, #88]	; 0x58
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   1777c:	f88d 3014 	strb.w	r3, [sp, #20]
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   17780:	f888 61a5 	strb.w	r6, [r8, #421]	; 0x1a5
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   17784:	f015 f959 	bl	2ca3a <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
   17788:	792b      	ldrb	r3, [r5, #4]
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   1778a:	f88d 6005 	strb.w	r6, [sp, #5]
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
   1778e:	f888 31b8 	strb.w	r3, [r8, #440]	; 0x1b8
                MacCtx.MacCallbacks->MacProcessNotify( );
   17792:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
                queueElement.ReadyToHandle = true;
   17796:	f88d 7006 	strb.w	r7, [sp, #6]
                MacCtx.MacCallbacks->MacProcessNotify( );
   1779a:	68db      	ldr	r3, [r3, #12]
   1779c:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
   1779e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   177a2:	f043 0310 	orr.w	r3, r3, #16
   177a6:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   177aa:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   177ae:	e01d      	b.n	177ec <LoRaMacMlmeRequest+0x16c>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   177b0:	2302      	movs	r3, #2
            status = SendReJoinReq( REJOIN_REQ_0 );
   177b2:	2000      	movs	r0, #0
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   177b4:	f884 3458 	strb.w	r3, [r4, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_1 );
   177b8:	f7fd ff82 	bl	156c0 <SendReJoinReq>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   177bc:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
   177c0:	4606      	mov	r6, r0
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   177c2:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   177c4:	2800      	cmp	r0, #0
   177c6:	d19b      	bne.n	17700 <LoRaMacMlmeRequest+0x80>
        LoRaMacConfirmQueueAdd( &queueElement );
   177c8:	a801      	add	r0, sp, #4
   177ca:	f000 fa51 	bl	17c70 <LoRaMacConfirmQueueAdd>
   177ce:	2600      	movs	r6, #0
   177d0:	e765      	b.n	1769e <LoRaMacMlmeRequest+0x1e>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   177d2:	2303      	movs	r3, #3
            status = SendReJoinReq( REJOIN_REQ_1 );
   177d4:	2001      	movs	r0, #1
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   177d6:	f884 3458 	strb.w	r3, [r4, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_1 );
   177da:	e7ed      	b.n	177b8 <LoRaMacMlmeRequest+0x138>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   177dc:	2200      	movs	r2, #0
   177de:	4669      	mov	r1, sp
   177e0:	2002      	movs	r0, #2
   177e2:	f000 f935 	bl	17a50 <LoRaMacCommandsAddCmd>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   177e6:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   177ea:	b980      	cbnz	r0, 1780e <LoRaMacMlmeRequest+0x18e>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   177ec:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   177ee:	e7eb      	b.n	177c8 <LoRaMacMlmeRequest+0x148>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
   177f0:	7b2a      	ldrb	r2, [r5, #12]
   177f2:	68a9      	ldr	r1, [r5, #8]
   177f4:	88a8      	ldrh	r0, [r5, #4]
   177f6:	f7fe fbf3 	bl	15fe0 <SetTxContinuousWave>
   177fa:	e7df      	b.n	177bc <LoRaMacMlmeRequest+0x13c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   177fc:	2200      	movs	r2, #0
   177fe:	4669      	mov	r1, sp
   17800:	200d      	movs	r0, #13
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   17802:	f000 f925 	bl	17a50 <LoRaMacCommandsAddCmd>
   17806:	2800      	cmp	r0, #0
   17808:	d0cf      	beq.n	177aa <LoRaMacMlmeRequest+0x12a>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   1780a:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
   1780e:	2613      	movs	r6, #19
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17810:	612b      	str	r3, [r5, #16]
   17812:	e775      	b.n	17700 <LoRaMacMlmeRequest+0x80>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
   17814:	4b15      	ldr	r3, [pc, #84]	; (1786c <LoRaMacMlmeRequest+0x1ec>)
   17816:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   1781a:	2b00      	cmp	r3, #0
   1781c:	f47f af6c 	bne.w	176f8 <LoRaMacMlmeRequest+0x78>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
   17820:	792e      	ldrb	r6, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
   17822:	f006 0007 	and.w	r0, r6, #7
   17826:	f014 fde5 	bl	2c3f4 <LoRaMacClassBSetPingSlotInfo>
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
   1782a:	2201      	movs	r2, #1
   1782c:	4669      	mov	r1, sp
   1782e:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
   17830:	f88d 6000 	strb.w	r6, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
   17834:	e7e5      	b.n	17802 <LoRaMacMlmeRequest+0x182>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   17836:	2200      	movs	r2, #0
   17838:	4669      	mov	r1, sp
   1783a:	2012      	movs	r0, #18
   1783c:	e7e1      	b.n	17802 <LoRaMacMlmeRequest+0x182>
            queueElement.RestrictCommonReadyToHandle = true;
   1783e:	f88d 2007 	strb.w	r2, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
   17842:	f014 fdc8 	bl	2c3d6 <LoRaMacClassBIsAcquisitionInProgress>
   17846:	4606      	mov	r6, r0
   17848:	b928      	cbnz	r0, 17856 <LoRaMacMlmeRequest+0x1d6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
   1784a:	f014 fdc1 	bl	2c3d0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
   1784e:	4630      	mov	r0, r6
   17850:	f014 fdc3 	bl	2c3da <LoRaMacClassBBeaconTimerEvent>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17854:	e7a9      	b.n	177aa <LoRaMacMlmeRequest+0x12a>
   17856:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                status = LORAMAC_STATUS_BUSY;
   1785a:	2601      	movs	r6, #1
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   1785c:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   1785e:	e74f      	b.n	17700 <LoRaMacMlmeRequest+0x80>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   17860:	2603      	movs	r6, #3
   17862:	e71c      	b.n	1769e <LoRaMacMlmeRequest+0x1e>
   17864:	200304a4 	.word	0x200304a4
   17868:	2003004c 	.word	0x2003004c
   1786c:	2002fbf0 	.word	0x2002fbf0

00017870 <LoRaMacMcpsRequest>:
{
   17870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mcpsRequest == NULL )
   17874:	4607      	mov	r7, r0
{
   17876:	b08d      	sub	sp, #52	; 0x34
    if( mcpsRequest == NULL )
   17878:	b920      	cbnz	r0, 17884 <LoRaMacMcpsRequest+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   1787a:	2203      	movs	r2, #3
}
   1787c:	4610      	mov	r0, r2
   1787e:	b00d      	add	sp, #52	; 0x34
   17880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
   17884:	2300      	movs	r3, #0
   17886:	6103      	str	r3, [r0, #16]
    if( LoRaMacIsBusy( ) == true )
   17888:	f7fd fc1c 	bl	150c4 <LoRaMacIsBusy>
   1788c:	4604      	mov	r4, r0
   1788e:	2800      	cmp	r0, #0
   17890:	f040 80b8 	bne.w	17a04 <LoRaMacMcpsRequest+0x194>
    McpsReq_t request = *mcpsRequest;
   17894:	463e      	mov	r6, r7
   17896:	ad07      	add	r5, sp, #28
   17898:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1789a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1789c:	89bb      	ldrh	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
   1789e:	2214      	movs	r2, #20
   178a0:	4621      	mov	r1, r4
   178a2:	4859      	ldr	r0, [pc, #356]	; (17a08 <LoRaMacMcpsRequest+0x198>)
    McpsReq_t request = *mcpsRequest;
   178a4:	783e      	ldrb	r6, [r7, #0]
   178a6:	f997 b00e 	ldrsb.w	fp, [r7, #14]
   178aa:	9301      	str	r3, [sp, #4]
    macHdr.Value = 0;
   178ac:	f88d 4008 	strb.w	r4, [sp, #8]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
   178b0:	f014 f8e3 	bl	2ba7a <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   178b4:	2201      	movs	r2, #1
   178b6:	f8df 8154 	ldr.w	r8, [pc, #340]	; 17a0c <LoRaMacMcpsRequest+0x19c>
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
   178ba:	4d55      	ldr	r5, [pc, #340]	; (17a10 <LoRaMacMcpsRequest+0x1a0>)
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   178bc:	f888 2445 	strb.w	r2, [r8, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
   178c0:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
   178c4:	2a02      	cmp	r2, #2
   178c6:	d111      	bne.n	178ec <LoRaMacMcpsRequest+0x7c>
   178c8:	f895 21a0 	ldrb.w	r2, [r5, #416]	; 0x1a0
   178cc:	2a02      	cmp	r2, #2
   178ce:	d10d      	bne.n	178ec <LoRaMacMcpsRequest+0x7c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
   178d0:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
   178d4:	b952      	cbnz	r2, 178ec <LoRaMacMcpsRequest+0x7c>
    switch( request.Type )
   178d6:	2e01      	cmp	r6, #1
   178d8:	d947      	bls.n	1796a <LoRaMacMcpsRequest+0xfa>
   178da:	2e03      	cmp	r6, #3
   178dc:	d052      	beq.n	17984 <LoRaMacMcpsRequest+0x114>
   178de:	2e01      	cmp	r6, #1
   178e0:	bf38      	it	cc
   178e2:	2601      	movcc	r6, #1
   178e4:	46a3      	mov	fp, r4
    uint8_t fPort = 0;
   178e6:	f04f 0900 	mov.w	r9, #0
            break;
   178ea:	e011      	b.n	17910 <LoRaMacMcpsRequest+0xa0>
    switch( request.Type )
   178ec:	2e01      	cmp	r6, #1
   178ee:	d03c      	beq.n	1796a <LoRaMacMcpsRequest+0xfa>
   178f0:	2e03      	cmp	r6, #3
   178f2:	d047      	beq.n	17984 <LoRaMacMcpsRequest+0x114>
   178f4:	2e00      	cmp	r6, #0
   178f6:	d155      	bne.n	179a4 <LoRaMacMcpsRequest+0x134>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   178f8:	2102      	movs	r1, #2
   178fa:	f89d 2008 	ldrb.w	r2, [sp, #8]
            fPort = request.Req.Unconfirmed.fPort;
   178fe:	f89d 9020 	ldrb.w	r9, [sp, #32]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   17902:	f361 1247 	bfi	r2, r1, #5, #3
            fBuffer = request.Req.Unconfirmed.fBuffer;
   17906:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   1790a:	f88d 2008 	strb.w	r2, [sp, #8]
            readyToSend = true;
   1790e:	2401      	movs	r4, #1
    getPhy.Attribute = PHY_MIN_TX_DR;
   17910:	2202      	movs	r2, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17912:	f895 108c 	ldrb.w	r1, [r5, #140]	; 0x8c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17916:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1791a:	f88d 1016 	strb.w	r1, [sp, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1791e:	a905      	add	r1, sp, #20
    getPhy.Attribute = PHY_MIN_TX_DR;
   17920:	f88d 2014 	strb.w	r2, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17924:	f015 f879 	bl	2ca1a <RegionGetPhyParam>
    if( ( adr == true ) &&
   17928:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
   1792c:	2202      	movs	r2, #2
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
   1792e:	f895 c1b8 	ldrb.w	ip, [r5, #440]	; 0x1b8
   17932:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
   17936:	b240      	sxtb	r0, r0
    if( ( adr == true ) &&
   17938:	bbc3      	cbnz	r3, 179ac <LoRaMacMcpsRequest+0x13c>
    if( readyToSend == true )
   1793a:	2c00      	cmp	r4, #0
   1793c:	d03c      	beq.n	179b8 <LoRaMacMcpsRequest+0x148>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
   1793e:	4558      	cmp	r0, fp
   17940:	bfb8      	it	lt
   17942:	4658      	movlt	r0, fp
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17944:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
            verify.DatarateParams.Datarate = datarate;
   17948:	f88d 0010 	strb.w	r0, [sp, #16]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   1794c:	2205      	movs	r2, #5
   1794e:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   17952:	a904      	add	r1, sp, #16
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17954:	f88d 3012 	strb.w	r3, [sp, #18]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   17958:	f015 f875 	bl	2ca46 <RegionVerify>
   1795c:	2800      	cmp	r0, #0
   1795e:	d08c      	beq.n	1787a <LoRaMacMcpsRequest+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
   17960:	f89d 3010 	ldrb.w	r3, [sp, #16]
   17964:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
   17968:	e02c      	b.n	179c4 <LoRaMacMcpsRequest+0x154>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   1796a:	2104      	movs	r1, #4
   1796c:	f89d 2008 	ldrb.w	r2, [sp, #8]
            break;
   17970:	2601      	movs	r6, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   17972:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = request.Req.Confirmed.fPort;
   17976:	f89d 9020 	ldrb.w	r9, [sp, #32]
            fBuffer = request.Req.Confirmed.fBuffer;
   1797a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   1797e:	f88d 2008 	strb.w	r2, [sp, #8]
            break;
   17982:	e7c4      	b.n	1790e <LoRaMacMcpsRequest+0x9e>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
   17984:	f89d 3008 	ldrb.w	r3, [sp, #8]
            break;
   17988:	2603      	movs	r6, #3
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
   1798a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
   1798e:	f88d 3008 	strb.w	r3, [sp, #8]
            fBufferSize = request.Req.Proprietary.fBufferSize;
   17992:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            readyToSend = true;
   17996:	2401      	movs	r4, #1
            fBuffer = request.Req.Proprietary.fBuffer;
   17998:	f8dd a020 	ldr.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
   1799c:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            fBufferSize = request.Req.Proprietary.fBufferSize;
   179a0:	9301      	str	r3, [sp, #4]
            break;
   179a2:	e7a0      	b.n	178e6 <LoRaMacMcpsRequest+0x76>
    switch( request.Type )
   179a4:	f04f 0b00 	mov.w	fp, #0
   179a8:	46d9      	mov	r9, fp
   179aa:	e7b1      	b.n	17910 <LoRaMacMcpsRequest+0xa0>
    if( ( adr == true ) &&
   179ac:	f1bc 0f01 	cmp.w	ip, #1
   179b0:	d106      	bne.n	179c0 <LoRaMacMcpsRequest+0x150>
        ( activation == ACTIVATION_TYPE_ABP ) &&
   179b2:	b929      	cbnz	r1, 179c0 <LoRaMacMcpsRequest+0x150>
    if( readyToSend == true )
   179b4:	2c00      	cmp	r4, #0
   179b6:	d1c5      	bne.n	17944 <LoRaMacMcpsRequest+0xd4>
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   179b8:	f8d8 34fc 	ldr.w	r3, [r8, #1276]	; 0x4fc
   179bc:	613b      	str	r3, [r7, #16]
    return status;
   179be:	e75d      	b.n	1787c <LoRaMacMcpsRequest+0xc>
    if( readyToSend == true )
   179c0:	2c00      	cmp	r4, #0
   179c2:	d0f9      	beq.n	179b8 <LoRaMacMcpsRequest+0x148>
        LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
   179c4:	f8d8 0500 	ldr.w	r0, [r8, #1280]	; 0x500
    if( startTimeInMs != 0 )
   179c8:	b138      	cbz	r0, 179da <LoRaMacMcpsRequest+0x16a>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
   179ca:	f014 f95e 	bl	2bc8a <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
   179ce:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
            Nvm.MacGroup1.SrvAckRequested = false;
   179d2:	bf84      	itt	hi
   179d4:	2300      	movhi	r3, #0
   179d6:	f885 304a 	strbhi.w	r3, [r5, #74]	; 0x4a
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
   179da:	4652      	mov	r2, sl
   179dc:	4649      	mov	r1, r9
   179de:	9b01      	ldr	r3, [sp, #4]
   179e0:	a802      	add	r0, sp, #8
   179e2:	f7fd fded 	bl	155c0 <Send>
        if( status == LORAMAC_STATUS_OK )
   179e6:	4602      	mov	r2, r0
   179e8:	b940      	cbnz	r0, 179fc <LoRaMacMcpsRequest+0x18c>
            MacCtx.MacFlags.Bits.McpsReq = 1;
   179ea:	f898 348d 	ldrb.w	r3, [r8, #1165]	; 0x48d
            MacCtx.McpsConfirm.McpsRequest = request.Type;
   179ee:	f888 6444 	strb.w	r6, [r8, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
   179f2:	f043 0301 	orr.w	r3, r3, #1
   179f6:	f888 348d 	strb.w	r3, [r8, #1165]	; 0x48d
   179fa:	e7dd      	b.n	179b8 <LoRaMacMcpsRequest+0x148>
            MacCtx.NodeAckRequested = false;
   179fc:	2300      	movs	r3, #0
   179fe:	f888 341a 	strb.w	r3, [r8, #1050]	; 0x41a
   17a02:	e7d9      	b.n	179b8 <LoRaMacMcpsRequest+0x148>
        return LORAMAC_STATUS_BUSY;
   17a04:	2201      	movs	r2, #1
   17a06:	e739      	b.n	1787c <LoRaMacMcpsRequest+0xc>
   17a08:	20030490 	.word	0x20030490
   17a0c:	2003004c 	.word	0x2003004c
   17a10:	2002fbf0 	.word	0x2002fbf0

00017a14 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
   17a14:	2801      	cmp	r0, #1
   17a16:	d009      	beq.n	17a2c <IsSticky+0x18>
   17a18:	3805      	subs	r0, #5
   17a1a:	b2c3      	uxtb	r3, r0
   17a1c:	2b1b      	cmp	r3, #27
   17a1e:	d804      	bhi.n	17a2a <IsSticky+0x16>
   17a20:	4803      	ldr	r0, [pc, #12]	; (17a30 <IsSticky+0x1c>)
   17a22:	40d8      	lsrs	r0, r3
   17a24:	f000 0001 	and.w	r0, r0, #1
   17a28:	4770      	bx	lr
   17a2a:	2000      	movs	r0, #0
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
            return true;
        default:
            return false;
    }
}
   17a2c:	4770      	bx	lr
   17a2e:	bf00      	nop
   17a30:	08001079 	.word	0x08001079

00017a34 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
   17a34:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
   17a36:	4c05      	ldr	r4, [pc, #20]	; (17a4c <LoRaMacCommandsInit+0x18>)
   17a38:	f44f 7203 	mov.w	r2, #524	; 0x20c
   17a3c:	4620      	mov	r0, r4
   17a3e:	2100      	movs	r1, #0
   17a40:	f014 f81b 	bl	2ba7a <memset1>
    list->First = NULL;
   17a44:	2000      	movs	r0, #0
    list->Last = NULL;
   17a46:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
   17a4a:	bd10      	pop	{r4, pc}
   17a4c:	200305d0 	.word	0x200305d0

00017a50 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
   17a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a54:	4680      	mov	r8, r0
   17a56:	4616      	mov	r6, r2
    if( payload == NULL )
   17a58:	b379      	cbz	r1, 17aba <LoRaMacCommandsAddCmd+0x6a>
   17a5a:	2320      	movs	r3, #32
   17a5c:	4c18      	ldr	r4, [pc, #96]	; (17ac0 <LoRaMacCommandsAddCmd+0x70>)
   17a5e:	4622      	mov	r2, r4
   17a60:	f104 0010 	add.w	r0, r4, #16
        if( mem[size] != 0x00 )
   17a64:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   17a68:	bb07      	cbnz	r7, 17aac <LoRaMacCommandsAddCmd+0x5c>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
   17a6a:	4282      	cmp	r2, r0
   17a6c:	d1fa      	bne.n	17a64 <LoRaMacCommandsAddCmd+0x14>
    if( list->First == NULL )
   17a6e:	4d15      	ldr	r5, [pc, #84]	; (17ac4 <LoRaMacCommandsAddCmd+0x74>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
   17a70:	3401      	adds	r4, #1
    if( list->First == NULL )
   17a72:	682b      	ldr	r3, [r5, #0]
   17a74:	b903      	cbnz	r3, 17a78 <LoRaMacCommandsAddCmd+0x28>
        list->First = element;
   17a76:	602c      	str	r4, [r5, #0]
    if( list->Last )
   17a78:	686b      	ldr	r3, [r5, #4]
   17a7a:	b103      	cbz	r3, 17a7e <LoRaMacCommandsAddCmd+0x2e>
        list->Last->Next = element;
   17a7c:	601c      	str	r4, [r3, #0]
    element->Next = NULL;
   17a7e:	2300      	movs	r3, #0
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17a80:	1d60      	adds	r0, r4, #5
    element->Next = NULL;
   17a82:	6023      	str	r3, [r4, #0]
    newCmd->PayloadSize = payloadSize;
   17a84:	60a6      	str	r6, [r4, #8]
    list->Last = element;
   17a86:	606c      	str	r4, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17a88:	b2b2      	uxth	r2, r6
    newCmd->CID = cid;
   17a8a:	f884 8004 	strb.w	r8, [r4, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17a8e:	f013 ffe0 	bl	2ba52 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
   17a92:	4640      	mov	r0, r8
   17a94:	f7ff ffbe 	bl	17a14 <IsSticky>
   17a98:	7320      	strb	r0, [r4, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
   17a9a:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
   17a9e:	3301      	adds	r3, #1
   17aa0:	4433      	add	r3, r6
   17aa2:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
}
   17aa6:	4638      	mov	r0, r7
   17aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
   17aac:	3b01      	subs	r3, #1
   17aae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   17ab2:	4604      	mov	r4, r0
   17ab4:	d1d3      	bne.n	17a5e <LoRaMacCommandsAddCmd+0xe>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
   17ab6:	2702      	movs	r7, #2
   17ab8:	e7f5      	b.n	17aa6 <LoRaMacCommandsAddCmd+0x56>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17aba:	2701      	movs	r7, #1
   17abc:	e7f3      	b.n	17aa6 <LoRaMacCommandsAddCmd+0x56>
   17abe:	bf00      	nop
   17ac0:	200305d7 	.word	0x200305d7
   17ac4:	200305d0 	.word	0x200305d0

00017ac8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
   17ac8:	b510      	push	{r4, lr}
    if( macCmd == NULL )
   17aca:	b320      	cbz	r0, 17b16 <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
   17acc:	4b14      	ldr	r3, [pc, #80]	; (17b20 <LoRaMacCommandsRemoveCmd+0x58>)
    if( list->Last == element )
   17ace:	e9d3 2100 	ldrd	r2, r1, [r3]
    if( element != curElement )
   17ad2:	4290      	cmp	r0, r2
   17ad4:	d115      	bne.n	17b02 <LoRaMacCommandsRemoveCmd+0x3a>
        list->First = element->Next;
   17ad6:	6802      	ldr	r2, [r0, #0]
    if( list->Last == element )
   17ad8:	4288      	cmp	r0, r1
        list->First = element->Next;
   17ada:	601a      	str	r2, [r3, #0]
    if( list->Last == element )
   17adc:	d101      	bne.n	17ae2 <LoRaMacCommandsRemoveCmd+0x1a>
        list->Last = PrevElement;
   17ade:	2200      	movs	r2, #0
   17ae0:	605a      	str	r2, [r3, #4]
    element->Next = NULL;
   17ae2:	2400      	movs	r4, #0
   17ae4:	6004      	str	r4, [r0, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
   17ae6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   17aea:	6881      	ldr	r1, [r0, #8]
   17aec:	3a01      	subs	r2, #1
   17aee:	1a52      	subs	r2, r2, r1
   17af0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
   17af4:	4621      	mov	r1, r4
   17af6:	2210      	movs	r2, #16
   17af8:	f013 ffbf 	bl	2ba7a <memset1>
    return true;
   17afc:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17afe:	bd10      	pop	{r4, pc}
   17b00:	4622      	mov	r2, r4
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
   17b02:	b152      	cbz	r2, 17b1a <LoRaMacCommandsRemoveCmd+0x52>
   17b04:	6814      	ldr	r4, [r2, #0]
   17b06:	42a0      	cmp	r0, r4
   17b08:	d1fa      	bne.n	17b00 <LoRaMacCommandsRemoveCmd+0x38>
    if( list->Last == element )
   17b0a:	4288      	cmp	r0, r1
   17b0c:	d100      	bne.n	17b10 <LoRaMacCommandsRemoveCmd+0x48>
        list->Last = PrevElement;
   17b0e:	605a      	str	r2, [r3, #4]
        PrevElement->Next = element->Next;
   17b10:	6801      	ldr	r1, [r0, #0]
   17b12:	6011      	str	r1, [r2, #0]
   17b14:	e7e5      	b.n	17ae2 <LoRaMacCommandsRemoveCmd+0x1a>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17b16:	2001      	movs	r0, #1
   17b18:	e7f1      	b.n	17afe <LoRaMacCommandsRemoveCmd+0x36>
    if( list->Last == element )
   17b1a:	4288      	cmp	r0, r1
   17b1c:	d0e0      	beq.n	17ae0 <LoRaMacCommandsRemoveCmd+0x18>
   17b1e:	e7e0      	b.n	17ae2 <LoRaMacCommandsRemoveCmd+0x1a>
   17b20:	200305d0 	.word	0x200305d0

00017b24 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17b24:	4b05      	ldr	r3, [pc, #20]	; (17b3c <LoRaMacCommandsGetCmd+0x18>)

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
    {
        curElement = curElement->Next;
   17b26:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
   17b28:	b113      	cbz	r3, 17b30 <LoRaMacCommandsGetCmd+0xc>
   17b2a:	791a      	ldrb	r2, [r3, #4]
   17b2c:	4282      	cmp	r2, r0
   17b2e:	d1fa      	bne.n	17b26 <LoRaMacCommandsGetCmd+0x2>
    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
   17b30:	2b00      	cmp	r3, #0
}
   17b32:	bf0c      	ite	eq
   17b34:	2003      	moveq	r0, #3
   17b36:	2000      	movne	r0, #0
    *macCmd = curElement;
   17b38:	600b      	str	r3, [r1, #0]
}
   17b3a:	4770      	bx	lr
   17b3c:	200305d0 	.word	0x200305d0

00017b40 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
   17b40:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17b42:	4b05      	ldr	r3, [pc, #20]	; (17b58 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>)
   17b44:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
   17b46:	b900      	cbnz	r0, 17b4a <LoRaMacCommandsRemoveNoneStickyCmds+0xa>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17b48:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
   17b4a:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
   17b4c:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
   17b4e:	b90b      	cbnz	r3, 17b54 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            LoRaMacCommandsRemoveCmd( curElement );
   17b50:	f7ff ffba 	bl	17ac8 <LoRaMacCommandsRemoveCmd>
{
   17b54:	4620      	mov	r0, r4
   17b56:	e7f6      	b.n	17b46 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
   17b58:	200305d0 	.word	0x200305d0

00017b5c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
   17b5c:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17b5e:	4b07      	ldr	r3, [pc, #28]	; (17b7c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>)
   17b60:	681a      	ldr	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
   17b62:	b90a      	cbnz	r2, 17b68 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17b64:	4610      	mov	r0, r2
   17b66:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
   17b68:	7910      	ldrb	r0, [r2, #4]
        nexElement = curElement->Next;
   17b6a:	6814      	ldr	r4, [r2, #0]
        if( IsSticky( curElement->CID ) == true )
   17b6c:	f7ff ff52 	bl	17a14 <IsSticky>
   17b70:	b110      	cbz	r0, 17b78 <LoRaMacCommandsRemoveStickyAnsCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
   17b72:	4610      	mov	r0, r2
   17b74:	f7ff ffa8 	bl	17ac8 <LoRaMacCommandsRemoveCmd>
{
   17b78:	4622      	mov	r2, r4
   17b7a:	e7f2      	b.n	17b62 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
   17b7c:	200305d0 	.word	0x200305d0

00017b80 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
   17b80:	b128      	cbz	r0, 17b8e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
   17b82:	4b04      	ldr	r3, [pc, #16]	; (17b94 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
   17b84:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   17b88:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
   17b8a:	2000      	movs	r0, #0
   17b8c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
   17b8e:	2001      	movs	r0, #1
}
   17b90:	4770      	bx	lr
   17b92:	bf00      	nop
   17b94:	200305d0 	.word	0x200305d0

00017b98 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
   17b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b9c:	4607      	mov	r7, r0
   17b9e:	460e      	mov	r6, r1
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
   17ba0:	4615      	mov	r5, r2
   17ba2:	b342      	cbz	r2, 17bf6 <LoRaMacCommandsSerializeCmds+0x5e>
   17ba4:	b339      	cbz	r1, 17bf6 <LoRaMacCommandsSerializeCmds+0x5e>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
   17ba6:	4b15      	ldr	r3, [pc, #84]	; (17bfc <LoRaMacCommandsSerializeCmds+0x64>)
   17ba8:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
   17baa:	2300      	movs	r3, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
   17bac:	b92c      	cbnz	r4, 17bba <LoRaMacCommandsSerializeCmds+0x22>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
   17bae:	4630      	mov	r0, r6
   17bb0:	f7ff ffe6 	bl	17b80 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
   17bb4:	2000      	movs	r0, #0
}
   17bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
   17bba:	68a2      	ldr	r2, [r4, #8]
   17bbc:	1af9      	subs	r1, r7, r3
   17bbe:	3201      	adds	r2, #1
   17bc0:	4291      	cmp	r1, r2
   17bc2:	d315      	bcc.n	17bf0 <LoRaMacCommandsSerializeCmds+0x58>
            buffer[itr++] = curElement->CID;
   17bc4:	7922      	ldrb	r2, [r4, #4]
   17bc6:	1c58      	adds	r0, r3, #1
   17bc8:	54ea      	strb	r2, [r5, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
   17bca:	8922      	ldrh	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
   17bcc:	fa5f f880 	uxtb.w	r8, r0
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
   17bd0:	1d61      	adds	r1, r4, #5
   17bd2:	fa55 f080 	uxtab	r0, r5, r0
   17bd6:	f013 ff3c 	bl	2ba52 <memcpy1>
            itr += curElement->PayloadSize;
   17bda:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
   17bdc:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
   17bde:	4498      	add	r8, r3
   17be0:	fa5f f388 	uxtb.w	r3, r8
        curElement = curElement->Next;
   17be4:	e7e2      	b.n	17bac <LoRaMacCommandsSerializeCmds+0x14>
        nextElement = curElement->Next;
   17be6:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
   17be8:	4620      	mov	r0, r4
   17bea:	f7ff ff6d 	bl	17ac8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
   17bee:	462c      	mov	r4, r5
    while( curElement != NULL )
   17bf0:	2c00      	cmp	r4, #0
   17bf2:	d1f8      	bne.n	17be6 <LoRaMacCommandsSerializeCmds+0x4e>
   17bf4:	e7db      	b.n	17bae <LoRaMacCommandsSerializeCmds+0x16>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17bf6:	2001      	movs	r0, #1
   17bf8:	e7dd      	b.n	17bb6 <LoRaMacCommandsSerializeCmds+0x1e>
   17bfa:	bf00      	nop
   17bfc:	200305d0 	.word	0x200305d0

00017c00 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
   17c00:	3801      	subs	r0, #1
   17c02:	b2c0      	uxtb	r0, r0
   17c04:	281f      	cmp	r0, #31
   17c06:	bf9a      	itte	ls
   17c08:	4b01      	ldrls	r3, [pc, #4]	; (17c10 <LoRaMacCommandsGetCmdSize+0x10>)
   17c0a:	5c18      	ldrbls	r0, [r3, r0]
{
   17c0c:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
   17c0e:	4770      	bx	lr
   17c10:	0003649c 	.word	0x0003649c

00017c14 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17c14:	b530      	push	{r4, r5, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17c16:	4b0b      	ldr	r3, [pc, #44]	; (17c44 <GetElement.constprop.0+0x30>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17c18:	4604      	mov	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17c1a:	f893 2020 	ldrb.w	r2, [r3, #32]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17c1e:	4608      	mov	r0, r1
    if( count == 0 )
   17c20:	b172      	cbz	r2, 17c40 <GetElement.constprop.0+0x2c>
   17c22:	2100      	movs	r1, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17c24:	331c      	adds	r3, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
   17c26:	7805      	ldrb	r5, [r0, #0]
   17c28:	42a5      	cmp	r5, r4
   17c2a:	d008      	beq.n	17c3e <GetElement.constprop.0+0x2a>
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17c2c:	3101      	adds	r1, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17c2e:	4298      	cmp	r0, r3
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17c30:	b2cd      	uxtb	r5, r1
        bufferPointer++;
   17c32:	bf14      	ite	ne
   17c34:	3004      	addne	r0, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17c36:	3810      	subeq	r0, #16
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17c38:	42aa      	cmp	r2, r5
   17c3a:	d8f4      	bhi.n	17c26 <GetElement.constprop.0+0x12>
        return NULL;
   17c3c:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
   17c3e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   17c40:	4610      	mov	r0, r2
   17c42:	e7fc      	b.n	17c3e <GetElement.constprop.0+0x2a>
   17c44:	200307dc 	.word	0x200307dc

00017c48 <LoRaMacConfirmQueueInit>:
void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
    ConfirmQueueCtx.Primitives = primitives;

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
   17c48:	2300      	movs	r3, #0
{
   17c4a:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
   17c4c:	4c07      	ldr	r4, [pc, #28]	; (17c6c <LoRaMacConfirmQueueInit+0x24>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17c4e:	2214      	movs	r2, #20
    ConfirmQueueCtx.Primitives = primitives;
   17c50:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17c52:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17c54:	f104 000c 	add.w	r0, r4, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
   17c58:	f884 3020 	strb.w	r3, [r4, #32]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17c5c:	e9c4 0001 	strd	r0, r0, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17c60:	f013 ff0b 	bl	2ba7a <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
   17c64:	2301      	movs	r3, #1
   17c66:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
   17c6a:	bd10      	pop	{r4, pc}
   17c6c:	200307dc 	.word	0x200307dc

00017c70 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17c70:	4b11      	ldr	r3, [pc, #68]	; (17cb8 <LoRaMacConfirmQueueAdd+0x48>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
   17c72:	f893 2020 	ldrb.w	r2, [r3, #32]
   17c76:	2a04      	cmp	r2, #4
   17c78:	d81b      	bhi.n	17cb2 <LoRaMacConfirmQueueAdd+0x42>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
   17c7a:	7801      	ldrb	r1, [r0, #0]
   17c7c:	689a      	ldr	r2, [r3, #8]
   17c7e:	7011      	strb	r1, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
   17c80:	7841      	ldrb	r1, [r0, #1]
   17c82:	689a      	ldr	r2, [r3, #8]
   17c84:	7051      	strb	r1, [r2, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
   17c86:	78c1      	ldrb	r1, [r0, #3]
   17c88:	689a      	ldr	r2, [r3, #8]
   17c8a:	70d1      	strb	r1, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
   17c8c:	7881      	ldrb	r1, [r0, #2]
   17c8e:	689a      	ldr	r2, [r3, #8]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17c90:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
   17c92:	7091      	strb	r1, [r2, #2]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
   17c94:	f893 2020 	ldrb.w	r2, [r3, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17c98:	f103 011c 	add.w	r1, r3, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
   17c9c:	3201      	adds	r2, #1
   17c9e:	f883 2020 	strb.w	r2, [r3, #32]
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17ca2:	689a      	ldr	r2, [r3, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17ca4:	428a      	cmp	r2, r1
        bufferPointer++;
   17ca6:	bf14      	ite	ne
   17ca8:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17caa:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17cae:	609a      	str	r2, [r3, #8]

    return true;
   17cb0:	4770      	bx	lr
        return false;
   17cb2:	2000      	movs	r0, #0
}
   17cb4:	4770      	bx	lr
   17cb6:	bf00      	nop
   17cb8:	200307dc 	.word	0x200307dc

00017cbc <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17cbc:	4b08      	ldr	r3, [pc, #32]	; (17ce0 <LoRaMacConfirmQueueRemoveFirst+0x24>)
   17cbe:	f893 0020 	ldrb.w	r0, [r3, #32]
    if( count == 0 )
   17cc2:	b160      	cbz	r0, 17cde <LoRaMacConfirmQueueRemoveFirst+0x22>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
   17cc4:	3801      	subs	r0, #1
   17cc6:	f883 0020 	strb.w	r0, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );

    return true;
   17cca:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
   17ccc:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17cce:	f103 011c 	add.w	r1, r3, #28
   17cd2:	428a      	cmp	r2, r1
        bufferPointer++;
   17cd4:	bf14      	ite	ne
   17cd6:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17cd8:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
   17cdc:	605a      	str	r2, [r3, #4]
}
   17cde:	4770      	bx	lr
   17ce0:	200307dc 	.word	0x200307dc

00017ce4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
   17ce4:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
   17ce6:	4b07      	ldr	r3, [pc, #28]	; (17d04 <LoRaMacConfirmQueueSetStatus+0x20>)
{
   17ce8:	4604      	mov	r4, r0
    if( count == 0 )
   17cea:	f893 2020 	ldrb.w	r2, [r3, #32]
{
   17cee:	4608      	mov	r0, r1
    if( count == 0 )
   17cf0:	b132      	cbz	r2, 17d00 <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
   17cf2:	6859      	ldr	r1, [r3, #4]
   17cf4:	f7ff ff8e 	bl	17c14 <GetElement.constprop.0>
        if( element != NULL )
   17cf8:	b110      	cbz	r0, 17d00 <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
   17cfa:	2301      	movs	r3, #1
            element->Status = status;
   17cfc:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
   17cfe:	7083      	strb	r3, [r0, #2]
        }
    }
}
   17d00:	bd10      	pop	{r4, pc}
   17d02:	bf00      	nop
   17d04:	200307dc 	.word	0x200307dc

00017d08 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
   17d08:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
   17d0a:	4b06      	ldr	r3, [pc, #24]	; (17d24 <LoRaMacConfirmQueueGetStatus+0x1c>)
    if( count == 0 )
   17d0c:	f893 2020 	ldrb.w	r2, [r3, #32]
   17d10:	b12a      	cbz	r2, 17d1e <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
   17d12:	6859      	ldr	r1, [r3, #4]
   17d14:	f7ff ff7e 	bl	17c14 <GetElement.constprop.0>
        if( element != NULL )
   17d18:	b108      	cbz	r0, 17d1e <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
   17d1a:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
   17d1c:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
   17d1e:	2001      	movs	r0, #1
   17d20:	e7fc      	b.n	17d1c <LoRaMacConfirmQueueGetStatus+0x14>
   17d22:	bf00      	nop
   17d24:	200307dc 	.word	0x200307dc

00017d28 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
   17d28:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
   17d2a:	4a0b      	ldr	r2, [pc, #44]	; (17d58 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
    if( count == 0 )
   17d2c:	f892 1020 	ldrb.w	r1, [r2, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
   17d30:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
   17d32:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
    if( count == 0 )
   17d36:	b169      	cbz	r1, 17d54 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
   17d38:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17d3a:	f102 041c 	add.w	r4, r2, #28
            if( element->RestrictCommonReadyToHandle == false )
   17d3e:	78d9      	ldrb	r1, [r3, #3]
            element->Status = status;
   17d40:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
   17d42:	b901      	cbnz	r1, 17d46 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
   17d44:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17d46:	42a3      	cmp	r3, r4
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
   17d48:	6891      	ldr	r1, [r2, #8]
        bufferPointer++;
   17d4a:	bf14      	ite	ne
   17d4c:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17d4e:	3b10      	subeq	r3, #16
        }while( element != ConfirmQueueCtx.BufferEnd );
   17d50:	4299      	cmp	r1, r3
   17d52:	d1f4      	bne.n	17d3e <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
   17d54:	bd30      	pop	{r4, r5, pc}
   17d56:	bf00      	nop
   17d58:	200307dc 	.word	0x200307dc

00017d5c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
   17d5c:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
   17d5e:	4b04      	ldr	r3, [pc, #16]	; (17d70 <LoRaMacConfirmQueueIsCmdActive+0x14>)
   17d60:	6859      	ldr	r1, [r3, #4]
   17d62:	f7ff ff57 	bl	17c14 <GetElement.constprop.0>
    {
        return true;
    }
    return false;
}
   17d66:	3800      	subs	r0, #0
   17d68:	bf18      	it	ne
   17d6a:	2001      	movne	r0, #1
   17d6c:	bd08      	pop	{r3, pc}
   17d6e:	bf00      	nop
   17d70:	200307dc 	.word	0x200307dc

00017d74 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
   17d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17d76:	4604      	mov	r4, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
   17d78:	2600      	movs	r6, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
   17d7a:	4d14      	ldr	r5, [pc, #80]	; (17dcc <LoRaMacConfirmQueueHandleCb+0x58>)
   17d7c:	f895 7020 	ldrb.w	r7, [r5, #32]
    for( uint8_t i = 0; i < nbElements; i++ )
   17d80:	b2f3      	uxtb	r3, r6
   17d82:	429f      	cmp	r7, r3
   17d84:	d801      	bhi.n	17d8a <LoRaMacConfirmQueueHandleCb+0x16>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
   17d86:	b003      	add	sp, #12
   17d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
   17d8a:	686b      	ldr	r3, [r5, #4]
   17d8c:	781b      	ldrb	r3, [r3, #0]
   17d8e:	7023      	strb	r3, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
   17d90:	686b      	ldr	r3, [r5, #4]
   17d92:	785b      	ldrb	r3, [r3, #1]
   17d94:	7063      	strb	r3, [r4, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
   17d96:	686b      	ldr	r3, [r5, #4]
        if( readyToHandle == true )
   17d98:	789a      	ldrb	r2, [r3, #2]
   17d9a:	b13a      	cbz	r2, 17dac <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
   17d9c:	682b      	ldr	r3, [r5, #0]
   17d9e:	4620      	mov	r0, r4
   17da0:	689b      	ldr	r3, [r3, #8]
   17da2:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
   17da4:	f7ff ff8a 	bl	17cbc <LoRaMacConfirmQueueRemoveFirst>
    for( uint8_t i = 0; i < nbElements; i++ )
   17da8:	3601      	adds	r6, #1
   17daa:	e7e9      	b.n	17d80 <LoRaMacConfirmQueueHandleCb+0xc>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
   17dac:	781a      	ldrb	r2, [r3, #0]
   17dae:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
   17db2:	785a      	ldrb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
   17db4:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
   17db6:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
   17dba:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacConfirmQueueRemoveFirst( );
   17dbe:	f7ff ff7d 	bl	17cbc <LoRaMacConfirmQueueRemoveFirst>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
   17dc2:	a801      	add	r0, sp, #4
   17dc4:	f7ff ff54 	bl	17c70 <LoRaMacConfirmQueueAdd>
   17dc8:	e7ee      	b.n	17da8 <LoRaMacConfirmQueueHandleCb+0x34>
   17dca:	bf00      	nop
   17dcc:	200307dc 	.word	0x200307dc

00017dd0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
   17dd0:	4b01      	ldr	r3, [pc, #4]	; (17dd8 <LoRaMacConfirmQueueGetCnt+0x8>)
   17dd2:	f893 0020 	ldrb.w	r0, [r3, #32]
   17dd6:	4770      	bx	lr
   17dd8:	200307dc 	.word	0x200307dc

00017ddc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17ddc:	4b03      	ldr	r3, [pc, #12]	; (17dec <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
   17dde:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
   17de2:	2804      	cmp	r0, #4
   17de4:	bf94      	ite	ls
   17de6:	2000      	movls	r0, #0
   17de8:	2001      	movhi	r0, #1
   17dea:	4770      	bx	lr
   17dec:	200307dc 	.word	0x200307dc

00017df0 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
   17df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    uint8_t bufferIndex = 0;
    uint8_t sBlock[16] = { 0 };
   17df2:	2400      	movs	r4, #0
    uint8_t aBlock[16] = { 0 };

    aBlock[0] = 0x01;
   17df4:	f04f 0c01 	mov.w	ip, #1
{
   17df8:	b089      	sub	sp, #36	; 0x24
   17dfa:	4606      	mov	r6, r0
   17dfc:	e9dd 570e 	ldrd	r5, r7, [sp, #56]	; 0x38

    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   17e00:	4828      	ldr	r0, [pc, #160]	; (17ea4 <FOptsEncrypt+0xb4>)
    uint8_t aBlock[16] = { 0 };
   17e02:	e9cd 4404 	strd	r4, r4, [sp, #16]
    uint8_t sBlock[16] = { 0 };
   17e06:	e9cd 4400 	strd	r4, r4, [sp]
   17e0a:	e9cd 4402 	strd	r4, r4, [sp, #8]
    uint8_t aBlock[16] = { 0 };
   17e0e:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   17e12:	6800      	ldr	r0, [r0, #0]
    aBlock[0] = 0x01;
   17e14:	f88d c010 	strb.w	ip, [sp, #16]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   17e18:	4c23      	ldr	r4, [pc, #140]	; (17ea8 <FOptsEncrypt+0xb8>)
   17e1a:	f8d0 e000 	ldr.w	lr, [r0]
   17e1e:	45a6      	cmp	lr, r4
   17e20:	d908      	bls.n	17e34 <FOptsEncrypt+0x44>
    {
        // Introduced in LoRaWAN 1.1.1 specification
        switch( fCntID )
   17e22:	4563      	cmp	r3, ip
   17e24:	d904      	bls.n	17e30 <FOptsEncrypt+0x40>
   17e26:	2b02      	cmp	r3, #2
   17e28:	d020      	beq.n	17e6c <FOptsEncrypt+0x7c>
   17e2a:	2008      	movs	r0, #8
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   17e2c:	b009      	add	sp, #36	; 0x24
   17e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                aBlock[4] = 0x01;
   17e30:	f88d c014 	strb.w	ip, [sp, #20]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   17e34:	0c0b      	lsrs	r3, r1, #16
    aBlock[6] = address & 0xFF;
   17e36:	f8ad 1016 	strh.w	r1, [sp, #22]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   17e3a:	f88d 3018 	strb.w	r3, [sp, #24]
    aBlock[10] = frameCounter & 0xFF;
   17e3e:	f8ad 501a 	strh.w	r5, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   17e42:	0c2b      	lsrs	r3, r5, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
   17e44:	0e09      	lsrs	r1, r1, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   17e46:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   17e48:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[5] = dir;
   17e4c:	f88d 2015 	strb.w	r2, [sp, #21]
    aBlock[9] = ( address >> 24 ) & 0xFF;
   17e50:	f88d 1019 	strb.w	r1, [sp, #25]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   17e54:	f88d 501d 	strb.w	r5, [sp, #29]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   17e58:	4b13      	ldr	r3, [pc, #76]	; (17ea8 <FOptsEncrypt+0xb8>)
   17e5a:	6802      	ldr	r2, [r0, #0]
   17e5c:	429a      	cmp	r2, r3
        aBlock[15] = 0x01;
   17e5e:	bf84      	itt	hi
   17e60:	2301      	movhi	r3, #1
   17e62:	f88d 301f 	strbhi.w	r3, [sp, #31]
    if( size > 0 )
   17e66:	b926      	cbnz	r6, 17e72 <FOptsEncrypt+0x82>
    return LORAMAC_CRYPTO_SUCCESS;
   17e68:	2000      	movs	r0, #0
   17e6a:	e7df      	b.n	17e2c <FOptsEncrypt+0x3c>
                aBlock[4] = 0x02;
   17e6c:	f88d 3014 	strb.w	r3, [sp, #20]
                break;
   17e70:	e7e0      	b.n	17e34 <FOptsEncrypt+0x44>
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
   17e72:	2110      	movs	r1, #16
   17e74:	466b      	mov	r3, sp
   17e76:	2206      	movs	r2, #6
   17e78:	eb0d 0001 	add.w	r0, sp, r1
   17e7c:	f7fc fd34 	bl	148e8 <SecureElementAesEncrypt>
   17e80:	b968      	cbnz	r0, 17e9e <FOptsEncrypt+0xae>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   17e82:	f100 0320 	add.w	r3, r0, #32
   17e86:	eb0d 0203 	add.w	r2, sp, r3
   17e8a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
   17e8e:	5c3b      	ldrb	r3, [r7, r0]
   17e90:	4053      	eors	r3, r2
   17e92:	543b      	strb	r3, [r7, r0]
        for( uint8_t i = 0; i < size; i++ )
   17e94:	3001      	adds	r0, #1
   17e96:	b2c0      	uxtb	r0, r0
   17e98:	42b0      	cmp	r0, r6
   17e9a:	d3f2      	bcc.n	17e82 <FOptsEncrypt+0x92>
   17e9c:	e7e4      	b.n	17e68 <FOptsEncrypt+0x78>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   17e9e:	200e      	movs	r0, #14
   17ea0:	e7c4      	b.n	17e2c <FOptsEncrypt+0x3c>
   17ea2:	bf00      	nop
   17ea4:	20030800 	.word	0x20030800
   17ea8:	01010000 	.word	0x01010000

00017eac <GetLastFcntDown.constprop.0>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
   17eac:	3801      	subs	r0, #1
   17eae:	2806      	cmp	r0, #6
   17eb0:	d825      	bhi.n	17efe <GetLastFcntDown.constprop.0+0x52>
   17eb2:	e8df f000 	tbb	[pc, r0]
   17eb6:	0b04      	.short	0x0b04
   17eb8:	1c18130f 	.word	0x1c18130f
   17ebc:	20          	.byte	0x20
   17ebd:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
   17ebe:	4b11      	ldr	r3, [pc, #68]	; (17f04 <GetLastFcntDown.constprop.0+0x58>)
   17ec0:	681b      	ldr	r3, [r3, #0]
   17ec2:	691a      	ldr	r2, [r3, #16]
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
            break;
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
   17ec4:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
   17ec6:	631a      	str	r2, [r3, #48]	; 0x30
            break;
#endif
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
   17ec8:	2000      	movs	r0, #0
   17eca:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
   17ecc:	4b0d      	ldr	r3, [pc, #52]	; (17f04 <GetLastFcntDown.constprop.0+0x58>)
   17ece:	681b      	ldr	r3, [r3, #0]
   17ed0:	695a      	ldr	r2, [r3, #20]
   17ed2:	e7f7      	b.n	17ec4 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.FCntDown;
   17ed4:	4b0b      	ldr	r3, [pc, #44]	; (17f04 <GetLastFcntDown.constprop.0+0x58>)
   17ed6:	681b      	ldr	r3, [r3, #0]
   17ed8:	699a      	ldr	r2, [r3, #24]
   17eda:	e7f3      	b.n	17ec4 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
   17edc:	4b09      	ldr	r3, [pc, #36]	; (17f04 <GetLastFcntDown.constprop.0+0x58>)
   17ede:	681b      	ldr	r3, [r3, #0]
   17ee0:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
   17ee2:	600b      	str	r3, [r1, #0]
            break;
   17ee4:	e7f0      	b.n	17ec8 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
   17ee6:	4b07      	ldr	r3, [pc, #28]	; (17f04 <GetLastFcntDown.constprop.0+0x58>)
   17ee8:	681b      	ldr	r3, [r3, #0]
   17eea:	6a1b      	ldr	r3, [r3, #32]
   17eec:	e7f9      	b.n	17ee2 <GetLastFcntDown.constprop.0+0x36>
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
   17eee:	4b05      	ldr	r3, [pc, #20]	; (17f04 <GetLastFcntDown.constprop.0+0x58>)
   17ef0:	681b      	ldr	r3, [r3, #0]
   17ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17ef4:	e7f5      	b.n	17ee2 <GetLastFcntDown.constprop.0+0x36>
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
   17ef6:	4b03      	ldr	r3, [pc, #12]	; (17f04 <GetLastFcntDown.constprop.0+0x58>)
   17ef8:	681b      	ldr	r3, [r3, #0]
   17efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17efc:	e7f1      	b.n	17ee2 <GetLastFcntDown.constprop.0+0x36>
    switch( fCntID )
   17efe:	2005      	movs	r0, #5
}
   17f00:	4770      	bx	lr
   17f02:	bf00      	nop
   17f04:	20030800 	.word	0x20030800

00017f08 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
   17f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17f0c:	b0c5      	sub	sp, #276	; 0x114
   17f0e:	460c      	mov	r4, r1
   17f10:	e9dd 864c 	ldrd	r8, r6, [sp, #304]	; 0x130
   17f14:	4617      	mov	r7, r2
   17f16:	461d      	mov	r5, r3
    if( msg == 0 )
   17f18:	4681      	mov	r9, r0
   17f1a:	2800      	cmp	r0, #0
   17f1c:	d04b      	beq.n	17fb6 <VerifyCmacB0.constprop.0+0xae>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   17f1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   17f22:	d84a      	bhi.n	17fba <VerifyCmacB0.constprop.0+0xb2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
   17f24:	f44f 7288 	mov.w	r2, #272	; 0x110
   17f28:	2100      	movs	r1, #0
   17f2a:	4668      	mov	r0, sp
   17f2c:	f013 fda5 	bl	2ba7a <memset1>
    b0[0] = 0x49;
   17f30:	2349      	movs	r3, #73	; 0x49
   17f32:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
   17f36:	2d00      	cmp	r5, #0
   17f38:	d03a      	beq.n	17fb0 <VerifyCmacB0.constprop.0+0xa8>
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
   17f3a:	4b21      	ldr	r3, [pc, #132]	; (17fc0 <VerifyCmacB0.constprop.0+0xb8>)
   17f3c:	681b      	ldr	r3, [r3, #0]
   17f3e:	68da      	ldr	r2, [r3, #12]
        b0[1] = confFCnt & 0xFF;
   17f40:	b2d3      	uxtb	r3, r2
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
   17f42:	f3c2 2207 	ubfx	r2, r2, #8, #8
   17f46:	f88d 2002 	strb.w	r2, [sp, #2]
    b0[4] = 0x00;
   17f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
        b0[1] = confFCnt & 0xFF;
   17f4e:	f88d 3001 	strb.w	r3, [sp, #1]
    b0[3] = 0x00;
   17f52:	2300      	movs	r3, #0
    b0[4] = 0x00;
   17f54:	f8ad 2004 	strh.w	r2, [sp, #4]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   17f58:	ea4f 4218 	mov.w	r2, r8, lsr #16
   17f5c:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   17f60:	0c32      	lsrs	r2, r6, #16
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   17f62:	4649      	mov	r1, r9
    b0[6] = devAddr & 0xFF;
   17f64:	f8ad 8006 	strh.w	r8, [sp, #6]
    b0[10] = fCnt & 0xFF;
   17f68:	f8ad 600a 	strh.w	r6, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   17f6c:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   17f70:	a804      	add	r0, sp, #16
   17f72:	4622      	mov	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   17f74:	ea4f 6818 	mov.w	r8, r8, lsr #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   17f78:	0e36      	lsrs	r6, r6, #24
    b0[3] = 0x00;
   17f7a:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[14] = 0x00;
   17f7e:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   17f82:	f88d 8009 	strb.w	r8, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   17f86:	f88d 600d 	strb.w	r6, [sp, #13]
    b0[15] = msgLen & 0xFF;
   17f8a:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   17f8e:	f013 fd60 	bl	2ba52 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
   17f92:	f104 0110 	add.w	r1, r4, #16
   17f96:	463b      	mov	r3, r7
   17f98:	4668      	mov	r0, sp
   17f9a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   17f9c:	b289      	uxth	r1, r1
   17f9e:	f014 f8d0 	bl	2c142 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
   17fa2:	b110      	cbz	r0, 17faa <VerifyCmacB0.constprop.0+0xa2>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   17fa4:	2801      	cmp	r0, #1
   17fa6:	bf18      	it	ne
   17fa8:	200e      	movne	r0, #14
}
   17faa:	b045      	add	sp, #276	; 0x114
   17fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17fb0:	462b      	mov	r3, r5
   17fb2:	462a      	mov	r2, r5
   17fb4:	e7c7      	b.n	17f46 <VerifyCmacB0.constprop.0+0x3e>
        return LORAMAC_CRYPTO_ERROR_NPE;
   17fb6:	2009      	movs	r0, #9
   17fb8:	e7f7      	b.n	17faa <VerifyCmacB0.constprop.0+0xa2>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   17fba:	200d      	movs	r0, #13
   17fbc:	e7f5      	b.n	17faa <VerifyCmacB0.constprop.0+0xa2>
   17fbe:	bf00      	nop
   17fc0:	20030800 	.word	0x20030800

00017fc4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
   17fc4:	b510      	push	{r4, lr}
    if( nvm == NULL )
   17fc6:	b1a8      	cbz	r0, 17ff4 <LoRaMacCryptoInit+0x30>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
   17fc8:	4c0b      	ldr	r4, [pc, #44]	; (17ff8 <LoRaMacCryptoInit+0x34>)

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
   17fca:	2238      	movs	r2, #56	; 0x38
   17fcc:	2100      	movs	r1, #0
    CryptoNvm = nvm;
   17fce:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
   17fd0:	f013 fd53 	bl	2ba7a <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
   17fd4:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
   17fd6:	4a09      	ldr	r2, [pc, #36]	; (17ffc <LoRaMacCryptoInit+0x38>)
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
   17fd8:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
   17fda:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
   17fdc:	f04f 32ff 	mov.w	r2, #4294967295
   17fe0:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   17fe4:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
   17fe8:	e9c3 2207 	strd	r2, r2, [r3, #28]
   17fec:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
   17ff0:	631a      	str	r2, [r3, #48]	; 0x30

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
   17ff2:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
   17ff4:	2008      	movs	r0, #8
   17ff6:	e7fc      	b.n	17ff2 <LoRaMacCryptoInit+0x2e>
   17ff8:	20030800 	.word	0x20030800
   17ffc:	01010100 	.word	0x01010100

00018000 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
   18000:	4b02      	ldr	r3, [pc, #8]	; (1800c <LoRaMacCryptoSetLrWanVersion+0xc>)
   18002:	681b      	ldr	r3, [r3, #0]
   18004:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
   18006:	2000      	movs	r0, #0
   18008:	4770      	bx	lr
   1800a:	bf00      	nop
   1800c:	20030800 	.word	0x20030800

00018010 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
   18010:	b130      	cbz	r0, 18020 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
   18012:	4b04      	ldr	r3, [pc, #16]	; (18024 <LoRaMacCryptoGetFCntUp+0x14>)
   18014:	681b      	ldr	r3, [r3, #0]
   18016:	68db      	ldr	r3, [r3, #12]
   18018:	3301      	adds	r3, #1
   1801a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
   1801c:	2000      	movs	r0, #0
   1801e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
   18020:	2009      	movs	r0, #9
}
   18022:	4770      	bx	lr
   18024:	20030800 	.word	0x20030800

00018028 <LoRaMacCryptoGetRJcount>:
}

LoRaMacCryptoStatus_t LoRaMacCryptoGetRJcount( FCntIdentifier_t fCntID, uint16_t* rJcount )
{
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( rJcount == 0 )
   18028:	b181      	cbz	r1, 1804c <LoRaMacCryptoGetRJcount+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
   1802a:	2808      	cmp	r0, #8
   1802c:	d003      	beq.n	18036 <LoRaMacCryptoGetRJcount+0xe>
   1802e:	2809      	cmp	r0, #9
   18030:	d008      	beq.n	18044 <LoRaMacCryptoGetRJcount+0x1c>
   18032:	2005      	movs	r0, #5
   18034:	4770      	bx	lr
    {
        case RJ_COUNT_0:
            *rJcount = RJcount0 + 1;
   18036:	4b06      	ldr	r3, [pc, #24]	; (18050 <LoRaMacCryptoGetRJcount+0x28>)
   18038:	881b      	ldrh	r3, [r3, #0]
   1803a:	3301      	adds	r3, #1
   1803c:	b29b      	uxth	r3, r3
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
   1803e:	2000      	movs	r0, #0
            *rJcount = RJcount0 + 1;
   18040:	800b      	strh	r3, [r1, #0]
   18042:	4770      	bx	lr
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
   18044:	4b03      	ldr	r3, [pc, #12]	; (18054 <LoRaMacCryptoGetRJcount+0x2c>)
   18046:	681b      	ldr	r3, [r3, #0]
   18048:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1804a:	e7f6      	b.n	1803a <LoRaMacCryptoGetRJcount+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
   1804c:	2009      	movs	r0, #9
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   1804e:	4770      	bx	lr
   18050:	20030e16 	.word	0x20030e16
   18054:	20030800 	.word	0x20030800

00018058 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
   18058:	b180      	cbz	r0, 1807c <LoRaMacCryptoSetMulticastReference+0x24>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
   1805a:	4b09      	ldr	r3, [pc, #36]	; (18080 <LoRaMacCryptoSetMulticastReference+0x28>)
   1805c:	681b      	ldr	r3, [r3, #0]
   1805e:	f103 021c 	add.w	r2, r3, #28
   18062:	6242      	str	r2, [r0, #36]	; 0x24
   18064:	f103 0220 	add.w	r2, r3, #32
   18068:	6542      	str	r2, [r0, #84]	; 0x54
   1806a:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1806e:	3328      	adds	r3, #40	; 0x28
   18070:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   18074:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    }

    return LORAMAC_CRYPTO_SUCCESS;
   18078:	2000      	movs	r0, #0
   1807a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
   1807c:	2009      	movs	r0, #9
}
   1807e:	4770      	bx	lr
   18080:	20030800 	.word	0x20030800

00018084 <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
   18084:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
   18086:	4604      	mov	r4, r0
{
   18088:	b087      	sub	sp, #28
    if( macMsg == 0 )
   1808a:	2800      	cmp	r0, #0
   1808c:	d047      	beq.n	1811e <LoRaMacCryptoPrepareJoinRequest+0x9a>
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
   1808e:	4b27      	ldr	r3, [pc, #156]	; (1812c <LoRaMacCryptoPrepareJoinRequest+0xa8>)
#endif
    macMsg->DevNonce = CryptoNvm->DevNonce;

#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    // Derive lifetime session keys
    if( DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI ) != LORAMAC_CRYPTO_SUCCESS )
   18090:	f100 050e 	add.w	r5, r0, #14
    CryptoNvm->DevNonce++;
   18094:	681a      	ldr	r2, [r3, #0]
    memcpyr( compBase + 1, devEUI, 8 );
   18096:	4629      	mov	r1, r5
    CryptoNvm->DevNonce++;
   18098:	8893      	ldrh	r3, [r2, #4]
   1809a:	3301      	adds	r3, #1
   1809c:	b29b      	uxth	r3, r3
   1809e:	8093      	strh	r3, [r2, #4]
    macMsg->DevNonce = CryptoNvm->DevNonce;
   180a0:	82c3      	strh	r3, [r0, #22]
    uint8_t compBase[16] = { 0 };
   180a2:	2300      	movs	r3, #0
   180a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   180a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
            compBase[0] = 0x06;
   180ac:	2306      	movs	r3, #6
    memcpyr( compBase + 1, devEUI, 8 );
   180ae:	2208      	movs	r2, #8
   180b0:	f10d 0009 	add.w	r0, sp, #9
            compBase[0] = 0x06;
   180b4:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   180b8:	f013 fcd5 	bl	2ba66 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   180bc:	2202      	movs	r2, #2
   180be:	2101      	movs	r1, #1
   180c0:	a802      	add	r0, sp, #8
   180c2:	f014 f859 	bl	2c178 <SecureElementDeriveAndStoreKey>
   180c6:	b990      	cbnz	r0, 180ee <LoRaMacCryptoPrepareJoinRequest+0x6a>
            compBase[0] = 0x05;
   180c8:	2305      	movs	r3, #5
    uint8_t compBase[16] = { 0 };
   180ca:	e9cd 0002 	strd	r0, r0, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   180ce:	2208      	movs	r2, #8
   180d0:	4629      	mov	r1, r5
    uint8_t compBase[16] = { 0 };
   180d2:	e9cd 0004 	strd	r0, r0, [sp, #16]
    memcpyr( compBase + 1, devEUI, 8 );
   180d6:	f10d 0009 	add.w	r0, sp, #9
            compBase[0] = 0x05;
   180da:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   180de:	f013 fcc2 	bl	2ba66 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   180e2:	2203      	movs	r2, #3
   180e4:	2101      	movs	r1, #1
   180e6:	a802      	add	r0, sp, #8
   180e8:	f014 f846 	bl	2c178 <SecureElementDeriveAndStoreKey>
   180ec:	b110      	cbz	r0, 180f4 <LoRaMacCryptoPrepareJoinRequest+0x70>
    {
        return LORAMAC_CRYPTO_ERROR;
   180ee:	2012      	movs	r0, #18
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   180f0:	b007      	add	sp, #28
   180f2:	bd30      	pop	{r4, r5, pc}
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   180f4:	4620      	mov	r0, r4
   180f6:	f014 fb7c 	bl	2c7f2 <LoRaMacSerializerJoinRequest>
   180fa:	b990      	cbnz	r0, 18122 <LoRaMacCryptoPrepareJoinRequest+0x9e>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   180fc:	f104 0318 	add.w	r3, r4, #24
   18100:	9300      	str	r3, [sp, #0]
   18102:	2213      	movs	r2, #19
   18104:	2301      	movs	r3, #1
   18106:	6821      	ldr	r1, [r4, #0]
   18108:	f014 f815 	bl	2c136 <SecureElementComputeAesCmac>
   1810c:	b958      	cbnz	r0, 18126 <LoRaMacCryptoPrepareJoinRequest+0xa2>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1810e:	4620      	mov	r0, r4
   18110:	f014 fb6f 	bl	2c7f2 <LoRaMacSerializerJoinRequest>
   18114:	3800      	subs	r0, #0
   18116:	bf18      	it	ne
   18118:	2001      	movne	r0, #1
   1811a:	0100      	lsls	r0, r0, #4
   1811c:	e7e8      	b.n	180f0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   1811e:	2009      	movs	r0, #9
   18120:	e7e6      	b.n	180f0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   18122:	2010      	movs	r0, #16
   18124:	e7e4      	b.n	180f0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18126:	200e      	movs	r0, #14
   18128:	e7e2      	b.n	180f0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
   1812a:	bf00      	nop
   1812c:	20030800 	.word	0x20030800

00018130 <LoRaMacCryptoPrepareReJoinType1>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
   18130:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( macMsg == 0 )
   18132:	4604      	mov	r4, r0
   18134:	b1f8      	cbz	r0, 18176 <LoRaMacCryptoPrepareReJoinType1+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount1 overflow
    if( CryptoNvm->FCntList.RJcount1 == 65535 )
   18136:	4d13      	ldr	r5, [pc, #76]	; (18184 <LoRaMacCryptoPrepareReJoinType1+0x54>)
   18138:	682b      	ldr	r3, [r5, #0]
   1813a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   1813c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18140:	429a      	cmp	r2, r3
   18142:	d01a      	beq.n	1817a <LoRaMacCryptoPrepareReJoinType1+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   18144:	f014 fb89 	bl	2c85a <LoRaMacSerializerReJoinType1>
   18148:	b110      	cbz	r0, 18150 <LoRaMacCryptoPrepareReJoinType1+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   1814a:	2010      	movs	r0, #16

    return LORAMAC_CRYPTO_SUCCESS;
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   1814c:	b003      	add	sp, #12
   1814e:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_1_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), J_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   18150:	f104 031c 	add.w	r3, r4, #28
   18154:	9300      	str	r3, [sp, #0]
   18156:	2214      	movs	r2, #20
   18158:	2302      	movs	r3, #2
   1815a:	6821      	ldr	r1, [r4, #0]
   1815c:	f013 ffeb 	bl	2c136 <SecureElementComputeAesCmac>
   18160:	b968      	cbnz	r0, 1817e <LoRaMacCryptoPrepareReJoinType1+0x4e>
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   18162:	4620      	mov	r0, r4
   18164:	f014 fb79 	bl	2c85a <LoRaMacSerializerReJoinType1>
   18168:	2800      	cmp	r0, #0
   1816a:	d1ee      	bne.n	1814a <LoRaMacCryptoPrepareReJoinType1+0x1a>
    CryptoNvm->FCntList.RJcount1++;
   1816c:	682a      	ldr	r2, [r5, #0]
   1816e:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
   18170:	3301      	adds	r3, #1
   18172:	8593      	strh	r3, [r2, #44]	; 0x2c
    return LORAMAC_CRYPTO_SUCCESS;
   18174:	e7ea      	b.n	1814c <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18176:	2009      	movs	r0, #9
   18178:	e7e8      	b.n	1814c <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
   1817a:	2011      	movs	r0, #17
   1817c:	e7e6      	b.n	1814c <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   1817e:	200e      	movs	r0, #14
   18180:	e7e4      	b.n	1814c <LoRaMacCryptoPrepareReJoinType1+0x1c>
   18182:	bf00      	nop
   18184:	20030800 	.word	0x20030800

00018188 <LoRaMacCryptoPrepareReJoinType0or2>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
   18188:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( macMsg == 0 )
   1818a:	4604      	mov	r4, r0
   1818c:	b1e8      	cbz	r0, 181ca <LoRaMacCryptoPrepareReJoinType0or2+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount0 overflow
    if( RJcount0 == 65535 )
   1818e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18192:	4d11      	ldr	r5, [pc, #68]	; (181d8 <LoRaMacCryptoPrepareReJoinType0or2+0x50>)
   18194:	882a      	ldrh	r2, [r5, #0]
   18196:	429a      	cmp	r2, r3
   18198:	d019      	beq.n	181ce <LoRaMacCryptoPrepareReJoinType0or2+0x46>
    {
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1819a:	f014 fb96 	bl	2c8ca <LoRaMacSerializerReJoinType0or2>
   1819e:	b110      	cbz	r0, 181a6 <LoRaMacCryptoPrepareReJoinType0or2+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   181a0:	2010      	movs	r0, #16

    return LORAMAC_CRYPTO_SUCCESS;
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   181a2:	b003      	add	sp, #12
   181a4:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_0_2_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   181a6:	f104 0314 	add.w	r3, r4, #20
   181aa:	9300      	str	r3, [sp, #0]
   181ac:	220f      	movs	r2, #15
   181ae:	2305      	movs	r3, #5
   181b0:	6821      	ldr	r1, [r4, #0]
   181b2:	f013 ffc0 	bl	2c136 <SecureElementComputeAesCmac>
   181b6:	b960      	cbnz	r0, 181d2 <LoRaMacCryptoPrepareReJoinType0or2+0x4a>
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   181b8:	4620      	mov	r0, r4
   181ba:	f014 fb86 	bl	2c8ca <LoRaMacSerializerReJoinType0or2>
   181be:	2800      	cmp	r0, #0
   181c0:	d1ee      	bne.n	181a0 <LoRaMacCryptoPrepareReJoinType0or2+0x18>
    RJcount0++;
   181c2:	882b      	ldrh	r3, [r5, #0]
   181c4:	3301      	adds	r3, #1
   181c6:	802b      	strh	r3, [r5, #0]
    return LORAMAC_CRYPTO_SUCCESS;
   181c8:	e7eb      	b.n	181a2 <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_ERROR_NPE;
   181ca:	2009      	movs	r0, #9
   181cc:	e7e9      	b.n	181a2 <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
   181ce:	2004      	movs	r0, #4
   181d0:	e7e7      	b.n	181a2 <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   181d2:	200e      	movs	r0, #14
   181d4:	e7e5      	b.n	181a2 <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
   181d6:	bf00      	nop
   181d8:	20030e16 	.word	0x20030e16

000181dc <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
   181dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181e0:	4604      	mov	r4, r0
   181e2:	4688      	mov	r8, r1
   181e4:	4617      	mov	r7, r2
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
   181e6:	461e      	mov	r6, r3
{
   181e8:	b08b      	sub	sp, #44	; 0x2c
    if( macMsg == NULL )
   181ea:	2b00      	cmp	r3, #0
   181ec:	d04c      	beq.n	18288 <LoRaMacCryptoSecureMessage+0xac>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
   181ee:	4d5d      	ldr	r5, [pc, #372]	; (18364 <LoRaMacCryptoSecureMessage+0x188>)
   181f0:	682b      	ldr	r3, [r5, #0]
   181f2:	68db      	ldr	r3, [r3, #12]
   181f4:	4283      	cmp	r3, r0
   181f6:	f200 80b2 	bhi.w	1835e <LoRaMacCryptoSecureMessage+0x182>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
   181fa:	f896 2020 	ldrb.w	r2, [r6, #32]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
   181fe:	2a00      	cmp	r2, #0
   18200:	bf0c      	ite	eq
   18202:	2206      	moveq	r2, #6
   18204:	2207      	movne	r2, #7
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
   18206:	4283      	cmp	r3, r0
   18208:	d306      	bcc.n	18218 <LoRaMacCryptoSecureMessage+0x3c>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1820a:	4630      	mov	r0, r6
   1820c:	f014 fb95 	bl	2c93a <LoRaMacSerializerData>
   18210:	4603      	mov	r3, r0
   18212:	b308      	cbz	r0, 18258 <LoRaMacCryptoSecureMessage+0x7c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   18214:	2010      	movs	r0, #16
   18216:	e01c      	b.n	18252 <LoRaMacCryptoSecureMessage+0x76>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
   18218:	2300      	movs	r3, #0
   1821a:	9001      	str	r0, [sp, #4]
   1821c:	9300      	str	r3, [sp, #0]
   1821e:	68b3      	ldr	r3, [r6, #8]
   18220:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   18224:	6a70      	ldr	r0, [r6, #36]	; 0x24
   18226:	f014 f956 	bl	2c4d6 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   1822a:	b990      	cbnz	r0, 18252 <LoRaMacCryptoSecureMessage+0x76>
        if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   1822c:	682b      	ldr	r3, [r5, #0]
   1822e:	789b      	ldrb	r3, [r3, #2]
   18230:	2b01      	cmp	r3, #1
   18232:	d1ea      	bne.n	1820a <LoRaMacCryptoSecureMessage+0x2e>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP, fCntUp, macMsg->FHDR.FOpts );
   18234:	f106 0310 	add.w	r3, r6, #16
   18238:	f896 c00c 	ldrb.w	ip, [r6, #12]
   1823c:	e9cd 4300 	strd	r4, r3, [sp]
   18240:	4602      	mov	r2, r0
   18242:	4603      	mov	r3, r0
   18244:	68b1      	ldr	r1, [r6, #8]
   18246:	f00c 000f 	and.w	r0, ip, #15
   1824a:	f7ff fdd1 	bl	17df0 <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
   1824e:	2800      	cmp	r0, #0
   18250:	d0db      	beq.n	1820a <LoRaMacCryptoSecureMessage+0x2e>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;

    return LORAMAC_CRYPTO_SUCCESS;
}
   18252:	b00b      	add	sp, #44	; 0x2c
   18254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18258:	f8d5 a000 	ldr.w	sl, [r5]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   1825c:	f896 c004 	ldrb.w	ip, [r6, #4]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18260:	f89a e002 	ldrb.w	lr, [sl, #2]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   18264:	f1ac 0c04 	sub.w	ip, ip, #4
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18268:	f1be 0f01 	cmp.w	lr, #1
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   1826c:	6830      	ldr	r0, [r6, #0]
   1826e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
   18272:	68b2      	ldr	r2, [r6, #8]
   18274:	fa1f f18c 	uxth.w	r1, ip
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18278:	d166      	bne.n	18348 <LoRaMacCryptoSecureMessage+0x16c>
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   1827a:	f896 e00c 	ldrb.w	lr, [r6, #12]
        uint32_t cmacF = 0;
   1827e:	e9cd 3304 	strd	r3, r3, [sp, #16]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   18282:	f3ce 1e40 	ubfx	lr, lr, #5, #1
    if( ( msg == 0 ) || ( cmac == 0 ) )
   18286:	b908      	cbnz	r0, 1828c <LoRaMacCryptoSecureMessage+0xb0>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18288:	2009      	movs	r0, #9
   1828a:	e7e2      	b.n	18252 <LoRaMacCryptoSecureMessage+0x76>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   1828c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   18290:	d901      	bls.n	18296 <LoRaMacCryptoSecureMessage+0xba>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   18292:	200d      	movs	r0, #13
   18294:	e7dd      	b.n	18252 <LoRaMacCryptoSecureMessage+0x76>
    b1[0] = 0x49;
   18296:	f04f 0b49 	mov.w	fp, #73	; 0x49
   1829a:	f88d b018 	strb.w	fp, [sp, #24]
    if( isAck == true )
   1829e:	f1be 0f00 	cmp.w	lr, #0
   182a2:	d04d      	beq.n	18340 <LoRaMacCryptoSecureMessage+0x164>
        uint16_t confFCnt = ( uint16_t )( CryptoNvm->LastDownFCnt % 65536 );
   182a4:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
        b1[1] = confFCnt & 0xFF;
   182a8:	fa5f fe83 	uxtb.w	lr, r3
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
   182ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
   182b0:	f88d 301a 	strb.w	r3, [sp, #26]
    b1[5] = UPLINK;  // dir = Uplink
   182b4:	2300      	movs	r3, #0
    b1[4] = txCh;
   182b6:	f88d 701c 	strb.w	r7, [sp, #28]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
   182ba:	0c17      	lsrs	r7, r2, #16
    b1[9] = ( devAddr >> 24 ) & 0xFF;
   182bc:	0e12      	lsrs	r2, r2, #24
   182be:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
   182c2:	0c22      	lsrs	r2, r4, #16
    b1[5] = UPLINK;  // dir = Uplink
   182c4:	f88d 301d 	strb.w	r3, [sp, #29]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
   182c8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    b1[14] = 0x00;
   182cc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
   182d0:	0e22      	lsrs	r2, r4, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   182d2:	ab04      	add	r3, sp, #16
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
   182d4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   182d8:	9300      	str	r3, [sp, #0]
   182da:	460a      	mov	r2, r1
   182dc:	2305      	movs	r3, #5
   182de:	4601      	mov	r1, r0
   182e0:	a806      	add	r0, sp, #24
        b1[1] = confFCnt & 0xFF;
   182e2:	f88d e019 	strb.w	lr, [sp, #25]
    b1[3] = txDr;
   182e6:	f88d 801b 	strb.w	r8, [sp, #27]
    b1[6] = devAddr & 0xFF;
   182ea:	f8ad 901e 	strh.w	r9, [sp, #30]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
   182ee:	f88d 7020 	strb.w	r7, [sp, #32]
    b1[10] = fCntUp & 0xFF;
   182f2:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    b1[15] = msgLen & 0xFF;
   182f6:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   182fa:	f013 ff1c 	bl	2c136 <SecureElementComputeAesCmac>
   182fe:	bb08      	cbnz	r0, 18344 <LoRaMacCryptoSecureMessage+0x168>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &cmacF );
   18300:	aa05      	add	r2, sp, #20
   18302:	7b33      	ldrb	r3, [r6, #12]
   18304:	7931      	ldrb	r1, [r6, #4]
   18306:	e9cd 4201 	strd	r4, r2, [sp, #4]
   1830a:	68b2      	ldr	r2, [r6, #8]
   1830c:	3904      	subs	r1, #4
   1830e:	9200      	str	r2, [sp, #0]
   18310:	6830      	ldr	r0, [r6, #0]
   18312:	2204      	movs	r2, #4
   18314:	f3c3 1340 	ubfx	r3, r3, #5, #1
   18318:	b289      	uxth	r1, r1
   1831a:	f014 f942 	bl	2c5a2 <ComputeCmacB0.constprop.0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   1831e:	2800      	cmp	r0, #0
   18320:	d197      	bne.n	18252 <LoRaMacCryptoSecureMessage+0x76>
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
   18322:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18326:	9a05      	ldr	r2, [sp, #20]
   18328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1832c:	62f3      	str	r3, [r6, #44]	; 0x2c
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1832e:	4630      	mov	r0, r6
   18330:	f014 fb03 	bl	2c93a <LoRaMacSerializerData>
   18334:	2800      	cmp	r0, #0
   18336:	f47f af6d 	bne.w	18214 <LoRaMacCryptoSecureMessage+0x38>
    CryptoNvm->FCntList.FCntUp = fCntUp;
   1833a:	682b      	ldr	r3, [r5, #0]
   1833c:	60dc      	str	r4, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
   1833e:	e788      	b.n	18252 <LoRaMacCryptoSecureMessage+0x76>
   18340:	469e      	mov	lr, r3
   18342:	e7b5      	b.n	182b0 <LoRaMacCryptoSecureMessage+0xd4>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18344:	200e      	movs	r0, #14
   18346:	e784      	b.n	18252 <LoRaMacCryptoSecureMessage+0x76>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
   18348:	f106 072c 	add.w	r7, r6, #44	; 0x2c
   1834c:	9200      	str	r2, [sp, #0]
   1834e:	e9cd 4701 	strd	r4, r7, [sp, #4]
   18352:	2206      	movs	r2, #6
   18354:	f014 f925 	bl	2c5a2 <ComputeCmacB0.constprop.0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18358:	2800      	cmp	r0, #0
   1835a:	d0e8      	beq.n	1832e <LoRaMacCryptoSecureMessage+0x152>
   1835c:	e779      	b.n	18252 <LoRaMacCryptoSecureMessage+0x76>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
   1835e:	2006      	movs	r0, #6
   18360:	e777      	b.n	18252 <LoRaMacCryptoSecureMessage+0x76>
   18362:	bf00      	nop
   18364:	20030800 	.word	0x20030800

00018368 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
   18368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1836c:	b087      	sub	sp, #28
   1836e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   18370:	4681      	mov	r9, r0
   18372:	4688      	mov	r8, r1
   18374:	4617      	mov	r7, r2
   18376:	461e      	mov	r6, r3
    if( macMsg == 0 )
   18378:	2d00      	cmp	r5, #0
   1837a:	f000 8094 	beq.w	184a6 <LoRaMacCryptoUnsecureMessage+0x13e>
    uint32_t lastDown = 0;
   1837e:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
   18380:	4610      	mov	r0, r2
   18382:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
   18384:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
   18386:	f7ff fd91 	bl	17eac <GetLastFcntDown.constprop.0>
   1838a:	b120      	cbz	r0, 18396 <LoRaMacCryptoUnsecureMessage+0x2e>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
   1838c:	2406      	movs	r4, #6
#endif

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
   1838e:	4620      	mov	r0, r4
   18390:	b007      	add	sp, #28
   18392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( currentDown > lastDown ) ||
   18396:	9b05      	ldr	r3, [sp, #20]
   18398:	429e      	cmp	r6, r3
   1839a:	d801      	bhi.n	183a0 <LoRaMacCryptoUnsecureMessage+0x38>
   1839c:	3301      	adds	r3, #1
   1839e:	d1f5      	bne.n	1838c <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
   183a0:	4628      	mov	r0, r5
   183a2:	f014 f9bc 	bl	2c71e <LoRaMacParserData>
   183a6:	4604      	mov	r4, r0
   183a8:	2800      	cmp	r0, #0
   183aa:	d17e      	bne.n	184aa <LoRaMacCryptoUnsecureMessage+0x142>
        if( KeyAddrList[i].AddrID == addrID )
   183ac:	4b40      	ldr	r3, [pc, #256]	; (184b0 <LoRaMacCryptoUnsecureMessage+0x148>)
   183ae:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   183b2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   183b6:	4549      	cmp	r1, r9
   183b8:	d104      	bne.n	183c4 <LoRaMacCryptoUnsecureMessage+0x5c>
    if( address != macMsg->FHDR.DevAddr )
   183ba:	68ab      	ldr	r3, [r5, #8]
   183bc:	4543      	cmp	r3, r8
   183be:	d006      	beq.n	183ce <LoRaMacCryptoUnsecureMessage+0x66>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
   183c0:	2402      	movs	r4, #2
   183c2:	e7e4      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
   183c4:	3401      	adds	r4, #1
   183c6:	2c05      	cmp	r4, #5
   183c8:	d1f1      	bne.n	183ae <LoRaMacCryptoUnsecureMessage+0x46>
   183ca:	240b      	movs	r4, #11
   183cc:	e7df      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   183ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 184b4 <LoRaMacCryptoUnsecureMessage+0x14c>
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   183d2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   183d4:	f8da 1000 	ldr.w	r1, [sl]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
   183d8:	7b2b      	ldrb	r3, [r5, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   183da:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
   183dc:	f892 b001 	ldrb.w	fp, [r2, #1]
        isAck = false;
   183e0:	2900      	cmp	r1, #0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   183e2:	7929      	ldrb	r1, [r5, #4]
   183e4:	e9cd 6001 	strd	r6, r0, [sp, #4]
   183e8:	f8cd 8000 	str.w	r8, [sp]
   183ec:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
   183f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   183f4:	7892      	ldrb	r2, [r2, #2]
   183f6:	bf08      	it	eq
   183f8:	2300      	moveq	r3, #0
   183fa:	6828      	ldr	r0, [r5, #0]
   183fc:	b289      	uxth	r1, r1
   183fe:	f7ff fd83 	bl	17f08 <VerifyCmacB0.constprop.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   18402:	4604      	mov	r4, r0
   18404:	2800      	cmp	r0, #0
   18406:	d1c2      	bne.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
   18408:	f895 3020 	ldrb.w	r3, [r5, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
   1840c:	9601      	str	r6, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
   1840e:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
   18410:	f04f 0301 	mov.w	r3, #1
   18414:	9300      	str	r3, [sp, #0]
   18416:	bf18      	it	ne
   18418:	465a      	movne	r2, fp
   1841a:	4643      	mov	r3, r8
   1841c:	bf08      	it	eq
   1841e:	2206      	moveq	r2, #6
   18420:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   18424:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18426:	f014 f856 	bl	2c4d6 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   1842a:	4604      	mov	r4, r0
   1842c:	2800      	cmp	r0, #0
   1842e:	d1ae      	bne.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18430:	f8da 3000 	ldr.w	r3, [sl]
   18434:	789a      	ldrb	r2, [r3, #2]
   18436:	2a01      	cmp	r2, #1
   18438:	d008      	beq.n	1844c <LoRaMacCryptoUnsecureMessage+0xe4>
    switch( fCntID )
   1843a:	3f01      	subs	r7, #1
   1843c:	2f06      	cmp	r7, #6
   1843e:	d8a6      	bhi.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
   18440:	e8df f007 	tbb	[pc, r7]
   18444:	211d1915 	.word	0x211d1915
   18448:	2925      	.short	0x2925
   1844a:	2d          	.byte	0x2d
   1844b:	00          	.byte	0x00
        if( addrID == UNICAST_DEV_ADDR )
   1844c:	f1b9 0f04 	cmp.w	r9, #4
   18450:	d1f3      	bne.n	1843a <LoRaMacCryptoUnsecureMessage+0xd2>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
   18452:	7b28      	ldrb	r0, [r5, #12]
   18454:	3510      	adds	r5, #16
   18456:	463b      	mov	r3, r7
   18458:	4641      	mov	r1, r8
   1845a:	e9cd 6500 	strd	r6, r5, [sp]
   1845e:	f000 000f 	and.w	r0, r0, #15
   18462:	f7ff fcc5 	bl	17df0 <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
   18466:	2800      	cmp	r0, #0
   18468:	d0e7      	beq.n	1843a <LoRaMacCryptoUnsecureMessage+0xd2>
   1846a:	4604      	mov	r4, r0
   1846c:	e78f      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.NFCntDown = currentDown;
   1846e:	f8da 3000 	ldr.w	r3, [sl]
   18472:	611e      	str	r6, [r3, #16]
            break;
   18474:	e78b      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
   18476:	f8da 3000 	ldr.w	r3, [sl]
   1847a:	615e      	str	r6, [r3, #20]
            break;
   1847c:	e787      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
   1847e:	f8da 3000 	ldr.w	r3, [sl]
   18482:	619e      	str	r6, [r3, #24]
            break;
   18484:	e783      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
   18486:	f8da 3000 	ldr.w	r3, [sl]
   1848a:	61de      	str	r6, [r3, #28]
            break;
   1848c:	e77f      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
   1848e:	f8da 3000 	ldr.w	r3, [sl]
   18492:	621e      	str	r6, [r3, #32]
            break;
   18494:	e77b      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
   18496:	f8da 3000 	ldr.w	r3, [sl]
   1849a:	625e      	str	r6, [r3, #36]	; 0x24
            break;
   1849c:	e777      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
   1849e:	f8da 3000 	ldr.w	r3, [sl]
   184a2:	629e      	str	r6, [r3, #40]	; 0x28
            break;
   184a4:	e773      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_NPE;
   184a6:	2409      	movs	r4, #9
   184a8:	e771      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_PARSER;
   184aa:	240f      	movs	r4, #15
   184ac:	e76f      	b.n	1838e <LoRaMacCryptoUnsecureMessage+0x26>
   184ae:	bf00      	nop
   184b0:	20008ac7 	.word	0x20008ac7
   184b4:	20030800 	.word	0x20030800

000184b8 <LoRaMacCryptoSetKey>:
{
   184b8:	b538      	push	{r3, r4, r5, lr}
   184ba:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
   184bc:	f013 fe57 	bl	2c16e <SecureElementSetKey>
   184c0:	4604      	mov	r4, r0
   184c2:	b110      	cbz	r0, 184ca <LoRaMacCryptoSetKey+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   184c4:	240e      	movs	r4, #14
}
   184c6:	4620      	mov	r0, r4
   184c8:	bd38      	pop	{r3, r4, r5, pc}
    if( keyID == APP_KEY )
   184ca:	2d00      	cmp	r5, #0
   184cc:	d1fb      	bne.n	184c6 <LoRaMacCryptoSetKey+0xe>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
   184ce:	4b06      	ldr	r3, [pc, #24]	; (184e8 <LoRaMacCryptoSetKey+0x30>)
   184d0:	4601      	mov	r1, r0
   184d2:	681b      	ldr	r3, [r3, #0]
   184d4:	7898      	ldrb	r0, [r3, #2]
   184d6:	f014 f8b9 	bl	2c64c <LoRaMacCryptoDeriveMcRootKey>
   184da:	2800      	cmp	r0, #0
   184dc:	d1f2      	bne.n	184c4 <LoRaMacCryptoSetKey+0xc>
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
   184de:	f014 f84f 	bl	2c580 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
   184e2:	2800      	cmp	r0, #0
   184e4:	d0ef      	beq.n	184c6 <LoRaMacCryptoSetKey+0xe>
   184e6:	e7ed      	b.n	184c4 <LoRaMacCryptoSetKey+0xc>
   184e8:	20030800 	.word	0x20030800

000184ec <LoRaMacCryptoHandleJoinAccept>:
{
   184ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   184f0:	4604      	mov	r4, r0
   184f2:	4689      	mov	r9, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
   184f4:	4616      	mov	r6, r2
{
   184f6:	b08f      	sub	sp, #60	; 0x3c
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
   184f8:	2a00      	cmp	r2, #0
   184fa:	f000 80ab 	beq.w	18654 <LoRaMacCryptoHandleJoinAccept+0x168>
   184fe:	2900      	cmp	r1, #0
   18500:	f000 80a8 	beq.w	18654 <LoRaMacCryptoHandleJoinAccept+0x168>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
   18504:	2500      	movs	r5, #0
    uint16_t nonce               = CryptoNvm->DevNonce;
   18506:	f8df 815c 	ldr.w	r8, [pc, #348]	; 18664 <LoRaMacCryptoHandleJoinAccept+0x178>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
   1850a:	221d      	movs	r2, #29
   1850c:	4629      	mov	r1, r5
   1850e:	a806      	add	r0, sp, #24
   18510:	9505      	str	r5, [sp, #20]
   18512:	f019 f936 	bl	31782 <memset>
    uint16_t nonce               = CryptoNvm->DevNonce;
   18516:	f8d8 3000 	ldr.w	r3, [r8]
    if( joinReqType == JOIN_REQ )
   1851a:	2cff      	cmp	r4, #255	; 0xff
    uint16_t nonce               = CryptoNvm->DevNonce;
   1851c:	889f      	ldrh	r7, [r3, #4]
    uint8_t versionMinor         = 0;
   1851e:	f88d 5013 	strb.w	r5, [sp, #19]
    if( joinReqType == JOIN_REQ )
   18522:	d005      	beq.n	18530 <LoRaMacCryptoHandleJoinAccept+0x44>
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
   18524:	f014 0ffd 	tst.w	r4, #253	; 0xfd
            nonce = RJcount0;
   18528:	bf0a      	itet	eq
   1852a:	4b4f      	ldreq	r3, [pc, #316]	; (18668 <LoRaMacCryptoHandleJoinAccept+0x17c>)
            nonce = CryptoNvm->FCntList.RJcount1;
   1852c:	8d9f      	ldrhne	r7, [r3, #44]	; 0x2c
            nonce = RJcount0;
   1852e:	881f      	ldrheq	r7, [r3, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
   18530:	f10d 0313 	add.w	r3, sp, #19
   18534:	ad05      	add	r5, sp, #20
   18536:	9302      	str	r3, [sp, #8]
   18538:	9501      	str	r5, [sp, #4]
   1853a:	7933      	ldrb	r3, [r6, #4]
   1853c:	463a      	mov	r2, r7
   1853e:	9300      	str	r3, [sp, #0]
   18540:	4649      	mov	r1, r9
   18542:	4620      	mov	r0, r4
   18544:	6833      	ldr	r3, [r6, #0]
   18546:	f013 fe33 	bl	2c1b0 <SecureElementProcessJoinAccept>
   1854a:	2800      	cmp	r0, #0
   1854c:	f040 8084 	bne.w	18658 <LoRaMacCryptoHandleJoinAccept+0x16c>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
   18550:	6830      	ldr	r0, [r6, #0]
   18552:	4629      	mov	r1, r5
   18554:	7932      	ldrb	r2, [r6, #4]
   18556:	f013 fa7c 	bl	2ba52 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
   1855a:	4630      	mov	r0, r6
   1855c:	f014 f891 	bl	2c682 <LoRaMacParserJoinAccept>
   18560:	2800      	cmp	r0, #0
   18562:	d17b      	bne.n	1865c <LoRaMacCryptoHandleJoinAccept+0x170>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   18564:	7a35      	ldrb	r5, [r6, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
   18566:	79f2      	ldrb	r2, [r6, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
   18568:	79b3      	ldrb	r3, [r6, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   1856a:	042d      	lsls	r5, r5, #16
   1856c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    if( versionMinor == 1 )
   18570:	f89d 0013 	ldrb.w	r0, [sp, #19]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   18574:	431d      	orrs	r5, r3
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
   18576:	f8d8 3000 	ldr.w	r3, [r8]
    if( versionMinor == 1 )
   1857a:	2801      	cmp	r0, #1
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
   1857c:	689a      	ldr	r2, [r3, #8]
    if( versionMinor == 1 )
   1857e:	d103      	bne.n	18588 <LoRaMacCryptoHandleJoinAccept+0x9c>
    if( isJoinNonceOk == true )
   18580:	4295      	cmp	r5, r2
   18582:	d803      	bhi.n	1858c <LoRaMacCryptoHandleJoinAccept+0xa0>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
   18584:	2403      	movs	r4, #3
   18586:	e03e      	b.n	18606 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( isJoinNonceOk == true )
   18588:	4295      	cmp	r5, r2
   1858a:	d0fb      	beq.n	18584 <LoRaMacCryptoHandleJoinAccept+0x98>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
   1858c:	2100      	movs	r1, #0
        CryptoNvm->JoinNonce = currentJoinNonce;
   1858e:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
   18590:	f014 f85c 	bl	2c64c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   18594:	4604      	mov	r4, r0
   18596:	2800      	cmp	r0, #0
   18598:	d135      	bne.n	18606 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( keyID != MC_ROOT_KEY )
   1859a:	f013 fff1 	bl	2c580 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   1859e:	4604      	mov	r4, r0
   185a0:	bb88      	cbnz	r0, 18606 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( versionMinor == 1 )
   185a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   185a6:	2b01      	cmp	r3, #1
   185a8:	d131      	bne.n	1860e <LoRaMacCryptoHandleJoinAccept+0x122>
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
   185aa:	463b      	mov	r3, r7
   185ac:	464a      	mov	r2, r9
   185ae:	4629      	mov	r1, r5
   185b0:	2004      	movs	r0, #4
   185b2:	f013 ff34 	bl	2c41e <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   185b6:	2800      	cmp	r0, #0
   185b8:	d152      	bne.n	18660 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
   185ba:	463b      	mov	r3, r7
   185bc:	464a      	mov	r2, r9
   185be:	4629      	mov	r1, r5
   185c0:	2005      	movs	r0, #5
   185c2:	f013 ff2c 	bl	2c41e <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   185c6:	2800      	cmp	r0, #0
   185c8:	d14a      	bne.n	18660 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, currentJoinNonce, joinEUI, nonce );
   185ca:	463b      	mov	r3, r7
   185cc:	464a      	mov	r2, r9
   185ce:	4629      	mov	r1, r5
   185d0:	2006      	movs	r0, #6
   185d2:	f013 ff24 	bl	2c41e <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   185d6:	2800      	cmp	r0, #0
   185d8:	d142      	bne.n	18660 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( APP_S_KEY, currentJoinNonce, joinEUI, nonce );
   185da:	463b      	mov	r3, r7
   185dc:	464a      	mov	r2, r9
   185de:	4629      	mov	r1, r5
   185e0:	2007      	movs	r0, #7
   185e2:	f013 ff1c 	bl	2c41e <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   185e6:	2800      	cmp	r0, #0
   185e8:	d13a      	bne.n	18660 <LoRaMacCryptoHandleJoinAccept+0x174>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
   185ea:	f8d8 3000 	ldr.w	r3, [r8]
   185ee:	f89d 2013 	ldrb.w	r2, [sp, #19]
    RJcount0 = 0;
   185f2:	491d      	ldr	r1, [pc, #116]	; (18668 <LoRaMacCryptoHandleJoinAccept+0x17c>)
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
   185f4:	709a      	strb	r2, [r3, #2]
    RJcount0 = 0;
   185f6:	2200      	movs	r2, #0
   185f8:	800a      	strh	r2, [r1, #0]
    CryptoNvm->FCntList.FCntUp = 0;
   185fa:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   185fc:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
   18600:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   18604:	619a      	str	r2, [r3, #24]
}
   18606:	4620      	mov	r0, r4
   18608:	b00f      	add	sp, #60	; 0x3c
   1860a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        netID = ( uint32_t )macMsg->NetID[0];
   1860e:	7a73      	ldrb	r3, [r6, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
   18610:	7ab2      	ldrb	r2, [r6, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
   18612:	7af6      	ldrb	r6, [r6, #11]
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
   18614:	4629      	mov	r1, r5
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
   18616:	0436      	lsls	r6, r6, #16
   18618:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
   1861c:	431e      	orrs	r6, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
   1861e:	4632      	mov	r2, r6
   18620:	463b      	mov	r3, r7
   18622:	2007      	movs	r0, #7
   18624:	f013 ff31 	bl	2c48a <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18628:	b9d0      	cbnz	r0, 18660 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
   1862a:	463b      	mov	r3, r7
   1862c:	4632      	mov	r2, r6
   1862e:	4629      	mov	r1, r5
   18630:	2006      	movs	r0, #6
   18632:	f013 ff2a 	bl	2c48a <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18636:	b998      	cbnz	r0, 18660 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
   18638:	463b      	mov	r3, r7
   1863a:	4632      	mov	r2, r6
   1863c:	4629      	mov	r1, r5
   1863e:	2004      	movs	r0, #4
   18640:	f013 ff23 	bl	2c48a <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18644:	b960      	cbnz	r0, 18660 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
   18646:	463b      	mov	r3, r7
   18648:	4632      	mov	r2, r6
   1864a:	4629      	mov	r1, r5
   1864c:	2005      	movs	r0, #5
   1864e:	f013 ff1c 	bl	2c48a <DeriveSessionKey10x>
   18652:	e7c8      	b.n	185e6 <LoRaMacCryptoHandleJoinAccept+0xfa>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18654:	2409      	movs	r4, #9
   18656:	e7d6      	b.n	18606 <LoRaMacCryptoHandleJoinAccept+0x11a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18658:	240e      	movs	r4, #14
   1865a:	e7d4      	b.n	18606 <LoRaMacCryptoHandleJoinAccept+0x11a>
        return LORAMAC_CRYPTO_ERROR_PARSER;
   1865c:	240f      	movs	r4, #15
   1865e:	e7d2      	b.n	18606 <LoRaMacCryptoHandleJoinAccept+0x11a>
   18660:	4604      	mov	r4, r0
   18662:	e7d0      	b.n	18606 <LoRaMacCryptoHandleJoinAccept+0x11a>
   18664:	20030800 	.word	0x20030800
   18668:	20030e16 	.word	0x20030e16

0001866c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
   1866c:	4800      	ldr	r0, [pc, #0]	; (18670 <RegionGetVersion+0x4>)
   1866e:	4770      	bx	lr
   18670:	02010001 	.word	0x02010001

00018674 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
   18674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18678:	b08f      	sub	sp, #60	; 0x3c
   1867a:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   1867e:	9303      	str	r3, [sp, #12]
   18680:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   18684:	4615      	mov	r5, r2
   18686:	460c      	mov	r4, r1
   18688:	9307      	str	r3, [sp, #28]
   1868a:	4682      	mov	sl, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
   1868c:	f013 faf6 	bl	2bc7c <TimerGetCurrentTime>
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
   18690:	4a74      	ldr	r2, [pc, #464]	; (18864 <RegionCommonUpdateBandTimeOff+0x1f0>)
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
   18692:	f5a8 33f6 	sub.w	r3, r8, #125952	; 0x1ec00
   18696:	3b30      	subs	r3, #48	; 0x30
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
   18698:	fbb3 f3f2 	udiv	r3, r3, r2
   1869c:	4353      	muls	r3, r2
   1869e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
   186a0:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
   186a4:	3330      	adds	r3, #48	; 0x30
   186a6:	9302      	str	r3, [sp, #8]
   186a8:	2318      	movs	r3, #24
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
   186aa:	f04f 39ff 	mov.w	r9, #4294967295
   186ae:	fb13 4305 	smlabb	r3, r3, r5, r4
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
   186b2:	2500      	movs	r5, #0
   186b4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 18868 <RegionCommonUpdateBandTimeOff+0x1f4>
    TimerTime_t currentTime = TimerGetCurrentTime( );
   186b8:	9005      	str	r0, [sp, #20]

    for( uint8_t i = 0; i < nbBands; i++ )
   186ba:	9306      	str	r3, [sp, #24]
   186bc:	9b06      	ldr	r3, [sp, #24]
   186be:	429c      	cmp	r4, r3
   186c0:	d107      	bne.n	186d2 <RegionCommonUpdateBandTimeOff+0x5e>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
   186c2:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
   186c4:	bf14      	ite	ne
   186c6:	4648      	movne	r0, r9
   186c8:	f04f 30ff 	moveq.w	r0, #4294967295
   186cc:	b00f      	add	sp, #60	; 0x3c
   186ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
   186d2:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
   186d6:	4640      	mov	r0, r8
   186d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   186dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   186de:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   186e2:	f8cd 8020 	str.w	r8, [sp, #32]
   186e6:	f013 fa5b 	bl	2bba0 <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
   186ea:	8826      	ldrh	r6, [r4, #0]
    if( joined == false )
   186ec:	f1ba 0f00 	cmp.w	sl, #0
   186f0:	d150      	bne.n	18794 <RegionCommonUpdateBandTimeOff+0x120>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
   186f2:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
   186f6:	d315      	bcc.n	18724 <RegionCommonUpdateBandTimeOff+0xb0>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
   186f8:	f649 23af 	movw	r3, #39599	; 0x9aaf
   186fc:	4598      	cmp	r8, r3
   186fe:	d80a      	bhi.n	18716 <RegionCommonUpdateBandTimeOff+0xa2>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   18700:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   18704:	bf38      	it	cc
   18706:	f44f 767a 	movcc.w	r6, #1000	; 0x3e8
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
   1870a:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   1870e:	d107      	bne.n	18720 <RegionCommonUpdateBandTimeOff+0xac>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
   18710:	4f56      	ldr	r7, [pc, #344]	; (1886c <RegionCommonUpdateBandTimeOff+0x1f8>)
            band->LastMaxCreditAssignTime = elapsedTime;
   18712:	60a0      	str	r0, [r4, #8]
   18714:	e00b      	b.n	1872e <RegionCommonUpdateBandTimeOff+0xba>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   18716:	f242 7310 	movw	r3, #10000	; 0x2710
   1871a:	429e      	cmp	r6, r3
   1871c:	bf38      	it	cc
   1871e:	461e      	movcc	r6, r3
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
   18720:	4f53      	ldr	r7, [pc, #332]	; (18870 <RegionCommonUpdateBandTimeOff+0x1fc>)
   18722:	e004      	b.n	1872e <RegionCommonUpdateBandTimeOff+0xba>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
   18724:	2e64      	cmp	r6, #100	; 0x64
   18726:	d8f0      	bhi.n	1870a <RegionCommonUpdateBandTimeOff+0x96>
            band->LastMaxCreditAssignTime = elapsedTime;
   18728:	2664      	movs	r6, #100	; 0x64
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
   1872a:	465f      	mov	r7, fp
            band->LastMaxCreditAssignTime = elapsedTime;
   1872c:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
   1872e:	68a1      	ldr	r1, [r4, #8]
   18730:	a80c      	add	r0, sp, #48	; 0x30
   18732:	f013 fa54 	bl	2bbde <SysTimeFromMs>
   18736:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   1873a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1873c:	a80a      	add	r0, sp, #40	; 0x28
   1873e:	9300      	str	r3, [sp, #0]
   18740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18742:	f013 f9bc 	bl	2babe <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
   18746:	9a03      	ldr	r2, [sp, #12]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
   18748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
   1874a:	b912      	cbnz	r2, 18752 <RegionCommonUpdateBandTimeOff+0xde>
   1874c:	9a07      	ldr	r2, [sp, #28]
   1874e:	2a00      	cmp	r2, #0
   18750:	d031      	beq.n	187b6 <RegionCommonUpdateBandTimeOff+0x142>
   18752:	6922      	ldr	r2, [r4, #16]
   18754:	42ba      	cmp	r2, r7
   18756:	d12e      	bne.n	187b6 <RegionCommonUpdateBandTimeOff+0x142>
            ( band->MaxTimeCredits != maxCredits ) ||
   18758:	4a46      	ldr	r2, [pc, #280]	; (18874 <RegionCommonUpdateBandTimeOff+0x200>)
   1875a:	4293      	cmp	r3, r2
   1875c:	d82b      	bhi.n	187b6 <RegionCommonUpdateBandTimeOff+0x142>
    if( band->LastBandUpdateTime == 0 )
   1875e:	6863      	ldr	r3, [r4, #4]
   18760:	b903      	cbnz	r3, 18764 <RegionCommonUpdateBandTimeOff+0xf0>
        band->TimeCredits = maxCredits;
   18762:	60e7      	str	r7, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
   18764:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   18768:	4293      	cmp	r3, r2
    band->LastBandUpdateTime = currentTime;
   1876a:	9b05      	ldr	r3, [sp, #20]
        band->TimeCredits = band->MaxTimeCredits;
   1876c:	bf88      	it	hi
   1876e:	60e2      	strhi	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
   18770:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
   18772:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        if( ( bands[i].TimeCredits > creditCosts ) ||
   18774:	68e1      	ldr	r1, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
   18776:	4373      	muls	r3, r6
        if( ( bands[i].TimeCredits > creditCosts ) ||
   18778:	4299      	cmp	r1, r3
   1877a:	d805      	bhi.n	18788 <RegionCommonUpdateBandTimeOff+0x114>
   1877c:	9803      	ldr	r0, [sp, #12]
   1877e:	2800      	cmp	r0, #0
   18780:	d15e      	bne.n	18840 <RegionCommonUpdateBandTimeOff+0x1cc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
   18782:	f1ba 0f00 	cmp.w	sl, #0
   18786:	d030      	beq.n	187ea <RegionCommonUpdateBandTimeOff+0x176>
            bands[i].ReadyForTransmission = true;
   18788:	2301      	movs	r3, #1
            validBands++;
   1878a:	441d      	add	r5, r3
            bands[i].ReadyForTransmission = true;
   1878c:	7523      	strb	r3, [r4, #20]
            validBands++;
   1878e:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
   18790:	3418      	adds	r4, #24
   18792:	e793      	b.n	186bc <RegionCommonUpdateBandTimeOff+0x48>
        if( dutyCycleEnabled == false )
   18794:	9b03      	ldr	r3, [sp, #12]
    if( band->LastBandUpdateTime == 0 )
   18796:	6860      	ldr	r0, [r4, #4]
        if( dutyCycleEnabled == false )
   18798:	bb0b      	cbnz	r3, 187de <RegionCommonUpdateBandTimeOff+0x16a>
            band->TimeCredits = maxCredits;
   1879a:	f8c4 b00c 	str.w	fp, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
   1879e:	b310      	cbz	r0, 187e6 <RegionCommonUpdateBandTimeOff+0x172>
   187a0:	2e01      	cmp	r6, #1
    band->MaxTimeCredits = maxCredits;
   187a2:	f8c4 b010 	str.w	fp, [r4, #16]
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
   187a6:	bf38      	it	cc
   187a8:	2601      	movcc	r6, #1
   187aa:	f013 fa6e 	bl	2bc8a <TimerGetElapsedTime>
   187ae:	68e3      	ldr	r3, [r4, #12]
   187b0:	4403      	add	r3, r0
   187b2:	60e3      	str	r3, [r4, #12]
   187b4:	e7d6      	b.n	18764 <RegionCommonUpdateBandTimeOff+0xf0>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   187b6:	4b30      	ldr	r3, [pc, #192]	; (18878 <RegionCommonUpdateBandTimeOff+0x204>)
            band->TimeCredits = maxCredits;
   187b8:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   187ba:	4598      	cmp	r8, r3
   187bc:	d90b      	bls.n	187d6 <RegionCommonUpdateBandTimeOff+0x162>
                timeDiff.SubSeconds = 0;
   187be:	2300      	movs	r3, #0
   187c0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
   187c4:	9b02      	ldr	r3, [sp, #8]
   187c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   187c8:	4618      	mov	r0, r3
   187ca:	930a      	str	r3, [sp, #40]	; 0x28
   187cc:	f013 f9e8 	bl	2bba0 <SysTimeToMs>
    if( band->LastBandUpdateTime == 0 )
   187d0:	6863      	ldr	r3, [r4, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
   187d2:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
   187d4:	b10b      	cbz	r3, 187da <RegionCommonUpdateBandTimeOff+0x166>
    band->MaxTimeCredits = maxCredits;
   187d6:	6127      	str	r7, [r4, #16]
    if( joined == true )
   187d8:	e7c4      	b.n	18764 <RegionCommonUpdateBandTimeOff+0xf0>
        band->TimeCredits = maxCredits;
   187da:	60e7      	str	r7, [r4, #12]
   187dc:	e7fb      	b.n	187d6 <RegionCommonUpdateBandTimeOff+0x162>
    if( band->LastBandUpdateTime == 0 )
   187de:	2800      	cmp	r0, #0
   187e0:	d1de      	bne.n	187a0 <RegionCommonUpdateBandTimeOff+0x12c>
        band->TimeCredits = maxCredits;
   187e2:	f8c4 b00c 	str.w	fp, [r4, #12]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
   187e6:	2000      	movs	r0, #0
   187e8:	e7da      	b.n	187a0 <RegionCommonUpdateBandTimeOff+0x12c>
            if( bands[i].MaxTimeCredits > creditCosts )
   187ea:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
   187ec:	f884 a014 	strb.w	sl, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
   187f0:	d201      	bcs.n	187f6 <RegionCommonUpdateBandTimeOff+0x182>
                validBands++;
   187f2:	3501      	adds	r5, #1
   187f4:	b2ed      	uxtb	r5, r5
                SysTime_t backoffTimeRange = {
   187f6:	2300      	movs	r3, #0
                if( dutyCycle == BACKOFF_DC_1_HOUR )
   187f8:	2e64      	cmp	r6, #100	; 0x64
   187fa:	4a20      	ldr	r2, [pc, #128]	; (1887c <RegionCommonUpdateBandTimeOff+0x208>)
                SysTime_t backoffTimeRange = {
   187fc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
                if( dutyCycle == BACKOFF_DC_1_HOUR )
   18800:	d02c      	beq.n	1885c <RegionCommonUpdateBandTimeOff+0x1e8>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
   18802:	f649 23b0 	movw	r3, #39600	; 0x9ab0
   18806:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   1880a:	bf18      	it	ne
   1880c:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   1880e:	4590      	cmp	r8, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
   18810:	bf88      	it	hi
   18812:	9a04      	ldrhi	r2, [sp, #16]
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
   18814:	ae0a      	add	r6, sp, #40	; 0x28
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
   18816:	bf82      	ittt	hi
   18818:	f502 32a8 	addhi.w	r2, r2, #86016	; 0x15000
   1881c:	f502 72c0 	addhi.w	r2, r2, #384	; 0x180
   18820:	189b      	addhi	r3, r3, r2
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
   18822:	930a      	str	r3, [sp, #40]	; 0x28
   18824:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18826:	4630      	mov	r0, r6
   18828:	9300      	str	r3, [sp, #0]
   1882a:	e896 0006 	ldmia.w	r6, {r1, r2}
   1882e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18830:	f013 f945 	bl	2babe <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
   18834:	e896 0003 	ldmia.w	r6, {r0, r1}
   18838:	f013 f9b2 	bl	2bba0 <SysTimeToMs>
   1883c:	4681      	mov	r9, r0
   1883e:	e7a7      	b.n	18790 <RegionCommonUpdateBandTimeOff+0x11c>
            bands[i].ReadyForTransmission = false;
   18840:	2000      	movs	r0, #0
            if( bands[i].MaxTimeCredits > creditCosts )
   18842:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
   18844:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
   18846:	d205      	bcs.n	18854 <RegionCommonUpdateBandTimeOff+0x1e0>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
   18848:	1a5b      	subs	r3, r3, r1
   1884a:	4599      	cmp	r9, r3
   1884c:	bf28      	it	cs
   1884e:	4699      	movcs	r9, r3
                validBands++;
   18850:	3501      	adds	r5, #1
   18852:	b2ed      	uxtb	r5, r5
            if( joined == false )
   18854:	f1ba 0f00 	cmp.w	sl, #0
   18858:	d19a      	bne.n	18790 <RegionCommonUpdateBandTimeOff+0x11c>
   1885a:	e7cc      	b.n	187f6 <RegionCommonUpdateBandTimeOff+0x182>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
   1885c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   18860:	e7d5      	b.n	1880e <RegionCommonUpdateBandTimeOff+0x19a>
   18862:	bf00      	nop
   18864:	00015180 	.word	0x00015180
   18868:	001b7740 	.word	0x001b7740
   1886c:	0112a880 	.word	0x0112a880
   18870:	02932e00 	.word	0x02932e00
   18874:	0001517f 	.word	0x0001517f
   18878:	0001ec2f 	.word	0x0001ec2f
   1887c:	0001ec30 	.word	0x0001ec30

00018880 <RegionCommonComputeSymbolTimeLoRa>:
    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
   18880:	4b02      	ldr	r3, [pc, #8]	; (1888c <RegionCommonComputeSymbolTimeLoRa+0xc>)
   18882:	fa03 f000 	lsl.w	r0, r3, r0
}
   18886:	fbb0 f0f1 	udiv	r0, r0, r1
   1888a:	4770      	bx	lr
   1888c:	000f4240 	.word	0x000f4240

00018890 <RegionCommonGetBandwidth>:
    return MAX( txPower, maxBandTxPower );
}

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
   18890:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   18894:	4b05      	ldr	r3, [pc, #20]	; (188ac <RegionCommonGetBandwidth+0x1c>)
   18896:	4298      	cmp	r0, r3
   18898:	d005      	beq.n	188a6 <RegionCommonGetBandwidth+0x16>
   1889a:	4b05      	ldr	r3, [pc, #20]	; (188b0 <RegionCommonGetBandwidth+0x20>)
   1889c:	1ac3      	subs	r3, r0, r3
   1889e:	4258      	negs	r0, r3
   188a0:	4158      	adcs	r0, r3
   188a2:	0040      	lsls	r0, r0, #1
   188a4:	4770      	bx	lr
   188a6:	2001      	movs	r0, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
   188a8:	4770      	bx	lr
   188aa:	bf00      	nop
   188ac:	0003d090 	.word	0x0003d090
   188b0:	0007a120 	.word	0x0007a120

000188b4 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
   188b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesEU868[datarate];
   188b6:	4b11      	ldr	r3, [pc, #68]	; (188fc <GetTimeOnAir+0x48>)
{
   188b8:	460c      	mov	r4, r1
   188ba:	b085      	sub	sp, #20
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   188bc:	4910      	ldr	r1, [pc, #64]	; (18900 <GetTimeOnAir+0x4c>)
{
   188be:	4605      	mov	r5, r0
    int8_t phyDr = DataratesEU868[datarate];
   188c0:	561f      	ldrsb	r7, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   188c2:	f7ff ffe5 	bl	18890 <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   188c6:	4b0f      	ldr	r3, [pc, #60]	; (18904 <GetTimeOnAir+0x50>)
   188c8:	b2e4      	uxtb	r4, r4
   188ca:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   188cc:	2301      	movs	r3, #1
    if( datarate == DR_7 )
   188ce:	2d07      	cmp	r5, #7
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   188d0:	4601      	mov	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   188d2:	e9cd 4302 	strd	r4, r3, [sp, #8]
    if( datarate == DR_7 )
   188d6:	d10a      	bne.n	188ee <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   188d8:	2205      	movs	r2, #5
   188da:	2300      	movs	r3, #0
   188dc:	e9cd 2300 	strd	r2, r3, [sp]
   188e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   188e4:	437a      	muls	r2, r7
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
   188e6:	4618      	mov	r0, r3
   188e8:	47b0      	blx	r6
    }
    return timeOnAir;
}
   188ea:	b005      	add	sp, #20
   188ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
   188ee:	2208      	movs	r2, #8
   188f0:	2000      	movs	r0, #0
   188f2:	e9cd 2000 	strd	r2, r0, [sp]
   188f6:	463a      	mov	r2, r7
   188f8:	e7f5      	b.n	188e6 <GetTimeOnAir+0x32>
   188fa:	bf00      	nop
   188fc:	000364c4 	.word	0x000364c4
   18900:	00033a2c 	.word	0x00033a2c
   18904:	000338dc 	.word	0x000338dc

00018908 <VerifyRfFreq>:
{
   18908:	b538      	push	{r3, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
   1890a:	4b19      	ldr	r3, [pc, #100]	; (18970 <VerifyRfFreq+0x68>)
{
   1890c:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
   1890e:	6a1b      	ldr	r3, [r3, #32]
{
   18910:	460d      	mov	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
   18912:	4798      	blx	r3
   18914:	b158      	cbz	r0, 1892e <VerifyRfFreq+0x26>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
   18916:	4b17      	ldr	r3, [pc, #92]	; (18974 <VerifyRfFreq+0x6c>)
   18918:	4a17      	ldr	r2, [pc, #92]	; (18978 <VerifyRfFreq+0x70>)
   1891a:	4423      	add	r3, r4
   1891c:	4293      	cmp	r3, r2
   1891e:	d907      	bls.n	18930 <VerifyRfFreq+0x28>
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
   18920:	4b16      	ldr	r3, [pc, #88]	; (1897c <VerifyRfFreq+0x74>)
   18922:	4a17      	ldr	r2, [pc, #92]	; (18980 <VerifyRfFreq+0x78>)
   18924:	4423      	add	r3, r4
   18926:	4293      	cmp	r3, r2
   18928:	d80c      	bhi.n	18944 <VerifyRfFreq+0x3c>
   1892a:	2300      	movs	r3, #0
        *band = 0;
   1892c:	702b      	strb	r3, [r5, #0]
}
   1892e:	bd38      	pop	{r3, r4, r5, pc}
   18930:	2302      	movs	r3, #2
   18932:	e7fb      	b.n	1892c <VerifyRfFreq+0x24>
   18934:	2301      	movs	r3, #1
   18936:	e7f9      	b.n	1892c <VerifyRfFreq+0x24>
   18938:	2305      	movs	r3, #5
   1893a:	e7f7      	b.n	1892c <VerifyRfFreq+0x24>
   1893c:	2303      	movs	r3, #3
   1893e:	e7f5      	b.n	1892c <VerifyRfFreq+0x24>
   18940:	2304      	movs	r3, #4
   18942:	e7f3      	b.n	1892c <VerifyRfFreq+0x24>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
   18944:	4b0f      	ldr	r3, [pc, #60]	; (18984 <VerifyRfFreq+0x7c>)
   18946:	4a10      	ldr	r2, [pc, #64]	; (18988 <VerifyRfFreq+0x80>)
   18948:	4423      	add	r3, r4
   1894a:	4293      	cmp	r3, r2
   1894c:	d9f2      	bls.n	18934 <VerifyRfFreq+0x2c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
   1894e:	4b0f      	ldr	r3, [pc, #60]	; (1898c <VerifyRfFreq+0x84>)
   18950:	4a0f      	ldr	r2, [pc, #60]	; (18990 <VerifyRfFreq+0x88>)
   18952:	4423      	add	r3, r4
   18954:	4293      	cmp	r3, r2
   18956:	d9ef      	bls.n	18938 <VerifyRfFreq+0x30>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
   18958:	4b0e      	ldr	r3, [pc, #56]	; (18994 <VerifyRfFreq+0x8c>)
   1895a:	4a0f      	ldr	r2, [pc, #60]	; (18998 <VerifyRfFreq+0x90>)
   1895c:	4423      	add	r3, r4
   1895e:	4293      	cmp	r3, r2
   18960:	d9ec      	bls.n	1893c <VerifyRfFreq+0x34>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
   18962:	4b0e      	ldr	r3, [pc, #56]	; (1899c <VerifyRfFreq+0x94>)
   18964:	4a0e      	ldr	r2, [pc, #56]	; (189a0 <VerifyRfFreq+0x98>)
   18966:	4423      	add	r3, r4
   18968:	4293      	cmp	r3, r2
   1896a:	d9e9      	bls.n	18940 <VerifyRfFreq+0x38>
        return false;
   1896c:	2000      	movs	r0, #0
   1896e:	e7de      	b.n	1892e <VerifyRfFreq+0x26>
   18970:	000338dc 	.word	0x000338dc
   18974:	cc8faa40 	.word	0xcc8faa40
   18978:	001e847f 	.word	0x001e847f
   1897c:	cc7125c0 	.word	0xcc7125c0
   18980:	002dc6c0 	.word	0x002dc6c0
   18984:	cc435eff 	.word	0xcc435eff
   18988:	000927bf 	.word	0x000927bf
   1898c:	cc38b0a0 	.word	0xcc38b0a0
   18990:	0007a120 	.word	0x0007a120
   18994:	cc2e0240 	.word	0xcc2e0240
   18998:	0003d090 	.word	0x0003d090
   1899c:	cc296e60 	.word	0xcc296e60
   189a0:	000493e0 	.word	0x000493e0

000189a4 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
   189a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
   189a6:	2300      	movs	r3, #0
   189a8:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
   189aa:	7803      	ldrb	r3, [r0, #0]
   189ac:	3b0b      	subs	r3, #11
   189ae:	2b2c      	cmp	r3, #44	; 0x2c
   189b0:	d862      	bhi.n	18a78 <RegionEU868GetPhyParam+0xd4>
   189b2:	e8df f003 	tbb	[pc, r3]
   189b6:	2f2c      	.short	0x2f2c
   189b8:	3b383631 	.word	0x3b383631
   189bc:	4744413e 	.word	0x4744413e
   189c0:	51614f61 	.word	0x51614f61
   189c4:	615b5955 	.word	0x615b5955
   189c8:	17655e61 	.word	0x17655e61
   189cc:	61616161 	.word	0x61616161
   189d0:	61616161 	.word	0x61616161
   189d4:	61616161 	.word	0x61616161
   189d8:	6c674f61 	.word	0x6c674f61
   189dc:	6c4f6161 	.word	0x6c4f6161
   189e0:	6e61      	.short	0x6e61
   189e2:	72          	.byte	0x72
   189e3:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   189e4:	7843      	ldrb	r3, [r0, #1]
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
   189e6:	a801      	add	r0, sp, #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   189e8:	f88d 3004 	strb.w	r3, [sp, #4]
   189ec:	2307      	movs	r3, #7
   189ee:	f88d 3005 	strb.w	r3, [sp, #5]
   189f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   189f6:	f8ad 3006 	strh.w	r3, [sp, #6]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
   189fa:	4b2b      	ldr	r3, [pc, #172]	; (18aa8 <RegionEU868GetPhyParam+0x104>)
   189fc:	681b      	ldr	r3, [r3, #0]
   189fe:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   18a02:	e9cd 2302 	strd	r2, r3, [sp, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
   18a06:	f014 fa8c 	bl	2cf22 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
   18a0a:	9000      	str	r0, [sp, #0]
            break;
   18a0c:	e034      	b.n	18a78 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
   18a0e:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18a10:	9300      	str	r3, [sp, #0]
            break;
   18a12:	e031      	b.n	18a78 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
   18a14:	2320      	movs	r3, #32
   18a16:	e7fb      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
   18a18:	f990 3001 	ldrsb.w	r3, [r0, #1]
   18a1c:	4a23      	ldr	r2, [pc, #140]	; (18aac <RegionEU868GetPhyParam+0x108>)
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18a1e:	5cd3      	ldrb	r3, [r2, r3]
   18a20:	e7f6      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
   18a22:	2301      	movs	r3, #1
   18a24:	e7f4      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_MAX_RX_WINDOW;
   18a26:	f640 33b8 	movw	r3, #3000	; 0xbb8
   18a2a:	e7f1      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
   18a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18a30:	e7ee      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
   18a32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   18a36:	e7eb      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
   18a38:	f241 3388 	movw	r3, #5000	; 0x1388
   18a3c:	e7e8      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
   18a3e:	f241 7370 	movw	r3, #6000	; 0x1770
   18a42:	e7e5      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
   18a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18a48:	4819      	ldr	r0, [pc, #100]	; (18ab0 <RegionEU868GetPhyParam+0x10c>)
   18a4a:	f012 fff5 	bl	2ba38 <randr>
   18a4e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   18a52:	e7da      	b.n	18a0a <RegionEU868GetPhyParam+0x66>
            phyParam.Value = EU868_RX_WND_2_FREQ;
   18a54:	4b17      	ldr	r3, [pc, #92]	; (18ab4 <RegionEU868GetPhyParam+0x110>)
   18a56:	e7db      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   18a58:	4b13      	ldr	r3, [pc, #76]	; (18aa8 <RegionEU868GetPhyParam+0x104>)
   18a5a:	681b      	ldr	r3, [r3, #0]
   18a5c:	33c0      	adds	r3, #192	; 0xc0
   18a5e:	e7d7      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
   18a60:	4b11      	ldr	r3, [pc, #68]	; (18aa8 <RegionEU868GetPhyParam+0x104>)
   18a62:	681b      	ldr	r3, [r3, #0]
   18a64:	33c2      	adds	r3, #194	; 0xc2
   18a66:	e7d3      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
   18a68:	2310      	movs	r3, #16
   18a6a:	e7d1      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Channels = RegionNvmGroup2->Channels;
   18a6c:	4b0e      	ldr	r3, [pc, #56]	; (18aa8 <RegionEU868GetPhyParam+0x104>)
   18a6e:	681b      	ldr	r3, [r3, #0]
   18a70:	e7ce      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
   18a72:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
   18a76:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
   18a78:	9800      	ldr	r0, [sp, #0]
   18a7a:	b005      	add	sp, #20
   18a7c:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
   18a80:	4b0d      	ldr	r3, [pc, #52]	; (18ab8 <RegionEU868GetPhyParam+0x114>)
   18a82:	e7f8      	b.n	18a76 <RegionEU868GetPhyParam+0xd2>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
   18a84:	f240 1311 	movw	r3, #273	; 0x111
   18a88:	f8ad 3000 	strh.w	r3, [sp]
            break;
   18a8c:	e7f4      	b.n	18a78 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
   18a8e:	2303      	movs	r3, #3
   18a90:	e7be      	b.n	18a10 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18a92:	f990 3001 	ldrsb.w	r3, [r0, #1]
   18a96:	4a09      	ldr	r2, [pc, #36]	; (18abc <RegionEU868GetPhyParam+0x118>)
   18a98:	e7c1      	b.n	18a1e <RegionEU868GetPhyParam+0x7a>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
   18a9a:	4909      	ldr	r1, [pc, #36]	; (18ac0 <RegionEU868GetPhyParam+0x11c>)
   18a9c:	f990 0001 	ldrsb.w	r0, [r0, #1]
   18aa0:	f7ff fef6 	bl	18890 <RegionCommonGetBandwidth>
   18aa4:	e7b1      	b.n	18a0a <RegionEU868GetPhyParam+0x66>
   18aa6:	bf00      	nop
   18aa8:	20030808 	.word	0x20030808
   18aac:	000364bc 	.word	0x000364bc
   18ab0:	fffffc18 	.word	0xfffffc18
   18ab4:	33d3e608 	.word	0x33d3e608
   18ab8:	4009999a 	.word	0x4009999a
   18abc:	000364c4 	.word	0x000364c4
   18ac0:	00033a2c 	.word	0x00033a2c

00018ac4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
   18ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
   18ac6:	210c      	movs	r1, #12
   18ac8:	4b0a      	ldr	r3, [pc, #40]	; (18af4 <RegionEU868SetBandTxDone+0x30>)
   18aca:	7802      	ldrb	r2, [r0, #0]
   18acc:	681b      	ldr	r3, [r3, #0]
   18ace:	fb01 3302 	mla	r3, r1, r2, r3
   18ad2:	7a5b      	ldrb	r3, [r3, #9]
   18ad4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   18ad8:	4b07      	ldr	r3, [pc, #28]	; (18af8 <RegionEU868SetBandTxDone+0x34>)
   18ada:	681d      	ldr	r5, [r3, #0]
   18adc:	6903      	ldr	r3, [r0, #16]
   18ade:	9300      	str	r3, [sp, #0]
   18ae0:	68c3      	ldr	r3, [r0, #12]
   18ae2:	7842      	ldrb	r2, [r0, #1]
   18ae4:	6881      	ldr	r1, [r0, #8]
   18ae6:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   18aea:	f014 f8b1 	bl	2cc50 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
   18aee:	b003      	add	sp, #12
   18af0:	bd30      	pop	{r4, r5, pc}
   18af2:	bf00      	nop
   18af4:	20030808 	.word	0x20030808
   18af8:	20030804 	.word	0x20030804

00018afc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
   18afc:	b530      	push	{r4, r5, lr}
   18afe:	b0a5      	sub	sp, #148	; 0x94
   18b00:	4604      	mov	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
   18b02:	228e      	movs	r2, #142	; 0x8e
   18b04:	2100      	movs	r1, #0
   18b06:	f10d 0002 	add.w	r0, sp, #2
   18b0a:	f018 fe3a 	bl	31782 <memset>
   18b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18b12:	2364      	movs	r3, #100	; 0x64
   18b14:	210a      	movs	r1, #10
   18b16:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   18b1a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
   18b1e:	7b22      	ldrb	r2, [r4, #12]
    Band_t bands[EU868_MAX_NB_BANDS] =
   18b20:	f8ad 3000 	strh.w	r3, [sp]
    switch( params->Type )
   18b24:	2a01      	cmp	r2, #1
    Band_t bands[EU868_MAX_NB_BANDS] =
   18b26:	f8ad 3018 	strh.w	r3, [sp, #24]
   18b2a:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
   18b2e:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    switch( params->Type )
   18b32:	d02e      	beq.n	18b92 <RegionEU868InitDefaults+0x96>
   18b34:	2a02      	cmp	r2, #2
   18b36:	d036      	beq.n	18ba6 <RegionEU868InitDefaults+0xaa>
   18b38:	bb4a      	cbnz	r2, 18b8e <RegionEU868InitDefaults+0x92>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
   18b3a:	6823      	ldr	r3, [r4, #0]
   18b3c:	b33b      	cbz	r3, 18b8e <RegionEU868InitDefaults+0x92>
   18b3e:	6863      	ldr	r3, [r4, #4]
   18b40:	b32b      	cbz	r3, 18b8e <RegionEU868InitDefaults+0x92>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
   18b42:	4d1e      	ldr	r5, [pc, #120]	; (18bbc <RegionEU868InitDefaults+0xc0>)
            RegionBands = (Band_t*) params->Bands;
   18b44:	68a0      	ldr	r0, [r4, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
   18b46:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
   18b48:	4b1d      	ldr	r3, [pc, #116]	; (18bc0 <RegionEU868InitDefaults+0xc4>)

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
   18b4a:	2290      	movs	r2, #144	; 0x90
   18b4c:	4669      	mov	r1, sp
            RegionBands = (Band_t*) params->Bands;
   18b4e:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
   18b50:	f012 ff7f 	bl	2ba52 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
   18b54:	682c      	ldr	r4, [r5, #0]
   18b56:	4b1b      	ldr	r3, [pc, #108]	; (18bc4 <RegionEU868InitDefaults+0xc8>)
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18b58:	f104 050c 	add.w	r5, r4, #12
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
   18b5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18b64:	f103 020c 	add.w	r2, r3, #12
   18b68:	ca07      	ldmia	r2, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
   18b6a:	3318      	adds	r3, #24
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18b6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
   18b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18b74:	f104 0518 	add.w	r5, r4, #24
   18b78:	e885 0007 	stmia.w	r5, {r0, r1, r2}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
   18b7c:	2307      	movs	r3, #7
   18b7e:	4621      	mov	r1, r4

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18b80:	2201      	movs	r2, #1
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
   18b82:	f821 3fc2 	strh.w	r3, [r1, #194]!
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18b86:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18b8a:	f014 f852 	bl	2cc32 <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
   18b8e:	b025      	add	sp, #148	; 0x94
   18b90:	bd30      	pop	{r4, r5, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
   18b92:	4b0a      	ldr	r3, [pc, #40]	; (18bbc <RegionEU868InitDefaults+0xc0>)
   18b94:	6818      	ldr	r0, [r3, #0]
   18b96:	2300      	movs	r3, #0
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18b98:	f100 01c2 	add.w	r1, r0, #194	; 0xc2
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
   18b9c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
   18b9e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
   18ba0:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18ba2:	30c0      	adds	r0, #192	; 0xc0
   18ba4:	e7f1      	b.n	18b8a <RegionEU868InitDefaults+0x8e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
   18ba6:	4b05      	ldr	r3, [pc, #20]	; (18bbc <RegionEU868InitDefaults+0xc0>)
   18ba8:	681b      	ldr	r3, [r3, #0]
   18baa:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
   18bae:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
   18bb2:	430a      	orrs	r2, r1
   18bb4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
   18bb8:	e7e9      	b.n	18b8e <RegionEU868InitDefaults+0x92>
   18bba:	bf00      	nop
   18bbc:	20030808 	.word	0x20030808
   18bc0:	20030804 	.word	0x20030804
   18bc4:	00033064 	.word	0x00033064

00018bc8 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
   18bc8:	b508      	push	{r3, lr}
    switch( chanMaskSet->ChannelsMaskType )
   18bca:	7902      	ldrb	r2, [r0, #4]
   18bcc:	b11a      	cbz	r2, 18bd6 <RegionEU868ChanMaskSet+0xe>
   18bce:	2a01      	cmp	r2, #1
   18bd0:	d00b      	beq.n	18bea <RegionEU868ChanMaskSet+0x22>
   18bd2:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
   18bd4:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
   18bd6:	2201      	movs	r2, #1
   18bd8:	4b07      	ldr	r3, [pc, #28]	; (18bf8 <RegionEU868ChanMaskSet+0x30>)
   18bda:	6801      	ldr	r1, [r0, #0]
   18bdc:	681b      	ldr	r3, [r3, #0]
   18bde:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   18be2:	f014 f826 	bl	2cc32 <RegionCommonChanMaskCopy>
    return true;
   18be6:	2001      	movs	r0, #1
   18be8:	e7f4      	b.n	18bd4 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
   18bea:	4b03      	ldr	r3, [pc, #12]	; (18bf8 <RegionEU868ChanMaskSet+0x30>)
   18bec:	6801      	ldr	r1, [r0, #0]
   18bee:	681b      	ldr	r3, [r3, #0]
   18bf0:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
   18bf4:	e7f5      	b.n	18be2 <RegionEU868ChanMaskSet+0x1a>
   18bf6:	bf00      	nop
   18bf8:	20030808 	.word	0x20030808

00018bfc <RegionEU868ComputeRxWindowParameters>:
void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18bfc:	2807      	cmp	r0, #7
{
   18bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18c00:	bfa8      	it	ge
   18c02:	2007      	movge	r0, #7
{
   18c04:	461c      	mov	r4, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18c06:	4d13      	ldr	r5, [pc, #76]	; (18c54 <RegionEU868ComputeRxWindowParameters+0x58>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18c08:	7058      	strb	r0, [r3, #1]
{
   18c0a:	460e      	mov	r6, r1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18c0c:	4629      	mov	r1, r5
{
   18c0e:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18c10:	f7ff fe3e 	bl	18890 <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
   18c14:	f994 3001 	ldrsb.w	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18c18:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
   18c1a:	2b07      	cmp	r3, #7
   18c1c:	d113      	bne.n	18c46 <RegionEU868ComputeRxWindowParameters+0x4a>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
   18c1e:	2032      	movs	r0, #50	; 0x32
   18c20:	f014 f89f 	bl	2cd62 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
   18c24:	4b0c      	ldr	r3, [pc, #48]	; (18c58 <RegionEU868ComputeRxWindowParameters+0x5c>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
   18c26:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
   18c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   18c2a:	4798      	blx	r3
   18c2c:	f104 020c 	add.w	r2, r4, #12
   18c30:	3408      	adds	r4, #8
   18c32:	4603      	mov	r3, r0
   18c34:	9201      	str	r2, [sp, #4]
   18c36:	4631      	mov	r1, r6
   18c38:	463a      	mov	r2, r7
   18c3a:	4628      	mov	r0, r5
   18c3c:	9400      	str	r4, [sp, #0]
   18c3e:	f014 f895 	bl	2cd6c <RegionCommonComputeRxWindowParameters>
}
   18c42:	b003      	add	sp, #12
   18c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
   18c46:	4a05      	ldr	r2, [pc, #20]	; (18c5c <RegionEU868ComputeRxWindowParameters+0x60>)
   18c48:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   18c4c:	5cd0      	ldrb	r0, [r2, r3]
   18c4e:	f7ff fe17 	bl	18880 <RegionCommonComputeSymbolTimeLoRa>
   18c52:	e7e7      	b.n	18c24 <RegionEU868ComputeRxWindowParameters+0x28>
   18c54:	00033a2c 	.word	0x00033a2c
   18c58:	000338dc 	.word	0x000338dc
   18c5c:	000364c4 	.word	0x000364c4

00018c60 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
   18c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
   18c64:	4f2f      	ldr	r7, [pc, #188]	; (18d24 <RegionEU868RxConfig+0xc4>)
{
   18c66:	b08a      	sub	sp, #40	; 0x28
    if( Radio.GetStatus( ) != RF_IDLE )
   18c68:	687b      	ldr	r3, [r7, #4]
{
   18c6a:	4605      	mov	r5, r0
   18c6c:	4688      	mov	r8, r1
    int8_t dr = rxConfig->Datarate;
   18c6e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint32_t frequency = rxConfig->Frequency;
   18c72:	f8d0 9004 	ldr.w	r9, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
   18c76:	4798      	blx	r3
   18c78:	4604      	mov	r4, r0
   18c7a:	2800      	cmp	r0, #0
   18c7c:	d150      	bne.n	18d20 <RegionEU868RxConfig+0xc0>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
   18c7e:	7cab      	ldrb	r3, [r5, #18]
   18c80:	b973      	cbnz	r3, 18ca0 <RegionEU868RxConfig+0x40>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
   18c82:	4a29      	ldr	r2, [pc, #164]	; (18d28 <RegionEU868RxConfig+0xc8>)
   18c84:	782b      	ldrb	r3, [r5, #0]
   18c86:	6812      	ldr	r2, [r2, #0]
   18c88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18c8c:	0099      	lsls	r1, r3, #2
   18c8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18c92:	f8d3 9004 	ldr.w	r9, [r3, #4]
   18c96:	f1b9 0f00 	cmp.w	r9, #0
   18c9a:	d101      	bne.n	18ca0 <RegionEU868RxConfig+0x40>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
   18c9c:	f852 9001 	ldr.w	r9, [r2, r1]
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
   18ca0:	4b22      	ldr	r3, [pc, #136]	; (18d2c <RegionEU868RxConfig+0xcc>)

    Radio.SetChannel( frequency );
   18ca2:	4648      	mov	r0, r9
    phyDr = DataratesEU868[dr];
   18ca4:	f913 a006 	ldrsb.w	sl, [r3, r6]
    Radio.SetChannel( frequency );
   18ca8:	68fb      	ldr	r3, [r7, #12]
   18caa:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
   18cac:	7c6b      	ldrb	r3, [r5, #17]
   18cae:	2e07      	cmp	r6, #7
   18cb0:	892a      	ldrh	r2, [r5, #8]
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
   18cb2:	f8d7 9018 	ldr.w	r9, [r7, #24]
   18cb6:	9309      	str	r3, [sp, #36]	; 0x24
    if( dr == DR_7 )
   18cb8:	d121      	bne.n	18cfe <RegionEU868RxConfig+0x9e>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
   18cba:	2300      	movs	r3, #0
   18cbc:	2101      	movs	r1, #1
   18cbe:	e9cd 3104 	strd	r3, r1, [sp, #16]
   18cc2:	2105      	movs	r1, #5
   18cc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18cc8:	4a19      	ldr	r2, [pc, #100]	; (18d30 <RegionEU868RxConfig+0xd0>)
   18cca:	4618      	mov	r0, r3
   18ccc:	e9cd 2100 	strd	r2, r1, [sp]
   18cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18cd4:	f24c 3150 	movw	r1, #50000	; 0xc350
   18cd8:	fb02 f20a 	mul.w	r2, r2, sl
   18cdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   18ce0:	9306      	str	r3, [sp, #24]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
   18ce2:	47c8      	blx	r9
    }

    Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarateEU868[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
   18ce4:	4b13      	ldr	r3, [pc, #76]	; (18d34 <RegionEU868RxConfig+0xd4>)
   18ce6:	4620      	mov	r0, r4
   18ce8:	5d99      	ldrb	r1, [r3, r6]
   18cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18cec:	310d      	adds	r1, #13
   18cee:	b2c9      	uxtb	r1, r1
   18cf0:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    return true;
   18cf2:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
   18cf4:	f888 6000 	strb.w	r6, [r8]
}
   18cf8:	b00a      	add	sp, #40	; 0x28
   18cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
   18cfe:	2100      	movs	r1, #0
   18d00:	2401      	movs	r4, #1
   18d02:	2308      	movs	r3, #8
   18d04:	e9cd 1407 	strd	r1, r4, [sp, #28]
   18d08:	e9cd 1300 	strd	r1, r3, [sp]
   18d0c:	e9cd 1105 	strd	r1, r1, [sp, #20]
   18d10:	e9cd 1103 	strd	r1, r1, [sp, #12]
   18d14:	9202      	str	r2, [sp, #8]
   18d16:	4623      	mov	r3, r4
   18d18:	4652      	mov	r2, sl
   18d1a:	4620      	mov	r0, r4
   18d1c:	78a9      	ldrb	r1, [r5, #2]
   18d1e:	e7e0      	b.n	18ce2 <RegionEU868RxConfig+0x82>
        return false;
   18d20:	2000      	movs	r0, #0
   18d22:	e7e9      	b.n	18cf8 <RegionEU868RxConfig+0x98>
   18d24:	000338dc 	.word	0x000338dc
   18d28:	20030808 	.word	0x20030808
   18d2c:	000364c4 	.word	0x000364c4
   18d30:	00014585 	.word	0x00014585
   18d34:	000364bc 	.word	0x000364bc

00018d38 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
   18d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18d3c:	250c      	movs	r5, #12
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   18d3e:	f990 3001 	ldrsb.w	r3, [r0, #1]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18d42:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 18e2c <RegionEU868TxConfig+0xf4>
{
   18d46:	4692      	mov	sl, r2
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   18d48:	4a39      	ldr	r2, [pc, #228]	; (18e30 <RegionEU868TxConfig+0xf8>)
{
   18d4a:	b08d      	sub	sp, #52	; 0x34
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   18d4c:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18d50:	7802      	ldrb	r2, [r0, #0]
   18d52:	f8d9 3000 	ldr.w	r3, [r9]
{
   18d56:	4604      	mov	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18d58:	fb05 3302 	mla	r3, r5, r2, r3
   18d5c:	4a35      	ldr	r2, [pc, #212]	; (18e34 <RegionEU868TxConfig+0xfc>)
   18d5e:	7a5b      	ldrb	r3, [r3, #9]
   18d60:	6812      	ldr	r2, [r2, #0]
   18d62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18d66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
{
   18d6a:	910b      	str	r1, [sp, #44]	; 0x2c
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18d6c:	f990 0002 	ldrsb.w	r0, [r0, #2]
   18d70:	f993 1002 	ldrsb.w	r1, [r3, #2]
   18d74:	f014 f8f0 	bl	2cf58 <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   18d78:	492f      	ldr	r1, [pc, #188]	; (18e38 <RegionEU868TxConfig+0x100>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   18d7a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   18d7c:	f994 0001 	ldrsb.w	r0, [r4, #1]
   18d80:	f7ff fd86 	bl	18890 <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   18d84:	68a2      	ldr	r2, [r4, #8]
   18d86:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   18d88:	4680      	mov	r8, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   18d8a:	4630      	mov	r0, r6
   18d8c:	f014 f816 	bl	2cdbc <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
   18d90:	7822      	ldrb	r2, [r4, #0]
   18d92:	f8d9 1000 	ldr.w	r1, [r9]
   18d96:	436a      	muls	r2, r5
   18d98:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 18e3c <RegionEU868TxConfig+0x104>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   18d9c:	4607      	mov	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
   18d9e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   18da2:	5888      	ldr	r0, [r1, r2]
   18da4:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   18da6:	f8d9 301c 	ldr.w	r3, [r9, #28]
   18daa:	2500      	movs	r5, #0
   18dac:	469c      	mov	ip, r3
    if( txConfig->Datarate == DR_7 )
   18dae:	f994 3001 	ldrsb.w	r3, [r4, #1]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   18db2:	e9cd 5505 	strd	r5, r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
   18db6:	2b07      	cmp	r3, #7
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   18db8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   18dbc:	e9cd 5307 	strd	r5, r3, [sp, #28]
    if( txConfig->Datarate == DR_7 )
   18dc0:	d123      	bne.n	18e0a <RegionEU868TxConfig+0xd2>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   18dc2:	2301      	movs	r3, #1
   18dc4:	e9cd 5303 	strd	r5, r3, [sp, #12]
   18dc8:	2305      	movs	r3, #5
   18dca:	e9cd 5301 	strd	r5, r3, [sp, #4]
   18dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18dd2:	fb03 f30b 	mul.w	r3, r3, fp
   18dd6:	4639      	mov	r1, r7
   18dd8:	9300      	str	r3, [sp, #0]
   18dda:	f246 12a8 	movw	r2, #25000	; 0x61a8
   18dde:	4643      	mov	r3, r8
   18de0:	4628      	mov	r0, r5
   18de2:	4667      	mov	r7, ip
   18de4:	47b8      	blx	r7
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
   18de6:	89a1      	ldrh	r1, [r4, #12]
   18de8:	f994 0001 	ldrsb.w	r0, [r4, #1]
   18dec:	f7ff fd62 	bl	188b4 <GetTimeOnAir>
   18df0:	f8ca 0000 	str.w	r0, [sl]

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
   18df4:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
   18df8:	4628      	mov	r0, r5
   18dfa:	7b21      	ldrb	r1, [r4, #12]
   18dfc:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
   18dfe:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
   18e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18e02:	701e      	strb	r6, [r3, #0]
}
   18e04:	b00d      	add	sp, #52	; 0x34
   18e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
   18e0a:	2001      	movs	r0, #1
   18e0c:	2308      	movs	r3, #8
   18e0e:	e9cd 5003 	strd	r5, r0, [sp, #12]
   18e12:	e9cd 0301 	strd	r0, r3, [sp, #4]
   18e16:	462a      	mov	r2, r5
   18e18:	4643      	mov	r3, r8
   18e1a:	4665      	mov	r5, ip
   18e1c:	4639      	mov	r1, r7
   18e1e:	f8cd b000 	str.w	fp, [sp]
   18e22:	47a8      	blx	r5
        modem = MODEM_LORA;
   18e24:	2001      	movs	r0, #1
   18e26:	4605      	mov	r5, r0
   18e28:	e7dd      	b.n	18de6 <RegionEU868TxConfig+0xae>
   18e2a:	bf00      	nop
   18e2c:	20030808 	.word	0x20030808
   18e30:	000364c4 	.word	0x000364c4
   18e34:	20030804 	.word	0x20030804
   18e38:	00033a2c 	.word	0x00033a2c
   18e3c:	000338dc 	.word	0x000338dc

00018e40 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
   18e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
   18e44:	2400      	movs	r4, #0
{
   18e46:	4605      	mov	r5, r0
   18e48:	468a      	mov	sl, r1
   18e4a:	4691      	mov	r9, r2
   18e4c:	4698      	mov	r8, r3
    uint8_t status = 0x07;
   18e4e:	2607      	movs	r6, #7
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
                    {
                        chMask |= 1 << i;
   18e50:	f04f 0b01 	mov.w	fp, #1
{
   18e54:	b08d      	sub	sp, #52	; 0x34
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
   18e56:	9402      	str	r4, [sp, #8]
   18e58:	f8ad 400c 	strh.w	r4, [sp, #12]
    uint16_t chMask = 0;
   18e5c:	f8ad 4006 	strh.w	r4, [sp, #6]
    while( bytesProcessed < linkAdrReq->PayloadSize )
   18e60:	7a2b      	ldrb	r3, [r5, #8]
   18e62:	42a3      	cmp	r3, r4
   18e64:	d906      	bls.n	18e74 <RegionEU868LinkAdrReq+0x34>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
   18e66:	6868      	ldr	r0, [r5, #4]
   18e68:	a902      	add	r1, sp, #8
   18e6a:	4420      	add	r0, r4
   18e6c:	f013 ff14 	bl	2cc98 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
   18e70:	2800      	cmp	r0, #0
   18e72:	d153      	bne.n	18f1c <RegionEU868LinkAdrReq+0xdc>
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
   18e74:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.Status = status;
   18e76:	f88d 6014 	strb.w	r6, [sp, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
   18e7a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
   18e7e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = &chMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
   18e82:	4e45      	ldr	r6, [pc, #276]	; (18f98 <RegionEU868LinkAdrReq+0x158>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
   18e84:	f88d 3016 	strb.w	r3, [sp, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
   18e88:	f89d 300a 	ldrb.w	r3, [sp, #10]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18e8c:	f10d 020a 	add.w	r2, sp, #10
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
   18e90:	f88d 3017 	strb.w	r3, [sp, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
   18e94:	f89d 3008 	ldrb.w	r3, [sp, #8]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18e98:	f10d 0109 	add.w	r1, sp, #9
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
   18e9c:	f88d 3018 	strb.w	r3, [sp, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
   18ea0:	7aeb      	ldrb	r3, [r5, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18ea2:	a804      	add	r0, sp, #16
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
   18ea4:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
   18ea8:	7b2b      	ldrb	r3, [r5, #12]
   18eaa:	f88d 301a 	strb.w	r3, [sp, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
   18eae:	7b6b      	ldrb	r3, [r5, #13]
   18eb0:	f88d 301b 	strb.w	r3, [sp, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
   18eb4:	2310      	movs	r3, #16
   18eb6:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
   18eba:	f10d 0306 	add.w	r3, sp, #6
   18ebe:	9308      	str	r3, [sp, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
   18ec0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
   18ec4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
   18ec8:	6833      	ldr	r3, [r6, #0]
   18eca:	930a      	str	r3, [sp, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
   18ecc:	2307      	movs	r3, #7
   18ece:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
   18ed2:	682b      	ldr	r3, [r5, #0]
   18ed4:	9304      	str	r3, [sp, #16]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18ed6:	ab02      	add	r3, sp, #8
   18ed8:	f013 fef8 	bl	2cccc <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
   18edc:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   18ede:	4605      	mov	r5, r0
    if( status == 0x07 )
   18ee0:	d10a      	bne.n	18ef8 <RegionEU868LinkAdrReq+0xb8>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
   18ee2:	6830      	ldr	r0, [r6, #0]
   18ee4:	2202      	movs	r2, #2
   18ee6:	2100      	movs	r1, #0
   18ee8:	30c0      	adds	r0, #192	; 0xc0
   18eea:	f012 fdc6 	bl	2ba7a <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
   18eee:	6833      	ldr	r3, [r6, #0]
   18ef0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18ef4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
   18ef8:	4628      	mov	r0, r5
    *drOut = linkAdrParams.Datarate;
   18efa:	f89d 3009 	ldrb.w	r3, [sp, #9]
   18efe:	f88a 3000 	strb.w	r3, [sl]
    *txPowOut = linkAdrParams.TxPower;
   18f02:	f89d 300a 	ldrb.w	r3, [sp, #10]
   18f06:	f889 3000 	strb.w	r3, [r9]
    *nbRepOut = linkAdrParams.NbRep;
   18f0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18f0e:	f888 3000 	strb.w	r3, [r8]
    *nbBytesParsed = bytesProcessed;
   18f12:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18f14:	701c      	strb	r4, [r3, #0]
}
   18f16:	b00d      	add	sp, #52	; 0x34
   18f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chMask = linkAdrParams.ChMask;
   18f1c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
   18f20:	f89d 300b 	ldrb.w	r3, [sp, #11]
        bytesProcessed += nextIndex;
   18f24:	4420      	add	r0, r4
   18f26:	b2c4      	uxtb	r4, r0
        chMask = linkAdrParams.ChMask;
   18f28:	f8ad 7006 	strh.w	r7, [sp, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
   18f2c:	b9f3      	cbnz	r3, 18f6c <RegionEU868LinkAdrReq+0x12c>
   18f2e:	b317      	cbz	r7, 18f76 <RegionEU868LinkAdrReq+0x136>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
   18f30:	2000      	movs	r0, #0
   18f32:	4a19      	ldr	r2, [pc, #100]	; (18f98 <RegionEU868LinkAdrReq+0x158>)
   18f34:	2607      	movs	r6, #7
   18f36:	6811      	ldr	r1, [r2, #0]
   18f38:	f04f 0c0c 	mov.w	ip, #12
   18f3c:	4602      	mov	r2, r0
                if( linkAdrParams.ChMaskCtrl == 6 )
   18f3e:	2b06      	cmp	r3, #6
   18f40:	d11b      	bne.n	18f7a <RegionEU868LinkAdrReq+0x13a>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
   18f42:	fb0c fe00 	mul.w	lr, ip, r0
   18f46:	f851 e00e 	ldr.w	lr, [r1, lr]
   18f4a:	f1be 0f00 	cmp.w	lr, #0
   18f4e:	d004      	beq.n	18f5a <RegionEU868LinkAdrReq+0x11a>
                        chMask |= 1 << i;
   18f50:	fa0b f200 	lsl.w	r2, fp, r0
   18f54:	433a      	orrs	r2, r7
   18f56:	b297      	uxth	r7, r2
   18f58:	2201      	movs	r2, #1
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
   18f5a:	3001      	adds	r0, #1
   18f5c:	2810      	cmp	r0, #16
   18f5e:	d1ee      	bne.n	18f3e <RegionEU868LinkAdrReq+0xfe>
   18f60:	2a00      	cmp	r2, #0
   18f62:	f43f af7d 	beq.w	18e60 <RegionEU868LinkAdrReq+0x20>
   18f66:	f8ad 7006 	strh.w	r7, [sp, #6]
   18f6a:	e779      	b.n	18e60 <RegionEU868LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
   18f6c:	1e5a      	subs	r2, r3, #1
   18f6e:	2a04      	cmp	r2, #4
   18f70:	d901      	bls.n	18f76 <RegionEU868LinkAdrReq+0x136>
   18f72:	2b06      	cmp	r3, #6
   18f74:	d0dc      	beq.n	18f30 <RegionEU868LinkAdrReq+0xf0>
            status &= 0xFE; // Channel mask KO
   18f76:	2606      	movs	r6, #6
   18f78:	e772      	b.n	18e60 <RegionEU868LinkAdrReq+0x20>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   18f7a:	fa47 fe00 	asr.w	lr, r7, r0
   18f7e:	f01e 0f01 	tst.w	lr, #1
   18f82:	d0ea      	beq.n	18f5a <RegionEU868LinkAdrReq+0x11a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
   18f84:	fb0c fe00 	mul.w	lr, ip, r0
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   18f88:	f851 e00e 	ldr.w	lr, [r1, lr]
                        status &= 0xFE; // Channel mask KO
   18f8c:	f1be 0f00 	cmp.w	lr, #0
   18f90:	bf08      	it	eq
   18f92:	2606      	moveq	r6, #6
   18f94:	e7e1      	b.n	18f5a <RegionEU868LinkAdrReq+0x11a>
   18f96:	bf00      	nop
   18f98:	20030808 	.word	0x20030808

00018f9c <RegionEU868DlChannelReq>:
    // Do not accept the request
    return -1;
}

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
   18f9c:	b513      	push	{r0, r1, r4, lr}
   18f9e:	4604      	mov	r4, r0
    uint8_t status = 0x03;
    uint8_t band = 0;
   18fa0:	2000      	movs	r0, #0

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
   18fa2:	7823      	ldrb	r3, [r4, #0]
    uint8_t band = 0;
   18fa4:	f88d 0007 	strb.w	r0, [sp, #7]
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
   18fa8:	2b0f      	cmp	r3, #15
   18faa:	d81c      	bhi.n	18fe6 <RegionEU868DlChannelReq+0x4a>
    {
        return 0;
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
   18fac:	6860      	ldr	r0, [r4, #4]
   18fae:	f10d 0107 	add.w	r1, sp, #7
   18fb2:	f7ff fca9 	bl	18908 <VerifyRfFreq>
   18fb6:	7823      	ldrb	r3, [r4, #0]
   18fb8:	4a0d      	ldr	r2, [pc, #52]	; (18ff0 <RegionEU868DlChannelReq+0x54>)
   18fba:	b158      	cbz	r0, 18fd4 <RegionEU868DlChannelReq+0x38>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   18fbc:	6812      	ldr	r2, [r2, #0]
   18fbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18fc2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   18fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18fca:	b173      	cbz	r3, 18fea <RegionEU868DlChannelReq+0x4e>
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
   18fcc:	6863      	ldr	r3, [r4, #4]
   18fce:	2003      	movs	r0, #3
   18fd0:	604b      	str	r3, [r1, #4]
   18fd2:	e007      	b.n	18fe4 <RegionEU868DlChannelReq+0x48>
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   18fd4:	210c      	movs	r1, #12
   18fd6:	434b      	muls	r3, r1
   18fd8:	6812      	ldr	r2, [r2, #0]
        status &= 0xFE;
   18fda:	2002      	movs	r0, #2
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   18fdc:	58d3      	ldr	r3, [r2, r3]
   18fde:	b90b      	cbnz	r3, 18fe4 <RegionEU868DlChannelReq+0x48>
        status &= 0xFD;
   18fe0:	f000 0001 	and.w	r0, r0, #1
    }

    return status;
   18fe4:	b240      	sxtb	r0, r0
}
   18fe6:	b002      	add	sp, #8
   18fe8:	bd10      	pop	{r4, pc}
    uint8_t status = 0x03;
   18fea:	2003      	movs	r0, #3
   18fec:	e7f8      	b.n	18fe0 <RegionEU868DlChannelReq+0x44>
   18fee:	bf00      	nop
   18ff0:	20030808 	.word	0x20030808

00018ff4 <RegionEU868NextChannel>:
{
    return currentDr;
}

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
   18ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ff8:	460e      	mov	r6, r1
   18ffa:	461f      	mov	r7, r3
    uint8_t nbEnabledChannels = 0;
   18ffc:	2100      	movs	r1, #0
    uint8_t nbRestrictedChannels = 0;
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
   18ffe:	2307      	movs	r3, #7

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   19000:	4d37      	ldr	r5, [pc, #220]	; (190e0 <RegionEU868NextChannel+0xec>)
{
   19002:	4604      	mov	r4, r0
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   19004:	6828      	ldr	r0, [r5, #0]
{
   19006:	b096      	sub	sp, #88	; 0x58
   19008:	4690      	mov	r8, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   1900a:	30c0      	adds	r0, #192	; 0xc0
   1900c:	2201      	movs	r2, #1
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
   1900e:	e9cd 1104 	strd	r1, r1, [sp, #16]
   19012:	e9cd 1106 	strd	r1, r1, [sp, #24]
    uint8_t nbEnabledChannels = 0;
   19016:	f88d 100c 	strb.w	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
   1901a:	f88d 100d 	strb.w	r1, [sp, #13]
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
   1901e:	f8ad 300e 	strh.w	r3, [sp, #14]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   19022:	f013 fde8 	bl	2cbf6 <RegionCommonCountChannels>
   19026:	b930      	cbnz	r0, 19036 <RegionEU868NextChannel+0x42>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   19028:	682a      	ldr	r2, [r5, #0]
   1902a:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
   1902e:	f043 0307 	orr.w	r3, r3, #7
   19032:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   19036:	682a      	ldr	r2, [r5, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
   19038:	7a63      	ldrb	r3, [r4, #9]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   1903a:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
   1903e:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
   19042:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    countChannelsParams.Bands = RegionBands;
   19046:	4a27      	ldr	r2, [pc, #156]	; (190e4 <RegionEU868NextChannel+0xf0>)
    countChannelsParams.Joined = nextChanParams->Joined;
   19048:	f88d 3020 	strb.w	r3, [sp, #32]
    countChannelsParams.Bands = RegionBands;
   1904c:	6812      	ldr	r2, [r2, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
   1904e:	f994 3008 	ldrsb.w	r3, [r4, #8]
    countChannelsParams.Bands = RegionBands;
   19052:	920b      	str	r2, [sp, #44]	; 0x2c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
   19054:	2210      	movs	r2, #16
   19056:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    countChannelsParams.JoinChannels = &joinChannels;
   1905a:	f10d 020e 	add.w	r2, sp, #14
   1905e:	920d      	str	r2, [sp, #52]	; 0x34
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
   19060:	6822      	ldr	r2, [r4, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
   19062:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
   19066:	920e      	str	r2, [sp, #56]	; 0x38
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
   19068:	6862      	ldr	r2, [r4, #4]
   1906a:	920f      	str	r2, [sp, #60]	; 0x3c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
   1906c:	7aa2      	ldrb	r2, [r4, #10]
   1906e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
   19072:	2206      	movs	r2, #6
   19074:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
   19078:	aa11      	add	r2, sp, #68	; 0x44
   1907a:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
   1907e:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   19080:	8ae1      	ldrh	r1, [r4, #22]
   19082:	4618      	mov	r0, r3
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
   19084:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   19088:	f7ff fc14 	bl	188b4 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
   1908c:	ab08      	add	r3, sp, #32
   1908e:	9315      	str	r3, [sp, #84]	; 0x54

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
   19090:	f10d 030d 	add.w	r3, sp, #13
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   19094:	9014      	str	r0, [sp, #80]	; 0x50
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
   19096:	9300      	str	r3, [sp, #0]
   19098:	4639      	mov	r1, r7
   1909a:	f8cd 8004 	str.w	r8, [sp, #4]
   1909e:	ab03      	add	r3, sp, #12
   190a0:	aa04      	add	r2, sp, #16
   190a2:	a80e      	add	r0, sp, #56	; 0x38
   190a4:	f013 fef9 	bl	2ce9a <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
   190a8:	4604      	mov	r4, r0
   190aa:	b978      	cbnz	r0, 190cc <RegionEU868NextChannel+0xd8>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
   190ac:	f89d 100c 	ldrb.w	r1, [sp, #12]
   190b0:	3901      	subs	r1, #1
   190b2:	f012 fcc1 	bl	2ba38 <randr>
   190b6:	f100 0358 	add.w	r3, r0, #88	; 0x58
   190ba:	eb0d 0003 	add.w	r0, sp, r3
   190be:	f810 3c48 	ldrb.w	r3, [r0, #-72]
   190c2:	7033      	strb	r3, [r6, #0]
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
   190c4:	4620      	mov	r0, r4
   190c6:	b016      	add	sp, #88	; 0x58
   190c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
   190cc:	280c      	cmp	r0, #12
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   190ce:	bf01      	itttt	eq
   190d0:	682a      	ldreq	r2, [r5, #0]
   190d2:	f8b2 30c0 	ldrheq.w	r3, [r2, #192]	; 0xc0
   190d6:	f043 0307 	orreq.w	r3, r3, #7
   190da:	f8a2 30c0 	strheq.w	r3, [r2, #192]	; 0xc0
   190de:	e7f1      	b.n	190c4 <RegionEU868NextChannel+0xd0>
   190e0:	20030808 	.word	0x20030808
   190e4:	20030804 	.word	0x20030804

000190e8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
   190e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t band = 0;
   190ea:	2700      	movs	r7, #0
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
   190ec:	7906      	ldrb	r6, [r0, #4]
{
   190ee:	4605      	mov	r5, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   190f0:	2e02      	cmp	r6, #2
    uint8_t band = 0;
   190f2:	f88d 7007 	strb.w	r7, [sp, #7]
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   190f6:	d932      	bls.n	1915e <RegionEU868ChannelAdd+0x76>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
   190f8:	2e0f      	cmp	r6, #15
   190fa:	d84d      	bhi.n	19198 <RegionEU868ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   190fc:	6803      	ldr	r3, [r0, #0]
   190fe:	2207      	movs	r2, #7
   19100:	7a18      	ldrb	r0, [r3, #8]
   19102:	4639      	mov	r1, r7
   19104:	f340 0003 	sbfx	r0, r0, #0, #4
   19108:	b240      	sxtb	r0, r0
   1910a:	f013 fd52 	bl	2cbb2 <RegionCommonValueInRange>
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   1910e:	682b      	ldr	r3, [r5, #0]
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   19110:	4604      	mov	r4, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   19112:	7a18      	ldrb	r0, [r3, #8]
   19114:	2207      	movs	r2, #7
   19116:	f340 1003 	sbfx	r0, r0, #4, #4
   1911a:	4639      	mov	r1, r7
   1911c:	b240      	sxtb	r0, r0
   1911e:	f013 fd48 	bl	2cbb2 <RegionCommonValueInRange>
   19122:	b1b0      	cbz	r0, 19152 <RegionEU868ChannelAdd+0x6a>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   19124:	fab4 f484 	clz	r4, r4
   19128:	0964      	lsrs	r4, r4, #5
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
   1912a:	682b      	ldr	r3, [r5, #0]
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   1912c:	f10d 0107 	add.w	r1, sp, #7
   19130:	6818      	ldr	r0, [r3, #0]
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
   19132:	7a1b      	ldrb	r3, [r3, #8]
   19134:	f343 0203 	sbfx	r2, r3, #0, #4
   19138:	f343 1303 	sbfx	r3, r3, #4, #4
   1913c:	b252      	sxtb	r2, r2
   1913e:	b25b      	sxtb	r3, r3
   19140:	429a      	cmp	r2, r3
   19142:	dd08      	ble.n	19156 <RegionEU868ChannelAdd+0x6e>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   19144:	f7ff fbe0 	bl	18908 <VerifyRfFreq>
   19148:	f1c0 0006 	rsb	r0, r0, #6
   1914c:	b2c0      	uxtb	r0, r0

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
    RegionNvmGroup2->Channels[id].Band = band;
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
   1914e:	b003      	add	sp, #12
   19150:	bdf0      	pop	{r4, r5, r6, r7, pc}
        drInvalid = true;
   19152:	2401      	movs	r4, #1
   19154:	e7e9      	b.n	1912a <RegionEU868ChannelAdd+0x42>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   19156:	f7ff fbd7 	bl	18908 <VerifyRfFreq>
   1915a:	b910      	cbnz	r0, 19162 <RegionEU868ChannelAdd+0x7a>
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
   1915c:	b1f4      	cbz	r4, 1919c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
   1915e:	2006      	movs	r0, #6
   19160:	e7f5      	b.n	1914e <RegionEU868ChannelAdd+0x66>
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
   19162:	b9ec      	cbnz	r4, 191a0 <RegionEU868ChannelAdd+0xb8>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
   19164:	4f0f      	ldr	r7, [pc, #60]	; (191a4 <RegionEU868ChannelAdd+0xbc>)
   19166:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   1916a:	683b      	ldr	r3, [r7, #0]
   1916c:	220c      	movs	r2, #12
   1916e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19172:	6829      	ldr	r1, [r5, #0]
   19174:	f012 fc6d 	bl	2ba52 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
   19178:	230c      	movs	r3, #12
   1917a:	683a      	ldr	r2, [r7, #0]
   1917c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   19180:	fb03 2306 	mla	r3, r3, r6, r2
   19184:	7259      	strb	r1, [r3, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
   19186:	2301      	movs	r3, #1
   19188:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
   1918c:	40b3      	lsls	r3, r6
   1918e:	430b      	orrs	r3, r1
    return LORAMAC_STATUS_OK;
   19190:	4620      	mov	r0, r4
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
   19192:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
   19196:	e7da      	b.n	1914e <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   19198:	2003      	movs	r0, #3
   1919a:	e7d8      	b.n	1914e <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
   1919c:	2004      	movs	r0, #4
   1919e:	e7d6      	b.n	1914e <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_DATARATE_INVALID;
   191a0:	2005      	movs	r0, #5
   191a2:	e7d4      	b.n	1914e <RegionEU868ChannelAdd+0x66>
   191a4:	20030808 	.word	0x20030808

000191a8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
   191a8:	b410      	push	{r4}
    uint8_t id = channelRemove->ChannelId;
   191aa:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   191ac:	2902      	cmp	r1, #2
   191ae:	d90d      	bls.n	191cc <RegionEU868ChannelsRemove+0x24>
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
   191b0:	4b08      	ldr	r3, [pc, #32]	; (191d4 <RegionEU868ChannelsRemove+0x2c>)
   191b2:	2200      	movs	r2, #0
   191b4:	6818      	ldr	r0, [r3, #0]
   191b6:	230c      	movs	r3, #12
   191b8:	434b      	muls	r3, r1
   191ba:	18c4      	adds	r4, r0, r3
   191bc:	50c2      	str	r2, [r0, r3]
   191be:	e9c4 2201 	strd	r2, r2, [r4, #4]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
   191c2:	30c0      	adds	r0, #192	; 0xc0
   191c4:	2210      	movs	r2, #16
}
   191c6:	bc10      	pop	{r4}
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
   191c8:	f013 bcfc 	b.w	2cbc4 <RegionCommonChanDisable>
}
   191cc:	2000      	movs	r0, #0
   191ce:	bc10      	pop	{r4}
   191d0:	4770      	bx	lr
   191d2:	bf00      	nop
   191d4:	20030808 	.word	0x20030808

000191d8 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   191d8:	4b0e      	ldr	r3, [pc, #56]	; (19214 <bt_hex+0x3c>)
   191da:	2940      	cmp	r1, #64	; 0x40
   191dc:	bf28      	it	cs
   191de:	2140      	movcs	r1, #64	; 0x40
{
   191e0:	b570      	push	{r4, r5, r6, lr}
   191e2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   191e4:	4c0c      	ldr	r4, [pc, #48]	; (19218 <bt_hex+0x40>)
   191e6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   191e8:	42b0      	cmp	r0, r6
   191ea:	f103 0302 	add.w	r3, r3, #2
   191ee:	d104      	bne.n	191fa <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   191f0:	2300      	movs	r3, #0
   191f2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   191f6:	4807      	ldr	r0, [pc, #28]	; (19214 <bt_hex+0x3c>)
   191f8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   191fa:	7802      	ldrb	r2, [r0, #0]
   191fc:	0912      	lsrs	r2, r2, #4
   191fe:	5ca2      	ldrb	r2, [r4, r2]
   19200:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   19204:	f810 2b01 	ldrb.w	r2, [r0], #1
   19208:	f002 020f 	and.w	r2, r2, #15
   1920c:	5ca2      	ldrb	r2, [r4, r2]
   1920e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   19212:	e7e9      	b.n	191e8 <bt_hex+0x10>
   19214:	2003191b 	.word	0x2003191b
   19218:	000364e6 	.word	0x000364e6

0001921c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   1921c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1921e:	7803      	ldrb	r3, [r0, #0]
   19220:	b08b      	sub	sp, #44	; 0x2c
   19222:	4604      	mov	r4, r0
   19224:	ad07      	add	r5, sp, #28
   19226:	2b03      	cmp	r3, #3
   19228:	d821      	bhi.n	1926e <bt_addr_le_str+0x52>
   1922a:	e8df f003 	tbb	[pc, r3]
   1922e:	1a02      	.short	0x1a02
   19230:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   19232:	4912      	ldr	r1, [pc, #72]	; (1927c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   19234:	4628      	mov	r0, r5
   19236:	f018 fbf3 	bl	31a20 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1923a:	9505      	str	r5, [sp, #20]
   1923c:	7863      	ldrb	r3, [r4, #1]
   1923e:	211e      	movs	r1, #30
   19240:	9304      	str	r3, [sp, #16]
   19242:	78a3      	ldrb	r3, [r4, #2]
   19244:	4a0e      	ldr	r2, [pc, #56]	; (19280 <bt_addr_le_str+0x64>)
   19246:	9303      	str	r3, [sp, #12]
   19248:	78e3      	ldrb	r3, [r4, #3]
   1924a:	480e      	ldr	r0, [pc, #56]	; (19284 <bt_addr_le_str+0x68>)
   1924c:	9302      	str	r3, [sp, #8]
   1924e:	7923      	ldrb	r3, [r4, #4]
   19250:	9301      	str	r3, [sp, #4]
   19252:	7963      	ldrb	r3, [r4, #5]
   19254:	9300      	str	r3, [sp, #0]
   19256:	79a3      	ldrb	r3, [r4, #6]
   19258:	f010 ff95 	bl	2a186 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   1925c:	4809      	ldr	r0, [pc, #36]	; (19284 <bt_addr_le_str+0x68>)
   1925e:	b00b      	add	sp, #44	; 0x2c
   19260:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   19262:	4909      	ldr	r1, [pc, #36]	; (19288 <bt_addr_le_str+0x6c>)
   19264:	e7e6      	b.n	19234 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   19266:	4909      	ldr	r1, [pc, #36]	; (1928c <bt_addr_le_str+0x70>)
   19268:	e7e4      	b.n	19234 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   1926a:	4909      	ldr	r1, [pc, #36]	; (19290 <bt_addr_le_str+0x74>)
   1926c:	e7e2      	b.n	19234 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1926e:	210a      	movs	r1, #10
   19270:	4628      	mov	r0, r5
   19272:	4a08      	ldr	r2, [pc, #32]	; (19294 <bt_addr_le_str+0x78>)
   19274:	f010 ff87 	bl	2a186 <snprintk>
		break;
   19278:	e7df      	b.n	1923a <bt_addr_le_str+0x1e>
   1927a:	bf00      	nop
   1927c:	00034356 	.word	0x00034356
   19280:	00034378 	.word	0x00034378
   19284:	200318fd 	.word	0x200318fd
   19288:	0003435d 	.word	0x0003435d
   1928c:	00034364 	.word	0x00034364
   19290:	0003436e 	.word	0x0003436e
   19294:	000378a6 	.word	0x000378a6

00019298 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   19298:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1929a:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   1929c:	4d09      	ldr	r5, [pc, #36]	; (192c4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1929e:	4b0a      	ldr	r3, [pc, #40]	; (192c8 <long_wq_init+0x30>)
{
   192a0:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   192a2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   192a4:	9302      	str	r3, [sp, #8]
   192a6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   192a8:	f017 fea2 	bl	30ff0 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   192ac:	ab02      	add	r3, sp, #8
   192ae:	4628      	mov	r0, r5
   192b0:	9300      	str	r3, [sp, #0]
   192b2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   192b6:	230a      	movs	r3, #10
   192b8:	4904      	ldr	r1, [pc, #16]	; (192cc <long_wq_init+0x34>)
   192ba:	f00c fd15 	bl	25ce8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   192be:	4620      	mov	r0, r4
   192c0:	b005      	add	sp, #20
   192c2:	bd30      	pop	{r4, r5, pc}
   192c4:	20009c38 	.word	0x20009c38
   192c8:	000364fe 	.word	0x000364fe
   192cc:	20051eb8 	.word	0x20051eb8

000192d0 <bt_long_wq_schedule>:
{
   192d0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   192d2:	4801      	ldr	r0, [pc, #4]	; (192d8 <bt_long_wq_schedule+0x8>)
   192d4:	f00c bd7e 	b.w	25dd4 <k_work_schedule_for_queue>
   192d8:	20009c38 	.word	0x20009c38

000192dc <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   192dc:	7803      	ldrb	r3, [r0, #0]
{
   192de:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   192e0:	2b01      	cmp	r3, #1
   192e2:	d013      	beq.n	1930c <uuid_to_uuid128+0x30>
   192e4:	2b02      	cmp	r3, #2
   192e6:	d027      	beq.n	19338 <uuid_to_uuid128+0x5c>
   192e8:	b97b      	cbnz	r3, 1930a <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   192ea:	460a      	mov	r2, r1
   192ec:	4b18      	ldr	r3, [pc, #96]	; (19350 <uuid_to_uuid128+0x74>)
   192ee:	f103 0410 	add.w	r4, r3, #16
   192f2:	f853 5b04 	ldr.w	r5, [r3], #4
   192f6:	42a3      	cmp	r3, r4
   192f8:	f842 5b04 	str.w	r5, [r2], #4
   192fc:	d1f9      	bne.n	192f2 <uuid_to_uuid128+0x16>
   192fe:	781b      	ldrb	r3, [r3, #0]
   19300:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   19302:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   19304:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   19306:	0a1b      	lsrs	r3, r3, #8
   19308:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1930a:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   1930c:	460a      	mov	r2, r1
   1930e:	4b10      	ldr	r3, [pc, #64]	; (19350 <uuid_to_uuid128+0x74>)
   19310:	f103 0410 	add.w	r4, r3, #16
   19314:	f853 5b04 	ldr.w	r5, [r3], #4
   19318:	42a3      	cmp	r3, r4
   1931a:	f842 5b04 	str.w	r5, [r2], #4
   1931e:	d1f9      	bne.n	19314 <uuid_to_uuid128+0x38>
   19320:	781b      	ldrb	r3, [r3, #0]
   19322:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   19324:	6843      	ldr	r3, [r0, #4]
   19326:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1932a:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   1932c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1932e:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   19330:	0a1b      	lsrs	r3, r3, #8
   19332:	738a      	strb	r2, [r1, #14]
   19334:	740b      	strb	r3, [r1, #16]
}
   19336:	e7e8      	b.n	1930a <uuid_to_uuid128+0x2e>
   19338:	f100 0310 	add.w	r3, r0, #16
   1933c:	f850 2b04 	ldr.w	r2, [r0], #4
   19340:	4298      	cmp	r0, r3
   19342:	f841 2b04 	str.w	r2, [r1], #4
   19346:	d1f9      	bne.n	1933c <uuid_to_uuid128+0x60>
   19348:	7803      	ldrb	r3, [r0, #0]
   1934a:	700b      	strb	r3, [r1, #0]
   1934c:	e7dd      	b.n	1930a <uuid_to_uuid128+0x2e>
   1934e:	bf00      	nop
   19350:	00036507 	.word	0x00036507

00019354 <bt_buf_get_rx>:
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
   19354:	2801      	cmp	r0, #1
{
   19356:	b538      	push	{r3, r4, r5, lr}
   19358:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   1935a:	bf0c      	ite	eq
   1935c:	4806      	ldreq	r0, [pc, #24]	; (19378 <bt_buf_get_rx+0x24>)
   1935e:	4807      	ldrne	r0, [pc, #28]	; (1937c <bt_buf_get_rx+0x28>)
   19360:	f015 ff77 	bl	2f252 <net_buf_alloc_fixed>
   19364:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   19366:	b120      	cbz	r0, 19372 <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
   19368:	2101      	movs	r1, #1
   1936a:	300c      	adds	r0, #12
   1936c:	f015 ff78 	bl	2f260 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19370:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   19372:	4620      	mov	r0, r4
   19374:	bd38      	pop	{r3, r4, r5, pc}
   19376:	bf00      	nop
   19378:	20008f04 	.word	0x20008f04
   1937c:	20008e80 	.word	0x20008e80

00019380 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   19380:	b510      	push	{r4, lr}
   19382:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   19384:	490a      	ldr	r1, [pc, #40]	; (193b0 <bt_buf_get_cmd_complete+0x30>)
{
   19386:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   19388:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   1938c:	b920      	cbnz	r0, 19398 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1938e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   19392:	2001      	movs	r0, #1
   19394:	f7ff bfde 	b.w	19354 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   19398:	f015 ff95 	bl	2f2c6 <net_buf_ref>
   1939c:	2101      	movs	r1, #1
		buf->len = 0U;
   1939e:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   193a0:	4604      	mov	r4, r0
   193a2:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   193a4:	8203      	strh	r3, [r0, #16]
   193a6:	300c      	adds	r0, #12
   193a8:	f015 ff5a 	bl	2f260 <net_buf_simple_reserve>
}
   193ac:	4620      	mov	r0, r4
   193ae:	bd10      	pop	{r4, pc}
   193b0:	20008000 	.word	0x20008000

000193b4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   193b4:	b570      	push	{r4, r5, r6, lr}
   193b6:	4604      	mov	r4, r0
	switch (evt) {
   193b8:	2c0f      	cmp	r4, #15
{
   193ba:	460d      	mov	r5, r1
   193bc:	4610      	mov	r0, r2
   193be:	4619      	mov	r1, r3
	switch (evt) {
   193c0:	d805      	bhi.n	193ce <bt_buf_get_evt+0x1a>
   193c2:	2c0d      	cmp	r4, #13
   193c4:	d90d      	bls.n	193e2 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   193c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   193ca:	f7ff bfd9 	b.w	19380 <bt_buf_get_cmd_complete>
	switch (evt) {
   193ce:	2c13      	cmp	r4, #19
   193d0:	d107      	bne.n	193e2 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   193d2:	480c      	ldr	r0, [pc, #48]	; (19404 <bt_buf_get_evt+0x50>)
   193d4:	f015 ff3d 	bl	2f252 <net_buf_alloc_fixed>
			if (buf) {
   193d8:	4604      	mov	r4, r0
   193da:	b938      	cbnz	r0, 193ec <bt_buf_get_evt+0x38>
{
   193dc:	2400      	movs	r4, #0
}
   193de:	4620      	mov	r0, r4
   193e0:	bd70      	pop	{r4, r5, r6, pc}
   193e2:	4602      	mov	r2, r0
   193e4:	460b      	mov	r3, r1
		if (discardable) {
   193e6:	b145      	cbz	r5, 193fa <bt_buf_get_evt+0x46>
   193e8:	4807      	ldr	r0, [pc, #28]	; (19408 <bt_buf_get_evt+0x54>)
   193ea:	e7f3      	b.n	193d4 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   193ec:	2101      	movs	r1, #1
   193ee:	300c      	adds	r0, #12
   193f0:	f015 ff36 	bl	2f260 <net_buf_simple_reserve>
   193f4:	2301      	movs	r3, #1
   193f6:	7623      	strb	r3, [r4, #24]
}
   193f8:	e7f1      	b.n	193de <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   193fa:	2001      	movs	r0, #1
}
   193fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   19400:	f7ff bfa8 	b.w	19354 <bt_buf_get_rx>
   19404:	20008f88 	.word	0x20008f88
   19408:	20008ed8 	.word	0x20008ed8

0001940c <hci_disconn_complete_prio>:
{
   1940c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1940e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19410:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   19414:	781b      	ldrb	r3, [r3, #0]
   19416:	b963      	cbnz	r3, 19432 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   19418:	4620      	mov	r0, r4
   1941a:	f002 fd6f 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   1941e:	4605      	mov	r5, r0
   19420:	b940      	cbnz	r0, 19434 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   19422:	4b08      	ldr	r3, [pc, #32]	; (19444 <hci_disconn_complete_prio+0x38>)
   19424:	881a      	ldrh	r2, [r3, #0]
   19426:	b922      	cbnz	r2, 19432 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   19428:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   1942c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   19430:	8018      	strh	r0, [r3, #0]
}
   19432:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   19434:	2101      	movs	r1, #1
   19436:	f002 fd69 	bl	1bf0c <bt_conn_set_state>
	bt_conn_unref(conn);
   1943a:	4628      	mov	r0, r5
}
   1943c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   19440:	f014 ba89 	b.w	2d956 <bt_conn_unref>
   19444:	20030e18 	.word	0x20030e18

00019448 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   19448:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1944a:	4c08      	ldr	r4, [pc, #32]	; (1946c <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1944c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1944e:	2205      	movs	r2, #5
   19450:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   19454:	f002 ff98 	bl	1c388 <bt_conn_lookup_state_le>
		if (!conn) {
   19458:	b938      	cbnz	r0, 1946a <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1945a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1945e:	2204      	movs	r2, #4
}
   19460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   19464:	4902      	ldr	r1, [pc, #8]	; (19470 <find_pending_connect.part.0+0x28>)
   19466:	f002 bf8f 	b.w	1c388 <bt_conn_lookup_state_le>
}
   1946a:	bd10      	pop	{r4, pc}
   1946c:	20008000 	.word	0x20008000
   19470:	000364cc 	.word	0x000364cc

00019474 <hci_data_buf_overflow>:
{
   19474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   19476:	68c3      	ldr	r3, [r0, #12]
   19478:	2202      	movs	r2, #2
   1947a:	781b      	ldrb	r3, [r3, #0]
   1947c:	4906      	ldr	r1, [pc, #24]	; (19498 <hci_data_buf_overflow+0x24>)
   1947e:	9303      	str	r3, [sp, #12]
   19480:	4b06      	ldr	r3, [pc, #24]	; (1949c <hci_data_buf_overflow+0x28>)
   19482:	9302      	str	r3, [sp, #8]
   19484:	2300      	movs	r3, #0
   19486:	4618      	mov	r0, r3
   19488:	e9cd 3300 	strd	r3, r3, [sp]
   1948c:	f013 fee3 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   19490:	b005      	add	sp, #20
   19492:	f85d fb04 	ldr.w	pc, [sp], #4
   19496:	bf00      	nop
   19498:	00032ef0 	.word	0x00032ef0
   1949c:	00036518 	.word	0x00036518

000194a0 <rx_queue_put>:
{
   194a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   194a2:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   194a4:	480b      	ldr	r0, [pc, #44]	; (194d4 <rx_queue_put+0x34>)
   194a6:	f015 fedf 	bl	2f268 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   194aa:	490b      	ldr	r1, [pc, #44]	; (194d8 <rx_queue_put+0x38>)
   194ac:	480b      	ldr	r0, [pc, #44]	; (194dc <rx_queue_put+0x3c>)
   194ae:	f017 fd8e 	bl	30fce <k_work_submit_to_queue>
	if (err < 0) {
   194b2:	2800      	cmp	r0, #0
   194b4:	da0a      	bge.n	194cc <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   194b6:	4b0a      	ldr	r3, [pc, #40]	; (194e0 <rx_queue_put+0x40>)
   194b8:	9003      	str	r0, [sp, #12]
   194ba:	9302      	str	r3, [sp, #8]
   194bc:	2300      	movs	r3, #0
   194be:	2201      	movs	r2, #1
   194c0:	4618      	mov	r0, r3
   194c2:	e9cd 3300 	strd	r3, r3, [sp]
   194c6:	4907      	ldr	r1, [pc, #28]	; (194e4 <rx_queue_put+0x44>)
   194c8:	f013 fec5 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   194cc:	b005      	add	sp, #20
   194ce:	f85d fb04 	ldr.w	pc, [sp], #4
   194d2:	bf00      	nop
   194d4:	2000813c 	.word	0x2000813c
   194d8:	2000855c 	.word	0x2000855c
   194dc:	20009da8 	.word	0x20009da8
   194e0:	00036540 	.word	0x00036540
   194e4:	00032ef0 	.word	0x00032ef0

000194e8 <hci_hardware_error>:
{
   194e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   194ea:	2101      	movs	r1, #1
   194ec:	300c      	adds	r0, #12
   194ee:	f015 ff40 	bl	2f372 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   194f2:	7803      	ldrb	r3, [r0, #0]
   194f4:	2201      	movs	r2, #1
   194f6:	9303      	str	r3, [sp, #12]
   194f8:	4b05      	ldr	r3, [pc, #20]	; (19510 <hci_hardware_error+0x28>)
   194fa:	4906      	ldr	r1, [pc, #24]	; (19514 <hci_hardware_error+0x2c>)
   194fc:	9302      	str	r3, [sp, #8]
   194fe:	2300      	movs	r3, #0
   19500:	4618      	mov	r0, r3
   19502:	e9cd 3300 	strd	r3, r3, [sp]
   19506:	f013 fea6 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1950a:	b005      	add	sp, #20
   1950c:	f85d fb04 	ldr.w	pc, [sp], #4
   19510:	0003655d 	.word	0x0003655d
   19514:	00032ef0 	.word	0x00032ef0

00019518 <le_data_len_change>:
{
   19518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1951a:	68c3      	ldr	r3, [r0, #12]
   1951c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1951e:	4620      	mov	r0, r4
   19520:	f002 fcec 	bl	1befc <bt_conn_lookup_handle>
   19524:	4603      	mov	r3, r0
	if (!conn) {
   19526:	b950      	cbnz	r0, 1953e <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19528:	4a07      	ldr	r2, [pc, #28]	; (19548 <le_data_len_change+0x30>)
   1952a:	4908      	ldr	r1, [pc, #32]	; (1954c <le_data_len_change+0x34>)
   1952c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   19530:	9403      	str	r4, [sp, #12]
   19532:	2201      	movs	r2, #1
   19534:	9000      	str	r0, [sp, #0]
   19536:	f013 fe8e 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1953a:	b004      	add	sp, #16
   1953c:	bd10      	pop	{r4, pc}
   1953e:	b004      	add	sp, #16
   19540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   19544:	f014 ba07 	b.w	2d956 <bt_conn_unref>
   19548:	0003657f 	.word	0x0003657f
   1954c:	00032ef0 	.word	0x00032ef0

00019550 <le_phy_update_complete>:
{
   19550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19552:	68c3      	ldr	r3, [r0, #12]
   19554:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   19558:	4620      	mov	r0, r4
   1955a:	f002 fccf 	bl	1befc <bt_conn_lookup_handle>
   1955e:	4603      	mov	r3, r0
	if (!conn) {
   19560:	b950      	cbnz	r0, 19578 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19562:	4a08      	ldr	r2, [pc, #32]	; (19584 <le_phy_update_complete+0x34>)
   19564:	4908      	ldr	r1, [pc, #32]	; (19588 <le_phy_update_complete+0x38>)
   19566:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1956a:	9403      	str	r4, [sp, #12]
   1956c:	2201      	movs	r2, #1
   1956e:	9000      	str	r0, [sp, #0]
   19570:	f013 fe71 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   19574:	b004      	add	sp, #16
   19576:	bd10      	pop	{r4, pc}
   19578:	b004      	add	sp, #16
   1957a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1957e:	f014 b9ea 	b.w	2d956 <bt_conn_unref>
   19582:	bf00      	nop
   19584:	0003657f 	.word	0x0003657f
   19588:	00032ef0 	.word	0x00032ef0

0001958c <hci_disconn_complete>:
{
   1958c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1958e:	68c5      	ldr	r5, [r0, #12]
{
   19590:	b085      	sub	sp, #20
	if (evt->status) {
   19592:	782e      	ldrb	r6, [r5, #0]
   19594:	b986      	cbnz	r6, 195b8 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19596:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1959a:	4638      	mov	r0, r7
   1959c:	f002 fcae 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   195a0:	4604      	mov	r4, r0
   195a2:	b958      	cbnz	r0, 195bc <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   195a4:	4b0b      	ldr	r3, [pc, #44]	; (195d4 <hci_disconn_complete+0x48>)
   195a6:	2201      	movs	r2, #1
   195a8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   195ac:	490a      	ldr	r1, [pc, #40]	; (195d8 <hci_disconn_complete+0x4c>)
   195ae:	4603      	mov	r3, r0
   195b0:	9703      	str	r7, [sp, #12]
   195b2:	9000      	str	r0, [sp, #0]
   195b4:	f013 fe4f 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   195b8:	b005      	add	sp, #20
   195ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   195bc:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   195be:	4631      	mov	r1, r6
	conn->err = evt->reason;
   195c0:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   195c2:	f002 fca3 	bl	1bf0c <bt_conn_set_state>
		bt_conn_unref(conn);
   195c6:	4620      	mov	r0, r4
}
   195c8:	b005      	add	sp, #20
   195ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   195ce:	f014 b9c2 	b.w	2d956 <bt_conn_unref>
   195d2:	bf00      	nop
   195d4:	000365a3 	.word	0x000365a3
   195d8:	00032ef0 	.word	0x00032ef0

000195dc <handle_event>:
{
   195dc:	b530      	push	{r4, r5, lr}
   195de:	4604      	mov	r4, r0
   195e0:	4608      	mov	r0, r1
   195e2:	b087      	sub	sp, #28
   195e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   195e8:	4293      	cmp	r3, r2
   195ea:	d112      	bne.n	19612 <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   195ec:	8a05      	ldrh	r5, [r0, #16]
   195ee:	68c0      	ldr	r0, [r0, #12]
   195f0:	4629      	mov	r1, r5
   195f2:	f7ff fdf1 	bl	191d8 <bt_hex>
   195f6:	4b16      	ldr	r3, [pc, #88]	; (19650 <handle_event+0x74>)
   195f8:	e9cd 5004 	strd	r5, r0, [sp, #16]
   195fc:	9302      	str	r3, [sp, #8]
   195fe:	2300      	movs	r3, #0
   19600:	2202      	movs	r2, #2
   19602:	4618      	mov	r0, r3
   19604:	e9cd 3300 	strd	r3, r3, [sp]
   19608:	4912      	ldr	r1, [pc, #72]	; (19654 <handle_event+0x78>)
   1960a:	9403      	str	r4, [sp, #12]
   1960c:	f013 fe23 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   19610:	e014      	b.n	1963c <handle_event+0x60>
		if (handler->event != event) {
   19612:	4611      	mov	r1, r2
   19614:	f811 5b08 	ldrb.w	r5, [r1], #8
   19618:	42a5      	cmp	r5, r4
   1961a:	d116      	bne.n	1964a <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   1961c:	8a03      	ldrh	r3, [r0, #16]
   1961e:	7851      	ldrb	r1, [r2, #1]
   19620:	4299      	cmp	r1, r3
   19622:	d90d      	bls.n	19640 <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   19624:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19628:	4b0b      	ldr	r3, [pc, #44]	; (19658 <handle_event+0x7c>)
   1962a:	2201      	movs	r2, #1
   1962c:	9302      	str	r3, [sp, #8]
   1962e:	2300      	movs	r3, #0
   19630:	4908      	ldr	r1, [pc, #32]	; (19654 <handle_event+0x78>)
   19632:	4618      	mov	r0, r3
   19634:	e9cd 3300 	strd	r3, r3, [sp]
   19638:	f013 fe0d 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1963c:	b007      	add	sp, #28
   1963e:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   19640:	6853      	ldr	r3, [r2, #4]
}
   19642:	b007      	add	sp, #28
   19644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   19648:	4718      	bx	r3
   1964a:	460a      	mov	r2, r1
   1964c:	e7cc      	b.n	195e8 <handle_event+0xc>
   1964e:	bf00      	nop
   19650:	000365eb 	.word	0x000365eb
   19654:	00032ef0 	.word	0x00032ef0
   19658:	000365c9 	.word	0x000365c9

0001965c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1965c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1965e:	4853      	ldr	r0, [pc, #332]	; (197ac <rx_work_handler+0x150>)
{
   19660:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   19662:	f015 fe17 	bl	2f294 <net_buf_slist_get>
	if (!buf) {
   19666:	4604      	mov	r4, r0
   19668:	2800      	cmp	r0, #0
   1966a:	d064      	beq.n	19736 <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1966c:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1966e:	2b01      	cmp	r3, #1
   19670:	d063      	beq.n	1973a <rx_work_handler+0xde>
   19672:	2b03      	cmp	r3, #3
   19674:	f040 8090 	bne.w	19798 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19678:	8a03      	ldrh	r3, [r0, #16]
   1967a:	2b03      	cmp	r3, #3
   1967c:	d80c      	bhi.n	19698 <rx_work_handler+0x3c>
   1967e:	f240 13ed 	movw	r3, #493	; 0x1ed
   19682:	4a4b      	ldr	r2, [pc, #300]	; (197b0 <rx_work_handler+0x154>)
   19684:	494b      	ldr	r1, [pc, #300]	; (197b4 <rx_work_handler+0x158>)
   19686:	484c      	ldr	r0, [pc, #304]	; (197b8 <rx_work_handler+0x15c>)
   19688:	f011 f858 	bl	2a73c <assert_print>
   1968c:	4040      	eors	r0, r0
   1968e:	f380 8811 	msr	BASEPRI, r0
   19692:	f04f 0003 	mov.w	r0, #3
   19696:	df02      	svc	2
   19698:	2104      	movs	r1, #4
   1969a:	f104 000c 	add.w	r0, r4, #12
   1969e:	f015 fe68 	bl	2f372 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   196a2:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   196a4:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   196a6:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   196a8:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   196aa:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   196ac:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   196b0:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   196b2:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   196b4:	d00f      	beq.n	196d6 <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   196b6:	e9cd 3203 	strd	r3, r2, [sp, #12]
   196ba:	4b40      	ldr	r3, [pc, #256]	; (197bc <rx_work_handler+0x160>)
   196bc:	2201      	movs	r2, #1
   196be:	9302      	str	r3, [sp, #8]
   196c0:	2300      	movs	r3, #0
   196c2:	493f      	ldr	r1, [pc, #252]	; (197c0 <rx_work_handler+0x164>)
   196c4:	4618      	mov	r0, r3
   196c6:	e9cd 3300 	strd	r3, r3, [sp]
   196ca:	f013 fdc4 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   196ce:	4620      	mov	r0, r4
   196d0:	f006 fee6 	bl	204a0 <net_buf_unref>
		break;
   196d4:	e01a      	b.n	1970c <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   196d6:	f002 fc11 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   196da:	4605      	mov	r5, r0
   196dc:	b958      	cbnz	r0, 196f6 <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   196de:	8b63      	ldrh	r3, [r4, #26]
   196e0:	2201      	movs	r2, #1
   196e2:	9303      	str	r3, [sp, #12]
   196e4:	4b37      	ldr	r3, [pc, #220]	; (197c4 <rx_work_handler+0x168>)
   196e6:	4936      	ldr	r1, [pc, #216]	; (197c0 <rx_work_handler+0x164>)
   196e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   196ec:	4603      	mov	r3, r0
   196ee:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   196f0:	f013 fdb1 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
   196f4:	e7eb      	b.n	196ce <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   196f6:	f002 fced 	bl	1c0d4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   196fa:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   196fc:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   196fe:	0b32      	lsrs	r2, r6, #12
   19700:	4628      	mov	r0, r5
   19702:	f002 fac7 	bl	1bc94 <bt_conn_recv>
	bt_conn_unref(conn);
   19706:	4628      	mov	r0, r5
   19708:	f014 f925 	bl	2d956 <bt_conn_unref>
	return list->head;
   1970c:	4b2e      	ldr	r3, [pc, #184]	; (197c8 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1970e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   19712:	b183      	cbz	r3, 19736 <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   19714:	492d      	ldr	r1, [pc, #180]	; (197cc <rx_work_handler+0x170>)
   19716:	482e      	ldr	r0, [pc, #184]	; (197d0 <rx_work_handler+0x174>)
   19718:	f017 fc59 	bl	30fce <k_work_submit_to_queue>
#endif
		if (err < 0) {
   1971c:	2800      	cmp	r0, #0
   1971e:	da0a      	bge.n	19736 <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   19720:	4b2c      	ldr	r3, [pc, #176]	; (197d4 <rx_work_handler+0x178>)
   19722:	9003      	str	r0, [sp, #12]
   19724:	9302      	str	r3, [sp, #8]
   19726:	2300      	movs	r3, #0
   19728:	2201      	movs	r2, #1
   1972a:	4618      	mov	r0, r3
   1972c:	e9cd 3300 	strd	r3, r3, [sp]
   19730:	4923      	ldr	r1, [pc, #140]	; (197c0 <rx_work_handler+0x164>)
   19732:	f013 fd90 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   19736:	b006      	add	sp, #24
   19738:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1973a:	8a03      	ldrh	r3, [r0, #16]
   1973c:	2b01      	cmp	r3, #1
   1973e:	d80c      	bhi.n	1975a <rx_work_handler+0xfe>
   19740:	f640 136d 	movw	r3, #2413	; 0x96d
   19744:	4a1a      	ldr	r2, [pc, #104]	; (197b0 <rx_work_handler+0x154>)
   19746:	491b      	ldr	r1, [pc, #108]	; (197b4 <rx_work_handler+0x158>)
   19748:	481b      	ldr	r0, [pc, #108]	; (197b8 <rx_work_handler+0x15c>)
   1974a:	f010 fff7 	bl	2a73c <assert_print>
   1974e:	4040      	eors	r0, r0
   19750:	f380 8811 	msr	BASEPRI, r0
   19754:	f04f 0003 	mov.w	r0, #3
   19758:	df02      	svc	2
   1975a:	2102      	movs	r1, #2
   1975c:	f104 000c 	add.w	r0, r4, #12
   19760:	f015 fe07 	bl	2f372 <net_buf_simple_pull_mem>
   19764:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   19766:	7800      	ldrb	r0, [r0, #0]
   19768:	f013 fd33 	bl	2d1d2 <bt_hci_evt_get_flags>
   1976c:	0783      	lsls	r3, r0, #30
   1976e:	d40c      	bmi.n	1978a <rx_work_handler+0x12e>
   19770:	f640 1371 	movw	r3, #2417	; 0x971
   19774:	4a0e      	ldr	r2, [pc, #56]	; (197b0 <rx_work_handler+0x154>)
   19776:	4918      	ldr	r1, [pc, #96]	; (197d8 <rx_work_handler+0x17c>)
   19778:	480f      	ldr	r0, [pc, #60]	; (197b8 <rx_work_handler+0x15c>)
   1977a:	f010 ffdf 	bl	2a73c <assert_print>
   1977e:	4040      	eors	r0, r0
   19780:	f380 8811 	msr	BASEPRI, r0
   19784:	f04f 0003 	mov.w	r0, #3
   19788:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1978a:	2306      	movs	r3, #6
   1978c:	4621      	mov	r1, r4
   1978e:	4a13      	ldr	r2, [pc, #76]	; (197dc <rx_work_handler+0x180>)
   19790:	7828      	ldrb	r0, [r5, #0]
   19792:	f7ff ff23 	bl	195dc <handle_event>
	net_buf_unref(buf);
   19796:	e79a      	b.n	196ce <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   19798:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1979a:	4b11      	ldr	r3, [pc, #68]	; (197e0 <rx_work_handler+0x184>)
   1979c:	2201      	movs	r2, #1
   1979e:	9302      	str	r3, [sp, #8]
   197a0:	2300      	movs	r3, #0
   197a2:	4907      	ldr	r1, [pc, #28]	; (197c0 <rx_work_handler+0x164>)
   197a4:	4618      	mov	r0, r3
   197a6:	e9cd 3300 	strd	r3, r3, [sp]
   197aa:	e7a1      	b.n	196f0 <rx_work_handler+0x94>
   197ac:	2000813c 	.word	0x2000813c
   197b0:	0003660d 	.word	0x0003660d
   197b4:	00036641 	.word	0x00036641
   197b8:	0003665a 	.word	0x0003665a
   197bc:	00036677 	.word	0x00036677
   197c0:	00032ef0 	.word	0x00032ef0
   197c4:	0003669b 	.word	0x0003669b
   197c8:	20008000 	.word	0x20008000
   197cc:	2000855c 	.word	0x2000855c
   197d0:	20009da8 	.word	0x20009da8
   197d4:	00036540 	.word	0x00036540
   197d8:	000366bd 	.word	0x000366bd
   197dc:	00033ab4 	.word	0x00033ab4
   197e0:	000366eb 	.word	0x000366eb

000197e4 <hci_le_meta_event>:
{
   197e4:	b510      	push	{r4, lr}
   197e6:	2101      	movs	r1, #1
   197e8:	4604      	mov	r4, r0
   197ea:	300c      	adds	r0, #12
   197ec:	f015 fdc1 	bl	2f372 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   197f0:	4621      	mov	r1, r4
}
   197f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   197f6:	230a      	movs	r3, #10
   197f8:	4a01      	ldr	r2, [pc, #4]	; (19800 <hci_le_meta_event+0x1c>)
   197fa:	7800      	ldrb	r0, [r0, #0]
   197fc:	f7ff beee 	b.w	195dc <handle_event>
   19800:	00033ae4 	.word	0x00033ae4

00019804 <le_remote_feat_complete>:
{
   19804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   19806:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19808:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1980c:	4630      	mov	r0, r6
   1980e:	f002 fb75 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   19812:	4604      	mov	r4, r0
   19814:	b958      	cbnz	r0, 1982e <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19816:	4b10      	ldr	r3, [pc, #64]	; (19858 <le_remote_feat_complete+0x54>)
   19818:	2201      	movs	r2, #1
   1981a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1981e:	490f      	ldr	r1, [pc, #60]	; (1985c <le_remote_feat_complete+0x58>)
   19820:	4603      	mov	r3, r0
   19822:	9603      	str	r6, [sp, #12]
   19824:	9000      	str	r0, [sp, #0]
   19826:	f013 fd16 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1982a:	b004      	add	sp, #16
   1982c:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   1982e:	782b      	ldrb	r3, [r5, #0]
   19830:	b93b      	cbnz	r3, 19842 <le_remote_feat_complete+0x3e>
   19832:	f8d5 3003 	ldr.w	r3, [r5, #3]
   19836:	f8c0 30ad 	str.w	r3, [r0, #173]	; 0xad
   1983a:	f8d5 3007 	ldr.w	r3, [r5, #7]
   1983e:	f8c0 30b1 	str.w	r3, [r0, #177]	; 0xb1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   19846:	1d20      	adds	r0, r4, #4
   19848:	f013 fcee 	bl	2d228 <atomic_or>
	bt_conn_unref(conn);
   1984c:	4620      	mov	r0, r4
}
   1984e:	b004      	add	sp, #16
   19850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19854:	f014 b87f 	b.w	2d956 <bt_conn_unref>
   19858:	0003657f 	.word	0x0003657f
   1985c:	00032ef0 	.word	0x00032ef0

00019860 <hci_cmd_done>:
{
   19860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19864:	4606      	mov	r6, r0
   19866:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   19868:	7a90      	ldrb	r0, [r2, #10]
{
   1986a:	460f      	mov	r7, r1
   1986c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1986e:	f006 fd55 	bl	2031c <net_buf_pool_get>
   19872:	4d3d      	ldr	r5, [pc, #244]	; (19968 <hci_cmd_done+0x108>)
   19874:	4285      	cmp	r5, r0
   19876:	d014      	beq.n	198a2 <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   19878:	7aa4      	ldrb	r4, [r4, #10]
   1987a:	4620      	mov	r0, r4
   1987c:	f006 fd4e 	bl	2031c <net_buf_pool_get>
   19880:	4b3a      	ldr	r3, [pc, #232]	; (1996c <hci_cmd_done+0x10c>)
   19882:	e9cd 0505 	strd	r0, r5, [sp, #20]
   19886:	9302      	str	r3, [sp, #8]
   19888:	2300      	movs	r3, #0
   1988a:	2202      	movs	r2, #2
   1988c:	4618      	mov	r0, r3
   1988e:	e9cd 6403 	strd	r6, r4, [sp, #12]
   19892:	e9cd 3300 	strd	r3, r3, [sp]
   19896:	4936      	ldr	r1, [pc, #216]	; (19970 <hci_cmd_done+0x110>)
   19898:	f013 fcdd 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1989c:	b008      	add	sp, #32
   1989e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   198a2:	4620      	mov	r0, r4
   198a4:	f006 fd42 	bl	2032c <net_buf_id>
   198a8:	f04f 080c 	mov.w	r8, #12
   198ac:	4d31      	ldr	r5, [pc, #196]	; (19974 <hci_cmd_done+0x114>)
   198ae:	fb08 5000 	mla	r0, r8, r0, r5
   198b2:	8843      	ldrh	r3, [r0, #2]
   198b4:	42b3      	cmp	r3, r6
   198b6:	d012      	beq.n	198de <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   198b8:	4620      	mov	r0, r4
   198ba:	f006 fd37 	bl	2032c <net_buf_id>
   198be:	fb08 5000 	mla	r0, r8, r0, r5
   198c2:	8843      	ldrh	r3, [r0, #2]
   198c4:	2202      	movs	r2, #2
   198c6:	e9cd 6303 	strd	r6, r3, [sp, #12]
   198ca:	4b2b      	ldr	r3, [pc, #172]	; (19978 <hci_cmd_done+0x118>)
   198cc:	4928      	ldr	r1, [pc, #160]	; (19970 <hci_cmd_done+0x110>)
   198ce:	9302      	str	r3, [sp, #8]
   198d0:	2300      	movs	r3, #0
   198d2:	4618      	mov	r0, r3
   198d4:	e9cd 3300 	strd	r3, r3, [sp]
   198d8:	f013 fcbd 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		return;
   198dc:	e7de      	b.n	1989c <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   198de:	4e27      	ldr	r6, [pc, #156]	; (1997c <hci_cmd_done+0x11c>)
   198e0:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   198e4:	b120      	cbz	r0, 198f0 <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   198e6:	f006 fddb 	bl	204a0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   198ea:	2300      	movs	r3, #0
   198ec:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   198f0:	4620      	mov	r0, r4
   198f2:	f006 fd1b 	bl	2032c <net_buf_id>
   198f6:	260c      	movs	r6, #12
   198f8:	fb06 5000 	mla	r0, r6, r0, r5
   198fc:	6843      	ldr	r3, [r0, #4]
   198fe:	b19b      	cbz	r3, 19928 <hci_cmd_done+0xc8>
   19900:	b997      	cbnz	r7, 19928 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   19902:	4620      	mov	r0, r4
   19904:	f006 fd12 	bl	2032c <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   19908:	2101      	movs	r1, #1
   1990a:	fb06 5000 	mla	r0, r6, r0, r5
   1990e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   19910:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   19914:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   19916:	f003 061f 	and.w	r6, r3, #31
   1991a:	40b1      	lsls	r1, r6
	if (val) {
   1991c:	095b      	lsrs	r3, r3, #5
   1991e:	b1e2      	cbz	r2, 1995a <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19920:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19924:	f013 fc80 	bl	2d228 <atomic_or>
	if (cmd(buf)->sync) {
   19928:	4620      	mov	r0, r4
   1992a:	f006 fcff 	bl	2032c <net_buf_id>
   1992e:	260c      	movs	r6, #12
   19930:	fb06 5000 	mla	r0, r6, r0, r5
   19934:	6883      	ldr	r3, [r0, #8]
   19936:	2b00      	cmp	r3, #0
   19938:	d0b0      	beq.n	1989c <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   1993a:	4620      	mov	r0, r4
   1993c:	f006 fcf6 	bl	2032c <net_buf_id>
   19940:	4370      	muls	r0, r6
   19942:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   19944:	4620      	mov	r0, r4
   19946:	f006 fcf1 	bl	2032c <net_buf_id>
   1994a:	fb06 5500 	mla	r5, r6, r0, r5
   1994e:	68a8      	ldr	r0, [r5, #8]
}
   19950:	b008      	add	sp, #32
   19952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   19956:	f00c b845 	b.w	259e4 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1995a:	43c9      	mvns	r1, r1
   1995c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19960:	f013 fc88 	bl	2d274 <atomic_and.isra.0>
   19964:	e7e0      	b.n	19928 <hci_cmd_done+0xc8>
   19966:	bf00      	nop
   19968:	20008f5c 	.word	0x20008f5c
   1996c:	000366ff 	.word	0x000366ff
   19970:	00032ef0 	.word	0x00032ef0
   19974:	2003080c 	.word	0x2003080c
   19978:	00036734 	.word	0x00036734
   1997c:	20008000 	.word	0x20008000

00019980 <hci_cmd_status>:
{
   19980:	b538      	push	{r3, r4, r5, lr}
   19982:	2104      	movs	r1, #4
   19984:	4604      	mov	r4, r0
   19986:	300c      	adds	r0, #12
   19988:	f015 fcf3 	bl	2f372 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1998c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1998e:	7801      	ldrb	r1, [r0, #0]
   19990:	4622      	mov	r2, r4
   19992:	8840      	ldrh	r0, [r0, #2]
   19994:	f7ff ff64 	bl	19860 <hci_cmd_done>
	if (ncmd) {
   19998:	b125      	cbz	r5, 199a4 <hci_cmd_status+0x24>
}
   1999a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1999e:	4802      	ldr	r0, [pc, #8]	; (199a8 <hci_cmd_status+0x28>)
   199a0:	f00c b820 	b.w	259e4 <z_impl_k_sem_give>
   199a4:	bd38      	pop	{r3, r4, r5, pc}
   199a6:	bf00      	nop
   199a8:	20008120 	.word	0x20008120

000199ac <hci_cmd_complete>:
{
   199ac:	b538      	push	{r3, r4, r5, lr}
   199ae:	2103      	movs	r1, #3
   199b0:	4604      	mov	r4, r0
   199b2:	300c      	adds	r0, #12
   199b4:	f015 fcdd 	bl	2f372 <net_buf_simple_pull_mem>
	status = buf->data[0];
   199b8:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   199ba:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   199bc:	4622      	mov	r2, r4
   199be:	7819      	ldrb	r1, [r3, #0]
   199c0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   199c4:	f7ff ff4c 	bl	19860 <hci_cmd_done>
	if (ncmd) {
   199c8:	b125      	cbz	r5, 199d4 <hci_cmd_complete+0x28>
}
   199ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   199ce:	4802      	ldr	r0, [pc, #8]	; (199d8 <hci_cmd_complete+0x2c>)
   199d0:	f00c b808 	b.w	259e4 <z_impl_k_sem_give>
   199d4:	bd38      	pop	{r3, r4, r5, pc}
   199d6:	bf00      	nop
   199d8:	20008120 	.word	0x20008120

000199dc <hci_num_completed_packets>:
{
   199dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   199e0:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   199e2:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   199e4:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   199e6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 19ad0 <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   199ea:	783b      	ldrb	r3, [r7, #0]
   199ec:	429d      	cmp	r5, r3
   199ee:	db02      	blt.n	199f6 <hci_num_completed_packets+0x1a>
}
   199f0:	b004      	add	sp, #16
   199f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   199f6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   199fa:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   199fe:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   19a02:	4650      	mov	r0, sl
   19a04:	f002 fa7a 	bl	1befc <bt_conn_lookup_handle>
		if (!conn) {
   19a08:	4604      	mov	r4, r0
   19a0a:	b1d8      	cbz	r0, 19a44 <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   19a0c:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   19a10:	2e00      	cmp	r6, #0
   19a12:	d032      	beq.n	19a7a <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   19a14:	f04f 0320 	mov.w	r3, #32
   19a18:	f3ef 8211 	mrs	r2, BASEPRI
   19a1c:	f383 8812 	msr	BASEPRI_MAX, r3
   19a20:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   19a24:	69e3      	ldr	r3, [r4, #28]
   19a26:	b1d3      	cbz	r3, 19a5e <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   19a28:	3b01      	subs	r3, #1
   19a2a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   19a2c:	f382 8811 	msr	BASEPRI, r2
   19a30:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   19a34:	4620      	mov	r0, r4
   19a36:	f002 f8fb 	bl	1bc30 <bt_conn_get_pkts>
   19a3a:	3e01      	subs	r6, #1
   19a3c:	f00b ffd2 	bl	259e4 <z_impl_k_sem_give>
   19a40:	b2b6      	uxth	r6, r6
   19a42:	e7e5      	b.n	19a10 <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   19a44:	4b23      	ldr	r3, [pc, #140]	; (19ad4 <hci_num_completed_packets+0xf8>)
   19a46:	2201      	movs	r2, #1
   19a48:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19a4c:	4922      	ldr	r1, [pc, #136]	; (19ad8 <hci_num_completed_packets+0xfc>)
   19a4e:	4603      	mov	r3, r0
   19a50:	f8cd a00c 	str.w	sl, [sp, #12]
   19a54:	9000      	str	r0, [sp, #0]
   19a56:	f013 fbfe 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   19a5a:	3501      	adds	r5, #1
   19a5c:	e7c5      	b.n	199ea <hci_num_completed_packets+0xe>
   19a5e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   19a60:	b97b      	cbnz	r3, 19a82 <hci_num_completed_packets+0xa6>
   19a62:	f382 8811 	msr	BASEPRI, r2
   19a66:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   19a6a:	2201      	movs	r2, #1
   19a6c:	4618      	mov	r0, r3
   19a6e:	e9cd 3901 	strd	r3, r9, [sp, #4]
   19a72:	4919      	ldr	r1, [pc, #100]	; (19ad8 <hci_num_completed_packets+0xfc>)
   19a74:	9300      	str	r3, [sp, #0]
   19a76:	f013 fbee 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   19a7a:	4620      	mov	r0, r4
   19a7c:	f013 ff6b 	bl	2d956 <bt_conn_unref>
   19a80:	e7eb      	b.n	19a5a <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19a82:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   19a84:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19a86:	4283      	cmp	r3, r0
	list->head = node;
   19a88:	6161      	str	r1, [r4, #20]
	list->tail = node;
   19a8a:	bf08      	it	eq
   19a8c:	61a1      	streq	r1, [r4, #24]
   19a8e:	f382 8811 	msr	BASEPRI, r2
   19a92:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19a96:	f04f 0220 	mov.w	r2, #32
   19a9a:	f3ef 8111 	mrs	r1, BASEPRI
   19a9e:	f382 8812 	msr	BASEPRI_MAX, r2
   19aa2:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   19aa6:	68da      	ldr	r2, [r3, #12]
   19aa8:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   19aaa:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   19aae:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   19ab2:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   19ab4:	b94a      	cbnz	r2, 19aca <hci_num_completed_packets+0xee>
	list->head = node;
   19ab6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   19aba:	f381 8811 	msr	BASEPRI, r1
   19abe:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   19ac2:	4650      	mov	r0, sl
   19ac4:	f00c f90a 	bl	25cdc <k_work_submit>
   19ac8:	e7b4      	b.n	19a34 <hci_num_completed_packets+0x58>
	parent->next = child;
   19aca:	6013      	str	r3, [r2, #0]
	list->tail = node;
   19acc:	6263      	str	r3, [r4, #36]	; 0x24
}
   19ace:	e7f4      	b.n	19aba <hci_num_completed_packets+0xde>
   19ad0:	00036783 	.word	0x00036783
   19ad4:	00036767 	.word	0x00036767
   19ad8:	00032ef0 	.word	0x00032ef0

00019adc <le_conn_update_complete>:
{
   19adc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   19ade:	68c5      	ldr	r5, [r0, #12]
{
   19ae0:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   19ae2:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19ae6:	4630      	mov	r0, r6
   19ae8:	f002 fa08 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   19aec:	4604      	mov	r4, r0
   19aee:	b958      	cbnz	r0, 19b08 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19af0:	4b2b      	ldr	r3, [pc, #172]	; (19ba0 <le_conn_update_complete+0xc4>)
   19af2:	2201      	movs	r2, #1
   19af4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19af8:	492a      	ldr	r1, [pc, #168]	; (19ba4 <le_conn_update_complete+0xc8>)
   19afa:	4603      	mov	r3, r0
   19afc:	9603      	str	r6, [sp, #12]
   19afe:	9000      	str	r0, [sp, #0]
   19b00:	f013 fba9 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   19b04:	b006      	add	sp, #24
   19b06:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19b08:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   19b0a:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19b0c:	2b1a      	cmp	r3, #26
   19b0e:	d119      	bne.n	19b44 <le_conn_update_complete+0x68>
   19b10:	78c3      	ldrb	r3, [r0, #3]
   19b12:	2b01      	cmp	r3, #1
   19b14:	d12a      	bne.n	19b6c <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
   19b1a:	4630      	mov	r0, r6
   19b1c:	f013 fb84 	bl	2d228 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   19b20:	0542      	lsls	r2, r0, #21
   19b22:	d40f      	bmi.n	19b44 <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   19b24:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
   19b28:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   19b2a:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   19b2c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   19b30:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   19b32:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   19b34:	f002 ff2a 	bl	1c98c <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   19b38:	4620      	mov	r0, r4
}
   19b3a:	b006      	add	sp, #24
   19b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19b40:	f013 bf09 	b.w	2d956 <bt_conn_unref>
		if (!evt->status) {
   19b44:	782b      	ldrb	r3, [r5, #0]
   19b46:	b98b      	cbnz	r3, 19b6c <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   19b48:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   19b4c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   19b50:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   19b54:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   19b58:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   19b5c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19b60:	f46f 7180 	mvn.w	r1, #256	; 0x100
   19b64:	4630      	mov	r0, r6
   19b66:	f013 fb85 	bl	2d274 <atomic_and.isra.0>
}
   19b6a:	e014      	b.n	19b96 <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19b6c:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   19b70:	05db      	lsls	r3, r3, #23
   19b72:	d5f5      	bpl.n	19b60 <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   19b74:	782b      	ldrb	r3, [r5, #0]
   19b76:	2b20      	cmp	r3, #32
   19b78:	d1f2      	bne.n	19b60 <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   19b7a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   19b7e:	2b00      	cmp	r3, #0
   19b80:	d0ee      	beq.n	19b60 <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   19b82:	3b01      	subs	r3, #1
   19b84:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   19b88:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19b8c:	2300      	movs	r3, #0
   19b8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19b92:	f00c f949 	bl	25e28 <k_work_schedule>
		notify_le_param_updated(conn);
   19b96:	4620      	mov	r0, r4
   19b98:	f002 faca 	bl	1c130 <notify_le_param_updated>
   19b9c:	e7cc      	b.n	19b38 <le_conn_update_complete+0x5c>
   19b9e:	bf00      	nop
   19ba0:	0003657f 	.word	0x0003657f
   19ba4:	00032ef0 	.word	0x00032ef0

00019ba8 <bt_hci_cmd_state_set_init>:
{
   19ba8:	b510      	push	{r4, lr}
	state->bit = bit;
   19baa:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   19bae:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   19bb2:	460c      	mov	r4, r1
	state->val = val;
   19bb4:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   19bb6:	f006 fbb9 	bl	2032c <net_buf_id>
   19bba:	220c      	movs	r2, #12
   19bbc:	4b02      	ldr	r3, [pc, #8]	; (19bc8 <bt_hci_cmd_state_set_init+0x20>)
   19bbe:	fb02 3300 	mla	r3, r2, r0, r3
   19bc2:	605c      	str	r4, [r3, #4]
}
   19bc4:	bd10      	pop	{r4, pc}
   19bc6:	bf00      	nop
   19bc8:	2003080c 	.word	0x2003080c

00019bcc <bt_hci_cmd_create>:
{
   19bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   19bd0:	f04f 32ff 	mov.w	r2, #4294967295
   19bd4:	f04f 33ff 	mov.w	r3, #4294967295
   19bd8:	4606      	mov	r6, r0
   19bda:	4817      	ldr	r0, [pc, #92]	; (19c38 <bt_hci_cmd_create+0x6c>)
   19bdc:	460f      	mov	r7, r1
   19bde:	f015 fb38 	bl	2f252 <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19be2:	f04f 0800 	mov.w	r8, #0
   19be6:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   19be8:	f100 0a0c 	add.w	sl, r0, #12
   19bec:	2101      	movs	r1, #1
   19bee:	4650      	mov	r0, sl
   19bf0:	f015 fb36 	bl	2f260 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   19bf4:	4620      	mov	r0, r4
   19bf6:	f884 8018 	strb.w	r8, [r4, #24]
   19bfa:	f006 fb97 	bl	2032c <net_buf_id>
   19bfe:	f04f 090c 	mov.w	r9, #12
   19c02:	4d0e      	ldr	r5, [pc, #56]	; (19c3c <bt_hci_cmd_create+0x70>)
   19c04:	fb09 5000 	mla	r0, r9, r0, r5
   19c08:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   19c0a:	4620      	mov	r0, r4
   19c0c:	f006 fb8e 	bl	2032c <net_buf_id>
   19c10:	fb09 5000 	mla	r0, r9, r0, r5
   19c14:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   19c18:	4620      	mov	r0, r4
   19c1a:	f006 fb87 	bl	2032c <net_buf_id>
   19c1e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   19c22:	2103      	movs	r1, #3
   19c24:	4650      	mov	r0, sl
   19c26:	f8c5 8004 	str.w	r8, [r5, #4]
   19c2a:	f015 fb72 	bl	2f312 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   19c2e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   19c30:	7087      	strb	r7, [r0, #2]
}
   19c32:	4620      	mov	r0, r4
   19c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19c38:	20008f5c 	.word	0x20008f5c
   19c3c:	2003080c 	.word	0x2003080c

00019c40 <bt_hci_cmd_send_sync>:
{
   19c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c44:	4607      	mov	r7, r0
   19c46:	4615      	mov	r5, r2
	if (!buf) {
   19c48:	460c      	mov	r4, r1
{
   19c4a:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   19c4c:	b921      	cbnz	r1, 19c58 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   19c4e:	f7ff ffbd 	bl	19bcc <bt_hci_cmd_create>
		if (!buf) {
   19c52:	4604      	mov	r4, r0
   19c54:	2800      	cmp	r0, #0
   19c56:	d056      	beq.n	19d06 <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19c58:	ae06      	add	r6, sp, #24
   19c5a:	2201      	movs	r2, #1
   19c5c:	2100      	movs	r1, #0
   19c5e:	4630      	mov	r0, r6
   19c60:	f017 f906 	bl	30e70 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   19c64:	4620      	mov	r0, r4
   19c66:	f006 fb61 	bl	2032c <net_buf_id>
   19c6a:	230c      	movs	r3, #12
   19c6c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 19d0c <bt_hci_cmd_send_sync+0xcc>
   19c70:	fb03 8000 	mla	r0, r3, r0, r8
   19c74:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   19c76:	4620      	mov	r0, r4
   19c78:	f015 fb25 	bl	2f2c6 <net_buf_ref>
   19c7c:	4601      	mov	r1, r0
   19c7e:	4824      	ldr	r0, [pc, #144]	; (19d10 <bt_hci_cmd_send_sync+0xd0>)
   19c80:	f015 fb1f 	bl	2f2c2 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   19c84:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   19c88:	4630      	mov	r0, r6
   19c8a:	2300      	movs	r3, #0
   19c8c:	f00b fed0 	bl	25a30 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   19c90:	4606      	mov	r6, r0
   19c92:	b180      	cbz	r0, 19cb6 <bt_hci_cmd_send_sync+0x76>
   19c94:	f240 1349 	movw	r3, #329	; 0x149
   19c98:	4a1e      	ldr	r2, [pc, #120]	; (19d14 <bt_hci_cmd_send_sync+0xd4>)
   19c9a:	491f      	ldr	r1, [pc, #124]	; (19d18 <bt_hci_cmd_send_sync+0xd8>)
   19c9c:	481f      	ldr	r0, [pc, #124]	; (19d1c <bt_hci_cmd_send_sync+0xdc>)
   19c9e:	f010 fd4d 	bl	2a73c <assert_print>
   19ca2:	4631      	mov	r1, r6
   19ca4:	481e      	ldr	r0, [pc, #120]	; (19d20 <bt_hci_cmd_send_sync+0xe0>)
   19ca6:	f010 fd49 	bl	2a73c <assert_print>
   19caa:	4040      	eors	r0, r0
   19cac:	f380 8811 	msr	BASEPRI, r0
   19cb0:	f04f 0003 	mov.w	r0, #3
   19cb4:	df02      	svc	2
	status = cmd(buf)->status;
   19cb6:	4620      	mov	r0, r4
   19cb8:	f006 fb38 	bl	2032c <net_buf_id>
   19cbc:	230c      	movs	r3, #12
   19cbe:	4358      	muls	r0, r3
   19cc0:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   19cc4:	b1be      	cbz	r6, 19cf6 <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   19cc6:	4b17      	ldr	r3, [pc, #92]	; (19d24 <bt_hci_cmd_send_sync+0xe4>)
   19cc8:	2202      	movs	r2, #2
   19cca:	9302      	str	r3, [sp, #8]
   19ccc:	2300      	movs	r3, #0
   19cce:	4916      	ldr	r1, [pc, #88]	; (19d28 <bt_hci_cmd_send_sync+0xe8>)
   19cd0:	4618      	mov	r0, r3
   19cd2:	e9cd 3300 	strd	r3, r3, [sp]
   19cd6:	e9cd 7603 	strd	r7, r6, [sp, #12]
   19cda:	f013 fabc 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   19cde:	4620      	mov	r0, r4
   19ce0:	f006 fbde 	bl	204a0 <net_buf_unref>
			return -ECONNREFUSED;
   19ce4:	2e09      	cmp	r6, #9
   19ce6:	bf14      	ite	ne
   19ce8:	f06f 0004 	mvnne.w	r0, #4
   19cec:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   19cf0:	b00c      	add	sp, #48	; 0x30
   19cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   19cf6:	b115      	cbz	r5, 19cfe <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   19cf8:	602c      	str	r4, [r5, #0]
	return 0;
   19cfa:	2000      	movs	r0, #0
   19cfc:	e7f8      	b.n	19cf0 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   19cfe:	4620      	mov	r0, r4
   19d00:	f006 fbce 	bl	204a0 <net_buf_unref>
   19d04:	e7f9      	b.n	19cfa <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   19d06:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19d0a:	e7f1      	b.n	19cf0 <bt_hci_cmd_send_sync+0xb0>
   19d0c:	2003080c 	.word	0x2003080c
   19d10:	20008144 	.word	0x20008144
   19d14:	0003660d 	.word	0x0003660d
   19d18:	0003679a 	.word	0x0003679a
   19d1c:	0003665a 	.word	0x0003665a
   19d20:	000367a3 	.word	0x000367a3
   19d24:	000367c3 	.word	0x000367c3
   19d28:	00032ef0 	.word	0x00032ef0

00019d2c <hci_le_read_max_data_len>:
{
   19d2c:	b570      	push	{r4, r5, r6, lr}
   19d2e:	b086      	sub	sp, #24
   19d30:	4606      	mov	r6, r0
   19d32:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   19d34:	f242 002f 	movw	r0, #8239	; 0x202f
   19d38:	2100      	movs	r1, #0
   19d3a:	aa05      	add	r2, sp, #20
   19d3c:	f7ff ff80 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   19d40:	4604      	mov	r4, r0
   19d42:	b160      	cbz	r0, 19d5e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   19d44:	4b0b      	ldr	r3, [pc, #44]	; (19d74 <hci_le_read_max_data_len+0x48>)
   19d46:	2201      	movs	r2, #1
   19d48:	9302      	str	r3, [sp, #8]
   19d4a:	2300      	movs	r3, #0
   19d4c:	490a      	ldr	r1, [pc, #40]	; (19d78 <hci_le_read_max_data_len+0x4c>)
   19d4e:	4618      	mov	r0, r3
   19d50:	e9cd 3300 	strd	r3, r3, [sp]
   19d54:	f013 fa7f 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   19d58:	4620      	mov	r0, r4
   19d5a:	b006      	add	sp, #24
   19d5c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   19d5e:	9805      	ldr	r0, [sp, #20]
   19d60:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   19d62:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   19d66:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   19d68:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   19d6c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   19d6e:	f006 fb97 	bl	204a0 <net_buf_unref>
	return 0;
   19d72:	e7f1      	b.n	19d58 <hci_le_read_max_data_len+0x2c>
   19d74:	000367df 	.word	0x000367df
   19d78:	00032ef0 	.word	0x00032ef0

00019d7c <bt_hci_le_rand>:
{
   19d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19d7e:	4b14      	ldr	r3, [pc, #80]	; (19dd0 <bt_hci_le_rand+0x54>)
{
   19d80:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19d82:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   19d86:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19d88:	2b00      	cmp	r3, #0
   19d8a:	da1d      	bge.n	19dc8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   19d8c:	b914      	cbnz	r4, 19d94 <bt_hci_le_rand+0x18>
	return 0;
   19d8e:	4620      	mov	r0, r4
}
   19d90:	b003      	add	sp, #12
   19d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   19d94:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   19d96:	f04f 0100 	mov.w	r1, #0
   19d9a:	f242 0018 	movw	r0, #8216	; 0x2018
   19d9e:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   19da0:	4626      	mov	r6, r4
   19da2:	bf28      	it	cs
   19da4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   19da6:	f7ff ff4b 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
   19daa:	2800      	cmp	r0, #0
   19dac:	d1f0      	bne.n	19d90 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   19dae:	9f01      	ldr	r7, [sp, #4]
   19db0:	4632      	mov	r2, r6
   19db2:	68f9      	ldr	r1, [r7, #12]
   19db4:	4628      	mov	r0, r5
   19db6:	3101      	adds	r1, #1
   19db8:	f017 fca9 	bl	3170e <memcpy>
		net_buf_unref(rsp);
   19dbc:	4638      	mov	r0, r7
   19dbe:	f006 fb6f 	bl	204a0 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   19dc2:	4435      	add	r5, r6
		len -= count;
   19dc4:	1ba4      	subs	r4, r4, r6
   19dc6:	e7e1      	b.n	19d8c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   19dc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19dcc:	e7e0      	b.n	19d90 <bt_hci_le_rand+0x14>
   19dce:	bf00      	nop
   19dd0:	20008000 	.word	0x20008000

00019dd4 <bt_hci_le_enh_conn_complete>:
{
   19dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19dd8:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   19ddc:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   19dde:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   19de2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   19de6:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   19de8:	4a9f      	ldr	r2, [pc, #636]	; (1a068 <bt_hci_le_enh_conn_complete+0x294>)
   19dea:	b29b      	uxth	r3, r3
   19dec:	8811      	ldrh	r1, [r2, #0]
{
   19dee:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   19df0:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   19df2:	bf04      	itt	eq
   19df4:	8017      	strheq	r7, [r2, #0]
			return true;
   19df6:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   19df8:	f000 fe2c 	bl	1aa54 <bt_id_pending_keys_update>
	if (evt->status) {
   19dfc:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19dfe:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   19e02:	b37e      	cbz	r6, 19e64 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19e04:	2e3c      	cmp	r6, #60	; 0x3c
   19e06:	d121      	bne.n	19e4c <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   19e08:	f001 fa5e 	bl	1b2c8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19e0c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   19e10:	3010      	adds	r0, #16
   19e12:	f013 fa2f 	bl	2d274 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   19e16:	2000      	movs	r0, #0
   19e18:	f7ff fb16 	bl	19448 <find_pending_connect.part.0>
		if (!conn) {
   19e1c:	4604      	mov	r4, r0
   19e1e:	b958      	cbnz	r0, 19e38 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   19e20:	4b92      	ldr	r3, [pc, #584]	; (1a06c <bt_hci_le_enh_conn_complete+0x298>)
   19e22:	2201      	movs	r2, #1
   19e24:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19e28:	4991      	ldr	r1, [pc, #580]	; (1a070 <bt_hci_le_enh_conn_complete+0x29c>)
   19e2a:	4603      	mov	r3, r0
   19e2c:	9000      	str	r0, [sp, #0]
   19e2e:	f013 fa12 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   19e32:	b00a      	add	sp, #40	; 0x28
   19e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   19e38:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19e3a:	2100      	movs	r1, #0
   19e3c:	f002 f866 	bl	1bf0c <bt_conn_set_state>
		bt_conn_unref(conn);
   19e40:	4620      	mov	r0, r4
}
   19e42:	b00a      	add	sp, #40	; 0x28
   19e44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   19e48:	f013 bd85 	b.w	2d956 <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   19e4c:	4b89      	ldr	r3, [pc, #548]	; (1a074 <bt_hci_le_enh_conn_complete+0x2a0>)
   19e4e:	2202      	movs	r2, #2
   19e50:	9302      	str	r3, [sp, #8]
   19e52:	2300      	movs	r3, #0
   19e54:	4986      	ldr	r1, [pc, #536]	; (1a070 <bt_hci_le_enh_conn_complete+0x29c>)
   19e56:	4618      	mov	r0, r3
   19e58:	e9cd 3300 	strd	r3, r3, [sp]
   19e5c:	9603      	str	r6, [sp, #12]
   19e5e:	f013 f9fa 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		return;
   19e62:	e7e6      	b.n	19e32 <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   19e64:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   19e66:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   19e6a:	3b02      	subs	r3, #2
   19e6c:	2b01      	cmp	r3, #1
   19e6e:	d827      	bhi.n	19ec0 <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   19e70:	4651      	mov	r1, sl
   19e72:	a808      	add	r0, sp, #32
   19e74:	f013 f9e8 	bl	2d248 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19e78:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   19e7c:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19e80:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   19e82:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19e86:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   19e8a:	f013 f9d8 	bl	2d23e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   19e8e:	2301      	movs	r3, #1
   19e90:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   19e94:	78eb      	ldrb	r3, [r5, #3]
   19e96:	2b01      	cmp	r3, #1
   19e98:	d025      	beq.n	19ee6 <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   19e9a:	4650      	mov	r0, sl
   19e9c:	f7ff f9be 	bl	1921c <bt_addr_le_str>
   19ea0:	4b75      	ldr	r3, [pc, #468]	; (1a078 <bt_hci_le_enh_conn_complete+0x2a4>)
   19ea2:	9003      	str	r0, [sp, #12]
   19ea4:	9302      	str	r3, [sp, #8]
   19ea6:	2300      	movs	r3, #0
   19ea8:	2201      	movs	r2, #1
   19eaa:	4618      	mov	r0, r3
   19eac:	e9cd 3300 	strd	r3, r3, [sp]
   19eb0:	496f      	ldr	r1, [pc, #444]	; (1a070 <bt_hci_le_enh_conn_complete+0x29c>)
   19eb2:	f013 f9d0 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   19eb6:	211f      	movs	r1, #31
   19eb8:	4648      	mov	r0, r9
   19eba:	f013 f9f3 	bl	2d2a4 <bt_hci_disconnect>
		return;
   19ebe:	e7b8      	b.n	19e32 <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   19ec0:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   19ec2:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   19ec4:	2b01      	cmp	r3, #1
   19ec6:	bf04      	itt	eq
   19ec8:	4b6c      	ldreq	r3, [pc, #432]	; (1a07c <bt_hci_le_enh_conn_complete+0x2a8>)
   19eca:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   19ece:	4630      	mov	r0, r6
   19ed0:	f013 fb42 	bl	2d558 <bt_lookup_id_addr>
   19ed4:	4601      	mov	r1, r0
   19ed6:	a808      	add	r0, sp, #32
   19ed8:	f013 f9b6 	bl	2d248 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   19edc:	4651      	mov	r1, sl
   19ede:	a806      	add	r0, sp, #24
   19ee0:	f013 f9b2 	bl	2d248 <bt_addr_le_copy>
   19ee4:	e7d6      	b.n	19e94 <bt_hci_le_enh_conn_complete+0xc0>
   19ee6:	a808      	add	r0, sp, #32
   19ee8:	f7ff faae 	bl	19448 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19eec:	78eb      	ldrb	r3, [r5, #3]
   19eee:	4604      	mov	r4, r0
   19ef0:	2b01      	cmp	r3, #1
   19ef2:	d10a      	bne.n	19f0a <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   19ef4:	f001 f9e8 	bl	1b2c8 <bt_le_adv_lookup_legacy>
   19ef8:	4606      	mov	r6, r0
   19efa:	f06f 0180 	mvn.w	r1, #128	; 0x80
   19efe:	3010      	adds	r0, #16
   19f00:	f013 f9b8 	bl	2d274 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   19f04:	4630      	mov	r0, r6
   19f06:	f013 fc55 	bl	2d7b4 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   19f0a:	2c00      	cmp	r4, #0
   19f0c:	d0c5      	beq.n	19e9a <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   19f0e:	4620      	mov	r0, r4
	conn->err = 0U;
   19f10:	2200      	movs	r2, #0
	conn->handle = handle;
   19f12:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   19f16:	a908      	add	r1, sp, #32
   19f18:	f013 f996 	bl	2d248 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   19f1c:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   19f20:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   19f24:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   19f28:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   19f2c:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   19f30:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   19f34:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   19f36:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19f38:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   19f3a:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19f3c:	d115      	bne.n	19f6a <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   19f3e:	a906      	add	r1, sp, #24
   19f40:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   19f44:	f013 f980 	bl	2d248 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   19f48:	f001 f9be 	bl	1b2c8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   19f4c:	7a21      	ldrb	r1, [r4, #8]
   19f4e:	4a4b      	ldr	r2, [pc, #300]	; (1a07c <bt_hci_le_enh_conn_complete+0x2a8>)
   19f50:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   19f54:	4411      	add	r1, r2
   19f56:	f104 0096 	add.w	r0, r4, #150	; 0x96
   19f5a:	f013 f975 	bl	2d248 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   19f5e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   19f62:	065d      	lsls	r5, r3, #25
   19f64:	d501      	bpl.n	19f6a <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   19f66:	f001 fb73 	bl	1b650 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   19f6a:	2107      	movs	r1, #7
   19f6c:	4620      	mov	r0, r4
   19f6e:	f001 ffcd 	bl	1bf0c <bt_conn_set_state>
	if (is_disconnected) {
   19f72:	b11f      	cbz	r7, 19f7c <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   19f74:	2101      	movs	r1, #1
   19f76:	4620      	mov	r0, r4
   19f78:	f001 ffc8 	bl	1bf0c <bt_conn_set_state>
	bt_conn_connected(conn);
   19f7c:	4620      	mov	r0, r4
   19f7e:	f013 fd20 	bl	2d9c2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   19f82:	7b63      	ldrb	r3, [r4, #13]
   19f84:	2b07      	cmp	r3, #7
   19f86:	d167      	bne.n	1a058 <bt_hci_le_enh_conn_complete+0x284>
   19f88:	1d23      	adds	r3, r4, #4
   19f8a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   19f8e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   19f92:	4e3a      	ldr	r6, [pc, #232]	; (1a07c <bt_hci_le_enh_conn_complete+0x2a8>)
   19f94:	d125      	bne.n	19fe2 <bt_hci_le_enh_conn_complete+0x20e>
   19f96:	78e3      	ldrb	r3, [r4, #3]
   19f98:	b11b      	cbz	r3, 19fa2 <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   19f9a:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   19f9e:	0718      	lsls	r0, r3, #28
   19fa0:	d51f      	bpl.n	19fe2 <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   19fa2:	2102      	movs	r1, #2
   19fa4:	f242 0016 	movw	r0, #8214	; 0x2016
   19fa8:	f7ff fe10 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   19fac:	4605      	mov	r5, r0
   19fae:	2800      	cmp	r0, #0
   19fb0:	d056      	beq.n	1a060 <bt_hci_le_enh_conn_complete+0x28c>
   19fb2:	2102      	movs	r1, #2
   19fb4:	300c      	adds	r0, #12
   19fb6:	f015 f9ac 	bl	2f312 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   19fba:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   19fbc:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   19fbe:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   19fc0:	4629      	mov	r1, r5
   19fc2:	f242 0016 	movw	r0, #8214	; 0x2016
   19fc6:	f7ff fe3b 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
   19fca:	b150      	cbz	r0, 19fe2 <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   19fcc:	4b2c      	ldr	r3, [pc, #176]	; (1a080 <bt_hci_le_enh_conn_complete+0x2ac>)
   19fce:	9003      	str	r0, [sp, #12]
   19fd0:	9302      	str	r3, [sp, #8]
   19fd2:	2300      	movs	r3, #0
   19fd4:	2201      	movs	r2, #1
   19fd6:	4618      	mov	r0, r3
   19fd8:	e9cd 3300 	strd	r3, r3, [sp]
   19fdc:	4924      	ldr	r1, [pc, #144]	; (1a070 <bt_hci_le_enh_conn_complete+0x29c>)
   19fde:	f013 f93a 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   19fe2:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   19fe6:	07d9      	lsls	r1, r3, #31
   19fe8:	d513      	bpl.n	1a012 <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   19fea:	2500      	movs	r5, #0
   19fec:	2302      	movs	r3, #2
   19fee:	4629      	mov	r1, r5
   19ff0:	461a      	mov	r2, r3
   19ff2:	4620      	mov	r0, r4
   19ff4:	9500      	str	r5, [sp, #0]
   19ff6:	f013 f98e 	bl	2d316 <bt_le_set_phy>
		if (err) {
   19ffa:	b150      	cbz	r0, 1a012 <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   19ffc:	4b21      	ldr	r3, [pc, #132]	; (1a084 <bt_hci_le_enh_conn_complete+0x2b0>)
   19ffe:	9003      	str	r0, [sp, #12]
   1a000:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a004:	2201      	movs	r2, #1
   1a006:	462b      	mov	r3, r5
   1a008:	4628      	mov	r0, r5
   1a00a:	4919      	ldr	r1, [pc, #100]	; (1a070 <bt_hci_le_enh_conn_complete+0x29c>)
   1a00c:	9500      	str	r5, [sp, #0]
   1a00e:	f013 f922 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1a012:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1a016:	069a      	lsls	r2, r3, #26
   1a018:	d51e      	bpl.n	1a058 <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1a01a:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
   1a01e:	689b      	ldr	r3, [r3, #8]
   1a020:	079b      	lsls	r3, r3, #30
   1a022:	d519      	bpl.n	1a058 <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1a024:	f10d 0116 	add.w	r1, sp, #22
   1a028:	a805      	add	r0, sp, #20
   1a02a:	f7ff fe7f 	bl	19d2c <hci_le_read_max_data_len>
			if (!err) {
   1a02e:	4605      	mov	r5, r0
   1a030:	b990      	cbnz	r0, 1a058 <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   1a032:	4620      	mov	r0, r4
   1a034:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1a038:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1a03c:	f013 f94d 	bl	2d2da <bt_le_set_data_len>
				if (err) {
   1a040:	b150      	cbz	r0, 1a058 <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   1a042:	4b11      	ldr	r3, [pc, #68]	; (1a088 <bt_hci_le_enh_conn_complete+0x2b4>)
   1a044:	9003      	str	r0, [sp, #12]
   1a046:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a04a:	2201      	movs	r2, #1
   1a04c:	462b      	mov	r3, r5
   1a04e:	4628      	mov	r0, r5
   1a050:	4907      	ldr	r1, [pc, #28]	; (1a070 <bt_hci_le_enh_conn_complete+0x29c>)
   1a052:	9500      	str	r5, [sp, #0]
   1a054:	f013 f8ff 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   1a058:	4620      	mov	r0, r4
   1a05a:	f013 fc7c 	bl	2d956 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a05e:	e6e8      	b.n	19e32 <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   1a060:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a064:	e7b2      	b.n	19fcc <bt_hci_le_enh_conn_complete+0x1f8>
   1a066:	bf00      	nop
   1a068:	20030e18 	.word	0x20030e18
   1a06c:	000367ff 	.word	0x000367ff
   1a070:	00032ef0 	.word	0x00032ef0
   1a074:	00036820 	.word	0x00036820
   1a078:	00036839 	.word	0x00036839
   1a07c:	20008000 	.word	0x20008000
   1a080:	00036855 	.word	0x00036855
   1a084:	00036876 	.word	0x00036876
   1a088:	0003688d 	.word	0x0003688d

0001a08c <le_legacy_conn_complete>:
{
   1a08c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a08e:	68c1      	ldr	r1, [r0, #12]
{
   1a090:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   1a092:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a094:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   1a096:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1a09a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a09e:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1a0a0:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1a0a4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1a0a8:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1a0ac:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1a0b0:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1a0b4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1a0b8:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1a0bc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a0c0:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1a0c4:	7b4b      	ldrb	r3, [r1, #13]
   1a0c6:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a0ca:	f013 f8bd 	bl	2d248 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1a0ce:	4907      	ldr	r1, [pc, #28]	; (1a0ec <le_legacy_conn_complete+0x60>)
   1a0d0:	f10d 000b 	add.w	r0, sp, #11
   1a0d4:	f013 f8b3 	bl	2d23e <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1a0d8:	f10d 0011 	add.w	r0, sp, #17
   1a0dc:	f013 f8af 	bl	2d23e <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1a0e0:	4668      	mov	r0, sp
   1a0e2:	f7ff fe77 	bl	19dd4 <bt_hci_le_enh_conn_complete>
}
   1a0e6:	b009      	add	sp, #36	; 0x24
   1a0e8:	f85d fb04 	ldr.w	pc, [sp], #4
   1a0ec:	000364e0 	.word	0x000364e0

0001a0f0 <bt_security_err_get>:
	switch (hci_err) {
   1a0f0:	2829      	cmp	r0, #41	; 0x29
   1a0f2:	bf9a      	itte	ls
   1a0f4:	4b01      	ldrls	r3, [pc, #4]	; (1a0fc <bt_security_err_get+0xc>)
   1a0f6:	5c18      	ldrbls	r0, [r3, r0]
{
   1a0f8:	2009      	movhi	r0, #9
}
   1a0fa:	4770      	bx	lr
   1a0fc:	00036b2f 	.word	0x00036b2f

0001a100 <hci_encrypt_key_refresh_complete>:
{
   1a100:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1a102:	68c3      	ldr	r3, [r0, #12]
{
   1a104:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   1a106:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   1a10a:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1a10c:	4630      	mov	r0, r6
   1a10e:	f001 fef5 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   1a112:	4604      	mov	r4, r0
   1a114:	b958      	cbnz	r0, 1a12e <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1a116:	4b1e      	ldr	r3, [pc, #120]	; (1a190 <hci_encrypt_key_refresh_complete+0x90>)
   1a118:	2201      	movs	r2, #1
   1a11a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a11e:	491d      	ldr	r1, [pc, #116]	; (1a194 <hci_encrypt_key_refresh_complete+0x94>)
   1a120:	4603      	mov	r3, r0
   1a122:	9603      	str	r6, [sp, #12]
   1a124:	9000      	str	r0, [sp, #0]
   1a126:	f013 f896 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1a12a:	b005      	add	sp, #20
   1a12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1a12e:	b16d      	cbz	r5, 1a14c <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a130:	4628      	mov	r0, r5
   1a132:	f7ff ffdd 	bl	1a0f0 <bt_security_err_get>
   1a136:	4629      	mov	r1, r5
   1a138:	4602      	mov	r2, r0
   1a13a:	4620      	mov	r0, r4
   1a13c:	f002 f8a0 	bl	1c280 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1a140:	4620      	mov	r0, r4
}
   1a142:	b005      	add	sp, #20
   1a144:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1a148:	f013 bc05 	b.w	2d956 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a14c:	7887      	ldrb	r7, [r0, #2]
   1a14e:	2f01      	cmp	r7, #1
   1a150:	d1ee      	bne.n	1a130 <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   1a152:	f005 fee1 	bl	1ff18 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1a156:	4620      	mov	r0, r4
   1a158:	f013 f84d 	bl	2d1f6 <update_sec_level>
   1a15c:	4606      	mov	r6, r0
   1a15e:	2800      	cmp	r0, #0
   1a160:	d1e6      	bne.n	1a130 <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a162:	2005      	movs	r0, #5
   1a164:	f7ff ffc4 	bl	1a0f0 <bt_security_err_get>
   1a168:	2105      	movs	r1, #5
   1a16a:	4602      	mov	r2, r0
   1a16c:	4620      	mov	r0, r4
   1a16e:	f002 f887 	bl	1c280 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1a172:	4b09      	ldr	r3, [pc, #36]	; (1a198 <hci_encrypt_key_refresh_complete+0x98>)
   1a174:	4630      	mov	r0, r6
   1a176:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1a17a:	463a      	mov	r2, r7
   1a17c:	4633      	mov	r3, r6
   1a17e:	4905      	ldr	r1, [pc, #20]	; (1a194 <hci_encrypt_key_refresh_complete+0x94>)
   1a180:	9600      	str	r6, [sp, #0]
   1a182:	f013 f868 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1a186:	2105      	movs	r1, #5
   1a188:	4620      	mov	r0, r4
   1a18a:	f013 fc23 	bl	2d9d4 <bt_conn_disconnect>
   1a18e:	e7d7      	b.n	1a140 <hci_encrypt_key_refresh_complete+0x40>
   1a190:	000365a3 	.word	0x000365a3
   1a194:	00032ef0 	.word	0x00032ef0
   1a198:	000368a9 	.word	0x000368a9

0001a19c <hci_encrypt_change>:
{
   1a19c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1a19e:	68c6      	ldr	r6, [r0, #12]
{
   1a1a0:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a1a2:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   1a1a6:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1a1a8:	4638      	mov	r0, r7
   1a1aa:	f001 fea7 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   1a1ae:	4604      	mov	r4, r0
   1a1b0:	b958      	cbnz	r0, 1a1ca <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1a1b2:	4b23      	ldr	r3, [pc, #140]	; (1a240 <hci_encrypt_change+0xa4>)
   1a1b4:	2201      	movs	r2, #1
   1a1b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a1ba:	4922      	ldr	r1, [pc, #136]	; (1a244 <hci_encrypt_change+0xa8>)
   1a1bc:	4603      	mov	r3, r0
   1a1be:	9703      	str	r7, [sp, #12]
   1a1c0:	9000      	str	r0, [sp, #0]
   1a1c2:	f013 f848 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1a1c6:	b005      	add	sp, #20
   1a1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1a1ca:	b16d      	cbz	r5, 1a1e8 <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   1a1cc:	4628      	mov	r0, r5
   1a1ce:	f7ff ff8f 	bl	1a0f0 <bt_security_err_get>
   1a1d2:	4629      	mov	r1, r5
   1a1d4:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a1d6:	4620      	mov	r0, r4
   1a1d8:	f002 f852 	bl	1c280 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1a1dc:	4620      	mov	r0, r4
}
   1a1de:	b005      	add	sp, #20
   1a1e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1a1e4:	f013 bbb7 	b.w	2d956 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a1e8:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1a1ea:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   1a1ec:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   1a1ee:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1a1f0:	d005      	beq.n	1a1fe <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a1f2:	2000      	movs	r0, #0
   1a1f4:	f7ff ff7c 	bl	1a0f0 <bt_security_err_get>
   1a1f8:	2100      	movs	r1, #0
   1a1fa:	4602      	mov	r2, r0
   1a1fc:	e7eb      	b.n	1a1d6 <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   1a1fe:	b10b      	cbz	r3, 1a204 <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   1a200:	f005 fe8a 	bl	1ff18 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1a204:	4620      	mov	r0, r4
   1a206:	f012 fff6 	bl	2d1f6 <update_sec_level>
   1a20a:	4605      	mov	r5, r0
   1a20c:	2800      	cmp	r0, #0
   1a20e:	d1f0      	bne.n	1a1f2 <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a210:	2005      	movs	r0, #5
   1a212:	f7ff ff6d 	bl	1a0f0 <bt_security_err_get>
   1a216:	2105      	movs	r1, #5
   1a218:	4602      	mov	r2, r0
   1a21a:	4620      	mov	r0, r4
   1a21c:	f002 f830 	bl	1c280 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1a220:	4b09      	ldr	r3, [pc, #36]	; (1a248 <hci_encrypt_change+0xac>)
   1a222:	4628      	mov	r0, r5
   1a224:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a228:	2201      	movs	r2, #1
   1a22a:	462b      	mov	r3, r5
   1a22c:	4905      	ldr	r1, [pc, #20]	; (1a244 <hci_encrypt_change+0xa8>)
   1a22e:	9500      	str	r5, [sp, #0]
   1a230:	f013 f811 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1a234:	2105      	movs	r1, #5
   1a236:	4620      	mov	r0, r4
   1a238:	f013 fbcc 	bl	2d9d4 <bt_conn_disconnect>
   1a23c:	e7ce      	b.n	1a1dc <hci_encrypt_change+0x40>
   1a23e:	bf00      	nop
   1a240:	000365a3 	.word	0x000365a3
   1a244:	00032ef0 	.word	0x00032ef0
   1a248:	000368a9 	.word	0x000368a9

0001a24c <bt_send>:
	return bt_dev.drv->send(buf);
   1a24c:	4b02      	ldr	r3, [pc, #8]	; (1a258 <bt_send+0xc>)
   1a24e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1a252:	695b      	ldr	r3, [r3, #20]
   1a254:	4718      	bx	r3
   1a256:	bf00      	nop
   1a258:	20008000 	.word	0x20008000

0001a25c <bt_hci_cmd_send>:
{
   1a25c:	b530      	push	{r4, r5, lr}
   1a25e:	4605      	mov	r5, r0
	if (!buf) {
   1a260:	460c      	mov	r4, r1
{
   1a262:	b085      	sub	sp, #20
	if (!buf) {
   1a264:	b919      	cbnz	r1, 1a26e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   1a266:	f7ff fcb1 	bl	19bcc <bt_hci_cmd_create>
		if (!buf) {
   1a26a:	4604      	mov	r4, r0
   1a26c:	b1f8      	cbz	r0, 1a2ae <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1a26e:	f640 4335 	movw	r3, #3125	; 0xc35
   1a272:	429d      	cmp	r5, r3
   1a274:	d115      	bne.n	1a2a2 <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   1a276:	4620      	mov	r0, r4
   1a278:	f7ff ffe8 	bl	1a24c <bt_send>
		if (err) {
   1a27c:	4605      	mov	r5, r0
   1a27e:	b1a0      	cbz	r0, 1a2aa <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1a280:	4b0c      	ldr	r3, [pc, #48]	; (1a2b4 <bt_hci_cmd_send+0x58>)
   1a282:	9003      	str	r0, [sp, #12]
   1a284:	9302      	str	r3, [sp, #8]
   1a286:	2300      	movs	r3, #0
   1a288:	2201      	movs	r2, #1
   1a28a:	4618      	mov	r0, r3
   1a28c:	e9cd 3300 	strd	r3, r3, [sp]
   1a290:	4909      	ldr	r1, [pc, #36]	; (1a2b8 <bt_hci_cmd_send+0x5c>)
   1a292:	f012 ffe0 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   1a296:	4620      	mov	r0, r4
   1a298:	f006 f902 	bl	204a0 <net_buf_unref>
}
   1a29c:	4628      	mov	r0, r5
   1a29e:	b005      	add	sp, #20
   1a2a0:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1a2a2:	4621      	mov	r1, r4
   1a2a4:	4805      	ldr	r0, [pc, #20]	; (1a2bc <bt_hci_cmd_send+0x60>)
   1a2a6:	f015 f80c 	bl	2f2c2 <net_buf_put>
	return 0;
   1a2aa:	2500      	movs	r5, #0
   1a2ac:	e7f6      	b.n	1a29c <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   1a2ae:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1a2b2:	e7f3      	b.n	1a29c <bt_hci_cmd_send+0x40>
   1a2b4:	000368cf 	.word	0x000368cf
   1a2b8:	00032ef0 	.word	0x00032ef0
   1a2bc:	20008144 	.word	0x20008144

0001a2c0 <bt_hci_host_num_completed_packets>:
{
   1a2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2c2:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   1a2c4:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   1a2c6:	7e46      	ldrb	r6, [r0, #25]
{
   1a2c8:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a2ca:	7a80      	ldrb	r0, [r0, #10]
   1a2cc:	f006 f826 	bl	2031c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a2d0:	4621      	mov	r1, r4
   1a2d2:	f016 fdc3 	bl	30e5c <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1a2d6:	4b2a      	ldr	r3, [pc, #168]	; (1a380 <bt_hci_host_num_completed_packets+0xc0>)
   1a2d8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   1a2dc:	069b      	lsls	r3, r3, #26
   1a2de:	d50e      	bpl.n	1a2fe <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   1a2e0:	4630      	mov	r0, r6
   1a2e2:	f002 f9fb 	bl	1c6dc <bt_conn_lookup_index>
	if (!conn) {
   1a2e6:	4604      	mov	r4, r0
   1a2e8:	b958      	cbnz	r0, 1a302 <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1a2ea:	4b26      	ldr	r3, [pc, #152]	; (1a384 <bt_hci_host_num_completed_packets+0xc4>)
   1a2ec:	2202      	movs	r2, #2
   1a2ee:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a2f2:	4925      	ldr	r1, [pc, #148]	; (1a388 <bt_hci_host_num_completed_packets+0xc8>)
   1a2f4:	4603      	mov	r3, r0
   1a2f6:	9603      	str	r6, [sp, #12]
   1a2f8:	9000      	str	r0, [sp, #0]
   1a2fa:	f012 ffac 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1a2fe:	b005      	add	sp, #20
   1a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   1a302:	7b43      	ldrb	r3, [r0, #13]
   1a304:	3b07      	subs	r3, #7
   1a306:	2b01      	cmp	r3, #1
   1a308:	d90f      	bls.n	1a32a <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   1a30a:	4b20      	ldr	r3, [pc, #128]	; (1a38c <bt_hci_host_num_completed_packets+0xcc>)
   1a30c:	2202      	movs	r2, #2
   1a30e:	9302      	str	r3, [sp, #8]
   1a310:	2300      	movs	r3, #0
   1a312:	491d      	ldr	r1, [pc, #116]	; (1a388 <bt_hci_host_num_completed_packets+0xc8>)
   1a314:	4618      	mov	r0, r3
   1a316:	e9cd 3300 	strd	r3, r3, [sp]
   1a31a:	f012 ff9c 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1a31e:	4620      	mov	r0, r4
}
   1a320:	b005      	add	sp, #20
   1a322:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1a326:	f013 bb16 	b.w	2d956 <bt_conn_unref>
	bt_conn_unref(conn);
   1a32a:	f013 fb14 	bl	2d956 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   1a32e:	2105      	movs	r1, #5
   1a330:	f640 4035 	movw	r0, #3125	; 0xc35
   1a334:	f7ff fc4a 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1a338:	4604      	mov	r4, r0
   1a33a:	b948      	cbnz	r0, 1a350 <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   1a33c:	4b14      	ldr	r3, [pc, #80]	; (1a390 <bt_hci_host_num_completed_packets+0xd0>)
   1a33e:	2201      	movs	r2, #1
   1a340:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a344:	4910      	ldr	r1, [pc, #64]	; (1a388 <bt_hci_host_num_completed_packets+0xc8>)
   1a346:	4603      	mov	r3, r0
   1a348:	9000      	str	r0, [sp, #0]
   1a34a:	f012 ff84 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		return;
   1a34e:	e7d6      	b.n	1a2fe <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   1a350:	f100 070c 	add.w	r7, r0, #12
   1a354:	2101      	movs	r1, #1
   1a356:	4638      	mov	r0, r7
   1a358:	f014 ffdb 	bl	2f312 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   1a35c:	2601      	movs	r6, #1
   1a35e:	2104      	movs	r1, #4
   1a360:	7006      	strb	r6, [r0, #0]
   1a362:	4638      	mov	r0, r7
   1a364:	f014 ffd5 	bl	2f312 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   1a368:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   1a36a:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   1a36c:	7086      	strb	r6, [r0, #2]
   1a36e:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1a370:	4621      	mov	r1, r4
   1a372:	f640 4035 	movw	r0, #3125	; 0xc35
}
   1a376:	b005      	add	sp, #20
   1a378:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1a37c:	f7ff bf6e 	b.w	1a25c <bt_hci_cmd_send>
   1a380:	20008000 	.word	0x20008000
   1a384:	000368f1 	.word	0x000368f1
   1a388:	00032ef0 	.word	0x00032ef0
   1a38c:	0003691a 	.word	0x0003691a
   1a390:	00036946 	.word	0x00036946

0001a394 <le_ltk_request>:
{
   1a394:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1a396:	68c6      	ldr	r6, [r0, #12]
{
   1a398:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   1a39a:	8837      	ldrh	r7, [r6, #0]
   1a39c:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   1a39e:	4628      	mov	r0, r5
   1a3a0:	f001 fdac 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   1a3a4:	4604      	mov	r4, r0
   1a3a6:	b958      	cbnz	r0, 1a3c0 <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a3a8:	4b2a      	ldr	r3, [pc, #168]	; (1a454 <le_ltk_request+0xc0>)
   1a3aa:	2201      	movs	r2, #1
   1a3ac:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a3b0:	4929      	ldr	r1, [pc, #164]	; (1a458 <le_ltk_request+0xc4>)
   1a3b2:	4603      	mov	r3, r0
   1a3b4:	9503      	str	r5, [sp, #12]
   1a3b6:	9000      	str	r0, [sp, #0]
   1a3b8:	f012 ff4d 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1a3bc:	b009      	add	sp, #36	; 0x24
   1a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1a3c0:	ad04      	add	r5, sp, #16
   1a3c2:	f8d6 2002 	ldr.w	r2, [r6, #2]
   1a3c6:	f8d6 3006 	ldr.w	r3, [r6, #6]
   1a3ca:	9501      	str	r5, [sp, #4]
   1a3cc:	8971      	ldrh	r1, [r6, #10]
   1a3ce:	9100      	str	r1, [sp, #0]
   1a3d0:	f014 fd53 	bl	2ee7a <bt_smp_request_ltk>
   1a3d4:	b360      	cbz	r0, 1a430 <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1a3d6:	2112      	movs	r1, #18
   1a3d8:	f242 001a 	movw	r0, #8218	; 0x201a
   1a3dc:	f7ff fbf6 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1a3e0:	4606      	mov	r6, r0
   1a3e2:	b968      	cbnz	r0, 1a400 <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   1a3e4:	4b1d      	ldr	r3, [pc, #116]	; (1a45c <le_ltk_request+0xc8>)
   1a3e6:	2201      	movs	r2, #1
   1a3e8:	9302      	str	r3, [sp, #8]
   1a3ea:	2300      	movs	r3, #0
   1a3ec:	491a      	ldr	r1, [pc, #104]	; (1a458 <le_ltk_request+0xc4>)
   1a3ee:	4618      	mov	r0, r3
   1a3f0:	e9cd 3300 	strd	r3, r3, [sp]
   1a3f4:	f012 ff2f 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   1a3f8:	4620      	mov	r0, r4
   1a3fa:	f013 faac 	bl	2d956 <bt_conn_unref>
   1a3fe:	e7dd      	b.n	1a3bc <le_ltk_request+0x28>
   1a400:	2112      	movs	r1, #18
   1a402:	300c      	adds	r0, #12
   1a404:	f014 ff85 	bl	2f312 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1a408:	4602      	mov	r2, r0
   1a40a:	462b      	mov	r3, r5
   1a40c:	f822 7b02 	strh.w	r7, [r2], #2
   1a410:	af08      	add	r7, sp, #32
   1a412:	461d      	mov	r5, r3
   1a414:	cd03      	ldmia	r5!, {r0, r1}
   1a416:	42bd      	cmp	r5, r7
   1a418:	6010      	str	r0, [r2, #0]
   1a41a:	6051      	str	r1, [r2, #4]
   1a41c:	462b      	mov	r3, r5
   1a41e:	f102 0208 	add.w	r2, r2, #8
   1a422:	d1f6      	bne.n	1a412 <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1a424:	4631      	mov	r1, r6
   1a426:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a42a:	f7ff ff17 	bl	1a25c <bt_hci_cmd_send>
   1a42e:	e7e3      	b.n	1a3f8 <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1a430:	2102      	movs	r1, #2
   1a432:	f242 001b 	movw	r0, #8219	; 0x201b
   1a436:	f7ff fbc9 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1a43a:	4605      	mov	r5, r0
   1a43c:	2800      	cmp	r0, #0
   1a43e:	d0d1      	beq.n	1a3e4 <le_ltk_request+0x50>
   1a440:	2102      	movs	r1, #2
   1a442:	300c      	adds	r0, #12
   1a444:	f014 ff65 	bl	2f312 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a448:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   1a44a:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a44c:	f242 001b 	movw	r0, #8219	; 0x201b
   1a450:	e7eb      	b.n	1a42a <le_ltk_request+0x96>
   1a452:	bf00      	nop
   1a454:	0003657f 	.word	0x0003657f
   1a458:	00032ef0 	.word	0x00032ef0
   1a45c:	00036969 	.word	0x00036969

0001a460 <le_conn_param_neg_reply>:
{
   1a460:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a462:	4606      	mov	r6, r0
   1a464:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a466:	f242 0021 	movw	r0, #8225	; 0x2021
   1a46a:	2103      	movs	r1, #3
   1a46c:	f7ff fbae 	bl	19bcc <bt_hci_cmd_create>
   1a470:	4604      	mov	r4, r0
	if (!buf) {
   1a472:	b950      	cbnz	r0, 1a48a <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   1a474:	4b0c      	ldr	r3, [pc, #48]	; (1a4a8 <le_conn_param_neg_reply+0x48>)
   1a476:	2201      	movs	r2, #1
   1a478:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a47c:	490b      	ldr	r1, [pc, #44]	; (1a4ac <le_conn_param_neg_reply+0x4c>)
   1a47e:	4603      	mov	r3, r0
   1a480:	9000      	str	r0, [sp, #0]
   1a482:	f012 fee8 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
}
   1a486:	b004      	add	sp, #16
   1a488:	bd70      	pop	{r4, r5, r6, pc}
   1a48a:	2103      	movs	r1, #3
   1a48c:	300c      	adds	r0, #12
   1a48e:	f014 ff40 	bl	2f312 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a492:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1a494:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1a496:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a498:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1a49c:	b004      	add	sp, #16
   1a49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a4a2:	f7ff bedb 	b.w	1a25c <bt_hci_cmd_send>
   1a4a6:	bf00      	nop
   1a4a8:	00036980 	.word	0x00036980
   1a4ac:	00032ef0 	.word	0x00032ef0

0001a4b0 <le_conn_param_req>:
{
   1a4b0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1a4b2:	68c3      	ldr	r3, [r0, #12]
{
   1a4b4:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a4b6:	78d9      	ldrb	r1, [r3, #3]
   1a4b8:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1a4ba:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a4bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a4c0:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a4c4:	7959      	ldrb	r1, [r3, #5]
   1a4c6:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   1a4c8:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a4ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a4ce:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   1a4d2:	799a      	ldrb	r2, [r3, #6]
   1a4d4:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   1a4d6:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   1a4d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a4dc:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a4e0:	7a1a      	ldrb	r2, [r3, #8]
   1a4e2:	7a5b      	ldrb	r3, [r3, #9]
   1a4e4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1a4e8:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   1a4ec:	f001 fd06 	bl	1befc <bt_conn_lookup_handle>
	if (!conn) {
   1a4f0:	4604      	mov	r4, r0
   1a4f2:	b978      	cbnz	r0, 1a514 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a4f4:	4b1e      	ldr	r3, [pc, #120]	; (1a570 <le_conn_param_req+0xc0>)
   1a4f6:	491f      	ldr	r1, [pc, #124]	; (1a574 <le_conn_param_req+0xc4>)
   1a4f8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a4fc:	9000      	str	r0, [sp, #0]
   1a4fe:	4603      	mov	r3, r0
   1a500:	2201      	movs	r2, #1
   1a502:	9503      	str	r5, [sp, #12]
   1a504:	f012 fea7 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1a508:	2102      	movs	r1, #2
   1a50a:	4628      	mov	r0, r5
   1a50c:	f7ff ffa8 	bl	1a460 <le_conn_param_neg_reply>
}
   1a510:	b006      	add	sp, #24
   1a512:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   1a514:	a904      	add	r1, sp, #16
   1a516:	f001 fe4b 	bl	1c1b0 <le_param_req>
   1a51a:	b938      	cbnz	r0, 1a52c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1a51c:	211e      	movs	r1, #30
   1a51e:	4628      	mov	r0, r5
   1a520:	f7ff ff9e 	bl	1a460 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1a524:	4620      	mov	r0, r4
   1a526:	f013 fa16 	bl	2d956 <bt_conn_unref>
   1a52a:	e7f1      	b.n	1a510 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1a52c:	210e      	movs	r1, #14
   1a52e:	f242 0020 	movw	r0, #8224	; 0x2020
   1a532:	f7ff fb4b 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1a536:	4605      	mov	r5, r0
   1a538:	2800      	cmp	r0, #0
   1a53a:	d0f3      	beq.n	1a524 <le_conn_param_req+0x74>
   1a53c:	210e      	movs	r1, #14
   1a53e:	300c      	adds	r0, #12
   1a540:	f014 fee7 	bl	2f312 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1a544:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   1a546:	8006      	strh	r6, [r0, #0]
   1a548:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a54c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a550:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a552:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1a554:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1a558:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1a55a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1a55e:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a560:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1a564:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a566:	f242 0020 	movw	r0, #8224	; 0x2020
   1a56a:	f7ff fe77 	bl	1a25c <bt_hci_cmd_send>
   1a56e:	e7d9      	b.n	1a524 <le_conn_param_req+0x74>
   1a570:	0003657f 	.word	0x0003657f
   1a574:	00032ef0 	.word	0x00032ef0

0001a578 <hci_tx_thread>:
{
   1a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1a57c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 1a6c8 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   1a580:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a6cc <hci_tx_thread+0x154>
{
   1a584:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   1a586:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1a58a:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1a58e:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   1a590:	f36f 3394 	bfc	r3, #14, #7
   1a594:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1a598:	f001 fc78 	bl	1be8c <bt_conn_prepare_events>
   1a59c:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1a59e:	f04f 32ff 	mov.w	r2, #4294967295
   1a5a2:	f04f 33ff 	mov.w	r3, #4294967295
   1a5a6:	4629      	mov	r1, r5
   1a5a8:	4847      	ldr	r0, [pc, #284]	; (1a6c8 <hci_tx_thread+0x150>)
   1a5aa:	f00c f9e3 	bl	26974 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1a5ae:	b160      	cbz	r0, 1a5ca <hci_tx_thread+0x52>
   1a5b0:	f640 13e6 	movw	r3, #2534	; 0x9e6
   1a5b4:	464a      	mov	r2, r9
   1a5b6:	4946      	ldr	r1, [pc, #280]	; (1a6d0 <hci_tx_thread+0x158>)
   1a5b8:	4846      	ldr	r0, [pc, #280]	; (1a6d4 <hci_tx_thread+0x15c>)
   1a5ba:	f010 f8bf 	bl	2a73c <assert_print>
   1a5be:	4040      	eors	r0, r0
   1a5c0:	f380 8811 	msr	BASEPRI, r0
   1a5c4:	f04f 0003 	mov.w	r0, #3
   1a5c8:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1a5ca:	f04f 0a00 	mov.w	sl, #0
{
   1a5ce:	4e3e      	ldr	r6, [pc, #248]	; (1a6c8 <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   1a5d0:	b915      	cbnz	r5, 1a5d8 <hci_tx_thread+0x60>
	z_impl_k_yield();
   1a5d2:	f00b fea9 	bl	26328 <z_impl_k_yield>
	while (1) {
   1a5d6:	e7d8      	b.n	1a58a <hci_tx_thread+0x12>
		switch (ev->state) {
   1a5d8:	68f3      	ldr	r3, [r6, #12]
   1a5da:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1a5de:	2b01      	cmp	r3, #1
   1a5e0:	d95a      	bls.n	1a698 <hci_tx_thread+0x120>
   1a5e2:	2b04      	cmp	r3, #4
   1a5e4:	d162      	bne.n	1a6ac <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1a5e6:	7b33      	ldrb	r3, [r6, #12]
   1a5e8:	2b00      	cmp	r3, #0
   1a5ea:	d158      	bne.n	1a69e <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1a5ec:	2200      	movs	r2, #0
   1a5ee:	2300      	movs	r3, #0
   1a5f0:	4839      	ldr	r0, [pc, #228]	; (1a6d8 <hci_tx_thread+0x160>)
   1a5f2:	f014 fe33 	bl	2f25c <net_buf_get>
	BT_ASSERT(buf);
   1a5f6:	4604      	mov	r4, r0
   1a5f8:	b960      	cbnz	r0, 1a614 <hci_tx_thread+0x9c>
   1a5fa:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1a5fe:	464a      	mov	r2, r9
   1a600:	4936      	ldr	r1, [pc, #216]	; (1a6dc <hci_tx_thread+0x164>)
   1a602:	4834      	ldr	r0, [pc, #208]	; (1a6d4 <hci_tx_thread+0x15c>)
   1a604:	f010 f89a 	bl	2a73c <assert_print>
   1a608:	4040      	eors	r0, r0
   1a60a:	f380 8811 	msr	BASEPRI, r0
   1a60e:	f04f 0003 	mov.w	r0, #3
   1a612:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   1a614:	4f32      	ldr	r7, [pc, #200]	; (1a6e0 <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   1a616:	f04f 33ff 	mov.w	r3, #4294967295
   1a61a:	f04f 32ff 	mov.w	r2, #4294967295
   1a61e:	4831      	ldr	r0, [pc, #196]	; (1a6e4 <hci_tx_thread+0x16c>)
   1a620:	f00b fa06 	bl	25a30 <z_impl_k_sem_take>
   1a624:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   1a628:	b183      	cbz	r3, 1a64c <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   1a62a:	4b2f      	ldr	r3, [pc, #188]	; (1a6e8 <hci_tx_thread+0x170>)
   1a62c:	2201      	movs	r2, #1
   1a62e:	9302      	str	r3, [sp, #8]
   1a630:	2300      	movs	r3, #0
   1a632:	492e      	ldr	r1, [pc, #184]	; (1a6ec <hci_tx_thread+0x174>)
   1a634:	4618      	mov	r0, r3
   1a636:	e9cd 3300 	strd	r3, r3, [sp]
   1a63a:	f012 fe0c 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   1a63e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   1a642:	f005 ff2d 	bl	204a0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1a646:	2300      	movs	r3, #0
   1a648:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1a64c:	4620      	mov	r0, r4
   1a64e:	f014 fe3a 	bl	2f2c6 <net_buf_ref>
   1a652:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   1a656:	4620      	mov	r0, r4
   1a658:	f7ff fdf8 	bl	1a24c <bt_send>
	if (err) {
   1a65c:	b1e0      	cbz	r0, 1a698 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1a65e:	4b24      	ldr	r3, [pc, #144]	; (1a6f0 <hci_tx_thread+0x178>)
   1a660:	9003      	str	r0, [sp, #12]
   1a662:	9302      	str	r3, [sp, #8]
   1a664:	2300      	movs	r3, #0
   1a666:	2201      	movs	r2, #1
   1a668:	4618      	mov	r0, r3
   1a66a:	e9cd 3300 	strd	r3, r3, [sp]
   1a66e:	491f      	ldr	r1, [pc, #124]	; (1a6ec <hci_tx_thread+0x174>)
   1a670:	f012 fdf1 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   1a674:	481b      	ldr	r0, [pc, #108]	; (1a6e4 <hci_tx_thread+0x16c>)
   1a676:	f00b f9b5 	bl	259e4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1a67a:	4620      	mov	r0, r4
   1a67c:	f005 fe56 	bl	2032c <net_buf_id>
   1a680:	220c      	movs	r2, #12
   1a682:	4b1c      	ldr	r3, [pc, #112]	; (1a6f4 <hci_tx_thread+0x17c>)
   1a684:	211f      	movs	r1, #31
   1a686:	fb02 3000 	mla	r0, r2, r0, r3
   1a68a:	4622      	mov	r2, r4
   1a68c:	8840      	ldrh	r0, [r0, #2]
   1a68e:	f7ff f8e7 	bl	19860 <hci_cmd_done>
		net_buf_unref(buf);
   1a692:	4620      	mov	r0, r4
   1a694:	f005 ff04 	bl	204a0 <net_buf_unref>
	for (; count; ev++, count--) {
   1a698:	3614      	adds	r6, #20
   1a69a:	3d01      	subs	r5, #1
   1a69c:	e798      	b.n	1a5d0 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1a69e:	2b01      	cmp	r3, #1
   1a6a0:	d1fa      	bne.n	1a698 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   1a6a2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1a6a4:	3838      	subs	r0, #56	; 0x38
   1a6a6:	f001 ff83 	bl	1c5b0 <bt_conn_process_tx>
   1a6aa:	e7f5      	b.n	1a698 <hci_tx_thread+0x120>
		switch (ev->state) {
   1a6ac:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1a6ae:	4b12      	ldr	r3, [pc, #72]	; (1a6f8 <hci_tx_thread+0x180>)
   1a6b0:	2202      	movs	r2, #2
   1a6b2:	e9cd a301 	strd	sl, r3, [sp, #4]
   1a6b6:	2300      	movs	r3, #0
   1a6b8:	490c      	ldr	r1, [pc, #48]	; (1a6ec <hci_tx_thread+0x174>)
   1a6ba:	4618      	mov	r0, r3
   1a6bc:	f8cd a000 	str.w	sl, [sp]
   1a6c0:	f012 fdc9 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
   1a6c4:	e7e8      	b.n	1a698 <hci_tx_thread+0x120>
   1a6c6:	bf00      	nop
   1a6c8:	20008520 	.word	0x20008520
   1a6cc:	0003660d 	.word	0x0003660d
   1a6d0:	0003679a 	.word	0x0003679a
   1a6d4:	0003665a 	.word	0x0003665a
   1a6d8:	20008144 	.word	0x20008144
   1a6dc:	00037a5f 	.word	0x00037a5f
   1a6e0:	20008000 	.word	0x20008000
   1a6e4:	20008120 	.word	0x20008120
   1a6e8:	0003699a 	.word	0x0003699a
   1a6ec:	00032ef0 	.word	0x00032ef0
   1a6f0:	000368cf 	.word	0x000368cf
   1a6f4:	2003080c 	.word	0x2003080c
   1a6f8:	000369b5 	.word	0x000369b5

0001a6fc <hci_event_prio>:
{
   1a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a700:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1a702:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1a706:	4630      	mov	r0, r6
   1a708:	f014 fe43 	bl	2f392 <net_buf_simple_headroom>
	state->len = buf->len;
   1a70c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   1a710:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1a712:	f1b8 0f01 	cmp.w	r8, #1
   1a716:	d80c      	bhi.n	1a732 <hci_event_prio+0x36>
   1a718:	f640 537b 	movw	r3, #3451	; 0xd7b
   1a71c:	4a1b      	ldr	r2, [pc, #108]	; (1a78c <hci_event_prio+0x90>)
   1a71e:	491c      	ldr	r1, [pc, #112]	; (1a790 <hci_event_prio+0x94>)
   1a720:	481c      	ldr	r0, [pc, #112]	; (1a794 <hci_event_prio+0x98>)
   1a722:	f010 f80b 	bl	2a73c <assert_print>
   1a726:	4040      	eors	r0, r0
   1a728:	f380 8811 	msr	BASEPRI, r0
   1a72c:	f04f 0003 	mov.w	r0, #3
   1a730:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1a732:	4630      	mov	r0, r6
   1a734:	2102      	movs	r1, #2
   1a736:	f014 fe1c 	bl	2f372 <net_buf_simple_pull_mem>
   1a73a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a73c:	7800      	ldrb	r0, [r0, #0]
   1a73e:	f012 fd48 	bl	2d1d2 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1a742:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a744:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1a746:	d40c      	bmi.n	1a762 <hci_event_prio+0x66>
   1a748:	f640 537f 	movw	r3, #3455	; 0xd7f
   1a74c:	4a0f      	ldr	r2, [pc, #60]	; (1a78c <hci_event_prio+0x90>)
   1a74e:	4912      	ldr	r1, [pc, #72]	; (1a798 <hci_event_prio+0x9c>)
   1a750:	4810      	ldr	r0, [pc, #64]	; (1a794 <hci_event_prio+0x98>)
   1a752:	f00f fff3 	bl	2a73c <assert_print>
   1a756:	4040      	eors	r0, r0
   1a758:	f380 8811 	msr	BASEPRI, r0
   1a75c:	f04f 0003 	mov.w	r0, #3
   1a760:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1a762:	2305      	movs	r3, #5
   1a764:	4621      	mov	r1, r4
   1a766:	4a0d      	ldr	r2, [pc, #52]	; (1a79c <hci_event_prio+0xa0>)
   1a768:	7838      	ldrb	r0, [r7, #0]
   1a76a:	f7fe ff37 	bl	195dc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1a76e:	07b3      	lsls	r3, r6, #30
   1a770:	d507      	bpl.n	1a782 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1a772:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1a774:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1a778:	fa13 f585 	uxtah	r5, r3, r5
   1a77c:	60e5      	str	r5, [r4, #12]
}
   1a77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1a782:	4620      	mov	r0, r4
}
   1a784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1a788:	f005 be8a 	b.w	204a0 <net_buf_unref>
   1a78c:	0003660d 	.word	0x0003660d
   1a790:	00036641 	.word	0x00036641
   1a794:	0003665a 	.word	0x0003665a
   1a798:	000369d6 	.word	0x000369d6
   1a79c:	00033a8c 	.word	0x00033a8c

0001a7a0 <bt_recv>:
{
   1a7a0:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1a7a2:	7e03      	ldrb	r3, [r0, #24]
   1a7a4:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   1a7a6:	2b01      	cmp	r3, #1
{
   1a7a8:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   1a7aa:	d006      	beq.n	1a7ba <bt_recv+0x1a>
   1a7ac:	2b03      	cmp	r3, #3
   1a7ae:	d112      	bne.n	1a7d6 <bt_recv+0x36>
			rx_queue_put(buf);
   1a7b0:	f7fe fe76 	bl	194a0 <rx_queue_put>
		return 0;
   1a7b4:	2000      	movs	r0, #0
}
   1a7b6:	b005      	add	sp, #20
   1a7b8:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a7ba:	68c3      	ldr	r3, [r0, #12]
   1a7bc:	7818      	ldrb	r0, [r3, #0]
   1a7be:	f012 fd08 	bl	2d1d2 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1a7c2:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1a7c4:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1a7c6:	d502      	bpl.n	1a7ce <bt_recv+0x2e>
			hci_event_prio(buf);
   1a7c8:	4620      	mov	r0, r4
   1a7ca:	f7ff ff97 	bl	1a6fc <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1a7ce:	07ab      	lsls	r3, r5, #30
   1a7d0:	d5f0      	bpl.n	1a7b4 <bt_recv+0x14>
			rx_queue_put(buf);
   1a7d2:	4620      	mov	r0, r4
   1a7d4:	e7ec      	b.n	1a7b0 <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   1a7d6:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1a7d8:	4b07      	ldr	r3, [pc, #28]	; (1a7f8 <bt_recv+0x58>)
   1a7da:	2201      	movs	r2, #1
   1a7dc:	9302      	str	r3, [sp, #8]
   1a7de:	2300      	movs	r3, #0
   1a7e0:	4906      	ldr	r1, [pc, #24]	; (1a7fc <bt_recv+0x5c>)
   1a7e2:	4618      	mov	r0, r3
   1a7e4:	e9cd 3300 	strd	r3, r3, [sp]
   1a7e8:	f012 fd35 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1a7ec:	4620      	mov	r0, r4
   1a7ee:	f005 fe57 	bl	204a0 <net_buf_unref>
		return -EINVAL;
   1a7f2:	f06f 0015 	mvn.w	r0, #21
   1a7f6:	e7de      	b.n	1a7b6 <bt_recv+0x16>
   1a7f8:	000369ef 	.word	0x000369ef
   1a7fc:	00032ef0 	.word	0x00032ef0

0001a800 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1a800:	4a08      	ldr	r2, [pc, #32]	; (1a824 <bt_hci_driver_register+0x24>)
{
   1a802:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1a804:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
   1a808:	b930      	cbnz	r0, 1a818 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1a80a:	68d9      	ldr	r1, [r3, #12]
   1a80c:	b139      	cbz	r1, 1a81e <bt_hci_driver_register+0x1e>
   1a80e:	6959      	ldr	r1, [r3, #20]
   1a810:	b129      	cbz	r1, 1a81e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1a812:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
   1a816:	4770      	bx	lr
		return -EALREADY;
   1a818:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a81c:	4770      	bx	lr
		return -EINVAL;
   1a81e:	f06f 0015 	mvn.w	r0, #21
}
   1a822:	4770      	bx	lr
   1a824:	20008000 	.word	0x20008000

0001a828 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a828:	2104      	movs	r1, #4
   1a82a:	4801      	ldr	r0, [pc, #4]	; (1a830 <bt_finalize_init+0x8>)
   1a82c:	f012 bcfc 	b.w	2d228 <atomic_or>
   1a830:	200080cc 	.word	0x200080cc

0001a834 <init_work>:
{
   1a834:	b510      	push	{r4, lr}
	err = bt_init();
   1a836:	f7ee fe5b 	bl	94f0 <bt_init>
	if (ready_cb) {
   1a83a:	4b03      	ldr	r3, [pc, #12]	; (1a848 <init_work+0x14>)
   1a83c:	681b      	ldr	r3, [r3, #0]
   1a83e:	b113      	cbz	r3, 1a846 <init_work+0x12>
}
   1a840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1a844:	4718      	bx	r3
}
   1a846:	bd10      	pop	{r4, pc}
   1a848:	20030884 	.word	0x20030884

0001a84c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1a84c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1a84e:	4e38      	ldr	r6, [pc, #224]	; (1a930 <bt_enable+0xe4>)
{
   1a850:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   1a852:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
{
   1a856:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   1a858:	b96b      	cbnz	r3, 1a876 <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   1a85a:	4a36      	ldr	r2, [pc, #216]	; (1a934 <bt_enable+0xe8>)
   1a85c:	4618      	mov	r0, r3
   1a85e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a862:	4935      	ldr	r1, [pc, #212]	; (1a938 <bt_enable+0xec>)
   1a864:	2201      	movs	r2, #1
   1a866:	9300      	str	r3, [sp, #0]
   1a868:	f012 fcf5 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1a86c:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1a870:	4628      	mov	r0, r5
   1a872:	b009      	add	sp, #36	; 0x24
   1a874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a876:	f06f 0102 	mvn.w	r1, #2
   1a87a:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   1a87e:	f012 fcf9 	bl	2d274 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a882:	2101      	movs	r1, #1
   1a884:	f012 fcd0 	bl	2d228 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1a888:	ea10 0401 	ands.w	r4, r0, r1
   1a88c:	d14d      	bne.n	1a92a <bt_enable+0xde>
	ready_cb = cb;
   1a88e:	4b2b      	ldr	r3, [pc, #172]	; (1a93c <bt_enable+0xf0>)
   1a890:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a892:	460a      	mov	r2, r1
   1a894:	f506 7090 	add.w	r0, r6, #288	; 0x120
   1a898:	f016 faea 	bl	30e70 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1a89c:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   1a8a0:	f016 fac5 	bl	30e2e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a8a4:	2200      	movs	r2, #0
   1a8a6:	2300      	movs	r3, #0
   1a8a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a8ac:	f06f 0308 	mvn.w	r3, #8
   1a8b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a8b4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1a8b8:	e9cd 4400 	strd	r4, r4, [sp]
   1a8bc:	4b20      	ldr	r3, [pc, #128]	; (1a940 <bt_enable+0xf4>)
   1a8be:	4921      	ldr	r1, [pc, #132]	; (1a944 <bt_enable+0xf8>)
   1a8c0:	9404      	str	r4, [sp, #16]
   1a8c2:	4821      	ldr	r0, [pc, #132]	; (1a948 <bt_enable+0xfc>)
   1a8c4:	f00a fefe 	bl	256c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a8c8:	4920      	ldr	r1, [pc, #128]	; (1a94c <bt_enable+0x100>)
   1a8ca:	481f      	ldr	r0, [pc, #124]	; (1a948 <bt_enable+0xfc>)
   1a8cc:	f00a feac 	bl	25628 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1a8d0:	481f      	ldr	r0, [pc, #124]	; (1a950 <bt_enable+0x104>)
   1a8d2:	f016 fb8d 	bl	30ff0 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1a8d6:	f06f 0307 	mvn.w	r3, #7
   1a8da:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1a8de:	491d      	ldr	r1, [pc, #116]	; (1a954 <bt_enable+0x108>)
   1a8e0:	481b      	ldr	r0, [pc, #108]	; (1a950 <bt_enable+0x104>)
   1a8e2:	9400      	str	r4, [sp, #0]
   1a8e4:	f00b fa00 	bl	25ce8 <k_work_queue_start>
   1a8e8:	491b      	ldr	r1, [pc, #108]	; (1a958 <bt_enable+0x10c>)
   1a8ea:	4819      	ldr	r0, [pc, #100]	; (1a950 <bt_enable+0x104>)
   1a8ec:	f00a fe9c 	bl	25628 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1a8f0:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
   1a8f4:	68db      	ldr	r3, [r3, #12]
   1a8f6:	4798      	blx	r3
	if (err) {
   1a8f8:	4605      	mov	r5, r0
   1a8fa:	b158      	cbz	r0, 1a914 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   1a8fc:	4b17      	ldr	r3, [pc, #92]	; (1a95c <bt_enable+0x110>)
   1a8fe:	9003      	str	r0, [sp, #12]
   1a900:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1a904:	2201      	movs	r2, #1
   1a906:	4623      	mov	r3, r4
   1a908:	4620      	mov	r0, r4
   1a90a:	490b      	ldr	r1, [pc, #44]	; (1a938 <bt_enable+0xec>)
   1a90c:	9400      	str	r4, [sp, #0]
   1a90e:	f012 fca2 	bl	2d256 <z_log_msg_runtime_create.constprop.0>
		return err;
   1a912:	e7ad      	b.n	1a870 <bt_enable+0x24>
	if (!cb) {
   1a914:	b927      	cbnz	r7, 1a920 <bt_enable+0xd4>
}
   1a916:	b009      	add	sp, #36	; 0x24
   1a918:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   1a91c:	f7ee bde8 	b.w	94f0 <bt_init>
	k_work_submit(&bt_dev.init);
   1a920:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   1a924:	f00b f9da 	bl	25cdc <k_work_submit>
	return 0;
   1a928:	e7a2      	b.n	1a870 <bt_enable+0x24>
		return -EALREADY;
   1a92a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1a92e:	e79f      	b.n	1a870 <bt_enable+0x24>
   1a930:	20008000 	.word	0x20008000
   1a934:	00036aee 	.word	0x00036aee
   1a938:	00032ef0 	.word	0x00032ef0
   1a93c:	20030884 	.word	0x20030884
   1a940:	0001a579 	.word	0x0001a579
   1a944:	200523d0 	.word	0x200523d0
   1a948:	20009d00 	.word	0x20009d00
   1a94c:	00036b07 	.word	0x00036b07
   1a950:	20009da8 	.word	0x20009da8
   1a954:	200527d0 	.word	0x200527d0
   1a958:	00036b0d 	.word	0x00036b0d
   1a95c:	00036b13 	.word	0x00036b13

0001a960 <bt_is_ready>:
   1a960:	4b02      	ldr	r3, [pc, #8]	; (1a96c <bt_is_ready+0xc>)
   1a962:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1a966:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1a96a:	4770      	bx	lr
   1a96c:	200080cc 	.word	0x200080cc

0001a970 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1a970:	4800      	ldr	r0, [pc, #0]	; (1a974 <bt_get_name+0x4>)
   1a972:	4770      	bx	lr
   1a974:	00034b76 	.word	0x00034b76

0001a978 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a97a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1a97c:	2500      	movs	r5, #0
   1a97e:	4f09      	ldr	r7, [pc, #36]	; (1a9a4 <id_find+0x2c>)
   1a980:	79fb      	ldrb	r3, [r7, #7]
   1a982:	b2ec      	uxtb	r4, r5
   1a984:	42a3      	cmp	r3, r4
   1a986:	d802      	bhi.n	1a98e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1a988:	f06f 0001 	mvn.w	r0, #1
   1a98c:	e009      	b.n	1a9a2 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1a98e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1a992:	4630      	mov	r0, r6
   1a994:	4439      	add	r1, r7
   1a996:	f012 fd16 	bl	2d3c6 <bt_addr_le_eq>
   1a99a:	3501      	adds	r5, #1
   1a99c:	2800      	cmp	r0, #0
   1a99e:	d0ef      	beq.n	1a980 <id_find+0x8>
   1a9a0:	4620      	mov	r0, r4
}
   1a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a9a4:	20008000 	.word	0x20008000

0001a9a8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1a9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a9aa:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1a9ac:	460d      	mov	r5, r1
   1a9ae:	b171      	cbz	r1, 1a9ce <id_create.constprop.0+0x26>
   1a9b0:	4628      	mov	r0, r5
   1a9b2:	4912      	ldr	r1, [pc, #72]	; (1a9fc <id_create.constprop.0+0x54>)
   1a9b4:	f012 fd07 	bl	2d3c6 <bt_addr_le_eq>
   1a9b8:	b948      	cbnz	r0, 1a9ce <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1a9ba:	4629      	mov	r1, r5
   1a9bc:	4810      	ldr	r0, [pc, #64]	; (1aa00 <id_create.constprop.0+0x58>)
   1a9be:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1a9c2:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1a9c4:	f012 fd0c 	bl	2d3e0 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1a9c8:	2000      	movs	r0, #0
}
   1a9ca:	b003      	add	sp, #12
   1a9cc:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1a9ce:	4668      	mov	r0, sp
   1a9d0:	f012 fbf1 	bl	2d1b6 <bt_addr_le_create_static>
			if (err) {
   1a9d4:	2800      	cmp	r0, #0
   1a9d6:	d1f8      	bne.n	1a9ca <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   1a9d8:	4668      	mov	r0, sp
   1a9da:	f7ff ffcd 	bl	1a978 <id_find>
   1a9de:	2800      	cmp	r0, #0
   1a9e0:	daf5      	bge.n	1a9ce <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1a9e2:	4b07      	ldr	r3, [pc, #28]	; (1aa00 <id_create.constprop.0+0x58>)
   1a9e4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1a9e8:	4669      	mov	r1, sp
   1a9ea:	4418      	add	r0, r3
   1a9ec:	f012 fcf8 	bl	2d3e0 <bt_addr_le_copy>
		if (addr) {
   1a9f0:	2d00      	cmp	r5, #0
   1a9f2:	d0e9      	beq.n	1a9c8 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1a9f4:	4601      	mov	r1, r0
   1a9f6:	4628      	mov	r0, r5
   1a9f8:	e7e4      	b.n	1a9c4 <id_create.constprop.0+0x1c>
   1a9fa:	bf00      	nop
   1a9fc:	000364d3 	.word	0x000364d3
   1aa00:	20008000 	.word	0x20008000

0001aa04 <set_random_address>:
{
   1aa04:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1aa06:	2206      	movs	r2, #6
   1aa08:	4911      	ldr	r1, [pc, #68]	; (1aa50 <set_random_address+0x4c>)
   1aa0a:	4605      	mov	r5, r0
   1aa0c:	f016 fe6f 	bl	316ee <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1aa10:	b1c8      	cbz	r0, 1aa46 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1aa12:	2106      	movs	r1, #6
   1aa14:	f242 0005 	movw	r0, #8197	; 0x2005
   1aa18:	f7ff f8d8 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1aa1c:	4604      	mov	r4, r0
   1aa1e:	b1a0      	cbz	r0, 1aa4a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1aa20:	2206      	movs	r2, #6
   1aa22:	4629      	mov	r1, r5
   1aa24:	300c      	adds	r0, #12
   1aa26:	f014 fc7a 	bl	2f31e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1aa2a:	2200      	movs	r2, #0
   1aa2c:	4621      	mov	r1, r4
   1aa2e:	f242 0005 	movw	r0, #8197	; 0x2005
   1aa32:	f7ff f905 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   1aa36:	b938      	cbnz	r0, 1aa48 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   1aa38:	4805      	ldr	r0, [pc, #20]	; (1aa50 <set_random_address+0x4c>)
   1aa3a:	4629      	mov	r1, r5
   1aa3c:	f012 fccb 	bl	2d3d6 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1aa40:	2301      	movs	r3, #1
   1aa42:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   1aa46:	2000      	movs	r0, #0
}
   1aa48:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1aa4a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1aa4e:	e7fb      	b.n	1aa48 <set_random_address+0x44>
   1aa50:	20008061 	.word	0x20008061

0001aa54 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1aa54:	4b08      	ldr	r3, [pc, #32]	; (1aa78 <bt_id_pending_keys_update+0x24>)
   1aa56:	e8d3 2fef 	ldaex	r2, [r3]
   1aa5a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1aa5e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1aa62:	2800      	cmp	r0, #0
   1aa64:	d1f7      	bne.n	1aa56 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1aa66:	0413      	lsls	r3, r2, #16
   1aa68:	d504      	bpl.n	1aa74 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1aa6a:	2200      	movs	r2, #0
   1aa6c:	2002      	movs	r0, #2
   1aa6e:	4903      	ldr	r1, [pc, #12]	; (1aa7c <bt_id_pending_keys_update+0x28>)
   1aa70:	f005 bb28 	b.w	200c4 <bt_keys_foreach_type>
}
   1aa74:	4770      	bx	lr
   1aa76:	bf00      	nop
   1aa78:	200080cc 	.word	0x200080cc
   1aa7c:	0002d5b7 	.word	0x0002d5b7

0001aa80 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   1aa80:	2300      	movs	r3, #0
{
   1aa82:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1aa84:	4905      	ldr	r1, [pc, #20]	; (1aa9c <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   1aa86:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1aa8a:	466a      	mov	r2, sp
   1aa8c:	2002      	movs	r0, #2
   1aa8e:	f005 fb19 	bl	200c4 <bt_keys_foreach_type>
}
   1aa92:	9801      	ldr	r0, [sp, #4]
   1aa94:	b003      	add	sp, #12
   1aa96:	f85d fb04 	ldr.w	pc, [sp], #4
   1aa9a:	bf00      	nop
   1aa9c:	0002d4db 	.word	0x0002d4db

0001aaa0 <bt_id_add>:
{
   1aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   1aaa2:	4605      	mov	r5, r0
{
   1aaa4:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   1aaa6:	b170      	cbz	r0, 1aac6 <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1aaa8:	4c59      	ldr	r4, [pc, #356]	; (1ac10 <bt_id_add+0x170>)
   1aaaa:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1aaae:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1aab2:	b10a      	cbz	r2, 1aab8 <bt_id_add+0x18>
   1aab4:	429a      	cmp	r2, r3
   1aab6:	d208      	bcs.n	1aaca <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   1aab8:	3301      	adds	r3, #1
   1aaba:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1aabe:	7a2b      	ldrb	r3, [r5, #8]
   1aac0:	f043 0304 	orr.w	r3, r3, #4
   1aac4:	722b      	strb	r3, [r5, #8]
}
   1aac6:	b007      	add	sp, #28
   1aac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1aaca:	2100      	movs	r1, #0
   1aacc:	2206      	movs	r2, #6
   1aace:	4608      	mov	r0, r1
   1aad0:	f001 fc5a 	bl	1c388 <bt_conn_lookup_state_le>
	if (conn) {
   1aad4:	4606      	mov	r6, r0
   1aad6:	b188      	cbz	r0, 1aafc <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1aad8:	34cc      	adds	r4, #204	; 0xcc
   1aada:	e8d4 3fef 	ldaex	r3, [r4]
   1aade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1aae2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1aae6:	2a00      	cmp	r2, #0
   1aae8:	d1f7      	bne.n	1aada <bt_id_add+0x3a>
	keys->state |= flag;
   1aaea:	7a2b      	ldrb	r3, [r5, #8]
   1aaec:	f043 0301 	orr.w	r3, r3, #1
   1aaf0:	722b      	strb	r3, [r5, #8]
}
   1aaf2:	b007      	add	sp, #28
   1aaf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1aaf8:	f012 bf2d 	b.w	2d956 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1aafc:	4601      	mov	r1, r0
   1aafe:	4845      	ldr	r0, [pc, #276]	; (1ac14 <bt_id_add+0x174>)
   1ab00:	f000 fbdc 	bl	1b2bc <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1ab04:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ab08:	b163      	cbz	r3, 1ab24 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1ab0a:	4630      	mov	r0, r6
   1ab0c:	f012 fcba 	bl	2d484 <addr_res_enable>
		if (err) {
   1ab10:	b140      	cbz	r0, 1ab24 <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   1ab12:	4b41      	ldr	r3, [pc, #260]	; (1ac18 <bt_id_add+0x178>)
   1ab14:	2202      	movs	r2, #2
   1ab16:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ab1a:	4633      	mov	r3, r6
   1ab1c:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   1ab1e:	4618      	mov	r0, r3
   1ab20:	493e      	ldr	r1, [pc, #248]	; (1ac1c <bt_id_add+0x17c>)
   1ab22:	e054      	b.n	1abce <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1ab24:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   1ab28:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1ab2c:	429a      	cmp	r2, r3
   1ab2e:	d12b      	bne.n	1ab88 <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1ab30:	2600      	movs	r6, #0
   1ab32:	4b3b      	ldr	r3, [pc, #236]	; (1ac20 <bt_id_add+0x180>)
   1ab34:	2202      	movs	r2, #2
   1ab36:	4630      	mov	r0, r6
   1ab38:	4938      	ldr	r1, [pc, #224]	; (1ac1c <bt_id_add+0x17c>)
   1ab3a:	9302      	str	r3, [sp, #8]
   1ab3c:	e9cd 6600 	strd	r6, r6, [sp]
   1ab40:	4633      	mov	r3, r6
   1ab42:	f012 fc90 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1ab46:	4632      	mov	r2, r6
   1ab48:	4631      	mov	r1, r6
   1ab4a:	f242 0029 	movw	r0, #8233	; 0x2029
   1ab4e:	f7ff f877 	bl	19c40 <bt_hci_cmd_send_sync>
		if (err) {
   1ab52:	b130      	cbz	r0, 1ab62 <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   1ab54:	4b33      	ldr	r3, [pc, #204]	; (1ac24 <bt_id_add+0x184>)
   1ab56:	9600      	str	r6, [sp, #0]
   1ab58:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ab5c:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   1ab5e:	2201      	movs	r2, #1
   1ab60:	e7dd      	b.n	1ab1e <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   1ab62:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ab66:	3301      	adds	r3, #1
   1ab68:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1ab6c:	7a2b      	ldrb	r3, [r5, #8]
   1ab6e:	f043 0304 	orr.w	r3, r3, #4
   1ab72:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1ab74:	2001      	movs	r0, #1
   1ab76:	f012 fc85 	bl	2d484 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1ab7a:	2100      	movs	r1, #0
   1ab7c:	482a      	ldr	r0, [pc, #168]	; (1ac28 <bt_id_add+0x188>)
}
   1ab7e:	b007      	add	sp, #28
   1ab80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1ab84:	f000 bb9a 	b.w	1b2bc <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1ab88:	462a      	mov	r2, r5
   1ab8a:	1c6f      	adds	r7, r5, #1
   1ab8c:	4639      	mov	r1, r7
   1ab8e:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1ab92:	f012 fc2c 	bl	2d3ee <hci_id_add>
	if (err) {
   1ab96:	4606      	mov	r6, r0
   1ab98:	b128      	cbz	r0, 1aba6 <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   1ab9a:	4b24      	ldr	r3, [pc, #144]	; (1ac2c <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   1ab9c:	9302      	str	r3, [sp, #8]
   1ab9e:	2300      	movs	r3, #0
   1aba0:	e9cd 3300 	strd	r3, r3, [sp]
   1aba4:	e7db      	b.n	1ab5e <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   1aba6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1abaa:	3301      	adds	r3, #1
   1abac:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1abb0:	7a2b      	ldrb	r3, [r5, #8]
   1abb2:	f043 0304 	orr.w	r3, r3, #4
   1abb6:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1abb8:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   1abbc:	f013 0304 	ands.w	r3, r3, #4
   1abc0:	d108      	bne.n	1abd4 <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   1abc2:	4a1b      	ldr	r2, [pc, #108]	; (1ac30 <bt_id_add+0x190>)
   1abc4:	4915      	ldr	r1, [pc, #84]	; (1ac1c <bt_id_add+0x17c>)
   1abc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1abca:	2202      	movs	r2, #2
   1abcc:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   1abce:	f012 fc4a 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
		goto done;
   1abd2:	e7cf      	b.n	1ab74 <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   1abd4:	4639      	mov	r1, r7
   1abd6:	a804      	add	r0, sp, #16
   1abd8:	f012 fc02 	bl	2d3e0 <bt_addr_le_copy>
	cp.mode = mode;
   1abdc:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1abde:	2108      	movs	r1, #8
   1abe0:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1abe4:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1abe8:	f7fe fff0 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1abec:	4604      	mov	r4, r0
   1abee:	b160      	cbz	r0, 1ac0a <bt_id_add+0x16a>
   1abf0:	2208      	movs	r2, #8
   1abf2:	a904      	add	r1, sp, #16
   1abf4:	300c      	adds	r0, #12
   1abf6:	f014 fb92 	bl	2f31e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1abfa:	4632      	mov	r2, r6
   1abfc:	4621      	mov	r1, r4
   1abfe:	f242 004e 	movw	r0, #8270	; 0x204e
   1ac02:	f7ff f81d 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   1ac06:	2800      	cmp	r0, #0
   1ac08:	d0b4      	beq.n	1ab74 <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   1ac0a:	4b0a      	ldr	r3, [pc, #40]	; (1ac34 <bt_id_add+0x194>)
   1ac0c:	e7c6      	b.n	1ab9c <bt_id_add+0xfc>
   1ac0e:	bf00      	nop
   1ac10:	20008000 	.word	0x20008000
   1ac14:	0002d535 	.word	0x0002d535
   1ac18:	00036b65 	.word	0x00036b65
   1ac1c:	00032f08 	.word	0x00032f08
   1ac20:	00036b8a 	.word	0x00036b8a
   1ac24:	00036bbb 	.word	0x00036bbb
   1ac28:	0002d4b5 	.word	0x0002d4b5
   1ac2c:	00036bdb 	.word	0x00036bdb
   1ac30:	00036bfb 	.word	0x00036bfb
   1ac34:	00036c25 	.word	0x00036c25

0001ac38 <bt_id_del>:
{
   1ac38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   1ac3c:	4605      	mov	r5, r0
   1ac3e:	b348      	cbz	r0, 1ac94 <bt_id_del+0x5c>
	if (!bt_dev.le.rl_size ||
   1ac40:	4c46      	ldr	r4, [pc, #280]	; (1ad5c <bt_id_del+0x124>)
   1ac42:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1ac46:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   1ac4a:	b1da      	cbz	r2, 1ac84 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1ac4c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1ac4e:	4293      	cmp	r3, r2
   1ac50:	dc19      	bgt.n	1ac86 <bt_id_del+0x4e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1ac52:	2100      	movs	r1, #0
   1ac54:	2206      	movs	r2, #6
   1ac56:	4608      	mov	r0, r1
   1ac58:	f001 fb96 	bl	1c388 <bt_conn_lookup_state_le>
	if (conn) {
   1ac5c:	4606      	mov	r6, r0
   1ac5e:	b1e0      	cbz	r0, 1ac9a <bt_id_del+0x62>
   1ac60:	34cc      	adds	r4, #204	; 0xcc
   1ac62:	e8d4 3fef 	ldaex	r3, [r4]
   1ac66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1ac6a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1ac6e:	2a00      	cmp	r2, #0
   1ac70:	d1f7      	bne.n	1ac62 <bt_id_del+0x2a>
	keys->state |= flag;
   1ac72:	7a2b      	ldrb	r3, [r5, #8]
   1ac74:	f043 0302 	orr.w	r3, r3, #2
   1ac78:	722b      	strb	r3, [r5, #8]
}
   1ac7a:	b004      	add	sp, #16
   1ac7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1ac80:	f012 be69 	b.w	2d956 <bt_conn_unref>
		if (bt_dev.le.rl_entries > 0) {
   1ac84:	b113      	cbz	r3, 1ac8c <bt_id_del+0x54>
			bt_dev.le.rl_entries--;
   1ac86:	3b01      	subs	r3, #1
   1ac88:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1ac8c:	7a2b      	ldrb	r3, [r5, #8]
   1ac8e:	f023 0304 	bic.w	r3, r3, #4
   1ac92:	722b      	strb	r3, [r5, #8]
}
   1ac94:	b004      	add	sp, #16
   1ac96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1ac9a:	4601      	mov	r1, r0
   1ac9c:	4830      	ldr	r0, [pc, #192]	; (1ad60 <bt_id_del+0x128>)
   1ac9e:	f000 fb0d 	bl	1b2bc <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1aca2:	4630      	mov	r0, r6
   1aca4:	f012 fbee 	bl	2d484 <addr_res_enable>
	if (err) {
   1aca8:	4607      	mov	r7, r0
   1acaa:	b1b8      	cbz	r0, 1acdc <bt_id_del+0xa4>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   1acac:	4b2d      	ldr	r3, [pc, #180]	; (1ad64 <bt_id_del+0x12c>)
   1acae:	9003      	str	r0, [sp, #12]
   1acb0:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1acb4:	2201      	movs	r2, #1
   1acb6:	4633      	mov	r3, r6
   1acb8:	4630      	mov	r0, r6
   1acba:	492b      	ldr	r1, [pc, #172]	; (1ad68 <bt_id_del+0x130>)
   1acbc:	9600      	str	r6, [sp, #0]
   1acbe:	f012 fbd2 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   1acc2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1acc6:	b113      	cbz	r3, 1acce <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1acc8:	2001      	movs	r0, #1
   1acca:	f012 fbdb 	bl	2d484 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1acce:	2100      	movs	r1, #0
   1acd0:	4826      	ldr	r0, [pc, #152]	; (1ad6c <bt_id_del+0x134>)
}
   1acd2:	b004      	add	sp, #16
   1acd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1acd8:	f000 baf0 	b.w	1b2bc <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1acdc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ace0:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1ace4:	429a      	cmp	r2, r3
   1ace6:	d20c      	bcs.n	1ad02 <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
   1ace8:	3b01      	subs	r3, #1
   1acea:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1acee:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1acf0:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   1acf2:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1acf6:	2002      	movs	r0, #2
   1acf8:	491d      	ldr	r1, [pc, #116]	; (1ad70 <bt_id_del+0x138>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   1acfa:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1acfc:	f005 f9e2 	bl	200c4 <bt_keys_foreach_type>
		goto done;
   1ad00:	e7df      	b.n	1acc2 <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1ad02:	2107      	movs	r1, #7
   1ad04:	f242 0028 	movw	r0, #8232	; 0x2028
   1ad08:	f7fe ff60 	bl	19bcc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1ad0c:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   1ad10:	4606      	mov	r6, r0
   1ad12:	b950      	cbnz	r0, 1ad2a <bt_id_del+0xf2>
		LOG_ERR("Failed to remove IRK from controller");
   1ad14:	4b17      	ldr	r3, [pc, #92]	; (1ad74 <bt_id_del+0x13c>)
   1ad16:	2201      	movs	r2, #1
   1ad18:	9302      	str	r3, [sp, #8]
   1ad1a:	2300      	movs	r3, #0
   1ad1c:	4912      	ldr	r1, [pc, #72]	; (1ad68 <bt_id_del+0x130>)
   1ad1e:	4618      	mov	r0, r3
   1ad20:	e9cd 3300 	strd	r3, r3, [sp]
   1ad24:	f012 fb9f 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
		goto done;
   1ad28:	e7cb      	b.n	1acc2 <bt_id_del+0x8a>
	return net_buf_simple_add(&buf->b, len);
   1ad2a:	2107      	movs	r1, #7
   1ad2c:	300c      	adds	r0, #12
   1ad2e:	f014 faf0 	bl	2f312 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1ad32:	4641      	mov	r1, r8
   1ad34:	f012 fb54 	bl	2d3e0 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1ad38:	463a      	mov	r2, r7
   1ad3a:	4631      	mov	r1, r6
   1ad3c:	f242 0028 	movw	r0, #8232	; 0x2028
   1ad40:	f7fe ff7e 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   1ad44:	2800      	cmp	r0, #0
   1ad46:	d1e5      	bne.n	1ad14 <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
   1ad48:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ad4c:	3b01      	subs	r3, #1
   1ad4e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1ad52:	7a2b      	ldrb	r3, [r5, #8]
   1ad54:	f023 0304 	bic.w	r3, r3, #4
   1ad58:	722b      	strb	r3, [r5, #8]
   1ad5a:	e7b2      	b.n	1acc2 <bt_id_del+0x8a>
   1ad5c:	20008000 	.word	0x20008000
   1ad60:	0002d535 	.word	0x0002d535
   1ad64:	00036c40 	.word	0x00036c40
   1ad68:	00032f08 	.word	0x00032f08
   1ad6c:	0002d4b5 	.word	0x0002d4b5
   1ad70:	0002d451 	.word	0x0002d451
   1ad74:	00036c6d 	.word	0x00036c6d

0001ad78 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1ad78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ad7a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1ad7c:	4604      	mov	r4, r0
   1ad7e:	b920      	cbnz	r0, 1ad8a <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1ad80:	b31d      	cbz	r5, 1adca <bt_id_create+0x52>
			return -EINVAL;
   1ad82:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   1ad86:	b004      	add	sp, #16
   1ad88:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1ad8a:	4921      	ldr	r1, [pc, #132]	; (1ae10 <bt_id_create+0x98>)
   1ad8c:	f012 fb1b 	bl	2d3c6 <bt_addr_le_eq>
   1ad90:	2800      	cmp	r0, #0
   1ad92:	d1f5      	bne.n	1ad80 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1ad94:	7823      	ldrb	r3, [r4, #0]
   1ad96:	2b01      	cmp	r3, #1
   1ad98:	d104      	bne.n	1ada4 <bt_id_create+0x2c>
   1ad9a:	79a3      	ldrb	r3, [r4, #6]
   1ad9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ada0:	2bc0      	cmp	r3, #192	; 0xc0
   1ada2:	d00a      	beq.n	1adba <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   1ada4:	4b1b      	ldr	r3, [pc, #108]	; (1ae14 <bt_id_create+0x9c>)
   1ada6:	2201      	movs	r2, #1
   1ada8:	9302      	str	r3, [sp, #8]
   1adaa:	2300      	movs	r3, #0
   1adac:	491a      	ldr	r1, [pc, #104]	; (1ae18 <bt_id_create+0xa0>)
   1adae:	4618      	mov	r0, r3
   1adb0:	e9cd 3300 	strd	r3, r3, [sp]
   1adb4:	f012 fb57 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1adb8:	e7e3      	b.n	1ad82 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1adba:	4620      	mov	r0, r4
   1adbc:	f7ff fddc 	bl	1a978 <id_find>
   1adc0:	2800      	cmp	r0, #0
   1adc2:	dbdd      	blt.n	1ad80 <bt_id_create+0x8>
			return -EALREADY;
   1adc4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1adc8:	e7dd      	b.n	1ad86 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1adca:	4d14      	ldr	r5, [pc, #80]	; (1ae1c <bt_id_create+0xa4>)
   1adcc:	79eb      	ldrb	r3, [r5, #7]
   1adce:	2b01      	cmp	r3, #1
   1add0:	d01a      	beq.n	1ae08 <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1add2:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   1add6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1adda:	07db      	lsls	r3, r3, #31
   1addc:	d50b      	bpl.n	1adf6 <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   1adde:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   1ade0:	4621      	mov	r1, r4
   1ade2:	4630      	mov	r0, r6
   1ade4:	f7ff fde0 	bl	1a9a8 <id_create.constprop.0>
	if (err) {
   1ade8:	2800      	cmp	r0, #0
   1adea:	d1cc      	bne.n	1ad86 <bt_id_create+0xe>
		bt_dev.id_count++;
   1adec:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   1adee:	4630      	mov	r0, r6
		bt_dev.id_count++;
   1adf0:	3301      	adds	r3, #1
   1adf2:	71eb      	strb	r3, [r5, #7]
	return new_id;
   1adf4:	e7c7      	b.n	1ad86 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1adf6:	2c00      	cmp	r4, #0
   1adf8:	d0c3      	beq.n	1ad82 <bt_id_create+0xa>
   1adfa:	4620      	mov	r0, r4
   1adfc:	4904      	ldr	r1, [pc, #16]	; (1ae10 <bt_id_create+0x98>)
   1adfe:	f012 fae2 	bl	2d3c6 <bt_addr_le_eq>
   1ae02:	2800      	cmp	r0, #0
   1ae04:	d0eb      	beq.n	1adde <bt_id_create+0x66>
   1ae06:	e7bc      	b.n	1ad82 <bt_id_create+0xa>
		return -ENOMEM;
   1ae08:	f06f 000b 	mvn.w	r0, #11
   1ae0c:	e7bb      	b.n	1ad86 <bt_id_create+0xe>
   1ae0e:	bf00      	nop
   1ae10:	000364d3 	.word	0x000364d3
   1ae14:	00036c92 	.word	0x00036c92
   1ae18:	00032f08 	.word	0x00032f08
   1ae1c:	20008000 	.word	0x20008000

0001ae20 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1ae20:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1ae22:	4604      	mov	r4, r0
{
   1ae24:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   1ae26:	b958      	cbnz	r0, 1ae40 <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   1ae28:	4b1d      	ldr	r3, [pc, #116]	; (1aea0 <bt_id_read_public_addr+0x80>)
   1ae2a:	2202      	movs	r2, #2
   1ae2c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1ae30:	4603      	mov	r3, r0
   1ae32:	491c      	ldr	r1, [pc, #112]	; (1aea4 <bt_id_read_public_addr+0x84>)
   1ae34:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   1ae36:	f012 fb16 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
		return 0U;
   1ae3a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1ae3c:	b006      	add	sp, #24
   1ae3e:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1ae40:	2100      	movs	r1, #0
   1ae42:	f241 0009 	movw	r0, #4105	; 0x1009
   1ae46:	aa05      	add	r2, sp, #20
   1ae48:	f7fe fefa 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   1ae4c:	4606      	mov	r6, r0
   1ae4e:	b140      	cbz	r0, 1ae62 <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   1ae50:	4b15      	ldr	r3, [pc, #84]	; (1aea8 <bt_id_read_public_addr+0x88>)
   1ae52:	2202      	movs	r2, #2
   1ae54:	9302      	str	r3, [sp, #8]
   1ae56:	2300      	movs	r3, #0
   1ae58:	4912      	ldr	r1, [pc, #72]	; (1aea4 <bt_id_read_public_addr+0x84>)
   1ae5a:	4618      	mov	r0, r3
   1ae5c:	e9cd 3300 	strd	r3, r3, [sp]
   1ae60:	e7e9      	b.n	1ae36 <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   1ae62:	9b05      	ldr	r3, [sp, #20]
   1ae64:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1ae66:	68dd      	ldr	r5, [r3, #12]
   1ae68:	4910      	ldr	r1, [pc, #64]	; (1aeac <bt_id_read_public_addr+0x8c>)
   1ae6a:	3501      	adds	r5, #1
   1ae6c:	4628      	mov	r0, r5
   1ae6e:	f016 fc3e 	bl	316ee <memcmp>
   1ae72:	b918      	cbnz	r0, 1ae7c <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   1ae74:	9805      	ldr	r0, [sp, #20]
   1ae76:	f005 fb13 	bl	204a0 <net_buf_unref>
		return 0U;
   1ae7a:	e7de      	b.n	1ae3a <bt_id_read_public_addr+0x1a>
   1ae7c:	2206      	movs	r2, #6
   1ae7e:	4628      	mov	r0, r5
   1ae80:	490b      	ldr	r1, [pc, #44]	; (1aeb0 <bt_id_read_public_addr+0x90>)
   1ae82:	f016 fc34 	bl	316ee <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1ae86:	2800      	cmp	r0, #0
   1ae88:	d0f4      	beq.n	1ae74 <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   1ae8a:	4629      	mov	r1, r5
   1ae8c:	1c60      	adds	r0, r4, #1
   1ae8e:	f012 faa2 	bl	2d3d6 <bt_addr_copy>
	net_buf_unref(rsp);
   1ae92:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   1ae94:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1ae96:	f005 fb03 	bl	204a0 <net_buf_unref>
	return 1U;
   1ae9a:	2001      	movs	r0, #1
   1ae9c:	e7ce      	b.n	1ae3c <bt_id_read_public_addr+0x1c>
   1ae9e:	bf00      	nop
   1aea0:	00036cc0 	.word	0x00036cc0
   1aea4:	00032f08 	.word	0x00032f08
   1aea8:	00036cd9 	.word	0x00036cd9
   1aeac:	000364e0 	.word	0x000364e0
   1aeb0:	000364da 	.word	0x000364da

0001aeb4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1aeb4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1aeb6:	4668      	mov	r0, sp
   1aeb8:	f7ff ffb2 	bl	1ae20 <bt_id_read_public_addr>
   1aebc:	4b04      	ldr	r3, [pc, #16]	; (1aed0 <bt_setup_public_id_addr+0x1c>)
   1aebe:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1aec0:	b118      	cbz	r0, 1aeca <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1aec2:	4669      	mov	r1, sp
   1aec4:	2000      	movs	r0, #0
   1aec6:	f7ff fd6f 	bl	1a9a8 <id_create.constprop.0>
}
   1aeca:	b003      	add	sp, #12
   1aecc:	f85d fb04 	ldr.w	pc, [sp], #4
   1aed0:	20008000 	.word	0x20008000

0001aed4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1aed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1aed6:	4b25      	ldr	r3, [pc, #148]	; (1af6c <bt_read_static_addr+0x98>)
{
   1aed8:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1aeda:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   1aede:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1aee0:	f013 0301 	ands.w	r3, r3, #1
{
   1aee4:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1aee6:	d10c      	bne.n	1af02 <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   1aee8:	4a21      	ldr	r2, [pc, #132]	; (1af70 <bt_read_static_addr+0x9c>)
   1aeea:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1aeec:	2202      	movs	r2, #2
   1aeee:	4618      	mov	r0, r3
   1aef0:	e9cd 3300 	strd	r3, r3, [sp]
   1aef4:	491f      	ldr	r1, [pc, #124]	; (1af74 <bt_read_static_addr+0xa0>)
   1aef6:	f012 fab6 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
		return 0;
   1aefa:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1aefc:	4620      	mov	r0, r4
   1aefe:	b007      	add	sp, #28
   1af00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1af02:	2100      	movs	r1, #0
   1af04:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1af08:	aa05      	add	r2, sp, #20
   1af0a:	f7fe fe99 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   1af0e:	4603      	mov	r3, r0
   1af10:	b118      	cbz	r0, 1af1a <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   1af12:	4b19      	ldr	r3, [pc, #100]	; (1af78 <bt_read_static_addr+0xa4>)
   1af14:	9302      	str	r3, [sp, #8]
   1af16:	2300      	movs	r3, #0
   1af18:	e7e8      	b.n	1aeec <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   1af1a:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1af1c:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   1af1e:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   1af20:	7854      	ldrb	r4, [r2, #1]
   1af22:	3202      	adds	r2, #2
   1af24:	42b4      	cmp	r4, r6
   1af26:	bf28      	it	cs
   1af28:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   1af2a:	429c      	cmp	r4, r3
   1af2c:	dc0e      	bgt.n	1af4c <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   1af2e:	f005 fab7 	bl	204a0 <net_buf_unref>
	if (!cnt) {
   1af32:	2c00      	cmp	r4, #0
   1af34:	d1e2      	bne.n	1aefc <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   1af36:	4b11      	ldr	r3, [pc, #68]	; (1af7c <bt_read_static_addr+0xa8>)
   1af38:	2202      	movs	r2, #2
   1af3a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1af3e:	4620      	mov	r0, r4
   1af40:	4623      	mov	r3, r4
   1af42:	490c      	ldr	r1, [pc, #48]	; (1af74 <bt_read_static_addr+0xa0>)
   1af44:	9400      	str	r4, [sp, #0]
   1af46:	f012 fa8e 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
   1af4a:	e7d7      	b.n	1aefc <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1af4c:	4611      	mov	r1, r2
   1af4e:	fb07 5603 	mla	r6, r7, r3, r5
   1af52:	f102 0c14 	add.w	ip, r2, #20
   1af56:	f851 eb04 	ldr.w	lr, [r1], #4
   1af5a:	4561      	cmp	r1, ip
   1af5c:	f846 eb04 	str.w	lr, [r6], #4
   1af60:	d1f9      	bne.n	1af56 <bt_read_static_addr+0x82>
   1af62:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   1af64:	3301      	adds	r3, #1
   1af66:	8031      	strh	r1, [r6, #0]
   1af68:	3216      	adds	r2, #22
   1af6a:	e7de      	b.n	1af2a <bt_read_static_addr+0x56>
   1af6c:	20008000 	.word	0x20008000
   1af70:	00036cf7 	.word	0x00036cf7
   1af74:	00032f08 	.word	0x00032f08
   1af78:	00036d23 	.word	0x00036d23
   1af7c:	00036d43 	.word	0x00036d43

0001af80 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1af80:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1af82:	4d15      	ldr	r5, [pc, #84]	; (1afd8 <bt_setup_random_id_addr+0x58>)
{
   1af84:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1af86:	79ec      	ldrb	r4, [r5, #7]
   1af88:	b92c      	cbnz	r4, 1af96 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1af8a:	2101      	movs	r1, #1
   1af8c:	a802      	add	r0, sp, #8
   1af8e:	f7ff ffa1 	bl	1aed4 <bt_read_static_addr>
   1af92:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1af94:	b9c0      	cbnz	r0, 1afc8 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1af96:	2100      	movs	r1, #0
   1af98:	4608      	mov	r0, r1
}
   1af9a:	b008      	add	sp, #32
   1af9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   1afa0:	f7ff beea 	b.w	1ad78 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1afa4:	ab02      	add	r3, sp, #8
   1afa6:	fb06 3102 	mla	r1, r6, r2, r3
   1afaa:	f10d 0001 	add.w	r0, sp, #1
   1afae:	f012 fa12 	bl	2d3d6 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1afb2:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1afb4:	4669      	mov	r1, sp
   1afb6:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1afb8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1afbc:	f7ff fcf4 	bl	1a9a8 <id_create.constprop.0>
				if (err) {
   1afc0:	3401      	adds	r4, #1
   1afc2:	b110      	cbz	r0, 1afca <bt_setup_random_id_addr+0x4a>
}
   1afc4:	b008      	add	sp, #32
   1afc6:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1afc8:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1afca:	79eb      	ldrb	r3, [r5, #7]
   1afcc:	b2e2      	uxtb	r2, r4
   1afce:	4293      	cmp	r3, r2
   1afd0:	d8e8      	bhi.n	1afa4 <bt_setup_random_id_addr+0x24>
			return 0;
   1afd2:	2000      	movs	r0, #0
   1afd4:	e7f6      	b.n	1afc4 <bt_setup_random_id_addr+0x44>
   1afd6:	bf00      	nop
   1afd8:	20008000 	.word	0x20008000

0001afdc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afe0:	4690      	mov	r8, r2
   1afe2:	460e      	mov	r6, r1
   1afe4:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1afe6:	4602      	mov	r2, r0
   1afe8:	2800      	cmp	r0, #0
   1afea:	d04b      	beq.n	1b084 <bt_id_set_adv_own_addr+0xa8>
   1afec:	2b00      	cmp	r3, #0
   1afee:	d049      	beq.n	1b084 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1aff0:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1aff2:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1aff4:	d531      	bpl.n	1b05a <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1aff6:	4f25      	ldr	r7, [pc, #148]	; (1b08c <bt_id_set_adv_own_addr+0xb0>)
   1aff8:	f1b8 0f00 	cmp.w	r8, #0
   1affc:	d013      	beq.n	1b026 <bt_id_set_adv_own_addr+0x4a>
   1affe:	0688      	lsls	r0, r1, #26
   1b000:	d40a      	bmi.n	1b018 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b002:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1b006:	5cfb      	ldrb	r3, [r7, r3]
   1b008:	2b01      	cmp	r3, #1
   1b00a:	d015      	beq.n	1b038 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1b00c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1b00e:	06b2      	lsls	r2, r6, #26
   1b010:	d50f      	bpl.n	1b032 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1b012:	f043 0302 	orr.w	r3, r3, #2
   1b016:	e00b      	b.n	1b030 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1b018:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   1b01c:	0659      	lsls	r1, r3, #25
   1b01e:	d4f0      	bmi.n	1b002 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   1b020:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b024:	e006      	b.n	1b034 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b026:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1b02a:	5cfb      	ldrb	r3, [r7, r3]
   1b02c:	2b01      	cmp	r3, #1
   1b02e:	d003      	beq.n	1b038 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   1b030:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1b032:	2000      	movs	r0, #0
}
   1b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1b038:	2107      	movs	r1, #7
   1b03a:	fb01 7104 	mla	r1, r1, r4, r7
   1b03e:	4610      	mov	r0, r2
   1b040:	3101      	adds	r1, #1
   1b042:	f012 fa95 	bl	2d570 <bt_id_set_adv_random_addr>
				if (err) {
   1b046:	2800      	cmp	r0, #0
   1b048:	d1f4      	bne.n	1b034 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   1b04a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1b04e:	5d3b      	ldrb	r3, [r7, r4]
   1b050:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1b052:	f1b8 0f00 	cmp.w	r8, #0
   1b056:	d0ec      	beq.n	1b032 <bt_id_set_adv_own_addr+0x56>
   1b058:	e7d9      	b.n	1b00e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1b05a:	074b      	lsls	r3, r1, #29
   1b05c:	d50e      	bpl.n	1b07c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b05e:	4e0b      	ldr	r6, [pc, #44]	; (1b08c <bt_id_set_adv_own_addr+0xb0>)
   1b060:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   1b064:	5df3      	ldrb	r3, [r6, r7]
   1b066:	2b01      	cmp	r3, #1
   1b068:	d1e2      	bne.n	1b030 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1b06a:	2107      	movs	r1, #7
   1b06c:	fb11 3104 	smlabb	r1, r1, r4, r3
   1b070:	4431      	add	r1, r6
   1b072:	f012 fa7d 	bl	2d570 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1b076:	5df3      	ldrb	r3, [r6, r7]
   1b078:	702b      	strb	r3, [r5, #0]
		if (err) {
   1b07a:	e7db      	b.n	1b034 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   1b07c:	f012 fa80 	bl	2d580 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1b080:	2301      	movs	r3, #1
   1b082:	e7f9      	b.n	1b078 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   1b084:	f06f 0015 	mvn.w	r0, #21
   1b088:	e7d4      	b.n	1b034 <bt_id_set_adv_own_addr+0x58>
   1b08a:	bf00      	nop
   1b08c:	20008000 	.word	0x20008000

0001b090 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1b090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1b092:	4e13      	ldr	r6, [pc, #76]	; (1b0e0 <bt_id_init+0x50>)
   1b094:	79f5      	ldrb	r5, [r6, #7]
   1b096:	b11d      	cbz	r5, 1b0a0 <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1b098:	2400      	movs	r4, #0
}
   1b09a:	4620      	mov	r0, r4
   1b09c:	b004      	add	sp, #16
   1b09e:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   1b0a0:	f7ff ff08 	bl	1aeb4 <bt_setup_public_id_addr>
		if (err) {
   1b0a4:	4604      	mov	r4, r0
   1b0a6:	b150      	cbz	r0, 1b0be <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   1b0a8:	4b0e      	ldr	r3, [pc, #56]	; (1b0e4 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   1b0aa:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1b0ae:	2201      	movs	r2, #1
   1b0b0:	462b      	mov	r3, r5
   1b0b2:	4628      	mov	r0, r5
   1b0b4:	490c      	ldr	r1, [pc, #48]	; (1b0e8 <bt_id_init+0x58>)
   1b0b6:	9500      	str	r5, [sp, #0]
   1b0b8:	f012 f9d5 	bl	2d466 <z_log_msg_runtime_create.constprop.0>
			return err;
   1b0bc:	e7ed      	b.n	1b09a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1b0be:	79f5      	ldrb	r5, [r6, #7]
   1b0c0:	2d00      	cmp	r5, #0
   1b0c2:	d1e9      	bne.n	1b098 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1b0c4:	f7ff ff5c 	bl	1af80 <bt_setup_random_id_addr>
		if (err) {
   1b0c8:	4604      	mov	r4, r0
   1b0ca:	2800      	cmp	r0, #0
   1b0cc:	d1ec      	bne.n	1b0a8 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1b0ce:	1c70      	adds	r0, r6, #1
   1b0d0:	f7ff fc98 	bl	1aa04 <set_random_address>
		if (err) {
   1b0d4:	4604      	mov	r4, r0
   1b0d6:	2800      	cmp	r0, #0
   1b0d8:	d0de      	beq.n	1b098 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   1b0da:	4b04      	ldr	r3, [pc, #16]	; (1b0ec <bt_id_init+0x5c>)
   1b0dc:	e7e5      	b.n	1b0aa <bt_id_init+0x1a>
   1b0de:	bf00      	nop
   1b0e0:	20008000 	.word	0x20008000
   1b0e4:	00036d6c 	.word	0x00036d6c
   1b0e8:	00032f08 	.word	0x00032f08
   1b0ec:	00036d8b 	.word	0x00036d8b

0001b0f0 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0f4:	460c      	mov	r4, r1
   1b0f6:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b0f8:	2120      	movs	r1, #32
{
   1b0fa:	4692      	mov	sl, r2
   1b0fc:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b0fe:	f7fe fd65 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1b102:	4605      	mov	r5, r0
   1b104:	2800      	cmp	r0, #0
   1b106:	d05a      	beq.n	1b1be <hci_set_ad+0xce>
   1b108:	2120      	movs	r1, #32
   1b10a:	300c      	adds	r0, #12
   1b10c:	f014 f901 	bl	2f312 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1b110:	2220      	movs	r2, #32
   1b112:	4681      	mov	r9, r0
   1b114:	2100      	movs	r1, #0
   1b116:	f016 fb34 	bl	31782 <memset>
	uint8_t set_data_len = 0;
   1b11a:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1b11c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1b120:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   1b124:	2300      	movs	r3, #0
   1b126:	f8d4 8000 	ldr.w	r8, [r4]
   1b12a:	6862      	ldr	r2, [r4, #4]
   1b12c:	4293      	cmp	r3, r2
   1b12e:	d30c      	bcc.n	1b14a <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   1b130:	3408      	adds	r4, #8
   1b132:	45a2      	cmp	sl, r4
   1b134:	d1f6      	bne.n	1b124 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b136:	2200      	movs	r2, #0
   1b138:	4629      	mov	r1, r5
   1b13a:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   1b13c:	f889 6000 	strb.w	r6, [r9]
}
   1b140:	b007      	add	sp, #28
   1b142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b146:	f7fe bd7b 	b.w	19c40 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1b14a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1b14e:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   1b150:	1811      	adds	r1, r2, r0
   1b152:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   1b154:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1b158:	d91a      	bls.n	1b190 <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b15a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1b15e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b162:	d101      	bne.n	1b168 <hci_set_ad+0x78>
   1b164:	2a00      	cmp	r2, #0
   1b166:	dc11      	bgt.n	1b18c <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   1b168:	4b16      	ldr	r3, [pc, #88]	; (1b1c4 <hci_set_ad+0xd4>)
   1b16a:	2201      	movs	r2, #1
   1b16c:	9302      	str	r3, [sp, #8]
   1b16e:	2300      	movs	r3, #0
   1b170:	4915      	ldr	r1, [pc, #84]	; (1b1c8 <hci_set_ad+0xd8>)
   1b172:	4618      	mov	r0, r3
   1b174:	e9cd 3300 	strd	r3, r3, [sp]
   1b178:	f012 fa51 	bl	2d61e <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1b17c:	4628      	mov	r0, r5
   1b17e:	f005 f98f 	bl	204a0 <net_buf_unref>
					return -EINVAL;
   1b182:	f06f 0015 	mvn.w	r0, #21
}
   1b186:	b007      	add	sp, #28
   1b188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1b18c:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1b190:	b2d7      	uxtb	r7, r2
   1b192:	1c79      	adds	r1, r7, #1
   1b194:	f80b 1006 	strb.w	r1, [fp, r6]
   1b198:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1b19a:	b2c9      	uxtb	r1, r1
   1b19c:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b1a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b1a4:	fa5b f080 	uxtab	r0, fp, r0
   1b1a8:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   1b1aa:	3702      	adds	r7, #2
   1b1ac:	f016 faaf 	bl	3170e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1b1b0:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   1b1b2:	4437      	add	r7, r6
   1b1b4:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1b1b6:	3301      	adds	r3, #1
   1b1b8:	f108 0808 	add.w	r8, r8, #8
   1b1bc:	e7b5      	b.n	1b12a <hci_set_ad+0x3a>
		return -ENOBUFS;
   1b1be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b1c2:	e7e0      	b.n	1b186 <hci_set_ad+0x96>
   1b1c4:	00036dae 	.word	0x00036dae
   1b1c8:	00032ec0 	.word	0x00032ec0

0001b1cc <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1b1cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1b1ce:	4605      	mov	r5, r0
   1b1d0:	4b16      	ldr	r3, [pc, #88]	; (1b22c <le_adv_start_add_conn+0x60>)
   1b1d2:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   1b1d6:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   1b1d8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1b1dc:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   1b1de:	2207      	movs	r2, #7
   1b1e0:	4628      	mov	r0, r5
   1b1e2:	4913      	ldr	r1, [pc, #76]	; (1b230 <le_adv_start_add_conn+0x64>)
   1b1e4:	f016 fa83 	bl	316ee <memcmp>
   1b1e8:	4603      	mov	r3, r0
   1b1ea:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1b1ec:	b96b      	cbnz	r3, 1b20a <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1b1ee:	4911      	ldr	r1, [pc, #68]	; (1b234 <le_adv_start_add_conn+0x68>)
   1b1f0:	f001 f86c 	bl	1c2cc <bt_conn_add_le>
		if (!conn) {
   1b1f4:	4604      	mov	r4, r0
   1b1f6:	b910      	cbnz	r0, 1b1fe <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   1b1f8:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1b1fc:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1b1fe:	2104      	movs	r1, #4
   1b200:	f000 fe84 	bl	1bf0c <bt_conn_set_state>
		return 0;
   1b204:	2000      	movs	r0, #0
		*out_conn = conn;
   1b206:	6034      	str	r4, [r6, #0]
   1b208:	e7f8      	b.n	1b1fc <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1b20a:	4629      	mov	r1, r5
   1b20c:	f001 f896 	bl	1c33c <bt_conn_exists_le>
   1b210:	b940      	cbnz	r0, 1b224 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1b212:	7820      	ldrb	r0, [r4, #0]
   1b214:	4629      	mov	r1, r5
   1b216:	f001 f859 	bl	1c2cc <bt_conn_add_le>
	if (!conn) {
   1b21a:	4604      	mov	r4, r0
   1b21c:	2800      	cmp	r0, #0
   1b21e:	d0eb      	beq.n	1b1f8 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1b220:	2105      	movs	r1, #5
   1b222:	e7ed      	b.n	1b200 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1b224:	f06f 0015 	mvn.w	r0, #21
   1b228:	e7e8      	b.n	1b1fc <le_adv_start_add_conn+0x30>
   1b22a:	bf00      	nop
   1b22c:	20008000 	.word	0x20008000
   1b230:	000364d3 	.word	0x000364d3
   1b234:	000364cc 	.word	0x000364cc

0001b238 <valid_adv_param>:
{
   1b238:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1b23a:	6843      	ldr	r3, [r0, #4]
{
   1b23c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1b23e:	0558      	lsls	r0, r3, #21
   1b240:	d501      	bpl.n	1b246 <valid_adv_param+0xe>
		return false;
   1b242:	2000      	movs	r0, #0
}
   1b244:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b246:	6922      	ldr	r2, [r4, #16]
   1b248:	b10a      	cbz	r2, 1b24e <valid_adv_param+0x16>
   1b24a:	07d9      	lsls	r1, r3, #31
   1b24c:	d5f9      	bpl.n	1b242 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1b24e:	4d19      	ldr	r5, [pc, #100]	; (1b2b4 <valid_adv_param+0x7c>)
   1b250:	7820      	ldrb	r0, [r4, #0]
   1b252:	79eb      	ldrb	r3, [r5, #7]
   1b254:	4283      	cmp	r3, r0
   1b256:	d9f4      	bls.n	1b242 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1b258:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1b25c:	2207      	movs	r2, #7
   1b25e:	4916      	ldr	r1, [pc, #88]	; (1b2b8 <valid_adv_param+0x80>)
   1b260:	4428      	add	r0, r5
   1b262:	f016 fa44 	bl	316ee <memcmp>
	if (param->id >= bt_dev.id_count ||
   1b266:	2800      	cmp	r0, #0
   1b268:	d0eb      	beq.n	1b242 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b26a:	6860      	ldr	r0, [r4, #4]
   1b26c:	07c2      	lsls	r2, r0, #31
   1b26e:	d406      	bmi.n	1b27e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1b270:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1b274:	2b08      	cmp	r3, #8
   1b276:	d802      	bhi.n	1b27e <valid_adv_param+0x46>
   1b278:	68a3      	ldr	r3, [r4, #8]
   1b27a:	2b9f      	cmp	r3, #159	; 0x9f
   1b27c:	d9e1      	bls.n	1b242 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1b27e:	f010 0f30 	tst.w	r0, #48	; 0x30
   1b282:	d002      	beq.n	1b28a <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1b284:	6923      	ldr	r3, [r4, #16]
   1b286:	2b00      	cmp	r3, #0
   1b288:	d0db      	beq.n	1b242 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1b28a:	06c3      	lsls	r3, r0, #27
   1b28c:	d401      	bmi.n	1b292 <valid_adv_param+0x5a>
   1b28e:	6923      	ldr	r3, [r4, #16]
   1b290:	b943      	cbnz	r3, 1b2a4 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   1b292:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1b296:	429a      	cmp	r2, r3
   1b298:	d8d3      	bhi.n	1b242 <valid_adv_param+0xa>
   1b29a:	2a1f      	cmp	r2, #31
   1b29c:	d9d1      	bls.n	1b242 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1b29e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1b2a2:	d8ce      	bhi.n	1b242 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1b2a4:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1b2a8:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1b2ac:	bf18      	it	ne
   1b2ae:	2001      	movne	r0, #1
   1b2b0:	e7c8      	b.n	1b244 <valid_adv_param+0xc>
   1b2b2:	bf00      	nop
   1b2b4:	20008000 	.word	0x20008000
   1b2b8:	000364d3 	.word	0x000364d3

0001b2bc <bt_le_ext_adv_foreach>:
{
   1b2bc:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1b2be:	4801      	ldr	r0, [pc, #4]	; (1b2c4 <bt_le_ext_adv_foreach+0x8>)
   1b2c0:	4718      	bx	r3
   1b2c2:	bf00      	nop
   1b2c4:	20008018 	.word	0x20008018

0001b2c8 <bt_le_adv_lookup_legacy>:
}
   1b2c8:	4800      	ldr	r0, [pc, #0]	; (1b2cc <bt_le_adv_lookup_legacy+0x4>)
   1b2ca:	4770      	bx	lr
   1b2cc:	20008018 	.word	0x20008018

0001b2d0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1b2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2d4:	b08d      	sub	sp, #52	; 0x34
   1b2d6:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   1b2d8:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b2da:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1b2de:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b2e0:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b2e4:	4890      	ldr	r0, [pc, #576]	; (1b528 <bt_le_adv_start_legacy+0x258>)
   1b2e6:	bf18      	it	ne
   1b2e8:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   1b2ea:	9307      	str	r3, [sp, #28]
   1b2ec:	f012 f982 	bl	2d5f4 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b2f0:	0747      	lsls	r7, r0, #29
{
   1b2f2:	460d      	mov	r5, r1
   1b2f4:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b2f6:	f140 810d 	bpl.w	1b514 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1b2fa:	4608      	mov	r0, r1
   1b2fc:	f7ff ff9c 	bl	1b238 <valid_adv_param>
   1b300:	b928      	cbnz	r0, 1b30e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1b302:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1b306:	4620      	mov	r0, r4
   1b308:	b00d      	add	sp, #52	; 0x34
   1b30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1b30e:	4628      	mov	r0, r5
   1b310:	f012 f94d 	bl	2d5ae <bt_id_adv_random_addr_check>
   1b314:	4681      	mov	r9, r0
   1b316:	2800      	cmp	r0, #0
   1b318:	d0f3      	beq.n	1b302 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b31a:	f106 0810 	add.w	r8, r6, #16
   1b31e:	4640      	mov	r0, r8
   1b320:	f012 f968 	bl	2d5f4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b324:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   1b328:	0600      	lsls	r0, r0, #24
   1b32a:	f100 80f6 	bmi.w	1b51a <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   1b32e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1b332:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1b336:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b338:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1b33a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1b33e:	68eb      	ldr	r3, [r5, #12]
   1b340:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b344:	f012 f947 	bl	2d5d6 <get_adv_channel_map>
	if (adv->id != param->id) {
   1b348:	7832      	ldrb	r2, [r6, #0]
   1b34a:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b34c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1b350:	429a      	cmp	r2, r3
   1b352:	d004      	beq.n	1b35e <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b354:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1b358:	4873      	ldr	r0, [pc, #460]	; (1b528 <bt_le_adv_start_legacy+0x258>)
   1b35a:	f012 f94e 	bl	2d5fa <atomic_and>
	adv->id = param->id;
   1b35e:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1b360:	4a72      	ldr	r2, [pc, #456]	; (1b52c <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   1b362:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1b364:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1b368:	4630      	mov	r0, r6
   1b36a:	4622      	mov	r2, r4
   1b36c:	6869      	ldr	r1, [r5, #4]
   1b36e:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1b372:	f7ff fe33 	bl	1afdc <bt_id_set_adv_own_addr>
	if (err) {
   1b376:	4604      	mov	r4, r0
   1b378:	2800      	cmp	r0, #0
   1b37a:	d1c4      	bne.n	1b306 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1b37c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   1b380:	f1ba 0f00 	cmp.w	sl, #0
   1b384:	d013      	beq.n	1b3ae <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1b386:	6929      	ldr	r1, [r5, #16]
   1b388:	f012 f942 	bl	2d610 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1b38c:	4628      	mov	r0, r5
   1b38e:	f012 f9da 	bl	2d746 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b392:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   1b394:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b396:	07d9      	lsls	r1, r3, #31
   1b398:	d416      	bmi.n	1b3c8 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1b39a:	059b      	lsls	r3, r3, #22
   1b39c:	d403      	bmi.n	1b3a6 <bt_le_adv_start_legacy+0xd6>
   1b39e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b3a0:	b90b      	cbnz	r3, 1b3a6 <bt_le_adv_start_legacy+0xd6>
   1b3a2:	2f02      	cmp	r7, #2
   1b3a4:	d159      	bne.n	1b45a <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1b3a6:	2302      	movs	r3, #2
   1b3a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1b3ac:	e019      	b.n	1b3e2 <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1b3ae:	4960      	ldr	r1, [pc, #384]	; (1b530 <bt_le_adv_start_legacy+0x260>)
   1b3b0:	f012 f92e 	bl	2d610 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1b3b4:	4628      	mov	r0, r5
   1b3b6:	f012 f9c6 	bl	2d746 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b3ba:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   1b3bc:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b3be:	07da      	lsls	r2, r3, #31
   1b3c0:	d5eb      	bpl.n	1b39a <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   1b3c2:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1b3c6:	e00c      	b.n	1b3e2 <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1b3c8:	f013 0f10 	tst.w	r3, #16
   1b3cc:	bf0c      	ite	eq
   1b3ce:	2301      	moveq	r3, #1
   1b3d0:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1b3d2:	6929      	ldr	r1, [r5, #16]
   1b3d4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1b3d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b3dc:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1b3de:	f012 f917 	bl	2d610 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1b3e2:	210f      	movs	r1, #15
   1b3e4:	f242 0006 	movw	r0, #8198	; 0x2006
   1b3e8:	f7fe fbf0 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1b3ec:	4604      	mov	r4, r0
   1b3ee:	2800      	cmp	r0, #0
   1b3f0:	f000 8096 	beq.w	1b520 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b3f4:	220f      	movs	r2, #15
   1b3f6:	a908      	add	r1, sp, #32
   1b3f8:	300c      	adds	r0, #12
   1b3fa:	f013 ff90 	bl	2f31e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1b3fe:	4621      	mov	r1, r4
   1b400:	2200      	movs	r2, #0
   1b402:	f242 0006 	movw	r0, #8198	; 0x2006
   1b406:	f7fe fc1b 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   1b40a:	4604      	mov	r4, r0
   1b40c:	2800      	cmp	r0, #0
   1b40e:	f47f af7a 	bne.w	1b306 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1b412:	f1ba 0f00 	cmp.w	sl, #0
   1b416:	d026      	beq.n	1b466 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b418:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b41a:	07dc      	lsls	r4, r3, #31
   1b41c:	d431      	bmi.n	1b482 <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1b41e:	4630      	mov	r0, r6
   1b420:	2101      	movs	r1, #1
   1b422:	f012 f9a0 	bl	2d766 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b426:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   1b428:	4604      	mov	r4, r0
   1b42a:	2800      	cmp	r0, #0
   1b42c:	d06a      	beq.n	1b504 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   1b42e:	2500      	movs	r5, #0
   1b430:	4b40      	ldr	r3, [pc, #256]	; (1b534 <bt_le_adv_start_legacy+0x264>)
   1b432:	2201      	movs	r2, #1
   1b434:	9302      	str	r3, [sp, #8]
   1b436:	4628      	mov	r0, r5
   1b438:	462b      	mov	r3, r5
   1b43a:	e9cd 5500 	strd	r5, r5, [sp]
   1b43e:	493e      	ldr	r1, [pc, #248]	; (1b538 <bt_le_adv_start_legacy+0x268>)
   1b440:	f012 f8ed 	bl	2d61e <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b444:	2e00      	cmp	r6, #0
   1b446:	f43f af5e 	beq.w	1b306 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b44a:	4630      	mov	r0, r6
   1b44c:	4629      	mov	r1, r5
   1b44e:	f000 fd5d 	bl	1bf0c <bt_conn_set_state>
			bt_conn_unref(conn);
   1b452:	4630      	mov	r0, r6
   1b454:	f012 fa7f 	bl	2d956 <bt_conn_unref>
   1b458:	e755      	b.n	1b306 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1b45a:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b45c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1b460:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1b464:	e7bd      	b.n	1b3e2 <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1b466:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b468:	4659      	mov	r1, fp
   1b46a:	9300      	str	r3, [sp, #0]
   1b46c:	4630      	mov	r0, r6
   1b46e:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1b472:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b474:	9a05      	ldr	r2, [sp, #20]
   1b476:	f012 f8f4 	bl	2d662 <le_adv_update.constprop.0>
		if (err) {
   1b47a:	4604      	mov	r4, r0
   1b47c:	2800      	cmp	r0, #0
   1b47e:	d0cb      	beq.n	1b418 <bt_le_adv_start_legacy+0x148>
   1b480:	e741      	b.n	1b306 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1b482:	4630      	mov	r0, r6
   1b484:	a907      	add	r1, sp, #28
   1b486:	f7ff fea1 	bl	1b1cc <le_adv_start_add_conn>
		if (err) {
   1b48a:	4604      	mov	r4, r0
   1b48c:	2800      	cmp	r0, #0
   1b48e:	d0c6      	beq.n	1b41e <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   1b490:	f110 0f0c 	cmn.w	r0, #12
   1b494:	f47f af37 	bne.w	1b306 <bt_le_adv_start_legacy+0x36>
   1b498:	f1ba 0f00 	cmp.w	sl, #0
   1b49c:	f47f af33 	bne.w	1b306 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1b4a0:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1b4a2:	0798      	lsls	r0, r3, #30
   1b4a4:	f53f af2f 	bmi.w	1b306 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1b4a8:	686c      	ldr	r4, [r5, #4]
   1b4aa:	f084 0402 	eor.w	r4, r4, #2
   1b4ae:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1b4b2:	f004 0201 	and.w	r2, r4, #1
   1b4b6:	210e      	movs	r1, #14
   1b4b8:	4640      	mov	r0, r8
   1b4ba:	f012 f8bf 	bl	2d63c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1b4be:	1e7b      	subs	r3, r7, #1
   1b4c0:	425a      	negs	r2, r3
   1b4c2:	415a      	adcs	r2, r3
   1b4c4:	2108      	movs	r1, #8
   1b4c6:	4640      	mov	r0, r8
   1b4c8:	f012 f8b8 	bl	2d63c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1b4cc:	1eb9      	subs	r1, r7, #2
   1b4ce:	424a      	negs	r2, r1
   1b4d0:	414a      	adcs	r2, r1
   1b4d2:	4640      	mov	r0, r8
   1b4d4:	2109      	movs	r1, #9
   1b4d6:	f012 f8b1 	bl	2d63c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1b4da:	686a      	ldr	r2, [r5, #4]
   1b4dc:	210a      	movs	r1, #10
   1b4de:	4640      	mov	r0, r8
   1b4e0:	f002 0201 	and.w	r2, r2, #1
   1b4e4:	f012 f8aa 	bl	2d63c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1b4e8:	464a      	mov	r2, r9
   1b4ea:	210b      	movs	r1, #11
   1b4ec:	4640      	mov	r0, r8
   1b4ee:	f012 f8a5 	bl	2d63c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1b4f2:	686a      	ldr	r2, [r5, #4]
   1b4f4:	210d      	movs	r1, #13
   1b4f6:	4640      	mov	r0, r8
   1b4f8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1b4fc:	f012 f89e 	bl	2d63c <atomic_set_bit_to>
	return 0;
   1b500:	2400      	movs	r4, #0
   1b502:	e700      	b.n	1b306 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b504:	b116      	cbz	r6, 1b50c <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   1b506:	4630      	mov	r0, r6
   1b508:	f012 fa25 	bl	2d956 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1b50c:	f1ba 0f00 	cmp.w	sl, #0
   1b510:	d1cf      	bne.n	1b4b2 <bt_le_adv_start_legacy+0x1e2>
   1b512:	e7c9      	b.n	1b4a8 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   1b514:	f06f 040a 	mvn.w	r4, #10
   1b518:	e6f5      	b.n	1b306 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1b51a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1b51e:	e6f2      	b.n	1b306 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1b520:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1b524:	e6ef      	b.n	1b306 <bt_le_adv_start_legacy+0x36>
   1b526:	bf00      	nop
   1b528:	200080cc 	.word	0x200080cc
   1b52c:	20008000 	.word	0x20008000
   1b530:	000364d3 	.word	0x000364d3
   1b534:	00036dc7 	.word	0x00036dc7
   1b538:	00032ec0 	.word	0x00032ec0

0001b53c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1b53c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b53e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1b540:	9a06      	ldr	r2, [sp, #24]
{
   1b542:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1b544:	e9cd 3200 	strd	r3, r2, [sp]
   1b548:	462b      	mov	r3, r5
   1b54a:	460a      	mov	r2, r1
   1b54c:	4601      	mov	r1, r0
   1b54e:	4811      	ldr	r0, [pc, #68]	; (1b594 <bt_le_adv_start+0x58>)
   1b550:	f7ff febe 	bl	1b2d0 <bt_le_adv_start_legacy>
   1b554:	4621      	mov	r1, r4
   1b556:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   1b558:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1b55a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1b55e:	429d      	cmp	r5, r3
   1b560:	d102      	bne.n	1b568 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1b562:	4630      	mov	r0, r6
   1b564:	b002      	add	sp, #8
   1b566:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   1b568:	880a      	ldrh	r2, [r1, #0]
   1b56a:	4282      	cmp	r2, r0
   1b56c:	d104      	bne.n	1b578 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1b56e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1b570:	b112      	cbz	r2, 1b578 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1b572:	7812      	ldrb	r2, [r2, #0]
   1b574:	07d2      	lsls	r2, r2, #31
   1b576:	d402      	bmi.n	1b57e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   1b578:	3301      	adds	r3, #1
   1b57a:	3108      	adds	r1, #8
   1b57c:	e7ef      	b.n	1b55e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1b57e:	4906      	ldr	r1, [pc, #24]	; (1b598 <bt_le_adv_start+0x5c>)
   1b580:	4806      	ldr	r0, [pc, #24]	; (1b59c <bt_le_adv_start+0x60>)
   1b582:	f015 fd3b 	bl	30ffc <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1b586:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b58a:	2300      	movs	r3, #0
   1b58c:	4803      	ldr	r0, [pc, #12]	; (1b59c <bt_le_adv_start+0x60>)
   1b58e:	f00a fc7f 	bl	25e90 <k_work_reschedule>
   1b592:	e7e6      	b.n	1b562 <bt_le_adv_start+0x26>
   1b594:	20008018 	.word	0x20008018
   1b598:	0001b625 	.word	0x0001b625
   1b59c:	20008030 	.word	0x20008030

0001b5a0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1b5a0:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1b5a2:	481a      	ldr	r0, [pc, #104]	; (1b60c <bt_le_adv_stop+0x6c>)
   1b5a4:	f012 f906 	bl	2d7b4 <bt_le_lim_adv_cancel_timeout>
   1b5a8:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1b5ac:	4818      	ldr	r0, [pc, #96]	; (1b610 <bt_le_adv_stop+0x70>)
   1b5ae:	f012 f824 	bl	2d5fa <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b5b2:	4817      	ldr	r0, [pc, #92]	; (1b610 <bt_le_adv_stop+0x70>)
   1b5b4:	f012 f81e 	bl	2d5f4 <atomic_get>
   1b5b8:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b5ba:	061a      	lsls	r2, r3, #24
   1b5bc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   1b5c0:	d523      	bpl.n	1b60a <bt_le_adv_stop+0x6a>
   1b5c2:	4813      	ldr	r0, [pc, #76]	; (1b610 <bt_le_adv_stop+0x70>)
   1b5c4:	f012 f816 	bl	2d5f4 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b5c8:	0543      	lsls	r3, r0, #21
   1b5ca:	d514      	bpl.n	1b5f6 <bt_le_adv_stop+0x56>
   1b5cc:	2207      	movs	r2, #7
   1b5ce:	4911      	ldr	r1, [pc, #68]	; (1b614 <bt_le_adv_stop+0x74>)
   1b5d0:	4811      	ldr	r0, [pc, #68]	; (1b618 <bt_le_adv_stop+0x78>)
   1b5d2:	f016 f88c 	bl	316ee <memcmp>
   1b5d6:	4b11      	ldr	r3, [pc, #68]	; (1b61c <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1b5d8:	b998      	cbnz	r0, 1b602 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1b5da:	2204      	movs	r2, #4
   1b5dc:	4910      	ldr	r1, [pc, #64]	; (1b620 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1b5de:	7e18      	ldrb	r0, [r3, #24]
   1b5e0:	f000 fed2 	bl	1c388 <bt_conn_lookup_state_le>
   1b5e4:	4604      	mov	r4, r0
	if (conn) {
   1b5e6:	b130      	cbz	r0, 1b5f6 <bt_le_adv_stop+0x56>
		conn->err = status;
   1b5e8:	2100      	movs	r1, #0
   1b5ea:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b5ec:	f000 fc8e 	bl	1bf0c <bt_conn_set_state>
		bt_conn_unref(conn);
   1b5f0:	4620      	mov	r0, r4
   1b5f2:	f012 f9b0 	bl	2d956 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1b5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1b5fa:	2100      	movs	r1, #0
   1b5fc:	4803      	ldr	r0, [pc, #12]	; (1b60c <bt_le_adv_stop+0x6c>)
   1b5fe:	f012 b8b2 	b.w	2d766 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1b602:	2205      	movs	r2, #5
   1b604:	f103 0121 	add.w	r1, r3, #33	; 0x21
   1b608:	e7e9      	b.n	1b5de <bt_le_adv_stop+0x3e>
}
   1b60a:	bd10      	pop	{r4, pc}
   1b60c:	20008018 	.word	0x20008018
   1b610:	20008028 	.word	0x20008028
   1b614:	000364d3 	.word	0x000364d3
   1b618:	20008021 	.word	0x20008021
   1b61c:	20008000 	.word	0x20008000
   1b620:	000364cc 	.word	0x000364cc

0001b624 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1b624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1b626:	f7ff ffbb 	bl	1b5a0 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   1b62a:	4b07      	ldr	r3, [pc, #28]	; (1b648 <adv_timeout+0x24>)
   1b62c:	9003      	str	r0, [sp, #12]
   1b62e:	9302      	str	r3, [sp, #8]
   1b630:	2300      	movs	r3, #0
   1b632:	2202      	movs	r2, #2
   1b634:	4618      	mov	r0, r3
   1b636:	e9cd 3300 	strd	r3, r3, [sp]
   1b63a:	4904      	ldr	r1, [pc, #16]	; (1b64c <adv_timeout+0x28>)
   1b63c:	f011 ffef 	bl	2d61e <z_log_msg_runtime_create.constprop.0>
}
   1b640:	b005      	add	sp, #20
   1b642:	f85d fb04 	ldr.w	pc, [sp], #4
   1b646:	bf00      	nop
   1b648:	00036de2 	.word	0x00036de2
   1b64c:	00032ec0 	.word	0x00032ec0

0001b650 <bt_le_adv_resume>:
{
   1b650:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b652:	4c1e      	ldr	r4, [pc, #120]	; (1b6cc <bt_le_adv_resume+0x7c>)
   1b654:	4620      	mov	r0, r4
   1b656:	f011 ffcd 	bl	2d5f4 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1b65a:	0440      	lsls	r0, r0, #17
   1b65c:	d534      	bpl.n	1b6c8 <bt_le_adv_resume+0x78>
   1b65e:	4620      	mov	r0, r4
   1b660:	f011 ffc8 	bl	2d5f4 <atomic_get>
   1b664:	0601      	lsls	r1, r0, #24
   1b666:	d42f      	bmi.n	1b6c8 <bt_le_adv_resume+0x78>
   1b668:	4620      	mov	r0, r4
   1b66a:	f011 ffc3 	bl	2d5f4 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1b66e:	0542      	lsls	r2, r0, #21
   1b670:	d52a      	bpl.n	1b6c8 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   1b672:	a901      	add	r1, sp, #4
   1b674:	f1a4 0010 	sub.w	r0, r4, #16
   1b678:	f7ff fda8 	bl	1b1cc <le_adv_start_add_conn>
	if (err) {
   1b67c:	4605      	mov	r5, r0
   1b67e:	bb18      	cbnz	r0, 1b6c8 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1b680:	2101      	movs	r1, #1
   1b682:	f1a4 0010 	sub.w	r0, r4, #16
   1b686:	f012 f86e 	bl	2d766 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1b68a:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   1b68c:	b928      	cbnz	r0, 1b69a <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   1b68e:	4630      	mov	r0, r6
}
   1b690:	b002      	add	sp, #8
   1b692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1b696:	f012 b95e 	b.w	2d956 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b69a:	4629      	mov	r1, r5
   1b69c:	4630      	mov	r0, r6
   1b69e:	f000 fc35 	bl	1bf0c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b6a2:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1b6a6:	4620      	mov	r0, r4
   1b6a8:	f011 ffa7 	bl	2d5fa <atomic_and>
   1b6ac:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1b6ae:	4630      	mov	r0, r6
   1b6b0:	f012 f951 	bl	2d956 <bt_conn_unref>
	if (persist_paused) {
   1b6b4:	046b      	lsls	r3, r5, #17
   1b6b6:	d507      	bpl.n	1b6c8 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b6b8:	e8d4 3fef 	ldaex	r3, [r4]
   1b6bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b6c0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1b6c4:	2a00      	cmp	r2, #0
   1b6c6:	d1f7      	bne.n	1b6b8 <bt_le_adv_resume+0x68>
}
   1b6c8:	b002      	add	sp, #8
   1b6ca:	bd70      	pop	{r4, r5, r6, pc}
   1b6cc:	20008028 	.word	0x20008028

0001b6d0 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1b6d0:	b530      	push	{r4, r5, lr}
   1b6d2:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1b6d4:	2120      	movs	r1, #32
   1b6d6:	a806      	add	r0, sp, #24
   1b6d8:	f7fe fb50 	bl	19d7c <bt_hci_le_rand>
	if (ret) {
   1b6dc:	4604      	mov	r4, r0
   1b6de:	bb08      	cbnz	r0, 1b724 <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   1b6e0:	f015 fe3b 	bl	3135a <z_impl_k_uptime_ticks>
   1b6e4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1b6e8:	fba0 2305 	umull	r2, r3, r0, r5
   1b6ec:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1b6f0:	2308      	movs	r3, #8
   1b6f2:	0bd2      	lsrs	r2, r2, #15
   1b6f4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   1b6f8:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1b6fa:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1b6fe:	9300      	str	r3, [sp, #0]
   1b700:	2220      	movs	r2, #32
   1b702:	480a      	ldr	r0, [pc, #40]	; (1b72c <prng_reseed.constprop.0+0x5c>)
   1b704:	ab04      	add	r3, sp, #16
   1b706:	a906      	add	r1, sp, #24
   1b708:	f00f ffed 	bl	2b6e6 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   1b70c:	b950      	cbnz	r0, 1b724 <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   1b70e:	4b08      	ldr	r3, [pc, #32]	; (1b730 <prng_reseed.constprop.0+0x60>)
   1b710:	9400      	str	r4, [sp, #0]
   1b712:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b716:	2201      	movs	r2, #1
   1b718:	4623      	mov	r3, r4
   1b71a:	4906      	ldr	r1, [pc, #24]	; (1b734 <prng_reseed.constprop.0+0x64>)
   1b71c:	f012 f84d 	bl	2d7ba <z_log_msg_runtime_create.constprop.0>
   1b720:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   1b724:	4620      	mov	r0, r4
   1b726:	b00f      	add	sp, #60	; 0x3c
   1b728:	bd30      	pop	{r4, r5, pc}
   1b72a:	bf00      	nop
   1b72c:	20009e70 	.word	0x20009e70
   1b730:	00036e08 	.word	0x00036e08
   1b734:	00032f00 	.word	0x00032f00

0001b738 <prng_init>:

int prng_init(void)
{
   1b738:	b510      	push	{r4, lr}
   1b73a:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   1b73c:	2108      	movs	r1, #8
   1b73e:	a804      	add	r0, sp, #16
   1b740:	f7fe fb1c 	bl	19d7c <bt_hci_le_rand>
	if (ret) {
   1b744:	4604      	mov	r4, r0
   1b746:	b980      	cbnz	r0, 1b76a <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   1b748:	2208      	movs	r2, #8
   1b74a:	480b      	ldr	r0, [pc, #44]	; (1b778 <prng_init+0x40>)
   1b74c:	a904      	add	r1, sp, #16
   1b74e:	f00f ffaa 	bl	2b6a6 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1b752:	b968      	cbnz	r0, 1b770 <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   1b754:	4b09      	ldr	r3, [pc, #36]	; (1b77c <prng_init+0x44>)
   1b756:	9400      	str	r4, [sp, #0]
   1b758:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b75c:	2201      	movs	r2, #1
   1b75e:	4623      	mov	r3, r4
   1b760:	4907      	ldr	r1, [pc, #28]	; (1b780 <prng_init+0x48>)
   1b762:	f012 f82a 	bl	2d7ba <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1b766:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1b76a:	4620      	mov	r0, r4
   1b76c:	b006      	add	sp, #24
   1b76e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1b770:	f7ff ffae 	bl	1b6d0 <prng_reseed.constprop.0>
   1b774:	4604      	mov	r4, r0
   1b776:	e7f8      	b.n	1b76a <prng_init+0x32>
   1b778:	20009e70 	.word	0x20009e70
   1b77c:	00036e1f 	.word	0x00036e1f
   1b780:	00032f00 	.word	0x00032f00

0001b784 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   1b784:	b538      	push	{r3, r4, r5, lr}
   1b786:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   1b788:	4604      	mov	r4, r0
   1b78a:	b198      	cbz	r0, 1b7b4 <bt_rand+0x30>
   1b78c:	b191      	cbz	r1, 1b7b4 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1b78e:	4a0b      	ldr	r2, [pc, #44]	; (1b7bc <bt_rand+0x38>)
   1b790:	f00f ffc2 	bl	2b718 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1b794:	1c43      	adds	r3, r0, #1
   1b796:	d107      	bne.n	1b7a8 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   1b798:	f7ff ff9a 	bl	1b6d0 <prng_reseed.constprop.0>
		if (ret) {
   1b79c:	b948      	cbnz	r0, 1b7b2 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1b79e:	4629      	mov	r1, r5
   1b7a0:	4620      	mov	r0, r4
   1b7a2:	4a06      	ldr	r2, [pc, #24]	; (1b7bc <bt_rand+0x38>)
   1b7a4:	f00f ffb8 	bl	2b718 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   1b7a8:	2801      	cmp	r0, #1
   1b7aa:	bf0c      	ite	eq
   1b7ac:	2000      	moveq	r0, #0
   1b7ae:	f06f 0004 	mvnne.w	r0, #4
}
   1b7b2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b7b4:	f06f 0015 	mvn.w	r0, #21
   1b7b8:	e7fb      	b.n	1b7b2 <bt_rand+0x2e>
   1b7ba:	bf00      	nop
   1b7bc:	20009e70 	.word	0x20009e70

0001b7c0 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1b7c0:	2240      	movs	r2, #64	; 0x40
{
   1b7c2:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1b7c4:	4903      	ldr	r1, [pc, #12]	; (1b7d4 <bt_pub_key_is_debug+0x14>)
   1b7c6:	f015 ff92 	bl	316ee <memcmp>
}
   1b7ca:	fab0 f080 	clz	r0, r0
   1b7ce:	0940      	lsrs	r0, r0, #5
   1b7d0:	bd08      	pop	{r3, pc}
   1b7d2:	bf00      	nop
   1b7d4:	00036ecf 	.word	0x00036ecf

0001b7d8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1b7da:	4b3c      	ldr	r3, [pc, #240]	; (1b8cc <bt_pub_key_gen+0xf4>)
{
   1b7dc:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1b7de:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1b7e2:	f003 0306 	and.w	r3, r3, #6
   1b7e6:	2b06      	cmp	r3, #6
   1b7e8:	d00e      	beq.n	1b808 <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1b7ea:	4b39      	ldr	r3, [pc, #228]	; (1b8d0 <bt_pub_key_gen+0xf8>)
   1b7ec:	2202      	movs	r2, #2
   1b7ee:	9302      	str	r3, [sp, #8]
   1b7f0:	2300      	movs	r3, #0
   1b7f2:	4938      	ldr	r1, [pc, #224]	; (1b8d4 <bt_pub_key_gen+0xfc>)
   1b7f4:	4618      	mov	r0, r3
   1b7f6:	e9cd 3300 	strd	r3, r3, [sp]
   1b7fa:	f012 f825 	bl	2d848 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1b7fe:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   1b802:	4628      	mov	r0, r5
   1b804:	b005      	add	sp, #20
   1b806:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   1b808:	2800      	cmp	r0, #0
   1b80a:	d05b      	beq.n	1b8c4 <bt_pub_key_gen+0xec>
	return list->head;
   1b80c:	4e32      	ldr	r6, [pc, #200]	; (1b8d8 <bt_pub_key_gen+0x100>)
   1b80e:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b810:	b19a      	cbz	r2, 1b83a <bt_pub_key_gen+0x62>
   1b812:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   1b814:	4283      	cmp	r3, r0
   1b816:	d10c      	bne.n	1b832 <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   1b818:	4b30      	ldr	r3, [pc, #192]	; (1b8dc <bt_pub_key_gen+0x104>)
   1b81a:	2202      	movs	r2, #2
   1b81c:	9302      	str	r3, [sp, #8]
   1b81e:	2300      	movs	r3, #0
   1b820:	492c      	ldr	r1, [pc, #176]	; (1b8d4 <bt_pub_key_gen+0xfc>)
   1b822:	4618      	mov	r0, r3
   1b824:	e9cd 3300 	strd	r3, r3, [sp]
   1b828:	f012 f80e 	bl	2d848 <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   1b82c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1b830:	e7e7      	b.n	1b802 <bt_pub_key_gen+0x2a>
	return node->next;
   1b832:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b834:	b10b      	cbz	r3, 1b83a <bt_pub_key_gen+0x62>
   1b836:	3b04      	subs	r3, #4
   1b838:	e7ec      	b.n	1b814 <bt_pub_key_gen+0x3c>
	parent->next = child;
   1b83a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b83c:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1b83e:	1d03      	adds	r3, r0, #4
	list->head = node;
   1b840:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b842:	b902      	cbnz	r2, 1b846 <bt_pub_key_gen+0x6e>
	list->tail = node;
   1b844:	6073      	str	r3, [r6, #4]
   1b846:	4f26      	ldr	r7, [pc, #152]	; (1b8e0 <bt_pub_key_gen+0x108>)
   1b848:	e8d7 4fef 	ldaex	r4, [r7]
   1b84c:	f044 0320 	orr.w	r3, r4, #32
   1b850:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b854:	2a00      	cmp	r2, #0
   1b856:	d1f7      	bne.n	1b848 <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1b858:	f014 0420 	ands.w	r4, r4, #32
   1b85c:	d001      	beq.n	1b862 <bt_pub_key_gen+0x8a>
	return 0;
   1b85e:	2500      	movs	r5, #0
   1b860:	e7cf      	b.n	1b802 <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b862:	e8d7 3fef 	ldaex	r3, [r7]
   1b866:	f023 0310 	bic.w	r3, r3, #16
   1b86a:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b86e:	2a00      	cmp	r2, #0
   1b870:	d1f7      	bne.n	1b862 <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1b872:	4622      	mov	r2, r4
   1b874:	4621      	mov	r1, r4
   1b876:	f242 0025 	movw	r0, #8229	; 0x2025
   1b87a:	f7fe f9e1 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   1b87e:	4605      	mov	r5, r0
   1b880:	2800      	cmp	r0, #0
   1b882:	d0ec      	beq.n	1b85e <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   1b884:	4b17      	ldr	r3, [pc, #92]	; (1b8e4 <bt_pub_key_gen+0x10c>)
   1b886:	2201      	movs	r2, #1
   1b888:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b88c:	4620      	mov	r0, r4
   1b88e:	4623      	mov	r3, r4
   1b890:	4910      	ldr	r1, [pc, #64]	; (1b8d4 <bt_pub_key_gen+0xfc>)
   1b892:	9400      	str	r4, [sp, #0]
   1b894:	f011 ffd8 	bl	2d848 <z_log_msg_runtime_create.constprop.0>
   1b898:	e8d7 3fef 	ldaex	r3, [r7]
   1b89c:	f023 0320 	bic.w	r3, r3, #32
   1b8a0:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b8a4:	2a00      	cmp	r2, #0
   1b8a6:	d1f7      	bne.n	1b898 <bt_pub_key_gen+0xc0>
	return list->head;
   1b8a8:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b8aa:	b13c      	cbz	r4, 1b8bc <bt_pub_key_gen+0xe4>
			if (cb->func) {
   1b8ac:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b8b0:	3c04      	subs	r4, #4
			if (cb->func) {
   1b8b2:	b10b      	cbz	r3, 1b8b8 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   1b8b4:	2000      	movs	r0, #0
   1b8b6:	4798      	blx	r3
	return node->next;
   1b8b8:	6864      	ldr	r4, [r4, #4]
   1b8ba:	e7f6      	b.n	1b8aa <bt_pub_key_gen+0xd2>
	list->head = NULL;
   1b8bc:	2300      	movs	r3, #0
	list->tail = NULL;
   1b8be:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   1b8c2:	e79e      	b.n	1b802 <bt_pub_key_gen+0x2a>
		return -EINVAL;
   1b8c4:	f06f 0515 	mvn.w	r5, #21
   1b8c8:	e79b      	b.n	1b802 <bt_pub_key_gen+0x2a>
   1b8ca:	bf00      	nop
   1b8cc:	20008000 	.word	0x20008000
   1b8d0:	00036e48 	.word	0x00036e48
   1b8d4:	00032ee0 	.word	0x00032ee0
   1b8d8:	2003088c 	.word	0x2003088c
   1b8dc:	00036e67 	.word	0x00036e67
   1b8e0:	200080cc 	.word	0x200080cc
   1b8e4:	00036e83 	.word	0x00036e83

0001b8e8 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b8e8:	4b04      	ldr	r3, [pc, #16]	; (1b8fc <bt_pub_key_get+0x14>)
   1b8ea:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   1b8ee:	f013 0f10 	tst.w	r3, #16
}
   1b8f2:	4803      	ldr	r0, [pc, #12]	; (1b900 <bt_pub_key_get+0x18>)
   1b8f4:	bf08      	it	eq
   1b8f6:	2000      	moveq	r0, #0
   1b8f8:	4770      	bx	lr
   1b8fa:	bf00      	nop
   1b8fc:	200080cc 	.word	0x200080cc
   1b900:	2003199c 	.word	0x2003199c

0001b904 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1b904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   1b906:	4e24      	ldr	r6, [pc, #144]	; (1b998 <bt_dh_key_gen+0x94>)
{
   1b908:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   1b90a:	6833      	ldr	r3, [r6, #0]
   1b90c:	428b      	cmp	r3, r1
   1b90e:	d03c      	beq.n	1b98a <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1b910:	b123      	cbz	r3, 1b91c <bt_dh_key_gen+0x18>
		return -EBUSY;
   1b912:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1b916:	4620      	mov	r0, r4
   1b918:	b004      	add	sp, #16
   1b91a:	bd70      	pop	{r4, r5, r6, pc}
   1b91c:	4b1f      	ldr	r3, [pc, #124]	; (1b99c <bt_dh_key_gen+0x98>)
   1b91e:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1b922:	0692      	lsls	r2, r2, #26
   1b924:	d4f5      	bmi.n	1b912 <bt_dh_key_gen+0xe>
   1b926:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1b92a:	06db      	lsls	r3, r3, #27
   1b92c:	d530      	bpl.n	1b990 <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   1b92e:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1b930:	f242 0026 	movw	r0, #8230	; 0x2026
   1b934:	2140      	movs	r1, #64	; 0x40
   1b936:	f7fe f949 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   1b93a:	4605      	mov	r5, r0
   1b93c:	b310      	cbz	r0, 1b984 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   1b93e:	2140      	movs	r1, #64	; 0x40
   1b940:	300c      	adds	r0, #12
   1b942:	f013 fce6 	bl	2f312 <net_buf_simple_add>
   1b946:	4623      	mov	r3, r4
   1b948:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1b94c:	f853 1b04 	ldr.w	r1, [r3], #4
   1b950:	4293      	cmp	r3, r2
   1b952:	f840 1b04 	str.w	r1, [r0], #4
   1b956:	d1f9      	bne.n	1b94c <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1b958:	2200      	movs	r2, #0
   1b95a:	4629      	mov	r1, r5
   1b95c:	f242 0026 	movw	r0, #8230	; 0x2026
   1b960:	f7fe f96e 	bl	19c40 <bt_hci_cmd_send_sync>
	if (err) {
   1b964:	4604      	mov	r4, r0
   1b966:	2800      	cmp	r0, #0
   1b968:	d0d5      	beq.n	1b916 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1b96a:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1b96c:	4a0c      	ldr	r2, [pc, #48]	; (1b9a0 <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   1b96e:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1b970:	4618      	mov	r0, r3
   1b972:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b976:	490b      	ldr	r1, [pc, #44]	; (1b9a4 <bt_dh_key_gen+0xa0>)
   1b978:	2202      	movs	r2, #2
   1b97a:	9403      	str	r4, [sp, #12]
   1b97c:	9300      	str	r3, [sp, #0]
   1b97e:	f011 ff63 	bl	2d848 <z_log_msg_runtime_create.constprop.0>
		return err;
   1b982:	e7c8      	b.n	1b916 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1b984:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1b988:	e7ef      	b.n	1b96a <bt_dh_key_gen+0x66>
		return -EALREADY;
   1b98a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1b98e:	e7c2      	b.n	1b916 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   1b990:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1b994:	e7bf      	b.n	1b916 <bt_dh_key_gen+0x12>
   1b996:	bf00      	nop
   1b998:	20030888 	.word	0x20030888
   1b99c:	200080cc 	.word	0x200080cc
   1b9a0:	00036ead 	.word	0x00036ead
   1b9a4:	00032ee0 	.word	0x00032ee0

0001b9a8 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b9aa:	4b19      	ldr	r3, [pc, #100]	; (1ba10 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1b9ac:	68c5      	ldr	r5, [r0, #12]
   1b9ae:	e8d3 2fef 	ldaex	r2, [r3]
   1b9b2:	f022 0220 	bic.w	r2, r2, #32
   1b9b6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1b9ba:	2900      	cmp	r1, #0
   1b9bc:	d1f7      	bne.n	1b9ae <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1b9be:	782a      	ldrb	r2, [r5, #0]
   1b9c0:	b98a      	cbnz	r2, 1b9e6 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1b9c2:	4914      	ldr	r1, [pc, #80]	; (1ba14 <bt_hci_evt_le_pkey_complete+0x6c>)
   1b9c4:	1c6a      	adds	r2, r5, #1
   1b9c6:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1b9ca:	f852 4b04 	ldr.w	r4, [r2], #4
   1b9ce:	4282      	cmp	r2, r0
   1b9d0:	f841 4b04 	str.w	r4, [r1], #4
   1b9d4:	d1f9      	bne.n	1b9ca <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b9d6:	e8d3 1fef 	ldaex	r1, [r3]
   1b9da:	f041 0110 	orr.w	r1, r1, #16
   1b9de:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1b9e2:	2a00      	cmp	r2, #0
   1b9e4:	d1f7      	bne.n	1b9d6 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   1b9e6:	4e0c      	ldr	r6, [pc, #48]	; (1ba18 <bt_hci_evt_le_pkey_complete+0x70>)
   1b9e8:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b9ea:	b16c      	cbz	r4, 1ba08 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1b9ec:	4f09      	ldr	r7, [pc, #36]	; (1ba14 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1b9ee:	3c04      	subs	r4, #4
		if (cb->func) {
   1b9f0:	6823      	ldr	r3, [r4, #0]
   1b9f2:	b12b      	cbz	r3, 1ba00 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   1b9f4:	782a      	ldrb	r2, [r5, #0]
   1b9f6:	2a00      	cmp	r2, #0
   1b9f8:	bf0c      	ite	eq
   1b9fa:	4638      	moveq	r0, r7
   1b9fc:	2000      	movne	r0, #0
   1b9fe:	4798      	blx	r3
	return node->next;
   1ba00:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1ba02:	b10c      	cbz	r4, 1ba08 <bt_hci_evt_le_pkey_complete+0x60>
   1ba04:	3c04      	subs	r4, #4
   1ba06:	e7f3      	b.n	1b9f0 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   1ba08:	2300      	movs	r3, #0
	list->tail = NULL;
   1ba0a:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba10:	200080cc 	.word	0x200080cc
   1ba14:	2003199c 	.word	0x2003199c
   1ba18:	2003088c 	.word	0x2003088c

0001ba1c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1ba1c:	4905      	ldr	r1, [pc, #20]	; (1ba34 <bt_hci_evt_le_dhkey_complete+0x18>)
   1ba1e:	680b      	ldr	r3, [r1, #0]
   1ba20:	b133      	cbz	r3, 1ba30 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1ba22:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1ba24:	2000      	movs	r0, #0
   1ba26:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1ba28:	7811      	ldrb	r1, [r2, #0]
   1ba2a:	b901      	cbnz	r1, 1ba2e <bt_hci_evt_le_dhkey_complete+0x12>
   1ba2c:	1c50      	adds	r0, r2, #1
   1ba2e:	4718      	bx	r3
	}
}
   1ba30:	4770      	bx	lr
   1ba32:	bf00      	nop
   1ba34:	20030888 	.word	0x20030888

0001ba38 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1ba38:	b570      	push	{r4, r5, r6, lr}
   1ba3a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1ba3c:	4b0a      	ldr	r3, [pc, #40]	; (1ba68 <notify_connected+0x30>)
   1ba3e:	681d      	ldr	r5, [r3, #0]
   1ba40:	b925      	cbnz	r5, 1ba4c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1ba42:	4d0a      	ldr	r5, [pc, #40]	; (1ba6c <notify_connected+0x34>)
   1ba44:	4e0a      	ldr	r6, [pc, #40]	; (1ba70 <notify_connected+0x38>)
   1ba46:	42b5      	cmp	r5, r6
   1ba48:	d307      	bcc.n	1ba5a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1ba4a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   1ba4c:	682b      	ldr	r3, [r5, #0]
   1ba4e:	b113      	cbz	r3, 1ba56 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   1ba50:	4620      	mov	r0, r4
   1ba52:	7b21      	ldrb	r1, [r4, #12]
   1ba54:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1ba56:	69ad      	ldr	r5, [r5, #24]
   1ba58:	e7f2      	b.n	1ba40 <notify_connected+0x8>
		if (cb->connected) {
   1ba5a:	682b      	ldr	r3, [r5, #0]
   1ba5c:	b113      	cbz	r3, 1ba64 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1ba5e:	4620      	mov	r0, r4
   1ba60:	7b21      	ldrb	r1, [r4, #12]
   1ba62:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1ba64:	351c      	adds	r5, #28
   1ba66:	e7ee      	b.n	1ba46 <notify_connected+0xe>
   1ba68:	200308b4 	.word	0x200308b4
   1ba6c:	00032e5c 	.word	0x00032e5c
   1ba70:	00032e78 	.word	0x00032e78

0001ba74 <tx_notify>:
{
   1ba74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba78:	4604      	mov	r4, r0
	tx->cb = NULL;
   1ba7a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   1ba7e:	4f14      	ldr	r7, [pc, #80]	; (1bad0 <tx_notify+0x5c>)
	__asm__ volatile(
   1ba80:	f04f 0220 	mov.w	r2, #32
   1ba84:	f3ef 8311 	mrs	r3, BASEPRI
   1ba88:	f382 8812 	msr	BASEPRI_MAX, r2
   1ba8c:	f3bf 8f6f 	isb	sy
	return list->head;
   1ba90:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1ba92:	b929      	cbnz	r1, 1baa0 <tx_notify+0x2c>
	__asm__ volatile(
   1ba94:	f383 8811 	msr	BASEPRI, r3
   1ba98:	f3bf 8f6f 	isb	sy
}
   1ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1baa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1baa2:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1baa4:	4281      	cmp	r1, r0
	list->tail = node;
   1baa6:	bf08      	it	eq
   1baa8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1baaa:	6222      	str	r2, [r4, #32]
   1baac:	f383 8811 	msr	BASEPRI, r3
   1bab0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1bab4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1bab8:	4638      	mov	r0, r7
	tx->user_data = NULL;
   1baba:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   1babe:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1bac2:	f015 f9c0 	bl	30e46 <k_queue_append>
		cb(conn, user_data, 0);
   1bac6:	2200      	movs	r2, #0
   1bac8:	4631      	mov	r1, r6
   1baca:	4620      	mov	r0, r4
   1bacc:	47a8      	blx	r5
	while (1) {
   1bace:	e7d7      	b.n	1ba80 <tx_notify+0xc>
   1bad0:	20008e68 	.word	0x20008e68

0001bad4 <conn_tx_destroy>:
	tx->cb = NULL;
   1bad4:	2200      	movs	r2, #0
{
   1bad6:	b570      	push	{r4, r5, r6, lr}
   1bad8:	4604      	mov	r4, r0
	void *user_data = tx->user_data;
   1bada:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   1bade:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   1bae0:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1bae4:	4805      	ldr	r0, [pc, #20]	; (1bafc <conn_tx_destroy+0x28>)
   1bae6:	f015 f9ae 	bl	30e46 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1baea:	4631      	mov	r1, r6
   1baec:	4620      	mov	r0, r4
   1baee:	462b      	mov	r3, r5
}
   1baf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1baf4:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1baf8:	4718      	bx	r3
   1bafa:	bf00      	nop
   1bafc:	20008e68 	.word	0x20008e68

0001bb00 <send_frag>:
{
   1bb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bb04:	4604      	mov	r4, r0
   1bb06:	460e      	mov	r6, r1
   1bb08:	4617      	mov	r7, r2
   1bb0a:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1bb0c:	698d      	ldr	r5, [r1, #24]
{
   1bb0e:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   1bb10:	f04f 33ff 	mov.w	r3, #4294967295
   1bb14:	f04f 32ff 	mov.w	r2, #4294967295
   1bb18:	4842      	ldr	r0, [pc, #264]	; (1bc24 <send_frag+0x124>)
   1bb1a:	f009 ff89 	bl	25a30 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1bb1e:	7b63      	ldrb	r3, [r4, #13]
   1bb20:	2b07      	cmp	r3, #7
   1bb22:	d173      	bne.n	1bc0c <send_frag+0x10c>
	__asm__ volatile(
   1bb24:	f04f 0320 	mov.w	r3, #32
   1bb28:	f3ef 8211 	mrs	r2, BASEPRI
   1bb2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb30:	f3bf 8f6f 	isb	sy
	if (tx) {
   1bb34:	2d00      	cmp	r5, #0
   1bb36:	d049      	beq.n	1bbcc <send_frag+0xcc>
	parent->next = child;
   1bb38:	2300      	movs	r3, #0
   1bb3a:	602b      	str	r3, [r5, #0]
	return list->tail;
   1bb3c:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d141      	bne.n	1bbc6 <send_frag+0xc6>
	list->head = node;
   1bb42:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1bb46:	f382 8811 	msr	BASEPRI, r2
   1bb4a:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1bb4e:	2104      	movs	r1, #4
   1bb50:	f106 000c 	add.w	r0, r6, #12
   1bb54:	f013 fbf4 	bl	2f340 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1bb58:	8823      	ldrh	r3, [r4, #0]
   1bb5a:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   1bb5e:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   1bb62:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1bb64:	8a33      	ldrh	r3, [r6, #16]
   1bb66:	3b04      	subs	r3, #4
   1bb68:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1bb6a:	2302      	movs	r3, #2
	return bt_send(buf);
   1bb6c:	4630      	mov	r0, r6
   1bb6e:	7633      	strb	r3, [r6, #24]
   1bb70:	f7fe fb6c 	bl	1a24c <bt_send>
	if (err) {
   1bb74:	2800      	cmp	r0, #0
   1bb76:	d053      	beq.n	1bc20 <send_frag+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1bb78:	4b2b      	ldr	r3, [pc, #172]	; (1bc28 <send_frag+0x128>)
   1bb7a:	9003      	str	r0, [sp, #12]
   1bb7c:	9302      	str	r3, [sp, #8]
   1bb7e:	2300      	movs	r3, #0
   1bb80:	2201      	movs	r2, #1
   1bb82:	4618      	mov	r0, r3
   1bb84:	e9cd 3300 	strd	r3, r3, [sp]
   1bb88:	4928      	ldr	r1, [pc, #160]	; (1bc2c <send_frag+0x12c>)
   1bb8a:	f011 fe92 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   1bb8e:	f04f 0320 	mov.w	r3, #32
   1bb92:	f3ef 8711 	mrs	r7, BASEPRI
   1bb96:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb9a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1bb9e:	b315      	cbz	r5, 1bbe6 <send_frag+0xe6>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1bba0:	4629      	mov	r1, r5
   1bba2:	f104 0014 	add.w	r0, r4, #20
   1bba6:	f011 fe5e 	bl	2d866 <sys_slist_find_and_remove>
	__asm__ volatile(
   1bbaa:	f387 8811 	msr	BASEPRI, r7
   1bbae:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1bbb2:	481c      	ldr	r0, [pc, #112]	; (1bc24 <send_frag+0x124>)
   1bbb4:	f009 ff16 	bl	259e4 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1bbb8:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   1bbba:	4629      	mov	r1, r5
   1bbbc:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   1bbbe:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1bbc0:	f7ff ff88 	bl	1bad4 <conn_tx_destroy>
   1bbc4:	e01b      	b.n	1bbfe <send_frag+0xfe>
	parent->next = child;
   1bbc6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1bbc8:	61a5      	str	r5, [r4, #24]
}
   1bbca:	e7bc      	b.n	1bb46 <send_frag+0x46>
	return list->tail;
   1bbcc:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1bbce:	b133      	cbz	r3, 1bbde <send_frag+0xde>
			pending_no_cb = &tail_tx->pending_no_cb;
   1bbd0:	f103 080c 	add.w	r8, r3, #12
   1bbd4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1bbd6:	3301      	adds	r3, #1
   1bbd8:	f8c8 3000 	str.w	r3, [r8]
   1bbdc:	e7b3      	b.n	1bb46 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   1bbde:	69e3      	ldr	r3, [r4, #28]
   1bbe0:	f104 081c 	add.w	r8, r4, #28
   1bbe4:	e7f7      	b.n	1bbd6 <send_frag+0xd6>
			(*pending_no_cb)--;
   1bbe6:	f8d8 3000 	ldr.w	r3, [r8]
   1bbea:	3b01      	subs	r3, #1
   1bbec:	f8c8 3000 	str.w	r3, [r8]
   1bbf0:	f387 8811 	msr	BASEPRI, r7
   1bbf4:	f3bf 8f6f 	isb	sy
   1bbf8:	480a      	ldr	r0, [pc, #40]	; (1bc24 <send_frag+0x124>)
   1bbfa:	f009 fef3 	bl	259e4 <z_impl_k_sem_give>
	if (always_consume) {
   1bbfe:	f1b9 0f00 	cmp.w	r9, #0
   1bc02:	d109      	bne.n	1bc18 <send_frag+0x118>
	return false;
   1bc04:	2000      	movs	r0, #0
}
   1bc06:	b005      	add	sp, #20
   1bc08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bc0c:	4805      	ldr	r0, [pc, #20]	; (1bc24 <send_frag+0x124>)
   1bc0e:	f009 fee9 	bl	259e4 <z_impl_k_sem_give>
	if (tx) {
   1bc12:	2d00      	cmp	r5, #0
   1bc14:	d1d0      	bne.n	1bbb8 <send_frag+0xb8>
   1bc16:	e7f2      	b.n	1bbfe <send_frag+0xfe>
		net_buf_unref(buf);
   1bc18:	4630      	mov	r0, r6
   1bc1a:	f004 fc41 	bl	204a0 <net_buf_unref>
   1bc1e:	e7f1      	b.n	1bc04 <send_frag+0x104>
	return true;
   1bc20:	2001      	movs	r0, #1
   1bc22:	e7f0      	b.n	1bc06 <send_frag+0x106>
   1bc24:	20008100 	.word	0x20008100
   1bc28:	000368cf 	.word	0x000368cf
   1bc2c:	00032ed0 	.word	0x00032ed0

0001bc30 <bt_conn_get_pkts>:
}
   1bc30:	4800      	ldr	r0, [pc, #0]	; (1bc34 <bt_conn_get_pkts+0x4>)
   1bc32:	4770      	bx	lr
   1bc34:	20008100 	.word	0x20008100

0001bc38 <bt_conn_new>:
{
   1bc38:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1bc3a:	2200      	movs	r2, #0
   1bc3c:	4604      	mov	r4, r0
   1bc3e:	428a      	cmp	r2, r1
   1bc40:	d102      	bne.n	1bc48 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bc42:	2400      	movs	r4, #0
}
   1bc44:	4620      	mov	r0, r4
   1bc46:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bc48:	2001      	movs	r0, #1
   1bc4a:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   1bc4e:	e8d3 5fef 	ldaex	r5, [r3]
   1bc52:	2d00      	cmp	r5, #0
   1bc54:	d104      	bne.n	1bc60 <bt_conn_new+0x28>
   1bc56:	e8c3 0fec 	stlex	ip, r0, [r3]
   1bc5a:	f1bc 0f00 	cmp.w	ip, #0
   1bc5e:	d1f6      	bne.n	1bc4e <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bc60:	d002      	beq.n	1bc68 <bt_conn_new+0x30>
   1bc62:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1bc64:	4402      	add	r2, r0
   1bc66:	e7ea      	b.n	1bc3e <bt_conn_new+0x6>
	if (!conn) {
   1bc68:	2c00      	cmp	r4, #0
   1bc6a:	d0ea      	beq.n	1bc42 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   1bc6c:	22bc      	movs	r2, #188	; 0xbc
   1bc6e:	2100      	movs	r1, #0
   1bc70:	4620      	mov	r0, r4
   1bc72:	f015 fd86 	bl	31782 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1bc76:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1bc7a:	4904      	ldr	r1, [pc, #16]	; (1bc8c <bt_conn_new+0x54>)
   1bc7c:	f015 f9be 	bl	30ffc <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1bc80:	4903      	ldr	r1, [pc, #12]	; (1bc90 <bt_conn_new+0x58>)
   1bc82:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1bc86:	f015 f975 	bl	30f74 <k_work_init>
	return conn;
   1bc8a:	e7db      	b.n	1bc44 <bt_conn_new+0xc>
   1bc8c:	0001c435 	.word	0x0001c435
   1bc90:	0002d8d1 	.word	0x0002d8d1

0001bc94 <bt_conn_recv>:
{
   1bc94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc96:	4616      	mov	r6, r2
   1bc98:	b087      	sub	sp, #28
   1bc9a:	4604      	mov	r4, r0
   1bc9c:	460d      	mov	r5, r1
	tx_notify(conn);
   1bc9e:	f7ff fee9 	bl	1ba74 <tx_notify>
	switch (flags) {
   1bca2:	2e01      	cmp	r6, #1
   1bca4:	d02e      	beq.n	1bd04 <bt_conn_recv+0x70>
   1bca6:	2e02      	cmp	r6, #2
   1bca8:	d165      	bne.n	1bd76 <bt_conn_recv+0xe2>
		if (conn->rx) {
   1bcaa:	6923      	ldr	r3, [r4, #16]
   1bcac:	b163      	cbz	r3, 1bcc8 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   1bcae:	4b3d      	ldr	r3, [pc, #244]	; (1bda4 <bt_conn_recv+0x110>)
   1bcb0:	2201      	movs	r2, #1
   1bcb2:	9302      	str	r3, [sp, #8]
   1bcb4:	2300      	movs	r3, #0
   1bcb6:	493c      	ldr	r1, [pc, #240]	; (1bda8 <bt_conn_recv+0x114>)
   1bcb8:	4618      	mov	r0, r3
   1bcba:	e9cd 3300 	strd	r3, r3, [sp]
   1bcbe:	f011 fdf8 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1bcc2:	4620      	mov	r0, r4
   1bcc4:	f011 fe07 	bl	2d8d6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1bcc8:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1bcca:	6921      	ldr	r1, [r4, #16]
   1bccc:	8a0a      	ldrh	r2, [r1, #16]
   1bcce:	2a01      	cmp	r2, #1
   1bcd0:	d966      	bls.n	1bda0 <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1bcd2:	68cb      	ldr	r3, [r1, #12]
   1bcd4:	881b      	ldrh	r3, [r3, #0]
   1bcd6:	3304      	adds	r3, #4
   1bcd8:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1bcda:	429a      	cmp	r2, r3
   1bcdc:	d360      	bcc.n	1bda0 <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   1bcde:	d956      	bls.n	1bd8e <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1bce0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1bce4:	4b31      	ldr	r3, [pc, #196]	; (1bdac <bt_conn_recv+0x118>)
   1bce6:	2201      	movs	r2, #1
   1bce8:	9302      	str	r3, [sp, #8]
   1bcea:	2300      	movs	r3, #0
   1bcec:	492e      	ldr	r1, [pc, #184]	; (1bda8 <bt_conn_recv+0x114>)
   1bcee:	4618      	mov	r0, r3
   1bcf0:	e9cd 3300 	strd	r3, r3, [sp]
   1bcf4:	f011 fddd 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1bcf8:	4620      	mov	r0, r4
}
   1bcfa:	b007      	add	sp, #28
   1bcfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   1bd00:	f011 bde9 	b.w	2d8d6 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1bd04:	6923      	ldr	r3, [r4, #16]
   1bd06:	b963      	cbnz	r3, 1bd22 <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   1bd08:	4a29      	ldr	r2, [pc, #164]	; (1bdb0 <bt_conn_recv+0x11c>)
   1bd0a:	4618      	mov	r0, r3
   1bd0c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1bd10:	4925      	ldr	r1, [pc, #148]	; (1bda8 <bt_conn_recv+0x114>)
   1bd12:	4632      	mov	r2, r6
   1bd14:	9300      	str	r3, [sp, #0]
   1bd16:	f011 fdcc 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1bd1a:	4620      	mov	r0, r4
   1bd1c:	f011 fddb 	bl	2d8d6 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1bd20:	e001      	b.n	1bd26 <bt_conn_recv+0x92>
		if (!buf->len) {
   1bd22:	8a2f      	ldrh	r7, [r5, #16]
   1bd24:	b92f      	cbnz	r7, 1bd32 <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   1bd26:	4628      	mov	r0, r5
}
   1bd28:	b007      	add	sp, #28
   1bd2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   1bd2e:	f004 bbb7 	b.w	204a0 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1bd32:	f103 000c 	add.w	r0, r3, #12
   1bd36:	f013 fb30 	bl	2f39a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1bd3a:	4287      	cmp	r7, r0
   1bd3c:	d911      	bls.n	1bd62 <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1bd3e:	2700      	movs	r7, #0
   1bd40:	4b1c      	ldr	r3, [pc, #112]	; (1bdb4 <bt_conn_recv+0x120>)
   1bd42:	4632      	mov	r2, r6
   1bd44:	4638      	mov	r0, r7
   1bd46:	4918      	ldr	r1, [pc, #96]	; (1bda8 <bt_conn_recv+0x114>)
   1bd48:	9302      	str	r3, [sp, #8]
   1bd4a:	e9cd 7700 	strd	r7, r7, [sp]
   1bd4e:	463b      	mov	r3, r7
   1bd50:	f011 fdaf 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1bd54:	463a      	mov	r2, r7
   1bd56:	4620      	mov	r0, r4
   1bd58:	6921      	ldr	r1, [r4, #16]
   1bd5a:	f000 fddf 	bl	1c91c <bt_l2cap_recv>
			conn->rx = NULL;
   1bd5e:	6127      	str	r7, [r4, #16]
   1bd60:	e7e1      	b.n	1bd26 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bd62:	6920      	ldr	r0, [r4, #16]
   1bd64:	8a2a      	ldrh	r2, [r5, #16]
   1bd66:	68e9      	ldr	r1, [r5, #12]
   1bd68:	300c      	adds	r0, #12
   1bd6a:	f013 fad8 	bl	2f31e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1bd6e:	4628      	mov	r0, r5
   1bd70:	f004 fb96 	bl	204a0 <net_buf_unref>
		break;
   1bd74:	e7a9      	b.n	1bcca <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1bd76:	4b10      	ldr	r3, [pc, #64]	; (1bdb8 <bt_conn_recv+0x124>)
   1bd78:	2201      	movs	r2, #1
   1bd7a:	9302      	str	r3, [sp, #8]
   1bd7c:	2300      	movs	r3, #0
   1bd7e:	490a      	ldr	r1, [pc, #40]	; (1bda8 <bt_conn_recv+0x114>)
   1bd80:	4618      	mov	r0, r3
   1bd82:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   1bd86:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1bd88:	f011 fd93 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
   1bd8c:	e7c5      	b.n	1bd1a <bt_conn_recv+0x86>
	conn->rx = NULL;
   1bd8e:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   1bd90:	2201      	movs	r2, #1
   1bd92:	4620      	mov	r0, r4
	conn->rx = NULL;
   1bd94:	6123      	str	r3, [r4, #16]
}
   1bd96:	b007      	add	sp, #28
   1bd98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   1bd9c:	f000 bdbe 	b.w	1c91c <bt_l2cap_recv>
}
   1bda0:	b007      	add	sp, #28
   1bda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bda4:	00036f16 	.word	0x00036f16
   1bda8:	00032ed0 	.word	0x00032ed0
   1bdac:	00036f96 	.word	0x00036f96
   1bdb0:	00036f33 	.word	0x00036f33
   1bdb4:	00036f51 	.word	0x00036f51
   1bdb8:	00036f78 	.word	0x00036f78

0001bdbc <bt_conn_send_cb>:
{
   1bdbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bdc0:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1bdc2:	7b43      	ldrb	r3, [r0, #13]
{
   1bdc4:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1bdc6:	2b07      	cmp	r3, #7
{
   1bdc8:	4688      	mov	r8, r1
   1bdca:	4617      	mov	r7, r2
   1bdcc:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   1bdce:	d00c      	beq.n	1bdea <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   1bdd0:	4b28      	ldr	r3, [pc, #160]	; (1be74 <bt_conn_send_cb+0xb8>)
   1bdd2:	2201      	movs	r2, #1
   1bdd4:	9302      	str	r3, [sp, #8]
   1bdd6:	2300      	movs	r3, #0
   1bdd8:	4927      	ldr	r1, [pc, #156]	; (1be78 <bt_conn_send_cb+0xbc>)
   1bdda:	4618      	mov	r0, r3
   1bddc:	e9cd 3300 	strd	r3, r3, [sp]
   1bde0:	f011 fd67 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   1bde4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bde8:	e01c      	b.n	1be24 <bt_conn_send_cb+0x68>
	if (cb) {
   1bdea:	2a00      	cmp	r2, #0
   1bdec:	d03f      	beq.n	1be6e <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   1bdee:	f00a fb37 	bl	26460 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1bdf2:	4b22      	ldr	r3, [pc, #136]	; (1be7c <bt_conn_send_cb+0xc0>)
   1bdf4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1bdf6:	4822      	ldr	r0, [pc, #136]	; (1be80 <bt_conn_send_cb+0xc4>)
   1bdf8:	bf07      	ittee	eq
   1bdfa:	2200      	moveq	r2, #0
   1bdfc:	2300      	moveq	r3, #0
   1bdfe:	f04f 32ff 	movne.w	r2, #4294967295
   1be02:	f04f 33ff 	movne.w	r3, #4294967295
   1be06:	f009 fdb9 	bl	2597c <z_impl_k_queue_get>
   1be0a:	4604      	mov	r4, r0
		if (!tx) {
   1be0c:	b968      	cbnz	r0, 1be2a <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   1be0e:	4b1d      	ldr	r3, [pc, #116]	; (1be84 <bt_conn_send_cb+0xc8>)
   1be10:	9000      	str	r0, [sp, #0]
   1be12:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1be16:	2201      	movs	r2, #1
   1be18:	4603      	mov	r3, r0
   1be1a:	4917      	ldr	r1, [pc, #92]	; (1be78 <bt_conn_send_cb+0xbc>)
   1be1c:	f011 fd49 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   1be20:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1be24:	b005      	add	sp, #20
   1be26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1be2a:	7b73      	ldrb	r3, [r6, #13]
   1be2c:	2500      	movs	r5, #0
   1be2e:	2b07      	cmp	r3, #7
   1be30:	d011      	beq.n	1be56 <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   1be32:	4b15      	ldr	r3, [pc, #84]	; (1be88 <bt_conn_send_cb+0xcc>)
   1be34:	4628      	mov	r0, r5
   1be36:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1be3a:	2202      	movs	r2, #2
   1be3c:	462b      	mov	r3, r5
   1be3e:	490e      	ldr	r1, [pc, #56]	; (1be78 <bt_conn_send_cb+0xbc>)
   1be40:	9500      	str	r5, [sp, #0]
   1be42:	f011 fd36 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   1be46:	4621      	mov	r1, r4
	tx->user_data = NULL;
   1be48:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1be4c:	480c      	ldr	r0, [pc, #48]	; (1be80 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1be4e:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1be50:	f014 fff9 	bl	30e46 <k_queue_append>
}
   1be54:	e7c6      	b.n	1bde4 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   1be56:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   1be5a:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   1be5c:	f106 0038 	add.w	r0, r6, #56	; 0x38
   1be60:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   1be62:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   1be66:	f013 fa2c 	bl	2f2c2 <net_buf_put>
	return 0;
   1be6a:	2000      	movs	r0, #0
   1be6c:	e7da      	b.n	1be24 <bt_conn_send_cb+0x68>
   1be6e:	4614      	mov	r4, r2
   1be70:	e7f4      	b.n	1be5c <bt_conn_send_cb+0xa0>
   1be72:	bf00      	nop
   1be74:	00036fb1 	.word	0x00036fb1
   1be78:	00032ed0 	.word	0x00032ed0
   1be7c:	2000a458 	.word	0x2000a458
   1be80:	20008e68 	.word	0x20008e68
   1be84:	00036fc0 	.word	0x00036fc0
   1be88:	00036fde 	.word	0x00036fde

0001be8c <bt_conn_prepare_events>:
{
   1be8c:	b570      	push	{r4, r5, r6, lr}
   1be8e:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   1be90:	4817      	ldr	r0, [pc, #92]	; (1bef0 <bt_conn_prepare_events+0x64>)
   1be92:	f015 fc01 	bl	31698 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1be96:	2200      	movs	r2, #0
   1be98:	2101      	movs	r1, #1
   1be9a:	4620      	mov	r0, r4
   1be9c:	4b14      	ldr	r3, [pc, #80]	; (1bef0 <bt_conn_prepare_events+0x64>)
   1be9e:	f015 fbde 	bl	3165e <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1bea2:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bea6:	4b13      	ldr	r3, [pc, #76]	; (1bef4 <bt_conn_prepare_events+0x68>)
   1bea8:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   1beac:	b90a      	cbnz	r2, 1beb2 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1beae:	2001      	movs	r0, #1
}
   1beb0:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1beb2:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   1beb6:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   1beba:	b953      	cbnz	r3, 1bed2 <bt_conn_prepare_events+0x46>
   1bebc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1bec0:	1d28      	adds	r0, r5, #4
   1bec2:	f011 fceb 	bl	2d89c <atomic_and>
   1bec6:	0643      	lsls	r3, r0, #25
   1bec8:	d503      	bpl.n	1bed2 <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   1beca:	4628      	mov	r0, r5
   1becc:	f011 fd0c 	bl	2d8e8 <conn_cleanup>
		return -ENOTCONN;
   1bed0:	e7ed      	b.n	1beae <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1bed2:	7b6b      	ldrb	r3, [r5, #13]
   1bed4:	2b07      	cmp	r3, #7
   1bed6:	d1ea      	bne.n	1beae <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   1bed8:	4630      	mov	r0, r6
   1beda:	4b07      	ldr	r3, [pc, #28]	; (1bef8 <bt_conn_prepare_events+0x6c>)
   1bedc:	2200      	movs	r2, #0
   1bede:	2104      	movs	r1, #4
   1bee0:	f015 fbbd 	bl	3165e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1bee4:	2301      	movs	r3, #1
			ev_count++;
   1bee6:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1bee8:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   1beec:	e7e0      	b.n	1beb0 <bt_conn_prepare_events+0x24>
   1beee:	bf00      	nop
   1bef0:	2000856c 	.word	0x2000856c
   1bef4:	2000a064 	.word	0x2000a064
   1bef8:	20009fe0 	.word	0x20009fe0

0001befc <bt_conn_lookup_handle>:
{
   1befc:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1befe:	2101      	movs	r1, #1
   1bf00:	4801      	ldr	r0, [pc, #4]	; (1bf08 <bt_conn_lookup_handle+0xc>)
   1bf02:	f011 bd3c 	b.w	2d97e <conn_lookup_handle>
   1bf06:	bf00      	nop
   1bf08:	20009fa8 	.word	0x20009fa8

0001bf0c <bt_conn_set_state>:
{
   1bf0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   1bf0e:	7b46      	ldrb	r6, [r0, #13]
{
   1bf10:	4604      	mov	r4, r0
	if (conn->state == state) {
   1bf12:	428e      	cmp	r6, r1
{
   1bf14:	460d      	mov	r5, r1
	if (conn->state == state) {
   1bf16:	d111      	bne.n	1bf3c <bt_conn_set_state+0x30>
	switch (state) {
   1bf18:	2e08      	cmp	r6, #8
   1bf1a:	bf96      	itet	ls
   1bf1c:	4b65      	ldrls	r3, [pc, #404]	; (1c0b4 <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   1bf1e:	4b66      	ldrhi	r3, [pc, #408]	; (1c0b8 <bt_conn_set_state+0x1ac>)
   1bf20:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   1bf24:	9303      	str	r3, [sp, #12]
   1bf26:	4b65      	ldr	r3, [pc, #404]	; (1c0bc <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   1bf28:	9302      	str	r3, [sp, #8]
   1bf2a:	2300      	movs	r3, #0
   1bf2c:	2202      	movs	r2, #2
   1bf2e:	4618      	mov	r0, r3
   1bf30:	e9cd 3300 	strd	r3, r3, [sp]
   1bf34:	4962      	ldr	r1, [pc, #392]	; (1c0c0 <bt_conn_set_state+0x1b4>)
   1bf36:	f011 fcbc 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
   1bf3a:	e098      	b.n	1c06e <bt_conn_set_state+0x162>
	conn->state = state;
   1bf3c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1bf3e:	b926      	cbnz	r6, 1bf4a <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1bf40:	7883      	ldrb	r3, [r0, #2]
   1bf42:	2b08      	cmp	r3, #8
   1bf44:	d001      	beq.n	1bf4a <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   1bf46:	f011 fcf2 	bl	2d92e <bt_conn_ref>
	switch (conn->state) {
   1bf4a:	7b63      	ldrb	r3, [r4, #13]
   1bf4c:	2b08      	cmp	r3, #8
   1bf4e:	f200 80ad 	bhi.w	1c0ac <bt_conn_set_state+0x1a0>
   1bf52:	e8df f003 	tbb	[pc, r3]
   1bf56:	053a      	.short	0x053a
   1bf58:	8c8c8c8c 	.word	0x8c8c8c8c
   1bf5c:	1c8c      	.short	0x1c8c
   1bf5e:	8c          	.byte	0x8c
   1bf5f:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   1bf60:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   1bf62:	4d58      	ldr	r5, [pc, #352]	; (1c0c4 <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   1bf64:	f04f 0220 	mov.w	r2, #32
   1bf68:	f3ef 8311 	mrs	r3, BASEPRI
   1bf6c:	f382 8812 	msr	BASEPRI_MAX, r2
   1bf70:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1bf74:	69e2      	ldr	r2, [r4, #28]
   1bf76:	2a00      	cmp	r2, #0
   1bf78:	d073      	beq.n	1c062 <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   1bf7a:	3a01      	subs	r2, #1
   1bf7c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1bf7e:	f383 8811 	msr	BASEPRI, r3
   1bf82:	f3bf 8f6f 	isb	sy
   1bf86:	4628      	mov	r0, r5
   1bf88:	f009 fd2c 	bl	259e4 <z_impl_k_sem_give>
}
   1bf8c:	e7ea      	b.n	1bf64 <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1bf8e:	78a3      	ldrb	r3, [r4, #2]
   1bf90:	2b04      	cmp	r3, #4
   1bf92:	d06c      	beq.n	1c06e <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   1bf94:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1bf98:	f014 ff49 	bl	30e2e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1bf9c:	2100      	movs	r1, #0
   1bf9e:	484a      	ldr	r0, [pc, #296]	; (1c0c8 <bt_conn_set_state+0x1bc>)
   1bfa0:	f00a fd44 	bl	26a2c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1bfa4:	2300      	movs	r3, #0
	list->tail = NULL;
   1bfa6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1bfaa:	78e3      	ldrb	r3, [r4, #3]
   1bfac:	2b01      	cmp	r3, #1
   1bfae:	d15e      	bne.n	1c06e <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   1bfb0:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   1bfb2:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   1bfb6:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1bfba:	2300      	movs	r3, #0
   1bfbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   1bfc0:	b004      	add	sp, #16
   1bfc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1bfc6:	f009 bf2f 	b.w	25e28 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1bfca:	78a3      	ldrb	r3, [r4, #2]
   1bfcc:	2b04      	cmp	r3, #4
   1bfce:	d105      	bne.n	1bfdc <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   1bfd0:	4620      	mov	r0, r4
}
   1bfd2:	b004      	add	sp, #16
   1bfd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1bfd8:	f011 bcbd 	b.w	2d956 <bt_conn_unref>
		switch (old_state) {
   1bfdc:	2e08      	cmp	r6, #8
   1bfde:	d846      	bhi.n	1c06e <bt_conn_set_state+0x162>
   1bfe0:	a301      	add	r3, pc, #4	; (adr r3, 1bfe8 <bt_conn_set_state+0xdc>)
   1bfe2:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1bfe6:	bf00      	nop
   1bfe8:	0001c05d 	.word	0x0001c05d
   1bfec:	0001c00d 	.word	0x0001c00d
   1bff0:	0001c04f 	.word	0x0001c04f
   1bff4:	0001bfd1 	.word	0x0001bfd1
   1bff8:	0001bfd1 	.word	0x0001bfd1
   1bffc:	0001c04f 	.word	0x0001c04f
   1c000:	0001c04f 	.word	0x0001c04f
   1c004:	0001c06f 	.word	0x0001c06f
   1c008:	0001c05d 	.word	0x0001c05d
			tx_notify(conn);
   1c00c:	4620      	mov	r0, r4
   1c00e:	f7ff fd31 	bl	1ba74 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1c012:	78a3      	ldrb	r3, [r4, #2]
   1c014:	2b01      	cmp	r3, #1
   1c016:	d10a      	bne.n	1c02e <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1c018:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1c01c:	4628      	mov	r0, r5
   1c01e:	f014 fff9 	bl	31014 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1c022:	f010 0f0c 	tst.w	r0, #12
   1c026:	d002      	beq.n	1c02e <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   1c028:	4628      	mov	r0, r5
   1c02a:	f014 fff5 	bl	31018 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c02e:	3404      	adds	r4, #4
   1c030:	e8d4 3fef 	ldaex	r3, [r4]
   1c034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c038:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1c03c:	2a00      	cmp	r2, #0
   1c03e:	d1f7      	bne.n	1c030 <bt_conn_set_state+0x124>
   1c040:	2100      	movs	r1, #0
   1c042:	4821      	ldr	r0, [pc, #132]	; (1c0c8 <bt_conn_set_state+0x1bc>)
}
   1c044:	b004      	add	sp, #16
   1c046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c04a:	f00a bcef 	b.w	26a2c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1c04e:	7b23      	ldrb	r3, [r4, #12]
   1c050:	2b00      	cmp	r3, #0
   1c052:	d0bd      	beq.n	1bfd0 <bt_conn_set_state+0xc4>
				notify_connected(conn);
   1c054:	4620      	mov	r0, r4
   1c056:	f7ff fcef 	bl	1ba38 <notify_connected>
   1c05a:	e7b9      	b.n	1bfd0 <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   1c05c:	4b1b      	ldr	r3, [pc, #108]	; (1c0cc <bt_conn_set_state+0x1c0>)
   1c05e:	9503      	str	r5, [sp, #12]
   1c060:	e762      	b.n	1bf28 <bt_conn_set_state+0x1c>
	return list->head;
   1c062:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1c064:	b929      	cbnz	r1, 1c072 <bt_conn_set_state+0x166>
   1c066:	f383 8811 	msr	BASEPRI, r3
   1c06a:	f3bf 8f6f 	isb	sy
}
   1c06e:	b004      	add	sp, #16
   1c070:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c072:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1c074:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c076:	4281      	cmp	r1, r0
	list->tail = node;
   1c078:	bf08      	it	eq
   1c07a:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   1c07c:	6162      	str	r2, [r4, #20]
   1c07e:	f383 8811 	msr	BASEPRI, r3
   1c082:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c086:	f04f 0220 	mov.w	r2, #32
   1c08a:	f3ef 8311 	mrs	r3, BASEPRI
   1c08e:	f382 8812 	msr	BASEPRI_MAX, r2
   1c092:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1c096:	68ca      	ldr	r2, [r1, #12]
   1c098:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1c09a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   1c09c:	f383 8811 	msr	BASEPRI, r3
   1c0a0:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1c0a4:	4620      	mov	r0, r4
   1c0a6:	f7ff fd15 	bl	1bad4 <conn_tx_destroy>
   1c0aa:	e76c      	b.n	1bf86 <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   1c0ac:	4b08      	ldr	r3, [pc, #32]	; (1c0d0 <bt_conn_set_state+0x1c4>)
   1c0ae:	9503      	str	r5, [sp, #12]
   1c0b0:	e73a      	b.n	1bf28 <bt_conn_set_state+0x1c>
   1c0b2:	bf00      	nop
   1c0b4:	00033b44 	.word	0x00033b44
   1c0b8:	00037004 	.word	0x00037004
   1c0bc:	0003700e 	.word	0x0003700e
   1c0c0:	00032ed0 	.word	0x00032ed0
   1c0c4:	20008100 	.word	0x20008100
   1c0c8:	2000856c 	.word	0x2000856c
   1c0cc:	0003701f 	.word	0x0003701f
   1c0d0:	00037036 	.word	0x00037036

0001c0d4 <bt_conn_index>:
		index = conn - acl_conns;
   1c0d4:	4b03      	ldr	r3, [pc, #12]	; (1c0e4 <bt_conn_index+0x10>)
   1c0d6:	1ac0      	subs	r0, r0, r3
   1c0d8:	4b03      	ldr	r3, [pc, #12]	; (1c0e8 <bt_conn_index+0x14>)
   1c0da:	1180      	asrs	r0, r0, #6
   1c0dc:	4358      	muls	r0, r3
}
   1c0de:	b2c0      	uxtb	r0, r0
   1c0e0:	4770      	bx	lr
   1c0e2:	bf00      	nop
   1c0e4:	20009fa8 	.word	0x20009fa8
   1c0e8:	aaaaaaab 	.word	0xaaaaaaab

0001c0ec <bt_conn_create_pdu_timeout>:
{
   1c0ec:	b530      	push	{r4, r5, lr}
   1c0ee:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   1c0f0:	490c      	ldr	r1, [pc, #48]	; (1c124 <bt_conn_create_pdu_timeout+0x38>)
   1c0f2:	b085      	sub	sp, #20
   1c0f4:	2800      	cmp	r0, #0
   1c0f6:	bf08      	it	eq
   1c0f8:	4608      	moveq	r0, r1
   1c0fa:	f013 f8aa 	bl	2f252 <net_buf_alloc_fixed>
	if (!buf) {
   1c0fe:	4604      	mov	r4, r0
   1c100:	b958      	cbnz	r0, 1c11a <bt_conn_create_pdu_timeout+0x2e>
		LOG_WRN("Unable to allocate buffer within timeout");
   1c102:	4b09      	ldr	r3, [pc, #36]	; (1c128 <bt_conn_create_pdu_timeout+0x3c>)
   1c104:	2202      	movs	r2, #2
   1c106:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1c10a:	4908      	ldr	r1, [pc, #32]	; (1c12c <bt_conn_create_pdu_timeout+0x40>)
   1c10c:	4603      	mov	r3, r0
   1c10e:	9000      	str	r0, [sp, #0]
   1c110:	f011 fbcf 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
}
   1c114:	4620      	mov	r0, r4
   1c116:	b005      	add	sp, #20
   1c118:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1c11a:	1d69      	adds	r1, r5, #5
   1c11c:	300c      	adds	r0, #12
   1c11e:	f013 f89f 	bl	2f260 <net_buf_simple_reserve>
	return buf;
   1c122:	e7f7      	b.n	1c114 <bt_conn_create_pdu_timeout+0x28>
   1c124:	20008eac 	.word	0x20008eac
   1c128:	00037052 	.word	0x00037052
   1c12c:	00032ed0 	.word	0x00032ed0

0001c130 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c132:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1c134:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c136:	e8d0 3faf 	lda	r3, [r0]
   1c13a:	059b      	lsls	r3, r3, #22
   1c13c:	d511      	bpl.n	1c162 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1c13e:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1c142:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   1c146:	429a      	cmp	r2, r3
   1c148:	d80b      	bhi.n	1c162 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1c14a:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   1c14e:	429a      	cmp	r2, r3
   1c150:	d307      	bcc.n	1c162 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1c152:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   1c156:	429a      	cmp	r2, r3
   1c158:	d103      	bne.n	1c162 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c15a:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1c15e:	f011 fb9d 	bl	2d89c <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c162:	4b10      	ldr	r3, [pc, #64]	; (1c1a4 <notify_le_param_updated+0x74>)
   1c164:	681d      	ldr	r5, [r3, #0]
   1c166:	b925      	cbnz	r5, 1c172 <notify_le_param_updated+0x42>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c168:	4d0f      	ldr	r5, [pc, #60]	; (1c1a8 <notify_le_param_updated+0x78>)
   1c16a:	4f10      	ldr	r7, [pc, #64]	; (1c1ac <notify_le_param_updated+0x7c>)
   1c16c:	42bd      	cmp	r5, r7
   1c16e:	d30c      	bcc.n	1c18a <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1c170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1c172:	68ee      	ldr	r6, [r5, #12]
   1c174:	b13e      	cbz	r6, 1c186 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   1c176:	4620      	mov	r0, r4
   1c178:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1c17c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1c180:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1c184:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1c186:	69ad      	ldr	r5, [r5, #24]
   1c188:	e7ed      	b.n	1c166 <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   1c18a:	68ee      	ldr	r6, [r5, #12]
   1c18c:	b13e      	cbz	r6, 1c19e <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   1c18e:	4620      	mov	r0, r4
   1c190:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1c194:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1c198:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1c19c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c19e:	351c      	adds	r5, #28
   1c1a0:	e7e4      	b.n	1c16c <notify_le_param_updated+0x3c>
   1c1a2:	bf00      	nop
   1c1a4:	200308b4 	.word	0x200308b4
   1c1a8:	00032e5c 	.word	0x00032e5c
   1c1ac:	00032e78 	.word	0x00032e78

0001c1b0 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1c1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1b4:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1c1b6:	4608      	mov	r0, r1
{
   1c1b8:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1c1ba:	f011 f8d7 	bl	2d36c <bt_le_conn_params_valid>
   1c1be:	4605      	mov	r5, r0
   1c1c0:	b918      	cbnz	r0, 1c1ca <le_param_req+0x1a>
		return false;
   1c1c2:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1c1c4:	4628      	mov	r0, r5
   1c1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1c1ca:	4b13      	ldr	r3, [pc, #76]	; (1c218 <le_param_req+0x68>)
   1c1cc:	681e      	ldr	r6, [r3, #0]
   1c1ce:	b946      	cbnz	r6, 1c1e2 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c1d0:	4e12      	ldr	r6, [pc, #72]	; (1c21c <le_param_req+0x6c>)
   1c1d2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1c220 <le_param_req+0x70>
   1c1d6:	4546      	cmp	r6, r8
   1c1d8:	d2f4      	bcs.n	1c1c4 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1c1da:	68b3      	ldr	r3, [r6, #8]
   1c1dc:	b983      	cbnz	r3, 1c200 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c1de:	361c      	adds	r6, #28
   1c1e0:	e7f9      	b.n	1c1d6 <le_param_req+0x26>
		if (!cb->le_param_req) {
   1c1e2:	68b3      	ldr	r3, [r6, #8]
   1c1e4:	b90b      	cbnz	r3, 1c1ea <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1c1e6:	69b6      	ldr	r6, [r6, #24]
   1c1e8:	e7f1      	b.n	1c1ce <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1c1ea:	4621      	mov	r1, r4
   1c1ec:	4638      	mov	r0, r7
   1c1ee:	4798      	blx	r3
   1c1f0:	2800      	cmp	r0, #0
   1c1f2:	d0e6      	beq.n	1c1c2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	f011 f8b9 	bl	2d36c <bt_le_conn_params_valid>
   1c1fa:	2800      	cmp	r0, #0
   1c1fc:	d1f3      	bne.n	1c1e6 <le_param_req+0x36>
   1c1fe:	e7e0      	b.n	1c1c2 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1c200:	4621      	mov	r1, r4
   1c202:	4638      	mov	r0, r7
   1c204:	4798      	blx	r3
   1c206:	2800      	cmp	r0, #0
   1c208:	d0db      	beq.n	1c1c2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1c20a:	4620      	mov	r0, r4
   1c20c:	f011 f8ae 	bl	2d36c <bt_le_conn_params_valid>
   1c210:	2800      	cmp	r0, #0
   1c212:	d1e4      	bne.n	1c1de <le_param_req+0x2e>
   1c214:	e7d5      	b.n	1c1c2 <le_param_req+0x12>
   1c216:	bf00      	nop
   1c218:	200308b4 	.word	0x200308b4
   1c21c:	00032e5c 	.word	0x00032e5c
   1c220:	00032e78 	.word	0x00032e78

0001c224 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1c224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c228:	78c3      	ldrb	r3, [r0, #3]
{
   1c22a:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c22c:	b973      	cbnz	r3, 1c24c <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   1c22e:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c232:	4b10      	ldr	r3, [pc, #64]	; (1c274 <bt_conn_identity_resolved+0x50>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c234:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   1c238:	681d      	ldr	r5, [r3, #0]
   1c23a:	b955      	cbnz	r5, 1c252 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c23c:	4d0e      	ldr	r5, [pc, #56]	; (1c278 <bt_conn_identity_resolved+0x54>)
   1c23e:	4f0f      	ldr	r7, [pc, #60]	; (1c27c <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c240:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c244:	42bd      	cmp	r5, r7
   1c246:	d30c      	bcc.n	1c262 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   1c248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   1c24c:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1c250:	e7ef      	b.n	1c232 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1c252:	692b      	ldr	r3, [r5, #16]
   1c254:	b11b      	cbz	r3, 1c25e <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c256:	463a      	mov	r2, r7
   1c258:	4631      	mov	r1, r6
   1c25a:	4620      	mov	r0, r4
   1c25c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c25e:	69ad      	ldr	r5, [r5, #24]
   1c260:	e7eb      	b.n	1c23a <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1c262:	692b      	ldr	r3, [r5, #16]
   1c264:	b11b      	cbz	r3, 1c26e <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c266:	4642      	mov	r2, r8
   1c268:	4631      	mov	r1, r6
   1c26a:	4620      	mov	r0, r4
   1c26c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c26e:	351c      	adds	r5, #28
   1c270:	e7e8      	b.n	1c244 <bt_conn_identity_resolved+0x20>
   1c272:	bf00      	nop
   1c274:	200308b4 	.word	0x200308b4
   1c278:	00032e5c 	.word	0x00032e5c
   1c27c:	00032e78 	.word	0x00032e78

0001c280 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   1c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1c282:	7a43      	ldrb	r3, [r0, #9]
{
   1c284:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1c286:	7283      	strb	r3, [r0, #10]
{
   1c288:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1c28a:	f011 fc79 	bl	2db80 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c28e:	4b0c      	ldr	r3, [pc, #48]	; (1c2c0 <bt_conn_security_changed+0x40>)
   1c290:	681d      	ldr	r5, [r3, #0]
   1c292:	b925      	cbnz	r5, 1c29e <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c294:	4d0b      	ldr	r5, [pc, #44]	; (1c2c4 <bt_conn_security_changed+0x44>)
   1c296:	4f0c      	ldr	r7, [pc, #48]	; (1c2c8 <bt_conn_security_changed+0x48>)
   1c298:	42bd      	cmp	r5, r7
   1c29a:	d308      	bcc.n	1c2ae <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1c29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   1c29e:	696b      	ldr	r3, [r5, #20]
   1c2a0:	b11b      	cbz	r3, 1c2aa <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   1c2a2:	4632      	mov	r2, r6
   1c2a4:	4620      	mov	r0, r4
   1c2a6:	7a61      	ldrb	r1, [r4, #9]
   1c2a8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c2aa:	69ad      	ldr	r5, [r5, #24]
   1c2ac:	e7f1      	b.n	1c292 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1c2ae:	696b      	ldr	r3, [r5, #20]
   1c2b0:	b11b      	cbz	r3, 1c2ba <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   1c2b2:	4632      	mov	r2, r6
   1c2b4:	4620      	mov	r0, r4
   1c2b6:	7a61      	ldrb	r1, [r4, #9]
   1c2b8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c2ba:	351c      	adds	r5, #28
   1c2bc:	e7ec      	b.n	1c298 <bt_conn_security_changed+0x18>
   1c2be:	bf00      	nop
   1c2c0:	200308b4 	.word	0x200308b4
   1c2c4:	00032e5c 	.word	0x00032e5c
   1c2c8:	00032e78 	.word	0x00032e78

0001c2cc <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1c2cc:	b538      	push	{r3, r4, r5, lr}
   1c2ce:	4605      	mov	r5, r0
   1c2d0:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1c2d2:	480b      	ldr	r0, [pc, #44]	; (1c300 <bt_conn_add_le+0x34>)
   1c2d4:	2101      	movs	r1, #1
   1c2d6:	f7ff fcaf 	bl	1bc38 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1c2da:	b180      	cbz	r0, 1c2fe <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   1c2dc:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c2de:	6823      	ldr	r3, [r4, #0]
   1c2e0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   1c2e4:	88a3      	ldrh	r3, [r4, #4]
   1c2e6:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   1c2ea:	79a3      	ldrb	r3, [r4, #6]
   1c2ec:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1c2f0:	2301      	movs	r3, #1
   1c2f2:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1c2f4:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1c2f6:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1c2f8:	4b02      	ldr	r3, [pc, #8]	; (1c304 <bt_conn_add_le+0x38>)
   1c2fa:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1c2fe:	bd38      	pop	{r3, r4, r5, pc}
   1c300:	20009fa8 	.word	0x20009fa8
   1c304:	00280018 	.word	0x00280018

0001c308 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1c308:	b570      	push	{r4, r5, r6, lr}
   1c30a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c30c:	480a      	ldr	r0, [pc, #40]	; (1c338 <bt_conn_lookup_addr_le+0x30>)
{
   1c30e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c310:	f011 fb0d 	bl	2d92e <bt_conn_ref>
   1c314:	4604      	mov	r4, r0

		if (!conn) {
   1c316:	b120      	cbz	r0, 1c322 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1c318:	7883      	ldrb	r3, [r0, #2]
   1c31a:	2b01      	cmp	r3, #1
   1c31c:	d004      	beq.n	1c328 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   1c31e:	f011 fb1a 	bl	2d956 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1c322:	2400      	movs	r4, #0
}
   1c324:	4620      	mov	r0, r4
   1c326:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1c328:	4632      	mov	r2, r6
   1c32a:	4629      	mov	r1, r5
   1c32c:	f011 fba0 	bl	2da70 <bt_conn_is_peer_addr_le>
   1c330:	2800      	cmp	r0, #0
   1c332:	d1f7      	bne.n	1c324 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1c334:	4620      	mov	r0, r4
   1c336:	e7f2      	b.n	1c31e <bt_conn_lookup_addr_le+0x16>
   1c338:	20009fa8 	.word	0x20009fa8

0001c33c <bt_conn_exists_le>:
{
   1c33c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1c33e:	f7ff ffe3 	bl	1c308 <bt_conn_lookup_addr_le>
	if (conn) {
   1c342:	4604      	mov	r4, r0
   1c344:	b1a8      	cbz	r0, 1c372 <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1c346:	7b43      	ldrb	r3, [r0, #13]
   1c348:	490b      	ldr	r1, [pc, #44]	; (1c378 <bt_conn_exists_le+0x3c>)
   1c34a:	2b08      	cmp	r3, #8
   1c34c:	bf96      	itet	ls
   1c34e:	4a0b      	ldrls	r2, [pc, #44]	; (1c37c <bt_conn_exists_le+0x40>)
   1c350:	4b0b      	ldrhi	r3, [pc, #44]	; (1c380 <bt_conn_exists_le+0x44>)
   1c352:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1c356:	2202      	movs	r2, #2
   1c358:	9303      	str	r3, [sp, #12]
   1c35a:	4b0a      	ldr	r3, [pc, #40]	; (1c384 <bt_conn_exists_le+0x48>)
   1c35c:	9302      	str	r3, [sp, #8]
   1c35e:	2300      	movs	r3, #0
   1c360:	4618      	mov	r0, r3
   1c362:	e9cd 3300 	strd	r3, r3, [sp]
   1c366:	f011 faa4 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1c36a:	4620      	mov	r0, r4
   1c36c:	f011 faf3 	bl	2d956 <bt_conn_unref>
		return true;
   1c370:	2001      	movs	r0, #1
}
   1c372:	b004      	add	sp, #16
   1c374:	bd10      	pop	{r4, pc}
   1c376:	bf00      	nop
   1c378:	00032ed0 	.word	0x00032ed0
   1c37c:	00033b44 	.word	0x00033b44
   1c380:	00037004 	.word	0x00037004
   1c384:	0003707b 	.word	0x0003707b

0001c388 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c38a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c38c:	480e      	ldr	r0, [pc, #56]	; (1c3c8 <bt_conn_lookup_state_le+0x40>)
{
   1c38e:	460e      	mov	r6, r1
   1c390:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c392:	f011 facc 	bl	2d92e <bt_conn_ref>

		if (!conn) {
   1c396:	4604      	mov	r4, r0
   1c398:	b120      	cbz	r0, 1c3a4 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1c39a:	7883      	ldrb	r3, [r0, #2]
   1c39c:	2b01      	cmp	r3, #1
   1c39e:	d003      	beq.n	1c3a8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1c3a0:	f011 fad9 	bl	2d956 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1c3a4:	2400      	movs	r4, #0
   1c3a6:	e00d      	b.n	1c3c4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1c3a8:	b136      	cbz	r6, 1c3b8 <bt_conn_lookup_state_le+0x30>
   1c3aa:	4632      	mov	r2, r6
   1c3ac:	4629      	mov	r1, r5
   1c3ae:	f011 fb5f 	bl	2da70 <bt_conn_is_peer_addr_le>
   1c3b2:	b908      	cbnz	r0, 1c3b8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1c3b4:	4620      	mov	r0, r4
   1c3b6:	e7f3      	b.n	1c3a0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1c3b8:	7b63      	ldrb	r3, [r4, #13]
   1c3ba:	42bb      	cmp	r3, r7
   1c3bc:	d1fa      	bne.n	1c3b4 <bt_conn_lookup_state_le+0x2c>
   1c3be:	7a23      	ldrb	r3, [r4, #8]
   1c3c0:	42ab      	cmp	r3, r5
   1c3c2:	d1f7      	bne.n	1c3b4 <bt_conn_lookup_state_le+0x2c>
}
   1c3c4:	4620      	mov	r0, r4
   1c3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c3c8:	20009fa8 	.word	0x20009fa8

0001c3cc <send_conn_le_param_update>:
{
   1c3cc:	b538      	push	{r3, r4, r5, lr}
   1c3ce:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1c3d0:	4608      	mov	r0, r1
{
   1c3d2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1c3d4:	f010 ffca 	bl	2d36c <bt_le_conn_params_valid>
   1c3d8:	b338      	cbz	r0, 1c42a <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1c3da:	4b15      	ldr	r3, [pc, #84]	; (1c430 <send_conn_le_param_update+0x64>)
   1c3dc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1c3e0:	0799      	lsls	r1, r3, #30
   1c3e2:	d407      	bmi.n	1c3f4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1c3e4:	78e3      	ldrb	r3, [r4, #3]
   1c3e6:	b173      	cbz	r3, 1c406 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1c3e8:	4629      	mov	r1, r5
   1c3ea:	4620      	mov	r0, r4
}
   1c3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1c3f0:	f000 bacc 	b.w	1c98c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1c3f4:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   1c3f8:	079a      	lsls	r2, r3, #30
   1c3fa:	d5f3      	bpl.n	1c3e4 <send_conn_le_param_update+0x18>
   1c3fc:	1d23      	adds	r3, r4, #4
   1c3fe:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1c402:	055b      	lsls	r3, r3, #21
   1c404:	d4ee      	bmi.n	1c3e4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1c406:	4629      	mov	r1, r5
   1c408:	4620      	mov	r0, r4
   1c40a:	f011 fb53 	bl	2dab4 <bt_conn_le_conn_update>
		if (rc == 0) {
   1c40e:	b958      	cbnz	r0, 1c428 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   1c410:	882b      	ldrh	r3, [r5, #0]
   1c412:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1c416:	886b      	ldrh	r3, [r5, #2]
   1c418:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1c41c:	88ab      	ldrh	r3, [r5, #4]
   1c41e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1c422:	88eb      	ldrh	r3, [r5, #6]
   1c424:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   1c428:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c42a:	f06f 0015 	mvn.w	r0, #21
   1c42e:	e7fb      	b.n	1c428 <send_conn_le_param_update+0x5c>
   1c430:	20008000 	.word	0x20008000

0001c434 <deferred_work>:
{
   1c434:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1c436:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1c43a:	4604      	mov	r4, r0
   1c43c:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1c43e:	f1a0 0758 	sub.w	r7, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1c442:	b9fb      	cbnz	r3, 1c484 <deferred_work+0x50>
		bt_l2cap_disconnected(conn);
   1c444:	4638      	mov	r0, r7
   1c446:	f011 fb83 	bl	2db50 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1c44a:	4b34      	ldr	r3, [pc, #208]	; (1c51c <deferred_work+0xe8>)
   1c44c:	681d      	ldr	r5, [r3, #0]
   1c44e:	b94d      	cbnz	r5, 1c464 <deferred_work+0x30>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c450:	4d33      	ldr	r5, [pc, #204]	; (1c520 <deferred_work+0xec>)
   1c452:	4e34      	ldr	r6, [pc, #208]	; (1c524 <deferred_work+0xf0>)
   1c454:	42b5      	cmp	r5, r6
   1c456:	d30d      	bcc.n	1c474 <deferred_work+0x40>
		bt_conn_unref(conn);
   1c458:	4638      	mov	r0, r7
}
   1c45a:	b007      	add	sp, #28
   1c45c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1c460:	f011 ba79 	b.w	2d956 <bt_conn_unref>
		if (cb->disconnected) {
   1c464:	686b      	ldr	r3, [r5, #4]
   1c466:	b11b      	cbz	r3, 1c470 <deferred_work+0x3c>
			cb->disconnected(conn, conn->err);
   1c468:	4638      	mov	r0, r7
   1c46a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1c46e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c470:	69ad      	ldr	r5, [r5, #24]
   1c472:	e7ec      	b.n	1c44e <deferred_work+0x1a>
		if (cb->disconnected) {
   1c474:	686b      	ldr	r3, [r5, #4]
   1c476:	b11b      	cbz	r3, 1c480 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
   1c478:	4638      	mov	r0, r7
   1c47a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1c47e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c480:	351c      	adds	r5, #28
   1c482:	e7e7      	b.n	1c454 <deferred_work+0x20>
	if (conn->type != BT_CONN_TYPE_LE) {
   1c484:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1c488:	2b01      	cmp	r3, #1
   1c48a:	d11f      	bne.n	1c4cc <deferred_work+0x98>
	if (atomic_test_and_clear_bit(conn->flags,
   1c48c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c490:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1c494:	4628      	mov	r0, r5
   1c496:	f011 fa01 	bl	2d89c <atomic_and>
   1c49a:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   1c49e:	d023      	beq.n	1c4e8 <deferred_work+0xb4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c4a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   1c4a2:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c4a4:	9304      	str	r3, [sp, #16]
   1c4a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   1c4a8:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c4aa:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   1c4ac:	f7ff ff8e 	bl	1c3cc <send_conn_le_param_update>
		if (!err) {
   1c4b0:	b970      	cbnz	r0, 1c4d0 <deferred_work+0x9c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c4b2:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1c4b6:	4628      	mov	r0, r5
   1c4b8:	f011 f9f0 	bl	2d89c <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c4bc:	e8d5 3fef 	ldaex	r3, [r5]
   1c4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c4c4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c4c8:	2a00      	cmp	r2, #0
   1c4ca:	d1f7      	bne.n	1c4bc <deferred_work+0x88>
}
   1c4cc:	b007      	add	sp, #28
   1c4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   1c4d0:	4b15      	ldr	r3, [pc, #84]	; (1c528 <deferred_work+0xf4>)
   1c4d2:	9003      	str	r0, [sp, #12]
   1c4d4:	9302      	str	r3, [sp, #8]
   1c4d6:	2300      	movs	r3, #0
   1c4d8:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   1c4dc:	2202      	movs	r2, #2
   1c4de:	4618      	mov	r0, r3
   1c4e0:	4912      	ldr	r1, [pc, #72]	; (1c52c <deferred_work+0xf8>)
   1c4e2:	f011 f9e6 	bl	2d8b2 <z_log_msg_runtime_create.constprop.0>
   1c4e6:	e7e9      	b.n	1c4bc <deferred_work+0x88>
		param = BT_LE_CONN_PARAM(
   1c4e8:	4a11      	ldr	r2, [pc, #68]	; (1c530 <deferred_work+0xfc>)
   1c4ea:	ab04      	add	r3, sp, #16
   1c4ec:	6810      	ldr	r0, [r2, #0]
   1c4ee:	6851      	ldr	r1, [r2, #4]
   1c4f0:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1c4f2:	4638      	mov	r0, r7
   1c4f4:	a904      	add	r1, sp, #16
   1c4f6:	f7ff ff69 	bl	1c3cc <send_conn_le_param_update>
		if (!err) {
   1c4fa:	b940      	cbnz	r0, 1c50e <deferred_work+0xda>
   1c4fc:	e8d5 3fef 	ldaex	r3, [r5]
   1c500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c504:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c508:	2a00      	cmp	r2, #0
   1c50a:	d0d7      	beq.n	1c4bc <deferred_work+0x88>
   1c50c:	e7f6      	b.n	1c4fc <deferred_work+0xc8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1c50e:	4b09      	ldr	r3, [pc, #36]	; (1c534 <deferred_work+0x100>)
   1c510:	9003      	str	r0, [sp, #12]
   1c512:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1c516:	9600      	str	r6, [sp, #0]
   1c518:	4633      	mov	r3, r6
   1c51a:	e7df      	b.n	1c4dc <deferred_work+0xa8>
   1c51c:	200308b4 	.word	0x200308b4
   1c520:	00032e5c 	.word	0x00032e5c
   1c524:	00032e78 	.word	0x00032e78
   1c528:	0003709e 	.word	0x0003709e
   1c52c:	00032ed0 	.word	0x00032ed0
   1c530:	000330a0 	.word	0x000330a0
   1c534:	000370c3 	.word	0x000370c3

0001c538 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1c538:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1c53a:	4801      	ldr	r0, [pc, #4]	; (1c540 <bt_conn_create_frag_timeout+0x8>)
   1c53c:	f7ff bdd6 	b.w	1c0ec <bt_conn_create_pdu_timeout>
   1c540:	20008f30 	.word	0x20008f30

0001c544 <create_frag>:
{
   1c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c548:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1c54a:	f04f 33ff 	mov.w	r3, #4294967295
   1c54e:	f04f 32ff 	mov.w	r2, #4294967295
   1c552:	2000      	movs	r0, #0
{
   1c554:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1c556:	f7ff ffef 	bl	1c538 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1c55a:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   1c55c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1c55e:	2b07      	cmp	r3, #7
   1c560:	f04f 0600 	mov.w	r6, #0
   1c564:	d005      	beq.n	1c572 <create_frag+0x2e>
		net_buf_unref(frag);
   1c566:	f003 ff9b 	bl	204a0 <net_buf_unref>
		return NULL;
   1c56a:	4635      	mov	r5, r6
}
   1c56c:	4628      	mov	r0, r5
   1c56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1c572:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   1c574:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   1c578:	4e0c      	ldr	r6, [pc, #48]	; (1c5ac <create_frag+0x68>)
   1c57a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1c57c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1c580:	f012 ff0b 	bl	2f39a <net_buf_simple_tailroom>
   1c584:	4580      	cmp	r8, r0
   1c586:	d20c      	bcs.n	1c5a2 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1c588:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c58c:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   1c590:	4632      	mov	r2, r6
   1c592:	4638      	mov	r0, r7
   1c594:	f012 fec3 	bl	2f31e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1c598:	4631      	mov	r1, r6
   1c59a:	4620      	mov	r0, r4
   1c59c:	f012 fee1 	bl	2f362 <net_buf_simple_pull>
   1c5a0:	e7e4      	b.n	1c56c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1c5a2:	4638      	mov	r0, r7
   1c5a4:	f012 fef9 	bl	2f39a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1c5a8:	b286      	uxth	r6, r0
   1c5aa:	e7ef      	b.n	1c58c <create_frag+0x48>
   1c5ac:	20008000 	.word	0x20008000

0001c5b0 <bt_conn_process_tx>:
{
   1c5b0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1c5b2:	7b43      	ldrb	r3, [r0, #13]
{
   1c5b4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1c5b6:	b95b      	cbnz	r3, 1c5d0 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c5b8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1c5bc:	3004      	adds	r0, #4
   1c5be:	f011 f96d 	bl	2d89c <atomic_and>
   1c5c2:	0643      	lsls	r3, r0, #25
   1c5c4:	d504      	bpl.n	1c5d0 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   1c5c6:	4620      	mov	r0, r4
}
   1c5c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1c5cc:	f011 b98c 	b.w	2d8e8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1c5d0:	2200      	movs	r2, #0
   1c5d2:	2300      	movs	r3, #0
   1c5d4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1c5d8:	f012 fe40 	bl	2f25c <net_buf_get>
	BT_ASSERT(buf);
   1c5dc:	4605      	mov	r5, r0
   1c5de:	b960      	cbnz	r0, 1c5fa <bt_conn_process_tx+0x4a>
   1c5e0:	f240 331a 	movw	r3, #794	; 0x31a
   1c5e4:	4a22      	ldr	r2, [pc, #136]	; (1c670 <bt_conn_process_tx+0xc0>)
   1c5e6:	4923      	ldr	r1, [pc, #140]	; (1c674 <bt_conn_process_tx+0xc4>)
   1c5e8:	4823      	ldr	r0, [pc, #140]	; (1c678 <bt_conn_process_tx+0xc8>)
   1c5ea:	f00e f8a7 	bl	2a73c <assert_print>
   1c5ee:	4040      	eors	r0, r0
   1c5f0:	f380 8811 	msr	BASEPRI, r0
   1c5f4:	f04f 0003 	mov.w	r0, #3
   1c5f8:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1c5fa:	4e20      	ldr	r6, [pc, #128]	; (1c67c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1c5fc:	8a2a      	ldrh	r2, [r5, #16]
   1c5fe:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1c602:	429a      	cmp	r2, r3
   1c604:	d807      	bhi.n	1c616 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1c606:	2300      	movs	r3, #0
   1c608:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1c60a:	4629      	mov	r1, r5
   1c60c:	4620      	mov	r0, r4
   1c60e:	f7ff fa77 	bl	1bb00 <send_frag>
	if (!send_buf(conn, buf)) {
   1c612:	b968      	cbnz	r0, 1c630 <bt_conn_process_tx+0x80>
   1c614:	e005      	b.n	1c622 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   1c616:	4629      	mov	r1, r5
   1c618:	4620      	mov	r0, r4
   1c61a:	f7ff ff93 	bl	1c544 <create_frag>
	if (!frag) {
   1c61e:	4601      	mov	r1, r0
   1c620:	b938      	cbnz	r0, 1c632 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   1c622:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1c624:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   1c626:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   1c628:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1c62a:	f003 ff39 	bl	204a0 <net_buf_unref>
		if (tx) {
   1c62e:	b9ce      	cbnz	r6, 1c664 <bt_conn_process_tx+0xb4>
}
   1c630:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1c632:	2301      	movs	r3, #1
   1c634:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1c636:	4620      	mov	r0, r4
   1c638:	f7ff fa62 	bl	1bb00 <send_frag>
   1c63c:	2800      	cmp	r0, #0
   1c63e:	d0f0      	beq.n	1c622 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   1c640:	8a2a      	ldrh	r2, [r5, #16]
   1c642:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1c646:	429a      	cmp	r2, r3
   1c648:	d802      	bhi.n	1c650 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   1c64a:	2300      	movs	r3, #0
   1c64c:	2203      	movs	r2, #3
   1c64e:	e7dc      	b.n	1c60a <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   1c650:	4629      	mov	r1, r5
   1c652:	4620      	mov	r0, r4
   1c654:	f7ff ff76 	bl	1c544 <create_frag>
		if (!frag) {
   1c658:	4601      	mov	r1, r0
   1c65a:	2800      	cmp	r0, #0
   1c65c:	d0e1      	beq.n	1c622 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1c65e:	2301      	movs	r3, #1
   1c660:	461a      	mov	r2, r3
   1c662:	e7e8      	b.n	1c636 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   1c664:	4631      	mov	r1, r6
   1c666:	4620      	mov	r0, r4
}
   1c668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   1c66c:	f7ff ba32 	b.w	1bad4 <conn_tx_destroy>
   1c670:	000370ed 	.word	0x000370ed
   1c674:	00037a5f 	.word	0x00037a5f
   1c678:	0003665a 	.word	0x0003665a
   1c67c:	20008000 	.word	0x20008000

0001c680 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1c680:	4b0b      	ldr	r3, [pc, #44]	; (1c6b0 <bt_conn_auth_cb_register+0x30>)
   1c682:	b158      	cbz	r0, 1c69c <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   1c684:	681a      	ldr	r2, [r3, #0]
   1c686:	b962      	cbnz	r2, 1c6a2 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1c688:	6902      	ldr	r2, [r0, #16]
   1c68a:	b93a      	cbnz	r2, 1c69c <bt_conn_auth_cb_register+0x1c>
   1c68c:	6802      	ldr	r2, [r0, #0]
   1c68e:	b95a      	cbnz	r2, 1c6a8 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1c690:	6842      	ldr	r2, [r0, #4]
   1c692:	b94a      	cbnz	r2, 1c6a8 <bt_conn_auth_cb_register+0x28>
   1c694:	6882      	ldr	r2, [r0, #8]
   1c696:	b93a      	cbnz	r2, 1c6a8 <bt_conn_auth_cb_register+0x28>
   1c698:	6942      	ldr	r2, [r0, #20]
   1c69a:	b92a      	cbnz	r2, 1c6a8 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1c69c:	6018      	str	r0, [r3, #0]
		return 0;
   1c69e:	2000      	movs	r0, #0
   1c6a0:	4770      	bx	lr
		return -EALREADY;
   1c6a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1c6a6:	4770      	bx	lr
		return -EINVAL;
   1c6a8:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   1c6ac:	4770      	bx	lr
   1c6ae:	bf00      	nop
   1c6b0:	200308c0 	.word	0x200308c0

0001c6b4 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   1c6b4:	b168      	cbz	r0, 1c6d2 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   1c6b6:	2300      	movs	r3, #0
   1c6b8:	60c3      	str	r3, [r0, #12]
	return list->tail;
   1c6ba:	4b07      	ldr	r3, [pc, #28]	; (1c6d8 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1c6bc:	f100 020c 	add.w	r2, r0, #12
   1c6c0:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1c6c2:	b919      	cbnz	r1, 1c6cc <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   1c6c4:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   1c6c8:	2000      	movs	r0, #0
   1c6ca:	4770      	bx	lr
	parent->next = child;
   1c6cc:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1c6ce:	605a      	str	r2, [r3, #4]
}
   1c6d0:	e7fa      	b.n	1c6c8 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   1c6d2:	f06f 0015 	mvn.w	r0, #21
}
   1c6d6:	4770      	bx	lr
   1c6d8:	200308b8 	.word	0x200308b8

0001c6dc <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1c6dc:	b910      	cbnz	r0, 1c6e4 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1c6de:	4802      	ldr	r0, [pc, #8]	; (1c6e8 <bt_conn_lookup_index+0xc>)
   1c6e0:	f011 b925 	b.w	2d92e <bt_conn_ref>
}
   1c6e4:	2000      	movs	r0, #0
   1c6e6:	4770      	bx	lr
   1c6e8:	20009fa8 	.word	0x20009fa8

0001c6ec <bt_conn_init>:

int bt_conn_init(void)
{
   1c6ec:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1c6ee:	480a      	ldr	r0, [pc, #40]	; (1c718 <bt_conn_init+0x2c>)
   1c6f0:	f014 fb9d 	bl	30e2e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1c6f4:	4909      	ldr	r1, [pc, #36]	; (1c71c <bt_conn_init+0x30>)
   1c6f6:	4808      	ldr	r0, [pc, #32]	; (1c718 <bt_conn_init+0x2c>)
   1c6f8:	f014 fba5 	bl	30e46 <k_queue_append>
   1c6fc:	4908      	ldr	r1, [pc, #32]	; (1c720 <bt_conn_init+0x34>)
   1c6fe:	4806      	ldr	r0, [pc, #24]	; (1c718 <bt_conn_init+0x2c>)
   1c700:	f014 fba1 	bl	30e46 <k_queue_append>
	}

	bt_att_init();
   1c704:	f001 f846 	bl	1d794 <bt_att_init>

	err = bt_smp_init();
   1c708:	f003 fc9e 	bl	20048 <bt_smp_init>
	if (err) {
   1c70c:	4604      	mov	r4, r0
   1c70e:	b908      	cbnz	r0, 1c714 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   1c710:	f011 fa81 	bl	2dc16 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1c714:	4620      	mov	r0, r4
   1c716:	bd10      	pop	{r4, pc}
   1c718:	20008e68 	.word	0x20008e68
   1c71c:	20030894 	.word	0x20030894
   1c720:	200308a4 	.word	0x200308a4

0001c724 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c724:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   1c726:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c728:	4605      	mov	r5, r0
   1c72a:	460f      	mov	r7, r1
   1c72c:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1c72e:	2104      	movs	r1, #4
   1c730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c734:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c736:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   1c738:	f7ff fcd8 	bl	1c0ec <bt_conn_create_pdu_timeout>
	if (!buf) {
   1c73c:	4604      	mov	r4, r0
   1c73e:	b960      	cbnz	r0, 1c75a <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1c740:	4b0a      	ldr	r3, [pc, #40]	; (1c76c <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   1c742:	2201      	movs	r2, #1
   1c744:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1c748:	4909      	ldr	r1, [pc, #36]	; (1c770 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   1c74a:	4603      	mov	r3, r0
   1c74c:	9503      	str	r5, [sp, #12]
   1c74e:	9000      	str	r0, [sp, #0]
   1c750:	f011 f9d9 	bl	2db06 <z_log_msg_runtime_create.constprop.0>
}
   1c754:	4620      	mov	r0, r4
   1c756:	b005      	add	sp, #20
   1c758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1c75a:	2104      	movs	r1, #4
   1c75c:	300c      	adds	r0, #12
   1c75e:	f012 fdd8 	bl	2f312 <net_buf_simple_add>
	hdr->code = code;
   1c762:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1c764:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1c766:	8046      	strh	r6, [r0, #2]
	return buf;
   1c768:	e7f4      	b.n	1c754 <l2cap_create_le_sig_pdu.constprop.0+0x30>
   1c76a:	bf00      	nop
   1c76c:	00037196 	.word	0x00037196
   1c770:	00032f18 	.word	0x00032f18

0001c774 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1c774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1c776:	4c0b      	ldr	r4, [pc, #44]	; (1c7a4 <l2cap_accept+0x30>)
   1c778:	2300      	movs	r3, #0
   1c77a:	6822      	ldr	r2, [r4, #0]
   1c77c:	b92a      	cbnz	r2, 1c78a <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   1c77e:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   1c780:	4b09      	ldr	r3, [pc, #36]	; (1c7a8 <l2cap_accept+0x34>)
   1c782:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   1c784:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1c786:	b004      	add	sp, #16
   1c788:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1c78a:	4a08      	ldr	r2, [pc, #32]	; (1c7ac <l2cap_accept+0x38>)
   1c78c:	9003      	str	r0, [sp, #12]
   1c78e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c792:	4618      	mov	r0, r3
   1c794:	2201      	movs	r2, #1
   1c796:	4906      	ldr	r1, [pc, #24]	; (1c7b0 <l2cap_accept+0x3c>)
   1c798:	9300      	str	r3, [sp, #0]
   1c79a:	f011 f9b4 	bl	2db06 <z_log_msg_runtime_create.constprop.0>
   1c79e:	f06f 000b 	mvn.w	r0, #11
   1c7a2:	e7f0      	b.n	1c786 <l2cap_accept+0x12>
   1c7a4:	200308c4 	.word	0x200308c4
   1c7a8:	00033b88 	.word	0x00033b88
   1c7ac:	000371be 	.word	0x000371be
   1c7b0:	00032f18 	.word	0x00032f18

0001c7b4 <bt_l2cap_connected>:
{
   1c7b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c7b6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c7b8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1c7ba:	4d1f      	ldr	r5, [pc, #124]	; (1c838 <bt_l2cap_connected+0x84>)
   1c7bc:	4f1f      	ldr	r7, [pc, #124]	; (1c83c <bt_l2cap_connected+0x88>)
   1c7be:	42bd      	cmp	r5, r7
   1c7c0:	d301      	bcc.n	1c7c6 <bt_l2cap_connected+0x12>
}
   1c7c2:	b003      	add	sp, #12
   1c7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1c7c6:	4620      	mov	r0, r4
   1c7c8:	686b      	ldr	r3, [r5, #4]
   1c7ca:	a901      	add	r1, sp, #4
   1c7cc:	4798      	blx	r3
   1c7ce:	2800      	cmp	r0, #0
   1c7d0:	db2c      	blt.n	1c82c <bt_l2cap_connected+0x78>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1c7d2:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1c7d4:	882a      	ldrh	r2, [r5, #0]
   1c7d6:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1c7d8:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1c7da:	68a8      	ldr	r0, [r5, #8]
   1c7dc:	f103 0210 	add.w	r2, r3, #16
   1c7e0:	e8d2 1fef 	ldaex	r1, [r2]
   1c7e4:	e8c2 6fec 	stlex	ip, r6, [r2]
   1c7e8:	f1bc 0f00 	cmp.w	ip, #0
   1c7ec:	d1f8      	bne.n	1c7e0 <bt_l2cap_connected+0x2c>
	parent->next = child;
   1c7ee:	609e      	str	r6, [r3, #8]
	return list->tail;
   1c7f0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1c7f2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1c7f6:	b9d9      	cbnz	r1, 1c830 <bt_l2cap_connected+0x7c>
	list->head = node;
   1c7f8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1c7fc:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1c7fe:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1c800:	9801      	ldr	r0, [sp, #4]
   1c802:	6843      	ldr	r3, [r0, #4]
   1c804:	681b      	ldr	r3, [r3, #0]
   1c806:	b103      	cbz	r3, 1c80a <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
   1c808:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c80a:	9b01      	ldr	r3, [sp, #4]
   1c80c:	3310      	adds	r3, #16
   1c80e:	e8d3 1fef 	ldaex	r1, [r3]
   1c812:	f041 0101 	orr.w	r1, r1, #1
   1c816:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1c81a:	2a00      	cmp	r2, #0
   1c81c:	d1f7      	bne.n	1c80e <bt_l2cap_connected+0x5a>
		if (chan->ops->status) {
   1c81e:	9801      	ldr	r0, [sp, #4]
   1c820:	6843      	ldr	r3, [r0, #4]
   1c822:	69db      	ldr	r3, [r3, #28]
   1c824:	b113      	cbz	r3, 1c82c <bt_l2cap_connected+0x78>
			chan->ops->status(chan, chan->status);
   1c826:	f100 0110 	add.w	r1, r0, #16
   1c82a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1c82c:	350c      	adds	r5, #12
   1c82e:	e7c6      	b.n	1c7be <bt_l2cap_connected+0xa>
	parent->next = child;
   1c830:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1c832:	6562      	str	r2, [r4, #84]	; 0x54
}
   1c834:	e7e2      	b.n	1c7fc <bt_l2cap_connected+0x48>
   1c836:	bf00      	nop
   1c838:	00032e38 	.word	0x00032e38
   1c83c:	00032e5c 	.word	0x00032e5c

0001c840 <l2cap_recv>:
{
   1c840:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   1c842:	8a0b      	ldrh	r3, [r1, #16]
{
   1c844:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1c846:	2b03      	cmp	r3, #3
{
   1c848:	460c      	mov	r4, r1
   1c84a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1c84c:	d803      	bhi.n	1c856 <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   1c84e:	4b2d      	ldr	r3, [pc, #180]	; (1c904 <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   1c850:	9302      	str	r3, [sp, #8]
   1c852:	2300      	movs	r3, #0
   1c854:	e01c      	b.n	1c890 <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   1c856:	2104      	movs	r1, #4
   1c858:	f104 000c 	add.w	r0, r4, #12
   1c85c:	f012 fd89 	bl	2f372 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1c860:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   1c862:	8842      	ldrh	r2, [r0, #2]
   1c864:	4605      	mov	r5, r0
	if (buf->len != len) {
   1c866:	429a      	cmp	r2, r3
   1c868:	d00e      	beq.n	1c888 <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1c86a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1c86e:	4b26      	ldr	r3, [pc, #152]	; (1c908 <l2cap_recv+0xc8>)
   1c870:	2201      	movs	r2, #1
   1c872:	9302      	str	r3, [sp, #8]
   1c874:	2300      	movs	r3, #0
   1c876:	4925      	ldr	r1, [pc, #148]	; (1c90c <l2cap_recv+0xcc>)
   1c878:	4618      	mov	r0, r3
   1c87a:	e9cd 3300 	strd	r3, r3, [sp]
   1c87e:	f011 f942 	bl	2db06 <z_log_msg_runtime_create.constprop.0>
}
   1c882:	2000      	movs	r0, #0
   1c884:	b006      	add	sp, #24
   1c886:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   1c888:	7843      	ldrb	r3, [r0, #1]
   1c88a:	b94b      	cbnz	r3, 1c8a0 <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1c88c:	4a20      	ldr	r2, [pc, #128]	; (1c910 <l2cap_recv+0xd0>)
   1c88e:	9202      	str	r2, [sp, #8]
   1c890:	2201      	movs	r2, #1
   1c892:	4618      	mov	r0, r3
   1c894:	e9cd 3300 	strd	r3, r3, [sp]
   1c898:	491c      	ldr	r1, [pc, #112]	; (1c90c <l2cap_recv+0xcc>)
   1c89a:	f011 f934 	bl	2db06 <z_log_msg_runtime_create.constprop.0>
		return 0;
   1c89e:	e7f0      	b.n	1c882 <l2cap_recv+0x42>
	switch (hdr->code) {
   1c8a0:	7803      	ldrb	r3, [r0, #0]
   1c8a2:	2b01      	cmp	r3, #1
   1c8a4:	d0ed      	beq.n	1c882 <l2cap_recv+0x42>
   1c8a6:	2b13      	cmp	r3, #19
   1c8a8:	d103      	bne.n	1c8b2 <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   1c8aa:	2a01      	cmp	r2, #1
   1c8ac:	d8e9      	bhi.n	1c882 <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   1c8ae:	4b19      	ldr	r3, [pc, #100]	; (1c914 <l2cap_recv+0xd4>)
   1c8b0:	e7ce      	b.n	1c850 <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1c8b2:	2400      	movs	r4, #0
	switch (hdr->code) {
   1c8b4:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1c8b6:	4b18      	ldr	r3, [pc, #96]	; (1c918 <l2cap_recv+0xd8>)
   1c8b8:	2202      	movs	r2, #2
   1c8ba:	4620      	mov	r0, r4
   1c8bc:	4913      	ldr	r1, [pc, #76]	; (1c90c <l2cap_recv+0xcc>)
   1c8be:	9302      	str	r3, [sp, #8]
   1c8c0:	e9cd 4400 	strd	r4, r4, [sp]
   1c8c4:	4623      	mov	r3, r4
   1c8c6:	f011 f91e 	bl	2db06 <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c8ca:	7869      	ldrb	r1, [r5, #1]
   1c8cc:	2202      	movs	r2, #2
   1c8ce:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1c8d0:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c8d2:	f7ff ff27 	bl	1c724 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c8d6:	4605      	mov	r5, r0
   1c8d8:	2800      	cmp	r0, #0
   1c8da:	d0d2      	beq.n	1c882 <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   1c8dc:	2102      	movs	r1, #2
   1c8de:	300c      	adds	r0, #12
   1c8e0:	f012 fd17 	bl	2f312 <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1c8e4:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   1c8e6:	7004      	strb	r4, [r0, #0]
   1c8e8:	7044      	strb	r4, [r0, #1]
   1c8ea:	462a      	mov	r2, r5
   1c8ec:	2105      	movs	r1, #5
   1c8ee:	4630      	mov	r0, r6
   1c8f0:	9400      	str	r4, [sp, #0]
   1c8f2:	f011 f965 	bl	2dbc0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1c8f6:	2800      	cmp	r0, #0
   1c8f8:	d0c3      	beq.n	1c882 <l2cap_recv+0x42>
		net_buf_unref(buf);
   1c8fa:	4628      	mov	r0, r5
   1c8fc:	f003 fdd0 	bl	204a0 <net_buf_unref>
   1c900:	e7bf      	b.n	1c882 <l2cap_recv+0x42>
   1c902:	bf00      	nop
   1c904:	000371e5 	.word	0x000371e5
   1c908:	00037203 	.word	0x00037203
   1c90c:	00032f18 	.word	0x00032f18
   1c910:	00037224 	.word	0x00037224
   1c914:	00037245 	.word	0x00037245
   1c918:	00037261 	.word	0x00037261

0001c91c <bt_l2cap_recv>:
{
   1c91c:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1c91e:	8a0b      	ldrh	r3, [r1, #16]
{
   1c920:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1c922:	2b03      	cmp	r3, #3
{
   1c924:	460c      	mov	r4, r1
   1c926:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1c928:	d80f      	bhi.n	1c94a <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   1c92a:	4b15      	ldr	r3, [pc, #84]	; (1c980 <bt_l2cap_recv+0x64>)
   1c92c:	2201      	movs	r2, #1
   1c92e:	9302      	str	r3, [sp, #8]
   1c930:	2300      	movs	r3, #0
   1c932:	4914      	ldr	r1, [pc, #80]	; (1c984 <bt_l2cap_recv+0x68>)
   1c934:	4618      	mov	r0, r3
   1c936:	e9cd 3300 	strd	r3, r3, [sp]
   1c93a:	f011 f8e4 	bl	2db06 <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   1c93e:	4620      	mov	r0, r4
}
   1c940:	b005      	add	sp, #20
   1c942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   1c946:	f003 bdab 	b.w	204a0 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1c94a:	2104      	movs	r1, #4
   1c94c:	f104 000c 	add.w	r0, r4, #12
   1c950:	f012 fd0f 	bl	2f372 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1c954:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1c956:	4628      	mov	r0, r5
   1c958:	f011 f954 	bl	2dc04 <bt_l2cap_le_lookup_rx_cid>
   1c95c:	4603      	mov	r3, r0
	if (!chan) {
   1c95e:	b948      	cbnz	r0, 1c974 <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1c960:	4a09      	ldr	r2, [pc, #36]	; (1c988 <bt_l2cap_recv+0x6c>)
   1c962:	9103      	str	r1, [sp, #12]
   1c964:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1c968:	4906      	ldr	r1, [pc, #24]	; (1c984 <bt_l2cap_recv+0x68>)
   1c96a:	2202      	movs	r2, #2
   1c96c:	9000      	str	r0, [sp, #0]
   1c96e:	f011 f8ca 	bl	2db06 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1c972:	e7e4      	b.n	1c93e <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   1c974:	6843      	ldr	r3, [r0, #4]
   1c976:	4621      	mov	r1, r4
   1c978:	695b      	ldr	r3, [r3, #20]
   1c97a:	4798      	blx	r3
   1c97c:	e7df      	b.n	1c93e <bt_l2cap_recv+0x22>
   1c97e:	bf00      	nop
   1c980:	00037289 	.word	0x00037289
   1c984:	00032f18 	.word	0x00032f18
   1c988:	000372a6 	.word	0x000372a6

0001c98c <bt_l2cap_update_conn_param>:
{
   1c98c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1c98e:	4b17      	ldr	r3, [pc, #92]	; (1c9ec <bt_l2cap_update_conn_param+0x60>)
{
   1c990:	460e      	mov	r6, r1
	ident++;
   1c992:	7819      	ldrb	r1, [r3, #0]
{
   1c994:	4605      	mov	r5, r0
	ident++;
   1c996:	3101      	adds	r1, #1
   1c998:	b2c9      	uxtb	r1, r1
   1c99a:	2901      	cmp	r1, #1
   1c99c:	bf38      	it	cc
   1c99e:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1c9a0:	2208      	movs	r2, #8
   1c9a2:	2012      	movs	r0, #18
	ident++;
   1c9a4:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1c9a6:	f7ff febd 	bl	1c724 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c9aa:	4604      	mov	r4, r0
   1c9ac:	b1d0      	cbz	r0, 1c9e4 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1c9ae:	2108      	movs	r1, #8
   1c9b0:	300c      	adds	r0, #12
   1c9b2:	f012 fcae 	bl	2f312 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1c9b6:	8833      	ldrh	r3, [r6, #0]
   1c9b8:	4622      	mov	r2, r4
   1c9ba:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1c9bc:	8873      	ldrh	r3, [r6, #2]
   1c9be:	2105      	movs	r1, #5
   1c9c0:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1c9c2:	88b3      	ldrh	r3, [r6, #4]
   1c9c4:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1c9c6:	88f3      	ldrh	r3, [r6, #6]
   1c9c8:	80c3      	strh	r3, [r0, #6]
   1c9ca:	2300      	movs	r3, #0
   1c9cc:	4628      	mov	r0, r5
   1c9ce:	9300      	str	r3, [sp, #0]
   1c9d0:	f011 f8f6 	bl	2dbc0 <bt_l2cap_send_cb>
	if (err) {
   1c9d4:	4605      	mov	r5, r0
   1c9d6:	b110      	cbz	r0, 1c9de <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   1c9d8:	4620      	mov	r0, r4
   1c9da:	f003 fd61 	bl	204a0 <net_buf_unref>
}
   1c9de:	4628      	mov	r0, r5
   1c9e0:	b002      	add	sp, #8
   1c9e2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1c9e4:	f06f 050b 	mvn.w	r5, #11
   1c9e8:	e7f9      	b.n	1c9de <bt_l2cap_update_conn_param+0x52>
   1c9ea:	bf00      	nop
   1c9ec:	200319dc 	.word	0x200319dc

0001c9f0 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1c9f0:	2823      	cmp	r0, #35	; 0x23
   1c9f2:	d81f      	bhi.n	1ca34 <att_op_get_type+0x44>
   1c9f4:	281a      	cmp	r0, #26
   1c9f6:	d804      	bhi.n	1ca02 <att_op_get_type+0x12>
   1c9f8:	1e43      	subs	r3, r0, #1
   1c9fa:	2b18      	cmp	r3, #24
   1c9fc:	d90e      	bls.n	1ca1c <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1c9fe:	2006      	movs	r0, #6
   1ca00:	4770      	bx	lr
	switch (op) {
   1ca02:	f1a0 031b 	sub.w	r3, r0, #27
   1ca06:	2b08      	cmp	r3, #8
   1ca08:	d81e      	bhi.n	1ca48 <att_op_get_type+0x58>
   1ca0a:	e8df f003 	tbb	[pc, r3]
   1ca0e:	1d05      	.short	0x1d05
   1ca10:	191d231b 	.word	0x191d231b
   1ca14:	1d25      	.short	0x1d25
   1ca16:	05          	.byte	0x05
   1ca17:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1ca18:	2003      	movs	r0, #3
   1ca1a:	4770      	bx	lr
   1ca1c:	2301      	movs	r3, #1
	switch (op) {
   1ca1e:	4a0f      	ldr	r2, [pc, #60]	; (1ca5c <att_op_get_type+0x6c>)
   1ca20:	4083      	lsls	r3, r0
   1ca22:	401a      	ands	r2, r3
   1ca24:	b9c2      	cbnz	r2, 1ca58 <att_op_get_type+0x68>
   1ca26:	4a0e      	ldr	r2, [pc, #56]	; (1ca60 <att_op_get_type+0x70>)
   1ca28:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1ca2a:	2a00      	cmp	r2, #0
   1ca2c:	bf14      	ite	ne
   1ca2e:	2001      	movne	r0, #1
   1ca30:	2006      	moveq	r0, #6
   1ca32:	4770      	bx	lr
	switch (op) {
   1ca34:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ca38:	2b52      	cmp	r3, #82	; 0x52
   1ca3a:	d105      	bne.n	1ca48 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1ca3c:	2000      	movs	r0, #0
}
   1ca3e:	4770      	bx	lr
		return ATT_REQUEST;
   1ca40:	2001      	movs	r0, #1
   1ca42:	4770      	bx	lr
		return ATT_INDICATION;
   1ca44:	2005      	movs	r0, #5
   1ca46:	4770      	bx	lr
		return ATT_COMMAND;
   1ca48:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ca4c:	bf0c      	ite	eq
   1ca4e:	2006      	moveq	r0, #6
   1ca50:	2000      	movne	r0, #0
   1ca52:	4770      	bx	lr
	switch (op) {
   1ca54:	2004      	movs	r0, #4
   1ca56:	4770      	bx	lr
		return ATT_RESPONSE;
   1ca58:	2002      	movs	r0, #2
   1ca5a:	4770      	bx	lr
   1ca5c:	028aaaaa 	.word	0x028aaaaa
   1ca60:	01455554 	.word	0x01455554

0001ca64 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1ca64:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1ca66:	3804      	subs	r0, #4
   1ca68:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1ca6a:	a901      	add	r1, sp, #4
   1ca6c:	4802      	ldr	r0, [pc, #8]	; (1ca78 <bt_att_released+0x14>)
   1ca6e:	f014 f921 	bl	30cb4 <k_mem_slab_free>
}
   1ca72:	b003      	add	sp, #12
   1ca74:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca78:	20008b54 	.word	0x20008b54

0001ca7c <tx_meta_data_free>:
{
   1ca7c:	b510      	push	{r4, lr}
   1ca7e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1ca80:	2100      	movs	r1, #0
   1ca82:	2214      	movs	r2, #20
   1ca84:	f014 fe7d 	bl	31782 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1ca88:	4621      	mov	r1, r4
}
   1ca8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1ca8e:	4801      	ldr	r0, [pc, #4]	; (1ca94 <tx_meta_data_free+0x18>)
   1ca90:	f014 b9d9 	b.w	30e46 <k_queue_append>
   1ca94:	20008e50 	.word	0x20008e50

0001ca98 <find_type_cb>:
{
   1ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ca9c:	f642 0301 	movw	r3, #10241	; 0x2801
   1caa0:	2500      	movs	r5, #0
{
   1caa2:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1caa4:	f8d2 9000 	ldr.w	r9, [r2]
{
   1caa8:	4607      	mov	r7, r0
   1caaa:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1caac:	6800      	ldr	r0, [r0, #0]
   1caae:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   1cab0:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   1cab4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cab6:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1caba:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1cabe:	f010 fb2c 	bl	2d11a <bt_uuid_cmp>
   1cac2:	2800      	cmp	r0, #0
   1cac4:	d067      	beq.n	1cb96 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1cac6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1caca:	6838      	ldr	r0, [r7, #0]
   1cacc:	a90d      	add	r1, sp, #52	; 0x34
   1cace:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1cad2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1cad6:	f010 fb20 	bl	2d11a <bt_uuid_cmp>
   1cada:	b138      	cbz	r0, 1caec <find_type_cb+0x54>
		if (data->group &&
   1cadc:	68a3      	ldr	r3, [r4, #8]
   1cade:	b11b      	cbz	r3, 1cae8 <find_type_cb+0x50>
   1cae0:	885a      	ldrh	r2, [r3, #2]
   1cae2:	42b2      	cmp	r2, r6
   1cae4:	d200      	bcs.n	1cae8 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cae6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1cae8:	2001      	movs	r0, #1
   1caea:	e009      	b.n	1cb00 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1caec:	6861      	ldr	r1, [r4, #4]
   1caee:	4608      	mov	r0, r1
   1caf0:	f011 f89c 	bl	2dc2c <net_buf_frags_len>
   1caf4:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1caf8:	1a1b      	subs	r3, r3, r0
   1cafa:	2b03      	cmp	r3, #3
   1cafc:	d803      	bhi.n	1cb06 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1cafe:	2000      	movs	r0, #0
}
   1cb00:	b013      	add	sp, #76	; 0x4c
   1cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1cb06:	4608      	mov	r0, r1
   1cb08:	f012 fbe1 	bl	2f2ce <net_buf_frag_last>
   1cb0c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1cb0e:	6860      	ldr	r0, [r4, #4]
   1cb10:	f011 f88c 	bl	2dc2c <net_buf_frags_len>
   1cb14:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1cb18:	f105 0b0c 	add.w	fp, r5, #12
   1cb1c:	ebaa 0a00 	sub.w	sl, sl, r0
   1cb20:	4658      	mov	r0, fp
   1cb22:	f012 fc3a 	bl	2f39a <net_buf_simple_tailroom>
   1cb26:	4582      	cmp	sl, r0
   1cb28:	d238      	bcs.n	1cb9c <find_type_cb+0x104>
   1cb2a:	6860      	ldr	r0, [r4, #4]
   1cb2c:	f011 f87e 	bl	2dc2c <net_buf_frags_len>
   1cb30:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1cb34:	1a18      	subs	r0, r3, r0
	if (!len) {
   1cb36:	b970      	cbnz	r0, 1cb56 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1cb38:	6863      	ldr	r3, [r4, #4]
   1cb3a:	7a98      	ldrb	r0, [r3, #10]
   1cb3c:	f003 fbee 	bl	2031c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1cb40:	2200      	movs	r2, #0
   1cb42:	2300      	movs	r3, #0
   1cb44:	f012 fb85 	bl	2f252 <net_buf_alloc_fixed>
		if (!frag) {
   1cb48:	4605      	mov	r5, r0
   1cb4a:	2800      	cmp	r0, #0
   1cb4c:	d0d7      	beq.n	1cafe <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1cb4e:	4601      	mov	r1, r0
   1cb50:	6860      	ldr	r0, [r4, #4]
   1cb52:	f012 fbcd 	bl	2f2f0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1cb56:	2300      	movs	r3, #0
   1cb58:	9300      	str	r3, [sp, #0]
   1cb5a:	2310      	movs	r3, #16
   1cb5c:	4639      	mov	r1, r7
   1cb5e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1cb62:	4640      	mov	r0, r8
   1cb64:	eb0d 0203 	add.w	r2, sp, r3
   1cb68:	47c8      	blx	r9
	if (read < 0) {
   1cb6a:	1e07      	subs	r7, r0, #0
   1cb6c:	db13      	blt.n	1cb96 <find_type_cb+0xfe>
	if (read != data->value_len) {
   1cb6e:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1cb70:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1cb72:	42ba      	cmp	r2, r7
   1cb74:	d031      	beq.n	1cbda <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1cb76:	4601      	mov	r1, r0
   1cb78:	a80d      	add	r0, sp, #52	; 0x34
   1cb7a:	f010 fafc 	bl	2d176 <bt_uuid_create>
   1cb7e:	4603      	mov	r3, r0
   1cb80:	b980      	cbnz	r0, 1cba4 <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1cb82:	7c22      	ldrb	r2, [r4, #16]
   1cb84:	9203      	str	r2, [sp, #12]
   1cb86:	4a17      	ldr	r2, [pc, #92]	; (1cbe4 <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   1cb88:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1cb8c:	4916      	ldr	r1, [pc, #88]	; (1cbe8 <find_type_cb+0x150>)
   1cb8e:	2202      	movs	r2, #2
   1cb90:	9300      	str	r3, [sp, #0]
   1cb92:	f011 f93a 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   1cb96:	2300      	movs	r3, #0
   1cb98:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1cb9a:	e7a5      	b.n	1cae8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1cb9c:	4658      	mov	r0, fp
   1cb9e:	f012 fbfc 	bl	2f39a <net_buf_simple_tailroom>
   1cba2:	e7c8      	b.n	1cb36 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1cba4:	b2fa      	uxtb	r2, r7
   1cba6:	a904      	add	r1, sp, #16
   1cba8:	a808      	add	r0, sp, #32
   1cbaa:	f010 fae4 	bl	2d176 <bt_uuid_create>
   1cbae:	4603      	mov	r3, r0
   1cbb0:	b910      	cbnz	r0, 1cbb8 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   1cbb2:	4a0e      	ldr	r2, [pc, #56]	; (1cbec <find_type_cb+0x154>)
   1cbb4:	9703      	str	r7, [sp, #12]
   1cbb6:	e7e7      	b.n	1cb88 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1cbb8:	a908      	add	r1, sp, #32
   1cbba:	a80d      	add	r0, sp, #52	; 0x34
   1cbbc:	f010 faad 	bl	2d11a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1cbc0:	2800      	cmp	r0, #0
   1cbc2:	d1e8      	bne.n	1cb96 <find_type_cb+0xfe>
	data->err = 0x00;
   1cbc4:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1cbc6:	2104      	movs	r1, #4
   1cbc8:	7463      	strb	r3, [r4, #17]
   1cbca:	f105 000c 	add.w	r0, r5, #12
   1cbce:	f012 fba0 	bl	2f312 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1cbd2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1cbd4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cbd6:	68a3      	ldr	r3, [r4, #8]
   1cbd8:	e785      	b.n	1cae6 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   1cbda:	a904      	add	r1, sp, #16
   1cbdc:	f014 fd87 	bl	316ee <memcmp>
   1cbe0:	e7ee      	b.n	1cbc0 <find_type_cb+0x128>
   1cbe2:	bf00      	nop
   1cbe4:	000372db 	.word	0x000372db
   1cbe8:	00032ec8 	.word	0x00032ec8
   1cbec:	000372fa 	.word	0x000372fa

0001cbf0 <chan_send>:
{
   1cbf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cbf4:	4606      	mov	r6, r0
   1cbf6:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1cbf8:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   1cbfc:	68cb      	ldr	r3, [r1, #12]
{
   1cbfe:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1cc00:	2102      	movs	r1, #2
   1cc02:	3090      	adds	r0, #144	; 0x90
   1cc04:	f011 f82c 	bl	2dc60 <atomic_test_bit>
   1cc08:	2800      	cmp	r0, #0
   1cc0a:	d044      	beq.n	1cc96 <chan_send+0xa6>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1cc0c:	781b      	ldrb	r3, [r3, #0]
   1cc0e:	2bd2      	cmp	r3, #210	; 0xd2
   1cc10:	d11a      	bne.n	1cc48 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1cc12:	6833      	ldr	r3, [r6, #0]
   1cc14:	4621      	mov	r1, r4
   1cc16:	6818      	ldr	r0, [r3, #0]
   1cc18:	f012 f9b9 	bl	2ef8e <bt_smp_sign>
		if (err) {
   1cc1c:	4605      	mov	r5, r0
   1cc1e:	b198      	cbz	r0, 1cc48 <chan_send+0x58>
			LOG_ERR("Error signing data");
   1cc20:	4b1e      	ldr	r3, [pc, #120]	; (1cc9c <chan_send+0xac>)
   1cc22:	2201      	movs	r2, #1
   1cc24:	9302      	str	r3, [sp, #8]
   1cc26:	2300      	movs	r3, #0
   1cc28:	491d      	ldr	r1, [pc, #116]	; (1cca0 <chan_send+0xb0>)
   1cc2a:	4618      	mov	r0, r3
   1cc2c:	e9cd 3300 	strd	r3, r3, [sp]
   1cc30:	f011 f8eb 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1cc34:	69a0      	ldr	r0, [r4, #24]
   1cc36:	f7ff ff21 	bl	1ca7c <tx_meta_data_free>
			net_buf_unref(buf);
   1cc3a:	4620      	mov	r0, r4
   1cc3c:	f003 fc30 	bl	204a0 <net_buf_unref>
}
   1cc40:	4628      	mov	r0, r5
   1cc42:	b005      	add	sp, #20
   1cc44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1cc48:	f104 000c 	add.w	r0, r4, #12
   1cc4c:	f012 fba1 	bl	2f392 <net_buf_simple_headroom>
	state->len = buf->len;
   1cc50:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   1cc54:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cc58:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   1cc5a:	4607      	mov	r7, r0
   1cc5c:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cc5e:	68e3      	ldr	r3, [r4, #12]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cc60:	2104      	movs	r1, #4
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cc62:	7818      	ldrb	r0, [r3, #0]
   1cc64:	f7ff fec4 	bl	1c9f0 <att_op_get_type>
	switch (op_type) {
   1cc68:	2805      	cmp	r0, #5
   1cc6a:	bf98      	it	ls
   1cc6c:	4b0d      	ldrls	r3, [pc, #52]	; (1cca4 <chan_send+0xb4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cc6e:	4622      	mov	r2, r4
   1cc70:	bf94      	ite	ls
   1cc72:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cc76:	4b0c      	ldrhi	r3, [pc, #48]	; (1cca8 <chan_send+0xb8>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cc78:	4628      	mov	r0, r5
   1cc7a:	f8cd 9000 	str.w	r9, [sp]
   1cc7e:	f010 ff9f 	bl	2dbc0 <bt_l2cap_send_cb>
	if (err) {
   1cc82:	4605      	mov	r5, r0
   1cc84:	2800      	cmp	r0, #0
   1cc86:	d0db      	beq.n	1cc40 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1cc88:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1cc8a:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1cc8e:	fa13 f787 	uxtah	r7, r3, r7
   1cc92:	60e7      	str	r7, [r4, #12]
}
   1cc94:	e7d4      	b.n	1cc40 <chan_send+0x50>
		return -EINVAL;
   1cc96:	f06f 0515 	mvn.w	r5, #21
   1cc9a:	e7d1      	b.n	1cc40 <chan_send+0x50>
   1cc9c:	00037319 	.word	0x00037319
   1cca0:	00032ec8 	.word	0x00032ec8
   1cca4:	00033bb0 	.word	0x00033bb0
   1cca8:	0002e207 	.word	0x0002e207

0001ccac <att_get>:
{
   1ccac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ccae:	7b43      	ldrb	r3, [r0, #13]
   1ccb0:	2b07      	cmp	r3, #7
   1ccb2:	d00d      	beq.n	1ccd0 <att_get+0x24>
		LOG_WRN("Not connected");
   1ccb4:	4b0e      	ldr	r3, [pc, #56]	; (1ccf0 <att_get+0x44>)
   1ccb6:	2202      	movs	r2, #2
   1ccb8:	9302      	str	r3, [sp, #8]
   1ccba:	2300      	movs	r3, #0
   1ccbc:	4618      	mov	r0, r3
   1ccbe:	e9cd 3300 	strd	r3, r3, [sp]
   1ccc2:	490c      	ldr	r1, [pc, #48]	; (1ccf4 <att_get+0x48>)
		LOG_ERR("Unable to find ATT channel");
   1ccc4:	f011 f8a1 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1ccc8:	2000      	movs	r0, #0
}
   1ccca:	b005      	add	sp, #20
   1cccc:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1ccd0:	2104      	movs	r1, #4
   1ccd2:	f010 ff97 	bl	2dc04 <bt_l2cap_le_lookup_rx_cid>
   1ccd6:	4603      	mov	r3, r0
	if (!chan) {
   1ccd8:	b930      	cbnz	r0, 1cce8 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   1ccda:	4a07      	ldr	r2, [pc, #28]	; (1ccf8 <att_get+0x4c>)
   1ccdc:	4905      	ldr	r1, [pc, #20]	; (1ccf4 <att_get+0x48>)
   1ccde:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1cce2:	9000      	str	r0, [sp, #0]
   1cce4:	2201      	movs	r2, #1
   1cce6:	e7ed      	b.n	1ccc4 <att_get+0x18>
	return att_chan->att;
   1cce8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1ccec:	e7ed      	b.n	1ccca <att_get+0x1e>
   1ccee:	bf00      	nop
   1ccf0:	0003732c 	.word	0x0003732c
   1ccf4:	00032ec8 	.word	0x00032ec8
   1ccf8:	0003733a 	.word	0x0003733a

0001ccfc <bt_att_connected>:
{
   1ccfc:	b510      	push	{r4, lr}
   1ccfe:	4604      	mov	r4, r0
   1cd00:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1cd04:	e8d3 1fef 	ldaex	r1, [r3]
   1cd08:	f041 0104 	orr.w	r1, r1, #4
   1cd0c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cd10:	2a00      	cmp	r2, #0
   1cd12:	d1f7      	bne.n	1cd04 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1cd14:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   1cd16:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1cd18:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1cd1a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1cd1c:	f010 ffe2 	bl	2dce4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1cd20:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1cd24:	4903      	ldr	r1, [pc, #12]	; (1cd34 <bt_att_connected+0x38>)
   1cd26:	f014 f969 	bl	30ffc <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1cd2a:	6820      	ldr	r0, [r4, #0]
}
   1cd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1cd30:	f001 bce4 	b.w	1e6fc <bt_gatt_connected>
   1cd34:	0001d991 	.word	0x0001d991

0001cd38 <read_group_cb>:
{
   1cd38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1cd3c:	f04f 0800 	mov.w	r8, #0
   1cd40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1cd44:	4605      	mov	r5, r0
   1cd46:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1cd48:	6800      	ldr	r0, [r0, #0]
   1cd4a:	a902      	add	r1, sp, #8
{
   1cd4c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1cd4e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1cd50:	f88d 8008 	strb.w	r8, [sp, #8]
   1cd54:	f8ad 300a 	strh.w	r3, [sp, #10]
   1cd58:	f010 f9df 	bl	2d11a <bt_uuid_cmp>
   1cd5c:	b1a0      	cbz	r0, 1cd88 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cd5e:	f642 0301 	movw	r3, #10241	; 0x2801
   1cd62:	6828      	ldr	r0, [r5, #0]
   1cd64:	a903      	add	r1, sp, #12
   1cd66:	f88d 800c 	strb.w	r8, [sp, #12]
   1cd6a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1cd6e:	f010 f9d4 	bl	2d11a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1cd72:	b148      	cbz	r0, 1cd88 <read_group_cb+0x50>
		if (data->group &&
   1cd74:	6923      	ldr	r3, [r4, #16]
   1cd76:	b11b      	cbz	r3, 1cd80 <read_group_cb+0x48>
   1cd78:	885a      	ldrh	r2, [r3, #2]
   1cd7a:	42b2      	cmp	r2, r6
   1cd7c:	d200      	bcs.n	1cd80 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1cd7e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1cd80:	2001      	movs	r0, #1
}
   1cd82:	b004      	add	sp, #16
   1cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1cd88:	6861      	ldr	r1, [r4, #4]
   1cd8a:	6828      	ldr	r0, [r5, #0]
   1cd8c:	f010 f9c5 	bl	2d11a <bt_uuid_cmp>
   1cd90:	b110      	cbz	r0, 1cd98 <read_group_cb+0x60>
		data->group = NULL;
   1cd92:	2300      	movs	r3, #0
   1cd94:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1cd96:	e7f3      	b.n	1cd80 <read_group_cb+0x48>
	if (data->rsp->len &&
   1cd98:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1cd9a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1cd9c:	781a      	ldrb	r2, [r3, #0]
   1cd9e:	b132      	cbz	r2, 1cdae <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1cda0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1cda2:	8a01      	ldrh	r1, [r0, #16]
   1cda4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1cda6:	4293      	cmp	r3, r2
   1cda8:	da01      	bge.n	1cdae <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1cdaa:	2000      	movs	r0, #0
   1cdac:	e7e9      	b.n	1cd82 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1cdae:	2104      	movs	r1, #4
   1cdb0:	300c      	adds	r0, #12
   1cdb2:	f012 faae 	bl	2f312 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1cdb6:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1cdb8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cdba:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1cdbc:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cdbe:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1cdc0:	4b07      	ldr	r3, [pc, #28]	; (1cde0 <read_group_cb+0xa8>)
   1cdc2:	9401      	str	r4, [sp, #4]
   1cdc4:	9300      	str	r3, [sp, #0]
   1cdc6:	4638      	mov	r0, r7
   1cdc8:	2300      	movs	r3, #0
   1cdca:	68a2      	ldr	r2, [r4, #8]
   1cdcc:	f011 f86d 	bl	2deaa <att_chan_read>
	if (read < 0) {
   1cdd0:	2800      	cmp	r0, #0
   1cdd2:	dbea      	blt.n	1cdaa <read_group_cb+0x72>
	if (!data->group) {
   1cdd4:	6920      	ldr	r0, [r4, #16]
   1cdd6:	3800      	subs	r0, #0
   1cdd8:	bf18      	it	ne
   1cdda:	2001      	movne	r0, #1
   1cddc:	e7d1      	b.n	1cd82 <read_group_cb+0x4a>
   1cdde:	bf00      	nop
   1cde0:	0002dd4b 	.word	0x0002dd4b

0001cde4 <read_type_cb>:
{
   1cde4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1cde8:	6817      	ldr	r7, [r2, #0]
{
   1cdea:	4605      	mov	r5, r0
   1cdec:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1cdee:	6800      	ldr	r0, [r0, #0]
   1cdf0:	6851      	ldr	r1, [r2, #4]
{
   1cdf2:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1cdf4:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1cdf6:	f010 f990 	bl	2d11a <bt_uuid_cmp>
   1cdfa:	4681      	mov	r9, r0
   1cdfc:	2800      	cmp	r0, #0
   1cdfe:	d13c      	bne.n	1ce7a <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ce00:	4630      	mov	r0, r6
   1ce02:	2295      	movs	r2, #149	; 0x95
   1ce04:	4629      	mov	r1, r5
   1ce06:	f011 fd73 	bl	2e8f0 <bt_gatt_check_perm>
   1ce0a:	4606      	mov	r6, r0
   1ce0c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1ce0e:	b140      	cbz	r0, 1ce22 <read_type_cb+0x3e>
		if (data->rsp->len) {
   1ce10:	68e3      	ldr	r3, [r4, #12]
   1ce12:	781b      	ldrb	r3, [r3, #0]
   1ce14:	b10b      	cbz	r3, 1ce1a <read_type_cb+0x36>
			data->err = 0x00;
   1ce16:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ce1a:	2000      	movs	r0, #0
}
   1ce1c:	b003      	add	sp, #12
   1ce1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1ce22:	68a0      	ldr	r0, [r4, #8]
   1ce24:	f012 fa53 	bl	2f2ce <net_buf_frag_last>
   1ce28:	2102      	movs	r1, #2
   1ce2a:	300c      	adds	r0, #12
   1ce2c:	f012 fa71 	bl	2f312 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ce30:	4b13      	ldr	r3, [pc, #76]	; (1ce80 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1ce32:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1ce34:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ce38:	9300      	str	r3, [sp, #0]
   1ce3a:	9401      	str	r4, [sp, #4]
   1ce3c:	4633      	mov	r3, r6
   1ce3e:	4629      	mov	r1, r5
   1ce40:	4638      	mov	r0, r7
   1ce42:	68a2      	ldr	r2, [r4, #8]
   1ce44:	f011 f831 	bl	2deaa <att_chan_read>
	if (read < 0) {
   1ce48:	2800      	cmp	r0, #0
   1ce4a:	da07      	bge.n	1ce5c <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1ce4c:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1ce50:	bf32      	itee	cc
   1ce52:	200e      	movcc	r0, #14
		return -err;
   1ce54:	4240      	negcs	r0, r0
   1ce56:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1ce58:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ce5a:	e7de      	b.n	1ce1a <read_type_cb+0x36>
	if (!data->item) {
   1ce5c:	6923      	ldr	r3, [r4, #16]
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	d0db      	beq.n	1ce1a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1ce62:	68a0      	ldr	r0, [r4, #8]
   1ce64:	f010 fee2 	bl	2dc2c <net_buf_frags_len>
   1ce68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1ce6a:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1ce6c:	68e3      	ldr	r3, [r4, #12]
   1ce6e:	781b      	ldrb	r3, [r3, #0]
   1ce70:	4298      	cmp	r0, r3
   1ce72:	bf94      	ite	ls
   1ce74:	2000      	movls	r0, #0
   1ce76:	2001      	movhi	r0, #1
   1ce78:	e7d0      	b.n	1ce1c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1ce7a:	2001      	movs	r0, #1
   1ce7c:	e7ce      	b.n	1ce1c <read_type_cb+0x38>
   1ce7e:	bf00      	nop
   1ce80:	0002dc3d 	.word	0x0002dc3d

0001ce84 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1ce84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce86:	b087      	sub	sp, #28
   1ce88:	4604      	mov	r4, r0
   1ce8a:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1ce8c:	2200      	movs	r2, #0
   1ce8e:	2300      	movs	r3, #0
   1ce90:	4831      	ldr	r0, [pc, #196]	; (1cf58 <bt_att_accept+0xd4>)
   1ce92:	a904      	add	r1, sp, #16
   1ce94:	f008 fb9a 	bl	255cc <k_mem_slab_alloc>
   1ce98:	4605      	mov	r5, r0
   1ce9a:	b178      	cbz	r0, 1cebc <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   1ce9c:	4b2f      	ldr	r3, [pc, #188]	; (1cf5c <bt_att_accept+0xd8>)
   1ce9e:	2201      	movs	r2, #1
   1cea0:	9302      	str	r3, [sp, #8]
   1cea2:	2300      	movs	r3, #0
   1cea4:	e9cd 3300 	strd	r3, r3, [sp]
   1cea8:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1ceaa:	4618      	mov	r0, r3
   1ceac:	492c      	ldr	r1, [pc, #176]	; (1cf60 <bt_att_accept+0xdc>)
   1ceae:	f010 ffac 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1ceb2:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1ceb6:	4630      	mov	r0, r6
   1ceb8:	b007      	add	sp, #28
   1ceba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   1cebc:	f009 fad0 	bl	26460 <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   1cec0:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   1cec2:	4b28      	ldr	r3, [pc, #160]	; (1cf64 <bt_att_accept+0xe0>)
   1cec4:	2228      	movs	r2, #40	; 0x28
   1cec6:	6018      	str	r0, [r3, #0]
   1cec8:	4629      	mov	r1, r5
   1ceca:	1d30      	adds	r0, r6, #4
   1cecc:	f014 fc59 	bl	31782 <memset>
	att->conn = conn;
   1ced0:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   1ced2:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1ced4:	2200      	movs	r2, #0
   1ced6:	2300      	movs	r3, #0
	list->tail = NULL;
   1ced8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1cedc:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   1cee0:	4821      	ldr	r0, [pc, #132]	; (1cf68 <bt_att_accept+0xe4>)
   1cee2:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1cee4:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1cee6:	f008 fb71 	bl	255cc <k_mem_slab_alloc>
   1ceea:	4606      	mov	r6, r0
   1ceec:	b140      	cbz	r0, 1cf00 <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1ceee:	6823      	ldr	r3, [r4, #0]
   1cef0:	2202      	movs	r2, #2
   1cef2:	9303      	str	r3, [sp, #12]
   1cef4:	4b1d      	ldr	r3, [pc, #116]	; (1cf6c <bt_att_accept+0xe8>)
   1cef6:	9500      	str	r5, [sp, #0]
   1cef8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1cefc:	462b      	mov	r3, r5
   1cefe:	e7d4      	b.n	1ceaa <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   1cf00:	9b05      	ldr	r3, [sp, #20]
   1cf02:	4601      	mov	r1, r0
   1cf04:	22e8      	movs	r2, #232	; 0xe8
   1cf06:	4618      	mov	r0, r3
   1cf08:	f014 fc3b 	bl	31782 <memset>
	chan->chan.chan.ops = &ops;
   1cf0c:	4a18      	ldr	r2, [pc, #96]	; (1cf70 <bt_att_accept+0xec>)
   1cf0e:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   1cf10:	3098      	adds	r0, #152	; 0x98
   1cf12:	f013 ff8c 	bl	30e2e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cf16:	9b05      	ldr	r3, [sp, #20]
   1cf18:	3390      	adds	r3, #144	; 0x90
   1cf1a:	e8d3 2fef 	ldaex	r2, [r3]
   1cf1e:	e8c3 6fe1 	stlex	r1, r6, [r3]
   1cf22:	2900      	cmp	r1, #0
   1cf24:	d1f9      	bne.n	1cf1a <bt_att_accept+0x96>
	chan->att = att;
   1cf26:	9b05      	ldr	r3, [sp, #20]
   1cf28:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1cf2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1cf2c:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   1cf2e:	b91b      	cbnz	r3, 1cf38 <bt_att_accept+0xb4>
   1cf30:	f104 000c 	add.w	r0, r4, #12
   1cf34:	f013 ff7b 	bl	30e2e <z_impl_k_queue_init>
	return list->head;
   1cf38:	6a62      	ldr	r2, [r4, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
   1cf3a:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
	parent->next = child;
   1cf3e:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   1cf42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list->head = node;
   1cf44:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1cf46:	b902      	cbnz	r2, 1cf4a <bt_att_accept+0xc6>
	list->tail = node;
   1cf48:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1cf4a:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   1cf4c:	2b00      	cmp	r3, #0
   1cf4e:	d0b0      	beq.n	1ceb2 <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   1cf50:	3304      	adds	r3, #4
   1cf52:	603b      	str	r3, [r7, #0]
	return 0;
   1cf54:	e7af      	b.n	1ceb6 <bt_att_accept+0x32>
   1cf56:	bf00      	nop
   1cf58:	20008b38 	.word	0x20008b38
   1cf5c:	00037355 	.word	0x00037355
   1cf60:	00032ec8 	.word	0x00032ec8
   1cf64:	20030978 	.word	0x20030978
   1cf68:	20008b54 	.word	0x20008b54
   1cf6c:	0003737a 	.word	0x0003737a
   1cf70:	2000857c 	.word	0x2000857c

0001cf74 <bt_att_chan_create_pdu>:
{
   1cf74:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1cf76:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1cf78:	3201      	adds	r2, #1
   1cf7a:	429a      	cmp	r2, r3
{
   1cf7c:	460d      	mov	r5, r1
   1cf7e:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1cf80:	d90f      	bls.n	1cfa2 <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1cf82:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1cf86:	4b25      	ldr	r3, [pc, #148]	; (1d01c <bt_att_chan_create_pdu+0xa8>)
   1cf88:	2202      	movs	r2, #2
   1cf8a:	9302      	str	r3, [sp, #8]
   1cf8c:	2300      	movs	r3, #0
   1cf8e:	4924      	ldr	r1, [pc, #144]	; (1d020 <bt_att_chan_create_pdu+0xac>)
   1cf90:	4618      	mov	r0, r3
   1cf92:	e9cd 3300 	strd	r3, r3, [sp]
   1cf96:	f010 ff38 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1cf9a:	2400      	movs	r4, #0
}
   1cf9c:	4620      	mov	r0, r4
   1cf9e:	b007      	add	sp, #28
   1cfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   1cfa2:	4608      	mov	r0, r1
   1cfa4:	f7ff fd24 	bl	1c9f0 <att_op_get_type>
   1cfa8:	2802      	cmp	r0, #2
   1cfaa:	d018      	beq.n	1cfde <bt_att_chan_create_pdu+0x6a>
   1cfac:	2804      	cmp	r0, #4
   1cfae:	d016      	beq.n	1cfde <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   1cfb0:	f04f 36ff 	mov.w	r6, #4294967295
   1cfb4:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1cfb8:	2100      	movs	r1, #0
   1cfba:	4632      	mov	r2, r6
   1cfbc:	463b      	mov	r3, r7
   1cfbe:	4608      	mov	r0, r1
   1cfc0:	f010 fdfb 	bl	2dbba <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1cfc4:	4604      	mov	r4, r0
   1cfc6:	b970      	cbnz	r0, 1cfe6 <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1cfc8:	4b16      	ldr	r3, [pc, #88]	; (1d024 <bt_att_chan_create_pdu+0xb0>)
   1cfca:	2201      	movs	r2, #1
   1cfcc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1cfd0:	4913      	ldr	r1, [pc, #76]	; (1d020 <bt_att_chan_create_pdu+0xac>)
   1cfd2:	4603      	mov	r3, r0
   1cfd4:	9503      	str	r5, [sp, #12]
   1cfd6:	9000      	str	r0, [sp, #0]
   1cfd8:	f010 ff17 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1cfdc:	e7dd      	b.n	1cf9a <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   1cfde:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1cfe2:	2700      	movs	r7, #0
   1cfe4:	e7e8      	b.n	1cfb8 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   1cfe6:	4810      	ldr	r0, [pc, #64]	; (1d028 <bt_att_chan_create_pdu+0xb4>)
   1cfe8:	463b      	mov	r3, r7
   1cfea:	4632      	mov	r2, r6
   1cfec:	f008 fcc6 	bl	2597c <z_impl_k_queue_get>
   1cff0:	4603      	mov	r3, r0
	if (!data) {
   1cff2:	b958      	cbnz	r0, 1d00c <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   1cff4:	4a0d      	ldr	r2, [pc, #52]	; (1d02c <bt_att_chan_create_pdu+0xb8>)
   1cff6:	9000      	str	r0, [sp, #0]
   1cff8:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1cffc:	4908      	ldr	r1, [pc, #32]	; (1d020 <bt_att_chan_create_pdu+0xac>)
   1cffe:	2202      	movs	r2, #2
   1d000:	f010 ff03 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1d004:	4620      	mov	r0, r4
   1d006:	f003 fa4b 	bl	204a0 <net_buf_unref>
		return NULL;
   1d00a:	e7c6      	b.n	1cf9a <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   1d00c:	61a0      	str	r0, [r4, #24]
   1d00e:	2101      	movs	r1, #1
   1d010:	f104 000c 	add.w	r0, r4, #12
   1d014:	f012 f97d 	bl	2f312 <net_buf_simple_add>
	hdr->code = op;
   1d018:	7005      	strb	r5, [r0, #0]
	return buf;
   1d01a:	e7bf      	b.n	1cf9c <bt_att_chan_create_pdu+0x28>
   1d01c:	0003739f 	.word	0x0003739f
   1d020:	00032ec8 	.word	0x00032ec8
   1d024:	00037196 	.word	0x00037196
   1d028:	20008e50 	.word	0x20008e50
   1d02c:	000373c4 	.word	0x000373c4

0001d030 <bt_att_recv>:
{
   1d030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   1d034:	8a0b      	ldrh	r3, [r1, #16]
{
   1d036:	4607      	mov	r7, r0
   1d038:	460d      	mov	r5, r1
   1d03a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1d03c:	b963      	cbnz	r3, 1d058 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   1d03e:	4a42      	ldr	r2, [pc, #264]	; (1d148 <bt_att_recv+0x118>)
   1d040:	9300      	str	r3, [sp, #0]
   1d042:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d046:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   1d048:	4618      	mov	r0, r3
   1d04a:	4940      	ldr	r1, [pc, #256]	; (1d14c <bt_att_recv+0x11c>)
   1d04c:	f010 fedd 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
}
   1d050:	2000      	movs	r0, #0
   1d052:	b006      	add	sp, #24
   1d054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1d058:	2101      	movs	r1, #1
   1d05a:	f105 000c 	add.w	r0, r5, #12
   1d05e:	f012 f988 	bl	2f372 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1d062:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1d066:	4604      	mov	r4, r0
   1d068:	2b00      	cmp	r3, #0
   1d06a:	d0f1      	beq.n	1d050 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1d06c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1d06e:	7802      	ldrb	r2, [r0, #0]
   1d070:	4e37      	ldr	r6, [pc, #220]	; (1d150 <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1d072:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   1d076:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   1d07a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   1d07e:	4290      	cmp	r0, r2
   1d080:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   1d084:	d111      	bne.n	1d0aa <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   1d086:	f891 9002 	ldrb.w	r9, [r1, #2]
   1d08a:	f1b9 0f01 	cmp.w	r9, #1
   1d08e:	d12b      	bne.n	1d0e8 <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1d090:	2100      	movs	r1, #0
   1d092:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   1d096:	f010 ffae 	bl	2dff6 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1d09a:	b380      	cbz	r0, 1d0fe <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   1d09c:	4b2d      	ldr	r3, [pc, #180]	; (1d154 <bt_att_recv+0x124>)
   1d09e:	9302      	str	r3, [sp, #8]
   1d0a0:	2300      	movs	r3, #0
   1d0a2:	2202      	movs	r2, #2
   1d0a4:	e9cd 3300 	strd	r3, r3, [sp]
   1d0a8:	e7ce      	b.n	1d048 <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1d0aa:	3301      	adds	r3, #1
   1d0ac:	2b0e      	cmp	r3, #14
   1d0ae:	d1e2      	bne.n	1d076 <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1d0b0:	2500      	movs	r5, #0
   1d0b2:	4b29      	ldr	r3, [pc, #164]	; (1d158 <bt_att_recv+0x128>)
   1d0b4:	4628      	mov	r0, r5
   1d0b6:	4925      	ldr	r1, [pc, #148]	; (1d14c <bt_att_recv+0x11c>)
   1d0b8:	9203      	str	r2, [sp, #12]
   1d0ba:	9302      	str	r3, [sp, #8]
   1d0bc:	2202      	movs	r2, #2
   1d0be:	462b      	mov	r3, r5
   1d0c0:	e9cd 5500 	strd	r5, r5, [sp]
   1d0c4:	f010 fea1 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1d0c8:	7821      	ldrb	r1, [r4, #0]
   1d0ca:	4608      	mov	r0, r1
   1d0cc:	f7ff fc90 	bl	1c9f0 <att_op_get_type>
   1d0d0:	2800      	cmp	r0, #0
   1d0d2:	d0bd      	beq.n	1d050 <bt_att_recv+0x20>
   1d0d4:	2805      	cmp	r0, #5
   1d0d6:	d0bb      	beq.n	1d050 <bt_att_recv+0x20>
	if (!req) {
   1d0d8:	2900      	cmp	r1, #0
   1d0da:	d0b9      	beq.n	1d050 <bt_att_recv+0x20>
   1d0dc:	2306      	movs	r3, #6
   1d0de:	2200      	movs	r2, #0
   1d0e0:	4640      	mov	r0, r8
   1d0e2:	f011 f8f6 	bl	2e2d2 <send_err_rsp.part.0>
   1d0e6:	e7b3      	b.n	1d050 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1d0e8:	f1b9 0f05 	cmp.w	r9, #5
   1d0ec:	d107      	bne.n	1d0fe <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   1d0ee:	2101      	movs	r1, #1
   1d0f0:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   1d0f4:	f010 ff7f 	bl	2dff6 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1d0f8:	b108      	cbz	r0, 1d0fe <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   1d0fa:	4b18      	ldr	r3, [pc, #96]	; (1d15c <bt_att_recv+0x12c>)
   1d0fc:	e7cf      	b.n	1d09e <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   1d0fe:	4456      	add	r6, sl
   1d100:	8a2b      	ldrh	r3, [r5, #16]
   1d102:	7872      	ldrb	r2, [r6, #1]
   1d104:	429a      	cmp	r2, r3
   1d106:	d911      	bls.n	1d12c <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1d108:	7822      	ldrb	r2, [r4, #0]
   1d10a:	4910      	ldr	r1, [pc, #64]	; (1d14c <bt_att_recv+0x11c>)
   1d10c:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1d110:	4b13      	ldr	r3, [pc, #76]	; (1d160 <bt_att_recv+0x130>)
   1d112:	2201      	movs	r2, #1
   1d114:	9302      	str	r3, [sp, #8]
   1d116:	2300      	movs	r3, #0
   1d118:	4618      	mov	r0, r3
   1d11a:	e9cd 3300 	strd	r3, r3, [sp]
   1d11e:	f010 fe74 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1d122:	f1b9 0f01 	cmp.w	r9, #1
   1d126:	d193      	bne.n	1d050 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1d128:	2304      	movs	r3, #4
   1d12a:	e009      	b.n	1d140 <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   1d12c:	6873      	ldr	r3, [r6, #4]
   1d12e:	4629      	mov	r1, r5
   1d130:	4640      	mov	r0, r8
   1d132:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1d134:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1d138:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1d13a:	d189      	bne.n	1d050 <bt_att_recv+0x20>
   1d13c:	2800      	cmp	r0, #0
   1d13e:	d087      	beq.n	1d050 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1d140:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1d142:	2900      	cmp	r1, #0
   1d144:	d084      	beq.n	1d050 <bt_att_recv+0x20>
   1d146:	e7ca      	b.n	1d0de <bt_att_recv+0xae>
   1d148:	000373e3 	.word	0x000373e3
   1d14c:	00032ec8 	.word	0x00032ec8
   1d150:	00033bc8 	.word	0x00033bc8
   1d154:	00037418 	.word	0x00037418
   1d158:	000373fe 	.word	0x000373fe
   1d15c:	00037434 	.word	0x00037434
   1d160:	00037453 	.word	0x00037453

0001d164 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d164:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d166:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d168:	6803      	ldr	r3, [r0, #0]
   1d16a:	460d      	mov	r5, r1
   1d16c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d16e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d170:	bf18      	it	ne
   1d172:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d174:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d176:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d178:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d17a:	f011 fc7a 	bl	2ea72 <bt_gatt_change_aware>
   1d17e:	b948      	cbnz	r0, 1d194 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d180:	2105      	movs	r1, #5
   1d182:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d186:	f010 ff36 	bl	2dff6 <atomic_test_and_set_bit>
   1d18a:	2800      	cmp	r0, #0
   1d18c:	d048      	beq.n	1d220 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1d18e:	2000      	movs	r0, #0
}
   1d190:	b007      	add	sp, #28
   1d192:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1d194:	2e00      	cmp	r6, #0
   1d196:	d045      	beq.n	1d224 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1d198:	2218      	movs	r2, #24
   1d19a:	2100      	movs	r1, #0
   1d19c:	4668      	mov	r0, sp
   1d19e:	f014 faf0 	bl	31782 <memset>
	if (rsp) {
   1d1a2:	bb67      	cbnz	r7, 1d1fe <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1d1a4:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d1a6:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   1d1a8:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d1aa:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   1d1ac:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1d1ae:	2300      	movs	r3, #0
   1d1b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1d1b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d1b6:	4a1c      	ldr	r2, [pc, #112]	; (1d228 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   1d1b8:	9303      	str	r3, [sp, #12]
	data.len = len;
   1d1ba:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   1d1be:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   1d1c2:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d1c6:	2301      	movs	r3, #1
   1d1c8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d1cc:	466b      	mov	r3, sp
   1d1ce:	f010 fd7e 	bl	2dcce <bt_gatt_foreach_attr>
	if (data.err) {
   1d1d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1d1d6:	b1e3      	cbz	r3, 1d212 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1d1d8:	2f00      	cmp	r7, #0
   1d1da:	d0d8      	beq.n	1d18e <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d1dc:	9b01      	ldr	r3, [sp, #4]
   1d1de:	6998      	ldr	r0, [r3, #24]
   1d1e0:	f7ff fc4c 	bl	1ca7c <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d1e4:	9801      	ldr	r0, [sp, #4]
   1d1e6:	f003 f95b 	bl	204a0 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1d1ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1d1ee:	2d00      	cmp	r5, #0
   1d1f0:	d0cd      	beq.n	1d18e <att_write_rsp.constprop.0+0x2a>
   1d1f2:	4632      	mov	r2, r6
   1d1f4:	4629      	mov	r1, r5
   1d1f6:	4620      	mov	r0, r4
   1d1f8:	f011 f86b 	bl	2e2d2 <send_err_rsp.part.0>
   1d1fc:	e7c7      	b.n	1d18e <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1d1fe:	2200      	movs	r2, #0
   1d200:	4639      	mov	r1, r7
   1d202:	4620      	mov	r0, r4
   1d204:	f7ff feb6 	bl	1cf74 <bt_att_chan_create_pdu>
   1d208:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1d20a:	2800      	cmp	r0, #0
   1d20c:	d1ca      	bne.n	1d1a4 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1d20e:	200e      	movs	r0, #14
   1d210:	e7be      	b.n	1d190 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1d212:	9901      	ldr	r1, [sp, #4]
   1d214:	2900      	cmp	r1, #0
   1d216:	d0ba      	beq.n	1d18e <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1d218:	4620      	mov	r0, r4
   1d21a:	f010 fe38 	bl	2de8e <bt_att_chan_send_rsp>
   1d21e:	e7b6      	b.n	1d18e <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d220:	2012      	movs	r0, #18
   1d222:	e7b5      	b.n	1d190 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1d224:	2001      	movs	r0, #1
   1d226:	e7b3      	b.n	1d190 <att_write_rsp.constprop.0+0x2c>
   1d228:	0002dc6d 	.word	0x0002dc6d

0001d22c <bt_att_create_pdu>:
{
   1d22c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d22e:	460e      	mov	r6, r1
   1d230:	4615      	mov	r5, r2
	att = att_get(conn);
   1d232:	f7ff fd3b 	bl	1ccac <att_get>
	if (!att) {
   1d236:	b1c0      	cbz	r0, 1d26a <bt_att_create_pdu+0x3e>
	return list->head;
   1d238:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d23a:	4618      	mov	r0, r3
   1d23c:	b11b      	cbz	r3, 1d246 <bt_att_create_pdu+0x1a>
	return node->next;
   1d23e:	f850 39e0 	ldr.w	r3, [r0], #-224
   1d242:	b103      	cbz	r3, 1d246 <bt_att_create_pdu+0x1a>
   1d244:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d246:	1c6c      	adds	r4, r5, #1
   1d248:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d24a:	b118      	cbz	r0, 1d254 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d24c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1d24e:	42a1      	cmp	r1, r4
   1d250:	d216      	bcs.n	1d280 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d252:	b96b      	cbnz	r3, 1d270 <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1d254:	4b0f      	ldr	r3, [pc, #60]	; (1d294 <bt_att_create_pdu+0x68>)
   1d256:	2202      	movs	r2, #2
   1d258:	9302      	str	r3, [sp, #8]
   1d25a:	2300      	movs	r3, #0
   1d25c:	490e      	ldr	r1, [pc, #56]	; (1d298 <bt_att_create_pdu+0x6c>)
   1d25e:	4618      	mov	r0, r3
   1d260:	e9cd 3300 	strd	r3, r3, [sp]
   1d264:	9403      	str	r4, [sp, #12]
   1d266:	f010 fdd0 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
}
   1d26a:	2000      	movs	r0, #0
   1d26c:	b004      	add	sp, #16
   1d26e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d270:	4618      	mov	r0, r3
   1d272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1d276:	b153      	cbz	r3, 1d28e <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d278:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d27a:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d27c:	428a      	cmp	r2, r1
   1d27e:	d8f7      	bhi.n	1d270 <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   1d280:	462a      	mov	r2, r5
   1d282:	4631      	mov	r1, r6
}
   1d284:	b004      	add	sp, #16
   1d286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1d28a:	f7ff be73 	b.w	1cf74 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d28e:	4614      	mov	r4, r2
   1d290:	e7dc      	b.n	1d24c <bt_att_create_pdu+0x20>
   1d292:	bf00      	nop
   1d294:	00037472 	.word	0x00037472
   1d298:	00032ec8 	.word	0x00032ec8

0001d29c <att_read_group_req>:
{
   1d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d2a0:	8a0e      	ldrh	r6, [r1, #16]
{
   1d2a2:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d2a4:	3e04      	subs	r6, #4
   1d2a6:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1d2a8:	2e02      	cmp	r6, #2
{
   1d2aa:	4608      	mov	r0, r1
   1d2ac:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1d2ae:	d001      	beq.n	1d2b4 <att_read_group_req+0x18>
   1d2b0:	2e10      	cmp	r6, #16
   1d2b2:	d16a      	bne.n	1d38a <att_read_group_req+0xee>
   1d2b4:	2104      	movs	r1, #4
   1d2b6:	300c      	adds	r0, #12
   1d2b8:	f012 f85b 	bl	2f372 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d2bc:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d2c0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d2c2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d2c4:	1d01      	adds	r1, r0, #4
   1d2c6:	4632      	mov	r2, r6
   1d2c8:	4640      	mov	r0, r8
   1d2ca:	f00f ff54 	bl	2d176 <bt_uuid_create>
   1d2ce:	2800      	cmp	r0, #0
   1d2d0:	d05d      	beq.n	1d38e <att_read_group_req+0xf2>
	if (!start || !end) {
   1d2d2:	2d00      	cmp	r5, #0
   1d2d4:	d03a      	beq.n	1d34c <att_read_group_req+0xb0>
   1d2d6:	2600      	movs	r6, #0
   1d2d8:	2f00      	cmp	r7, #0
   1d2da:	d036      	beq.n	1d34a <att_read_group_req+0xae>
	if (start > end) {
   1d2dc:	42bd      	cmp	r5, r7
   1d2de:	d835      	bhi.n	1d34c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1d2e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d2e4:	4640      	mov	r0, r8
   1d2e6:	a901      	add	r1, sp, #4
   1d2e8:	f88d 6004 	strb.w	r6, [sp, #4]
   1d2ec:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d2f0:	f00f ff13 	bl	2d11a <bt_uuid_cmp>
   1d2f4:	bb70      	cbnz	r0, 1d354 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1d2f6:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d2f8:	2214      	movs	r2, #20
   1d2fa:	2100      	movs	r1, #0
   1d2fc:	a807      	add	r0, sp, #28
   1d2fe:	f014 fa40 	bl	31782 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1d302:	2201      	movs	r2, #1
   1d304:	2111      	movs	r1, #17
   1d306:	4630      	mov	r0, r6
   1d308:	f7ff ff90 	bl	1d22c <bt_att_create_pdu>
   1d30c:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1d30e:	2800      	cmp	r0, #0
   1d310:	d03d      	beq.n	1d38e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1d312:	2101      	movs	r1, #1
   1d314:	300c      	adds	r0, #12
	data.uuid = uuid;
   1d316:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1d31a:	f011 fffa 	bl	2f312 <net_buf_simple_add>
	data.rsp->len = 0U;
   1d31e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1d320:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d322:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1d324:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d326:	4a1b      	ldr	r2, [pc, #108]	; (1d394 <att_read_group_req+0xf8>)
	data.group = NULL;
   1d328:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d32a:	4628      	mov	r0, r5
   1d32c:	ab07      	add	r3, sp, #28
   1d32e:	f010 fcce 	bl	2dcce <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1d332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d334:	781b      	ldrb	r3, [r3, #0]
   1d336:	bb1b      	cbnz	r3, 1d380 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d338:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d33a:	6998      	ldr	r0, [r3, #24]
   1d33c:	f7ff fb9e 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d340:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d342:	f003 f8ad 	bl	204a0 <net_buf_unref>
	if (!req) {
   1d346:	230a      	movs	r3, #10
   1d348:	e001      	b.n	1d34e <att_read_group_req+0xb2>
			*err = 0U;
   1d34a:	463d      	mov	r5, r7
	if (!req) {
   1d34c:	2301      	movs	r3, #1
   1d34e:	462a      	mov	r2, r5
   1d350:	2110      	movs	r1, #16
   1d352:	e00e      	b.n	1d372 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1d354:	f642 0301 	movw	r3, #10241	; 0x2801
   1d358:	4640      	mov	r0, r8
   1d35a:	a907      	add	r1, sp, #28
   1d35c:	f88d 601c 	strb.w	r6, [sp, #28]
   1d360:	f8ad 301e 	strh.w	r3, [sp, #30]
   1d364:	f00f fed9 	bl	2d11a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1d368:	2800      	cmp	r0, #0
   1d36a:	d0c4      	beq.n	1d2f6 <att_read_group_req+0x5a>
	if (!req) {
   1d36c:	2310      	movs	r3, #16
   1d36e:	462a      	mov	r2, r5
   1d370:	4619      	mov	r1, r3
   1d372:	4620      	mov	r0, r4
   1d374:	f010 ffad 	bl	2e2d2 <send_err_rsp.part.0>
		return 0;
   1d378:	2000      	movs	r0, #0
}
   1d37a:	b00c      	add	sp, #48	; 0x30
   1d37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1d380:	4620      	mov	r0, r4
   1d382:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d384:	f010 fd83 	bl	2de8e <bt_att_chan_send_rsp>
	return 0;
   1d388:	e7f6      	b.n	1d378 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1d38a:	2004      	movs	r0, #4
   1d38c:	e7f5      	b.n	1d37a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1d38e:	200e      	movs	r0, #14
   1d390:	e7f3      	b.n	1d37a <att_read_group_req+0xde>
   1d392:	bf00      	nop
   1d394:	0001cd39 	.word	0x0001cd39

0001d398 <att_read_mult_vl_req>:
{
   1d398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d39c:	6846      	ldr	r6, [r0, #4]
{
   1d39e:	4604      	mov	r4, r0
   1d3a0:	460d      	mov	r5, r1
   1d3a2:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1d3a4:	2101      	movs	r1, #1
   1d3a6:	4630      	mov	r0, r6
   1d3a8:	f011 fb63 	bl	2ea72 <bt_gatt_change_aware>
   1d3ac:	b950      	cbnz	r0, 1d3c4 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d3ae:	2105      	movs	r1, #5
   1d3b0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d3b4:	f010 fe1f 	bl	2dff6 <atomic_test_and_set_bit>
   1d3b8:	2800      	cmp	r0, #0
   1d3ba:	d13b      	bne.n	1d434 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d3bc:	2012      	movs	r0, #18
}
   1d3be:	b005      	add	sp, #20
   1d3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1d3c4:	2210      	movs	r2, #16
   1d3c6:	2100      	movs	r1, #0
   1d3c8:	4668      	mov	r0, sp
   1d3ca:	f014 f9da 	bl	31782 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1d3ce:	2200      	movs	r2, #0
   1d3d0:	2121      	movs	r1, #33	; 0x21
   1d3d2:	4630      	mov	r0, r6
   1d3d4:	f7ff ff2a 	bl	1d22c <bt_att_create_pdu>
   1d3d8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d3da:	b368      	cbz	r0, 1d438 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d3dc:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d3e0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d43c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1d3e4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1d3e6:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1d3ea:	8a2b      	ldrh	r3, [r5, #16]
   1d3ec:	2b01      	cmp	r3, #1
   1d3ee:	d804      	bhi.n	1d3fa <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1d3f0:	4620      	mov	r0, r4
   1d3f2:	9902      	ldr	r1, [sp, #8]
   1d3f4:	f010 fd4b 	bl	2de8e <bt_att_chan_send_rsp>
	return 0;
   1d3f8:	e01c      	b.n	1d434 <att_read_mult_vl_req+0x9c>
   1d3fa:	4638      	mov	r0, r7
   1d3fc:	f011 ffc1 	bl	2f382 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d400:	466b      	mov	r3, sp
   1d402:	464a      	mov	r2, r9
   1d404:	4601      	mov	r1, r0
   1d406:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d408:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d40c:	f010 fc5f 	bl	2dcce <bt_gatt_foreach_attr>
		if (data.err) {
   1d410:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d414:	2b00      	cmp	r3, #0
   1d416:	d0e8      	beq.n	1d3ea <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d418:	9b02      	ldr	r3, [sp, #8]
   1d41a:	6998      	ldr	r0, [r3, #24]
   1d41c:	f7ff fb2e 	bl	1ca7c <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d420:	9802      	ldr	r0, [sp, #8]
   1d422:	f003 f83d 	bl	204a0 <net_buf_unref>
	if (!req) {
   1d426:	4632      	mov	r2, r6
   1d428:	2120      	movs	r1, #32
   1d42a:	4620      	mov	r0, r4
   1d42c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d430:	f010 ff4f 	bl	2e2d2 <send_err_rsp.part.0>
			return 0;
   1d434:	2000      	movs	r0, #0
   1d436:	e7c2      	b.n	1d3be <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1d438:	200e      	movs	r0, #14
   1d43a:	e7c0      	b.n	1d3be <att_read_mult_vl_req+0x26>
   1d43c:	0002e05f 	.word	0x0002e05f

0001d440 <att_read_mult_req>:
{
   1d440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d444:	6846      	ldr	r6, [r0, #4]
{
   1d446:	4604      	mov	r4, r0
   1d448:	460d      	mov	r5, r1
   1d44a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1d44c:	2101      	movs	r1, #1
   1d44e:	4630      	mov	r0, r6
   1d450:	f011 fb0f 	bl	2ea72 <bt_gatt_change_aware>
   1d454:	b950      	cbnz	r0, 1d46c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d456:	2105      	movs	r1, #5
   1d458:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d45c:	f010 fdcb 	bl	2dff6 <atomic_test_and_set_bit>
   1d460:	2800      	cmp	r0, #0
   1d462:	d13b      	bne.n	1d4dc <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d464:	2012      	movs	r0, #18
}
   1d466:	b005      	add	sp, #20
   1d468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1d46c:	2210      	movs	r2, #16
   1d46e:	2100      	movs	r1, #0
   1d470:	4668      	mov	r0, sp
   1d472:	f014 f986 	bl	31782 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1d476:	2200      	movs	r2, #0
   1d478:	210f      	movs	r1, #15
   1d47a:	4630      	mov	r0, r6
   1d47c:	f7ff fed6 	bl	1d22c <bt_att_create_pdu>
   1d480:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d482:	b368      	cbz	r0, 1d4e0 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d484:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d488:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d4e4 <att_read_mult_req+0xa4>
	data.chan = chan;
   1d48c:	9400      	str	r4, [sp, #0]
   1d48e:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1d492:	8a2b      	ldrh	r3, [r5, #16]
   1d494:	2b01      	cmp	r3, #1
   1d496:	d804      	bhi.n	1d4a2 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1d498:	4620      	mov	r0, r4
   1d49a:	9902      	ldr	r1, [sp, #8]
   1d49c:	f010 fcf7 	bl	2de8e <bt_att_chan_send_rsp>
	return 0;
   1d4a0:	e01c      	b.n	1d4dc <att_read_mult_req+0x9c>
   1d4a2:	4638      	mov	r0, r7
   1d4a4:	f011 ff6d 	bl	2f382 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d4a8:	466b      	mov	r3, sp
   1d4aa:	464a      	mov	r2, r9
   1d4ac:	4601      	mov	r1, r0
   1d4ae:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d4b0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d4b4:	f010 fc0b 	bl	2dcce <bt_gatt_foreach_attr>
		if (data.err) {
   1d4b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d4bc:	2b00      	cmp	r3, #0
   1d4be:	d0e8      	beq.n	1d492 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d4c0:	9b02      	ldr	r3, [sp, #8]
   1d4c2:	6998      	ldr	r0, [r3, #24]
   1d4c4:	f7ff fada 	bl	1ca7c <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d4c8:	9802      	ldr	r0, [sp, #8]
   1d4ca:	f002 ffe9 	bl	204a0 <net_buf_unref>
	if (!req) {
   1d4ce:	4632      	mov	r2, r6
   1d4d0:	210e      	movs	r1, #14
   1d4d2:	4620      	mov	r0, r4
   1d4d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d4d8:	f010 fefb 	bl	2e2d2 <send_err_rsp.part.0>
			return 0;
   1d4dc:	2000      	movs	r0, #0
   1d4de:	e7c2      	b.n	1d466 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1d4e0:	200e      	movs	r0, #14
   1d4e2:	e7c0      	b.n	1d466 <att_read_mult_req+0x26>
   1d4e4:	0002e019 	.word	0x0002e019

0001d4e8 <att_read_rsp>:
{
   1d4e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d4ec:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1d4f0:	4604      	mov	r4, r0
   1d4f2:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1d4f4:	4640      	mov	r0, r8
   1d4f6:	2101      	movs	r1, #1
{
   1d4f8:	4617      	mov	r7, r2
   1d4fa:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1d4fc:	f011 fab9 	bl	2ea72 <bt_gatt_change_aware>
   1d500:	b948      	cbnz	r0, 1d516 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d502:	2105      	movs	r1, #5
   1d504:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d508:	f010 fd75 	bl	2dff6 <atomic_test_and_set_bit>
   1d50c:	bb78      	cbnz	r0, 1d56e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d50e:	2012      	movs	r0, #18
}
   1d510:	b004      	add	sp, #16
   1d512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1d516:	b38d      	cbz	r5, 1d57c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1d518:	2210      	movs	r2, #16
   1d51a:	2100      	movs	r1, #0
   1d51c:	4668      	mov	r0, sp
   1d51e:	f014 f930 	bl	31782 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1d522:	2200      	movs	r2, #0
   1d524:	4639      	mov	r1, r7
   1d526:	4640      	mov	r0, r8
   1d528:	f7ff fe80 	bl	1d22c <bt_att_create_pdu>
   1d52c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d52e:	b338      	cbz	r0, 1d580 <att_read_rsp+0x98>
	data.offset = offset;
   1d530:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d534:	4629      	mov	r1, r5
	data.offset = offset;
   1d536:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d53a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d53c:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d53e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d542:	4a10      	ldr	r2, [pc, #64]	; (1d584 <att_read_rsp+0x9c>)
   1d544:	466b      	mov	r3, sp
	data.chan = chan;
   1d546:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d548:	f010 fbc1 	bl	2dcce <bt_gatt_foreach_attr>
	if (data.err) {
   1d54c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d550:	b17b      	cbz	r3, 1d572 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d552:	9b02      	ldr	r3, [sp, #8]
   1d554:	6998      	ldr	r0, [r3, #24]
   1d556:	f7ff fa91 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d55a:	9802      	ldr	r0, [sp, #8]
   1d55c:	f002 ffa0 	bl	204a0 <net_buf_unref>
	if (!req) {
   1d560:	462a      	mov	r2, r5
   1d562:	4631      	mov	r1, r6
   1d564:	4620      	mov	r0, r4
   1d566:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d56a:	f010 feb2 	bl	2e2d2 <send_err_rsp.part.0>
			return 0;
   1d56e:	2000      	movs	r0, #0
   1d570:	e7ce      	b.n	1d510 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1d572:	4620      	mov	r0, r4
   1d574:	9902      	ldr	r1, [sp, #8]
   1d576:	f010 fc8a 	bl	2de8e <bt_att_chan_send_rsp>
	return 0;
   1d57a:	e7f8      	b.n	1d56e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1d57c:	2001      	movs	r0, #1
   1d57e:	e7c7      	b.n	1d510 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1d580:	200e      	movs	r0, #14
   1d582:	e7c5      	b.n	1d510 <att_read_rsp+0x28>
   1d584:	0002e019 	.word	0x0002e019

0001d588 <att_read_type_req>:
{
   1d588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d58c:	8a0d      	ldrh	r5, [r1, #16]
{
   1d58e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d590:	3d04      	subs	r5, #4
   1d592:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1d594:	2d02      	cmp	r5, #2
{
   1d596:	4608      	mov	r0, r1
   1d598:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1d59a:	d001      	beq.n	1d5a0 <att_read_type_req+0x18>
   1d59c:	2d10      	cmp	r5, #16
   1d59e:	d150      	bne.n	1d642 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1d5a0:	2104      	movs	r1, #4
   1d5a2:	300c      	adds	r0, #12
   1d5a4:	f011 fee5 	bl	2f372 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d5a8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d5ac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d5ae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d5b0:	1d01      	adds	r1, r0, #4
   1d5b2:	462a      	mov	r2, r5
   1d5b4:	4640      	mov	r0, r8
   1d5b6:	f00f fdde 	bl	2d176 <bt_uuid_create>
   1d5ba:	b188      	cbz	r0, 1d5e0 <att_read_type_req+0x58>
	if (!start || !end) {
   1d5bc:	b19e      	cbz	r6, 1d5e6 <att_read_type_req+0x5e>
   1d5be:	b18f      	cbz	r7, 1d5e4 <att_read_type_req+0x5c>
	if (start > end) {
   1d5c0:	42be      	cmp	r6, r7
   1d5c2:	d810      	bhi.n	1d5e6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1d5c4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1d5c6:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d5c8:	2100      	movs	r1, #0
   1d5ca:	eb0d 0002 	add.w	r0, sp, r2
   1d5ce:	f014 f8d8 	bl	31782 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1d5d2:	2201      	movs	r2, #1
   1d5d4:	2109      	movs	r1, #9
   1d5d6:	4628      	mov	r0, r5
   1d5d8:	f7ff fe28 	bl	1d22c <bt_att_create_pdu>
   1d5dc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1d5de:	b960      	cbnz	r0, 1d5fa <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1d5e0:	200e      	movs	r0, #14
   1d5e2:	e007      	b.n	1d5f4 <att_read_type_req+0x6c>
			*err = 0U;
   1d5e4:	463e      	mov	r6, r7
	if (!req) {
   1d5e6:	2301      	movs	r3, #1
   1d5e8:	4632      	mov	r2, r6
   1d5ea:	2108      	movs	r1, #8
   1d5ec:	4620      	mov	r0, r4
   1d5ee:	f010 fe70 	bl	2e2d2 <send_err_rsp.part.0>
		return 0;
   1d5f2:	2000      	movs	r0, #0
}
   1d5f4:	b00c      	add	sp, #48	; 0x30
   1d5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1d5fa:	2101      	movs	r1, #1
   1d5fc:	300c      	adds	r0, #12
	data.uuid = uuid;
   1d5fe:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1d602:	f011 fe86 	bl	2f312 <net_buf_simple_add>
	data.rsp->len = 0U;
   1d606:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1d608:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1d60a:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d60c:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1d60e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d610:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1d614:	4630      	mov	r0, r6
   1d616:	ab06      	add	r3, sp, #24
   1d618:	4a0b      	ldr	r2, [pc, #44]	; (1d648 <att_read_type_req+0xc0>)
   1d61a:	f010 fb58 	bl	2dcce <bt_gatt_foreach_attr>
	if (data.err) {
   1d61e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1d622:	b14b      	cbz	r3, 1d638 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d624:	9b08      	ldr	r3, [sp, #32]
   1d626:	6998      	ldr	r0, [r3, #24]
   1d628:	f7ff fa28 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d62c:	9808      	ldr	r0, [sp, #32]
   1d62e:	f002 ff37 	bl	204a0 <net_buf_unref>
	if (!req) {
   1d632:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1d636:	e7d7      	b.n	1d5e8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1d638:	4620      	mov	r0, r4
   1d63a:	9908      	ldr	r1, [sp, #32]
   1d63c:	f010 fc27 	bl	2de8e <bt_att_chan_send_rsp>
	return 0;
   1d640:	e7d7      	b.n	1d5f2 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1d642:	2004      	movs	r0, #4
   1d644:	e7d6      	b.n	1d5f4 <att_read_type_req+0x6c>
   1d646:	bf00      	nop
   1d648:	0001cde5 	.word	0x0001cde5

0001d64c <att_find_type_req>:
{
   1d64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d650:	460f      	mov	r7, r1
   1d652:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1d654:	2106      	movs	r1, #6
   1d656:	b086      	sub	sp, #24
   1d658:	f107 000c 	add.w	r0, r7, #12
   1d65c:	f011 fe89 	bl	2f372 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d660:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d662:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1d666:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1d668:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1d66c:	b1c5      	cbz	r5, 1d6a0 <att_find_type_req+0x54>
   1d66e:	2300      	movs	r3, #0
   1d670:	f1b8 0f00 	cmp.w	r8, #0
   1d674:	d013      	beq.n	1d69e <att_find_type_req+0x52>
	if (start > end) {
   1d676:	4545      	cmp	r5, r8
   1d678:	d812      	bhi.n	1d6a0 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1d67a:	f88d 3000 	strb.w	r3, [sp]
   1d67e:	f88d 3004 	strb.w	r3, [sp, #4]
   1d682:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d686:	4668      	mov	r0, sp
   1d688:	a901      	add	r1, sp, #4
   1d68a:	f8ad 2002 	strh.w	r2, [sp, #2]
   1d68e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d692:	f00f fd42 	bl	2d11a <bt_uuid_cmp>
   1d696:	4606      	mov	r6, r0
   1d698:	b160      	cbz	r0, 1d6b4 <att_find_type_req+0x68>
	if (!req) {
   1d69a:	230a      	movs	r3, #10
   1d69c:	e001      	b.n	1d6a2 <att_find_type_req+0x56>
			*err = 0U;
   1d69e:	4645      	mov	r5, r8
	if (!req) {
   1d6a0:	2301      	movs	r3, #1
   1d6a2:	462a      	mov	r2, r5
   1d6a4:	2106      	movs	r1, #6
   1d6a6:	4620      	mov	r0, r4
   1d6a8:	f010 fe13 	bl	2e2d2 <send_err_rsp.part.0>
		return 0;
   1d6ac:	2000      	movs	r0, #0
}
   1d6ae:	b006      	add	sp, #24
   1d6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d6b4:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d6b8:	4601      	mov	r1, r0
   1d6ba:	2214      	movs	r2, #20
   1d6bc:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1d6be:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1d6c0:	f014 f85f 	bl	31782 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1d6c4:	4632      	mov	r2, r6
   1d6c6:	2107      	movs	r1, #7
   1d6c8:	4650      	mov	r0, sl
   1d6ca:	f7ff fdaf 	bl	1d22c <bt_att_create_pdu>
   1d6ce:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d6d0:	b1f8      	cbz	r0, 1d712 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d6d2:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d6d4:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d6d6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d6da:	4628      	mov	r0, r5
   1d6dc:	ab01      	add	r3, sp, #4
   1d6de:	4a0e      	ldr	r2, [pc, #56]	; (1d718 <att_find_type_req+0xcc>)
	data.value = value;
   1d6e0:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   1d6e4:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   1d6e6:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d6ea:	f010 faf0 	bl	2dcce <bt_gatt_foreach_attr>
	if (data.err) {
   1d6ee:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1d6f2:	b14b      	cbz	r3, 1d708 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d6f4:	9b02      	ldr	r3, [sp, #8]
   1d6f6:	6998      	ldr	r0, [r3, #24]
   1d6f8:	f7ff f9c0 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d6fc:	9802      	ldr	r0, [sp, #8]
   1d6fe:	f002 fecf 	bl	204a0 <net_buf_unref>
	if (!req) {
   1d702:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1d706:	e7cc      	b.n	1d6a2 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1d708:	4620      	mov	r0, r4
   1d70a:	9902      	ldr	r1, [sp, #8]
   1d70c:	f010 fbbf 	bl	2de8e <bt_att_chan_send_rsp>
	return 0;
   1d710:	e7cc      	b.n	1d6ac <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1d712:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1d714:	e7cb      	b.n	1d6ae <att_find_type_req+0x62>
   1d716:	bf00      	nop
   1d718:	0001ca99 	.word	0x0001ca99

0001d71c <att_find_info_req>:
{
   1d71c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1d71e:	68cb      	ldr	r3, [r1, #12]
{
   1d720:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d722:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d724:	885e      	ldrh	r6, [r3, #2]
{
   1d726:	b085      	sub	sp, #20
	if (!start || !end) {
   1d728:	b195      	cbz	r5, 1d750 <att_find_info_req+0x34>
   1d72a:	b186      	cbz	r6, 1d74e <att_find_info_req+0x32>
	if (start > end) {
   1d72c:	42ae      	cmp	r6, r5
   1d72e:	d30f      	bcc.n	1d750 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1d730:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1d732:	2210      	movs	r2, #16
   1d734:	2100      	movs	r1, #0
   1d736:	4668      	mov	r0, sp
   1d738:	f014 f823 	bl	31782 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1d73c:	2200      	movs	r2, #0
   1d73e:	2105      	movs	r1, #5
   1d740:	4638      	mov	r0, r7
   1d742:	f7ff fd73 	bl	1d22c <bt_att_create_pdu>
   1d746:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1d748:	b958      	cbnz	r0, 1d762 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1d74a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1d74c:	e007      	b.n	1d75e <att_find_info_req+0x42>
			*err = 0U;
   1d74e:	4635      	mov	r5, r6
	if (!req) {
   1d750:	2301      	movs	r3, #1
   1d752:	462a      	mov	r2, r5
   1d754:	2104      	movs	r1, #4
   1d756:	4620      	mov	r0, r4
   1d758:	f010 fdbb 	bl	2e2d2 <send_err_rsp.part.0>
		return 0;
   1d75c:	2000      	movs	r0, #0
}
   1d75e:	b005      	add	sp, #20
   1d760:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1d762:	466b      	mov	r3, sp
   1d764:	4631      	mov	r1, r6
   1d766:	4628      	mov	r0, r5
   1d768:	4a09      	ldr	r2, [pc, #36]	; (1d790 <att_find_info_req+0x74>)
	data.chan = chan;
   1d76a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1d76c:	f010 faaf 	bl	2dcce <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1d770:	9b02      	ldr	r3, [sp, #8]
   1d772:	b943      	cbnz	r3, 1d786 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d774:	9b01      	ldr	r3, [sp, #4]
   1d776:	6998      	ldr	r0, [r3, #24]
   1d778:	f7ff f980 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d77c:	9801      	ldr	r0, [sp, #4]
   1d77e:	f002 fe8f 	bl	204a0 <net_buf_unref>
	if (!req) {
   1d782:	230a      	movs	r3, #10
   1d784:	e7e5      	b.n	1d752 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1d786:	4620      	mov	r0, r4
   1d788:	9901      	ldr	r1, [sp, #4]
   1d78a:	f010 fb80 	bl	2de8e <bt_att_chan_send_rsp>
	return 0;
   1d78e:	e7e5      	b.n	1d75c <att_find_info_req+0x40>
   1d790:	0002dd6b 	.word	0x0002dd6b

0001d794 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1d794:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1d796:	4c09      	ldr	r4, [pc, #36]	; (1d7bc <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1d798:	4d09      	ldr	r5, [pc, #36]	; (1d7c0 <bt_att_init+0x2c>)
   1d79a:	4620      	mov	r0, r4
   1d79c:	f013 fb47 	bl	30e2e <z_impl_k_queue_init>
   1d7a0:	4629      	mov	r1, r5
   1d7a2:	4620      	mov	r0, r4
   1d7a4:	f013 fb4f 	bl	30e46 <k_queue_append>
   1d7a8:	4620      	mov	r0, r4
   1d7aa:	f105 0114 	add.w	r1, r5, #20
   1d7ae:	f013 fb4a 	bl	30e46 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1d7b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1d7b6:	f000 bb0b 	b.w	1ddd0 <bt_gatt_init>
   1d7ba:	bf00      	nop
   1d7bc:	20008e50 	.word	0x20008e50
   1d7c0:	20030950 	.word	0x20030950

0001d7c4 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   1d7c4:	2300      	movs	r3, #0
{
   1d7c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d7c8:	4605      	mov	r5, r0
   1d7ca:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1d7cc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1d7ce:	f008 fe47 	bl	26460 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1d7d2:	4b0c      	ldr	r3, [pc, #48]	; (1d804 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1d7d4:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   1d7d6:	681b      	ldr	r3, [r3, #0]
   1d7d8:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   1d7da:	bf04      	itt	eq
   1d7dc:	2500      	moveq	r5, #0
   1d7de:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1d7e0:	462a      	mov	r2, r5
   1d7e2:	4623      	mov	r3, r4
   1d7e4:	4808      	ldr	r0, [pc, #32]	; (1d808 <bt_att_req_alloc+0x44>)
   1d7e6:	f007 fef1 	bl	255cc <k_mem_slab_alloc>
   1d7ea:	4601      	mov	r1, r0
   1d7ec:	b940      	cbnz	r0, 1d800 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1d7ee:	9b01      	ldr	r3, [sp, #4]
   1d7f0:	221c      	movs	r2, #28
   1d7f2:	4618      	mov	r0, r3
   1d7f4:	f013 ffc5 	bl	31782 <memset>
   1d7f8:	4603      	mov	r3, r0

	return req;
}
   1d7fa:	4618      	mov	r0, r3
   1d7fc:	b003      	add	sp, #12
   1d7fe:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1d800:	2300      	movs	r3, #0
   1d802:	e7fa      	b.n	1d7fa <bt_att_req_alloc+0x36>
   1d804:	20030978 	.word	0x20030978
   1d808:	20008b70 	.word	0x20008b70

0001d80c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1d80c:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1d80e:	6883      	ldr	r3, [r0, #8]
{
   1d810:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1d812:	b14b      	cbz	r3, 1d828 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1d814:	6998      	ldr	r0, [r3, #24]
   1d816:	f7ff f931 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(req->buf);
   1d81a:	9b01      	ldr	r3, [sp, #4]
   1d81c:	6898      	ldr	r0, [r3, #8]
   1d81e:	f002 fe3f 	bl	204a0 <net_buf_unref>
		req->buf = NULL;
   1d822:	2200      	movs	r2, #0
   1d824:	9b01      	ldr	r3, [sp, #4]
   1d826:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1d828:	4803      	ldr	r0, [pc, #12]	; (1d838 <bt_att_req_free+0x2c>)
   1d82a:	a901      	add	r1, sp, #4
   1d82c:	f013 fa42 	bl	30cb4 <k_mem_slab_free>
}
   1d830:	b003      	add	sp, #12
   1d832:	f85d fb04 	ldr.w	pc, [sp], #4
   1d836:	bf00      	nop
   1d838:	20008b70 	.word	0x20008b70

0001d83c <att_handle_rsp>:
{
   1d83c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1d840:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1d842:	30b0      	adds	r0, #176	; 0xb0
{
   1d844:	461d      	mov	r5, r3
   1d846:	460e      	mov	r6, r1
   1d848:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   1d84a:	f013 fbe5 	bl	31018 <k_work_cancel_delayable>
	if (!chan->req) {
   1d84e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1d852:	b97b      	cbnz	r3, 1d874 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   1d854:	4a19      	ldr	r2, [pc, #100]	; (1d8bc <att_handle_rsp+0x80>)
   1d856:	4618      	mov	r0, r3
   1d858:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d85c:	4918      	ldr	r1, [pc, #96]	; (1d8c0 <att_handle_rsp+0x84>)
   1d85e:	2202      	movs	r2, #2
   1d860:	9300      	str	r3, [sp, #0]
   1d862:	f010 fad2 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   1d866:	6820      	ldr	r0, [r4, #0]
   1d868:	f010 fc61 	bl	2e12e <att_req_send_process>
}
   1d86c:	2000      	movs	r0, #0
   1d86e:	b004      	add	sp, #16
   1d870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1d874:	4a13      	ldr	r2, [pc, #76]	; (1d8c4 <att_handle_rsp+0x88>)
   1d876:	f04f 0800 	mov.w	r8, #0
   1d87a:	4293      	cmp	r3, r2
   1d87c:	d102      	bne.n	1d884 <att_handle_rsp+0x48>
		chan->req = NULL;
   1d87e:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   1d882:	e7f0      	b.n	1d866 <att_handle_rsp+0x2a>
	func = chan->req->func;
   1d884:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   1d888:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   1d88c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1d890:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   1d894:	f7ff ffba 	bl	1d80c <bt_att_req_free>
	att_req_send_process(chan->att);
   1d898:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1d89a:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1d89e:	f010 fc46 	bl	2e12e <att_req_send_process>
	if (func) {
   1d8a2:	f1b9 0f00 	cmp.w	r9, #0
   1d8a6:	d0e1      	beq.n	1d86c <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   1d8a8:	6820      	ldr	r0, [r4, #0]
   1d8aa:	f8cd a000 	str.w	sl, [sp]
   1d8ae:	463b      	mov	r3, r7
   1d8b0:	4632      	mov	r2, r6
   1d8b2:	4629      	mov	r1, r5
   1d8b4:	6800      	ldr	r0, [r0, #0]
   1d8b6:	47c8      	blx	r9
   1d8b8:	e7d8      	b.n	1d86c <att_handle_rsp+0x30>
   1d8ba:	bf00      	nop
   1d8bc:	0003748d 	.word	0x0003748d
   1d8c0:	00032ec8 	.word	0x00032ec8
   1d8c4:	2003097c 	.word	0x2003097c

0001d8c8 <bt_att_disconnected>:
{
   1d8c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1d8cc:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1d8d0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1d8d2:	2e00      	cmp	r6, #0
   1d8d4:	d056      	beq.n	1d984 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1d8d6:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   1d8da:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1d8de:	f010 fb6f 	bl	2dfc0 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1d8e2:	1f27      	subs	r7, r4, #4
   1d8e4:	f104 0894 	add.w	r8, r4, #148	; 0x94
   1d8e8:	2200      	movs	r2, #0
   1d8ea:	2300      	movs	r3, #0
   1d8ec:	4640      	mov	r0, r8
   1d8ee:	f011 fcb5 	bl	2f25c <net_buf_get>
   1d8f2:	4605      	mov	r5, r0
   1d8f4:	bb28      	cbnz	r0, 1d942 <bt_att_disconnected+0x7a>
	if (chan->req) {
   1d8f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1d8fa:	b12b      	cbz	r3, 1d908 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1d8fc:	4602      	mov	r2, r0
   1d8fe:	4601      	mov	r1, r0
   1d900:	230e      	movs	r3, #14
   1d902:	4638      	mov	r0, r7
   1d904:	f7ff ff9a 	bl	1d83c <att_handle_rsp>
	chan->att = NULL;
   1d908:	2300      	movs	r3, #0
   1d90a:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1d90e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1d910:	2b00      	cmp	r3, #0
   1d912:	d137      	bne.n	1d984 <bt_att_disconnected+0xbc>
	att_reset(att);
   1d914:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1d916:	9803      	ldr	r0, [sp, #12]
   1d918:	2200      	movs	r2, #0
   1d91a:	2300      	movs	r3, #0
   1d91c:	300c      	adds	r0, #12
   1d91e:	f011 fc9d 	bl	2f25c <net_buf_get>
   1d922:	4605      	mov	r5, r0
   1d924:	b9a0      	cbnz	r0, 1d950 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1d926:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1d928:	6845      	ldr	r5, [r0, #4]
   1d92a:	b9c5      	cbnz	r5, 1d95e <bt_att_disconnected+0x96>
	att->conn = NULL;
   1d92c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1d92e:	a903      	add	r1, sp, #12
   1d930:	4816      	ldr	r0, [pc, #88]	; (1d98c <bt_att_disconnected+0xc4>)
   1d932:	f013 f9bf 	bl	30cb4 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1d936:	6820      	ldr	r0, [r4, #0]
}
   1d938:	b004      	add	sp, #16
   1d93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1d93e:	f000 bf2d 	b.w	1e79c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1d942:	69a8      	ldr	r0, [r5, #24]
   1d944:	f7ff f89a 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(buf);
   1d948:	4628      	mov	r0, r5
   1d94a:	f002 fda9 	bl	204a0 <net_buf_unref>
   1d94e:	e7cb      	b.n	1d8e8 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1d950:	69a8      	ldr	r0, [r5, #24]
   1d952:	f7ff f893 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(buf);
   1d956:	4628      	mov	r0, r5
   1d958:	f002 fda2 	bl	204a0 <net_buf_unref>
   1d95c:	e7db      	b.n	1d916 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d95e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1d960:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d962:	4295      	cmp	r5, r2
	list->head = node;
   1d964:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1d966:	bf08      	it	eq
   1d968:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1d96a:	686e      	ldr	r6, [r5, #4]
   1d96c:	b136      	cbz	r6, 1d97c <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1d96e:	69ab      	ldr	r3, [r5, #24]
   1d970:	210e      	movs	r1, #14
   1d972:	9300      	str	r3, [sp, #0]
   1d974:	2300      	movs	r3, #0
   1d976:	6800      	ldr	r0, [r0, #0]
   1d978:	461a      	mov	r2, r3
   1d97a:	47b0      	blx	r6
		bt_att_req_free(req);
   1d97c:	4628      	mov	r0, r5
   1d97e:	f7ff ff45 	bl	1d80c <bt_att_req_free>
   1d982:	e7d0      	b.n	1d926 <bt_att_disconnected+0x5e>
}
   1d984:	b004      	add	sp, #16
   1d986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d98a:	bf00      	nop
   1d98c:	20008b38 	.word	0x20008b38

0001d990 <att_timeout>:
{
   1d990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   1d992:	4b09      	ldr	r3, [pc, #36]	; (1d9b8 <att_timeout+0x28>)
{
   1d994:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1d996:	9302      	str	r3, [sp, #8]
   1d998:	2300      	movs	r3, #0
   1d99a:	2201      	movs	r2, #1
   1d99c:	4618      	mov	r0, r3
   1d99e:	e9cd 3300 	strd	r3, r3, [sp]
   1d9a2:	4906      	ldr	r1, [pc, #24]	; (1d9bc <att_timeout+0x2c>)
   1d9a4:	f010 fa31 	bl	2de0a <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1d9a8:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   1d9ac:	b004      	add	sp, #16
   1d9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1d9b2:	f7ff bf89 	b.w	1d8c8 <bt_att_disconnected>
   1d9b6:	bf00      	nop
   1d9b8:	000374a4 	.word	0x000374a4
   1d9bc:	00032ec8 	.word	0x00032ec8

0001d9c0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1d9c0:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1d9c2:	4606      	mov	r6, r0
   1d9c4:	4d13      	ldr	r5, [pc, #76]	; (1da14 <find_cf_cfg+0x54>)
   1d9c6:	b140      	cbz	r0, 1d9da <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d9c8:	462a      	mov	r2, r5
   1d9ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1d9ce:	1e6c      	subs	r4, r5, #1
   1d9d0:	f010 f84e 	bl	2da70 <bt_conn_is_peer_addr_le>
   1d9d4:	b198      	cbz	r0, 1d9fe <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1d9d6:	4620      	mov	r0, r4
   1d9d8:	e00c      	b.n	1d9f4 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d9da:	4628      	mov	r0, r5
   1d9dc:	490e      	ldr	r1, [pc, #56]	; (1da18 <find_cf_cfg+0x58>)
   1d9de:	f010 fe43 	bl	2e668 <bt_addr_le_eq>
   1d9e2:	b940      	cbnz	r0, 1d9f6 <find_cf_cfg+0x36>
   1d9e4:	490c      	ldr	r1, [pc, #48]	; (1da18 <find_cf_cfg+0x58>)
   1d9e6:	f105 0010 	add.w	r0, r5, #16
   1d9ea:	f010 fe3d 	bl	2e668 <bt_addr_le_eq>
   1d9ee:	b120      	cbz	r0, 1d9fa <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1d9f0:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   1d9f4:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1d9f6:	1e68      	subs	r0, r5, #1
   1d9f8:	e7fc      	b.n	1d9f4 <find_cf_cfg+0x34>
	return NULL;
   1d9fa:	2000      	movs	r0, #0
   1d9fc:	e7fa      	b.n	1d9f4 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d9fe:	4630      	mov	r0, r6
   1da00:	7c21      	ldrb	r1, [r4, #16]
   1da02:	f104 0211 	add.w	r2, r4, #17
   1da06:	f010 f833 	bl	2da70 <bt_conn_is_peer_addr_le>
   1da0a:	2800      	cmp	r0, #0
   1da0c:	d0f5      	beq.n	1d9fa <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1da0e:	f104 0010 	add.w	r0, r4, #16
   1da12:	e7ef      	b.n	1d9f4 <find_cf_cfg+0x34>
   1da14:	200309b1 	.word	0x200309b1
   1da18:	000364d3 	.word	0x000364d3

0001da1c <find_sc_cfg>:
{
   1da1c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1da1e:	4c0e      	ldr	r4, [pc, #56]	; (1da58 <find_sc_cfg+0x3c>)
{
   1da20:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   1da22:	7823      	ldrb	r3, [r4, #0]
{
   1da24:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1da26:	4283      	cmp	r3, r0
   1da28:	d00c      	beq.n	1da44 <find_sc_cfg+0x28>
   1da2a:	7b23      	ldrb	r3, [r4, #12]
   1da2c:	42ab      	cmp	r3, r5
   1da2e:	d110      	bne.n	1da52 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1da30:	4631      	mov	r1, r6
   1da32:	480a      	ldr	r0, [pc, #40]	; (1da5c <find_sc_cfg+0x40>)
   1da34:	f010 fe18 	bl	2e668 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1da38:	b158      	cbz	r0, 1da52 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1da3a:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1da3c:	220c      	movs	r2, #12
   1da3e:	fb02 4003 	mla	r0, r2, r3, r4
   1da42:	e007      	b.n	1da54 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1da44:	1c60      	adds	r0, r4, #1
   1da46:	f010 fe0f 	bl	2e668 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1da4a:	2800      	cmp	r0, #0
   1da4c:	d0ed      	beq.n	1da2a <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1da4e:	2300      	movs	r3, #0
   1da50:	e7f4      	b.n	1da3c <find_sc_cfg+0x20>
	return NULL;
   1da52:	2000      	movs	r0, #0
}
   1da54:	bd70      	pop	{r4, r5, r6, pc}
   1da56:	bf00      	nop
   1da58:	20030e1a 	.word	0x20030e1a
   1da5c:	20030e27 	.word	0x20030e27

0001da60 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1da60:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1da62:	1c4a      	adds	r2, r1, #1
{
   1da64:	460c      	mov	r4, r1
		if (conn) {
   1da66:	4605      	mov	r5, r0
   1da68:	b968      	cbnz	r0, 1da86 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1da6a:	4610      	mov	r0, r2
   1da6c:	490d      	ldr	r1, [pc, #52]	; (1daa4 <find_ccc_cfg+0x44>)
   1da6e:	f010 fdfb 	bl	2e668 <bt_addr_le_eq>
   1da72:	b930      	cbnz	r0, 1da82 <find_ccc_cfg+0x22>
   1da74:	490b      	ldr	r1, [pc, #44]	; (1daa4 <find_ccc_cfg+0x44>)
   1da76:	f104 000b 	add.w	r0, r4, #11
   1da7a:	f010 fdf5 	bl	2e668 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1da7e:	b170      	cbz	r0, 1da9e <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1da80:	340a      	adds	r4, #10
   1da82:	4620      	mov	r0, r4
   1da84:	e00c      	b.n	1daa0 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1da86:	7809      	ldrb	r1, [r1, #0]
   1da88:	f00f fff2 	bl	2da70 <bt_conn_is_peer_addr_le>
   1da8c:	2800      	cmp	r0, #0
   1da8e:	d1f8      	bne.n	1da82 <find_ccc_cfg+0x22>
   1da90:	4628      	mov	r0, r5
   1da92:	7aa1      	ldrb	r1, [r4, #10]
   1da94:	f104 020b 	add.w	r2, r4, #11
   1da98:	f00f ffea 	bl	2da70 <bt_conn_is_peer_addr_le>
   1da9c:	e7ef      	b.n	1da7e <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   1da9e:	2000      	movs	r0, #0
}
   1daa0:	bd38      	pop	{r3, r4, r5, pc}
   1daa2:	bf00      	nop
   1daa4:	000364d3 	.word	0x000364d3

0001daa8 <read_ppcp>:
{
   1daa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1daaa:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1daac:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   1dab0:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1dab2:	4a06      	ldr	r2, [pc, #24]	; (1dacc <read_ppcp+0x24>)
   1dab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1dab8:	2308      	movs	r3, #8
   1daba:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1dabe:	9300      	str	r3, [sp, #0]
   1dac0:	446b      	add	r3, sp
   1dac2:	f010 fde5 	bl	2e690 <bt_gatt_attr_read.constprop.0>
}
   1dac6:	b005      	add	sp, #20
   1dac8:	f85d fb04 	ldr.w	pc, [sp], #4
   1dacc:	00280018 	.word	0x00280018

0001dad0 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1dad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dad4:	b085      	sub	sp, #20
   1dad6:	461e      	mov	r6, r3
   1dad8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1dadc:	4681      	mov	r9, r0
   1dade:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1dae0:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1dae4:	2b00      	cmp	r3, #0
   1dae6:	d14a      	bne.n	1db7e <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1dae8:	1e73      	subs	r3, r6, #1
   1daea:	2b01      	cmp	r3, #1
   1daec:	d84a      	bhi.n	1db84 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1daee:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1daf0:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1daf2:	7815      	ldrb	r5, [r2, #0]
   1daf4:	bf18      	it	ne
   1daf6:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1daf8:	f7ff ffb2 	bl	1da60 <find_ccc_cfg>
	if (!cfg) {
   1dafc:	4604      	mov	r4, r0
   1dafe:	b9e8      	cbnz	r0, 1db3c <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1db00:	b91d      	cbnz	r5, 1db0a <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1db02:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1db04:	b005      	add	sp, #20
   1db06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1db0a:	4641      	mov	r1, r8
   1db0c:	f7ff ffa8 	bl	1da60 <find_ccc_cfg>
		if (!cfg) {
   1db10:	4604      	mov	r4, r0
   1db12:	b958      	cbnz	r0, 1db2c <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   1db14:	4b1d      	ldr	r3, [pc, #116]	; (1db8c <bt_gatt_attr_write_ccc+0xbc>)
   1db16:	9000      	str	r0, [sp, #0]
   1db18:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1db1c:	2202      	movs	r2, #2
   1db1e:	4603      	mov	r3, r0
   1db20:	491b      	ldr	r1, [pc, #108]	; (1db90 <bt_gatt_attr_write_ccc+0xc0>)
   1db22:	f010 fe3d 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1db26:	f06f 0010 	mvn.w	r0, #16
   1db2a:	e7eb      	b.n	1db04 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1db2c:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1db30:	3001      	adds	r0, #1
   1db32:	f010 fda1 	bl	2e678 <bt_addr_le_copy>
		cfg->id = conn->id;
   1db36:	f899 3008 	ldrb.w	r3, [r9, #8]
   1db3a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1db3c:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1db40:	b98b      	cbnz	r3, 1db66 <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   1db42:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1db44:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   1db48:	42ab      	cmp	r3, r5
   1db4a:	d003      	beq.n	1db54 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   1db4c:	4641      	mov	r1, r8
   1db4e:	4638      	mov	r0, r7
   1db50:	f010 fd12 	bl	2e578 <gatt_ccc_changed>
	if (!value) {
   1db54:	2d00      	cmp	r5, #0
   1db56:	d1d4      	bne.n	1db02 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1db58:	490e      	ldr	r1, [pc, #56]	; (1db94 <bt_gatt_attr_write_ccc+0xc4>)
   1db5a:	1c60      	adds	r0, r4, #1
   1db5c:	f010 fd8c 	bl	2e678 <bt_addr_le_copy>
	cfg->id = 0U;
   1db60:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1db62:	8125      	strh	r5, [r4, #8]
}
   1db64:	e7cd      	b.n	1db02 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1db66:	462a      	mov	r2, r5
   1db68:	4639      	mov	r1, r7
   1db6a:	4648      	mov	r0, r9
   1db6c:	4798      	blx	r3
		if (write < 0) {
   1db6e:	2800      	cmp	r0, #0
   1db70:	dbc8      	blt.n	1db04 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1db72:	3801      	subs	r0, #1
   1db74:	2801      	cmp	r0, #1
   1db76:	d9e4      	bls.n	1db42 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1db78:	f06f 000d 	mvn.w	r0, #13
   1db7c:	e7c2      	b.n	1db04 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1db7e:	f06f 0006 	mvn.w	r0, #6
   1db82:	e7bf      	b.n	1db04 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1db84:	f06f 000c 	mvn.w	r0, #12
   1db88:	e7bc      	b.n	1db04 <bt_gatt_attr_write_ccc+0x34>
   1db8a:	bf00      	nop
   1db8c:	000374b7 	.word	0x000374b7
   1db90:	00032ee8 	.word	0x00032ee8
   1db94:	000364d3 	.word	0x000364d3

0001db98 <clear_cf_cfg>:
{
   1db98:	4602      	mov	r2, r0
   1db9a:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1db9c:	4907      	ldr	r1, [pc, #28]	; (1dbbc <clear_cf_cfg+0x24>)
   1db9e:	3001      	adds	r0, #1
   1dba0:	f010 fd6a 	bl	2e678 <bt_addr_le_copy>
   1dba4:	2300      	movs	r3, #0
   1dba6:	320c      	adds	r2, #12
   1dba8:	f802 3c04 	strb.w	r3, [r2, #-4]
   1dbac:	e8d2 1fef 	ldaex	r1, [r2]
   1dbb0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1dbb4:	2800      	cmp	r0, #0
   1dbb6:	d1f9      	bne.n	1dbac <clear_cf_cfg+0x14>
}
   1dbb8:	bd08      	pop	{r3, pc}
   1dbba:	bf00      	nop
   1dbbc:	000364d3 	.word	0x000364d3

0001dbc0 <sc_save>:
{
   1dbc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1dbc4:	4680      	mov	r8, r0
   1dbc6:	460f      	mov	r7, r1
   1dbc8:	4616      	mov	r6, r2
   1dbca:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1dbcc:	f7ff ff26 	bl	1da1c <find_sc_cfg>
	if (!cfg) {
   1dbd0:	4604      	mov	r4, r0
   1dbd2:	b9a8      	cbnz	r0, 1dc00 <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1dbd4:	4911      	ldr	r1, [pc, #68]	; (1dc1c <sc_save+0x5c>)
   1dbd6:	f7ff ff21 	bl	1da1c <find_sc_cfg>
		if (!cfg) {
   1dbda:	4604      	mov	r4, r0
   1dbdc:	b958      	cbnz	r0, 1dbf6 <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   1dbde:	4b10      	ldr	r3, [pc, #64]	; (1dc20 <sc_save+0x60>)
   1dbe0:	2201      	movs	r2, #1
   1dbe2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1dbe6:	490f      	ldr	r1, [pc, #60]	; (1dc24 <sc_save+0x64>)
   1dbe8:	4603      	mov	r3, r0
   1dbea:	9000      	str	r0, [sp, #0]
   1dbec:	f010 fdd8 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
}
   1dbf0:	b004      	add	sp, #16
   1dbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1dbf6:	4639      	mov	r1, r7
		cfg->id = id;
   1dbf8:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1dbfc:	f010 fd3c 	bl	2e678 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1dc00:	8922      	ldrh	r2, [r4, #8]
   1dc02:	8963      	ldrh	r3, [r4, #10]
   1dc04:	b91a      	cbnz	r2, 1dc0e <sc_save+0x4e>
   1dc06:	b92b      	cbnz	r3, 1dc14 <sc_save+0x54>
		cfg->data.start = start;
   1dc08:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1dc0a:	8165      	strh	r5, [r4, #10]
   1dc0c:	e7f0      	b.n	1dbf0 <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   1dc0e:	42b2      	cmp	r2, r6
		*start = new_start;
   1dc10:	bf88      	it	hi
   1dc12:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1dc14:	42ab      	cmp	r3, r5
   1dc16:	d2eb      	bcs.n	1dbf0 <sc_save+0x30>
   1dc18:	e7f7      	b.n	1dc0a <sc_save+0x4a>
   1dc1a:	bf00      	nop
   1dc1c:	000364d3 	.word	0x000364d3
   1dc20:	000374d1 	.word	0x000374d1
   1dc24:	00032ee8 	.word	0x00032ee8

0001dc28 <cf_write>:
{
   1dc28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1dc2c:	461f      	mov	r7, r3
   1dc2e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1dc32:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1dc34:	2b01      	cmp	r3, #1
{
   1dc36:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1dc38:	d83b      	bhi.n	1dcb2 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1dc3a:	443b      	add	r3, r7
   1dc3c:	2b01      	cmp	r3, #1
   1dc3e:	463d      	mov	r5, r7
   1dc40:	dc3a      	bgt.n	1dcb8 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1dc42:	f7ff febd 	bl	1d9c0 <find_cf_cfg>
	if (!cfg) {
   1dc46:	4604      	mov	r4, r0
   1dc48:	b990      	cbnz	r0, 1dc70 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1dc4a:	f7ff feb9 	bl	1d9c0 <find_cf_cfg>
	if (!cfg) {
   1dc4e:	4604      	mov	r4, r0
   1dc50:	b970      	cbnz	r0, 1dc70 <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   1dc52:	4b1c      	ldr	r3, [pc, #112]	; (1dcc4 <cf_write+0x9c>)
   1dc54:	2202      	movs	r2, #2
   1dc56:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1dc5a:	491b      	ldr	r1, [pc, #108]	; (1dcc8 <cf_write+0xa0>)
   1dc5c:	4603      	mov	r3, r0
   1dc5e:	9000      	str	r0, [sp, #0]
   1dc60:	f010 fd9e 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1dc64:	f06f 0510 	mvn.w	r5, #16
}
   1dc68:	4628      	mov	r0, r5
   1dc6a:	b004      	add	sp, #16
   1dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1dc70:	b197      	cbz	r7, 1dc98 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   1dc72:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1dc74:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1dc76:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1dc7a:	fa21 f003 	lsr.w	r0, r1, r3
   1dc7e:	07c7      	lsls	r7, r0, #31
   1dc80:	d503      	bpl.n	1dc8a <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1dc82:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1dc86:	07c0      	lsls	r0, r0, #31
   1dc88:	d519      	bpl.n	1dcbe <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1dc8a:	3301      	adds	r3, #1
   1dc8c:	2b03      	cmp	r3, #3
   1dc8e:	d1f4      	bne.n	1dc7a <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1dc90:	f002 0207 	and.w	r2, r2, #7
   1dc94:	4311      	orrs	r1, r2
   1dc96:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1dc98:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1dc9c:	1c60      	adds	r0, r4, #1
   1dc9e:	f010 fceb 	bl	2e678 <bt_addr_le_copy>
	cfg->id = conn->id;
   1dca2:	4620      	mov	r0, r4
   1dca4:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1dca6:	2100      	movs	r1, #0
	cfg->id = conn->id;
   1dca8:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1dcac:	f010 fda8 	bl	2e800 <atomic_set_bit>
	return len;
   1dcb0:	e7da      	b.n	1dc68 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1dcb2:	f06f 0506 	mvn.w	r5, #6
   1dcb6:	e7d7      	b.n	1dc68 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1dcb8:	f06f 050c 	mvn.w	r5, #12
   1dcbc:	e7d4      	b.n	1dc68 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1dcbe:	f06f 0512 	mvn.w	r5, #18
   1dcc2:	e7d1      	b.n	1dc68 <cf_write+0x40>
   1dcc4:	000374f0 	.word	0x000374f0
   1dcc8:	00032ee8 	.word	0x00032ee8

0001dccc <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1dccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1dcd0:	4b28      	ldr	r3, [pc, #160]	; (1dd74 <disconnected_cb+0xa8>)
{
   1dcd2:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1dcd4:	6882      	ldr	r2, [r0, #8]
{
   1dcd6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1dcd8:	429a      	cmp	r2, r3
   1dcda:	d12b      	bne.n	1dd34 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1dcdc:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1dcde:	8aab      	ldrh	r3, [r5, #20]
   1dce0:	b343      	cbz	r3, 1dd34 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1dce2:	f04f 0800 	mov.w	r8, #0
   1dce6:	1c6c      	adds	r4, r5, #1
   1dce8:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   1dcec:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1dcf0:	b19b      	cbz	r3, 1dd1a <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1dcf2:	4622      	mov	r2, r4
   1dcf4:	4630      	mov	r0, r6
   1dcf6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1dcfa:	f00f feb9 	bl	2da70 <bt_conn_is_peer_addr_le>
   1dcfe:	b9e0      	cbnz	r0, 1dd3a <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1dd00:	4621      	mov	r1, r4
   1dd02:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1dd06:	f7fe faff 	bl	1c308 <bt_conn_lookup_addr_le>
			if (tmp) {
   1dd0a:	b130      	cbz	r0, 1dd1a <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1dd0c:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   1dd0e:	2b07      	cmp	r3, #7
   1dd10:	bf08      	it	eq
   1dd12:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   1dd16:	f00f fe1e 	bl	2d956 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1dd1a:	340a      	adds	r4, #10
   1dd1c:	454c      	cmp	r4, r9
   1dd1e:	d1e5      	bne.n	1dcec <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1dd20:	f1b8 0f00 	cmp.w	r8, #0
   1dd24:	d106      	bne.n	1dd34 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1dd26:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1dd28:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   1dd2c:	b113      	cbz	r3, 1dd34 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1dd2e:	4641      	mov	r1, r8
   1dd30:	4638      	mov	r0, r7
   1dd32:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1dd34:	2001      	movs	r0, #1
   1dd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dd3a:	f106 0a88 	add.w	sl, r6, #136	; 0x88
   1dd3e:	4651      	mov	r1, sl
   1dd40:	7a30      	ldrb	r0, [r6, #8]
   1dd42:	f00f fb37 	bl	2d3b4 <bt_addr_le_is_bonded>
   1dd46:	b978      	cbnz	r0, 1dd68 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1dd48:	4b0b      	ldr	r3, [pc, #44]	; (1dd78 <disconnected_cb+0xac>)
   1dd4a:	429d      	cmp	r5, r3
   1dd4c:	d102      	bne.n	1dd54 <disconnected_cb+0x88>
					sc_clear(conn);
   1dd4e:	4630      	mov	r0, r6
   1dd50:	f010 fd35 	bl	2e7be <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1dd54:	4620      	mov	r0, r4
   1dd56:	4909      	ldr	r1, [pc, #36]	; (1dd7c <disconnected_cb+0xb0>)
   1dd58:	f010 fc8e 	bl	2e678 <bt_addr_le_copy>
	cfg->id = 0U;
   1dd5c:	2300      	movs	r3, #0
   1dd5e:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   1dd62:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   1dd66:	e7d8      	b.n	1dd1a <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1dd68:	4651      	mov	r1, sl
   1dd6a:	4620      	mov	r0, r4
   1dd6c:	f010 fc84 	bl	2e678 <bt_addr_le_copy>
   1dd70:	e7d3      	b.n	1dd1a <disconnected_cb+0x4e>
   1dd72:	bf00      	nop
   1dd74:	0001dad1 	.word	0x0001dad1
   1dd78:	200085bc 	.word	0x200085bc
   1dd7c:	000364d3 	.word	0x000364d3

0001dd80 <sc_indicate_rsp>:
{
   1dd80:	b510      	push	{r4, lr}
   1dd82:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dd84:	4811      	ldr	r0, [pc, #68]	; (1ddcc <sc_indicate_rsp+0x4c>)
   1dd86:	e8d0 3fef 	ldaex	r3, [r0]
   1dd8a:	f023 0302 	bic.w	r3, r3, #2
   1dd8e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1dd92:	2a00      	cmp	r2, #0
   1dd94:	d1f7      	bne.n	1dd86 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dd96:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1dd9a:	07da      	lsls	r2, r3, #31
   1dd9c:	d504      	bpl.n	1dda8 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1dd9e:	2200      	movs	r2, #0
   1dda0:	2300      	movs	r3, #0
   1dda2:	3830      	subs	r0, #48	; 0x30
   1dda4:	f008 f874 	bl	25e90 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1dda8:	4620      	mov	r0, r4
   1ddaa:	f010 fbb8 	bl	2e51e <bt_att_fixed_chan_only>
   1ddae:	b160      	cbz	r0, 1ddca <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   1ddb0:	4620      	mov	r0, r4
   1ddb2:	f7ff fe05 	bl	1d9c0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ddb6:	b140      	cbz	r0, 1ddca <sc_indicate_rsp+0x4a>
   1ddb8:	7a03      	ldrb	r3, [r0, #8]
   1ddba:	07db      	lsls	r3, r3, #31
   1ddbc:	d505      	bpl.n	1ddca <sc_indicate_rsp+0x4a>
}
   1ddbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ddc2:	2100      	movs	r1, #0
   1ddc4:	300c      	adds	r0, #12
   1ddc6:	f010 bd1b 	b.w	2e800 <atomic_set_bit>
}
   1ddca:	bd10      	pop	{r4, pc}
   1ddcc:	2000a120 	.word	0x2000a120

0001ddd0 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ddd0:	2201      	movs	r2, #1
{
   1ddd2:	b510      	push	{r4, lr}
   1ddd4:	4b1b      	ldr	r3, [pc, #108]	; (1de44 <bt_gatt_init+0x74>)
   1ddd6:	e8d3 1fef 	ldaex	r1, [r3]
   1ddda:	2900      	cmp	r1, #0
   1dddc:	d103      	bne.n	1dde6 <bt_gatt_init+0x16>
   1ddde:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1dde2:	2800      	cmp	r0, #0
   1dde4:	d1f7      	bne.n	1ddd6 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1dde6:	d12c      	bne.n	1de42 <bt_gatt_init+0x72>
   1dde8:	4b17      	ldr	r3, [pc, #92]	; (1de48 <bt_gatt_init+0x78>)
   1ddea:	e8d3 1fef 	ldaex	r1, [r3]
   1ddee:	2900      	cmp	r1, #0
   1ddf0:	d103      	bne.n	1ddfa <bt_gatt_init+0x2a>
   1ddf2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1ddf6:	2800      	cmp	r0, #0
   1ddf8:	d1f7      	bne.n	1ddea <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1ddfa:	d108      	bne.n	1de0e <bt_gatt_init+0x3e>
   1ddfc:	2000      	movs	r0, #0
   1ddfe:	4913      	ldr	r1, [pc, #76]	; (1de4c <bt_gatt_init+0x7c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1de00:	4a13      	ldr	r2, [pc, #76]	; (1de50 <bt_gatt_init+0x80>)
   1de02:	880b      	ldrh	r3, [r1, #0]
   1de04:	4c13      	ldr	r4, [pc, #76]	; (1de54 <bt_gatt_init+0x84>)
   1de06:	42a2      	cmp	r2, r4
   1de08:	d315      	bcc.n	1de36 <bt_gatt_init+0x66>
   1de0a:	b100      	cbz	r0, 1de0e <bt_gatt_init+0x3e>
   1de0c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1de0e:	2200      	movs	r2, #0
   1de10:	4b11      	ldr	r3, [pc, #68]	; (1de58 <bt_gatt_init+0x88>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1de12:	4912      	ldr	r1, [pc, #72]	; (1de5c <bt_gatt_init+0x8c>)
   1de14:	4812      	ldr	r0, [pc, #72]	; (1de60 <bt_gatt_init+0x90>)
	list->tail = NULL;
   1de16:	e9c3 2200 	strd	r2, r2, [r3]
   1de1a:	f013 f8ef 	bl	30ffc <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1de1e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1de22:	2300      	movs	r3, #0
   1de24:	480e      	ldr	r0, [pc, #56]	; (1de60 <bt_gatt_init+0x90>)
   1de26:	f7fb fa53 	bl	192d0 <bt_long_wq_schedule>
}
   1de2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1de2e:	490d      	ldr	r1, [pc, #52]	; (1de64 <bt_gatt_init+0x94>)
   1de30:	480d      	ldr	r0, [pc, #52]	; (1de68 <bt_gatt_init+0x98>)
   1de32:	f013 b8e3 	b.w	30ffc <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1de36:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1de38:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   1de3a:	4403      	add	r3, r0
   1de3c:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1de3e:	2001      	movs	r0, #1
   1de40:	e7e1      	b.n	1de06 <bt_gatt_init+0x36>
}
   1de42:	bd10      	pop	{r4, pc}
   1de44:	200309d4 	.word	0x200309d4
   1de48:	200309d0 	.word	0x200309d0
   1de4c:	20030e32 	.word	0x20030e32
   1de50:	00032e78 	.word	0x00032e78
   1de54:	00032e90 	.word	0x00032e90
   1de58:	200309d8 	.word	0x200309d8
   1de5c:	0002e8ed 	.word	0x0002e8ed
   1de60:	2000a078 	.word	0x2000a078
   1de64:	0001e28d 	.word	0x0001e28d
   1de68:	2000a0f0 	.word	0x2000a0f0

0001de6c <bt_gatt_attr_get_handle>:
	if (!attr) {
   1de6c:	4603      	mov	r3, r0
{
   1de6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1de72:	b148      	cbz	r0, 1de88 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1de74:	8a00      	ldrh	r0, [r0, #16]
   1de76:	b938      	cbnz	r0, 1de88 <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
   1de78:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1de7a:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1de7e:	4911      	ldr	r1, [pc, #68]	; (1dec4 <bt_gatt_attr_get_handle+0x58>)
   1de80:	f8df e044 	ldr.w	lr, [pc, #68]	; 1dec8 <bt_gatt_attr_get_handle+0x5c>
   1de84:	4571      	cmp	r1, lr
   1de86:	d301      	bcc.n	1de8c <bt_gatt_attr_get_handle+0x20>
}
   1de88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1de8c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1de90:	42bb      	cmp	r3, r7
   1de92:	d304      	bcc.n	1de9e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1de94:	fb0c 7206 	mla	r2, ip, r6, r7
   1de98:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1de9a:	4293      	cmp	r3, r2
   1de9c:	d90e      	bls.n	1debc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1de9e:	4434      	add	r4, r6
   1dea0:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1dea2:	4614      	mov	r4, r2
   1dea4:	3108      	adds	r1, #8
   1dea6:	e7ed      	b.n	1de84 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1dea8:	fb0c 7805 	mla	r8, ip, r5, r7
   1deac:	4543      	cmp	r3, r8
   1deae:	d007      	beq.n	1dec0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1deb0:	3501      	adds	r5, #1
   1deb2:	1962      	adds	r2, r4, r5
   1deb4:	42b5      	cmp	r5, r6
   1deb6:	b292      	uxth	r2, r2
   1deb8:	d1f6      	bne.n	1dea8 <bt_gatt_attr_get_handle+0x3c>
   1deba:	e7f2      	b.n	1dea2 <bt_gatt_attr_get_handle+0x36>
   1debc:	2500      	movs	r5, #0
   1debe:	e7f8      	b.n	1deb2 <bt_gatt_attr_get_handle+0x46>
   1dec0:	4610      	mov	r0, r2
   1dec2:	e7e1      	b.n	1de88 <bt_gatt_attr_get_handle+0x1c>
   1dec4:	00032e78 	.word	0x00032e78
   1dec8:	00032e90 	.word	0x00032e90

0001decc <bt_gatt_foreach_attr_type>:
{
   1decc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ded0:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1ded2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1ded6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1deda:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   1dedc:	2d00      	cmp	r5, #0
   1dede:	bf08      	it	eq
   1dee0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1dee2:	4b24      	ldr	r3, [pc, #144]	; (1df74 <bt_gatt_foreach_attr_type+0xa8>)
{
   1dee4:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1dee6:	881b      	ldrh	r3, [r3, #0]
{
   1dee8:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1deea:	4283      	cmp	r3, r0
   1deec:	d23c      	bcs.n	1df68 <bt_gatt_foreach_attr_type+0x9c>
}
   1deee:	b003      	add	sp, #12
   1def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1def4:	6873      	ldr	r3, [r6, #4]
   1def6:	4423      	add	r3, r4
   1def8:	42bb      	cmp	r3, r7
   1defa:	d232      	bcs.n	1df62 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1defc:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1defe:	3608      	adds	r6, #8
   1df00:	4b1d      	ldr	r3, [pc, #116]	; (1df78 <bt_gatt_foreach_attr_type+0xac>)
   1df02:	429e      	cmp	r6, r3
   1df04:	d3f6      	bcc.n	1def4 <bt_gatt_foreach_attr_type+0x28>
   1df06:	e7f2      	b.n	1deee <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1df08:	4640      	mov	r0, r8
   1df0a:	5889      	ldr	r1, [r1, r2]
   1df0c:	9301      	str	r3, [sp, #4]
   1df0e:	f00f f904 	bl	2d11a <bt_uuid_cmp>
   1df12:	9b01      	ldr	r3, [sp, #4]
   1df14:	b190      	cbz	r0, 1df3c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1df16:	3401      	adds	r4, #1
   1df18:	f10a 0a01 	add.w	sl, sl, #1
   1df1c:	b2a4      	uxth	r4, r4
   1df1e:	6873      	ldr	r3, [r6, #4]
   1df20:	4553      	cmp	r3, sl
   1df22:	d9ec      	bls.n	1defe <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1df24:	9b00      	ldr	r3, [sp, #0]
   1df26:	429c      	cmp	r4, r3
   1df28:	d8e1      	bhi.n	1deee <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1df2a:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1df2c:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1df2e:	d3f2      	bcc.n	1df16 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1df30:	fb0b f20a 	mul.w	r2, fp, sl
   1df34:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1df36:	f1b8 0f00 	cmp.w	r8, #0
   1df3a:	d1e5      	bne.n	1df08 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1df3c:	f1b9 0f00 	cmp.w	r9, #0
   1df40:	d10b      	bne.n	1df5a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1df42:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1df44:	4618      	mov	r0, r3
	*num_matches -= 1;
   1df46:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1df48:	4621      	mov	r1, r4
   1df4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1df4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1df4e:	4798      	blx	r3
	if (!*num_matches) {
   1df50:	2d00      	cmp	r5, #0
   1df52:	d0cc      	beq.n	1deee <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1df54:	2800      	cmp	r0, #0
   1df56:	d1de      	bne.n	1df16 <bt_gatt_foreach_attr_type+0x4a>
   1df58:	e7c9      	b.n	1deee <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1df5a:	68da      	ldr	r2, [r3, #12]
   1df5c:	4591      	cmp	r9, r2
   1df5e:	d1da      	bne.n	1df16 <bt_gatt_foreach_attr_type+0x4a>
   1df60:	e7ef      	b.n	1df42 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1df62:	f04f 0a00 	mov.w	sl, #0
   1df66:	e7da      	b.n	1df1e <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
   1df68:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1df6a:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1df6e:	4e03      	ldr	r6, [pc, #12]	; (1df7c <bt_gatt_foreach_attr_type+0xb0>)
   1df70:	e7c6      	b.n	1df00 <bt_gatt_foreach_attr_type+0x34>
   1df72:	bf00      	nop
   1df74:	20030e32 	.word	0x20030e32
   1df78:	00032e90 	.word	0x00032e90
   1df7c:	00032e78 	.word	0x00032e78

0001df80 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   1df80:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   1df82:	b510      	push	{r4, lr}
   1df84:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1df86:	aa20      	add	r2, sp, #128	; 0x80
   1df88:	a904      	add	r1, sp, #16
   1df8a:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   1df8c:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1df90:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1df94:	f00d f91c 	bl	2b1d0 <tc_cmac_setup>
   1df98:	4603      	mov	r3, r0
   1df9a:	b948      	cbnz	r0, 1dfb0 <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   1df9c:	4a17      	ldr	r2, [pc, #92]	; (1dffc <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   1df9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1dfa2:	4917      	ldr	r1, [pc, #92]	; (1e000 <db_hash_gen.constprop.0+0x80>)
   1dfa4:	2201      	movs	r2, #1
   1dfa6:	9300      	str	r3, [sp, #0]
   1dfa8:	f010 fbfa 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
}
   1dfac:	b04c      	add	sp, #304	; 0x130
   1dfae:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1dfb0:	ab08      	add	r3, sp, #32
   1dfb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dfb6:	2001      	movs	r0, #1
   1dfb8:	4a12      	ldr	r2, [pc, #72]	; (1e004 <db_hash_gen.constprop.0+0x84>)
   1dfba:	f010 fc8c 	bl	2e8d6 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1dfbe:	4812      	ldr	r0, [pc, #72]	; (1e008 <db_hash_gen.constprop.0+0x88>)
   1dfc0:	a908      	add	r1, sp, #32
   1dfc2:	f00d f99a 	bl	2b2fa <tc_cmac_final>
   1dfc6:	4603      	mov	r3, r0
   1dfc8:	b908      	cbnz	r0, 1dfce <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   1dfca:	4a10      	ldr	r2, [pc, #64]	; (1e00c <db_hash_gen.constprop.0+0x8c>)
   1dfcc:	e7e7      	b.n	1df9e <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1dfce:	2208      	movs	r2, #8
   1dfd0:	4b0d      	ldr	r3, [pc, #52]	; (1e008 <db_hash_gen.constprop.0+0x88>)
   1dfd2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1dfd6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1dfd8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   1dfdc:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1dfde:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1dfe2:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1dfe4:	d1f7      	bne.n	1dfd6 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dfe6:	4b0a      	ldr	r3, [pc, #40]	; (1e010 <db_hash_gen.constprop.0+0x90>)
   1dfe8:	e8d3 1fef 	ldaex	r1, [r3]
   1dfec:	f041 0104 	orr.w	r1, r1, #4
   1dff0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1dff4:	2a00      	cmp	r2, #0
   1dff6:	d0d9      	beq.n	1dfac <db_hash_gen.constprop.0+0x2c>
   1dff8:	e7f6      	b.n	1dfe8 <db_hash_gen.constprop.0+0x68>
   1dffa:	bf00      	nop
   1dffc:	0003751c 	.word	0x0003751c
   1e000:	00032ee8 	.word	0x00032ee8
   1e004:	0002e5c3 	.word	0x0002e5c3
   1e008:	2000a068 	.word	0x2000a068
   1e00c:	00037535 	.word	0x00037535
   1e010:	2000a120 	.word	0x2000a120

0001e014 <db_hash_read>:
{
   1e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e018:	4914      	ldr	r1, [pc, #80]	; (1e06c <db_hash_read+0x58>)
{
   1e01a:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e01c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1e020:	4614      	mov	r4, r2
   1e022:	461d      	mov	r5, r3
   1e024:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e028:	f013 f80a 	bl	31040 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e02c:	4b10      	ldr	r3, [pc, #64]	; (1e070 <db_hash_read+0x5c>)
   1e02e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1e032:	0759      	lsls	r1, r3, #29
   1e034:	d401      	bmi.n	1e03a <db_hash_read+0x26>
		db_hash_gen(true);
   1e036:	f7ff ffa3 	bl	1df80 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   1e03a:	4630      	mov	r0, r6
   1e03c:	f7ff fcc0 	bl	1d9c0 <find_cf_cfg>
	if (cfg &&
   1e040:	b150      	cbz	r0, 1e058 <db_hash_read+0x44>
   1e042:	7a03      	ldrb	r3, [r0, #8]
   1e044:	07da      	lsls	r2, r3, #31
   1e046:	d507      	bpl.n	1e058 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1e048:	300c      	adds	r0, #12
   1e04a:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   1e04e:	07db      	lsls	r3, r3, #31
   1e050:	d402      	bmi.n	1e058 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1e052:	2101      	movs	r1, #1
   1e054:	f010 fbd4 	bl	2e800 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1e058:	2310      	movs	r3, #16
   1e05a:	463a      	mov	r2, r7
   1e05c:	9306      	str	r3, [sp, #24]
   1e05e:	4629      	mov	r1, r5
   1e060:	4620      	mov	r0, r4
}
   1e062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1e066:	4b03      	ldr	r3, [pc, #12]	; (1e074 <db_hash_read+0x60>)
   1e068:	f010 bb12 	b.w	2e690 <bt_gatt_attr_read.constprop.0>
   1e06c:	2000a0a8 	.word	0x2000a0a8
   1e070:	2000a120 	.word	0x2000a120
   1e074:	2000a068 	.word	0x2000a068

0001e078 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   1e078:	2300      	movs	r3, #0
{
   1e07a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1e07c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1e07e:	f7ff fef5 	bl	1de6c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1e082:	1c41      	adds	r1, r0, #1
   1e084:	b289      	uxth	r1, r1
   1e086:	4608      	mov	r0, r1
   1e088:	4a03      	ldr	r2, [pc, #12]	; (1e098 <bt_gatt_attr_next+0x20>)
   1e08a:	ab01      	add	r3, sp, #4
   1e08c:	f010 fc23 	bl	2e8d6 <bt_gatt_foreach_attr>
}
   1e090:	9801      	ldr	r0, [sp, #4]
   1e092:	b003      	add	sp, #12
   1e094:	f85d fb04 	ldr.w	pc, [sp], #4
   1e098:	0002e573 	.word	0x0002e573

0001e09c <gatt_indicate>:
{
   1e09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e0a0:	4615      	mov	r5, r2
   1e0a2:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e0a4:	2294      	movs	r2, #148	; 0x94
   1e0a6:	6869      	ldr	r1, [r5, #4]
{
   1e0a8:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e0aa:	f010 fc21 	bl	2e8f0 <bt_gatt_check_perm>
   1e0ae:	4680      	mov	r8, r0
   1e0b0:	b178      	cbz	r0, 1e0d2 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   1e0b2:	4b35      	ldr	r3, [pc, #212]	; (1e188 <gatt_indicate+0xec>)
   1e0b4:	2202      	movs	r2, #2
   1e0b6:	9302      	str	r3, [sp, #8]
   1e0b8:	2300      	movs	r3, #0
   1e0ba:	4934      	ldr	r1, [pc, #208]	; (1e18c <gatt_indicate+0xf0>)
   1e0bc:	4618      	mov	r0, r3
   1e0be:	e9cd 3300 	strd	r3, r3, [sp]
   1e0c2:	f010 fb6d 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1e0c6:	f04f 35ff 	mov.w	r5, #4294967295
}
   1e0ca:	4628      	mov	r0, r5
   1e0cc:	b004      	add	sp, #16
   1e0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1e0d2:	2202      	movs	r2, #2
   1e0d4:	4638      	mov	r0, r7
   1e0d6:	6869      	ldr	r1, [r5, #4]
   1e0d8:	f010 fc3e 	bl	2e958 <bt_gatt_is_subscribed>
   1e0dc:	4603      	mov	r3, r0
   1e0de:	b950      	cbnz	r0, 1e0f6 <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1e0e0:	4a2b      	ldr	r2, [pc, #172]	; (1e190 <gatt_indicate+0xf4>)
   1e0e2:	492a      	ldr	r1, [pc, #168]	; (1e18c <gatt_indicate+0xf0>)
   1e0e4:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1e0e8:	9000      	str	r0, [sp, #0]
   1e0ea:	2202      	movs	r2, #2
   1e0ec:	f010 fb58 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1e0f0:	f06f 0515 	mvn.w	r5, #21
   1e0f4:	e7e9      	b.n	1e0ca <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1e0f6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1e0fa:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1e0fc:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1e0fe:	f7ff fb61 	bl	1d7c4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1e102:	3602      	adds	r6, #2
	if (!req) {
   1e104:	4604      	mov	r4, r0
   1e106:	b1c8      	cbz	r0, 1e13c <gatt_indicate+0xa0>
	req->att_op = op;
   1e108:	211d      	movs	r1, #29
	req->func = func;
   1e10a:	4b22      	ldr	r3, [pc, #136]	; (1e194 <gatt_indicate+0xf8>)
	req->len = len;
   1e10c:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1e10e:	4632      	mov	r2, r6
	req->att_op = op;
   1e110:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1e112:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1e116:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1e118:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1e11a:	4638      	mov	r0, r7
   1e11c:	f7ff f886 	bl	1d22c <bt_att_create_pdu>
	if (!buf) {
   1e120:	4606      	mov	r6, r0
   1e122:	b970      	cbnz	r0, 1e142 <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   1e124:	4b1c      	ldr	r3, [pc, #112]	; (1e198 <gatt_indicate+0xfc>)
   1e126:	9000      	str	r0, [sp, #0]
   1e128:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e12c:	2202      	movs	r2, #2
   1e12e:	4603      	mov	r3, r0
   1e130:	4916      	ldr	r1, [pc, #88]	; (1e18c <gatt_indicate+0xf0>)
   1e132:	f010 fb35 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   1e136:	4620      	mov	r0, r4
   1e138:	f7ff fb68 	bl	1d80c <bt_att_req_free>
		return -ENOMEM;
   1e13c:	f06f 050b 	mvn.w	r5, #11
   1e140:	e7c3      	b.n	1e0ca <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1e142:	2301      	movs	r3, #1
   1e144:	4642      	mov	r2, r8
   1e146:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1e148:	f106 0a0c 	add.w	sl, r6, #12
   1e14c:	f010 fa0a 	bl	2e564 <bt_att_set_tx_meta_data>
   1e150:	2102      	movs	r1, #2
   1e152:	4650      	mov	r0, sl
   1e154:	f011 f8dd 	bl	2f312 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1e158:	4680      	mov	r8, r0
   1e15a:	f828 9b02 	strh.w	r9, [r8], #2
   1e15e:	8aa9      	ldrh	r1, [r5, #20]
   1e160:	4650      	mov	r0, sl
   1e162:	f011 f8d6 	bl	2f312 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e166:	8aaa      	ldrh	r2, [r5, #20]
   1e168:	6929      	ldr	r1, [r5, #16]
   1e16a:	4640      	mov	r0, r8
   1e16c:	f013 facf 	bl	3170e <memcpy>
	err = bt_att_req_send(conn, req);
   1e170:	4621      	mov	r1, r4
   1e172:	4638      	mov	r0, r7
	req->buf = buf;
   1e174:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1e176:	f010 f9bd 	bl	2e4f4 <bt_att_req_send>
	if (err) {
   1e17a:	4605      	mov	r5, r0
   1e17c:	2800      	cmp	r0, #0
   1e17e:	d0a4      	beq.n	1e0ca <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1e180:	4620      	mov	r0, r4
   1e182:	f7ff fb43 	bl	1d80c <bt_att_req_free>
   1e186:	e7a0      	b.n	1e0ca <gatt_indicate+0x2e>
   1e188:	0003754e 	.word	0x0003754e
   1e18c:	00032ee8 	.word	0x00032ee8
   1e190:	00037564 	.word	0x00037564
   1e194:	0002e595 	.word	0x0002e595
   1e198:	0003758f 	.word	0x0003758f

0001e19c <bt_gatt_indicate>:
{
   1e19c:	b530      	push	{r4, r5, lr}
   1e19e:	4604      	mov	r4, r0
   1e1a0:	460d      	mov	r5, r1
   1e1a2:	b08b      	sub	sp, #44	; 0x2c
   1e1a4:	4b36      	ldr	r3, [pc, #216]	; (1e280 <bt_gatt_indicate+0xe4>)
   1e1a6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e1aa:	075a      	lsls	r2, r3, #29
   1e1ac:	d561      	bpl.n	1e272 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e1ae:	b110      	cbz	r0, 1e1b6 <bt_gatt_indicate+0x1a>
   1e1b0:	7b43      	ldrb	r3, [r0, #13]
   1e1b2:	2b07      	cmp	r3, #7
   1e1b4:	d160      	bne.n	1e278 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1e1b6:	6868      	ldr	r0, [r5, #4]
   1e1b8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e1ba:	f7ff fe57 	bl	1de6c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1e1be:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e1c0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e1c4:	b33a      	cbz	r2, 1e216 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e1c6:	a905      	add	r1, sp, #20
   1e1c8:	9102      	str	r1, [sp, #8]
   1e1ca:	492e      	ldr	r1, [pc, #184]	; (1e284 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
   1e1cc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e1ce:	9101      	str	r1, [sp, #4]
   1e1d0:	2101      	movs	r1, #1
   1e1d2:	9100      	str	r1, [sp, #0]
   1e1d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1e1d8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e1da:	f7ff fe77 	bl	1decc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e1de:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e1e0:	b91b      	cbnz	r3, 1e1ea <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1e1e2:	f06f 0001 	mvn.w	r0, #1
}
   1e1e6:	b00b      	add	sp, #44	; 0x2c
   1e1e8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1e1ea:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e1ec:	9b05      	ldr	r3, [sp, #20]
   1e1ee:	a904      	add	r1, sp, #16
   1e1f0:	6818      	ldr	r0, [r3, #0]
   1e1f2:	2300      	movs	r3, #0
   1e1f4:	f88d 3010 	strb.w	r3, [sp, #16]
   1e1f8:	f642 0303 	movw	r3, #10243	; 0x2803
   1e1fc:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e200:	f00e ff8b 	bl	2d11a <bt_uuid_cmp>
   1e204:	b970      	cbnz	r0, 1e224 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e206:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1e208:	68c3      	ldr	r3, [r0, #12]
   1e20a:	799b      	ldrb	r3, [r3, #6]
   1e20c:	069b      	lsls	r3, r3, #26
   1e20e:	d405      	bmi.n	1e21c <bt_gatt_indicate+0x80>
			return -EINVAL;
   1e210:	f06f 0015 	mvn.w	r0, #21
   1e214:	e7e7      	b.n	1e1e6 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1e216:	2800      	cmp	r0, #0
   1e218:	d1e8      	bne.n	1e1ec <bt_gatt_indicate+0x50>
   1e21a:	e7e2      	b.n	1e1e2 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e21c:	f010 fb14 	bl	2e848 <bt_gatt_attr_value_handle>
   1e220:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1e224:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1e228:	b13c      	cbz	r4, 1e23a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1e22a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1e22c:	4601      	mov	r1, r0
   1e22e:	462a      	mov	r2, r5
   1e230:	4620      	mov	r0, r4
		params->_ref = 1;
   1e232:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1e234:	f7ff ff32 	bl	1e09c <gatt_indicate>
   1e238:	e7d5      	b.n	1e1e6 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1e23a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e23e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1e240:	2302      	movs	r3, #2
   1e242:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e246:	f642 1302 	movw	r3, #10498	; 0x2902
   1e24a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e24e:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1e250:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e252:	9302      	str	r3, [sp, #8]
   1e254:	4b0c      	ldr	r3, [pc, #48]	; (1e288 <bt_gatt_indicate+0xec>)
   1e256:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e25a:	9301      	str	r3, [sp, #4]
   1e25c:	2301      	movs	r3, #1
   1e25e:	aa04      	add	r2, sp, #16
   1e260:	9300      	str	r3, [sp, #0]
   1e262:	4623      	mov	r3, r4
	data.ind_params = params;
   1e264:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e266:	f88d 4010 	strb.w	r4, [sp, #16]
   1e26a:	f7ff fe2f 	bl	1decc <bt_gatt_foreach_attr_type>
	return data.err;
   1e26e:	9807      	ldr	r0, [sp, #28]
   1e270:	e7b9      	b.n	1e1e6 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1e272:	f06f 000a 	mvn.w	r0, #10
   1e276:	e7b6      	b.n	1e1e6 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1e278:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e27c:	e7b3      	b.n	1e1e6 <bt_gatt_indicate+0x4a>
   1e27e:	bf00      	nop
   1e280:	200080cc 	.word	0x200080cc
   1e284:	0002e5bb 	.word	0x0002e5bb
   1e288:	0001e5c5 	.word	0x0001e5c5

0001e28c <sc_process>:
{
   1e28c:	4603      	mov	r3, r0
   1e28e:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e290:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e294:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e298:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e29a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e29e:	e8d4 2fef 	ldaex	r2, [r4]
   1e2a2:	f022 0201 	bic.w	r2, r2, #1
   1e2a6:	e8c4 2fe0 	stlex	r0, r2, [r4]
   1e2aa:	2800      	cmp	r0, #0
   1e2ac:	d1f7      	bne.n	1e29e <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e2ae:	4a0d      	ldr	r2, [pc, #52]	; (1e2e4 <sc_process+0x58>)
	sc->start = 0U;
   1e2b0:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e2b2:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1e2b6:	4a0c      	ldr	r2, [pc, #48]	; (1e2e8 <sc_process+0x5c>)
	sc->start = 0U;
   1e2b8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
   1e2bc:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1e2c0:	aa01      	add	r2, sp, #4
   1e2c2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1e2c6:	2204      	movs	r2, #4
	sc->end = 0U;
   1e2c8:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   1e2cc:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1e2d0:	f7ff ff64 	bl	1e19c <bt_gatt_indicate>
   1e2d4:	b918      	cbnz	r0, 1e2de <sc_process+0x52>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1e2d6:	2101      	movs	r1, #1
   1e2d8:	4620      	mov	r0, r4
   1e2da:	f010 fa91 	bl	2e800 <atomic_set_bit>
}
   1e2de:	b002      	add	sp, #8
   1e2e0:	bd10      	pop	{r4, pc}
   1e2e2:	bf00      	nop
   1e2e4:	00033c60 	.word	0x00033c60
   1e2e8:	0001dd81 	.word	0x0001dd81

0001e2ec <update_ccc>:
{
   1e2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e2f0:	4b3e      	ldr	r3, [pc, #248]	; (1e3ec <update_ccc+0x100>)
{
   1e2f2:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   1e2f4:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e2f6:	6882      	ldr	r2, [r0, #8]
{
   1e2f8:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e2fa:	429a      	cmp	r2, r3
{
   1e2fc:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e2fe:	d170      	bne.n	1e3e2 <update_ccc+0xf6>
	ccc = attr->user_data;
   1e300:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e304:	f108 0601 	add.w	r6, r8, #1
   1e308:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   1e30c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e310:	b1d3      	cbz	r3, 1e348 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1e312:	4632      	mov	r2, r6
   1e314:	4620      	mov	r0, r4
   1e316:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   1e31a:	f00f fba9 	bl	2da70 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1e31e:	b198      	cbz	r0, 1e348 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1e320:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e324:	4629      	mov	r1, r5
   1e326:	4620      	mov	r0, r4
   1e328:	f010 fae2 	bl	2e8f0 <bt_gatt_check_perm>
		if (err) {
   1e32c:	b308      	cbz	r0, 1e372 <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1e32e:	2803      	cmp	r0, #3
   1e330:	d10e      	bne.n	1e350 <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   1e332:	4b2f      	ldr	r3, [pc, #188]	; (1e3f0 <update_ccc+0x104>)
   1e334:	2202      	movs	r2, #2
   1e336:	9302      	str	r3, [sp, #8]
   1e338:	2300      	movs	r3, #0
   1e33a:	492e      	ldr	r1, [pc, #184]	; (1e3f4 <update_ccc+0x108>)
   1e33c:	4618      	mov	r0, r3
   1e33e:	e9cd 3300 	strd	r3, r3, [sp]
   1e342:	9503      	str	r5, [sp, #12]
   1e344:	f010 fa2c 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e348:	360a      	adds	r6, #10
   1e34a:	454e      	cmp	r6, r9
   1e34c:	d1de      	bne.n	1e30c <update_ccc+0x20>
   1e34e:	e048      	b.n	1e3e2 <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   1e350:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1e352:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1e354:	bf0c      	ite	eq
   1e356:	f04f 0a03 	moveq.w	sl, #3
   1e35a:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   1e35e:	f00f fb85 	bl	2da6c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1e362:	4582      	cmp	sl, r0
   1e364:	d905      	bls.n	1e372 <update_ccc+0x86>
				if (data->sec < sec) {
   1e366:	793b      	ldrb	r3, [r7, #4]
   1e368:	4553      	cmp	r3, sl
   1e36a:	d2ed      	bcs.n	1e348 <update_ccc+0x5c>
					data->sec = sec;
   1e36c:	f887 a004 	strb.w	sl, [r7, #4]
   1e370:	e7ea      	b.n	1e348 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1e372:	4641      	mov	r1, r8
   1e374:	4628      	mov	r0, r5
   1e376:	f010 f8ff 	bl	2e578 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1e37a:	4b1f      	ldr	r3, [pc, #124]	; (1e3f8 <update_ccc+0x10c>)
   1e37c:	4598      	cmp	r8, r3
   1e37e:	d130      	bne.n	1e3e2 <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1e380:	7a20      	ldrb	r0, [r4, #8]
   1e382:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1e386:	f7ff fb49 	bl	1da1c <find_sc_cfg>
	if (!cfg) {
   1e38a:	b350      	cbz	r0, 1e3e2 <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   1e38c:	8902      	ldrh	r2, [r0, #8]
   1e38e:	8943      	ldrh	r3, [r0, #10]
   1e390:	ea52 0103 	orrs.w	r1, r2, r3
   1e394:	d025      	beq.n	1e3e2 <update_ccc+0xf6>
	index = bt_conn_index(conn);
   1e396:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1e398:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1e39c:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   1e3a0:	f7fd fe98 	bl	1c0d4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1e3a4:	2318      	movs	r3, #24
   1e3a6:	4915      	ldr	r1, [pc, #84]	; (1e3fc <update_ccc+0x110>)
   1e3a8:	4a15      	ldr	r2, [pc, #84]	; (1e400 <update_ccc+0x114>)
   1e3aa:	fb03 1300 	mla	r3, r3, r0, r1
   1e3ae:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1e3b0:	4a14      	ldr	r2, [pc, #80]	; (1e404 <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e3b2:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   1e3b4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1e3b6:	aa05      	add	r2, sp, #20
   1e3b8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1e3ba:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e3bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1e3c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1e3c4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e3c6:	4620      	mov	r0, r4
   1e3c8:	f7ff fee8 	bl	1e19c <bt_gatt_indicate>
   1e3cc:	b148      	cbz	r0, 1e3e2 <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   1e3ce:	4b0e      	ldr	r3, [pc, #56]	; (1e408 <update_ccc+0x11c>)
   1e3d0:	2201      	movs	r2, #1
   1e3d2:	9302      	str	r3, [sp, #8]
   1e3d4:	2300      	movs	r3, #0
   1e3d6:	4907      	ldr	r1, [pc, #28]	; (1e3f4 <update_ccc+0x108>)
   1e3d8:	4618      	mov	r0, r3
   1e3da:	e9cd 3300 	strd	r3, r3, [sp]
   1e3de:	f010 f9df 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
}
   1e3e2:	2001      	movs	r0, #1
   1e3e4:	b006      	add	sp, #24
   1e3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e3ea:	bf00      	nop
   1e3ec:	0001dad1 	.word	0x0001dad1
   1e3f0:	000375b6 	.word	0x000375b6
   1e3f4:	00032ee8 	.word	0x00032ee8
   1e3f8:	200085bc 	.word	0x200085bc
   1e3fc:	20030998 	.word	0x20030998
   1e400:	00033c60 	.word	0x00033c60
   1e404:	0002e815 	.word	0x0002e815
   1e408:	000375ca 	.word	0x000375ca

0001e40c <gatt_notify>:
{
   1e40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e410:	4614      	mov	r4, r2
   1e412:	4688      	mov	r8, r1
   1e414:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e416:	2294      	movs	r2, #148	; 0x94
   1e418:	6861      	ldr	r1, [r4, #4]
{
   1e41a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e41c:	f010 fa68 	bl	2e8f0 <bt_gatt_check_perm>
   1e420:	b170      	cbz	r0, 1e440 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1e422:	4b2a      	ldr	r3, [pc, #168]	; (1e4cc <gatt_notify+0xc0>)
   1e424:	2202      	movs	r2, #2
   1e426:	9302      	str	r3, [sp, #8]
   1e428:	2300      	movs	r3, #0
   1e42a:	4929      	ldr	r1, [pc, #164]	; (1e4d0 <gatt_notify+0xc4>)
   1e42c:	4618      	mov	r0, r3
   1e42e:	e9cd 3300 	strd	r3, r3, [sp]
   1e432:	f010 f9b5 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1e436:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e43a:	b005      	add	sp, #20
   1e43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1e440:	2201      	movs	r2, #1
   1e442:	4630      	mov	r0, r6
   1e444:	6861      	ldr	r1, [r4, #4]
   1e446:	f010 fa87 	bl	2e958 <bt_gatt_is_subscribed>
   1e44a:	4603      	mov	r3, r0
   1e44c:	b950      	cbnz	r0, 1e464 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1e44e:	4a21      	ldr	r2, [pc, #132]	; (1e4d4 <gatt_notify+0xc8>)
   1e450:	9000      	str	r0, [sp, #0]
   1e452:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1e456:	491e      	ldr	r1, [pc, #120]	; (1e4d0 <gatt_notify+0xc4>)
   1e458:	2202      	movs	r2, #2
   1e45a:	f010 f9a1 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1e45e:	f06f 0015 	mvn.w	r0, #21
   1e462:	e7ea      	b.n	1e43a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1e464:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1e466:	211b      	movs	r1, #27
   1e468:	4630      	mov	r0, r6
   1e46a:	3202      	adds	r2, #2
   1e46c:	f7fe fede 	bl	1d22c <bt_att_create_pdu>
	if (!buf) {
   1e470:	4605      	mov	r5, r0
   1e472:	b958      	cbnz	r0, 1e48c <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   1e474:	4b18      	ldr	r3, [pc, #96]	; (1e4d8 <gatt_notify+0xcc>)
   1e476:	9000      	str	r0, [sp, #0]
   1e478:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e47c:	2202      	movs	r2, #2
   1e47e:	4603      	mov	r3, r0
   1e480:	4913      	ldr	r1, [pc, #76]	; (1e4d0 <gatt_notify+0xc4>)
   1e482:	f010 f98d 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1e486:	f06f 000b 	mvn.w	r0, #11
   1e48a:	e7d6      	b.n	1e43a <gatt_notify+0x2e>
   1e48c:	f100 090c 	add.w	r9, r0, #12
   1e490:	2102      	movs	r1, #2
   1e492:	4648      	mov	r0, r9
   1e494:	f010 ff3d 	bl	2f312 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1e498:	4607      	mov	r7, r0
   1e49a:	f827 8b02 	strh.w	r8, [r7], #2
   1e49e:	89a1      	ldrh	r1, [r4, #12]
   1e4a0:	4648      	mov	r0, r9
   1e4a2:	f010 ff36 	bl	2f312 <net_buf_simple_add>
   1e4a6:	89a2      	ldrh	r2, [r4, #12]
   1e4a8:	68a1      	ldr	r1, [r4, #8]
   1e4aa:	4638      	mov	r0, r7
   1e4ac:	f013 f92f 	bl	3170e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1e4b0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1e4b4:	4628      	mov	r0, r5
   1e4b6:	2301      	movs	r3, #1
   1e4b8:	f010 f854 	bl	2e564 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1e4bc:	4629      	mov	r1, r5
   1e4be:	4630      	mov	r0, r6
}
   1e4c0:	b005      	add	sp, #20
   1e4c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1e4c6:	f00f bfd7 	b.w	2e478 <bt_att_send>
   1e4ca:	bf00      	nop
   1e4cc:	0003754e 	.word	0x0003754e
   1e4d0:	00032ee8 	.word	0x00032ee8
   1e4d4:	00037564 	.word	0x00037564
   1e4d8:	000375e7 	.word	0x000375e7

0001e4dc <bt_gatt_notify_cb>:
{
   1e4dc:	b530      	push	{r4, r5, lr}
   1e4de:	4604      	mov	r4, r0
   1e4e0:	460d      	mov	r5, r1
   1e4e2:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e4e4:	4b34      	ldr	r3, [pc, #208]	; (1e5b8 <bt_gatt_notify_cb+0xdc>)
   1e4e6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e4ea:	075a      	lsls	r2, r3, #29
   1e4ec:	d55d      	bpl.n	1e5aa <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e4ee:	b110      	cbz	r0, 1e4f6 <bt_gatt_notify_cb+0x1a>
   1e4f0:	7b43      	ldrb	r3, [r0, #13]
   1e4f2:	2b07      	cmp	r3, #7
   1e4f4:	d15c      	bne.n	1e5b0 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1e4f6:	6868      	ldr	r0, [r5, #4]
   1e4f8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e4fa:	f7ff fcb7 	bl	1de6c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1e4fe:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e500:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e504:	b33a      	cbz	r2, 1e556 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e506:	a905      	add	r1, sp, #20
   1e508:	9102      	str	r1, [sp, #8]
   1e50a:	492c      	ldr	r1, [pc, #176]	; (1e5bc <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
   1e50c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e50e:	9101      	str	r1, [sp, #4]
   1e510:	2101      	movs	r1, #1
   1e512:	9100      	str	r1, [sp, #0]
   1e514:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1e518:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e51a:	f7ff fcd7 	bl	1decc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e51e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e520:	b91b      	cbnz	r3, 1e52a <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   1e522:	f06f 0001 	mvn.w	r0, #1
}
   1e526:	b00b      	add	sp, #44	; 0x2c
   1e528:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1e52a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e52c:	9b05      	ldr	r3, [sp, #20]
   1e52e:	a904      	add	r1, sp, #16
   1e530:	6818      	ldr	r0, [r3, #0]
   1e532:	2300      	movs	r3, #0
   1e534:	f88d 3010 	strb.w	r3, [sp, #16]
   1e538:	f642 0303 	movw	r3, #10243	; 0x2803
   1e53c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e540:	f00e fdeb 	bl	2d11a <bt_uuid_cmp>
   1e544:	b970      	cbnz	r0, 1e564 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e546:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1e548:	68c3      	ldr	r3, [r0, #12]
   1e54a:	799b      	ldrb	r3, [r3, #6]
   1e54c:	06db      	lsls	r3, r3, #27
   1e54e:	d405      	bmi.n	1e55c <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   1e550:	f06f 0015 	mvn.w	r0, #21
   1e554:	e7e7      	b.n	1e526 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   1e556:	2800      	cmp	r0, #0
   1e558:	d1e8      	bne.n	1e52c <bt_gatt_notify_cb+0x50>
   1e55a:	e7e2      	b.n	1e522 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e55c:	f010 f974 	bl	2e848 <bt_gatt_attr_value_handle>
   1e560:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1e564:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1e568:	b12c      	cbz	r4, 1e576 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1e56a:	4601      	mov	r1, r0
   1e56c:	462a      	mov	r2, r5
   1e56e:	4620      	mov	r0, r4
   1e570:	f7ff ff4c 	bl	1e40c <gatt_notify>
   1e574:	e7d7      	b.n	1e526 <bt_gatt_notify_cb+0x4a>
	data.err = -ENOTCONN;
   1e576:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e57a:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   1e57e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1e580:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e582:	f8ad 2012 	strh.w	r2, [sp, #18]
   1e586:	aa05      	add	r2, sp, #20
   1e588:	9202      	str	r2, [sp, #8]
   1e58a:	4a0d      	ldr	r2, [pc, #52]	; (1e5c0 <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
   1e58c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e590:	e9cd 3200 	strd	r3, r2, [sp]
   1e594:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e598:	4623      	mov	r3, r4
   1e59a:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1e59c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e59e:	f88d 4010 	strb.w	r4, [sp, #16]
   1e5a2:	f7ff fc93 	bl	1decc <bt_gatt_foreach_attr_type>
	return data.err;
   1e5a6:	9807      	ldr	r0, [sp, #28]
   1e5a8:	e7bd      	b.n	1e526 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1e5aa:	f06f 000a 	mvn.w	r0, #10
   1e5ae:	e7ba      	b.n	1e526 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   1e5b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e5b4:	e7b7      	b.n	1e526 <bt_gatt_notify_cb+0x4a>
   1e5b6:	bf00      	nop
   1e5b8:	200080cc 	.word	0x200080cc
   1e5bc:	0002e5bb 	.word	0x0002e5bb
   1e5c0:	0001e5c5 	.word	0x0001e5c5

0001e5c4 <notify_cb>:
{
   1e5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e5c8:	4b46      	ldr	r3, [pc, #280]	; (1e6e4 <notify_cb+0x120>)
{
   1e5ca:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e5cc:	6882      	ldr	r2, [r0, #8]
{
   1e5ce:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e5d0:	429a      	cmp	r2, r3
{
   1e5d2:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e5d4:	d136      	bne.n	1e644 <notify_cb+0x80>
	ccc = attr->user_data;
   1e5d6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1e5da:	4b43      	ldr	r3, [pc, #268]	; (1e6e8 <notify_cb+0x124>)
   1e5dc:	459a      	cmp	sl, r3
   1e5de:	d119      	bne.n	1e614 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e5e0:	2600      	movs	r6, #0
   1e5e2:	4c42      	ldr	r4, [pc, #264]	; (1e6ec <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e5e4:	4f42      	ldr	r7, [pc, #264]	; (1e6f0 <notify_cb+0x12c>)
   1e5e6:	4639      	mov	r1, r7
   1e5e8:	4620      	mov	r0, r4
   1e5ea:	f010 f83d 	bl	2e668 <bt_addr_le_eq>
   1e5ee:	b978      	cbnz	r0, 1e610 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1e5f0:	2207      	movs	r2, #7
   1e5f2:	4621      	mov	r1, r4
   1e5f4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1e5f8:	f7fd fec6 	bl	1c388 <bt_conn_lookup_state_le>
			if (!conn) {
   1e5fc:	bb38      	cbnz	r0, 1e64e <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   1e5fe:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1e600:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1e602:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1e604:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1e608:	8853      	ldrh	r3, [r2, #2]
   1e60a:	8812      	ldrh	r2, [r2, #0]
   1e60c:	f7ff fad8 	bl	1dbc0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e610:	340c      	adds	r4, #12
   1e612:	b1d6      	cbz	r6, 1e64a <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e614:	f10a 0601 	add.w	r6, sl, #1
   1e618:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   1e61c:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   1e620:	89ab      	ldrh	r3, [r5, #12]
   1e622:	429a      	cmp	r2, r3
   1e624:	d10b      	bne.n	1e63e <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1e626:	4631      	mov	r1, r6
   1e628:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1e62c:	f7fd fe6c 	bl	1c308 <bt_conn_lookup_addr_le>
		if (!conn) {
   1e630:	4604      	mov	r4, r0
   1e632:	b120      	cbz	r0, 1e63e <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   1e634:	7b43      	ldrb	r3, [r0, #13]
   1e636:	2b07      	cmp	r3, #7
   1e638:	d00c      	beq.n	1e654 <notify_cb+0x90>
			bt_conn_unref(conn);
   1e63a:	f00f f98c 	bl	2d956 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e63e:	360a      	adds	r6, #10
   1e640:	45b3      	cmp	fp, r6
   1e642:	d1eb      	bne.n	1e61c <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   1e644:	f04f 0901 	mov.w	r9, #1
   1e648:	e048      	b.n	1e6dc <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e64a:	2601      	movs	r6, #1
   1e64c:	e7cb      	b.n	1e5e6 <notify_cb+0x22>
			bt_conn_unref(conn);
   1e64e:	f00f f982 	bl	2d956 <bt_conn_unref>
   1e652:	e7dd      	b.n	1e610 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1e654:	f8da 3020 	ldr.w	r3, [sl, #32]
   1e658:	b123      	cbz	r3, 1e664 <notify_cb+0xa0>
   1e65a:	4641      	mov	r1, r8
   1e65c:	4798      	blx	r3
   1e65e:	b908      	cbnz	r0, 1e664 <notify_cb+0xa0>
			bt_conn_unref(conn);
   1e660:	4620      	mov	r0, r4
   1e662:	e7ea      	b.n	1e63a <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e664:	2294      	movs	r2, #148	; 0x94
   1e666:	4641      	mov	r1, r8
   1e668:	4620      	mov	r0, r4
   1e66a:	f010 f941 	bl	2e8f0 <bt_gatt_check_perm>
   1e66e:	4681      	mov	r9, r0
   1e670:	b150      	cbz	r0, 1e688 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   1e672:	4b20      	ldr	r3, [pc, #128]	; (1e6f4 <notify_cb+0x130>)
   1e674:	2202      	movs	r2, #2
   1e676:	9302      	str	r3, [sp, #8]
   1e678:	2300      	movs	r3, #0
   1e67a:	491f      	ldr	r1, [pc, #124]	; (1e6f8 <notify_cb+0x134>)
   1e67c:	4618      	mov	r0, r3
   1e67e:	e9cd 3300 	strd	r3, r3, [sp]
   1e682:	f010 f88d 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   1e686:	e7eb      	b.n	1e660 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1e688:	89ab      	ldrh	r3, [r5, #12]
   1e68a:	2b02      	cmp	r3, #2
   1e68c:	d115      	bne.n	1e6ba <notify_cb+0xf6>
   1e68e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e692:	079a      	lsls	r2, r3, #30
   1e694:	d405      	bmi.n	1e6a2 <notify_cb+0xde>
		bt_conn_unref(conn);
   1e696:	4620      	mov	r0, r4
   1e698:	f00f f95d 	bl	2d956 <bt_conn_unref>
		data->err = 0;
   1e69c:	2300      	movs	r3, #0
   1e69e:	60ab      	str	r3, [r5, #8]
   1e6a0:	e7cd      	b.n	1e63e <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1e6a2:	4620      	mov	r0, r4
   1e6a4:	692a      	ldr	r2, [r5, #16]
   1e6a6:	88a9      	ldrh	r1, [r5, #4]
   1e6a8:	f7ff fcf8 	bl	1e09c <gatt_indicate>
			if (err == 0) {
   1e6ac:	4607      	mov	r7, r0
   1e6ae:	b980      	cbnz	r0, 1e6d2 <notify_cb+0x10e>
				data->ind_params->_ref++;
   1e6b0:	692a      	ldr	r2, [r5, #16]
   1e6b2:	7d93      	ldrb	r3, [r2, #22]
   1e6b4:	3301      	adds	r3, #1
   1e6b6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1e6b8:	e7ed      	b.n	1e696 <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1e6ba:	2b01      	cmp	r3, #1
   1e6bc:	d1eb      	bne.n	1e696 <notify_cb+0xd2>
   1e6be:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e6c2:	07db      	lsls	r3, r3, #31
   1e6c4:	d5e7      	bpl.n	1e696 <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1e6c6:	4620      	mov	r0, r4
   1e6c8:	692a      	ldr	r2, [r5, #16]
   1e6ca:	88a9      	ldrh	r1, [r5, #4]
   1e6cc:	f7ff fe9e 	bl	1e40c <gatt_notify>
   1e6d0:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	f00f f93f 	bl	2d956 <bt_conn_unref>
		if (err < 0) {
   1e6d8:	2f00      	cmp	r7, #0
   1e6da:	dadf      	bge.n	1e69c <notify_cb+0xd8>
}
   1e6dc:	4648      	mov	r0, r9
   1e6de:	b005      	add	sp, #20
   1e6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6e4:	0001dad1 	.word	0x0001dad1
   1e6e8:	200085bc 	.word	0x200085bc
   1e6ec:	20030e1b 	.word	0x20030e1b
   1e6f0:	000364d3 	.word	0x000364d3
   1e6f4:	0003754e 	.word	0x0003754e
   1e6f8:	00032ee8 	.word	0x00032ee8

0001e6fc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1e6fc:	b510      	push	{r4, lr}
   1e6fe:	b086      	sub	sp, #24
   1e700:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1e702:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1e704:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e706:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e70a:	4a0f      	ldr	r2, [pc, #60]	; (1e748 <bt_gatt_connected+0x4c>)
   1e70c:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   1e70e:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e712:	f010 f8e0 	bl	2e8d6 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   1e716:	4620      	mov	r0, r4
   1e718:	f00f f9a8 	bl	2da6c <bt_conn_get_security>
   1e71c:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1e720:	4288      	cmp	r0, r1
   1e722:	d20e      	bcs.n	1e742 <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   1e724:	4620      	mov	r0, r4
   1e726:	f00f f975 	bl	2da14 <bt_conn_set_security>

		if (err) {
   1e72a:	b150      	cbz	r0, 1e742 <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1e72c:	4b07      	ldr	r3, [pc, #28]	; (1e74c <bt_gatt_connected+0x50>)
   1e72e:	9003      	str	r0, [sp, #12]
   1e730:	9302      	str	r3, [sp, #8]
   1e732:	2300      	movs	r3, #0
   1e734:	2202      	movs	r2, #2
   1e736:	4618      	mov	r0, r3
   1e738:	e9cd 3300 	strd	r3, r3, [sp]
   1e73c:	4904      	ldr	r1, [pc, #16]	; (1e750 <bt_gatt_connected+0x54>)
   1e73e:	f010 f82f 	bl	2e7a0 <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1e742:	b006      	add	sp, #24
   1e744:	bd10      	pop	{r4, pc}
   1e746:	bf00      	nop
   1e748:	0001e2ed 	.word	0x0001e2ed
   1e74c:	00037610 	.word	0x00037610
   1e750:	00032ee8 	.word	0x00032ee8

0001e754 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e756:	4605      	mov	r5, r0
   1e758:	460e      	mov	r6, r1
   1e75a:	4617      	mov	r7, r2
	return list->head;
   1e75c:	4b06      	ldr	r3, [pc, #24]	; (1e778 <bt_gatt_att_max_mtu_changed+0x24>)
   1e75e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e760:	b14c      	cbz	r4, 1e776 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1e762:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1e766:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1e768:	b11b      	cbz	r3, 1e772 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1e76a:	463a      	mov	r2, r7
   1e76c:	4631      	mov	r1, r6
   1e76e:	4628      	mov	r0, r5
   1e770:	4798      	blx	r3
	return node->next;
   1e772:	6864      	ldr	r4, [r4, #4]
   1e774:	e7f4      	b.n	1e760 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1e776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e778:	200309d8 	.word	0x200309d8

0001e77c <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   1e77c:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1e77e:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1e780:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e782:	466b      	mov	r3, sp
   1e784:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e788:	4a03      	ldr	r2, [pc, #12]	; (1e798 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1e78a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e78e:	f010 f8a2 	bl	2e8d6 <bt_gatt_foreach_attr>
}
   1e792:	b003      	add	sp, #12
   1e794:	f85d fb04 	ldr.w	pc, [sp], #4
   1e798:	0001e2ed 	.word	0x0001e2ed

0001e79c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1e79c:	b570      	push	{r4, r5, r6, lr}
   1e79e:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1e7a0:	4603      	mov	r3, r0
   1e7a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e7a6:	2001      	movs	r0, #1
   1e7a8:	4a0d      	ldr	r2, [pc, #52]	; (1e7e0 <bt_gatt_disconnected+0x44>)
   1e7aa:	f010 f894 	bl	2e8d6 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1e7ae:	4620      	mov	r0, r4
   1e7b0:	f7ff f906 	bl	1d9c0 <find_cf_cfg>
	if (!cfg) {
   1e7b4:	4605      	mov	r5, r0
   1e7b6:	b188      	cbz	r0, 1e7dc <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e7b8:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1e7bc:	4631      	mov	r1, r6
   1e7be:	7a20      	ldrb	r0, [r4, #8]
   1e7c0:	f00e fdf8 	bl	2d3b4 <bt_addr_le_is_bonded>
   1e7c4:	b920      	cbnz	r0, 1e7d0 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1e7c6:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1e7c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1e7cc:	f7ff b9e4 	b.w	1db98 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1e7d0:	4631      	mov	r1, r6
   1e7d2:	1c68      	adds	r0, r5, #1
}
   1e7d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1e7d8:	f00f bf4e 	b.w	2e678 <bt_addr_le_copy>
}
   1e7dc:	bd70      	pop	{r4, r5, r6, pc}
   1e7de:	bf00      	nop
   1e7e0:	0001dccd 	.word	0x0001dccd

0001e7e4 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1e7e4:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e7e6:	4b05      	ldr	r3, [pc, #20]	; (1e7fc <smp_find+0x18>)
{
   1e7e8:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e7ea:	4618      	mov	r0, r3
   1e7ec:	f010 f97f 	bl	2eaee <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1e7f0:	3b04      	subs	r3, #4
   1e7f2:	2800      	cmp	r0, #0
}
   1e7f4:	bf14      	ite	ne
   1e7f6:	4618      	movne	r0, r3
   1e7f8:	2000      	moveq	r0, #0
   1e7fa:	bd08      	pop	{r3, pc}
   1e7fc:	2000a12c 	.word	0x2000a12c

0001e800 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1e800:	4b08      	ldr	r3, [pc, #32]	; (1e824 <latch_auth_cb+0x24>)
   1e802:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e806:	681a      	ldr	r2, [r3, #0]
   1e808:	4b07      	ldr	r3, [pc, #28]	; (1e828 <latch_auth_cb+0x28>)
   1e80a:	e8d0 1fef 	ldaex	r1, [r0]
   1e80e:	4299      	cmp	r1, r3
   1e810:	d104      	bne.n	1e81c <latch_auth_cb+0x1c>
   1e812:	e8c0 2fec 	stlex	ip, r2, [r0]
   1e816:	f1bc 0f00 	cmp.w	ip, #0
   1e81a:	d1f6      	bne.n	1e80a <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e81c:	e8d0 0faf 	lda	r0, [r0]
}
   1e820:	4770      	bx	lr
   1e822:	bf00      	nop
   1e824:	200308c0 	.word	0x200308c0
   1e828:	2000a128 	.word	0x2000a128

0001e82c <get_io_capa>:
{
   1e82c:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e82e:	f7ff ffe7 	bl	1e800 <latch_auth_cb>
	if (!smp_auth_cb) {
   1e832:	4603      	mov	r3, r0
   1e834:	b1c8      	cbz	r0, 1e86a <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1e836:	e9d0 1200 	ldrd	r1, r2, [r0]
   1e83a:	b921      	cbnz	r1, 1e846 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1e83c:	2a00      	cmp	r2, #0
   1e83e:	bf0c      	ite	eq
   1e840:	2003      	moveq	r0, #3
   1e842:	2002      	movne	r0, #2
   1e844:	e010      	b.n	1e868 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1e846:	b132      	cbz	r2, 1e856 <get_io_capa+0x2a>
   1e848:	6883      	ldr	r3, [r0, #8]
   1e84a:	b913      	cbnz	r3, 1e852 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1e84c:	4b09      	ldr	r3, [pc, #36]	; (1e874 <get_io_capa+0x48>)
   1e84e:	781b      	ldrb	r3, [r3, #0]
   1e850:	b933      	cbnz	r3, 1e860 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1e852:	2004      	movs	r0, #4
   1e854:	e008      	b.n	1e868 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1e856:	4907      	ldr	r1, [pc, #28]	; (1e874 <get_io_capa+0x48>)
   1e858:	7808      	ldrb	r0, [r1, #0]
   1e85a:	b128      	cbz	r0, 1e868 <get_io_capa+0x3c>
   1e85c:	689b      	ldr	r3, [r3, #8]
   1e85e:	b933      	cbnz	r3, 1e86e <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1e860:	3a00      	subs	r2, #0
   1e862:	bf18      	it	ne
   1e864:	2201      	movne	r2, #1
   1e866:	0050      	lsls	r0, r2, #1
}
   1e868:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1e86a:	2003      	movs	r0, #3
   1e86c:	e7fc      	b.n	1e868 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1e86e:	2001      	movs	r0, #1
   1e870:	e7fa      	b.n	1e868 <get_io_capa+0x3c>
   1e872:	bf00      	nop
   1e874:	200319dd 	.word	0x200319dd

0001e878 <get_auth>:
{
   1e878:	b510      	push	{r4, lr}
	if (sc_supported) {
   1e87a:	4b0c      	ldr	r3, [pc, #48]	; (1e8ac <get_auth+0x34>)
   1e87c:	781b      	ldrb	r3, [r3, #0]
   1e87e:	b17b      	cbz	r3, 1e8a0 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1e880:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1e884:	f7ff ffd2 	bl	1e82c <get_io_capa>
	if (bondable) {
   1e888:	4b09      	ldr	r3, [pc, #36]	; (1e8b0 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1e88a:	2803      	cmp	r0, #3
	if (bondable) {
   1e88c:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   1e88e:	bf0c      	ite	eq
   1e890:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1e894:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1e898:	b12b      	cbz	r3, 1e8a6 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1e89a:	f044 0001 	orr.w	r0, r4, #1
}
   1e89e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1e8a0:	f001 0407 	and.w	r4, r1, #7
   1e8a4:	e7ee      	b.n	1e884 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1e8a6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1e8aa:	e7f8      	b.n	1e89e <get_auth+0x26>
   1e8ac:	200319dd 	.word	0x200319dd
   1e8b0:	20008adb 	.word	0x20008adb

0001e8b4 <smp_chan_get>:
{
   1e8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1e8b6:	2106      	movs	r1, #6
   1e8b8:	f00f f9a4 	bl	2dc04 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e8bc:	4604      	mov	r4, r0
   1e8be:	b958      	cbnz	r0, 1e8d8 <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   1e8c0:	4b07      	ldr	r3, [pc, #28]	; (1e8e0 <smp_chan_get+0x2c>)
   1e8c2:	2201      	movs	r2, #1
   1e8c4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e8c8:	4906      	ldr	r1, [pc, #24]	; (1e8e4 <smp_chan_get+0x30>)
   1e8ca:	4603      	mov	r3, r0
   1e8cc:	9000      	str	r0, [sp, #0]
   1e8ce:	f010 f966 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
}
   1e8d2:	4620      	mov	r0, r4
   1e8d4:	b004      	add	sp, #16
   1e8d6:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1e8d8:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1e8dc:	e7f9      	b.n	1e8d2 <smp_chan_get+0x1e>
   1e8de:	bf00      	nop
   1e8e0:	0003764b 	.word	0x0003764b
   1e8e4:	00032f30 	.word	0x00032f30

0001e8e8 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1e8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1e8ea:	4b0d      	ldr	r3, [pc, #52]	; (1e920 <bt_smp_accept+0x38>)
{
   1e8ec:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1e8ee:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1e8f2:	b930      	cbnz	r0, 1e902 <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1e8f4:	4a0b      	ldr	r2, [pc, #44]	; (1e924 <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   1e8f6:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   1e8f8:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   1e8fa:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1e8fc:	b005      	add	sp, #20
   1e8fe:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   1e902:	4b09      	ldr	r3, [pc, #36]	; (1e928 <bt_smp_accept+0x40>)
   1e904:	9203      	str	r2, [sp, #12]
   1e906:	9302      	str	r3, [sp, #8]
   1e908:	2300      	movs	r3, #0
   1e90a:	2201      	movs	r2, #1
   1e90c:	4618      	mov	r0, r3
   1e90e:	e9cd 3300 	strd	r3, r3, [sp]
   1e912:	4906      	ldr	r1, [pc, #24]	; (1e92c <bt_smp_accept+0x44>)
   1e914:	f010 f943 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
   1e918:	f06f 000b 	mvn.w	r0, #11
   1e91c:	e7ee      	b.n	1e8fc <bt_smp_accept+0x14>
   1e91e:	bf00      	nop
   1e920:	2000a128 	.word	0x2000a128
   1e924:	00033d64 	.word	0x00033d64
   1e928:	00037666 	.word	0x00037666
   1e92c:	00032f30 	.word	0x00032f30

0001e930 <smp_init>:
{
   1e930:	b538      	push	{r3, r4, r5, lr}
   1e932:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   1e934:	22ec      	movs	r2, #236	; 0xec
   1e936:	2100      	movs	r1, #0
   1e938:	f012 ff23 	bl	31782 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1e93c:	2110      	movs	r1, #16
   1e93e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1e942:	f7fc ff1f 	bl	1b784 <bt_rand>
   1e946:	4604      	mov	r4, r0
   1e948:	b948      	cbnz	r0, 1e95e <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1e94a:	2105      	movs	r1, #5
   1e94c:	4628      	mov	r0, r5
   1e94e:	f010 f935 	bl	2ebbc <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1e952:	f7fc ffc9 	bl	1b8e8 <bt_pub_key_get>
   1e956:	4b03      	ldr	r3, [pc, #12]	; (1e964 <smp_init+0x34>)
   1e958:	6018      	str	r0, [r3, #0]
}
   1e95a:	4620      	mov	r0, r4
   1e95c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1e95e:	2408      	movs	r4, #8
   1e960:	e7fb      	b.n	1e95a <smp_init+0x2a>
   1e962:	bf00      	nop
   1e964:	200309e0 	.word	0x200309e0

0001e968 <smp_dhkey_generate>:
{
   1e968:	b530      	push	{r4, r5, lr}
   1e96a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1e96c:	1d05      	adds	r5, r0, #4
   1e96e:	2108      	movs	r1, #8
   1e970:	4628      	mov	r0, r5
{
   1e972:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1e974:	f010 f922 	bl	2ebbc <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1e978:	490b      	ldr	r1, [pc, #44]	; (1e9a8 <smp_dhkey_generate+0x40>)
   1e97a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e97e:	f7fc ffc1 	bl	1b904 <bt_dh_key_gen>
	if (err) {
   1e982:	b170      	cbz	r0, 1e9a2 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1e984:	2108      	movs	r1, #8
   1e986:	4628      	mov	r0, r5
   1e988:	f010 f8d8 	bl	2eb3c <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1e98c:	4b07      	ldr	r3, [pc, #28]	; (1e9ac <smp_dhkey_generate+0x44>)
   1e98e:	2201      	movs	r2, #1
   1e990:	9302      	str	r3, [sp, #8]
   1e992:	2300      	movs	r3, #0
   1e994:	4906      	ldr	r1, [pc, #24]	; (1e9b0 <smp_dhkey_generate+0x48>)
   1e996:	4618      	mov	r0, r3
   1e998:	e9cd 3300 	strd	r3, r3, [sp]
   1e99c:	f010 f8ff 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1e9a0:	2008      	movs	r0, #8
}
   1e9a2:	b005      	add	sp, #20
   1e9a4:	bd30      	pop	{r4, r5, pc}
   1e9a6:	bf00      	nop
   1e9a8:	0002ef95 	.word	0x0002ef95
   1e9ac:	0003768b 	.word	0x0003768b
   1e9b0:	00032f30 	.word	0x00032f30

0001e9b4 <smp_ident_info>:
{
   1e9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9b6:	460b      	mov	r3, r1
   1e9b8:	4606      	mov	r6, r0
   1e9ba:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e9bc:	210d      	movs	r1, #13
   1e9be:	3004      	adds	r0, #4
   1e9c0:	f010 f895 	bl	2eaee <atomic_test_bit>
   1e9c4:	b330      	cbz	r0, 1ea14 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1e9c6:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1e9c8:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e9cc:	2002      	movs	r0, #2
   1e9ce:	f103 0788 	add.w	r7, r3, #136	; 0x88
   1e9d2:	463a      	mov	r2, r7
   1e9d4:	7a19      	ldrb	r1, [r3, #8]
   1e9d6:	f010 fb6e 	bl	2f0b6 <bt_keys_get_type>
		if (!keys) {
   1e9da:	4604      	mov	r4, r0
   1e9dc:	b980      	cbnz	r0, 1ea00 <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e9de:	4638      	mov	r0, r7
   1e9e0:	f7fa fc1c 	bl	1921c <bt_addr_le_str>
   1e9e4:	4b0e      	ldr	r3, [pc, #56]	; (1ea20 <smp_ident_info+0x6c>)
   1e9e6:	9003      	str	r0, [sp, #12]
   1e9e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1e9ec:	4620      	mov	r0, r4
   1e9ee:	4623      	mov	r3, r4
   1e9f0:	2201      	movs	r2, #1
   1e9f2:	490c      	ldr	r1, [pc, #48]	; (1ea24 <smp_ident_info+0x70>)
   1e9f4:	9400      	str	r4, [sp, #0]
   1e9f6:	f010 f8d2 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e9fa:	2008      	movs	r0, #8
}
   1e9fc:	b005      	add	sp, #20
   1e9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ea00:	462b      	mov	r3, r5
   1ea02:	342a      	adds	r4, #42	; 0x2a
   1ea04:	f105 0210 	add.w	r2, r5, #16
   1ea08:	f853 1b04 	ldr.w	r1, [r3], #4
   1ea0c:	4293      	cmp	r3, r2
   1ea0e:	f844 1b04 	str.w	r1, [r4], #4
   1ea12:	d1f9      	bne.n	1ea08 <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1ea14:	4630      	mov	r0, r6
   1ea16:	2109      	movs	r1, #9
   1ea18:	f010 f8d0 	bl	2ebbc <atomic_set_bit>
	return 0;
   1ea1c:	2000      	movs	r0, #0
   1ea1e:	e7ed      	b.n	1e9fc <smp_ident_info+0x48>
   1ea20:	000376a4 	.word	0x000376a4
   1ea24:	00032f30 	.word	0x00032f30

0001ea28 <smp_encrypt_info>:
{
   1ea28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea2a:	460b      	mov	r3, r1
   1ea2c:	4606      	mov	r6, r0
   1ea2e:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ea30:	210d      	movs	r1, #13
   1ea32:	3004      	adds	r0, #4
   1ea34:	f010 f85b 	bl	2eaee <atomic_test_bit>
   1ea38:	b330      	cbz	r0, 1ea88 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1ea3a:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ea3c:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ea40:	2004      	movs	r0, #4
   1ea42:	f103 0788 	add.w	r7, r3, #136	; 0x88
   1ea46:	463a      	mov	r2, r7
   1ea48:	7a19      	ldrb	r1, [r3, #8]
   1ea4a:	f010 fb34 	bl	2f0b6 <bt_keys_get_type>
		if (!keys) {
   1ea4e:	4604      	mov	r4, r0
   1ea50:	b980      	cbnz	r0, 1ea74 <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ea52:	4638      	mov	r0, r7
   1ea54:	f7fa fbe2 	bl	1921c <bt_addr_le_str>
   1ea58:	4b0e      	ldr	r3, [pc, #56]	; (1ea94 <smp_encrypt_info+0x6c>)
   1ea5a:	9003      	str	r0, [sp, #12]
   1ea5c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ea60:	4620      	mov	r0, r4
   1ea62:	4623      	mov	r3, r4
   1ea64:	2201      	movs	r2, #1
   1ea66:	490c      	ldr	r1, [pc, #48]	; (1ea98 <smp_encrypt_info+0x70>)
   1ea68:	9400      	str	r4, [sp, #0]
   1ea6a:	f010 f898 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ea6e:	2008      	movs	r0, #8
}
   1ea70:	b005      	add	sp, #20
   1ea72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea74:	462b      	mov	r3, r5
   1ea76:	341a      	adds	r4, #26
   1ea78:	f105 0210 	add.w	r2, r5, #16
   1ea7c:	f853 1b04 	ldr.w	r1, [r3], #4
   1ea80:	4293      	cmp	r3, r2
   1ea82:	f844 1b04 	str.w	r1, [r4], #4
   1ea86:	d1f9      	bne.n	1ea7c <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1ea88:	4630      	mov	r0, r6
   1ea8a:	2107      	movs	r1, #7
   1ea8c:	f010 f896 	bl	2ebbc <atomic_set_bit>
	return 0;
   1ea90:	2000      	movs	r0, #0
   1ea92:	e7ed      	b.n	1ea70 <smp_encrypt_info+0x48>
   1ea94:	000376a4 	.word	0x000376a4
   1ea98:	00032f30 	.word	0x00032f30

0001ea9c <smp_send_pairing_confirm>:
{
   1ea9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   1ea9e:	7a04      	ldrb	r4, [r0, #8]
{
   1eaa0:	4605      	mov	r5, r0
	switch (smp->method) {
   1eaa2:	2c02      	cmp	r4, #2
   1eaa4:	d823      	bhi.n	1eaee <smp_send_pairing_confirm+0x52>
   1eaa6:	b144      	cbz	r4, 1eaba <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1eaa8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1eaac:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1eab0:	40dc      	lsrs	r4, r3
   1eab2:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1eab6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1eaba:	2103      	movs	r1, #3
   1eabc:	4628      	mov	r0, r5
   1eabe:	f010 f88d 	bl	2ebdc <smp_create_pdu.constprop.0>
	if (!buf) {
   1eac2:	4606      	mov	r6, r0
   1eac4:	b308      	cbz	r0, 1eb0a <smp_send_pairing_confirm+0x6e>
   1eac6:	2110      	movs	r1, #16
   1eac8:	300c      	adds	r0, #12
   1eaca:	f010 fc22 	bl	2f312 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1eace:	9000      	str	r0, [sp, #0]
   1ead0:	4816      	ldr	r0, [pc, #88]	; (1eb2c <smp_send_pairing_confirm+0x90>)
   1ead2:	4623      	mov	r3, r4
   1ead4:	6800      	ldr	r0, [r0, #0]
   1ead6:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1eada:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1eade:	f010 fb42 	bl	2f166 <bt_crypto_f4>
   1eae2:	4604      	mov	r4, r0
   1eae4:	b1b0      	cbz	r0, 1eb14 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   1eae6:	4630      	mov	r0, r6
   1eae8:	f001 fcda 	bl	204a0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1eaec:	e00d      	b.n	1eb0a <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1eaee:	2c03      	cmp	r4, #3
   1eaf0:	f04f 0300 	mov.w	r3, #0
   1eaf4:	d00c      	beq.n	1eb10 <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1eaf6:	4a0e      	ldr	r2, [pc, #56]	; (1eb30 <smp_send_pairing_confirm+0x94>)
   1eaf8:	4618      	mov	r0, r3
   1eafa:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1eafe:	490d      	ldr	r1, [pc, #52]	; (1eb34 <smp_send_pairing_confirm+0x98>)
   1eb00:	2201      	movs	r2, #1
	switch (smp->method) {
   1eb02:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1eb04:	9300      	str	r3, [sp, #0]
   1eb06:	f010 f84a 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1eb0a:	2008      	movs	r0, #8
}
   1eb0c:	b004      	add	sp, #16
   1eb0e:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1eb10:	461c      	mov	r4, r3
   1eb12:	e7d2      	b.n	1eaba <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1eb14:	4602      	mov	r2, r0
   1eb16:	4631      	mov	r1, r6
   1eb18:	4628      	mov	r0, r5
   1eb1a:	f010 f823 	bl	2eb64 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1eb1e:	1d28      	adds	r0, r5, #4
   1eb20:	4621      	mov	r1, r4
   1eb22:	f010 f80b 	bl	2eb3c <atomic_clear_bit>
	return 0;
   1eb26:	4620      	mov	r0, r4
   1eb28:	e7f0      	b.n	1eb0c <smp_send_pairing_confirm+0x70>
   1eb2a:	bf00      	nop
   1eb2c:	200309e0 	.word	0x200309e0
   1eb30:	000376be 	.word	0x000376be
   1eb34:	00032f30 	.word	0x00032f30

0001eb38 <smp_public_key_periph>:
{
   1eb38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb3a:	4604      	mov	r4, r0
   1eb3c:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1eb3e:	f7ff fe5f 	bl	1e800 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1eb42:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1eb44:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1eb46:	210e      	movs	r1, #14
   1eb48:	4628      	mov	r0, r5
   1eb4a:	f00f ffd0 	bl	2eaee <atomic_test_bit>
   1eb4e:	b990      	cbnz	r0, 1eb76 <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1eb50:	4b51      	ldr	r3, [pc, #324]	; (1ec98 <smp_public_key_periph+0x160>)
   1eb52:	2220      	movs	r2, #32
   1eb54:	6819      	ldr	r1, [r3, #0]
   1eb56:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1eb5a:	f012 fdc8 	bl	316ee <memcmp>
   1eb5e:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1eb60:	b948      	cbnz	r0, 1eb76 <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   1eb62:	4a4e      	ldr	r2, [pc, #312]	; (1ec9c <smp_public_key_periph+0x164>)
   1eb64:	494e      	ldr	r1, [pc, #312]	; (1eca0 <smp_public_key_periph+0x168>)
   1eb66:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1eb6a:	9000      	str	r0, [sp, #0]
   1eb6c:	2202      	movs	r2, #2
   1eb6e:	f010 f816 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1eb72:	2008      	movs	r0, #8
   1eb74:	e034      	b.n	1ebe0 <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1eb76:	210c      	movs	r1, #12
   1eb78:	4620      	mov	r0, r4
   1eb7a:	f010 f82f 	bl	2ebdc <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1eb7e:	4607      	mov	r7, r0
   1eb80:	2800      	cmp	r0, #0
   1eb82:	d0f6      	beq.n	1eb72 <smp_public_key_periph+0x3a>
   1eb84:	2140      	movs	r1, #64	; 0x40
   1eb86:	300c      	adds	r0, #12
   1eb88:	f010 fbc3 	bl	2f312 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1eb8c:	4b42      	ldr	r3, [pc, #264]	; (1ec98 <smp_public_key_periph+0x160>)
   1eb8e:	4602      	mov	r2, r0
   1eb90:	681b      	ldr	r3, [r3, #0]
   1eb92:	4601      	mov	r1, r0
   1eb94:	f103 0020 	add.w	r0, r3, #32
   1eb98:	f853 cb04 	ldr.w	ip, [r3], #4
   1eb9c:	4283      	cmp	r3, r0
   1eb9e:	f841 cb04 	str.w	ip, [r1], #4
   1eba2:	d1f9      	bne.n	1eb98 <smp_public_key_periph+0x60>
   1eba4:	3220      	adds	r2, #32
   1eba6:	f103 0120 	add.w	r1, r3, #32
   1ebaa:	f853 0b04 	ldr.w	r0, [r3], #4
   1ebae:	428b      	cmp	r3, r1
   1ebb0:	f842 0b04 	str.w	r0, [r2], #4
   1ebb4:	d1f9      	bne.n	1ebaa <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   1ebb6:	2200      	movs	r2, #0
   1ebb8:	4639      	mov	r1, r7
   1ebba:	4620      	mov	r0, r4
   1ebbc:	f00f ffd2 	bl	2eb64 <smp_send.constprop.0>
	switch (smp->method) {
   1ebc0:	7a23      	ldrb	r3, [r4, #8]
   1ebc2:	2b05      	cmp	r3, #5
   1ebc4:	d85a      	bhi.n	1ec7c <smp_public_key_periph+0x144>
   1ebc6:	e8df f003 	tbb	[pc, r3]
   1ebca:	3903      	.short	0x3903
   1ebcc:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ebd0:	2104      	movs	r1, #4
   1ebd2:	4620      	mov	r0, r4
   1ebd4:	f00f fff2 	bl	2ebbc <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1ebd8:	f7ff ff60 	bl	1ea9c <smp_send_pairing_confirm>
		if (err) {
   1ebdc:	2800      	cmp	r0, #0
   1ebde:	d03c      	beq.n	1ec5a <smp_public_key_periph+0x122>
}
   1ebe0:	b005      	add	sp, #20
   1ebe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ebe4:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1ebe6:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ebea:	f7ff fe09 	bl	1e800 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ebee:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ebf0:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ebf2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1ebf6:	f7fc fdc5 	bl	1b784 <bt_rand>
   1ebfa:	2800      	cmp	r0, #0
   1ebfc:	d1b9      	bne.n	1eb72 <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   1ebfe:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1ec02:	4a28      	ldr	r2, [pc, #160]	; (1eca4 <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   1ec04:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   1ec08:	fbb3 f1f2 	udiv	r1, r3, r2
   1ec0c:	fb02 3311 	mls	r3, r2, r1, r3
   1ec10:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1ec14:	b156      	cbz	r6, 1ec2c <smp_public_key_periph+0xf4>
   1ec16:	6833      	ldr	r3, [r6, #0]
   1ec18:	b143      	cbz	r3, 1ec2c <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ec1a:	210b      	movs	r1, #11
   1ec1c:	4628      	mov	r0, r5
   1ec1e:	f00f ffcd 	bl	2ebbc <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1ec22:	4638      	mov	r0, r7
   1ec24:	6833      	ldr	r3, [r6, #0]
   1ec26:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ec2a:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ec2c:	2103      	movs	r1, #3
   1ec2e:	4620      	mov	r0, r4
   1ec30:	f00f ffc4 	bl	2ebbc <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ec34:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ec36:	f00f ffc1 	bl	2ebbc <atomic_set_bit>
		break;
   1ec3a:	e00e      	b.n	1ec5a <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ec3c:	4620      	mov	r0, r4
   1ec3e:	2103      	movs	r1, #3
   1ec40:	f00f ffbc 	bl	2ebbc <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ec44:	210e      	movs	r1, #14
   1ec46:	f00f ffb9 	bl	2ebbc <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ec4a:	4628      	mov	r0, r5
   1ec4c:	210a      	movs	r1, #10
   1ec4e:	f00f ffb5 	bl	2ebbc <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1ec52:	6873      	ldr	r3, [r6, #4]
   1ec54:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ec58:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1ec5a:	4628      	mov	r0, r5
   1ec5c:	2107      	movs	r1, #7
   1ec5e:	f00f ffad 	bl	2ebbc <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1ec62:	2008      	movs	r0, #8
   1ec64:	f7ff fdbe 	bl	1e7e4 <smp_find>
   1ec68:	b9a0      	cbnz	r0, 1ec94 <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   1ec6a:	4620      	mov	r0, r4
}
   1ec6c:	b005      	add	sp, #20
   1ec6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1ec72:	f7ff be79 	b.w	1e968 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ec76:	2104      	movs	r1, #4
   1ec78:	4620      	mov	r0, r4
   1ec7a:	e7dc      	b.n	1ec36 <smp_public_key_periph+0xfe>
	switch (smp->method) {
   1ec7c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ec7e:	4b0a      	ldr	r3, [pc, #40]	; (1eca8 <smp_public_key_periph+0x170>)
   1ec80:	2201      	movs	r2, #1
   1ec82:	9302      	str	r3, [sp, #8]
   1ec84:	2300      	movs	r3, #0
   1ec86:	4906      	ldr	r1, [pc, #24]	; (1eca0 <smp_public_key_periph+0x168>)
   1ec88:	4618      	mov	r0, r3
   1ec8a:	e9cd 3300 	strd	r3, r3, [sp]
   1ec8e:	f00f ff86 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ec92:	e76e      	b.n	1eb72 <smp_public_key_periph+0x3a>
	return 0;
   1ec94:	2000      	movs	r0, #0
   1ec96:	e7a3      	b.n	1ebe0 <smp_public_key_periph+0xa8>
   1ec98:	200309e0 	.word	0x200309e0
   1ec9c:	000376da 	.word	0x000376da
   1eca0:	00032f30 	.word	0x00032f30
   1eca4:	000f4240 	.word	0x000f4240
   1eca8:	000376be 	.word	0x000376be

0001ecac <smp_public_key>:
{
   1ecac:	b530      	push	{r4, r5, lr}
   1ecae:	4604      	mov	r4, r0
   1ecb0:	460d      	mov	r5, r1
   1ecb2:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ecb4:	f7ff fda4 	bl	1e800 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1ecb8:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ecbc:	4602      	mov	r2, r0
   1ecbe:	68eb      	ldr	r3, [r5, #12]
   1ecc0:	f103 0120 	add.w	r1, r3, #32
   1ecc4:	f853 5b04 	ldr.w	r5, [r3], #4
   1ecc8:	428b      	cmp	r3, r1
   1ecca:	f842 5b04 	str.w	r5, [r2], #4
   1ecce:	d1f9      	bne.n	1ecc4 <smp_public_key+0x18>
   1ecd0:	f104 0277 	add.w	r2, r4, #119	; 0x77
   1ecd4:	f103 0120 	add.w	r1, r3, #32
   1ecd8:	f853 5b04 	ldr.w	r5, [r3], #4
   1ecdc:	428b      	cmp	r3, r1
   1ecde:	f842 5b04 	str.w	r5, [r2], #4
   1ece2:	d1f9      	bne.n	1ecd8 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1ece4:	f7fc fd6c 	bl	1b7c0 <bt_pub_key_is_debug>
   1ece8:	b940      	cbnz	r0, 1ecfc <smp_public_key+0x50>
	if (!sc_public_key) {
   1ecea:	4b1c      	ldr	r3, [pc, #112]	; (1ed5c <smp_public_key+0xb0>)
   1ecec:	681d      	ldr	r5, [r3, #0]
   1ecee:	bb75      	cbnz	r5, 1ed4e <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1ecf0:	1d20      	adds	r0, r4, #4
   1ecf2:	2106      	movs	r1, #6
   1ecf4:	f00f ff62 	bl	2ebbc <atomic_set_bit>
	return 0;
   1ecf8:	4628      	mov	r0, r5
		return 0;
   1ecfa:	e026      	b.n	1ed4a <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   1ecfc:	4b18      	ldr	r3, [pc, #96]	; (1ed60 <smp_public_key+0xb4>)
   1ecfe:	2203      	movs	r2, #3
   1ed00:	9302      	str	r3, [sp, #8]
   1ed02:	2300      	movs	r3, #0
   1ed04:	4917      	ldr	r1, [pc, #92]	; (1ed64 <smp_public_key+0xb8>)
   1ed06:	4618      	mov	r0, r3
   1ed08:	e9cd 3300 	strd	r3, r3, [sp]
   1ed0c:	f00f ff47 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1ed10:	210e      	movs	r1, #14
   1ed12:	1d20      	adds	r0, r4, #4
   1ed14:	f00f ff52 	bl	2ebbc <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1ed18:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1ed1c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1ed20:	b933      	cbnz	r3, 1ed30 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ed22:	7a28      	ldrb	r0, [r5, #8]
   1ed24:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1ed28:	f001 f9a4 	bl	20074 <bt_keys_get_addr>
   1ed2c:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
	if (!conn->le.keys ||
   1ed30:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1ed34:	2b00      	cmp	r3, #0
   1ed36:	d0d8      	beq.n	1ecea <smp_public_key+0x3e>
   1ed38:	89da      	ldrh	r2, [r3, #14]
   1ed3a:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1ed3e:	2a00      	cmp	r2, #0
   1ed40:	d0d3      	beq.n	1ecea <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1ed42:	7b5b      	ldrb	r3, [r3, #13]
   1ed44:	079b      	lsls	r3, r3, #30
   1ed46:	d4d0      	bmi.n	1ecea <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ed48:	2003      	movs	r0, #3
}
   1ed4a:	b005      	add	sp, #20
   1ed4c:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   1ed4e:	4620      	mov	r0, r4
}
   1ed50:	b005      	add	sp, #20
   1ed52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   1ed56:	f7ff beef 	b.w	1eb38 <smp_public_key_periph>
   1ed5a:	bf00      	nop
   1ed5c:	200309e0 	.word	0x200309e0
   1ed60:	000376f5 	.word	0x000376f5
   1ed64:	00032f30 	.word	0x00032f30

0001ed68 <smp_pairing_req>:
{
   1ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed6c:	460d      	mov	r5, r1
   1ed6e:	b086      	sub	sp, #24
   1ed70:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ed72:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ed76:	f7ff fd43 	bl	1e800 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1ed7a:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ed7e:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ed80:	f898 3003 	ldrb.w	r3, [r8, #3]
   1ed84:	3b07      	subs	r3, #7
   1ed86:	2b09      	cmp	r3, #9
   1ed88:	d903      	bls.n	1ed92 <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1ed8a:	2006      	movs	r0, #6
}
   1ed8c:	b006      	add	sp, #24
   1ed8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1ed92:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   1ed96:	b15b      	cbz	r3, 1edb0 <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1ed98:	1d25      	adds	r5, r4, #4
   1ed9a:	210f      	movs	r1, #15
   1ed9c:	4628      	mov	r0, r5
   1ed9e:	f00f fea6 	bl	2eaee <atomic_test_bit>
   1eda2:	b980      	cbnz	r0, 1edc6 <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   1eda4:	4620      	mov	r0, r4
   1eda6:	f7ff fdc3 	bl	1e930 <smp_init>
		if (ret) {
   1edaa:	b160      	cbz	r0, 1edc6 <smp_pairing_req+0x5e>
			return ret;
   1edac:	b2c0      	uxtb	r0, r0
   1edae:	e7ed      	b.n	1ed8c <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1edb0:	7a30      	ldrb	r0, [r6, #8]
   1edb2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1edb6:	f001 f95d 	bl	20074 <bt_keys_get_addr>
   1edba:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   1edbe:	2800      	cmp	r0, #0
   1edc0:	d1ea      	bne.n	1ed98 <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   1edc2:	2008      	movs	r0, #8
   1edc4:	e7e2      	b.n	1ed8c <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1edc6:	2301      	movs	r3, #1
   1edc8:	7263      	strb	r3, [r4, #9]
   1edca:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1edce:	4620      	mov	r0, r4
   1edd0:	f8c4 300a 	str.w	r3, [r4, #10]
   1edd4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1edd8:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1edda:	2302      	movs	r3, #2
   1eddc:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1edde:	f898 1002 	ldrb.w	r1, [r8, #2]
   1ede2:	f7ff fd49 	bl	1e878 <get_auth>
   1ede6:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1ede8:	4620      	mov	r0, r4
   1edea:	f7ff fd1f 	bl	1e82c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1edee:	4ba9      	ldr	r3, [pc, #676]	; (1f094 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   1edf0:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1edf2:	781b      	ldrb	r3, [r3, #0]
   1edf4:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1edf6:	2310      	movs	r3, #16
   1edf8:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1edfa:	f898 3004 	ldrb.w	r3, [r8, #4]
   1edfe:	f003 0303 	and.w	r3, r3, #3
   1ee02:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1ee04:	f898 3005 	ldrb.w	r3, [r8, #5]
   1ee08:	f003 0301 	and.w	r3, r3, #1
   1ee0c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1ee0e:	7ce3      	ldrb	r3, [r4, #19]
   1ee10:	071b      	lsls	r3, r3, #28
   1ee12:	d50d      	bpl.n	1ee30 <smp_pairing_req+0xc8>
   1ee14:	f898 3002 	ldrb.w	r3, [r8, #2]
   1ee18:	0718      	lsls	r0, r3, #28
   1ee1a:	d509      	bpl.n	1ee30 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1ee1c:	2105      	movs	r1, #5
   1ee1e:	4628      	mov	r0, r5
   1ee20:	f00f fecc 	bl	2ebbc <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1ee24:	7d63      	ldrb	r3, [r4, #21]
   1ee26:	f003 0302 	and.w	r3, r3, #2
   1ee2a:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1ee2c:	2300      	movs	r3, #0
   1ee2e:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1ee30:	7ce3      	ldrb	r3, [r4, #19]
   1ee32:	0699      	lsls	r1, r3, #26
   1ee34:	d507      	bpl.n	1ee46 <smp_pairing_req+0xde>
   1ee36:	f898 3002 	ldrb.w	r3, [r8, #2]
   1ee3a:	069a      	lsls	r2, r3, #26
   1ee3c:	d503      	bpl.n	1ee46 <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1ee3e:	2114      	movs	r1, #20
   1ee40:	4628      	mov	r0, r5
   1ee42:	f00f febb 	bl	2ebbc <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1ee46:	7da3      	ldrb	r3, [r4, #22]
   1ee48:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1ee4c:	7d63      	ldrb	r3, [r4, #21]
   1ee4e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1ee52:	7ce3      	ldrb	r3, [r4, #19]
   1ee54:	07db      	lsls	r3, r3, #31
   1ee56:	d507      	bpl.n	1ee68 <smp_pairing_req+0x100>
   1ee58:	f898 3002 	ldrb.w	r3, [r8, #2]
   1ee5c:	07d8      	lsls	r0, r3, #31
   1ee5e:	d503      	bpl.n	1ee68 <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1ee60:	210d      	movs	r1, #13
   1ee62:	4628      	mov	r0, r5
   1ee64:	f00f feaa 	bl	2ebbc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1ee68:	2103      	movs	r1, #3
   1ee6a:	4628      	mov	r0, r5
   1ee6c:	f00f fea6 	bl	2ebbc <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ee70:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1ee72:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ee76:	f00f fe3a 	bl	2eaee <atomic_test_bit>
   1ee7a:	bb40      	cbnz	r0, 1eece <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1ee7c:	f1b8 0f04 	cmp.w	r8, #4
   1ee80:	d845      	bhi.n	1ef0e <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1ee82:	7ae3      	ldrb	r3, [r4, #11]
   1ee84:	7ca2      	ldrb	r2, [r4, #18]
   1ee86:	4013      	ands	r3, r2
   1ee88:	07d9      	lsls	r1, r3, #31
   1ee8a:	d43e      	bmi.n	1ef0a <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1ee8c:	7b21      	ldrb	r1, [r4, #12]
   1ee8e:	7ce3      	ldrb	r3, [r4, #19]
   1ee90:	4319      	orrs	r1, r3
   1ee92:	f011 0104 	ands.w	r1, r1, #4
   1ee96:	d011      	beq.n	1eebc <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1ee98:	4620      	mov	r0, r4
   1ee9a:	f7ff fcc7 	bl	1e82c <get_io_capa>
   1ee9e:	4b7e      	ldr	r3, [pc, #504]	; (1f098 <smp_pairing_req+0x330>)
   1eea0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1eea4:	4498      	add	r8, r3
   1eea6:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1eeaa:	2904      	cmp	r1, #4
   1eeac:	d106      	bne.n	1eebc <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1eeae:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1eeb2:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1eeb4:	2b00      	cmp	r3, #0
   1eeb6:	bf14      	ite	ne
   1eeb8:	2101      	movne	r1, #1
   1eeba:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1eebc:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1eebe:	4620      	mov	r0, r4
   1eec0:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   1eec4:	f00f fe19 	bl	2eafa <update_keys_check>
   1eec8:	bb18      	cbnz	r0, 1ef12 <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1eeca:	2003      	movs	r0, #3
   1eecc:	e75e      	b.n	1ed8c <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1eece:	7b23      	ldrb	r3, [r4, #12]
   1eed0:	7ce0      	ldrb	r0, [r4, #19]
   1eed2:	ea03 0200 	and.w	r2, r3, r0
   1eed6:	0712      	lsls	r2, r2, #28
   1eed8:	d506      	bpl.n	1eee8 <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1eeda:	7ae2      	ldrb	r2, [r4, #11]
   1eedc:	f894 c012 	ldrb.w	ip, [r4, #18]
   1eee0:	ea42 020c 	orr.w	r2, r2, ip
   1eee4:	07d2      	lsls	r2, r2, #31
   1eee6:	d4e9      	bmi.n	1eebc <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1eee8:	f1b8 0f04 	cmp.w	r8, #4
   1eeec:	d80f      	bhi.n	1ef0e <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1eeee:	ea43 0100 	orr.w	r1, r3, r0
   1eef2:	f011 0104 	ands.w	r1, r1, #4
   1eef6:	d0e1      	beq.n	1eebc <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1eef8:	4620      	mov	r0, r4
   1eefa:	f7ff fc97 	bl	1e82c <get_io_capa>
   1eefe:	4b67      	ldr	r3, [pc, #412]	; (1f09c <smp_pairing_req+0x334>)
   1ef00:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1ef04:	4443      	add	r3, r8
   1ef06:	5c19      	ldrb	r1, [r3, r0]
   1ef08:	e7d8      	b.n	1eebc <smp_pairing_req+0x154>
		return LEGACY_OOB;
   1ef0a:	2106      	movs	r1, #6
   1ef0c:	e7d6      	b.n	1eebc <smp_pairing_req+0x154>
		return JUST_WORKS;
   1ef0e:	2100      	movs	r1, #0
   1ef10:	e7d4      	b.n	1eebc <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1ef12:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ef16:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1ef18:	2b03      	cmp	r3, #3
   1ef1a:	d03c      	beq.n	1ef96 <smp_pairing_req+0x22e>
   1ef1c:	d82a      	bhi.n	1ef74 <smp_pairing_req+0x20c>
   1ef1e:	3b01      	subs	r3, #1
   1ef20:	2b01      	cmp	r3, #1
   1ef22:	f63f af4e 	bhi.w	1edc2 <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ef26:	2105      	movs	r1, #5
   1ef28:	4628      	mov	r0, r5
   1ef2a:	f00f fde0 	bl	2eaee <atomic_test_bit>
   1ef2e:	2800      	cmp	r0, #0
   1ef30:	f040 80be 	bne.w	1f0b0 <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ef34:	4620      	mov	r0, r4
   1ef36:	f7ff fc63 	bl	1e800 <latch_auth_cb>
   1ef3a:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ef3c:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1ef3e:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ef42:	f7ff fc5d 	bl	1e800 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1ef46:	f108 0188 	add.w	r1, r8, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ef4a:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1ef4c:	f898 0008 	ldrb.w	r0, [r8, #8]
   1ef50:	f001 f930 	bl	201b4 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1ef54:	7a23      	ldrb	r3, [r4, #8]
   1ef56:	b310      	cbz	r0, 1ef9e <smp_pairing_req+0x236>
   1ef58:	7b42      	ldrb	r2, [r0, #13]
   1ef5a:	07d2      	lsls	r2, r2, #31
   1ef5c:	d51f      	bpl.n	1ef9e <smp_pairing_req+0x236>
   1ef5e:	b9f3      	cbnz	r3, 1ef9e <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1ef60:	4a4f      	ldr	r2, [pc, #316]	; (1f0a0 <smp_pairing_req+0x338>)
   1ef62:	4618      	mov	r0, r3
   1ef64:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ef68:	494e      	ldr	r1, [pc, #312]	; (1f0a4 <smp_pairing_req+0x33c>)
   1ef6a:	2201      	movs	r2, #1
   1ef6c:	9300      	str	r3, [sp, #0]
   1ef6e:	f00f fe16 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   1ef72:	e726      	b.n	1edc2 <smp_pairing_req+0x5a>
	switch (sec) {
   1ef74:	2b04      	cmp	r3, #4
   1ef76:	f47f af24 	bne.w	1edc2 <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   1ef7a:	7d23      	ldrb	r3, [r4, #20]
   1ef7c:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1ef7e:	4293      	cmp	r3, r2
   1ef80:	bf28      	it	cs
   1ef82:	4613      	movcs	r3, r2
   1ef84:	2b10      	cmp	r3, #16
   1ef86:	f47f af00 	bne.w	1ed8a <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ef8a:	2105      	movs	r1, #5
   1ef8c:	4628      	mov	r0, r5
   1ef8e:	f00f fdae 	bl	2eaee <atomic_test_bit>
   1ef92:	2800      	cmp	r0, #0
   1ef94:	d099      	beq.n	1eeca <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   1ef96:	7a23      	ldrb	r3, [r4, #8]
   1ef98:	2b00      	cmp	r3, #0
   1ef9a:	d1c4      	bne.n	1ef26 <smp_pairing_req+0x1be>
   1ef9c:	e795      	b.n	1eeca <smp_pairing_req+0x162>
	switch (smp->method) {
   1ef9e:	2b06      	cmp	r3, #6
   1efa0:	d85d      	bhi.n	1f05e <smp_pairing_req+0x2f6>
   1efa2:	e8df f003 	tbb	[pc, r3]
   1efa6:	5418      	.short	0x5418
   1efa8:	5c5c5c2d 	.word	0x5c5c5c2d
   1efac:	04          	.byte	0x04
   1efad:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1efae:	2e00      	cmp	r6, #0
   1efb0:	d061      	beq.n	1f076 <smp_pairing_req+0x30e>
   1efb2:	68f3      	ldr	r3, [r6, #12]
   1efb4:	2b00      	cmp	r3, #0
   1efb6:	d05e      	beq.n	1f076 <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   1efb8:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1efba:	210a      	movs	r1, #10
   1efbc:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1efbe:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1efc2:	f00f fdfb 	bl	2ebbc <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1efc6:	68f3      	ldr	r3, [r6, #12]
   1efc8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1efcc:	a905      	add	r1, sp, #20
   1efce:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1efd0:	7a23      	ldrb	r3, [r4, #8]
   1efd2:	2b00      	cmp	r3, #0
   1efd4:	d151      	bne.n	1f07a <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1efd6:	210f      	movs	r1, #15
   1efd8:	4628      	mov	r0, r5
   1efda:	f00f fd88 	bl	2eaee <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1efde:	2800      	cmp	r0, #0
   1efe0:	d14b      	bne.n	1f07a <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1efe2:	2f00      	cmp	r7, #0
   1efe4:	d049      	beq.n	1f07a <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1efe6:	697b      	ldr	r3, [r7, #20]
   1efe8:	2b00      	cmp	r3, #0
   1efea:	d046      	beq.n	1f07a <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1efec:	4628      	mov	r0, r5
   1efee:	210a      	movs	r1, #10
   1eff0:	f00f fde4 	bl	2ebbc <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1eff4:	697b      	ldr	r3, [r7, #20]
   1eff6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1effa:	4798      	blx	r3
		return 0;
   1effc:	2000      	movs	r0, #0
   1effe:	e6c5      	b.n	1ed8c <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1f000:	2104      	movs	r1, #4
   1f002:	a805      	add	r0, sp, #20
   1f004:	f7fc fbbe 	bl	1b784 <bt_rand>
   1f008:	2800      	cmp	r0, #0
   1f00a:	f47f aeda 	bne.w	1edc2 <smp_pairing_req+0x5a>
			passkey %= 1000000;
   1f00e:	9b05      	ldr	r3, [sp, #20]
   1f010:	4a25      	ldr	r2, [pc, #148]	; (1f0a8 <smp_pairing_req+0x340>)
   1f012:	fbb3 f1f2 	udiv	r1, r3, r2
   1f016:	fb02 3311 	mls	r3, r2, r1, r3
   1f01a:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1f01c:	b14e      	cbz	r6, 1f032 <smp_pairing_req+0x2ca>
   1f01e:	6833      	ldr	r3, [r6, #0]
   1f020:	b13b      	cbz	r3, 1f032 <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f022:	210b      	movs	r1, #11
   1f024:	4628      	mov	r0, r5
   1f026:	f00f fdc9 	bl	2ebbc <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1f02a:	4640      	mov	r0, r8
   1f02c:	6833      	ldr	r3, [r6, #0]
   1f02e:	9905      	ldr	r1, [sp, #20]
   1f030:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1f032:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   1f034:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1f038:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   1f03c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1f03e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1f042:	0a1b      	lsrs	r3, r3, #8
   1f044:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1f048:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1f04c:	e7c0      	b.n	1efd0 <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f04e:	4628      	mov	r0, r5
   1f050:	210a      	movs	r1, #10
   1f052:	f00f fdb3 	bl	2ebbc <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1f056:	4640      	mov	r0, r8
   1f058:	6873      	ldr	r3, [r6, #4]
   1f05a:	4798      	blx	r3
	if (ret) {
   1f05c:	e7b8      	b.n	1efd0 <smp_pairing_req+0x268>
	switch (smp->method) {
   1f05e:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f060:	4b12      	ldr	r3, [pc, #72]	; (1f0ac <smp_pairing_req+0x344>)
   1f062:	2201      	movs	r2, #1
   1f064:	9302      	str	r3, [sp, #8]
   1f066:	2300      	movs	r3, #0
   1f068:	490e      	ldr	r1, [pc, #56]	; (1f0a4 <smp_pairing_req+0x33c>)
   1f06a:	4618      	mov	r0, r3
   1f06c:	e9cd 3300 	strd	r3, r3, [sp]
   1f070:	f00f fd95 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   1f074:	e6a5      	b.n	1edc2 <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f076:	2002      	movs	r0, #2
   1f078:	e688      	b.n	1ed8c <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1f07a:	2103      	movs	r1, #3
   1f07c:	4620      	mov	r0, r4
   1f07e:	f00f fd9d 	bl	2ebbc <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1f082:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f084:	f00f fd9a 	bl	2ebbc <atomic_set_bit>
}
   1f088:	b006      	add	sp, #24
   1f08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   1f08e:	f00f bdc4 	b.w	2ec1a <send_pairing_rsp>
   1f092:	bf00      	nop
   1f094:	200319de 	.word	0x200319de
   1f098:	00037a16 	.word	0x00037a16
   1f09c:	000379fd 	.word	0x000379fd
   1f0a0:	00037716 	.word	0x00037716
   1f0a4:	00032f30 	.word	0x00032f30
   1f0a8:	000f4240 	.word	0x000f4240
   1f0ac:	000376be 	.word	0x000376be
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1f0b0:	7a23      	ldrb	r3, [r4, #8]
   1f0b2:	b973      	cbnz	r3, 1f0d2 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f0b4:	210f      	movs	r1, #15
   1f0b6:	4628      	mov	r0, r5
   1f0b8:	f00f fd19 	bl	2eaee <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f0bc:	b948      	cbnz	r0, 1f0d2 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f0be:	b147      	cbz	r7, 1f0d2 <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f0c0:	697b      	ldr	r3, [r7, #20]
   1f0c2:	b133      	cbz	r3, 1f0d2 <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f0c4:	4628      	mov	r0, r5
   1f0c6:	210a      	movs	r1, #10
   1f0c8:	f00f fd78 	bl	2ebbc <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1f0cc:	4630      	mov	r0, r6
   1f0ce:	697b      	ldr	r3, [r7, #20]
   1f0d0:	e793      	b.n	1effa <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f0d2:	210c      	movs	r1, #12
   1f0d4:	4620      	mov	r0, r4
   1f0d6:	e7d5      	b.n	1f084 <smp_pairing_req+0x31c>

0001f0d8 <compute_and_check_and_send_periph_dhcheck>:
{
   1f0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f0dc:	4604      	mov	r4, r0
   1f0de:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   1f0e0:	ad0c      	add	r5, sp, #48	; 0x30
   1f0e2:	2210      	movs	r2, #16
   1f0e4:	2100      	movs	r1, #0
   1f0e6:	4628      	mov	r0, r5
   1f0e8:	f012 fb4b 	bl	31782 <memset>
	switch (smp->method) {
   1f0ec:	7a23      	ldrb	r3, [r4, #8]
   1f0ee:	2b05      	cmp	r3, #5
   1f0f0:	d83a      	bhi.n	1f168 <compute_and_check_and_send_periph_dhcheck+0x90>
   1f0f2:	e8df f003 	tbb	[pc, r3]
   1f0f6:	0306      	.short	0x0306
   1f0f8:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1f0fc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1f100:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f102:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1f106:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1f10a:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f10e:	e9cd 7201 	strd	r7, r2, [sp, #4]
   1f112:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1f116:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f11a:	f104 0927 	add.w	r9, r4, #39	; 0x27
   1f11e:	9200      	str	r2, [sp, #0]
   1f120:	4641      	mov	r1, r8
   1f122:	464a      	mov	r2, r9
   1f124:	338f      	adds	r3, #143	; 0x8f
   1f126:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1f12a:	f001 f853 	bl	201d4 <bt_crypto_f5>
   1f12e:	4682      	mov	sl, r0
   1f130:	b348      	cbz	r0, 1f186 <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   1f132:	4b4e      	ldr	r3, [pc, #312]	; (1f26c <compute_and_check_and_send_periph_dhcheck+0x194>)
   1f134:	9302      	str	r3, [sp, #8]
   1f136:	2300      	movs	r3, #0
   1f138:	e9cd 3300 	strd	r3, r3, [sp]
   1f13c:	2201      	movs	r2, #1
   1f13e:	4618      	mov	r0, r3
   1f140:	494b      	ldr	r1, [pc, #300]	; (1f270 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1f142:	f00f fd2c 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f146:	e01a      	b.n	1f17e <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   1f148:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1f14c:	2b00      	cmp	r3, #0
   1f14e:	d0d8      	beq.n	1f102 <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1f150:	462e      	mov	r6, r5
   1f152:	f103 0710 	add.w	r7, r3, #16
   1f156:	4632      	mov	r2, r6
   1f158:	6818      	ldr	r0, [r3, #0]
   1f15a:	6859      	ldr	r1, [r3, #4]
   1f15c:	3308      	adds	r3, #8
   1f15e:	c203      	stmia	r2!, {r0, r1}
   1f160:	42bb      	cmp	r3, r7
   1f162:	4616      	mov	r6, r2
   1f164:	d1f7      	bne.n	1f156 <compute_and_check_and_send_periph_dhcheck+0x7e>
   1f166:	e7cc      	b.n	1f102 <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   1f168:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f16a:	4b42      	ldr	r3, [pc, #264]	; (1f274 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   1f16c:	2201      	movs	r2, #1
   1f16e:	9302      	str	r3, [sp, #8]
   1f170:	2300      	movs	r3, #0
   1f172:	493f      	ldr	r1, [pc, #252]	; (1f270 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1f174:	4618      	mov	r0, r3
   1f176:	e9cd 3300 	strd	r3, r3, [sp]
   1f17a:	f00f fd10 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f17e:	2008      	movs	r0, #8
}
   1f180:	b010      	add	sp, #64	; 0x40
   1f182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1f186:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1f18a:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1f18c:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1f190:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1f192:	9301      	str	r3, [sp, #4]
   1f194:	f104 0311 	add.w	r3, r4, #17
   1f198:	9202      	str	r2, [sp, #8]
   1f19a:	9300      	str	r3, [sp, #0]
   1f19c:	4642      	mov	r2, r8
   1f19e:	462b      	mov	r3, r5
   1f1a0:	4649      	mov	r1, r9
   1f1a2:	4638      	mov	r0, r7
   1f1a4:	9603      	str	r6, [sp, #12]
   1f1a6:	f010 f803 	bl	2f1b0 <bt_crypto_f6>
   1f1aa:	b130      	cbz	r0, 1f1ba <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   1f1ac:	4b32      	ldr	r3, [pc, #200]	; (1f278 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   1f1ae:	f8cd a000 	str.w	sl, [sp]
   1f1b2:	e9cd a301 	strd	sl, r3, [sp, #4]
   1f1b6:	4653      	mov	r3, sl
   1f1b8:	e7c0      	b.n	1f13c <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   1f1ba:	7a23      	ldrb	r3, [r4, #8]
   1f1bc:	2b05      	cmp	r3, #5
   1f1be:	d10e      	bne.n	1f1de <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   1f1c0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1f1c4:	b311      	cbz	r1, 1f20c <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1f1c6:	460b      	mov	r3, r1
   1f1c8:	46ac      	mov	ip, r5
   1f1ca:	f101 0e10 	add.w	lr, r1, #16
   1f1ce:	4662      	mov	r2, ip
   1f1d0:	6818      	ldr	r0, [r3, #0]
   1f1d2:	6859      	ldr	r1, [r3, #4]
   1f1d4:	3308      	adds	r3, #8
   1f1d6:	c203      	stmia	r2!, {r0, r1}
   1f1d8:	4573      	cmp	r3, lr
   1f1da:	4694      	mov	ip, r2
   1f1dc:	d1f7      	bne.n	1f1ce <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f1de:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1f1e2:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f1e6:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1f1ea:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1f1ec:	9301      	str	r3, [sp, #4]
   1f1ee:	f104 030a 	add.w	r3, r4, #10
   1f1f2:	9202      	str	r2, [sp, #8]
   1f1f4:	9300      	str	r3, [sp, #0]
   1f1f6:	464a      	mov	r2, r9
   1f1f8:	462b      	mov	r3, r5
   1f1fa:	4641      	mov	r1, r8
   1f1fc:	4638      	mov	r0, r7
   1f1fe:	f8cd a00c 	str.w	sl, [sp, #12]
   1f202:	f00f ffd5 	bl	2f1b0 <bt_crypto_f6>
   1f206:	b130      	cbz	r0, 1f216 <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   1f208:	4b1c      	ldr	r3, [pc, #112]	; (1f27c <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   1f20a:	e793      	b.n	1f134 <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   1f20c:	2210      	movs	r2, #16
   1f20e:	4628      	mov	r0, r5
   1f210:	f012 fab7 	bl	31782 <memset>
   1f214:	e7e3      	b.n	1f1de <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   1f216:	2210      	movs	r2, #16
   1f218:	4651      	mov	r1, sl
   1f21a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1f21e:	f012 fa66 	bl	316ee <memcmp>
   1f222:	bb00      	cbnz	r0, 1f266 <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1f224:	210d      	movs	r1, #13
   1f226:	4620      	mov	r0, r4
   1f228:	f00f fcd8 	bl	2ebdc <smp_create_pdu.constprop.0>
	if (!buf) {
   1f22c:	4607      	mov	r7, r0
   1f22e:	2800      	cmp	r0, #0
   1f230:	d0a5      	beq.n	1f17e <compute_and_check_and_send_periph_dhcheck+0xa6>
   1f232:	2110      	movs	r1, #16
   1f234:	300c      	adds	r0, #12
   1f236:	f010 f86c 	bl	2f312 <net_buf_simple_add>
   1f23a:	4632      	mov	r2, r6
   1f23c:	4603      	mov	r3, r0
   1f23e:	4616      	mov	r6, r2
   1f240:	ce03      	ldmia	r6!, {r0, r1}
   1f242:	42ae      	cmp	r6, r5
   1f244:	6018      	str	r0, [r3, #0]
   1f246:	6059      	str	r1, [r3, #4]
   1f248:	4632      	mov	r2, r6
   1f24a:	f103 0308 	add.w	r3, r3, #8
   1f24e:	d1f6      	bne.n	1f23e <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   1f250:	2200      	movs	r2, #0
   1f252:	4639      	mov	r1, r7
   1f254:	4620      	mov	r0, r4
   1f256:	f00f fc85 	bl	2eb64 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f25a:	1d20      	adds	r0, r4, #4
   1f25c:	2101      	movs	r1, #1
   1f25e:	f00f fcad 	bl	2ebbc <atomic_set_bit>
	return 0;
   1f262:	2000      	movs	r0, #0
   1f264:	e78c      	b.n	1f180 <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1f266:	200b      	movs	r0, #11
   1f268:	e78a      	b.n	1f180 <compute_and_check_and_send_periph_dhcheck+0xa8>
   1f26a:	bf00      	nop
   1f26c:	00037743 	.word	0x00037743
   1f270:	00032f30 	.word	0x00032f30
   1f274:	000376be 	.word	0x000376be
   1f278:	00037758 	.word	0x00037758
   1f27c:	0003777b 	.word	0x0003777b

0001f280 <bt_smp_connected>:
{
   1f280:	b538      	push	{r3, r4, r5, lr}
   1f282:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1f284:	4908      	ldr	r1, [pc, #32]	; (1f2a8 <bt_smp_connected+0x28>)
   1f286:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1f28a:	308c      	adds	r0, #140	; 0x8c
   1f28c:	f011 feb6 	bl	30ffc <k_work_init_delayable>
	smp_reset(smp);
   1f290:	4628      	mov	r0, r5
   1f292:	f00f fd3c 	bl	2ed0e <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f296:	4b05      	ldr	r3, [pc, #20]	; (1f2ac <bt_smp_connected+0x2c>)
   1f298:	34bc      	adds	r4, #188	; 0xbc
   1f29a:	e8d4 2fef 	ldaex	r2, [r4]
   1f29e:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1f2a2:	2900      	cmp	r1, #0
   1f2a4:	d1f9      	bne.n	1f29a <bt_smp_connected+0x1a>
}
   1f2a6:	bd38      	pop	{r3, r4, r5, pc}
   1f2a8:	0001fedd 	.word	0x0001fedd
   1f2ac:	2000a128 	.word	0x2000a128

0001f2b0 <smp_pairing_confirm>:
{
   1f2b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f2b2:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1f2b4:	68cd      	ldr	r5, [r1, #12]
{
   1f2b6:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f2b8:	210b      	movs	r1, #11
   1f2ba:	4630      	mov	r0, r6
   1f2bc:	f00f fc3e 	bl	2eb3c <atomic_clear_bit>
   1f2c0:	462b      	mov	r3, r5
   1f2c2:	f104 0217 	add.w	r2, r4, #23
   1f2c6:	f105 0110 	add.w	r1, r5, #16
   1f2ca:	f853 0b04 	ldr.w	r0, [r3], #4
   1f2ce:	428b      	cmp	r3, r1
   1f2d0:	f842 0b04 	str.w	r0, [r2], #4
   1f2d4:	d1f9      	bne.n	1f2ca <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f2d6:	2105      	movs	r1, #5
   1f2d8:	4630      	mov	r0, r6
   1f2da:	f00f fc08 	bl	2eaee <atomic_test_bit>
   1f2de:	b928      	cbnz	r0, 1f2ec <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   1f2e0:	4620      	mov	r0, r4
}
   1f2e2:	b004      	add	sp, #16
   1f2e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1f2e8:	f00f bd87 	b.w	2edfa <legacy_pairing_confirm>
	switch (smp->method) {
   1f2ec:	7a23      	ldrb	r3, [r4, #8]
   1f2ee:	2b01      	cmp	r3, #1
   1f2f0:	d00a      	beq.n	1f308 <smp_pairing_confirm+0x58>
   1f2f2:	2b02      	cmp	r3, #2
   1f2f4:	d115      	bne.n	1f322 <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f2f6:	2104      	movs	r1, #4
   1f2f8:	4620      	mov	r0, r4
   1f2fa:	f00f fc5f 	bl	2ebbc <atomic_set_bit>
}
   1f2fe:	b004      	add	sp, #16
   1f300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1f304:	f7ff bbca 	b.w	1ea9c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f308:	210a      	movs	r1, #10
   1f30a:	4630      	mov	r0, r6
   1f30c:	f00f fbef 	bl	2eaee <atomic_test_bit>
   1f310:	2800      	cmp	r0, #0
   1f312:	d0f0      	beq.n	1f2f6 <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f314:	4630      	mov	r0, r6
   1f316:	2100      	movs	r1, #0
   1f318:	f00f fc50 	bl	2ebbc <atomic_set_bit>
			return 0;
   1f31c:	2000      	movs	r0, #0
}
   1f31e:	b004      	add	sp, #16
   1f320:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1f322:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f324:	4b05      	ldr	r3, [pc, #20]	; (1f33c <smp_pairing_confirm+0x8c>)
   1f326:	2201      	movs	r2, #1
   1f328:	9302      	str	r3, [sp, #8]
   1f32a:	2300      	movs	r3, #0
   1f32c:	4904      	ldr	r1, [pc, #16]	; (1f340 <smp_pairing_confirm+0x90>)
   1f32e:	4618      	mov	r0, r3
   1f330:	e9cd 3300 	strd	r3, r3, [sp]
   1f334:	f00f fc33 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f338:	2008      	movs	r0, #8
   1f33a:	e7f0      	b.n	1f31e <smp_pairing_confirm+0x6e>
   1f33c:	000376be 	.word	0x000376be
   1f340:	00032f30 	.word	0x00032f30

0001f344 <smp_pairing_random>:
{
   1f344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f348:	4604      	mov	r4, r0
   1f34a:	b089      	sub	sp, #36	; 0x24
   1f34c:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f34e:	f7ff fa57 	bl	1e800 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f352:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f356:	4605      	mov	r5, r0
   1f358:	464a      	mov	r2, r9
   1f35a:	68f3      	ldr	r3, [r6, #12]
   1f35c:	f103 0110 	add.w	r1, r3, #16
   1f360:	f853 0b04 	ldr.w	r0, [r3], #4
   1f364:	428b      	cmp	r3, r1
   1f366:	f842 0b04 	str.w	r0, [r2], #4
   1f36a:	d1f9      	bne.n	1f360 <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f36c:	1d27      	adds	r7, r4, #4
   1f36e:	2105      	movs	r1, #5
   1f370:	4638      	mov	r0, r7
   1f372:	f00f fbbc 	bl	2eaee <atomic_test_bit>
   1f376:	2800      	cmp	r0, #0
   1f378:	d14f      	bne.n	1f41a <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   1f37a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f37e:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f382:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f386:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f388:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f38a:	9201      	str	r2, [sp, #4]
   1f38c:	9300      	str	r3, [sp, #0]
   1f38e:	4649      	mov	r1, r9
   1f390:	4630      	mov	r0, r6
   1f392:	9502      	str	r5, [sp, #8]
   1f394:	f104 0310 	add.w	r3, r4, #16
   1f398:	f104 0209 	add.w	r2, r4, #9
   1f39c:	f00f fcd2 	bl	2ed44 <smp_c1>
	if (err) {
   1f3a0:	bb20      	cbnz	r0, 1f3ec <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1f3a2:	2210      	movs	r2, #16
   1f3a4:	4629      	mov	r1, r5
   1f3a6:	f104 0017 	add.w	r0, r4, #23
   1f3aa:	f012 f9a0 	bl	316ee <memcmp>
   1f3ae:	4680      	mov	r8, r0
   1f3b0:	2800      	cmp	r0, #0
   1f3b2:	d177      	bne.n	1f4a4 <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   1f3b4:	462b      	mov	r3, r5
   1f3b6:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1f3ba:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   1f3be:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   1f3c0:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1f3c2:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1f3c6:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   1f3ca:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1f3cc:	4629      	mov	r1, r5
   1f3ce:	4630      	mov	r0, r6
   1f3d0:	f00e fa03 	bl	2d7da <bt_encrypt_le>
		if (err) {
   1f3d4:	b170      	cbz	r0, 1f3f4 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   1f3d6:	4b62      	ldr	r3, [pc, #392]	; (1f560 <smp_pairing_random+0x21c>)
   1f3d8:	f8cd 8000 	str.w	r8, [sp]
   1f3dc:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1f3e0:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   1f3e2:	2201      	movs	r2, #1
   1f3e4:	4618      	mov	r0, r3
   1f3e6:	495f      	ldr	r1, [pc, #380]	; (1f564 <smp_pairing_random+0x220>)
   1f3e8:	f00f fbd9 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f3ec:	2008      	movs	r0, #8
}
   1f3ee:	b009      	add	sp, #36	; 0x24
   1f3f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f3f4:	4633      	mov	r3, r6
   1f3f6:	ae08      	add	r6, sp, #32
   1f3f8:	462a      	mov	r2, r5
   1f3fa:	ca03      	ldmia	r2!, {r0, r1}
   1f3fc:	42b2      	cmp	r2, r6
   1f3fe:	6018      	str	r0, [r3, #0]
   1f400:	6059      	str	r1, [r3, #4]
   1f402:	4615      	mov	r5, r2
   1f404:	f103 0308 	add.w	r3, r3, #8
   1f408:	d1f6      	bne.n	1f3f8 <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f40a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f40c:	4638      	mov	r0, r7
   1f40e:	f00f fbd5 	bl	2ebbc <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1f412:	4620      	mov	r0, r4
   1f414:	f00f fc1b 	bl	2ec4e <smp_send_pairing_random>
   1f418:	e7e9      	b.n	1f3ee <smp_pairing_random+0xaa>
	switch (smp->method) {
   1f41a:	7a23      	ldrb	r3, [r4, #8]
   1f41c:	2b05      	cmp	r3, #5
   1f41e:	f200 8091 	bhi.w	1f544 <smp_pairing_random+0x200>
   1f422:	e8df f003 	tbb	[pc, r3]
   1f426:	1f19      	.short	0x1f19
   1f428:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   1f42c:	ab04      	add	r3, sp, #16
   1f42e:	494e      	ldr	r1, [pc, #312]	; (1f568 <smp_pairing_random+0x224>)
   1f430:	9300      	str	r3, [sp, #0]
   1f432:	464a      	mov	r2, r9
   1f434:	6809      	ldr	r1, [r1, #0]
   1f436:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1f43a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f43e:	f000 ff31 	bl	202a4 <bt_crypto_g2>
   1f442:	2800      	cmp	r0, #0
   1f444:	d1d2      	bne.n	1f3ec <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f446:	210a      	movs	r1, #10
   1f448:	4638      	mov	r0, r7
   1f44a:	f00f fbb7 	bl	2ebbc <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1f44e:	68ab      	ldr	r3, [r5, #8]
   1f450:	9904      	ldr	r1, [sp, #16]
   1f452:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f456:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f458:	210d      	movs	r1, #13
   1f45a:	4620      	mov	r0, r4
   1f45c:	f00f fbae 	bl	2ebbc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f460:	2110      	movs	r1, #16
   1f462:	e7d3      	b.n	1f40c <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f464:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1f468:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f46c:	493e      	ldr	r1, [pc, #248]	; (1f568 <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f46e:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f470:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f472:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f476:	9500      	str	r5, [sp, #0]
   1f478:	464a      	mov	r2, r9
   1f47a:	6809      	ldr	r1, [r1, #0]
   1f47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f480:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f484:	f00f fe6f 	bl	2f166 <bt_crypto_f4>
   1f488:	b128      	cbz	r0, 1f496 <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   1f48a:	4b38      	ldr	r3, [pc, #224]	; (1f56c <smp_pairing_random+0x228>)
   1f48c:	9302      	str	r3, [sp, #8]
   1f48e:	2300      	movs	r3, #0
   1f490:	e9cd 3300 	strd	r3, r3, [sp]
   1f494:	e7a5      	b.n	1f3e2 <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1f496:	2210      	movs	r2, #16
   1f498:	4629      	mov	r1, r5
   1f49a:	f104 0017 	add.w	r0, r4, #23
   1f49e:	f012 f926 	bl	316ee <memcmp>
   1f4a2:	b108      	cbz	r0, 1f4a8 <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1f4a4:	2004      	movs	r0, #4
   1f4a6:	e7a2      	b.n	1f3ee <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   1f4a8:	2103      	movs	r1, #3
   1f4aa:	4620      	mov	r0, r4
   1f4ac:	f00f fb86 	bl	2ebbc <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1f4b0:	f00f fbcd 	bl	2ec4e <smp_send_pairing_random>
		if (err) {
   1f4b4:	2800      	cmp	r0, #0
   1f4b6:	d19a      	bne.n	1f3ee <smp_pairing_random+0xaa>
		smp->passkey_round++;
   1f4b8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1f4bc:	3301      	adds	r3, #1
   1f4be:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1f4c0:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1f4c2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1f4c6:	d109      	bne.n	1f4dc <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f4c8:	210d      	movs	r1, #13
   1f4ca:	4620      	mov	r0, r4
   1f4cc:	f00f fb76 	bl	2ebbc <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f4d0:	2110      	movs	r1, #16
   1f4d2:	4638      	mov	r0, r7
   1f4d4:	f00f fb72 	bl	2ebbc <atomic_set_bit>
			return 0;
   1f4d8:	2000      	movs	r0, #0
   1f4da:	e788      	b.n	1f3ee <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   1f4dc:	2110      	movs	r1, #16
   1f4de:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f4e2:	f7fc f94f 	bl	1b784 <bt_rand>
   1f4e6:	3800      	subs	r0, #0
   1f4e8:	bf18      	it	ne
   1f4ea:	2001      	movne	r0, #1
   1f4ec:	00c0      	lsls	r0, r0, #3
   1f4ee:	e77e      	b.n	1f3ee <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   1f4f0:	2110      	movs	r1, #16
   1f4f2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f4f6:	f7fc f945 	bl	1b784 <bt_rand>
   1f4fa:	2800      	cmp	r0, #0
   1f4fc:	f47f af76 	bne.w	1f3ec <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1f500:	b365      	cbz	r5, 1f55c <smp_pairing_random+0x218>
   1f502:	68eb      	ldr	r3, [r5, #12]
   1f504:	b353      	cbz	r3, 1f55c <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   1f506:	4b1a      	ldr	r3, [pc, #104]	; (1f570 <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f508:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1f50a:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1f50c:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   1f50e:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f512:	7ca3      	ldrb	r3, [r4, #18]
   1f514:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1f518:	d412      	bmi.n	1f540 <smp_pairing_random+0x1fc>
   1f51a:	2b00      	cmp	r3, #0
   1f51c:	bf14      	ite	ne
   1f51e:	2301      	movne	r3, #1
   1f520:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1f522:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   1f526:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1f528:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   1f52a:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1f52e:	210c      	movs	r1, #12
   1f530:	f00f fb44 	bl	2ebbc <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1f534:	68eb      	ldr	r3, [r5, #12]
   1f536:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f53a:	a904      	add	r1, sp, #16
   1f53c:	4798      	blx	r3
			return 0;
   1f53e:	e7cb      	b.n	1f4d8 <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   1f540:	005b      	lsls	r3, r3, #1
   1f542:	e7ee      	b.n	1f522 <smp_pairing_random+0x1de>
	switch (smp->method) {
   1f544:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f546:	4b0b      	ldr	r3, [pc, #44]	; (1f574 <smp_pairing_random+0x230>)
   1f548:	2201      	movs	r2, #1
   1f54a:	9302      	str	r3, [sp, #8]
   1f54c:	2300      	movs	r3, #0
   1f54e:	4905      	ldr	r1, [pc, #20]	; (1f564 <smp_pairing_random+0x220>)
   1f550:	4618      	mov	r0, r3
   1f552:	e9cd 3300 	strd	r3, r3, [sp]
   1f556:	f00f fb22 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f55a:	e747      	b.n	1f3ec <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f55c:	2002      	movs	r0, #2
   1f55e:	e746      	b.n	1f3ee <smp_pairing_random+0xaa>
   1f560:	0003779f 	.word	0x0003779f
   1f564:	00032f30 	.word	0x00032f30
   1f568:	200309e0 	.word	0x200309e0
   1f56c:	000377b4 	.word	0x000377b4
   1f570:	000330de 	.word	0x000330de
   1f574:	000376be 	.word	0x000376be

0001f578 <bt_smp_start_security>:
{
   1f578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1f57c:	78c6      	ldrb	r6, [r0, #3]
{
   1f57e:	4604      	mov	r4, r0
	switch (conn->role) {
   1f580:	2e01      	cmp	r6, #1
   1f582:	d005      	beq.n	1f590 <bt_smp_start_security+0x18>
		return -EINVAL;
   1f584:	f06f 0415 	mvn.w	r4, #21
}
   1f588:	4620      	mov	r0, r4
   1f58a:	b003      	add	sp, #12
   1f58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1f590:	f7ff f990 	bl	1e8b4 <smp_chan_get>
	if (!smp) {
   1f594:	4605      	mov	r5, r0
   1f596:	2800      	cmp	r0, #0
   1f598:	f000 80ac 	beq.w	1f6f4 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f59c:	1d07      	adds	r7, r0, #4
   1f59e:	2104      	movs	r1, #4
   1f5a0:	4638      	mov	r0, r7
   1f5a2:	f00f faa4 	bl	2eaee <atomic_test_bit>
   1f5a6:	2800      	cmp	r0, #0
   1f5a8:	f040 80a7 	bne.w	1f6fa <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f5ac:	2103      	movs	r1, #3
   1f5ae:	4638      	mov	r0, r7
   1f5b0:	f00f fa9d 	bl	2eaee <atomic_test_bit>
   1f5b4:	b110      	cbz	r0, 1f5bc <bt_smp_start_security+0x44>
		return -EBUSY;
   1f5b6:	f06f 040f 	mvn.w	r4, #15
   1f5ba:	e7e5      	b.n	1f588 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f5bc:	4631      	mov	r1, r6
   1f5be:	4638      	mov	r0, r7
   1f5c0:	f00f fa95 	bl	2eaee <atomic_test_bit>
   1f5c4:	2800      	cmp	r0, #0
   1f5c6:	d1f6      	bne.n	1f5b6 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f5c8:	4628      	mov	r0, r5
   1f5ca:	f7ff f919 	bl	1e800 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1f5ce:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f5d2:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1f5d4:	7a9b      	ldrb	r3, [r3, #10]
   1f5d6:	2b03      	cmp	r3, #3
   1f5d8:	d042      	beq.n	1f660 <bt_smp_start_security+0xe8>
   1f5da:	d832      	bhi.n	1f642 <bt_smp_start_security+0xca>
   1f5dc:	3b01      	subs	r3, #1
   1f5de:	2b01      	cmp	r3, #1
   1f5e0:	d948      	bls.n	1f674 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1f5e2:	210b      	movs	r1, #11
   1f5e4:	1d20      	adds	r0, r4, #4
   1f5e6:	f00f fa82 	bl	2eaee <atomic_test_bit>
   1f5ea:	2800      	cmp	r0, #0
   1f5ec:	d1ca      	bne.n	1f584 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1f5ee:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f5f2:	b983      	cbnz	r3, 1f616 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1f5f4:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1f5f8:	4632      	mov	r2, r6
   1f5fa:	2020      	movs	r0, #32
   1f5fc:	7a21      	ldrb	r1, [r4, #8]
   1f5fe:	f000 fd6f 	bl	200e0 <bt_keys_find>
   1f602:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1f606:	b930      	cbnz	r0, 1f616 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1f608:	4632      	mov	r2, r6
   1f60a:	2004      	movs	r0, #4
   1f60c:	7a21      	ldrb	r1, [r4, #8]
   1f60e:	f000 fd67 	bl	200e0 <bt_keys_find>
   1f612:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1f616:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f61a:	2b00      	cmp	r3, #0
   1f61c:	d0b2      	beq.n	1f584 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1f61e:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1f620:	f012 0f24 	tst.w	r2, #36	; 0x24
   1f624:	d0ae      	beq.n	1f584 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1f626:	7aa1      	ldrb	r1, [r4, #10]
   1f628:	2902      	cmp	r1, #2
   1f62a:	d923      	bls.n	1f674 <bt_smp_start_security+0xfc>
   1f62c:	7b58      	ldrb	r0, [r3, #13]
   1f62e:	07c0      	lsls	r0, r0, #31
   1f630:	d5a8      	bpl.n	1f584 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1f632:	2903      	cmp	r1, #3
   1f634:	d01e      	beq.n	1f674 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f636:	0692      	lsls	r2, r2, #26
   1f638:	d5a4      	bpl.n	1f584 <bt_smp_start_security+0xc>
   1f63a:	7b1b      	ldrb	r3, [r3, #12]
   1f63c:	2b10      	cmp	r3, #16
   1f63e:	d1a1      	bne.n	1f584 <bt_smp_start_security+0xc>
   1f640:	e018      	b.n	1f674 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1f642:	2b04      	cmp	r3, #4
   1f644:	d1cd      	bne.n	1f5e2 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f646:	4628      	mov	r0, r5
   1f648:	f7ff f8f0 	bl	1e82c <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f64c:	2803      	cmp	r0, #3
   1f64e:	d104      	bne.n	1f65a <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f650:	2e00      	cmp	r6, #0
   1f652:	d0c6      	beq.n	1f5e2 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f654:	68f3      	ldr	r3, [r6, #12]
   1f656:	2b00      	cmp	r3, #0
   1f658:	d0c3      	beq.n	1f5e2 <bt_smp_start_security+0x6a>
   1f65a:	4b29      	ldr	r3, [pc, #164]	; (1f700 <bt_smp_start_security+0x188>)
   1f65c:	781b      	ldrb	r3, [r3, #0]
   1f65e:	e007      	b.n	1f670 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f660:	4628      	mov	r0, r5
   1f662:	f7ff f8e3 	bl	1e82c <get_io_capa>
   1f666:	2803      	cmp	r0, #3
   1f668:	d104      	bne.n	1f674 <bt_smp_start_security+0xfc>
   1f66a:	2e00      	cmp	r6, #0
   1f66c:	d0b9      	beq.n	1f5e2 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1f66e:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f670:	2b00      	cmp	r3, #0
   1f672:	d0b6      	beq.n	1f5e2 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1f674:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f678:	b13b      	cbz	r3, 1f68a <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1f67a:	4628      	mov	r0, r5
   1f67c:	f7ff f958 	bl	1e930 <smp_init>
   1f680:	4680      	mov	r8, r0
   1f682:	b170      	cbz	r0, 1f6a2 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1f684:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1f688:	e77e      	b.n	1f588 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f68a:	7a20      	ldrb	r0, [r4, #8]
   1f68c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1f690:	f000 fcf0 	bl	20074 <bt_keys_get_addr>
   1f694:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1f698:	2800      	cmp	r0, #0
   1f69a:	d1ee      	bne.n	1f67a <bt_smp_start_security+0x102>
			return -ENOMEM;
   1f69c:	f06f 040b 	mvn.w	r4, #11
   1f6a0:	e772      	b.n	1f588 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1f6a2:	210b      	movs	r1, #11
   1f6a4:	4628      	mov	r0, r5
   1f6a6:	f00f fa99 	bl	2ebdc <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1f6aa:	4606      	mov	r6, r0
   1f6ac:	2800      	cmp	r0, #0
   1f6ae:	d0e9      	beq.n	1f684 <bt_smp_start_security+0x10c>
   1f6b0:	2101      	movs	r1, #1
   1f6b2:	300c      	adds	r0, #12
   1f6b4:	f00f fe2d 	bl	2f312 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1f6b8:	2109      	movs	r1, #9
   1f6ba:	4681      	mov	r9, r0
   1f6bc:	4628      	mov	r0, r5
   1f6be:	f7ff f8db 	bl	1e878 <get_auth>
   1f6c2:	4643      	mov	r3, r8
   1f6c4:	f889 0000 	strb.w	r0, [r9]
   1f6c8:	4632      	mov	r2, r6
   1f6ca:	4620      	mov	r0, r4
   1f6cc:	2106      	movs	r1, #6
   1f6ce:	f8cd 8000 	str.w	r8, [sp]
   1f6d2:	f00e fa75 	bl	2dbc0 <bt_l2cap_send_cb>
	if (err) {
   1f6d6:	4604      	mov	r4, r0
   1f6d8:	b118      	cbz	r0, 1f6e2 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1f6da:	4630      	mov	r0, r6
   1f6dc:	f000 fee0 	bl	204a0 <net_buf_unref>
		return err;
   1f6e0:	e752      	b.n	1f588 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1f6e2:	4638      	mov	r0, r7
   1f6e4:	210f      	movs	r1, #15
   1f6e6:	f00f fa69 	bl	2ebbc <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f6ea:	2101      	movs	r1, #1
   1f6ec:	4628      	mov	r0, r5
   1f6ee:	f00f fa65 	bl	2ebbc <atomic_set_bit>
	return 0;
   1f6f2:	e749      	b.n	1f588 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1f6f4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1f6f8:	e746      	b.n	1f588 <bt_smp_start_security+0x10>
		return -EIO;
   1f6fa:	f06f 0404 	mvn.w	r4, #4
   1f6fe:	e743      	b.n	1f588 <bt_smp_start_security+0x10>
   1f700:	200319dd 	.word	0x200319dd

0001f704 <smp_pairing_complete>:
{
   1f704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f706:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f708:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f70c:	1d04      	adds	r4, r0, #4
	if (!status) {
   1f70e:	bb39      	cbnz	r1, 1f760 <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f710:	210d      	movs	r1, #13
   1f712:	4620      	mov	r0, r4
   1f714:	f00f f9eb 	bl	2eaee <atomic_test_bit>
	return list->head;
   1f718:	4b36      	ldr	r3, [pc, #216]	; (1f7f4 <smp_pairing_complete+0xf0>)
   1f71a:	4607      	mov	r7, r0
   1f71c:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f71e:	b19b      	cbz	r3, 1f748 <smp_pairing_complete+0x44>
	return node->next;
   1f720:	681c      	ldr	r4, [r3, #0]
   1f722:	b104      	cbz	r4, 1f726 <smp_pairing_complete+0x22>
   1f724:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1f726:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1f72a:	b113      	cbz	r3, 1f732 <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   1f72c:	4639      	mov	r1, r7
   1f72e:	4628      	mov	r0, r5
   1f730:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f732:	b14c      	cbz	r4, 1f748 <smp_pairing_complete+0x44>
   1f734:	4623      	mov	r3, r4
   1f736:	68e4      	ldr	r4, [r4, #12]
   1f738:	681b      	ldr	r3, [r3, #0]
   1f73a:	b11c      	cbz	r4, 1f744 <smp_pairing_complete+0x40>
   1f73c:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1f73e:	2b00      	cmp	r3, #0
   1f740:	d1f4      	bne.n	1f72c <smp_pairing_complete+0x28>
   1f742:	e7f7      	b.n	1f734 <smp_pairing_complete+0x30>
   1f744:	2b00      	cmp	r3, #0
   1f746:	d1f1      	bne.n	1f72c <smp_pairing_complete+0x28>
	smp_reset(smp);
   1f748:	4630      	mov	r0, r6
   1f74a:	f00f fae0 	bl	2ed0e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1f74e:	7a6a      	ldrb	r2, [r5, #9]
   1f750:	7aab      	ldrb	r3, [r5, #10]
   1f752:	429a      	cmp	r2, r3
   1f754:	d04d      	beq.n	1f7f2 <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   1f756:	4628      	mov	r0, r5
}
   1f758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1f75c:	f7ff bf0c 	b.w	1f578 <bt_smp_start_security>
	switch (smp_err) {
   1f760:	3901      	subs	r1, #1
   1f762:	b2c9      	uxtb	r1, r1
   1f764:	290e      	cmp	r1, #14
   1f766:	bf96      	itet	ls
   1f768:	4b23      	ldrls	r3, [pc, #140]	; (1f7f8 <smp_pairing_complete+0xf4>)
	if (!status) {
   1f76a:	2709      	movhi	r7, #9
   1f76c:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1f76e:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1f772:	b143      	cbz	r3, 1f786 <smp_pairing_complete+0x82>
   1f774:	7b1b      	ldrb	r3, [r3, #12]
   1f776:	bb33      	cbnz	r3, 1f7c6 <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   1f778:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   1f77c:	f00f fcaf 	bl	2f0de <bt_keys_clear>
			conn->le.keys = NULL;
   1f780:	2300      	movs	r3, #0
   1f782:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f786:	2102      	movs	r1, #2
   1f788:	4620      	mov	r0, r4
   1f78a:	f00f f9b0 	bl	2eaee <atomic_test_bit>
   1f78e:	b948      	cbnz	r0, 1f7a4 <smp_pairing_complete+0xa0>
	switch (err) {
   1f790:	2f07      	cmp	r7, #7
   1f792:	bf94      	ite	ls
   1f794:	4b19      	ldrls	r3, [pc, #100]	; (1f7fc <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f796:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   1f798:	463a      	mov	r2, r7
   1f79a:	4628      	mov	r0, r5
   1f79c:	bf98      	it	ls
   1f79e:	5dd9      	ldrbls	r1, [r3, r7]
   1f7a0:	f7fc fd6e 	bl	1c280 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f7a4:	2103      	movs	r1, #3
   1f7a6:	4620      	mov	r0, r4
   1f7a8:	f00f f9a1 	bl	2eaee <atomic_test_bit>
   1f7ac:	2800      	cmp	r0, #0
   1f7ae:	d0cb      	beq.n	1f748 <smp_pairing_complete+0x44>
	return list->head;
   1f7b0:	4b10      	ldr	r3, [pc, #64]	; (1f7f4 <smp_pairing_complete+0xf0>)
   1f7b2:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f7b4:	2b00      	cmp	r3, #0
   1f7b6:	d0c7      	beq.n	1f748 <smp_pairing_complete+0x44>
	return node->next;
   1f7b8:	681c      	ldr	r4, [r3, #0]
   1f7ba:	b104      	cbz	r4, 1f7be <smp_pairing_complete+0xba>
   1f7bc:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1f7be:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1f7c2:	b94b      	cbnz	r3, 1f7d8 <smp_pairing_complete+0xd4>
   1f7c4:	e00b      	b.n	1f7de <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1f7c6:	2102      	movs	r1, #2
   1f7c8:	4620      	mov	r0, r4
   1f7ca:	f00f f990 	bl	2eaee <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1f7ce:	2800      	cmp	r0, #0
   1f7d0:	d1d2      	bne.n	1f778 <smp_pairing_complete+0x74>
   1f7d2:	e7d8      	b.n	1f786 <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f7d4:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1f7d6:	b123      	cbz	r3, 1f7e2 <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   1f7d8:	4639      	mov	r1, r7
   1f7da:	4628      	mov	r0, r5
   1f7dc:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f7de:	2c00      	cmp	r4, #0
   1f7e0:	d0b2      	beq.n	1f748 <smp_pairing_complete+0x44>
   1f7e2:	4623      	mov	r3, r4
   1f7e4:	68e4      	ldr	r4, [r4, #12]
   1f7e6:	685b      	ldr	r3, [r3, #4]
   1f7e8:	2c00      	cmp	r4, #0
   1f7ea:	d1f3      	bne.n	1f7d4 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   1f7ec:	2b00      	cmp	r3, #0
   1f7ee:	d1f3      	bne.n	1f7d8 <smp_pairing_complete+0xd4>
   1f7f0:	e7aa      	b.n	1f748 <smp_pairing_complete+0x44>
}
   1f7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f7f4:	200308b8 	.word	0x200308b8
   1f7f8:	000379ee 	.word	0x000379ee
   1f7fc:	000379dd 	.word	0x000379dd

0001f800 <smp_error>:
{
   1f800:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1f802:	1d03      	adds	r3, r0, #4
{
   1f804:	4606      	mov	r6, r0
   1f806:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1f808:	4618      	mov	r0, r3
   1f80a:	2102      	movs	r1, #2
{
   1f80c:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1f80e:	f00f f96e 	bl	2eaee <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1f812:	4604      	mov	r4, r0
   1f814:	b120      	cbz	r0, 1f820 <smp_error+0x20>
   1f816:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1f81a:	fab4 f484 	clz	r4, r4
   1f81e:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f820:	2103      	movs	r1, #3
   1f822:	4618      	mov	r0, r3
   1f824:	f00f f963 	bl	2eaee <atomic_test_bit>
   1f828:	b1b0      	cbz	r0, 1f858 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1f82a:	4639      	mov	r1, r7
   1f82c:	4630      	mov	r0, r6
   1f82e:	f7ff ff69 	bl	1f704 <smp_pairing_complete>
	if (remote_already_completed) {
   1f832:	b1f4      	cbz	r4, 1f872 <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1f834:	4b1d      	ldr	r3, [pc, #116]	; (1f8ac <smp_error+0xac>)
   1f836:	491e      	ldr	r1, [pc, #120]	; (1f8b0 <smp_error+0xb0>)
   1f838:	9302      	str	r3, [sp, #8]
   1f83a:	2300      	movs	r3, #0
   1f83c:	2202      	movs	r2, #2
   1f83e:	4618      	mov	r0, r3
   1f840:	e9cd 3300 	strd	r3, r3, [sp]
   1f844:	f00f f9ab 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1f848:	2105      	movs	r1, #5
   1f84a:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1f84e:	f00e f8c1 	bl	2d9d4 <bt_conn_disconnect>
		return 0;
   1f852:	2000      	movs	r0, #0
}
   1f854:	b005      	add	sp, #20
   1f856:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f858:	2101      	movs	r1, #1
   1f85a:	4618      	mov	r0, r3
   1f85c:	f00f f947 	bl	2eaee <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f860:	2800      	cmp	r0, #0
   1f862:	d1e2      	bne.n	1f82a <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f864:	210f      	movs	r1, #15
   1f866:	4618      	mov	r0, r3
   1f868:	f00f f941 	bl	2eaee <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f86c:	2800      	cmp	r0, #0
   1f86e:	d1dc      	bne.n	1f82a <smp_error+0x2a>
   1f870:	e7df      	b.n	1f832 <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1f872:	2105      	movs	r1, #5
   1f874:	4630      	mov	r0, r6
   1f876:	f00f f9b1 	bl	2ebdc <smp_create_pdu.constprop.0>
	if (!buf) {
   1f87a:	4605      	mov	r5, r0
   1f87c:	b190      	cbz	r0, 1f8a4 <smp_error+0xa4>
   1f87e:	2101      	movs	r1, #1
   1f880:	300c      	adds	r0, #12
   1f882:	f00f fd46 	bl	2f312 <net_buf_simple_add>
	rsp->reason = reason;
   1f886:	7007      	strb	r7, [r0, #0]
   1f888:	9400      	str	r4, [sp, #0]
   1f88a:	4623      	mov	r3, r4
   1f88c:	462a      	mov	r2, r5
   1f88e:	2106      	movs	r1, #6
   1f890:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1f894:	f00e f994 	bl	2dbc0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1f898:	2800      	cmp	r0, #0
   1f89a:	d0da      	beq.n	1f852 <smp_error+0x52>
		net_buf_unref(buf);
   1f89c:	4628      	mov	r0, r5
   1f89e:	f000 fdff 	bl	204a0 <net_buf_unref>
   1f8a2:	e7d6      	b.n	1f852 <smp_error+0x52>
		return -ENOBUFS;
   1f8a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f8a8:	e7d4      	b.n	1f854 <smp_error+0x54>
   1f8aa:	bf00      	nop
   1f8ac:	000377cd 	.word	0x000377cd
   1f8b0:	00032f30 	.word	0x00032f30

0001f8b4 <bt_smp_recv>:
{
   1f8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1f8b8:	8a0b      	ldrh	r3, [r1, #16]
{
   1f8ba:	4604      	mov	r4, r0
   1f8bc:	460e      	mov	r6, r1
   1f8be:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1f8c0:	b963      	cbnz	r3, 1f8dc <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   1f8c2:	4a3c      	ldr	r2, [pc, #240]	; (1f9b4 <bt_smp_recv+0x100>)
   1f8c4:	4618      	mov	r0, r3
   1f8c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1f8ca:	493b      	ldr	r1, [pc, #236]	; (1f9b8 <bt_smp_recv+0x104>)
   1f8cc:	2201      	movs	r2, #1
   1f8ce:	9300      	str	r3, [sp, #0]
   1f8d0:	f00f f965 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
}
   1f8d4:	2000      	movs	r0, #0
   1f8d6:	b006      	add	sp, #24
   1f8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1f8dc:	2101      	movs	r1, #1
   1f8de:	f106 000c 	add.w	r0, r6, #12
   1f8e2:	f00f fd46 	bl	2f372 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f8e6:	2104      	movs	r1, #4
   1f8e8:	4607      	mov	r7, r0
   1f8ea:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   1f8ee:	f00f f8fe 	bl	2eaee <atomic_test_bit>
   1f8f2:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1f8f6:	7839      	ldrb	r1, [r7, #0]
   1f8f8:	4604      	mov	r4, r0
   1f8fa:	b158      	cbz	r0, 1f914 <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1f8fc:	4b2f      	ldr	r3, [pc, #188]	; (1f9bc <bt_smp_recv+0x108>)
   1f8fe:	2202      	movs	r2, #2
   1f900:	9302      	str	r3, [sp, #8]
   1f902:	2300      	movs	r3, #0
   1f904:	4618      	mov	r0, r3
   1f906:	e9cd 3300 	strd	r3, r3, [sp]
   1f90a:	9103      	str	r1, [sp, #12]
   1f90c:	492a      	ldr	r1, [pc, #168]	; (1f9b8 <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1f90e:	f00f f946 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return 0;
   1f912:	e7df      	b.n	1f8d4 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1f914:	290e      	cmp	r1, #14
   1f916:	d908      	bls.n	1f92a <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1f918:	4b29      	ldr	r3, [pc, #164]	; (1f9c0 <bt_smp_recv+0x10c>)
   1f91a:	9103      	str	r1, [sp, #12]
   1f91c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1f920:	2202      	movs	r2, #2
   1f922:	4603      	mov	r3, r0
   1f924:	4924      	ldr	r1, [pc, #144]	; (1f9b8 <bt_smp_recv+0x104>)
   1f926:	9000      	str	r0, [sp, #0]
   1f928:	e7f1      	b.n	1f90e <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   1f92a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1f9c4 <bt_smp_recv+0x110>
   1f92e:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1f932:	b96b      	cbnz	r3, 1f950 <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1f934:	4a24      	ldr	r2, [pc, #144]	; (1f9c8 <bt_smp_recv+0x114>)
   1f936:	9103      	str	r1, [sp, #12]
   1f938:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1f93c:	491e      	ldr	r1, [pc, #120]	; (1f9b8 <bt_smp_recv+0x104>)
   1f93e:	2202      	movs	r2, #2
   1f940:	9300      	str	r3, [sp, #0]
   1f942:	f00f f92c 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1f946:	2107      	movs	r1, #7
		smp_error(smp, err);
   1f948:	4628      	mov	r0, r5
   1f94a:	f7ff ff59 	bl	1f800 <smp_error>
   1f94e:	e7c1      	b.n	1f8d4 <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1f950:	4628      	mov	r0, r5
   1f952:	f00f f9ca 	bl	2ecea <atomic_test_and_clear_bit>
   1f956:	783a      	ldrb	r2, [r7, #0]
   1f958:	4603      	mov	r3, r0
   1f95a:	b968      	cbnz	r0, 1f978 <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1f95c:	9203      	str	r2, [sp, #12]
   1f95e:	4a1b      	ldr	r2, [pc, #108]	; (1f9cc <bt_smp_recv+0x118>)
   1f960:	4915      	ldr	r1, [pc, #84]	; (1f9b8 <bt_smp_recv+0x104>)
   1f962:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1f966:	9000      	str	r0, [sp, #0]
   1f968:	2202      	movs	r2, #2
   1f96a:	f00f f918 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1f96e:	783b      	ldrb	r3, [r7, #0]
   1f970:	2b05      	cmp	r3, #5
   1f972:	d0af      	beq.n	1f8d4 <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f974:	2108      	movs	r1, #8
   1f976:	e7e7      	b.n	1f948 <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   1f978:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   1f97c:	8a33      	ldrh	r3, [r6, #16]
   1f97e:	7909      	ldrb	r1, [r1, #4]
   1f980:	4299      	cmp	r1, r3
   1f982:	d00d      	beq.n	1f9a0 <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1f984:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1f988:	4b11      	ldr	r3, [pc, #68]	; (1f9d0 <bt_smp_recv+0x11c>)
   1f98a:	490b      	ldr	r1, [pc, #44]	; (1f9b8 <bt_smp_recv+0x104>)
   1f98c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f990:	2201      	movs	r2, #1
   1f992:	4623      	mov	r3, r4
   1f994:	4620      	mov	r0, r4
   1f996:	9400      	str	r4, [sp, #0]
   1f998:	f00f f901 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1f99c:	210a      	movs	r1, #10
   1f99e:	e7d3      	b.n	1f948 <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   1f9a0:	4631      	mov	r1, r6
   1f9a2:	4628      	mov	r0, r5
   1f9a4:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   1f9a8:	4798      	blx	r3
	if (err) {
   1f9aa:	4601      	mov	r1, r0
   1f9ac:	2800      	cmp	r0, #0
   1f9ae:	d091      	beq.n	1f8d4 <bt_smp_recv+0x20>
   1f9b0:	e7ca      	b.n	1f948 <bt_smp_recv+0x94>
   1f9b2:	bf00      	nop
   1f9b4:	00037825 	.word	0x00037825
   1f9b8:	00032f30 	.word	0x00032f30
   1f9bc:	00037840 	.word	0x00037840
   1f9c0:	00037871 	.word	0x00037871
   1f9c4:	00033d8c 	.word	0x00033d8c
   1f9c8:	00037893 	.word	0x00037893
   1f9cc:	000378ad 	.word	0x000378ad
   1f9d0:	00037453 	.word	0x00037453

0001f9d4 <bt_smp_pkey_ready>:
{
   1f9d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   1f9d6:	4a10      	ldr	r2, [pc, #64]	; (1fa18 <bt_smp_pkey_ready+0x44>)
{
   1f9d8:	4603      	mov	r3, r0
	sc_public_key = pkey;
   1f9da:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   1f9dc:	b948      	cbnz	r0, 1f9f2 <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   1f9de:	4a0f      	ldr	r2, [pc, #60]	; (1fa1c <bt_smp_pkey_ready+0x48>)
   1f9e0:	490f      	ldr	r1, [pc, #60]	; (1fa20 <bt_smp_pkey_ready+0x4c>)
   1f9e2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1f9e6:	9000      	str	r0, [sp, #0]
   1f9e8:	2202      	movs	r2, #2
   1f9ea:	f00f f8d8 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
}
   1f9ee:	b004      	add	sp, #16
   1f9f0:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   1f9f2:	480c      	ldr	r0, [pc, #48]	; (1fa24 <bt_smp_pkey_ready+0x50>)
   1f9f4:	f005 fff6 	bl	259e4 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f9f8:	4b0b      	ldr	r3, [pc, #44]	; (1fa28 <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   1f9fa:	1f1c      	subs	r4, r3, #4
   1f9fc:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1fa00:	065b      	lsls	r3, r3, #25
   1fa02:	d5f4      	bpl.n	1f9ee <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   1fa04:	4620      	mov	r0, r4
   1fa06:	f7ff f897 	bl	1eb38 <smp_public_key_periph>
		if (err) {
   1fa0a:	4601      	mov	r1, r0
   1fa0c:	2800      	cmp	r0, #0
   1fa0e:	d0ee      	beq.n	1f9ee <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   1fa10:	4620      	mov	r0, r4
   1fa12:	f7ff fef5 	bl	1f800 <smp_error>
   1fa16:	e7ea      	b.n	1f9ee <bt_smp_pkey_ready+0x1a>
   1fa18:	200309e0 	.word	0x200309e0
   1fa1c:	000378c8 	.word	0x000378c8
   1fa20:	00032f30 	.word	0x00032f30
   1fa24:	20008dc0 	.word	0x20008dc0
   1fa28:	2000a12c 	.word	0x2000a12c

0001fa2c <smp_ident_addr_info>:
{
   1fa2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fa30:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1fa34:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fa36:	f023 0302 	bic.w	r3, r3, #2
   1fa3a:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   1fa3e:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fa42:	783b      	ldrb	r3, [r7, #0]
{
   1fa44:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fa46:	f106 0888 	add.w	r8, r6, #136	; 0x88
   1fa4a:	b32b      	cbz	r3, 1fa98 <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1fa4c:	79bb      	ldrb	r3, [r7, #6]
   1fa4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fa52:	2bc0      	cmp	r3, #192	; 0xc0
   1fa54:	d020      	beq.n	1fa98 <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1fa56:	4638      	mov	r0, r7
   1fa58:	f7f9 fbe0 	bl	1921c <bt_addr_le_str>
   1fa5c:	2400      	movs	r4, #0
   1fa5e:	4b4d      	ldr	r3, [pc, #308]	; (1fb94 <smp_ident_addr_info+0x168>)
   1fa60:	2201      	movs	r2, #1
   1fa62:	494d      	ldr	r1, [pc, #308]	; (1fb98 <smp_ident_addr_info+0x16c>)
   1fa64:	9003      	str	r0, [sp, #12]
   1fa66:	9302      	str	r3, [sp, #8]
   1fa68:	4620      	mov	r0, r4
   1fa6a:	4623      	mov	r3, r4
   1fa6c:	e9cd 4400 	strd	r4, r4, [sp]
   1fa70:	f00f f895 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fa74:	4640      	mov	r0, r8
   1fa76:	f7f9 fbd1 	bl	1921c <bt_addr_le_str>
   1fa7a:	4b48      	ldr	r3, [pc, #288]	; (1fb9c <smp_ident_addr_info+0x170>)
   1fa7c:	9003      	str	r0, [sp, #12]
   1fa7e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1fa82:	4620      	mov	r0, r4
   1fa84:	4623      	mov	r3, r4
   1fa86:	2201      	movs	r2, #1
   1fa88:	4943      	ldr	r1, [pc, #268]	; (1fb98 <smp_ident_addr_info+0x16c>)
   1fa8a:	9400      	str	r4, [sp, #0]
   1fa8c:	f00f f887 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1fa90:	200a      	movs	r0, #10
}
   1fa92:	b004      	add	sp, #16
   1fa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1fa98:	2207      	movs	r2, #7
   1fa9a:	4639      	mov	r1, r7
   1fa9c:	4640      	mov	r0, r8
   1fa9e:	f011 fe26 	bl	316ee <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1faa2:	b168      	cbz	r0, 1fac0 <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1faa4:	4639      	mov	r1, r7
   1faa6:	7a30      	ldrb	r0, [r6, #8]
   1faa8:	f000 fb84 	bl	201b4 <bt_keys_find_addr>
		if (keys) {
   1faac:	4605      	mov	r5, r0
   1faae:	b138      	cbz	r0, 1fac0 <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   1fab0:	4601      	mov	r1, r0
   1fab2:	4620      	mov	r0, r4
   1fab4:	f00f f821 	bl	2eafa <update_keys_check>
   1fab8:	b1e8      	cbz	r0, 1faf6 <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   1faba:	4628      	mov	r0, r5
   1fabc:	f00f fb0f 	bl	2f0de <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fac0:	210d      	movs	r1, #13
   1fac2:	1d20      	adds	r0, r4, #4
   1fac4:	f00f f813 	bl	2eaee <atomic_test_bit>
   1fac8:	2800      	cmp	r0, #0
   1faca:	d052      	beq.n	1fb72 <smp_ident_addr_info+0x146>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1facc:	4642      	mov	r2, r8
   1face:	2002      	movs	r0, #2
   1fad0:	7a31      	ldrb	r1, [r6, #8]
   1fad2:	f00f faf0 	bl	2f0b6 <bt_keys_get_type>
		if (!keys) {
   1fad6:	4605      	mov	r5, r0
   1fad8:	b978      	cbnz	r0, 1fafa <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fada:	4640      	mov	r0, r8
   1fadc:	f7f9 fb9e 	bl	1921c <bt_addr_le_str>
   1fae0:	4b2f      	ldr	r3, [pc, #188]	; (1fba0 <smp_ident_addr_info+0x174>)
   1fae2:	9003      	str	r0, [sp, #12]
   1fae4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1fae8:	2201      	movs	r2, #1
   1faea:	462b      	mov	r3, r5
   1faec:	4628      	mov	r0, r5
   1faee:	492a      	ldr	r1, [pc, #168]	; (1fb98 <smp_ident_addr_info+0x16c>)
   1faf0:	9500      	str	r5, [sp, #0]
   1faf2:	f00f f854 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   1faf6:	2008      	movs	r0, #8
   1faf8:	e7cb      	b.n	1fa92 <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1fafa:	78f3      	ldrb	r3, [r6, #3]
   1fafc:	bb9b      	cbnz	r3, 1fb66 <smp_ident_addr_info+0x13a>
			dst = &conn->le.resp_addr;
   1fafe:	f106 0396 	add.w	r3, r6, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1fb02:	781a      	ldrb	r2, [r3, #0]
   1fb04:	2a01      	cmp	r2, #1
   1fb06:	d11e      	bne.n	1fb46 <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   1fb08:	799a      	ldrb	r2, [r3, #6]
   1fb0a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1fb0e:	2a40      	cmp	r2, #64	; 0x40
   1fb10:	d119      	bne.n	1fb46 <smp_ident_addr_info+0x11a>
   1fb12:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1fb16:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   1fb1a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1fb1e:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fb20:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
   1fb24:	b17b      	cbz	r3, 1fb46 <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1fb26:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
   1fb2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fb2e:	2bc0      	cmp	r3, #192	; 0xc0
   1fb30:	d009      	beq.n	1fb46 <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1fb32:	4639      	mov	r1, r7
   1fb34:	1c68      	adds	r0, r5, #1
   1fb36:	f00f f80c 	bl	2eb52 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1fb3a:	4640      	mov	r0, r8
   1fb3c:	f00f f809 	bl	2eb52 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   1fb40:	4630      	mov	r0, r6
   1fb42:	f7fc fb6f 	bl	1c224 <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1fb46:	4628      	mov	r0, r5
   1fb48:	f7fa ff9a 	bl	1aa80 <bt_id_find_conflict>
	if (conflict) {
   1fb4c:	b170      	cbz	r0, 1fb6c <smp_ident_addr_info+0x140>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1fb4e:	4b15      	ldr	r3, [pc, #84]	; (1fba4 <smp_ident_addr_info+0x178>)
   1fb50:	2202      	movs	r2, #2
   1fb52:	9302      	str	r3, [sp, #8]
   1fb54:	2300      	movs	r3, #0
   1fb56:	4910      	ldr	r1, [pc, #64]	; (1fb98 <smp_ident_addr_info+0x16c>)
   1fb58:	4618      	mov	r0, r3
   1fb5a:	e9cd 3300 	strd	r3, r3, [sp]
   1fb5e:	f00f f81e 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1fb62:	2003      	movs	r0, #3
   1fb64:	e795      	b.n	1fa92 <smp_ident_addr_info+0x66>
			dst = &conn->le.init_addr;
   1fb66:	f106 038f 	add.w	r3, r6, #143	; 0x8f
   1fb6a:	e7ca      	b.n	1fb02 <smp_ident_addr_info+0xd6>
	bt_id_add(new_bond);
   1fb6c:	4628      	mov	r0, r5
   1fb6e:	f7fa ff97 	bl	1aaa0 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fb72:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fb76:	075b      	lsls	r3, r3, #29
   1fb78:	d503      	bpl.n	1fb82 <smp_ident_addr_info+0x156>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fb7a:	210a      	movs	r1, #10
   1fb7c:	4620      	mov	r0, r4
   1fb7e:	f00f f81d 	bl	2ebbc <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1fb82:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1fb86:	b109      	cbz	r1, 1fb8c <smp_ident_addr_info+0x160>
	return 0;
   1fb88:	2000      	movs	r0, #0
   1fb8a:	e782      	b.n	1fa92 <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   1fb8c:	4620      	mov	r0, r4
   1fb8e:	f7ff fdb9 	bl	1f704 <smp_pairing_complete>
   1fb92:	e7f9      	b.n	1fb88 <smp_ident_addr_info+0x15c>
   1fb94:	000378e1 	.word	0x000378e1
   1fb98:	00032f30 	.word	0x00032f30
   1fb9c:	0003795f 	.word	0x0003795f
   1fba0:	000376a4 	.word	0x000376a4
   1fba4:	000378f5 	.word	0x000378f5

0001fba8 <smp_central_ident>:
{
   1fba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fbaa:	460b      	mov	r3, r1
   1fbac:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fbae:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1fbb2:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fbb4:	210d      	movs	r1, #13
   1fbb6:	3004      	adds	r0, #4
   1fbb8:	f00e ff99 	bl	2eaee <atomic_test_bit>
   1fbbc:	b318      	cbz	r0, 1fc06 <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1fbbe:	f105 0788 	add.w	r7, r5, #136	; 0x88
   1fbc2:	7a29      	ldrb	r1, [r5, #8]
   1fbc4:	463a      	mov	r2, r7
   1fbc6:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   1fbc8:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1fbca:	f00f fa74 	bl	2f0b6 <bt_keys_get_type>
		if (!keys) {
   1fbce:	4605      	mov	r5, r0
   1fbd0:	b980      	cbnz	r0, 1fbf4 <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fbd2:	4638      	mov	r0, r7
   1fbd4:	f7f9 fb22 	bl	1921c <bt_addr_le_str>
   1fbd8:	4b17      	ldr	r3, [pc, #92]	; (1fc38 <smp_central_ident+0x90>)
   1fbda:	9003      	str	r0, [sp, #12]
   1fbdc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1fbe0:	4628      	mov	r0, r5
   1fbe2:	462b      	mov	r3, r5
   1fbe4:	2201      	movs	r2, #1
   1fbe6:	4915      	ldr	r1, [pc, #84]	; (1fc3c <smp_central_ident+0x94>)
   1fbe8:	9500      	str	r5, [sp, #0]
   1fbea:	f00e ffd8 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1fbee:	2008      	movs	r0, #8
}
   1fbf0:	b005      	add	sp, #20
   1fbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fbf4:	4632      	mov	r2, r6
   1fbf6:	f832 3b02 	ldrh.w	r3, [r2], #2
   1fbfa:	8303      	strh	r3, [r0, #24]
   1fbfc:	f8d6 3002 	ldr.w	r3, [r6, #2]
   1fc00:	6103      	str	r3, [r0, #16]
   1fc02:	6853      	ldr	r3, [r2, #4]
   1fc04:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1fc06:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fc0a:	f023 0201 	bic.w	r2, r3, #1
   1fc0e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1fc12:	079a      	lsls	r2, r3, #30
   1fc14:	d508      	bpl.n	1fc28 <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1fc16:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fc18:	4620      	mov	r0, r4
   1fc1a:	f00e ffcf 	bl	2ebbc <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1fc1e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1fc22:	b129      	cbz	r1, 1fc30 <smp_central_ident+0x88>
	return 0;
   1fc24:	2000      	movs	r0, #0
   1fc26:	e7e3      	b.n	1fbf0 <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fc28:	075b      	lsls	r3, r3, #29
   1fc2a:	d5f8      	bpl.n	1fc1e <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fc2c:	210a      	movs	r1, #10
   1fc2e:	e7f3      	b.n	1fc18 <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   1fc30:	4620      	mov	r0, r4
   1fc32:	f7ff fd67 	bl	1f704 <smp_pairing_complete>
   1fc36:	e7f5      	b.n	1fc24 <smp_central_ident+0x7c>
   1fc38:	000376a4 	.word	0x000376a4
   1fc3c:	00032f30 	.word	0x00032f30

0001fc40 <smp_pairing_failed>:
{
   1fc40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1fc44:	460e      	mov	r6, r1
   1fc46:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fc48:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1fc4c:	f7fe fdd8 	bl	1e800 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1fc50:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1fc52:	4914      	ldr	r1, [pc, #80]	; (1fca4 <smp_pairing_failed+0x64>)
   1fc54:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1fc56:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1fc58:	9303      	str	r3, [sp, #12]
   1fc5a:	4b13      	ldr	r3, [pc, #76]	; (1fca8 <smp_pairing_failed+0x68>)
   1fc5c:	2201      	movs	r2, #1
   1fc5e:	9302      	str	r3, [sp, #8]
   1fc60:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1fc62:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1fc64:	4618      	mov	r0, r3
   1fc66:	e9cd 3300 	strd	r3, r3, [sp]
   1fc6a:	f00e ff98 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1fc6e:	210a      	movs	r1, #10
   1fc70:	4638      	mov	r0, r7
   1fc72:	f00f f83a 	bl	2ecea <atomic_test_and_clear_bit>
   1fc76:	b140      	cbz	r0, 1fc8a <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1fc78:	b975      	cbnz	r5, 1fc98 <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   1fc7a:	4620      	mov	r0, r4
   1fc7c:	7831      	ldrb	r1, [r6, #0]
   1fc7e:	f7ff fd41 	bl	1f704 <smp_pairing_complete>
}
   1fc82:	2000      	movs	r0, #0
   1fc84:	b004      	add	sp, #16
   1fc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1fc8a:	210b      	movs	r1, #11
   1fc8c:	4638      	mov	r0, r7
   1fc8e:	f00f f82c 	bl	2ecea <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1fc92:	2800      	cmp	r0, #0
   1fc94:	d1f0      	bne.n	1fc78 <smp_pairing_failed+0x38>
   1fc96:	e7f0      	b.n	1fc7a <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1fc98:	692b      	ldr	r3, [r5, #16]
   1fc9a:	2b00      	cmp	r3, #0
   1fc9c:	d0ed      	beq.n	1fc7a <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   1fc9e:	4640      	mov	r0, r8
   1fca0:	4798      	blx	r3
   1fca2:	e7ea      	b.n	1fc7a <smp_pairing_failed+0x3a>
   1fca4:	00032f30 	.word	0x00032f30
   1fca8:	00037930 	.word	0x00037930

0001fcac <bt_smp_encrypt_change>:
{
   1fcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1fcb0:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1fcb2:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1fcb6:	4604      	mov	r4, r0
   1fcb8:	460f      	mov	r7, r1
   1fcba:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1fcbc:	2101      	movs	r1, #1
   1fcbe:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   1fcc0:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1fcc4:	f00f f811 	bl	2ecea <atomic_test_and_clear_bit>
   1fcc8:	2800      	cmp	r0, #0
   1fcca:	d068      	beq.n	1fd9e <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   1fccc:	b1e7      	cbz	r7, 1fd08 <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1fcce:	2103      	movs	r1, #3
   1fcd0:	4630      	mov	r0, r6
   1fcd2:	f00e ff0c 	bl	2eaee <atomic_test_bit>
   1fcd6:	2800      	cmp	r0, #0
   1fcd8:	d061      	beq.n	1fd9e <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   1fcda:	4638      	mov	r0, r7
   1fcdc:	f7fa fa08 	bl	1a0f0 <bt_security_err_get>
	switch (auth_err) {
   1fce0:	3801      	subs	r0, #1
   1fce2:	b2c0      	uxtb	r0, r0
   1fce4:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   1fce6:	bf8c      	ite	hi
   1fce8:	2400      	movhi	r4, #0
   1fcea:	4b75      	ldrls	r3, [pc, #468]	; (1fec0 <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1fcec:	f04f 0102 	mov.w	r1, #2
   1fcf0:	bf98      	it	ls
   1fcf2:	5c1c      	ldrbls	r4, [r3, r0]
   1fcf4:	4630      	mov	r0, r6
   1fcf6:	f00e ff61 	bl	2ebbc <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1fcfa:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1fcfc:	4628      	mov	r0, r5
}
   1fcfe:	b00c      	add	sp, #48	; 0x30
   1fd00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1fd04:	f7ff bcfe 	b.w	1f704 <smp_pairing_complete>
	if (!conn->encrypt) {
   1fd08:	f898 300b 	ldrb.w	r3, [r8, #11]
   1fd0c:	2b00      	cmp	r3, #0
   1fd0e:	d046      	beq.n	1fd9e <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1fd10:	2103      	movs	r1, #3
   1fd12:	4630      	mov	r0, r6
   1fd14:	f00e feeb 	bl	2eaee <atomic_test_bit>
   1fd18:	b928      	cbnz	r0, 1fd26 <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   1fd1a:	4628      	mov	r0, r5
}
   1fd1c:	b00c      	add	sp, #48	; 0x30
   1fd1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   1fd22:	f00e bff4 	b.w	2ed0e <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fd26:	2105      	movs	r1, #5
   1fd28:	4630      	mov	r0, r6
   1fd2a:	f00e fee0 	bl	2eaee <atomic_test_bit>
   1fd2e:	b1b8      	cbz	r0, 1fd60 <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1fd30:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1fd34:	071b      	lsls	r3, r3, #28
   1fd36:	d507      	bpl.n	1fd48 <bt_smp_encrypt_change+0x9c>
   1fd38:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1fd3c:	071f      	lsls	r7, r3, #28
   1fd3e:	d503      	bpl.n	1fd48 <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1fd40:	2111      	movs	r1, #17
   1fd42:	4630      	mov	r0, r6
   1fd44:	f00e ff3a 	bl	2ebbc <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1fd48:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1fd4c:	f023 0308 	bic.w	r3, r3, #8
   1fd50:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1fd54:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1fd58:	f023 0308 	bic.w	r3, r3, #8
   1fd5c:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1fd60:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1fd64:	07d8      	lsls	r0, r3, #31
   1fd66:	d51d      	bpl.n	1fda4 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1fd68:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fd6a:	4628      	mov	r0, r5
   1fd6c:	f00e ff26 	bl	2ebbc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1fd70:	2102      	movs	r1, #2
   1fd72:	4630      	mov	r0, r6
   1fd74:	f00e ff22 	bl	2ebbc <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1fd78:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1fd7a:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
   1fd7e:	b9cf      	cbnz	r7, 1fdb4 <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1fd80:	f103 0088 	add.w	r0, r3, #136	; 0x88
   1fd84:	f7f9 fa4a 	bl	1921c <bt_addr_le_str>
   1fd88:	4b4e      	ldr	r3, [pc, #312]	; (1fec4 <bt_smp_encrypt_change+0x218>)
   1fd8a:	9003      	str	r0, [sp, #12]
   1fd8c:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1fd90:	2201      	movs	r2, #1
   1fd92:	463b      	mov	r3, r7
   1fd94:	4638      	mov	r0, r7
   1fd96:	494c      	ldr	r1, [pc, #304]	; (1fec8 <bt_smp_encrypt_change+0x21c>)
   1fd98:	9700      	str	r7, [sp, #0]
   1fd9a:	f00e ff00 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
}
   1fd9e:	b00c      	add	sp, #48	; 0x30
   1fda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1fda4:	0799      	lsls	r1, r3, #30
   1fda6:	d501      	bpl.n	1fdac <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1fda8:	2108      	movs	r1, #8
   1fdaa:	e7de      	b.n	1fd6a <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fdac:	075a      	lsls	r2, r3, #29
   1fdae:	d5df      	bpl.n	1fd70 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fdb0:	210a      	movs	r1, #10
   1fdb2:	e7da      	b.n	1fd6a <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1fdb4:	2105      	movs	r1, #5
   1fdb6:	f00e fe9a 	bl	2eaee <atomic_test_bit>
   1fdba:	4607      	mov	r7, r0
   1fdbc:	b9b0      	cbnz	r0, 1fdec <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1fdbe:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1fdc2:	07db      	lsls	r3, r3, #31
   1fdc4:	d512      	bpl.n	1fdec <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   1fdc6:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1fdc8:	211a      	movs	r1, #26
   1fdca:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   1fdcc:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1fdd0:	f7fb fcd8 	bl	1b784 <bt_rand>
   1fdd4:	4681      	mov	r9, r0
   1fdd6:	b170      	cbz	r0, 1fdf6 <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   1fdd8:	4b3c      	ldr	r3, [pc, #240]	; (1fecc <bt_smp_encrypt_change+0x220>)
   1fdda:	2201      	movs	r2, #1
   1fddc:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1fde0:	4638      	mov	r0, r7
   1fde2:	463b      	mov	r3, r7
   1fde4:	4938      	ldr	r1, [pc, #224]	; (1fec8 <bt_smp_encrypt_change+0x21c>)
   1fde6:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1fde8:	f00e fed9 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1fdec:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1fdf0:	2900      	cmp	r1, #0
   1fdf2:	d1d4      	bne.n	1fd9e <bt_smp_encrypt_change+0xf2>
   1fdf4:	e782      	b.n	1fcfc <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1fdf6:	2106      	movs	r1, #6
   1fdf8:	4628      	mov	r0, r5
   1fdfa:	f00e feef 	bl	2ebdc <smp_create_pdu.constprop.0>
		if (!buf) {
   1fdfe:	4607      	mov	r7, r0
   1fe00:	b938      	cbnz	r0, 1fe12 <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1fe02:	4b33      	ldr	r3, [pc, #204]	; (1fed0 <bt_smp_encrypt_change+0x224>)
   1fe04:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1fe08:	2201      	movs	r2, #1
   1fe0a:	463b      	mov	r3, r7
   1fe0c:	492e      	ldr	r1, [pc, #184]	; (1fec8 <bt_smp_encrypt_change+0x21c>)
   1fe0e:	9700      	str	r7, [sp, #0]
   1fe10:	e7ea      	b.n	1fde8 <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   1fe12:	2110      	movs	r1, #16
   1fe14:	300c      	adds	r0, #12
   1fe16:	f00f fa7c 	bl	2f312 <net_buf_simple_add>
   1fe1a:	f898 200c 	ldrb.w	r2, [r8, #12]
   1fe1e:	a905      	add	r1, sp, #20
   1fe20:	4682      	mov	sl, r0
   1fe22:	f011 fc74 	bl	3170e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1fe26:	f898 000c 	ldrb.w	r0, [r8, #12]
   1fe2a:	280f      	cmp	r0, #15
   1fe2c:	d805      	bhi.n	1fe3a <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   1fe2e:	f1c0 0210 	rsb	r2, r0, #16
   1fe32:	4649      	mov	r1, r9
   1fe34:	4450      	add	r0, sl
   1fe36:	f011 fca4 	bl	31782 <memset>
		smp_send(smp, buf, NULL, NULL);
   1fe3a:	4639      	mov	r1, r7
   1fe3c:	2200      	movs	r2, #0
   1fe3e:	4628      	mov	r0, r5
   1fe40:	f00e fe90 	bl	2eb64 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1fe44:	2107      	movs	r1, #7
   1fe46:	4628      	mov	r0, r5
   1fe48:	f00e fec8 	bl	2ebdc <smp_create_pdu.constprop.0>
		if (!buf) {
   1fe4c:	4607      	mov	r7, r0
   1fe4e:	b908      	cbnz	r0, 1fe54 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1fe50:	4b20      	ldr	r3, [pc, #128]	; (1fed4 <bt_smp_encrypt_change+0x228>)
   1fe52:	e7d7      	b.n	1fe04 <bt_smp_encrypt_change+0x158>
   1fe54:	210a      	movs	r1, #10
   1fe56:	300c      	adds	r0, #12
   1fe58:	f00f fa5b 	bl	2f312 <net_buf_simple_add>
   1fe5c:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fe5e:	aa09      	add	r2, sp, #36	; 0x24
   1fe60:	ca03      	ldmia	r2!, {r0, r1}
   1fe62:	f8c3 0002 	str.w	r0, [r3, #2]
   1fe66:	f8c3 1006 	str.w	r1, [r3, #6]
   1fe6a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   1fe6e:	4639      	mov	r1, r7
   1fe70:	4628      	mov	r0, r5
   1fe72:	801a      	strh	r2, [r3, #0]
   1fe74:	4a18      	ldr	r2, [pc, #96]	; (1fed8 <bt_smp_encrypt_change+0x22c>)
   1fe76:	f00e fe75 	bl	2eb64 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fe7a:	4630      	mov	r0, r6
   1fe7c:	210d      	movs	r1, #13
   1fe7e:	f00e fe36 	bl	2eaee <atomic_test_bit>
   1fe82:	ae09      	add	r6, sp, #36	; 0x24
   1fe84:	2800      	cmp	r0, #0
   1fe86:	d0b1      	beq.n	1fdec <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1fe88:	2101      	movs	r1, #1
   1fe8a:	4640      	mov	r0, r8
   1fe8c:	f00f f923 	bl	2f0d6 <bt_keys_add_type>
   1fe90:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   1fe94:	ab05      	add	r3, sp, #20
   1fe96:	461a      	mov	r2, r3
   1fe98:	ca03      	ldmia	r2!, {r0, r1}
   1fe9a:	42b2      	cmp	r2, r6
   1fe9c:	6038      	str	r0, [r7, #0]
   1fe9e:	6079      	str	r1, [r7, #4]
   1fea0:	4613      	mov	r3, r2
   1fea2:	f107 0708 	add.w	r7, r7, #8
   1fea6:	d1f6      	bne.n	1fe96 <bt_smp_encrypt_change+0x1ea>
   1fea8:	4633      	mov	r3, r6
   1feaa:	cb03      	ldmia	r3!, {r0, r1}
   1feac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1feb0:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   1feb4:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   1feb8:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   1febc:	e796      	b.n	1fdec <bt_smp_encrypt_change+0x140>
   1febe:	bf00      	nop
   1fec0:	000379e5 	.word	0x000379e5
   1fec4:	00037952 	.word	0x00037952
   1fec8:	00032f30 	.word	0x00032f30
   1fecc:	00037967 	.word	0x00037967
   1fed0:	00037982 	.word	0x00037982
   1fed4:	000379a9 	.word	0x000379a9
   1fed8:	0002f089 	.word	0x0002f089

0001fedc <smp_timeout>:
{
   1fedc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   1fede:	4b0c      	ldr	r3, [pc, #48]	; (1ff10 <smp_timeout+0x34>)
{
   1fee0:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   1fee2:	9302      	str	r3, [sp, #8]
   1fee4:	2300      	movs	r3, #0
   1fee6:	2201      	movs	r2, #1
   1fee8:	4618      	mov	r0, r3
   1feea:	e9cd 3300 	strd	r3, r3, [sp]
   1feee:	4909      	ldr	r1, [pc, #36]	; (1ff14 <smp_timeout+0x38>)
   1fef0:	f00e fe55 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1fef4:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   1fef8:	2108      	movs	r1, #8
   1fefa:	f7ff fc03 	bl	1f704 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1fefe:	2104      	movs	r1, #4
   1ff00:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
}
   1ff04:	b004      	add	sp, #16
   1ff06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ff0a:	f00e be57 	b.w	2ebbc <atomic_set_bit>
   1ff0e:	bf00      	nop
   1ff10:	000379d1 	.word	0x000379d1
   1ff14:	00032f30 	.word	0x00032f30

0001ff18 <bt_smp_update_keys>:
{
   1ff18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ff1c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1ff1e:	f7fe fcc9 	bl	1e8b4 <smp_chan_get>
	if (!smp) {
   1ff22:	4605      	mov	r5, r0
   1ff24:	2800      	cmp	r0, #0
   1ff26:	d074      	beq.n	20012 <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ff28:	1d07      	adds	r7, r0, #4
   1ff2a:	2103      	movs	r1, #3
   1ff2c:	4638      	mov	r0, r7
   1ff2e:	f00e fdde 	bl	2eaee <atomic_test_bit>
   1ff32:	2800      	cmp	r0, #0
   1ff34:	d06d      	beq.n	20012 <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   1ff36:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1ff3a:	b108      	cbz	r0, 1ff40 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1ff3c:	f00f f8cf 	bl	2f0de <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ff40:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1ff44:	4641      	mov	r1, r8
   1ff46:	7a20      	ldrb	r0, [r4, #8]
   1ff48:	f000 f894 	bl	20074 <bt_keys_get_addr>
   1ff4c:	4606      	mov	r6, r0
   1ff4e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   1ff52:	b9a0      	cbnz	r0, 1ff7e <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ff54:	4640      	mov	r0, r8
   1ff56:	f7f9 f961 	bl	1921c <bt_addr_le_str>
   1ff5a:	4b39      	ldr	r3, [pc, #228]	; (20040 <bt_smp_update_keys+0x128>)
   1ff5c:	9003      	str	r0, [sp, #12]
   1ff5e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ff62:	4630      	mov	r0, r6
   1ff64:	4633      	mov	r3, r6
   1ff66:	2201      	movs	r2, #1
   1ff68:	4936      	ldr	r1, [pc, #216]	; (20044 <bt_smp_update_keys+0x12c>)
   1ff6a:	9600      	str	r6, [sp, #0]
   1ff6c:	f00e fe17 	bl	2eb9e <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1ff70:	2108      	movs	r1, #8
   1ff72:	4628      	mov	r0, r5
}
   1ff74:	b004      	add	sp, #16
   1ff76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1ff7a:	f7ff bc41 	b.w	1f800 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1ff7e:	210e      	movs	r1, #14
   1ff80:	4638      	mov	r0, r7
   1ff82:	f00e fdb4 	bl	2eaee <atomic_test_bit>
   1ff86:	b128      	cbz	r0, 1ff94 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1ff88:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1ff8c:	7b53      	ldrb	r3, [r2, #13]
   1ff8e:	f043 0302 	orr.w	r3, r3, #2
   1ff92:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1ff94:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1ff96:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   1ff9a:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1ff9c:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1ff9e:	d83b      	bhi.n	20018 <bt_smp_update_keys+0x100>
   1ffa0:	2a00      	cmp	r2, #0
   1ffa2:	d040      	beq.n	20026 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1ffa4:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1ffa8:	7b53      	ldrb	r3, [r2, #13]
   1ffaa:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1ffae:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1ffb0:	7d2b      	ldrb	r3, [r5, #20]
   1ffb2:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1ffb4:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   1ffb8:	428b      	cmp	r3, r1
   1ffba:	bf28      	it	cs
   1ffbc:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ffbe:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1ffc0:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ffc2:	2105      	movs	r1, #5
   1ffc4:	f00e fd93 	bl	2eaee <atomic_test_bit>
   1ffc8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   1ffcc:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ffce:	b398      	cbz	r0, 20038 <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   1ffd0:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ffd4:	210d      	movs	r1, #13
   1ffd6:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   1ffd8:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ffda:	f00e fd88 	bl	2eaee <atomic_test_bit>
   1ffde:	b1c0      	cbz	r0, 20012 <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1ffe0:	2120      	movs	r1, #32
   1ffe2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1ffe6:	f00f f876 	bl	2f0d6 <bt_keys_add_type>
   1ffea:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1ffee:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1fff2:	331a      	adds	r3, #26
   1fff4:	3557      	adds	r5, #87	; 0x57
   1fff6:	f852 1b04 	ldr.w	r1, [r2], #4
   1fffa:	42aa      	cmp	r2, r5
   1fffc:	f843 1b04 	str.w	r1, [r3], #4
   20000:	d1f9      	bne.n	1fff6 <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   20002:	2300      	movs	r3, #0
   20004:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20008:	6113      	str	r3, [r2, #16]
   2000a:	6153      	str	r3, [r2, #20]
   2000c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20010:	8313      	strh	r3, [r2, #24]
}
   20012:	b004      	add	sp, #16
   20014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   20018:	3a05      	subs	r2, #5
   2001a:	2a01      	cmp	r2, #1
   2001c:	d803      	bhi.n	20026 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   2001e:	f043 0320 	orr.w	r3, r3, #32
   20022:	734b      	strb	r3, [r1, #13]
   20024:	e7be      	b.n	1ffa4 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   20026:	f023 0320 	bic.w	r3, r3, #32
   2002a:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2002c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20030:	7b53      	ldrb	r3, [r2, #13]
   20032:	f023 0301 	bic.w	r3, r3, #1
   20036:	e7ba      	b.n	1ffae <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   20038:	f022 0210 	bic.w	r2, r2, #16
   2003c:	735a      	strb	r2, [r3, #13]
   2003e:	e7e8      	b.n	20012 <bt_smp_update_keys+0xfa>
   20040:	000376a4 	.word	0x000376a4
   20044:	00032f30 	.word	0x00032f30

00020048 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   20048:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2004a:	4b07      	ldr	r3, [pc, #28]	; (20068 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   2004c:	4807      	ldr	r0, [pc, #28]	; (2006c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2004e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   20052:	f003 0306 	and.w	r3, r3, #6
   20056:	1f9a      	subs	r2, r3, #6
   20058:	4253      	negs	r3, r2
   2005a:	4153      	adcs	r3, r2
   2005c:	4a04      	ldr	r2, [pc, #16]	; (20070 <bt_smp_init+0x28>)
   2005e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   20060:	f7fb fbba 	bl	1b7d8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   20064:	2000      	movs	r0, #0
   20066:	bd08      	pop	{r3, pc}
   20068:	20008000 	.word	0x20008000
   2006c:	200085f8 	.word	0x200085f8
   20070:	200319dd 	.word	0x200319dd

00020074 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   20074:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20076:	4c10      	ldr	r4, [pc, #64]	; (200b8 <bt_keys_get_addr+0x44>)
{
   20078:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   2007a:	f814 3b01 	ldrb.w	r3, [r4], #1
{
   2007e:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20080:	4283      	cmp	r3, r0
   20082:	d007      	beq.n	20094 <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   20084:	2207      	movs	r2, #7
   20086:	490d      	ldr	r1, [pc, #52]	; (200bc <bt_keys_get_addr+0x48>)
   20088:	480d      	ldr	r0, [pc, #52]	; (200c0 <bt_keys_get_addr+0x4c>)
   2008a:	f011 fb30 	bl	316ee <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   2008e:	b148      	cbz	r0, 200a4 <bt_keys_get_addr+0x30>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   20090:	2000      	movs	r0, #0
}
   20092:	bd70      	pop	{r4, r5, r6, pc}
   20094:	2207      	movs	r2, #7
   20096:	4620      	mov	r0, r4
   20098:	f011 fb29 	bl	316ee <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   2009c:	2800      	cmp	r0, #0
   2009e:	d1f1      	bne.n	20084 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   200a0:	4805      	ldr	r0, [pc, #20]	; (200b8 <bt_keys_get_addr+0x44>)
   200a2:	e7f6      	b.n	20092 <bt_keys_get_addr+0x1e>
		keys->id = id;
   200a4:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   200a8:	682b      	ldr	r3, [r5, #0]
   200aa:	6023      	str	r3, [r4, #0]
   200ac:	88ab      	ldrh	r3, [r5, #4]
   200ae:	80a3      	strh	r3, [r4, #4]
   200b0:	79ab      	ldrb	r3, [r5, #6]
   200b2:	71a3      	strb	r3, [r4, #6]
}
   200b4:	e7f4      	b.n	200a0 <bt_keys_get_addr+0x2c>
   200b6:	bf00      	nop
   200b8:	200309e4 	.word	0x200309e4
   200bc:	000364d3 	.word	0x000364d3
   200c0:	200309e5 	.word	0x200309e5

000200c4 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   200c4:	b410      	push	{r4}
   200c6:	460b      	mov	r3, r1
   200c8:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   200ca:	4a04      	ldr	r2, [pc, #16]	; (200dc <bt_keys_foreach_type+0x18>)
   200cc:	89d4      	ldrh	r4, [r2, #14]
   200ce:	4204      	tst	r4, r0
   200d0:	d002      	beq.n	200d8 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
   200d2:	4610      	mov	r0, r2
		}
	}
}
   200d4:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   200d6:	4718      	bx	r3
}
   200d8:	bc10      	pop	{r4}
   200da:	4770      	bx	lr
   200dc:	200309e4 	.word	0x200309e4

000200e0 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   200e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   200e4:	2300      	movs	r3, #0
{
   200e6:	4605      	mov	r5, r0
   200e8:	460e      	mov	r6, r1
   200ea:	4617      	mov	r7, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   200ec:	f8df 8030 	ldr.w	r8, [pc, #48]	; 20120 <bt_keys_find+0x40>
   200f0:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   200f4:	f898 2000 	ldrb.w	r2, [r8]
   200f8:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   200fa:	b113      	cbz	r3, 20102 <bt_keys_find+0x22>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   200fc:	2000      	movs	r0, #0
}
   200fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   20102:	2c00      	cmp	r4, #0
   20104:	d0fa      	beq.n	200fc <bt_keys_find+0x1c>
   20106:	42b2      	cmp	r2, r6
   20108:	d1f8      	bne.n	200fc <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   2010a:	2207      	movs	r2, #7
   2010c:	4639      	mov	r1, r7
   2010e:	4805      	ldr	r0, [pc, #20]	; (20124 <bt_keys_find+0x44>)
   20110:	f011 faed 	bl	316ee <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20114:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   20116:	2800      	cmp	r0, #0
   20118:	d1ea      	bne.n	200f0 <bt_keys_find+0x10>
			return &key_pool[i];
   2011a:	4801      	ldr	r0, [pc, #4]	; (20120 <bt_keys_find+0x40>)
   2011c:	e7ef      	b.n	200fe <bt_keys_find+0x1e>
   2011e:	bf00      	nop
   20120:	200309e4 	.word	0x200309e4
   20124:	200309e5 	.word	0x200309e5

00020128 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   20128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2012a:	780b      	ldrb	r3, [r1, #0]
   2012c:	4606      	mov	r6, r0
   2012e:	2b01      	cmp	r3, #1
   20130:	460c      	mov	r4, r1
   20132:	d001      	beq.n	20138 <bt_keys_find_irk+0x10>
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   20134:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   20136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   20138:	798b      	ldrb	r3, [r1, #6]
   2013a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2013e:	2b40      	cmp	r3, #64	; 0x40
   20140:	d1f8      	bne.n	20134 <bt_keys_find_irk+0xc>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20142:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   20144:	4d18      	ldr	r5, [pc, #96]	; (201a8 <bt_keys_find_irk+0x80>)
	return memcmp(a, b, sizeof(*a));
   20146:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   2014a:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   2014c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2014e:	f002 0202 	and.w	r2, r2, #2
   20152:	b1db      	cbz	r3, 2018c <bt_keys_find_irk+0x64>
   20154:	2300      	movs	r3, #0
   20156:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   20158:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2015a:	f002 0202 	and.w	r2, r2, #2
   2015e:	2b00      	cmp	r3, #0
   20160:	d1e8      	bne.n	20134 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   20162:	2a00      	cmp	r2, #0
   20164:	d0e6      	beq.n	20134 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   20166:	42b1      	cmp	r1, r6
   20168:	d1e4      	bne.n	20134 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2016a:	1c67      	adds	r7, r4, #1
   2016c:	4639      	mov	r1, r7
   2016e:	480f      	ldr	r0, [pc, #60]	; (201ac <bt_keys_find_irk+0x84>)
   20170:	f00c ffaa 	bl	2d0c8 <bt_rpa_irk_matches>
   20174:	2301      	movs	r3, #1
   20176:	2800      	cmp	r0, #0
   20178:	d0ed      	beq.n	20156 <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2017a:	f8d4 3001 	ldr.w	r3, [r4, #1]
   2017e:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   20182:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   20186:	4b0a      	ldr	r3, [pc, #40]	; (201b0 <bt_keys_find_irk+0x88>)
   20188:	809a      	strh	r2, [r3, #4]
}
   2018a:	e00b      	b.n	201a4 <bt_keys_find_irk+0x7c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2018c:	2a00      	cmp	r2, #0
   2018e:	d0e2      	beq.n	20156 <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   20190:	42b0      	cmp	r0, r6
   20192:	d1e0      	bne.n	20156 <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   20194:	2206      	movs	r2, #6
   20196:	4639      	mov	r1, r7
   20198:	1c60      	adds	r0, r4, #1
   2019a:	f011 faa8 	bl	316ee <memcmp>
   2019e:	2301      	movs	r3, #1
   201a0:	2800      	cmp	r0, #0
   201a2:	d1d2      	bne.n	2014a <bt_keys_find_irk+0x22>
			return &key_pool[i];
   201a4:	4800      	ldr	r0, [pc, #0]	; (201a8 <bt_keys_find_irk+0x80>)
   201a6:	e7c6      	b.n	20136 <bt_keys_find_irk+0xe>
   201a8:	200309e4 	.word	0x200309e4
   201ac:	20030a0e 	.word	0x20030a0e
   201b0:	20030a1e 	.word	0x20030a1e

000201b4 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   201b4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   201b6:	4c06      	ldr	r4, [pc, #24]	; (201d0 <bt_keys_find_addr+0x1c>)
   201b8:	7823      	ldrb	r3, [r4, #0]
   201ba:	4283      	cmp	r3, r0
   201bc:	d104      	bne.n	201c8 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   201be:	2207      	movs	r2, #7
   201c0:	1c60      	adds	r0, r4, #1
   201c2:	f011 fa94 	bl	316ee <memcmp>
   201c6:	b108      	cbz	r0, 201cc <bt_keys_find_addr+0x18>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   201c8:	2000      	movs	r0, #0
}
   201ca:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   201cc:	4620      	mov	r0, r4
   201ce:	e7fc      	b.n	201ca <bt_keys_find_addr+0x16>
   201d0:	200309e4 	.word	0x200309e4

000201d4 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   201d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   201d8:	b09a      	sub	sp, #104	; 0x68
   201da:	4616      	mov	r6, r2
   201dc:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   201e0:	aa0c      	add	r2, sp, #48	; 0x30
{
   201e2:	4684      	mov	ip, r0
   201e4:	468a      	mov	sl, r1
   201e6:	4690      	mov	r8, r2
   201e8:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   201ea:	4b2c      	ldr	r3, [pc, #176]	; (2029c <bt_crypto_f5+0xc8>)
   201ec:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   201f0:	4614      	mov	r4, r2
   201f2:	6818      	ldr	r0, [r3, #0]
   201f4:	6859      	ldr	r1, [r3, #4]
   201f6:	3308      	adds	r3, #8
   201f8:	c403      	stmia	r4!, {r0, r1}
   201fa:	4573      	cmp	r3, lr
   201fc:	4622      	mov	r2, r4
   201fe:	d1f7      	bne.n	201f0 <bt_crypto_f5+0x1c>
   20200:	6818      	ldr	r0, [r3, #0]
   20202:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   20204:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   20206:	6020      	str	r0, [r4, #0]
   20208:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   2020a:	2220      	movs	r2, #32
   2020c:	a804      	add	r0, sp, #16
   2020e:	f00e ff74 	bl	2f0fa <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   20212:	466b      	mov	r3, sp
   20214:	2220      	movs	r2, #32
   20216:	4822      	ldr	r0, [pc, #136]	; (202a0 <bt_crypto_f5+0xcc>)
   20218:	a904      	add	r1, sp, #16
   2021a:	f00e ff86 	bl	2f12a <bt_crypto_aes_cmac>
	if (err) {
   2021e:	4604      	mov	r4, r0
   20220:	bbc0      	cbnz	r0, 20294 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   20222:	2210      	movs	r2, #16
   20224:	4651      	mov	r1, sl
   20226:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   2022a:	f00e ff66 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   2022e:	2210      	movs	r2, #16
   20230:	4631      	mov	r1, r6
   20232:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   20236:	f00e ff60 	bl	2f0fa <sys_memcpy_swap>
	m[37] = a1->type;
   2023a:	4629      	mov	r1, r5
   2023c:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   20240:	2206      	movs	r2, #6
   20242:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   20246:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   2024a:	f00e ff56 	bl	2f0fa <sys_memcpy_swap>
	m[44] = a2->type;
   2024e:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   20250:	2206      	movs	r2, #6
	m[44] = a2->type;
   20252:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   20256:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   2025a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2025e:	f00e ff4c 	bl	2f0fa <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   20262:	464b      	mov	r3, r9
   20264:	2235      	movs	r2, #53	; 0x35
   20266:	4641      	mov	r1, r8
   20268:	4668      	mov	r0, sp
   2026a:	f00e ff5e 	bl	2f12a <bt_crypto_aes_cmac>
	if (err) {
   2026e:	4604      	mov	r4, r0
   20270:	b980      	cbnz	r0, 20294 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   20272:	4648      	mov	r0, r9
   20274:	f00e ff4b 	bl	2f10e <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   20278:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   2027a:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   2027c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   20280:	4641      	mov	r1, r8
   20282:	463b      	mov	r3, r7
   20284:	4668      	mov	r0, sp
   20286:	f00e ff50 	bl	2f12a <bt_crypto_aes_cmac>
	if (err) {
   2028a:	4604      	mov	r4, r0
   2028c:	b910      	cbnz	r0, 20294 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   2028e:	4638      	mov	r0, r7
   20290:	f00e ff3d 	bl	2f10e <sys_mem_swap.constprop.0>

	return 0;
}
   20294:	4620      	mov	r0, r4
   20296:	b01a      	add	sp, #104	; 0x68
   20298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2029c:	000330e0 	.word	0x000330e0
   202a0:	00037a3e 	.word	0x00037a3e

000202a4 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   202a4:	b570      	push	{r4, r5, r6, lr}
   202a6:	460e      	mov	r6, r1
   202a8:	461d      	mov	r5, r3
   202aa:	4614      	mov	r4, r2
   202ac:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   202ae:	4601      	mov	r1, r0
   202b0:	2220      	movs	r2, #32
   202b2:	a804      	add	r0, sp, #16
   202b4:	f00e ff21 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   202b8:	2220      	movs	r2, #32
   202ba:	4631      	mov	r1, r6
   202bc:	a80c      	add	r0, sp, #48	; 0x30
   202be:	f00e ff1c 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   202c2:	2210      	movs	r2, #16
   202c4:	4629      	mov	r1, r5
   202c6:	a814      	add	r0, sp, #80	; 0x50
   202c8:	f00e ff17 	bl	2f0fa <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   202cc:	2210      	movs	r2, #16
   202ce:	4621      	mov	r1, r4
   202d0:	4668      	mov	r0, sp
   202d2:	f00e ff12 	bl	2f0fa <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   202d6:	466b      	mov	r3, sp
   202d8:	2250      	movs	r2, #80	; 0x50
   202da:	4618      	mov	r0, r3
   202dc:	a904      	add	r1, sp, #16
   202de:	f00e ff24 	bl	2f12a <bt_crypto_aes_cmac>
	if (err) {
   202e2:	b940      	cbnz	r0, 202f6 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   202e4:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   202e6:	4a05      	ldr	r2, [pc, #20]	; (202fc <bt_crypto_g2+0x58>)
   202e8:	ba1b      	rev	r3, r3
   202ea:	fbb3 f1f2 	udiv	r1, r3, r2
   202ee:	fb02 3311 	mls	r3, r2, r1, r3
   202f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   202f4:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   202f6:	b018      	add	sp, #96	; 0x60
   202f8:	bd70      	pop	{r4, r5, r6, pc}
   202fa:	bf00      	nop
   202fc:	000f4240 	.word	0x000f4240

00020300 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   20300:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   20302:	4804      	ldr	r0, [pc, #16]	; (20314 <fs_init+0x14>)
   20304:	f010 fd19 	bl	30d3a <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   20308:	4b03      	ldr	r3, [pc, #12]	; (20318 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   2030a:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   2030c:	e9c3 3300 	strd	r3, r3, [r3]
   20310:	bd08      	pop	{r3, pc}
   20312:	bf00      	nop
   20314:	20030a40 	.word	0x20030a40
   20318:	20030a54 	.word	0x20030a54

0002031c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   2031c:	222c      	movs	r2, #44	; 0x2c
   2031e:	4b02      	ldr	r3, [pc, #8]	; (20328 <net_buf_pool_get+0xc>)
   20320:	fb02 3000 	mla	r0, r2, r0, r3
   20324:	4770      	bx	lr
   20326:	bf00      	nop
   20328:	20008e80 	.word	0x20008e80

0002032c <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2032c:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2032e:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   20330:	4b05      	ldr	r3, [pc, #20]	; (20348 <net_buf_id+0x1c>)
   20332:	fb01 3302 	mla	r3, r1, r2, r3
   20336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20338:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2033a:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2033c:	331b      	adds	r3, #27
   2033e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   20342:	fbb0 f0f3 	udiv	r0, r0, r3
   20346:	4770      	bx	lr
   20348:	20008e80 	.word	0x20008e80

0002034c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   2034c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2034e:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20350:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20352:	4b09      	ldr	r3, [pc, #36]	; (20378 <fixed_data_alloc+0x2c>)
   20354:	fb04 3302 	mla	r3, r4, r2, r3
   20358:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   2035a:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2035c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2035e:	681a      	ldr	r2, [r3, #0]
   20360:	4294      	cmp	r4, r2
   20362:	bf94      	ite	ls
   20364:	600c      	strls	r4, [r1, #0]
   20366:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   20368:	e9d3 5400 	ldrd	r5, r4, [r3]
   2036c:	f7ff ffde 	bl	2032c <net_buf_id>
}
   20370:	fb05 4000 	mla	r0, r5, r0, r4
   20374:	bd38      	pop	{r3, r4, r5, pc}
   20376:	bf00      	nop
   20378:	20008e80 	.word	0x20008e80

0002037c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2037c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20380:	4605      	mov	r5, r0
   20382:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20384:	4610      	mov	r0, r2
   20386:	4619      	mov	r1, r3
{
   20388:	4691      	mov	r9, r2
   2038a:	4698      	mov	r8, r3
   2038c:	4617      	mov	r7, r2
   2038e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20390:	f010 ffe9 	bl	31366 <sys_clock_timeout_end_calc>
   20394:	4682      	mov	sl, r0
   20396:	468b      	mov	fp, r1
	__asm__ volatile(
   20398:	f04f 0320 	mov.w	r3, #32
   2039c:	f3ef 8111 	mrs	r1, BASEPRI
   203a0:	f383 8812 	msr	BASEPRI_MAX, r3
   203a4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   203a8:	8b6b      	ldrh	r3, [r5, #26]
   203aa:	2b00      	cmp	r3, #0
   203ac:	d058      	beq.n	20460 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   203ae:	8b2a      	ldrh	r2, [r5, #24]
   203b0:	429a      	cmp	r2, r3
   203b2:	d93c      	bls.n	2042e <net_buf_alloc_len+0xb2>
   203b4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   203b6:	2200      	movs	r2, #0
   203b8:	2300      	movs	r3, #0
   203ba:	4628      	mov	r0, r5
   203bc:	f005 fade 	bl	2597c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   203c0:	9900      	ldr	r1, [sp, #0]
   203c2:	4604      	mov	r4, r0
   203c4:	2800      	cmp	r0, #0
   203c6:	d032      	beq.n	2042e <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   203c8:	f381 8811 	msr	BASEPRI, r1
   203cc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   203d0:	9b01      	ldr	r3, [sp, #4]
   203d2:	2b00      	cmp	r3, #0
   203d4:	d055      	beq.n	20482 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   203d6:	ea58 0309 	orrs.w	r3, r8, r9
   203da:	d00f      	beq.n	203fc <net_buf_alloc_len+0x80>
   203dc:	f1b8 3fff 	cmp.w	r8, #4294967295
   203e0:	bf08      	it	eq
   203e2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   203e6:	d009      	beq.n	203fc <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   203e8:	f006 f9f4 	bl	267d4 <sys_clock_tick_get>
   203ec:	ebba 0700 	subs.w	r7, sl, r0
   203f0:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   203f4:	2e00      	cmp	r6, #0
   203f6:	bfbc      	itt	lt
   203f8:	2700      	movlt	r7, #0
   203fa:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   203fc:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20400:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   20402:	4d25      	ldr	r5, [pc, #148]	; (20498 <net_buf_alloc_len+0x11c>)
   20404:	463a      	mov	r2, r7
   20406:	fb08 5303 	mla	r3, r8, r3, r5
   2040a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2040c:	4620      	mov	r0, r4
   2040e:	681b      	ldr	r3, [r3, #0]
   20410:	a901      	add	r1, sp, #4
   20412:	f8d3 9000 	ldr.w	r9, [r3]
   20416:	4633      	mov	r3, r6
   20418:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2041a:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2041c:	2800      	cmp	r0, #0
   2041e:	d131      	bne.n	20484 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   20420:	7aa0      	ldrb	r0, [r4, #10]
   20422:	4621      	mov	r1, r4
   20424:	fb00 5008 	mla	r0, r0, r8, r5
   20428:	f010 fd18 	bl	30e5c <k_queue_prepend>
}
   2042c:	e024      	b.n	20478 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   2042e:	8b68      	ldrh	r0, [r5, #26]
   20430:	1e43      	subs	r3, r0, #1
   20432:	836b      	strh	r3, [r5, #26]
   20434:	f381 8811 	msr	BASEPRI, r1
   20438:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2043c:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2043e:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   20440:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20442:	331b      	adds	r3, #27
   20444:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   20448:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2044a:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   2044e:	4b12      	ldr	r3, [pc, #72]	; (20498 <net_buf_alloc_len+0x11c>)
   20450:	4a12      	ldr	r2, [pc, #72]	; (2049c <net_buf_alloc_len+0x120>)
   20452:	1aeb      	subs	r3, r5, r3
   20454:	109b      	asrs	r3, r3, #2
   20456:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   20458:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   2045a:	7f2b      	ldrb	r3, [r5, #28]
   2045c:	72e3      	strb	r3, [r4, #11]
		goto success;
   2045e:	e7b7      	b.n	203d0 <net_buf_alloc_len+0x54>
   20460:	f381 8811 	msr	BASEPRI, r1
   20464:	f3bf 8f6f 	isb	sy
   20468:	464a      	mov	r2, r9
   2046a:	4643      	mov	r3, r8
   2046c:	4628      	mov	r0, r5
   2046e:	f005 fa85 	bl	2597c <z_impl_k_queue_get>
	if (!buf) {
   20472:	4604      	mov	r4, r0
   20474:	2800      	cmp	r0, #0
   20476:	d1ab      	bne.n	203d0 <net_buf_alloc_len+0x54>
		return NULL;
   20478:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2047a:	4620      	mov	r0, r4
   2047c:	b003      	add	sp, #12
   2047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   20482:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   20484:	2300      	movs	r3, #0
	buf->ref   = 1U;
   20486:	2201      	movs	r2, #1
	buf->frags = NULL;
   20488:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   2048a:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   2048c:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   2048e:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   20490:	6963      	ldr	r3, [r4, #20]
   20492:	8262      	strh	r2, [r4, #18]
   20494:	60e3      	str	r3, [r4, #12]
	return buf;
   20496:	e7f0      	b.n	2047a <net_buf_alloc_len+0xfe>
   20498:	20008e80 	.word	0x20008e80
   2049c:	ba2e8ba3 	.word	0xba2e8ba3

000204a0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   204a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   204a4:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   204a6:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   204a8:	272c      	movs	r7, #44	; 0x2c
   204aa:	4d15      	ldr	r5, [pc, #84]	; (20500 <net_buf_unref+0x60>)
	while (buf) {
   204ac:	b90c      	cbnz	r4, 204b2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   204ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   204b2:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   204b4:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   204b8:	3b01      	subs	r3, #1
   204ba:	b2db      	uxtb	r3, r3
   204bc:	7223      	strb	r3, [r4, #8]
   204be:	2b00      	cmp	r3, #0
   204c0:	d1f5      	bne.n	204ae <net_buf_unref+0xe>
		if (buf->__buf) {
   204c2:	6961      	ldr	r1, [r4, #20]
   204c4:	b159      	cbz	r1, 204de <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   204c6:	7a63      	ldrb	r3, [r4, #9]
   204c8:	07db      	lsls	r3, r3, #31
   204ca:	d407      	bmi.n	204dc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   204cc:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   204ce:	4620      	mov	r0, r4
   204d0:	fb07 5303 	mla	r3, r7, r3, r5
   204d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   204d6:	681b      	ldr	r3, [r3, #0]
   204d8:	689b      	ldr	r3, [r3, #8]
   204da:	4798      	blx	r3
			buf->__buf = NULL;
   204dc:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   204de:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   204e0:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   204e2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   204e6:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   204e8:	6a1b      	ldr	r3, [r3, #32]
   204ea:	b11b      	cbz	r3, 204f4 <net_buf_unref+0x54>
			pool->destroy(buf);
   204ec:	4620      	mov	r0, r4
   204ee:	4798      	blx	r3
{
   204f0:	4644      	mov	r4, r8
   204f2:	e7db      	b.n	204ac <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   204f4:	4621      	mov	r1, r4
   204f6:	fb00 5007 	mla	r0, r0, r7, r5
   204fa:	f010 fcaf 	bl	30e5c <k_queue_prepend>
}
   204fe:	e7f7      	b.n	204f0 <net_buf_unref+0x50>
   20500:	20008e80 	.word	0x20008e80

00020504 <xoshiro128_next>:
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
	}
}

static uint32_t xoshiro128_next(void)
{
   20504:	b570      	push	{r4, r5, r6, lr}
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   20506:	4b0c      	ldr	r3, [pc, #48]	; (20538 <xoshiro128_next+0x34>)
   20508:	6819      	ldr	r1, [r3, #0]
   2050a:	68d8      	ldr	r0, [r3, #12]

	const uint32_t t = state[1] << 9;

	state[2] ^= state[0];
   2050c:	e9d3 5201 	ldrd	r5, r2, [r3, #4]
   20510:	404a      	eors	r2, r1
	state[3] ^= state[1];
   20512:	ea80 0405 	eor.w	r4, r0, r5
	state[1] ^= state[2];
   20516:	ea85 0602 	eor.w	r6, r5, r2
   2051a:	605e      	str	r6, [r3, #4]
	state[0] ^= state[3];

	state[2] ^= t;
   2051c:	ea82 2245 	eor.w	r2, r2, r5, lsl #9
	state[0] ^= state[3];
   20520:	ea81 0604 	eor.w	r6, r1, r4
	return (x << k) | (x >> (32 - k));
   20524:	ea4f 5474 	mov.w	r4, r4, ror #21
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   20528:	4408      	add	r0, r1
	state[0] ^= state[3];
   2052a:	601e      	str	r6, [r3, #0]
	state[2] ^= t;
   2052c:	609a      	str	r2, [r3, #8]

	state[3] = rotl(state[3], 11);
   2052e:	60dc      	str	r4, [r3, #12]

	return result;
}
   20530:	eb01 6070 	add.w	r0, r1, r0, ror #25
   20534:	bd70      	pop	{r4, r5, r6, pc}
   20536:	bf00      	nop
   20538:	20030a5c 	.word	0x20030a5c

0002053c <xoshiro128_init_state>:
{
   2053c:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2053e:	480f      	ldr	r0, [pc, #60]	; (2057c <xoshiro128_init_state+0x40>)
   20540:	4c0f      	ldr	r4, [pc, #60]	; (20580 <xoshiro128_init_state+0x44>)
   20542:	6883      	ldr	r3, [r0, #8]
   20544:	2210      	movs	r2, #16
   20546:	4621      	mov	r1, r4
   20548:	681b      	ldr	r3, [r3, #0]
   2054a:	4798      	blx	r3
	if (rc == 0) {
   2054c:	b918      	cbnz	r0, 20556 <xoshiro128_init_state+0x1a>
		initialized = true;
   2054e:	2201      	movs	r2, #1
   20550:	4b0c      	ldr	r3, [pc, #48]	; (20584 <xoshiro128_init_state+0x48>)
   20552:	701a      	strb	r2, [r3, #0]
}
   20554:	bd10      	pop	{r4, pc}
   20556:	f00f fc4c 	bl	2fdf2 <sys_clock_cycle_get_32>
		state[0] = k_cycle_get_32();
   2055a:	6020      	str	r0, [r4, #0]
   2055c:	f00f fc49 	bl	2fdf2 <sys_clock_cycle_get_32>
		state[1] = k_cycle_get_32() ^ 0x9b64c2b0;
   20560:	4b09      	ldr	r3, [pc, #36]	; (20588 <xoshiro128_init_state+0x4c>)
   20562:	4043      	eors	r3, r0
   20564:	6063      	str	r3, [r4, #4]
   20566:	f00f fc44 	bl	2fdf2 <sys_clock_cycle_get_32>
		state[2] = k_cycle_get_32() ^ 0x86d3d2d4;
   2056a:	4b08      	ldr	r3, [pc, #32]	; (2058c <xoshiro128_init_state+0x50>)
   2056c:	4043      	eors	r3, r0
   2056e:	60a3      	str	r3, [r4, #8]
   20570:	f00f fc3f 	bl	2fdf2 <sys_clock_cycle_get_32>
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
   20574:	4b06      	ldr	r3, [pc, #24]	; (20590 <xoshiro128_init_state+0x54>)
   20576:	4043      	eors	r3, r0
   20578:	60e3      	str	r3, [r4, #12]
}
   2057a:	e7eb      	b.n	20554 <xoshiro128_init_state+0x18>
   2057c:	00032848 	.word	0x00032848
   20580:	20030a5c 	.word	0x20030a5c
   20584:	200319df 	.word	0x200319df
   20588:	9b64c2b0 	.word	0x9b64c2b0
   2058c:	86d3d2d4 	.word	0x86d3d2d4
   20590:	a00ae278 	.word	0xa00ae278

00020594 <xoshiro128_initialize>:
{
   20594:	b508      	push	{r3, lr}
   20596:	4804      	ldr	r0, [pc, #16]	; (205a8 <xoshiro128_initialize+0x14>)
   20598:	f010 fae5 	bl	30b66 <z_device_is_ready>
	return 0;
   2059c:	2800      	cmp	r0, #0
}
   2059e:	bf0c      	ite	eq
   205a0:	f06f 0012 	mvneq.w	r0, #18
   205a4:	2000      	movne	r0, #0
   205a6:	bd08      	pop	{r3, pc}
   205a8:	00032848 	.word	0x00032848

000205ac <z_impl_sys_rand32_get>:

uint32_t z_impl_sys_rand32_get(void)
{
   205ac:	b508      	push	{r3, lr}
	if (unlikely(!initialized)) {
   205ae:	4b04      	ldr	r3, [pc, #16]	; (205c0 <z_impl_sys_rand32_get+0x14>)
   205b0:	781b      	ldrb	r3, [r3, #0]
   205b2:	b90b      	cbnz	r3, 205b8 <z_impl_sys_rand32_get+0xc>
		xoshiro128_init_state();
   205b4:	f7ff ffc2 	bl	2053c <xoshiro128_init_state>
	}

	return xoshiro128_next();
}
   205b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return xoshiro128_next();
   205bc:	f7ff bfa2 	b.w	20504 <xoshiro128_next>
   205c0:	200319df 	.word	0x200319df

000205c4 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   205c4:	2813      	cmp	r0, #19
   205c6:	d80e      	bhi.n	205e6 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   205c8:	4a08      	ldr	r2, [pc, #32]	; (205ec <adc_gain_invert+0x28>)
   205ca:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   205ce:	b153      	cbz	r3, 205e6 <adc_gain_invert+0x22>
   205d0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   205d4:	7852      	ldrb	r2, [r2, #1]
   205d6:	b132      	cbz	r2, 205e6 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   205d8:	6808      	ldr	r0, [r1, #0]
   205da:	4343      	muls	r3, r0
   205dc:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   205e0:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   205e2:	600b      	str	r3, [r1, #0]
			rv = 0;
   205e4:	4770      	bx	lr
	int rv = -EINVAL;
   205e6:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   205ea:	4770      	bx	lr
   205ec:	00037a63 	.word	0x00037a63

000205f0 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   205f0:	2201      	movs	r2, #1
   205f2:	4b05      	ldr	r3, [pc, #20]	; (20608 <adc_context_start_sampling+0x18>)
   205f4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   205f8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   205fc:	b109      	cbz	r1, 20602 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   205fe:	60da      	str	r2, [r3, #12]
}
   20600:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20602:	601a      	str	r2, [r3, #0]
   20604:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   20606:	4770      	bx	lr
   20608:	4000e000 	.word	0x4000e000

0002060c <adc_nrfx_channel_setup>:
{
   2060c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   2060e:	790d      	ldrb	r5, [r1, #4]
   20610:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   20614:	2c07      	cmp	r4, #7
   20616:	d825      	bhi.n	20664 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   20618:	780a      	ldrb	r2, [r1, #0]
   2061a:	2a0b      	cmp	r2, #11
   2061c:	d818      	bhi.n	20650 <adc_nrfx_channel_setup+0x44>
   2061e:	e8df f002 	tbb	[pc, r2]
   20622:	0707      	.short	0x0707
   20624:	06170707 	.word	0x06170707
   20628:	13111717 	.word	0x13111717
   2062c:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   2062e:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   20630:	784b      	ldrb	r3, [r1, #1]
   20632:	2b03      	cmp	r3, #3
   20634:	d01a      	beq.n	2066c <adc_nrfx_channel_setup+0x60>
   20636:	2b04      	cmp	r3, #4
   20638:	f04f 0300 	mov.w	r3, #0
   2063c:	d017      	beq.n	2066e <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   2063e:	4a30      	ldr	r2, [pc, #192]	; (20700 <adc_nrfx_channel_setup+0xf4>)
   20640:	9202      	str	r2, [sp, #8]
   20642:	e008      	b.n	20656 <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   20644:	2205      	movs	r2, #5
		break;
   20646:	e7f3      	b.n	20630 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   20648:	2206      	movs	r2, #6
		break;
   2064a:	e7f1      	b.n	20630 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   2064c:	2207      	movs	r2, #7
		break;
   2064e:	e7ef      	b.n	20630 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   20650:	4b2c      	ldr	r3, [pc, #176]	; (20704 <adc_nrfx_channel_setup+0xf8>)
   20652:	9302      	str	r3, [sp, #8]
   20654:	2300      	movs	r3, #0
   20656:	2201      	movs	r2, #1
   20658:	4618      	mov	r0, r3
   2065a:	e9cd 3300 	strd	r3, r3, [sp]
   2065e:	492a      	ldr	r1, [pc, #168]	; (20708 <adc_nrfx_channel_setup+0xfc>)
   20660:	f00e fea3 	bl	2f3aa <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   20664:	f06f 0015 	mvn.w	r0, #21
}
   20668:	b004      	add	sp, #16
   2066a:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   2066c:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   2066e:	f244 060a 	movw	r6, #16394	; 0x400a
   20672:	8848      	ldrh	r0, [r1, #2]
   20674:	42b0      	cmp	r0, r6
   20676:	d03d      	beq.n	206f4 <adc_nrfx_channel_setup+0xe8>
   20678:	d80a      	bhi.n	20690 <adc_nrfx_channel_setup+0x84>
   2067a:	f244 0603 	movw	r6, #16387	; 0x4003
   2067e:	42b0      	cmp	r0, r6
   20680:	d014      	beq.n	206ac <adc_nrfx_channel_setup+0xa0>
   20682:	f244 0605 	movw	r6, #16389	; 0x4005
   20686:	42b0      	cmp	r0, r6
   20688:	d032      	beq.n	206f0 <adc_nrfx_channel_setup+0xe4>
   2068a:	b398      	cbz	r0, 206f4 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   2068c:	4b1f      	ldr	r3, [pc, #124]	; (2070c <adc_nrfx_channel_setup+0x100>)
   2068e:	e7e0      	b.n	20652 <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   20690:	f244 0614 	movw	r6, #16404	; 0x4014
   20694:	42b0      	cmp	r0, r6
   20696:	d02f      	beq.n	206f8 <adc_nrfx_channel_setup+0xec>
   20698:	f244 0628 	movw	r6, #16424	; 0x4028
   2069c:	42b0      	cmp	r0, r6
   2069e:	d02d      	beq.n	206fc <adc_nrfx_channel_setup+0xf0>
   206a0:	f244 060f 	movw	r6, #16399	; 0x400f
   206a4:	42b0      	cmp	r0, r6
   206a6:	d1f1      	bne.n	2068c <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   206a8:	2003      	movs	r0, #3
   206aa:	e000      	b.n	206ae <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   206ac:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   206ae:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   206b2:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   206b4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   206b8:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   206bc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   206c0:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   206c2:	0123      	lsls	r3, r4, #4
   206c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   206c8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   206cc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   206d0:	0123      	lsls	r3, r4, #4
   206d2:	798a      	ldrb	r2, [r1, #6]
   206d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   206d8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   206dc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   206e0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   206e4:	4b0a      	ldr	r3, [pc, #40]	; (20710 <adc_nrfx_channel_setup+0x104>)
   206e6:	794a      	ldrb	r2, [r1, #5]
   206e8:	4423      	add	r3, r4
   206ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   206ee:	e7bb      	b.n	20668 <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   206f0:	2001      	movs	r0, #1
   206f2:	e7dc      	b.n	206ae <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   206f4:	2002      	movs	r0, #2
   206f6:	e7da      	b.n	206ae <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   206f8:	2004      	movs	r0, #4
   206fa:	e7d8      	b.n	206ae <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   206fc:	2005      	movs	r0, #5
   206fe:	e7d6      	b.n	206ae <adc_nrfx_channel_setup+0xa2>
   20700:	00037aaa 	.word	0x00037aaa
   20704:	00037a8b 	.word	0x00037a8b
   20708:	00032eb8 	.word	0x00032eb8
   2070c:	00037ace 	.word	0x00037ace
   20710:	20008160 	.word	0x20008160

00020714 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   20714:	b5f0      	push	{r4, r5, r6, r7, lr}
   20716:	460c      	mov	r4, r1
   20718:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   2071a:	f04f 33ff 	mov.w	r3, #4294967295
   2071e:	f04f 32ff 	mov.w	r2, #4294967295
   20722:	486d      	ldr	r0, [pc, #436]	; (208d8 <adc_nrfx_read+0x1c4>)
   20724:	f005 f984 	bl	25a30 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   20728:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   2072a:	1e73      	subs	r3, r6, #1
   2072c:	2bfe      	cmp	r3, #254	; 0xfe
   2072e:	f04f 0300 	mov.w	r3, #0
   20732:	d909      	bls.n	20748 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   20734:	4a69      	ldr	r2, [pc, #420]	; (208dc <adc_nrfx_read+0x1c8>)
   20736:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   20738:	2201      	movs	r2, #1
   2073a:	4618      	mov	r0, r3
   2073c:	e9cd 3300 	strd	r3, r3, [sp]
   20740:	4967      	ldr	r1, [pc, #412]	; (208e0 <adc_nrfx_read+0x1cc>)
   20742:	f00e fe32 	bl	2f3aa <z_log_msg_runtime_create.constprop.0>
	if (error) {
   20746:	e014      	b.n	20772 <adc_nrfx_read+0x5e>
   20748:	461a      	mov	r2, r3
	active_channels = 0U;
   2074a:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   2074c:	4d65      	ldr	r5, [pc, #404]	; (208e4 <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   2074e:	4f66      	ldr	r7, [pc, #408]	; (208e8 <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   20750:	fa26 f302 	lsr.w	r3, r6, r2
   20754:	f013 0301 	ands.w	r3, r3, #1
   20758:	d039      	beq.n	207ce <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   2075a:	5cbb      	ldrb	r3, [r7, r2]
   2075c:	b98b      	cbnz	r3, 20782 <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   2075e:	9203      	str	r2, [sp, #12]
   20760:	4a62      	ldr	r2, [pc, #392]	; (208ec <adc_nrfx_read+0x1d8>)
   20762:	9202      	str	r2, [sp, #8]
   20764:	e9cd 3300 	strd	r3, r3, [sp]
   20768:	2201      	movs	r2, #1
   2076a:	4618      	mov	r0, r3
   2076c:	495c      	ldr	r1, [pc, #368]	; (208e0 <adc_nrfx_read+0x1cc>)
   2076e:	f00e fe1c 	bl	2f3aa <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   20772:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   20776:	4858      	ldr	r0, [pc, #352]	; (208d8 <adc_nrfx_read+0x1c4>)
   20778:	f005 f934 	bl	259e4 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   2077c:	4620      	mov	r0, r4
   2077e:	b007      	add	sp, #28
   20780:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   20782:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   20786:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   2078a:	f1bc 0c00 	subs.w	ip, ip, #0
   2078e:	bf18      	it	ne
   20790:	f04f 0c01 	movne.w	ip, #1
   20794:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   20798:	3001      	adds	r0, #1
   2079a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   2079e:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   207a2:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   207a6:	f102 0151 	add.w	r1, r2, #81	; 0x51
   207aa:	0109      	lsls	r1, r1, #4
   207ac:	506b      	str	r3, [r5, r1]
   207ae:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   207b0:	3201      	adds	r2, #1
   207b2:	2a08      	cmp	r2, #8
   207b4:	d1cc      	bne.n	20750 <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   207b6:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   207b8:	2300      	movs	r3, #0
   207ba:	f1a2 0108 	sub.w	r1, r2, #8
   207be:	2906      	cmp	r1, #6
   207c0:	d818      	bhi.n	207f4 <adc_nrfx_read+0xe0>
   207c2:	e8df f001 	tbb	[pc, r1]
   207c6:	171e      	.short	0x171e
   207c8:	17091720 	.word	0x17091720
   207cc:	15          	.byte	0x15
   207cd:	00          	.byte	0x00
   207ce:	f102 0151 	add.w	r1, r2, #81	; 0x51
   207d2:	0109      	lsls	r1, r1, #4
   207d4:	506b      	str	r3, [r5, r1]
}
   207d6:	e7eb      	b.n	207b0 <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   207d8:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   207da:	4a42      	ldr	r2, [pc, #264]	; (208e4 <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   207dc:	2801      	cmp	r0, #1
   207de:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   207e2:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   207e4:	d911      	bls.n	2080a <adc_nrfx_read+0xf6>
   207e6:	b193      	cbz	r3, 2080e <adc_nrfx_read+0xfa>
		LOG_ERR(
   207e8:	4b41      	ldr	r3, [pc, #260]	; (208f0 <adc_nrfx_read+0x1dc>)
   207ea:	9302      	str	r3, [sp, #8]
   207ec:	2300      	movs	r3, #0
   207ee:	e7a3      	b.n	20738 <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   207f0:	2303      	movs	r3, #3
		break;
   207f2:	e7f2      	b.n	207da <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   207f4:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   207f6:	4a3f      	ldr	r2, [pc, #252]	; (208f4 <adc_nrfx_read+0x1e0>)
   207f8:	9300      	str	r3, [sp, #0]
   207fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
   207fe:	2300      	movs	r3, #0
   20800:	e7b2      	b.n	20768 <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   20802:	2300      	movs	r3, #0
   20804:	e7e9      	b.n	207da <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   20806:	2301      	movs	r3, #1
   20808:	e7e7      	b.n	207da <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   2080a:	2b08      	cmp	r3, #8
   2080c:	d816      	bhi.n	2083c <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   2080e:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   20812:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   20814:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   20816:	b9b2      	cbnz	r2, 20846 <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   20818:	68e2      	ldr	r2, [r4, #12]
   2081a:	429a      	cmp	r2, r3
   2081c:	d217      	bcs.n	2084e <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   2081e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   20822:	4b35      	ldr	r3, [pc, #212]	; (208f8 <adc_nrfx_read+0x1e4>)
   20824:	2201      	movs	r2, #1
   20826:	9302      	str	r3, [sp, #8]
   20828:	2300      	movs	r3, #0
   2082a:	492d      	ldr	r1, [pc, #180]	; (208e0 <adc_nrfx_read+0x1cc>)
   2082c:	4618      	mov	r0, r3
   2082e:	e9cd 3300 	strd	r3, r3, [sp]
   20832:	f00e fdba 	bl	2f3aa <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   20836:	f06f 040b 	mvn.w	r4, #11
   2083a:	e79c      	b.n	20776 <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   2083c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   2083e:	4b2f      	ldr	r3, [pc, #188]	; (208fc <adc_nrfx_read+0x1e8>)
   20840:	9302      	str	r3, [sp, #8]
   20842:	2300      	movs	r3, #0
   20844:	e78e      	b.n	20764 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   20846:	8992      	ldrh	r2, [r2, #12]
   20848:	fb02 3303 	mla	r3, r2, r3, r3
   2084c:	e7e4      	b.n	20818 <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   2084e:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   20850:	68a2      	ldr	r2, [r4, #8]
   20852:	4b24      	ldr	r3, [pc, #144]	; (208e4 <adc_nrfx_read+0x1d0>)
   20854:	4f2a      	ldr	r7, [pc, #168]	; (20900 <adc_nrfx_read+0x1ec>)
   20856:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   2085a:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   2085e:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   20862:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20866:	6833      	ldr	r3, [r6, #0]
   20868:	463e      	mov	r6, r7
   2086a:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   2086c:	2500      	movs	r5, #0
   2086e:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   20870:	6823      	ldr	r3, [r4, #0]
   20872:	b36b      	cbz	r3, 208d0 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   20874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   20876:	f107 0488 	add.w	r4, r7, #136	; 0x88
   2087a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   2087e:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   20880:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   20884:	b320      	cbz	r0, 208d0 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20886:	e8d6 3fef 	ldaex	r3, [r6]
   2088a:	e8c6 5fe2 	stlex	r2, r5, [r6]
   2088e:	2a00      	cmp	r2, #0
   20890:	d1f9      	bne.n	20886 <adc_nrfx_read+0x172>
   20892:	491c      	ldr	r1, [pc, #112]	; (20904 <adc_nrfx_read+0x1f0>)
   20894:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20898:	460e      	mov	r6, r1
   2089a:	4629      	mov	r1, r5
   2089c:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   208a0:	2300      	movs	r3, #0
   208a2:	fbe4 6100 	umlal	r6, r1, r4, r0
   208a6:	4a18      	ldr	r2, [pc, #96]	; (20908 <adc_nrfx_read+0x1f4>)
   208a8:	4630      	mov	r0, r6
   208aa:	f7e8 fb49 	bl	8f40 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   208ae:	2200      	movs	r2, #0
   208b0:	e9cd 0100 	strd	r0, r1, [sp]
   208b4:	2300      	movs	r3, #0
   208b6:	f107 0008 	add.w	r0, r7, #8
   208ba:	f006 f80f 	bl	268dc <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   208be:	f04f 32ff 	mov.w	r2, #4294967295
   208c2:	f04f 33ff 	mov.w	r3, #4294967295
   208c6:	4811      	ldr	r0, [pc, #68]	; (2090c <adc_nrfx_read+0x1f8>)
   208c8:	f005 f8b2 	bl	25a30 <z_impl_k_sem_take>
	return ctx->status;
   208cc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   208ce:	e752      	b.n	20776 <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   208d0:	480b      	ldr	r0, [pc, #44]	; (20900 <adc_nrfx_read+0x1ec>)
   208d2:	f7ff fe8d 	bl	205f0 <adc_context_start_sampling>
   208d6:	e7f2      	b.n	208be <adc_nrfx_read+0x1aa>
   208d8:	200081a0 	.word	0x200081a0
   208dc:	00037af9 	.word	0x00037af9
   208e0:	00032eb8 	.word	0x00032eb8
   208e4:	4000e000 	.word	0x4000e000
   208e8:	20008200 	.word	0x20008200
   208ec:	00037b17 	.word	0x00037b17
   208f0:	00037b56 	.word	0x00037b56
   208f4:	00037b31 	.word	0x00037b31
   208f8:	00037bab 	.word	0x00037bab
   208fc:	00037b88 	.word	0x00037b88
   20900:	20008160 	.word	0x20008160
   20904:	000f423f 	.word	0x000f423f
   20908:	000f4240 	.word	0x000f4240
   2090c:	200081b8 	.word	0x200081b8

00020910 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   20910:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20912:	2400      	movs	r4, #0
   20914:	4b0d      	ldr	r3, [pc, #52]	; (2094c <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   20916:	200e      	movs	r0, #14
   20918:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2091c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   20920:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   20924:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   20928:	2212      	movs	r2, #18
   2092a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   2092e:	f7f0 fbc7 	bl	110c0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20932:	4622      	mov	r2, r4
   20934:	2101      	movs	r1, #1
   20936:	200e      	movs	r0, #14
   20938:	f7f0 fbf2 	bl	11120 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   2093c:	4804      	ldr	r0, [pc, #16]	; (20950 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   2093e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   20940:	b913      	cbnz	r3, 20948 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   20942:	3040      	adds	r0, #64	; 0x40
   20944:	f005 f84e 	bl	259e4 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   20948:	2000      	movs	r0, #0
   2094a:	bd10      	pop	{r4, pc}
   2094c:	4000e000 	.word	0x4000e000
   20950:	20008160 	.word	0x20008160

00020954 <saadc_irq_handler>:
{
   20954:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20956:	4b2d      	ldr	r3, [pc, #180]	; (20a0c <saadc_irq_handler+0xb8>)
   20958:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   2095c:	2a00      	cmp	r2, #0
   2095e:	d048      	beq.n	209f2 <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20960:	2200      	movs	r2, #0
   20962:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   20966:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2096a:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   2096c:	4c28      	ldr	r4, [pc, #160]	; (20a10 <saadc_irq_handler+0xbc>)
   2096e:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   20970:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   20974:	6f63      	ldr	r3, [r4, #116]	; 0x74
   20976:	4625      	mov	r5, r4
   20978:	b3b3      	cbz	r3, 209e8 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   2097a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   2097e:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   20982:	b133      	cbz	r3, 20992 <saadc_irq_handler+0x3e>
			action = callback(dev,
   20984:	f104 0174 	add.w	r1, r4, #116	; 0x74
   20988:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   2098a:	2801      	cmp	r0, #1
   2098c:	d014      	beq.n	209b8 <saadc_irq_handler+0x64>
   2098e:	2802      	cmp	r0, #2
   20990:	d024      	beq.n	209dc <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   20992:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   20996:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   2099a:	429a      	cmp	r2, r3
   2099c:	d91e      	bls.n	209dc <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   2099e:	3301      	adds	r3, #1
   209a0:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   209a4:	4b19      	ldr	r3, [pc, #100]	; (20a0c <saadc_irq_handler+0xb8>)
   209a6:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   209aa:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   209ae:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   209b0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   209b4:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   209b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   209bc:	b923      	cbnz	r3, 209c8 <saadc_irq_handler+0x74>
}
   209be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   209c2:	4813      	ldr	r0, [pc, #76]	; (20a10 <saadc_irq_handler+0xbc>)
   209c4:	f7ff be14 	b.w	205f0 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   209c8:	e8d5 3fef 	ldaex	r3, [r5]
   209cc:	1e5a      	subs	r2, r3, #1
   209ce:	e8c5 2fe1 	stlex	r1, r2, [r5]
   209d2:	2900      	cmp	r1, #0
   209d4:	d1f8      	bne.n	209c8 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   209d6:	2b01      	cmp	r3, #1
   209d8:	dcf1      	bgt.n	209be <saadc_irq_handler+0x6a>
   209da:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   209dc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   209e0:	b113      	cbz	r3, 209e8 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   209e2:	480c      	ldr	r0, [pc, #48]	; (20a14 <saadc_irq_handler+0xc0>)
   209e4:	f010 fced 	bl	313c2 <z_impl_k_timer_stop>
   209e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   209ec:	480a      	ldr	r0, [pc, #40]	; (20a18 <saadc_irq_handler+0xc4>)
   209ee:	f004 bff9 	b.w	259e4 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   209f2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   209f6:	2900      	cmp	r1, #0
   209f8:	d0ef      	beq.n	209da <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   209fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   209fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20a02:	2201      	movs	r2, #1
   20a04:	609a      	str	r2, [r3, #8]
   20a06:	601a      	str	r2, [r3, #0]
   20a08:	605a      	str	r2, [r3, #4]
}
   20a0a:	e7e6      	b.n	209da <saadc_irq_handler+0x86>
   20a0c:	4000e000 	.word	0x4000e000
   20a10:	20008160 	.word	0x20008160
   20a14:	20008168 	.word	0x20008168
   20a18:	200081b8 	.word	0x200081b8

00020a1c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20a1c:	4b08      	ldr	r3, [pc, #32]	; (20a40 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20a1e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20a20:	1ac3      	subs	r3, r0, r3
{
   20a22:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20a24:	4907      	ldr	r1, [pc, #28]	; (20a44 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   20a26:	109b      	asrs	r3, r3, #2
{
   20a28:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20a2a:	4359      	muls	r1, r3
   20a2c:	2240      	movs	r2, #64	; 0x40
   20a2e:	4806      	ldr	r0, [pc, #24]	; (20a48 <onoff_stop+0x2c>)
   20a30:	f00e fcfa 	bl	2f428 <stop>
	notify(mgr, res);
   20a34:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20a36:	4601      	mov	r1, r0
	notify(mgr, res);
   20a38:	4620      	mov	r0, r4
}
   20a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   20a3e:	4718      	bx	r3
   20a40:	20030a80 	.word	0x20030a80
   20a44:	b6db6db7 	.word	0xb6db6db7
   20a48:	000327e8 	.word	0x000327e8

00020a4c <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20a4c:	2340      	movs	r3, #64	; 0x40
{
   20a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20a50:	4c0b      	ldr	r4, [pc, #44]	; (20a80 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20a52:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   20a54:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20a56:	460b      	mov	r3, r1
{
   20a58:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20a5a:	490a      	ldr	r1, [pc, #40]	; (20a84 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   20a5c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20a5e:	4361      	muls	r1, r4
{
   20a60:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20a62:	4a09      	ldr	r2, [pc, #36]	; (20a88 <onoff_start+0x3c>)
   20a64:	4809      	ldr	r0, [pc, #36]	; (20a8c <onoff_start+0x40>)
   20a66:	f00e fd0b 	bl	2f480 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   20a6a:	1e01      	subs	r1, r0, #0
   20a6c:	da05      	bge.n	20a7a <onoff_start+0x2e>
		notify(mgr, err);
   20a6e:	4630      	mov	r0, r6
   20a70:	462b      	mov	r3, r5
	}
}
   20a72:	b002      	add	sp, #8
   20a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   20a78:	4718      	bx	r3
}
   20a7a:	b002      	add	sp, #8
   20a7c:	bd70      	pop	{r4, r5, r6, pc}
   20a7e:	bf00      	nop
   20a80:	20030a80 	.word	0x20030a80
   20a84:	b6db6db7 	.word	0xb6db6db7
   20a88:	0002f4eb 	.word	0x0002f4eb
   20a8c:	000327e8 	.word	0x000327e8

00020a90 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   20a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20a94:	2200      	movs	r2, #0
   20a96:	2101      	movs	r1, #1
{
   20a98:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20a9a:	2005      	movs	r0, #5
   20a9c:	f7f0 fb40 	bl	11120 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   20aa0:	4811      	ldr	r0, [pc, #68]	; (20ae8 <clk_init+0x58>)
   20aa2:	f002 fd61 	bl	23568 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   20aa6:	4b11      	ldr	r3, [pc, #68]	; (20aec <clk_init+0x5c>)
   20aa8:	4298      	cmp	r0, r3
   20aaa:	d119      	bne.n	20ae0 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   20aac:	f002 fd6c 	bl	23588 <nrfx_clock_enable>
   20ab0:	2400      	movs	r4, #0
	return &data->mgr[type];
   20ab2:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20ab6:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20ab8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 20af0 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   20abc:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20abe:	4641      	mov	r1, r8
   20ac0:	fb09 5004 	mla	r0, r9, r4, r5
   20ac4:	f009 fd8b 	bl	2a5de <onoff_manager_init>
		if (err < 0) {
   20ac8:	2800      	cmp	r0, #0
   20aca:	db07      	blt.n	20adc <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20acc:	2301      	movs	r3, #1
   20ace:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   20ad2:	441c      	add	r4, r3
   20ad4:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20ad6:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   20ad8:	d1f0      	bne.n	20abc <clk_init+0x2c>
	}

	return 0;
   20ada:	2000      	movs	r0, #0
}
   20adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   20ae0:	f06f 0004 	mvn.w	r0, #4
   20ae4:	e7fa      	b.n	20adc <clk_init+0x4c>
   20ae6:	bf00      	nop
   20ae8:	00020b29 	.word	0x00020b29
   20aec:	0bad0000 	.word	0x0bad0000
   20af0:	00033e1c 	.word	0x00033e1c

00020af4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   20af4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   20af6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   20af8:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   20afa:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   20afc:	434b      	muls	r3, r1
   20afe:	4808      	ldr	r0, [pc, #32]	; (20b20 <clkstarted_handle.constprop.0+0x2c>)
   20b00:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   20b02:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
   20b04:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   20b08:	4418      	add	r0, r3
	sub_data->cb = NULL;
   20b0a:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   20b0c:	f00e fc79 	bl	2f402 <set_on_state>
	if (callback) {
   20b10:	b12d      	cbz	r5, 20b1e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20b12:	4632      	mov	r2, r6
   20b14:	462b      	mov	r3, r5
}
   20b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   20b1a:	4802      	ldr	r0, [pc, #8]	; (20b24 <clkstarted_handle.constprop.0+0x30>)
   20b1c:	4718      	bx	r3
}
   20b1e:	bd70      	pop	{r4, r5, r6, pc}
   20b20:	20030a80 	.word	0x20030a80
   20b24:	000327e8 	.word	0x000327e8

00020b28 <clock_event_handler>:
	switch (event) {
   20b28:	2805      	cmp	r0, #5
   20b2a:	d811      	bhi.n	20b50 <clock_event_handler+0x28>
   20b2c:	e8df f000 	tbb	[pc, r0]
   20b30:	10100e03 	.word	0x10100e03
   20b34:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   20b36:	4b07      	ldr	r3, [pc, #28]	; (20b54 <clock_event_handler+0x2c>)
   20b38:	6f98      	ldr	r0, [r3, #120]	; 0x78
   20b3a:	f010 0007 	ands.w	r0, r0, #7
   20b3e:	d107      	bne.n	20b50 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20b40:	f7ff bfd8 	b.w	20af4 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   20b44:	2002      	movs	r0, #2
   20b46:	e7fb      	b.n	20b40 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   20b48:	2003      	movs	r0, #3
   20b4a:	e7f9      	b.n	20b40 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20b4c:	2001      	movs	r0, #1
   20b4e:	e7f7      	b.n	20b40 <clock_event_handler+0x18>
}
   20b50:	4770      	bx	lr
   20b52:	bf00      	nop
   20b54:	20030a80 	.word	0x20030a80

00020b58 <generic_hfclk_start>:
{
   20b58:	b508      	push	{r3, lr}
	__asm__ volatile(
   20b5a:	f04f 0320 	mov.w	r3, #32
   20b5e:	f3ef 8111 	mrs	r1, BASEPRI
   20b62:	f383 8812 	msr	BASEPRI_MAX, r3
   20b66:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   20b6a:	4a11      	ldr	r2, [pc, #68]	; (20bb0 <generic_hfclk_start+0x58>)
   20b6c:	6813      	ldr	r3, [r2, #0]
   20b6e:	f043 0002 	orr.w	r0, r3, #2
   20b72:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   20b74:	07da      	lsls	r2, r3, #31
   20b76:	d408      	bmi.n	20b8a <generic_hfclk_start+0x32>
	__asm__ volatile(
   20b78:	f381 8811 	msr	BASEPRI, r1
   20b7c:	f3bf 8f6f 	isb	sy
}
   20b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   20b84:	2001      	movs	r0, #1
   20b86:	f002 bd13 	b.w	235b0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20b8a:	4b0a      	ldr	r3, [pc, #40]	; (20bb4 <generic_hfclk_start+0x5c>)
   20b8c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20b90:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   20b94:	07d3      	lsls	r3, r2, #31
   20b96:	d5ef      	bpl.n	20b78 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   20b98:	4807      	ldr	r0, [pc, #28]	; (20bb8 <generic_hfclk_start+0x60>)
   20b9a:	f00e fc32 	bl	2f402 <set_on_state>
   20b9e:	f381 8811 	msr	BASEPRI, r1
   20ba2:	f3bf 8f6f 	isb	sy
}
   20ba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   20baa:	2000      	movs	r0, #0
   20bac:	f7ff bfa2 	b.w	20af4 <clkstarted_handle.constprop.0>
   20bb0:	20030b20 	.word	0x20030b20
   20bb4:	40005000 	.word	0x40005000
   20bb8:	20030af8 	.word	0x20030af8

00020bbc <api_blocking_start>:
{
   20bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20bbe:	2200      	movs	r2, #0
   20bc0:	2301      	movs	r3, #1
   20bc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20bc6:	ab04      	add	r3, sp, #16
   20bc8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20bcc:	4a09      	ldr	r2, [pc, #36]	; (20bf4 <api_blocking_start+0x38>)
   20bce:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20bd0:	f8cd d000 	str.w	sp, [sp]
   20bd4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20bd8:	f00e fc80 	bl	2f4dc <api_start>
	if (err < 0) {
   20bdc:	2800      	cmp	r0, #0
   20bde:	db05      	blt.n	20bec <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   20be0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20be4:	2300      	movs	r3, #0
   20be6:	4668      	mov	r0, sp
   20be8:	f004 ff22 	bl	25a30 <z_impl_k_sem_take>
}
   20bec:	b007      	add	sp, #28
   20bee:	f85d fb04 	ldr.w	pc, [sp], #4
   20bf2:	bf00      	nop
   20bf4:	0002f521 	.word	0x0002f521

00020bf8 <generic_hfclk_stop>:
{
   20bf8:	b510      	push	{r4, lr}
	__asm__ volatile(
   20bfa:	f04f 0320 	mov.w	r3, #32
   20bfe:	f3ef 8411 	mrs	r4, BASEPRI
   20c02:	f383 8812 	msr	BASEPRI_MAX, r3
   20c06:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   20c0a:	4a07      	ldr	r2, [pc, #28]	; (20c28 <generic_hfclk_stop+0x30>)
   20c0c:	6813      	ldr	r3, [r2, #0]
   20c0e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   20c12:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   20c14:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   20c16:	d402      	bmi.n	20c1e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20c18:	2001      	movs	r0, #1
   20c1a:	f00f f98b 	bl	2ff34 <nrfx_clock_stop>
	__asm__ volatile(
   20c1e:	f384 8811 	msr	BASEPRI, r4
   20c22:	f3bf 8f6f 	isb	sy
}
   20c26:	bd10      	pop	{r4, pc}
   20c28:	20030b20 	.word	0x20030b20

00020c2c <z_nrf_clock_control_lf_on>:
{
   20c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20c30:	2201      	movs	r2, #1
   20c32:	4607      	mov	r7, r0
   20c34:	4935      	ldr	r1, [pc, #212]	; (20d0c <z_nrf_clock_control_lf_on+0xe0>)
   20c36:	e8d1 3fef 	ldaex	r3, [r1]
   20c3a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   20c3e:	2800      	cmp	r0, #0
   20c40:	d1f9      	bne.n	20c36 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   20c42:	b933      	cbnz	r3, 20c52 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   20c44:	4932      	ldr	r1, [pc, #200]	; (20d10 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   20c46:	4833      	ldr	r0, [pc, #204]	; (20d14 <z_nrf_clock_control_lf_on+0xe8>)
   20c48:	604b      	str	r3, [r1, #4]
   20c4a:	60cb      	str	r3, [r1, #12]
   20c4c:	608a      	str	r2, [r1, #8]
   20c4e:	f009 fcd9 	bl	2a604 <onoff_request>
	switch (start_mode) {
   20c52:	1e7b      	subs	r3, r7, #1
   20c54:	2b01      	cmp	r3, #1
   20c56:	d828      	bhi.n	20caa <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   20c58:	2f01      	cmp	r7, #1
   20c5a:	d106      	bne.n	20c6a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20c5c:	4b2e      	ldr	r3, [pc, #184]	; (20d18 <z_nrf_clock_control_lf_on+0xec>)
   20c5e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   20c62:	f003 0303 	and.w	r3, r3, #3
   20c66:	2b02      	cmp	r3, #2
   20c68:	d01f      	beq.n	20caa <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20c6a:	f010 f84d 	bl	30d08 <k_is_in_isr>
   20c6e:	4605      	mov	r5, r0
   20c70:	b9e8      	cbnz	r0, 20cae <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   20c72:	4b2a      	ldr	r3, [pc, #168]	; (20d1c <z_nrf_clock_control_lf_on+0xf0>)
   20c74:	781b      	ldrb	r3, [r3, #0]
   20c76:	b1d3      	cbz	r3, 20cae <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   20c78:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   20c7a:	4606      	mov	r6, r0
   20c7c:	4b26      	ldr	r3, [pc, #152]	; (20d18 <z_nrf_clock_control_lf_on+0xec>)
   20c7e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20c82:	4c25      	ldr	r4, [pc, #148]	; (20d18 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20c84:	f8df 8098 	ldr.w	r8, [pc, #152]	; 20d20 <z_nrf_clock_control_lf_on+0xf4>
   20c88:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20c8c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   20c90:	03d2      	lsls	r2, r2, #15
   20c92:	d516      	bpl.n	20cc2 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20c94:	f003 0303 	and.w	r3, r3, #3
   20c98:	2b02      	cmp	r3, #2
   20c9a:	d001      	beq.n	20ca0 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20c9c:	2f01      	cmp	r7, #1
   20c9e:	d110      	bne.n	20cc2 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   20ca0:	b375      	cbz	r5, 20d00 <z_nrf_clock_control_lf_on+0xd4>
   20ca2:	f386 8811 	msr	BASEPRI, r6
   20ca6:	f3bf 8f6f 	isb	sy
}
   20caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   20cae:	f04f 0320 	mov.w	r3, #32
   20cb2:	f3ef 8611 	mrs	r6, BASEPRI
   20cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   20cba:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20cbe:	2501      	movs	r5, #1
   20cc0:	e7df      	b.n	20c82 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   20cc2:	b1c5      	cbz	r5, 20cf6 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   20cc4:	4630      	mov	r0, r6
   20cc6:	f7f0 f9a1 	bl	1100c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20cca:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20cce:	b2db      	uxtb	r3, r3
   20cd0:	2b01      	cmp	r3, #1
   20cd2:	d1d9      	bne.n	20c88 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20cd4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20cd8:	2a00      	cmp	r2, #0
   20cda:	d0d5      	beq.n	20c88 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20cdc:	2200      	movs	r2, #0
   20cde:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   20ce2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   20ce6:	2202      	movs	r2, #2
   20ce8:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   20cec:	2220      	movs	r2, #32
   20cee:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20cf2:	60a3      	str	r3, [r4, #8]
}
   20cf4:	e7c8      	b.n	20c88 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   20cf6:	2100      	movs	r1, #0
   20cf8:	2021      	movs	r0, #33	; 0x21
   20cfa:	f005 fb97 	bl	2642c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20cfe:	e7e4      	b.n	20cca <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   20d00:	2202      	movs	r2, #2
   20d02:	4b05      	ldr	r3, [pc, #20]	; (20d18 <z_nrf_clock_control_lf_on+0xec>)
   20d04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20d08:	e7cf      	b.n	20caa <z_nrf_clock_control_lf_on+0x7e>
   20d0a:	bf00      	nop
   20d0c:	20030a7c 	.word	0x20030a7c
   20d10:	20030a6c 	.word	0x20030a6c
   20d14:	20030a9c 	.word	0x20030a9c
   20d18:	40005000 	.word	0x40005000
   20d1c:	20031e0d 	.word	0x20031e0d
   20d20:	e000e100 	.word	0xe000e100

00020d24 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   20d24:	b508      	push	{r3, lr}
   20d26:	4807      	ldr	r0, [pc, #28]	; (20d44 <uart_console_init+0x20>)
   20d28:	f00f ff1d 	bl	30b66 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   20d2c:	b138      	cbz	r0, 20d3e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   20d2e:	4806      	ldr	r0, [pc, #24]	; (20d48 <uart_console_init+0x24>)
   20d30:	f7f1 f804 	bl	11d3c <__stdout_hook_install>
	__printk_hook_install(console_out);
   20d34:	4804      	ldr	r0, [pc, #16]	; (20d48 <uart_console_init+0x24>)
   20d36:	f7ed fc43 	bl	e5c0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   20d3a:	2000      	movs	r0, #0
}
   20d3c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   20d3e:	f06f 0012 	mvn.w	r0, #18
   20d42:	e7fb      	b.n	20d3c <uart_console_init+0x18>
   20d44:	00032878 	.word	0x00032878
   20d48:	00020d4d 	.word	0x00020d4d

00020d4c <console_out>:
	if ('\n' == c) {
   20d4c:	280a      	cmp	r0, #10
{
   20d4e:	b538      	push	{r3, r4, r5, lr}
   20d50:	4604      	mov	r4, r0
   20d52:	4d07      	ldr	r5, [pc, #28]	; (20d70 <console_out+0x24>)
	if ('\n' == c) {
   20d54:	d104      	bne.n	20d60 <console_out+0x14>
	api->poll_out(dev, out_char);
   20d56:	68ab      	ldr	r3, [r5, #8]
   20d58:	210d      	movs	r1, #13
   20d5a:	4628      	mov	r0, r5
   20d5c:	69db      	ldr	r3, [r3, #28]
   20d5e:	4798      	blx	r3
   20d60:	68ab      	ldr	r3, [r5, #8]
   20d62:	4803      	ldr	r0, [pc, #12]	; (20d70 <console_out+0x24>)
   20d64:	69db      	ldr	r3, [r3, #28]
   20d66:	b2e1      	uxtb	r1, r4
   20d68:	4798      	blx	r3
}
   20d6a:	4620      	mov	r0, r4
   20d6c:	bd38      	pop	{r3, r4, r5, pc}
   20d6e:	bf00      	nop
   20d70:	00032878 	.word	0x00032878

00020d74 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   20d74:	b530      	push	{r4, r5, lr}
	return port->config;
   20d76:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20d78:	f001 041f 	and.w	r4, r1, #31
   20d7c:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   20d7e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   20d82:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20d84:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   20d88:	d105      	bne.n	20d96 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   20d8a:	4620      	mov	r0, r4
   20d8c:	f002 ff18 	bl	23bc0 <nrfx_gpiote_trigger_disable>

		return 0;
   20d90:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   20d92:	b005      	add	sp, #20
   20d94:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   20d96:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   20d98:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   20d9c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   20da0:	d114      	bne.n	20dcc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   20da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   20da6:	bf0c      	ite	eq
   20da8:	2304      	moveq	r3, #4
   20daa:	2305      	movne	r3, #5
   20dac:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20db0:	2300      	movs	r3, #0
   20db2:	4620      	mov	r0, r4
   20db4:	4619      	mov	r1, r3
   20db6:	aa02      	add	r2, sp, #8
   20db8:	f002 fd40 	bl	2383c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20dbc:	4b1f      	ldr	r3, [pc, #124]	; (20e3c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   20dbe:	4298      	cmp	r0, r3
   20dc0:	d138      	bne.n	20e34 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   20dc2:	2101      	movs	r1, #1
   20dc4:	4620      	mov	r0, r4
   20dc6:	f002 feb5 	bl	23b34 <nrfx_gpiote_trigger_enable>
	return 0;
   20dca:	e7e1      	b.n	20d90 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   20dcc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   20dd0:	d025      	beq.n	20e1e <gpio_nrfx_pin_interrupt_configure+0xaa>
   20dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   20dd6:	bf14      	ite	ne
   20dd8:	2301      	movne	r3, #1
   20dda:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   20ddc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   20de0:	6883      	ldr	r3, [r0, #8]
   20de2:	40cb      	lsrs	r3, r1
   20de4:	07d9      	lsls	r1, r3, #31
   20de6:	d4e3      	bmi.n	20db0 <gpio_nrfx_pin_interrupt_configure+0x3c>
   20de8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   20dec:	d1e0      	bne.n	20db0 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   20dee:	4a14      	ldr	r2, [pc, #80]	; (20e40 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   20df0:	4814      	ldr	r0, [pc, #80]	; (20e44 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   20df2:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
   20df4:	2901      	cmp	r1, #1
   20df6:	bf08      	it	eq
   20df8:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   20dfa:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20dfe:	3380      	adds	r3, #128	; 0x80
   20e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   20e04:	07db      	lsls	r3, r3, #31
   20e06:	d4d3      	bmi.n	20db0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20e08:	f10d 0507 	add.w	r5, sp, #7
   20e0c:	4629      	mov	r1, r5
   20e0e:	4620      	mov	r0, r4
   20e10:	f002 fe3c 	bl	23a8c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   20e14:	4b0c      	ldr	r3, [pc, #48]	; (20e48 <gpio_nrfx_pin_interrupt_configure+0xd4>)
   20e16:	4298      	cmp	r0, r3
   20e18:	d003      	beq.n	20e22 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
   20e1a:	9503      	str	r5, [sp, #12]
   20e1c:	e7c8      	b.n	20db0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   20e1e:	2303      	movs	r3, #3
   20e20:	e7dc      	b.n	20ddc <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   20e22:	4628      	mov	r0, r5
   20e24:	f002 fe80 	bl	23b28 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   20e28:	4b04      	ldr	r3, [pc, #16]	; (20e3c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   20e2a:	4298      	cmp	r0, r3
   20e2c:	d0f5      	beq.n	20e1a <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
   20e2e:	f06f 000b 	mvn.w	r0, #11
   20e32:	e7ae      	b.n	20d92 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   20e34:	f06f 0015 	mvn.w	r0, #21
   20e38:	e7ab      	b.n	20d92 <gpio_nrfx_pin_interrupt_configure+0x1e>
   20e3a:	bf00      	nop
   20e3c:	0bad0000 	.word	0x0bad0000
   20e40:	40842500 	.word	0x40842500
   20e44:	40842800 	.word	0x40842800
   20e48:	0bad0004 	.word	0x0bad0004

00020e4c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20e4c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   20e4e:	f002 fe5b 	bl	23b08 <nrfx_gpiote_is_init>
   20e52:	4604      	mov	r4, r0
   20e54:	b968      	cbnz	r0, 20e72 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   20e56:	f002 fe2f 	bl	23ab8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   20e5a:	4b08      	ldr	r3, [pc, #32]	; (20e7c <gpio_nrfx_init+0x30>)
   20e5c:	4298      	cmp	r0, r3
   20e5e:	d10a      	bne.n	20e76 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   20e60:	4621      	mov	r1, r4
   20e62:	4807      	ldr	r0, [pc, #28]	; (20e80 <gpio_nrfx_init+0x34>)
   20e64:	f002 fe0c 	bl	23a80 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20e68:	4622      	mov	r2, r4
   20e6a:	2105      	movs	r1, #5
   20e6c:	202f      	movs	r0, #47	; 0x2f
   20e6e:	f7f0 f957 	bl	11120 <z_arm_irq_priority_set>
		return 0;
   20e72:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   20e74:	bd10      	pop	{r4, pc}
		return -EIO;
   20e76:	f06f 0004 	mvn.w	r0, #4
   20e7a:	e7fb      	b.n	20e74 <gpio_nrfx_init+0x28>
   20e7c:	0bad0000 	.word	0x0bad0000
   20e80:	00020e85 	.word	0x00020e85

00020e84 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20e84:	0942      	lsrs	r2, r0, #5
{
   20e86:	4603      	mov	r3, r0
   20e88:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20e8a:	d002      	beq.n	20e92 <nrfx_gpio_handler+0xe>
   20e8c:	2a01      	cmp	r2, #1
   20e8e:	d017      	beq.n	20ec0 <nrfx_gpio_handler+0x3c>
}
   20e90:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20e92:	4e0d      	ldr	r6, [pc, #52]	; (20ec8 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   20e94:	6932      	ldr	r2, [r6, #16]
   20e96:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20e98:	2900      	cmp	r1, #0
   20e9a:	d0f9      	beq.n	20e90 <nrfx_gpio_handler+0xc>
   20e9c:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   20e9e:	f003 031f 	and.w	r3, r3, #31
   20ea2:	680c      	ldr	r4, [r1, #0]
   20ea4:	409d      	lsls	r5, r3
   20ea6:	2900      	cmp	r1, #0
   20ea8:	d0f2      	beq.n	20e90 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   20eaa:	688a      	ldr	r2, [r1, #8]
   20eac:	402a      	ands	r2, r5
   20eae:	d002      	beq.n	20eb6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   20eb0:	4630      	mov	r0, r6
   20eb2:	684b      	ldr	r3, [r1, #4]
   20eb4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20eb6:	b12c      	cbz	r4, 20ec4 <nrfx_gpio_handler+0x40>
   20eb8:	6823      	ldr	r3, [r4, #0]
   20eba:	4621      	mov	r1, r4
   20ebc:	461c      	mov	r4, r3
   20ebe:	e7f2      	b.n	20ea6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20ec0:	4e02      	ldr	r6, [pc, #8]	; (20ecc <nrfx_gpio_handler+0x48>)
   20ec2:	e7e7      	b.n	20e94 <nrfx_gpio_handler+0x10>
   20ec4:	4623      	mov	r3, r4
   20ec6:	e7f8      	b.n	20eba <nrfx_gpio_handler+0x36>
   20ec8:	00032818 	.word	0x00032818
   20ecc:	00032800 	.word	0x00032800

00020ed0 <gpio_nrfx_pin_configure>:
{
   20ed0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   20ed4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20ed6:	f001 051f 	and.w	r5, r1, #31
   20eda:	7b3b      	ldrb	r3, [r7, #12]
{
   20edc:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20ede:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   20ee2:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20ee4:	4628      	mov	r0, r5
   20ee6:	f10d 0103 	add.w	r1, sp, #3
   20eea:	f002 fdcf 	bl	23a8c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   20eee:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20ef2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   20ef4:	d10b      	bne.n	20f0e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   20ef6:	4628      	mov	r0, r5
   20ef8:	f002 fe8a 	bl	23c10 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   20efc:	4b3c      	ldr	r3, [pc, #240]	; (20ff0 <gpio_nrfx_pin_configure+0x120>)
   20efe:	4598      	cmp	r8, r3
   20f00:	d103      	bne.n	20f0a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   20f02:	f89d 0003 	ldrb.w	r0, [sp, #3]
   20f06:	f002 fe09 	bl	23b1c <nrfx_gpiote_channel_free>
		return 0;
   20f0a:	2000      	movs	r0, #0
   20f0c:	e00c      	b.n	20f28 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   20f0e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20f10:	4628      	mov	r0, r5
   20f12:	4619      	mov	r1, r3
   20f14:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   20f16:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20f1a:	f002 fc8f 	bl	2383c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20f1e:	4b34      	ldr	r3, [pc, #208]	; (20ff0 <gpio_nrfx_pin_configure+0x120>)
   20f20:	4298      	cmp	r0, r3
   20f22:	d004      	beq.n	20f2e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   20f24:	f06f 0015 	mvn.w	r0, #21
}
   20f28:	b004      	add	sp, #16
   20f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   20f2e:	4580      	cmp	r8, r0
   20f30:	d103      	bne.n	20f3a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   20f32:	f89d 0003 	ldrb.w	r0, [sp, #3]
   20f36:	f002 fdf1 	bl	23b1c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   20f3a:	03a3      	lsls	r3, r4, #14
   20f3c:	d549      	bpl.n	20fd2 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20f3e:	f240 3306 	movw	r3, #774	; 0x306
   20f42:	4023      	ands	r3, r4
   20f44:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   20f48:	d019      	beq.n	20f7e <gpio_nrfx_pin_configure+0xae>
   20f4a:	d80c      	bhi.n	20f66 <gpio_nrfx_pin_configure+0x96>
   20f4c:	2b06      	cmp	r3, #6
   20f4e:	d017      	beq.n	20f80 <gpio_nrfx_pin_configure+0xb0>
   20f50:	d804      	bhi.n	20f5c <gpio_nrfx_pin_configure+0x8c>
   20f52:	b1ab      	cbz	r3, 20f80 <gpio_nrfx_pin_configure+0xb0>
   20f54:	2b02      	cmp	r3, #2
   20f56:	d1e5      	bne.n	20f24 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   20f58:	2304      	movs	r3, #4
   20f5a:	e011      	b.n	20f80 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   20f60:	d1e0      	bne.n	20f24 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   20f62:	2301      	movs	r3, #1
   20f64:	e00c      	b.n	20f80 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20f66:	f240 2202 	movw	r2, #514	; 0x202
   20f6a:	4293      	cmp	r3, r2
   20f6c:	d026      	beq.n	20fbc <gpio_nrfx_pin_configure+0xec>
   20f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   20f72:	d025      	beq.n	20fc0 <gpio_nrfx_pin_configure+0xf0>
   20f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   20f78:	d1d4      	bne.n	20f24 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   20f7a:	2302      	movs	r3, #2
   20f7c:	e000      	b.n	20f80 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   20f7e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   20f80:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   20f84:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   20f88:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   20f8c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   20f8e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   20f92:	bf4c      	ite	mi
   20f94:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   20f96:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20f9a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   20f9c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20fa0:	d510      	bpl.n	20fc4 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   20fa2:	2301      	movs	r3, #1
   20fa4:	687a      	ldr	r2, [r7, #4]
   20fa6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   20fa8:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   20faa:	2200      	movs	r2, #0
   20fac:	4628      	mov	r0, r5
   20fae:	a901      	add	r1, sp, #4
   20fb0:	f002 fcf2 	bl	23998 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   20fb4:	4b0e      	ldr	r3, [pc, #56]	; (20ff0 <gpio_nrfx_pin_configure+0x120>)
   20fb6:	4298      	cmp	r0, r3
   20fb8:	d0a7      	beq.n	20f0a <gpio_nrfx_pin_configure+0x3a>
   20fba:	e7b3      	b.n	20f24 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   20fbc:	2305      	movs	r3, #5
   20fbe:	e7df      	b.n	20f80 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20fc0:	2303      	movs	r3, #3
   20fc2:	e7dd      	b.n	20f80 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   20fc4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   20fc6:	bf41      	itttt	mi
   20fc8:	2301      	movmi	r3, #1
   20fca:	687a      	ldrmi	r2, [r7, #4]
   20fcc:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   20fce:	60d3      	strmi	r3, [r2, #12]
}
   20fd0:	e7eb      	b.n	20faa <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   20fd2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20fd4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   20fd8:	bf4c      	ite	mi
   20fda:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   20fdc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20fe0:	461a      	mov	r2, r3
   20fe2:	4628      	mov	r0, r5
   20fe4:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   20fe6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20fea:	f002 fc27 	bl	2383c <nrfx_gpiote_input_configure>
   20fee:	e7e1      	b.n	20fb4 <gpio_nrfx_pin_configure+0xe4>
   20ff0:	0bad0000 	.word	0x0bad0000

00020ff4 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   20ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   20ff8:	6844      	ldr	r4, [r0, #4]
{
   20ffa:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   20ffc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   20ffe:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   21000:	2100      	movs	r1, #0
   21002:	4630      	mov	r0, r6
   21004:	aa07      	add	r2, sp, #28
   21006:	f00e fef8 	bl	2fdfa <pinctrl_lookup_state>
	if (ret < 0) {
   2100a:	2800      	cmp	r0, #0
   2100c:	db2a      	blt.n	21064 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2100e:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   21010:	6832      	ldr	r2, [r6, #0]
   21012:	7919      	ldrb	r1, [r3, #4]
   21014:	6818      	ldr	r0, [r3, #0]
   21016:	f001 ff33 	bl	22e80 <pinctrl_configure_pins>
	if (err < 0) {
   2101a:	2800      	cmp	r0, #0
   2101c:	db22      	blt.n	21064 <spi_nrfx_init+0x70>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2101e:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   21020:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21022:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   21024:	68ac      	ldr	r4, [r5, #8]
   21026:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   2102a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2102e:	429c      	cmp	r4, r3
   21030:	d304      	bcc.n	2103c <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   21032:	4628      	mov	r0, r5
   21034:	f00e fb22 	bl	2f67c <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   21038:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   2103a:	e013      	b.n	21064 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   2103c:	6820      	ldr	r0, [r4, #0]
   2103e:	f00f fd92 	bl	30b66 <z_device_is_ready>
   21042:	4603      	mov	r3, r0
   21044:	b988      	cbnz	r0, 2106a <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   21046:	7922      	ldrb	r2, [r4, #4]
   21048:	4919      	ldr	r1, [pc, #100]	; (210b0 <spi_nrfx_init+0xbc>)
   2104a:	9204      	str	r2, [sp, #16]
   2104c:	6822      	ldr	r2, [r4, #0]
   2104e:	6812      	ldr	r2, [r2, #0]
   21050:	9000      	str	r0, [sp, #0]
   21052:	9203      	str	r2, [sp, #12]
   21054:	4a17      	ldr	r2, [pc, #92]	; (210b4 <spi_nrfx_init+0xc0>)
   21056:	e9cd 0201 	strd	r0, r2, [sp, #4]
   2105a:	2201      	movs	r2, #1
   2105c:	f00e fac8 	bl	2f5f0 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   21060:	f06f 0012 	mvn.w	r0, #18
#endif
}
   21064:	b008      	add	sp, #32
   21066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   2106a:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   2106c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   2106e:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   21070:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   21074:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21076:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
   2107a:	bf54      	ite	pl
   2107c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   21080:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   21084:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21088:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2108c:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
   2108e:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21092:	bf4c      	ite	mi
   21094:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21098:	ea27 070e 	bicpl.w	r7, r7, lr
   2109c:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   210a0:	f8d8 3000 	ldr.w	r3, [r8]
   210a4:	4798      	blx	r3
		if (ret < 0) {
   210a6:	2800      	cmp	r0, #0
   210a8:	dbdc      	blt.n	21064 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   210aa:	3408      	adds	r4, #8
   210ac:	e7bb      	b.n	21026 <spi_nrfx_init+0x32>
   210ae:	bf00      	nop
   210b0:	00032fd8 	.word	0x00032fd8
   210b4:	00037c3a 	.word	0x00037c3a

000210b8 <transfer_next_chunk>:
{
   210b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   210ba:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   210bc:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   210be:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   210c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   210c2:	b98d      	cbnz	r5, 210e8 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   210c4:	2b00      	cmp	r3, #0
   210c6:	d137      	bne.n	21138 <transfer_next_chunk+0x80>
	int error = 0;
   210c8:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   210ca:	2200      	movs	r2, #0
   210cc:	4620      	mov	r0, r4
   210ce:	4611      	mov	r1, r2
   210d0:	f00e fab2 	bl	2f638 <_spi_context_cs_control>
	ctx->sync_status = status;
   210d4:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   210d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   210da:	f004 fc83 	bl	259e4 <z_impl_k_sem_give>
	dev_data->busy = false;
   210de:	2300      	movs	r3, #0
   210e0:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   210e4:	b004      	add	sp, #16
   210e6:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   210e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   210ea:	bb0b      	cbnz	r3, 21130 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   210ec:	bb39      	cbnz	r1, 2113e <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   210ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   210f2:	42aa      	cmp	r2, r5
   210f4:	bf28      	it	cs
   210f6:	462a      	movcs	r2, r5
   210f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   210fa:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   210fc:	9100      	str	r1, [sp, #0]
   210fe:	b11b      	cbz	r3, 21108 <transfer_next_chunk+0x50>
   21100:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   21102:	2b00      	cmp	r3, #0
   21104:	bf18      	it	ne
   21106:	4613      	movne	r3, r2
   21108:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   2110a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2110c:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   2110e:	b11b      	cbz	r3, 21118 <transfer_next_chunk+0x60>
   21110:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   21112:	2b00      	cmp	r3, #0
   21114:	bf18      	it	ne
   21116:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   21118:	2200      	movs	r2, #0
   2111a:	4669      	mov	r1, sp
   2111c:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2111e:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   21120:	f003 fbc8 	bl	248b4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   21124:	4b0d      	ldr	r3, [pc, #52]	; (2115c <transfer_next_chunk+0xa4>)
   21126:	4298      	cmp	r0, r3
   21128:	d0dc      	beq.n	210e4 <transfer_next_chunk+0x2c>
			error = -EIO;
   2112a:	f06f 0504 	mvn.w	r5, #4
   2112e:	e7cc      	b.n	210ca <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   21130:	429d      	cmp	r5, r3
   21132:	bf28      	it	cs
   21134:	461d      	movcs	r5, r3
   21136:	e7d9      	b.n	210ec <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   21138:	461d      	mov	r5, r3
   2113a:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   2113c:	e7d7      	b.n	210ee <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2113e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   21142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21146:	d0d2      	beq.n	210ee <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   21148:	2d08      	cmp	r5, #8
   2114a:	bf28      	it	cs
   2114c:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2114e:	6f20      	ldr	r0, [r4, #112]	; 0x70
   21150:	462a      	mov	r2, r5
   21152:	f010 fadc 	bl	3170e <memcpy>
			tx_buf = dev_data->buffer;
   21156:	6f21      	ldr	r1, [r4, #112]	; 0x70
   21158:	e7c9      	b.n	210ee <transfer_next_chunk+0x36>
   2115a:	bf00      	nop
   2115c:	0bad0000 	.word	0x0bad0000

00021160 <event_handler>:
{
   21160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   21162:	7803      	ldrb	r3, [r0, #0]
{
   21164:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   21166:	2b00      	cmp	r3, #0
   21168:	d154      	bne.n	21214 <event_handler+0xb4>
	if (!ctx->tx_len) {
   2116a:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   2116c:	6e89      	ldr	r1, [r1, #104]	; 0x68
   2116e:	b152      	cbz	r2, 21186 <event_handler+0x26>
	if (len > ctx->tx_len) {
   21170:	4291      	cmp	r1, r2
   21172:	d91d      	bls.n	211b0 <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   21174:	4a28      	ldr	r2, [pc, #160]	; (21218 <event_handler+0xb8>)
   21176:	4618      	mov	r0, r3
   21178:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2117c:	4927      	ldr	r1, [pc, #156]	; (2121c <event_handler+0xbc>)
   2117e:	2201      	movs	r2, #1
   21180:	9300      	str	r3, [sp, #0]
   21182:	f00e fa35 	bl	2f5f0 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   21186:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   21188:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2118a:	b15b      	cbz	r3, 211a4 <event_handler+0x44>
	if (len > ctx->rx_len) {
   2118c:	429a      	cmp	r2, r3
   2118e:	d928      	bls.n	211e2 <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   21190:	4b21      	ldr	r3, [pc, #132]	; (21218 <event_handler+0xb8>)
   21192:	2201      	movs	r2, #1
   21194:	9302      	str	r3, [sp, #8]
   21196:	2300      	movs	r3, #0
   21198:	4920      	ldr	r1, [pc, #128]	; (2121c <event_handler+0xbc>)
   2119a:	4618      	mov	r0, r3
   2119c:	e9cd 3300 	strd	r3, r3, [sp]
   211a0:	f00e fa26 	bl	2f5f0 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   211a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   211a6:	b004      	add	sp, #16
   211a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   211ac:	f7ff bf84 	b.w	210b8 <transfer_next_chunk>
	ctx->tx_len -= len;
   211b0:	1a52      	subs	r2, r2, r1
   211b2:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   211b4:	b97a      	cbnz	r2, 211d6 <event_handler+0x76>
		++ctx->current_tx;
   211b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   211b8:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   211bc:	3308      	adds	r3, #8
   211be:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   211c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   211c2:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   211c6:	3b01      	subs	r3, #1
   211c8:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   211ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
   211ce:	f00e f9fc 	bl	2f5ca <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   211d2:	6560      	str	r0, [r4, #84]	; 0x54
   211d4:	e7d7      	b.n	21186 <event_handler+0x26>
	} else if (ctx->tx_buf) {
   211d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   211d8:	2b00      	cmp	r3, #0
   211da:	d0d4      	beq.n	21186 <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   211dc:	440b      	add	r3, r1
   211de:	6563      	str	r3, [r4, #84]	; 0x54
   211e0:	e7d1      	b.n	21186 <event_handler+0x26>
	ctx->rx_len -= len;
   211e2:	1a9b      	subs	r3, r3, r2
   211e4:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   211e6:	b97b      	cbnz	r3, 21208 <event_handler+0xa8>
		++ctx->current_rx;
   211e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   211ea:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   211ee:	3308      	adds	r3, #8
   211f0:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   211f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   211f4:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   211f8:	3b01      	subs	r3, #1
   211fa:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   211fc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   21200:	f00e f9e3 	bl	2f5ca <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   21204:	65e0      	str	r0, [r4, #92]	; 0x5c
   21206:	e7cd      	b.n	211a4 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   21208:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2120a:	2b00      	cmp	r3, #0
   2120c:	d0ca      	beq.n	211a4 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   2120e:	4413      	add	r3, r2
   21210:	65e3      	str	r3, [r4, #92]	; 0x5c
   21212:	e7c7      	b.n	211a4 <event_handler+0x44>
}
   21214:	b004      	add	sp, #16
   21216:	bd10      	pop	{r4, pc}
   21218:	00037c5e 	.word	0x00037c5e
   2121c:	00032fd8 	.word	0x00032fd8

00021220 <spi_nrfx_transceive>:
{
   21220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21224:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   21226:	888b      	ldrh	r3, [r1, #4]
   21228:	460f      	mov	r7, r1
   2122a:	0499      	lsls	r1, r3, #18
   2122c:	4680      	mov	r8, r0
   2122e:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   21230:	6904      	ldr	r4, [r0, #16]
{
   21232:	b08f      	sub	sp, #60	; 0x3c
   21234:	d435      	bmi.n	212a2 <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   21236:	f04f 32ff 	mov.w	r2, #4294967295
   2123a:	f04f 33ff 	mov.w	r3, #4294967295
   2123e:	f104 0010 	add.w	r0, r4, #16
   21242:	f004 fbf5 	bl	25a30 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   21246:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   21248:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   2124c:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   21250:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   21252:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   21254:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   21258:	9306      	str	r3, [sp, #24]
   2125a:	b123      	cbz	r3, 21266 <spi_nrfx_transceive+0x46>
   2125c:	f8da 3000 	ldr.w	r3, [sl]
   21260:	429f      	cmp	r7, r3
   21262:	f000 80da 	beq.w	2141a <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   21266:	88be      	ldrh	r6, [r7, #4]
   21268:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   2126c:	d020      	beq.n	212b0 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   2126e:	4ba1      	ldr	r3, [pc, #644]	; (214f4 <spi_nrfx_transceive+0x2d4>)
   21270:	2201      	movs	r2, #1
   21272:	9302      	str	r3, [sp, #8]
   21274:	2300      	movs	r3, #0
   21276:	49a0      	ldr	r1, [pc, #640]	; (214f8 <spi_nrfx_transceive+0x2d8>)
   21278:	4618      	mov	r0, r3
   2127a:	e9cd 3300 	strd	r3, r3, [sp]
   2127e:	f00e f9b7 	bl	2f5f0 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   21282:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   21286:	6823      	ldr	r3, [r4, #0]
   21288:	889b      	ldrh	r3, [r3, #4]
   2128a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   2128e:	d104      	bne.n	2129a <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   21290:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   21292:	f104 0010 	add.w	r0, r4, #16
   21296:	f004 fba5 	bl	259e4 <z_impl_k_sem_give>
}
   2129a:	4628      	mov	r0, r5
   2129c:	b00f      	add	sp, #60	; 0x3c
   2129e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   212a2:	69a3      	ldr	r3, [r4, #24]
   212a4:	2b00      	cmp	r3, #0
   212a6:	d1c6      	bne.n	21236 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   212a8:	6863      	ldr	r3, [r4, #4]
   212aa:	429f      	cmp	r7, r3
   212ac:	d1c3      	bne.n	21236 <spi_nrfx_transceive+0x16>
   212ae:	e7cb      	b.n	21248 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   212b0:	f016 0201 	ands.w	r2, r6, #1
   212b4:	d00e      	beq.n	212d4 <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   212b6:	f8d8 2000 	ldr.w	r2, [r8]
   212ba:	4618      	mov	r0, r3
   212bc:	9203      	str	r2, [sp, #12]
   212be:	4a8f      	ldr	r2, [pc, #572]	; (214fc <spi_nrfx_transceive+0x2dc>)
   212c0:	498d      	ldr	r1, [pc, #564]	; (214f8 <spi_nrfx_transceive+0x2d8>)
   212c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   212c6:	9300      	str	r3, [sp, #0]
   212c8:	2201      	movs	r2, #1
   212ca:	f00e f991 	bl	2f5f0 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   212ce:	f06f 0515 	mvn.w	r5, #21
   212d2:	e7d8      	b.n	21286 <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   212d4:	f016 0308 	ands.w	r3, r6, #8
   212d8:	d00a      	beq.n	212f0 <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   212da:	4b89      	ldr	r3, [pc, #548]	; (21500 <spi_nrfx_transceive+0x2e0>)
   212dc:	9200      	str	r2, [sp, #0]
   212de:	e9cd 2301 	strd	r2, r3, [sp, #4]
   212e2:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   212e4:	2201      	movs	r2, #1
   212e6:	4618      	mov	r0, r3
   212e8:	4983      	ldr	r1, [pc, #524]	; (214f8 <spi_nrfx_transceive+0x2d8>)
   212ea:	f00e f981 	bl	2f5f0 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   212ee:	e7ee      	b.n	212ce <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   212f0:	f3c6 1245 	ubfx	r2, r6, #5, #6
   212f4:	2a08      	cmp	r2, #8
   212f6:	d004      	beq.n	21302 <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   212f8:	4a82      	ldr	r2, [pc, #520]	; (21504 <spi_nrfx_transceive+0x2e4>)
   212fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
   212fe:	9300      	str	r3, [sp, #0]
   21300:	e7f0      	b.n	212e4 <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   21302:	683a      	ldr	r2, [r7, #0]
   21304:	9207      	str	r2, [sp, #28]
   21306:	9907      	ldr	r1, [sp, #28]
   21308:	4a7f      	ldr	r2, [pc, #508]	; (21508 <spi_nrfx_transceive+0x2e8>)
   2130a:	4291      	cmp	r1, r2
   2130c:	d801      	bhi.n	21312 <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   2130e:	4a7f      	ldr	r2, [pc, #508]	; (2150c <spi_nrfx_transceive+0x2ec>)
   21310:	e7f3      	b.n	212fa <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   21312:	4b7f      	ldr	r3, [pc, #508]	; (21510 <spi_nrfx_transceive+0x2f0>)
   21314:	429d      	cmp	r5, r3
   21316:	d906      	bls.n	21326 <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   21318:	4a7e      	ldr	r2, [pc, #504]	; (21514 <spi_nrfx_transceive+0x2f4>)
   2131a:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   2131e:	f012 0f03 	tst.w	r2, #3
   21322:	bf18      	it	ne
   21324:	461d      	movne	r5, r3
	config = dev_config->def_config;
   21326:	9b05      	ldr	r3, [sp, #20]
   21328:	f10d 0c20 	add.w	ip, sp, #32
   2132c:	f103 0e0c 	add.w	lr, r3, #12
   21330:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   21334:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   21338:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   2133a:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   2133e:	42ab      	cmp	r3, r5
   21340:	bf28      	it	cs
   21342:	462b      	movcs	r3, r5
   21344:	461d      	mov	r5, r3
	if (frequency < 250000) {
   21346:	4b74      	ldr	r3, [pc, #464]	; (21518 <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   21348:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   2134c:	429d      	cmp	r5, r3
   2134e:	d946      	bls.n	213de <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   21350:	4b72      	ldr	r3, [pc, #456]	; (2151c <spi_nrfx_transceive+0x2fc>)
   21352:	429d      	cmp	r5, r3
   21354:	d946      	bls.n	213e4 <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   21356:	4b72      	ldr	r3, [pc, #456]	; (21520 <spi_nrfx_transceive+0x300>)
   21358:	429d      	cmp	r5, r3
   2135a:	d946      	bls.n	213ea <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   2135c:	4b71      	ldr	r3, [pc, #452]	; (21524 <spi_nrfx_transceive+0x304>)
   2135e:	429d      	cmp	r5, r3
   21360:	d946      	bls.n	213f0 <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   21362:	4b71      	ldr	r3, [pc, #452]	; (21528 <spi_nrfx_transceive+0x308>)
   21364:	429d      	cmp	r5, r3
   21366:	d946      	bls.n	213f6 <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   21368:	4b70      	ldr	r3, [pc, #448]	; (2152c <spi_nrfx_transceive+0x30c>)
   2136a:	429d      	cmp	r5, r3
   2136c:	d346      	bcc.n	213fc <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   2136e:	4b68      	ldr	r3, [pc, #416]	; (21510 <spi_nrfx_transceive+0x2f0>)
   21370:	429d      	cmp	r5, r3
   21372:	d346      	bcc.n	21402 <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   21374:	4b6e      	ldr	r3, [pc, #440]	; (21530 <spi_nrfx_transceive+0x310>)
   21376:	429d      	cmp	r5, r3
   21378:	bf2c      	ite	cs
   2137a:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   2137e:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   21382:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   21384:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   21386:	f006 0304 	and.w	r3, r6, #4
   2138a:	d53d      	bpl.n	21408 <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   2138c:	2b00      	cmp	r3, #0
   2138e:	bf14      	ite	ne
   21390:	2303      	movne	r3, #3
   21392:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   21394:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   21398:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   2139a:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   2139e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   213a2:	b12b      	cbz	r3, 213b0 <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   213a4:	9805      	ldr	r0, [sp, #20]
   213a6:	f003 fa33 	bl	24810 <nrfx_spim_uninit>
		dev_data->initialized = false;
   213aa:	2300      	movs	r3, #0
   213ac:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   213b0:	4653      	mov	r3, sl
   213b2:	4a60      	ldr	r2, [pc, #384]	; (21534 <spi_nrfx_transceive+0x314>)
   213b4:	9805      	ldr	r0, [sp, #20]
   213b6:	a908      	add	r1, sp, #32
   213b8:	f003 f90c 	bl	245d4 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   213bc:	4b5e      	ldr	r3, [pc, #376]	; (21538 <spi_nrfx_transceive+0x318>)
   213be:	4298      	cmp	r0, r3
   213c0:	d026      	beq.n	21410 <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   213c2:	4b5e      	ldr	r3, [pc, #376]	; (2153c <spi_nrfx_transceive+0x31c>)
   213c4:	9003      	str	r0, [sp, #12]
   213c6:	9302      	str	r3, [sp, #8]
   213c8:	2300      	movs	r3, #0
   213ca:	2201      	movs	r2, #1
   213cc:	4618      	mov	r0, r3
   213ce:	e9cd 3300 	strd	r3, r3, [sp]
   213d2:	4949      	ldr	r1, [pc, #292]	; (214f8 <spi_nrfx_transceive+0x2d8>)
   213d4:	f00e f90c 	bl	2f5f0 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   213d8:	f06f 0504 	mvn.w	r5, #4
   213dc:	e753      	b.n	21286 <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   213de:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   213e2:	e7ce      	b.n	21382 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   213e4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   213e8:	e7cb      	b.n	21382 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   213ea:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   213ee:	e7c8      	b.n	21382 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   213f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   213f4:	e7c5      	b.n	21382 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   213f6:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   213fa:	e7c2      	b.n	21382 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   213fc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   21400:	e7bf      	b.n	21382 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   21402:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   21406:	e7bc      	b.n	21382 <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   21408:	3b00      	subs	r3, #0
   2140a:	bf18      	it	ne
   2140c:	2301      	movne	r3, #1
   2140e:	e7c1      	b.n	21394 <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   21410:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   21412:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   21416:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   2141a:	2301      	movs	r3, #1
   2141c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   21420:	f1b9 0f00 	cmp.w	r9, #0
   21424:	d154      	bne.n	214d0 <spi_nrfx_transceive+0x2b0>
   21426:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2142a:	2300      	movs	r3, #0
   2142c:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   2142e:	f104 0258 	add.w	r2, r4, #88	; 0x58
   21432:	f104 0148 	add.w	r1, r4, #72	; 0x48
   21436:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2143a:	f00e f8c6 	bl	2f5ca <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   2143e:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   21440:	f1bb 0f00 	cmp.w	fp, #0
   21444:	d14c      	bne.n	214e0 <spi_nrfx_transceive+0x2c0>
   21446:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2144a:	2300      	movs	r3, #0
   2144c:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   2144e:	f104 0260 	add.w	r2, r4, #96	; 0x60
   21452:	f104 0150 	add.w	r1, r4, #80	; 0x50
   21456:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2145a:	f00e f8b6 	bl	2f5ca <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   2145e:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   21460:	2101      	movs	r1, #1
   21462:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   21464:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   21466:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   21468:	4620      	mov	r0, r4
   2146a:	f00e f8e5 	bl	2f638 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   2146e:	4640      	mov	r0, r8
   21470:	f7ff fe22 	bl	210b8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   21474:	6e25      	ldr	r5, [r4, #96]	; 0x60
   21476:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   21478:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2147a:	429d      	cmp	r5, r3
   2147c:	bf38      	it	cc
   2147e:	461d      	movcc	r5, r3
   21480:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   21484:	435d      	muls	r5, r3
			     ctx->config->frequency;
   21486:	f857 3b28 	ldr.w	r3, [r7], #40
   2148a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2148e:	681b      	ldr	r3, [r3, #0]
   21490:	4631      	mov	r1, r6
   21492:	fbb5 f5f3 	udiv	r5, r5, r3
   21496:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   2149a:	35c8      	adds	r5, #200	; 0xc8
   2149c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   214a0:	2300      	movs	r3, #0
   214a2:	fbe5 010c 	umlal	r0, r1, r5, ip
   214a6:	f7e7 fd4b 	bl	8f40 <__aeabi_uldivmod>
   214aa:	4602      	mov	r2, r0
   214ac:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   214ae:	4638      	mov	r0, r7
   214b0:	f004 fabe 	bl	25a30 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   214b4:	b1e0      	cbz	r0, 214f0 <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   214b6:	4b22      	ldr	r3, [pc, #136]	; (21540 <spi_nrfx_transceive+0x320>)
   214b8:	2201      	movs	r2, #1
   214ba:	e9cd 6301 	strd	r6, r3, [sp, #4]
   214be:	4630      	mov	r0, r6
   214c0:	4633      	mov	r3, r6
   214c2:	490d      	ldr	r1, [pc, #52]	; (214f8 <spi_nrfx_transceive+0x2d8>)
   214c4:	9600      	str	r6, [sp, #0]
   214c6:	f00e f893 	bl	2f5f0 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   214ca:	f06f 0573 	mvn.w	r5, #115	; 0x73
   214ce:	e6da      	b.n	21286 <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   214d0:	f8d9 3000 	ldr.w	r3, [r9]
   214d4:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   214d6:	2b00      	cmp	r3, #0
   214d8:	d0a7      	beq.n	2142a <spi_nrfx_transceive+0x20a>
   214da:	f8d9 3004 	ldr.w	r3, [r9, #4]
   214de:	e7a5      	b.n	2142c <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   214e0:	f8db 3000 	ldr.w	r3, [fp]
   214e4:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   214e6:	2b00      	cmp	r3, #0
   214e8:	d0af      	beq.n	2144a <spi_nrfx_transceive+0x22a>
   214ea:	f8db 3004 	ldr.w	r3, [fp, #4]
   214ee:	e7ad      	b.n	2144c <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   214f0:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   214f2:	e6c8      	b.n	21286 <spi_nrfx_transceive+0x66>
   214f4:	00037c7c 	.word	0x00037c7c
   214f8:	00032fd8 	.word	0x00032fd8
   214fc:	00037c96 	.word	0x00037c96
   21500:	00037cb8 	.word	0x00037cb8
   21504:	00037cd7 	.word	0x00037cd7
   21508:	0001e847 	.word	0x0001e847
   2150c:	00037d06 	.word	0x00037d06
   21510:	00f42400 	.word	0x00f42400
   21514:	40005000 	.word	0x40005000
   21518:	0003d08f 	.word	0x0003d08f
   2151c:	0007a11f 	.word	0x0007a11f
   21520:	000f423f 	.word	0x000f423f
   21524:	001e847f 	.word	0x001e847f
   21528:	003d08ff 	.word	0x003d08ff
   2152c:	007a1200 	.word	0x007a1200
   21530:	01e84800 	.word	0x01e84800
   21534:	00021161 	.word	0x00021161
   21538:	0bad0000 	.word	0x0bad0000
   2153c:	00037d37 	.word	0x00037d37
   21540:	00037d5e 	.word	0x00037d5e

00021544 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   21544:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   21548:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   2154c:	280a      	cmp	r0, #10
   2154e:	bf9a      	itte	ls
   21550:	4b02      	ldrls	r3, [pc, #8]	; (2155c <qspi_get_zephyr_ret_code+0x18>)
   21552:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   21556:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   2155a:	4770      	bx	lr
   2155c:	00034230 	.word	0x00034230

00021560 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   21560:	4b02      	ldr	r3, [pc, #8]	; (2156c <qspi_nor_pages_layout+0xc>)
   21562:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21564:	2301      	movs	r3, #1
   21566:	6013      	str	r3, [r2, #0]
}
   21568:	4770      	bx	lr
   2156a:	bf00      	nop
   2156c:	00033f80 	.word	0x00033f80

00021570 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   21570:	4800      	ldr	r0, [pc, #0]	; (21574 <qspi_flash_get_parameters+0x4>)
   21572:	4770      	bx	lr
   21574:	00033f14 	.word	0x00033f14

00021578 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   21578:	4b05      	ldr	r3, [pc, #20]	; (21590 <qspi_wait_for_completion.isra.0+0x18>)
   2157a:	4299      	cmp	r1, r3
   2157c:	d106      	bne.n	2158c <qspi_wait_for_completion.isra.0+0x14>
   2157e:	f04f 32ff 	mov.w	r2, #4294967295
   21582:	f04f 33ff 	mov.w	r3, #4294967295
   21586:	3030      	adds	r0, #48	; 0x30
   21588:	f004 ba52 	b.w	25a30 <z_impl_k_sem_take>
}
   2158c:	4770      	bx	lr
   2158e:	bf00      	nop
   21590:	0bad0000 	.word	0x0bad0000

00021594 <qspi_device_init>:
{
   21594:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   21596:	6905      	ldr	r5, [r0, #16]
{
   21598:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   2159a:	4e0f      	ldr	r6, [pc, #60]	; (215d8 <qspi_device_init+0x44>)
	qspi_lock(dev);
   2159c:	4628      	mov	r0, r5
   2159e:	f00e f8a6 	bl	2f6ee <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   215a2:	f105 0048 	add.w	r0, r5, #72	; 0x48
   215a6:	f00e f88b 	bl	2f6c0 <k_sem_give>
	if (!qspi_initialized) {
   215aa:	7833      	ldrb	r3, [r6, #0]
   215ac:	b98b      	cbnz	r3, 215d2 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   215ae:	462a      	mov	r2, r5
   215b0:	490a      	ldr	r1, [pc, #40]	; (215dc <qspi_device_init+0x48>)
   215b2:	6860      	ldr	r0, [r4, #4]
   215b4:	f002 fdde 	bl	24174 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   215b8:	f7ff ffc4 	bl	21544 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   215bc:	fab0 f380 	clz	r3, r0
   215c0:	4605      	mov	r5, r0
   215c2:	095b      	lsrs	r3, r3, #5
   215c4:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   215c6:	6920      	ldr	r0, [r4, #16]
   215c8:	3018      	adds	r0, #24
   215ca:	f00e f879 	bl	2f6c0 <k_sem_give>
}
   215ce:	4628      	mov	r0, r5
   215d0:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   215d2:	2500      	movs	r5, #0
   215d4:	e7f7      	b.n	215c6 <qspi_device_init+0x32>
   215d6:	bf00      	nop
   215d8:	200319e8 	.word	0x200319e8
   215dc:	0002f6c5 	.word	0x0002f6c5

000215e0 <qspi_send_cmd>:
{
   215e0:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   215e2:	684c      	ldr	r4, [r1, #4]
{
   215e4:	4605      	mov	r5, r0
   215e6:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   215e8:	b1ec      	cbz	r4, 21626 <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   215ea:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   215ee:	6888      	ldr	r0, [r1, #8]
   215f0:	b1d8      	cbz	r0, 2162a <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   215f2:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   215f6:	b1c8      	cbz	r0, 2162c <qspi_send_cmd+0x4c>
   215f8:	b1c3      	cbz	r3, 2162c <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   215fa:	4283      	cmp	r3, r0
   215fc:	d10f      	bne.n	2161e <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   215fe:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   21600:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   21602:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   21604:	d915      	bls.n	21632 <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   21606:	e9cd 1303 	strd	r1, r3, [sp, #12]
   2160a:	4b1a      	ldr	r3, [pc, #104]	; (21674 <qspi_send_cmd+0x94>)
   2160c:	2202      	movs	r2, #2
   2160e:	9302      	str	r3, [sp, #8]
   21610:	2300      	movs	r3, #0
   21612:	4919      	ldr	r1, [pc, #100]	; (21678 <qspi_send_cmd+0x98>)
   21614:	4618      	mov	r0, r3
   21616:	e9cd 3300 	strd	r3, r3, [sp]
   2161a:	f00e f859 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
}
   2161e:	f06f 0015 	mvn.w	r0, #21
   21622:	b008      	add	sp, #32
   21624:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   21626:	4623      	mov	r3, r4
   21628:	e7e1      	b.n	215ee <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   2162a:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   2162c:	3301      	adds	r3, #1
   2162e:	4403      	add	r3, r0
   21630:	e7e6      	b.n	21600 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   21632:	f88d 3019 	strb.w	r3, [sp, #25]
   21636:	f240 1301 	movw	r3, #257	; 0x101
   2163a:	f8ad 301a 	strh.w	r3, [sp, #26]
   2163e:	2300      	movs	r3, #0
	qspi_lock(dev);
   21640:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   21642:	f88d 301c 	strb.w	r3, [sp, #28]
   21646:	f88d 1018 	strb.w	r1, [sp, #24]
   2164a:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   2164e:	f00e f84e 	bl	2f6ee <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   21652:	4621      	mov	r1, r4
   21654:	4632      	mov	r2, r6
   21656:	a806      	add	r0, sp, #24
   21658:	f002 fe66 	bl	24328 <nrfx_qspi_cinstr_xfer>
   2165c:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   2165e:	6928      	ldr	r0, [r5, #16]
   21660:	3018      	adds	r0, #24
   21662:	f00e f82d 	bl	2f6c0 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   21666:	4620      	mov	r0, r4
}
   21668:	b008      	add	sp, #32
   2166a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   2166e:	f7ff bf69 	b.w	21544 <qspi_get_zephyr_ret_code>
   21672:	bf00      	nop
   21674:	00037d9b 	.word	0x00037d9b
   21678:	00032fc8 	.word	0x00032fc8

0002167c <qspi_device_uninit>:
{
   2167c:	b538      	push	{r3, r4, r5, lr}
   2167e:	4604      	mov	r4, r0
	qspi_lock(dev);
   21680:	6900      	ldr	r0, [r0, #16]
   21682:	f00e f834 	bl	2f6ee <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   21686:	6925      	ldr	r5, [r4, #16]
   21688:	2200      	movs	r2, #0
   2168a:	2300      	movs	r3, #0
   2168c:	f105 0048 	add.w	r0, r5, #72	; 0x48
   21690:	f004 f9ce 	bl	25a30 <z_impl_k_sem_take>
	if (last) {
   21694:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21696:	b94b      	cbnz	r3, 216ac <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   21698:	4d0a      	ldr	r5, [pc, #40]	; (216c4 <qspi_device_uninit+0x48>)
   2169a:	f002 fe85 	bl	243a8 <nrfx_qspi_mem_busy_check>
   2169e:	42a8      	cmp	r0, r5
   216a0:	d10a      	bne.n	216b8 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   216a2:	f002 fea3 	bl	243ec <nrfx_qspi_uninit>
		qspi_initialized = false;
   216a6:	2200      	movs	r2, #0
   216a8:	4b07      	ldr	r3, [pc, #28]	; (216c8 <qspi_device_uninit+0x4c>)
   216aa:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   216ac:	6920      	ldr	r0, [r4, #16]
}
   216ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   216b2:	3018      	adds	r0, #24
   216b4:	f00e b804 	b.w	2f6c0 <k_sem_give>
	return z_impl_k_sleep(timeout);
   216b8:	2100      	movs	r1, #0
   216ba:	f240 6067 	movw	r0, #1639	; 0x667
   216be:	f004 feb5 	bl	2642c <z_impl_k_sleep>
   216c2:	e7ea      	b.n	2169a <qspi_device_uninit+0x1e>
   216c4:	0bad0000 	.word	0x0bad0000
   216c8:	200319e8 	.word	0x200319e8

000216cc <qspi_nor_read>:
{
   216cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216d0:	4681      	mov	r9, r0
   216d2:	460e      	mov	r6, r1
   216d4:	461c      	mov	r4, r3
	if (!dest) {
   216d6:	4690      	mov	r8, r2
{
   216d8:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   216da:	b1aa      	cbz	r2, 21708 <qspi_nor_read+0x3c>
	if (!size) {
   216dc:	2b00      	cmp	r3, #0
   216de:	f000 809f 	beq.w	21820 <qspi_nor_read+0x154>
	if (addr < 0 ||
   216e2:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   216e4:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   216e6:	db03      	blt.n	216f0 <qspi_nor_read+0x24>
   216e8:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   216ea:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   216ec:	4293      	cmp	r3, r2
   216ee:	d911      	bls.n	21714 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   216f0:	4b4c      	ldr	r3, [pc, #304]	; (21824 <qspi_nor_read+0x158>)
   216f2:	2201      	movs	r2, #1
   216f4:	9302      	str	r3, [sp, #8]
   216f6:	2300      	movs	r3, #0
   216f8:	e9cd 6403 	strd	r6, r4, [sp, #12]
   216fc:	4618      	mov	r0, r3
   216fe:	e9cd 3300 	strd	r3, r3, [sp]
   21702:	4949      	ldr	r1, [pc, #292]	; (21828 <qspi_nor_read+0x15c>)
   21704:	f00d ffe4 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21708:	f06f 0515 	mvn.w	r5, #21
}
   2170c:	4628      	mov	r0, r5
   2170e:	b00b      	add	sp, #44	; 0x2c
   21710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   21714:	f7ff ff3e 	bl	21594 <qspi_device_init>
	if (rc != 0) {
   21718:	4605      	mov	r5, r0
   2171a:	2800      	cmp	r0, #0
   2171c:	d17c      	bne.n	21818 <qspi_nor_read+0x14c>
	qspi_lock(dev);
   2171e:	4275      	negs	r5, r6
   21720:	f005 0503 	and.w	r5, r5, #3
   21724:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21728:	f00d ffe1 	bl	2f6ee <qspi_lock.isra.0>
	if (flash_prefix > size) {
   2172c:	42a5      	cmp	r5, r4
   2172e:	bf28      	it	cs
   21730:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   21732:	f1d8 0300 	rsbs	r3, r8, #0
   21736:	f003 0303 	and.w	r3, r3, #3
   2173a:	f008 0703 	and.w	r7, r8, #3
   2173e:	bf58      	it	pl
   21740:	425f      	negpl	r7, r3
   21742:	427f      	negs	r7, r7
   21744:	f007 0703 	and.w	r7, r7, #3
   21748:	42a7      	cmp	r7, r4
   2174a:	bf28      	it	cs
   2174c:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   2174e:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   21750:	1be4      	subs	r4, r4, r7
   21752:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   21756:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   2175a:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   2175c:	bfc8      	it	gt
   2175e:	46a2      	movgt	sl, r4
   21760:	f003 0b03 	and.w	fp, r3, #3
   21764:	bfc8      	it	gt
   21766:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   2176a:	f1ba 0f00 	cmp.w	sl, #0
   2176e:	d019      	beq.n	217a4 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   21770:	eb08 0307 	add.w	r3, r8, r7
   21774:	1972      	adds	r2, r6, r5
   21776:	4651      	mov	r1, sl
   21778:	4618      	mov	r0, r3
   2177a:	9307      	str	r3, [sp, #28]
   2177c:	f00e fc43 	bl	30006 <nrfx_qspi_read>
   21780:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   21782:	4601      	mov	r1, r0
   21784:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21788:	f7ff fef6 	bl	21578 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   2178c:	4a27      	ldr	r2, [pc, #156]	; (2182c <qspi_nor_read+0x160>)
   2178e:	4294      	cmp	r4, r2
   21790:	d139      	bne.n	21806 <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   21792:	42bd      	cmp	r5, r7
   21794:	d006      	beq.n	217a4 <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   21796:	9b07      	ldr	r3, [sp, #28]
   21798:	4652      	mov	r2, sl
   2179a:	4619      	mov	r1, r3
   2179c:	eb08 0005 	add.w	r0, r8, r5
   217a0:	f00f ffd5 	bl	3174e <memmove>
	if (flash_prefix != 0) {
   217a4:	b1ad      	cbz	r5, 217d2 <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   217a6:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   217aa:	2104      	movs	r1, #4
   217ac:	1bf2      	subs	r2, r6, r7
   217ae:	a808      	add	r0, sp, #32
   217b0:	f00e fc29 	bl	30006 <nrfx_qspi_read>
   217b4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   217b6:	4601      	mov	r1, r0
   217b8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   217bc:	f7ff fedc 	bl	21578 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   217c0:	4b1a      	ldr	r3, [pc, #104]	; (2182c <qspi_nor_read+0x160>)
   217c2:	429c      	cmp	r4, r3
   217c4:	d11f      	bne.n	21806 <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   217c6:	ab08      	add	r3, sp, #32
   217c8:	462a      	mov	r2, r5
   217ca:	4640      	mov	r0, r8
   217cc:	19d9      	adds	r1, r3, r7
   217ce:	f00f ff9e 	bl	3170e <memcpy>
	if (flash_suffix != 0) {
   217d2:	f1bb 0f00 	cmp.w	fp, #0
   217d6:	d015      	beq.n	21804 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   217d8:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   217da:	2108      	movs	r1, #8
   217dc:	4452      	add	r2, sl
   217de:	a808      	add	r0, sp, #32
   217e0:	f00e fc11 	bl	30006 <nrfx_qspi_read>
   217e4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   217e6:	4601      	mov	r1, r0
   217e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   217ec:	f7ff fec4 	bl	21578 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   217f0:	4b0e      	ldr	r3, [pc, #56]	; (2182c <qspi_nor_read+0x160>)
   217f2:	429c      	cmp	r4, r3
   217f4:	d107      	bne.n	21806 <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   217f6:	eb0a 0005 	add.w	r0, sl, r5
   217fa:	465a      	mov	r2, fp
   217fc:	a908      	add	r1, sp, #32
   217fe:	4440      	add	r0, r8
   21800:	f00f ff85 	bl	3170e <memcpy>
	return res;
   21804:	4c09      	ldr	r4, [pc, #36]	; (2182c <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   21806:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2180a:	3018      	adds	r0, #24
   2180c:	f00d ff58 	bl	2f6c0 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   21810:	4620      	mov	r0, r4
   21812:	f7ff fe97 	bl	21544 <qspi_get_zephyr_ret_code>
   21816:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   21818:	4648      	mov	r0, r9
   2181a:	f7ff ff2f 	bl	2167c <qspi_device_uninit>
	return rc;
   2181e:	e775      	b.n	2170c <qspi_nor_read+0x40>
		return 0;
   21820:	461d      	mov	r5, r3
   21822:	e773      	b.n	2170c <qspi_nor_read+0x40>
   21824:	00037dbe 	.word	0x00037dbe
   21828:	00032fc8 	.word	0x00032fc8
   2182c:	0bad0000 	.word	0x0bad0000

00021830 <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   21830:	2202      	movs	r2, #2
{
   21832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21836:	4b64      	ldr	r3, [pc, #400]	; (219c8 <qspi_nor_init+0x198>)
   21838:	b090      	sub	sp, #64	; 0x40
   2183a:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2183e:	6843      	ldr	r3, [r0, #4]
{
   21840:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   21842:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   21844:	2100      	movs	r1, #0
   21846:	4630      	mov	r0, r6
   21848:	aa0d      	add	r2, sp, #52	; 0x34
   2184a:	f00e fad6 	bl	2fdfa <pinctrl_lookup_state>
	if (ret < 0) {
   2184e:	1e04      	subs	r4, r0, #0
   21850:	db35      	blt.n	218be <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   21852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   21854:	6832      	ldr	r2, [r6, #0]
   21856:	7919      	ldrb	r1, [r3, #4]
   21858:	6818      	ldr	r0, [r3, #0]
   2185a:	f001 fb11 	bl	22e80 <pinctrl_configure_pins>
	if (ret < 0) {
   2185e:	1e04      	subs	r4, r0, #0
   21860:	db2d      	blt.n	218be <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   21862:	2200      	movs	r2, #0
   21864:	2101      	movs	r1, #1
   21866:	202b      	movs	r0, #43	; 0x2b
   21868:	f7ef fc5a 	bl	11120 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   2186c:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2186e:	692a      	ldr	r2, [r5, #16]
   21870:	4630      	mov	r0, r6
   21872:	4956      	ldr	r1, [pc, #344]	; (219cc <qspi_nor_init+0x19c>)
   21874:	f002 fc7e 	bl	24174 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   21878:	f7ff fe64 	bl	21544 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   2187c:	1e04      	subs	r4, r0, #0
   2187e:	db1e      	blt.n	218be <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   21880:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   21882:	3b02      	subs	r3, #2
   21884:	2b01      	cmp	r3, #1
   21886:	d91e      	bls.n	218c6 <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   21888:	f896 800a 	ldrb.w	r8, [r6, #10]
   2188c:	f1a8 0803 	sub.w	r8, r8, #3
   21890:	f1b8 0f01 	cmp.w	r8, #1
   21894:	bf8c      	ite	hi
   21896:	f04f 0800 	movhi.w	r8, #0
   2189a:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   2189e:	4628      	mov	r0, r5
   218a0:	f00d ff47 	bl	2f732 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   218a4:	1e04      	subs	r4, r0, #0
   218a6:	da11      	bge.n	218cc <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   218a8:	4b49      	ldr	r3, [pc, #292]	; (219d0 <qspi_nor_init+0x1a0>)
   218aa:	2201      	movs	r2, #1
   218ac:	9302      	str	r3, [sp, #8]
   218ae:	2300      	movs	r3, #0
   218b0:	4948      	ldr	r1, [pc, #288]	; (219d4 <qspi_nor_init+0x1a4>)
   218b2:	4618      	mov	r0, r3
   218b4:	e9cd 3300 	strd	r3, r3, [sp]
   218b8:	9403      	str	r4, [sp, #12]
   218ba:	f00d ff09 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
}
   218be:	4620      	mov	r0, r4
   218c0:	b010      	add	sp, #64	; 0x40
   218c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   218c6:	f04f 0801 	mov.w	r8, #1
   218ca:	e7e8      	b.n	2189e <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   218cc:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   218ce:	f3c4 1480 	ubfx	r4, r4, #6, #1
   218d2:	45a0      	cmp	r8, r4
   218d4:	ae0a      	add	r6, sp, #40	; 0x28
   218d6:	af0b      	add	r7, sp, #44	; 0x2c
   218d8:	d02f      	beq.n	2193a <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   218da:	2300      	movs	r3, #0
			sr ^= qe_mask;
   218dc:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   218e0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   218e4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   218e8:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   218ea:	4628      	mov	r0, r5
   218ec:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   218ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   218f2:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   218f4:	930f      	str	r3, [sp, #60]	; 0x3c
   218f6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   218fa:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   218fc:	f7ff fe70 	bl	215e0 <qspi_send_cmd>
	if (ret == 0) {
   21900:	1e04      	subs	r4, r0, #0
   21902:	d013      	beq.n	2192c <qspi_nor_init+0xfc>
		if (ret < 0) {
   21904:	dadb      	bge.n	218be <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   21906:	4a34      	ldr	r2, [pc, #208]	; (219d8 <qspi_nor_init+0x1a8>)
   21908:	4b34      	ldr	r3, [pc, #208]	; (219dc <qspi_nor_init+0x1ac>)
   2190a:	4932      	ldr	r1, [pc, #200]	; (219d4 <qspi_nor_init+0x1a4>)
   2190c:	f1b8 0f00 	cmp.w	r8, #0
   21910:	bf18      	it	ne
   21912:	4613      	movne	r3, r2
   21914:	e9cd 3403 	strd	r3, r4, [sp, #12]
   21918:	4b31      	ldr	r3, [pc, #196]	; (219e0 <qspi_nor_init+0x1b0>)
   2191a:	2201      	movs	r2, #1
   2191c:	9302      	str	r3, [sp, #8]
   2191e:	2300      	movs	r3, #0
   21920:	4618      	mov	r0, r3
   21922:	e9cd 3300 	strd	r3, r3, [sp]
   21926:	f00d fed3 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   2192a:	e7c8      	b.n	218be <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   2192c:	4628      	mov	r0, r5
   2192e:	f00d ff00 	bl	2f732 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   21932:	1e04      	subs	r4, r0, #0
   21934:	dbe7      	blt.n	21906 <qspi_nor_init+0xd6>
   21936:	07e3      	lsls	r3, r4, #31
   21938:	d4f8      	bmi.n	2192c <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   2193a:	4628      	mov	r0, r5
   2193c:	f7ff fe9e 	bl	2167c <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   21940:	2403      	movs	r4, #3
   21942:	2300      	movs	r3, #0
   21944:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   21948:	930e      	str	r3, [sp, #56]	; 0x38
   2194a:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   2194c:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   2194e:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   21950:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   21954:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   21956:	f7ff fe1d 	bl	21594 <qspi_device_init>
	if (ret == 0) {
   2195a:	4602      	mov	r2, r0
   2195c:	b128      	cbz	r0, 2196a <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   2195e:	4628      	mov	r0, r5
   21960:	f7ff fe8c 	bl	2167c <qspi_device_uninit>
		return -ENODEV;
   21964:	f06f 0412 	mvn.w	r4, #18
   21968:	e7a9      	b.n	218be <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   2196a:	4628      	mov	r0, r5
   2196c:	a90d      	add	r1, sp, #52	; 0x34
   2196e:	f7ff fe37 	bl	215e0 <qspi_send_cmd>
   21972:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   21974:	4628      	mov	r0, r5
   21976:	f7ff fe81 	bl	2167c <qspi_device_uninit>
	if (ret != 0) {
   2197a:	2f00      	cmp	r7, #0
   2197c:	d1f2      	bne.n	21964 <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   2197e:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   21980:	4622      	mov	r2, r4
   21982:	4631      	mov	r1, r6
   21984:	f105 001c 	add.w	r0, r5, #28
   21988:	f00f feb1 	bl	316ee <memcmp>
   2198c:	4604      	mov	r4, r0
   2198e:	2800      	cmp	r0, #0
   21990:	d095      	beq.n	218be <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   21992:	7fab      	ldrb	r3, [r5, #30]
   21994:	2201      	movs	r2, #1
   21996:	9308      	str	r3, [sp, #32]
   21998:	7f6b      	ldrb	r3, [r5, #29]
   2199a:	4638      	mov	r0, r7
   2199c:	9307      	str	r3, [sp, #28]
   2199e:	7f2b      	ldrb	r3, [r5, #28]
   219a0:	490c      	ldr	r1, [pc, #48]	; (219d4 <qspi_nor_init+0x1a4>)
   219a2:	9306      	str	r3, [sp, #24]
   219a4:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   219a8:	9700      	str	r7, [sp, #0]
   219aa:	9305      	str	r3, [sp, #20]
   219ac:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   219b0:	9304      	str	r3, [sp, #16]
   219b2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   219b6:	9303      	str	r3, [sp, #12]
   219b8:	4b0a      	ldr	r3, [pc, #40]	; (219e4 <qspi_nor_init+0x1b4>)
   219ba:	e9cd 7301 	strd	r7, r3, [sp, #4]
   219be:	463b      	mov	r3, r7
   219c0:	f00d fe86 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   219c4:	e7ce      	b.n	21964 <qspi_nor_init+0x134>
   219c6:	bf00      	nop
   219c8:	40005000 	.word	0x40005000
   219cc:	0002f6c5 	.word	0x0002f6c5
   219d0:	00037e0d 	.word	0x00037e0d
   219d4:	00032fc8 	.word	0x00032fc8
   219d8:	0003704e 	.word	0x0003704e
   219dc:	00037e07 	.word	0x00037e07
   219e0:	00037e1d 	.word	0x00037e1d
   219e4:	00037e2e 	.word	0x00037e2e

000219e8 <qspi_nor_erase>:
{
   219e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   219ec:	2900      	cmp	r1, #0
{
   219ee:	4606      	mov	r6, r0
   219f0:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   219f2:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   219f6:	b087      	sub	sp, #28
	if (addr < 0 ||
   219f8:	db05      	blt.n	21a06 <qspi_nor_erase+0x1e>
   219fa:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   219fe:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   21a00:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   21a02:	4688      	mov	r8, r1
	if (addr < 0 ||
   21a04:	d911      	bls.n	21a2a <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   21a06:	4b46      	ldr	r3, [pc, #280]	; (21b20 <qspi_nor_erase+0x138>)
   21a08:	e9cd 1503 	strd	r1, r5, [sp, #12]
   21a0c:	9302      	str	r3, [sp, #8]
   21a0e:	2300      	movs	r3, #0
   21a10:	2201      	movs	r2, #1
   21a12:	4618      	mov	r0, r3
   21a14:	e9cd 3300 	strd	r3, r3, [sp]
   21a18:	4942      	ldr	r1, [pc, #264]	; (21b24 <qspi_nor_erase+0x13c>)
   21a1a:	f00d fe59 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   21a1e:	f06f 0415 	mvn.w	r4, #21
}
   21a22:	4620      	mov	r0, r4
   21a24:	b007      	add	sp, #28
   21a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   21a2a:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   21a2e:	2d00      	cmp	r5, #0
   21a30:	d0f5      	beq.n	21a1e <qspi_nor_erase+0x36>
   21a32:	f3c5 030b 	ubfx	r3, r5, #0, #12
   21a36:	4313      	orrs	r3, r2
   21a38:	d1f1      	bne.n	21a1e <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   21a3a:	f7ff fdab 	bl	21594 <qspi_device_init>
	if (rv != 0) {
   21a3e:	4604      	mov	r4, r0
   21a40:	bb68      	cbnz	r0, 21a9e <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   21a42:	6930      	ldr	r0, [r6, #16]
   21a44:	f00d fe5a 	bl	2f6fc <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   21a48:	4621      	mov	r1, r4
   21a4a:	4630      	mov	r0, r6
   21a4c:	f00d fe5c 	bl	2f708 <qspi_nor_write_protection_set>
	if (rv != 0) {
   21a50:	4604      	mov	r4, r0
   21a52:	bb08      	cbnz	r0, 21a98 <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   21a54:	6930      	ldr	r0, [r6, #16]
   21a56:	f00d fe4a 	bl	2f6ee <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   21a5a:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 21b28 <qspi_nor_erase+0x140>
		if (size == params->size) {
   21a5e:	f8da 3018 	ldr.w	r3, [sl, #24]
   21a62:	42ab      	cmp	r3, r5
   21a64:	d11f      	bne.n	21aa6 <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   21a66:	f00e fad1 	bl	3000c <nrfx_qspi_chip_erase>
   21a6a:	46a9      	mov	r9, r5
   21a6c:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   21a6e:	4639      	mov	r1, r7
   21a70:	6930      	ldr	r0, [r6, #16]
   21a72:	f7ff fd81 	bl	21578 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   21a76:	455f      	cmp	r7, fp
   21a78:	d141      	bne.n	21afe <qspi_nor_erase+0x116>
	while (size > 0) {
   21a7a:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   21a7e:	44c8      	add	r8, r9
	while (size > 0) {
   21a80:	d1ed      	bne.n	21a5e <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   21a82:	6930      	ldr	r0, [r6, #16]
   21a84:	3018      	adds	r0, #24
   21a86:	f00d fe1b 	bl	2f6c0 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   21a8a:	2101      	movs	r1, #1
   21a8c:	4630      	mov	r0, r6
   21a8e:	f00d fe3b 	bl	2f708 <qspi_nor_write_protection_set>
   21a92:	2c00      	cmp	r4, #0
   21a94:	bf08      	it	eq
   21a96:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   21a98:	6930      	ldr	r0, [r6, #16]
   21a9a:	f00d fe11 	bl	2f6c0 <k_sem_give>
	qspi_device_uninit(dev);
   21a9e:	4630      	mov	r0, r6
   21aa0:	f7ff fdec 	bl	2167c <qspi_device_uninit>
	return rv;
   21aa4:	e7bd      	b.n	21a22 <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21aa6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   21aaa:	d30a      	bcc.n	21ac2 <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   21aac:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21ab0:	b953      	cbnz	r3, 21ac8 <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21ab2:	4641      	mov	r1, r8
   21ab4:	2001      	movs	r0, #1
   21ab6:	f002 fce7 	bl	24488 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   21aba:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21abe:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   21ac0:	e7d5      	b.n	21a6e <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   21ac2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   21ac6:	d309      	bcc.n	21adc <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   21ac8:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   21acc:	b930      	cbnz	r0, 21adc <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   21ace:	4641      	mov	r1, r8
   21ad0:	f002 fcda 	bl	24488 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   21ad4:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   21ad8:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   21ada:	e7c8      	b.n	21a6e <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   21adc:	4b13      	ldr	r3, [pc, #76]	; (21b2c <qspi_nor_erase+0x144>)
   21ade:	2201      	movs	r2, #1
   21ae0:	9302      	str	r3, [sp, #8]
   21ae2:	2300      	movs	r3, #0
   21ae4:	490f      	ldr	r1, [pc, #60]	; (21b24 <qspi_nor_erase+0x13c>)
   21ae6:	4618      	mov	r0, r3
   21ae8:	e9cd 3300 	strd	r3, r3, [sp]
   21aec:	e9cd 8503 	strd	r8, r5, [sp, #12]
   21af0:	f00d fdee 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   21af4:	490e      	ldr	r1, [pc, #56]	; (21b30 <qspi_nor_erase+0x148>)
   21af6:	6930      	ldr	r0, [r6, #16]
   21af8:	f7ff fd3e 	bl	21578 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   21afc:	4f0c      	ldr	r7, [pc, #48]	; (21b30 <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   21afe:	4b0d      	ldr	r3, [pc, #52]	; (21b34 <qspi_nor_erase+0x14c>)
   21b00:	2201      	movs	r2, #1
   21b02:	9302      	str	r3, [sp, #8]
   21b04:	2300      	movs	r3, #0
   21b06:	e9cd 8503 	strd	r8, r5, [sp, #12]
   21b0a:	4618      	mov	r0, r3
   21b0c:	e9cd 3300 	strd	r3, r3, [sp]
   21b10:	4904      	ldr	r1, [pc, #16]	; (21b24 <qspi_nor_erase+0x13c>)
   21b12:	f00d fddd 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   21b16:	4638      	mov	r0, r7
   21b18:	f7ff fd14 	bl	21544 <qspi_get_zephyr_ret_code>
   21b1c:	4604      	mov	r4, r0
			break;
   21b1e:	e7b0      	b.n	21a82 <qspi_nor_erase+0x9a>
   21b20:	00037e60 	.word	0x00037e60
   21b24:	00032fc8 	.word	0x00032fc8
   21b28:	0bad0000 	.word	0x0bad0000
   21b2c:	00037eaa 	.word	0x00037eaa
   21b30:	0bad0004 	.word	0x0bad0004
   21b34:	00037ec8 	.word	0x00037ec8

00021b38 <qspi_nor_write>:
{
   21b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21b3c:	4605      	mov	r5, r0
   21b3e:	460f      	mov	r7, r1
   21b40:	461e      	mov	r6, r3
	if (!src) {
   21b42:	4690      	mov	r8, r2
{
   21b44:	b088      	sub	sp, #32
	if (!src) {
   21b46:	b1ca      	cbz	r2, 21b7c <qspi_nor_write+0x44>
	if ((size == 0)
   21b48:	b1c3      	cbz	r3, 21b7c <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   21b4a:	2b04      	cmp	r3, #4
   21b4c:	d901      	bls.n	21b52 <qspi_nor_write+0x1a>
   21b4e:	079a      	lsls	r2, r3, #30
   21b50:	d114      	bne.n	21b7c <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   21b52:	07bb      	lsls	r3, r7, #30
   21b54:	d112      	bne.n	21b7c <qspi_nor_write+0x44>
	if (addr < 0 ||
   21b56:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   21b58:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   21b5a:	db03      	blt.n	21b64 <qspi_nor_write+0x2c>
   21b5c:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   21b5e:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   21b60:	4293      	cmp	r3, r2
   21b62:	d911      	bls.n	21b88 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   21b64:	4b40      	ldr	r3, [pc, #256]	; (21c68 <qspi_nor_write+0x130>)
   21b66:	2201      	movs	r2, #1
   21b68:	9302      	str	r3, [sp, #8]
   21b6a:	2300      	movs	r3, #0
   21b6c:	e9cd 7603 	strd	r7, r6, [sp, #12]
   21b70:	4618      	mov	r0, r3
   21b72:	e9cd 3300 	strd	r3, r3, [sp]
   21b76:	493d      	ldr	r1, [pc, #244]	; (21c6c <qspi_nor_write+0x134>)
   21b78:	f00d fdaa 	bl	2f6d0 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21b7c:	f06f 0415 	mvn.w	r4, #21
}
   21b80:	4620      	mov	r0, r4
   21b82:	b008      	add	sp, #32
   21b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   21b88:	4628      	mov	r0, r5
   21b8a:	f7ff fd03 	bl	21594 <qspi_device_init>
	if (rc != 0) {
   21b8e:	4604      	mov	r4, r0
   21b90:	2800      	cmp	r0, #0
   21b92:	d160      	bne.n	21c56 <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   21b94:	6928      	ldr	r0, [r5, #16]
   21b96:	f00d fdb1 	bl	2f6fc <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   21b9a:	4621      	mov	r1, r4
   21b9c:	4628      	mov	r0, r5
   21b9e:	f00d fdb3 	bl	2f708 <qspi_nor_write_protection_set>
   21ba2:	4604      	mov	r4, r0
	qspi_lock(dev);
   21ba4:	6928      	ldr	r0, [r5, #16]
   21ba6:	f00d fda2 	bl	2f6ee <qspi_lock.isra.0>
	if (!res) {
   21baa:	2c00      	cmp	r4, #0
   21bac:	d140      	bne.n	21c30 <qspi_nor_write+0xf8>
		if (size < 4U) {
   21bae:	2e03      	cmp	r6, #3
   21bb0:	d81c      	bhi.n	21bec <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   21bb2:	463a      	mov	r2, r7
   21bb4:	2104      	movs	r1, #4
   21bb6:	a807      	add	r0, sp, #28
   21bb8:	f00e fa25 	bl	30006 <nrfx_qspi_read>
   21bbc:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   21bbe:	4601      	mov	r1, r0
   21bc0:	6928      	ldr	r0, [r5, #16]
   21bc2:	f7ff fcd9 	bl	21578 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   21bc6:	4b2a      	ldr	r3, [pc, #168]	; (21c70 <qspi_nor_write+0x138>)
   21bc8:	429c      	cmp	r4, r3
   21bca:	d131      	bne.n	21c30 <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   21bcc:	4632      	mov	r2, r6
   21bce:	4641      	mov	r1, r8
   21bd0:	a807      	add	r0, sp, #28
   21bd2:	f00f fd9c 	bl	3170e <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   21bd6:	463a      	mov	r2, r7
   21bd8:	2104      	movs	r1, #4
   21bda:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   21bdc:	f00e fa10 	bl	30000 <nrfx_qspi_write>
   21be0:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   21be2:	4601      	mov	r1, r0
   21be4:	6928      	ldr	r0, [r5, #16]
   21be6:	f7ff fcc7 	bl	21578 <qspi_wait_for_completion.isra.0>
   21bea:	e021      	b.n	21c30 <qspi_nor_write+0xf8>
   21bec:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   21bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21bf4:	d033      	beq.n	21c5e <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   21bf6:	f8df a078 	ldr.w	sl, [pc, #120]	; 21c70 <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   21bfa:	2e04      	cmp	r6, #4
   21bfc:	46b1      	mov	r9, r6
   21bfe:	bf28      	it	cs
   21c00:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   21c04:	4641      	mov	r1, r8
   21c06:	464a      	mov	r2, r9
   21c08:	a807      	add	r0, sp, #28
   21c0a:	f00f fd80 	bl	3170e <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   21c0e:	463a      	mov	r2, r7
   21c10:	2104      	movs	r1, #4
   21c12:	a807      	add	r0, sp, #28
   21c14:	f00e f9f4 	bl	30000 <nrfx_qspi_write>
   21c18:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   21c1a:	4601      	mov	r1, r0
   21c1c:	6928      	ldr	r0, [r5, #16]
   21c1e:	f7ff fcab 	bl	21578 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   21c22:	4554      	cmp	r4, sl
   21c24:	d104      	bne.n	21c30 <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   21c26:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   21c2a:	44c8      	add	r8, r9
				addr += len;
   21c2c:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   21c2e:	d1e4      	bne.n	21bfa <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   21c30:	6928      	ldr	r0, [r5, #16]
   21c32:	3018      	adds	r0, #24
   21c34:	f00d fd44 	bl	2f6c0 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   21c38:	2101      	movs	r1, #1
   21c3a:	4628      	mov	r0, r5
   21c3c:	f00d fd64 	bl	2f708 <qspi_nor_write_protection_set>
   21c40:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   21c42:	6928      	ldr	r0, [r5, #16]
   21c44:	f00d fd3c 	bl	2f6c0 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   21c48:	2c00      	cmp	r4, #0
   21c4a:	bf14      	ite	ne
   21c4c:	4620      	movne	r0, r4
   21c4e:	4630      	moveq	r0, r6
   21c50:	f7ff fc78 	bl	21544 <qspi_get_zephyr_ret_code>
   21c54:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   21c56:	4628      	mov	r0, r5
   21c58:	f7ff fd10 	bl	2167c <qspi_device_uninit>
	return rc;
   21c5c:	e790      	b.n	21b80 <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   21c5e:	463a      	mov	r2, r7
   21c60:	4631      	mov	r1, r6
   21c62:	4640      	mov	r0, r8
   21c64:	e7ba      	b.n	21bdc <qspi_nor_write+0xa4>
   21c66:	bf00      	nop
   21c68:	00037ee6 	.word	0x00037ee6
   21c6c:	00032fc8 	.word	0x00032fc8
   21c70:	0bad0000 	.word	0x0bad0000

00021c74 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   21c74:	4b02      	ldr	r3, [pc, #8]	; (21c80 <flash_nrf_pages_layout+0xc>)
   21c76:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21c78:	2301      	movs	r3, #1
   21c7a:	6013      	str	r3, [r2, #0]
}
   21c7c:	4770      	bx	lr
   21c7e:	bf00      	nop
   21c80:	20030b3c 	.word	0x20030b3c

00021c84 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   21c84:	4800      	ldr	r0, [pc, #0]	; (21c88 <flash_nrf_get_parameters+0x4>)
   21c86:	4770      	bx	lr
   21c88:	00033f9c 	.word	0x00033f9c

00021c8c <flash_nrf_read>:
{
   21c8c:	b570      	push	{r4, r5, r6, lr}
   21c8e:	460c      	mov	r4, r1
   21c90:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   21c92:	4619      	mov	r1, r3
   21c94:	4620      	mov	r0, r4
{
   21c96:	461d      	mov	r5, r3
   21c98:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   21c9a:	f00d fd65 	bl	2f768 <is_regular_addr_valid>
   21c9e:	4603      	mov	r3, r0
   21ca0:	b968      	cbnz	r0, 21cbe <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21ca2:	4a0f      	ldr	r2, [pc, #60]	; (21ce0 <flash_nrf_read+0x54>)
   21ca4:	9000      	str	r0, [sp, #0]
   21ca6:	e9cd 0201 	strd	r0, r2, [sp, #4]
   21caa:	e9cd 4503 	strd	r4, r5, [sp, #12]
   21cae:	2201      	movs	r2, #1
   21cb0:	490c      	ldr	r1, [pc, #48]	; (21ce4 <flash_nrf_read+0x58>)
   21cb2:	f00d fd6a 	bl	2f78a <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21cb6:	f06f 0015 	mvn.w	r0, #21
}
   21cba:	b006      	add	sp, #24
   21cbc:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   21cbe:	b165      	cbz	r5, 21cda <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   21cc0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   21cc4:	462a      	mov	r2, r5
   21cc6:	4621      	mov	r1, r4
   21cc8:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   21cca:	da04      	bge.n	21cd6 <flash_nrf_read+0x4a>
}
   21ccc:	b006      	add	sp, #24
   21cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   21cd2:	f008 bd85 	b.w	2a7e0 <soc_secure_mem_read>
   21cd6:	f00f fd1a 	bl	3170e <memcpy>
		return 0;
   21cda:	2000      	movs	r0, #0
   21cdc:	e7ed      	b.n	21cba <flash_nrf_read+0x2e>
   21cde:	bf00      	nop
   21ce0:	00037f46 	.word	0x00037f46
   21ce4:	00032f58 	.word	0x00032f58

00021ce8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   21ce8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21cea:	2201      	movs	r2, #1
   21cec:	4806      	ldr	r0, [pc, #24]	; (21d08 <nrf_flash_init+0x20>)
   21cee:	4611      	mov	r1, r2
   21cf0:	f00f f8be 	bl	30e70 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   21cf4:	f00e f97e 	bl	2fff4 <nrfx_nvmc_flash_page_count_get>
   21cf8:	4c04      	ldr	r4, [pc, #16]	; (21d0c <nrf_flash_init+0x24>)
   21cfa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   21cfc:	f00e f977 	bl	2ffee <nrfx_nvmc_flash_page_size_get>
   21d00:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   21d02:	2000      	movs	r0, #0
   21d04:	bd10      	pop	{r4, pc}
   21d06:	bf00      	nop
   21d08:	20030b44 	.word	0x20030b44
   21d0c:	20030b3c 	.word	0x20030b3c

00021d10 <flash_nrf_erase>:
{
   21d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d12:	b087      	sub	sp, #28
   21d14:	460e      	mov	r6, r1
   21d16:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21d18:	f00e f969 	bl	2ffee <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   21d1c:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21d1e:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   21d20:	4630      	mov	r0, r6
   21d22:	f00d fd21 	bl	2f768 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   21d26:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   21d28:	4603      	mov	r3, r0
   21d2a:	b388      	cbz	r0, 21d90 <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   21d2c:	fbb6 f3f5 	udiv	r3, r6, r5
   21d30:	fb05 6313 	mls	r3, r5, r3, r6
   21d34:	b923      	cbnz	r3, 21d40 <flash_nrf_erase+0x30>
   21d36:	fbb4 f3f5 	udiv	r3, r4, r5
   21d3a:	fb05 4313 	mls	r3, r5, r3, r4
   21d3e:	b173      	cbz	r3, 21d5e <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   21d40:	4b18      	ldr	r3, [pc, #96]	; (21da4 <flash_nrf_erase+0x94>)
   21d42:	2201      	movs	r2, #1
   21d44:	9302      	str	r3, [sp, #8]
   21d46:	2300      	movs	r3, #0
   21d48:	4618      	mov	r0, r3
   21d4a:	e9cd 6403 	strd	r6, r4, [sp, #12]
   21d4e:	e9cd 3300 	strd	r3, r3, [sp]
   21d52:	4915      	ldr	r1, [pc, #84]	; (21da8 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21d54:	f00d fd19 	bl	2f78a <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   21d58:	f06f 0015 	mvn.w	r0, #21
   21d5c:	e002      	b.n	21d64 <flash_nrf_erase+0x54>
		if (!n_pages) {
   21d5e:	42a5      	cmp	r5, r4
   21d60:	d902      	bls.n	21d68 <flash_nrf_erase+0x58>
			return 0;
   21d62:	2000      	movs	r0, #0
}
   21d64:	b007      	add	sp, #28
   21d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   21d68:	f04f 32ff 	mov.w	r2, #4294967295
   21d6c:	f04f 33ff 	mov.w	r3, #4294967295
   21d70:	480e      	ldr	r0, [pc, #56]	; (21dac <flash_nrf_erase+0x9c>)
   21d72:	f003 fe5d 	bl	25a30 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21d76:	f00e f93a 	bl	2ffee <nrfx_nvmc_flash_page_size_get>
   21d7a:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   21d7c:	4638      	mov	r0, r7
   21d7e:	f002 f8bb 	bl	23ef8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   21d82:	1b64      	subs	r4, r4, r5
   21d84:	442f      	add	r7, r5
   21d86:	d1f9      	bne.n	21d7c <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   21d88:	4808      	ldr	r0, [pc, #32]	; (21dac <flash_nrf_erase+0x9c>)
   21d8a:	f003 fe2b 	bl	259e4 <z_impl_k_sem_give>
}
   21d8e:	e7e8      	b.n	21d62 <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21d90:	4a07      	ldr	r2, [pc, #28]	; (21db0 <flash_nrf_erase+0xa0>)
   21d92:	e9cd 6403 	strd	r6, r4, [sp, #12]
   21d96:	e9cd 0201 	strd	r0, r2, [sp, #4]
   21d9a:	4903      	ldr	r1, [pc, #12]	; (21da8 <flash_nrf_erase+0x98>)
   21d9c:	2201      	movs	r2, #1
   21d9e:	9000      	str	r0, [sp, #0]
   21da0:	e7d8      	b.n	21d54 <flash_nrf_erase+0x44>
   21da2:	bf00      	nop
   21da4:	00037f63 	.word	0x00037f63
   21da8:	00032f58 	.word	0x00032f58
   21dac:	20030b44 	.word	0x20030b44
   21db0:	00037f46 	.word	0x00037f46

00021db4 <flash_nrf_write>:
{
   21db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21db6:	460e      	mov	r6, r1
   21db8:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   21dba:	4619      	mov	r1, r3
   21dbc:	4630      	mov	r0, r6
{
   21dbe:	461c      	mov	r4, r3
   21dc0:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   21dc2:	f00d fcd1 	bl	2f768 <is_regular_addr_valid>
   21dc6:	4603      	mov	r3, r0
   21dc8:	b968      	cbnz	r0, 21de6 <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21dca:	4a1d      	ldr	r2, [pc, #116]	; (21e40 <flash_nrf_write+0x8c>)
   21dcc:	e9cd 6403 	strd	r6, r4, [sp, #12]
   21dd0:	e9cd 0201 	strd	r0, r2, [sp, #4]
   21dd4:	2201      	movs	r2, #1
   21dd6:	491b      	ldr	r1, [pc, #108]	; (21e44 <flash_nrf_write+0x90>)
   21dd8:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   21dda:	f00d fcd6 	bl	2f78a <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21dde:	f06f 0015 	mvn.w	r0, #21
}
   21de2:	b007      	add	sp, #28
   21de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   21de6:	ea46 0504 	orr.w	r5, r6, r4
   21dea:	f015 0503 	ands.w	r5, r5, #3
   21dee:	d00a      	beq.n	21e06 <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   21df0:	4b15      	ldr	r3, [pc, #84]	; (21e48 <flash_nrf_write+0x94>)
   21df2:	2201      	movs	r2, #1
   21df4:	9302      	str	r3, [sp, #8]
   21df6:	2300      	movs	r3, #0
   21df8:	e9cd 6403 	strd	r6, r4, [sp, #12]
   21dfc:	4618      	mov	r0, r3
   21dfe:	e9cd 3300 	strd	r3, r3, [sp]
   21e02:	4910      	ldr	r1, [pc, #64]	; (21e44 <flash_nrf_write+0x90>)
   21e04:	e7e9      	b.n	21dda <flash_nrf_write+0x26>
	if (!len) {
   21e06:	b1a4      	cbz	r4, 21e32 <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   21e08:	f04f 32ff 	mov.w	r2, #4294967295
   21e0c:	f04f 33ff 	mov.w	r3, #4294967295
   21e10:	480e      	ldr	r0, [pc, #56]	; (21e4c <flash_nrf_write+0x98>)
   21e12:	f003 fe0d 	bl	25a30 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   21e16:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   21e1a:	42a5      	cmp	r5, r4
   21e1c:	eb05 0006 	add.w	r0, r5, r6
   21e20:	d109      	bne.n	21e36 <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21e22:	4a0b      	ldr	r2, [pc, #44]	; (21e50 <flash_nrf_write+0x9c>)
   21e24:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   21e28:	07db      	lsls	r3, r3, #31
   21e2a:	d5fb      	bpl.n	21e24 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   21e2c:	4807      	ldr	r0, [pc, #28]	; (21e4c <flash_nrf_write+0x98>)
   21e2e:	f003 fdd9 	bl	259e4 <z_impl_k_sem_give>
	return ret;
   21e32:	2000      	movs	r0, #0
   21e34:	e7d5      	b.n	21de2 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   21e36:	5979      	ldr	r1, [r7, r5]
   21e38:	f002 f87a 	bl	23f30 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   21e3c:	3504      	adds	r5, #4
}
   21e3e:	e7ec      	b.n	21e1a <flash_nrf_write+0x66>
   21e40:	00037f46 	.word	0x00037f46
   21e44:	00032f58 	.word	0x00032f58
   21e48:	00037f82 	.word	0x00037f82
   21e4c:	20030b44 	.word	0x20030b44
   21e50:	40039000 	.word	0x40039000

00021e54 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   21e54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   21e56:	ab0b      	add	r3, sp, #44	; 0x2c
   21e58:	9305      	str	r3, [sp, #20]
   21e5a:	9303      	str	r3, [sp, #12]
   21e5c:	4b05      	ldr	r3, [pc, #20]	; (21e74 <z_log_msg_runtime_create.constprop.0+0x20>)
   21e5e:	2201      	movs	r2, #1
   21e60:	9302      	str	r3, [sp, #8]
   21e62:	2300      	movs	r3, #0
   21e64:	4618      	mov	r0, r3
   21e66:	e9cd 3300 	strd	r3, r3, [sp]
   21e6a:	f7ed fadf 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   21e6e:	b007      	add	sp, #28
   21e70:	f85d fb04 	ldr.w	pc, [sp], #4
   21e74:	00037fc1 	.word	0x00037fc1

00021e78 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   21e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21e7a:	461d      	mov	r5, r3
	return config->uarte_regs;
   21e7c:	6843      	ldr	r3, [r0, #4]
{
   21e7e:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   21e80:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   21e82:	f8d3 c000 	ldr.w	ip, [r3]
   21e86:	f04f 0320 	mov.w	r3, #32
   21e8a:	f3ef 8711 	mrs	r7, BASEPRI
   21e8e:	f383 8812 	msr	BASEPRI_MAX, r3
   21e92:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   21e96:	68e3      	ldr	r3, [r4, #12]
   21e98:	68d8      	ldr	r0, [r3, #12]
   21e9a:	b138      	cbz	r0, 21eac <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   21e9c:	f387 8811 	msr	BASEPRI, r7
   21ea0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   21ea4:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   21ea8:	b003      	add	sp, #12
   21eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   21eac:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   21eae:	68e3      	ldr	r3, [r4, #12]
   21eb0:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   21eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   21eb6:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   21eba:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   21ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21ec2:	68e3      	ldr	r3, [r4, #12]
   21ec4:	d111      	bne.n	21eea <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   21ec6:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   21ec8:	68e3      	ldr	r3, [r4, #12]
   21eca:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   21ecc:	4621      	mov	r1, r4
   21ece:	4630      	mov	r0, r6
   21ed0:	f00d fe16 	bl	2fb00 <start_tx_locked>
   21ed4:	f387 8811 	msr	BASEPRI, r7
   21ed8:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   21edc:	7ae3      	ldrb	r3, [r4, #11]
   21ede:	2b01      	cmp	r3, #1
   21ee0:	d101      	bne.n	21ee6 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   21ee2:	1c6b      	adds	r3, r5, #1
   21ee4:	d106      	bne.n	21ef4 <uarte_nrfx_tx+0x7c>
	return 0;
   21ee6:	2000      	movs	r0, #0
   21ee8:	e7de      	b.n	21ea8 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   21eea:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   21eec:	4620      	mov	r0, r4
   21eee:	f00d fd80 	bl	2f9f2 <setup_tx_cache>
   21ef2:	e7eb      	b.n	21ecc <uarte_nrfx_tx+0x54>
   21ef4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   21ef8:	2100      	movs	r1, #0
   21efa:	480a      	ldr	r0, [pc, #40]	; (21f24 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   21efc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   21f00:	2300      	movs	r3, #0
   21f02:	fbc5 0106 	smlal	r0, r1, r5, r6
   21f06:	4a08      	ldr	r2, [pc, #32]	; (21f28 <uarte_nrfx_tx+0xb0>)
   21f08:	f7e7 f81a 	bl	8f40 <__aeabi_uldivmod>
   21f0c:	68e4      	ldr	r4, [r4, #12]
   21f0e:	4602      	mov	r2, r0
   21f10:	460b      	mov	r3, r1
   21f12:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   21f14:	2000      	movs	r0, #0
   21f16:	2100      	movs	r1, #0
   21f18:	e9cd 0100 	strd	r0, r1, [sp]
   21f1c:	4620      	mov	r0, r4
   21f1e:	f004 fcdd 	bl	268dc <z_impl_k_timer_start>
   21f22:	e7e0      	b.n	21ee6 <uarte_nrfx_tx+0x6e>
   21f24:	000f423f 	.word	0x000f423f
   21f28:	000f4240 	.word	0x000f4240

00021f2c <uarte_nrfx_configure>:
{
   21f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   21f2e:	794b      	ldrb	r3, [r1, #5]
   21f30:	2b01      	cmp	r3, #1
   21f32:	d029      	beq.n	21f88 <uarte_nrfx_configure+0x5c>
   21f34:	2b03      	cmp	r3, #3
   21f36:	d124      	bne.n	21f82 <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   21f38:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   21f3a:	798b      	ldrb	r3, [r1, #6]
   21f3c:	2b03      	cmp	r3, #3
   21f3e:	d120      	bne.n	21f82 <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   21f40:	79ce      	ldrb	r6, [r1, #7]
   21f42:	b10e      	cbz	r6, 21f48 <uarte_nrfx_configure+0x1c>
   21f44:	2e01      	cmp	r6, #1
   21f46:	d11c      	bne.n	21f82 <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   21f48:	790a      	ldrb	r2, [r1, #4]
   21f4a:	2a01      	cmp	r2, #1
   21f4c:	d01e      	beq.n	21f8c <uarte_nrfx_configure+0x60>
   21f4e:	2a02      	cmp	r2, #2
   21f50:	d020      	beq.n	21f94 <uarte_nrfx_configure+0x68>
   21f52:	b9b2      	cbnz	r2, 21f82 <uarte_nrfx_configure+0x56>
   21f54:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   21f56:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   21f58:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   21f5a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   21f5e:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   21f62:	d06e      	beq.n	22042 <uarte_nrfx_configure+0x116>
   21f64:	d833      	bhi.n	21fce <uarte_nrfx_configure+0xa2>
   21f66:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   21f6a:	d06d      	beq.n	22048 <uarte_nrfx_configure+0x11c>
   21f6c:	d81c      	bhi.n	21fa8 <uarte_nrfx_configure+0x7c>
   21f6e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   21f72:	d06b      	beq.n	2204c <uarte_nrfx_configure+0x120>
   21f74:	d810      	bhi.n	21f98 <uarte_nrfx_configure+0x6c>
   21f76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   21f7a:	d06a      	beq.n	22052 <uarte_nrfx_configure+0x126>
   21f7c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   21f80:	d06a      	beq.n	22058 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   21f82:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21f86:	e05b      	b.n	22040 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   21f88:	2700      	movs	r7, #0
   21f8a:	e7d6      	b.n	21f3a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   21f8c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   21f90:	220e      	movs	r2, #14
   21f92:	e7e0      	b.n	21f56 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   21f94:	2400      	movs	r4, #0
   21f96:	e7fb      	b.n	21f90 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   21f98:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   21f9c:	d05f      	beq.n	2205e <uarte_nrfx_configure+0x132>
   21f9e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   21fa2:	d1ee      	bne.n	21f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   21fa4:	4b38      	ldr	r3, [pc, #224]	; (22088 <uarte_nrfx_configure+0x15c>)
   21fa6:	e03c      	b.n	22022 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21fa8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   21fac:	d05a      	beq.n	22064 <uarte_nrfx_configure+0x138>
   21fae:	d807      	bhi.n	21fc0 <uarte_nrfx_configure+0x94>
   21fb0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   21fb4:	d058      	beq.n	22068 <uarte_nrfx_configure+0x13c>
   21fb6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   21fba:	d1e2      	bne.n	21f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   21fbc:	4b33      	ldr	r3, [pc, #204]	; (2208c <uarte_nrfx_configure+0x160>)
   21fbe:	e030      	b.n	22022 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21fc0:	f647 2512 	movw	r5, #31250	; 0x7a12
   21fc4:	42ab      	cmp	r3, r5
   21fc6:	d1dc      	bne.n	21f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   21fc8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   21fcc:	e029      	b.n	22022 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21fce:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   21fd2:	d04b      	beq.n	2206c <uarte_nrfx_configure+0x140>
   21fd4:	d813      	bhi.n	21ffe <uarte_nrfx_configure+0xd2>
   21fd6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   21fda:	d04a      	beq.n	22072 <uarte_nrfx_configure+0x146>
   21fdc:	d809      	bhi.n	21ff2 <uarte_nrfx_configure+0xc6>
   21fde:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   21fe2:	42ab      	cmp	r3, r5
   21fe4:	d047      	beq.n	22076 <uarte_nrfx_configure+0x14a>
   21fe6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   21fea:	d1ca      	bne.n	21f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   21fec:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   21ff0:	e017      	b.n	22022 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21ff2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   21ff6:	d1c4      	bne.n	21f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   21ff8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   21ffc:	e011      	b.n	22022 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21ffe:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   22002:	d03b      	beq.n	2207c <uarte_nrfx_configure+0x150>
   22004:	d808      	bhi.n	22018 <uarte_nrfx_configure+0xec>
   22006:	4d22      	ldr	r5, [pc, #136]	; (22090 <uarte_nrfx_configure+0x164>)
   22008:	42ab      	cmp	r3, r5
   2200a:	d03a      	beq.n	22082 <uarte_nrfx_configure+0x156>
   2200c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   22010:	d1b7      	bne.n	21f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22012:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22016:	e004      	b.n	22022 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   22018:	4d1e      	ldr	r5, [pc, #120]	; (22094 <uarte_nrfx_configure+0x168>)
   2201a:	42ab      	cmp	r3, r5
   2201c:	d1b1      	bne.n	21f82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2201e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   22022:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22024:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   22028:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   2202a:	433a      	orrs	r2, r7
   2202c:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   2202e:	4334      	orrs	r4, r6
   22030:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   22032:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   22036:	1d2b      	adds	r3, r5, #4
   22038:	c903      	ldmia	r1, {r0, r1}
   2203a:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   2203e:	2000      	movs	r0, #0
}
   22040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   22042:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   22046:	e7ec      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   22048:	4b13      	ldr	r3, [pc, #76]	; (22098 <uarte_nrfx_configure+0x16c>)
   2204a:	e7ea      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2204c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   22050:	e7e7      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   22052:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   22056:	e7e4      	b.n	22022 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   22058:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2205c:	e7e1      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2205e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   22062:	e7de      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   22064:	4b0d      	ldr	r3, [pc, #52]	; (2209c <uarte_nrfx_configure+0x170>)
   22066:	e7dc      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   22068:	4b0d      	ldr	r3, [pc, #52]	; (220a0 <uarte_nrfx_configure+0x174>)
   2206a:	e7da      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2206c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   22070:	e7d7      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   22072:	4b0c      	ldr	r3, [pc, #48]	; (220a4 <uarte_nrfx_configure+0x178>)
   22074:	e7d5      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   22076:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2207a:	e7d2      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2207c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   22080:	e7cf      	b.n	22022 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   22082:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22086:	e7cc      	b.n	22022 <uarte_nrfx_configure+0xf6>
   22088:	0013b000 	.word	0x0013b000
   2208c:	004ea000 	.word	0x004ea000
   22090:	0003d090 	.word	0x0003d090
   22094:	000f4240 	.word	0x000f4240
   22098:	00275000 	.word	0x00275000
   2209c:	0075c000 	.word	0x0075c000
   220a0:	003af000 	.word	0x003af000
   220a4:	013a9000 	.word	0x013a9000

000220a8 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   220a8:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   220aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   220ae:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   220b2:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   220b4:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   220b8:	b087      	sub	sp, #28
   220ba:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   220be:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   220c0:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   220c4:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   220c6:	aa05      	add	r2, sp, #20
   220c8:	4640      	mov	r0, r8
   220ca:	f00d fe96 	bl	2fdfa <pinctrl_lookup_state>
	if (ret < 0) {
   220ce:	1e04      	subs	r4, r0, #0
   220d0:	db25      	blt.n	2211e <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   220d2:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   220d4:	f8d8 2000 	ldr.w	r2, [r8]
   220d8:	7919      	ldrb	r1, [r3, #4]
   220da:	6818      	ldr	r0, [r3, #0]
   220dc:	f000 fed0 	bl	22e80 <pinctrl_configure_pins>
	if (err < 0) {
   220e0:	1e04      	subs	r4, r0, #0
   220e2:	db1c      	blt.n	2211e <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   220e4:	4638      	mov	r0, r7
   220e6:	1d31      	adds	r1, r6, #4
   220e8:	f7ff ff20 	bl	21f2c <uarte_nrfx_configure>
	if (err) {
   220ec:	4604      	mov	r4, r0
   220ee:	b9b0      	cbnz	r0, 2211e <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   220f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   220f4:	0799      	lsls	r1, r3, #30
   220f6:	d523      	bpl.n	22140 <uarte_instance_init.constprop.0+0x98>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   220f8:	f106 001c 	add.w	r0, r6, #28
   220fc:	f001 fb0a 	bl	23714 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   22100:	4b47      	ldr	r3, [pc, #284]	; (22220 <uarte_instance_init.constprop.0+0x178>)
   22102:	4298      	cmp	r0, r3
   22104:	d00f      	beq.n	22126 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   22106:	4b47      	ldr	r3, [pc, #284]	; (22224 <uarte_instance_init.constprop.0+0x17c>)
   22108:	4620      	mov	r0, r4
   2210a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2210e:	9400      	str	r4, [sp, #0]
   22110:	4623      	mov	r3, r4
   22112:	2201      	movs	r2, #1
   22114:	4944      	ldr	r1, [pc, #272]	; (22228 <uarte_instance_init.constprop.0+0x180>)
   22116:	f7ff fe9d 	bl	21e54 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   2211a:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2211e:	4620      	mov	r0, r4
   22120:	b007      	add	sp, #28
   22122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22126:	7f33      	ldrb	r3, [r6, #28]
   22128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2212c:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   22130:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   22134:	2301      	movs	r3, #1
   22136:	7f32      	ldrb	r2, [r6, #28]
   22138:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   2213a:	4a3c      	ldr	r2, [pc, #240]	; (2222c <uarte_instance_init.constprop.0+0x184>)
   2213c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   22140:	68f3      	ldr	r3, [r6, #12]
   22142:	2b00      	cmp	r3, #0
   22144:	d059      	beq.n	221fa <uarte_instance_init.constprop.0+0x152>
    p_reg->INTENSET = mask;
   22146:	2204      	movs	r2, #4
	return config->uarte_regs;
   22148:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   2214a:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   2214e:	681b      	ldr	r3, [r3, #0]
   22150:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   22154:	2201      	movs	r2, #1
   22156:	f8d8 100c 	ldr.w	r1, [r8, #12]
   2215a:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   2215e:	4934      	ldr	r1, [pc, #208]	; (22230 <uarte_instance_init.constprop.0+0x188>)
   22160:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22164:	2108      	movs	r1, #8
   22166:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2216a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2216e:	b1a1      	cbz	r1, 2219a <uarte_instance_init.constprop.0+0xf2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22170:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22172:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   22176:	b91a      	cbnz	r2, 22180 <uarte_instance_init.constprop.0+0xd8>
   22178:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   2217c:	2a00      	cmp	r2, #0
   2217e:	d0f8      	beq.n	22172 <uarte_instance_init.constprop.0+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22180:	2200      	movs	r2, #0
   22182:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   22186:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   2218a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2218e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   22192:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   22196:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   2219a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2219e:	2200      	movs	r2, #0
   221a0:	4924      	ldr	r1, [pc, #144]	; (22234 <uarte_instance_init.constprop.0+0x18c>)
   221a2:	3080      	adds	r0, #128	; 0x80
   221a4:	f00f f901 	bl	313aa <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   221a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   221ac:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   221b0:	f8d8 000c 	ldr.w	r0, [r8, #12]
   221b4:	2200      	movs	r2, #0
   221b6:	4920      	ldr	r1, [pc, #128]	; (22238 <uarte_instance_init.constprop.0+0x190>)
   221b8:	3020      	adds	r0, #32
   221ba:	f00f f8f6 	bl	313aa <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   221be:	f8d8 300c 	ldr.w	r3, [r8, #12]
   221c2:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   221c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   221ca:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   221cc:	bf5c      	itt	pl
   221ce:	f44f 7380 	movpl.w	r3, #256	; 0x100
   221d2:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   221d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   221da:	06db      	lsls	r3, r3, #27
   221dc:	bf44      	itt	mi
   221de:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   221e2:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   221e6:	6973      	ldr	r3, [r6, #20]
   221e8:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   221ec:	2300      	movs	r3, #0
   221ee:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   221f2:	2301      	movs	r3, #1
   221f4:	60ab      	str	r3, [r5, #8]
   221f6:	60eb      	str	r3, [r5, #12]
	return 0;
   221f8:	e791      	b.n	2211e <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   221fa:	2308      	movs	r3, #8
   221fc:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   22200:	f899 3008 	ldrb.w	r3, [r9, #8]
   22204:	2b00      	cmp	r3, #0
   22206:	d1de      	bne.n	221c6 <uarte_instance_init.constprop.0+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22208:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2220c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22210:	69b3      	ldr	r3, [r6, #24]
   22212:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22216:	2301      	movs	r3, #1
   22218:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2221c:	602b      	str	r3, [r5, #0]
}
   2221e:	e7d2      	b.n	221c6 <uarte_instance_init.constprop.0+0x11e>
   22220:	0bad0000 	.word	0x0bad0000
   22224:	00037fc1 	.word	0x00037fc1
   22228:	00032ff8 	.word	0x00032ff8
   2222c:	40017000 	.word	0x40017000
   22230:	000a0210 	.word	0x000a0210
   22234:	0002fc87 	.word	0x0002fc87
   22238:	0002fd57 	.word	0x0002fd57

0002223c <uarte_nrfx_poll_out>:
{
   2223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22240:	4604      	mov	r4, r0
   22242:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   22244:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22246:	f00e fd5f 	bl	30d08 <k_is_in_isr>
   2224a:	b9b0      	cbnz	r0, 2227a <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   2224c:	4b2a      	ldr	r3, [pc, #168]	; (222f8 <uarte_nrfx_poll_out+0xbc>)
   2224e:	781b      	ldrb	r3, [r3, #0]
   22250:	b19b      	cbz	r3, 2227a <uarte_nrfx_poll_out+0x3e>
{
   22252:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   22254:	6860      	ldr	r0, [r4, #4]
   22256:	f00d fc43 	bl	2fae0 <is_tx_ready.isra.0>
   2225a:	2800      	cmp	r0, #0
   2225c:	d138      	bne.n	222d0 <uarte_nrfx_poll_out+0x94>
   2225e:	2001      	movs	r0, #1
   22260:	f00d fe66 	bl	2ff30 <nrfx_busy_wait>
   22264:	3f01      	subs	r7, #1
   22266:	d1f5      	bne.n	22254 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   22268:	2100      	movs	r1, #0
   2226a:	2021      	movs	r0, #33	; 0x21
   2226c:	f004 f8de 	bl	2642c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   22270:	e7ef      	b.n	22252 <uarte_nrfx_poll_out+0x16>
   22272:	f381 8811 	msr	BASEPRI, r1
   22276:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2227a:	f04f 0320 	mov.w	r3, #32
   2227e:	f3ef 8111 	mrs	r1, BASEPRI
   22282:	f383 8812 	msr	BASEPRI_MAX, r3
   22286:	f3bf 8f6f 	isb	sy
   2228a:	f8d4 8004 	ldr.w	r8, [r4, #4]
   2228e:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   22290:	4640      	mov	r0, r8
   22292:	f00d fc25 	bl	2fae0 <is_tx_ready.isra.0>
   22296:	2800      	cmp	r0, #0
   22298:	d0eb      	beq.n	22272 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   2229a:	68eb      	ldr	r3, [r5, #12]
   2229c:	b15b      	cbz	r3, 222b6 <uarte_nrfx_poll_out+0x7a>
   2229e:	68da      	ldr	r2, [r3, #12]
   222a0:	b14a      	cbz	r2, 222b6 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   222a2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   222a6:	2a00      	cmp	r2, #0
   222a8:	da05      	bge.n	222b6 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   222aa:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   222ae:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   222b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   222b6:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   222b8:	2201      	movs	r2, #1
	*data->char_out = c;
   222ba:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   222bc:	4620      	mov	r0, r4
   222be:	6969      	ldr	r1, [r5, #20]
   222c0:	f00d fab7 	bl	2f832 <tx_start>
	__asm__ volatile(
   222c4:	f387 8811 	msr	BASEPRI, r7
   222c8:	f3bf 8f6f 	isb	sy
}
   222cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   222d0:	f04f 0320 	mov.w	r3, #32
   222d4:	f3ef 8111 	mrs	r1, BASEPRI
   222d8:	f383 8812 	msr	BASEPRI_MAX, r3
   222dc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   222e0:	6860      	ldr	r0, [r4, #4]
   222e2:	460f      	mov	r7, r1
   222e4:	f00d fbfc 	bl	2fae0 <is_tx_ready.isra.0>
   222e8:	2800      	cmp	r0, #0
   222ea:	d1e4      	bne.n	222b6 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   222ec:	f381 8811 	msr	BASEPRI, r1
   222f0:	f3bf 8f6f 	isb	sy
}
   222f4:	e7b8      	b.n	22268 <uarte_nrfx_poll_out+0x2c>
   222f6:	bf00      	nop
   222f8:	20031e0d 	.word	0x20031e0d

000222fc <uarte_nrfx_isr_async>:
{
   222fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   22300:	6843      	ldr	r3, [r0, #4]
{
   22302:	4604      	mov	r4, r0
	return config->uarte_regs;
   22304:	681d      	ldr	r5, [r3, #0]
{
   22306:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22308:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   2230c:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   2230e:	b169      	cbz	r1, 2232c <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22310:	2200      	movs	r2, #0
   22312:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   22316:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   2231a:	68da      	ldr	r2, [r3, #12]
   2231c:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   22320:	3301      	adds	r3, #1
   22322:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   22326:	b008      	add	sp, #32
   22328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2232c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   22330:	b323      	cbz	r3, 2237c <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22332:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   22336:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   2233a:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   2233c:	2214      	movs	r2, #20
	return config->uarte_regs;
   2233e:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   22340:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22342:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22346:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   2234a:	f00f fa1a 	bl	31782 <memset>
   2234e:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   22350:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   22352:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   22356:	f100 8103 	bmi.w	22560 <uarte_nrfx_isr_async+0x264>
   2235a:	07b3      	lsls	r3, r6, #30
   2235c:	f100 8102 	bmi.w	22564 <uarte_nrfx_isr_async+0x268>
   22360:	0777      	lsls	r7, r6, #29
   22362:	f100 8101 	bmi.w	22568 <uarte_nrfx_isr_async+0x26c>
   22366:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   2236a:	4620      	mov	r0, r4
   2236c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2236e:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   22372:	f00d fa86 	bl	2f882 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   22376:	4620      	mov	r0, r4
   22378:	f00d fb19 	bl	2f9ae <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2237c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   22380:	b38b      	cbz	r3, 223e6 <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   22382:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   22386:	06d8      	lsls	r0, r3, #27
   22388:	d52d      	bpl.n	223e6 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2238a:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   2238e:	2201      	movs	r2, #1
   22390:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   22394:	6926      	ldr	r6, [r4, #16]
   22396:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   2239a:	6863      	ldr	r3, [r4, #4]
   2239c:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   2239e:	68f3      	ldr	r3, [r6, #12]
   223a0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   223a4:	68f0      	ldr	r0, [r6, #12]
   223a6:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   223a8:	f00f f80b 	bl	313c2 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   223ac:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   223ae:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   223b2:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   223b6:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   223ba:	68f2      	ldr	r2, [r6, #12]
   223bc:	6e10      	ldr	r0, [r2, #96]	; 0x60
   223be:	1a1b      	subs	r3, r3, r0
   223c0:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   223c2:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   223c4:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   223c8:	4408      	add	r0, r1
	if (rx_len > 0) {
   223ca:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   223cc:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   223ce:	dd02      	ble.n	223d6 <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   223d0:	4620      	mov	r0, r4
   223d2:	f00d fa5d 	bl	2f890 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   223d6:	68f1      	ldr	r1, [r6, #12]
   223d8:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   223dc:	2b00      	cmp	r3, #0
   223de:	f040 80c5 	bne.w	2256c <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   223e2:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   223e6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   223ea:	b383      	cbz	r3, 2244e <uarte_nrfx_isr_async+0x152>
   223ec:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   223f0:	bb6e      	cbnz	r6, 2244e <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   223f2:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   223f4:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   223f8:	4631      	mov	r1, r6
   223fa:	a803      	add	r0, sp, #12
   223fc:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   22400:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   22402:	f00f f9be 	bl	31782 <memset>
   22406:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   22408:	a903      	add	r1, sp, #12
   2240a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2240c:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   22410:	f00d fa37 	bl	2f882 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   22414:	68fb      	ldr	r3, [r7, #12]
   22416:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   22418:	1c51      	adds	r1, r2, #1
   2241a:	d018      	beq.n	2244e <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   2241c:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   2241e:	68ff      	ldr	r7, [r7, #12]
   22420:	498e      	ldr	r1, [pc, #568]	; (2265c <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   22422:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   22424:	468e      	mov	lr, r1
   22426:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   2242a:	4631      	mov	r1, r6
   2242c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   22430:	fbcc e100 	smlal	lr, r1, ip, r0
   22434:	2300      	movs	r3, #0
   22436:	4670      	mov	r0, lr
   22438:	4a89      	ldr	r2, [pc, #548]	; (22660 <uarte_nrfx_isr_async+0x364>)
   2243a:	f7e6 fd81 	bl	8f40 <__aeabi_uldivmod>
   2243e:	4602      	mov	r2, r0
   22440:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   22442:	e9cd 0100 	strd	r0, r1, [sp]
   22446:	f107 0080 	add.w	r0, r7, #128	; 0x80
   2244a:	f004 fa47 	bl	268dc <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2244e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   22452:	b333      	cbz	r3, 224a2 <uarte_nrfx_isr_async+0x1a6>
   22454:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   22458:	bb1e      	cbnz	r6, 224a2 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2245a:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   2245e:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   22460:	4620      	mov	r0, r4
   22462:	68f9      	ldr	r1, [r7, #12]
   22464:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   22468:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   2246a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   2246e:	f00d fa28 	bl	2f8c2 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   22472:	68f9      	ldr	r1, [r7, #12]
   22474:	4620      	mov	r0, r4
   22476:	3164      	adds	r1, #100	; 0x64
   22478:	f00d fa23 	bl	2f8c2 <rx_buf_release>
	if (data->async->rx_enabled) {
   2247c:	68fb      	ldr	r3, [r7, #12]
   2247e:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   22482:	2a00      	cmp	r2, #0
   22484:	f000 80a3 	beq.w	225ce <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   22488:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2248c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22490:	06d8      	lsls	r0, r3, #27
   22492:	d503      	bpl.n	2249c <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   22494:	2102      	movs	r1, #2
   22496:	4620      	mov	r0, r4
   22498:	f00d faf8 	bl	2fa8c <async_uart_release>
	notify_rx_disable(dev);
   2249c:	4620      	mov	r0, r4
   2249e:	f00d fa28 	bl	2f8f2 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224a2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   224a6:	b1db      	cbz	r3, 224e0 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   224a8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   224ac:	05d9      	lsls	r1, r3, #23
   224ae:	d517      	bpl.n	224e0 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   224b0:	6863      	ldr	r3, [r4, #4]
   224b2:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   224b4:	f04f 0120 	mov.w	r1, #32
   224b8:	f3ef 8211 	mrs	r2, BASEPRI
   224bc:	f381 8812 	msr	BASEPRI_MAX, r1
   224c0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224c4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   224c8:	b131      	cbz	r1, 224d8 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   224ca:	2100      	movs	r1, #0
   224cc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   224d0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224d4:	2101      	movs	r1, #1
   224d6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   224d8:	f382 8811 	msr	BASEPRI, r2
   224dc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224e0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   224e4:	2b00      	cmp	r3, #0
   224e6:	f43f af1e 	beq.w	22326 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   224ea:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   224ee:	025a      	lsls	r2, r3, #9
   224f0:	f57f af19 	bpl.w	22326 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   224f4:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   224f6:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   224f8:	e9d3 7300 	ldrd	r7, r3, [r3]
   224fc:	06db      	lsls	r3, r3, #27
   224fe:	d46b      	bmi.n	225d8 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   22500:	68eb      	ldr	r3, [r5, #12]
   22502:	689b      	ldr	r3, [r3, #8]
   22504:	2b00      	cmp	r3, #0
   22506:	f43f af0e 	beq.w	22326 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   2250a:	f04f 0320 	mov.w	r3, #32
   2250e:	f3ef 8211 	mrs	r2, BASEPRI
   22512:	f383 8812 	msr	BASEPRI_MAX, r3
   22516:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   2251a:	68eb      	ldr	r3, [r5, #12]
   2251c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   22520:	2900      	cmp	r1, #0
   22522:	bfac      	ite	ge
   22524:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   22528:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   2252c:	f382 8811 	msr	BASEPRI, r2
   22530:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   22534:	68eb      	ldr	r3, [r5, #12]
   22536:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   2253a:	2a00      	cmp	r2, #0
   2253c:	d059      	beq.n	225f2 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   2253e:	f04f 0320 	mov.w	r3, #32
   22542:	f3ef 8611 	mrs	r6, BASEPRI
   22546:	f383 8812 	msr	BASEPRI_MAX, r3
   2254a:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   2254e:	4629      	mov	r1, r5
   22550:	4620      	mov	r0, r4
   22552:	f00d fad5 	bl	2fb00 <start_tx_locked>
	__asm__ volatile(
   22556:	f386 8811 	msr	BASEPRI, r6
   2255a:	f3bf 8f6f 	isb	sy
				return;
   2255e:	e6e2      	b.n	22326 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   22560:	2601      	movs	r6, #1
   22562:	e702      	b.n	2236a <uarte_nrfx_isr_async+0x6e>
   22564:	2602      	movs	r6, #2
   22566:	e700      	b.n	2236a <uarte_nrfx_isr_async+0x6e>
   22568:	2604      	movs	r6, #4
   2256a:	e6fe      	b.n	2236a <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   2256c:	4620      	mov	r0, r4
   2256e:	3158      	adds	r1, #88	; 0x58
   22570:	f00d f9a7 	bl	2f8c2 <rx_buf_release>
	__asm__ volatile(
   22574:	f04f 0320 	mov.w	r3, #32
   22578:	f3ef 8111 	mrs	r1, BASEPRI
   2257c:	f383 8812 	msr	BASEPRI_MAX, r3
   22580:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   22584:	68f3      	ldr	r3, [r6, #12]
   22586:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   22588:	b1f2      	cbz	r2, 225c8 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   2258a:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   2258c:	68f3      	ldr	r3, [r6, #12]
   2258e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   22590:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   22592:	2300      	movs	r3, #0
   22594:	68f2      	ldr	r2, [r6, #12]
   22596:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   22598:	68f2      	ldr	r2, [r6, #12]
   2259a:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   2259c:	68f2      	ldr	r2, [r6, #12]
   2259e:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   225a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   225a4:	b90b      	cbnz	r3, 225aa <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   225a6:	2301      	movs	r3, #1
   225a8:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   225aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   225ae:	f023 0320 	bic.w	r3, r3, #32
   225b2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   225b6:	f381 8811 	msr	BASEPRI, r1
   225ba:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   225be:	2200      	movs	r2, #0
   225c0:	68f3      	ldr	r3, [r6, #12]
   225c2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   225c6:	e70e      	b.n	223e6 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   225c8:	2301      	movs	r3, #1
   225ca:	607b      	str	r3, [r7, #4]
}
   225cc:	e7f3      	b.n	225b6 <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   225ce:	4611      	mov	r1, r2
   225d0:	6860      	ldr	r0, [r4, #4]
   225d2:	f00d fa26 	bl	2fa22 <rx_flush.isra.0>
   225d6:	e759      	b.n	2248c <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   225d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   225dc:	2101      	movs	r1, #1
   225de:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   225e2:	4620      	mov	r0, r4
   225e4:	f00d fa52 	bl	2fa8c <async_uart_release>
		if (!data->async->tx_size) {
   225e8:	68eb      	ldr	r3, [r5, #12]
   225ea:	68db      	ldr	r3, [r3, #12]
   225ec:	2b00      	cmp	r3, #0
   225ee:	d187      	bne.n	22500 <uarte_nrfx_isr_async+0x204>
   225f0:	e699      	b.n	22326 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   225f2:	6899      	ldr	r1, [r3, #8]
   225f4:	691a      	ldr	r2, [r3, #16]
   225f6:	4291      	cmp	r1, r2
   225f8:	d00c      	beq.n	22614 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   225fa:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   225fc:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   225fe:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   22600:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   22602:	d128      	bne.n	22656 <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   22604:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   22606:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   22608:	f00d f9f3 	bl	2f9f2 <setup_tx_cache>
   2260c:	2800      	cmp	r0, #0
   2260e:	d196      	bne.n	2253e <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   22610:	68eb      	ldr	r3, [r5, #12]
   22612:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   22614:	68e8      	ldr	r0, [r5, #12]
   22616:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   22618:	f00e fed3 	bl	313c2 <z_impl_k_timer_stop>
	struct uart_event evt = {
   2261c:	2214      	movs	r2, #20
   2261e:	2100      	movs	r1, #0
   22620:	a803      	add	r0, sp, #12
   22622:	f00f f8ae 	bl	31782 <memset>
		.data.tx.buf = data->async->tx_buf,
   22626:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   22628:	4620      	mov	r0, r4
	struct uart_event evt = {
   2262a:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   2262c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2262e:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   22632:	68db      	ldr	r3, [r3, #12]
   22634:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   22636:	bf1c      	itt	ne
   22638:	2301      	movne	r3, #1
   2263a:	f88d 300c 	strbne.w	r3, [sp, #12]
   2263e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   22642:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   22646:	2300      	movs	r3, #0
   22648:	68ea      	ldr	r2, [r5, #12]
   2264a:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   2264c:	68ea      	ldr	r2, [r5, #12]
   2264e:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   22650:	f00d f917 	bl	2f882 <user_callback>
   22654:	e667      	b.n	22326 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   22656:	4616      	mov	r6, r2
   22658:	e7dc      	b.n	22614 <uarte_nrfx_isr_async+0x318>
   2265a:	bf00      	nop
   2265c:	000f423f 	.word	0x000f423f
   22660:	000f4240 	.word	0x000f4240

00022664 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   22664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   22666:	7e01      	ldrb	r1, [r0, #24]
   22668:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   2266a:	2902      	cmp	r1, #2
   2266c:	d014      	beq.n	22698 <bt_rpmsg_send+0x34>
   2266e:	2904      	cmp	r1, #4
   22670:	d011      	beq.n	22696 <bt_rpmsg_send+0x32>
   22672:	b1f9      	cbz	r1, 226b4 <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   22674:	4b10      	ldr	r3, [pc, #64]	; (226b8 <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   22676:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   22678:	9302      	str	r3, [sp, #8]
   2267a:	2300      	movs	r3, #0
   2267c:	2201      	movs	r2, #1
   2267e:	4618      	mov	r0, r3
   22680:	e9cd 3300 	strd	r3, r3, [sp]
   22684:	490d      	ldr	r1, [pc, #52]	; (226bc <bt_rpmsg_send+0x58>)
   22686:	f00d fb6a 	bl	2fd5e <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   2268a:	4620      	mov	r0, r4
   2268c:	f7fd ff08 	bl	204a0 <net_buf_unref>
	return 0;
}
   22690:	2000      	movs	r0, #0
   22692:	b004      	add	sp, #16
   22694:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   22696:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   22698:	f104 000c 	add.w	r0, r4, #12
   2269c:	f00c fe58 	bl	2f350 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   226a0:	8a22      	ldrh	r2, [r4, #16]
   226a2:	68e1      	ldr	r1, [r4, #12]
   226a4:	4806      	ldr	r0, [pc, #24]	; (226c0 <bt_rpmsg_send+0x5c>)
   226a6:	f7ed fe33 	bl	10310 <ipc_service_send>
	if (err < 0) {
   226aa:	2800      	cmp	r0, #0
   226ac:	daed      	bge.n	2268a <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   226ae:	4b05      	ldr	r3, [pc, #20]	; (226c4 <bt_rpmsg_send+0x60>)
   226b0:	9003      	str	r0, [sp, #12]
   226b2:	e7e1      	b.n	22678 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   226b4:	2101      	movs	r1, #1
   226b6:	e7ef      	b.n	22698 <bt_rpmsg_send+0x34>
   226b8:	00038003 	.word	0x00038003
   226bc:	00032ef8 	.word	0x00032ef8
   226c0:	20030b5c 	.word	0x20030b5c
   226c4:	00038013 	.word	0x00038013

000226c8 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   226c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   226ca:	4809      	ldr	r0, [pc, #36]	; (226f0 <bt_rpmsg_init+0x28>)
   226cc:	f7f8 f898 	bl	1a800 <bt_hci_driver_register>
	if (err < 0) {
   226d0:	1e04      	subs	r4, r0, #0
   226d2:	da0a      	bge.n	226ea <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   226d4:	4b07      	ldr	r3, [pc, #28]	; (226f4 <bt_rpmsg_init+0x2c>)
   226d6:	2201      	movs	r2, #1
   226d8:	9302      	str	r3, [sp, #8]
   226da:	2300      	movs	r3, #0
   226dc:	4906      	ldr	r1, [pc, #24]	; (226f8 <bt_rpmsg_init+0x30>)
   226de:	4618      	mov	r0, r3
   226e0:	e9cd 3300 	strd	r3, r3, [sp]
   226e4:	9403      	str	r4, [sp, #12]
   226e6:	f00d fb3a 	bl	2fd5e <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   226ea:	4620      	mov	r0, r4
   226ec:	b004      	add	sp, #16
   226ee:	bd10      	pop	{r4, pc}
   226f0:	00034040 	.word	0x00034040
   226f4:	0003802b 	.word	0x0003802b
   226f8:	00032ef8 	.word	0x00032ef8

000226fc <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   226fc:	4801      	ldr	r0, [pc, #4]	; (22704 <hci_ept_bound+0x8>)
   226fe:	f003 b971 	b.w	259e4 <z_impl_k_sem_give>
   22702:	bf00      	nop
   22704:	20008d18 	.word	0x20008d18

00022708 <bt_rpmsg_open>:
{
   22708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   2270a:	4816      	ldr	r0, [pc, #88]	; (22764 <bt_rpmsg_open+0x5c>)
   2270c:	f7ed fda2 	bl	10254 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   22710:	4604      	mov	r4, r0
   22712:	b180      	cbz	r0, 22736 <bt_rpmsg_open+0x2e>
   22714:	f110 0f78 	cmn.w	r0, #120	; 0x78
   22718:	d00d      	beq.n	22736 <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   2271a:	4b13      	ldr	r3, [pc, #76]	; (22768 <bt_rpmsg_open+0x60>)
   2271c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   2271e:	9302      	str	r3, [sp, #8]
   22720:	2300      	movs	r3, #0
   22722:	2201      	movs	r2, #1
   22724:	4618      	mov	r0, r3
   22726:	e9cd 3300 	strd	r3, r3, [sp]
   2272a:	4910      	ldr	r1, [pc, #64]	; (2276c <bt_rpmsg_open+0x64>)
   2272c:	f00d fb17 	bl	2fd5e <z_log_msg_runtime_create.constprop.0>
}
   22730:	4620      	mov	r0, r4
   22732:	b004      	add	sp, #16
   22734:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   22736:	4a0e      	ldr	r2, [pc, #56]	; (22770 <bt_rpmsg_open+0x68>)
   22738:	490e      	ldr	r1, [pc, #56]	; (22774 <bt_rpmsg_open+0x6c>)
   2273a:	480a      	ldr	r0, [pc, #40]	; (22764 <bt_rpmsg_open+0x5c>)
   2273c:	f7ed fdb6 	bl	102ac <ipc_service_register_endpoint>
	if (err) {
   22740:	4604      	mov	r4, r0
   22742:	b110      	cbz	r0, 2274a <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   22744:	4b0c      	ldr	r3, [pc, #48]	; (22778 <bt_rpmsg_open+0x70>)
   22746:	9003      	str	r0, [sp, #12]
   22748:	e7e9      	b.n	2271e <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   2274a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2274e:	2300      	movs	r3, #0
   22750:	480a      	ldr	r0, [pc, #40]	; (2277c <bt_rpmsg_open+0x74>)
   22752:	f003 f96d 	bl	25a30 <z_impl_k_sem_take>
	if (err) {
   22756:	4604      	mov	r4, r0
   22758:	2800      	cmp	r0, #0
   2275a:	d0e9      	beq.n	22730 <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   2275c:	4b08      	ldr	r3, [pc, #32]	; (22780 <bt_rpmsg_open+0x78>)
   2275e:	9003      	str	r0, [sp, #12]
   22760:	e7dd      	b.n	2271e <bt_rpmsg_open+0x16>
   22762:	bf00      	nop
   22764:	00032890 	.word	0x00032890
   22768:	00038055 	.word	0x00038055
   2276c:	00032ef8 	.word	0x00032ef8
   22770:	20008718 	.word	0x20008718
   22774:	20030b5c 	.word	0x20030b5c
   22778:	00038085 	.word	0x00038085
   2277c:	20008d18 	.word	0x20008d18
   22780:	000380a9 	.word	0x000380a9

00022784 <hci_ept_recv>:
{
   22784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22788:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   2278a:	7800      	ldrb	r0, [r0, #0]
{
   2278c:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   2278e:	2804      	cmp	r0, #4
{
   22790:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   22792:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   22796:	d009      	beq.n	227ac <hci_ept_recv+0x28>
   22798:	2805      	cmp	r0, #5
   2279a:	f000 8099 	beq.w	228d0 <hci_ept_recv+0x14c>
   2279e:	2802      	cmp	r0, #2
   227a0:	f040 80bd 	bne.w	2291e <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   227a4:	2b03      	cmp	r3, #3
   227a6:	d867      	bhi.n	22878 <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   227a8:	4b63      	ldr	r3, [pc, #396]	; (22938 <hci_ept_recv+0x1b4>)
   227aa:	e002      	b.n	227b2 <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   227ac:	2b01      	cmp	r3, #1
   227ae:	d80c      	bhi.n	227ca <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   227b0:	4b62      	ldr	r3, [pc, #392]	; (2293c <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   227b2:	9302      	str	r3, [sp, #8]
   227b4:	2300      	movs	r3, #0
   227b6:	2201      	movs	r2, #1
   227b8:	4618      	mov	r0, r3
   227ba:	e9cd 3300 	strd	r3, r3, [sp]
   227be:	4960      	ldr	r1, [pc, #384]	; (22940 <hci_ept_recv+0x1bc>)
   227c0:	f00d facd 	bl	2fd5e <z_log_msg_runtime_create.constprop.0>
}
   227c4:	b009      	add	sp, #36	; 0x24
   227c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   227ca:	7873      	ldrb	r3, [r6, #1]
   227cc:	2b3e      	cmp	r3, #62	; 0x3e
   227ce:	d136      	bne.n	2283e <hci_ept_recv+0xba>
		switch (subevt_type) {
   227d0:	78f7      	ldrb	r7, [r6, #3]
   227d2:	1ebb      	subs	r3, r7, #2
   227d4:	425f      	negs	r7, r3
   227d6:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   227d8:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   227dc:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   227de:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   227e2:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   227e6:	d12f      	bne.n	22848 <hci_ept_recv+0xc4>
   227e8:	b35f      	cbz	r7, 22842 <hci_ept_recv+0xbe>
   227ea:	f04f 0800 	mov.w	r8, #0
   227ee:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   227f2:	f8df b150 	ldr.w	fp, [pc, #336]	; 22944 <hci_ept_recv+0x1c0>
   227f6:	f8df a148 	ldr.w	sl, [pc, #328]	; 22940 <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   227fa:	4642      	mov	r2, r8
   227fc:	464b      	mov	r3, r9
   227fe:	4639      	mov	r1, r7
   22800:	f89d 001c 	ldrb.w	r0, [sp, #28]
   22804:	f7f6 fdd6 	bl	193b4 <bt_buf_get_evt>
		if (!buf) {
   22808:	4604      	mov	r4, r0
   2280a:	b1f8      	cbz	r0, 2284c <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2280c:	f100 070c 	add.w	r7, r0, #12
   22810:	2202      	movs	r2, #2
   22812:	a907      	add	r1, sp, #28
   22814:	4638      	mov	r0, r7
   22816:	f00c fd82 	bl	2f31e <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   2281a:	4638      	mov	r0, r7
   2281c:	f00c fdbd 	bl	2f39a <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   22820:	4285      	cmp	r5, r0
   22822:	d91e      	bls.n	22862 <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   22824:	4b48      	ldr	r3, [pc, #288]	; (22948 <hci_ept_recv+0x1c4>)
   22826:	e9cd 5003 	strd	r5, r0, [sp, #12]
   2282a:	9302      	str	r3, [sp, #8]
   2282c:	2300      	movs	r3, #0
   2282e:	2201      	movs	r2, #1
   22830:	4618      	mov	r0, r3
   22832:	e9cd 3300 	strd	r3, r3, [sp]
   22836:	4942      	ldr	r1, [pc, #264]	; (22940 <hci_ept_recv+0x1bc>)
   22838:	f00d fa91 	bl	2fd5e <z_log_msg_runtime_create.constprop.0>
   2283c:	e03c      	b.n	228b8 <hci_ept_recv+0x134>
			return false;
   2283e:	2700      	movs	r7, #0
   22840:	e7ca      	b.n	227d8 <hci_ept_recv+0x54>
   22842:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   22846:	e7d2      	b.n	227ee <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   22848:	4b40      	ldr	r3, [pc, #256]	; (2294c <hci_ept_recv+0x1c8>)
   2284a:	e7b2      	b.n	227b2 <hci_ept_recv+0x2e>
			if (discardable) {
   2284c:	2f00      	cmp	r7, #0
   2284e:	d1b9      	bne.n	227c4 <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   22850:	463b      	mov	r3, r7
   22852:	2202      	movs	r2, #2
   22854:	4651      	mov	r1, sl
   22856:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   2285a:	9700      	str	r7, [sp, #0]
   2285c:	f00d fa7f 	bl	2fd5e <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   22860:	e7cb      	b.n	227fa <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22862:	462a      	mov	r2, r5
   22864:	1cf1      	adds	r1, r6, #3
   22866:	4638      	mov	r0, r7
   22868:	f00c fd59 	bl	2f31e <net_buf_simple_add_mem>
		bt_recv(buf);
   2286c:	4620      	mov	r0, r4
}
   2286e:	b009      	add	sp, #36	; 0x24
   22870:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   22874:	f7f7 bf94 	b.w	1a7a0 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   22878:	2200      	movs	r2, #0
   2287a:	2300      	movs	r3, #0
   2287c:	2003      	movs	r0, #3
   2287e:	f7f6 fd69 	bl	19354 <bt_buf_get_rx>
	if (buf) {
   22882:	4604      	mov	r4, r0
   22884:	b1e0      	cbz	r0, 228c0 <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   22886:	f8d6 3001 	ldr.w	r3, [r6, #1]
   2288a:	f100 070c 	add.w	r7, r0, #12
   2288e:	2204      	movs	r2, #4
   22890:	4638      	mov	r0, r7
   22892:	a907      	add	r1, sp, #28
   22894:	9307      	str	r3, [sp, #28]
   22896:	f00c fd42 	bl	2f31e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   2289a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   2289e:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   228a0:	429d      	cmp	r5, r3
   228a2:	d034      	beq.n	2290e <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   228a4:	4b2a      	ldr	r3, [pc, #168]	; (22950 <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   228a6:	9302      	str	r3, [sp, #8]
   228a8:	2300      	movs	r3, #0
   228aa:	2201      	movs	r2, #1
   228ac:	4618      	mov	r0, r3
   228ae:	e9cd 3300 	strd	r3, r3, [sp]
   228b2:	4923      	ldr	r1, [pc, #140]	; (22940 <hci_ept_recv+0x1bc>)
   228b4:	f00d fa53 	bl	2fd5e <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   228b8:	4620      	mov	r0, r4
   228ba:	f7fd fdf1 	bl	204a0 <net_buf_unref>
	if (buf) {
   228be:	e781      	b.n	227c4 <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   228c0:	4b24      	ldr	r3, [pc, #144]	; (22954 <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   228c2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   228c6:	2201      	movs	r2, #1
   228c8:	4623      	mov	r3, r4
   228ca:	491d      	ldr	r1, [pc, #116]	; (22940 <hci_ept_recv+0x1bc>)
   228cc:	9400      	str	r4, [sp, #0]
   228ce:	e777      	b.n	227c0 <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   228d0:	2b03      	cmp	r3, #3
   228d2:	d801      	bhi.n	228d8 <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   228d4:	4b20      	ldr	r3, [pc, #128]	; (22958 <hci_ept_recv+0x1d4>)
   228d6:	e76c      	b.n	227b2 <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   228d8:	2200      	movs	r2, #0
   228da:	2300      	movs	r3, #0
   228dc:	f7f6 fd3a 	bl	19354 <bt_buf_get_rx>
	if (buf) {
   228e0:	4604      	mov	r4, r0
   228e2:	b190      	cbz	r0, 2290a <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   228e4:	f8d6 3001 	ldr.w	r3, [r6, #1]
   228e8:	f100 070c 	add.w	r7, r0, #12
   228ec:	2204      	movs	r2, #4
   228ee:	4638      	mov	r0, r7
   228f0:	a907      	add	r1, sp, #28
   228f2:	9307      	str	r3, [sp, #28]
   228f4:	f00c fd13 	bl	2f31e <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   228f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   228fc:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   228fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
   22902:	429d      	cmp	r5, r3
   22904:	d003      	beq.n	2290e <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   22906:	4b15      	ldr	r3, [pc, #84]	; (2295c <hci_ept_recv+0x1d8>)
   22908:	e7cd      	b.n	228a6 <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   2290a:	4b15      	ldr	r3, [pc, #84]	; (22960 <hci_ept_recv+0x1dc>)
   2290c:	e7d9      	b.n	228c2 <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   2290e:	4638      	mov	r0, r7
   22910:	f00c fd43 	bl	2f39a <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   22914:	4285      	cmp	r5, r0
   22916:	d885      	bhi.n	22824 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22918:	462a      	mov	r2, r5
   2291a:	1d71      	adds	r1, r6, #5
   2291c:	e7a3      	b.n	22866 <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   2291e:	4b11      	ldr	r3, [pc, #68]	; (22964 <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   22920:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   22922:	9302      	str	r3, [sp, #8]
   22924:	2300      	movs	r3, #0
   22926:	2201      	movs	r2, #1
   22928:	4618      	mov	r0, r3
   2292a:	e9cd 3300 	strd	r3, r3, [sp]
   2292e:	4904      	ldr	r1, [pc, #16]	; (22940 <hci_ept_recv+0x1bc>)
   22930:	f00d fa15 	bl	2fd5e <z_log_msg_runtime_create.constprop.0>
   22934:	e746      	b.n	227c4 <hci_ept_recv+0x40>
   22936:	bf00      	nop
   22938:	00038166 	.word	0x00038166
   2293c:	000380c9 	.word	0x000380c9
   22940:	00032ef8 	.word	0x00032ef8
   22944:	0003810e 	.word	0x0003810e
   22948:	00038143 	.word	0x00038143
   2294c:	000380ea 	.word	0x000380ea
   22950:	0003819f 	.word	0x0003819f
   22954:	00038185 	.word	0x00038185
   22958:	000381c1 	.word	0x000381c1
   2295c:	000381fa 	.word	0x000381fa
   22960:	000381e0 	.word	0x000381e0
   22964:	0003821c 	.word	0x0003821c

00022968 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22968:	2301      	movs	r3, #1
   2296a:	4083      	lsls	r3, r0
{
   2296c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2296e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22970:	4a0b      	ldr	r2, [pc, #44]	; (229a0 <compare_int_lock+0x38>)
   22972:	e8d2 1fef 	ldaex	r1, [r2]
   22976:	ea01 0504 	and.w	r5, r1, r4
   2297a:	e8c2 5fe6 	stlex	r6, r5, [r2]
   2297e:	2e00      	cmp	r6, #0
   22980:	d1f7      	bne.n	22972 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22986:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   22988:	4806      	ldr	r0, [pc, #24]	; (229a4 <compare_int_lock+0x3c>)
   2298a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   2298e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22992:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   22996:	420b      	tst	r3, r1
}
   22998:	bf14      	ite	ne
   2299a:	2001      	movne	r0, #1
   2299c:	2000      	moveq	r0, #0
   2299e:	bd70      	pop	{r4, r5, r6, pc}
   229a0:	20030b6c 	.word	0x20030b6c
   229a4:	40015000 	.word	0x40015000

000229a8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   229a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   229aa:	491b      	ldr	r1, [pc, #108]	; (22a18 <sys_clock_timeout_handler+0x70>)
{
   229ac:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   229ae:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   229b2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   229b4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   229b8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   229bc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   229be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   229c2:	d30f      	bcc.n	229e4 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   229c4:	f003 feaa 	bl	2671c <sys_clock_announce>
    return p_reg->CC[ch];
   229c8:	00a3      	lsls	r3, r4, #2
   229ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   229ce:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   229d2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   229d6:	4295      	cmp	r5, r2
   229d8:	d11d      	bne.n	22a16 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   229da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   229de:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   229e2:	e012      	b.n	22a0a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   229e4:	4b0d      	ldr	r3, [pc, #52]	; (22a1c <sys_clock_timeout_handler+0x74>)
   229e6:	681b      	ldr	r3, [r3, #0]
   229e8:	0a1a      	lsrs	r2, r3, #8
   229ea:	061b      	lsls	r3, r3, #24
   229ec:	195e      	adds	r6, r3, r5
   229ee:	4b0c      	ldr	r3, [pc, #48]	; (22a20 <sys_clock_timeout_handler+0x78>)
   229f0:	f142 0700 	adc.w	r7, r2, #0
   229f4:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   229f8:	f003 fe90 	bl	2671c <sys_clock_announce>
    return p_reg->CC[ch];
   229fc:	4a09      	ldr	r2, [pc, #36]	; (22a24 <sys_clock_timeout_handler+0x7c>)
   229fe:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   22a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   22a06:	429d      	cmp	r5, r3
   22a08:	d105      	bne.n	22a16 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   22a0e:	4a05      	ldr	r2, [pc, #20]	; (22a24 <sys_clock_timeout_handler+0x7c>)
   22a10:	40a3      	lsls	r3, r4
   22a12:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   22a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22a18:	2000a2f8 	.word	0x2000a2f8
   22a1c:	20030b70 	.word	0x20030b70
   22a20:	2000a300 	.word	0x2000a300
   22a24:	40015000 	.word	0x40015000

00022a28 <compare_int_unlock>:
	if (key) {
   22a28:	b1d9      	cbz	r1, 22a62 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   22a2a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22a2c:	4a0d      	ldr	r2, [pc, #52]	; (22a64 <compare_int_unlock+0x3c>)
   22a2e:	4083      	lsls	r3, r0
   22a30:	e8d2 cfef 	ldaex	ip, [r2]
   22a34:	ea4c 0c03 	orr.w	ip, ip, r3
   22a38:	e8c2 cfe1 	stlex	r1, ip, [r2]
   22a3c:	2900      	cmp	r1, #0
   22a3e:	d1f7      	bne.n	22a30 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   22a44:	4a08      	ldr	r2, [pc, #32]	; (22a68 <compare_int_unlock+0x40>)
   22a46:	4083      	lsls	r3, r0
   22a48:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22a4c:	4b07      	ldr	r3, [pc, #28]	; (22a6c <compare_int_unlock+0x44>)
   22a4e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   22a52:	40c3      	lsrs	r3, r0
   22a54:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22a56:	bf42      	ittt	mi
   22a58:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   22a5c:	4b04      	ldrmi	r3, [pc, #16]	; (22a70 <compare_int_unlock+0x48>)
   22a5e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   22a62:	4770      	bx	lr
   22a64:	20030b6c 	.word	0x20030b6c
   22a68:	40015000 	.word	0x40015000
   22a6c:	20030b64 	.word	0x20030b64
   22a70:	e000e100 	.word	0xe000e100

00022a74 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   22a74:	b2c3      	uxtb	r3, r0
}
   22a76:	4802      	ldr	r0, [pc, #8]	; (22a80 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   22a78:	009b      	lsls	r3, r3, #2
   22a7a:	4418      	add	r0, r3
   22a7c:	4770      	bx	lr
   22a7e:	bf00      	nop
   22a80:	40015140 	.word	0x40015140

00022a84 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   22a84:	4b02      	ldr	r3, [pc, #8]	; (22a90 <z_nrf_rtc_timer_compare_read+0xc>)
   22a86:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   22a8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   22a8e:	4770      	bx	lr
   22a90:	40015000 	.word	0x40015000

00022a94 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22a94:	4b0d      	ldr	r3, [pc, #52]	; (22acc <z_nrf_rtc_timer_read+0x38>)
   22a96:	6818      	ldr	r0, [r3, #0]
   22a98:	0a01      	lsrs	r1, r0, #8
   22a9a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22a9c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   22aa0:	4b0b      	ldr	r3, [pc, #44]	; (22ad0 <z_nrf_rtc_timer_read+0x3c>)
   22aa2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   22aa6:	1818      	adds	r0, r3, r0
   22aa8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22ab0:	d20a      	bcs.n	22ac8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   22ab2:	4b08      	ldr	r3, [pc, #32]	; (22ad4 <z_nrf_rtc_timer_read+0x40>)
   22ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
   22ab8:	4290      	cmp	r0, r2
   22aba:	eb71 0303 	sbcs.w	r3, r1, r3
   22abe:	d203      	bcs.n	22ac8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   22ac0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22ac4:	f141 0100 	adc.w	r1, r1, #0
}
   22ac8:	4770      	bx	lr
   22aca:	bf00      	nop
   22acc:	20030b70 	.word	0x20030b70
   22ad0:	40015000 	.word	0x40015000
   22ad4:	2000a300 	.word	0x2000a300

00022ad8 <compare_set>:
{
   22ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22adc:	b085      	sub	sp, #20
   22ade:	4614      	mov	r4, r2
   22ae0:	461d      	mov	r5, r3
   22ae2:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   22ae4:	f7ff ff40 	bl	22968 <compare_int_lock>
   22ae8:	9002      	str	r0, [sp, #8]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22aea:	f7ff ffd3 	bl	22a94 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   22aee:	42a0      	cmp	r0, r4
   22af0:	eb71 0305 	sbcs.w	r3, r1, r5
   22af4:	d278      	bcs.n	22be8 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   22af6:	4b43      	ldr	r3, [pc, #268]	; (22c04 <compare_set+0x12c>)
   22af8:	1a20      	subs	r0, r4, r0
   22afa:	eb65 0101 	sbc.w	r1, r5, r1
   22afe:	4298      	cmp	r0, r3
   22b00:	f171 0100 	sbcs.w	r1, r1, #0
   22b04:	d27b      	bcs.n	22bfe <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
   22b06:	4b40      	ldr	r3, [pc, #256]	; (22c08 <compare_set+0x130>)
   22b08:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   22b0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   22b10:	429d      	cmp	r5, r3
   22b12:	bf08      	it	eq
   22b14:	4294      	cmpeq	r4, r2
   22b16:	d052      	beq.n	22bbe <compare_set+0xe6>
	return absolute_time & COUNTER_MAX;
   22b18:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
   22b1c:	9301      	str	r3, [sp, #4]
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	uint32_t tick_inc = 2;
   22b22:	f04f 0902 	mov.w	r9, #2
   22b26:	ea4f 0887 	mov.w	r8, r7, lsl #2
   22b2a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   22b2e:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22b32:	40bb      	lsls	r3, r7
    return p_reg->CC[ch];
   22b34:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
	uint32_t cc_val = abs_val & COUNTER_MAX;
   22b38:	9e01      	ldr	r6, [sp, #4]
     return p_reg->COUNTER;
   22b3a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 22c0c <compare_set+0x134>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22b3e:	9303      	str	r3, [sp, #12]
   22b40:	f8da b504 	ldr.w	fp, [sl, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22b44:	eba0 000b 	sub.w	r0, r0, fp
   22b48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22b4c:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   22b50:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   22b52:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
   22b56:	d102      	bne.n	22b5e <compare_set+0x86>
	z_impl_k_busy_wait(usec_to_wait);
   22b58:	2013      	movs	r0, #19
   22b5a:	f00e fc00 	bl	3135e <z_impl_k_busy_wait>
	return (a - b) & COUNTER_MAX;
   22b5e:	f06f 0001 	mvn.w	r0, #1
   22b62:	eba0 000b 	sub.w	r0, r0, fp
   22b66:	4430      	add	r0, r6
   22b68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   22b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
		event_clear(chan);
   22b70:	4638      	mov	r0, r7
			cc_val = now + tick_inc;
   22b72:	bf84      	itt	hi
   22b74:	eb0b 0609 	addhi.w	r6, fp, r9
			tick_inc++;
   22b78:	f109 0901 	addhi.w	r9, r9, #1
		event_clear(chan);
   22b7c:	f00d f922 	bl	2fdc4 <event_clear>
    p_reg->EVTENSET = mask;
   22b80:	9b03      	ldr	r3, [sp, #12]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22b82:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   22b86:	f8ca 3344 	str.w	r3, [sl, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   22b8a:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
   22b8e:	f8da 0504 	ldr.w	r0, [sl, #1284]	; 0x504
	} while ((now2 != now) &&
   22b92:	4583      	cmp	fp, r0
   22b94:	d00a      	beq.n	22bac <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
   22b96:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   22b9a:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   22b9e:	30fe      	adds	r0, #254	; 0xfe
   22ba0:	4430      	add	r0, r6
   22ba2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   22ba6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22baa:	d81b      	bhi.n	22be4 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   22bac:	9b01      	ldr	r3, [sp, #4]
   22bae:	1af6      	subs	r6, r6, r3
   22bb0:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   22bb4:	1936      	adds	r6, r6, r4
   22bb6:	f145 0300 	adc.w	r3, r5, #0
   22bba:	4634      	mov	r4, r6
   22bbc:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   22bbe:	4912      	ldr	r1, [pc, #72]	; (22c08 <compare_set+0x130>)
	cc_data[chan].callback = handler;
   22bc0:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   22bc2:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   22bc6:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   22bca:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   22bcc:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   22bce:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   22bd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22bd2:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   22bd4:	4638      	mov	r0, r7
   22bd6:	9902      	ldr	r1, [sp, #8]
   22bd8:	f7ff ff26 	bl	22a28 <compare_int_unlock>
}
   22bdc:	4620      	mov	r0, r4
   22bde:	b005      	add	sp, #20
   22be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22be4:	4630      	mov	r0, r6
   22be6:	e7ab      	b.n	22b40 <compare_set+0x68>
		atomic_or(&force_isr_mask, BIT(chan));
   22be8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22bea:	4a09      	ldr	r2, [pc, #36]	; (22c10 <compare_set+0x138>)
   22bec:	40bb      	lsls	r3, r7
   22bee:	e8d2 0fef 	ldaex	r0, [r2]
   22bf2:	4318      	orrs	r0, r3
   22bf4:	e8c2 0fe1 	stlex	r1, r0, [r2]
   22bf8:	2900      	cmp	r1, #0
   22bfa:	d0e0      	beq.n	22bbe <compare_set+0xe6>
   22bfc:	e7f7      	b.n	22bee <compare_set+0x116>
			return -EINVAL;
   22bfe:	f06f 0415 	mvn.w	r4, #21
   22c02:	e7e7      	b.n	22bd4 <compare_set+0xfc>
   22c04:	01000001 	.word	0x01000001
   22c08:	2000a2d8 	.word	0x2000a2d8
   22c0c:	40015000 	.word	0x40015000
   22c10:	20030b64 	.word	0x20030b64

00022c14 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   22c14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   22c16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   22c1a:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22c1c:	f04f 30ff 	mov.w	r0, #4294967295
   22c20:	f04f 31ff 	mov.w	r1, #4294967295
   22c24:	4c19      	ldr	r4, [pc, #100]	; (22c8c <sys_clock_driver_init+0x78>)
   22c26:	4b1a      	ldr	r3, [pc, #104]	; (22c90 <sys_clock_driver_init+0x7c>)
   22c28:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   22c2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   22c30:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   22c34:	e9c3 0106 	strd	r0, r1, [r3, #24]
   22c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   22c3c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22c3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   22c42:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   22c46:	4b13      	ldr	r3, [pc, #76]	; (22c94 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22c48:	2101      	movs	r1, #1
   22c4a:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   22c4e:	2015      	movs	r0, #21
   22c50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22c54:	462a      	mov	r2, r5
   22c56:	f7ee fa63 	bl	11120 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22c5a:	2015      	movs	r0, #21
   22c5c:	f7ee fa30 	bl	110c0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22c60:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   22c62:	2203      	movs	r2, #3
   22c64:	60a3      	str	r3, [r4, #8]
   22c66:	6023      	str	r3, [r4, #0]
   22c68:	4b0b      	ldr	r3, [pc, #44]	; (22c98 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22c6a:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   22c6c:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   22c6e:	4b0b      	ldr	r3, [pc, #44]	; (22c9c <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22c70:	4a0b      	ldr	r2, [pc, #44]	; (22ca0 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   22c72:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22c74:	4b0b      	ldr	r3, [pc, #44]	; (22ca4 <sys_clock_driver_init+0x90>)
   22c76:	9501      	str	r5, [sp, #4]
   22c78:	9300      	str	r3, [sp, #0]
   22c7a:	2300      	movs	r3, #0
   22c7c:	f7ff ff2c 	bl	22ad8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22c80:	4630      	mov	r0, r6
   22c82:	f7fd ffd3 	bl	20c2c <z_nrf_clock_control_lf_on>

	return 0;
}
   22c86:	4628      	mov	r0, r5
   22c88:	b002      	add	sp, #8
   22c8a:	bd70      	pop	{r4, r5, r6, pc}
   22c8c:	40015000 	.word	0x40015000
   22c90:	2000a2d8 	.word	0x2000a2d8
   22c94:	e000e100 	.word	0xe000e100
   22c98:	20030b6c 	.word	0x20030b6c
   22c9c:	20030b68 	.word	0x20030b68
   22ca0:	007fffff 	.word	0x007fffff
   22ca4:	000229a9 	.word	0x000229a9

00022ca8 <rtc_nrf_isr>:
{
   22ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   22cac:	4b3c      	ldr	r3, [pc, #240]	; (22da0 <rtc_nrf_isr+0xf8>)
   22cae:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   22cb2:	0792      	lsls	r2, r2, #30
   22cb4:	d50b      	bpl.n	22cce <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22cb6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   22cba:	b142      	cbz	r2, 22cce <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22cbc:	2200      	movs	r2, #0
   22cbe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   22cc2:	4a38      	ldr	r2, [pc, #224]	; (22da4 <rtc_nrf_isr+0xfc>)
   22cc4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   22cc8:	6813      	ldr	r3, [r2, #0]
   22cca:	3301      	adds	r3, #1
   22ccc:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22cce:	4d36      	ldr	r5, [pc, #216]	; (22da8 <rtc_nrf_isr+0x100>)
   22cd0:	2400      	movs	r4, #0
   22cd2:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   22cd4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   22cd8:	4e31      	ldr	r6, [pc, #196]	; (22da0 <rtc_nrf_isr+0xf8>)
	__asm__ volatile(
   22cda:	f04f 0320 	mov.w	r3, #32
   22cde:	f3ef 8111 	mrs	r1, BASEPRI
   22ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   22ce6:	f3bf 8f6f 	isb	sy
   22cea:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   22cee:	fa0a f904 	lsl.w	r9, sl, r4
   22cf2:	ea19 0f03 	tst.w	r9, r3
   22cf6:	d10a      	bne.n	22d0e <rtc_nrf_isr+0x66>
	__asm__ volatile(
   22cf8:	f381 8811 	msr	BASEPRI, r1
   22cfc:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22d00:	3510      	adds	r5, #16
   22d02:	b114      	cbz	r4, 22d0a <rtc_nrf_isr+0x62>
}
   22d04:	b003      	add	sp, #12
   22d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22d0a:	2401      	movs	r4, #1
   22d0c:	e7e5      	b.n	22cda <rtc_nrf_isr+0x32>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   22d0e:	2301      	movs	r3, #1
   22d10:	40a3      	lsls	r3, r4
   22d12:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22d14:	4a25      	ldr	r2, [pc, #148]	; (22dac <rtc_nrf_isr+0x104>)
   22d16:	e8d2 0fef 	ldaex	r0, [r2]
   22d1a:	ea00 0c03 	and.w	ip, r0, r3
   22d1e:	e8c2 cfee 	stlex	lr, ip, [r2]
   22d22:	f1be 0f00 	cmp.w	lr, #0
   22d26:	d1f6      	bne.n	22d16 <rtc_nrf_isr+0x6e>
   22d28:	b920      	cbnz	r0, 22d34 <rtc_nrf_isr+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22d2a:	4b21      	ldr	r3, [pc, #132]	; (22db0 <rtc_nrf_isr+0x108>)
   22d2c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   22d30:	2b00      	cmp	r3, #0
   22d32:	d0e1      	beq.n	22cf8 <rtc_nrf_isr+0x50>
			event_clear(chan);
   22d34:	4620      	mov	r0, r4
   22d36:	f00d f845 	bl	2fdc4 <event_clear>
   22d3a:	f381 8811 	msr	BASEPRI, r1
   22d3e:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   22d42:	f7ff fea7 	bl	22a94 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   22d46:	f04f 0320 	mov.w	r3, #32
   22d4a:	f3ef 8c11 	mrs	ip, BASEPRI
   22d4e:	f383 8812 	msr	BASEPRI_MAX, r3
   22d52:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   22d56:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   22d5a:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   22d5e:	4290      	cmp	r0, r2
   22d60:	4199      	sbcs	r1, r3
   22d62:	d204      	bcs.n	22d6e <rtc_nrf_isr+0xc6>
	__asm__ volatile(
   22d64:	f38c 8811 	msr	BASEPRI, ip
   22d68:	f3bf 8f6f 	isb	sy
		if (handler) {
   22d6c:	e7c8      	b.n	22d00 <rtc_nrf_isr+0x58>
			cc_data[chan].callback = NULL;
   22d6e:	2100      	movs	r1, #0
			user_context = cc_data[chan].user_context;
   22d70:	e9d5 8b00 	ldrd	r8, fp, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22d74:	f04f 30ff 	mov.w	r0, #4294967295
			cc_data[chan].callback = NULL;
   22d78:	6029      	str	r1, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22d7a:	f04f 31ff 	mov.w	r1, #4294967295
   22d7e:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   22d82:	4907      	ldr	r1, [pc, #28]	; (22da0 <rtc_nrf_isr+0xf8>)
   22d84:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   22d88:	f38c 8811 	msr	BASEPRI, ip
   22d8c:	f3bf 8f6f 	isb	sy
		if (handler) {
   22d90:	f1b8 0f00 	cmp.w	r8, #0
   22d94:	d0b4      	beq.n	22d00 <rtc_nrf_isr+0x58>
			handler(chan, expire_time, user_context);
   22d96:	4620      	mov	r0, r4
   22d98:	f8cd b000 	str.w	fp, [sp]
   22d9c:	47c0      	blx	r8
   22d9e:	e7af      	b.n	22d00 <rtc_nrf_isr+0x58>
   22da0:	40015000 	.word	0x40015000
   22da4:	20030b70 	.word	0x20030b70
   22da8:	2000a2d8 	.word	0x2000a2d8
   22dac:	20030b64 	.word	0x20030b64
   22db0:	40015140 	.word	0x40015140

00022db4 <z_nrf_rtc_timer_chan_alloc>:
{
   22db4:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   22db6:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   22db8:	4b0c      	ldr	r3, [pc, #48]	; (22dec <z_nrf_rtc_timer_chan_alloc+0x38>)
   22dba:	6818      	ldr	r0, [r3, #0]
   22dbc:	b190      	cbz	r0, 22de4 <z_nrf_rtc_timer_chan_alloc+0x30>
   22dbe:	fab0 f080 	clz	r0, r0
   22dc2:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   22dc6:	fa04 f100 	lsl.w	r1, r4, r0
   22dca:	43c9      	mvns	r1, r1
   22dcc:	e8d3 2fef 	ldaex	r2, [r3]
   22dd0:	ea02 0501 	and.w	r5, r2, r1
   22dd4:	e8c3 5fe6 	stlex	r6, r5, [r3]
   22dd8:	2e00      	cmp	r6, #0
   22dda:	d1f7      	bne.n	22dcc <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   22ddc:	40c2      	lsrs	r2, r0
   22dde:	07d2      	lsls	r2, r2, #31
   22de0:	d5eb      	bpl.n	22dba <z_nrf_rtc_timer_chan_alloc+0x6>
}
   22de2:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   22de4:	f06f 000b 	mvn.w	r0, #11
   22de8:	e7fb      	b.n	22de2 <z_nrf_rtc_timer_chan_alloc+0x2e>
   22dea:	bf00      	nop
   22dec:	20030b68 	.word	0x20030b68

00022df0 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   22df0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22df2:	4a05      	ldr	r2, [pc, #20]	; (22e08 <z_nrf_rtc_timer_chan_free+0x18>)
   22df4:	4083      	lsls	r3, r0
   22df6:	e8d2 0fef 	ldaex	r0, [r2]
   22dfa:	4318      	orrs	r0, r3
   22dfc:	e8c2 0fe1 	stlex	r1, r0, [r2]
   22e00:	2900      	cmp	r1, #0
   22e02:	d1f8      	bne.n	22df6 <z_nrf_rtc_timer_chan_free+0x6>
}
   22e04:	4770      	bx	lr
   22e06:	bf00      	nop
   22e08:	20030b68 	.word	0x20030b68

00022e0c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22e0c:	1c43      	adds	r3, r0, #1
{
   22e0e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22e10:	d020      	beq.n	22e54 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22e12:	2801      	cmp	r0, #1
   22e14:	dd20      	ble.n	22e58 <sys_clock_set_timeout+0x4c>
   22e16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22e1a:	da1f      	bge.n	22e5c <sys_clock_set_timeout+0x50>
   22e1c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22e1e:	f7ff fe39 	bl	22a94 <z_nrf_rtc_timer_read>
   22e22:	4b0f      	ldr	r3, [pc, #60]	; (22e60 <sys_clock_set_timeout+0x54>)
   22e24:	e9d3 1300 	ldrd	r1, r3, [r3]
   22e28:	1a42      	subs	r2, r0, r1
		ticks = 0;
   22e2a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   22e2e:	bf28      	it	cs
   22e30:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   22e32:	480c      	ldr	r0, [pc, #48]	; (22e64 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   22e34:	3201      	adds	r2, #1
   22e36:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   22e38:	4282      	cmp	r2, r0
   22e3a:	bf28      	it	cs
   22e3c:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   22e3e:	2000      	movs	r0, #0
   22e40:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22e42:	4909      	ldr	r1, [pc, #36]	; (22e68 <sys_clock_set_timeout+0x5c>)
   22e44:	9001      	str	r0, [sp, #4]
   22e46:	9100      	str	r1, [sp, #0]
   22e48:	f143 0300 	adc.w	r3, r3, #0
   22e4c:	f7ff fe44 	bl	22ad8 <compare_set>
}
   22e50:	b002      	add	sp, #8
   22e52:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22e54:	4803      	ldr	r0, [pc, #12]	; (22e64 <sys_clock_set_timeout+0x58>)
   22e56:	e7e1      	b.n	22e1c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22e58:	2400      	movs	r4, #0
   22e5a:	e7e0      	b.n	22e1e <sys_clock_set_timeout+0x12>
   22e5c:	4c01      	ldr	r4, [pc, #4]	; (22e64 <sys_clock_set_timeout+0x58>)
   22e5e:	e7de      	b.n	22e1e <sys_clock_set_timeout+0x12>
   22e60:	2000a2f8 	.word	0x2000a2f8
   22e64:	007fffff 	.word	0x007fffff
   22e68:	000229a9 	.word	0x000229a9

00022e6c <sys_clock_elapsed>:
{
   22e6c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   22e6e:	f7ff fe11 	bl	22a94 <z_nrf_rtc_timer_read>
   22e72:	4b02      	ldr	r3, [pc, #8]	; (22e7c <sys_clock_elapsed+0x10>)
   22e74:	681b      	ldr	r3, [r3, #0]
}
   22e76:	1ac0      	subs	r0, r0, r3
   22e78:	bd08      	pop	{r3, pc}
   22e7a:	bf00      	nop
   22e7c:	2000a2f8 	.word	0x2000a2f8

00022e80 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22e80:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   22e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
   22e88:	4e52      	ldr	r6, [pc, #328]	; (22fd4 <pinctrl_configure_pins+0x154>)
   22e8a:	4f53      	ldr	r7, [pc, #332]	; (22fd8 <pinctrl_configure_pins+0x158>)
   22e8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   22e90:	4281      	cmp	r1, r0
   22e92:	d102      	bne.n	22e9a <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   22e94:	2000      	movs	r0, #0
}
   22e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   22e9a:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   22e9c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   22ea0:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   22ea4:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   22ea6:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   22eaa:	bf08      	it	eq
   22eac:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   22eb0:	2c22      	cmp	r4, #34	; 0x22
   22eb2:	f200 808c 	bhi.w	22fce <pinctrl_configure_pins+0x14e>
   22eb6:	e8df f004 	tbb	[pc, r4]
   22eba:	2312      	.short	0x2312
   22ebc:	3e2b4228 	.word	0x3e2b4228
   22ec0:	8a8a8a42 	.word	0x8a8a8a42
   22ec4:	8a72458a 	.word	0x8a72458a
   22ec8:	8a8a8a8a 	.word	0x8a8a8a8a
   22ecc:	8a8a8a8a 	.word	0x8a8a8a8a
   22ed0:	8a8a8a8a 	.word	0x8a8a8a8a
   22ed4:	758a8a8a 	.word	0x758a8a8a
   22ed8:	84817e7b 	.word	0x84817e7b
   22edc:	87          	.byte	0x87
   22edd:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   22ede:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   22ee2:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
   22ee6:	f1b8 0f01 	cmp.w	r8, #1
   22eea:	bf14      	ite	ne
   22eec:	46b6      	movne	lr, r6
   22eee:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
   22ef0:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22ef4:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
   22ef8:	f8ce 4008 	str.w	r4, [lr, #8]
   22efc:	2401      	movs	r4, #1
   22efe:	e002      	b.n	22f06 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
   22f00:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   22f04:	2400      	movs	r4, #0
   22f06:	46a6      	mov	lr, r4
   22f08:	e023      	b.n	22f52 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   22f0a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   22f0e:	e7e8      	b.n	22ee2 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   22f10:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   22f12:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
   22f16:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
   22f1a:	f1b9 0f01 	cmp.w	r9, #1
   22f1e:	bf14      	ite	ne
   22f20:	46b0      	movne	r8, r6
   22f22:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
   22f24:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22f28:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
   22f2c:	f8c8 e00c 	str.w	lr, [r8, #12]
   22f30:	f04f 0e01 	mov.w	lr, #1
   22f34:	e00d      	b.n	22f52 <pinctrl_configure_pins+0xd2>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   22f36:	2401      	movs	r4, #1
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   22f38:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (write != NO_WRITE) {
   22f3c:	e7eb      	b.n	22f16 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   22f3e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   22f42:	e7df      	b.n	22f04 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   22f44:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   22f48:	2d00      	cmp	r5, #0
   22f4a:	d1db      	bne.n	22f04 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   22f4c:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   22f4e:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   22f50:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   22f52:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
   22f56:	f003 091f 	and.w	r9, r3, #31
   22f5a:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   22f5e:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
   22f62:	ea4f 1353 	mov.w	r3, r3, lsr #5
   22f66:	bf1c      	itt	ne
   22f68:	2401      	movne	r4, #1
   22f6a:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
   22f6e:	2b01      	cmp	r3, #1
   22f70:	bf0c      	ite	eq
   22f72:	46b8      	moveq	r8, r7
   22f74:	46b0      	movne	r8, r6
   22f76:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   22f7a:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   22f7e:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
   22f82:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   22f86:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22f88:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
   22f8c:	ea43 030e 	orr.w	r3, r3, lr
   22f90:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   22f94:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
   22f98:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   22f9c:	e778      	b.n	22e90 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   22f9e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   22fa2:	e7d1      	b.n	22f48 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   22fa4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   22fa8:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   22faa:	f04f 0e00 	mov.w	lr, #0
   22fae:	e7d0      	b.n	22f52 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   22fb0:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
			if (write != NO_WRITE) {
   22fb4:	e795      	b.n	22ee2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   22fb6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   22fba:	e7f5      	b.n	22fa8 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   22fbc:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   22fc0:	e7f2      	b.n	22fa8 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   22fc2:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   22fc6:	e7ef      	b.n	22fa8 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   22fc8:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   22fcc:	e7ec      	b.n	22fa8 <pinctrl_configure_pins+0x128>
		switch (NRF_GET_FUN(pins[i])) {
   22fce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22fd2:	e760      	b.n	22e96 <pinctrl_configure_pins+0x16>
   22fd4:	40842500 	.word	0x40842500
   22fd8:	40842800 	.word	0x40842800

00022fdc <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   22fdc:	b510      	push	{r4, lr}
   22fde:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   22fe0:	6902      	ldr	r2, [r0, #16]
{
   22fe2:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   22fe4:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   22fe8:	4924      	ldr	r1, [pc, #144]	; (2307c <mbox_nrf_init+0xa0>)
   22fea:	2000      	movs	r0, #0
   22fec:	f000 ff10 	bl	23e10 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   22ff0:	2200      	movs	r2, #0
   22ff2:	2101      	movs	r1, #1
   22ff4:	202a      	movs	r0, #42	; 0x2a
   22ff6:	f7ee f893 	bl	11120 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   22ffa:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   22ffc:	2284      	movs	r2, #132	; 0x84
   22ffe:	2100      	movs	r1, #0
   23000:	a805      	add	r0, sp, #20
   23002:	f00e fbbe 	bl	31782 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   23006:	6863      	ldr	r3, [r4, #4]
   23008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2300c:	d309      	bcc.n	23022 <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   2300e:	4b1c      	ldr	r3, [pc, #112]	; (23080 <mbox_nrf_init+0xa4>)
   23010:	2202      	movs	r2, #2
   23012:	9302      	str	r3, [sp, #8]
   23014:	2300      	movs	r3, #0
   23016:	491b      	ldr	r1, [pc, #108]	; (23084 <mbox_nrf_init+0xa8>)
   23018:	4618      	mov	r0, r3
   2301a:	e9cd 3300 	strd	r3, r3, [sp]
   2301e:	f00c ff11 	bl	2fe44 <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   23022:	6823      	ldr	r3, [r4, #0]
   23024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   23028:	d309      	bcc.n	2303e <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   2302a:	4b17      	ldr	r3, [pc, #92]	; (23088 <mbox_nrf_init+0xac>)
   2302c:	2202      	movs	r2, #2
   2302e:	9302      	str	r3, [sp, #8]
   23030:	2300      	movs	r3, #0
   23032:	4914      	ldr	r1, [pc, #80]	; (23084 <mbox_nrf_init+0xa8>)
   23034:	4618      	mov	r0, r3
   23036:	e9cd 3300 	strd	r3, r3, [sp]
   2303a:	f00c ff03 	bl	2fe44 <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   2303e:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   23040:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   23042:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23044:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   23046:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23048:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   2304a:	40d9      	lsrs	r1, r3
   2304c:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   2304e:	bf44      	itt	mi
   23050:	fa00 f103 	lslmi.w	r1, r0, r3
   23054:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   23058:	6821      	ldr	r1, [r4, #0]
   2305a:	40d9      	lsrs	r1, r3
   2305c:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   2305e:	bf48      	it	mi
   23060:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23064:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   23068:	bf48      	it	mi
   2306a:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   2306c:	2b10      	cmp	r3, #16
   2306e:	d1ea      	bne.n	23046 <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   23070:	a805      	add	r0, sp, #20
   23072:	f000 fee5 	bl	23e40 <nrfx_ipc_config_load>

	return 0;
}
   23076:	2000      	movs	r0, #0
   23078:	b026      	add	sp, #152	; 0x98
   2307a:	bd10      	pop	{r4, pc}
   2307c:	000230dd 	.word	0x000230dd
   23080:	00038266 	.word	0x00038266
   23084:	00032f90 	.word	0x00032f90
   23088:	00038292 	.word	0x00038292

0002308c <mbox_nrf_send>:
{
   2308c:	b530      	push	{r4, r5, lr}
   2308e:	4605      	mov	r5, r0
   23090:	460c      	mov	r4, r1
   23092:	b085      	sub	sp, #20
	if (msg) {
   23094:	b14a      	cbz	r2, 230aa <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   23096:	4b0f      	ldr	r3, [pc, #60]	; (230d4 <mbox_nrf_send+0x48>)
   23098:	2202      	movs	r2, #2
   2309a:	9302      	str	r3, [sp, #8]
   2309c:	2300      	movs	r3, #0
   2309e:	490e      	ldr	r1, [pc, #56]	; (230d8 <mbox_nrf_send+0x4c>)
   230a0:	4618      	mov	r0, r3
   230a2:	e9cd 3300 	strd	r3, r3, [sp]
   230a6:	f00c fecd 	bl	2fe44 <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   230aa:	2c0f      	cmp	r4, #15
   230ac:	d80f      	bhi.n	230ce <mbox_nrf_send+0x42>
   230ae:	686b      	ldr	r3, [r5, #4]
   230b0:	685b      	ldr	r3, [r3, #4]
   230b2:	40e3      	lsrs	r3, r4
   230b4:	07db      	lsls	r3, r3, #31
   230b6:	d50a      	bpl.n	230ce <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   230b8:	2301      	movs	r3, #1
	return 0;
   230ba:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   230bc:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   230be:	b2e4      	uxtb	r4, r4
   230c0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   230c4:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   230c8:	6023      	str	r3, [r4, #0]
}
   230ca:	b005      	add	sp, #20
   230cc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   230ce:	f06f 0015 	mvn.w	r0, #21
   230d2:	e7fa      	b.n	230ca <mbox_nrf_send+0x3e>
   230d4:	000382be 	.word	0x000382be
   230d8:	00032f90 	.word	0x00032f90

000230dc <mbox_dispatcher>:
{
   230dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   230de:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   230e2:	280f      	cmp	r0, #15
{
   230e4:	4604      	mov	r4, r0
   230e6:	460d      	mov	r5, r1
   230e8:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   230ea:	d803      	bhi.n	230f4 <mbox_dispatcher+0x18>
   230ec:	681b      	ldr	r3, [r3, #0]
   230ee:	40c3      	lsrs	r3, r0
   230f0:	07db      	lsls	r3, r3, #31
   230f2:	d409      	bmi.n	23108 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   230f4:	4b14      	ldr	r3, [pc, #80]	; (23148 <mbox_dispatcher+0x6c>)
   230f6:	2202      	movs	r2, #2
   230f8:	9302      	str	r3, [sp, #8]
   230fa:	2300      	movs	r3, #0
   230fc:	4913      	ldr	r1, [pc, #76]	; (2314c <mbox_dispatcher+0x70>)
   230fe:	4618      	mov	r0, r3
   23100:	e9cd 3300 	strd	r3, r3, [sp]
   23104:	f00c fe9e 	bl	2fe44 <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   23108:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2310c:	40e3      	lsrs	r3, r4
   2310e:	f013 0301 	ands.w	r3, r3, #1
   23112:	d108      	bne.n	23126 <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   23114:	4a0e      	ldr	r2, [pc, #56]	; (23150 <mbox_dispatcher+0x74>)
   23116:	4618      	mov	r0, r3
   23118:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2311c:	490b      	ldr	r1, [pc, #44]	; (2314c <mbox_dispatcher+0x70>)
   2311e:	2202      	movs	r2, #2
   23120:	9300      	str	r3, [sp, #0]
   23122:	f00c fe8f 	bl	2fe44 <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   23126:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2312a:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   2312e:	b145      	cbz	r5, 23142 <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   23130:	2300      	movs	r3, #0
   23132:	4621      	mov	r1, r4
   23134:	4630      	mov	r0, r6
   23136:	46ac      	mov	ip, r5
   23138:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   2313a:	b004      	add	sp, #16
   2313c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   23140:	4760      	bx	ip
}
   23142:	b004      	add	sp, #16
   23144:	bd70      	pop	{r4, r5, r6, pc}
   23146:	bf00      	nop
   23148:	000382d9 	.word	0x000382d9
   2314c:	00032f90 	.word	0x00032f90
   23150:	000382f5 	.word	0x000382f5

00023154 <mbox_nrf_set_enabled>:
{
   23154:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   23156:	290f      	cmp	r1, #15
{
   23158:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   2315a:	6905      	ldr	r5, [r0, #16]
{
   2315c:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   2315e:	d841      	bhi.n	231e4 <mbox_nrf_set_enabled+0x90>
   23160:	6843      	ldr	r3, [r0, #4]
   23162:	681b      	ldr	r3, [r3, #0]
   23164:	40cb      	lsrs	r3, r1
   23166:	07db      	lsls	r3, r3, #31
   23168:	d53c      	bpl.n	231e4 <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   2316a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2316e:	40cb      	lsrs	r3, r1
   23170:	f003 0301 	and.w	r3, r3, #1
   23174:	b91a      	cbnz	r2, 2317e <mbox_nrf_set_enabled+0x2a>
   23176:	bb0b      	cbnz	r3, 231bc <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   23178:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2317c:	e030      	b.n	231e0 <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   2317e:	2b00      	cmp	r3, #0
   23180:	d1fa      	bne.n	23178 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   23182:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   23186:	b943      	cbnz	r3, 2319a <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   23188:	4a18      	ldr	r2, [pc, #96]	; (231ec <mbox_nrf_set_enabled+0x98>)
   2318a:	4618      	mov	r0, r3
   2318c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   23190:	4917      	ldr	r1, [pc, #92]	; (231f0 <mbox_nrf_set_enabled+0x9c>)
   23192:	2202      	movs	r2, #2
   23194:	9300      	str	r3, [sp, #0]
   23196:	f00c fe55 	bl	2fe44 <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   2319a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2319e:	b913      	cbnz	r3, 231a6 <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   231a0:	202a      	movs	r0, #42	; 0x2a
   231a2:	f7ed ff8d 	bl	110c0 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   231a6:	2201      	movs	r2, #1
   231a8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   231ac:	40a2      	lsls	r2, r4
   231ae:	4313      	orrs	r3, r2
   231b0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   231b4:	b2e0      	uxtb	r0, r4
   231b6:	f000 fe63 	bl	23e80 <nrfx_ipc_receive_event_enable>
   231ba:	e00a      	b.n	231d2 <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   231bc:	b2c8      	uxtb	r0, r1
   231be:	f000 fe67 	bl	23e90 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   231c2:	2201      	movs	r2, #1
   231c4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   231c8:	40a2      	lsls	r2, r4
   231ca:	ea23 0302 	bic.w	r3, r3, r2
   231ce:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   231d2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   231d6:	b913      	cbnz	r3, 231de <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   231d8:	202a      	movs	r0, #42	; 0x2a
   231da:	f7ed ff7f 	bl	110dc <arch_irq_disable>
	return 0;
   231de:	2000      	movs	r0, #0
}
   231e0:	b005      	add	sp, #20
   231e2:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   231e4:	f06f 0015 	mvn.w	r0, #21
   231e8:	e7fa      	b.n	231e0 <mbox_nrf_set_enabled+0x8c>
   231ea:	bf00      	nop
   231ec:	00038312 	.word	0x00038312
   231f0:	00032f90 	.word	0x00032f90

000231f4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   231f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   231f6:	ab0b      	add	r3, sp, #44	; 0x2c
   231f8:	9305      	str	r3, [sp, #20]
   231fa:	9303      	str	r3, [sp, #12]
   231fc:	4b05      	ldr	r3, [pc, #20]	; (23214 <z_log_msg_runtime_create.constprop.0+0x20>)
   231fe:	2201      	movs	r2, #1
   23200:	9302      	str	r3, [sp, #8]
   23202:	2300      	movs	r3, #0
   23204:	4618      	mov	r0, r3
   23206:	e9cd 3300 	strd	r3, r3, [sp]
   2320a:	f7ec f90f 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2320e:	b007      	add	sp, #28
   23210:	f85d fb04 	ldr.w	pc, [sp], #4
   23214:	0003836f 	.word	0x0003836f

00023218 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   23218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2321a:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   2321c:	f7ec f896 	bl	f34c <z_impl_log_panic>
   23220:	4b06      	ldr	r3, [pc, #24]	; (2323c <k_sys_fatal_error_handler+0x24>)
   23222:	4620      	mov	r0, r4
   23224:	9302      	str	r3, [sp, #8]
   23226:	2201      	movs	r2, #1
   23228:	4623      	mov	r3, r4
   2322a:	e9cd 4400 	strd	r4, r4, [sp]
   2322e:	4904      	ldr	r1, [pc, #16]	; (23240 <k_sys_fatal_error_handler+0x28>)
   23230:	f7ff ffe0 	bl	231f4 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   23234:	4620      	mov	r0, r4
   23236:	f7ee fb75 	bl	11924 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2323a:	bf00      	nop
   2323c:	0003836f 	.word	0x0003836f
   23240:	00032f50 	.word	0x00032f50

00023244 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   23244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23248:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   2324a:	4b15      	ldr	r3, [pc, #84]	; (232a0 <tfm_ns_interface_dispatch+0x5c>)
   2324c:	4604      	mov	r4, r0
   2324e:	f893 8000 	ldrb.w	r8, [r3]
   23252:	460d      	mov	r5, r1
   23254:	4616      	mov	r6, r2
   23256:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   23258:	f1b8 0f00 	cmp.w	r8, #0
   2325c:	d115      	bne.n	2328a <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   2325e:	4668      	mov	r0, sp
   23260:	f008 fad5 	bl	2b80e <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   23264:	463a      	mov	r2, r7
   23266:	4631      	mov	r1, r6
   23268:	4628      	mov	r0, r5
   2326a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2326c:	47a0      	blx	r4
   2326e:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   23270:	4668      	mov	r0, sp
   23272:	f008 facd 	bl	2b810 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   23276:	f1b8 0f00 	cmp.w	r8, #0
   2327a:	d002      	beq.n	23282 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   2327c:	4809      	ldr	r0, [pc, #36]	; (232a4 <tfm_ns_interface_dispatch+0x60>)
   2327e:	f002 fb3f 	bl	25900 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   23282:	4620      	mov	r0, r4
   23284:	b022      	add	sp, #136	; 0x88
   23286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   2328a:	f04f 32ff 	mov.w	r2, #4294967295
   2328e:	f04f 33ff 	mov.w	r3, #4294967295
   23292:	4804      	ldr	r0, [pc, #16]	; (232a4 <tfm_ns_interface_dispatch+0x60>)
   23294:	f002 faba 	bl	2580c <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   23298:	2800      	cmp	r0, #0
   2329a:	d0e0      	beq.n	2325e <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   2329c:	241f      	movs	r4, #31
   2329e:	e7f0      	b.n	23282 <tfm_ns_interface_dispatch+0x3e>
   232a0:	20031e0d 	.word	0x20031e0d
   232a4:	20008c2c 	.word	0x20008c2c

000232a8 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   232a8:	b530      	push	{r4, r5, lr}
   232aa:	b095      	sub	sp, #84	; 0x54
   232ac:	4605      	mov	r5, r0
   232ae:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   232b0:	2230      	movs	r2, #48	; 0x30
   232b2:	2100      	movs	r1, #0
   232b4:	a808      	add	r0, sp, #32
   232b6:	f00e fa64 	bl	31782 <memset>
   232ba:	233f      	movs	r3, #63	; 0x3f
   232bc:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   232be:	ab07      	add	r3, sp, #28
   232c0:	9303      	str	r3, [sp, #12]
   232c2:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   232c4:	9406      	str	r4, [sp, #24]
   232c6:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   232ca:	b154      	cbz	r4, 232e2 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   232cc:	2301      	movs	r3, #1
   232ce:	aa05      	add	r2, sp, #20
   232d0:	9200      	str	r2, [sp, #0]
   232d2:	2100      	movs	r1, #0
   232d4:	4804      	ldr	r0, [pc, #16]	; (232e8 <psa_generate_random+0x40>)
   232d6:	9301      	str	r3, [sp, #4]
   232d8:	aa03      	add	r2, sp, #12
   232da:	f000 f807 	bl	232ec <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   232de:	b015      	add	sp, #84	; 0x54
   232e0:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   232e2:	4620      	mov	r0, r4
   232e4:	e7fb      	b.n	232de <psa_generate_random+0x36>
   232e6:	bf00      	nop
   232e8:	40000100 	.word	0x40000100

000232ec <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   232ec:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   232ee:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   232f2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   232f6:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   232f8:	d20d      	bcs.n	23316 <psa_call+0x2a>
        (type < INT16_MIN) ||
   232fa:	ea43 0504 	orr.w	r5, r3, r4
   232fe:	2dff      	cmp	r5, #255	; 0xff
   23300:	d809      	bhi.n	23316 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   23302:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   23306:	4613      	mov	r3, r2
   23308:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   2330c:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   2330e:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   23310:	4803      	ldr	r0, [pc, #12]	; (23320 <psa_call+0x34>)
   23312:	f7ff bf97 	b.w	23244 <tfm_ns_interface_dispatch>
}
   23316:	f06f 0080 	mvn.w	r0, #128	; 0x80
   2331a:	bc30      	pop	{r4, r5}
   2331c:	4770      	bx	lr
   2331e:	bf00      	nop
   23320:	00007c21 	.word	0x00007c21

00023324 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   23324:	2300      	movs	r3, #0
{
   23326:	b507      	push	{r0, r1, r2, lr}
   23328:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   2332a:	9300      	str	r3, [sp, #0]
   2332c:	4601      	mov	r1, r0
   2332e:	4803      	ldr	r0, [pc, #12]	; (2333c <psa_connect+0x18>)
   23330:	f7ff ff88 	bl	23244 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   23334:	b003      	add	sp, #12
   23336:	f85d fb04 	ldr.w	pc, [sp], #4
   2333a:	bf00      	nop
   2333c:	00007c19 	.word	0x00007c19

00023340 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   23340:	2300      	movs	r3, #0
{
   23342:	b507      	push	{r0, r1, r2, lr}
   23344:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   23346:	461a      	mov	r2, r3
   23348:	9300      	str	r3, [sp, #0]
   2334a:	4803      	ldr	r0, [pc, #12]	; (23358 <psa_close+0x18>)
   2334c:	f7ff ff7a 	bl	23244 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   23350:	b003      	add	sp, #12
   23352:	f85d fb04 	ldr.w	pc, [sp], #4
   23356:	bf00      	nop
   23358:	00007c11 	.word	0x00007c11

0002335c <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   2335c:	4b04      	ldr	r3, [pc, #16]	; (23370 <SystemCoreClockUpdate+0x14>)
   2335e:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   23362:	4b04      	ldr	r3, [pc, #16]	; (23374 <SystemCoreClockUpdate+0x18>)
   23364:	f002 0203 	and.w	r2, r2, #3
   23368:	40d3      	lsrs	r3, r2
   2336a:	4a03      	ldr	r2, [pc, #12]	; (23378 <SystemCoreClockUpdate+0x1c>)
   2336c:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   2336e:	4770      	bx	lr
   23370:	40005000 	.word	0x40005000
   23374:	07a12000 	.word	0x07a12000
   23378:	20008738 	.word	0x20008738

0002337c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2337c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2337e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   23380:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   23382:	fab2 f382 	clz	r3, r2
   23386:	f1c3 031f 	rsb	r3, r3, #31
   2338a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2338c:	fa05 f403 	lsl.w	r4, r5, r3
   23390:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23394:	e8d0 6fef 	ldaex	r6, [r0]
   23398:	4296      	cmp	r6, r2
   2339a:	d104      	bne.n	233a6 <nrfx_flag32_alloc+0x2a>
   2339c:	e8c0 4fec 	stlex	ip, r4, [r0]
   233a0:	f1bc 0f00 	cmp.w	ip, #0
   233a4:	d1f6      	bne.n	23394 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   233a6:	d1eb      	bne.n	23380 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   233a8:	4801      	ldr	r0, [pc, #4]	; (233b0 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   233aa:	700b      	strb	r3, [r1, #0]
}
   233ac:	bd70      	pop	{r4, r5, r6, pc}
   233ae:	bf00      	nop
   233b0:	0bad0000 	.word	0x0bad0000

000233b4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   233b4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   233b6:	6803      	ldr	r3, [r0, #0]
   233b8:	40cb      	lsrs	r3, r1
   233ba:	07db      	lsls	r3, r3, #31
   233bc:	d410      	bmi.n	233e0 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   233be:	2301      	movs	r3, #1
   233c0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   233c2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   233c4:	ea43 0102 	orr.w	r1, r3, r2
   233c8:	e8d0 4fef 	ldaex	r4, [r0]
   233cc:	4294      	cmp	r4, r2
   233ce:	d104      	bne.n	233da <nrfx_flag32_free+0x26>
   233d0:	e8c0 1fec 	stlex	ip, r1, [r0]
   233d4:	f1bc 0f00 	cmp.w	ip, #0
   233d8:	d1f6      	bne.n	233c8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   233da:	d1f2      	bne.n	233c2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   233dc:	4801      	ldr	r0, [pc, #4]	; (233e4 <nrfx_flag32_free+0x30>)
}
   233de:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   233e0:	4801      	ldr	r0, [pc, #4]	; (233e8 <nrfx_flag32_free+0x34>)
   233e2:	e7fc      	b.n	233de <nrfx_flag32_free+0x2a>
   233e4:	0bad0000 	.word	0x0bad0000
   233e8:	0bad0004 	.word	0x0bad0004

000233ec <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   233ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   233ee:	2803      	cmp	r0, #3
   233f0:	f200 80a0 	bhi.w	23534 <clock_stop+0x148>
   233f4:	e8df f000 	tbb	[pc, r0]
   233f8:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
   233fc:	2202      	movs	r2, #2
   233fe:	4b59      	ldr	r3, [pc, #356]	; (23564 <clock_stop+0x178>)
   23400:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23404:	2200      	movs	r2, #0
   23406:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2340a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2340e:	2201      	movs	r2, #1
   23410:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   23412:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   23414:	2301      	movs	r3, #1
   23416:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   2341a:	2803      	cmp	r0, #3
   2341c:	f200 808a 	bhi.w	23534 <clock_stop+0x148>
   23420:	e8df f000 	tbb	[pc, r0]
   23424:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
   23428:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2342a:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   2342c:	4b4d      	ldr	r3, [pc, #308]	; (23564 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2342e:	f10d 0407 	add.w	r4, sp, #7
   23432:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23436:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   2343a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2343e:	605a      	str	r2, [r3, #4]
   23440:	e7e8      	b.n	23414 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   23442:	f44f 7200 	mov.w	r2, #512	; 0x200
   23446:	4b47      	ldr	r3, [pc, #284]	; (23564 <clock_stop+0x178>)
   23448:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2344c:	2200      	movs	r2, #0
   2344e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   23452:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23456:	2201      	movs	r2, #1
   23458:	625a      	str	r2, [r3, #36]	; 0x24
   2345a:	e7da      	b.n	23412 <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   2345c:	f44f 7280 	mov.w	r2, #256	; 0x100
   23460:	4b40      	ldr	r3, [pc, #256]	; (23564 <clock_stop+0x178>)
   23462:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23466:	2200      	movs	r2, #0
   23468:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2346c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23470:	2201      	movs	r2, #1
   23472:	61da      	str	r2, [r3, #28]
   23474:	e7cd      	b.n	23412 <clock_stop+0x26>
    switch (domain)
   23476:	f242 7510 	movw	r5, #10000	; 0x2710
   2347a:	4e3a      	ldr	r6, [pc, #232]	; (23564 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   2347c:	b36c      	cbz	r4, 234da <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2347e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   23482:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   23486:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23488:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   2348c:	03d9      	lsls	r1, r3, #15
   2348e:	d551      	bpl.n	23534 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   23490:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23494:	2801      	cmp	r0, #1
   23496:	d14d      	bne.n	23534 <clock_stop+0x148>
   23498:	f00c fd4a 	bl	2ff30 <nrfx_busy_wait>
   2349c:	3d01      	subs	r5, #1
   2349e:	d1ed      	bne.n	2347c <clock_stop+0x90>
   234a0:	e048      	b.n	23534 <clock_stop+0x148>
   234a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   234a6:	2801      	cmp	r0, #1
   234a8:	d144      	bne.n	23534 <clock_stop+0x148>
   234aa:	f00c fd41 	bl	2ff30 <nrfx_busy_wait>
   234ae:	3d01      	subs	r5, #1
   234b0:	d14f      	bne.n	23552 <clock_stop+0x166>
   234b2:	e03f      	b.n	23534 <clock_stop+0x148>
   234b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   234b8:	2801      	cmp	r0, #1
   234ba:	d13b      	bne.n	23534 <clock_stop+0x148>
   234bc:	f00c fd38 	bl	2ff30 <nrfx_busy_wait>
   234c0:	3d01      	subs	r5, #1
   234c2:	d037      	beq.n	23534 <clock_stop+0x148>
            if (p_clk_src != NULL)
   234c4:	b1bc      	cbz	r4, 234f6 <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   234c6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   234ca:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   234ce:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   234d0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   234d4:	03db      	lsls	r3, r3, #15
   234d6:	d52d      	bpl.n	23534 <clock_stop+0x148>
   234d8:	e7ec      	b.n	234b4 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   234da:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   234de:	03da      	lsls	r2, r3, #15
   234e0:	d528      	bpl.n	23534 <clock_stop+0x148>
   234e2:	2001      	movs	r0, #1
   234e4:	f00c fd24 	bl	2ff30 <nrfx_busy_wait>
   234e8:	3d01      	subs	r5, #1
   234ea:	d1f6      	bne.n	234da <clock_stop+0xee>
   234ec:	e022      	b.n	23534 <clock_stop+0x148>
    switch (domain)
   234ee:	f242 7510 	movw	r5, #10000	; 0x2710
   234f2:	4e1c      	ldr	r6, [pc, #112]	; (23564 <clock_stop+0x178>)
   234f4:	e7e6      	b.n	234c4 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   234f6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   234fa:	03d8      	lsls	r0, r3, #15
   234fc:	d51a      	bpl.n	23534 <clock_stop+0x148>
   234fe:	2001      	movs	r0, #1
   23500:	f00c fd16 	bl	2ff30 <nrfx_busy_wait>
   23504:	3d01      	subs	r5, #1
   23506:	d1f6      	bne.n	234f6 <clock_stop+0x10a>
   23508:	e014      	b.n	23534 <clock_stop+0x148>
    switch (domain)
   2350a:	f242 7510 	movw	r5, #10000	; 0x2710
   2350e:	4e15      	ldr	r6, [pc, #84]	; (23564 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   23510:	b194      	cbz	r4, 23538 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   23512:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23516:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2351a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   2351c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23520:	03d9      	lsls	r1, r3, #15
   23522:	d507      	bpl.n	23534 <clock_stop+0x148>
   23524:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23528:	2801      	cmp	r0, #1
   2352a:	d103      	bne.n	23534 <clock_stop+0x148>
   2352c:	f00c fd00 	bl	2ff30 <nrfx_busy_wait>
   23530:	3d01      	subs	r5, #1
   23532:	d1ed      	bne.n	23510 <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   23534:	b002      	add	sp, #8
   23536:	bd70      	pop	{r4, r5, r6, pc}
   23538:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   2353c:	03da      	lsls	r2, r3, #15
   2353e:	d5f9      	bpl.n	23534 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   23540:	2001      	movs	r0, #1
   23542:	f00c fcf5 	bl	2ff30 <nrfx_busy_wait>
   23546:	3d01      	subs	r5, #1
   23548:	d1f6      	bne.n	23538 <clock_stop+0x14c>
   2354a:	e7f3      	b.n	23534 <clock_stop+0x148>
    switch (domain)
   2354c:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   23550:	4e04      	ldr	r6, [pc, #16]	; (23564 <clock_stop+0x178>)
   23552:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   23556:	03db      	lsls	r3, r3, #15
   23558:	d5ec      	bpl.n	23534 <clock_stop+0x148>
   2355a:	2c00      	cmp	r4, #0
   2355c:	d1a1      	bne.n	234a2 <clock_stop+0xb6>
   2355e:	2001      	movs	r0, #1
   23560:	e7a3      	b.n	234aa <clock_stop+0xbe>
   23562:	bf00      	nop
   23564:	40005000 	.word	0x40005000

00023568 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   23568:	4b04      	ldr	r3, [pc, #16]	; (2357c <nrfx_clock_init+0x14>)
   2356a:	791a      	ldrb	r2, [r3, #4]
   2356c:	b922      	cbnz	r2, 23578 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2356e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   23570:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   23572:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   23574:	4802      	ldr	r0, [pc, #8]	; (23580 <nrfx_clock_init+0x18>)
   23576:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   23578:	4802      	ldr	r0, [pc, #8]	; (23584 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2357a:	4770      	bx	lr
   2357c:	20030bfc 	.word	0x20030bfc
   23580:	0bad0000 	.word	0x0bad0000
   23584:	0bad000c 	.word	0x0bad000c

00023588 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   23588:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2358a:	2005      	movs	r0, #5
   2358c:	f7ed fdba 	bl	11104 <arch_irq_is_enabled>
   23590:	b910      	cbnz	r0, 23598 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   23592:	2005      	movs	r0, #5
   23594:	f7ed fd94 	bl	110c0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   23598:	2201      	movs	r2, #1
   2359a:	4b04      	ldr	r3, [pc, #16]	; (235ac <nrfx_clock_enable+0x24>)
   2359c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   235a0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   235a4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   235a8:	bd08      	pop	{r3, pc}
   235aa:	bf00      	nop
   235ac:	40005000 	.word	0x40005000

000235b0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   235b0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   235b2:	2803      	cmp	r0, #3
   235b4:	d818      	bhi.n	235e8 <nrfx_clock_start+0x38>
   235b6:	e8df f000 	tbb	[pc, r0]
   235ba:	3002      	.short	0x3002
   235bc:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   235be:	4a29      	ldr	r2, [pc, #164]	; (23664 <nrfx_clock_start+0xb4>)
   235c0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   235c4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   235c8:	03c9      	lsls	r1, r1, #15
   235ca:	d40e      	bmi.n	235ea <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   235cc:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   235d0:	07db      	lsls	r3, r3, #31
   235d2:	d513      	bpl.n	235fc <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   235d4:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   235d8:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   235dc:	3b01      	subs	r3, #1
   235de:	2b01      	cmp	r3, #1
   235e0:	d809      	bhi.n	235f6 <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
   235e2:	2302      	movs	r3, #2
   235e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   235e8:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   235ea:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   235ee:	2b02      	cmp	r3, #2
   235f0:	d005      	beq.n	235fe <nrfx_clock_start+0x4e>
   235f2:	2b01      	cmp	r3, #1
   235f4:	d002      	beq.n	235fc <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   235f6:	2000      	movs	r0, #0
   235f8:	f7ff fef8 	bl	233ec <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   235fc:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   235fe:	4a19      	ldr	r2, [pc, #100]	; (23664 <nrfx_clock_start+0xb4>)
   23600:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23604:	2300      	movs	r3, #0
   23606:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   2360a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   2360e:	2302      	movs	r3, #2
   23610:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23614:	2301      	movs	r3, #1
   23616:	6093      	str	r3, [r2, #8]
}
   23618:	e7e6      	b.n	235e8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2361a:	2200      	movs	r2, #0
   2361c:	4b11      	ldr	r3, [pc, #68]	; (23664 <nrfx_clock_start+0xb4>)
   2361e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23622:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   23626:	2201      	movs	r2, #1
   23628:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2362c:	601a      	str	r2, [r3, #0]
}
   2362e:	e7db      	b.n	235e8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23630:	2200      	movs	r2, #0
   23632:	4b0c      	ldr	r3, [pc, #48]	; (23664 <nrfx_clock_start+0xb4>)
   23634:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   23638:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   2363c:	f44f 7200 	mov.w	r2, #512	; 0x200
   23640:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23644:	2201      	movs	r2, #1
   23646:	621a      	str	r2, [r3, #32]
}
   23648:	e7ce      	b.n	235e8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2364a:	2200      	movs	r2, #0
   2364c:	4b05      	ldr	r3, [pc, #20]	; (23664 <nrfx_clock_start+0xb4>)
   2364e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   23652:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   23656:	f44f 7280 	mov.w	r2, #256	; 0x100
   2365a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2365e:	2201      	movs	r2, #1
   23660:	619a      	str	r2, [r3, #24]
}
   23662:	e7c1      	b.n	235e8 <nrfx_clock_start+0x38>
   23664:	40005000 	.word	0x40005000

00023668 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   23668:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2366a:	4b28      	ldr	r3, [pc, #160]	; (2370c <nrfx_power_clock_irq_handler+0xa4>)
   2366c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   23670:	b152      	cbz	r2, 23688 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23672:	2000      	movs	r0, #0
   23674:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   23678:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   2367c:	2201      	movs	r2, #1
   2367e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   23682:	4b23      	ldr	r3, [pc, #140]	; (23710 <nrfx_power_clock_irq_handler+0xa8>)
   23684:	681b      	ldr	r3, [r3, #0]
   23686:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23688:	4b20      	ldr	r3, [pc, #128]	; (2370c <nrfx_power_clock_irq_handler+0xa4>)
   2368a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2368e:	b18a      	cbz	r2, 236b4 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23690:	2200      	movs	r2, #0
   23692:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   23696:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2369a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2369e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   236a2:	f002 0203 	and.w	r2, r2, #3
   236a6:	2a01      	cmp	r2, #1
   236a8:	f04f 0102 	mov.w	r1, #2
   236ac:	d126      	bne.n	236fc <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   236ae:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   236b2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   236b4:	4b15      	ldr	r3, [pc, #84]	; (2370c <nrfx_power_clock_irq_handler+0xa4>)
   236b6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   236ba:	b162      	cbz	r2, 236d6 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   236bc:	2200      	movs	r2, #0
   236be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   236c2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   236c6:	f44f 7280 	mov.w	r2, #256	; 0x100
   236ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   236ce:	4b10      	ldr	r3, [pc, #64]	; (23710 <nrfx_power_clock_irq_handler+0xa8>)
   236d0:	2004      	movs	r0, #4
   236d2:	681b      	ldr	r3, [r3, #0]
   236d4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   236d6:	4b0d      	ldr	r3, [pc, #52]	; (2370c <nrfx_power_clock_irq_handler+0xa4>)
   236d8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   236dc:	b1aa      	cbz	r2, 2370a <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   236de:	2200      	movs	r2, #0
   236e0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   236e4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   236e8:	f44f 7200 	mov.w	r2, #512	; 0x200
   236ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   236f0:	4b07      	ldr	r3, [pc, #28]	; (23710 <nrfx_power_clock_irq_handler+0xa8>)
   236f2:	2005      	movs	r0, #5
    }
#endif
}
   236f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   236f8:	681b      	ldr	r3, [r3, #0]
   236fa:	4718      	bx	r3
   236fc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   23700:	4b03      	ldr	r3, [pc, #12]	; (23710 <nrfx_power_clock_irq_handler+0xa8>)
   23702:	2001      	movs	r0, #1
   23704:	681b      	ldr	r3, [r3, #0]
   23706:	4798      	blx	r3
   23708:	e7d4      	b.n	236b4 <nrfx_power_clock_irq_handler+0x4c>
}
   2370a:	bd10      	pop	{r4, pc}
   2370c:	40005000 	.word	0x40005000
   23710:	20030bfc 	.word	0x20030bfc

00023714 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   23714:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   23716:	4801      	ldr	r0, [pc, #4]	; (2371c <nrfx_dppi_channel_alloc+0x8>)
   23718:	f7ff be30 	b.w	2337c <nrfx_flag32_alloc>
   2371c:	2000873c 	.word	0x2000873c

00023720 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   23720:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   23722:	4a04      	ldr	r2, [pc, #16]	; (23734 <nrfx_dppi_channel_free+0x14>)
   23724:	4083      	lsls	r3, r0
{
   23726:	4601      	mov	r1, r0
   23728:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   2372c:	4802      	ldr	r0, [pc, #8]	; (23738 <nrfx_dppi_channel_free+0x18>)
   2372e:	f7ff be41 	b.w	233b4 <nrfx_flag32_free>
   23732:	bf00      	nop
   23734:	40017000 	.word	0x40017000
   23738:	2000873c 	.word	0x2000873c

0002373c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   2373c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2373e:	f003 021f 	and.w	r2, r3, #31
   23742:	6002      	str	r2, [r0, #0]
}
   23744:	4a03      	ldr	r2, [pc, #12]	; (23754 <nrf_gpio_pin_port_decode+0x18>)
   23746:	4804      	ldr	r0, [pc, #16]	; (23758 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   23748:	095b      	lsrs	r3, r3, #5
}
   2374a:	2b01      	cmp	r3, #1
   2374c:	bf18      	it	ne
   2374e:	4610      	movne	r0, r2
   23750:	4770      	bx	lr
   23752:	bf00      	nop
   23754:	40842500 	.word	0x40842500
   23758:	40842800 	.word	0x40842800

0002375c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2375c:	4b03      	ldr	r3, [pc, #12]	; (2376c <pin_in_use_by_te+0x10>)
   2375e:	3008      	adds	r0, #8
   23760:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23764:	f3c0 1040 	ubfx	r0, r0, #5, #1
   23768:	4770      	bx	lr
   2376a:	bf00      	nop
   2376c:	20008740 	.word	0x20008740

00023770 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   23770:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23772:	4c0d      	ldr	r4, [pc, #52]	; (237a8 <call_handler+0x38>)
   23774:	f100 0308 	add.w	r3, r0, #8
   23778:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   2377c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2377e:	05da      	lsls	r2, r3, #23
{
   23780:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23782:	d507      	bpl.n	23794 <call_handler+0x24>
   23784:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   23788:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2378c:	6852      	ldr	r2, [r2, #4]
   2378e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   23792:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   23794:	68a3      	ldr	r3, [r4, #8]
   23796:	b12b      	cbz	r3, 237a4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23798:	4631      	mov	r1, r6
   2379a:	4628      	mov	r0, r5
   2379c:	68e2      	ldr	r2, [r4, #12]
    }
}
   2379e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   237a2:	4718      	bx	r3
}
   237a4:	bd70      	pop	{r4, r5, r6, pc}
   237a6:	bf00      	nop
   237a8:	20008740 	.word	0x20008740

000237ac <release_handler>:
{
   237ac:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   237ae:	4a12      	ldr	r2, [pc, #72]	; (237f8 <release_handler+0x4c>)
   237b0:	3008      	adds	r0, #8
   237b2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   237b6:	05d9      	lsls	r1, r3, #23
   237b8:	d51b      	bpl.n	237f2 <release_handler+0x46>
   237ba:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   237be:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   237c2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   237c6:	2000      	movs	r0, #0
   237c8:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   237cc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   237d0:	f413 7f80 	tst.w	r3, #256	; 0x100
   237d4:	d003      	beq.n	237de <release_handler+0x32>
   237d6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   237da:	4299      	cmp	r1, r3
   237dc:	d009      	beq.n	237f2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   237de:	3001      	adds	r0, #1
   237e0:	2830      	cmp	r0, #48	; 0x30
   237e2:	d1f3      	bne.n	237cc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   237e4:	2300      	movs	r3, #0
   237e6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   237ea:	4804      	ldr	r0, [pc, #16]	; (237fc <release_handler+0x50>)
}
   237ec:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   237ee:	f7ff bde1 	b.w	233b4 <nrfx_flag32_free>
}
   237f2:	bc10      	pop	{r4}
   237f4:	4770      	bx	lr
   237f6:	bf00      	nop
   237f8:	20008740 	.word	0x20008740
   237fc:	200087b4 	.word	0x200087b4

00023800 <pin_handler_trigger_uninit>:
{
   23800:	b538      	push	{r3, r4, r5, lr}
   23802:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23804:	f7ff ffaa 	bl	2375c <pin_in_use_by_te>
   23808:	4c0b      	ldr	r4, [pc, #44]	; (23838 <pin_handler_trigger_uninit+0x38>)
   2380a:	f102 0508 	add.w	r5, r2, #8
   2380e:	b160      	cbz	r0, 2382a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   23810:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23812:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23816:	0b5b      	lsrs	r3, r3, #13
   23818:	009b      	lsls	r3, r3, #2
   2381a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2381e:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   23822:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   23826:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   2382a:	4610      	mov	r0, r2
   2382c:	f7ff ffbe 	bl	237ac <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   23830:	2300      	movs	r3, #0
   23832:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   23836:	bd38      	pop	{r3, r4, r5, pc}
   23838:	20008740 	.word	0x20008740

0002383c <nrfx_gpiote_input_configure>:
{
   2383c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   23840:	4604      	mov	r4, r0
   23842:	4690      	mov	r8, r2
   23844:	461d      	mov	r5, r3
    if (p_input_config)
   23846:	b301      	cbz	r1, 2388a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23848:	4e4f      	ldr	r6, [pc, #316]	; (23988 <nrfx_gpiote_input_configure+0x14c>)
   2384a:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2384e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   23852:	079b      	lsls	r3, r3, #30
   23854:	d502      	bpl.n	2385c <nrfx_gpiote_input_configure+0x20>
   23856:	f7ff ff81 	bl	2375c <pin_in_use_by_te>
   2385a:	bb28      	cbnz	r0, 238a8 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2385c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2385e:	4620      	mov	r0, r4
   23860:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23864:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   23868:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2386c:	f10d 020f 	add.w	r2, sp, #15
   23870:	460b      	mov	r3, r1
   23872:	f10d 010e 	add.w	r1, sp, #14
   23876:	f00c fb5f 	bl	2ff38 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2387a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2387e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   23882:	f043 0301 	orr.w	r3, r3, #1
   23886:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   2388a:	f1b8 0f00 	cmp.w	r8, #0
   2388e:	d02d      	beq.n	238ec <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23890:	4e3d      	ldr	r6, [pc, #244]	; (23988 <nrfx_gpiote_input_configure+0x14c>)
   23892:	f104 0708 	add.w	r7, r4, #8
   23896:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2389a:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   2389e:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   238a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   238a4:	d502      	bpl.n	238ac <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   238a6:	b1cb      	cbz	r3, 238dc <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   238a8:	4838      	ldr	r0, [pc, #224]	; (2398c <nrfx_gpiote_input_configure+0x150>)
   238aa:	e021      	b.n	238f0 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   238ac:	f021 0120 	bic.w	r1, r1, #32
   238b0:	04c9      	lsls	r1, r1, #19
   238b2:	0cc9      	lsrs	r1, r1, #19
   238b4:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   238b8:	b183      	cbz	r3, 238dc <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   238ba:	2803      	cmp	r0, #3
   238bc:	d8f4      	bhi.n	238a8 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   238be:	f8d8 3004 	ldr.w	r3, [r8, #4]
   238c2:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   238c6:	4662      	mov	r2, ip
   238c8:	0092      	lsls	r2, r2, #2
   238ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   238ce:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   238d2:	b980      	cbnz	r0, 238f6 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   238d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   238d8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   238dc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   238e0:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   238e4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   238e8:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   238ec:	bb1d      	cbnz	r5, 23936 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   238ee:	4828      	ldr	r0, [pc, #160]	; (23990 <nrfx_gpiote_input_configure+0x154>)
}
   238f0:	b004      	add	sp, #16
   238f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   238f6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   238fa:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   238fe:	f023 0303 	bic.w	r3, r3, #3
   23902:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23906:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   2390a:	f041 0120 	orr.w	r1, r1, #32
   2390e:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   23912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   23916:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2391a:	0223      	lsls	r3, r4, #8
   2391c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   23920:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   23924:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   23928:	ea43 030e 	orr.w	r3, r3, lr
   2392c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   23930:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   23934:	e7d2      	b.n	238dc <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   23936:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   23938:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   2393c:	f7ff ff36 	bl	237ac <release_handler>
    if (!handler)
   23940:	2e00      	cmp	r6, #0
   23942:	d0d4      	beq.n	238ee <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23944:	4d10      	ldr	r5, [pc, #64]	; (23988 <nrfx_gpiote_input_configure+0x14c>)
   23946:	e9d5 2300 	ldrd	r2, r3, [r5]
   2394a:	4296      	cmp	r6, r2
   2394c:	d101      	bne.n	23952 <nrfx_gpiote_input_configure+0x116>
   2394e:	429f      	cmp	r7, r3
   23950:	d018      	beq.n	23984 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   23952:	4810      	ldr	r0, [pc, #64]	; (23994 <nrfx_gpiote_input_configure+0x158>)
   23954:	f10d 010f 	add.w	r1, sp, #15
   23958:	f7ff fd10 	bl	2337c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2395c:	4b0c      	ldr	r3, [pc, #48]	; (23990 <nrfx_gpiote_input_configure+0x154>)
   2395e:	4298      	cmp	r0, r3
   23960:	d1c6      	bne.n	238f0 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   23962:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   23966:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2396a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   2396c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2396e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   23972:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23976:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2397a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2397e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   23982:	e7b4      	b.n	238ee <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23984:	2200      	movs	r2, #0
   23986:	e7ee      	b.n	23966 <nrfx_gpiote_input_configure+0x12a>
   23988:	20008740 	.word	0x20008740
   2398c:	0bad0004 	.word	0x0bad0004
   23990:	0bad0000 	.word	0x0bad0000
   23994:	200087b4 	.word	0x200087b4

00023998 <nrfx_gpiote_output_configure>:
{
   23998:	b5f0      	push	{r4, r5, r6, r7, lr}
   2399a:	4604      	mov	r4, r0
   2399c:	4615      	mov	r5, r2
   2399e:	b085      	sub	sp, #20
    if (p_config)
   239a0:	b319      	cbz	r1, 239ea <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   239a2:	4e34      	ldr	r6, [pc, #208]	; (23a74 <nrfx_gpiote_output_configure+0xdc>)
   239a4:	f100 0708 	add.w	r7, r0, #8
   239a8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   239ac:	0793      	lsls	r3, r2, #30
   239ae:	d403      	bmi.n	239b8 <nrfx_gpiote_output_configure+0x20>
   239b0:	f7ff fed4 	bl	2375c <pin_in_use_by_te>
   239b4:	2800      	cmp	r0, #0
   239b6:	d15a      	bne.n	23a6e <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   239b8:	f012 0f1c 	tst.w	r2, #28
   239bc:	d002      	beq.n	239c4 <nrfx_gpiote_output_configure+0x2c>
   239be:	784b      	ldrb	r3, [r1, #1]
   239c0:	2b01      	cmp	r3, #1
   239c2:	d054      	beq.n	23a6e <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   239c4:	2301      	movs	r3, #1
   239c6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   239ca:	2300      	movs	r3, #0
   239cc:	1c4a      	adds	r2, r1, #1
   239ce:	e9cd 1300 	strd	r1, r3, [sp]
   239d2:	4620      	mov	r0, r4
   239d4:	1c8b      	adds	r3, r1, #2
   239d6:	f10d 010f 	add.w	r1, sp, #15
   239da:	f00c faad 	bl	2ff38 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   239de:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   239e2:	f043 0303 	orr.w	r3, r3, #3
   239e6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   239ea:	b915      	cbnz	r5, 239f2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   239ec:	4822      	ldr	r0, [pc, #136]	; (23a78 <nrfx_gpiote_output_configure+0xe0>)
}
   239ee:	b005      	add	sp, #20
   239f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   239f2:	4e20      	ldr	r6, [pc, #128]	; (23a74 <nrfx_gpiote_output_configure+0xdc>)
   239f4:	f104 0708 	add.w	r7, r4, #8
   239f8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   239fc:	0783      	lsls	r3, r0, #30
   239fe:	d536      	bpl.n	23a6e <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   23a00:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   23a04:	2300      	movs	r3, #0
   23a06:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   23a08:	f020 0020 	bic.w	r0, r0, #32
   23a0c:	0089      	lsls	r1, r1, #2
   23a0e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   23a12:	04c0      	lsls	r0, r0, #19
   23a14:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   23a18:	0cc0      	lsrs	r0, r0, #19
   23a1a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   23a1e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   23a22:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   23a26:	786a      	ldrb	r2, [r5, #1]
   23a28:	2a00      	cmp	r2, #0
   23a2a:	d0df      	beq.n	239ec <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   23a2c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   23a30:	78ad      	ldrb	r5, [r5, #2]
   23a32:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   23a36:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23a3a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23a3e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   23a42:	0223      	lsls	r3, r4, #8
   23a44:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   23a48:	0412      	lsls	r2, r2, #16
   23a4a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23a4e:	ea43 030e 	orr.w	r3, r3, lr
   23a52:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   23a54:	052a      	lsls	r2, r5, #20
   23a56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23a5a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23a5e:	4313      	orrs	r3, r2
   23a60:	f040 0020 	orr.w	r0, r0, #32
   23a64:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   23a68:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   23a6c:	e7be      	b.n	239ec <nrfx_gpiote_output_configure+0x54>
{
   23a6e:	4803      	ldr	r0, [pc, #12]	; (23a7c <nrfx_gpiote_output_configure+0xe4>)
   23a70:	e7bd      	b.n	239ee <nrfx_gpiote_output_configure+0x56>
   23a72:	bf00      	nop
   23a74:	20008740 	.word	0x20008740
   23a78:	0bad0000 	.word	0x0bad0000
   23a7c:	0bad0004 	.word	0x0bad0004

00023a80 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   23a80:	4b01      	ldr	r3, [pc, #4]	; (23a88 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   23a82:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   23a86:	4770      	bx	lr
   23a88:	20008740 	.word	0x20008740

00023a8c <nrfx_gpiote_channel_get>:
{
   23a8c:	b508      	push	{r3, lr}
   23a8e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23a90:	f7ff fe64 	bl	2375c <pin_in_use_by_te>
   23a94:	b138      	cbz	r0, 23aa6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23a96:	4b05      	ldr	r3, [pc, #20]	; (23aac <nrfx_gpiote_channel_get+0x20>)
   23a98:	3208      	adds	r2, #8
   23a9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   23a9e:	4804      	ldr	r0, [pc, #16]	; (23ab0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23aa0:	0b5b      	lsrs	r3, r3, #13
   23aa2:	700b      	strb	r3, [r1, #0]
}
   23aa4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23aa6:	4803      	ldr	r0, [pc, #12]	; (23ab4 <nrfx_gpiote_channel_get+0x28>)
   23aa8:	e7fc      	b.n	23aa4 <nrfx_gpiote_channel_get+0x18>
   23aaa:	bf00      	nop
   23aac:	20008740 	.word	0x20008740
   23ab0:	0bad0000 	.word	0x0bad0000
   23ab4:	0bad0004 	.word	0x0bad0004

00023ab8 <nrfx_gpiote_init>:
{
   23ab8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23aba:	4c0f      	ldr	r4, [pc, #60]	; (23af8 <nrfx_gpiote_init+0x40>)
   23abc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   23ac0:	b9bd      	cbnz	r5, 23af2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   23ac2:	2260      	movs	r2, #96	; 0x60
   23ac4:	4629      	mov	r1, r5
   23ac6:	f104 0010 	add.w	r0, r4, #16
   23aca:	f00d fe5a 	bl	31782 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   23ace:	202f      	movs	r0, #47	; 0x2f
   23ad0:	f7ed faf6 	bl	110c0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23ad4:	4b09      	ldr	r3, [pc, #36]	; (23afc <nrfx_gpiote_init+0x44>)
    return err_code;
   23ad6:	480a      	ldr	r0, [pc, #40]	; (23b00 <nrfx_gpiote_init+0x48>)
   23ad8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   23adc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   23ae0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   23ae4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23ae8:	2301      	movs	r3, #1
   23aea:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   23aee:	6763      	str	r3, [r4, #116]	; 0x74
}
   23af0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   23af2:	4804      	ldr	r0, [pc, #16]	; (23b04 <nrfx_gpiote_init+0x4c>)
   23af4:	e7fc      	b.n	23af0 <nrfx_gpiote_init+0x38>
   23af6:	bf00      	nop
   23af8:	20008740 	.word	0x20008740
   23afc:	4002f000 	.word	0x4002f000
   23b00:	0bad0000 	.word	0x0bad0000
   23b04:	0bad0005 	.word	0x0bad0005

00023b08 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   23b08:	4b03      	ldr	r3, [pc, #12]	; (23b18 <nrfx_gpiote_is_init+0x10>)
   23b0a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   23b0e:	3800      	subs	r0, #0
   23b10:	bf18      	it	ne
   23b12:	2001      	movne	r0, #1
   23b14:	4770      	bx	lr
   23b16:	bf00      	nop
   23b18:	20008740 	.word	0x20008740

00023b1c <nrfx_gpiote_channel_free>:
{
   23b1c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   23b1e:	4801      	ldr	r0, [pc, #4]	; (23b24 <nrfx_gpiote_channel_free+0x8>)
   23b20:	f7ff bc48 	b.w	233b4 <nrfx_flag32_free>
   23b24:	200087b0 	.word	0x200087b0

00023b28 <nrfx_gpiote_channel_alloc>:
{
   23b28:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   23b2a:	4801      	ldr	r0, [pc, #4]	; (23b30 <nrfx_gpiote_channel_alloc+0x8>)
   23b2c:	f7ff bc26 	b.w	2337c <nrfx_flag32_alloc>
   23b30:	200087b0 	.word	0x200087b0

00023b34 <nrfx_gpiote_trigger_enable>:
{
   23b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23b36:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23b38:	f7ff fe10 	bl	2375c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23b3c:	4b1d      	ldr	r3, [pc, #116]	; (23bb4 <nrfx_gpiote_trigger_enable+0x80>)
   23b3e:	f104 0208 	add.w	r2, r4, #8
   23b42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23b46:	b1d0      	cbz	r0, 23b7e <nrfx_gpiote_trigger_enable+0x4a>
   23b48:	f013 0502 	ands.w	r5, r3, #2
   23b4c:	d117      	bne.n	23b7e <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   23b4e:	481a      	ldr	r0, [pc, #104]	; (23bb8 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23b50:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   23b52:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23b54:	5085      	str	r5, [r0, r2]
   23b56:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   23b58:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23b5c:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   23b60:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23b64:	f040 0001 	orr.w	r0, r0, #1
   23b68:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   23b6c:	b129      	cbz	r1, 23b7a <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   23b6e:	2201      	movs	r2, #1
   23b70:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   23b74:	4a11      	ldr	r2, [pc, #68]	; (23bbc <nrfx_gpiote_trigger_enable+0x88>)
   23b76:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23b7a:	b003      	add	sp, #12
   23b7c:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23b7e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   23b82:	2b04      	cmp	r3, #4
   23b84:	d011      	beq.n	23baa <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   23b86:	2b05      	cmp	r3, #5
   23b88:	d011      	beq.n	23bae <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23b8a:	a801      	add	r0, sp, #4
   23b8c:	9401      	str	r4, [sp, #4]
   23b8e:	f7ff fdd5 	bl	2373c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23b92:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   23b94:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23b96:	40d9      	lsrs	r1, r3
   23b98:	f001 0101 	and.w	r1, r1, #1
   23b9c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23b9e:	4620      	mov	r0, r4
}
   23ba0:	b003      	add	sp, #12
   23ba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23ba6:	f00c ba10 	b.w	2ffca <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   23baa:	2103      	movs	r1, #3
   23bac:	e7f7      	b.n	23b9e <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   23bae:	2102      	movs	r1, #2
   23bb0:	e7f5      	b.n	23b9e <nrfx_gpiote_trigger_enable+0x6a>
   23bb2:	bf00      	nop
   23bb4:	20008740 	.word	0x20008740
   23bb8:	4002f100 	.word	0x4002f100
   23bbc:	4002f000 	.word	0x4002f000

00023bc0 <nrfx_gpiote_trigger_disable>:
{
   23bc0:	b508      	push	{r3, lr}
   23bc2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23bc4:	f7ff fdca 	bl	2375c <pin_in_use_by_te>
   23bc8:	b1c0      	cbz	r0, 23bfc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23bca:	4b0f      	ldr	r3, [pc, #60]	; (23c08 <nrfx_gpiote_trigger_disable+0x48>)
   23bcc:	f102 0108 	add.w	r1, r2, #8
   23bd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23bd4:	0799      	lsls	r1, r3, #30
   23bd6:	d411      	bmi.n	23bfc <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23bd8:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23bda:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23bdc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   23bde:	490b      	ldr	r1, [pc, #44]	; (23c0c <nrfx_gpiote_trigger_disable+0x4c>)
   23be0:	009b      	lsls	r3, r3, #2
   23be2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23be6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23bea:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   23bee:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   23bf2:	f022 0203 	bic.w	r2, r2, #3
   23bf6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   23bfa:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23bfc:	2100      	movs	r1, #0
}
   23bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23c02:	4610      	mov	r0, r2
   23c04:	f00c b9e1 	b.w	2ffca <nrf_gpio_cfg_sense_set>
   23c08:	20008740 	.word	0x20008740
   23c0c:	4002f000 	.word	0x4002f000

00023c10 <nrfx_gpiote_pin_uninit>:
{
   23c10:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23c12:	4b10      	ldr	r3, [pc, #64]	; (23c54 <nrfx_gpiote_pin_uninit+0x44>)
   23c14:	f100 0208 	add.w	r2, r0, #8
   23c18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   23c1c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   23c1e:	07db      	lsls	r3, r3, #31
   23c20:	d516      	bpl.n	23c50 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   23c22:	f7ff ffcd 	bl	23bc0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   23c26:	4620      	mov	r0, r4
   23c28:	f7ff fdea 	bl	23800 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23c2c:	a801      	add	r0, sp, #4
   23c2e:	9401      	str	r4, [sp, #4]
   23c30:	f7ff fd84 	bl	2373c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   23c34:	9b01      	ldr	r3, [sp, #4]
   23c36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   23c3a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   23c3e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   23c42:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   23c46:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   23c4a:	4803      	ldr	r0, [pc, #12]	; (23c58 <nrfx_gpiote_pin_uninit+0x48>)
}
   23c4c:	b002      	add	sp, #8
   23c4e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23c50:	4802      	ldr	r0, [pc, #8]	; (23c5c <nrfx_gpiote_pin_uninit+0x4c>)
   23c52:	e7fb      	b.n	23c4c <nrfx_gpiote_pin_uninit+0x3c>
   23c54:	20008740 	.word	0x20008740
   23c58:	0bad0000 	.word	0x0bad0000
   23c5c:	0bad0004 	.word	0x0bad0004

00023c60 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   23c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   23c64:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   23c66:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23c68:	4634      	mov	r4, r6
{
   23c6a:	4b63      	ldr	r3, [pc, #396]	; (23df8 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   23c6c:	4863      	ldr	r0, [pc, #396]	; (23dfc <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23c6e:	4964      	ldr	r1, [pc, #400]	; (23e00 <nrfx_gpiote_irq_handler+0x1a0>)
{
   23c70:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23c72:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   23c74:	b135      	cbz	r5, 23c84 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   23c76:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   23c7a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23c7c:	bf1e      	ittt	ne
   23c7e:	601c      	strne	r4, [r3, #0]
   23c80:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   23c82:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23c84:	3304      	adds	r3, #4
   23c86:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   23c88:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23c8c:	d1f1      	bne.n	23c72 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23c8e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23dfc <nrfx_gpiote_irq_handler+0x19c>
   23c92:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   23c96:	2b00      	cmp	r3, #0
   23c98:	f000 8091 	beq.w	23dbe <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   23c9c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 23e04 <nrfx_gpiote_irq_handler+0x1a4>
   23ca0:	f8d8 3020 	ldr.w	r3, [r8, #32]
   23ca4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23ca6:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   23caa:	4b57      	ldr	r3, [pc, #348]	; (23e08 <nrfx_gpiote_irq_handler+0x1a8>)
   23cac:	6a1a      	ldr	r2, [r3, #32]
   23cae:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23cb0:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23cb2:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   23cb6:	f10d 0b10 	add.w	fp, sp, #16
   23cba:	ea4f 1349 	mov.w	r3, r9, lsl #5
   23cbe:	9300      	str	r3, [sp, #0]
   23cc0:	e048      	b.n	23d54 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   23cc2:	fa94 f4a4 	rbit	r4, r4
   23cc6:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   23cca:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23ccc:	4a4f      	ldr	r2, [pc, #316]	; (23e0c <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   23cce:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23cd0:	f104 0308 	add.w	r3, r4, #8
   23cd4:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   23cd8:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   23cda:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   23cdc:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   23ce0:	fa03 f202 	lsl.w	r2, r3, r2
   23ce4:	f81b 3000 	ldrb.w	r3, [fp, r0]
   23ce8:	9403      	str	r4, [sp, #12]
   23cea:	ea23 0302 	bic.w	r3, r3, r2
   23cee:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23cf2:	a803      	add	r0, sp, #12
   23cf4:	f7ff fd22 	bl	2373c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23cf8:	9b03      	ldr	r3, [sp, #12]
   23cfa:	08b9      	lsrs	r1, r7, #2
   23cfc:	3380      	adds	r3, #128	; 0x80
   23cfe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   23d02:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   23d06:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23d08:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   23d0a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   23d0e:	d52b      	bpl.n	23d68 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   23d10:	4620      	mov	r0, r4
   23d12:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23d14:	b2dd      	uxtb	r5, r3
   23d16:	f7ff fd2b 	bl	23770 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23d1a:	a803      	add	r0, sp, #12
   23d1c:	9403      	str	r4, [sp, #12]
   23d1e:	f7ff fd0d 	bl	2373c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23d22:	9b03      	ldr	r3, [sp, #12]
   23d24:	3380      	adds	r3, #128	; 0x80
   23d26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   23d2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   23d2e:	429d      	cmp	r5, r3
   23d30:	d107      	bne.n	23d42 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23d32:	2100      	movs	r1, #0
   23d34:	4620      	mov	r0, r4
   23d36:	f00c f948 	bl	2ffca <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   23d3a:	4629      	mov	r1, r5
   23d3c:	4620      	mov	r0, r4
   23d3e:	f00c f944 	bl	2ffca <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23d42:	a803      	add	r0, sp, #12
   23d44:	9403      	str	r4, [sp, #12]
   23d46:	f7ff fcf9 	bl	2373c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   23d4a:	2201      	movs	r2, #1
   23d4c:	9b03      	ldr	r3, [sp, #12]
   23d4e:	fa02 f303 	lsl.w	r3, r2, r3
   23d52:	6203      	str	r3, [r0, #32]
            while (latch[i])
   23d54:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   23d58:	2c00      	cmp	r4, #0
   23d5a:	d1b2      	bne.n	23cc2 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23d5c:	f1b9 0f00 	cmp.w	r9, #0
   23d60:	d11d      	bne.n	23d9e <nrfx_gpiote_irq_handler+0x13e>
   23d62:	f04f 0901 	mov.w	r9, #1
   23d66:	e7a8      	b.n	23cba <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23d68:	2b02      	cmp	r3, #2
   23d6a:	d10c      	bne.n	23d86 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23d6c:	2103      	movs	r1, #3
   23d6e:	4620      	mov	r0, r4
   23d70:	f00c f92b 	bl	2ffca <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23d74:	f005 0305 	and.w	r3, r5, #5
   23d78:	2b01      	cmp	r3, #1
   23d7a:	d1e2      	bne.n	23d42 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   23d7c:	4639      	mov	r1, r7
   23d7e:	4620      	mov	r0, r4
   23d80:	f7ff fcf6 	bl	23770 <call_handler>
   23d84:	e7dd      	b.n	23d42 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23d86:	2102      	movs	r1, #2
   23d88:	4620      	mov	r0, r4
   23d8a:	9301      	str	r3, [sp, #4]
   23d8c:	f00c f91d 	bl	2ffca <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23d90:	2d03      	cmp	r5, #3
   23d92:	d0f3      	beq.n	23d7c <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23d94:	9b01      	ldr	r3, [sp, #4]
   23d96:	2b03      	cmp	r3, #3
   23d98:	d1d3      	bne.n	23d42 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   23d9a:	2d02      	cmp	r5, #2
   23d9c:	e7ed      	b.n	23d7a <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23d9e:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   23da2:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   23da6:	f8d8 3020 	ldr.w	r3, [r8, #32]
   23daa:	4917      	ldr	r1, [pc, #92]	; (23e08 <nrfx_gpiote_irq_handler+0x1a8>)
   23dac:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23dae:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   23db2:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   23db4:	4313      	orrs	r3, r2
   23db6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23db8:	620a      	str	r2, [r1, #32]
   23dba:	f47f af7a 	bne.w	23cb2 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   23dbe:	2401      	movs	r4, #1
    while (mask)
   23dc0:	b916      	cbnz	r6, 23dc8 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   23dc2:	b007      	add	sp, #28
   23dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   23dc8:	fa96 f3a6 	rbit	r3, r6
   23dcc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   23dd0:	fa04 f203 	lsl.w	r2, r4, r3
   23dd4:	009b      	lsls	r3, r3, #2
   23dd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23dda:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23dde:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   23de2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23de6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   23dea:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   23dee:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23df2:	f7ff fcbd 	bl	23770 <call_handler>
   23df6:	e7e3      	b.n	23dc0 <nrfx_gpiote_irq_handler+0x160>
   23df8:	4002f100 	.word	0x4002f100
   23dfc:	4002f000 	.word	0x4002f000
   23e00:	4002f120 	.word	0x4002f120
   23e04:	40842500 	.word	0x40842500
   23e08:	40842800 	.word	0x40842800
   23e0c:	20008740 	.word	0x20008740

00023e10 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   23e10:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23e12:	4c08      	ldr	r4, [pc, #32]	; (23e34 <nrfx_ipc_init+0x24>)
{
   23e14:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23e16:	7923      	ldrb	r3, [r4, #4]
{
   23e18:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23e1a:	b943      	cbnz	r3, 23e2e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   23e1c:	202a      	movs	r0, #42	; 0x2a
   23e1e:	f7ed f94f 	bl	110c0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23e22:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   23e24:	4804      	ldr	r0, [pc, #16]	; (23e38 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23e26:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   23e28:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   23e2a:	60a5      	str	r5, [r4, #8]
}
   23e2c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   23e2e:	4803      	ldr	r0, [pc, #12]	; (23e3c <nrfx_ipc_init+0x2c>)
   23e30:	e7fc      	b.n	23e2c <nrfx_ipc_init+0x1c>
   23e32:	bf00      	nop
   23e34:	20030c04 	.word	0x20030c04
   23e38:	0bad0000 	.word	0x0bad0000
   23e3c:	0bad000c 	.word	0x0bad000c

00023e40 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23e40:	2300      	movs	r3, #0
{
   23e42:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   23e44:	4a0d      	ldr	r2, [pc, #52]	; (23e7c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   23e46:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23e4a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23e4e:	3301      	adds	r3, #1
   23e50:	2b10      	cmp	r3, #16
   23e52:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   23e56:	d1f6      	bne.n	23e46 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   23e58:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   23e5a:	4a08      	ldr	r2, [pc, #32]	; (23e7c <nrfx_ipc_config_load+0x3c>)
   23e5c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   23e60:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   23e64:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23e68:	3301      	adds	r3, #1
   23e6a:	2b10      	cmp	r3, #16
   23e6c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   23e70:	d1f6      	bne.n	23e60 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   23e72:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   23e76:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23e7a:	bd30      	pop	{r4, r5, pc}
   23e7c:	4002a000 	.word	0x4002a000

00023e80 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   23e80:	2301      	movs	r3, #1
   23e82:	4a02      	ldr	r2, [pc, #8]	; (23e8c <nrfx_ipc_receive_event_enable+0xc>)
   23e84:	4083      	lsls	r3, r0
   23e86:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23e8a:	4770      	bx	lr
   23e8c:	4002a000 	.word	0x4002a000

00023e90 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   23e90:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   23e92:	4a02      	ldr	r2, [pc, #8]	; (23e9c <nrfx_ipc_receive_event_disable+0xc>)
   23e94:	4083      	lsls	r3, r0
   23e96:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   23e9a:	4770      	bx	lr
   23e9c:	4002a000 	.word	0x4002a000

00023ea0 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   23ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   23ea2:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23ea4:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   23ea6:	4b0b      	ldr	r3, [pc, #44]	; (23ed4 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   23ea8:	4d0b      	ldr	r5, [pc, #44]	; (23ed8 <nrfx_ipc_irq_handler+0x38>)
   23eaa:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   23eae:	b904      	cbnz	r4, 23eb2 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   23eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   23eb2:	fa94 f0a4 	rbit	r0, r4
   23eb6:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   23eba:	fa06 f300 	lsl.w	r3, r6, r0
   23ebe:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23ec2:	4b06      	ldr	r3, [pc, #24]	; (23edc <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   23ec4:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23ec6:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   23ec8:	682b      	ldr	r3, [r5, #0]
   23eca:	2b00      	cmp	r3, #0
   23ecc:	d0ef      	beq.n	23eae <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   23ece:	68a9      	ldr	r1, [r5, #8]
   23ed0:	4798      	blx	r3
   23ed2:	e7ec      	b.n	23eae <nrfx_ipc_irq_handler+0xe>
   23ed4:	4002a000 	.word	0x4002a000
   23ed8:	20030c04 	.word	0x20030c04
   23edc:	4002a100 	.word	0x4002a100

00023ee0 <nvmc_word_write>:
   23ee0:	4a04      	ldr	r2, [pc, #16]	; (23ef4 <nvmc_word_write+0x14>)
   23ee2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   23ee6:	07db      	lsls	r3, r3, #31
   23ee8:	d5fb      	bpl.n	23ee2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   23eea:	6001      	str	r1, [r0, #0]
   23eec:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   23ef0:	4770      	bx	lr
   23ef2:	bf00      	nop
   23ef4:	40039000 	.word	0x40039000

00023ef8 <nrfx_nvmc_page_erase>:
    return !(addr % flash_page_size_get());
   23ef8:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   23efc:	b97b      	cbnz	r3, 23f1e <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   23efe:	2202      	movs	r2, #2
   23f00:	4b08      	ldr	r3, [pc, #32]	; (23f24 <nrfx_nvmc_page_erase+0x2c>)
   23f02:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   23f06:	f04f 32ff 	mov.w	r2, #4294967295
   23f0a:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   23f0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   23f10:	07d2      	lsls	r2, r2, #31
   23f12:	d5fb      	bpl.n	23f0c <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
   23f14:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   23f16:	4804      	ldr	r0, [pc, #16]	; (23f28 <nrfx_nvmc_page_erase+0x30>)
   23f18:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
   23f1c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   23f1e:	4803      	ldr	r0, [pc, #12]	; (23f2c <nrfx_nvmc_page_erase+0x34>)
}
   23f20:	4770      	bx	lr
   23f22:	bf00      	nop
   23f24:	40039000 	.word	0x40039000
   23f28:	0bad0000 	.word	0x0bad0000
   23f2c:	0bad000a 	.word	0x0bad000a

00023f30 <nrfx_nvmc_word_write>:
   23f30:	2301      	movs	r3, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   23f32:	b510      	push	{r4, lr}
   23f34:	4c04      	ldr	r4, [pc, #16]	; (23f48 <nrfx_nvmc_word_write+0x18>)
   23f36:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   23f3a:	f7ff ffd1 	bl	23ee0 <nvmc_word_write>
   23f3e:	2300      	movs	r3, #0
   23f40:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   23f44:	bd10      	pop	{r4, pc}
   23f46:	bf00      	nop
   23f48:	40039000 	.word	0x40039000

00023f4c <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   23f4c:	b570      	push	{r4, r5, r6, lr}
   23f4e:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   23f52:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   23f56:	d168      	bne.n	2402a <qspi_xfer+0xde>
   23f58:	0784      	lsls	r4, r0, #30
   23f5a:	d166      	bne.n	2402a <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   23f5c:	4d35      	ldr	r5, [pc, #212]	; (24034 <qspi_xfer+0xe8>)
   23f5e:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   23f62:	2c01      	cmp	r4, #1
   23f64:	d001      	beq.n	23f6a <qspi_xfer+0x1e>
   23f66:	429c      	cmp	r4, r3
   23f68:	d161      	bne.n	2402e <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   23f6a:	682c      	ldr	r4, [r5, #0]
   23f6c:	bb04      	cbnz	r4, 23fb0 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23f6e:	2b02      	cmp	r3, #2
   23f70:	4b31      	ldr	r3, [pc, #196]	; (24038 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   23f72:	bf0b      	itete	eq
   23f74:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   23f78:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23f7c:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   23f80:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   23f84:	bf0b      	itete	eq
   23f86:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   23f8a:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   23f8e:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   23f90:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23f92:	2100      	movs	r1, #0
   23f94:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23f98:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   23f9c:	2201      	movs	r2, #1
   23f9e:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   23fa2:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23fa4:	4a24      	ldr	r2, [pc, #144]	; (24038 <qspi_xfer+0xec>)
   23fa6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   23faa:	2b00      	cmp	r3, #0
   23fac:	d0fb      	beq.n	23fa6 <qspi_xfer+0x5a>
   23fae:	e00d      	b.n	23fcc <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
   23fb0:	68ae      	ldr	r6, [r5, #8]
   23fb2:	4c21      	ldr	r4, [pc, #132]	; (24038 <qspi_xfer+0xec>)
   23fb4:	b166      	cbz	r6, 23fd0 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23fb6:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   23fb8:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   23fba:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   23fbc:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23fbe:	d12d      	bne.n	2401c <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
   23fc0:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23fc4:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   23fc8:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   23fcc:	481b      	ldr	r0, [pc, #108]	; (2403c <qspi_xfer+0xf0>)
}
   23fce:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23fd0:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   23fd2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   23fd6:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   23fd8:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   23fda:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   23fdc:	bf0c      	ite	eq
   23fde:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   23fe2:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23fe6:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23fea:	bf0b      	itete	eq
   23fec:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   23ff0:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   23ff4:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   23ff8:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   23ffc:	bf08      	it	eq
   23ffe:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24000:	490d      	ldr	r1, [pc, #52]	; (24038 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
   24002:	bf18      	it	ne
   24004:	2304      	movne	r3, #4
   24006:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   2400a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2400c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24010:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   24014:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24018:	601a      	str	r2, [r3, #0]
}
   2401a:	e7d7      	b.n	23fcc <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
   2401c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   24020:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   24024:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   24028:	e7d0      	b.n	23fcc <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
   2402a:	4805      	ldr	r0, [pc, #20]	; (24040 <qspi_xfer+0xf4>)
   2402c:	e7cf      	b.n	23fce <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
   2402e:	4805      	ldr	r0, [pc, #20]	; (24044 <qspi_xfer+0xf8>)
   24030:	e7cd      	b.n	23fce <qspi_xfer+0x82>
   24032:	bf00      	nop
   24034:	20030c10 	.word	0x20030c10
   24038:	4002b000 	.word	0x4002b000
   2403c:	0bad0000 	.word	0x0bad0000
   24040:	0bad000a 	.word	0x0bad000a
   24044:	0bad000b 	.word	0x0bad000b

00024048 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   24048:	b538      	push	{r3, r4, r5, lr}
   2404a:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2404c:	4d06      	ldr	r5, [pc, #24]	; (24068 <qspi_ready_wait+0x20>)
   2404e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   24052:	b933      	cbnz	r3, 24062 <qspi_ready_wait+0x1a>
   24054:	200a      	movs	r0, #10
   24056:	f00b ff6b 	bl	2ff30 <nrfx_busy_wait>
   2405a:	3c01      	subs	r4, #1
   2405c:	d1f7      	bne.n	2404e <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   2405e:	4803      	ldr	r0, [pc, #12]	; (2406c <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   24060:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   24062:	4803      	ldr	r0, [pc, #12]	; (24070 <qspi_ready_wait+0x28>)
   24064:	e7fc      	b.n	24060 <qspi_ready_wait+0x18>
   24066:	bf00      	nop
   24068:	4002b000 	.word	0x4002b000
   2406c:	0bad0007 	.word	0x0bad0007
   24070:	0bad0000 	.word	0x0bad0000

00024074 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   24074:	4b08      	ldr	r3, [pc, #32]	; (24098 <qspi_event_xfer_handle.constprop.0+0x24>)
   24076:	689a      	ldr	r2, [r3, #8]
   24078:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   2407a:	691a      	ldr	r2, [r3, #16]
   2407c:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   2407e:	699a      	ldr	r2, [r3, #24]
   24080:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   24082:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   24084:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   24086:	b132      	cbz	r2, 24096 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   24088:	695a      	ldr	r2, [r3, #20]
   2408a:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   2408c:	69da      	ldr	r2, [r3, #28]
   2408e:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   24090:	2200      	movs	r2, #0
   24092:	60da      	str	r2, [r3, #12]
   24094:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   24096:	4770      	bx	lr
   24098:	20030c10 	.word	0x20030c10

0002409c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2409c:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
   2409e:	4a0a      	ldr	r2, [pc, #40]	; (240c8 <nrf_gpio_cfg.constprop.0+0x2c>)
   240a0:	4c0a      	ldr	r4, [pc, #40]	; (240cc <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
   240a2:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   240a6:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   240a8:	2801      	cmp	r0, #1
   240aa:	bf18      	it	ne
   240ac:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   240ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   240b2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   240b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   240ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   240be:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   240c2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   240c6:	bd10      	pop	{r4, pc}
   240c8:	40842800 	.word	0x40842800
   240cc:	40842500 	.word	0x40842500

000240d0 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   240d0:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   240d2:	4b0e      	ldr	r3, [pc, #56]	; (2410c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   240d4:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   240d6:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   240da:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   240de:	2807      	cmp	r0, #7
   240e0:	d813      	bhi.n	2410a <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   240e2:	e8df f000 	tbb	[pc, r0]
   240e6:	0f11      	.short	0x0f11
   240e8:	080a0b0d 	.word	0x080a0b0d
   240ec:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   240ee:	0e10      	lsrs	r0, r2, #24
   240f0:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   240f2:	0c10      	lsrs	r0, r2, #16
   240f4:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   240f6:	0a10      	lsrs	r0, r2, #8
   240f8:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   240fa:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   240fc:	0e1a      	lsrs	r2, r3, #24
   240fe:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   24100:	0c1a      	lsrs	r2, r3, #16
   24102:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   24104:	0a1a      	lsrs	r2, r3, #8
   24106:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   24108:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   2410a:	bd10      	pop	{r4, pc}
   2410c:	4002b000 	.word	0x4002b000

00024110 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   24110:	3802      	subs	r0, #2
   24112:	2807      	cmp	r0, #7
   24114:	d81f      	bhi.n	24156 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   24116:	e8df f000 	tbb	[pc, r0]
   2411a:	2729      	.short	0x2729
   2411c:	21231125 	.word	0x21231125
   24120:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   24122:	79cb      	ldrb	r3, [r1, #7]
   24124:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   24126:	798a      	ldrb	r2, [r1, #6]
   24128:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   2412c:	794a      	ldrb	r2, [r1, #5]
   2412e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   24132:	790a      	ldrb	r2, [r1, #4]
   24134:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   24136:	4a0e      	ldr	r2, [pc, #56]	; (24170 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   24138:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   2413c:	78cb      	ldrb	r3, [r1, #3]
   2413e:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   24140:	788a      	ldrb	r2, [r1, #2]
   24142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   24146:	784a      	ldrb	r2, [r1, #1]
   24148:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   2414c:	780a      	ldrb	r2, [r1, #0]
   2414e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   24150:	4a07      	ldr	r2, [pc, #28]	; (24170 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   24152:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   24156:	4770      	bx	lr
    switch (length)
   24158:	2300      	movs	r3, #0
   2415a:	e7e4      	b.n	24126 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   2415c:	2300      	movs	r3, #0
   2415e:	e7e5      	b.n	2412c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   24160:	2300      	movs	r3, #0
   24162:	e7e6      	b.n	24132 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   24164:	2300      	movs	r3, #0
   24166:	e7eb      	b.n	24140 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   24168:	2300      	movs	r3, #0
   2416a:	e7ec      	b.n	24146 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   2416c:	2300      	movs	r3, #0
   2416e:	e7ed      	b.n	2414c <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   24170:	4002b000 	.word	0x4002b000

00024174 <nrfx_qspi_init>:
{
   24174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   24176:	4f67      	ldr	r7, [pc, #412]	; (24314 <nrfx_qspi_init+0x1a0>)
{
   24178:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   2417a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
{
   2417e:	460d      	mov	r5, r1
   24180:	4616      	mov	r6, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   24182:	2b00      	cmp	r3, #0
   24184:	f040 80c2 	bne.w	2430c <nrfx_qspi_init+0x198>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   24188:	7cc2      	ldrb	r2, [r0, #19]
   2418a:	b112      	cbz	r2, 24192 <nrfx_qspi_init+0x1e>
   2418c:	7d03      	ldrb	r3, [r0, #20]
   2418e:	2b00      	cmp	r3, #0
   24190:	d16c      	bne.n	2426c <nrfx_qspi_init+0xf8>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   24192:	7920      	ldrb	r0, [r4, #4]
   24194:	28ff      	cmp	r0, #255	; 0xff
   24196:	f000 80bb 	beq.w	24310 <nrfx_qspi_init+0x19c>
   2419a:	7963      	ldrb	r3, [r4, #5]
   2419c:	2bff      	cmp	r3, #255	; 0xff
   2419e:	f000 80b7 	beq.w	24310 <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   241a2:	79a3      	ldrb	r3, [r4, #6]
   241a4:	2bff      	cmp	r3, #255	; 0xff
   241a6:	f000 80b3 	beq.w	24310 <nrfx_qspi_init+0x19c>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   241aa:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   241ac:	29ff      	cmp	r1, #255	; 0xff
   241ae:	f000 80af 	beq.w	24310 <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   241b2:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   241b4:	f8df c160 	ldr.w	ip, [pc, #352]	; 24318 <nrfx_qspi_init+0x1a4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   241b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   241bc:	4563      	cmp	r3, ip
   241be:	f040 80a7 	bne.w	24310 <nrfx_qspi_init+0x19c>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   241c2:	290e      	cmp	r1, #14
   241c4:	f040 80a4 	bne.w	24310 <nrfx_qspi_init+0x19c>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   241c8:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   241ca:	2bff      	cmp	r3, #255	; 0xff
   241cc:	d002      	beq.n	241d4 <nrfx_qspi_init+0x60>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   241ce:	2b0f      	cmp	r3, #15
   241d0:	f040 809e 	bne.w	24310 <nrfx_qspi_init+0x19c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   241d4:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   241d6:	2bff      	cmp	r3, #255	; 0xff
   241d8:	d002      	beq.n	241e0 <nrfx_qspi_init+0x6c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   241da:	2b10      	cmp	r3, #16
   241dc:	f040 8098 	bne.w	24310 <nrfx_qspi_init+0x19c>
    if (!p_config->skip_gpio_cfg)
   241e0:	b9b2      	cbnz	r2, 24210 <nrfx_qspi_init+0x9c>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   241e2:	2103      	movs	r1, #3
   241e4:	f7ff ff5a 	bl	2409c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   241e8:	7960      	ldrb	r0, [r4, #5]
   241ea:	f7ff ff57 	bl	2409c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   241ee:	79a0      	ldrb	r0, [r4, #6]
   241f0:	f7ff ff54 	bl	2409c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   241f4:	79e0      	ldrb	r0, [r4, #7]
   241f6:	f7ff ff51 	bl	2409c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   241fa:	7a20      	ldrb	r0, [r4, #8]
   241fc:	28ff      	cmp	r0, #255	; 0xff
   241fe:	d001      	beq.n	24204 <nrfx_qspi_init+0x90>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   24200:	f7ff ff4c 	bl	2409c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24204:	7a60      	ldrb	r0, [r4, #9]
   24206:	28ff      	cmp	r0, #255	; 0xff
   24208:	d002      	beq.n	24210 <nrfx_qspi_init+0x9c>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   2420a:	2103      	movs	r1, #3
   2420c:	f7ff ff46 	bl	2409c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   24210:	7d23      	ldrb	r3, [r4, #20]
   24212:	bb5b      	cbnz	r3, 2426c <nrfx_qspi_init+0xf8>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   24214:	7923      	ldrb	r3, [r4, #4]
   24216:	2bff      	cmp	r3, #255	; 0xff
   24218:	bf14      	ite	ne
   2421a:	461a      	movne	r2, r3
   2421c:	f04f 32ff 	moveq.w	r2, #4294967295
   24220:	4b3e      	ldr	r3, [pc, #248]	; (2431c <nrfx_qspi_init+0x1a8>)
   24222:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   24226:	7962      	ldrb	r2, [r4, #5]
   24228:	2aff      	cmp	r2, #255	; 0xff
   2422a:	bf08      	it	eq
   2422c:	f04f 32ff 	moveq.w	r2, #4294967295
   24230:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   24234:	79a2      	ldrb	r2, [r4, #6]
   24236:	2aff      	cmp	r2, #255	; 0xff
   24238:	bf08      	it	eq
   2423a:	f04f 32ff 	moveq.w	r2, #4294967295
   2423e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   24242:	79e2      	ldrb	r2, [r4, #7]
   24244:	2aff      	cmp	r2, #255	; 0xff
   24246:	bf08      	it	eq
   24248:	f04f 32ff 	moveq.w	r2, #4294967295
   2424c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   24250:	7a22      	ldrb	r2, [r4, #8]
   24252:	2aff      	cmp	r2, #255	; 0xff
   24254:	bf08      	it	eq
   24256:	f04f 32ff 	moveq.w	r2, #4294967295
   2425a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   2425e:	7a62      	ldrb	r2, [r4, #9]
   24260:	2aff      	cmp	r2, #255	; 0xff
   24262:	bf08      	it	eq
   24264:	f04f 32ff 	moveq.w	r2, #4294967295
   24268:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   2426c:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   2426e:	4a2b      	ldr	r2, [pc, #172]	; (2431c <nrfx_qspi_init+0x1a8>)
   24270:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   24274:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   24276:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   24278:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   2427a:	019b      	lsls	r3, r3, #6
   2427c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   24280:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   24282:	7b61      	ldrb	r1, [r4, #13]
   24284:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   24288:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   2428c:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   2428e:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   24292:	bbb1      	cbnz	r1, 24302 <nrfx_qspi_init+0x18e>
        regval |= ((1 << 16) | (1 << 17));
   24294:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   24298:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   2429c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   242a0:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   242a4:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   242a8:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   242aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   242ae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   242b2:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   242b4:	7be1      	ldrb	r1, [r4, #15]
   242b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   242ba:	7c21      	ldrb	r1, [r4, #16]
   242bc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   242c0:	7c61      	ldrb	r1, [r4, #17]
   242c2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   242c6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   242ca:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   242cc:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   242d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   242d4:	2301      	movs	r3, #1
   242d6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   242da:	b115      	cbz	r5, 242e2 <nrfx_qspi_init+0x16e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   242dc:	202b      	movs	r0, #43	; 0x2b
   242de:	f7ec feef 	bl	110c0 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   242e2:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   242e4:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   242e6:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   242ea:	4b0c      	ldr	r3, [pc, #48]	; (2431c <nrfx_qspi_init+0x1a8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   242ec:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   242f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   242f4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   242f8:	601a      	str	r2, [r3, #0]
}
   242fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   242fe:	f7ff bea3 	b.w	24048 <qspi_ready_wait>
        regval &= ~(1 << 17);
   24302:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   24306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2430a:	e7c5      	b.n	24298 <nrfx_qspi_init+0x124>
        return NRFX_ERROR_INVALID_STATE;
   2430c:	4804      	ldr	r0, [pc, #16]	; (24320 <nrfx_qspi_init+0x1ac>)
}
   2430e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   24310:	4804      	ldr	r0, [pc, #16]	; (24324 <nrfx_qspi_init+0x1b0>)
   24312:	e7fc      	b.n	2430e <nrfx_qspi_init+0x19a>
   24314:	20030c10 	.word	0x20030c10
   24318:	000d1211 	.word	0x000d1211
   2431c:	4002b000 	.word	0x4002b000
   24320:	0bad0005 	.word	0x0bad0005
   24324:	0bad0004 	.word	0x0bad0004

00024328 <nrfx_qspi_cinstr_xfer>:
{
   24328:	b570      	push	{r4, r5, r6, lr}
   2432a:	4614      	mov	r4, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   2432c:	4a19      	ldr	r2, [pc, #100]	; (24394 <nrfx_qspi_cinstr_xfer+0x6c>)
{
   2432e:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   24330:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   24334:	2a01      	cmp	r2, #1
   24336:	d12b      	bne.n	24390 <nrfx_qspi_cinstr_xfer+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24338:	2200      	movs	r2, #0
   2433a:	4e17      	ldr	r6, [pc, #92]	; (24398 <nrfx_qspi_cinstr_xfer+0x70>)
   2433c:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   24340:	b111      	cbz	r1, 24348 <nrfx_qspi_cinstr_xfer+0x20>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   24342:	7840      	ldrb	r0, [r0, #1]
   24344:	f7ff fee4 	bl	24110 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   24348:	2301      	movs	r3, #1
   2434a:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2434e:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24350:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   24352:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   24358:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2435a:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   2435c:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2435e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   24362:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   24364:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   24368:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   2436a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2436e:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   24372:	f7ff fe69 	bl	24048 <qspi_ready_wait>
   24376:	4b09      	ldr	r3, [pc, #36]	; (2439c <nrfx_qspi_cinstr_xfer+0x74>)
   24378:	4298      	cmp	r0, r3
   2437a:	d008      	beq.n	2438e <nrfx_qspi_cinstr_xfer+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2437c:	2300      	movs	r3, #0
   2437e:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   24382:	b11c      	cbz	r4, 2438c <nrfx_qspi_cinstr_xfer+0x64>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   24384:	4621      	mov	r1, r4
   24386:	7868      	ldrb	r0, [r5, #1]
   24388:	f7ff fea2 	bl	240d0 <nrf_qspi_cinstrdata_get.constprop.0>
        return NRFX_ERROR_BUSY;
   2438c:	4804      	ldr	r0, [pc, #16]	; (243a0 <nrfx_qspi_cinstr_xfer+0x78>)
}
   2438e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   24390:	4804      	ldr	r0, [pc, #16]	; (243a4 <nrfx_qspi_cinstr_xfer+0x7c>)
   24392:	e7fc      	b.n	2438e <nrfx_qspi_cinstr_xfer+0x66>
   24394:	20030c10 	.word	0x20030c10
   24398:	4002b000 	.word	0x4002b000
   2439c:	0bad0007 	.word	0x0bad0007
   243a0:	0bad0000 	.word	0x0bad0000
   243a4:	0bad000b 	.word	0x0bad000b

000243a8 <nrfx_qspi_mem_busy_check>:
{
   243a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   243aa:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   243ac:	4a0c      	ldr	r2, [pc, #48]	; (243e0 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   243ae:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   243b0:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   243b2:	f10d 0207 	add.w	r2, sp, #7
   243b6:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   243b8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   243bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   243c0:	f7ff ffb2 	bl	24328 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   243c4:	4b07      	ldr	r3, [pc, #28]	; (243e4 <nrfx_qspi_mem_busy_check+0x3c>)
   243c6:	4298      	cmp	r0, r3
   243c8:	d106      	bne.n	243d8 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   243ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   243ce:	f013 0f01 	tst.w	r3, #1
   243d2:	4b05      	ldr	r3, [pc, #20]	; (243e8 <nrfx_qspi_mem_busy_check+0x40>)
   243d4:	bf18      	it	ne
   243d6:	4618      	movne	r0, r3
}
   243d8:	b005      	add	sp, #20
   243da:	f85d fb04 	ldr.w	pc, [sp], #4
   243de:	bf00      	nop
   243e0:	01000205 	.word	0x01000205
   243e4:	0bad0000 	.word	0x0bad0000
   243e8:	0bad000b 	.word	0x0bad000b

000243ec <nrfx_qspi_uninit>:
{
   243ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   243f0:	202b      	movs	r0, #43	; 0x2b
   243f2:	f7ec fe73 	bl	110dc <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   243f6:	4b21      	ldr	r3, [pc, #132]	; (2447c <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
   243f8:	4e21      	ldr	r6, [pc, #132]	; (24480 <nrfx_qspi_uninit+0x94>)
   243fa:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   243fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   24402:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   24406:	bf04      	itt	eq
   24408:	4a1e      	ldreq	r2, [pc, #120]	; (24484 <nrfx_qspi_uninit+0x98>)
   2440a:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   2440e:	2201      	movs	r2, #1
   24410:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24414:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   24416:	2200      	movs	r2, #0
   24418:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2441c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   24420:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   24424:	bb22      	cbnz	r2, 24470 <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   24426:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   2442a:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   2442e:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   24430:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   24434:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   24438:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   2443c:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   24440:	f00b fddb 	bl	2fffa <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   24444:	fa5f f089 	uxtb.w	r0, r9
   24448:	f00b fdd7 	bl	2fffa <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   2444c:	fa5f f088 	uxtb.w	r0, r8
   24450:	f00b fdd3 	bl	2fffa <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   24454:	b2f8      	uxtb	r0, r7
   24456:	f00b fdd0 	bl	2fffa <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2445a:	b2e8      	uxtb	r0, r5
   2445c:	28ff      	cmp	r0, #255	; 0xff
   2445e:	b2e4      	uxtb	r4, r4
   24460:	d001      	beq.n	24466 <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
   24462:	f00b fdca 	bl	2fffa <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24466:	2cff      	cmp	r4, #255	; 0xff
   24468:	d002      	beq.n	24470 <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
   2446a:	4620      	mov	r0, r4
   2446c:	f00b fdc5 	bl	2fffa <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   24470:	2300      	movs	r3, #0
   24472:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   24476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2447a:	bf00      	nop
   2447c:	4002b000 	.word	0x4002b000
   24480:	20030c10 	.word	0x20030c10
   24484:	00030100 	.word	0x00030100

00024488 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
   24488:	078b      	lsls	r3, r1, #30
   2448a:	d121      	bne.n	244d0 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   2448c:	4a12      	ldr	r2, [pc, #72]	; (244d8 <nrfx_qspi_erase+0x50>)
   2448e:	6813      	ldr	r3, [r2, #0]
   24490:	b11b      	cbz	r3, 2449a <nrfx_qspi_erase+0x12>
   24492:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   24496:	2b01      	cmp	r3, #1
   24498:	d11c      	bne.n	244d4 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   2449a:	2304      	movs	r3, #4
   2449c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   244a0:	4b0e      	ldr	r3, [pc, #56]	; (244dc <nrfx_qspi_erase+0x54>)
   244a2:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244a6:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   244a8:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244ac:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   244b0:	2101      	movs	r1, #1
   244b2:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   244b4:	6810      	ldr	r0, [r2, #0]
   244b6:	b940      	cbnz	r0, 244ca <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   244b8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   244bc:	2900      	cmp	r1, #0
   244be:	d0fb      	beq.n	244b8 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   244c0:	2301      	movs	r3, #1
   244c2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   244c6:	4806      	ldr	r0, [pc, #24]	; (244e0 <nrfx_qspi_erase+0x58>)
   244c8:	4770      	bx	lr
    p_reg->INTENSET = mask;
   244ca:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   244ce:	e7fa      	b.n	244c6 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
   244d0:	4804      	ldr	r0, [pc, #16]	; (244e4 <nrfx_qspi_erase+0x5c>)
   244d2:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   244d4:	4804      	ldr	r0, [pc, #16]	; (244e8 <nrfx_qspi_erase+0x60>)
}
   244d6:	4770      	bx	lr
   244d8:	20030c10 	.word	0x20030c10
   244dc:	4002b000 	.word	0x4002b000
   244e0:	0bad0000 	.word	0x0bad0000
   244e4:	0bad000a 	.word	0x0bad000a
   244e8:	0bad000b 	.word	0x0bad000b

000244ec <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   244ec:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   244ee:	4b17      	ldr	r3, [pc, #92]	; (2454c <nrfx_qspi_irq_handler+0x60>)
   244f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   244f4:	b1e2      	cbz	r2, 24530 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244f6:	2200      	movs	r2, #0
    switch (m_cb.state)
   244f8:	4c15      	ldr	r4, [pc, #84]	; (24550 <nrfx_qspi_irq_handler+0x64>)
   244fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   244fe:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   24502:	2a03      	cmp	r2, #3
   24504:	d015      	beq.n	24532 <nrfx_qspi_irq_handler+0x46>
   24506:	2a04      	cmp	r2, #4
   24508:	d015      	beq.n	24536 <nrfx_qspi_irq_handler+0x4a>
   2450a:	2a02      	cmp	r2, #2
   2450c:	d104      	bne.n	24518 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   2450e:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   24510:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   24514:	f7ff fdae 	bl	24074 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   24518:	68a3      	ldr	r3, [r4, #8]
   2451a:	b913      	cbnz	r3, 24522 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   2451c:	2301      	movs	r3, #1
   2451e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   24522:	e9d4 3100 	ldrd	r3, r1, [r4]
   24526:	2000      	movs	r0, #0
   24528:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   2452a:	2300      	movs	r3, #0
   2452c:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   24530:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   24532:	2302      	movs	r3, #2
   24534:	e7ec      	b.n	24510 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   24536:	2203      	movs	r2, #3
   24538:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   2453c:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   24540:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   24542:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   24546:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   2454a:	e7e5      	b.n	24518 <nrfx_qspi_irq_handler+0x2c>
   2454c:	4002b000 	.word	0x4002b000
   24550:	20030c10 	.word	0x20030c10

00024554 <nrf_gpio_pin_clear>:
        case 0: return NRF_P0;
   24554:	4a05      	ldr	r2, [pc, #20]	; (2456c <nrf_gpio_pin_clear+0x18>)
   24556:	4b06      	ldr	r3, [pc, #24]	; (24570 <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
   24558:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   2455c:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   2455e:	2801      	cmp	r0, #1
   24560:	bf18      	it	ne
   24562:	4613      	movne	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   24564:	2201      	movs	r2, #1
   24566:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   24568:	60da      	str	r2, [r3, #12]
}
   2456a:	4770      	bx	lr
   2456c:	40842500 	.word	0x40842500
   24570:	40842800 	.word	0x40842800

00024574 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   24574:	b570      	push	{r4, r5, r6, lr}
        case 0: return NRF_P0;
   24576:	4c0d      	ldr	r4, [pc, #52]	; (245ac <nrf_gpio_cfg.constprop.0+0x38>)
   24578:	4e0d      	ldr	r6, [pc, #52]	; (245b0 <nrf_gpio_cfg.constprop.0+0x3c>)
    *p_pin = pin_number & 0x1F;
   2457a:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   2457e:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   24580:	2801      	cmp	r0, #1
   24582:	bf18      	it	ne
   24584:	4634      	movne	r4, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   24586:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2458a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   2458e:	0200      	lsls	r0, r0, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   24590:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24594:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
   24598:	4308      	orrs	r0, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2459a:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2459e:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   245a2:	4328      	orrs	r0, r5
    reg->PIN_CNF[pin_number] = cnf;
   245a4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
   245a8:	bd70      	pop	{r4, r5, r6, pc}
   245aa:	bf00      	nop
   245ac:	40842800 	.word	0x40842800
   245b0:	40842500 	.word	0x40842500

000245b4 <nrf_gpio_pin_set>:
        case 0: return NRF_P0;
   245b4:	4a05      	ldr	r2, [pc, #20]	; (245cc <nrf_gpio_pin_set+0x18>)
   245b6:	4b06      	ldr	r3, [pc, #24]	; (245d0 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   245b8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   245bc:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   245be:	2801      	cmp	r0, #1
   245c0:	bf18      	it	ne
   245c2:	4613      	movne	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   245c4:	2201      	movs	r2, #1
   245c6:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   245c8:	609a      	str	r2, [r3, #8]
}
   245ca:	4770      	bx	lr
   245cc:	40842500 	.word	0x40842500
   245d0:	40842800 	.word	0x40842800

000245d4 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   245d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   245d8:	4d87      	ldr	r5, [pc, #540]	; (247f8 <nrfx_spim_init+0x224>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   245da:	7907      	ldrb	r7, [r0, #4]
{
   245dc:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   245de:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   245e2:	7f09      	ldrb	r1, [r1, #28]
{
   245e4:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   245e6:	2900      	cmp	r1, #0
   245e8:	f040 8100 	bne.w	247ec <nrfx_spim_init+0x218>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   245ec:	2f00      	cmp	r7, #0
   245ee:	f040 80ff 	bne.w	247f0 <nrfx_spim_init+0x21c>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   245f2:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   245f6:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   245f8:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   245fa:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   245fe:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   24600:	d027      	beq.n	24652 <nrfx_spim_init+0x7e>
   24602:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   24606:	d124      	bne.n	24652 <nrfx_spim_init+0x7e>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   24608:	b119      	cbz	r1, 24612 <nrfx_spim_init+0x3e>
   2460a:	7d20      	ldrb	r0, [r4, #20]
   2460c:	2800      	cmp	r0, #0
   2460e:	f040 80d5 	bne.w	247bc <nrfx_spim_init+0x1e8>
   24612:	487a      	ldr	r0, [pc, #488]	; (247fc <nrfx_spim_init+0x228>)
   24614:	4581      	cmp	r9, r0
   24616:	d11c      	bne.n	24652 <nrfx_spim_init+0x7e>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   24618:	7820      	ldrb	r0, [r4, #0]
   2461a:	28ff      	cmp	r0, #255	; 0xff
   2461c:	d002      	beq.n	24624 <nrfx_spim_init+0x50>
   2461e:	2808      	cmp	r0, #8
   24620:	f040 80e8 	bne.w	247f4 <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   24624:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   24626:	28ff      	cmp	r0, #255	; 0xff
   24628:	d002      	beq.n	24630 <nrfx_spim_init+0x5c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   2462a:	280b      	cmp	r0, #11
   2462c:	f040 80e2 	bne.w	247f4 <nrfx_spim_init+0x220>
   24630:	2eff      	cmp	r6, #255	; 0xff
   24632:	d002      	beq.n	2463a <nrfx_spim_init+0x66>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   24634:	2e0c      	cmp	r6, #12
   24636:	f040 80dd 	bne.w	247f4 <nrfx_spim_init+0x220>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   2463a:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   2463c:	28ff      	cmp	r0, #255	; 0xff
   2463e:	d002      	beq.n	24646 <nrfx_spim_init+0x72>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   24640:	2809      	cmp	r0, #9
   24642:	f040 80d7 	bne.w	247f4 <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   24646:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   24648:	28ff      	cmp	r0, #255	; 0xff
   2464a:	d002      	beq.n	24652 <nrfx_spim_init+0x7e>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   2464c:	280a      	cmp	r0, #10
   2464e:	f040 80d1 	bne.w	247f4 <nrfx_spim_init+0x220>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   24652:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   24656:	7fab      	ldrb	r3, [r5, #30]
   24658:	f361 0300 	bfi	r3, r1, #0, #1
   2465c:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   2465e:	7922      	ldrb	r2, [r4, #4]
   24660:	b2db      	uxtb	r3, r3
   24662:	f362 0341 	bfi	r3, r2, #1, #1
   24666:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   24668:	7c62      	ldrb	r2, [r4, #17]
   2466a:	b2db      	uxtb	r3, r3
   2466c:	f362 0382 	bfi	r3, r2, #2, #1
   24670:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   24672:	78e3      	ldrb	r3, [r4, #3]
   24674:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   24676:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   24678:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   2467c:	2b00      	cmp	r3, #0
   2467e:	d142      	bne.n	24706 <nrfx_spim_init+0x132>
                    : NRF_GPIO_PIN_S0S1;
   24680:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   24682:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   24684:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   24688:	7b23      	ldrb	r3, [r4, #12]
   2468a:	bf08      	it	eq
   2468c:	2703      	moveq	r7, #3
   2468e:	2b01      	cmp	r3, #1
   24690:	f200 8096 	bhi.w	247c0 <nrfx_spim_init+0x1ec>
        nrf_gpio_pin_clear(pin_number);
   24694:	f7ff ff5e 	bl	24554 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   24698:	2300      	movs	r3, #0
   2469a:	9700      	str	r7, [sp, #0]
   2469c:	7820      	ldrb	r0, [r4, #0]
   2469e:	461a      	mov	r2, r3
   246a0:	2101      	movs	r1, #1
   246a2:	f7ff ff67 	bl	24574 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   246a6:	7860      	ldrb	r0, [r4, #1]
   246a8:	28ff      	cmp	r0, #255	; 0xff
   246aa:	d008      	beq.n	246be <nrfx_spim_init+0xea>
   246ac:	f7ff ff52 	bl	24554 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   246b0:	2201      	movs	r2, #1
   246b2:	9700      	str	r7, [sp, #0]
   246b4:	2300      	movs	r3, #0
   246b6:	4611      	mov	r1, r2
   246b8:	7860      	ldrb	r0, [r4, #1]
   246ba:	f7ff ff5b 	bl	24574 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   246be:	78a0      	ldrb	r0, [r4, #2]
   246c0:	28ff      	cmp	r0, #255	; 0xff
   246c2:	d005      	beq.n	246d0 <nrfx_spim_init+0xfc>
            nrf_gpio_cfg(p_config->miso_pin,
   246c4:	2200      	movs	r2, #0
   246c6:	9700      	str	r7, [sp, #0]
   246c8:	4611      	mov	r1, r2
   246ca:	7ba3      	ldrb	r3, [r4, #14]
   246cc:	f7ff ff52 	bl	24574 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   246d0:	78e0      	ldrb	r0, [r4, #3]
   246d2:	28ff      	cmp	r0, #255	; 0xff
   246d4:	d00b      	beq.n	246ee <nrfx_spim_init+0x11a>
    if (value == 0)
   246d6:	7923      	ldrb	r3, [r4, #4]
   246d8:	2b00      	cmp	r3, #0
   246da:	d074      	beq.n	247c6 <nrfx_spim_init+0x1f2>
        nrf_gpio_pin_clear(pin_number);
   246dc:	f7ff ff3a 	bl	24554 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   246e0:	2201      	movs	r2, #1
   246e2:	9700      	str	r7, [sp, #0]
   246e4:	2300      	movs	r3, #0
   246e6:	4611      	mov	r1, r2
   246e8:	78e0      	ldrb	r0, [r4, #3]
   246ea:	f7ff ff43 	bl	24574 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   246ee:	7be0      	ldrb	r0, [r4, #15]
   246f0:	28ff      	cmp	r0, #255	; 0xff
   246f2:	d008      	beq.n	24706 <nrfx_spim_init+0x132>
        nrf_gpio_pin_set(pin_number);
   246f4:	f7ff ff5e 	bl	245b4 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   246f8:	2201      	movs	r2, #1
   246fa:	9700      	str	r7, [sp, #0]
   246fc:	2300      	movs	r3, #0
   246fe:	4611      	mov	r1, r2
   24700:	7be0      	ldrb	r0, [r4, #15]
   24702:	f7ff ff37 	bl	24574 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   24706:	7d23      	ldrb	r3, [r4, #20]
   24708:	bb6b      	cbnz	r3, 24766 <nrfx_spim_init+0x192>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2470a:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   2470c:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   2470e:	2bff      	cmp	r3, #255	; 0xff
   24710:	bf18      	it	ne
   24712:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   24714:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   24716:	bf08      	it	eq
   24718:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   2471c:	2bff      	cmp	r3, #255	; 0xff
   2471e:	bf08      	it	eq
   24720:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   24724:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   24728:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   2472c:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   24730:	f898 3004 	ldrb.w	r3, [r8, #4]
   24734:	b9bb      	cbnz	r3, 24766 <nrfx_spim_init+0x192>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   24736:	78e3      	ldrb	r3, [r4, #3]
   24738:	2bff      	cmp	r3, #255	; 0xff
   2473a:	d047      	beq.n	247cc <nrfx_spim_init+0x1f8>
   2473c:	7c62      	ldrb	r2, [r4, #17]
   2473e:	2a00      	cmp	r2, #0
   24740:	d044      	beq.n	247cc <nrfx_spim_init+0x1f8>
                                    (p_config->ss_active_high == true
   24742:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   24744:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   24746:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   2474a:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   2474e:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   24752:	f898 3004 	ldrb.w	r3, [r8, #4]
   24756:	b933      	cbnz	r3, 24766 <nrfx_spim_init+0x192>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   24758:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   2475a:	2bff      	cmp	r3, #255	; 0xff
   2475c:	bf08      	it	eq
   2475e:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   24762:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   24766:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   24768:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   2476c:	68a3      	ldr	r3, [r4, #8]
   2476e:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   24772:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   24774:	7b22      	ldrb	r2, [r4, #12]
   24776:	3b00      	subs	r3, #0
   24778:	bf18      	it	ne
   2477a:	2301      	movne	r3, #1
    switch (spi_mode)
   2477c:	2a02      	cmp	r2, #2
   2477e:	d02f      	beq.n	247e0 <nrfx_spim_init+0x20c>
   24780:	2a03      	cmp	r2, #3
   24782:	d030      	beq.n	247e6 <nrfx_spim_init+0x212>
   24784:	2a01      	cmp	r2, #1
   24786:	d101      	bne.n	2478c <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   24788:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   2478c:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   24790:	79a3      	ldrb	r3, [r4, #6]
   24792:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   24796:	2307      	movs	r3, #7
   24798:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   2479c:	682b      	ldr	r3, [r5, #0]
   2479e:	b12b      	cbz	r3, 247ac <nrfx_spim_init+0x1d8>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   247a0:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   247a4:	f340 3007 	sbfx	r0, r0, #12, #8
   247a8:	f7ec fc8a 	bl	110c0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   247ac:	2300      	movs	r3, #0
   247ae:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   247b0:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   247b2:	4813      	ldr	r0, [pc, #76]	; (24800 <nrfx_spim_init+0x22c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   247b4:	772b      	strb	r3, [r5, #28]
}
   247b6:	b003      	add	sp, #12
   247b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   247bc:	4601      	mov	r1, r0
   247be:	e748      	b.n	24652 <nrfx_spim_init+0x7e>
   247c0:	f7ff fef8 	bl	245b4 <nrf_gpio_pin_set>
   247c4:	e768      	b.n	24698 <nrfx_spim_init+0xc4>
   247c6:	f7ff fef5 	bl	245b4 <nrf_gpio_pin_set>
   247ca:	e789      	b.n	246e0 <nrfx_spim_init+0x10c>
    p_reg->PSEL.CSN = pin;
   247cc:	f04f 33ff 	mov.w	r3, #4294967295
   247d0:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   247d4:	2300      	movs	r3, #0
   247d6:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   247da:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   247de:	e7b8      	b.n	24752 <nrfx_spim_init+0x17e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   247e0:	f043 0304 	orr.w	r3, r3, #4
        break;
   247e4:	e7d2      	b.n	2478c <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   247e6:	f043 0306 	orr.w	r3, r3, #6
        break;
   247ea:	e7cf      	b.n	2478c <nrfx_spim_init+0x1b8>
        return err_code;
   247ec:	4805      	ldr	r0, [pc, #20]	; (24804 <nrfx_spim_init+0x230>)
   247ee:	e7e2      	b.n	247b6 <nrfx_spim_init+0x1e2>
        return err_code;
   247f0:	4805      	ldr	r0, [pc, #20]	; (24808 <nrfx_spim_init+0x234>)
   247f2:	e7e0      	b.n	247b6 <nrfx_spim_init+0x1e2>
            return err_code;
   247f4:	4805      	ldr	r0, [pc, #20]	; (2480c <nrfx_spim_init+0x238>)
   247f6:	e7de      	b.n	247b6 <nrfx_spim_init+0x1e2>
   247f8:	20030c44 	.word	0x20030c44
   247fc:	4000a000 	.word	0x4000a000
   24800:	0bad0000 	.word	0x0bad0000
   24804:	0bad0005 	.word	0x0bad0005
   24808:	0bad0003 	.word	0x0bad0003
   2480c:	0bad0004 	.word	0x0bad0004

00024810 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   24810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   24814:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   24816:	4d25      	ldr	r5, [pc, #148]	; (248ac <nrfx_spim_uninit+0x9c>)
   24818:	015e      	lsls	r6, r3, #5
   2481a:	eb05 1843 	add.w	r8, r5, r3, lsl #5
   2481e:	59ab      	ldr	r3, [r5, r6]
{
   24820:	4607      	mov	r7, r0
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   24822:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   24824:	b1cb      	cbz	r3, 2485a <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   24826:	f344 3007 	sbfx	r0, r4, #12, #8
   2482a:	f7ec fc57 	bl	110dc <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2482e:	4b20      	ldr	r3, [pc, #128]	; (248b0 <nrfx_spim_uninit+0xa0>)
   24830:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   24834:	f898 301d 	ldrb.w	r3, [r8, #29]
   24838:	b17b      	cbz	r3, 2485a <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2483a:	2301      	movs	r3, #1
   2483c:	f04f 0864 	mov.w	r8, #100	; 0x64
   24840:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24842:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   24846:	b92b      	cbnz	r3, 24854 <nrfx_spim_uninit+0x44>
   24848:	2001      	movs	r0, #1
   2484a:	f00b fb71 	bl	2ff30 <nrfx_busy_wait>
   2484e:	f1b8 0801 	subs.w	r8, r8, #1
   24852:	d1f6      	bne.n	24842 <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
   24854:	2200      	movs	r2, #0
   24856:	19ab      	adds	r3, r5, r6
   24858:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   2485a:	2300      	movs	r3, #0
   2485c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   24860:	19ab      	adds	r3, r5, r6
   24862:	7f9b      	ldrb	r3, [r3, #30]
   24864:	07db      	lsls	r3, r3, #31
   24866:	d41b      	bmi.n	248a0 <nrfx_spim_uninit+0x90>
    return p_reg->PSEL.SCK;
   24868:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   2486c:	f00b fbd2 	bl	30014 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   24870:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   24874:	f00b fbce 	bl	30014 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   24878:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   2487c:	f00b fbca 	bl	30014 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   24880:	793b      	ldrb	r3, [r7, #4]
   24882:	b91b      	cbnz	r3, 2488c <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
   24884:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   24888:	f00b fbc4 	bl	30014 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2488c:	19ab      	adds	r3, r5, r6
   2488e:	7fd8      	ldrb	r0, [r3, #31]
   24890:	28ff      	cmp	r0, #255	; 0xff
   24892:	d005      	beq.n	248a0 <nrfx_spim_uninit+0x90>
    nrf_gpio_cfg(
   24894:	2300      	movs	r3, #0
   24896:	2201      	movs	r2, #1
   24898:	4619      	mov	r1, r3
   2489a:	9300      	str	r3, [sp, #0]
   2489c:	f7ff fe6a 	bl	24574 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   248a0:	2300      	movs	r3, #0
   248a2:	4435      	add	r5, r6
   248a4:	772b      	strb	r3, [r5, #28]
}
   248a6:	b002      	add	sp, #8
   248a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   248ac:	20030c44 	.word	0x20030c44
   248b0:	00080152 	.word	0x00080152

000248b4 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   248b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   248b8:	4f38      	ldr	r7, [pc, #224]	; (2499c <nrfx_spim_xfer+0xe8>)
   248ba:	7903      	ldrb	r3, [r0, #4]
{
   248bc:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   248be:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   248c2:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   248c6:	4681      	mov	r9, r0
   248c8:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   248ca:	015e      	lsls	r6, r3, #5
   248cc:	2a00      	cmp	r2, #0
   248ce:	d163      	bne.n	24998 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   248d0:	59ba      	ldr	r2, [r7, r6]
   248d2:	b12a      	cbz	r2, 248e0 <nrfx_spim_xfer+0x2c>
   248d4:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   248d8:	bf04      	itt	eq
   248da:	2201      	moveq	r2, #1
   248dc:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   248e0:	eb07 0c06 	add.w	ip, r7, r6
   248e4:	f10c 0c0c 	add.w	ip, ip, #12
   248e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   248ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   248f0:	2101      	movs	r1, #1
   248f2:	4640      	mov	r0, r8
   248f4:	f00b fb9a 	bl	3002c <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   248f8:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   248fa:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   248fe:	b121      	cbz	r1, 2490a <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   24900:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   24904:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   24908:	d106      	bne.n	24918 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2490a:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2490c:	b152      	cbz	r2, 24924 <nrfx_spim_xfer+0x70>
   2490e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   24912:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   24916:	d005      	beq.n	24924 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   24918:	2300      	movs	r3, #0
   2491a:	443e      	add	r6, r7
        return err_code;
   2491c:	4820      	ldr	r0, [pc, #128]	; (249a0 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   2491e:	7773      	strb	r3, [r6, #29]
}
   24920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   24924:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24926:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2492a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2492e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   24932:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24936:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2493a:	2200      	movs	r2, #0
   2493c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   24940:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   24944:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   24948:	bf18      	it	ne
   2494a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   2494c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   24950:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   24954:	bf18      	it	ne
   24956:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   24958:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2495c:	072a      	lsls	r2, r5, #28
   2495e:	d507      	bpl.n	24970 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   24960:	59ba      	ldr	r2, [r7, r6]
   24962:	b972      	cbnz	r2, 24982 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   24964:	2100      	movs	r1, #0
   24966:	4640      	mov	r0, r8
   24968:	f00b fb60 	bl	3002c <set_ss_pin_state>
    return err_code;
   2496c:	480d      	ldr	r0, [pc, #52]	; (249a4 <nrfx_spim_xfer+0xf0>)
   2496e:	e7d7      	b.n	24920 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24970:	2201      	movs	r2, #1
   24972:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   24974:	59ba      	ldr	r2, [r7, r6]
   24976:	b922      	cbnz	r2, 24982 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24978:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2497c:	2a00      	cmp	r2, #0
   2497e:	d0fb      	beq.n	24978 <nrfx_spim_xfer+0xc4>
   24980:	e7f0      	b.n	24964 <nrfx_spim_xfer+0xb0>
    if (!enable)
   24982:	f015 0f04 	tst.w	r5, #4
   24986:	f04f 0240 	mov.w	r2, #64	; 0x40
   2498a:	d002      	beq.n	24992 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   2498c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24990:	e7ec      	b.n	2496c <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   24992:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24996:	e7e9      	b.n	2496c <nrfx_spim_xfer+0xb8>
        return err_code;
   24998:	4803      	ldr	r0, [pc, #12]	; (249a8 <nrfx_spim_xfer+0xf4>)
   2499a:	e7c1      	b.n	24920 <nrfx_spim_xfer+0x6c>
   2499c:	20030c44 	.word	0x20030c44
   249a0:	0bad000a 	.word	0x0bad000a
   249a4:	0bad0000 	.word	0x0bad0000
   249a8:	0bad000b 	.word	0x0bad000b

000249ac <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   249ac:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   249ae:	4b0c      	ldr	r3, [pc, #48]	; (249e0 <nrfx_spim_4_irq_handler+0x34>)
   249b0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   249b4:	b192      	cbz	r2, 249dc <nrfx_spim_4_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   249b6:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   249b8:	4c0a      	ldr	r4, [pc, #40]	; (249e4 <nrfx_spim_4_irq_handler+0x38>)
   249ba:	4629      	mov	r1, r5
   249bc:	4620      	mov	r0, r4
   249be:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   249c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   249c6:	f00b fb31 	bl	3002c <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   249ca:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   249ce:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   249d0:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   249d2:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   249d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   249da:	4718      	bx	r3
}
   249dc:	bd70      	pop	{r4, r5, r6, pc}
   249de:	bf00      	nop
   249e0:	4000a000 	.word	0x4000a000
   249e4:	20030c44 	.word	0x20030c44

000249e8 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   249e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   249ec:	460e      	mov	r6, r1
   249ee:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   249f0:	4d0c      	ldr	r5, [pc, #48]	; (24a24 <metal_generic_dev_open+0x3c>)
   249f2:	f855 4f18 	ldr.w	r4, [r5, #24]!
   249f6:	42ac      	cmp	r4, r5
   249f8:	d103      	bne.n	24a02 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   249fa:	f06f 0012 	mvn.w	r0, #18
   249fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   24a02:	4631      	mov	r1, r6
   24a04:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   24a08:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   24a0c:	f7e4 fcf3 	bl	93f6 <strcmp>
   24a10:	b930      	cbnz	r0, 24a20 <metal_generic_dev_open+0x38>
			*device = dev;
   24a12:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   24a16:	4640      	mov	r0, r8
}
   24a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   24a1c:	f00b bc15 	b.w	3024a <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   24a20:	6824      	ldr	r4, [r4, #0]
   24a22:	e7e8      	b.n	249f6 <metal_generic_dev_open+0xe>
   24a24:	20030c64 	.word	0x20030c64

00024a28 <metal_bus_unregister>:
{
   24a28:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   24a2a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   24a2e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   24a30:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   24a32:	f100 0324 	add.w	r3, r0, #36	; 0x24
   24a36:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   24a38:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   24a3c:	6843      	ldr	r3, [r0, #4]
{
   24a3e:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   24a40:	b103      	cbz	r3, 24a44 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   24a42:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   24a44:	4b05      	ldr	r3, [pc, #20]	; (24a5c <metal_bus_unregister+0x34>)
   24a46:	781a      	ldrb	r2, [r3, #0]
   24a48:	2a06      	cmp	r2, #6
   24a4a:	d905      	bls.n	24a58 <metal_bus_unregister+0x30>
   24a4c:	685b      	ldr	r3, [r3, #4]
   24a4e:	b11b      	cbz	r3, 24a58 <metal_bus_unregister+0x30>
   24a50:	2007      	movs	r0, #7
   24a52:	6822      	ldr	r2, [r4, #0]
   24a54:	4902      	ldr	r1, [pc, #8]	; (24a60 <metal_bus_unregister+0x38>)
   24a56:	4798      	blx	r3
}
   24a58:	2000      	movs	r0, #0
   24a5a:	bd10      	pop	{r4, pc}
   24a5c:	20030c64 	.word	0x20030c64
   24a60:	000383c2 	.word	0x000383c2

00024a64 <metal_bus_find>:
{
   24a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a68:	4607      	mov	r7, r0
   24a6a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   24a6c:	4e0b      	ldr	r6, [pc, #44]	; (24a9c <metal_bus_find+0x38>)
   24a6e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   24a72:	42b4      	cmp	r4, r6
   24a74:	d102      	bne.n	24a7c <metal_bus_find+0x18>
	return -ENOENT;
   24a76:	f06f 0001 	mvn.w	r0, #1
   24a7a:	e00a      	b.n	24a92 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   24a7c:	4639      	mov	r1, r7
   24a7e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   24a82:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   24a86:	f7e4 fcb6 	bl	93f6 <strcmp>
   24a8a:	b920      	cbnz	r0, 24a96 <metal_bus_find+0x32>
   24a8c:	b11d      	cbz	r5, 24a96 <metal_bus_find+0x32>
			*result = bus;
   24a8e:	f8c5 8000 	str.w	r8, [r5]
}
   24a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   24a96:	6824      	ldr	r4, [r4, #0]
   24a98:	e7eb      	b.n	24a72 <metal_bus_find+0xe>
   24a9a:	bf00      	nop
   24a9c:	20030c64 	.word	0x20030c64

00024aa0 <metal_bus_register>:
{
   24aa0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   24aa2:	4604      	mov	r4, r0
   24aa4:	b910      	cbnz	r0, 24aac <metal_bus_register+0xc>
		return -EINVAL;
   24aa6:	f06f 0015 	mvn.w	r0, #21
}
   24aaa:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   24aac:	6800      	ldr	r0, [r0, #0]
   24aae:	2800      	cmp	r0, #0
   24ab0:	d0f9      	beq.n	24aa6 <metal_bus_register+0x6>
   24ab2:	f7e4 fcaa 	bl	940a <strlen>
   24ab6:	2800      	cmp	r0, #0
   24ab8:	d0f5      	beq.n	24aa6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   24aba:	2100      	movs	r1, #0
   24abc:	6820      	ldr	r0, [r4, #0]
   24abe:	f7ff ffd1 	bl	24a64 <metal_bus_find>
   24ac2:	b1c8      	cbz	r0, 24af8 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   24ac4:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   24ac8:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   24acc:	4b0c      	ldr	r3, [pc, #48]	; (24b00 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   24ace:	f104 0224 	add.w	r2, r4, #36	; 0x24
   24ad2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   24ad4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   24ad8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   24ada:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   24adc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   24ade:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   24ae0:	781a      	ldrb	r2, [r3, #0]
   24ae2:	2a06      	cmp	r2, #6
   24ae4:	d901      	bls.n	24aea <metal_bus_register+0x4a>
   24ae6:	685b      	ldr	r3, [r3, #4]
   24ae8:	b90b      	cbnz	r3, 24aee <metal_bus_register+0x4e>
	return 0;
   24aea:	2000      	movs	r0, #0
   24aec:	e7dd      	b.n	24aaa <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   24aee:	2007      	movs	r0, #7
   24af0:	6822      	ldr	r2, [r4, #0]
   24af2:	4904      	ldr	r1, [pc, #16]	; (24b04 <metal_bus_register+0x64>)
   24af4:	4798      	blx	r3
   24af6:	e7f8      	b.n	24aea <metal_bus_register+0x4a>
		return -EEXIST;
   24af8:	f06f 0010 	mvn.w	r0, #16
   24afc:	e7d5      	b.n	24aaa <metal_bus_register+0xa>
   24afe:	bf00      	nop
   24b00:	20030c64 	.word	0x20030c64
   24b04:	000383c4 	.word	0x000383c4

00024b08 <metal_register_generic_device>:
{
   24b08:	b510      	push	{r4, lr}
   24b0a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   24b0c:	6800      	ldr	r0, [r0, #0]
   24b0e:	b910      	cbnz	r0, 24b16 <metal_register_generic_device+0xe>
		return -EINVAL;
   24b10:	f06f 0015 	mvn.w	r0, #21
}
   24b14:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   24b16:	f7e4 fc78 	bl	940a <strlen>
   24b1a:	2800      	cmp	r0, #0
   24b1c:	d0f8      	beq.n	24b10 <metal_register_generic_device+0x8>
   24b1e:	68a3      	ldr	r3, [r4, #8]
   24b20:	2b01      	cmp	r3, #1
   24b22:	d8f5      	bhi.n	24b10 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   24b24:	4b06      	ldr	r3, [pc, #24]	; (24b40 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   24b26:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   24b2a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   24b2c:	4b05      	ldr	r3, [pc, #20]	; (24b44 <metal_register_generic_device+0x3c>)
   24b2e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   24b30:	f103 0018 	add.w	r0, r3, #24
   24b34:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   24b36:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   24b38:	61d9      	str	r1, [r3, #28]
	return 0;
   24b3a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   24b3c:	6011      	str	r1, [r2, #0]
}
   24b3e:	e7e9      	b.n	24b14 <metal_register_generic_device+0xc>
   24b40:	200087bc 	.word	0x200087bc
   24b44:	20030c64 	.word	0x20030c64

00024b48 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   24b48:	4b0e      	ldr	r3, [pc, #56]	; (24b84 <metal_init+0x3c>)
{
   24b4a:	b510      	push	{r4, lr}
   24b4c:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   24b4e:	2220      	movs	r2, #32
   24b50:	2100      	movs	r1, #0
   24b52:	4618      	mov	r0, r3
   24b54:	f00c fe15 	bl	31782 <memset>

	_metal.common.log_handler   = params->log_handler;
   24b58:	6822      	ldr	r2, [r4, #0]
   24b5a:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   24b5c:	4602      	mov	r2, r0
   24b5e:	7921      	ldrb	r1, [r4, #4]
   24b60:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   24b64:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   24b68:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   24b6c:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   24b70:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   24b74:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   24b78:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   24b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   24b7e:	f000 b80f 	b.w	24ba0 <metal_sys_init>
   24b82:	bf00      	nop
   24b84:	20030c64 	.word	0x20030c64

00024b88 <metal_finish>:

void metal_finish(void)
{
   24b88:	b508      	push	{r3, lr}
	metal_sys_finish();
   24b8a:	f000 f811 	bl	24bb0 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   24b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   24b92:	2220      	movs	r2, #32
   24b94:	2100      	movs	r1, #0
   24b96:	4801      	ldr	r0, [pc, #4]	; (24b9c <metal_finish+0x14>)
   24b98:	f00c bdf3 	b.w	31782 <memset>
   24b9c:	20030c64 	.word	0x20030c64

00024ba0 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   24ba0:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   24ba2:	4802      	ldr	r0, [pc, #8]	; (24bac <metal_sys_init+0xc>)
   24ba4:	f7ff ff7c 	bl	24aa0 <metal_bus_register>
	return 0;
}
   24ba8:	2000      	movs	r0, #0
   24baa:	bd08      	pop	{r3, pc}
   24bac:	200087bc 	.word	0x200087bc

00024bb0 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   24bb0:	4801      	ldr	r0, [pc, #4]	; (24bb8 <metal_sys_finish+0x8>)
   24bb2:	f7ff bf39 	b.w	24a28 <metal_bus_unregister>
   24bb6:	bf00      	nop
   24bb8:	200087bc 	.word	0x200087bc

00024bbc <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   24bbc:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   24bbe:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   24bc0:	2b06      	cmp	r3, #6
{
   24bc2:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   24bc4:	bf88      	it	hi
   24bc6:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   24bc8:	4b09      	ldr	r3, [pc, #36]	; (24bf0 <metal_zephyr_log_handler+0x34>)
{
   24bca:	ac05      	add	r4, sp, #20
   24bcc:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   24bd0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   24bd4:	4807      	ldr	r0, [pc, #28]	; (24bf4 <metal_zephyr_log_handler+0x38>)
   24bd6:	f005 fac9 	bl	2a16c <printk>

	va_start(args, format);
	vprintk(format, args);
   24bda:	4621      	mov	r1, r4
   24bdc:	4628      	mov	r0, r5
	va_start(args, format);
   24bde:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   24be0:	f7e9 fcf4 	bl	e5cc <vprintk>
	va_end(args);
}
   24be4:	b002      	add	sp, #8
   24be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   24bea:	b003      	add	sp, #12
   24bec:	4770      	bx	lr
   24bee:	bf00      	nop
   24bf0:	0003407c 	.word	0x0003407c
   24bf4:	000359be 	.word	0x000359be

00024bf8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   24bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bfc:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   24bfe:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   24c00:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   24c02:	4293      	cmp	r3, r2
{
   24c04:	4617      	mov	r7, r2
   24c06:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   24c08:	d341      	bcc.n	24c8e <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   24c0a:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   24c0c:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   24c10:	42bd      	cmp	r5, r7
   24c12:	d103      	bne.n	24c1c <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   24c14:	2000      	movs	r0, #0
}
   24c16:	b007      	add	sp, #28
   24c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   24c1c:	fb0b f805 	mul.w	r8, fp, r5
   24c20:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   24c24:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   24c26:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   24c2a:	1d23      	adds	r3, r4, #4
   24c2c:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   24c2e:	b9ca      	cbnz	r2, 24c64 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   24c30:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   24c32:	6861      	ldr	r1, [r4, #4]
   24c34:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   24c36:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   24c3a:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   24c3c:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   24c3e:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   24c42:	1e5c      	subs	r4, r3, #1
   24c44:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   24c48:	425b      	negs	r3, r3
   24c4a:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   24c4e:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   24c50:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   24c54:	6884      	ldr	r4, [r0, #8]
   24c56:	3306      	adds	r3, #6
   24c58:	42a1      	cmp	r1, r4
   24c5a:	bf28      	it	cs
   24c5c:	f04f 31ff 	movcs.w	r1, #4294967295
   24c60:	f00b fabf 	bl	301e2 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   24c64:	f859 3008 	ldr.w	r3, [r9, r8]
   24c68:	4630      	mov	r0, r6
   24c6a:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   24c6c:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   24c6e:	b2a9      	uxth	r1, r5
   24c70:	6a1b      	ldr	r3, [r3, #32]
   24c72:	9301      	str	r3, [sp, #4]
   24c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24c76:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   24c7a:	9300      	str	r3, [sp, #0]
   24c7c:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   24c80:	9b05      	ldr	r3, [sp, #20]
   24c82:	f00b fb27 	bl	302d4 <virtqueue_create>
		if (ret)
   24c86:	2800      	cmp	r0, #0
   24c88:	d1c5      	bne.n	24c16 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   24c8a:	3501      	adds	r5, #1
   24c8c:	e7c0      	b.n	24c10 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   24c8e:	4801      	ldr	r0, [pc, #4]	; (24c94 <virtio_create_virtqueues+0x9c>)
   24c90:	e7c1      	b.n	24c16 <virtio_create_virtqueues+0x1e>
   24c92:	bf00      	nop
   24c94:	fffff440 	.word	0xfffff440

00024c98 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   24c98:	b510      	push	{r4, lr}
	if (vq) {
   24c9a:	4604      	mov	r4, r0
   24c9c:	b190      	cbz	r0, 24cc4 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   24c9e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   24ca0:	8943      	ldrh	r3, [r0, #10]
   24ca2:	429a      	cmp	r2, r3
   24ca4:	d009      	beq.n	24cba <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   24ca6:	4b08      	ldr	r3, [pc, #32]	; (24cc8 <virtqueue_free+0x30>)
   24ca8:	781a      	ldrb	r2, [r3, #0]
   24caa:	2a03      	cmp	r2, #3
   24cac:	d905      	bls.n	24cba <virtqueue_free+0x22>
   24cae:	685b      	ldr	r3, [r3, #4]
   24cb0:	b11b      	cbz	r3, 24cba <virtqueue_free+0x22>
   24cb2:	6842      	ldr	r2, [r0, #4]
   24cb4:	4905      	ldr	r1, [pc, #20]	; (24ccc <virtqueue_free+0x34>)
   24cb6:	2004      	movs	r0, #4
   24cb8:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   24cba:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   24cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24cc0:	f00c bd02 	b.w	316c8 <k_free>
   24cc4:	bd10      	pop	{r4, pc}
   24cc6:	bf00      	nop
   24cc8:	20030c64 	.word	0x20030c64
   24ccc:	0003846f 	.word	0x0003846f

00024cd0 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   24cd0:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   24cd2:	8944      	ldrh	r4, [r0, #10]
   24cd4:	428c      	cmp	r4, r1
   24cd6:	d912      	bls.n	24cfe <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   24cd8:	6a03      	ldr	r3, [r0, #32]
   24cda:	3c01      	subs	r4, #1
   24cdc:	885d      	ldrh	r5, [r3, #2]
   24cde:	402c      	ands	r4, r5
   24ce0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   24ce4:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   24ce6:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   24ce8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   24cec:	6a02      	ldr	r2, [r0, #32]
   24cee:	8853      	ldrh	r3, [r2, #2]
   24cf0:	3301      	adds	r3, #1
   24cf2:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   24cf4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   24cf6:	3301      	adds	r3, #1
   24cf8:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   24cfa:	2000      	movs	r0, #0
}
   24cfc:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   24cfe:	4801      	ldr	r0, [pc, #4]	; (24d04 <virtqueue_add_consumed_buffer+0x34>)
   24d00:	e7fc      	b.n	24cfc <virtqueue_add_consumed_buffer+0x2c>
   24d02:	bf00      	nop
   24d04:	fffff441 	.word	0xfffff441

00024d08 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   24d08:	b470      	push	{r4, r5, r6}
   24d0a:	9e03      	ldr	r6, [sp, #12]
   24d0c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   24d0e:	b158      	cbz	r0, 24d28 <rpmsg_send_offchannel_raw+0x20>
   24d10:	6a00      	ldr	r0, [r0, #32]
   24d12:	b148      	cbz	r0, 24d28 <rpmsg_send_offchannel_raw+0x20>
   24d14:	b143      	cbz	r3, 24d28 <rpmsg_send_offchannel_raw+0x20>
   24d16:	3401      	adds	r4, #1
   24d18:	d006      	beq.n	24d28 <rpmsg_send_offchannel_raw+0x20>
   24d1a:	2e00      	cmp	r6, #0
   24d1c:	db04      	blt.n	24d28 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   24d1e:	6f84      	ldr	r4, [r0, #120]	; 0x78
   24d20:	b114      	cbz	r4, 24d28 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   24d22:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   24d24:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   24d26:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   24d28:	4801      	ldr	r0, [pc, #4]	; (24d30 <rpmsg_send_offchannel_raw+0x28>)
}
   24d2a:	bc70      	pop	{r4, r5, r6}
   24d2c:	4770      	bx	lr
   24d2e:	bf00      	nop
   24d30:	fffff82d 	.word	0xfffff82d

00024d34 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   24d34:	b470      	push	{r4, r5, r6}
   24d36:	9e03      	ldr	r6, [sp, #12]
   24d38:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   24d3a:	b160      	cbz	r0, 24d56 <rpmsg_send_offchannel_nocopy+0x22>
   24d3c:	6a00      	ldr	r0, [r0, #32]
   24d3e:	b150      	cbz	r0, 24d56 <rpmsg_send_offchannel_nocopy+0x22>
   24d40:	b14b      	cbz	r3, 24d56 <rpmsg_send_offchannel_nocopy+0x22>
   24d42:	3401      	adds	r4, #1
   24d44:	d007      	beq.n	24d56 <rpmsg_send_offchannel_nocopy+0x22>
   24d46:	2e00      	cmp	r6, #0
   24d48:	db05      	blt.n	24d56 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   24d4a:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   24d4e:	b114      	cbz	r4, 24d56 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   24d50:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   24d52:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   24d54:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   24d56:	4801      	ldr	r0, [pc, #4]	; (24d5c <rpmsg_send_offchannel_nocopy+0x28>)
}
   24d58:	bc70      	pop	{r4, r5, r6}
   24d5a:	4770      	bx	lr
   24d5c:	fffff82d 	.word	0xfffff82d

00024d60 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   24d60:	b570      	push	{r4, r5, r6, lr}
   24d62:	460c      	mov	r4, r1
   24d64:	4611      	mov	r1, r2
   24d66:	4605      	mov	r5, r0
   24d68:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   24d6a:	4b0c      	ldr	r3, [pc, #48]	; (24d9c <rpmsg_register_endpoint+0x3c>)
   24d6c:	2220      	movs	r2, #32
   24d6e:	2900      	cmp	r1, #0
   24d70:	bf08      	it	eq
   24d72:	4619      	moveq	r1, r3
   24d74:	4620      	mov	r0, r4
   24d76:	f00c fe6d 	bl	31a54 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   24d7a:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   24d7c:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   24d7e:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   24d80:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   24d82:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   24d84:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   24d86:	9b06      	ldr	r3, [sp, #24]
   24d88:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   24d8a:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   24d8c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   24d90:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   24d94:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   24d96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   24d98:	6013      	str	r3, [r2, #0]
}
   24d9a:	bd70      	pop	{r4, r5, r6, pc}
   24d9c:	00036445 	.word	0x00036445

00024da0 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   24da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   24da4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   24da8:	460d      	mov	r5, r1
   24daa:	4692      	mov	sl, r2
   24dac:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   24dae:	4606      	mov	r6, r0
   24db0:	2800      	cmp	r0, #0
   24db2:	d06c      	beq.n	24e8e <rpmsg_create_ept+0xee>
   24db4:	2900      	cmp	r1, #0
   24db6:	d06a      	beq.n	24e8e <rpmsg_create_ept+0xee>
   24db8:	f1b9 0f00 	cmp.w	r9, #0
   24dbc:	d067      	beq.n	24e8e <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   24dbe:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   24dc2:	4640      	mov	r0, r8
   24dc4:	f00b fbef 	bl	305a6 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   24dc8:	1c78      	adds	r0, r7, #1
   24dca:	d140      	bne.n	24e4e <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   24dcc:	6cac      	ldr	r4, [r5, #72]	; 0x48
   24dce:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24dd2:	f014 0401 	ands.w	r4, r4, #1
   24dd6:	d00b      	beq.n	24df0 <rpmsg_create_ept+0x50>
	for (bit = start;
   24dd8:	2400      	movs	r4, #0
	     bit++)
   24dda:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24ddc:	2c80      	cmp	r4, #128	; 0x80
   24dde:	d054      	beq.n	24e8a <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24de0:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   24de2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   24de6:	f004 011f 	and.w	r1, r4, #31
   24dea:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24dec:	07d1      	lsls	r1, r2, #31
   24dee:	d4f4      	bmi.n	24dda <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24df0:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24df2:	0960      	lsrs	r0, r4, #5
   24df4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   24df8:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24dfc:	f004 041f 	and.w	r4, r4, #31
   24e00:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24e02:	430a      	orrs	r2, r1
   24e04:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   24e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24e0a:	4652      	mov	r2, sl
   24e0c:	e9cd 9301 	strd	r9, r3, [sp, #4]
   24e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24e12:	4631      	mov	r1, r6
   24e14:	9300      	str	r3, [sp, #0]
   24e16:	4628      	mov	r0, r5
   24e18:	463b      	mov	r3, r7
   24e1a:	f7ff ffa1 	bl	24d60 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   24e1e:	4640      	mov	r0, r8
   24e20:	f000 fde0 	bl	259e4 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   24e24:	7834      	ldrb	r4, [r6, #0]
   24e26:	b174      	cbz	r4, 24e46 <rpmsg_create_ept+0xa6>
   24e28:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   24e2c:	b15c      	cbz	r4, 24e46 <rpmsg_create_ept+0xa6>
   24e2e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   24e30:	3301      	adds	r3, #1
   24e32:	d12e      	bne.n	24e92 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   24e34:	2100      	movs	r1, #0
   24e36:	4630      	mov	r0, r6
   24e38:	f00b fbe4 	bl	30604 <rpmsg_send_ns_message>

	if (status)
   24e3c:	4604      	mov	r4, r0
   24e3e:	b110      	cbz	r0, 24e46 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   24e40:	4630      	mov	r0, r6
   24e42:	f00b fbb6 	bl	305b2 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   24e46:	4620      	mov	r0, r4
   24e48:	b004      	add	sp, #16
   24e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   24e4e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   24e52:	d3d9      	bcc.n	24e08 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   24e54:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   24e58:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   24e5a:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   24e5e:	d80f      	bhi.n	24e80 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24e60:	0958      	lsrs	r0, r3, #5
   24e62:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   24e66:	f003 031f 	and.w	r3, r3, #31
   24e6a:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   24e6e:	07d2      	lsls	r2, r2, #31
   24e70:	d40b      	bmi.n	24e8a <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24e72:	2201      	movs	r2, #1
   24e74:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24e78:	4323      	orrs	r3, r4
   24e7a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   24e7e:	e7c3      	b.n	24e08 <rpmsg_create_ept+0x68>
   24e80:	4c05      	ldr	r4, [pc, #20]	; (24e98 <rpmsg_create_ept+0xf8>)
   24e82:	4640      	mov	r0, r8
   24e84:	f000 fdae 	bl	259e4 <z_impl_k_sem_give>
}
   24e88:	e7dd      	b.n	24e46 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   24e8a:	4c04      	ldr	r4, [pc, #16]	; (24e9c <rpmsg_create_ept+0xfc>)
   24e8c:	e7f9      	b.n	24e82 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   24e8e:	4c02      	ldr	r4, [pc, #8]	; (24e98 <rpmsg_create_ept+0xf8>)
   24e90:	e7d9      	b.n	24e46 <rpmsg_create_ept+0xa6>
   24e92:	2400      	movs	r4, #0
   24e94:	e7d7      	b.n	24e46 <rpmsg_create_ept+0xa6>
   24e96:	bf00      	nop
   24e98:	fffff82d 	.word	0xfffff82d
   24e9c:	fffff829 	.word	0xfffff829

00024ea0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   24ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24ea4:	b085      	sub	sp, #20
   24ea6:	460f      	mov	r7, r1
   24ea8:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   24eaa:	a903      	add	r1, sp, #12
   24eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   24eae:	4605      	mov	r5, r0
   24eb0:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   24eb2:	f00b fdb7 	bl	30a24 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   24eb6:	4604      	mov	r4, r0
   24eb8:	b1e0      	cbz	r0, 24ef4 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   24eba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   24ebc:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
   24ebe:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
   24ec2:	429e      	cmp	r6, r3
   24ec4:	bfa8      	it	ge
   24ec6:	461e      	movge	r6, r3
   24ec8:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   24eca:	f8d0 c008 	ldr.w	ip, [r0, #8]
   24ece:	1a61      	subs	r1, r4, r1
   24ed0:	4633      	mov	r3, r6
   24ed2:	464a      	mov	r2, r9
   24ed4:	4561      	cmp	r1, ip
   24ed6:	bf28      	it	cs
   24ed8:	f04f 31ff 	movcs.w	r1, #4294967295
   24edc:	f00b f947 	bl	3016e <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   24ee0:	4623      	mov	r3, r4
   24ee2:	4642      	mov	r2, r8
   24ee4:	4639      	mov	r1, r7
   24ee6:	4628      	mov	r0, r5
   24ee8:	9600      	str	r6, [sp, #0]
   24eea:	f00b fd3b 	bl	30964 <rpmsg_virtio_send_offchannel_nocopy>
}
   24eee:	b005      	add	sp, #20
   24ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   24ef4:	4800      	ldr	r0, [pc, #0]	; (24ef8 <rpmsg_virtio_send_offchannel_raw+0x58>)
   24ef6:	e7fa      	b.n	24eee <rpmsg_virtio_send_offchannel_raw+0x4e>
   24ef8:	fffff82e 	.word	0xfffff82e

00024efc <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   24efc:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   24efe:	4604      	mov	r4, r0
   24f00:	b1e0      	cbz	r0, 24f3c <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   24f02:	f100 0558 	add.w	r5, r0, #88	; 0x58
   24f06:	4628      	mov	r0, r5
   24f08:	f00b fc0c 	bl	30724 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   24f0c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24f10:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   24f12:	b953      	cbnz	r3, 24f2a <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   24f14:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   24f18:	3c10      	subs	r4, #16
	if (length <= 0) {
   24f1a:	2c00      	cmp	r4, #0
   24f1c:	dc00      	bgt.n	24f20 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   24f1e:	4c08      	ldr	r4, [pc, #32]	; (24f40 <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   24f20:	4628      	mov	r0, r5
   24f22:	f00b fbfd 	bl	30720 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   24f26:	4620      	mov	r0, r4
   24f28:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   24f2a:	2b01      	cmp	r3, #1
   24f2c:	d1f7      	bne.n	24f1e <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   24f2e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24f32:	f00b fb20 	bl	30576 <virtqueue_get_desc_size>
   24f36:	f1a0 0410 	sub.w	r4, r0, #16
   24f3a:	e7ee      	b.n	24f1a <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   24f3c:	4c01      	ldr	r4, [pc, #4]	; (24f44 <rpmsg_virtio_get_buffer_size+0x48>)
   24f3e:	e7f2      	b.n	24f26 <rpmsg_virtio_get_buffer_size+0x2a>
   24f40:	fffff82e 	.word	0xfffff82e
   24f44:	fffff82d 	.word	0xfffff82d

00024f48 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   24f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24f4c:	b08a      	sub	sp, #40	; 0x28
   24f4e:	460d      	mov	r5, r1
   24f50:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   24f54:	4690      	mov	r8, r2
   24f56:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   24f58:	4604      	mov	r4, r0
   24f5a:	b920      	cbnz	r0, 24f66 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   24f5c:	4f81      	ldr	r7, [pc, #516]	; (25164 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   24f5e:	4638      	mov	r0, r7
   24f60:	b00a      	add	sp, #40	; 0x28
   24f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   24f66:	2900      	cmp	r1, #0
   24f68:	d0f8      	beq.n	24f5c <rpmsg_init_vdev_with_config+0x14>
   24f6a:	2b00      	cmp	r3, #0
   24f6c:	d0f6      	beq.n	24f5c <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   24f6e:	2294      	movs	r2, #148	; 0x94
   24f70:	2100      	movs	r1, #0
   24f72:	f00c fc06 	bl	31782 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   24f76:	2201      	movs	r2, #1
   24f78:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24f7c:	4611      	mov	r1, r2
   24f7e:	f00b ff77 	bl	30e70 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   24f82:	4b79      	ldr	r3, [pc, #484]	; (25168 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   24f84:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   24f88:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   24f8c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   24f8e:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   24f90:	4b76      	ldr	r3, [pc, #472]	; (2516c <rpmsg_init_vdev_with_config+0x224>)
   24f92:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   24f94:	4b76      	ldr	r3, [pc, #472]	; (25170 <rpmsg_init_vdev_with_config+0x228>)
   24f96:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   24f9a:	4b76      	ldr	r3, [pc, #472]	; (25174 <rpmsg_init_vdev_with_config+0x22c>)
   24f9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   24fa0:	4b75      	ldr	r3, [pc, #468]	; (25178 <rpmsg_init_vdev_with_config+0x230>)
   24fa2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   24fa6:	4b75      	ldr	r3, [pc, #468]	; (2517c <rpmsg_init_vdev_with_config+0x234>)
   24fa8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   24fac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24fb0:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   24fb4:	f1b8 0f00 	cmp.w	r8, #0
   24fb8:	d16e      	bne.n	25098 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   24fba:	2f00      	cmp	r7, #0
   24fbc:	d0ce      	beq.n	24f5c <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   24fbe:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   24fc2:	f104 0394 	add.w	r3, r4, #148	; 0x94
   24fc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   24fca:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   24fce:	6a03      	ldr	r3, [r0, #32]
   24fd0:	689b      	ldr	r3, [r3, #8]
   24fd2:	4798      	blx	r3
   24fd4:	2300      	movs	r3, #0
   24fd6:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   24fd8:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   24fdc:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   24fde:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   24fe2:	f1b8 0f00 	cmp.w	r8, #0
   24fe6:	d16d      	bne.n	250c4 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   24fe8:	7a3b      	ldrb	r3, [r7, #8]
   24fea:	2b00      	cmp	r3, #0
   24fec:	d068      	beq.n	250c0 <rpmsg_init_vdev_with_config+0x178>
   24fee:	f109 030c 	add.w	r3, r9, #12
   24ff2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   24ff6:	f1b9 0f00 	cmp.w	r9, #0
   24ffa:	d0af      	beq.n	24f5c <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   24ffc:	f8d9 2008 	ldr.w	r2, [r9, #8]
   25000:	2a00      	cmp	r2, #0
   25002:	f000 80ad 	beq.w	25160 <rpmsg_init_vdev_with_config+0x218>
   25006:	689b      	ldr	r3, [r3, #8]
   25008:	2b00      	cmp	r3, #0
   2500a:	f000 80a9 	beq.w	25160 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   2500e:	4b5c      	ldr	r3, [pc, #368]	; (25180 <rpmsg_init_vdev_with_config+0x238>)
   25010:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   25012:	4b5c      	ldr	r3, [pc, #368]	; (25184 <rpmsg_init_vdev_with_config+0x23c>)
   25014:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   25016:	4b5c      	ldr	r3, [pc, #368]	; (25188 <rpmsg_init_vdev_with_config+0x240>)
   25018:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   2501a:	4b5c      	ldr	r3, [pc, #368]	; (2518c <rpmsg_init_vdev_with_config+0x244>)
   2501c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   2501e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25020:	681b      	ldr	r3, [r3, #0]
   25022:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   25026:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25028:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   2502a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   2502e:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   25032:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   25036:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   25038:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   2503c:	9300      	str	r3, [sp, #0]
   2503e:	2202      	movs	r2, #2
   25040:	2100      	movs	r1, #0
   25042:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   25046:	ab04      	add	r3, sp, #16
   25048:	f7ff fdd6 	bl	24bf8 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   2504c:	4607      	mov	r7, r0
   2504e:	2800      	cmp	r0, #0
   25050:	d185      	bne.n	24f5e <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   25052:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   25056:	f00b fa29 	bl	304ac <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   2505a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2505c:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   2505e:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   25060:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25062:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   25064:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   25066:	f1b8 0f00 	cmp.w	r8, #0
   2506a:	d161      	bne.n	25130 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   2506c:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   2506e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   25072:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   25074:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   25078:	895b      	ldrh	r3, [r3, #10]
   2507a:	4553      	cmp	r3, sl
   2507c:	d834      	bhi.n	250e8 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   2507e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   25082:	e9c4 4400 	strd	r4, r4, [r4]
   25086:	2b00      	cmp	r3, #0
   25088:	d159      	bne.n	2513e <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   2508a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   2508e:	2104      	movs	r1, #4
   25090:	6a03      	ldr	r3, [r0, #32]
   25092:	685b      	ldr	r3, [r3, #4]
   25094:	4798      	blx	r3
}
   25096:	e762      	b.n	24f5e <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   25098:	f1b8 0f01 	cmp.w	r8, #1
   2509c:	d195      	bne.n	24fca <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   2509e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   250a2:	6a03      	ldr	r3, [r0, #32]
   250a4:	681b      	ldr	r3, [r3, #0]
   250a6:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   250a8:	0642      	lsls	r2, r0, #25
   250aa:	d506      	bpl.n	250ba <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   250ac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   250b0:	2100      	movs	r1, #0
   250b2:	6a03      	ldr	r3, [r0, #32]
   250b4:	685b      	ldr	r3, [r3, #4]
   250b6:	4798      	blx	r3
}
   250b8:	e7f1      	b.n	2509e <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   250ba:	0743      	lsls	r3, r0, #29
   250bc:	d5ef      	bpl.n	2509e <rpmsg_init_vdev_with_config+0x156>
   250be:	e784      	b.n	24fca <rpmsg_init_vdev_with_config+0x82>
   250c0:	464b      	mov	r3, r9
   250c2:	e796      	b.n	24ff2 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   250c4:	f1b8 0f01 	cmp.w	r8, #1
   250c8:	d1b1      	bne.n	2502e <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   250ca:	4b2e      	ldr	r3, [pc, #184]	; (25184 <rpmsg_init_vdev_with_config+0x23c>)
   250cc:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   250ce:	4b2c      	ldr	r3, [pc, #176]	; (25180 <rpmsg_init_vdev_with_config+0x238>)
   250d0:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   250d2:	4b2e      	ldr	r3, [pc, #184]	; (2518c <rpmsg_init_vdev_with_config+0x244>)
   250d4:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   250d6:	4b2c      	ldr	r3, [pc, #176]	; (25188 <rpmsg_init_vdev_with_config+0x240>)
   250d8:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   250da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   250dc:	699b      	ldr	r3, [r3, #24]
   250de:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   250e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   250e4:	681b      	ldr	r3, [r3, #0]
   250e6:	e7a0      	b.n	2502a <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   250e8:	4648      	mov	r0, r9
   250ea:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   250ee:	f00b fc8a 	bl	30a06 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   250f2:	4605      	mov	r5, r0
   250f4:	b1c8      	cbz	r0, 2512a <rpmsg_init_vdev_with_config+0x1e2>
   250f6:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   250f8:	9008      	str	r0, [sp, #32]
   250fa:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   250fc:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   250fe:	2200      	movs	r2, #0
   25100:	4281      	cmp	r1, r0
   25102:	bf28      	it	cs
   25104:	f04f 31ff 	movcs.w	r1, #4294967295
   25108:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2510c:	4630      	mov	r0, r6
   2510e:	f00b f868 	bl	301e2 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   25112:	9500      	str	r5, [sp, #0]
   25114:	2301      	movs	r3, #1
   25116:	2200      	movs	r2, #0
   25118:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2511c:	a908      	add	r1, sp, #32
   2511e:	f00b f906 	bl	3032e <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   25122:	b918      	cbnz	r0, 2512c <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   25124:	f10a 0a01 	add.w	sl, sl, #1
   25128:	e7a4      	b.n	25074 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   2512a:	4819      	ldr	r0, [pc, #100]	; (25190 <rpmsg_init_vdev_with_config+0x248>)
   2512c:	4607      	mov	r7, r0
   2512e:	e716      	b.n	24f5e <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   25130:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   25134:	e9c4 4400 	strd	r4, r4, [r4]
   25138:	2b00      	cmp	r3, #0
   2513a:	f43f af10 	beq.w	24f5e <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   2513e:	2300      	movs	r3, #0
   25140:	9302      	str	r3, [sp, #8]
   25142:	4b14      	ldr	r3, [pc, #80]	; (25194 <rpmsg_init_vdev_with_config+0x24c>)
   25144:	4620      	mov	r0, r4
   25146:	9301      	str	r3, [sp, #4]
   25148:	2335      	movs	r3, #53	; 0x35
   2514a:	4a13      	ldr	r2, [pc, #76]	; (25198 <rpmsg_init_vdev_with_config+0x250>)
   2514c:	9300      	str	r3, [sp, #0]
   2514e:	f104 0108 	add.w	r1, r4, #8
   25152:	f7ff fe05 	bl	24d60 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   25156:	f1b8 0f00 	cmp.w	r8, #0
   2515a:	f47f af00 	bne.w	24f5e <rpmsg_init_vdev_with_config+0x16>
   2515e:	e794      	b.n	2508a <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   25160:	4f0b      	ldr	r7, [pc, #44]	; (25190 <rpmsg_init_vdev_with_config+0x248>)
   25162:	e6fc      	b.n	24f5e <rpmsg_init_vdev_with_config+0x16>
   25164:	fffff82d 	.word	0xfffff82d
   25168:	00024ea1 	.word	0x00024ea1
   2516c:	00030711 	.word	0x00030711
   25170:	00030925 	.word	0x00030925
   25174:	00030a25 	.word	0x00030a25
   25178:	00030965 	.word	0x00030965
   2517c:	00030731 	.word	0x00030731
   25180:	00038491 	.word	0x00038491
   25184:	00038497 	.word	0x00038497
   25188:	00030871 	.word	0x00030871
   2518c:	0003071f 	.word	0x0003071f
   25190:	fffff82e 	.word	0xfffff82e
   25194:	00030773 	.word	0x00030773
   25198:	0003849d 	.word	0x0003849d

0002519c <rpmsg_init_vdev>:
{
   2519c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2519e:	4605      	mov	r5, r0
   251a0:	460e      	mov	r6, r1
   251a2:	4617      	mov	r7, r2
   251a4:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   251a6:	4a07      	ldr	r2, [pc, #28]	; (251c4 <rpmsg_init_vdev+0x28>)
   251a8:	ac03      	add	r4, sp, #12
   251aa:	ca07      	ldmia	r2, {r0, r1, r2}
   251ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   251b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   251b2:	4631      	mov	r1, r6
   251b4:	9200      	str	r2, [sp, #0]
   251b6:	4628      	mov	r0, r5
   251b8:	463a      	mov	r2, r7
   251ba:	9401      	str	r4, [sp, #4]
   251bc:	f7ff fec4 	bl	24f48 <rpmsg_init_vdev_with_config>
}
   251c0:	b007      	add	sp, #28
   251c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   251c4:	00033088 	.word	0x00033088

000251c8 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   251c8:	2203      	movs	r2, #3
   251ca:	4b11      	ldr	r3, [pc, #68]	; (25210 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   251cc:	4911      	ldr	r1, [pc, #68]	; (25214 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   251ce:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   251d0:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   251d2:	4a11      	ldr	r2, [pc, #68]	; (25218 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   251d4:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   251d6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   251d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   251dc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   251de:	2200      	movs	r2, #0
   251e0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   251e2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   251e4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   251e6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   251e8:	490c      	ldr	r1, [pc, #48]	; (2521c <_DoInit+0x54>)
   251ea:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   251ec:	2110      	movs	r1, #16
   251ee:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   251f0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   251f2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   251f4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   251f6:	4a0a      	ldr	r2, [pc, #40]	; (25220 <_DoInit+0x58>)
   251f8:	6812      	ldr	r2, [r2, #0]
   251fa:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   251fe:	4a09      	ldr	r2, [pc, #36]	; (25224 <_DoInit+0x5c>)
   25200:	6810      	ldr	r0, [r2, #0]
   25202:	8892      	ldrh	r2, [r2, #4]
   25204:	6018      	str	r0, [r3, #0]
   25206:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   25208:	2220      	movs	r2, #32
   2520a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2520c:	4770      	bx	lr
   2520e:	bf00      	nop
   25210:	20030c84 	.word	0x20030c84
   25214:	000384a0 	.word	0x000384a0
   25218:	20031a0d 	.word	0x20031a0d
   2521c:	200319fd 	.word	0x200319fd
   25220:	000384a9 	.word	0x000384a9
   25224:	000384ad 	.word	0x000384ad

00025228 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2522c:	f04f 0b18 	mov.w	fp, #24
   25230:	4f20      	ldr	r7, [pc, #128]	; (252b4 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25232:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   25234:	fb0b 7200 	mla	r2, fp, r0, r7
   25238:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2523a:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2523c:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2523e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25240:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   25242:	d831      	bhi.n	252a8 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   25244:	f8d2 a020 	ldr.w	sl, [r2, #32]
   25248:	ebaa 0905 	sub.w	r9, sl, r5
   2524c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   25250:	4294      	cmp	r4, r2
   25252:	d811      	bhi.n	25278 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   25254:	2318      	movs	r3, #24
   25256:	fb06 3303 	mla	r3, r6, r3, r3
   2525a:	443b      	add	r3, r7
   2525c:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2525e:	4622      	mov	r2, r4
   25260:	4641      	mov	r1, r8
   25262:	4428      	add	r0, r5
   25264:	f00c fa53 	bl	3170e <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   25268:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2526a:	2318      	movs	r3, #24
      return 1;
   2526c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2526e:	fb03 7306 	mla	r3, r3, r6, r7
   25272:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   25274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   25278:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2527a:	429c      	cmp	r4, r3
   2527c:	d818      	bhi.n	252b0 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2527e:	fb00 bb0b 	mla	fp, r0, fp, fp
   25282:	44bb      	add	fp, r7
   25284:	f8db 0004 	ldr.w	r0, [fp, #4]
   25288:	464a      	mov	r2, r9
   2528a:	4428      	add	r0, r5
   2528c:	442c      	add	r4, r5
   2528e:	f00c fa3e 	bl	3170e <memcpy>
      if (NumBytes) {
   25292:	ebb4 040a 	subs.w	r4, r4, sl
   25296:	d0e8      	beq.n	2526a <SEGGER_RTT_WriteSkipNoLock+0x42>
   25298:	4622      	mov	r2, r4
   2529a:	f8db 0004 	ldr.w	r0, [fp, #4]
   2529e:	eb08 0109 	add.w	r1, r8, r9
   252a2:	f00c fa34 	bl	3170e <memcpy>
      return 1;
   252a6:	e7e0      	b.n	2526a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   252a8:	3b01      	subs	r3, #1
   252aa:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   252ac:	42a3      	cmp	r3, r4
   252ae:	d2d1      	bcs.n	25254 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   252b0:	2000      	movs	r0, #0
   252b2:	e7df      	b.n	25274 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   252b4:	20030c84 	.word	0x20030c84

000252b8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   252b8:	2218      	movs	r2, #24
   252ba:	4b03      	ldr	r3, [pc, #12]	; (252c8 <SEGGER_RTT_HasDataUp+0x10>)
   252bc:	fb02 3300 	mla	r3, r2, r0, r3
   252c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   252c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   252c4:	1a80      	subs	r0, r0, r2
   252c6:	4770      	bx	lr
   252c8:	20030c84 	.word	0x20030c84

000252cc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   252cc:	4b01      	ldr	r3, [pc, #4]	; (252d4 <z_impl_z_errno+0x8>)
   252ce:	6898      	ldr	r0, [r3, #8]
}
   252d0:	3084      	adds	r0, #132	; 0x84
   252d2:	4770      	bx	lr
   252d4:	20030d2c 	.word	0x20030d2c

000252d8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   252d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252dc:	4606      	mov	r6, r0
   252de:	b086      	sub	sp, #24
   252e0:	460f      	mov	r7, r1
	__asm__ volatile(
   252e2:	f04f 0320 	mov.w	r3, #32
   252e6:	f3ef 8811 	mrs	r8, BASEPRI
   252ea:	f383 8812 	msr	BASEPRI_MAX, r3
   252ee:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   252f2:	f001 f8b5 	bl	26460 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   252f6:	2400      	movs	r4, #0
   252f8:	2e04      	cmp	r6, #4
   252fa:	bf96      	itet	ls
   252fc:	4b21      	ldrls	r3, [pc, #132]	; (25384 <z_fatal_error+0xac>)
   252fe:	4b22      	ldrhi	r3, [pc, #136]	; (25388 <z_fatal_error+0xb0>)
   25300:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   25304:	4605      	mov	r5, r0
   25306:	e9cd 3404 	strd	r3, r4, [sp, #16]
   2530a:	4b20      	ldr	r3, [pc, #128]	; (2538c <z_fatal_error+0xb4>)
   2530c:	2201      	movs	r2, #1
   2530e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   25312:	4620      	mov	r0, r4
   25314:	4623      	mov	r3, r4
   25316:	491e      	ldr	r1, [pc, #120]	; (25390 <z_fatal_error+0xb8>)
   25318:	9603      	str	r6, [sp, #12]
   2531a:	9400      	str	r4, [sp, #0]
   2531c:	f00b fc2e 	bl	30b7c <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25320:	b16f      	cbz	r7, 2533e <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   25322:	69fb      	ldr	r3, [r7, #28]
   25324:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25328:	b14b      	cbz	r3, 2533e <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   2532a:	4b1a      	ldr	r3, [pc, #104]	; (25394 <z_fatal_error+0xbc>)
   2532c:	2201      	movs	r2, #1
   2532e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   25332:	4620      	mov	r0, r4
   25334:	4623      	mov	r3, r4
   25336:	4916      	ldr	r1, [pc, #88]	; (25390 <z_fatal_error+0xb8>)
   25338:	9400      	str	r4, [sp, #0]
   2533a:	f00b fc1f 	bl	30b7c <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2533e:	b12d      	cbz	r5, 2534c <z_fatal_error+0x74>
   25340:	4628      	mov	r0, r5
   25342:	f00b fce7 	bl	30d14 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   25346:	b108      	cbz	r0, 2534c <z_fatal_error+0x74>
   25348:	7803      	ldrb	r3, [r0, #0]
   2534a:	b903      	cbnz	r3, 2534e <z_fatal_error+0x76>
		thread_name = "unknown";
   2534c:	4812      	ldr	r0, [pc, #72]	; (25398 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2534e:	4b13      	ldr	r3, [pc, #76]	; (2539c <z_fatal_error+0xc4>)
   25350:	2201      	movs	r2, #1
   25352:	9302      	str	r3, [sp, #8]
   25354:	2300      	movs	r3, #0
   25356:	e9cd 5003 	strd	r5, r0, [sp, #12]
   2535a:	e9cd 3300 	strd	r3, r3, [sp]
   2535e:	4618      	mov	r0, r3
   25360:	490b      	ldr	r1, [pc, #44]	; (25390 <z_fatal_error+0xb8>)
   25362:	f00b fc0b 	bl	30b7c <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   25366:	4639      	mov	r1, r7
   25368:	4630      	mov	r0, r6
   2536a:	f7fd ff55 	bl	23218 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2536e:	f388 8811 	msr	BASEPRI, r8
   25372:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   25376:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   25378:	b006      	add	sp, #24
   2537a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2537e:	f7ec bb1b 	b.w	119b8 <z_impl_k_thread_abort>
   25382:	bf00      	nop
   25384:	000340a0 	.word	0x000340a0
   25388:	00035f04 	.word	0x00035f04
   2538c:	000384b4 	.word	0x000384b4
   25390:	00032fb0 	.word	0x00032fb0
   25394:	000384dc 	.word	0x000384dc
   25398:	00035d6f 	.word	0x00035d6f
   2539c:	000384fd 	.word	0x000384fd

000253a0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   253a0:	4b0f      	ldr	r3, [pc, #60]	; (253e0 <z_sys_init_run_level+0x40>)
{
   253a2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   253a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   253a8:	3001      	adds	r0, #1
   253aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   253ae:	42a6      	cmp	r6, r4
   253b0:	d800      	bhi.n	253b4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   253b2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   253b4:	e9d4 3500 	ldrd	r3, r5, [r4]
   253b8:	4628      	mov	r0, r5
   253ba:	4798      	blx	r3
		if (dev != NULL) {
   253bc:	b16d      	cbz	r5, 253da <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   253be:	b138      	cbz	r0, 253d0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   253c0:	2800      	cmp	r0, #0
   253c2:	bfb8      	it	lt
   253c4:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   253c6:	28ff      	cmp	r0, #255	; 0xff
   253c8:	bfa8      	it	ge
   253ca:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   253cc:	68eb      	ldr	r3, [r5, #12]
   253ce:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   253d0:	68ea      	ldr	r2, [r5, #12]
   253d2:	7853      	ldrb	r3, [r2, #1]
   253d4:	f043 0301 	orr.w	r3, r3, #1
   253d8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   253da:	3408      	adds	r4, #8
   253dc:	e7e7      	b.n	253ae <z_sys_init_run_level+0xe>
   253de:	bf00      	nop
   253e0:	000340b4 	.word	0x000340b4

000253e4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   253e4:	2201      	movs	r2, #1
{
   253e6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   253e8:	4b09      	ldr	r3, [pc, #36]	; (25410 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   253ea:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   253ec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   253ee:	f7ff ffd7 	bl	253a0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   253f2:	f001 fb69 	bl	26ac8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   253f6:	2004      	movs	r0, #4
   253f8:	f7ff ffd2 	bl	253a0 <z_sys_init_run_level>

	z_init_static_threads();
   253fc:	f000 f98e 	bl	2571c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   25400:	f7e7 fbd8 	bl	cbb4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   25404:	4a03      	ldr	r2, [pc, #12]	; (25414 <bg_thread_main+0x30>)
   25406:	7b13      	ldrb	r3, [r2, #12]
   25408:	f023 0301 	bic.w	r3, r3, #1
   2540c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2540e:	bd08      	pop	{r3, pc}
   25410:	20031e0d 	.word	0x20031e0d
   25414:	2000a3b0 	.word	0x2000a3b0

00025418 <z_bss_zero>:
{
   25418:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2541a:	4803      	ldr	r0, [pc, #12]	; (25428 <z_bss_zero+0x10>)
   2541c:	4a03      	ldr	r2, [pc, #12]	; (2542c <z_bss_zero+0x14>)
   2541e:	2100      	movs	r1, #0
   25420:	1a12      	subs	r2, r2, r0
   25422:	f00b fbbb 	bl	30b9c <z_early_memset>
}
   25426:	bd08      	pop	{r3, pc}
   25428:	20008fb8 	.word	0x20008fb8
   2542c:	20031e24 	.word	0x20031e24

00025430 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   25430:	23a8      	movs	r3, #168	; 0xa8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   25432:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   25434:	4e14      	ldr	r6, [pc, #80]	; (25488 <z_init_cpu+0x58>)
{
   25436:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   25438:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   2543c:	4b13      	ldr	r3, [pc, #76]	; (2548c <z_init_cpu+0x5c>)
   2543e:	2201      	movs	r2, #1
   25440:	9305      	str	r3, [sp, #20]
   25442:	230f      	movs	r3, #15
   25444:	e9cd 3203 	strd	r3, r2, [sp, #12]
   25448:	2300      	movs	r3, #0
   2544a:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2544e:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   25450:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25454:	4d0e      	ldr	r5, [pc, #56]	; (25490 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   25456:	490f      	ldr	r1, [pc, #60]	; (25494 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25458:	fb03 5500 	mla	r5, r3, r0, r5
{
   2545c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2545e:	fb02 1100 	mla	r1, r2, r0, r1
   25462:	4b0d      	ldr	r3, [pc, #52]	; (25498 <z_init_cpu+0x68>)
   25464:	4630      	mov	r0, r6
   25466:	9500      	str	r5, [sp, #0]
   25468:	f000 f8ee 	bl	25648 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2546c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   2546e:	752c      	strb	r4, [r5, #20]
   25470:	f023 0304 	bic.w	r3, r3, #4
   25474:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25476:	4b09      	ldr	r3, [pc, #36]	; (2549c <z_init_cpu+0x6c>)
   25478:	3401      	adds	r4, #1
   2547a:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2547e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   25480:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   25482:	b006      	add	sp, #24
   25484:	bd70      	pop	{r4, r5, r6, pc}
   25486:	bf00      	nop
   25488:	2000a308 	.word	0x2000a308
   2548c:	0003855f 	.word	0x0003855f
   25490:	20030d2c 	.word	0x20030d2c
   25494:	20053568 	.word	0x20053568
   25498:	000257d5 	.word	0x000257d5
   2549c:	20052d68 	.word	0x20052d68

000254a0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   254a0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   254a2:	2000      	movs	r0, #0
{
   254a4:	b0b0      	sub	sp, #192	; 0xc0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   254a6:	f7ff ff7b 	bl	253a0 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   254aa:	4b2f      	ldr	r3, [pc, #188]	; (25568 <z_cstart+0xc8>)
	uint32_t msp =
   254ac:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   254b0:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   254b4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   254b8:	2400      	movs	r4, #0
   254ba:	23e0      	movs	r3, #224	; 0xe0
   254bc:	4d2b      	ldr	r5, [pc, #172]	; (2556c <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   254be:	4e2c      	ldr	r6, [pc, #176]	; (25570 <z_cstart+0xd0>)
   254c0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   254c4:	77ec      	strb	r4, [r5, #31]
   254c6:	762c      	strb	r4, [r5, #24]
   254c8:	766c      	strb	r4, [r5, #25]
   254ca:	76ac      	strb	r4, [r5, #26]
   254cc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   254d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   254d2:	4f28      	ldr	r7, [pc, #160]	; (25574 <z_cstart+0xd4>)
   254d4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   254d8:	626b      	str	r3, [r5, #36]	; 0x24
   254da:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   254de:	f7ec f9cf 	bl	11880 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   254e2:	f7eb fd7f 	bl	10fe4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   254e6:	f04f 33ff 	mov.w	r3, #4294967295
   254ea:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   254ec:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   254ee:	f7ec fbff 	bl	11cf0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   254f2:	f7ec fa77 	bl	119e4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   254f6:	f7e9 ff19 	bl	f32c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   254fa:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   254fe:	ad06      	add	r5, sp, #24
   25500:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   25502:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   25506:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	k_thread_system_pool_assign(dummy_thread);
   2550a:	f001 fabf 	bl	26a8c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2550e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   25510:	f00b fb28 	bl	30b64 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   25514:	2001      	movs	r0, #1
   25516:	f7ff ff43 	bl	253a0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2551a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   2551c:	4d16      	ldr	r5, [pc, #88]	; (25578 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2551e:	f7ff ff3f 	bl	253a0 <z_sys_init_run_level>
	z_sched_init();
   25522:	f000 fef5 	bl	26310 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25526:	4b15      	ldr	r3, [pc, #84]	; (2557c <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   25528:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2552a:	9305      	str	r3, [sp, #20]
   2552c:	2301      	movs	r3, #1
   2552e:	4914      	ldr	r1, [pc, #80]	; (25580 <z_cstart+0xe0>)
   25530:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25534:	e9cd 4303 	strd	r4, r3, [sp, #12]
   25538:	4628      	mov	r0, r5
   2553a:	463b      	mov	r3, r7
   2553c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   25540:	9400      	str	r4, [sp, #0]
   25542:	f000 f881 	bl	25648 <z_setup_new_thread>
   25546:	4606      	mov	r6, r0
   25548:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   2554a:	4628      	mov	r0, r5
   2554c:	f022 0204 	bic.w	r2, r2, #4
   25550:	736a      	strb	r2, [r5, #13]
   25552:	f00b fe0b 	bl	3116c <z_ready_thread>
	z_init_cpu(0);
   25556:	4620      	mov	r0, r4
   25558:	f7ff ff6a 	bl	25430 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2555c:	463a      	mov	r2, r7
   2555e:	4631      	mov	r1, r6
   25560:	4628      	mov	r0, r5
   25562:	f7eb fe91 	bl	11288 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25566:	bf00      	nop
   25568:	20052d68 	.word	0x20052d68
   2556c:	e000ed00 	.word	0xe000ed00
   25570:	20030d2c 	.word	0x20030d2c
   25574:	000253e5 	.word	0x000253e5
   25578:	2000a3b0 	.word	0x2000a3b0
   2557c:	00038564 	.word	0x00038564
   25580:	200536a8 	.word	0x200536a8

00025584 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   25584:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25586:	4c06      	ldr	r4, [pc, #24]	; (255a0 <statics_init+0x1c>)
   25588:	4d06      	ldr	r5, [pc, #24]	; (255a4 <statics_init+0x20>)
   2558a:	42ac      	cmp	r4, r5
   2558c:	d301      	bcc.n	25592 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2558e:	2000      	movs	r0, #0
   25590:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   25592:	4620      	mov	r0, r4
   25594:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   25598:	f00b fb04 	bl	30ba4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2559c:	3414      	adds	r4, #20
   2559e:	e7f4      	b.n	2558a <statics_init+0x6>
   255a0:	20008b8c 	.word	0x20008b8c
   255a4:	20008ba0 	.word	0x20008ba0

000255a8 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   255a8:	2000      	movs	r0, #0
{
   255aa:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   255ac:	4c05      	ldr	r4, [pc, #20]	; (255c4 <init_mem_slab_module+0x1c>)
   255ae:	4d06      	ldr	r5, [pc, #24]	; (255c8 <init_mem_slab_module+0x20>)
   255b0:	42ac      	cmp	r4, r5
   255b2:	d300      	bcc.n	255b6 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   255b4:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   255b6:	4620      	mov	r0, r4
   255b8:	f00b fb66 	bl	30c88 <create_free_list>
		if (rc < 0) {
   255bc:	2800      	cmp	r0, #0
   255be:	dbf9      	blt.n	255b4 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   255c0:	341c      	adds	r4, #28
   255c2:	e7f5      	b.n	255b0 <init_mem_slab_module+0x8>
   255c4:	20008b38 	.word	0x20008b38
   255c8:	20008b8c 	.word	0x20008b8c

000255cc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   255cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   255ce:	460c      	mov	r4, r1
	__asm__ volatile(
   255d0:	f04f 0520 	mov.w	r5, #32
   255d4:	f3ef 8111 	mrs	r1, BASEPRI
   255d8:	f385 8812 	msr	BASEPRI_MAX, r5
   255dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   255e0:	6945      	ldr	r5, [r0, #20]
   255e2:	b15d      	cbz	r5, 255fc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   255e4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   255e6:	682b      	ldr	r3, [r5, #0]
   255e8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   255ea:	6983      	ldr	r3, [r0, #24]
   255ec:	3301      	adds	r3, #1
   255ee:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   255f0:	2000      	movs	r0, #0
	__asm__ volatile(
   255f2:	f381 8811 	msr	BASEPRI, r1
   255f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   255fa:	e011      	b.n	25620 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   255fc:	ea52 0603 	orrs.w	r6, r2, r3
   25600:	d103      	bne.n	2560a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   25602:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   25606:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   25608:	e7f3      	b.n	255f2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2560a:	e9cd 2300 	strd	r2, r3, [sp]
   2560e:	4602      	mov	r2, r0
   25610:	3008      	adds	r0, #8
   25612:	f000 fd87 	bl	26124 <z_pend_curr>
		if (result == 0) {
   25616:	b918      	cbnz	r0, 25620 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   25618:	4b02      	ldr	r3, [pc, #8]	; (25624 <k_mem_slab_alloc+0x58>)
   2561a:	689b      	ldr	r3, [r3, #8]
   2561c:	695b      	ldr	r3, [r3, #20]
   2561e:	6023      	str	r3, [r4, #0]
}
   25620:	b002      	add	sp, #8
   25622:	bd70      	pop	{r4, r5, r6, pc}
   25624:	20030d2c 	.word	0x20030d2c

00025628 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   25628:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   2562a:	4604      	mov	r4, r0
   2562c:	b908      	cbnz	r0, 25632 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   2562e:	4b05      	ldr	r3, [pc, #20]	; (25644 <z_impl_k_thread_name_set+0x1c>)
   25630:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   25632:	221f      	movs	r2, #31
   25634:	f104 0062 	add.w	r0, r4, #98	; 0x62
   25638:	f00c fa0c 	bl	31a54 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   2563c:	2000      	movs	r0, #0
   2563e:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   25642:	bd10      	pop	{r4, pc}
   25644:	20030d2c 	.word	0x20030d2c

00025648 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25648:	b5f0      	push	{r4, r5, r6, r7, lr}
   2564a:	b085      	sub	sp, #20
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2564c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2564e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   25652:	7307      	strb	r7, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25654:	2704      	movs	r7, #4
   25656:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   2565a:	2500      	movs	r5, #0
{
   2565c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   2565e:	7347      	strb	r7, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25660:	3207      	adds	r2, #7

	thread_base->prio = priority;
   25662:	9f0d      	ldr	r7, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25664:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   25668:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
	thread_base->prio = priority;
   2566c:	7387      	strb	r7, [r0, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   2566e:	188f      	adds	r7, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   25672:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
   25676:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   25678:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2567a:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2567e:	9202      	str	r2, [sp, #8]
   25680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
{
   25682:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25684:	9201      	str	r2, [sp, #4]
   25686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25688:	9200      	str	r2, [sp, #0]
   2568a:	463a      	mov	r2, r7
   2568c:	f7eb fddc 	bl	11248 <arch_new_thread>
	new_thread->init_data = NULL;
   25690:	6565      	str	r5, [r4, #84]	; 0x54
	if (name != NULL) {
   25692:	b18e      	cbz	r6, 256b8 <z_setup_new_thread+0x70>
   25694:	221f      	movs	r2, #31
   25696:	4631      	mov	r1, r6
   25698:	f104 0062 	add.w	r0, r4, #98	; 0x62
   2569c:	f00c f9da 	bl	31a54 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   256a0:	f884 5081 	strb.w	r5, [r4, #129]	; 0x81
	if (!_current) {
   256a4:	4b06      	ldr	r3, [pc, #24]	; (256c0 <z_setup_new_thread+0x78>)
   256a6:	689b      	ldr	r3, [r3, #8]
   256a8:	b10b      	cbz	r3, 256ae <z_setup_new_thread+0x66>
	new_thread->resource_pool = _current->resource_pool;
   256aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
   256ae:	4638      	mov	r0, r7
   256b0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   256b4:	b005      	add	sp, #20
   256b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->name[0] = '\0';
   256b8:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
   256bc:	e7f2      	b.n	256a4 <z_setup_new_thread+0x5c>
   256be:	bf00      	nop
   256c0:	20030d2c 	.word	0x20030d2c

000256c4 <z_impl_k_thread_create>:
{
   256c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   256c6:	2500      	movs	r5, #0
{
   256c8:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   256ca:	9505      	str	r5, [sp, #20]
   256cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   256ce:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   256d2:	9504      	str	r5, [sp, #16]
   256d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   256d6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   256d8:	9503      	str	r5, [sp, #12]
   256da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   256dc:	9502      	str	r5, [sp, #8]
   256de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   256e0:	9501      	str	r5, [sp, #4]
   256e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   256e4:	9500      	str	r5, [sp, #0]
   256e6:	f7ff ffaf 	bl	25648 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   256ea:	f1b6 3fff 	cmp.w	r6, #4294967295
   256ee:	bf08      	it	eq
   256f0:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   256f4:	d005      	beq.n	25702 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   256f6:	ea56 0307 	orrs.w	r3, r6, r7
   256fa:	d105      	bne.n	25708 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   256fc:	4620      	mov	r0, r4
   256fe:	f000 fd87 	bl	26210 <z_sched_start>
}
   25702:	4620      	mov	r0, r4
   25704:	b007      	add	sp, #28
   25706:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25708:	463a      	mov	r2, r7
   2570a:	4633      	mov	r3, r6
   2570c:	4902      	ldr	r1, [pc, #8]	; (25718 <z_impl_k_thread_create+0x54>)
   2570e:	f104 0018 	add.w	r0, r4, #24
   25712:	f000 ff85 	bl	26620 <z_add_timeout>
   25716:	e7f4      	b.n	25702 <z_impl_k_thread_create+0x3e>
   25718:	000310d9 	.word	0x000310d9

0002571c <z_init_static_threads>:
{
   2571c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25720:	4c29      	ldr	r4, [pc, #164]	; (257c8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   25722:	4d2a      	ldr	r5, [pc, #168]	; (257cc <z_init_static_threads+0xb0>)
{
   25724:	b087      	sub	sp, #28
   25726:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   25728:	42ae      	cmp	r6, r5
   2572a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2572e:	d30f      	bcc.n	25750 <z_init_static_threads+0x34>
	k_sched_lock();
   25730:	f000 fdbe 	bl	262b0 <k_sched_lock>
   25734:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   25738:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   2573c:	4c22      	ldr	r4, [pc, #136]	; (257c8 <z_init_static_threads+0xac>)
   2573e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 257d0 <z_init_static_threads+0xb4>
   25742:	42ac      	cmp	r4, r5
   25744:	d320      	bcc.n	25788 <z_init_static_threads+0x6c>
}
   25746:	b007      	add	sp, #28
   25748:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2574c:	f000 bdc4 	b.w	262d8 <k_sched_unlock>
		z_setup_new_thread(
   25750:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25754:	9305      	str	r3, [sp, #20]
   25756:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2575a:	9304      	str	r3, [sp, #16]
   2575c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25760:	9303      	str	r3, [sp, #12]
   25762:	f854 3c18 	ldr.w	r3, [r4, #-24]
   25766:	9302      	str	r3, [sp, #8]
   25768:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2576c:	9301      	str	r3, [sp, #4]
   2576e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   25772:	9300      	str	r3, [sp, #0]
   25774:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   25778:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2577c:	f7ff ff64 	bl	25648 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   25780:	f854 3c30 	ldr.w	r3, [r4, #-48]
   25784:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   25786:	e7ce      	b.n	25726 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   25788:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2578a:	1c5a      	adds	r2, r3, #1
   2578c:	d00d      	beq.n	257aa <z_init_static_threads+0x8e>
   2578e:	2100      	movs	r1, #0
   25790:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   25792:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   25796:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2579a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2579e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   257a2:	d104      	bne.n	257ae <z_init_static_threads+0x92>
	z_sched_start(thread);
   257a4:	4640      	mov	r0, r8
   257a6:	f000 fd33 	bl	26210 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   257aa:	3430      	adds	r4, #48	; 0x30
   257ac:	e7c9      	b.n	25742 <z_init_static_threads+0x26>
   257ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   257b2:	2300      	movs	r3, #0
   257b4:	f7e3 fbc4 	bl	8f40 <__aeabi_uldivmod>
   257b8:	4602      	mov	r2, r0
   257ba:	460b      	mov	r3, r1
   257bc:	f108 0018 	add.w	r0, r8, #24
   257c0:	4649      	mov	r1, r9
   257c2:	f000 ff2d 	bl	26620 <z_add_timeout>
   257c6:	e7f0      	b.n	257aa <z_init_static_threads+0x8e>
   257c8:	00032b60 	.word	0x00032b60
   257cc:	00032dd0 	.word	0x00032dd0
   257d0:	000310d9 	.word	0x000310d9

000257d4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   257d4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   257d6:	4c0b      	ldr	r4, [pc, #44]	; (25804 <idle+0x30>)
   257d8:	4d0b      	ldr	r5, [pc, #44]	; (25808 <idle+0x34>)
	__asm__ volatile(
   257da:	f04f 0220 	mov.w	r2, #32
   257de:	f3ef 8311 	mrs	r3, BASEPRI
   257e2:	f382 8812 	msr	BASEPRI_MAX, r2
   257e6:	f3bf 8f6f 	isb	sy
   257ea:	f00b fd86 	bl	312fa <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   257ee:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   257f0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   257f2:	b913      	cbnz	r3, 257fa <idle+0x26>
	arch_cpu_idle();
   257f4:	f7eb fbfc 	bl	10ff0 <arch_cpu_idle>
}
   257f8:	e7ef      	b.n	257da <idle+0x6>
   257fa:	f7eb f965 	bl	10ac8 <pm_system_suspend>
   257fe:	2800      	cmp	r0, #0
   25800:	d1eb      	bne.n	257da <idle+0x6>
   25802:	e7f7      	b.n	257f4 <idle+0x20>
   25804:	20030d2c 	.word	0x20030d2c
   25808:	20031e0d 	.word	0x20031e0d

0002580c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2580c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25810:	4604      	mov	r4, r0
   25812:	4617      	mov	r7, r2
   25814:	461e      	mov	r6, r3
   25816:	f04f 0320 	mov.w	r3, #32
   2581a:	f3ef 8811 	mrs	r8, BASEPRI
   2581e:	f383 8812 	msr	BASEPRI_MAX, r3
   25822:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   25826:	68c3      	ldr	r3, [r0, #12]
   25828:	4a33      	ldr	r2, [pc, #204]	; (258f8 <z_impl_k_mutex_lock+0xec>)
   2582a:	b17b      	cbz	r3, 2584c <z_impl_k_mutex_lock+0x40>
   2582c:	6880      	ldr	r0, [r0, #8]
   2582e:	6891      	ldr	r1, [r2, #8]
   25830:	4288      	cmp	r0, r1
   25832:	d019      	beq.n	25868 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   25834:	ea57 0306 	orrs.w	r3, r7, r6
   25838:	d118      	bne.n	2586c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2583a:	f388 8811 	msr	BASEPRI, r8
   2583e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   25842:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25846:	b002      	add	sp, #8
   25848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2584c:	6891      	ldr	r1, [r2, #8]
   2584e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   25852:	3301      	adds	r3, #1
   25854:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   25856:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   25858:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2585a:	60a3      	str	r3, [r4, #8]
   2585c:	f388 8811 	msr	BASEPRI, r8
   25860:	f3bf 8f6f 	isb	sy
		return 0;
   25864:	2000      	movs	r0, #0
   25866:	e7ee      	b.n	25846 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   25868:	6921      	ldr	r1, [r4, #16]
   2586a:	e7f2      	b.n	25852 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2586c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   25870:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   25874:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   25878:	4299      	cmp	r1, r3
   2587a:	bfa8      	it	ge
   2587c:	4619      	movge	r1, r3
   2587e:	4291      	cmp	r1, r2
   25880:	bfb8      	it	lt
   25882:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   25884:	428b      	cmp	r3, r1
   25886:	dd2e      	ble.n	258e6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   25888:	f00b fa4f 	bl	30d2a <adjust_owner_prio.isra.0>
   2588c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2588e:	4622      	mov	r2, r4
   25890:	4641      	mov	r1, r8
   25892:	e9cd 7600 	strd	r7, r6, [sp]
   25896:	4819      	ldr	r0, [pc, #100]	; (258fc <z_impl_k_mutex_lock+0xf0>)
   25898:	f000 fc44 	bl	26124 <z_pend_curr>
	if (got_mutex == 0) {
   2589c:	2800      	cmp	r0, #0
   2589e:	d0e1      	beq.n	25864 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   258a0:	f04f 0320 	mov.w	r3, #32
   258a4:	f3ef 8611 	mrs	r6, BASEPRI
   258a8:	f383 8812 	msr	BASEPRI_MAX, r3
   258ac:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   258b0:	68a0      	ldr	r0, [r4, #8]
   258b2:	b1d0      	cbz	r0, 258ea <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   258b4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   258b6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   258b8:	429c      	cmp	r4, r3
   258ba:	d00a      	beq.n	258d2 <z_impl_k_mutex_lock+0xc6>
   258bc:	b14b      	cbz	r3, 258d2 <z_impl_k_mutex_lock+0xc6>
   258be:	f993 300e 	ldrsb.w	r3, [r3, #14]
   258c2:	4299      	cmp	r1, r3
   258c4:	bfa8      	it	ge
   258c6:	4619      	movge	r1, r3
   258c8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   258cc:	4299      	cmp	r1, r3
   258ce:	bfb8      	it	lt
   258d0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   258d2:	f00b fa2a 	bl	30d2a <adjust_owner_prio.isra.0>
   258d6:	b140      	cbz	r0, 258ea <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   258d8:	4631      	mov	r1, r6
   258da:	4808      	ldr	r0, [pc, #32]	; (258fc <z_impl_k_mutex_lock+0xf0>)
   258dc:	f000 fc86 	bl	261ec <z_reschedule>
	return -EAGAIN;
   258e0:	f06f 000a 	mvn.w	r0, #10
   258e4:	e7af      	b.n	25846 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   258e6:	2500      	movs	r5, #0
   258e8:	e7d1      	b.n	2588e <z_impl_k_mutex_lock+0x82>
	if (resched) {
   258ea:	2d00      	cmp	r5, #0
   258ec:	d1f4      	bne.n	258d8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   258ee:	f386 8811 	msr	BASEPRI, r6
   258f2:	f3bf 8f6f 	isb	sy
   258f6:	e7f3      	b.n	258e0 <z_impl_k_mutex_lock+0xd4>
   258f8:	20030d2c 	.word	0x20030d2c
   258fc:	20031e0e 	.word	0x20031e0e

00025900 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   25900:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   25902:	6883      	ldr	r3, [r0, #8]
{
   25904:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   25906:	b373      	cbz	r3, 25966 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   25908:	4a1a      	ldr	r2, [pc, #104]	; (25974 <z_impl_k_mutex_unlock+0x74>)
   2590a:	6892      	ldr	r2, [r2, #8]
   2590c:	4293      	cmp	r3, r2
   2590e:	d12d      	bne.n	2596c <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   25910:	68c3      	ldr	r3, [r0, #12]
   25912:	2b01      	cmp	r3, #1
   25914:	d903      	bls.n	2591e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   25916:	3b01      	subs	r3, #1
   25918:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2591a:	2000      	movs	r0, #0
}
   2591c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2591e:	f04f 0320 	mov.w	r3, #32
   25922:	f3ef 8511 	mrs	r5, BASEPRI
   25926:	f383 8812 	msr	BASEPRI_MAX, r3
   2592a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2592e:	6901      	ldr	r1, [r0, #16]
   25930:	6880      	ldr	r0, [r0, #8]
   25932:	f00b f9fa 	bl	30d2a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25936:	4620      	mov	r0, r4
   25938:	f00b fc4f 	bl	311da <z_unpend_first_thread>
	mutex->owner = new_owner;
   2593c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2593e:	b160      	cbz	r0, 2595a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   25940:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25944:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   25946:	2200      	movs	r2, #0
   25948:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		z_ready_thread(new_owner);
   2594c:	f00b fc0e 	bl	3116c <z_ready_thread>
		z_reschedule(&lock, key);
   25950:	4629      	mov	r1, r5
   25952:	4809      	ldr	r0, [pc, #36]	; (25978 <z_impl_k_mutex_unlock+0x78>)
   25954:	f000 fc4a 	bl	261ec <z_reschedule>
   25958:	e7df      	b.n	2591a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2595a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2595c:	f385 8811 	msr	BASEPRI, r5
   25960:	f3bf 8f6f 	isb	sy
   25964:	e7d9      	b.n	2591a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   25966:	f06f 0015 	mvn.w	r0, #21
   2596a:	e7d7      	b.n	2591c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2596c:	f04f 30ff 	mov.w	r0, #4294967295
   25970:	e7d4      	b.n	2591c <z_impl_k_mutex_unlock+0x1c>
   25972:	bf00      	nop
   25974:	20030d2c 	.word	0x20030d2c
   25978:	20031e0e 	.word	0x20031e0e

0002597c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2597c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2597e:	4611      	mov	r1, r2
	__asm__ volatile(
   25980:	f04f 0220 	mov.w	r2, #32
   25984:	f3ef 8511 	mrs	r5, BASEPRI
   25988:	f382 8812 	msr	BASEPRI_MAX, r2
   2598c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   25990:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25992:	b19c      	cbz	r4, 259bc <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25994:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25996:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25998:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2599c:	4294      	cmp	r4, r2
	list->head = node;
   2599e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   259a0:	bf08      	it	eq
   259a2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   259a4:	2101      	movs	r1, #1
   259a6:	4620      	mov	r0, r4
   259a8:	f00b fa35 	bl	30e16 <z_queue_node_peek>
   259ac:	4604      	mov	r4, r0
	__asm__ volatile(
   259ae:	f385 8811 	msr	BASEPRI, r5
   259b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   259b6:	4620      	mov	r0, r4
   259b8:	b003      	add	sp, #12
   259ba:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   259bc:	ea51 0203 	orrs.w	r2, r1, r3
   259c0:	d0f5      	beq.n	259ae <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   259c2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   259c6:	e9cd 1300 	strd	r1, r3, [sp]
   259ca:	4610      	mov	r0, r2
   259cc:	4629      	mov	r1, r5
   259ce:	f000 fba9 	bl	26124 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   259d2:	2800      	cmp	r0, #0
   259d4:	d1ef      	bne.n	259b6 <z_impl_k_queue_get+0x3a>
   259d6:	4b02      	ldr	r3, [pc, #8]	; (259e0 <z_impl_k_queue_get+0x64>)
   259d8:	689b      	ldr	r3, [r3, #8]
   259da:	695c      	ldr	r4, [r3, #20]
   259dc:	e7eb      	b.n	259b6 <z_impl_k_queue_get+0x3a>
   259de:	bf00      	nop
   259e0:	20030d2c 	.word	0x20030d2c

000259e4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   259e4:	b538      	push	{r3, r4, r5, lr}
   259e6:	4604      	mov	r4, r0
	__asm__ volatile(
   259e8:	f04f 0320 	mov.w	r3, #32
   259ec:	f3ef 8511 	mrs	r5, BASEPRI
   259f0:	f383 8812 	msr	BASEPRI_MAX, r3
   259f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   259f8:	f00b fbef 	bl	311da <z_unpend_first_thread>

	if (thread != NULL) {
   259fc:	b150      	cbz	r0, 25a14 <z_impl_k_sem_give+0x30>
   259fe:	2200      	movs	r2, #0
   25a00:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25a04:	f00b fbb2 	bl	3116c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25a08:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   25a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   25a0e:	4807      	ldr	r0, [pc, #28]	; (25a2c <z_impl_k_sem_give+0x48>)
   25a10:	f000 bbec 	b.w	261ec <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25a14:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25a18:	429a      	cmp	r2, r3
   25a1a:	bf18      	it	ne
   25a1c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25a1e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25a20:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25a22:	f104 0010 	add.w	r0, r4, #16
   25a26:	f00b fe29 	bl	3167c <z_handle_obj_poll_events>
}
   25a2a:	e7ed      	b.n	25a08 <z_impl_k_sem_give+0x24>
   25a2c:	20031e0e 	.word	0x20031e0e

00025a30 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25a30:	b513      	push	{r0, r1, r4, lr}
   25a32:	f04f 0420 	mov.w	r4, #32
   25a36:	f3ef 8111 	mrs	r1, BASEPRI
   25a3a:	f384 8812 	msr	BASEPRI_MAX, r4
   25a3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25a42:	6884      	ldr	r4, [r0, #8]
   25a44:	b144      	cbz	r4, 25a58 <z_impl_k_sem_take+0x28>
		sem->count--;
   25a46:	3c01      	subs	r4, #1
   25a48:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   25a4a:	f381 8811 	msr	BASEPRI, r1
   25a4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25a52:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25a54:	b002      	add	sp, #8
   25a56:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25a58:	ea52 0403 	orrs.w	r4, r2, r3
   25a5c:	d106      	bne.n	25a6c <z_impl_k_sem_take+0x3c>
   25a5e:	f381 8811 	msr	BASEPRI, r1
   25a62:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25a66:	f06f 000f 	mvn.w	r0, #15
   25a6a:	e7f3      	b.n	25a54 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   25a6c:	e9cd 2300 	strd	r2, r3, [sp]
   25a70:	4602      	mov	r2, r0
   25a72:	4802      	ldr	r0, [pc, #8]	; (25a7c <z_impl_k_sem_take+0x4c>)
   25a74:	f000 fb56 	bl	26124 <z_pend_curr>
	return ret;
   25a78:	e7ec      	b.n	25a54 <z_impl_k_sem_take+0x24>
   25a7a:	bf00      	nop
   25a7c:	20031e0e 	.word	0x20031e0e

00025a80 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25a82:	2400      	movs	r4, #0
   25a84:	4b08      	ldr	r3, [pc, #32]	; (25aa8 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	struct k_work_queue_config cfg = {
   25a8a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25a8c:	ab02      	add	r3, sp, #8
   25a8e:	9300      	str	r3, [sp, #0]
   25a90:	4906      	ldr	r1, [pc, #24]	; (25aac <k_sys_work_q_init+0x2c>)
   25a92:	f04f 33ff 	mov.w	r3, #4294967295
   25a96:	4806      	ldr	r0, [pc, #24]	; (25ab0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25a98:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25a9c:	f000 f924 	bl	25ce8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25aa0:	4620      	mov	r0, r4
   25aa2:	b004      	add	sp, #16
   25aa4:	bd10      	pop	{r4, pc}
   25aa6:	bf00      	nop
   25aa8:	0003856c 	.word	0x0003856c
   25aac:	20053aa8 	.word	0x20053aa8
   25ab0:	2000a458 	.word	0x2000a458

00025ab4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ab8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   25aba:	f04f 38ff 	mov.w	r8, #4294967295
   25abe:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   25ac2:	4e48      	ldr	r6, [pc, #288]	; (25be4 <work_queue_main+0x130>)
{
   25ac4:	b085      	sub	sp, #20
	__asm__ volatile(
   25ac6:	f04f 0320 	mov.w	r3, #32
   25aca:	f3ef 8711 	mrs	r7, BASEPRI
   25ace:	f383 8812 	msr	BASEPRI_MAX, r3
   25ad2:	f3bf 8f6f 	isb	sy
   25ad6:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
Z_GENLIST_GET(slist, snode)
   25ada:	b98d      	cbnz	r5, 25b00 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   25adc:	2102      	movs	r1, #2
   25ade:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   25ae2:	f00b f9d5 	bl	30e90 <flag_test_and_clear>
   25ae6:	2800      	cmp	r0, #0
   25ae8:	d143      	bne.n	25b72 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   25aea:	2300      	movs	r3, #0
   25aec:	4639      	mov	r1, r7
   25aee:	e9cd 8900 	strd	r8, r9, [sp]
   25af2:	9302      	str	r3, [sp, #8]
   25af4:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
   25af8:	483b      	ldr	r0, [pc, #236]	; (25be8 <work_queue_main+0x134>)
   25afa:	f000 fd17 	bl	2652c <z_sched_wait>
			continue;
   25afe:	e7e2      	b.n	25ac6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25b00:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
	return node->next;
   25b04:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25b06:	4295      	cmp	r5, r2
	list->head = node;
   25b08:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	list->tail = node;
   25b0c:	bf08      	it	eq
   25b0e:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
	*flagp |= BIT(bit);
   25b12:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   25b16:	f043 0302 	orr.w	r3, r3, #2
   25b1a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	*flagp &= ~BIT(bit);
   25b1e:	68eb      	ldr	r3, [r5, #12]
   25b20:	f023 0304 	bic.w	r3, r3, #4
   25b24:	f043 0301 	orr.w	r3, r3, #1
   25b28:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   25b2a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   25b2c:	f387 8811 	msr	BASEPRI, r7
   25b30:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   25b34:	4628      	mov	r0, r5
   25b36:	4798      	blx	r3
	__asm__ volatile(
   25b38:	f04f 0320 	mov.w	r3, #32
   25b3c:	f3ef 8b11 	mrs	fp, BASEPRI
   25b40:	f383 8812 	msr	BASEPRI_MAX, r3
   25b44:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   25b48:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25b4a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   25b4c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25b50:	d419      	bmi.n	25b86 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   25b52:	60ea      	str	r2, [r5, #12]
   25b54:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   25b58:	f023 0302 	bic.w	r3, r3, #2
   25b5c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	__asm__ volatile(
   25b60:	f38b 8811 	msr	BASEPRI, fp
   25b64:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25b68:	05db      	lsls	r3, r3, #23
   25b6a:	d4ac      	bmi.n	25ac6 <work_queue_main+0x12>
	z_impl_k_yield();
   25b6c:	f000 fbdc 	bl	26328 <z_impl_k_yield>
}
   25b70:	e7a9      	b.n	25ac6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25b72:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25b76:	2200      	movs	r2, #0
   25b78:	2101      	movs	r1, #1
   25b7a:	4628      	mov	r0, r5
   25b7c:	f00b fb83 	bl	31286 <z_sched_wake>
   25b80:	2800      	cmp	r0, #0
   25b82:	d1f8      	bne.n	25b76 <work_queue_main+0xc2>
   25b84:	e7b1      	b.n	25aea <work_queue_main+0x36>
	return list->head;
   25b86:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   25b88:	f023 0303 	bic.w	r3, r3, #3
   25b8c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25b8e:	2800      	cmp	r0, #0
   25b90:	d0e0      	beq.n	25b54 <work_queue_main+0xa0>
	return node->next;
   25b92:	2700      	movs	r7, #0
	parent->next = child;
   25b94:	463b      	mov	r3, r7
	return node->next;
   25b96:	f8d0 a000 	ldr.w	sl, [r0]
   25b9a:	2800      	cmp	r0, #0
   25b9c:	d0da      	beq.n	25b54 <work_queue_main+0xa0>
		if (wc->work == work) {
   25b9e:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   25ba0:	4601      	mov	r1, r0
		if (wc->work == work) {
   25ba2:	4295      	cmp	r5, r2
   25ba4:	d10c      	bne.n	25bc0 <work_queue_main+0x10c>
   25ba6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   25ba8:	b99f      	cbnz	r7, 25bd2 <work_queue_main+0x11e>
   25baa:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   25bac:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   25bae:	4282      	cmp	r2, r0
   25bb0:	d100      	bne.n	25bb4 <work_queue_main+0x100>
	list->tail = node;
   25bb2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   25bb4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   25bb8:	f7ff ff14 	bl	259e4 <z_impl_k_sem_give>
}
   25bbc:	4639      	mov	r1, r7
   25bbe:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25bc0:	f1ba 0f00 	cmp.w	sl, #0
   25bc4:	d00b      	beq.n	25bde <work_queue_main+0x12a>
	return node->next;
   25bc6:	f8da 2000 	ldr.w	r2, [sl]
   25bca:	4650      	mov	r0, sl
   25bcc:	460f      	mov	r7, r1
   25bce:	4692      	mov	sl, r2
   25bd0:	e7e3      	b.n	25b9a <work_queue_main+0xe6>
	parent->next = child;
   25bd2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   25bd4:	6872      	ldr	r2, [r6, #4]
   25bd6:	4282      	cmp	r2, r0
	list->tail = node;
   25bd8:	bf08      	it	eq
   25bda:	6077      	streq	r7, [r6, #4]
}
   25bdc:	e7ea      	b.n	25bb4 <work_queue_main+0x100>
   25bde:	4652      	mov	r2, sl
   25be0:	e7f3      	b.n	25bca <work_queue_main+0x116>
   25be2:	bf00      	nop
   25be4:	20030d54 	.word	0x20030d54
   25be8:	20031e0e 	.word	0x20031e0e

00025bec <cancel_sync_locked>:
{
   25bec:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25bee:	68c3      	ldr	r3, [r0, #12]
{
   25bf0:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   25bf2:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   25bf6:	079b      	lsls	r3, r3, #30
{
   25bf8:	460c      	mov	r4, r1
	if (ret) {
   25bfa:	d50d      	bpl.n	25c18 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25bfc:	2201      	movs	r2, #1
   25bfe:	2100      	movs	r1, #0
   25c00:	f104 0008 	add.w	r0, r4, #8
   25c04:	f00b f934 	bl	30e70 <z_impl_k_sem_init>
	parent->next = child;
   25c08:	2300      	movs	r3, #0
   25c0a:	6023      	str	r3, [r4, #0]
	return list->tail;
   25c0c:	4b05      	ldr	r3, [pc, #20]	; (25c24 <cancel_sync_locked+0x38>)
	canceler->work = work;
   25c0e:	6065      	str	r5, [r4, #4]
   25c10:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25c12:	b91a      	cbnz	r2, 25c1c <cancel_sync_locked+0x30>
	list->head = node;
   25c14:	e9c3 4400 	strd	r4, r4, [r3]
}
   25c18:	4630      	mov	r0, r6
   25c1a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   25c1c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25c1e:	605c      	str	r4, [r3, #4]
}
   25c20:	e7fa      	b.n	25c18 <cancel_sync_locked+0x2c>
   25c22:	bf00      	nop
   25c24:	20030d54 	.word	0x20030d54

00025c28 <submit_to_queue_locked>:
{
   25c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   25c2a:	68c3      	ldr	r3, [r0, #12]
{
   25c2c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25c2e:	079a      	lsls	r2, r3, #30
{
   25c30:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25c32:	f3c3 0640 	ubfx	r6, r3, #1, #1
   25c36:	d42c      	bmi.n	25c92 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25c38:	075b      	lsls	r3, r3, #29
   25c3a:	d41a      	bmi.n	25c72 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   25c3c:	680b      	ldr	r3, [r1, #0]
   25c3e:	b90b      	cbnz	r3, 25c44 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   25c40:	6883      	ldr	r3, [r0, #8]
   25c42:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   25c44:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25c46:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   25c48:	bf42      	ittt	mi
   25c4a:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   25c4c:	2602      	movmi	r6, #2
			*queuep = work->queue;
   25c4e:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   25c50:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   25c52:	bf58      	it	pl
   25c54:	2601      	movpl	r6, #1
	if (queue == NULL) {
   25c56:	2d00      	cmp	r5, #0
   25c58:	d03a      	beq.n	25cd0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25c5a:	4b1f      	ldr	r3, [pc, #124]	; (25cd8 <submit_to_queue_locked+0xb0>)
   25c5c:	689b      	ldr	r3, [r3, #8]
   25c5e:	42ab      	cmp	r3, r5
   25c60:	d00a      	beq.n	25c78 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   25c62:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25c66:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25c68:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25c6c:	d414      	bmi.n	25c98 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   25c6e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   25c72:	2300      	movs	r3, #0
   25c74:	603b      	str	r3, [r7, #0]
	return ret;
   25c76:	e025      	b.n	25cc4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25c78:	f00b f846 	bl	30d08 <k_is_in_isr>
   25c7c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   25c80:	2800      	cmp	r0, #0
   25c82:	d1f0      	bne.n	25c66 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25c84:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25c86:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25c8a:	d5f0      	bpl.n	25c6e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   25c8c:	b152      	cbz	r2, 25ca4 <submit_to_queue_locked+0x7c>
   25c8e:	075b      	lsls	r3, r3, #29
   25c90:	d408      	bmi.n	25ca4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   25c92:	f06f 060f 	mvn.w	r6, #15
   25c96:	e7ec      	b.n	25c72 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   25c98:	2a00      	cmp	r2, #0
   25c9a:	d1fa      	bne.n	25c92 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   25c9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   25ca0:	2b00      	cmp	r3, #0
   25ca2:	d1f6      	bne.n	25c92 <submit_to_queue_locked+0x6a>
	parent->next = child;
   25ca4:	2300      	movs	r3, #0
   25ca6:	6023      	str	r3, [r4, #0]
	return list->tail;
   25ca8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
Z_GENLIST_APPEND(slist, snode)
   25cac:	b963      	cbnz	r3, 25cc8 <submit_to_queue_locked+0xa0>
	list->head = node;
   25cae:	e9c5 442a 	strd	r4, r4, [r5, #168]	; 0xa8
		(void)notify_queue_locked(queue);
   25cb2:	4628      	mov	r0, r5
   25cb4:	f00b f905 	bl	30ec2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25cb8:	68e3      	ldr	r3, [r4, #12]
   25cba:	f043 0304 	orr.w	r3, r3, #4
   25cbe:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25cc0:	683b      	ldr	r3, [r7, #0]
   25cc2:	60a3      	str	r3, [r4, #8]
}
   25cc4:	4630      	mov	r0, r6
   25cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25cc8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25cca:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
}
   25cce:	e7f0      	b.n	25cb2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   25cd0:	f06f 0615 	mvn.w	r6, #21
   25cd4:	e7cd      	b.n	25c72 <submit_to_queue_locked+0x4a>
   25cd6:	bf00      	nop
   25cd8:	20030d2c 	.word	0x20030d2c

00025cdc <k_work_submit>:
{
   25cdc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   25cde:	4801      	ldr	r0, [pc, #4]	; (25ce4 <k_work_submit+0x8>)
   25ce0:	f00b b975 	b.w	30fce <k_work_submit_to_queue>
   25ce4:	2000a458 	.word	0x2000a458

00025ce8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   25ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
   25cea:	4604      	mov	r4, r0
	list->head = NULL;
   25cec:	2000      	movs	r0, #0
   25cee:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   25cf0:	e9c4 002a 	strd	r0, r0, [r4, #168]	; 0xa8
   25cf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   25cf6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	list->tail = (sys_dnode_t *)list;
   25cfa:	e9c4 002c 	strd	r0, r0, [r4, #176]	; 0xb0
   25cfe:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   25d02:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   25d06:	b31d      	cbz	r5, 25d50 <k_work_queue_start+0x68>
   25d08:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   25d0a:	2800      	cmp	r0, #0
   25d0c:	f240 1001 	movw	r0, #257	; 0x101
   25d10:	bf08      	it	eq
   25d12:	2001      	moveq	r0, #1
	*flagp = flags;
   25d14:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25d18:	2000      	movs	r0, #0
   25d1a:	f04f 36ff 	mov.w	r6, #4294967295
   25d1e:	f04f 37ff 	mov.w	r7, #4294967295
   25d22:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25d26:	e9cd 0001 	strd	r0, r0, [sp, #4]
   25d2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   25d2e:	4620      	mov	r0, r4
   25d30:	4b08      	ldr	r3, [pc, #32]	; (25d54 <k_work_queue_start+0x6c>)
   25d32:	9400      	str	r4, [sp, #0]
   25d34:	f7ff fcc6 	bl	256c4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   25d38:	b125      	cbz	r5, 25d44 <k_work_queue_start+0x5c>
   25d3a:	6829      	ldr	r1, [r5, #0]
   25d3c:	b111      	cbz	r1, 25d44 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   25d3e:	4620      	mov	r0, r4
   25d40:	f7ff fc72 	bl	25628 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25d44:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   25d46:	b009      	add	sp, #36	; 0x24
   25d48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25d4c:	f00a bfe4 	b.w	30d18 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25d50:	2001      	movs	r0, #1
   25d52:	e7df      	b.n	25d14 <k_work_queue_start+0x2c>
   25d54:	00025ab5 	.word	0x00025ab5

00025d58 <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
   25d58:	b530      	push	{r4, r5, lr}
   25d5a:	460a      	mov	r2, r1
   25d5c:	4604      	mov	r4, r0
   25d5e:	b085      	sub	sp, #20
	__asm__ volatile(
   25d60:	f04f 0320 	mov.w	r3, #32
   25d64:	f3ef 8511 	mrs	r5, BASEPRI
   25d68:	f383 8812 	msr	BASEPRI_MAX, r3
   25d6c:	f3bf 8f6f 	isb	sy
	return *flagp;
   25d70:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
   25d74:	f013 0f06 	tst.w	r3, #6
   25d78:	d11d      	bne.n	25db6 <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
   25d7a:	b1b1      	cbz	r1, 25daa <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
   25d7c:	f043 030c 	orr.w	r3, r3, #12
   25d80:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
   25d84:	4620      	mov	r0, r4
   25d86:	f00b f89c 	bl	30ec2 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   25d8a:	2300      	movs	r3, #0
   25d8c:	f04f 32ff 	mov.w	r2, #4294967295
   25d90:	9302      	str	r3, [sp, #8]
   25d92:	f04f 33ff 	mov.w	r3, #4294967295
   25d96:	4629      	mov	r1, r5
   25d98:	e9cd 2300 	strd	r2, r3, [sp]
   25d9c:	480c      	ldr	r0, [pc, #48]	; (25dd0 <k_work_queue_drain+0x78>)
   25d9e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   25da2:	f000 fbc3 	bl	2652c <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
   25da6:	b005      	add	sp, #20
   25da8:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   25daa:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
   25dae:	b148      	cbz	r0, 25dc4 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
   25db0:	f043 0304 	orr.w	r3, r3, #4
   25db4:	e7e4      	b.n	25d80 <k_work_queue_drain+0x28>
   25db6:	f043 0104 	orr.w	r1, r3, #4
   25dba:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
		if (plug) {
   25dbe:	2a00      	cmp	r2, #0
   25dc0:	d0e0      	beq.n	25d84 <k_work_queue_drain+0x2c>
   25dc2:	e7db      	b.n	25d7c <k_work_queue_drain+0x24>
	__asm__ volatile(
   25dc4:	f385 8811 	msr	BASEPRI, r5
   25dc8:	f3bf 8f6f 	isb	sy
	return ret;
   25dcc:	e7eb      	b.n	25da6 <k_work_queue_drain+0x4e>
   25dce:	bf00      	nop
   25dd0:	20031e0e 	.word	0x20031e0e

00025dd4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   25dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25dd6:	9001      	str	r0, [sp, #4]
   25dd8:	4608      	mov	r0, r1
	__asm__ volatile(
   25dda:	f04f 0120 	mov.w	r1, #32
   25dde:	f3ef 8411 	mrs	r4, BASEPRI
   25de2:	f381 8812 	msr	BASEPRI_MAX, r1
   25de6:	f3bf 8f6f 	isb	sy
	return *flagp;
   25dea:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25dec:	f011 0f0e 	tst.w	r1, #14
   25df0:	d116      	bne.n	25e20 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25df2:	ea53 0502 	orrs.w	r5, r3, r2
   25df6:	d108      	bne.n	25e0a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   25df8:	a901      	add	r1, sp, #4
   25dfa:	f7ff ff15 	bl	25c28 <submit_to_queue_locked>
	__asm__ volatile(
   25dfe:	f384 8811 	msr	BASEPRI, r4
   25e02:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25e06:	b003      	add	sp, #12
   25e08:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   25e0a:	f041 0108 	orr.w	r1, r1, #8
   25e0e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   25e10:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25e12:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   25e14:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25e16:	4903      	ldr	r1, [pc, #12]	; (25e24 <k_work_schedule_for_queue+0x50>)
   25e18:	f000 fc02 	bl	26620 <z_add_timeout>
	return ret;
   25e1c:	2001      	movs	r0, #1
   25e1e:	e7ee      	b.n	25dfe <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   25e20:	2000      	movs	r0, #0
   25e22:	e7ec      	b.n	25dfe <k_work_schedule_for_queue+0x2a>
   25e24:	00030f37 	.word	0x00030f37

00025e28 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   25e28:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   25e2a:	4801      	ldr	r0, [pc, #4]	; (25e30 <k_work_schedule+0x8>)
   25e2c:	f7ff bfd2 	b.w	25dd4 <k_work_schedule_for_queue>
   25e30:	2000a458 	.word	0x2000a458

00025e34 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25e36:	460c      	mov	r4, r1
   25e38:	4616      	mov	r6, r2
   25e3a:	461d      	mov	r5, r3
   25e3c:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   25e3e:	f04f 0320 	mov.w	r3, #32
   25e42:	f3ef 8711 	mrs	r7, BASEPRI
   25e46:	f383 8812 	msr	BASEPRI_MAX, r3
   25e4a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   25e4e:	4608      	mov	r0, r1
   25e50:	f00b f829 	bl	30ea6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25e54:	ea55 0306 	orrs.w	r3, r5, r6
   25e58:	d109      	bne.n	25e6e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   25e5a:	4620      	mov	r0, r4
   25e5c:	a901      	add	r1, sp, #4
   25e5e:	f7ff fee3 	bl	25c28 <submit_to_queue_locked>
	__asm__ volatile(
   25e62:	f387 8811 	msr	BASEPRI, r7
   25e66:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25e6a:	b003      	add	sp, #12
   25e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   25e6e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25e70:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   25e74:	f043 0308 	orr.w	r3, r3, #8
   25e78:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   25e7a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25e7c:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   25e7e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25e80:	4902      	ldr	r1, [pc, #8]	; (25e8c <k_work_reschedule_for_queue+0x58>)
   25e82:	462b      	mov	r3, r5
   25e84:	f000 fbcc 	bl	26620 <z_add_timeout>
	return ret;
   25e88:	2001      	movs	r0, #1
   25e8a:	e7ea      	b.n	25e62 <k_work_reschedule_for_queue+0x2e>
   25e8c:	00030f37 	.word	0x00030f37

00025e90 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25e90:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   25e92:	4801      	ldr	r0, [pc, #4]	; (25e98 <k_work_reschedule+0x8>)
   25e94:	f7ff bfce 	b.w	25e34 <k_work_reschedule_for_queue>
   25e98:	2000a458 	.word	0x2000a458

00025e9c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   25e9c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   25e9e:	4d07      	ldr	r5, [pc, #28]	; (25ebc <z_reset_time_slice+0x20>)
   25ea0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   25ea2:	b154      	cbz	r4, 25eba <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   25ea4:	f7fc ffe2 	bl	22e6c <sys_clock_elapsed>
   25ea8:	4b05      	ldr	r3, [pc, #20]	; (25ec0 <z_reset_time_slice+0x24>)
   25eaa:	4404      	add	r4, r0
   25eac:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   25eae:	6828      	ldr	r0, [r5, #0]
   25eb0:	2100      	movs	r1, #0
	}
}
   25eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   25eb6:	f00b ba30 	b.w	3131a <z_set_timeout_expiry>
}
   25eba:	bd38      	pop	{r3, r4, r5, pc}
   25ebc:	20030d64 	.word	0x20030d64
   25ec0:	20030d2c 	.word	0x20030d2c

00025ec4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   25ec4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   25ec6:	4d0d      	ldr	r5, [pc, #52]	; (25efc <update_cache+0x38>)
   25ec8:	462b      	mov	r3, r5
   25eca:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ece:	429c      	cmp	r4, r3
   25ed0:	d000      	beq.n	25ed4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   25ed2:	b904      	cbnz	r4, 25ed6 <update_cache+0x12>
   25ed4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   25ed6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   25ed8:	b938      	cbnz	r0, 25eea <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   25eda:	7b5a      	ldrb	r2, [r3, #13]
   25edc:	06d2      	lsls	r2, r2, #27
   25ede:	d104      	bne.n	25eea <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   25ee0:	69a2      	ldr	r2, [r4, #24]
   25ee2:	b912      	cbnz	r2, 25eea <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   25ee4:	89da      	ldrh	r2, [r3, #14]
   25ee6:	2a7f      	cmp	r2, #127	; 0x7f
   25ee8:	d805      	bhi.n	25ef6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   25eea:	429c      	cmp	r4, r3
   25eec:	d002      	beq.n	25ef4 <update_cache+0x30>
			z_reset_time_slice(thread);
   25eee:	4620      	mov	r0, r4
   25ef0:	f7ff ffd4 	bl	25e9c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   25ef4:	4623      	mov	r3, r4
   25ef6:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   25ef8:	bd38      	pop	{r3, r4, r5, pc}
   25efa:	bf00      	nop
   25efc:	20030d2c 	.word	0x20030d2c

00025f00 <move_thread_to_end_of_prio_q>:
{
   25f00:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   25f02:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   25f06:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   25f08:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   25f0a:	7b43      	ldrb	r3, [r0, #13]
   25f0c:	da04      	bge.n	25f18 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25f12:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   25f14:	f00b f8c5 	bl	310a2 <sys_dlist_remove>
	return list->head == list;
   25f18:	4a15      	ldr	r2, [pc, #84]	; (25f70 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   25f1a:	7b4b      	ldrb	r3, [r1, #13]
   25f1c:	4610      	mov	r0, r2
   25f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25f22:	734b      	strb	r3, [r1, #13]
   25f24:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   25f28:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f2a:	4283      	cmp	r3, r0
   25f2c:	bf08      	it	eq
   25f2e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25f30:	b923      	cbnz	r3, 25f3c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   25f32:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   25f36:	6021      	str	r1, [r4, #0]
	list->tail = node;
   25f38:	6251      	str	r1, [r2, #36]	; 0x24
}
   25f3a:	e00c      	b.n	25f56 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   25f3c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   25f40:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25f44:	42b5      	cmp	r5, r6
   25f46:	d00e      	beq.n	25f66 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25f48:	42ae      	cmp	r6, r5
   25f4a:	dd0c      	ble.n	25f66 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   25f4c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   25f4e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   25f52:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   25f54:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   25f56:	6890      	ldr	r0, [r2, #8]
}
   25f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   25f5c:	1a43      	subs	r3, r0, r1
   25f5e:	4258      	negs	r0, r3
   25f60:	4158      	adcs	r0, r3
   25f62:	f7ff bfaf 	b.w	25ec4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25f66:	429c      	cmp	r4, r3
   25f68:	d0e3      	beq.n	25f32 <move_thread_to_end_of_prio_q+0x32>
   25f6a:	681b      	ldr	r3, [r3, #0]
   25f6c:	e7e0      	b.n	25f30 <move_thread_to_end_of_prio_q+0x30>
   25f6e:	bf00      	nop
   25f70:	20030d2c 	.word	0x20030d2c

00025f74 <ready_thread>:
{
   25f74:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25f76:	f990 300d 	ldrsb.w	r3, [r0, #13]
   25f7a:	7b42      	ldrb	r2, [r0, #13]
   25f7c:	2b00      	cmp	r3, #0
   25f7e:	db29      	blt.n	25fd4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25f80:	06d3      	lsls	r3, r2, #27
   25f82:	d127      	bne.n	25fd4 <ready_thread+0x60>
	return node->next != NULL;
   25f84:	6983      	ldr	r3, [r0, #24]
   25f86:	bb2b      	cbnz	r3, 25fd4 <ready_thread+0x60>
	return list->head == list;
   25f88:	4913      	ldr	r1, [pc, #76]	; (25fd8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   25f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25f8e:	7342      	strb	r2, [r0, #13]
   25f90:	460a      	mov	r2, r1
   25f92:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f96:	4294      	cmp	r4, r2
   25f98:	bf18      	it	ne
   25f9a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   25f9c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25f9e:	b923      	cbnz	r3, 25faa <ready_thread+0x36>
	node->prev = tail;
   25fa0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   25fa4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25fa6:	6248      	str	r0, [r1, #36]	; 0x24
}
   25fa8:	e00c      	b.n	25fc4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   25faa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25fae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25fb2:	42b5      	cmp	r5, r6
   25fb4:	d00a      	beq.n	25fcc <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25fb6:	42ae      	cmp	r6, r5
   25fb8:	dd08      	ble.n	25fcc <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   25fba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25fbc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   25fc0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   25fc2:	6058      	str	r0, [r3, #4]
		update_cache(0);
   25fc4:	2000      	movs	r0, #0
}
   25fc6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   25fc8:	f7ff bf7c 	b.w	25ec4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25fcc:	42a3      	cmp	r3, r4
   25fce:	d0e7      	beq.n	25fa0 <ready_thread+0x2c>
   25fd0:	681b      	ldr	r3, [r3, #0]
   25fd2:	e7e4      	b.n	25f9e <ready_thread+0x2a>
}
   25fd4:	bc70      	pop	{r4, r5, r6}
   25fd6:	4770      	bx	lr
   25fd8:	20030d2c 	.word	0x20030d2c

00025fdc <unready_thread>:
{
   25fdc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   25fde:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   25fe2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   25fe4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   25fe6:	7b43      	ldrb	r3, [r0, #13]
   25fe8:	da04      	bge.n	25ff4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25fee:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25ff0:	f00b f857 	bl	310a2 <sys_dlist_remove>
	update_cache(thread == _current);
   25ff4:	4b04      	ldr	r3, [pc, #16]	; (26008 <unready_thread+0x2c>)
   25ff6:	6898      	ldr	r0, [r3, #8]
   25ff8:	1a43      	subs	r3, r0, r1
   25ffa:	4258      	negs	r0, r3
   25ffc:	4158      	adcs	r0, r3
}
   25ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   26002:	f7ff bf5f 	b.w	25ec4 <update_cache>
   26006:	bf00      	nop
   26008:	20030d2c 	.word	0x20030d2c

0002600c <pend_locked>:
{
   2600c:	b570      	push	{r4, r5, r6, lr}
   2600e:	4615      	mov	r5, r2
   26010:	461c      	mov	r4, r3
   26012:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   26014:	f00b f882 	bl	3111c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26018:	f1b4 3fff 	cmp.w	r4, #4294967295
   2601c:	bf08      	it	eq
   2601e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   26022:	d008      	beq.n	26036 <pend_locked+0x2a>
   26024:	462a      	mov	r2, r5
   26026:	4623      	mov	r3, r4
   26028:	f106 0018 	add.w	r0, r6, #24
   2602c:	4902      	ldr	r1, [pc, #8]	; (26038 <pend_locked+0x2c>)
}
   2602e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26032:	f000 baf5 	b.w	26620 <z_add_timeout>
   26036:	bd70      	pop	{r4, r5, r6, pc}
   26038:	000310d9 	.word	0x000310d9

0002603c <k_sched_time_slice_set>:
{
   2603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2603e:	4604      	mov	r4, r0
   26040:	460d      	mov	r5, r1
	__asm__ volatile(
   26042:	f04f 0320 	mov.w	r3, #32
   26046:	f3ef 8711 	mrs	r7, BASEPRI
   2604a:	f383 8812 	msr	BASEPRI_MAX, r3
   2604e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   26052:	2600      	movs	r6, #0
   26054:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   26058:	f240 30e7 	movw	r0, #999	; 0x3e7
   2605c:	4631      	mov	r1, r6
   2605e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26062:	2300      	movs	r3, #0
   26064:	fbe4 010c 	umlal	r0, r1, r4, ip
   26068:	f7e2 ff6a 	bl	8f40 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2606c:	42b4      	cmp	r4, r6
   2606e:	dd02      	ble.n	26076 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   26070:	2802      	cmp	r0, #2
   26072:	bfb8      	it	lt
   26074:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26076:	4a07      	ldr	r2, [pc, #28]	; (26094 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   26078:	4b07      	ldr	r3, [pc, #28]	; (26098 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2607a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   2607c:	4a07      	ldr	r2, [pc, #28]	; (2609c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   2607e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   26080:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   26082:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   26084:	f7ff ff0a 	bl	25e9c <z_reset_time_slice>
	__asm__ volatile(
   26088:	f387 8811 	msr	BASEPRI, r7
   2608c:	f3bf 8f6f 	isb	sy
}
   26090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26092:	bf00      	nop
   26094:	20030d64 	.word	0x20030d64
   26098:	20030d2c 	.word	0x20030d2c
   2609c:	20030d60 	.word	0x20030d60

000260a0 <z_time_slice>:
{
   260a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   260a2:	f04f 0320 	mov.w	r3, #32
   260a6:	f3ef 8511 	mrs	r5, BASEPRI
   260aa:	f383 8812 	msr	BASEPRI_MAX, r3
   260ae:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   260b2:	4b17      	ldr	r3, [pc, #92]	; (26110 <z_time_slice+0x70>)
   260b4:	4a17      	ldr	r2, [pc, #92]	; (26114 <z_time_slice+0x74>)
   260b6:	689c      	ldr	r4, [r3, #8]
   260b8:	6811      	ldr	r1, [r2, #0]
   260ba:	428c      	cmp	r4, r1
   260bc:	d107      	bne.n	260ce <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   260be:	4620      	mov	r0, r4
   260c0:	f7ff feec 	bl	25e9c <z_reset_time_slice>
	__asm__ volatile(
   260c4:	f385 8811 	msr	BASEPRI, r5
   260c8:	f3bf 8f6f 	isb	sy
}
   260cc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   260ce:	2100      	movs	r1, #0
   260d0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   260d2:	4a11      	ldr	r2, [pc, #68]	; (26118 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   260d4:	6812      	ldr	r2, [r2, #0]
   260d6:	b1c2      	cbz	r2, 2610a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   260d8:	89e2      	ldrh	r2, [r4, #14]
   260da:	2a7f      	cmp	r2, #127	; 0x7f
   260dc:	d815      	bhi.n	2610a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   260de:	7b62      	ldrb	r2, [r4, #13]
   260e0:	06d2      	lsls	r2, r2, #27
   260e2:	d112      	bne.n	2610a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   260e4:	4a0d      	ldr	r2, [pc, #52]	; (2611c <z_time_slice+0x7c>)
   260e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   260ea:	6812      	ldr	r2, [r2, #0]
   260ec:	4291      	cmp	r1, r2
   260ee:	db0c      	blt.n	2610a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   260f0:	4a0b      	ldr	r2, [pc, #44]	; (26120 <z_time_slice+0x80>)
   260f2:	4294      	cmp	r4, r2
   260f4:	d009      	beq.n	2610a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   260f6:	691a      	ldr	r2, [r3, #16]
   260f8:	4282      	cmp	r2, r0
   260fa:	dc03      	bgt.n	26104 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   260fc:	4620      	mov	r0, r4
   260fe:	f7ff feff 	bl	25f00 <move_thread_to_end_of_prio_q>
   26102:	e7dc      	b.n	260be <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   26104:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   26106:	611a      	str	r2, [r3, #16]
   26108:	e7dc      	b.n	260c4 <z_time_slice+0x24>
   2610a:	2200      	movs	r2, #0
   2610c:	e7fb      	b.n	26106 <z_time_slice+0x66>
   2610e:	bf00      	nop
   26110:	20030d2c 	.word	0x20030d2c
   26114:	20030d5c 	.word	0x20030d5c
   26118:	20030d64 	.word	0x20030d64
   2611c:	20030d60 	.word	0x20030d60
   26120:	2000a308 	.word	0x2000a308

00026124 <z_pend_curr>:
{
   26124:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   26126:	480c      	ldr	r0, [pc, #48]	; (26158 <z_pend_curr+0x34>)
   26128:	4d0c      	ldr	r5, [pc, #48]	; (2615c <z_pend_curr+0x38>)
   2612a:	6886      	ldr	r6, [r0, #8]
{
   2612c:	460c      	mov	r4, r1
	pending_current = _current;
   2612e:	602e      	str	r6, [r5, #0]
{
   26130:	4611      	mov	r1, r2
   26132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   26136:	f04f 0620 	mov.w	r6, #32
   2613a:	f3ef 8511 	mrs	r5, BASEPRI
   2613e:	f386 8812 	msr	BASEPRI_MAX, r6
   26142:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   26146:	6880      	ldr	r0, [r0, #8]
   26148:	f7ff ff60 	bl	2600c <pend_locked>
	ret = arch_swap(key);
   2614c:	4620      	mov	r0, r4
}
   2614e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26152:	f7eb b81b 	b.w	1118c <arch_swap>
   26156:	bf00      	nop
   26158:	20030d2c 	.word	0x20030d2c
   2615c:	20030d5c 	.word	0x20030d5c

00026160 <z_set_prio>:
{
   26160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26162:	4604      	mov	r4, r0
   26164:	f04f 0320 	mov.w	r3, #32
   26168:	f3ef 8611 	mrs	r6, BASEPRI
   2616c:	f383 8812 	msr	BASEPRI_MAX, r3
   26170:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   26174:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   26176:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26178:	06da      	lsls	r2, r3, #27
   2617a:	d119      	bne.n	261b0 <z_set_prio+0x50>
	return node->next != NULL;
   2617c:	6985      	ldr	r5, [r0, #24]
   2617e:	b9bd      	cbnz	r5, 261b0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26184:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26186:	f00a ff8c 	bl	310a2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2618a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2618c:	4a16      	ldr	r2, [pc, #88]	; (261e8 <z_set_prio+0x88>)
   2618e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26192:	7343      	strb	r3, [r0, #13]
   26194:	4613      	mov	r3, r2
				thread->base.prio = prio;
   26196:	7381      	strb	r1, [r0, #14]
   26198:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2619c:	4298      	cmp	r0, r3
   2619e:	bf18      	it	ne
   261a0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   261a2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   261a4:	b95d      	cbnz	r5, 261be <z_set_prio+0x5e>
	node->prev = tail;
   261a6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   261aa:	6004      	str	r4, [r0, #0]
	list->tail = node;
   261ac:	6254      	str	r4, [r2, #36]	; 0x24
}
   261ae:	e011      	b.n	261d4 <z_set_prio+0x74>
   261b0:	2000      	movs	r0, #0
			thread->base.prio = prio;
   261b2:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   261b4:	f386 8811 	msr	BASEPRI, r6
   261b8:	f3bf 8f6f 	isb	sy
}
   261bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   261be:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   261c2:	42b9      	cmp	r1, r7
   261c4:	d00b      	beq.n	261de <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   261c6:	428f      	cmp	r7, r1
   261c8:	dd09      	ble.n	261de <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   261ca:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   261cc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   261d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   261d2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   261d4:	2001      	movs	r0, #1
   261d6:	f7ff fe75 	bl	25ec4 <update_cache>
   261da:	2001      	movs	r0, #1
   261dc:	e7ea      	b.n	261b4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   261de:	42a8      	cmp	r0, r5
   261e0:	d0e1      	beq.n	261a6 <z_set_prio+0x46>
   261e2:	682d      	ldr	r5, [r5, #0]
   261e4:	e7de      	b.n	261a4 <z_set_prio+0x44>
   261e6:	bf00      	nop
   261e8:	20030d2c 	.word	0x20030d2c

000261ec <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   261ec:	b949      	cbnz	r1, 26202 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   261ee:	f3ef 8005 	mrs	r0, IPSR
   261f2:	b930      	cbnz	r0, 26202 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   261f4:	4b05      	ldr	r3, [pc, #20]	; (2620c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   261f6:	69da      	ldr	r2, [r3, #28]
   261f8:	689b      	ldr	r3, [r3, #8]
   261fa:	429a      	cmp	r2, r3
   261fc:	d001      	beq.n	26202 <z_reschedule+0x16>
   261fe:	f7ea bfc5 	b.w	1118c <arch_swap>
   26202:	f381 8811 	msr	BASEPRI, r1
   26206:	f3bf 8f6f 	isb	sy
}
   2620a:	4770      	bx	lr
   2620c:	20030d2c 	.word	0x20030d2c

00026210 <z_sched_start>:
{
   26210:	b510      	push	{r4, lr}
	__asm__ volatile(
   26212:	f04f 0220 	mov.w	r2, #32
   26216:	f3ef 8411 	mrs	r4, BASEPRI
   2621a:	f382 8812 	msr	BASEPRI_MAX, r2
   2621e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   26222:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   26224:	0751      	lsls	r1, r2, #29
   26226:	d404      	bmi.n	26232 <z_sched_start+0x22>
	__asm__ volatile(
   26228:	f384 8811 	msr	BASEPRI, r4
   2622c:	f3bf 8f6f 	isb	sy
}
   26230:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26232:	f022 0204 	bic.w	r2, r2, #4
   26236:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   26238:	f7ff fe9c 	bl	25f74 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2623c:	4621      	mov	r1, r4
}
   2623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   26242:	4801      	ldr	r0, [pc, #4]	; (26248 <z_sched_start+0x38>)
   26244:	f7ff bfd2 	b.w	261ec <z_reschedule>
   26248:	20031e0e 	.word	0x20031e0e

0002624c <z_impl_k_thread_suspend>:
{
   2624c:	b570      	push	{r4, r5, r6, lr}
   2624e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26250:	3018      	adds	r0, #24
   26252:	f00b f83c 	bl	312ce <z_abort_timeout>
	__asm__ volatile(
   26256:	f04f 0320 	mov.w	r3, #32
   2625a:	f3ef 8611 	mrs	r6, BASEPRI
   2625e:	f383 8812 	msr	BASEPRI_MAX, r3
   26262:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   26266:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2626a:	7b63      	ldrb	r3, [r4, #13]
   2626c:	2a00      	cmp	r2, #0
   2626e:	da05      	bge.n	2627c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   26274:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26276:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26278:	f00a ff13 	bl	310a2 <sys_dlist_remove>
		update_cache(thread == _current);
   2627c:	4d0b      	ldr	r5, [pc, #44]	; (262ac <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2627e:	7b63      	ldrb	r3, [r4, #13]
   26280:	68a8      	ldr	r0, [r5, #8]
   26282:	f043 0310 	orr.w	r3, r3, #16
   26286:	7363      	strb	r3, [r4, #13]
   26288:	1b03      	subs	r3, r0, r4
   2628a:	4258      	negs	r0, r3
   2628c:	4158      	adcs	r0, r3
   2628e:	f7ff fe19 	bl	25ec4 <update_cache>
	__asm__ volatile(
   26292:	f386 8811 	msr	BASEPRI, r6
   26296:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2629a:	68ab      	ldr	r3, [r5, #8]
   2629c:	42a3      	cmp	r3, r4
   2629e:	d103      	bne.n	262a8 <z_impl_k_thread_suspend+0x5c>
}
   262a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   262a4:	f00a bfd5 	b.w	31252 <z_reschedule_unlocked>
}
   262a8:	bd70      	pop	{r4, r5, r6, pc}
   262aa:	bf00      	nop
   262ac:	20030d2c 	.word	0x20030d2c

000262b0 <k_sched_lock>:
	__asm__ volatile(
   262b0:	f04f 0320 	mov.w	r3, #32
   262b4:	f3ef 8111 	mrs	r1, BASEPRI
   262b8:	f383 8812 	msr	BASEPRI_MAX, r3
   262bc:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   262c0:	4b04      	ldr	r3, [pc, #16]	; (262d4 <k_sched_lock+0x24>)
   262c2:	689a      	ldr	r2, [r3, #8]
   262c4:	7bd3      	ldrb	r3, [r2, #15]
   262c6:	3b01      	subs	r3, #1
   262c8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   262ca:	f381 8811 	msr	BASEPRI, r1
   262ce:	f3bf 8f6f 	isb	sy
}
   262d2:	4770      	bx	lr
   262d4:	20030d2c 	.word	0x20030d2c

000262d8 <k_sched_unlock>:
{
   262d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   262da:	f04f 0320 	mov.w	r3, #32
   262de:	f3ef 8411 	mrs	r4, BASEPRI
   262e2:	f383 8812 	msr	BASEPRI_MAX, r3
   262e6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   262ea:	4b08      	ldr	r3, [pc, #32]	; (2630c <k_sched_unlock+0x34>)
		update_cache(0);
   262ec:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   262ee:	689a      	ldr	r2, [r3, #8]
   262f0:	7bd3      	ldrb	r3, [r2, #15]
   262f2:	3301      	adds	r3, #1
   262f4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   262f6:	f7ff fde5 	bl	25ec4 <update_cache>
	__asm__ volatile(
   262fa:	f384 8811 	msr	BASEPRI, r4
   262fe:	f3bf 8f6f 	isb	sy
}
   26302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   26306:	f00a bfa4 	b.w	31252 <z_reschedule_unlocked>
   2630a:	bf00      	nop
   2630c:	20030d2c 	.word	0x20030d2c

00026310 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   26310:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   26312:	4b04      	ldr	r3, [pc, #16]	; (26324 <z_sched_init+0x14>)
   26314:	4608      	mov	r0, r1
   26316:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2631a:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2631e:	f7ff be8d 	b.w	2603c <k_sched_time_slice_set>
   26322:	bf00      	nop
   26324:	20030d2c 	.word	0x20030d2c

00026328 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   26328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2632a:	f04f 0320 	mov.w	r3, #32
   2632e:	f3ef 8511 	mrs	r5, BASEPRI
   26332:	f383 8812 	msr	BASEPRI_MAX, r3
   26336:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2633a:	4919      	ldr	r1, [pc, #100]	; (263a0 <z_impl_k_yield+0x78>)
   2633c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2633e:	7b43      	ldrb	r3, [r0, #13]
   26340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26344:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26346:	f00a feac 	bl	310a2 <sys_dlist_remove>
	return list->head == list;
   2634a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   2634c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2634e:	7b5a      	ldrb	r2, [r3, #13]
   26350:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26354:	735a      	strb	r2, [r3, #13]
   26356:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   2635a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2635c:	4282      	cmp	r2, r0
   2635e:	bf08      	it	eq
   26360:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26362:	b922      	cbnz	r2, 2636e <z_impl_k_yield+0x46>
	node->prev = tail;
   26364:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   26368:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2636a:	624b      	str	r3, [r1, #36]	; 0x24
}
   2636c:	e00c      	b.n	26388 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2636e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   26372:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   26376:	42be      	cmp	r6, r7
   26378:	d00e      	beq.n	26398 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2637a:	42b7      	cmp	r7, r6
   2637c:	dd0c      	ble.n	26398 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2637e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   26380:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   26384:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   26386:	6053      	str	r3, [r2, #4]
	update_cache(1);
   26388:	2001      	movs	r0, #1
   2638a:	f7ff fd9b 	bl	25ec4 <update_cache>
   2638e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   26390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26394:	f7ea befa 	b.w	1118c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   26398:	42a2      	cmp	r2, r4
   2639a:	d0e3      	beq.n	26364 <z_impl_k_yield+0x3c>
   2639c:	6812      	ldr	r2, [r2, #0]
   2639e:	e7e0      	b.n	26362 <z_impl_k_yield+0x3a>
   263a0:	20030d2c 	.word	0x20030d2c

000263a4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   263a4:	ea50 0301 	orrs.w	r3, r0, r1
{
   263a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263ac:	4605      	mov	r5, r0
   263ae:	460e      	mov	r6, r1
	if (ticks == 0) {
   263b0:	d103      	bne.n	263ba <z_tick_sleep+0x16>
	z_impl_k_yield();
   263b2:	f7ff ffb9 	bl	26328 <z_impl_k_yield>
		k_yield();
		return 0;
   263b6:	2000      	movs	r0, #0
   263b8:	e02c      	b.n	26414 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   263ba:	1c83      	adds	r3, r0, #2
   263bc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   263c0:	db2a      	blt.n	26418 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   263c2:	f00a ffc6 	bl	31352 <sys_clock_tick_get_32>
   263c6:	182c      	adds	r4, r5, r0
   263c8:	f04f 0320 	mov.w	r3, #32
   263cc:	f3ef 8811 	mrs	r8, BASEPRI
   263d0:	f383 8812 	msr	BASEPRI_MAX, r3
   263d4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   263d8:	4f11      	ldr	r7, [pc, #68]	; (26420 <z_tick_sleep+0x7c>)
   263da:	4b12      	ldr	r3, [pc, #72]	; (26424 <z_tick_sleep+0x80>)
   263dc:	68b8      	ldr	r0, [r7, #8]
   263de:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   263e0:	f7ff fdfc 	bl	25fdc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   263e4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   263e6:	4910      	ldr	r1, [pc, #64]	; (26428 <z_tick_sleep+0x84>)
   263e8:	462a      	mov	r2, r5
   263ea:	4633      	mov	r3, r6
   263ec:	3018      	adds	r0, #24
   263ee:	f000 f917 	bl	26620 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   263f2:	68ba      	ldr	r2, [r7, #8]
   263f4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   263f6:	7b53      	ldrb	r3, [r2, #13]
   263f8:	f043 0310 	orr.w	r3, r3, #16
   263fc:	7353      	strb	r3, [r2, #13]
   263fe:	f7ea fec5 	bl	1118c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   26402:	f00a ffa6 	bl	31352 <sys_clock_tick_get_32>
   26406:	1a20      	subs	r0, r4, r0
   26408:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2640c:	2801      	cmp	r0, #1
   2640e:	f173 0300 	sbcs.w	r3, r3, #0
   26412:	dbd0      	blt.n	263b6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   26414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26418:	f06f 0401 	mvn.w	r4, #1
   2641c:	1a24      	subs	r4, r4, r0
   2641e:	e7d3      	b.n	263c8 <z_tick_sleep+0x24>
   26420:	20030d2c 	.word	0x20030d2c
   26424:	20030d5c 	.word	0x20030d5c
   26428:	000310d9 	.word	0x000310d9

0002642c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2642c:	f1b1 3fff 	cmp.w	r1, #4294967295
   26430:	bf08      	it	eq
   26432:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   26436:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26438:	d106      	bne.n	26448 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2643a:	4b08      	ldr	r3, [pc, #32]	; (2645c <z_impl_k_sleep+0x30>)
   2643c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2643e:	f7ff ff05 	bl	2624c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   26442:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   26446:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   26448:	f7ff ffac 	bl	263a4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   2644c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26450:	fb80 0303 	smull	r0, r3, r0, r3
   26454:	0bc0      	lsrs	r0, r0, #15
   26456:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2645a:	e7f4      	b.n	26446 <z_impl_k_sleep+0x1a>
   2645c:	20030d2c 	.word	0x20030d2c

00026460 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   26460:	4b01      	ldr	r3, [pc, #4]	; (26468 <z_impl_z_current_get+0x8>)
   26462:	6898      	ldr	r0, [r3, #8]
   26464:	4770      	bx	lr
   26466:	bf00      	nop
   26468:	20030d2c 	.word	0x20030d2c

0002646c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26470:	4604      	mov	r4, r0
   26472:	f04f 0320 	mov.w	r3, #32
   26476:	f3ef 8611 	mrs	r6, BASEPRI
   2647a:	f383 8812 	msr	BASEPRI_MAX, r3
   2647e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   26482:	7b03      	ldrb	r3, [r0, #12]
   26484:	07d9      	lsls	r1, r3, #31
   26486:	d50b      	bpl.n	264a0 <z_thread_abort+0x34>
	__asm__ volatile(
   26488:	f386 8811 	msr	BASEPRI, r6
   2648c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   26490:	4040      	eors	r0, r0
   26492:	f380 8811 	msr	BASEPRI, r0
   26496:	f04f 0004 	mov.w	r0, #4
   2649a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   264a0:	7b43      	ldrb	r3, [r0, #13]
   264a2:	071a      	lsls	r2, r3, #28
   264a4:	d504      	bpl.n	264b0 <z_thread_abort+0x44>
   264a6:	f386 8811 	msr	BASEPRI, r6
   264aa:	f3bf 8f6f 	isb	sy
   264ae:	e7f5      	b.n	2649c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   264b0:	f023 0220 	bic.w	r2, r3, #32
   264b4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   264b8:	09d2      	lsrs	r2, r2, #7
   264ba:	d120      	bne.n	264fe <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   264bc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   264be:	68a3      	ldr	r3, [r4, #8]
   264c0:	b113      	cbz	r3, 264c8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   264c2:	4620      	mov	r0, r4
   264c4:	f00a fdf5 	bl	310b2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   264c8:	f104 0018 	add.w	r0, r4, #24
   264cc:	f00a feff 	bl	312ce <z_abort_timeout>
   264d0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   264d4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   264d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   264da:	42bd      	cmp	r5, r7
   264dc:	d000      	beq.n	264e0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   264de:	b9b5      	cbnz	r5, 2650e <z_thread_abort+0xa2>
		update_cache(1);
   264e0:	2001      	movs	r0, #1
   264e2:	f7ff fcef 	bl	25ec4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   264e6:	4b10      	ldr	r3, [pc, #64]	; (26528 <z_thread_abort+0xbc>)
   264e8:	689b      	ldr	r3, [r3, #8]
   264ea:	42a3      	cmp	r3, r4
   264ec:	d1db      	bne.n	264a6 <z_thread_abort+0x3a>
   264ee:	f3ef 8305 	mrs	r3, IPSR
   264f2:	2b00      	cmp	r3, #0
   264f4:	d1d7      	bne.n	264a6 <z_thread_abort+0x3a>
   264f6:	4630      	mov	r0, r6
   264f8:	f7ea fe48 	bl	1118c <arch_swap>
	return ret;
   264fc:	e7d3      	b.n	264a6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   264fe:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   26502:	f043 0308 	orr.w	r3, r3, #8
   26506:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26508:	f00a fdcb 	bl	310a2 <sys_dlist_remove>
}
   2650c:	e7d7      	b.n	264be <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   2650e:	4628      	mov	r0, r5
   26510:	f00a fdcf 	bl	310b2 <unpend_thread_no_timeout>
   26514:	f105 0018 	add.w	r0, r5, #24
   26518:	f00a fed9 	bl	312ce <z_abort_timeout>
		ready_thread(thread);
   2651c:	4628      	mov	r0, r5
   2651e:	f8c5 809c 	str.w	r8, [r5, #156]	; 0x9c
   26522:	f7ff fd27 	bl	25f74 <ready_thread>
   26526:	e7d7      	b.n	264d8 <z_thread_abort+0x6c>
   26528:	20030d2c 	.word	0x20030d2c

0002652c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2652c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2652e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   26532:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26534:	e9cd 6700 	strd	r6, r7, [sp]
   26538:	f7ff fdf4 	bl	26124 <z_pend_curr>

	if (data != NULL) {
   2653c:	b11c      	cbz	r4, 26546 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2653e:	4b03      	ldr	r3, [pc, #12]	; (2654c <z_sched_wait+0x20>)
   26540:	689b      	ldr	r3, [r3, #8]
   26542:	695b      	ldr	r3, [r3, #20]
   26544:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   26546:	b002      	add	sp, #8
   26548:	bdd0      	pop	{r4, r6, r7, pc}
   2654a:	bf00      	nop
   2654c:	20030d2c 	.word	0x20030d2c

00026550 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   26550:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   26552:	4806      	ldr	r0, [pc, #24]	; (2656c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   26554:	4a06      	ldr	r2, [pc, #24]	; (26570 <z_data_copy+0x20>)
   26556:	4907      	ldr	r1, [pc, #28]	; (26574 <z_data_copy+0x24>)
   26558:	1a12      	subs	r2, r2, r0
   2655a:	f00a fb21 	bl	30ba0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2655e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   26562:	4a05      	ldr	r2, [pc, #20]	; (26578 <z_data_copy+0x28>)
   26564:	4905      	ldr	r1, [pc, #20]	; (2657c <z_data_copy+0x2c>)
   26566:	4806      	ldr	r0, [pc, #24]	; (26580 <z_data_copy+0x30>)
   26568:	f00a bb1a 	b.w	30ba0 <z_early_memcpy>
   2656c:	20008000 	.word	0x20008000
   26570:	20008fb4 	.word	0x20008fb4
   26574:	00038990 	.word	0x00038990
   26578:	00000000 	.word	0x00000000
   2657c:	00038990 	.word	0x00038990
   26580:	20008000 	.word	0x20008000

00026584 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26584:	4b03      	ldr	r3, [pc, #12]	; (26594 <elapsed+0x10>)
   26586:	681b      	ldr	r3, [r3, #0]
   26588:	b90b      	cbnz	r3, 2658e <elapsed+0xa>
   2658a:	f7fc bc6f 	b.w	22e6c <sys_clock_elapsed>
}
   2658e:	2000      	movs	r0, #0
   26590:	4770      	bx	lr
   26592:	bf00      	nop
   26594:	20030d68 	.word	0x20030d68

00026598 <next_timeout>:

static int32_t next_timeout(void)
{
   26598:	b510      	push	{r4, lr}
	return list->head == list;
   2659a:	4b11      	ldr	r3, [pc, #68]	; (265e0 <next_timeout+0x48>)
   2659c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2659e:	429c      	cmp	r4, r3
   265a0:	d10a      	bne.n	265b8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   265a2:	f7ff ffef 	bl	26584 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   265a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   265aa:	4b0e      	ldr	r3, [pc, #56]	; (265e4 <next_timeout+0x4c>)
   265ac:	691b      	ldr	r3, [r3, #16]
   265ae:	b113      	cbz	r3, 265b6 <next_timeout+0x1e>
   265b0:	4298      	cmp	r0, r3
   265b2:	bfa8      	it	ge
   265b4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   265b6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   265b8:	f7ff ffe4 	bl	26584 <elapsed>
	if ((to == NULL) ||
   265bc:	2c00      	cmp	r4, #0
   265be:	d0f2      	beq.n	265a6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   265c0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   265c4:	1a1b      	subs	r3, r3, r0
   265c6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   265ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   265ce:	f172 0100 	sbcs.w	r1, r2, #0
   265d2:	dae8      	bge.n	265a6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   265d4:	2a00      	cmp	r2, #0
   265d6:	bfac      	ite	ge
   265d8:	4618      	movge	r0, r3
   265da:	2000      	movlt	r0, #0
   265dc:	e7e5      	b.n	265aa <next_timeout+0x12>
   265de:	bf00      	nop
   265e0:	200087e8 	.word	0x200087e8
   265e4:	20030d2c 	.word	0x20030d2c

000265e8 <remove_timeout>:
{
   265e8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   265ea:	b170      	cbz	r0, 2660a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   265ec:	4b0b      	ldr	r3, [pc, #44]	; (2661c <remove_timeout+0x34>)
   265ee:	685b      	ldr	r3, [r3, #4]
   265f0:	4298      	cmp	r0, r3
   265f2:	d00a      	beq.n	2660a <remove_timeout+0x22>
   265f4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   265f6:	b143      	cbz	r3, 2660a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   265f8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   265fc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   26600:	1912      	adds	r2, r2, r4
   26602:	eb41 0105 	adc.w	r1, r1, r5
   26606:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2660a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   2660e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26610:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26612:	2300      	movs	r3, #0
	node->prev = NULL;
   26614:	e9c0 3300 	strd	r3, r3, [r0]
}
   26618:	bd30      	pop	{r4, r5, pc}
   2661a:	bf00      	nop
   2661c:	200087e8 	.word	0x200087e8

00026620 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26620:	f1b3 3fff 	cmp.w	r3, #4294967295
   26624:	bf08      	it	eq
   26626:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2662a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2662c:	4604      	mov	r4, r0
   2662e:	461d      	mov	r5, r3
   26630:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26632:	d061      	beq.n	266f8 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   26634:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   26636:	f04f 0320 	mov.w	r3, #32
   2663a:	f3ef 8711 	mrs	r7, BASEPRI
   2663e:	f383 8812 	msr	BASEPRI_MAX, r3
   26642:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   26646:	3201      	adds	r2, #1
   26648:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   2664c:	da24      	bge.n	26698 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2664e:	f06f 0301 	mvn.w	r3, #1
   26652:	492f      	ldr	r1, [pc, #188]	; (26710 <z_add_timeout+0xf0>)
   26654:	e9d1 2000 	ldrd	r2, r0, [r1]
   26658:	1a9b      	subs	r3, r3, r2
   2665a:	f04f 32ff 	mov.w	r2, #4294967295
   2665e:	eb62 0000 	sbc.w	r0, r2, r0
   26662:	1b9e      	subs	r6, r3, r6
   26664:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   26668:	2e01      	cmp	r6, #1
   2666a:	f170 0300 	sbcs.w	r3, r0, #0
   2666e:	da01      	bge.n	26674 <z_add_timeout+0x54>
   26670:	2601      	movs	r6, #1
   26672:	2000      	movs	r0, #0
   26674:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   26678:	4e26      	ldr	r6, [pc, #152]	; (26714 <z_add_timeout+0xf4>)
   2667a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2667e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26680:	45b4      	cmp	ip, r6
   26682:	bf08      	it	eq
   26684:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   26688:	f1bc 0f00 	cmp.w	ip, #0
   2668c:	d10d      	bne.n	266aa <z_add_timeout+0x8a>
	node->prev = tail;
   2668e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   26692:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26694:	6074      	str	r4, [r6, #4]
}
   26696:	e01c      	b.n	266d2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   26698:	f7ff ff74 	bl	26584 <elapsed>
   2669c:	3601      	adds	r6, #1
   2669e:	f145 0500 	adc.w	r5, r5, #0
   266a2:	1836      	adds	r6, r6, r0
   266a4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   266a8:	e7e4      	b.n	26674 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   266aa:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   266ae:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   266b2:	4293      	cmp	r3, r2
   266b4:	eb71 0e00 	sbcs.w	lr, r1, r0
   266b8:	da1f      	bge.n	266fa <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   266ba:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   266bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
   266c0:	eb60 0001 	sbc.w	r0, r0, r1
   266c4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   266c8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   266cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   266ce:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   266d2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   266d4:	42b3      	cmp	r3, r6
   266d6:	d00b      	beq.n	266f0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   266d8:	429c      	cmp	r4, r3
   266da:	d109      	bne.n	266f0 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   266dc:	f7ff ff5c 	bl	26598 <next_timeout>

			if (next_time == 0 ||
   266e0:	b118      	cbz	r0, 266ea <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   266e2:	4b0d      	ldr	r3, [pc, #52]	; (26718 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   266e4:	691b      	ldr	r3, [r3, #16]
   266e6:	4283      	cmp	r3, r0
   266e8:	d002      	beq.n	266f0 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   266ea:	2100      	movs	r1, #0
   266ec:	f7fc fb8e 	bl	22e0c <sys_clock_set_timeout>
	__asm__ volatile(
   266f0:	f387 8811 	msr	BASEPRI, r7
   266f4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   266f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   266fa:	1a9b      	subs	r3, r3, r2
   266fc:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   26700:	45ac      	cmp	ip, r5
   26702:	e9c4 3104 	strd	r3, r1, [r4, #16]
   26706:	d0c2      	beq.n	2668e <z_add_timeout+0x6e>
   26708:	f8dc c000 	ldr.w	ip, [ip]
   2670c:	e7bc      	b.n	26688 <z_add_timeout+0x68>
   2670e:	bf00      	nop
   26710:	2000a520 	.word	0x2000a520
   26714:	200087e8 	.word	0x200087e8
   26718:	20030d2c 	.word	0x20030d2c

0002671c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   2671c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26720:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   26722:	f7ff fcbd 	bl	260a0 <z_time_slice>
	__asm__ volatile(
   26726:	f04f 0320 	mov.w	r3, #32
   2672a:	f3ef 8611 	mrs	r6, BASEPRI
   2672e:	f383 8812 	msr	BASEPRI_MAX, r3
   26732:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   26736:	4f24      	ldr	r7, [pc, #144]	; (267c8 <sys_clock_announce+0xac>)
	return list->head == list;
   26738:	f8df 8090 	ldr.w	r8, [pc, #144]	; 267cc <sys_clock_announce+0xb0>
   2673c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   26740:	4a23      	ldr	r2, [pc, #140]	; (267d0 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26742:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   26744:	603c      	str	r4, [r7, #0]
	return list->head == list;
   26746:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   2674a:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2674e:	d00b      	beq.n	26768 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   26750:	b150      	cbz	r0, 26768 <sys_clock_announce+0x4c>
   26752:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   26756:	42ac      	cmp	r4, r5
   26758:	eb71 090c 	sbcs.w	r9, r1, ip
   2675c:	da17      	bge.n	2678e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2675e:	1b2d      	subs	r5, r5, r4
   26760:	eb6c 0c01 	sbc.w	ip, ip, r1
   26764:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   26768:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   2676a:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   2676e:	eb4e 0101 	adc.w	r1, lr, r1
   26772:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   26776:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   26778:	f7ff ff0e 	bl	26598 <next_timeout>
   2677c:	4621      	mov	r1, r4
   2677e:	f7fc fb45 	bl	22e0c <sys_clock_set_timeout>
	__asm__ volatile(
   26782:	f386 8811 	msr	BASEPRI, r6
   26786:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2678a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2678e:	18eb      	adds	r3, r5, r3
   26790:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   26794:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   26798:	2200      	movs	r2, #0
   2679a:	2300      	movs	r3, #0
   2679c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   267a0:	f7ff ff22 	bl	265e8 <remove_timeout>
   267a4:	f386 8811 	msr	BASEPRI, r6
   267a8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   267ac:	6883      	ldr	r3, [r0, #8]
   267ae:	4798      	blx	r3
	__asm__ volatile(
   267b0:	f04f 0320 	mov.w	r3, #32
   267b4:	f3ef 8611 	mrs	r6, BASEPRI
   267b8:	f383 8812 	msr	BASEPRI_MAX, r3
   267bc:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   267c0:	683c      	ldr	r4, [r7, #0]
   267c2:	1b64      	subs	r4, r4, r5
   267c4:	e7ba      	b.n	2673c <sys_clock_announce+0x20>
   267c6:	bf00      	nop
   267c8:	20030d68 	.word	0x20030d68
   267cc:	200087e8 	.word	0x200087e8
   267d0:	2000a520 	.word	0x2000a520

000267d4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   267d4:	b510      	push	{r4, lr}
   267d6:	f04f 0320 	mov.w	r3, #32
   267da:	f3ef 8411 	mrs	r4, BASEPRI
   267de:	f383 8812 	msr	BASEPRI_MAX, r3
   267e2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   267e6:	f7ff fecd 	bl	26584 <elapsed>
   267ea:	4603      	mov	r3, r0
   267ec:	4a05      	ldr	r2, [pc, #20]	; (26804 <sys_clock_tick_get+0x30>)
   267ee:	e9d2 0100 	ldrd	r0, r1, [r2]
   267f2:	1818      	adds	r0, r3, r0
   267f4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   267f8:	f384 8811 	msr	BASEPRI, r4
   267fc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   26800:	bd10      	pop	{r4, pc}
   26802:	bf00      	nop
   26804:	2000a520 	.word	0x2000a520

00026808 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   26808:	b570      	push	{r4, r5, r6, lr}
   2680a:	4604      	mov	r4, r0
	__asm__ volatile(
   2680c:	f04f 0320 	mov.w	r3, #32
   26810:	f3ef 8511 	mrs	r5, BASEPRI
   26814:	f383 8812 	msr	BASEPRI_MAX, r3
   26818:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2681c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   26820:	3301      	adds	r3, #1
   26822:	f142 0200 	adc.w	r2, r2, #0
   26826:	2b02      	cmp	r3, #2
   26828:	f172 0200 	sbcs.w	r2, r2, #0
   2682c:	d322      	bcc.n	26874 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   2682e:	f00a fd94 	bl	3135a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26832:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   26836:	3001      	adds	r0, #1
   26838:	f141 0100 	adc.w	r1, r1, #0
   2683c:	18c0      	adds	r0, r0, r3
   2683e:	eb41 0102 	adc.w	r1, r1, r2
   26842:	2801      	cmp	r0, #1
   26844:	f171 0100 	sbcs.w	r1, r1, #0
   26848:	db32      	blt.n	268b0 <z_timer_expiration_handler+0xa8>
   2684a:	f00a fd86 	bl	3135a <z_impl_k_uptime_ticks>
   2684e:	3001      	adds	r0, #1
   26850:	f141 0300 	adc.w	r3, r1, #0
   26854:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   26858:	1880      	adds	r0, r0, r2
   2685a:	f06f 0201 	mvn.w	r2, #1
   2685e:	eb43 0301 	adc.w	r3, r3, r1
   26862:	f04f 31ff 	mov.w	r1, #4294967295
   26866:	1a12      	subs	r2, r2, r0
   26868:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2686c:	4620      	mov	r0, r4
   2686e:	491a      	ldr	r1, [pc, #104]	; (268d8 <z_timer_expiration_handler+0xd0>)
   26870:	f7ff fed6 	bl	26620 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   26874:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26876:	3301      	adds	r3, #1
   26878:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2687a:	6a23      	ldr	r3, [r4, #32]
   2687c:	b173      	cbz	r3, 2689c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   2687e:	f385 8811 	msr	BASEPRI, r5
   26882:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   26886:	4620      	mov	r0, r4
   26888:	6a23      	ldr	r3, [r4, #32]
   2688a:	4798      	blx	r3
	__asm__ volatile(
   2688c:	f04f 0320 	mov.w	r3, #32
   26890:	f3ef 8511 	mrs	r5, BASEPRI
   26894:	f383 8812 	msr	BASEPRI_MAX, r3
   26898:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2689c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   268a0:	42a6      	cmp	r6, r4
   268a2:	d000      	beq.n	268a6 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   268a4:	b94e      	cbnz	r6, 268ba <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   268a6:	f385 8811 	msr	BASEPRI, r5
   268aa:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   268ae:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   268b0:	f06f 0201 	mvn.w	r2, #1
   268b4:	f04f 33ff 	mov.w	r3, #4294967295
   268b8:	e7d8      	b.n	2686c <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   268ba:	4630      	mov	r0, r6
   268bc:	f00a fc66 	bl	3118c <z_unpend_thread_no_timeout>
   268c0:	2300      	movs	r3, #0
   268c2:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
   268c6:	f385 8811 	msr	BASEPRI, r5
   268ca:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   268ce:	4630      	mov	r0, r6
}
   268d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   268d4:	f00a bc4a 	b.w	3116c <z_ready_thread>
   268d8:	00026809 	.word	0x00026809

000268dc <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   268dc:	f1b3 3fff 	cmp.w	r3, #4294967295
   268e0:	bf08      	it	eq
   268e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   268e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   268ea:	4619      	mov	r1, r3
   268ec:	4605      	mov	r5, r0
   268ee:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   268f2:	4614      	mov	r4, r2
   268f4:	4691      	mov	r9, r2
   268f6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   268f8:	d037      	beq.n	2696a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   268fa:	f1b0 3fff 	cmp.w	r0, #4294967295
   268fe:	bf08      	it	eq
   26900:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   26904:	4637      	mov	r7, r6
   26906:	4682      	mov	sl, r0
   26908:	d011      	beq.n	2692e <z_impl_k_timer_start+0x52>
   2690a:	ea50 0306 	orrs.w	r3, r0, r6
   2690e:	d00e      	beq.n	2692e <z_impl_k_timer_start+0x52>
   26910:	1c72      	adds	r2, r6, #1
   26912:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   26916:	db0a      	blt.n	2692e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   26918:	2e02      	cmp	r6, #2
   2691a:	4684      	mov	ip, r0
   2691c:	f170 0000 	sbcs.w	r0, r0, #0
   26920:	bfbc      	itt	lt
   26922:	2702      	movlt	r7, #2
   26924:	f04f 0c00 	movlt.w	ip, #0
   26928:	3f01      	subs	r7, #1
   2692a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2692e:	1c63      	adds	r3, r4, #1
   26930:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   26934:	db0a      	blt.n	2694c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   26936:	2c01      	cmp	r4, #1
   26938:	f171 0300 	sbcs.w	r3, r1, #0
   2693c:	4622      	mov	r2, r4
   2693e:	bfbc      	itt	lt
   26940:	2201      	movlt	r2, #1
   26942:	2100      	movlt	r1, #0
   26944:	f112 39ff 	adds.w	r9, r2, #4294967295
   26948:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   2694c:	4628      	mov	r0, r5
   2694e:	f00a fcbe 	bl	312ce <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   26952:	2300      	movs	r3, #0
	timer->period = period;
   26954:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   26958:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2695a:	464a      	mov	r2, r9
   2695c:	4643      	mov	r3, r8
   2695e:	4628      	mov	r0, r5
		     duration);
}
   26960:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26964:	4902      	ldr	r1, [pc, #8]	; (26970 <z_impl_k_timer_start+0x94>)
   26966:	f7ff be5b 	b.w	26620 <z_add_timeout>
}
   2696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2696e:	bf00      	nop
   26970:	00026809 	.word	0x00026809

00026974 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26974:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   26978:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2697a:	4b29      	ldr	r3, [pc, #164]	; (26a20 <z_impl_k_poll+0xac>)
{
   2697c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   2697e:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   26980:	2301      	movs	r3, #1
   26982:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   26986:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2698a:	ea52 0305 	orrs.w	r3, r2, r5
   2698e:	bf0c      	ite	eq
   26990:	2301      	moveq	r3, #1
   26992:	2300      	movne	r3, #0
   26994:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   26998:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2699a:	f00a fd60 	bl	3145e <register_events>
   2699e:	4681      	mov	r9, r0
	__asm__ volatile(
   269a0:	f04f 0320 	mov.w	r3, #32
   269a4:	f3ef 8a11 	mrs	sl, BASEPRI
   269a8:	f383 8812 	msr	BASEPRI_MAX, r3
   269ac:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   269b0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   269b4:	b964      	cbnz	r4, 269d0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   269b6:	4601      	mov	r1, r0
   269b8:	4652      	mov	r2, sl
   269ba:	4640      	mov	r0, r8
   269bc:	f00a fe20 	bl	31600 <clear_event_registrations>
	__asm__ volatile(
   269c0:	f38a 8811 	msr	BASEPRI, sl
   269c4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   269c8:	4620      	mov	r0, r4
   269ca:	b002      	add	sp, #8
   269cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   269d0:	2300      	movs	r3, #0
   269d2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   269d6:	ea56 0305 	orrs.w	r3, r6, r5
   269da:	d106      	bne.n	269ea <z_impl_k_poll+0x76>
   269dc:	f38a 8811 	msr	BASEPRI, sl
   269e0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   269e4:	f06f 040a 	mvn.w	r4, #10
   269e8:	e7ee      	b.n	269c8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   269ea:	4651      	mov	r1, sl
   269ec:	e9cd 6500 	strd	r6, r5, [sp]
   269f0:	4a0c      	ldr	r2, [pc, #48]	; (26a24 <z_impl_k_poll+0xb0>)
   269f2:	480d      	ldr	r0, [pc, #52]	; (26a28 <z_impl_k_poll+0xb4>)
   269f4:	f7ff fb96 	bl	26124 <z_pend_curr>
   269f8:	4604      	mov	r4, r0
	__asm__ volatile(
   269fa:	f04f 0320 	mov.w	r3, #32
   269fe:	f3ef 8511 	mrs	r5, BASEPRI
   26a02:	f383 8812 	msr	BASEPRI_MAX, r3
   26a06:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   26a0a:	462a      	mov	r2, r5
   26a0c:	4649      	mov	r1, r9
   26a0e:	4640      	mov	r0, r8
   26a10:	f00a fdf6 	bl	31600 <clear_event_registrations>
	__asm__ volatile(
   26a14:	f385 8811 	msr	BASEPRI, r5
   26a18:	f3bf 8f6f 	isb	sy
	return swap_rc;
   26a1c:	e7d4      	b.n	269c8 <z_impl_k_poll+0x54>
   26a1e:	bf00      	nop
   26a20:	20030d2c 	.word	0x20030d2c
   26a24:	200087f0 	.word	0x200087f0
   26a28:	20031e0e 	.word	0x20031e0e

00026a2c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   26a2c:	b538      	push	{r3, r4, r5, lr}
   26a2e:	4603      	mov	r3, r0
	__asm__ volatile(
   26a30:	f04f 0220 	mov.w	r2, #32
   26a34:	f3ef 8511 	mrs	r5, BASEPRI
   26a38:	f382 8812 	msr	BASEPRI_MAX, r2
   26a3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   26a40:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   26a42:	2101      	movs	r1, #1
   26a44:	6081      	str	r1, [r0, #8]
	return list->head == list;
   26a46:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   26a48:	4283      	cmp	r3, r0
   26a4a:	d106      	bne.n	26a5a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   26a4c:	f385 8811 	msr	BASEPRI, r5
   26a50:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   26a54:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   26a56:	4620      	mov	r0, r4
   26a58:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   26a5a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26a5e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26a60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26a62:	2300      	movs	r3, #0
	node->prev = NULL;
   26a64:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26a68:	f00a fd70 	bl	3154c <signal_poll_event>
	z_reschedule(&lock, key);
   26a6c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26a6e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26a70:	4801      	ldr	r0, [pc, #4]	; (26a78 <z_impl_k_poll_signal_raise+0x4c>)
   26a72:	f7ff fbbb 	bl	261ec <z_reschedule>
	return rc;
   26a76:	e7ee      	b.n	26a56 <z_impl_k_poll_signal_raise+0x2a>
   26a78:	20031e0e 	.word	0x20031e0e

00026a7c <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   26a7c:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   26a7e:	4601      	mov	r1, r0
   26a80:	4801      	ldr	r0, [pc, #4]	; (26a88 <k_aligned_alloc+0xc>)
   26a82:	f00a be0e 	b.w	316a2 <z_heap_aligned_alloc>
   26a86:	bf00      	nop
   26a88:	20008b8c 	.word	0x20008b8c

00026a8c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   26a8c:	4b01      	ldr	r3, [pc, #4]	; (26a94 <k_thread_system_pool_assign+0x8>)
   26a8e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
}
   26a92:	4770      	bx	lr
   26a94:	20008b8c 	.word	0x20008b8c

00026a98 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   26a98:	b538      	push	{r3, r4, r5, lr}
   26a9a:	4604      	mov	r4, r0
   26a9c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   26a9e:	f00a f933 	bl	30d08 <k_is_in_isr>
   26aa2:	b928      	cbnz	r0, 26ab0 <z_thread_aligned_alloc+0x18>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   26aa4:	4b06      	ldr	r3, [pc, #24]	; (26ac0 <z_thread_aligned_alloc+0x28>)
   26aa6:	689b      	ldr	r3, [r3, #8]
   26aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	}

	if (heap != NULL) {
   26aac:	b90b      	cbnz	r3, 26ab2 <z_thread_aligned_alloc+0x1a>
	} else {
		ret = NULL;
	}

	return ret;
}
   26aae:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   26ab0:	4b04      	ldr	r3, [pc, #16]	; (26ac4 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   26ab2:	462a      	mov	r2, r5
   26ab4:	4621      	mov	r1, r4
   26ab6:	4618      	mov	r0, r3
}
   26ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   26abc:	f00a bdf1 	b.w	316a2 <z_heap_aligned_alloc>
   26ac0:	20030d2c 	.word	0x20030d2c
   26ac4:	20008b8c 	.word	0x20008b8c

00026ac8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   26ac8:	4801      	ldr	r0, [pc, #4]	; (26ad0 <boot_banner+0x8>)
   26aca:	f003 bb4f 	b.w	2a16c <printk>
   26ace:	bf00      	nop
   26ad0:	00038575 	.word	0x00038575

00026ad4 <log>:
   26ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ad6:	4604      	mov	r4, r0
   26ad8:	460d      	mov	r5, r1
   26ada:	f7e2 fff5 	bl	9ac8 <__ieee754_log>
   26ade:	4b17      	ldr	r3, [pc, #92]	; (26b3c <log+0x68>)
   26ae0:	4606      	mov	r6, r0
   26ae2:	460f      	mov	r7, r1
   26ae4:	f993 3000 	ldrsb.w	r3, [r3]
   26ae8:	3301      	adds	r3, #1
   26aea:	d01a      	beq.n	26b22 <log+0x4e>
   26aec:	4622      	mov	r2, r4
   26aee:	462b      	mov	r3, r5
   26af0:	4620      	mov	r0, r4
   26af2:	4629      	mov	r1, r5
   26af4:	f7e2 fb04 	bl	9100 <__aeabi_dcmpun>
   26af8:	b998      	cbnz	r0, 26b22 <log+0x4e>
   26afa:	2200      	movs	r2, #0
   26afc:	2300      	movs	r3, #0
   26afe:	4620      	mov	r0, r4
   26b00:	4629      	mov	r1, r5
   26b02:	f7e2 fad3 	bl	90ac <__aeabi_dcmpgt>
   26b06:	b960      	cbnz	r0, 26b22 <log+0x4e>
   26b08:	2200      	movs	r2, #0
   26b0a:	2300      	movs	r3, #0
   26b0c:	4620      	mov	r0, r4
   26b0e:	4629      	mov	r1, r5
   26b10:	f7e2 faa4 	bl	905c <__aeabi_dcmpeq>
   26b14:	b140      	cbz	r0, 26b28 <log+0x54>
   26b16:	f004 feea 	bl	2b8ee <__errno>
   26b1a:	2600      	movs	r6, #0
   26b1c:	2322      	movs	r3, #34	; 0x22
   26b1e:	4f08      	ldr	r7, [pc, #32]	; (26b40 <log+0x6c>)
   26b20:	6003      	str	r3, [r0, #0]
   26b22:	4630      	mov	r0, r6
   26b24:	4639      	mov	r1, r7
   26b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26b28:	f004 fee1 	bl	2b8ee <__errno>
   26b2c:	2321      	movs	r3, #33	; 0x21
   26b2e:	6003      	str	r3, [r0, #0]
   26b30:	4804      	ldr	r0, [pc, #16]	; (26b44 <log+0x70>)
   26b32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26b36:	f000 b807 	b.w	26b48 <nan>
   26b3a:	bf00      	nop
   26b3c:	20008adc 	.word	0x20008adc
   26b40:	fff00000 	.word	0xfff00000
   26b44:	00036445 	.word	0x00036445

00026b48 <nan>:
   26b48:	2000      	movs	r0, #0
   26b4a:	4901      	ldr	r1, [pc, #4]	; (26b50 <nan+0x8>)
   26b4c:	4770      	bx	lr
   26b4e:	bf00      	nop
   26b50:	7ff80000 	.word	0x7ff80000

00026b54 <malloc>:
   26b54:	4b02      	ldr	r3, [pc, #8]	; (26b60 <malloc+0xc>)
   26b56:	4601      	mov	r1, r0
   26b58:	6818      	ldr	r0, [r3, #0]
   26b5a:	f000 bac5 	b.w	270e8 <_malloc_r>
   26b5e:	bf00      	nop
   26b60:	200087f8 	.word	0x200087f8

00026b64 <free>:
   26b64:	4b02      	ldr	r3, [pc, #8]	; (26b70 <free+0xc>)
   26b66:	4601      	mov	r1, r0
   26b68:	6818      	ldr	r0, [r3, #0]
   26b6a:	f000 ba73 	b.w	27054 <_free_r>
   26b6e:	bf00      	nop
   26b70:	200087f8 	.word	0x200087f8

00026b74 <validate_structure>:
   26b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26b76:	6801      	ldr	r1, [r0, #0]
   26b78:	4604      	mov	r4, r0
   26b7a:	293b      	cmp	r1, #59	; 0x3b
   26b7c:	d911      	bls.n	26ba2 <validate_structure+0x2e>
   26b7e:	223c      	movs	r2, #60	; 0x3c
   26b80:	4668      	mov	r0, sp
   26b82:	f00b f814 	bl	31bae <div>
   26b86:	9a01      	ldr	r2, [sp, #4]
   26b88:	6863      	ldr	r3, [r4, #4]
   26b8a:	9900      	ldr	r1, [sp, #0]
   26b8c:	2a00      	cmp	r2, #0
   26b8e:	440b      	add	r3, r1
   26b90:	bfb4      	ite	lt
   26b92:	323c      	addlt	r2, #60	; 0x3c
   26b94:	6022      	strge	r2, [r4, #0]
   26b96:	6063      	str	r3, [r4, #4]
   26b98:	bfbe      	ittt	lt
   26b9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26b9e:	6022      	strlt	r2, [r4, #0]
   26ba0:	6063      	strlt	r3, [r4, #4]
   26ba2:	6861      	ldr	r1, [r4, #4]
   26ba4:	293b      	cmp	r1, #59	; 0x3b
   26ba6:	d911      	bls.n	26bcc <validate_structure+0x58>
   26ba8:	223c      	movs	r2, #60	; 0x3c
   26baa:	4668      	mov	r0, sp
   26bac:	f00a ffff 	bl	31bae <div>
   26bb0:	9a01      	ldr	r2, [sp, #4]
   26bb2:	68a3      	ldr	r3, [r4, #8]
   26bb4:	9900      	ldr	r1, [sp, #0]
   26bb6:	2a00      	cmp	r2, #0
   26bb8:	440b      	add	r3, r1
   26bba:	bfb4      	ite	lt
   26bbc:	323c      	addlt	r2, #60	; 0x3c
   26bbe:	6062      	strge	r2, [r4, #4]
   26bc0:	60a3      	str	r3, [r4, #8]
   26bc2:	bfbe      	ittt	lt
   26bc4:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26bc8:	6062      	strlt	r2, [r4, #4]
   26bca:	60a3      	strlt	r3, [r4, #8]
   26bcc:	68a1      	ldr	r1, [r4, #8]
   26bce:	2917      	cmp	r1, #23
   26bd0:	d911      	bls.n	26bf6 <validate_structure+0x82>
   26bd2:	2218      	movs	r2, #24
   26bd4:	4668      	mov	r0, sp
   26bd6:	f00a ffea 	bl	31bae <div>
   26bda:	9a01      	ldr	r2, [sp, #4]
   26bdc:	68e3      	ldr	r3, [r4, #12]
   26bde:	9900      	ldr	r1, [sp, #0]
   26be0:	2a00      	cmp	r2, #0
   26be2:	440b      	add	r3, r1
   26be4:	bfb4      	ite	lt
   26be6:	3218      	addlt	r2, #24
   26be8:	60a2      	strge	r2, [r4, #8]
   26bea:	60e3      	str	r3, [r4, #12]
   26bec:	bfbe      	ittt	lt
   26bee:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26bf2:	60a2      	strlt	r2, [r4, #8]
   26bf4:	60e3      	strlt	r3, [r4, #12]
   26bf6:	6921      	ldr	r1, [r4, #16]
   26bf8:	290b      	cmp	r1, #11
   26bfa:	d911      	bls.n	26c20 <validate_structure+0xac>
   26bfc:	220c      	movs	r2, #12
   26bfe:	4668      	mov	r0, sp
   26c00:	f00a ffd5 	bl	31bae <div>
   26c04:	9a01      	ldr	r2, [sp, #4]
   26c06:	6963      	ldr	r3, [r4, #20]
   26c08:	9900      	ldr	r1, [sp, #0]
   26c0a:	2a00      	cmp	r2, #0
   26c0c:	440b      	add	r3, r1
   26c0e:	bfb4      	ite	lt
   26c10:	320c      	addlt	r2, #12
   26c12:	6122      	strge	r2, [r4, #16]
   26c14:	6163      	str	r3, [r4, #20]
   26c16:	bfbe      	ittt	lt
   26c18:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26c1c:	6122      	strlt	r2, [r4, #16]
   26c1e:	6163      	strlt	r3, [r4, #20]
   26c20:	6963      	ldr	r3, [r4, #20]
   26c22:	079a      	lsls	r2, r3, #30
   26c24:	d11c      	bne.n	26c60 <validate_structure+0xec>
   26c26:	2164      	movs	r1, #100	; 0x64
   26c28:	fb93 f2f1 	sdiv	r2, r3, r1
   26c2c:	fb01 3212 	mls	r2, r1, r2, r3
   26c30:	b9c2      	cbnz	r2, 26c64 <validate_structure+0xf0>
   26c32:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   26c36:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26c3a:	fb93 f1f2 	sdiv	r1, r3, r2
   26c3e:	fb02 3311 	mls	r3, r2, r1, r3
   26c42:	2b00      	cmp	r3, #0
   26c44:	bf14      	ite	ne
   26c46:	231c      	movne	r3, #28
   26c48:	231d      	moveq	r3, #29
   26c4a:	68e2      	ldr	r2, [r4, #12]
   26c4c:	2a00      	cmp	r2, #0
   26c4e:	dc0b      	bgt.n	26c68 <validate_structure+0xf4>
   26c50:	200b      	movs	r0, #11
   26c52:	2164      	movs	r1, #100	; 0x64
   26c54:	4d33      	ldr	r5, [pc, #204]	; (26d24 <validate_structure+0x1b0>)
   26c56:	68e6      	ldr	r6, [r4, #12]
   26c58:	2e00      	cmp	r6, #0
   26c5a:	dd11      	ble.n	26c80 <validate_structure+0x10c>
   26c5c:	b003      	add	sp, #12
   26c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26c60:	231c      	movs	r3, #28
   26c62:	e7f2      	b.n	26c4a <validate_structure+0xd6>
   26c64:	231d      	movs	r3, #29
   26c66:	e7f0      	b.n	26c4a <validate_structure+0xd6>
   26c68:	482e      	ldr	r0, [pc, #184]	; (26d24 <validate_structure+0x1b0>)
   26c6a:	2502      	movs	r5, #2
   26c6c:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   26c70:	2901      	cmp	r1, #1
   26c72:	d132      	bne.n	26cda <validate_structure+0x166>
   26c74:	4293      	cmp	r3, r2
   26c76:	daf1      	bge.n	26c5c <validate_structure+0xe8>
   26c78:	1ad2      	subs	r2, r2, r3
   26c7a:	e9c4 2503 	strd	r2, r5, [r4, #12]
   26c7e:	e7f5      	b.n	26c6c <validate_structure+0xf8>
   26c80:	6922      	ldr	r2, [r4, #16]
   26c82:	3a01      	subs	r2, #1
   26c84:	6122      	str	r2, [r4, #16]
   26c86:	3201      	adds	r2, #1
   26c88:	d116      	bne.n	26cb8 <validate_structure+0x144>
   26c8a:	6963      	ldr	r3, [r4, #20]
   26c8c:	1e5a      	subs	r2, r3, #1
   26c8e:	0797      	lsls	r7, r2, #30
   26c90:	e9c4 0204 	strd	r0, r2, [r4, #16]
   26c94:	d119      	bne.n	26cca <validate_structure+0x156>
   26c96:	fb92 f7f1 	sdiv	r7, r2, r1
   26c9a:	fb01 2217 	mls	r2, r1, r7, r2
   26c9e:	b9b2      	cbnz	r2, 26cce <validate_structure+0x15a>
   26ca0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   26ca4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26ca8:	fb93 f7f2 	sdiv	r7, r3, r2
   26cac:	fb02 3317 	mls	r3, r2, r7, r3
   26cb0:	2b00      	cmp	r3, #0
   26cb2:	bf14      	ite	ne
   26cb4:	231c      	movne	r3, #28
   26cb6:	231d      	moveq	r3, #29
   26cb8:	6922      	ldr	r2, [r4, #16]
   26cba:	2a01      	cmp	r2, #1
   26cbc:	bf14      	ite	ne
   26cbe:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
   26cc2:	461a      	moveq	r2, r3
   26cc4:	4432      	add	r2, r6
   26cc6:	60e2      	str	r2, [r4, #12]
   26cc8:	e7c5      	b.n	26c56 <validate_structure+0xe2>
   26cca:	231c      	movs	r3, #28
   26ccc:	e7f4      	b.n	26cb8 <validate_structure+0x144>
   26cce:	231d      	movs	r3, #29
   26cd0:	e7f2      	b.n	26cb8 <validate_structure+0x144>
   26cd2:	231c      	movs	r3, #28
   26cd4:	e7ca      	b.n	26c6c <validate_structure+0xf8>
   26cd6:	231d      	movs	r3, #29
   26cd8:	e7c8      	b.n	26c6c <validate_structure+0xf8>
   26cda:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   26cde:	42b2      	cmp	r2, r6
   26ce0:	ddbc      	ble.n	26c5c <validate_structure+0xe8>
   26ce2:	3101      	adds	r1, #1
   26ce4:	1b92      	subs	r2, r2, r6
   26ce6:	290c      	cmp	r1, #12
   26ce8:	60e2      	str	r2, [r4, #12]
   26cea:	6121      	str	r1, [r4, #16]
   26cec:	d1be      	bne.n	26c6c <validate_structure+0xf8>
   26cee:	6963      	ldr	r3, [r4, #20]
   26cf0:	2100      	movs	r1, #0
   26cf2:	1c5a      	adds	r2, r3, #1
   26cf4:	6121      	str	r1, [r4, #16]
   26cf6:	0791      	lsls	r1, r2, #30
   26cf8:	6162      	str	r2, [r4, #20]
   26cfa:	d1ea      	bne.n	26cd2 <validate_structure+0x15e>
   26cfc:	2164      	movs	r1, #100	; 0x64
   26cfe:	fb92 f6f1 	sdiv	r6, r2, r1
   26d02:	fb01 2216 	mls	r2, r1, r6, r2
   26d06:	2a00      	cmp	r2, #0
   26d08:	d1e5      	bne.n	26cd6 <validate_structure+0x162>
   26d0a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   26d0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26d12:	fb93 f1f2 	sdiv	r1, r3, r2
   26d16:	fb02 3311 	mls	r3, r2, r1, r3
   26d1a:	2b00      	cmp	r3, #0
   26d1c:	bf14      	ite	ne
   26d1e:	231c      	movne	r3, #28
   26d20:	231d      	moveq	r3, #29
   26d22:	e7a3      	b.n	26c6c <validate_structure+0xf8>
   26d24:	00034100 	.word	0x00034100

00026d28 <mktime>:
   26d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d2c:	4607      	mov	r7, r0
   26d2e:	f001 fcd7 	bl	286e0 <__gettzinfo>
   26d32:	4682      	mov	sl, r0
   26d34:	4638      	mov	r0, r7
   26d36:	f7ff ff1d 	bl	26b74 <validate_structure>
   26d3a:	223c      	movs	r2, #60	; 0x3c
   26d3c:	697d      	ldr	r5, [r7, #20]
   26d3e:	e9d7 4300 	ldrd	r4, r3, [r7]
   26d42:	fb02 4403 	mla	r4, r2, r3, r4
   26d46:	68bb      	ldr	r3, [r7, #8]
   26d48:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   26d4c:	fb02 4403 	mla	r4, r2, r3, r4
   26d50:	4abd      	ldr	r2, [pc, #756]	; (27048 <mktime+0x320>)
   26d52:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
   26d56:	3e01      	subs	r6, #1
   26d58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   26d5c:	2b01      	cmp	r3, #1
   26d5e:	4416      	add	r6, r2
   26d60:	dd11      	ble.n	26d86 <mktime+0x5e>
   26d62:	07a9      	lsls	r1, r5, #30
   26d64:	d10f      	bne.n	26d86 <mktime+0x5e>
   26d66:	2264      	movs	r2, #100	; 0x64
   26d68:	fb95 f3f2 	sdiv	r3, r5, r2
   26d6c:	fb02 5313 	mls	r3, r2, r3, r5
   26d70:	b943      	cbnz	r3, 26d84 <mktime+0x5c>
   26d72:	f205 736c 	addw	r3, r5, #1900	; 0x76c
   26d76:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26d7a:	fb93 f1f2 	sdiv	r1, r3, r2
   26d7e:	fb02 3311 	mls	r3, r2, r1, r3
   26d82:	b903      	cbnz	r3, 26d86 <mktime+0x5e>
   26d84:	3601      	adds	r6, #1
   26d86:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
   26d8a:	f644 6220 	movw	r2, #20000	; 0x4e20
   26d8e:	61fe      	str	r6, [r7, #28]
   26d90:	3310      	adds	r3, #16
   26d92:	4293      	cmp	r3, r2
   26d94:	f200 8154 	bhi.w	27040 <mktime+0x318>
   26d98:	2d46      	cmp	r5, #70	; 0x46
   26d9a:	f340 809f 	ble.w	26edc <mktime+0x1b4>
   26d9e:	2346      	movs	r3, #70	; 0x46
   26da0:	f240 1c6d 	movw	ip, #365	; 0x16d
   26da4:	2164      	movs	r1, #100	; 0x64
   26da6:	f44f 70c8 	mov.w	r0, #400	; 0x190
   26daa:	079a      	lsls	r2, r3, #30
   26dac:	f040 8090 	bne.w	26ed0 <mktime+0x1a8>
   26db0:	fb93 f2f1 	sdiv	r2, r3, r1
   26db4:	fb01 3212 	mls	r2, r1, r2, r3
   26db8:	2a00      	cmp	r2, #0
   26dba:	f040 808c 	bne.w	26ed6 <mktime+0x1ae>
   26dbe:	f203 726c 	addw	r2, r3, #1900	; 0x76c
   26dc2:	fb92 fef0 	sdiv	lr, r2, r0
   26dc6:	fb00 221e 	mls	r2, r0, lr, r2
   26dca:	2a00      	cmp	r2, #0
   26dcc:	bf14      	ite	ne
   26dce:	4662      	movne	r2, ip
   26dd0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   26dd4:	3301      	adds	r3, #1
   26dd6:	4416      	add	r6, r2
   26dd8:	429d      	cmp	r5, r3
   26dda:	d1e6      	bne.n	26daa <mktime+0x82>
   26ddc:	4b9b      	ldr	r3, [pc, #620]	; (2704c <mktime+0x324>)
   26dde:	ea4f 78e4 	mov.w	r8, r4, asr #31
   26de2:	fbc6 4803 	smlal	r4, r8, r6, r3
   26de6:	f000 ff51 	bl	27c8c <__tz_lock>
   26dea:	f000 ff5b 	bl	27ca4 <_tzset_unlocked>
   26dee:	4b98      	ldr	r3, [pc, #608]	; (27050 <mktime+0x328>)
   26df0:	681b      	ldr	r3, [r3, #0]
   26df2:	2b00      	cmp	r3, #0
   26df4:	f000 811a 	beq.w	2702c <mktime+0x304>
   26df8:	6978      	ldr	r0, [r7, #20]
   26dfa:	f8da 3004 	ldr.w	r3, [sl, #4]
   26dfe:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   26e02:	f8d7 9020 	ldr.w	r9, [r7, #32]
   26e06:	4283      	cmp	r3, r0
   26e08:	f040 80ab 	bne.w	26f62 <mktime+0x23a>
   26e0c:	f8da 0050 	ldr.w	r0, [sl, #80]	; 0x50
   26e10:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28
   26e14:	e9da 2308 	ldrd	r2, r3, [sl, #32]
   26e18:	e9da 1b12 	ldrd	r1, fp, [sl, #72]	; 0x48
   26e1c:	1a12      	subs	r2, r2, r0
   26e1e:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
   26e22:	ebb1 0e0c 	subs.w	lr, r1, ip
   26e26:	f8cd e000 	str.w	lr, [sp]
   26e2a:	eb6b 7eec 	sbc.w	lr, fp, ip, asr #31
   26e2e:	f8cd e004 	str.w	lr, [sp, #4]
   26e32:	f8dd e000 	ldr.w	lr, [sp]
   26e36:	4574      	cmp	r4, lr
   26e38:	f8dd e004 	ldr.w	lr, [sp, #4]
   26e3c:	eb78 0e0e 	sbcs.w	lr, r8, lr
   26e40:	f280 80b5 	bge.w	26fae <mktime+0x286>
   26e44:	f8da 1000 	ldr.w	r1, [sl]
   26e48:	b121      	cbz	r1, 26e54 <mktime+0x12c>
   26e4a:	4294      	cmp	r4, r2
   26e4c:	eb78 0303 	sbcs.w	r3, r8, r3
   26e50:	f2c0 80bb 	blt.w	26fca <mktime+0x2a2>
   26e54:	f1b9 0f00 	cmp.w	r9, #0
   26e58:	f040 8090 	bne.w	26f7c <mktime+0x254>
   26e5c:	ebac 0000 	sub.w	r0, ip, r0
   26e60:	f04f 0901 	mov.w	r9, #1
   26e64:	683b      	ldr	r3, [r7, #0]
   26e66:	1904      	adds	r4, r0, r4
   26e68:	f8d7 b00c 	ldr.w	fp, [r7, #12]
   26e6c:	4403      	add	r3, r0
   26e6e:	eb48 78e0 	adc.w	r8, r8, r0, asr #31
   26e72:	4638      	mov	r0, r7
   26e74:	603b      	str	r3, [r7, #0]
   26e76:	f7ff fe7d 	bl	26b74 <validate_structure>
   26e7a:	68fa      	ldr	r2, [r7, #12]
   26e7c:	ebb2 020b 	subs.w	r2, r2, fp
   26e80:	d079      	beq.n	26f76 <mktime+0x24e>
   26e82:	2a01      	cmp	r2, #1
   26e84:	f300 80a9 	bgt.w	26fda <mktime+0x2b2>
   26e88:	1c93      	adds	r3, r2, #2
   26e8a:	bfd8      	it	le
   26e8c:	2201      	movle	r2, #1
   26e8e:	69fb      	ldr	r3, [r7, #28]
   26e90:	18d3      	adds	r3, r2, r3
   26e92:	f140 80ab 	bpl.w	26fec <mktime+0x2c4>
   26e96:	1e6b      	subs	r3, r5, #1
   26e98:	0798      	lsls	r0, r3, #30
   26e9a:	f040 80a1 	bne.w	26fe0 <mktime+0x2b8>
   26e9e:	2164      	movs	r1, #100	; 0x64
   26ea0:	fb93 f0f1 	sdiv	r0, r3, r1
   26ea4:	fb01 3310 	mls	r3, r1, r0, r3
   26ea8:	2b00      	cmp	r3, #0
   26eaa:	f040 809c 	bne.w	26fe6 <mktime+0x2be>
   26eae:	f44f 73c8 	mov.w	r3, #400	; 0x190
   26eb2:	f205 756b 	addw	r5, r5, #1899	; 0x76b
   26eb6:	fb95 f1f3 	sdiv	r1, r5, r3
   26eba:	fb03 5511 	mls	r5, r3, r1, r5
   26ebe:	f240 136d 	movw	r3, #365	; 0x16d
   26ec2:	2d00      	cmp	r5, #0
   26ec4:	bf18      	it	ne
   26ec6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   26eca:	4416      	add	r6, r2
   26ecc:	61fb      	str	r3, [r7, #28]
   26ece:	e052      	b.n	26f76 <mktime+0x24e>
   26ed0:	f240 126d 	movw	r2, #365	; 0x16d
   26ed4:	e77e      	b.n	26dd4 <mktime+0xac>
   26ed6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   26eda:	e77b      	b.n	26dd4 <mktime+0xac>
   26edc:	f43f af7e 	beq.w	26ddc <mktime+0xb4>
   26ee0:	2345      	movs	r3, #69	; 0x45
   26ee2:	f240 1c6d 	movw	ip, #365	; 0x16d
   26ee6:	2164      	movs	r1, #100	; 0x64
   26ee8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   26eec:	e012      	b.n	26f14 <mktime+0x1ec>
   26eee:	bb62      	cbnz	r2, 26f4a <mktime+0x222>
   26ef0:	fb93 f2f1 	sdiv	r2, r3, r1
   26ef4:	fb01 3212 	mls	r2, r1, r2, r3
   26ef8:	bb52      	cbnz	r2, 26f50 <mktime+0x228>
   26efa:	f203 726c 	addw	r2, r3, #1900	; 0x76c
   26efe:	fb92 fef0 	sdiv	lr, r2, r0
   26f02:	fb00 221e 	mls	r2, r0, lr, r2
   26f06:	2a00      	cmp	r2, #0
   26f08:	bf14      	ite	ne
   26f0a:	4662      	movne	r2, ip
   26f0c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   26f10:	1ab6      	subs	r6, r6, r2
   26f12:	3b01      	subs	r3, #1
   26f14:	429d      	cmp	r5, r3
   26f16:	f003 0203 	and.w	r2, r3, #3
   26f1a:	dbe8      	blt.n	26eee <mktime+0x1c6>
   26f1c:	b9da      	cbnz	r2, 26f56 <mktime+0x22e>
   26f1e:	2264      	movs	r2, #100	; 0x64
   26f20:	fb95 f3f2 	sdiv	r3, r5, r2
   26f24:	fb02 5313 	mls	r3, r2, r3, r5
   26f28:	b9c3      	cbnz	r3, 26f5c <mktime+0x234>
   26f2a:	f205 736c 	addw	r3, r5, #1900	; 0x76c
   26f2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26f32:	fb93 f1f2 	sdiv	r1, r3, r2
   26f36:	fb02 3311 	mls	r3, r2, r1, r3
   26f3a:	2b00      	cmp	r3, #0
   26f3c:	f240 136d 	movw	r3, #365	; 0x16d
   26f40:	bf08      	it	eq
   26f42:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   26f46:	1af6      	subs	r6, r6, r3
   26f48:	e748      	b.n	26ddc <mktime+0xb4>
   26f4a:	f240 126d 	movw	r2, #365	; 0x16d
   26f4e:	e7df      	b.n	26f10 <mktime+0x1e8>
   26f50:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   26f54:	e7dc      	b.n	26f10 <mktime+0x1e8>
   26f56:	f240 136d 	movw	r3, #365	; 0x16d
   26f5a:	e7f4      	b.n	26f46 <mktime+0x21e>
   26f5c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   26f60:	e7f1      	b.n	26f46 <mktime+0x21e>
   26f62:	f000 fdeb 	bl	27b3c <__tzcalc_limits>
   26f66:	2800      	cmp	r0, #0
   26f68:	f47f af50 	bne.w	26e0c <mktime+0xe4>
   26f6c:	f1b9 0f01 	cmp.w	r9, #1
   26f70:	bfa8      	it	ge
   26f72:	f04f 0901 	movge.w	r9, #1
   26f76:	f1b9 0f01 	cmp.w	r9, #1
   26f7a:	d159      	bne.n	27030 <mktime+0x308>
   26f7c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
   26f80:	f04f 0901 	mov.w	r9, #1
   26f84:	191c      	adds	r4, r3, r4
   26f86:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
   26f8a:	f000 fe85 	bl	27c98 <__tz_unlock>
   26f8e:	3604      	adds	r6, #4
   26f90:	2307      	movs	r3, #7
   26f92:	fb96 f3f3 	sdiv	r3, r6, r3
   26f96:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   26f9a:	1af6      	subs	r6, r6, r3
   26f9c:	d44e      	bmi.n	2703c <mktime+0x314>
   26f9e:	f8c7 9020 	str.w	r9, [r7, #32]
   26fa2:	61be      	str	r6, [r7, #24]
   26fa4:	4620      	mov	r0, r4
   26fa6:	4641      	mov	r1, r8
   26fa8:	b003      	add	sp, #12
   26faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26fae:	1a09      	subs	r1, r1, r0
   26fb0:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   26fb4:	eb6b 0e0e 	sbc.w	lr, fp, lr
   26fb8:	428c      	cmp	r4, r1
   26fba:	eb78 0e0e 	sbcs.w	lr, r8, lr
   26fbe:	dbd5      	blt.n	26f6c <mktime+0x244>
   26fc0:	f8da 1000 	ldr.w	r1, [sl]
   26fc4:	2900      	cmp	r1, #0
   26fc6:	f43f af40 	beq.w	26e4a <mktime+0x122>
   26fca:	f1b9 0f00 	cmp.w	r9, #0
   26fce:	dd2d      	ble.n	2702c <mktime+0x304>
   26fd0:	eba0 000c 	sub.w	r0, r0, ip
   26fd4:	f04f 0900 	mov.w	r9, #0
   26fd8:	e744      	b.n	26e64 <mktime+0x13c>
   26fda:	f04f 32ff 	mov.w	r2, #4294967295
   26fde:	e756      	b.n	26e8e <mktime+0x166>
   26fe0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   26fe4:	e771      	b.n	26eca <mktime+0x1a2>
   26fe6:	f240 136d 	movw	r3, #365	; 0x16d
   26fea:	e76e      	b.n	26eca <mktime+0x1a2>
   26fec:	07a9      	lsls	r1, r5, #30
   26fee:	d117      	bne.n	27020 <mktime+0x2f8>
   26ff0:	2064      	movs	r0, #100	; 0x64
   26ff2:	fb95 f1f0 	sdiv	r1, r5, r0
   26ff6:	fb00 5111 	mls	r1, r0, r1, r5
   26ffa:	b9a1      	cbnz	r1, 27026 <mktime+0x2fe>
   26ffc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   27000:	f205 756c 	addw	r5, r5, #1900	; 0x76c
   27004:	fb95 f0f1 	sdiv	r0, r5, r1
   27008:	fb01 5510 	mls	r5, r1, r0, r5
   2700c:	f240 116d 	movw	r1, #365	; 0x16d
   27010:	2d00      	cmp	r5, #0
   27012:	bf08      	it	eq
   27014:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
   27018:	428b      	cmp	r3, r1
   2701a:	bfa8      	it	ge
   2701c:	1a5b      	subge	r3, r3, r1
   2701e:	e754      	b.n	26eca <mktime+0x1a2>
   27020:	f240 116d 	movw	r1, #365	; 0x16d
   27024:	e7f8      	b.n	27018 <mktime+0x2f0>
   27026:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   2702a:	e7f5      	b.n	27018 <mktime+0x2f0>
   2702c:	f04f 0900 	mov.w	r9, #0
   27030:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   27034:	191c      	adds	r4, r3, r4
   27036:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
   2703a:	e7a6      	b.n	26f8a <mktime+0x262>
   2703c:	3607      	adds	r6, #7
   2703e:	e7ae      	b.n	26f9e <mktime+0x276>
   27040:	f04f 34ff 	mov.w	r4, #4294967295
   27044:	46a0      	mov	r8, r4
   27046:	e7ad      	b.n	26fa4 <mktime+0x27c>
   27048:	000340d0 	.word	0x000340d0
   2704c:	00015180 	.word	0x00015180
   27050:	20030d7c 	.word	0x20030d7c

00027054 <_free_r>:
   27054:	b538      	push	{r3, r4, r5, lr}
   27056:	4605      	mov	r5, r0
   27058:	2900      	cmp	r1, #0
   2705a:	d041      	beq.n	270e0 <_free_r+0x8c>
   2705c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   27060:	1f0c      	subs	r4, r1, #4
   27062:	2b00      	cmp	r3, #0
   27064:	bfb8      	it	lt
   27066:	18e4      	addlt	r4, r4, r3
   27068:	f001 fb42 	bl	286f0 <__malloc_lock>
   2706c:	4a1d      	ldr	r2, [pc, #116]	; (270e4 <_free_r+0x90>)
   2706e:	6813      	ldr	r3, [r2, #0]
   27070:	b933      	cbnz	r3, 27080 <_free_r+0x2c>
   27072:	6063      	str	r3, [r4, #4]
   27074:	6014      	str	r4, [r2, #0]
   27076:	4628      	mov	r0, r5
   27078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2707c:	f001 bb3e 	b.w	286fc <__malloc_unlock>
   27080:	42a3      	cmp	r3, r4
   27082:	d908      	bls.n	27096 <_free_r+0x42>
   27084:	6820      	ldr	r0, [r4, #0]
   27086:	1821      	adds	r1, r4, r0
   27088:	428b      	cmp	r3, r1
   2708a:	bf01      	itttt	eq
   2708c:	6819      	ldreq	r1, [r3, #0]
   2708e:	685b      	ldreq	r3, [r3, #4]
   27090:	1809      	addeq	r1, r1, r0
   27092:	6021      	streq	r1, [r4, #0]
   27094:	e7ed      	b.n	27072 <_free_r+0x1e>
   27096:	461a      	mov	r2, r3
   27098:	685b      	ldr	r3, [r3, #4]
   2709a:	b10b      	cbz	r3, 270a0 <_free_r+0x4c>
   2709c:	42a3      	cmp	r3, r4
   2709e:	d9fa      	bls.n	27096 <_free_r+0x42>
   270a0:	6811      	ldr	r1, [r2, #0]
   270a2:	1850      	adds	r0, r2, r1
   270a4:	42a0      	cmp	r0, r4
   270a6:	d10b      	bne.n	270c0 <_free_r+0x6c>
   270a8:	6820      	ldr	r0, [r4, #0]
   270aa:	4401      	add	r1, r0
   270ac:	1850      	adds	r0, r2, r1
   270ae:	6011      	str	r1, [r2, #0]
   270b0:	4283      	cmp	r3, r0
   270b2:	d1e0      	bne.n	27076 <_free_r+0x22>
   270b4:	6818      	ldr	r0, [r3, #0]
   270b6:	685b      	ldr	r3, [r3, #4]
   270b8:	4408      	add	r0, r1
   270ba:	6053      	str	r3, [r2, #4]
   270bc:	6010      	str	r0, [r2, #0]
   270be:	e7da      	b.n	27076 <_free_r+0x22>
   270c0:	d902      	bls.n	270c8 <_free_r+0x74>
   270c2:	230c      	movs	r3, #12
   270c4:	602b      	str	r3, [r5, #0]
   270c6:	e7d6      	b.n	27076 <_free_r+0x22>
   270c8:	6820      	ldr	r0, [r4, #0]
   270ca:	1821      	adds	r1, r4, r0
   270cc:	428b      	cmp	r3, r1
   270ce:	bf02      	ittt	eq
   270d0:	6819      	ldreq	r1, [r3, #0]
   270d2:	685b      	ldreq	r3, [r3, #4]
   270d4:	1809      	addeq	r1, r1, r0
   270d6:	6063      	str	r3, [r4, #4]
   270d8:	bf08      	it	eq
   270da:	6021      	streq	r1, [r4, #0]
   270dc:	6054      	str	r4, [r2, #4]
   270de:	e7ca      	b.n	27076 <_free_r+0x22>
   270e0:	bd38      	pop	{r3, r4, r5, pc}
   270e2:	bf00      	nop
   270e4:	20030d70 	.word	0x20030d70

000270e8 <_malloc_r>:
   270e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270ea:	1ccd      	adds	r5, r1, #3
   270ec:	4606      	mov	r6, r0
   270ee:	f025 0503 	bic.w	r5, r5, #3
   270f2:	3508      	adds	r5, #8
   270f4:	2d0c      	cmp	r5, #12
   270f6:	bf38      	it	cc
   270f8:	250c      	movcc	r5, #12
   270fa:	2d00      	cmp	r5, #0
   270fc:	db01      	blt.n	27102 <_malloc_r+0x1a>
   270fe:	42a9      	cmp	r1, r5
   27100:	d903      	bls.n	2710a <_malloc_r+0x22>
   27102:	230c      	movs	r3, #12
   27104:	6033      	str	r3, [r6, #0]
   27106:	2000      	movs	r0, #0
   27108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2710a:	f001 faf1 	bl	286f0 <__malloc_lock>
   2710e:	4921      	ldr	r1, [pc, #132]	; (27194 <_malloc_r+0xac>)
   27110:	680a      	ldr	r2, [r1, #0]
   27112:	4614      	mov	r4, r2
   27114:	b99c      	cbnz	r4, 2713e <_malloc_r+0x56>
   27116:	4f20      	ldr	r7, [pc, #128]	; (27198 <_malloc_r+0xb0>)
   27118:	683b      	ldr	r3, [r7, #0]
   2711a:	b923      	cbnz	r3, 27126 <_malloc_r+0x3e>
   2711c:	4621      	mov	r1, r4
   2711e:	4630      	mov	r0, r6
   27120:	f000 fbb8 	bl	27894 <_sbrk_r>
   27124:	6038      	str	r0, [r7, #0]
   27126:	4629      	mov	r1, r5
   27128:	4630      	mov	r0, r6
   2712a:	f000 fbb3 	bl	27894 <_sbrk_r>
   2712e:	1c43      	adds	r3, r0, #1
   27130:	d123      	bne.n	2717a <_malloc_r+0x92>
   27132:	230c      	movs	r3, #12
   27134:	4630      	mov	r0, r6
   27136:	6033      	str	r3, [r6, #0]
   27138:	f001 fae0 	bl	286fc <__malloc_unlock>
   2713c:	e7e3      	b.n	27106 <_malloc_r+0x1e>
   2713e:	6823      	ldr	r3, [r4, #0]
   27140:	1b5b      	subs	r3, r3, r5
   27142:	d417      	bmi.n	27174 <_malloc_r+0x8c>
   27144:	2b0b      	cmp	r3, #11
   27146:	d903      	bls.n	27150 <_malloc_r+0x68>
   27148:	6023      	str	r3, [r4, #0]
   2714a:	441c      	add	r4, r3
   2714c:	6025      	str	r5, [r4, #0]
   2714e:	e004      	b.n	2715a <_malloc_r+0x72>
   27150:	6863      	ldr	r3, [r4, #4]
   27152:	42a2      	cmp	r2, r4
   27154:	bf0c      	ite	eq
   27156:	600b      	streq	r3, [r1, #0]
   27158:	6053      	strne	r3, [r2, #4]
   2715a:	4630      	mov	r0, r6
   2715c:	f001 face 	bl	286fc <__malloc_unlock>
   27160:	f104 000b 	add.w	r0, r4, #11
   27164:	1d23      	adds	r3, r4, #4
   27166:	f020 0007 	bic.w	r0, r0, #7
   2716a:	1ac2      	subs	r2, r0, r3
   2716c:	bf1c      	itt	ne
   2716e:	1a1b      	subne	r3, r3, r0
   27170:	50a3      	strne	r3, [r4, r2]
   27172:	e7c9      	b.n	27108 <_malloc_r+0x20>
   27174:	4622      	mov	r2, r4
   27176:	6864      	ldr	r4, [r4, #4]
   27178:	e7cc      	b.n	27114 <_malloc_r+0x2c>
   2717a:	1cc4      	adds	r4, r0, #3
   2717c:	f024 0403 	bic.w	r4, r4, #3
   27180:	42a0      	cmp	r0, r4
   27182:	d0e3      	beq.n	2714c <_malloc_r+0x64>
   27184:	1a21      	subs	r1, r4, r0
   27186:	4630      	mov	r0, r6
   27188:	f000 fb84 	bl	27894 <_sbrk_r>
   2718c:	3001      	adds	r0, #1
   2718e:	d1dd      	bne.n	2714c <_malloc_r+0x64>
   27190:	e7cf      	b.n	27132 <_malloc_r+0x4a>
   27192:	bf00      	nop
   27194:	20030d70 	.word	0x20030d70
   27198:	20030d6c 	.word	0x20030d6c

0002719c <_printf_float>:
   2719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271a0:	b091      	sub	sp, #68	; 0x44
   271a2:	460c      	mov	r4, r1
   271a4:	4616      	mov	r6, r2
   271a6:	461f      	mov	r7, r3
   271a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   271ac:	4605      	mov	r5, r0
   271ae:	f001 fa9b 	bl	286e8 <_localeconv_r>
   271b2:	6803      	ldr	r3, [r0, #0]
   271b4:	4618      	mov	r0, r3
   271b6:	9308      	str	r3, [sp, #32]
   271b8:	f7e2 f927 	bl	940a <strlen>
   271bc:	2300      	movs	r3, #0
   271be:	9009      	str	r0, [sp, #36]	; 0x24
   271c0:	930e      	str	r3, [sp, #56]	; 0x38
   271c2:	f8d8 3000 	ldr.w	r3, [r8]
   271c6:	f894 a018 	ldrb.w	sl, [r4, #24]
   271ca:	3307      	adds	r3, #7
   271cc:	f8d4 b000 	ldr.w	fp, [r4]
   271d0:	f023 0307 	bic.w	r3, r3, #7
   271d4:	f103 0208 	add.w	r2, r3, #8
   271d8:	f8c8 2000 	str.w	r2, [r8]
   271dc:	f04f 32ff 	mov.w	r2, #4294967295
   271e0:	e9d3 8900 	ldrd	r8, r9, [r3]
   271e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   271e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   271ec:	930b      	str	r3, [sp, #44]	; 0x2c
   271ee:	4b9d      	ldr	r3, [pc, #628]	; (27464 <_printf_float+0x2c8>)
   271f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   271f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   271f8:	f7e1 ff82 	bl	9100 <__aeabi_dcmpun>
   271fc:	bb70      	cbnz	r0, 2725c <_printf_float+0xc0>
   271fe:	f04f 32ff 	mov.w	r2, #4294967295
   27202:	4b98      	ldr	r3, [pc, #608]	; (27464 <_printf_float+0x2c8>)
   27204:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   27208:	f7e1 ff3c 	bl	9084 <__aeabi_dcmple>
   2720c:	bb30      	cbnz	r0, 2725c <_printf_float+0xc0>
   2720e:	2200      	movs	r2, #0
   27210:	2300      	movs	r3, #0
   27212:	4640      	mov	r0, r8
   27214:	4649      	mov	r1, r9
   27216:	f7e1 ff2b 	bl	9070 <__aeabi_dcmplt>
   2721a:	b110      	cbz	r0, 27222 <_printf_float+0x86>
   2721c:	232d      	movs	r3, #45	; 0x2d
   2721e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27222:	4a91      	ldr	r2, [pc, #580]	; (27468 <_printf_float+0x2cc>)
   27224:	4b91      	ldr	r3, [pc, #580]	; (2746c <_printf_float+0x2d0>)
   27226:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2722a:	bf94      	ite	ls
   2722c:	4690      	movls	r8, r2
   2722e:	4698      	movhi	r8, r3
   27230:	2303      	movs	r3, #3
   27232:	f04f 0900 	mov.w	r9, #0
   27236:	6123      	str	r3, [r4, #16]
   27238:	f02b 0304 	bic.w	r3, fp, #4
   2723c:	6023      	str	r3, [r4, #0]
   2723e:	4633      	mov	r3, r6
   27240:	aa0f      	add	r2, sp, #60	; 0x3c
   27242:	4621      	mov	r1, r4
   27244:	4628      	mov	r0, r5
   27246:	9700      	str	r7, [sp, #0]
   27248:	f00a fb51 	bl	318ee <_printf_common>
   2724c:	3001      	adds	r0, #1
   2724e:	f040 8099 	bne.w	27384 <_printf_float+0x1e8>
   27252:	f04f 30ff 	mov.w	r0, #4294967295
   27256:	b011      	add	sp, #68	; 0x44
   27258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2725c:	4642      	mov	r2, r8
   2725e:	464b      	mov	r3, r9
   27260:	4640      	mov	r0, r8
   27262:	4649      	mov	r1, r9
   27264:	f7e1 ff4c 	bl	9100 <__aeabi_dcmpun>
   27268:	b140      	cbz	r0, 2727c <_printf_float+0xe0>
   2726a:	464b      	mov	r3, r9
   2726c:	4a80      	ldr	r2, [pc, #512]	; (27470 <_printf_float+0x2d4>)
   2726e:	2b00      	cmp	r3, #0
   27270:	bfbc      	itt	lt
   27272:	232d      	movlt	r3, #45	; 0x2d
   27274:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   27278:	4b7e      	ldr	r3, [pc, #504]	; (27474 <_printf_float+0x2d8>)
   2727a:	e7d4      	b.n	27226 <_printf_float+0x8a>
   2727c:	6863      	ldr	r3, [r4, #4]
   2727e:	1c5a      	adds	r2, r3, #1
   27280:	d129      	bne.n	272d6 <_printf_float+0x13a>
   27282:	2306      	movs	r3, #6
   27284:	6063      	str	r3, [r4, #4]
   27286:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2728a:	2200      	movs	r2, #0
   2728c:	4628      	mov	r0, r5
   2728e:	6023      	str	r3, [r4, #0]
   27290:	9206      	str	r2, [sp, #24]
   27292:	aa0e      	add	r2, sp, #56	; 0x38
   27294:	e9cd a204 	strd	sl, r2, [sp, #16]
   27298:	aa0d      	add	r2, sp, #52	; 0x34
   2729a:	9203      	str	r2, [sp, #12]
   2729c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   272a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   272a4:	6863      	ldr	r3, [r4, #4]
   272a6:	4642      	mov	r2, r8
   272a8:	9300      	str	r3, [sp, #0]
   272aa:	464b      	mov	r3, r9
   272ac:	f00a fa7f 	bl	317ae <__cvt>
   272b0:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   272b4:	4680      	mov	r8, r0
   272b6:	990d      	ldr	r1, [sp, #52]	; 0x34
   272b8:	d115      	bne.n	272e6 <_printf_float+0x14a>
   272ba:	1ccb      	adds	r3, r1, #3
   272bc:	db3b      	blt.n	27336 <_printf_float+0x19a>
   272be:	6863      	ldr	r3, [r4, #4]
   272c0:	4299      	cmp	r1, r3
   272c2:	dc38      	bgt.n	27336 <_printf_float+0x19a>
   272c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   272c6:	4299      	cmp	r1, r3
   272c8:	db55      	blt.n	27376 <_printf_float+0x1da>
   272ca:	6823      	ldr	r3, [r4, #0]
   272cc:	6121      	str	r1, [r4, #16]
   272ce:	07d8      	lsls	r0, r3, #31
   272d0:	d545      	bpl.n	2735e <_printf_float+0x1c2>
   272d2:	1c4b      	adds	r3, r1, #1
   272d4:	e042      	b.n	2735c <_printf_float+0x1c0>
   272d6:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   272da:	2a47      	cmp	r2, #71	; 0x47
   272dc:	d1d3      	bne.n	27286 <_printf_float+0xea>
   272de:	2b00      	cmp	r3, #0
   272e0:	d1d1      	bne.n	27286 <_printf_float+0xea>
   272e2:	2301      	movs	r3, #1
   272e4:	e7ce      	b.n	27284 <_printf_float+0xe8>
   272e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   272ea:	d107      	bne.n	272fc <_printf_float+0x160>
   272ec:	1cc8      	adds	r0, r1, #3
   272ee:	db25      	blt.n	2733c <_printf_float+0x1a0>
   272f0:	6863      	ldr	r3, [r4, #4]
   272f2:	428b      	cmp	r3, r1
   272f4:	db22      	blt.n	2733c <_printf_float+0x1a0>
   272f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
   272fa:	e7e3      	b.n	272c4 <_printf_float+0x128>
   272fc:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   27300:	d81f      	bhi.n	27342 <_printf_float+0x1a6>
   27302:	3901      	subs	r1, #1
   27304:	4652      	mov	r2, sl
   27306:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2730a:	910d      	str	r1, [sp, #52]	; 0x34
   2730c:	f00a fab6 	bl	3187c <__exponent>
   27310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   27312:	4681      	mov	r9, r0
   27314:	1813      	adds	r3, r2, r0
   27316:	2a01      	cmp	r2, #1
   27318:	6123      	str	r3, [r4, #16]
   2731a:	dc02      	bgt.n	27322 <_printf_float+0x186>
   2731c:	6822      	ldr	r2, [r4, #0]
   2731e:	07d2      	lsls	r2, r2, #31
   27320:	d501      	bpl.n	27326 <_printf_float+0x18a>
   27322:	3301      	adds	r3, #1
   27324:	6123      	str	r3, [r4, #16]
   27326:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2732a:	2b00      	cmp	r3, #0
   2732c:	d087      	beq.n	2723e <_printf_float+0xa2>
   2732e:	232d      	movs	r3, #45	; 0x2d
   27330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27334:	e783      	b.n	2723e <_printf_float+0xa2>
   27336:	f04f 0a65 	mov.w	sl, #101	; 0x65
   2733a:	e7e2      	b.n	27302 <_printf_float+0x166>
   2733c:	f04f 0a45 	mov.w	sl, #69	; 0x45
   27340:	e7df      	b.n	27302 <_printf_float+0x166>
   27342:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   27346:	d1bd      	bne.n	272c4 <_printf_float+0x128>
   27348:	2900      	cmp	r1, #0
   2734a:	6863      	ldr	r3, [r4, #4]
   2734c:	dd0b      	ble.n	27366 <_printf_float+0x1ca>
   2734e:	6121      	str	r1, [r4, #16]
   27350:	b913      	cbnz	r3, 27358 <_printf_float+0x1bc>
   27352:	6822      	ldr	r2, [r4, #0]
   27354:	07d0      	lsls	r0, r2, #31
   27356:	d502      	bpl.n	2735e <_printf_float+0x1c2>
   27358:	3301      	adds	r3, #1
   2735a:	440b      	add	r3, r1
   2735c:	6123      	str	r3, [r4, #16]
   2735e:	f04f 0900 	mov.w	r9, #0
   27362:	65a1      	str	r1, [r4, #88]	; 0x58
   27364:	e7df      	b.n	27326 <_printf_float+0x18a>
   27366:	b913      	cbnz	r3, 2736e <_printf_float+0x1d2>
   27368:	6822      	ldr	r2, [r4, #0]
   2736a:	07d2      	lsls	r2, r2, #31
   2736c:	d501      	bpl.n	27372 <_printf_float+0x1d6>
   2736e:	3302      	adds	r3, #2
   27370:	e7f4      	b.n	2735c <_printf_float+0x1c0>
   27372:	2301      	movs	r3, #1
   27374:	e7f2      	b.n	2735c <_printf_float+0x1c0>
   27376:	2900      	cmp	r1, #0
   27378:	bfd4      	ite	le
   2737a:	f1c1 0202 	rsble	r2, r1, #2
   2737e:	2201      	movgt	r2, #1
   27380:	4413      	add	r3, r2
   27382:	e7eb      	b.n	2735c <_printf_float+0x1c0>
   27384:	6823      	ldr	r3, [r4, #0]
   27386:	055a      	lsls	r2, r3, #21
   27388:	d407      	bmi.n	2739a <_printf_float+0x1fe>
   2738a:	6923      	ldr	r3, [r4, #16]
   2738c:	4642      	mov	r2, r8
   2738e:	4631      	mov	r1, r6
   27390:	4628      	mov	r0, r5
   27392:	47b8      	blx	r7
   27394:	3001      	adds	r0, #1
   27396:	d12b      	bne.n	273f0 <_printf_float+0x254>
   27398:	e75b      	b.n	27252 <_printf_float+0xb6>
   2739a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2739e:	f240 80dc 	bls.w	2755a <_printf_float+0x3be>
   273a2:	2200      	movs	r2, #0
   273a4:	2300      	movs	r3, #0
   273a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   273aa:	f7e1 fe57 	bl	905c <__aeabi_dcmpeq>
   273ae:	2800      	cmp	r0, #0
   273b0:	d033      	beq.n	2741a <_printf_float+0x27e>
   273b2:	2301      	movs	r3, #1
   273b4:	4a30      	ldr	r2, [pc, #192]	; (27478 <_printf_float+0x2dc>)
   273b6:	4631      	mov	r1, r6
   273b8:	4628      	mov	r0, r5
   273ba:	47b8      	blx	r7
   273bc:	3001      	adds	r0, #1
   273be:	f43f af48 	beq.w	27252 <_printf_float+0xb6>
   273c2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   273c6:	4543      	cmp	r3, r8
   273c8:	db02      	blt.n	273d0 <_printf_float+0x234>
   273ca:	6823      	ldr	r3, [r4, #0]
   273cc:	07d8      	lsls	r0, r3, #31
   273ce:	d50f      	bpl.n	273f0 <_printf_float+0x254>
   273d0:	4631      	mov	r1, r6
   273d2:	4628      	mov	r0, r5
   273d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   273d8:	47b8      	blx	r7
   273da:	3001      	adds	r0, #1
   273dc:	f43f af39 	beq.w	27252 <_printf_float+0xb6>
   273e0:	f04f 0900 	mov.w	r9, #0
   273e4:	f108 38ff 	add.w	r8, r8, #4294967295
   273e8:	f104 0a1a 	add.w	sl, r4, #26
   273ec:	45c8      	cmp	r8, r9
   273ee:	dc09      	bgt.n	27404 <_printf_float+0x268>
   273f0:	6823      	ldr	r3, [r4, #0]
   273f2:	079b      	lsls	r3, r3, #30
   273f4:	f100 8102 	bmi.w	275fc <_printf_float+0x460>
   273f8:	68e0      	ldr	r0, [r4, #12]
   273fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   273fc:	4298      	cmp	r0, r3
   273fe:	bfb8      	it	lt
   27400:	4618      	movlt	r0, r3
   27402:	e728      	b.n	27256 <_printf_float+0xba>
   27404:	2301      	movs	r3, #1
   27406:	4652      	mov	r2, sl
   27408:	4631      	mov	r1, r6
   2740a:	4628      	mov	r0, r5
   2740c:	47b8      	blx	r7
   2740e:	3001      	adds	r0, #1
   27410:	f43f af1f 	beq.w	27252 <_printf_float+0xb6>
   27414:	f109 0901 	add.w	r9, r9, #1
   27418:	e7e8      	b.n	273ec <_printf_float+0x250>
   2741a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2741c:	2b00      	cmp	r3, #0
   2741e:	dc38      	bgt.n	27492 <_printf_float+0x2f6>
   27420:	2301      	movs	r3, #1
   27422:	4a15      	ldr	r2, [pc, #84]	; (27478 <_printf_float+0x2dc>)
   27424:	4631      	mov	r1, r6
   27426:	4628      	mov	r0, r5
   27428:	47b8      	blx	r7
   2742a:	3001      	adds	r0, #1
   2742c:	f43f af11 	beq.w	27252 <_printf_float+0xb6>
   27430:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   27434:	ea59 0303 	orrs.w	r3, r9, r3
   27438:	d102      	bne.n	27440 <_printf_float+0x2a4>
   2743a:	6823      	ldr	r3, [r4, #0]
   2743c:	07d9      	lsls	r1, r3, #31
   2743e:	d5d7      	bpl.n	273f0 <_printf_float+0x254>
   27440:	4631      	mov	r1, r6
   27442:	4628      	mov	r0, r5
   27444:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   27448:	47b8      	blx	r7
   2744a:	3001      	adds	r0, #1
   2744c:	f43f af01 	beq.w	27252 <_printf_float+0xb6>
   27450:	f04f 0a00 	mov.w	sl, #0
   27454:	f104 0b1a 	add.w	fp, r4, #26
   27458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2745a:	425b      	negs	r3, r3
   2745c:	4553      	cmp	r3, sl
   2745e:	dc0d      	bgt.n	2747c <_printf_float+0x2e0>
   27460:	464b      	mov	r3, r9
   27462:	e793      	b.n	2738c <_printf_float+0x1f0>
   27464:	7fefffff 	.word	0x7fefffff
   27468:	000386a8 	.word	0x000386a8
   2746c:	00035119 	.word	0x00035119
   27470:	000386ac 	.word	0x000386ac
   27474:	000386b0 	.word	0x000386b0
   27478:	000367a1 	.word	0x000367a1
   2747c:	2301      	movs	r3, #1
   2747e:	465a      	mov	r2, fp
   27480:	4631      	mov	r1, r6
   27482:	4628      	mov	r0, r5
   27484:	47b8      	blx	r7
   27486:	3001      	adds	r0, #1
   27488:	f43f aee3 	beq.w	27252 <_printf_float+0xb6>
   2748c:	f10a 0a01 	add.w	sl, sl, #1
   27490:	e7e2      	b.n	27458 <_printf_float+0x2bc>
   27492:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27494:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   27498:	4553      	cmp	r3, sl
   2749a:	bfa8      	it	ge
   2749c:	4653      	movge	r3, sl
   2749e:	2b00      	cmp	r3, #0
   274a0:	4699      	mov	r9, r3
   274a2:	dc36      	bgt.n	27512 <_printf_float+0x376>
   274a4:	f04f 0b00 	mov.w	fp, #0
   274a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   274ac:	f104 021a 	add.w	r2, r4, #26
   274b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   274b2:	930a      	str	r3, [sp, #40]	; 0x28
   274b4:	eba3 0309 	sub.w	r3, r3, r9
   274b8:	455b      	cmp	r3, fp
   274ba:	dc31      	bgt.n	27520 <_printf_float+0x384>
   274bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   274be:	459a      	cmp	sl, r3
   274c0:	dc3a      	bgt.n	27538 <_printf_float+0x39c>
   274c2:	6823      	ldr	r3, [r4, #0]
   274c4:	07da      	lsls	r2, r3, #31
   274c6:	d437      	bmi.n	27538 <_printf_float+0x39c>
   274c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   274ca:	ebaa 0903 	sub.w	r9, sl, r3
   274ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   274d0:	ebaa 0303 	sub.w	r3, sl, r3
   274d4:	4599      	cmp	r9, r3
   274d6:	bfa8      	it	ge
   274d8:	4699      	movge	r9, r3
   274da:	f1b9 0f00 	cmp.w	r9, #0
   274de:	dc33      	bgt.n	27548 <_printf_float+0x3ac>
   274e0:	f04f 0800 	mov.w	r8, #0
   274e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   274e8:	f104 0b1a 	add.w	fp, r4, #26
   274ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   274ee:	ebaa 0303 	sub.w	r3, sl, r3
   274f2:	eba3 0309 	sub.w	r3, r3, r9
   274f6:	4543      	cmp	r3, r8
   274f8:	f77f af7a 	ble.w	273f0 <_printf_float+0x254>
   274fc:	2301      	movs	r3, #1
   274fe:	465a      	mov	r2, fp
   27500:	4631      	mov	r1, r6
   27502:	4628      	mov	r0, r5
   27504:	47b8      	blx	r7
   27506:	3001      	adds	r0, #1
   27508:	f43f aea3 	beq.w	27252 <_printf_float+0xb6>
   2750c:	f108 0801 	add.w	r8, r8, #1
   27510:	e7ec      	b.n	274ec <_printf_float+0x350>
   27512:	4642      	mov	r2, r8
   27514:	4631      	mov	r1, r6
   27516:	4628      	mov	r0, r5
   27518:	47b8      	blx	r7
   2751a:	3001      	adds	r0, #1
   2751c:	d1c2      	bne.n	274a4 <_printf_float+0x308>
   2751e:	e698      	b.n	27252 <_printf_float+0xb6>
   27520:	2301      	movs	r3, #1
   27522:	4631      	mov	r1, r6
   27524:	4628      	mov	r0, r5
   27526:	920a      	str	r2, [sp, #40]	; 0x28
   27528:	47b8      	blx	r7
   2752a:	3001      	adds	r0, #1
   2752c:	f43f ae91 	beq.w	27252 <_printf_float+0xb6>
   27530:	f10b 0b01 	add.w	fp, fp, #1
   27534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27536:	e7bb      	b.n	274b0 <_printf_float+0x314>
   27538:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2753c:	4631      	mov	r1, r6
   2753e:	4628      	mov	r0, r5
   27540:	47b8      	blx	r7
   27542:	3001      	adds	r0, #1
   27544:	d1c0      	bne.n	274c8 <_printf_float+0x32c>
   27546:	e684      	b.n	27252 <_printf_float+0xb6>
   27548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2754a:	464b      	mov	r3, r9
   2754c:	4631      	mov	r1, r6
   2754e:	4628      	mov	r0, r5
   27550:	4442      	add	r2, r8
   27552:	47b8      	blx	r7
   27554:	3001      	adds	r0, #1
   27556:	d1c3      	bne.n	274e0 <_printf_float+0x344>
   27558:	e67b      	b.n	27252 <_printf_float+0xb6>
   2755a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2755e:	f1ba 0f01 	cmp.w	sl, #1
   27562:	dc01      	bgt.n	27568 <_printf_float+0x3cc>
   27564:	07db      	lsls	r3, r3, #31
   27566:	d536      	bpl.n	275d6 <_printf_float+0x43a>
   27568:	2301      	movs	r3, #1
   2756a:	4642      	mov	r2, r8
   2756c:	4631      	mov	r1, r6
   2756e:	4628      	mov	r0, r5
   27570:	47b8      	blx	r7
   27572:	3001      	adds	r0, #1
   27574:	f43f ae6d 	beq.w	27252 <_printf_float+0xb6>
   27578:	4631      	mov	r1, r6
   2757a:	4628      	mov	r0, r5
   2757c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   27580:	47b8      	blx	r7
   27582:	3001      	adds	r0, #1
   27584:	f43f ae65 	beq.w	27252 <_printf_float+0xb6>
   27588:	2200      	movs	r2, #0
   2758a:	2300      	movs	r3, #0
   2758c:	f10a 3aff 	add.w	sl, sl, #4294967295
   27590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   27594:	f7e1 fd62 	bl	905c <__aeabi_dcmpeq>
   27598:	b9c0      	cbnz	r0, 275cc <_printf_float+0x430>
   2759a:	4653      	mov	r3, sl
   2759c:	f108 0201 	add.w	r2, r8, #1
   275a0:	4631      	mov	r1, r6
   275a2:	4628      	mov	r0, r5
   275a4:	47b8      	blx	r7
   275a6:	3001      	adds	r0, #1
   275a8:	d10c      	bne.n	275c4 <_printf_float+0x428>
   275aa:	e652      	b.n	27252 <_printf_float+0xb6>
   275ac:	2301      	movs	r3, #1
   275ae:	465a      	mov	r2, fp
   275b0:	4631      	mov	r1, r6
   275b2:	4628      	mov	r0, r5
   275b4:	47b8      	blx	r7
   275b6:	3001      	adds	r0, #1
   275b8:	f43f ae4b 	beq.w	27252 <_printf_float+0xb6>
   275bc:	f108 0801 	add.w	r8, r8, #1
   275c0:	45d0      	cmp	r8, sl
   275c2:	dbf3      	blt.n	275ac <_printf_float+0x410>
   275c4:	464b      	mov	r3, r9
   275c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
   275ca:	e6e0      	b.n	2738e <_printf_float+0x1f2>
   275cc:	f04f 0800 	mov.w	r8, #0
   275d0:	f104 0b1a 	add.w	fp, r4, #26
   275d4:	e7f4      	b.n	275c0 <_printf_float+0x424>
   275d6:	2301      	movs	r3, #1
   275d8:	4642      	mov	r2, r8
   275da:	e7e1      	b.n	275a0 <_printf_float+0x404>
   275dc:	2301      	movs	r3, #1
   275de:	464a      	mov	r2, r9
   275e0:	4631      	mov	r1, r6
   275e2:	4628      	mov	r0, r5
   275e4:	47b8      	blx	r7
   275e6:	3001      	adds	r0, #1
   275e8:	f43f ae33 	beq.w	27252 <_printf_float+0xb6>
   275ec:	f108 0801 	add.w	r8, r8, #1
   275f0:	68e3      	ldr	r3, [r4, #12]
   275f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   275f4:	1a5b      	subs	r3, r3, r1
   275f6:	4543      	cmp	r3, r8
   275f8:	dcf0      	bgt.n	275dc <_printf_float+0x440>
   275fa:	e6fd      	b.n	273f8 <_printf_float+0x25c>
   275fc:	f04f 0800 	mov.w	r8, #0
   27600:	f104 0919 	add.w	r9, r4, #25
   27604:	e7f4      	b.n	275f0 <_printf_float+0x454>
   27606:	bf00      	nop

00027608 <_printf_i>:
   27608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2760c:	7e0f      	ldrb	r7, [r1, #24]
   2760e:	4691      	mov	r9, r2
   27610:	4680      	mov	r8, r0
   27612:	460c      	mov	r4, r1
   27614:	2f78      	cmp	r7, #120	; 0x78
   27616:	469a      	mov	sl, r3
   27618:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2761a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2761e:	d807      	bhi.n	27630 <_printf_i+0x28>
   27620:	2f62      	cmp	r7, #98	; 0x62
   27622:	d80a      	bhi.n	2763a <_printf_i+0x32>
   27624:	2f00      	cmp	r7, #0
   27626:	f000 80e0 	beq.w	277ea <_printf_i+0x1e2>
   2762a:	2f58      	cmp	r7, #88	; 0x58
   2762c:	f000 80bb 	beq.w	277a6 <_printf_i+0x19e>
   27630:	f104 0642 	add.w	r6, r4, #66	; 0x42
   27634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   27638:	e03a      	b.n	276b0 <_printf_i+0xa8>
   2763a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2763e:	2b15      	cmp	r3, #21
   27640:	d8f6      	bhi.n	27630 <_printf_i+0x28>
   27642:	a101      	add	r1, pc, #4	; (adr r1, 27648 <_printf_i+0x40>)
   27644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   27648:	000276a1 	.word	0x000276a1
   2764c:	000276b5 	.word	0x000276b5
   27650:	00027631 	.word	0x00027631
   27654:	00027631 	.word	0x00027631
   27658:	00027631 	.word	0x00027631
   2765c:	00027631 	.word	0x00027631
   27660:	000276b5 	.word	0x000276b5
   27664:	00027631 	.word	0x00027631
   27668:	00027631 	.word	0x00027631
   2766c:	00027631 	.word	0x00027631
   27670:	00027631 	.word	0x00027631
   27674:	000277d1 	.word	0x000277d1
   27678:	00027745 	.word	0x00027745
   2767c:	00027787 	.word	0x00027787
   27680:	00027631 	.word	0x00027631
   27684:	00027631 	.word	0x00027631
   27688:	000277f3 	.word	0x000277f3
   2768c:	00027631 	.word	0x00027631
   27690:	00027745 	.word	0x00027745
   27694:	00027631 	.word	0x00027631
   27698:	00027631 	.word	0x00027631
   2769c:	0002778f 	.word	0x0002778f
   276a0:	682b      	ldr	r3, [r5, #0]
   276a2:	f104 0642 	add.w	r6, r4, #66	; 0x42
   276a6:	1d1a      	adds	r2, r3, #4
   276a8:	681b      	ldr	r3, [r3, #0]
   276aa:	602a      	str	r2, [r5, #0]
   276ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   276b0:	2301      	movs	r3, #1
   276b2:	e0ab      	b.n	2780c <_printf_i+0x204>
   276b4:	6823      	ldr	r3, [r4, #0]
   276b6:	6829      	ldr	r1, [r5, #0]
   276b8:	061f      	lsls	r7, r3, #24
   276ba:	f101 0004 	add.w	r0, r1, #4
   276be:	6028      	str	r0, [r5, #0]
   276c0:	d501      	bpl.n	276c6 <_printf_i+0xbe>
   276c2:	680d      	ldr	r5, [r1, #0]
   276c4:	e003      	b.n	276ce <_printf_i+0xc6>
   276c6:	065e      	lsls	r6, r3, #25
   276c8:	d5fb      	bpl.n	276c2 <_printf_i+0xba>
   276ca:	f9b1 5000 	ldrsh.w	r5, [r1]
   276ce:	2d00      	cmp	r5, #0
   276d0:	6861      	ldr	r1, [r4, #4]
   276d2:	da7a      	bge.n	277ca <_printf_i+0x1c2>
   276d4:	202d      	movs	r0, #45	; 0x2d
   276d6:	2900      	cmp	r1, #0
   276d8:	60a1      	str	r1, [r4, #8]
   276da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   276de:	da2d      	bge.n	2773c <_printf_i+0x134>
   276e0:	426d      	negs	r5, r5
   276e2:	485e      	ldr	r0, [pc, #376]	; (2785c <_printf_i+0x254>)
   276e4:	230a      	movs	r3, #10
   276e6:	4616      	mov	r6, r2
   276e8:	fbb5 f1f3 	udiv	r1, r5, r3
   276ec:	fb03 5711 	mls	r7, r3, r1, r5
   276f0:	5dc7      	ldrb	r7, [r0, r7]
   276f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
   276f6:	462f      	mov	r7, r5
   276f8:	460d      	mov	r5, r1
   276fa:	42bb      	cmp	r3, r7
   276fc:	d9f4      	bls.n	276e8 <_printf_i+0xe0>
   276fe:	2b08      	cmp	r3, #8
   27700:	d10b      	bne.n	2771a <_printf_i+0x112>
   27702:	6823      	ldr	r3, [r4, #0]
   27704:	07df      	lsls	r7, r3, #31
   27706:	d508      	bpl.n	2771a <_printf_i+0x112>
   27708:	6923      	ldr	r3, [r4, #16]
   2770a:	6861      	ldr	r1, [r4, #4]
   2770c:	4299      	cmp	r1, r3
   2770e:	bfde      	ittt	le
   27710:	2330      	movle	r3, #48	; 0x30
   27712:	f806 3c01 	strble.w	r3, [r6, #-1]
   27716:	f106 36ff 	addle.w	r6, r6, #4294967295
   2771a:	1b92      	subs	r2, r2, r6
   2771c:	6122      	str	r2, [r4, #16]
   2771e:	464b      	mov	r3, r9
   27720:	aa03      	add	r2, sp, #12
   27722:	4621      	mov	r1, r4
   27724:	4640      	mov	r0, r8
   27726:	f8cd a000 	str.w	sl, [sp]
   2772a:	f00a f8e0 	bl	318ee <_printf_common>
   2772e:	3001      	adds	r0, #1
   27730:	d171      	bne.n	27816 <_printf_i+0x20e>
   27732:	f04f 30ff 	mov.w	r0, #4294967295
   27736:	b004      	add	sp, #16
   27738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2773c:	f023 0304 	bic.w	r3, r3, #4
   27740:	6023      	str	r3, [r4, #0]
   27742:	e7cd      	b.n	276e0 <_printf_i+0xd8>
   27744:	682b      	ldr	r3, [r5, #0]
   27746:	6820      	ldr	r0, [r4, #0]
   27748:	1d19      	adds	r1, r3, #4
   2774a:	6029      	str	r1, [r5, #0]
   2774c:	0605      	lsls	r5, r0, #24
   2774e:	d501      	bpl.n	27754 <_printf_i+0x14c>
   27750:	681d      	ldr	r5, [r3, #0]
   27752:	e002      	b.n	2775a <_printf_i+0x152>
   27754:	0641      	lsls	r1, r0, #25
   27756:	d5fb      	bpl.n	27750 <_printf_i+0x148>
   27758:	881d      	ldrh	r5, [r3, #0]
   2775a:	2f6f      	cmp	r7, #111	; 0x6f
   2775c:	483f      	ldr	r0, [pc, #252]	; (2785c <_printf_i+0x254>)
   2775e:	bf14      	ite	ne
   27760:	230a      	movne	r3, #10
   27762:	2308      	moveq	r3, #8
   27764:	2100      	movs	r1, #0
   27766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2776a:	6866      	ldr	r6, [r4, #4]
   2776c:	2e00      	cmp	r6, #0
   2776e:	60a6      	str	r6, [r4, #8]
   27770:	dbb9      	blt.n	276e6 <_printf_i+0xde>
   27772:	6821      	ldr	r1, [r4, #0]
   27774:	f021 0104 	bic.w	r1, r1, #4
   27778:	6021      	str	r1, [r4, #0]
   2777a:	2d00      	cmp	r5, #0
   2777c:	d1b3      	bne.n	276e6 <_printf_i+0xde>
   2777e:	2e00      	cmp	r6, #0
   27780:	d1b1      	bne.n	276e6 <_printf_i+0xde>
   27782:	4616      	mov	r6, r2
   27784:	e7bb      	b.n	276fe <_printf_i+0xf6>
   27786:	6823      	ldr	r3, [r4, #0]
   27788:	f043 0320 	orr.w	r3, r3, #32
   2778c:	6023      	str	r3, [r4, #0]
   2778e:	2778      	movs	r7, #120	; 0x78
   27790:	4833      	ldr	r0, [pc, #204]	; (27860 <_printf_i+0x258>)
   27792:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   27796:	6829      	ldr	r1, [r5, #0]
   27798:	6823      	ldr	r3, [r4, #0]
   2779a:	1d0e      	adds	r6, r1, #4
   2779c:	602e      	str	r6, [r5, #0]
   2779e:	061e      	lsls	r6, r3, #24
   277a0:	d503      	bpl.n	277aa <_printf_i+0x1a2>
   277a2:	680d      	ldr	r5, [r1, #0]
   277a4:	e004      	b.n	277b0 <_printf_i+0x1a8>
   277a6:	482d      	ldr	r0, [pc, #180]	; (2785c <_printf_i+0x254>)
   277a8:	e7f3      	b.n	27792 <_printf_i+0x18a>
   277aa:	065d      	lsls	r5, r3, #25
   277ac:	d5f9      	bpl.n	277a2 <_printf_i+0x19a>
   277ae:	880d      	ldrh	r5, [r1, #0]
   277b0:	07d9      	lsls	r1, r3, #31
   277b2:	bf44      	itt	mi
   277b4:	f043 0320 	orrmi.w	r3, r3, #32
   277b8:	6023      	strmi	r3, [r4, #0]
   277ba:	b10d      	cbz	r5, 277c0 <_printf_i+0x1b8>
   277bc:	2310      	movs	r3, #16
   277be:	e7d1      	b.n	27764 <_printf_i+0x15c>
   277c0:	6823      	ldr	r3, [r4, #0]
   277c2:	f023 0320 	bic.w	r3, r3, #32
   277c6:	6023      	str	r3, [r4, #0]
   277c8:	e7f8      	b.n	277bc <_printf_i+0x1b4>
   277ca:	4824      	ldr	r0, [pc, #144]	; (2785c <_printf_i+0x254>)
   277cc:	230a      	movs	r3, #10
   277ce:	e7cc      	b.n	2776a <_printf_i+0x162>
   277d0:	682b      	ldr	r3, [r5, #0]
   277d2:	6826      	ldr	r6, [r4, #0]
   277d4:	1d18      	adds	r0, r3, #4
   277d6:	6961      	ldr	r1, [r4, #20]
   277d8:	6028      	str	r0, [r5, #0]
   277da:	0635      	lsls	r5, r6, #24
   277dc:	681b      	ldr	r3, [r3, #0]
   277de:	d501      	bpl.n	277e4 <_printf_i+0x1dc>
   277e0:	6019      	str	r1, [r3, #0]
   277e2:	e002      	b.n	277ea <_printf_i+0x1e2>
   277e4:	0670      	lsls	r0, r6, #25
   277e6:	d5fb      	bpl.n	277e0 <_printf_i+0x1d8>
   277e8:	8019      	strh	r1, [r3, #0]
   277ea:	2300      	movs	r3, #0
   277ec:	4616      	mov	r6, r2
   277ee:	6123      	str	r3, [r4, #16]
   277f0:	e795      	b.n	2771e <_printf_i+0x116>
   277f2:	682b      	ldr	r3, [r5, #0]
   277f4:	2100      	movs	r1, #0
   277f6:	1d1a      	adds	r2, r3, #4
   277f8:	602a      	str	r2, [r5, #0]
   277fa:	681e      	ldr	r6, [r3, #0]
   277fc:	6862      	ldr	r2, [r4, #4]
   277fe:	4630      	mov	r0, r6
   27800:	f00a fbdf 	bl	31fc2 <memchr>
   27804:	b108      	cbz	r0, 2780a <_printf_i+0x202>
   27806:	1b80      	subs	r0, r0, r6
   27808:	6060      	str	r0, [r4, #4]
   2780a:	6863      	ldr	r3, [r4, #4]
   2780c:	6123      	str	r3, [r4, #16]
   2780e:	2300      	movs	r3, #0
   27810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27814:	e783      	b.n	2771e <_printf_i+0x116>
   27816:	6923      	ldr	r3, [r4, #16]
   27818:	4632      	mov	r2, r6
   2781a:	4649      	mov	r1, r9
   2781c:	4640      	mov	r0, r8
   2781e:	47d0      	blx	sl
   27820:	3001      	adds	r0, #1
   27822:	d086      	beq.n	27732 <_printf_i+0x12a>
   27824:	6823      	ldr	r3, [r4, #0]
   27826:	079b      	lsls	r3, r3, #30
   27828:	d414      	bmi.n	27854 <_printf_i+0x24c>
   2782a:	68e0      	ldr	r0, [r4, #12]
   2782c:	9b03      	ldr	r3, [sp, #12]
   2782e:	4298      	cmp	r0, r3
   27830:	bfb8      	it	lt
   27832:	4618      	movlt	r0, r3
   27834:	e77f      	b.n	27736 <_printf_i+0x12e>
   27836:	2301      	movs	r3, #1
   27838:	4632      	mov	r2, r6
   2783a:	4649      	mov	r1, r9
   2783c:	4640      	mov	r0, r8
   2783e:	47d0      	blx	sl
   27840:	3001      	adds	r0, #1
   27842:	f43f af76 	beq.w	27732 <_printf_i+0x12a>
   27846:	3501      	adds	r5, #1
   27848:	68e3      	ldr	r3, [r4, #12]
   2784a:	9903      	ldr	r1, [sp, #12]
   2784c:	1a5b      	subs	r3, r3, r1
   2784e:	42ab      	cmp	r3, r5
   27850:	dcf1      	bgt.n	27836 <_printf_i+0x22e>
   27852:	e7ea      	b.n	2782a <_printf_i+0x222>
   27854:	2500      	movs	r5, #0
   27856:	f104 0619 	add.w	r6, r4, #25
   2785a:	e7f5      	b.n	27848 <_printf_i+0x240>
   2785c:	000386b4 	.word	0x000386b4
   27860:	000386c5 	.word	0x000386c5

00027864 <iprintf>:
   27864:	b40f      	push	{r0, r1, r2, r3}
   27866:	4b0a      	ldr	r3, [pc, #40]	; (27890 <iprintf+0x2c>)
   27868:	b513      	push	{r0, r1, r4, lr}
   2786a:	681c      	ldr	r4, [r3, #0]
   2786c:	b124      	cbz	r4, 27878 <iprintf+0x14>
   2786e:	69a3      	ldr	r3, [r4, #24]
   27870:	b913      	cbnz	r3, 27878 <iprintf+0x14>
   27872:	4620      	mov	r0, r4
   27874:	f000 fc38 	bl	280e8 <__sinit>
   27878:	ab05      	add	r3, sp, #20
   2787a:	9a04      	ldr	r2, [sp, #16]
   2787c:	68a1      	ldr	r1, [r4, #8]
   2787e:	4620      	mov	r0, r4
   27880:	9301      	str	r3, [sp, #4]
   27882:	f001 fc0f 	bl	290a4 <_vfiprintf_r>
   27886:	b002      	add	sp, #8
   27888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2788c:	b004      	add	sp, #16
   2788e:	4770      	bx	lr
   27890:	200087f8 	.word	0x200087f8

00027894 <_sbrk_r>:
   27894:	b538      	push	{r3, r4, r5, lr}
   27896:	2300      	movs	r3, #0
   27898:	4d05      	ldr	r5, [pc, #20]	; (278b0 <_sbrk_r+0x1c>)
   2789a:	4604      	mov	r4, r0
   2789c:	4608      	mov	r0, r1
   2789e:	602b      	str	r3, [r5, #0]
   278a0:	f7ea fa86 	bl	11db0 <_sbrk>
   278a4:	1c43      	adds	r3, r0, #1
   278a6:	d102      	bne.n	278ae <_sbrk_r+0x1a>
   278a8:	682b      	ldr	r3, [r5, #0]
   278aa:	b103      	cbz	r3, 278ae <_sbrk_r+0x1a>
   278ac:	6023      	str	r3, [r4, #0]
   278ae:	bd38      	pop	{r3, r4, r5, pc}
   278b0:	20030d80 	.word	0x20030d80

000278b4 <strtod>:
   278b4:	460a      	mov	r2, r1
   278b6:	4601      	mov	r1, r0
   278b8:	4802      	ldr	r0, [pc, #8]	; (278c4 <strtod+0x10>)
   278ba:	4b03      	ldr	r3, [pc, #12]	; (278c8 <strtod+0x14>)
   278bc:	6800      	ldr	r0, [r0, #0]
   278be:	f7e2 bab3 	b.w	9e28 <_strtod_l>
   278c2:	bf00      	nop
   278c4:	200087f8 	.word	0x200087f8
   278c8:	20008864 	.word	0x20008864

000278cc <strtok>:
   278cc:	4b16      	ldr	r3, [pc, #88]	; (27928 <strtok+0x5c>)
   278ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   278d2:	681f      	ldr	r7, [r3, #0]
   278d4:	4605      	mov	r5, r0
   278d6:	460e      	mov	r6, r1
   278d8:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   278da:	b9ec      	cbnz	r4, 27918 <strtok+0x4c>
   278dc:	2050      	movs	r0, #80	; 0x50
   278de:	f7ff f939 	bl	26b54 <malloc>
   278e2:	4602      	mov	r2, r0
   278e4:	65b8      	str	r0, [r7, #88]	; 0x58
   278e6:	b920      	cbnz	r0, 278f2 <strtok+0x26>
   278e8:	4b10      	ldr	r3, [pc, #64]	; (2792c <strtok+0x60>)
   278ea:	2157      	movs	r1, #87	; 0x57
   278ec:	4810      	ldr	r0, [pc, #64]	; (27930 <strtok+0x64>)
   278ee:	f000 fb9b 	bl	28028 <__assert_func>
   278f2:	e9c0 4400 	strd	r4, r4, [r0]
   278f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   278fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   278fe:	6184      	str	r4, [r0, #24]
   27900:	7704      	strb	r4, [r0, #28]
   27902:	6244      	str	r4, [r0, #36]	; 0x24
   27904:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   27908:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   2790c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   27910:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   27914:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   27918:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2791a:	4631      	mov	r1, r6
   2791c:	4628      	mov	r0, r5
   2791e:	2301      	movs	r3, #1
   27920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27924:	f00a b8ec 	b.w	31b00 <__strtok_r>
   27928:	200087f8 	.word	0x200087f8
   2792c:	000386d6 	.word	0x000386d6
   27930:	000386ed 	.word	0x000386ed

00027934 <_strtol_l.constprop.0>:
   27934:	2b24      	cmp	r3, #36	; 0x24
   27936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2793a:	4686      	mov	lr, r0
   2793c:	4690      	mov	r8, r2
   2793e:	d801      	bhi.n	27944 <_strtol_l.constprop.0+0x10>
   27940:	2b01      	cmp	r3, #1
   27942:	d106      	bne.n	27952 <_strtol_l.constprop.0+0x1e>
   27944:	f003 ffd3 	bl	2b8ee <__errno>
   27948:	2316      	movs	r3, #22
   2794a:	6003      	str	r3, [r0, #0]
   2794c:	2000      	movs	r0, #0
   2794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27952:	460d      	mov	r5, r1
   27954:	4835      	ldr	r0, [pc, #212]	; (27a2c <_strtol_l.constprop.0+0xf8>)
   27956:	462a      	mov	r2, r5
   27958:	f815 4b01 	ldrb.w	r4, [r5], #1
   2795c:	5d06      	ldrb	r6, [r0, r4]
   2795e:	f016 0608 	ands.w	r6, r6, #8
   27962:	d1f8      	bne.n	27956 <_strtol_l.constprop.0+0x22>
   27964:	2c2d      	cmp	r4, #45	; 0x2d
   27966:	d124      	bne.n	279b2 <_strtol_l.constprop.0+0x7e>
   27968:	782c      	ldrb	r4, [r5, #0]
   2796a:	2601      	movs	r6, #1
   2796c:	1c95      	adds	r5, r2, #2
   2796e:	bb2b      	cbnz	r3, 279bc <_strtol_l.constprop.0+0x88>
   27970:	2c30      	cmp	r4, #48	; 0x30
   27972:	d030      	beq.n	279d6 <_strtol_l.constprop.0+0xa2>
   27974:	230a      	movs	r3, #10
   27976:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   2797a:	2200      	movs	r2, #0
   2797c:	f10c 3cff 	add.w	ip, ip, #4294967295
   27980:	4610      	mov	r0, r2
   27982:	fbbc f9f3 	udiv	r9, ip, r3
   27986:	fb03 ca19 	mls	sl, r3, r9, ip
   2798a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   2798e:	2f09      	cmp	r7, #9
   27990:	d828      	bhi.n	279e4 <_strtol_l.constprop.0+0xb0>
   27992:	463c      	mov	r4, r7
   27994:	42a3      	cmp	r3, r4
   27996:	dd34      	ble.n	27a02 <_strtol_l.constprop.0+0xce>
   27998:	1c57      	adds	r7, r2, #1
   2799a:	d007      	beq.n	279ac <_strtol_l.constprop.0+0x78>
   2799c:	4581      	cmp	r9, r0
   2799e:	d32d      	bcc.n	279fc <_strtol_l.constprop.0+0xc8>
   279a0:	d101      	bne.n	279a6 <_strtol_l.constprop.0+0x72>
   279a2:	45a2      	cmp	sl, r4
   279a4:	db2a      	blt.n	279fc <_strtol_l.constprop.0+0xc8>
   279a6:	fb00 4003 	mla	r0, r0, r3, r4
   279aa:	2201      	movs	r2, #1
   279ac:	f815 4b01 	ldrb.w	r4, [r5], #1
   279b0:	e7eb      	b.n	2798a <_strtol_l.constprop.0+0x56>
   279b2:	2c2b      	cmp	r4, #43	; 0x2b
   279b4:	bf04      	itt	eq
   279b6:	782c      	ldrbeq	r4, [r5, #0]
   279b8:	1c95      	addeq	r5, r2, #2
   279ba:	e7d8      	b.n	2796e <_strtol_l.constprop.0+0x3a>
   279bc:	2b10      	cmp	r3, #16
   279be:	d1da      	bne.n	27976 <_strtol_l.constprop.0+0x42>
   279c0:	2c30      	cmp	r4, #48	; 0x30
   279c2:	d1d8      	bne.n	27976 <_strtol_l.constprop.0+0x42>
   279c4:	782a      	ldrb	r2, [r5, #0]
   279c6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   279ca:	2a58      	cmp	r2, #88	; 0x58
   279cc:	d1d3      	bne.n	27976 <_strtol_l.constprop.0+0x42>
   279ce:	786c      	ldrb	r4, [r5, #1]
   279d0:	2310      	movs	r3, #16
   279d2:	3502      	adds	r5, #2
   279d4:	e7cf      	b.n	27976 <_strtol_l.constprop.0+0x42>
   279d6:	782b      	ldrb	r3, [r5, #0]
   279d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   279dc:	2b58      	cmp	r3, #88	; 0x58
   279de:	d0f6      	beq.n	279ce <_strtol_l.constprop.0+0x9a>
   279e0:	2308      	movs	r3, #8
   279e2:	e7c8      	b.n	27976 <_strtol_l.constprop.0+0x42>
   279e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   279e8:	2f19      	cmp	r7, #25
   279ea:	d801      	bhi.n	279f0 <_strtol_l.constprop.0+0xbc>
   279ec:	3c37      	subs	r4, #55	; 0x37
   279ee:	e7d1      	b.n	27994 <_strtol_l.constprop.0+0x60>
   279f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   279f4:	2f19      	cmp	r7, #25
   279f6:	d804      	bhi.n	27a02 <_strtol_l.constprop.0+0xce>
   279f8:	3c57      	subs	r4, #87	; 0x57
   279fa:	e7cb      	b.n	27994 <_strtol_l.constprop.0+0x60>
   279fc:	f04f 32ff 	mov.w	r2, #4294967295
   27a00:	e7d4      	b.n	279ac <_strtol_l.constprop.0+0x78>
   27a02:	1c53      	adds	r3, r2, #1
   27a04:	d108      	bne.n	27a18 <_strtol_l.constprop.0+0xe4>
   27a06:	2322      	movs	r3, #34	; 0x22
   27a08:	4660      	mov	r0, ip
   27a0a:	f8ce 3000 	str.w	r3, [lr]
   27a0e:	f1b8 0f00 	cmp.w	r8, #0
   27a12:	d09c      	beq.n	2794e <_strtol_l.constprop.0+0x1a>
   27a14:	1e69      	subs	r1, r5, #1
   27a16:	e006      	b.n	27a26 <_strtol_l.constprop.0+0xf2>
   27a18:	b106      	cbz	r6, 27a1c <_strtol_l.constprop.0+0xe8>
   27a1a:	4240      	negs	r0, r0
   27a1c:	f1b8 0f00 	cmp.w	r8, #0
   27a20:	d095      	beq.n	2794e <_strtol_l.constprop.0+0x1a>
   27a22:	2a00      	cmp	r2, #0
   27a24:	d1f6      	bne.n	27a14 <_strtol_l.constprop.0+0xe0>
   27a26:	f8c8 1000 	str.w	r1, [r8]
   27a2a:	e790      	b.n	2794e <_strtol_l.constprop.0+0x1a>
   27a2c:	000385a8 	.word	0x000385a8

00027a30 <strtol>:
   27a30:	4613      	mov	r3, r2
   27a32:	460a      	mov	r2, r1
   27a34:	4601      	mov	r1, r0
   27a36:	4802      	ldr	r0, [pc, #8]	; (27a40 <strtol+0x10>)
   27a38:	6800      	ldr	r0, [r0, #0]
   27a3a:	f7ff bf7b 	b.w	27934 <_strtol_l.constprop.0>
   27a3e:	bf00      	nop
   27a40:	200087f8 	.word	0x200087f8

00027a44 <_strtoul_l.constprop.0>:
   27a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27a48:	4686      	mov	lr, r0
   27a4a:	460d      	mov	r5, r1
   27a4c:	4e35      	ldr	r6, [pc, #212]	; (27b24 <_strtoul_l.constprop.0+0xe0>)
   27a4e:	4628      	mov	r0, r5
   27a50:	f815 4b01 	ldrb.w	r4, [r5], #1
   27a54:	5d37      	ldrb	r7, [r6, r4]
   27a56:	f017 0708 	ands.w	r7, r7, #8
   27a5a:	d1f8      	bne.n	27a4e <_strtoul_l.constprop.0+0xa>
   27a5c:	2c2d      	cmp	r4, #45	; 0x2d
   27a5e:	d126      	bne.n	27aae <_strtoul_l.constprop.0+0x6a>
   27a60:	782c      	ldrb	r4, [r5, #0]
   27a62:	2701      	movs	r7, #1
   27a64:	1c85      	adds	r5, r0, #2
   27a66:	bb3b      	cbnz	r3, 27ab8 <_strtoul_l.constprop.0+0x74>
   27a68:	2c30      	cmp	r4, #48	; 0x30
   27a6a:	d032      	beq.n	27ad2 <_strtoul_l.constprop.0+0x8e>
   27a6c:	230a      	movs	r3, #10
   27a6e:	f04f 38ff 	mov.w	r8, #4294967295
   27a72:	2600      	movs	r6, #0
   27a74:	fbb8 f8f3 	udiv	r8, r8, r3
   27a78:	fb03 f908 	mul.w	r9, r3, r8
   27a7c:	4630      	mov	r0, r6
   27a7e:	ea6f 0909 	mvn.w	r9, r9
   27a82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   27a86:	f1bc 0f09 	cmp.w	ip, #9
   27a8a:	d829      	bhi.n	27ae0 <_strtoul_l.constprop.0+0x9c>
   27a8c:	4664      	mov	r4, ip
   27a8e:	42a3      	cmp	r3, r4
   27a90:	dd37      	ble.n	27b02 <_strtoul_l.constprop.0+0xbe>
   27a92:	f1b6 3fff 	cmp.w	r6, #4294967295
   27a96:	d007      	beq.n	27aa8 <_strtoul_l.constprop.0+0x64>
   27a98:	4580      	cmp	r8, r0
   27a9a:	d32f      	bcc.n	27afc <_strtoul_l.constprop.0+0xb8>
   27a9c:	d101      	bne.n	27aa2 <_strtoul_l.constprop.0+0x5e>
   27a9e:	45a1      	cmp	r9, r4
   27aa0:	db2c      	blt.n	27afc <_strtoul_l.constprop.0+0xb8>
   27aa2:	fb00 4003 	mla	r0, r0, r3, r4
   27aa6:	2601      	movs	r6, #1
   27aa8:	f815 4b01 	ldrb.w	r4, [r5], #1
   27aac:	e7e9      	b.n	27a82 <_strtoul_l.constprop.0+0x3e>
   27aae:	2c2b      	cmp	r4, #43	; 0x2b
   27ab0:	bf04      	itt	eq
   27ab2:	782c      	ldrbeq	r4, [r5, #0]
   27ab4:	1c85      	addeq	r5, r0, #2
   27ab6:	e7d6      	b.n	27a66 <_strtoul_l.constprop.0+0x22>
   27ab8:	2b10      	cmp	r3, #16
   27aba:	d1d8      	bne.n	27a6e <_strtoul_l.constprop.0+0x2a>
   27abc:	2c30      	cmp	r4, #48	; 0x30
   27abe:	d1d6      	bne.n	27a6e <_strtoul_l.constprop.0+0x2a>
   27ac0:	7828      	ldrb	r0, [r5, #0]
   27ac2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   27ac6:	2858      	cmp	r0, #88	; 0x58
   27ac8:	d1d1      	bne.n	27a6e <_strtoul_l.constprop.0+0x2a>
   27aca:	786c      	ldrb	r4, [r5, #1]
   27acc:	2310      	movs	r3, #16
   27ace:	3502      	adds	r5, #2
   27ad0:	e7cd      	b.n	27a6e <_strtoul_l.constprop.0+0x2a>
   27ad2:	782b      	ldrb	r3, [r5, #0]
   27ad4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27ad8:	2b58      	cmp	r3, #88	; 0x58
   27ada:	d0f6      	beq.n	27aca <_strtoul_l.constprop.0+0x86>
   27adc:	2308      	movs	r3, #8
   27ade:	e7c6      	b.n	27a6e <_strtoul_l.constprop.0+0x2a>
   27ae0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   27ae4:	f1bc 0f19 	cmp.w	ip, #25
   27ae8:	d801      	bhi.n	27aee <_strtoul_l.constprop.0+0xaa>
   27aea:	3c37      	subs	r4, #55	; 0x37
   27aec:	e7cf      	b.n	27a8e <_strtoul_l.constprop.0+0x4a>
   27aee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   27af2:	f1bc 0f19 	cmp.w	ip, #25
   27af6:	d804      	bhi.n	27b02 <_strtoul_l.constprop.0+0xbe>
   27af8:	3c57      	subs	r4, #87	; 0x57
   27afa:	e7c8      	b.n	27a8e <_strtoul_l.constprop.0+0x4a>
   27afc:	f04f 36ff 	mov.w	r6, #4294967295
   27b00:	e7d2      	b.n	27aa8 <_strtoul_l.constprop.0+0x64>
   27b02:	1c73      	adds	r3, r6, #1
   27b04:	d106      	bne.n	27b14 <_strtoul_l.constprop.0+0xd0>
   27b06:	2322      	movs	r3, #34	; 0x22
   27b08:	4630      	mov	r0, r6
   27b0a:	f8ce 3000 	str.w	r3, [lr]
   27b0e:	b932      	cbnz	r2, 27b1e <_strtoul_l.constprop.0+0xda>
   27b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27b14:	b107      	cbz	r7, 27b18 <_strtoul_l.constprop.0+0xd4>
   27b16:	4240      	negs	r0, r0
   27b18:	2a00      	cmp	r2, #0
   27b1a:	d0f9      	beq.n	27b10 <_strtoul_l.constprop.0+0xcc>
   27b1c:	b106      	cbz	r6, 27b20 <_strtoul_l.constprop.0+0xdc>
   27b1e:	1e69      	subs	r1, r5, #1
   27b20:	6011      	str	r1, [r2, #0]
   27b22:	e7f5      	b.n	27b10 <_strtoul_l.constprop.0+0xcc>
   27b24:	000385a8 	.word	0x000385a8

00027b28 <strtoul>:
   27b28:	4613      	mov	r3, r2
   27b2a:	460a      	mov	r2, r1
   27b2c:	4601      	mov	r1, r0
   27b2e:	4802      	ldr	r0, [pc, #8]	; (27b38 <strtoul+0x10>)
   27b30:	6800      	ldr	r0, [r0, #0]
   27b32:	f7ff bf87 	b.w	27a44 <_strtoul_l.constprop.0>
   27b36:	bf00      	nop
   27b38:	200087f8 	.word	0x200087f8

00027b3c <__tzcalc_limits>:
   27b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27b40:	4604      	mov	r4, r0
   27b42:	f000 fdcd 	bl	286e0 <__gettzinfo>
   27b46:	f240 73b1 	movw	r3, #1969	; 0x7b1
   27b4a:	429c      	cmp	r4, r3
   27b4c:	f340 8098 	ble.w	27c80 <__tzcalc_limits+0x144>
   27b50:	f46f 67f6 	mvn.w	r7, #1968	; 0x7b0
   27b54:	f2a4 73b2 	subw	r3, r4, #1970	; 0x7b2
   27b58:	f240 126d 	movw	r2, #365	; 0x16d
   27b5c:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   27b60:	19e5      	adds	r5, r4, r7
   27b62:	4601      	mov	r1, r0
   27b64:	f100 0750 	add.w	r7, r0, #80	; 0x50
   27b68:	6044      	str	r4, [r0, #4]
   27b6a:	10ad      	asrs	r5, r5, #2
   27b6c:	fb02 5503 	mla	r5, r2, r3, r5
   27b70:	f06f 0263 	mvn.w	r2, #99	; 0x63
   27b74:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
   27b78:	fb93 f3f2 	sdiv	r3, r3, r2
   27b7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   27b80:	441d      	add	r5, r3
   27b82:	eb04 030c 	add.w	r3, r4, ip
   27b86:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 27c84 <__tzcalc_limits+0x148>
   27b8a:	fbb3 f3f2 	udiv	r3, r3, r2
   27b8e:	441d      	add	r5, r3
   27b90:	7a0b      	ldrb	r3, [r1, #8]
   27b92:	694a      	ldr	r2, [r1, #20]
   27b94:	2b4a      	cmp	r3, #74	; 0x4a
   27b96:	d131      	bne.n	27bfc <__tzcalc_limits+0xc0>
   27b98:	07a6      	lsls	r6, r4, #30
   27b9a:	eb05 0302 	add.w	r3, r5, r2
   27b9e:	d106      	bne.n	27bae <__tzcalc_limits+0x72>
   27ba0:	f04f 0e64 	mov.w	lr, #100	; 0x64
   27ba4:	fb94 f6fe 	sdiv	r6, r4, lr
   27ba8:	fb0e 4616 	mls	r6, lr, r6, r4
   27bac:	b936      	cbnz	r6, 27bbc <__tzcalc_limits+0x80>
   27bae:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   27bb2:	fb94 f6fe 	sdiv	r6, r4, lr
   27bb6:	fb0e 4616 	mls	r6, lr, r6, r4
   27bba:	b9ee      	cbnz	r6, 27bf8 <__tzcalc_limits+0xbc>
   27bbc:	2a3b      	cmp	r2, #59	; 0x3b
   27bbe:	bfd4      	ite	le
   27bc0:	2200      	movle	r2, #0
   27bc2:	2201      	movgt	r2, #1
   27bc4:	4413      	add	r3, r2
   27bc6:	3b01      	subs	r3, #1
   27bc8:	698a      	ldr	r2, [r1, #24]
   27bca:	fb0c 2303 	mla	r3, ip, r3, r2
   27bce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   27bd0:	4413      	add	r3, r2
   27bd2:	17da      	asrs	r2, r3, #31
   27bd4:	e9c1 3208 	strd	r3, r2, [r1, #32]
   27bd8:	3128      	adds	r1, #40	; 0x28
   27bda:	428f      	cmp	r7, r1
   27bdc:	d1d8      	bne.n	27b90 <__tzcalc_limits+0x54>
   27bde:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
   27be2:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
   27be6:	428c      	cmp	r4, r1
   27be8:	4193      	sbcs	r3, r2
   27bea:	bfb4      	ite	lt
   27bec:	2301      	movlt	r3, #1
   27bee:	2300      	movge	r3, #0
   27bf0:	6003      	str	r3, [r0, #0]
   27bf2:	2001      	movs	r0, #1
   27bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27bf8:	2200      	movs	r2, #0
   27bfa:	e7e3      	b.n	27bc4 <__tzcalc_limits+0x88>
   27bfc:	2b44      	cmp	r3, #68	; 0x44
   27bfe:	d101      	bne.n	27c04 <__tzcalc_limits+0xc8>
   27c00:	18ab      	adds	r3, r5, r2
   27c02:	e7e1      	b.n	27bc8 <__tzcalc_limits+0x8c>
   27c04:	07a3      	lsls	r3, r4, #30
   27c06:	d105      	bne.n	27c14 <__tzcalc_limits+0xd8>
   27c08:	2664      	movs	r6, #100	; 0x64
   27c0a:	fb94 f3f6 	sdiv	r3, r4, r6
   27c0e:	fb06 4313 	mls	r3, r6, r3, r4
   27c12:	bb7b      	cbnz	r3, 27c74 <__tzcalc_limits+0x138>
   27c14:	f44f 73c8 	mov.w	r3, #400	; 0x190
   27c18:	fb94 f6f3 	sdiv	r6, r4, r3
   27c1c:	fb03 4616 	mls	r6, r3, r6, r4
   27c20:	fab6 f686 	clz	r6, r6
   27c24:	0976      	lsrs	r6, r6, #5
   27c26:	f04f 0a30 	mov.w	sl, #48	; 0x30
   27c2a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 27c88 <__tzcalc_limits+0x14c>
   27c2e:	f8d1 900c 	ldr.w	r9, [r1, #12]
   27c32:	462b      	mov	r3, r5
   27c34:	f04f 0800 	mov.w	r8, #0
   27c38:	fb0a e606 	mla	r6, sl, r6, lr
   27c3c:	f108 0801 	add.w	r8, r8, #1
   27c40:	45c1      	cmp	r9, r8
   27c42:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
   27c46:	dc17      	bgt.n	27c78 <__tzcalc_limits+0x13c>
   27c48:	f103 0804 	add.w	r8, r3, #4
   27c4c:	2607      	movs	r6, #7
   27c4e:	fb98 f6f6 	sdiv	r6, r8, r6
   27c52:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   27c56:	eba8 0606 	sub.w	r6, r8, r6
   27c5a:	1b92      	subs	r2, r2, r6
   27c5c:	690e      	ldr	r6, [r1, #16]
   27c5e:	f106 36ff 	add.w	r6, r6, #4294967295
   27c62:	bf48      	it	mi
   27c64:	3207      	addmi	r2, #7
   27c66:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   27c6a:	4432      	add	r2, r6
   27c6c:	4572      	cmp	r2, lr
   27c6e:	da05      	bge.n	27c7c <__tzcalc_limits+0x140>
   27c70:	4413      	add	r3, r2
   27c72:	e7a9      	b.n	27bc8 <__tzcalc_limits+0x8c>
   27c74:	2601      	movs	r6, #1
   27c76:	e7d6      	b.n	27c26 <__tzcalc_limits+0xea>
   27c78:	4473      	add	r3, lr
   27c7a:	e7df      	b.n	27c3c <__tzcalc_limits+0x100>
   27c7c:	3a07      	subs	r2, #7
   27c7e:	e7f5      	b.n	27c6c <__tzcalc_limits+0x130>
   27c80:	2000      	movs	r0, #0
   27c82:	e7b7      	b.n	27bf4 <__tzcalc_limits+0xb8>
   27c84:	00015180 	.word	0x00015180
   27c88:	000341c0 	.word	0x000341c0

00027c8c <__tz_lock>:
   27c8c:	4801      	ldr	r0, [pc, #4]	; (27c94 <__tz_lock+0x8>)
   27c8e:	f003 be1e 	b.w	2b8ce <__retarget_lock_acquire>
   27c92:	bf00      	nop
   27c94:	20008c40 	.word	0x20008c40

00027c98 <__tz_unlock>:
   27c98:	4801      	ldr	r0, [pc, #4]	; (27ca0 <__tz_unlock+0x8>)
   27c9a:	f003 be24 	b.w	2b8e6 <__retarget_lock_release>
   27c9e:	bf00      	nop
   27ca0:	20008c40 	.word	0x20008c40

00027ca4 <_tzset_unlocked>:
   27ca4:	4b01      	ldr	r3, [pc, #4]	; (27cac <_tzset_unlocked+0x8>)
   27ca6:	6818      	ldr	r0, [r3, #0]
   27ca8:	f000 b802 	b.w	27cb0 <_tzset_unlocked_r>
   27cac:	200087f8 	.word	0x200087f8

00027cb0 <_tzset_unlocked_r>:
   27cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27cb4:	4607      	mov	r7, r0
   27cb6:	b08d      	sub	sp, #52	; 0x34
   27cb8:	f000 fd12 	bl	286e0 <__gettzinfo>
   27cbc:	49b7      	ldr	r1, [pc, #732]	; (27f9c <_tzset_unlocked_r+0x2ec>)
   27cbe:	4604      	mov	r4, r0
   27cc0:	4638      	mov	r0, r7
   27cc2:	f00a f965 	bl	31f90 <_getenv_r>
   27cc6:	4eb6      	ldr	r6, [pc, #728]	; (27fa0 <_tzset_unlocked_r+0x2f0>)
   27cc8:	4605      	mov	r5, r0
   27cca:	b970      	cbnz	r0, 27cea <_tzset_unlocked_r+0x3a>
   27ccc:	4bb5      	ldr	r3, [pc, #724]	; (27fa4 <_tzset_unlocked_r+0x2f4>)
   27cce:	4ab6      	ldr	r2, [pc, #728]	; (27fa8 <_tzset_unlocked_r+0x2f8>)
   27cd0:	6018      	str	r0, [r3, #0]
   27cd2:	4bb6      	ldr	r3, [pc, #728]	; (27fac <_tzset_unlocked_r+0x2fc>)
   27cd4:	6018      	str	r0, [r3, #0]
   27cd6:	4bb6      	ldr	r3, [pc, #728]	; (27fb0 <_tzset_unlocked_r+0x300>)
   27cd8:	6830      	ldr	r0, [r6, #0]
   27cda:	e9c3 2200 	strd	r2, r2, [r3]
   27cde:	f7fe ff41 	bl	26b64 <free>
   27ce2:	6035      	str	r5, [r6, #0]
   27ce4:	b00d      	add	sp, #52	; 0x34
   27ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27cea:	6831      	ldr	r1, [r6, #0]
   27cec:	2900      	cmp	r1, #0
   27cee:	d164      	bne.n	27dba <_tzset_unlocked_r+0x10a>
   27cf0:	6830      	ldr	r0, [r6, #0]
   27cf2:	f7fe ff37 	bl	26b64 <free>
   27cf6:	4628      	mov	r0, r5
   27cf8:	f7e1 fb87 	bl	940a <strlen>
   27cfc:	1c41      	adds	r1, r0, #1
   27cfe:	4638      	mov	r0, r7
   27d00:	f7ff f9f2 	bl	270e8 <_malloc_r>
   27d04:	6030      	str	r0, [r6, #0]
   27d06:	2800      	cmp	r0, #0
   27d08:	d15c      	bne.n	27dc4 <_tzset_unlocked_r+0x114>
   27d0a:	782b      	ldrb	r3, [r5, #0]
   27d0c:	ae0a      	add	r6, sp, #40	; 0x28
   27d0e:	4aa9      	ldr	r2, [pc, #676]	; (27fb4 <_tzset_unlocked_r+0x304>)
   27d10:	2b3a      	cmp	r3, #58	; 0x3a
   27d12:	49a9      	ldr	r1, [pc, #676]	; (27fb8 <_tzset_unlocked_r+0x308>)
   27d14:	4633      	mov	r3, r6
   27d16:	bf08      	it	eq
   27d18:	3501      	addeq	r5, #1
   27d1a:	4628      	mov	r0, r5
   27d1c:	f001 faee 	bl	292fc <siscanf>
   27d20:	2800      	cmp	r0, #0
   27d22:	dddf      	ble.n	27ce4 <_tzset_unlocked_r+0x34>
   27d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27d26:	eb05 0903 	add.w	r9, r5, r3
   27d2a:	5ceb      	ldrb	r3, [r5, r3]
   27d2c:	2b2d      	cmp	r3, #45	; 0x2d
   27d2e:	d14d      	bne.n	27dcc <_tzset_unlocked_r+0x11c>
   27d30:	f109 0901 	add.w	r9, r9, #1
   27d34:	f04f 3aff 	mov.w	sl, #4294967295
   27d38:	af08      	add	r7, sp, #32
   27d3a:	f10d 081e 	add.w	r8, sp, #30
   27d3e:	2500      	movs	r5, #0
   27d40:	4633      	mov	r3, r6
   27d42:	aa07      	add	r2, sp, #28
   27d44:	499d      	ldr	r1, [pc, #628]	; (27fbc <_tzset_unlocked_r+0x30c>)
   27d46:	4648      	mov	r0, r9
   27d48:	9603      	str	r6, [sp, #12]
   27d4a:	f8cd 8000 	str.w	r8, [sp]
   27d4e:	f8ad 501e 	strh.w	r5, [sp, #30]
   27d52:	f8ad 5020 	strh.w	r5, [sp, #32]
   27d56:	e9cd 6701 	strd	r6, r7, [sp, #4]
   27d5a:	f001 facf 	bl	292fc <siscanf>
   27d5e:	42a8      	cmp	r0, r5
   27d60:	ddc0      	ble.n	27ce4 <_tzset_unlocked_r+0x34>
   27d62:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   27d66:	213c      	movs	r1, #60	; 0x3c
   27d68:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27d6c:	f8df b240 	ldr.w	fp, [pc, #576]	; 27fb0 <_tzset_unlocked_r+0x300>
   27d70:	fb01 3302 	mla	r3, r1, r2, r3
   27d74:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   27d78:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   27d7c:	fb01 3302 	mla	r3, r1, r2, r3
   27d80:	498d      	ldr	r1, [pc, #564]	; (27fb8 <_tzset_unlocked_r+0x308>)
   27d82:	fb0a f303 	mul.w	r3, sl, r3
   27d86:	62a3      	str	r3, [r4, #40]	; 0x28
   27d88:	4b8a      	ldr	r3, [pc, #552]	; (27fb4 <_tzset_unlocked_r+0x304>)
   27d8a:	f8cb 3000 	str.w	r3, [fp]
   27d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27d90:	eb09 0a03 	add.w	sl, r9, r3
   27d94:	f8df 9228 	ldr.w	r9, [pc, #552]	; 27fc0 <_tzset_unlocked_r+0x310>
   27d98:	4633      	mov	r3, r6
   27d9a:	464a      	mov	r2, r9
   27d9c:	4650      	mov	r0, sl
   27d9e:	f001 faad 	bl	292fc <siscanf>
   27da2:	42a8      	cmp	r0, r5
   27da4:	dc19      	bgt.n	27dda <_tzset_unlocked_r+0x12a>
   27da6:	f8db 3000 	ldr.w	r3, [fp]
   27daa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   27dac:	f8cb 3004 	str.w	r3, [fp, #4]
   27db0:	4b7c      	ldr	r3, [pc, #496]	; (27fa4 <_tzset_unlocked_r+0x2f4>)
   27db2:	601a      	str	r2, [r3, #0]
   27db4:	4b7d      	ldr	r3, [pc, #500]	; (27fac <_tzset_unlocked_r+0x2fc>)
   27db6:	601d      	str	r5, [r3, #0]
   27db8:	e794      	b.n	27ce4 <_tzset_unlocked_r+0x34>
   27dba:	f7e1 fb1c 	bl	93f6 <strcmp>
   27dbe:	2800      	cmp	r0, #0
   27dc0:	d196      	bne.n	27cf0 <_tzset_unlocked_r+0x40>
   27dc2:	e78f      	b.n	27ce4 <_tzset_unlocked_r+0x34>
   27dc4:	4629      	mov	r1, r5
   27dc6:	f009 fe2b 	bl	31a20 <strcpy>
   27dca:	e79e      	b.n	27d0a <_tzset_unlocked_r+0x5a>
   27dcc:	2b2b      	cmp	r3, #43	; 0x2b
   27dce:	f04f 0a01 	mov.w	sl, #1
   27dd2:	bf08      	it	eq
   27dd4:	f109 0901 	addeq.w	r9, r9, #1
   27dd8:	e7ae      	b.n	27d38 <_tzset_unlocked_r+0x88>
   27dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27ddc:	f8cb 9004 	str.w	r9, [fp, #4]
   27de0:	eb0a 0903 	add.w	r9, sl, r3
   27de4:	f81a 3003 	ldrb.w	r3, [sl, r3]
   27de8:	2b2d      	cmp	r3, #45	; 0x2d
   27dea:	f040 808f 	bne.w	27f0c <_tzset_unlocked_r+0x25c>
   27dee:	f109 0901 	add.w	r9, r9, #1
   27df2:	f04f 35ff 	mov.w	r5, #4294967295
   27df6:	2300      	movs	r3, #0
   27df8:	aa07      	add	r2, sp, #28
   27dfa:	4970      	ldr	r1, [pc, #448]	; (27fbc <_tzset_unlocked_r+0x30c>)
   27dfc:	4648      	mov	r0, r9
   27dfe:	f8ad 301c 	strh.w	r3, [sp, #28]
   27e02:	f8ad 301e 	strh.w	r3, [sp, #30]
   27e06:	f8ad 3020 	strh.w	r3, [sp, #32]
   27e0a:	930a      	str	r3, [sp, #40]	; 0x28
   27e0c:	4633      	mov	r3, r6
   27e0e:	e9cd 7602 	strd	r7, r6, [sp, #8]
   27e12:	e9cd 8600 	strd	r8, r6, [sp]
   27e16:	f001 fa71 	bl	292fc <siscanf>
   27e1a:	2800      	cmp	r0, #0
   27e1c:	dc7d      	bgt.n	27f1a <_tzset_unlocked_r+0x26a>
   27e1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27e20:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   27e24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   27e26:	f04f 0b00 	mov.w	fp, #0
   27e2a:	6523      	str	r3, [r4, #80]	; 0x50
   27e2c:	444d      	add	r5, r9
   27e2e:	46a1      	mov	r9, r4
   27e30:	782b      	ldrb	r3, [r5, #0]
   27e32:	2b2c      	cmp	r3, #44	; 0x2c
   27e34:	bf08      	it	eq
   27e36:	3501      	addeq	r5, #1
   27e38:	f895 a000 	ldrb.w	sl, [r5]
   27e3c:	f1ba 0f4d 	cmp.w	sl, #77	; 0x4d
   27e40:	d17d      	bne.n	27f3e <_tzset_unlocked_r+0x28e>
   27e42:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   27e46:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   27e4a:	495e      	ldr	r1, [pc, #376]	; (27fc4 <_tzset_unlocked_r+0x314>)
   27e4c:	4628      	mov	r0, r5
   27e4e:	9603      	str	r6, [sp, #12]
   27e50:	e9cd 6301 	strd	r6, r3, [sp, #4]
   27e54:	ab09      	add	r3, sp, #36	; 0x24
   27e56:	9300      	str	r3, [sp, #0]
   27e58:	4633      	mov	r3, r6
   27e5a:	f001 fa4f 	bl	292fc <siscanf>
   27e5e:	2803      	cmp	r0, #3
   27e60:	f47f af40 	bne.w	27ce4 <_tzset_unlocked_r+0x34>
   27e64:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   27e68:	1e4b      	subs	r3, r1, #1
   27e6a:	2b0b      	cmp	r3, #11
   27e6c:	f63f af3a 	bhi.w	27ce4 <_tzset_unlocked_r+0x34>
   27e70:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   27e74:	1e53      	subs	r3, r2, #1
   27e76:	2b04      	cmp	r3, #4
   27e78:	f63f af34 	bhi.w	27ce4 <_tzset_unlocked_r+0x34>
   27e7c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   27e80:	2b06      	cmp	r3, #6
   27e82:	f63f af2f 	bhi.w	27ce4 <_tzset_unlocked_r+0x34>
   27e86:	f889 a008 	strb.w	sl, [r9, #8]
   27e8a:	f8c9 3014 	str.w	r3, [r9, #20]
   27e8e:	e9c9 1203 	strd	r1, r2, [r9, #12]
   27e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27e94:	eb05 0a03 	add.w	sl, r5, r3
   27e98:	2302      	movs	r3, #2
   27e9a:	f8ad 301c 	strh.w	r3, [sp, #28]
   27e9e:	2300      	movs	r3, #0
   27ea0:	f8ad 301e 	strh.w	r3, [sp, #30]
   27ea4:	f8ad 3020 	strh.w	r3, [sp, #32]
   27ea8:	930a      	str	r3, [sp, #40]	; 0x28
   27eaa:	f89a 3000 	ldrb.w	r3, [sl]
   27eae:	2b2f      	cmp	r3, #47	; 0x2f
   27eb0:	d109      	bne.n	27ec6 <_tzset_unlocked_r+0x216>
   27eb2:	4633      	mov	r3, r6
   27eb4:	aa07      	add	r2, sp, #28
   27eb6:	4944      	ldr	r1, [pc, #272]	; (27fc8 <_tzset_unlocked_r+0x318>)
   27eb8:	4650      	mov	r0, sl
   27eba:	e9cd 7602 	strd	r7, r6, [sp, #8]
   27ebe:	e9cd 8600 	strd	r8, r6, [sp]
   27ec2:	f001 fa1b 	bl	292fc <siscanf>
   27ec6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   27eca:	213c      	movs	r1, #60	; 0x3c
   27ecc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27ed0:	f109 0928 	add.w	r9, r9, #40	; 0x28
   27ed4:	fb01 3302 	mla	r3, r1, r2, r3
   27ed8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   27edc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   27ee0:	fb01 3302 	mla	r3, r1, r2, r3
   27ee4:	f849 3c10 	str.w	r3, [r9, #-16]
   27ee8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   27eea:	4455      	add	r5, sl
   27eec:	f1bb 0f00 	cmp.w	fp, #0
   27ef0:	d022      	beq.n	27f38 <_tzset_unlocked_r+0x288>
   27ef2:	6860      	ldr	r0, [r4, #4]
   27ef4:	f7ff fe22 	bl	27b3c <__tzcalc_limits>
   27ef8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   27efa:	4b2a      	ldr	r3, [pc, #168]	; (27fa4 <_tzset_unlocked_r+0x2f4>)
   27efc:	601a      	str	r2, [r3, #0]
   27efe:	6d23      	ldr	r3, [r4, #80]	; 0x50
   27f00:	1a9b      	subs	r3, r3, r2
   27f02:	4a2a      	ldr	r2, [pc, #168]	; (27fac <_tzset_unlocked_r+0x2fc>)
   27f04:	bf18      	it	ne
   27f06:	2301      	movne	r3, #1
   27f08:	6013      	str	r3, [r2, #0]
   27f0a:	e6eb      	b.n	27ce4 <_tzset_unlocked_r+0x34>
   27f0c:	2b2b      	cmp	r3, #43	; 0x2b
   27f0e:	f04f 0501 	mov.w	r5, #1
   27f12:	bf08      	it	eq
   27f14:	f109 0901 	addeq.w	r9, r9, #1
   27f18:	e76d      	b.n	27df6 <_tzset_unlocked_r+0x146>
   27f1a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   27f1e:	213c      	movs	r1, #60	; 0x3c
   27f20:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27f24:	fb01 3302 	mla	r3, r1, r2, r3
   27f28:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   27f2c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   27f30:	fb01 3302 	mla	r3, r1, r2, r3
   27f34:	436b      	muls	r3, r5
   27f36:	e775      	b.n	27e24 <_tzset_unlocked_r+0x174>
   27f38:	f04f 0b01 	mov.w	fp, #1
   27f3c:	e778      	b.n	27e30 <_tzset_unlocked_r+0x180>
   27f3e:	f1ba 0f4a 	cmp.w	sl, #74	; 0x4a
   27f42:	f04f 020a 	mov.w	r2, #10
   27f46:	a90b      	add	r1, sp, #44	; 0x2c
   27f48:	bf06      	itte	eq
   27f4a:	3501      	addeq	r5, #1
   27f4c:	4653      	moveq	r3, sl
   27f4e:	2344      	movne	r3, #68	; 0x44
   27f50:	4628      	mov	r0, r5
   27f52:	9305      	str	r3, [sp, #20]
   27f54:	f7ff fde8 	bl	27b28 <strtoul>
   27f58:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   27f5c:	9b05      	ldr	r3, [sp, #20]
   27f5e:	45aa      	cmp	sl, r5
   27f60:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   27f64:	d114      	bne.n	27f90 <_tzset_unlocked_r+0x2e0>
   27f66:	234d      	movs	r3, #77	; 0x4d
   27f68:	f1bb 0f00 	cmp.w	fp, #0
   27f6c:	d107      	bne.n	27f7e <_tzset_unlocked_r+0x2ce>
   27f6e:	2103      	movs	r1, #3
   27f70:	7223      	strb	r3, [r4, #8]
   27f72:	2302      	movs	r3, #2
   27f74:	f8c4 b014 	str.w	fp, [r4, #20]
   27f78:	e9c4 1303 	strd	r1, r3, [r4, #12]
   27f7c:	e78c      	b.n	27e98 <_tzset_unlocked_r+0x1e8>
   27f7e:	220b      	movs	r2, #11
   27f80:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   27f84:	2301      	movs	r3, #1
   27f86:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   27f8a:	2300      	movs	r3, #0
   27f8c:	63e3      	str	r3, [r4, #60]	; 0x3c
   27f8e:	e783      	b.n	27e98 <_tzset_unlocked_r+0x1e8>
   27f90:	b280      	uxth	r0, r0
   27f92:	f889 3008 	strb.w	r3, [r9, #8]
   27f96:	f8c9 0014 	str.w	r0, [r9, #20]
   27f9a:	e77d      	b.n	27e98 <_tzset_unlocked_r+0x1e8>
   27f9c:	00038763 	.word	0x00038763
   27fa0:	20030d74 	.word	0x20030d74
   27fa4:	20030d78 	.word	0x20030d78
   27fa8:	00038766 	.word	0x00038766
   27fac:	20030d7c 	.word	0x20030d7c
   27fb0:	2000885c 	.word	0x2000885c
   27fb4:	20031e19 	.word	0x20031e19
   27fb8:	0003876a 	.word	0x0003876a
   27fbc:	0003878d 	.word	0x0003878d
   27fc0:	20031e0e 	.word	0x20031e0e
   27fc4:	00038779 	.word	0x00038779
   27fc8:	0003878c 	.word	0x0003878c

00027fcc <vsniprintf>:
   27fcc:	b507      	push	{r0, r1, r2, lr}
   27fce:	9300      	str	r3, [sp, #0]
   27fd0:	4613      	mov	r3, r2
   27fd2:	460a      	mov	r2, r1
   27fd4:	4601      	mov	r1, r0
   27fd6:	4803      	ldr	r0, [pc, #12]	; (27fe4 <vsniprintf+0x18>)
   27fd8:	6800      	ldr	r0, [r0, #0]
   27fda:	f009 fdbd 	bl	31b58 <_vsniprintf_r>
   27fde:	b003      	add	sp, #12
   27fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   27fe4:	200087f8 	.word	0x200087f8

00027fe8 <_vsiprintf_r>:
   27fe8:	b500      	push	{lr}
   27fea:	b09b      	sub	sp, #108	; 0x6c
   27fec:	9100      	str	r1, [sp, #0]
   27fee:	9104      	str	r1, [sp, #16]
   27ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   27ff4:	9105      	str	r1, [sp, #20]
   27ff6:	9102      	str	r1, [sp, #8]
   27ff8:	4905      	ldr	r1, [pc, #20]	; (28010 <_vsiprintf_r+0x28>)
   27ffa:	9103      	str	r1, [sp, #12]
   27ffc:	4669      	mov	r1, sp
   27ffe:	f000 ff55 	bl	28eac <_svfiprintf_r>
   28002:	9b00      	ldr	r3, [sp, #0]
   28004:	2200      	movs	r2, #0
   28006:	701a      	strb	r2, [r3, #0]
   28008:	b01b      	add	sp, #108	; 0x6c
   2800a:	f85d fb04 	ldr.w	pc, [sp], #4
   2800e:	bf00      	nop
   28010:	ffff0208 	.word	0xffff0208

00028014 <vsiprintf>:
   28014:	4613      	mov	r3, r2
   28016:	460a      	mov	r2, r1
   28018:	4601      	mov	r1, r0
   2801a:	4802      	ldr	r0, [pc, #8]	; (28024 <vsiprintf+0x10>)
   2801c:	6800      	ldr	r0, [r0, #0]
   2801e:	f7ff bfe3 	b.w	27fe8 <_vsiprintf_r>
   28022:	bf00      	nop
   28024:	200087f8 	.word	0x200087f8

00028028 <__assert_func>:
   28028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2802a:	4614      	mov	r4, r2
   2802c:	461a      	mov	r2, r3
   2802e:	4b09      	ldr	r3, [pc, #36]	; (28054 <__assert_func+0x2c>)
   28030:	4605      	mov	r5, r0
   28032:	681b      	ldr	r3, [r3, #0]
   28034:	68d8      	ldr	r0, [r3, #12]
   28036:	b954      	cbnz	r4, 2804e <__assert_func+0x26>
   28038:	4b07      	ldr	r3, [pc, #28]	; (28058 <__assert_func+0x30>)
   2803a:	461c      	mov	r4, r3
   2803c:	9100      	str	r1, [sp, #0]
   2803e:	4907      	ldr	r1, [pc, #28]	; (2805c <__assert_func+0x34>)
   28040:	e9cd 3401 	strd	r3, r4, [sp, #4]
   28044:	462b      	mov	r3, r5
   28046:	f000 f8cd 	bl	281e4 <fiprintf>
   2804a:	f00a f97a 	bl	32342 <abort>
   2804e:	4b04      	ldr	r3, [pc, #16]	; (28060 <__assert_func+0x38>)
   28050:	e7f4      	b.n	2803c <__assert_func+0x14>
   28052:	bf00      	nop
   28054:	200087f8 	.word	0x200087f8
   28058:	00036445 	.word	0x00036445
   2805c:	000387ac 	.word	0x000387ac
   28060:	0003879f 	.word	0x0003879f

00028064 <std>:
   28064:	2300      	movs	r3, #0
   28066:	b510      	push	{r4, lr}
   28068:	4604      	mov	r4, r0
   2806a:	6083      	str	r3, [r0, #8]
   2806c:	8181      	strh	r1, [r0, #12]
   2806e:	4619      	mov	r1, r3
   28070:	6643      	str	r3, [r0, #100]	; 0x64
   28072:	81c2      	strh	r2, [r0, #14]
   28074:	2208      	movs	r2, #8
   28076:	6183      	str	r3, [r0, #24]
   28078:	e9c0 3300 	strd	r3, r3, [r0]
   2807c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   28080:	305c      	adds	r0, #92	; 0x5c
   28082:	f009 fb7e 	bl	31782 <memset>
   28086:	4b05      	ldr	r3, [pc, #20]	; (2809c <std+0x38>)
   28088:	6224      	str	r4, [r4, #32]
   2808a:	6263      	str	r3, [r4, #36]	; 0x24
   2808c:	4b04      	ldr	r3, [pc, #16]	; (280a0 <std+0x3c>)
   2808e:	62a3      	str	r3, [r4, #40]	; 0x28
   28090:	4b04      	ldr	r3, [pc, #16]	; (280a4 <std+0x40>)
   28092:	62e3      	str	r3, [r4, #44]	; 0x2c
   28094:	4b04      	ldr	r3, [pc, #16]	; (280a8 <std+0x44>)
   28096:	6323      	str	r3, [r4, #48]	; 0x30
   28098:	bd10      	pop	{r4, pc}
   2809a:	bf00      	nop
   2809c:	0003229f 	.word	0x0003229f
   280a0:	000322c5 	.word	0x000322c5
   280a4:	000322fd 	.word	0x000322fd
   280a8:	00032321 	.word	0x00032321

000280ac <_cleanup_r>:
   280ac:	4901      	ldr	r1, [pc, #4]	; (280b4 <_cleanup_r+0x8>)
   280ae:	f009 be29 	b.w	31d04 <_fwalk_reent>
   280b2:	bf00      	nop
   280b4:	00029529 	.word	0x00029529

000280b8 <__sfp_lock_acquire>:
   280b8:	4801      	ldr	r0, [pc, #4]	; (280c0 <__sfp_lock_acquire+0x8>)
   280ba:	f003 bc0e 	b.w	2b8da <__retarget_lock_acquire_recursive>
   280be:	bf00      	nop
   280c0:	20008bc8 	.word	0x20008bc8

000280c4 <__sfp_lock_release>:
   280c4:	4801      	ldr	r0, [pc, #4]	; (280cc <__sfp_lock_release+0x8>)
   280c6:	f003 bc10 	b.w	2b8ea <__retarget_lock_release_recursive>
   280ca:	bf00      	nop
   280cc:	20008bc8 	.word	0x20008bc8

000280d0 <__sinit_lock_acquire>:
   280d0:	4801      	ldr	r0, [pc, #4]	; (280d8 <__sinit_lock_acquire+0x8>)
   280d2:	f003 bc02 	b.w	2b8da <__retarget_lock_acquire_recursive>
   280d6:	bf00      	nop
   280d8:	20008bdc 	.word	0x20008bdc

000280dc <__sinit_lock_release>:
   280dc:	4801      	ldr	r0, [pc, #4]	; (280e4 <__sinit_lock_release+0x8>)
   280de:	f003 bc04 	b.w	2b8ea <__retarget_lock_release_recursive>
   280e2:	bf00      	nop
   280e4:	20008bdc 	.word	0x20008bdc

000280e8 <__sinit>:
   280e8:	b510      	push	{r4, lr}
   280ea:	4604      	mov	r4, r0
   280ec:	f7ff fff0 	bl	280d0 <__sinit_lock_acquire>
   280f0:	69a3      	ldr	r3, [r4, #24]
   280f2:	b11b      	cbz	r3, 280fc <__sinit+0x14>
   280f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   280f8:	f7ff bff0 	b.w	280dc <__sinit_lock_release>
   280fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   28100:	6523      	str	r3, [r4, #80]	; 0x50
   28102:	4620      	mov	r0, r4
   28104:	4b12      	ldr	r3, [pc, #72]	; (28150 <__sinit+0x68>)
   28106:	4a13      	ldr	r2, [pc, #76]	; (28154 <__sinit+0x6c>)
   28108:	681b      	ldr	r3, [r3, #0]
   2810a:	62a2      	str	r2, [r4, #40]	; 0x28
   2810c:	42a3      	cmp	r3, r4
   2810e:	bf04      	itt	eq
   28110:	2301      	moveq	r3, #1
   28112:	61a3      	streq	r3, [r4, #24]
   28114:	f000 f820 	bl	28158 <__sfp>
   28118:	6060      	str	r0, [r4, #4]
   2811a:	4620      	mov	r0, r4
   2811c:	f000 f81c 	bl	28158 <__sfp>
   28120:	60a0      	str	r0, [r4, #8]
   28122:	4620      	mov	r0, r4
   28124:	f000 f818 	bl	28158 <__sfp>
   28128:	2200      	movs	r2, #0
   2812a:	2104      	movs	r1, #4
   2812c:	60e0      	str	r0, [r4, #12]
   2812e:	6860      	ldr	r0, [r4, #4]
   28130:	f7ff ff98 	bl	28064 <std>
   28134:	2201      	movs	r2, #1
   28136:	2109      	movs	r1, #9
   28138:	68a0      	ldr	r0, [r4, #8]
   2813a:	f7ff ff93 	bl	28064 <std>
   2813e:	2202      	movs	r2, #2
   28140:	2112      	movs	r1, #18
   28142:	68e0      	ldr	r0, [r4, #12]
   28144:	f7ff ff8e 	bl	28064 <std>
   28148:	2301      	movs	r3, #1
   2814a:	61a3      	str	r3, [r4, #24]
   2814c:	e7d2      	b.n	280f4 <__sinit+0xc>
   2814e:	bf00      	nop
   28150:	000340cc 	.word	0x000340cc
   28154:	000280ad 	.word	0x000280ad

00028158 <__sfp>:
   28158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2815a:	4607      	mov	r7, r0
   2815c:	f7ff ffac 	bl	280b8 <__sfp_lock_acquire>
   28160:	4b1e      	ldr	r3, [pc, #120]	; (281dc <__sfp+0x84>)
   28162:	681e      	ldr	r6, [r3, #0]
   28164:	69b3      	ldr	r3, [r6, #24]
   28166:	b913      	cbnz	r3, 2816e <__sfp+0x16>
   28168:	4630      	mov	r0, r6
   2816a:	f7ff ffbd 	bl	280e8 <__sinit>
   2816e:	3648      	adds	r6, #72	; 0x48
   28170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   28174:	3b01      	subs	r3, #1
   28176:	d503      	bpl.n	28180 <__sfp+0x28>
   28178:	6833      	ldr	r3, [r6, #0]
   2817a:	b30b      	cbz	r3, 281c0 <__sfp+0x68>
   2817c:	6836      	ldr	r6, [r6, #0]
   2817e:	e7f7      	b.n	28170 <__sfp+0x18>
   28180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   28184:	b9d5      	cbnz	r5, 281bc <__sfp+0x64>
   28186:	4b16      	ldr	r3, [pc, #88]	; (281e0 <__sfp+0x88>)
   28188:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2818c:	6665      	str	r5, [r4, #100]	; 0x64
   2818e:	60e3      	str	r3, [r4, #12]
   28190:	f003 fb93 	bl	2b8ba <__retarget_lock_init_recursive>
   28194:	f7ff ff96 	bl	280c4 <__sfp_lock_release>
   28198:	2208      	movs	r2, #8
   2819a:	4629      	mov	r1, r5
   2819c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   281a0:	6025      	str	r5, [r4, #0]
   281a2:	61a5      	str	r5, [r4, #24]
   281a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   281a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
   281ac:	f009 fae9 	bl	31782 <memset>
   281b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   281b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   281b8:	4620      	mov	r0, r4
   281ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   281bc:	3468      	adds	r4, #104	; 0x68
   281be:	e7d9      	b.n	28174 <__sfp+0x1c>
   281c0:	2104      	movs	r1, #4
   281c2:	4638      	mov	r0, r7
   281c4:	f009 fd88 	bl	31cd8 <__sfmoreglue>
   281c8:	4604      	mov	r4, r0
   281ca:	6030      	str	r0, [r6, #0]
   281cc:	2800      	cmp	r0, #0
   281ce:	d1d5      	bne.n	2817c <__sfp+0x24>
   281d0:	f7ff ff78 	bl	280c4 <__sfp_lock_release>
   281d4:	230c      	movs	r3, #12
   281d6:	603b      	str	r3, [r7, #0]
   281d8:	e7ee      	b.n	281b8 <__sfp+0x60>
   281da:	bf00      	nop
   281dc:	000340cc 	.word	0x000340cc
   281e0:	ffff0001 	.word	0xffff0001

000281e4 <fiprintf>:
   281e4:	b40e      	push	{r1, r2, r3}
   281e6:	b503      	push	{r0, r1, lr}
   281e8:	ab03      	add	r3, sp, #12
   281ea:	4601      	mov	r1, r0
   281ec:	4805      	ldr	r0, [pc, #20]	; (28204 <fiprintf+0x20>)
   281ee:	f853 2b04 	ldr.w	r2, [r3], #4
   281f2:	6800      	ldr	r0, [r0, #0]
   281f4:	9301      	str	r3, [sp, #4]
   281f6:	f000 ff55 	bl	290a4 <_vfiprintf_r>
   281fa:	b002      	add	sp, #8
   281fc:	f85d eb04 	ldr.w	lr, [sp], #4
   28200:	b003      	add	sp, #12
   28202:	4770      	bx	lr
   28204:	200087f8 	.word	0x200087f8

00028208 <__gethex>:
   28208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2820c:	b08b      	sub	sp, #44	; 0x2c
   2820e:	468b      	mov	fp, r1
   28210:	4690      	mov	r8, r2
   28212:	9305      	str	r3, [sp, #20]
   28214:	4bac      	ldr	r3, [pc, #688]	; (284c8 <__gethex+0x2c0>)
   28216:	9002      	str	r0, [sp, #8]
   28218:	681b      	ldr	r3, [r3, #0]
   2821a:	4618      	mov	r0, r3
   2821c:	9303      	str	r3, [sp, #12]
   2821e:	f7e1 f8f4 	bl	940a <strlen>
   28222:	9b03      	ldr	r3, [sp, #12]
   28224:	9001      	str	r0, [sp, #4]
   28226:	4403      	add	r3, r0
   28228:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2822c:	9306      	str	r3, [sp, #24]
   2822e:	f8db 3000 	ldr.w	r3, [fp]
   28232:	1c9a      	adds	r2, r3, #2
   28234:	4617      	mov	r7, r2
   28236:	f812 0b01 	ldrb.w	r0, [r2], #1
   2823a:	2830      	cmp	r0, #48	; 0x30
   2823c:	d0fa      	beq.n	28234 <__gethex+0x2c>
   2823e:	1afb      	subs	r3, r7, r3
   28240:	f1a3 0a02 	sub.w	sl, r3, #2
   28244:	f009 fdce 	bl	31de4 <__hexdig_fun>
   28248:	4604      	mov	r4, r0
   2824a:	2800      	cmp	r0, #0
   2824c:	d138      	bne.n	282c0 <__gethex+0xb8>
   2824e:	9a01      	ldr	r2, [sp, #4]
   28250:	4638      	mov	r0, r7
   28252:	9903      	ldr	r1, [sp, #12]
   28254:	f009 fbec 	bl	31a30 <strncmp>
   28258:	4605      	mov	r5, r0
   2825a:	2800      	cmp	r0, #0
   2825c:	d164      	bne.n	28328 <__gethex+0x120>
   2825e:	9b01      	ldr	r3, [sp, #4]
   28260:	5cf8      	ldrb	r0, [r7, r3]
   28262:	18fe      	adds	r6, r7, r3
   28264:	f009 fdbe 	bl	31de4 <__hexdig_fun>
   28268:	2800      	cmp	r0, #0
   2826a:	d05f      	beq.n	2832c <__gethex+0x124>
   2826c:	4633      	mov	r3, r6
   2826e:	7818      	ldrb	r0, [r3, #0]
   28270:	461f      	mov	r7, r3
   28272:	3301      	adds	r3, #1
   28274:	2830      	cmp	r0, #48	; 0x30
   28276:	d0fa      	beq.n	2826e <__gethex+0x66>
   28278:	f009 fdb4 	bl	31de4 <__hexdig_fun>
   2827c:	fab0 f480 	clz	r4, r0
   28280:	4635      	mov	r5, r6
   28282:	f04f 0a01 	mov.w	sl, #1
   28286:	0964      	lsrs	r4, r4, #5
   28288:	463a      	mov	r2, r7
   2828a:	4616      	mov	r6, r2
   2828c:	3201      	adds	r2, #1
   2828e:	7830      	ldrb	r0, [r6, #0]
   28290:	f009 fda8 	bl	31de4 <__hexdig_fun>
   28294:	2800      	cmp	r0, #0
   28296:	d1f8      	bne.n	2828a <__gethex+0x82>
   28298:	9a01      	ldr	r2, [sp, #4]
   2829a:	4630      	mov	r0, r6
   2829c:	9903      	ldr	r1, [sp, #12]
   2829e:	f009 fbc7 	bl	31a30 <strncmp>
   282a2:	b980      	cbnz	r0, 282c6 <__gethex+0xbe>
   282a4:	b94d      	cbnz	r5, 282ba <__gethex+0xb2>
   282a6:	9b01      	ldr	r3, [sp, #4]
   282a8:	18f5      	adds	r5, r6, r3
   282aa:	462a      	mov	r2, r5
   282ac:	4616      	mov	r6, r2
   282ae:	3201      	adds	r2, #1
   282b0:	7830      	ldrb	r0, [r6, #0]
   282b2:	f009 fd97 	bl	31de4 <__hexdig_fun>
   282b6:	2800      	cmp	r0, #0
   282b8:	d1f8      	bne.n	282ac <__gethex+0xa4>
   282ba:	1bad      	subs	r5, r5, r6
   282bc:	00ad      	lsls	r5, r5, #2
   282be:	e004      	b.n	282ca <__gethex+0xc2>
   282c0:	2400      	movs	r4, #0
   282c2:	4625      	mov	r5, r4
   282c4:	e7e0      	b.n	28288 <__gethex+0x80>
   282c6:	2d00      	cmp	r5, #0
   282c8:	d1f7      	bne.n	282ba <__gethex+0xb2>
   282ca:	7833      	ldrb	r3, [r6, #0]
   282cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   282d0:	2b50      	cmp	r3, #80	; 0x50
   282d2:	d138      	bne.n	28346 <__gethex+0x13e>
   282d4:	7873      	ldrb	r3, [r6, #1]
   282d6:	2b2b      	cmp	r3, #43	; 0x2b
   282d8:	d02a      	beq.n	28330 <__gethex+0x128>
   282da:	2b2d      	cmp	r3, #45	; 0x2d
   282dc:	d02c      	beq.n	28338 <__gethex+0x130>
   282de:	1c71      	adds	r1, r6, #1
   282e0:	f04f 0900 	mov.w	r9, #0
   282e4:	7808      	ldrb	r0, [r1, #0]
   282e6:	f009 fd7d 	bl	31de4 <__hexdig_fun>
   282ea:	1e43      	subs	r3, r0, #1
   282ec:	b2db      	uxtb	r3, r3
   282ee:	2b18      	cmp	r3, #24
   282f0:	d829      	bhi.n	28346 <__gethex+0x13e>
   282f2:	f1a0 0210 	sub.w	r2, r0, #16
   282f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   282fa:	f009 fd73 	bl	31de4 <__hexdig_fun>
   282fe:	1e43      	subs	r3, r0, #1
   28300:	b2db      	uxtb	r3, r3
   28302:	2b18      	cmp	r3, #24
   28304:	d91b      	bls.n	2833e <__gethex+0x136>
   28306:	f1b9 0f00 	cmp.w	r9, #0
   2830a:	d000      	beq.n	2830e <__gethex+0x106>
   2830c:	4252      	negs	r2, r2
   2830e:	4415      	add	r5, r2
   28310:	f8cb 1000 	str.w	r1, [fp]
   28314:	b1cc      	cbz	r4, 2834a <__gethex+0x142>
   28316:	f1ba 0f00 	cmp.w	sl, #0
   2831a:	bf0c      	ite	eq
   2831c:	2606      	moveq	r6, #6
   2831e:	2600      	movne	r6, #0
   28320:	4630      	mov	r0, r6
   28322:	b00b      	add	sp, #44	; 0x2c
   28324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28328:	463e      	mov	r6, r7
   2832a:	4625      	mov	r5, r4
   2832c:	2401      	movs	r4, #1
   2832e:	e7cc      	b.n	282ca <__gethex+0xc2>
   28330:	f04f 0900 	mov.w	r9, #0
   28334:	1cb1      	adds	r1, r6, #2
   28336:	e7d5      	b.n	282e4 <__gethex+0xdc>
   28338:	f04f 0901 	mov.w	r9, #1
   2833c:	e7fa      	b.n	28334 <__gethex+0x12c>
   2833e:	230a      	movs	r3, #10
   28340:	fb03 0002 	mla	r0, r3, r2, r0
   28344:	e7d5      	b.n	282f2 <__gethex+0xea>
   28346:	4631      	mov	r1, r6
   28348:	e7e2      	b.n	28310 <__gethex+0x108>
   2834a:	1bf3      	subs	r3, r6, r7
   2834c:	4621      	mov	r1, r4
   2834e:	3b01      	subs	r3, #1
   28350:	2b07      	cmp	r3, #7
   28352:	dc0a      	bgt.n	2836a <__gethex+0x162>
   28354:	9802      	ldr	r0, [sp, #8]
   28356:	f000 f9d7 	bl	28708 <_Balloc>
   2835a:	4604      	mov	r4, r0
   2835c:	b940      	cbnz	r0, 28370 <__gethex+0x168>
   2835e:	4b5b      	ldr	r3, [pc, #364]	; (284cc <__gethex+0x2c4>)
   28360:	4602      	mov	r2, r0
   28362:	21de      	movs	r1, #222	; 0xde
   28364:	485a      	ldr	r0, [pc, #360]	; (284d0 <__gethex+0x2c8>)
   28366:	f7ff fe5f 	bl	28028 <__assert_func>
   2836a:	3101      	adds	r1, #1
   2836c:	105b      	asrs	r3, r3, #1
   2836e:	e7ef      	b.n	28350 <__gethex+0x148>
   28370:	f04f 0b00 	mov.w	fp, #0
   28374:	9b01      	ldr	r3, [sp, #4]
   28376:	f100 0914 	add.w	r9, r0, #20
   2837a:	f1c3 0301 	rsb	r3, r3, #1
   2837e:	46da      	mov	sl, fp
   28380:	f8cd 9010 	str.w	r9, [sp, #16]
   28384:	9308      	str	r3, [sp, #32]
   28386:	42b7      	cmp	r7, r6
   28388:	d338      	bcc.n	283fc <__gethex+0x1f4>
   2838a:	9e04      	ldr	r6, [sp, #16]
   2838c:	4650      	mov	r0, sl
   2838e:	f846 ab04 	str.w	sl, [r6], #4
   28392:	eba6 0609 	sub.w	r6, r6, r9
   28396:	10b6      	asrs	r6, r6, #2
   28398:	6126      	str	r6, [r4, #16]
   2839a:	0176      	lsls	r6, r6, #5
   2839c:	f009 fe1f 	bl	31fde <__hi0bits>
   283a0:	f8d8 7000 	ldr.w	r7, [r8]
   283a4:	1a36      	subs	r6, r6, r0
   283a6:	42be      	cmp	r6, r7
   283a8:	dd60      	ble.n	2846c <__gethex+0x264>
   283aa:	1bf6      	subs	r6, r6, r7
   283ac:	4620      	mov	r0, r4
   283ae:	4631      	mov	r1, r6
   283b0:	f009 fed2 	bl	32158 <__any_on>
   283b4:	4682      	mov	sl, r0
   283b6:	b178      	cbz	r0, 283d8 <__gethex+0x1d0>
   283b8:	1e73      	subs	r3, r6, #1
   283ba:	f04f 0a01 	mov.w	sl, #1
   283be:	1159      	asrs	r1, r3, #5
   283c0:	f003 021f 	and.w	r2, r3, #31
   283c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   283c8:	fa0a f202 	lsl.w	r2, sl, r2
   283cc:	420a      	tst	r2, r1
   283ce:	d003      	beq.n	283d8 <__gethex+0x1d0>
   283d0:	4553      	cmp	r3, sl
   283d2:	dc42      	bgt.n	2845a <__gethex+0x252>
   283d4:	f04f 0a02 	mov.w	sl, #2
   283d8:	4435      	add	r5, r6
   283da:	4631      	mov	r1, r6
   283dc:	4620      	mov	r0, r4
   283de:	f009 fcb0 	bl	31d42 <rshift>
   283e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   283e6:	42ab      	cmp	r3, r5
   283e8:	da4e      	bge.n	28488 <__gethex+0x280>
   283ea:	4621      	mov	r1, r4
   283ec:	9802      	ldr	r0, [sp, #8]
   283ee:	f000 f9cb 	bl	28788 <_Bfree>
   283f2:	2300      	movs	r3, #0
   283f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   283f6:	26a3      	movs	r6, #163	; 0xa3
   283f8:	6013      	str	r3, [r2, #0]
   283fa:	e791      	b.n	28320 <__gethex+0x118>
   283fc:	1e73      	subs	r3, r6, #1
   283fe:	9a06      	ldr	r2, [sp, #24]
   28400:	9307      	str	r3, [sp, #28]
   28402:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   28406:	4293      	cmp	r3, r2
   28408:	d017      	beq.n	2843a <__gethex+0x232>
   2840a:	f1bb 0f20 	cmp.w	fp, #32
   2840e:	d106      	bne.n	2841e <__gethex+0x216>
   28410:	9b04      	ldr	r3, [sp, #16]
   28412:	f843 ab04 	str.w	sl, [r3], #4
   28416:	f04f 0a00 	mov.w	sl, #0
   2841a:	9304      	str	r3, [sp, #16]
   2841c:	46d3      	mov	fp, sl
   2841e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   28422:	f009 fcdf 	bl	31de4 <__hexdig_fun>
   28426:	f000 000f 	and.w	r0, r0, #15
   2842a:	9b07      	ldr	r3, [sp, #28]
   2842c:	fa00 f00b 	lsl.w	r0, r0, fp
   28430:	f10b 0b04 	add.w	fp, fp, #4
   28434:	ea4a 0a00 	orr.w	sl, sl, r0
   28438:	e00d      	b.n	28456 <__gethex+0x24e>
   2843a:	1e73      	subs	r3, r6, #1
   2843c:	9a08      	ldr	r2, [sp, #32]
   2843e:	4413      	add	r3, r2
   28440:	42bb      	cmp	r3, r7
   28442:	d3e2      	bcc.n	2840a <__gethex+0x202>
   28444:	4618      	mov	r0, r3
   28446:	9a01      	ldr	r2, [sp, #4]
   28448:	9903      	ldr	r1, [sp, #12]
   2844a:	9309      	str	r3, [sp, #36]	; 0x24
   2844c:	f009 faf0 	bl	31a30 <strncmp>
   28450:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28452:	2800      	cmp	r0, #0
   28454:	d1d9      	bne.n	2840a <__gethex+0x202>
   28456:	461e      	mov	r6, r3
   28458:	e795      	b.n	28386 <__gethex+0x17e>
   2845a:	1eb1      	subs	r1, r6, #2
   2845c:	4620      	mov	r0, r4
   2845e:	f009 fe7b 	bl	32158 <__any_on>
   28462:	2800      	cmp	r0, #0
   28464:	d0b6      	beq.n	283d4 <__gethex+0x1cc>
   28466:	f04f 0a03 	mov.w	sl, #3
   2846a:	e7b5      	b.n	283d8 <__gethex+0x1d0>
   2846c:	da09      	bge.n	28482 <__gethex+0x27a>
   2846e:	1bbe      	subs	r6, r7, r6
   28470:	4621      	mov	r1, r4
   28472:	9802      	ldr	r0, [sp, #8]
   28474:	4632      	mov	r2, r6
   28476:	1bad      	subs	r5, r5, r6
   28478:	f000 fb54 	bl	28b24 <__lshift>
   2847c:	4604      	mov	r4, r0
   2847e:	f100 0914 	add.w	r9, r0, #20
   28482:	f04f 0a00 	mov.w	sl, #0
   28486:	e7ac      	b.n	283e2 <__gethex+0x1da>
   28488:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2848c:	42ab      	cmp	r3, r5
   2848e:	dd70      	ble.n	28572 <__gethex+0x36a>
   28490:	1b5d      	subs	r5, r3, r5
   28492:	42af      	cmp	r7, r5
   28494:	dc35      	bgt.n	28502 <__gethex+0x2fa>
   28496:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2849a:	2b02      	cmp	r3, #2
   2849c:	d029      	beq.n	284f2 <__gethex+0x2ea>
   2849e:	2b03      	cmp	r3, #3
   284a0:	d02b      	beq.n	284fa <__gethex+0x2f2>
   284a2:	2b01      	cmp	r3, #1
   284a4:	d11c      	bne.n	284e0 <__gethex+0x2d8>
   284a6:	42af      	cmp	r7, r5
   284a8:	d11a      	bne.n	284e0 <__gethex+0x2d8>
   284aa:	2f01      	cmp	r7, #1
   284ac:	d112      	bne.n	284d4 <__gethex+0x2cc>
   284ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
   284b2:	2662      	movs	r6, #98	; 0x62
   284b4:	9a05      	ldr	r2, [sp, #20]
   284b6:	6013      	str	r3, [r2, #0]
   284b8:	2301      	movs	r3, #1
   284ba:	6123      	str	r3, [r4, #16]
   284bc:	f8c9 3000 	str.w	r3, [r9]
   284c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   284c2:	601c      	str	r4, [r3, #0]
   284c4:	e72c      	b.n	28320 <__gethex+0x118>
   284c6:	bf00      	nop
   284c8:	000341b8 	.word	0x000341b8
   284cc:	0003885c 	.word	0x0003885c
   284d0:	0003886d 	.word	0x0003886d
   284d4:	1e79      	subs	r1, r7, #1
   284d6:	4620      	mov	r0, r4
   284d8:	f009 fe3e 	bl	32158 <__any_on>
   284dc:	2800      	cmp	r0, #0
   284de:	d1e6      	bne.n	284ae <__gethex+0x2a6>
   284e0:	4621      	mov	r1, r4
   284e2:	9802      	ldr	r0, [sp, #8]
   284e4:	f000 f950 	bl	28788 <_Bfree>
   284e8:	2300      	movs	r3, #0
   284ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   284ec:	2650      	movs	r6, #80	; 0x50
   284ee:	6013      	str	r3, [r2, #0]
   284f0:	e716      	b.n	28320 <__gethex+0x118>
   284f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   284f4:	2b00      	cmp	r3, #0
   284f6:	d1f3      	bne.n	284e0 <__gethex+0x2d8>
   284f8:	e7d9      	b.n	284ae <__gethex+0x2a6>
   284fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   284fc:	2b00      	cmp	r3, #0
   284fe:	d1d6      	bne.n	284ae <__gethex+0x2a6>
   28500:	e7ee      	b.n	284e0 <__gethex+0x2d8>
   28502:	1e6e      	subs	r6, r5, #1
   28504:	f1ba 0f00 	cmp.w	sl, #0
   28508:	d130      	bne.n	2856c <__gethex+0x364>
   2850a:	b126      	cbz	r6, 28516 <__gethex+0x30e>
   2850c:	4631      	mov	r1, r6
   2850e:	4620      	mov	r0, r4
   28510:	f009 fe22 	bl	32158 <__any_on>
   28514:	4682      	mov	sl, r0
   28516:	1172      	asrs	r2, r6, #5
   28518:	2301      	movs	r3, #1
   2851a:	f006 061f 	and.w	r6, r6, #31
   2851e:	4629      	mov	r1, r5
   28520:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   28524:	4620      	mov	r0, r4
   28526:	40b3      	lsls	r3, r6
   28528:	1b7f      	subs	r7, r7, r5
   2852a:	2602      	movs	r6, #2
   2852c:	4213      	tst	r3, r2
   2852e:	bf18      	it	ne
   28530:	f04a 0a02 	orrne.w	sl, sl, #2
   28534:	f009 fc05 	bl	31d42 <rshift>
   28538:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2853c:	f1ba 0f00 	cmp.w	sl, #0
   28540:	d047      	beq.n	285d2 <__gethex+0x3ca>
   28542:	f8d8 300c 	ldr.w	r3, [r8, #12]
   28546:	2b02      	cmp	r3, #2
   28548:	d015      	beq.n	28576 <__gethex+0x36e>
   2854a:	2b03      	cmp	r3, #3
   2854c:	d017      	beq.n	2857e <__gethex+0x376>
   2854e:	2b01      	cmp	r3, #1
   28550:	d109      	bne.n	28566 <__gethex+0x35e>
   28552:	f01a 0f02 	tst.w	sl, #2
   28556:	d006      	beq.n	28566 <__gethex+0x35e>
   28558:	f8d9 3000 	ldr.w	r3, [r9]
   2855c:	ea4a 0a03 	orr.w	sl, sl, r3
   28560:	f01a 0f01 	tst.w	sl, #1
   28564:	d10e      	bne.n	28584 <__gethex+0x37c>
   28566:	f046 0610 	orr.w	r6, r6, #16
   2856a:	e032      	b.n	285d2 <__gethex+0x3ca>
   2856c:	f04f 0a01 	mov.w	sl, #1
   28570:	e7d1      	b.n	28516 <__gethex+0x30e>
   28572:	2601      	movs	r6, #1
   28574:	e7e2      	b.n	2853c <__gethex+0x334>
   28576:	9b15      	ldr	r3, [sp, #84]	; 0x54
   28578:	f1c3 0301 	rsb	r3, r3, #1
   2857c:	9315      	str	r3, [sp, #84]	; 0x54
   2857e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   28580:	2b00      	cmp	r3, #0
   28582:	d0f0      	beq.n	28566 <__gethex+0x35e>
   28584:	f8d4 b010 	ldr.w	fp, [r4, #16]
   28588:	f104 0314 	add.w	r3, r4, #20
   2858c:	f04f 0c00 	mov.w	ip, #0
   28590:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   28594:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   28598:	4618      	mov	r0, r3
   2859a:	f853 2b04 	ldr.w	r2, [r3], #4
   2859e:	f1b2 3fff 	cmp.w	r2, #4294967295
   285a2:	d01b      	beq.n	285dc <__gethex+0x3d4>
   285a4:	3201      	adds	r2, #1
   285a6:	6002      	str	r2, [r0, #0]
   285a8:	2e02      	cmp	r6, #2
   285aa:	f104 0314 	add.w	r3, r4, #20
   285ae:	d13c      	bne.n	2862a <__gethex+0x422>
   285b0:	f8d8 2000 	ldr.w	r2, [r8]
   285b4:	3a01      	subs	r2, #1
   285b6:	42ba      	cmp	r2, r7
   285b8:	d109      	bne.n	285ce <__gethex+0x3c6>
   285ba:	1179      	asrs	r1, r7, #5
   285bc:	2201      	movs	r2, #1
   285be:	f007 071f 	and.w	r7, r7, #31
   285c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   285c6:	fa02 f707 	lsl.w	r7, r2, r7
   285ca:	421f      	tst	r7, r3
   285cc:	d13a      	bne.n	28644 <__gethex+0x43c>
   285ce:	f046 0620 	orr.w	r6, r6, #32
   285d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   285d4:	601c      	str	r4, [r3, #0]
   285d6:	9b05      	ldr	r3, [sp, #20]
   285d8:	601d      	str	r5, [r3, #0]
   285da:	e6a1      	b.n	28320 <__gethex+0x118>
   285dc:	4299      	cmp	r1, r3
   285de:	f843 cc04 	str.w	ip, [r3, #-4]
   285e2:	d8d9      	bhi.n	28598 <__gethex+0x390>
   285e4:	68a3      	ldr	r3, [r4, #8]
   285e6:	459b      	cmp	fp, r3
   285e8:	db17      	blt.n	2861a <__gethex+0x412>
   285ea:	6861      	ldr	r1, [r4, #4]
   285ec:	9802      	ldr	r0, [sp, #8]
   285ee:	3101      	adds	r1, #1
   285f0:	f000 f88a 	bl	28708 <_Balloc>
   285f4:	4681      	mov	r9, r0
   285f6:	b918      	cbnz	r0, 28600 <__gethex+0x3f8>
   285f8:	4b1a      	ldr	r3, [pc, #104]	; (28664 <__gethex+0x45c>)
   285fa:	4602      	mov	r2, r0
   285fc:	2184      	movs	r1, #132	; 0x84
   285fe:	e6b1      	b.n	28364 <__gethex+0x15c>
   28600:	6922      	ldr	r2, [r4, #16]
   28602:	f104 010c 	add.w	r1, r4, #12
   28606:	300c      	adds	r0, #12
   28608:	3202      	adds	r2, #2
   2860a:	0092      	lsls	r2, r2, #2
   2860c:	f009 f87f 	bl	3170e <memcpy>
   28610:	4621      	mov	r1, r4
   28612:	464c      	mov	r4, r9
   28614:	9802      	ldr	r0, [sp, #8]
   28616:	f000 f8b7 	bl	28788 <_Bfree>
   2861a:	6923      	ldr	r3, [r4, #16]
   2861c:	1c5a      	adds	r2, r3, #1
   2861e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   28622:	6122      	str	r2, [r4, #16]
   28624:	2201      	movs	r2, #1
   28626:	615a      	str	r2, [r3, #20]
   28628:	e7be      	b.n	285a8 <__gethex+0x3a0>
   2862a:	6922      	ldr	r2, [r4, #16]
   2862c:	455a      	cmp	r2, fp
   2862e:	dd0b      	ble.n	28648 <__gethex+0x440>
   28630:	2101      	movs	r1, #1
   28632:	4620      	mov	r0, r4
   28634:	f009 fb85 	bl	31d42 <rshift>
   28638:	3501      	adds	r5, #1
   2863a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2863e:	42ab      	cmp	r3, r5
   28640:	f6ff aed3 	blt.w	283ea <__gethex+0x1e2>
   28644:	2601      	movs	r6, #1
   28646:	e7c2      	b.n	285ce <__gethex+0x3c6>
   28648:	f017 071f 	ands.w	r7, r7, #31
   2864c:	d0fa      	beq.n	28644 <__gethex+0x43c>
   2864e:	4453      	add	r3, sl
   28650:	f1c7 0720 	rsb	r7, r7, #32
   28654:	f853 0c04 	ldr.w	r0, [r3, #-4]
   28658:	f009 fcc1 	bl	31fde <__hi0bits>
   2865c:	42b8      	cmp	r0, r7
   2865e:	dbe7      	blt.n	28630 <__gethex+0x428>
   28660:	e7f0      	b.n	28644 <__gethex+0x43c>
   28662:	bf00      	nop
   28664:	0003885c 	.word	0x0003885c

00028668 <_findenv_r>:
   28668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2866c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 286dc <_findenv_r+0x74>
   28670:	4606      	mov	r6, r0
   28672:	4689      	mov	r9, r1
   28674:	4617      	mov	r7, r2
   28676:	f000 ff4b 	bl	29510 <__env_lock>
   2867a:	f8da 4000 	ldr.w	r4, [sl]
   2867e:	b134      	cbz	r4, 2868e <_findenv_r+0x26>
   28680:	464b      	mov	r3, r9
   28682:	4698      	mov	r8, r3
   28684:	f813 2b01 	ldrb.w	r2, [r3], #1
   28688:	b13a      	cbz	r2, 2869a <_findenv_r+0x32>
   2868a:	2a3d      	cmp	r2, #61	; 0x3d
   2868c:	d1f9      	bne.n	28682 <_findenv_r+0x1a>
   2868e:	4630      	mov	r0, r6
   28690:	f000 ff44 	bl	2951c <__env_unlock>
   28694:	2000      	movs	r0, #0
   28696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2869a:	eba8 0809 	sub.w	r8, r8, r9
   2869e:	46a3      	mov	fp, r4
   286a0:	f854 0b04 	ldr.w	r0, [r4], #4
   286a4:	2800      	cmp	r0, #0
   286a6:	d0f2      	beq.n	2868e <_findenv_r+0x26>
   286a8:	4642      	mov	r2, r8
   286aa:	4649      	mov	r1, r9
   286ac:	f009 f9c0 	bl	31a30 <strncmp>
   286b0:	2800      	cmp	r0, #0
   286b2:	d1f4      	bne.n	2869e <_findenv_r+0x36>
   286b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   286b8:	eb03 0508 	add.w	r5, r3, r8
   286bc:	f813 3008 	ldrb.w	r3, [r3, r8]
   286c0:	2b3d      	cmp	r3, #61	; 0x3d
   286c2:	d1ec      	bne.n	2869e <_findenv_r+0x36>
   286c4:	f8da 3000 	ldr.w	r3, [sl]
   286c8:	4630      	mov	r0, r6
   286ca:	ebab 0303 	sub.w	r3, fp, r3
   286ce:	109b      	asrs	r3, r3, #2
   286d0:	603b      	str	r3, [r7, #0]
   286d2:	f000 ff23 	bl	2951c <__env_unlock>
   286d6:	1c68      	adds	r0, r5, #1
   286d8:	e7dd      	b.n	28696 <_findenv_r+0x2e>
   286da:	bf00      	nop
   286dc:	200089d0 	.word	0x200089d0

000286e0 <__gettzinfo>:
   286e0:	4800      	ldr	r0, [pc, #0]	; (286e4 <__gettzinfo+0x4>)
   286e2:	4770      	bx	lr
   286e4:	200083a8 	.word	0x200083a8

000286e8 <_localeconv_r>:
   286e8:	4800      	ldr	r0, [pc, #0]	; (286ec <_localeconv_r+0x4>)
   286ea:	4770      	bx	lr
   286ec:	20008954 	.word	0x20008954

000286f0 <__malloc_lock>:
   286f0:	4801      	ldr	r0, [pc, #4]	; (286f8 <__malloc_lock+0x8>)
   286f2:	f003 b8f2 	b.w	2b8da <__retarget_lock_acquire_recursive>
   286f6:	bf00      	nop
   286f8:	20008bb4 	.word	0x20008bb4

000286fc <__malloc_unlock>:
   286fc:	4801      	ldr	r0, [pc, #4]	; (28704 <__malloc_unlock+0x8>)
   286fe:	f003 b8f4 	b.w	2b8ea <__retarget_lock_release_recursive>
   28702:	bf00      	nop
   28704:	20008bb4 	.word	0x20008bb4

00028708 <_Balloc>:
   28708:	b570      	push	{r4, r5, r6, lr}
   2870a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2870c:	4604      	mov	r4, r0
   2870e:	460d      	mov	r5, r1
   28710:	b976      	cbnz	r6, 28730 <_Balloc+0x28>
   28712:	2010      	movs	r0, #16
   28714:	f7fe fa1e 	bl	26b54 <malloc>
   28718:	4602      	mov	r2, r0
   2871a:	6260      	str	r0, [r4, #36]	; 0x24
   2871c:	b920      	cbnz	r0, 28728 <_Balloc+0x20>
   2871e:	4b18      	ldr	r3, [pc, #96]	; (28780 <_Balloc+0x78>)
   28720:	2166      	movs	r1, #102	; 0x66
   28722:	4818      	ldr	r0, [pc, #96]	; (28784 <_Balloc+0x7c>)
   28724:	f7ff fc80 	bl	28028 <__assert_func>
   28728:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2872c:	6006      	str	r6, [r0, #0]
   2872e:	60c6      	str	r6, [r0, #12]
   28730:	6a66      	ldr	r6, [r4, #36]	; 0x24
   28732:	68f3      	ldr	r3, [r6, #12]
   28734:	b183      	cbz	r3, 28758 <_Balloc+0x50>
   28736:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28738:	68db      	ldr	r3, [r3, #12]
   2873a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2873e:	b9b8      	cbnz	r0, 28770 <_Balloc+0x68>
   28740:	2101      	movs	r1, #1
   28742:	4620      	mov	r0, r4
   28744:	fa01 f605 	lsl.w	r6, r1, r5
   28748:	1d72      	adds	r2, r6, #5
   2874a:	0092      	lsls	r2, r2, #2
   2874c:	f009 f821 	bl	31792 <_calloc_r>
   28750:	b160      	cbz	r0, 2876c <_Balloc+0x64>
   28752:	e9c0 5601 	strd	r5, r6, [r0, #4]
   28756:	e00e      	b.n	28776 <_Balloc+0x6e>
   28758:	2221      	movs	r2, #33	; 0x21
   2875a:	2104      	movs	r1, #4
   2875c:	4620      	mov	r0, r4
   2875e:	f009 f818 	bl	31792 <_calloc_r>
   28762:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28764:	60f0      	str	r0, [r6, #12]
   28766:	68db      	ldr	r3, [r3, #12]
   28768:	2b00      	cmp	r3, #0
   2876a:	d1e4      	bne.n	28736 <_Balloc+0x2e>
   2876c:	2000      	movs	r0, #0
   2876e:	bd70      	pop	{r4, r5, r6, pc}
   28770:	6802      	ldr	r2, [r0, #0]
   28772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   28776:	2300      	movs	r3, #0
   28778:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2877c:	e7f7      	b.n	2876e <_Balloc+0x66>
   2877e:	bf00      	nop
   28780:	000386d6 	.word	0x000386d6
   28784:	000388ef 	.word	0x000388ef

00028788 <_Bfree>:
   28788:	b570      	push	{r4, r5, r6, lr}
   2878a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2878c:	4605      	mov	r5, r0
   2878e:	460c      	mov	r4, r1
   28790:	b976      	cbnz	r6, 287b0 <_Bfree+0x28>
   28792:	2010      	movs	r0, #16
   28794:	f7fe f9de 	bl	26b54 <malloc>
   28798:	4602      	mov	r2, r0
   2879a:	6268      	str	r0, [r5, #36]	; 0x24
   2879c:	b920      	cbnz	r0, 287a8 <_Bfree+0x20>
   2879e:	4b09      	ldr	r3, [pc, #36]	; (287c4 <_Bfree+0x3c>)
   287a0:	218a      	movs	r1, #138	; 0x8a
   287a2:	4809      	ldr	r0, [pc, #36]	; (287c8 <_Bfree+0x40>)
   287a4:	f7ff fc40 	bl	28028 <__assert_func>
   287a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   287ac:	6006      	str	r6, [r0, #0]
   287ae:	60c6      	str	r6, [r0, #12]
   287b0:	b13c      	cbz	r4, 287c2 <_Bfree+0x3a>
   287b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   287b4:	6862      	ldr	r2, [r4, #4]
   287b6:	68db      	ldr	r3, [r3, #12]
   287b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   287bc:	6021      	str	r1, [r4, #0]
   287be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   287c2:	bd70      	pop	{r4, r5, r6, pc}
   287c4:	000386d6 	.word	0x000386d6
   287c8:	000388ef 	.word	0x000388ef

000287cc <__multadd>:
   287cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   287d0:	f101 0c14 	add.w	ip, r1, #20
   287d4:	4607      	mov	r7, r0
   287d6:	460c      	mov	r4, r1
   287d8:	461e      	mov	r6, r3
   287da:	690d      	ldr	r5, [r1, #16]
   287dc:	2000      	movs	r0, #0
   287de:	f8dc 3000 	ldr.w	r3, [ip]
   287e2:	3001      	adds	r0, #1
   287e4:	b299      	uxth	r1, r3
   287e6:	4285      	cmp	r5, r0
   287e8:	fb02 6101 	mla	r1, r2, r1, r6
   287ec:	ea4f 4613 	mov.w	r6, r3, lsr #16
   287f0:	ea4f 4311 	mov.w	r3, r1, lsr #16
   287f4:	b289      	uxth	r1, r1
   287f6:	fb02 3306 	mla	r3, r2, r6, r3
   287fa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   287fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
   28802:	f84c 1b04 	str.w	r1, [ip], #4
   28806:	dcea      	bgt.n	287de <__multadd+0x12>
   28808:	b30e      	cbz	r6, 2884e <__multadd+0x82>
   2880a:	68a3      	ldr	r3, [r4, #8]
   2880c:	42ab      	cmp	r3, r5
   2880e:	dc19      	bgt.n	28844 <__multadd+0x78>
   28810:	6861      	ldr	r1, [r4, #4]
   28812:	4638      	mov	r0, r7
   28814:	3101      	adds	r1, #1
   28816:	f7ff ff77 	bl	28708 <_Balloc>
   2881a:	4680      	mov	r8, r0
   2881c:	b928      	cbnz	r0, 2882a <__multadd+0x5e>
   2881e:	4602      	mov	r2, r0
   28820:	4b0c      	ldr	r3, [pc, #48]	; (28854 <__multadd+0x88>)
   28822:	21b5      	movs	r1, #181	; 0xb5
   28824:	480c      	ldr	r0, [pc, #48]	; (28858 <__multadd+0x8c>)
   28826:	f7ff fbff 	bl	28028 <__assert_func>
   2882a:	6922      	ldr	r2, [r4, #16]
   2882c:	f104 010c 	add.w	r1, r4, #12
   28830:	300c      	adds	r0, #12
   28832:	3202      	adds	r2, #2
   28834:	0092      	lsls	r2, r2, #2
   28836:	f008 ff6a 	bl	3170e <memcpy>
   2883a:	4621      	mov	r1, r4
   2883c:	4644      	mov	r4, r8
   2883e:	4638      	mov	r0, r7
   28840:	f7ff ffa2 	bl	28788 <_Bfree>
   28844:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   28848:	3501      	adds	r5, #1
   2884a:	615e      	str	r6, [r3, #20]
   2884c:	6125      	str	r5, [r4, #16]
   2884e:	4620      	mov	r0, r4
   28850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28854:	0003885c 	.word	0x0003885c
   28858:	000388ef 	.word	0x000388ef

0002885c <__s2b>:
   2885c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28860:	4615      	mov	r5, r2
   28862:	461f      	mov	r7, r3
   28864:	2209      	movs	r2, #9
   28866:	3308      	adds	r3, #8
   28868:	460c      	mov	r4, r1
   2886a:	4606      	mov	r6, r0
   2886c:	2100      	movs	r1, #0
   2886e:	fb93 f3f2 	sdiv	r3, r3, r2
   28872:	2201      	movs	r2, #1
   28874:	429a      	cmp	r2, r3
   28876:	db09      	blt.n	2888c <__s2b+0x30>
   28878:	4630      	mov	r0, r6
   2887a:	f7ff ff45 	bl	28708 <_Balloc>
   2887e:	b940      	cbnz	r0, 28892 <__s2b+0x36>
   28880:	4602      	mov	r2, r0
   28882:	4b19      	ldr	r3, [pc, #100]	; (288e8 <__s2b+0x8c>)
   28884:	21ce      	movs	r1, #206	; 0xce
   28886:	4819      	ldr	r0, [pc, #100]	; (288ec <__s2b+0x90>)
   28888:	f7ff fbce 	bl	28028 <__assert_func>
   2888c:	0052      	lsls	r2, r2, #1
   2888e:	3101      	adds	r1, #1
   28890:	e7f0      	b.n	28874 <__s2b+0x18>
   28892:	9b08      	ldr	r3, [sp, #32]
   28894:	2d09      	cmp	r5, #9
   28896:	6143      	str	r3, [r0, #20]
   28898:	f04f 0301 	mov.w	r3, #1
   2889c:	6103      	str	r3, [r0, #16]
   2889e:	dd16      	ble.n	288ce <__s2b+0x72>
   288a0:	f104 0909 	add.w	r9, r4, #9
   288a4:	442c      	add	r4, r5
   288a6:	46c8      	mov	r8, r9
   288a8:	f818 3b01 	ldrb.w	r3, [r8], #1
   288ac:	4601      	mov	r1, r0
   288ae:	220a      	movs	r2, #10
   288b0:	4630      	mov	r0, r6
   288b2:	3b30      	subs	r3, #48	; 0x30
   288b4:	f7ff ff8a 	bl	287cc <__multadd>
   288b8:	45a0      	cmp	r8, r4
   288ba:	d1f5      	bne.n	288a8 <__s2b+0x4c>
   288bc:	f1a5 0408 	sub.w	r4, r5, #8
   288c0:	444c      	add	r4, r9
   288c2:	1b2d      	subs	r5, r5, r4
   288c4:	1963      	adds	r3, r4, r5
   288c6:	42bb      	cmp	r3, r7
   288c8:	db04      	blt.n	288d4 <__s2b+0x78>
   288ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   288ce:	340a      	adds	r4, #10
   288d0:	2509      	movs	r5, #9
   288d2:	e7f6      	b.n	288c2 <__s2b+0x66>
   288d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   288d8:	4601      	mov	r1, r0
   288da:	220a      	movs	r2, #10
   288dc:	4630      	mov	r0, r6
   288de:	3b30      	subs	r3, #48	; 0x30
   288e0:	f7ff ff74 	bl	287cc <__multadd>
   288e4:	e7ee      	b.n	288c4 <__s2b+0x68>
   288e6:	bf00      	nop
   288e8:	0003885c 	.word	0x0003885c
   288ec:	000388ef 	.word	0x000388ef

000288f0 <__i2b>:
   288f0:	b510      	push	{r4, lr}
   288f2:	460c      	mov	r4, r1
   288f4:	2101      	movs	r1, #1
   288f6:	f7ff ff07 	bl	28708 <_Balloc>
   288fa:	4602      	mov	r2, r0
   288fc:	b928      	cbnz	r0, 2890a <__i2b+0x1a>
   288fe:	4b05      	ldr	r3, [pc, #20]	; (28914 <__i2b+0x24>)
   28900:	f44f 71a0 	mov.w	r1, #320	; 0x140
   28904:	4804      	ldr	r0, [pc, #16]	; (28918 <__i2b+0x28>)
   28906:	f7ff fb8f 	bl	28028 <__assert_func>
   2890a:	2301      	movs	r3, #1
   2890c:	6144      	str	r4, [r0, #20]
   2890e:	6103      	str	r3, [r0, #16]
   28910:	bd10      	pop	{r4, pc}
   28912:	bf00      	nop
   28914:	0003885c 	.word	0x0003885c
   28918:	000388ef 	.word	0x000388ef

0002891c <__multiply>:
   2891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28920:	4614      	mov	r4, r2
   28922:	690a      	ldr	r2, [r1, #16]
   28924:	460f      	mov	r7, r1
   28926:	b085      	sub	sp, #20
   28928:	6923      	ldr	r3, [r4, #16]
   2892a:	429a      	cmp	r2, r3
   2892c:	bfa2      	ittt	ge
   2892e:	4623      	movge	r3, r4
   28930:	460c      	movge	r4, r1
   28932:	461f      	movge	r7, r3
   28934:	f8d4 a010 	ldr.w	sl, [r4, #16]
   28938:	68a3      	ldr	r3, [r4, #8]
   2893a:	f8d7 9010 	ldr.w	r9, [r7, #16]
   2893e:	6861      	ldr	r1, [r4, #4]
   28940:	eb0a 0609 	add.w	r6, sl, r9
   28944:	42b3      	cmp	r3, r6
   28946:	bfb8      	it	lt
   28948:	3101      	addlt	r1, #1
   2894a:	f7ff fedd 	bl	28708 <_Balloc>
   2894e:	b930      	cbnz	r0, 2895e <__multiply+0x42>
   28950:	4602      	mov	r2, r0
   28952:	4b45      	ldr	r3, [pc, #276]	; (28a68 <__multiply+0x14c>)
   28954:	f240 115d 	movw	r1, #349	; 0x15d
   28958:	4844      	ldr	r0, [pc, #272]	; (28a6c <__multiply+0x150>)
   2895a:	f7ff fb65 	bl	28028 <__assert_func>
   2895e:	f100 0514 	add.w	r5, r0, #20
   28962:	2200      	movs	r2, #0
   28964:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   28968:	462b      	mov	r3, r5
   2896a:	4543      	cmp	r3, r8
   2896c:	d321      	bcc.n	289b2 <__multiply+0x96>
   2896e:	f107 0114 	add.w	r1, r7, #20
   28972:	f104 0214 	add.w	r2, r4, #20
   28976:	f104 0715 	add.w	r7, r4, #21
   2897a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2897e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   28982:	9302      	str	r3, [sp, #8]
   28984:	1b13      	subs	r3, r2, r4
   28986:	3b15      	subs	r3, #21
   28988:	f023 0303 	bic.w	r3, r3, #3
   2898c:	3304      	adds	r3, #4
   2898e:	42ba      	cmp	r2, r7
   28990:	bf38      	it	cc
   28992:	2304      	movcc	r3, #4
   28994:	9301      	str	r3, [sp, #4]
   28996:	9b02      	ldr	r3, [sp, #8]
   28998:	9103      	str	r1, [sp, #12]
   2899a:	428b      	cmp	r3, r1
   2899c:	d80c      	bhi.n	289b8 <__multiply+0x9c>
   2899e:	2e00      	cmp	r6, #0
   289a0:	dd03      	ble.n	289aa <__multiply+0x8e>
   289a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   289a6:	2b00      	cmp	r3, #0
   289a8:	d05b      	beq.n	28a62 <__multiply+0x146>
   289aa:	6106      	str	r6, [r0, #16]
   289ac:	b005      	add	sp, #20
   289ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   289b2:	f843 2b04 	str.w	r2, [r3], #4
   289b6:	e7d8      	b.n	2896a <__multiply+0x4e>
   289b8:	f8b1 a000 	ldrh.w	sl, [r1]
   289bc:	f1ba 0f00 	cmp.w	sl, #0
   289c0:	d024      	beq.n	28a0c <__multiply+0xf0>
   289c2:	f104 0e14 	add.w	lr, r4, #20
   289c6:	46a9      	mov	r9, r5
   289c8:	f04f 0c00 	mov.w	ip, #0
   289cc:	f85e 7b04 	ldr.w	r7, [lr], #4
   289d0:	f8d9 3000 	ldr.w	r3, [r9]
   289d4:	fa1f fb87 	uxth.w	fp, r7
   289d8:	4572      	cmp	r2, lr
   289da:	b29b      	uxth	r3, r3
   289dc:	ea4f 4717 	mov.w	r7, r7, lsr #16
   289e0:	fb0a 330b 	mla	r3, sl, fp, r3
   289e4:	4463      	add	r3, ip
   289e6:	f8d9 c000 	ldr.w	ip, [r9]
   289ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   289ee:	fb0a c707 	mla	r7, sl, r7, ip
   289f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   289f6:	b29b      	uxth	r3, r3
   289f8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   289fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   28a00:	f849 3b04 	str.w	r3, [r9], #4
   28a04:	d8e2      	bhi.n	289cc <__multiply+0xb0>
   28a06:	9b01      	ldr	r3, [sp, #4]
   28a08:	f845 c003 	str.w	ip, [r5, r3]
   28a0c:	9b03      	ldr	r3, [sp, #12]
   28a0e:	3104      	adds	r1, #4
   28a10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   28a14:	f1b9 0f00 	cmp.w	r9, #0
   28a18:	d021      	beq.n	28a5e <__multiply+0x142>
   28a1a:	682b      	ldr	r3, [r5, #0]
   28a1c:	f104 0c14 	add.w	ip, r4, #20
   28a20:	46ae      	mov	lr, r5
   28a22:	f04f 0a00 	mov.w	sl, #0
   28a26:	f8bc b000 	ldrh.w	fp, [ip]
   28a2a:	b29b      	uxth	r3, r3
   28a2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
   28a30:	fb09 770b 	mla	r7, r9, fp, r7
   28a34:	4457      	add	r7, sl
   28a36:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   28a3a:	f84e 3b04 	str.w	r3, [lr], #4
   28a3e:	f85c 3b04 	ldr.w	r3, [ip], #4
   28a42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   28a46:	f8be 3000 	ldrh.w	r3, [lr]
   28a4a:	4562      	cmp	r2, ip
   28a4c:	fb09 330a 	mla	r3, r9, sl, r3
   28a50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   28a54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   28a58:	d8e5      	bhi.n	28a26 <__multiply+0x10a>
   28a5a:	9f01      	ldr	r7, [sp, #4]
   28a5c:	51eb      	str	r3, [r5, r7]
   28a5e:	3504      	adds	r5, #4
   28a60:	e799      	b.n	28996 <__multiply+0x7a>
   28a62:	3e01      	subs	r6, #1
   28a64:	e79b      	b.n	2899e <__multiply+0x82>
   28a66:	bf00      	nop
   28a68:	0003885c 	.word	0x0003885c
   28a6c:	000388ef 	.word	0x000388ef

00028a70 <__pow5mult>:
   28a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28a74:	4615      	mov	r5, r2
   28a76:	f012 0203 	ands.w	r2, r2, #3
   28a7a:	4607      	mov	r7, r0
   28a7c:	460e      	mov	r6, r1
   28a7e:	d007      	beq.n	28a90 <__pow5mult+0x20>
   28a80:	3a01      	subs	r2, #1
   28a82:	4c25      	ldr	r4, [pc, #148]	; (28b18 <__pow5mult+0xa8>)
   28a84:	2300      	movs	r3, #0
   28a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   28a8a:	f7ff fe9f 	bl	287cc <__multadd>
   28a8e:	4606      	mov	r6, r0
   28a90:	10ad      	asrs	r5, r5, #2
   28a92:	d03d      	beq.n	28b10 <__pow5mult+0xa0>
   28a94:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   28a96:	b97c      	cbnz	r4, 28ab8 <__pow5mult+0x48>
   28a98:	2010      	movs	r0, #16
   28a9a:	f7fe f85b 	bl	26b54 <malloc>
   28a9e:	4602      	mov	r2, r0
   28aa0:	6278      	str	r0, [r7, #36]	; 0x24
   28aa2:	b928      	cbnz	r0, 28ab0 <__pow5mult+0x40>
   28aa4:	4b1d      	ldr	r3, [pc, #116]	; (28b1c <__pow5mult+0xac>)
   28aa6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   28aaa:	481d      	ldr	r0, [pc, #116]	; (28b20 <__pow5mult+0xb0>)
   28aac:	f7ff fabc 	bl	28028 <__assert_func>
   28ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   28ab4:	6004      	str	r4, [r0, #0]
   28ab6:	60c4      	str	r4, [r0, #12]
   28ab8:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   28abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   28ac0:	b94c      	cbnz	r4, 28ad6 <__pow5mult+0x66>
   28ac2:	f240 2171 	movw	r1, #625	; 0x271
   28ac6:	4638      	mov	r0, r7
   28ac8:	f7ff ff12 	bl	288f0 <__i2b>
   28acc:	2300      	movs	r3, #0
   28ace:	4604      	mov	r4, r0
   28ad0:	f8c8 0008 	str.w	r0, [r8, #8]
   28ad4:	6003      	str	r3, [r0, #0]
   28ad6:	f04f 0900 	mov.w	r9, #0
   28ada:	07eb      	lsls	r3, r5, #31
   28adc:	d50a      	bpl.n	28af4 <__pow5mult+0x84>
   28ade:	4631      	mov	r1, r6
   28ae0:	4622      	mov	r2, r4
   28ae2:	4638      	mov	r0, r7
   28ae4:	f7ff ff1a 	bl	2891c <__multiply>
   28ae8:	4680      	mov	r8, r0
   28aea:	4631      	mov	r1, r6
   28aec:	4638      	mov	r0, r7
   28aee:	4646      	mov	r6, r8
   28af0:	f7ff fe4a 	bl	28788 <_Bfree>
   28af4:	106d      	asrs	r5, r5, #1
   28af6:	d00b      	beq.n	28b10 <__pow5mult+0xa0>
   28af8:	6820      	ldr	r0, [r4, #0]
   28afa:	b938      	cbnz	r0, 28b0c <__pow5mult+0x9c>
   28afc:	4622      	mov	r2, r4
   28afe:	4621      	mov	r1, r4
   28b00:	4638      	mov	r0, r7
   28b02:	f7ff ff0b 	bl	2891c <__multiply>
   28b06:	6020      	str	r0, [r4, #0]
   28b08:	f8c0 9000 	str.w	r9, [r0]
   28b0c:	4604      	mov	r4, r0
   28b0e:	e7e4      	b.n	28ada <__pow5mult+0x6a>
   28b10:	4630      	mov	r0, r6
   28b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28b16:	bf00      	nop
   28b18:	00034224 	.word	0x00034224
   28b1c:	000386d6 	.word	0x000386d6
   28b20:	000388ef 	.word	0x000388ef

00028b24 <__lshift>:
   28b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28b28:	460c      	mov	r4, r1
   28b2a:	4607      	mov	r7, r0
   28b2c:	4691      	mov	r9, r2
   28b2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   28b32:	6923      	ldr	r3, [r4, #16]
   28b34:	6849      	ldr	r1, [r1, #4]
   28b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
   28b3a:	68a3      	ldr	r3, [r4, #8]
   28b3c:	f108 0601 	add.w	r6, r8, #1
   28b40:	42b3      	cmp	r3, r6
   28b42:	db0b      	blt.n	28b5c <__lshift+0x38>
   28b44:	4638      	mov	r0, r7
   28b46:	f7ff fddf 	bl	28708 <_Balloc>
   28b4a:	4605      	mov	r5, r0
   28b4c:	b948      	cbnz	r0, 28b62 <__lshift+0x3e>
   28b4e:	4602      	mov	r2, r0
   28b50:	4b28      	ldr	r3, [pc, #160]	; (28bf4 <__lshift+0xd0>)
   28b52:	f240 11d9 	movw	r1, #473	; 0x1d9
   28b56:	4828      	ldr	r0, [pc, #160]	; (28bf8 <__lshift+0xd4>)
   28b58:	f7ff fa66 	bl	28028 <__assert_func>
   28b5c:	3101      	adds	r1, #1
   28b5e:	005b      	lsls	r3, r3, #1
   28b60:	e7ee      	b.n	28b40 <__lshift+0x1c>
   28b62:	2300      	movs	r3, #0
   28b64:	f100 0114 	add.w	r1, r0, #20
   28b68:	f100 0210 	add.w	r2, r0, #16
   28b6c:	4618      	mov	r0, r3
   28b6e:	4553      	cmp	r3, sl
   28b70:	db33      	blt.n	28bda <__lshift+0xb6>
   28b72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   28b76:	f104 0314 	add.w	r3, r4, #20
   28b7a:	6920      	ldr	r0, [r4, #16]
   28b7c:	f019 091f 	ands.w	r9, r9, #31
   28b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   28b84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   28b88:	d02b      	beq.n	28be2 <__lshift+0xbe>
   28b8a:	f1c9 0e20 	rsb	lr, r9, #32
   28b8e:	468a      	mov	sl, r1
   28b90:	2200      	movs	r2, #0
   28b92:	6818      	ldr	r0, [r3, #0]
   28b94:	fa00 f009 	lsl.w	r0, r0, r9
   28b98:	4310      	orrs	r0, r2
   28b9a:	f84a 0b04 	str.w	r0, [sl], #4
   28b9e:	f853 2b04 	ldr.w	r2, [r3], #4
   28ba2:	459c      	cmp	ip, r3
   28ba4:	fa22 f20e 	lsr.w	r2, r2, lr
   28ba8:	d8f3      	bhi.n	28b92 <__lshift+0x6e>
   28baa:	ebac 0304 	sub.w	r3, ip, r4
   28bae:	f104 0015 	add.w	r0, r4, #21
   28bb2:	3b15      	subs	r3, #21
   28bb4:	f023 0303 	bic.w	r3, r3, #3
   28bb8:	3304      	adds	r3, #4
   28bba:	4584      	cmp	ip, r0
   28bbc:	bf38      	it	cc
   28bbe:	2304      	movcc	r3, #4
   28bc0:	50ca      	str	r2, [r1, r3]
   28bc2:	b10a      	cbz	r2, 28bc8 <__lshift+0xa4>
   28bc4:	f108 0602 	add.w	r6, r8, #2
   28bc8:	3e01      	subs	r6, #1
   28bca:	4638      	mov	r0, r7
   28bcc:	4621      	mov	r1, r4
   28bce:	612e      	str	r6, [r5, #16]
   28bd0:	f7ff fdda 	bl	28788 <_Bfree>
   28bd4:	4628      	mov	r0, r5
   28bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28bda:	3301      	adds	r3, #1
   28bdc:	f842 0f04 	str.w	r0, [r2, #4]!
   28be0:	e7c5      	b.n	28b6e <__lshift+0x4a>
   28be2:	3904      	subs	r1, #4
   28be4:	f853 2b04 	ldr.w	r2, [r3], #4
   28be8:	459c      	cmp	ip, r3
   28bea:	f841 2f04 	str.w	r2, [r1, #4]!
   28bee:	d8f9      	bhi.n	28be4 <__lshift+0xc0>
   28bf0:	e7ea      	b.n	28bc8 <__lshift+0xa4>
   28bf2:	bf00      	nop
   28bf4:	0003885c 	.word	0x0003885c
   28bf8:	000388ef 	.word	0x000388ef

00028bfc <__mdiff>:
   28bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c00:	4689      	mov	r9, r1
   28c02:	4606      	mov	r6, r0
   28c04:	4611      	mov	r1, r2
   28c06:	4614      	mov	r4, r2
   28c08:	4648      	mov	r0, r9
   28c0a:	f009 fa37 	bl	3207c <__mcmp>
   28c0e:	1e05      	subs	r5, r0, #0
   28c10:	d112      	bne.n	28c38 <__mdiff+0x3c>
   28c12:	4629      	mov	r1, r5
   28c14:	4630      	mov	r0, r6
   28c16:	f7ff fd77 	bl	28708 <_Balloc>
   28c1a:	4602      	mov	r2, r0
   28c1c:	b928      	cbnz	r0, 28c2a <__mdiff+0x2e>
   28c1e:	4b40      	ldr	r3, [pc, #256]	; (28d20 <__mdiff+0x124>)
   28c20:	f240 2132 	movw	r1, #562	; 0x232
   28c24:	483f      	ldr	r0, [pc, #252]	; (28d24 <__mdiff+0x128>)
   28c26:	f7ff f9ff 	bl	28028 <__assert_func>
   28c2a:	2301      	movs	r3, #1
   28c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   28c30:	4610      	mov	r0, r2
   28c32:	b003      	add	sp, #12
   28c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c38:	bfbc      	itt	lt
   28c3a:	464b      	movlt	r3, r9
   28c3c:	46a1      	movlt	r9, r4
   28c3e:	4630      	mov	r0, r6
   28c40:	bfb8      	it	lt
   28c42:	2501      	movlt	r5, #1
   28c44:	f8d9 1004 	ldr.w	r1, [r9, #4]
   28c48:	bfb4      	ite	lt
   28c4a:	461c      	movlt	r4, r3
   28c4c:	2500      	movge	r5, #0
   28c4e:	f7ff fd5b 	bl	28708 <_Balloc>
   28c52:	4602      	mov	r2, r0
   28c54:	b918      	cbnz	r0, 28c5e <__mdiff+0x62>
   28c56:	4b32      	ldr	r3, [pc, #200]	; (28d20 <__mdiff+0x124>)
   28c58:	f44f 7110 	mov.w	r1, #576	; 0x240
   28c5c:	e7e2      	b.n	28c24 <__mdiff+0x28>
   28c5e:	f8d9 7010 	ldr.w	r7, [r9, #16]
   28c62:	f104 0e14 	add.w	lr, r4, #20
   28c66:	6926      	ldr	r6, [r4, #16]
   28c68:	f100 0b14 	add.w	fp, r0, #20
   28c6c:	60c5      	str	r5, [r0, #12]
   28c6e:	f109 0514 	add.w	r5, r9, #20
   28c72:	f109 0310 	add.w	r3, r9, #16
   28c76:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   28c7a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   28c7e:	46d9      	mov	r9, fp
   28c80:	f04f 0c00 	mov.w	ip, #0
   28c84:	9301      	str	r3, [sp, #4]
   28c86:	9b01      	ldr	r3, [sp, #4]
   28c88:	f85e 0b04 	ldr.w	r0, [lr], #4
   28c8c:	f853 af04 	ldr.w	sl, [r3, #4]!
   28c90:	b281      	uxth	r1, r0
   28c92:	4576      	cmp	r6, lr
   28c94:	9301      	str	r3, [sp, #4]
   28c96:	fa1f f38a 	uxth.w	r3, sl
   28c9a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   28c9e:	eba3 0301 	sub.w	r3, r3, r1
   28ca2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   28ca6:	4463      	add	r3, ip
   28ca8:	eb00 4023 	add.w	r0, r0, r3, asr #16
   28cac:	b29b      	uxth	r3, r3
   28cae:	ea4f 4c20 	mov.w	ip, r0, asr #16
   28cb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   28cb6:	f849 3b04 	str.w	r3, [r9], #4
   28cba:	d8e4      	bhi.n	28c86 <__mdiff+0x8a>
   28cbc:	1b33      	subs	r3, r6, r4
   28cbe:	3415      	adds	r4, #21
   28cc0:	3b15      	subs	r3, #21
   28cc2:	f023 0303 	bic.w	r3, r3, #3
   28cc6:	3304      	adds	r3, #4
   28cc8:	42a6      	cmp	r6, r4
   28cca:	bf38      	it	cc
   28ccc:	2304      	movcc	r3, #4
   28cce:	441d      	add	r5, r3
   28cd0:	445b      	add	r3, fp
   28cd2:	462c      	mov	r4, r5
   28cd4:	461e      	mov	r6, r3
   28cd6:	4544      	cmp	r4, r8
   28cd8:	d30e      	bcc.n	28cf8 <__mdiff+0xfc>
   28cda:	f108 0103 	add.w	r1, r8, #3
   28cde:	1b49      	subs	r1, r1, r5
   28ce0:	3d03      	subs	r5, #3
   28ce2:	f021 0103 	bic.w	r1, r1, #3
   28ce6:	45a8      	cmp	r8, r5
   28ce8:	bf38      	it	cc
   28cea:	2100      	movcc	r1, #0
   28cec:	440b      	add	r3, r1
   28cee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   28cf2:	b199      	cbz	r1, 28d1c <__mdiff+0x120>
   28cf4:	6117      	str	r7, [r2, #16]
   28cf6:	e79b      	b.n	28c30 <__mdiff+0x34>
   28cf8:	f854 1b04 	ldr.w	r1, [r4], #4
   28cfc:	46e6      	mov	lr, ip
   28cfe:	fa1f fc81 	uxth.w	ip, r1
   28d02:	0c08      	lsrs	r0, r1, #16
   28d04:	4471      	add	r1, lr
   28d06:	44f4      	add	ip, lr
   28d08:	b289      	uxth	r1, r1
   28d0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
   28d0e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   28d12:	ea4f 4c20 	mov.w	ip, r0, asr #16
   28d16:	f846 1b04 	str.w	r1, [r6], #4
   28d1a:	e7dc      	b.n	28cd6 <__mdiff+0xda>
   28d1c:	3f01      	subs	r7, #1
   28d1e:	e7e6      	b.n	28cee <__mdiff+0xf2>
   28d20:	0003885c 	.word	0x0003885c
   28d24:	000388ef 	.word	0x000388ef

00028d28 <__ulp>:
   28d28:	4b0e      	ldr	r3, [pc, #56]	; (28d64 <__ulp+0x3c>)
   28d2a:	400b      	ands	r3, r1
   28d2c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   28d30:	2b00      	cmp	r3, #0
   28d32:	dc08      	bgt.n	28d46 <__ulp+0x1e>
   28d34:	425b      	negs	r3, r3
   28d36:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   28d3a:	ea4f 5223 	mov.w	r2, r3, asr #20
   28d3e:	da04      	bge.n	28d4a <__ulp+0x22>
   28d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   28d44:	4113      	asrs	r3, r2
   28d46:	2200      	movs	r2, #0
   28d48:	e008      	b.n	28d5c <__ulp+0x34>
   28d4a:	f1a2 0314 	sub.w	r3, r2, #20
   28d4e:	2b1e      	cmp	r3, #30
   28d50:	bfd6      	itet	le
   28d52:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   28d56:	2201      	movgt	r2, #1
   28d58:	40da      	lsrle	r2, r3
   28d5a:	2300      	movs	r3, #0
   28d5c:	4619      	mov	r1, r3
   28d5e:	4610      	mov	r0, r2
   28d60:	4770      	bx	lr
   28d62:	bf00      	nop
   28d64:	7ff00000 	.word	0x7ff00000

00028d68 <__b2d>:
   28d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d6a:	6902      	ldr	r2, [r0, #16]
   28d6c:	f100 0614 	add.w	r6, r0, #20
   28d70:	4f21      	ldr	r7, [pc, #132]	; (28df8 <__b2d+0x90>)
   28d72:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   28d76:	f852 4c04 	ldr.w	r4, [r2, #-4]
   28d7a:	1f15      	subs	r5, r2, #4
   28d7c:	4620      	mov	r0, r4
   28d7e:	f009 f92e 	bl	31fde <__hi0bits>
   28d82:	4603      	mov	r3, r0
   28d84:	f1c0 0020 	rsb	r0, r0, #32
   28d88:	2b0a      	cmp	r3, #10
   28d8a:	6008      	str	r0, [r1, #0]
   28d8c:	dc13      	bgt.n	28db6 <__b2d+0x4e>
   28d8e:	42ae      	cmp	r6, r5
   28d90:	f1c3 0c0b 	rsb	ip, r3, #11
   28d94:	f103 0315 	add.w	r3, r3, #21
   28d98:	bf34      	ite	cc
   28d9a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   28d9e:	2200      	movcs	r2, #0
   28da0:	fa24 fe0c 	lsr.w	lr, r4, ip
   28da4:	fa04 f303 	lsl.w	r3, r4, r3
   28da8:	fa22 f20c 	lsr.w	r2, r2, ip
   28dac:	ea4e 0107 	orr.w	r1, lr, r7
   28db0:	431a      	orrs	r2, r3
   28db2:	4610      	mov	r0, r2
   28db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28db6:	42ae      	cmp	r6, r5
   28db8:	bf36      	itet	cc
   28dba:	f1a2 0508 	subcc.w	r5, r2, #8
   28dbe:	2200      	movcs	r2, #0
   28dc0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   28dc4:	3b0b      	subs	r3, #11
   28dc6:	d014      	beq.n	28df2 <__b2d+0x8a>
   28dc8:	f1c3 0720 	rsb	r7, r3, #32
   28dcc:	409c      	lsls	r4, r3
   28dce:	42b5      	cmp	r5, r6
   28dd0:	fa22 f107 	lsr.w	r1, r2, r7
   28dd4:	fa02 f203 	lsl.w	r2, r2, r3
   28dd8:	ea44 0401 	orr.w	r4, r4, r1
   28ddc:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
   28de0:	bf8c      	ite	hi
   28de2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   28de6:	2400      	movls	r4, #0
   28de8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   28dec:	40fc      	lsrs	r4, r7
   28dee:	4322      	orrs	r2, r4
   28df0:	e7df      	b.n	28db2 <__b2d+0x4a>
   28df2:	ea44 0107 	orr.w	r1, r4, r7
   28df6:	e7dc      	b.n	28db2 <__b2d+0x4a>
   28df8:	3ff00000 	.word	0x3ff00000

00028dfc <__d2b>:
   28dfc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   28e00:	2101      	movs	r1, #1
   28e02:	4690      	mov	r8, r2
   28e04:	4699      	mov	r9, r3
   28e06:	9e08      	ldr	r6, [sp, #32]
   28e08:	f7ff fc7e 	bl	28708 <_Balloc>
   28e0c:	4604      	mov	r4, r0
   28e0e:	b930      	cbnz	r0, 28e1e <__d2b+0x22>
   28e10:	4602      	mov	r2, r0
   28e12:	4b24      	ldr	r3, [pc, #144]	; (28ea4 <__d2b+0xa8>)
   28e14:	f240 310a 	movw	r1, #778	; 0x30a
   28e18:	4823      	ldr	r0, [pc, #140]	; (28ea8 <__d2b+0xac>)
   28e1a:	f7ff f905 	bl	28028 <__assert_func>
   28e1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
   28e22:	f3c9 0313 	ubfx	r3, r9, #0, #20
   28e26:	b10d      	cbz	r5, 28e2c <__d2b+0x30>
   28e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   28e2c:	9301      	str	r3, [sp, #4]
   28e2e:	f1b8 0300 	subs.w	r3, r8, #0
   28e32:	d024      	beq.n	28e7e <__d2b+0x82>
   28e34:	4668      	mov	r0, sp
   28e36:	9300      	str	r3, [sp, #0]
   28e38:	f009 f8f3 	bl	32022 <__lo0bits>
   28e3c:	e9dd 1200 	ldrd	r1, r2, [sp]
   28e40:	b1d8      	cbz	r0, 28e7a <__d2b+0x7e>
   28e42:	f1c0 0320 	rsb	r3, r0, #32
   28e46:	fa02 f303 	lsl.w	r3, r2, r3
   28e4a:	40c2      	lsrs	r2, r0
   28e4c:	430b      	orrs	r3, r1
   28e4e:	9201      	str	r2, [sp, #4]
   28e50:	6163      	str	r3, [r4, #20]
   28e52:	9b01      	ldr	r3, [sp, #4]
   28e54:	2b00      	cmp	r3, #0
   28e56:	61a3      	str	r3, [r4, #24]
   28e58:	bf0c      	ite	eq
   28e5a:	2201      	moveq	r2, #1
   28e5c:	2202      	movne	r2, #2
   28e5e:	6122      	str	r2, [r4, #16]
   28e60:	b1ad      	cbz	r5, 28e8e <__d2b+0x92>
   28e62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   28e66:	4405      	add	r5, r0
   28e68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   28e6c:	6035      	str	r5, [r6, #0]
   28e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28e70:	6018      	str	r0, [r3, #0]
   28e72:	4620      	mov	r0, r4
   28e74:	b002      	add	sp, #8
   28e76:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   28e7a:	6161      	str	r1, [r4, #20]
   28e7c:	e7e9      	b.n	28e52 <__d2b+0x56>
   28e7e:	a801      	add	r0, sp, #4
   28e80:	f009 f8cf 	bl	32022 <__lo0bits>
   28e84:	9b01      	ldr	r3, [sp, #4]
   28e86:	3020      	adds	r0, #32
   28e88:	2201      	movs	r2, #1
   28e8a:	6163      	str	r3, [r4, #20]
   28e8c:	e7e7      	b.n	28e5e <__d2b+0x62>
   28e8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   28e92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   28e96:	6030      	str	r0, [r6, #0]
   28e98:	6918      	ldr	r0, [r3, #16]
   28e9a:	f009 f8a0 	bl	31fde <__hi0bits>
   28e9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   28ea2:	e7e4      	b.n	28e6e <__d2b+0x72>
   28ea4:	0003885c 	.word	0x0003885c
   28ea8:	000388ef 	.word	0x000388ef

00028eac <_svfiprintf_r>:
   28eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28eb0:	4698      	mov	r8, r3
   28eb2:	898b      	ldrh	r3, [r1, #12]
   28eb4:	b09d      	sub	sp, #116	; 0x74
   28eb6:	4607      	mov	r7, r0
   28eb8:	061b      	lsls	r3, r3, #24
   28eba:	460d      	mov	r5, r1
   28ebc:	4614      	mov	r4, r2
   28ebe:	d510      	bpl.n	28ee2 <_svfiprintf_r+0x36>
   28ec0:	690b      	ldr	r3, [r1, #16]
   28ec2:	b973      	cbnz	r3, 28ee2 <_svfiprintf_r+0x36>
   28ec4:	2140      	movs	r1, #64	; 0x40
   28ec6:	f7fe f90f 	bl	270e8 <_malloc_r>
   28eca:	6028      	str	r0, [r5, #0]
   28ecc:	6128      	str	r0, [r5, #16]
   28ece:	b930      	cbnz	r0, 28ede <_svfiprintf_r+0x32>
   28ed0:	230c      	movs	r3, #12
   28ed2:	603b      	str	r3, [r7, #0]
   28ed4:	f04f 30ff 	mov.w	r0, #4294967295
   28ed8:	b01d      	add	sp, #116	; 0x74
   28eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ede:	2340      	movs	r3, #64	; 0x40
   28ee0:	616b      	str	r3, [r5, #20]
   28ee2:	2300      	movs	r3, #0
   28ee4:	f8cd 800c 	str.w	r8, [sp, #12]
   28ee8:	f04f 0901 	mov.w	r9, #1
   28eec:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 29090 <_svfiprintf_r+0x1e4>
   28ef0:	9309      	str	r3, [sp, #36]	; 0x24
   28ef2:	2320      	movs	r3, #32
   28ef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   28ef8:	2330      	movs	r3, #48	; 0x30
   28efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   28efe:	4623      	mov	r3, r4
   28f00:	469a      	mov	sl, r3
   28f02:	f813 2b01 	ldrb.w	r2, [r3], #1
   28f06:	b10a      	cbz	r2, 28f0c <_svfiprintf_r+0x60>
   28f08:	2a25      	cmp	r2, #37	; 0x25
   28f0a:	d1f9      	bne.n	28f00 <_svfiprintf_r+0x54>
   28f0c:	ebba 0b04 	subs.w	fp, sl, r4
   28f10:	d00b      	beq.n	28f2a <_svfiprintf_r+0x7e>
   28f12:	465b      	mov	r3, fp
   28f14:	4622      	mov	r2, r4
   28f16:	4629      	mov	r1, r5
   28f18:	4638      	mov	r0, r7
   28f1a:	f009 f93e 	bl	3219a <__ssputs_r>
   28f1e:	3001      	adds	r0, #1
   28f20:	f000 80a7 	beq.w	29072 <_svfiprintf_r+0x1c6>
   28f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28f26:	445a      	add	r2, fp
   28f28:	9209      	str	r2, [sp, #36]	; 0x24
   28f2a:	f89a 3000 	ldrb.w	r3, [sl]
   28f2e:	2b00      	cmp	r3, #0
   28f30:	f000 809f 	beq.w	29072 <_svfiprintf_r+0x1c6>
   28f34:	2300      	movs	r3, #0
   28f36:	f04f 32ff 	mov.w	r2, #4294967295
   28f3a:	f10a 0a01 	add.w	sl, sl, #1
   28f3e:	9304      	str	r3, [sp, #16]
   28f40:	9307      	str	r3, [sp, #28]
   28f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   28f46:	931a      	str	r3, [sp, #104]	; 0x68
   28f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
   28f4c:	4654      	mov	r4, sl
   28f4e:	2205      	movs	r2, #5
   28f50:	484f      	ldr	r0, [pc, #316]	; (29090 <_svfiprintf_r+0x1e4>)
   28f52:	f814 1b01 	ldrb.w	r1, [r4], #1
   28f56:	f009 f834 	bl	31fc2 <memchr>
   28f5a:	9a04      	ldr	r2, [sp, #16]
   28f5c:	b9d8      	cbnz	r0, 28f96 <_svfiprintf_r+0xea>
   28f5e:	06d0      	lsls	r0, r2, #27
   28f60:	bf44      	itt	mi
   28f62:	2320      	movmi	r3, #32
   28f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   28f68:	0711      	lsls	r1, r2, #28
   28f6a:	bf44      	itt	mi
   28f6c:	232b      	movmi	r3, #43	; 0x2b
   28f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   28f72:	f89a 3000 	ldrb.w	r3, [sl]
   28f76:	2b2a      	cmp	r3, #42	; 0x2a
   28f78:	d015      	beq.n	28fa6 <_svfiprintf_r+0xfa>
   28f7a:	9a07      	ldr	r2, [sp, #28]
   28f7c:	4654      	mov	r4, sl
   28f7e:	2000      	movs	r0, #0
   28f80:	f04f 0c0a 	mov.w	ip, #10
   28f84:	4621      	mov	r1, r4
   28f86:	f811 3b01 	ldrb.w	r3, [r1], #1
   28f8a:	3b30      	subs	r3, #48	; 0x30
   28f8c:	2b09      	cmp	r3, #9
   28f8e:	d94b      	bls.n	29028 <_svfiprintf_r+0x17c>
   28f90:	b1b0      	cbz	r0, 28fc0 <_svfiprintf_r+0x114>
   28f92:	9207      	str	r2, [sp, #28]
   28f94:	e014      	b.n	28fc0 <_svfiprintf_r+0x114>
   28f96:	eba0 0308 	sub.w	r3, r0, r8
   28f9a:	46a2      	mov	sl, r4
   28f9c:	fa09 f303 	lsl.w	r3, r9, r3
   28fa0:	4313      	orrs	r3, r2
   28fa2:	9304      	str	r3, [sp, #16]
   28fa4:	e7d2      	b.n	28f4c <_svfiprintf_r+0xa0>
   28fa6:	9b03      	ldr	r3, [sp, #12]
   28fa8:	1d19      	adds	r1, r3, #4
   28faa:	681b      	ldr	r3, [r3, #0]
   28fac:	2b00      	cmp	r3, #0
   28fae:	9103      	str	r1, [sp, #12]
   28fb0:	bfbb      	ittet	lt
   28fb2:	425b      	neglt	r3, r3
   28fb4:	f042 0202 	orrlt.w	r2, r2, #2
   28fb8:	9307      	strge	r3, [sp, #28]
   28fba:	9307      	strlt	r3, [sp, #28]
   28fbc:	bfb8      	it	lt
   28fbe:	9204      	strlt	r2, [sp, #16]
   28fc0:	7823      	ldrb	r3, [r4, #0]
   28fc2:	2b2e      	cmp	r3, #46	; 0x2e
   28fc4:	d10a      	bne.n	28fdc <_svfiprintf_r+0x130>
   28fc6:	7863      	ldrb	r3, [r4, #1]
   28fc8:	2b2a      	cmp	r3, #42	; 0x2a
   28fca:	d132      	bne.n	29032 <_svfiprintf_r+0x186>
   28fcc:	9b03      	ldr	r3, [sp, #12]
   28fce:	3402      	adds	r4, #2
   28fd0:	1d1a      	adds	r2, r3, #4
   28fd2:	681b      	ldr	r3, [r3, #0]
   28fd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   28fd8:	9203      	str	r2, [sp, #12]
   28fda:	9305      	str	r3, [sp, #20]
   28fdc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 29094 <_svfiprintf_r+0x1e8>
   28fe0:	2203      	movs	r2, #3
   28fe2:	7821      	ldrb	r1, [r4, #0]
   28fe4:	4650      	mov	r0, sl
   28fe6:	f008 ffec 	bl	31fc2 <memchr>
   28fea:	b138      	cbz	r0, 28ffc <_svfiprintf_r+0x150>
   28fec:	eba0 000a 	sub.w	r0, r0, sl
   28ff0:	2240      	movs	r2, #64	; 0x40
   28ff2:	9b04      	ldr	r3, [sp, #16]
   28ff4:	3401      	adds	r4, #1
   28ff6:	4082      	lsls	r2, r0
   28ff8:	4313      	orrs	r3, r2
   28ffa:	9304      	str	r3, [sp, #16]
   28ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
   29000:	2206      	movs	r2, #6
   29002:	4825      	ldr	r0, [pc, #148]	; (29098 <_svfiprintf_r+0x1ec>)
   29004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   29008:	f008 ffdb 	bl	31fc2 <memchr>
   2900c:	2800      	cmp	r0, #0
   2900e:	d036      	beq.n	2907e <_svfiprintf_r+0x1d2>
   29010:	4b22      	ldr	r3, [pc, #136]	; (2909c <_svfiprintf_r+0x1f0>)
   29012:	bb1b      	cbnz	r3, 2905c <_svfiprintf_r+0x1b0>
   29014:	9b03      	ldr	r3, [sp, #12]
   29016:	3307      	adds	r3, #7
   29018:	f023 0307 	bic.w	r3, r3, #7
   2901c:	3308      	adds	r3, #8
   2901e:	9303      	str	r3, [sp, #12]
   29020:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29022:	4433      	add	r3, r6
   29024:	9309      	str	r3, [sp, #36]	; 0x24
   29026:	e76a      	b.n	28efe <_svfiprintf_r+0x52>
   29028:	fb0c 3202 	mla	r2, ip, r2, r3
   2902c:	460c      	mov	r4, r1
   2902e:	2001      	movs	r0, #1
   29030:	e7a8      	b.n	28f84 <_svfiprintf_r+0xd8>
   29032:	2300      	movs	r3, #0
   29034:	3401      	adds	r4, #1
   29036:	f04f 0c0a 	mov.w	ip, #10
   2903a:	4619      	mov	r1, r3
   2903c:	9305      	str	r3, [sp, #20]
   2903e:	4620      	mov	r0, r4
   29040:	f810 2b01 	ldrb.w	r2, [r0], #1
   29044:	3a30      	subs	r2, #48	; 0x30
   29046:	2a09      	cmp	r2, #9
   29048:	d903      	bls.n	29052 <_svfiprintf_r+0x1a6>
   2904a:	2b00      	cmp	r3, #0
   2904c:	d0c6      	beq.n	28fdc <_svfiprintf_r+0x130>
   2904e:	9105      	str	r1, [sp, #20]
   29050:	e7c4      	b.n	28fdc <_svfiprintf_r+0x130>
   29052:	fb0c 2101 	mla	r1, ip, r1, r2
   29056:	4604      	mov	r4, r0
   29058:	2301      	movs	r3, #1
   2905a:	e7f0      	b.n	2903e <_svfiprintf_r+0x192>
   2905c:	ab03      	add	r3, sp, #12
   2905e:	462a      	mov	r2, r5
   29060:	a904      	add	r1, sp, #16
   29062:	4638      	mov	r0, r7
   29064:	9300      	str	r3, [sp, #0]
   29066:	4b0e      	ldr	r3, [pc, #56]	; (290a0 <_svfiprintf_r+0x1f4>)
   29068:	f7fe f898 	bl	2719c <_printf_float>
   2906c:	1c42      	adds	r2, r0, #1
   2906e:	4606      	mov	r6, r0
   29070:	d1d6      	bne.n	29020 <_svfiprintf_r+0x174>
   29072:	89ab      	ldrh	r3, [r5, #12]
   29074:	065b      	lsls	r3, r3, #25
   29076:	f53f af2d 	bmi.w	28ed4 <_svfiprintf_r+0x28>
   2907a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2907c:	e72c      	b.n	28ed8 <_svfiprintf_r+0x2c>
   2907e:	ab03      	add	r3, sp, #12
   29080:	462a      	mov	r2, r5
   29082:	a904      	add	r1, sp, #16
   29084:	4638      	mov	r0, r7
   29086:	9300      	str	r3, [sp, #0]
   29088:	4b05      	ldr	r3, [pc, #20]	; (290a0 <_svfiprintf_r+0x1f4>)
   2908a:	f7fe fabd 	bl	27608 <_printf_i>
   2908e:	e7ed      	b.n	2906c <_svfiprintf_r+0x1c0>
   29090:	00038964 	.word	0x00038964
   29094:	0003896a 	.word	0x0003896a
   29098:	0003896e 	.word	0x0003896e
   2909c:	0002719d 	.word	0x0002719d
   290a0:	0003219b 	.word	0x0003219b

000290a4 <_vfiprintf_r>:
   290a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   290a8:	460d      	mov	r5, r1
   290aa:	b09d      	sub	sp, #116	; 0x74
   290ac:	4614      	mov	r4, r2
   290ae:	4698      	mov	r8, r3
   290b0:	4606      	mov	r6, r0
   290b2:	b118      	cbz	r0, 290bc <_vfiprintf_r+0x18>
   290b4:	6983      	ldr	r3, [r0, #24]
   290b6:	b90b      	cbnz	r3, 290bc <_vfiprintf_r+0x18>
   290b8:	f7ff f816 	bl	280e8 <__sinit>
   290bc:	4b87      	ldr	r3, [pc, #540]	; (292dc <_vfiprintf_r+0x238>)
   290be:	429d      	cmp	r5, r3
   290c0:	d11b      	bne.n	290fa <_vfiprintf_r+0x56>
   290c2:	6875      	ldr	r5, [r6, #4]
   290c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   290c6:	07d9      	lsls	r1, r3, #31
   290c8:	d405      	bmi.n	290d6 <_vfiprintf_r+0x32>
   290ca:	89ab      	ldrh	r3, [r5, #12]
   290cc:	059a      	lsls	r2, r3, #22
   290ce:	d402      	bmi.n	290d6 <_vfiprintf_r+0x32>
   290d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   290d2:	f002 fc02 	bl	2b8da <__retarget_lock_acquire_recursive>
   290d6:	89ab      	ldrh	r3, [r5, #12]
   290d8:	071b      	lsls	r3, r3, #28
   290da:	d501      	bpl.n	290e0 <_vfiprintf_r+0x3c>
   290dc:	692b      	ldr	r3, [r5, #16]
   290de:	b9eb      	cbnz	r3, 2911c <_vfiprintf_r+0x78>
   290e0:	4629      	mov	r1, r5
   290e2:	4630      	mov	r0, r6
   290e4:	f000 f998 	bl	29418 <__swsetup_r>
   290e8:	b1c0      	cbz	r0, 2911c <_vfiprintf_r+0x78>
   290ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   290ec:	07dc      	lsls	r4, r3, #31
   290ee:	d50e      	bpl.n	2910e <_vfiprintf_r+0x6a>
   290f0:	f04f 30ff 	mov.w	r0, #4294967295
   290f4:	b01d      	add	sp, #116	; 0x74
   290f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   290fa:	4b79      	ldr	r3, [pc, #484]	; (292e0 <_vfiprintf_r+0x23c>)
   290fc:	429d      	cmp	r5, r3
   290fe:	d101      	bne.n	29104 <_vfiprintf_r+0x60>
   29100:	68b5      	ldr	r5, [r6, #8]
   29102:	e7df      	b.n	290c4 <_vfiprintf_r+0x20>
   29104:	4b77      	ldr	r3, [pc, #476]	; (292e4 <_vfiprintf_r+0x240>)
   29106:	429d      	cmp	r5, r3
   29108:	bf08      	it	eq
   2910a:	68f5      	ldreq	r5, [r6, #12]
   2910c:	e7da      	b.n	290c4 <_vfiprintf_r+0x20>
   2910e:	89ab      	ldrh	r3, [r5, #12]
   29110:	0598      	lsls	r0, r3, #22
   29112:	d4ed      	bmi.n	290f0 <_vfiprintf_r+0x4c>
   29114:	6da8      	ldr	r0, [r5, #88]	; 0x58
   29116:	f002 fbe8 	bl	2b8ea <__retarget_lock_release_recursive>
   2911a:	e7e9      	b.n	290f0 <_vfiprintf_r+0x4c>
   2911c:	2300      	movs	r3, #0
   2911e:	f8cd 800c 	str.w	r8, [sp, #12]
   29122:	f04f 0901 	mov.w	r9, #1
   29126:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 292e8 <_vfiprintf_r+0x244>
   2912a:	9309      	str	r3, [sp, #36]	; 0x24
   2912c:	2320      	movs	r3, #32
   2912e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   29132:	2330      	movs	r3, #48	; 0x30
   29134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   29138:	4623      	mov	r3, r4
   2913a:	469a      	mov	sl, r3
   2913c:	f813 2b01 	ldrb.w	r2, [r3], #1
   29140:	b10a      	cbz	r2, 29146 <_vfiprintf_r+0xa2>
   29142:	2a25      	cmp	r2, #37	; 0x25
   29144:	d1f9      	bne.n	2913a <_vfiprintf_r+0x96>
   29146:	ebba 0b04 	subs.w	fp, sl, r4
   2914a:	d00b      	beq.n	29164 <_vfiprintf_r+0xc0>
   2914c:	465b      	mov	r3, fp
   2914e:	4622      	mov	r2, r4
   29150:	4629      	mov	r1, r5
   29152:	4630      	mov	r0, r6
   29154:	f009 f891 	bl	3227a <__sfputs_r>
   29158:	3001      	adds	r0, #1
   2915a:	f000 80a6 	beq.w	292aa <_vfiprintf_r+0x206>
   2915e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29160:	445a      	add	r2, fp
   29162:	9209      	str	r2, [sp, #36]	; 0x24
   29164:	f89a 3000 	ldrb.w	r3, [sl]
   29168:	2b00      	cmp	r3, #0
   2916a:	f000 809e 	beq.w	292aa <_vfiprintf_r+0x206>
   2916e:	2300      	movs	r3, #0
   29170:	f04f 32ff 	mov.w	r2, #4294967295
   29174:	f10a 0a01 	add.w	sl, sl, #1
   29178:	9304      	str	r3, [sp, #16]
   2917a:	9307      	str	r3, [sp, #28]
   2917c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   29180:	931a      	str	r3, [sp, #104]	; 0x68
   29182:	e9cd 2305 	strd	r2, r3, [sp, #20]
   29186:	4654      	mov	r4, sl
   29188:	2205      	movs	r2, #5
   2918a:	4857      	ldr	r0, [pc, #348]	; (292e8 <_vfiprintf_r+0x244>)
   2918c:	f814 1b01 	ldrb.w	r1, [r4], #1
   29190:	f008 ff17 	bl	31fc2 <memchr>
   29194:	9b04      	ldr	r3, [sp, #16]
   29196:	b9d0      	cbnz	r0, 291ce <_vfiprintf_r+0x12a>
   29198:	06d9      	lsls	r1, r3, #27
   2919a:	bf44      	itt	mi
   2919c:	2220      	movmi	r2, #32
   2919e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   291a2:	071a      	lsls	r2, r3, #28
   291a4:	bf44      	itt	mi
   291a6:	222b      	movmi	r2, #43	; 0x2b
   291a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   291ac:	f89a 2000 	ldrb.w	r2, [sl]
   291b0:	2a2a      	cmp	r2, #42	; 0x2a
   291b2:	d014      	beq.n	291de <_vfiprintf_r+0x13a>
   291b4:	9a07      	ldr	r2, [sp, #28]
   291b6:	4654      	mov	r4, sl
   291b8:	2000      	movs	r0, #0
   291ba:	f04f 0c0a 	mov.w	ip, #10
   291be:	4621      	mov	r1, r4
   291c0:	f811 3b01 	ldrb.w	r3, [r1], #1
   291c4:	3b30      	subs	r3, #48	; 0x30
   291c6:	2b09      	cmp	r3, #9
   291c8:	d94a      	bls.n	29260 <_vfiprintf_r+0x1bc>
   291ca:	b970      	cbnz	r0, 291ea <_vfiprintf_r+0x146>
   291cc:	e014      	b.n	291f8 <_vfiprintf_r+0x154>
   291ce:	eba0 0008 	sub.w	r0, r0, r8
   291d2:	46a2      	mov	sl, r4
   291d4:	fa09 f000 	lsl.w	r0, r9, r0
   291d8:	4318      	orrs	r0, r3
   291da:	9004      	str	r0, [sp, #16]
   291dc:	e7d3      	b.n	29186 <_vfiprintf_r+0xe2>
   291de:	9a03      	ldr	r2, [sp, #12]
   291e0:	1d11      	adds	r1, r2, #4
   291e2:	6812      	ldr	r2, [r2, #0]
   291e4:	2a00      	cmp	r2, #0
   291e6:	9103      	str	r1, [sp, #12]
   291e8:	db01      	blt.n	291ee <_vfiprintf_r+0x14a>
   291ea:	9207      	str	r2, [sp, #28]
   291ec:	e004      	b.n	291f8 <_vfiprintf_r+0x154>
   291ee:	4252      	negs	r2, r2
   291f0:	f043 0302 	orr.w	r3, r3, #2
   291f4:	9207      	str	r2, [sp, #28]
   291f6:	9304      	str	r3, [sp, #16]
   291f8:	7823      	ldrb	r3, [r4, #0]
   291fa:	2b2e      	cmp	r3, #46	; 0x2e
   291fc:	d10a      	bne.n	29214 <_vfiprintf_r+0x170>
   291fe:	7863      	ldrb	r3, [r4, #1]
   29200:	2b2a      	cmp	r3, #42	; 0x2a
   29202:	d132      	bne.n	2926a <_vfiprintf_r+0x1c6>
   29204:	9b03      	ldr	r3, [sp, #12]
   29206:	3402      	adds	r4, #2
   29208:	1d1a      	adds	r2, r3, #4
   2920a:	681b      	ldr	r3, [r3, #0]
   2920c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   29210:	9203      	str	r2, [sp, #12]
   29212:	9305      	str	r3, [sp, #20]
   29214:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 292ec <_vfiprintf_r+0x248>
   29218:	2203      	movs	r2, #3
   2921a:	7821      	ldrb	r1, [r4, #0]
   2921c:	4650      	mov	r0, sl
   2921e:	f008 fed0 	bl	31fc2 <memchr>
   29222:	b138      	cbz	r0, 29234 <_vfiprintf_r+0x190>
   29224:	eba0 000a 	sub.w	r0, r0, sl
   29228:	2240      	movs	r2, #64	; 0x40
   2922a:	9b04      	ldr	r3, [sp, #16]
   2922c:	3401      	adds	r4, #1
   2922e:	4082      	lsls	r2, r0
   29230:	4313      	orrs	r3, r2
   29232:	9304      	str	r3, [sp, #16]
   29234:	f814 1b01 	ldrb.w	r1, [r4], #1
   29238:	2206      	movs	r2, #6
   2923a:	482d      	ldr	r0, [pc, #180]	; (292f0 <_vfiprintf_r+0x24c>)
   2923c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   29240:	f008 febf 	bl	31fc2 <memchr>
   29244:	2800      	cmp	r0, #0
   29246:	d03f      	beq.n	292c8 <_vfiprintf_r+0x224>
   29248:	4b2a      	ldr	r3, [pc, #168]	; (292f4 <_vfiprintf_r+0x250>)
   2924a:	bb1b      	cbnz	r3, 29294 <_vfiprintf_r+0x1f0>
   2924c:	9b03      	ldr	r3, [sp, #12]
   2924e:	3307      	adds	r3, #7
   29250:	f023 0307 	bic.w	r3, r3, #7
   29254:	3308      	adds	r3, #8
   29256:	9303      	str	r3, [sp, #12]
   29258:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2925a:	443b      	add	r3, r7
   2925c:	9309      	str	r3, [sp, #36]	; 0x24
   2925e:	e76b      	b.n	29138 <_vfiprintf_r+0x94>
   29260:	fb0c 3202 	mla	r2, ip, r2, r3
   29264:	460c      	mov	r4, r1
   29266:	2001      	movs	r0, #1
   29268:	e7a9      	b.n	291be <_vfiprintf_r+0x11a>
   2926a:	2300      	movs	r3, #0
   2926c:	3401      	adds	r4, #1
   2926e:	f04f 0c0a 	mov.w	ip, #10
   29272:	4619      	mov	r1, r3
   29274:	9305      	str	r3, [sp, #20]
   29276:	4620      	mov	r0, r4
   29278:	f810 2b01 	ldrb.w	r2, [r0], #1
   2927c:	3a30      	subs	r2, #48	; 0x30
   2927e:	2a09      	cmp	r2, #9
   29280:	d903      	bls.n	2928a <_vfiprintf_r+0x1e6>
   29282:	2b00      	cmp	r3, #0
   29284:	d0c6      	beq.n	29214 <_vfiprintf_r+0x170>
   29286:	9105      	str	r1, [sp, #20]
   29288:	e7c4      	b.n	29214 <_vfiprintf_r+0x170>
   2928a:	fb0c 2101 	mla	r1, ip, r1, r2
   2928e:	4604      	mov	r4, r0
   29290:	2301      	movs	r3, #1
   29292:	e7f0      	b.n	29276 <_vfiprintf_r+0x1d2>
   29294:	ab03      	add	r3, sp, #12
   29296:	462a      	mov	r2, r5
   29298:	a904      	add	r1, sp, #16
   2929a:	4630      	mov	r0, r6
   2929c:	9300      	str	r3, [sp, #0]
   2929e:	4b16      	ldr	r3, [pc, #88]	; (292f8 <_vfiprintf_r+0x254>)
   292a0:	f7fd ff7c 	bl	2719c <_printf_float>
   292a4:	4607      	mov	r7, r0
   292a6:	1c78      	adds	r0, r7, #1
   292a8:	d1d6      	bne.n	29258 <_vfiprintf_r+0x1b4>
   292aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   292ac:	07d9      	lsls	r1, r3, #31
   292ae:	d405      	bmi.n	292bc <_vfiprintf_r+0x218>
   292b0:	89ab      	ldrh	r3, [r5, #12]
   292b2:	059a      	lsls	r2, r3, #22
   292b4:	d402      	bmi.n	292bc <_vfiprintf_r+0x218>
   292b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   292b8:	f002 fb17 	bl	2b8ea <__retarget_lock_release_recursive>
   292bc:	89ab      	ldrh	r3, [r5, #12]
   292be:	065b      	lsls	r3, r3, #25
   292c0:	f53f af16 	bmi.w	290f0 <_vfiprintf_r+0x4c>
   292c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   292c6:	e715      	b.n	290f4 <_vfiprintf_r+0x50>
   292c8:	ab03      	add	r3, sp, #12
   292ca:	462a      	mov	r2, r5
   292cc:	a904      	add	r1, sp, #16
   292ce:	4630      	mov	r0, r6
   292d0:	9300      	str	r3, [sp, #0]
   292d2:	4b09      	ldr	r3, [pc, #36]	; (292f8 <_vfiprintf_r+0x254>)
   292d4:	f7fe f998 	bl	27608 <_printf_i>
   292d8:	e7e4      	b.n	292a4 <_vfiprintf_r+0x200>
   292da:	bf00      	nop
   292dc:	00034198 	.word	0x00034198
   292e0:	00034178 	.word	0x00034178
   292e4:	00034158 	.word	0x00034158
   292e8:	00038964 	.word	0x00038964
   292ec:	0003896a 	.word	0x0003896a
   292f0:	0003896e 	.word	0x0003896e
   292f4:	0002719d 	.word	0x0002719d
   292f8:	0003227b 	.word	0x0003227b

000292fc <siscanf>:
   292fc:	b40e      	push	{r1, r2, r3}
   292fe:	b530      	push	{r4, r5, lr}
   29300:	b09c      	sub	sp, #112	; 0x70
   29302:	f44f 7201 	mov.w	r2, #516	; 0x204
   29306:	ac1f      	add	r4, sp, #124	; 0x7c
   29308:	f8ad 2014 	strh.w	r2, [sp, #20]
   2930c:	9002      	str	r0, [sp, #8]
   2930e:	f854 5b04 	ldr.w	r5, [r4], #4
   29312:	9006      	str	r0, [sp, #24]
   29314:	f7e0 f879 	bl	940a <strlen>
   29318:	4b0b      	ldr	r3, [pc, #44]	; (29348 <siscanf+0x4c>)
   2931a:	462a      	mov	r2, r5
   2931c:	9003      	str	r0, [sp, #12]
   2931e:	a902      	add	r1, sp, #8
   29320:	930b      	str	r3, [sp, #44]	; 0x2c
   29322:	2300      	movs	r3, #0
   29324:	9007      	str	r0, [sp, #28]
   29326:	930f      	str	r3, [sp, #60]	; 0x3c
   29328:	9314      	str	r3, [sp, #80]	; 0x50
   2932a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2932e:	4807      	ldr	r0, [pc, #28]	; (2934c <siscanf+0x50>)
   29330:	f8ad 3016 	strh.w	r3, [sp, #22]
   29334:	4623      	mov	r3, r4
   29336:	6800      	ldr	r0, [r0, #0]
   29338:	9401      	str	r4, [sp, #4]
   2933a:	f000 f983 	bl	29644 <__ssvfiscanf_r>
   2933e:	b01c      	add	sp, #112	; 0x70
   29340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   29344:	b003      	add	sp, #12
   29346:	4770      	bx	lr
   29348:	000322c1 	.word	0x000322c1
   2934c:	200087f8 	.word	0x200087f8

00029350 <__swbuf_r>:
   29350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29352:	460e      	mov	r6, r1
   29354:	4614      	mov	r4, r2
   29356:	4605      	mov	r5, r0
   29358:	b118      	cbz	r0, 29362 <__swbuf_r+0x12>
   2935a:	6983      	ldr	r3, [r0, #24]
   2935c:	b90b      	cbnz	r3, 29362 <__swbuf_r+0x12>
   2935e:	f7fe fec3 	bl	280e8 <__sinit>
   29362:	4b21      	ldr	r3, [pc, #132]	; (293e8 <__swbuf_r+0x98>)
   29364:	429c      	cmp	r4, r3
   29366:	d110      	bne.n	2938a <__swbuf_r+0x3a>
   29368:	686c      	ldr	r4, [r5, #4]
   2936a:	69a3      	ldr	r3, [r4, #24]
   2936c:	60a3      	str	r3, [r4, #8]
   2936e:	89a3      	ldrh	r3, [r4, #12]
   29370:	071a      	lsls	r2, r3, #28
   29372:	d501      	bpl.n	29378 <__swbuf_r+0x28>
   29374:	6923      	ldr	r3, [r4, #16]
   29376:	b993      	cbnz	r3, 2939e <__swbuf_r+0x4e>
   29378:	4621      	mov	r1, r4
   2937a:	4628      	mov	r0, r5
   2937c:	f000 f84c 	bl	29418 <__swsetup_r>
   29380:	b168      	cbz	r0, 2939e <__swbuf_r+0x4e>
   29382:	f04f 37ff 	mov.w	r7, #4294967295
   29386:	4638      	mov	r0, r7
   29388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2938a:	4b18      	ldr	r3, [pc, #96]	; (293ec <__swbuf_r+0x9c>)
   2938c:	429c      	cmp	r4, r3
   2938e:	d101      	bne.n	29394 <__swbuf_r+0x44>
   29390:	68ac      	ldr	r4, [r5, #8]
   29392:	e7ea      	b.n	2936a <__swbuf_r+0x1a>
   29394:	4b16      	ldr	r3, [pc, #88]	; (293f0 <__swbuf_r+0xa0>)
   29396:	429c      	cmp	r4, r3
   29398:	bf08      	it	eq
   2939a:	68ec      	ldreq	r4, [r5, #12]
   2939c:	e7e5      	b.n	2936a <__swbuf_r+0x1a>
   2939e:	6923      	ldr	r3, [r4, #16]
   293a0:	b2f6      	uxtb	r6, r6
   293a2:	6820      	ldr	r0, [r4, #0]
   293a4:	4637      	mov	r7, r6
   293a6:	1ac0      	subs	r0, r0, r3
   293a8:	6963      	ldr	r3, [r4, #20]
   293aa:	4283      	cmp	r3, r0
   293ac:	dc05      	bgt.n	293ba <__swbuf_r+0x6a>
   293ae:	4621      	mov	r1, r4
   293b0:	4628      	mov	r0, r5
   293b2:	f000 f8b9 	bl	29528 <_fflush_r>
   293b6:	2800      	cmp	r0, #0
   293b8:	d1e3      	bne.n	29382 <__swbuf_r+0x32>
   293ba:	68a3      	ldr	r3, [r4, #8]
   293bc:	3001      	adds	r0, #1
   293be:	3b01      	subs	r3, #1
   293c0:	60a3      	str	r3, [r4, #8]
   293c2:	6823      	ldr	r3, [r4, #0]
   293c4:	1c5a      	adds	r2, r3, #1
   293c6:	6022      	str	r2, [r4, #0]
   293c8:	701e      	strb	r6, [r3, #0]
   293ca:	6963      	ldr	r3, [r4, #20]
   293cc:	4283      	cmp	r3, r0
   293ce:	d004      	beq.n	293da <__swbuf_r+0x8a>
   293d0:	89a3      	ldrh	r3, [r4, #12]
   293d2:	07db      	lsls	r3, r3, #31
   293d4:	d5d7      	bpl.n	29386 <__swbuf_r+0x36>
   293d6:	2e0a      	cmp	r6, #10
   293d8:	d1d5      	bne.n	29386 <__swbuf_r+0x36>
   293da:	4621      	mov	r1, r4
   293dc:	4628      	mov	r0, r5
   293de:	f000 f8a3 	bl	29528 <_fflush_r>
   293e2:	2800      	cmp	r0, #0
   293e4:	d0cf      	beq.n	29386 <__swbuf_r+0x36>
   293e6:	e7cc      	b.n	29382 <__swbuf_r+0x32>
   293e8:	00034198 	.word	0x00034198
   293ec:	00034178 	.word	0x00034178
   293f0:	00034158 	.word	0x00034158

000293f4 <_write_r>:
   293f4:	b538      	push	{r3, r4, r5, lr}
   293f6:	4604      	mov	r4, r0
   293f8:	4d06      	ldr	r5, [pc, #24]	; (29414 <_write_r+0x20>)
   293fa:	4608      	mov	r0, r1
   293fc:	4611      	mov	r1, r2
   293fe:	2200      	movs	r2, #0
   29400:	602a      	str	r2, [r5, #0]
   29402:	461a      	mov	r2, r3
   29404:	f002 fa42 	bl	2b88c <_write>
   29408:	1c43      	adds	r3, r0, #1
   2940a:	d102      	bne.n	29412 <_write_r+0x1e>
   2940c:	682b      	ldr	r3, [r5, #0]
   2940e:	b103      	cbz	r3, 29412 <_write_r+0x1e>
   29410:	6023      	str	r3, [r4, #0]
   29412:	bd38      	pop	{r3, r4, r5, pc}
   29414:	20030d80 	.word	0x20030d80

00029418 <__swsetup_r>:
   29418:	4b31      	ldr	r3, [pc, #196]	; (294e0 <__swsetup_r+0xc8>)
   2941a:	b570      	push	{r4, r5, r6, lr}
   2941c:	681d      	ldr	r5, [r3, #0]
   2941e:	4606      	mov	r6, r0
   29420:	460c      	mov	r4, r1
   29422:	b125      	cbz	r5, 2942e <__swsetup_r+0x16>
   29424:	69ab      	ldr	r3, [r5, #24]
   29426:	b913      	cbnz	r3, 2942e <__swsetup_r+0x16>
   29428:	4628      	mov	r0, r5
   2942a:	f7fe fe5d 	bl	280e8 <__sinit>
   2942e:	4b2d      	ldr	r3, [pc, #180]	; (294e4 <__swsetup_r+0xcc>)
   29430:	429c      	cmp	r4, r3
   29432:	d10e      	bne.n	29452 <__swsetup_r+0x3a>
   29434:	686c      	ldr	r4, [r5, #4]
   29436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2943a:	071a      	lsls	r2, r3, #28
   2943c:	d42c      	bmi.n	29498 <__swsetup_r+0x80>
   2943e:	06dd      	lsls	r5, r3, #27
   29440:	d411      	bmi.n	29466 <__swsetup_r+0x4e>
   29442:	2209      	movs	r2, #9
   29444:	6032      	str	r2, [r6, #0]
   29446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2944a:	f04f 30ff 	mov.w	r0, #4294967295
   2944e:	81a3      	strh	r3, [r4, #12]
   29450:	e03d      	b.n	294ce <__swsetup_r+0xb6>
   29452:	4b25      	ldr	r3, [pc, #148]	; (294e8 <__swsetup_r+0xd0>)
   29454:	429c      	cmp	r4, r3
   29456:	d101      	bne.n	2945c <__swsetup_r+0x44>
   29458:	68ac      	ldr	r4, [r5, #8]
   2945a:	e7ec      	b.n	29436 <__swsetup_r+0x1e>
   2945c:	4b23      	ldr	r3, [pc, #140]	; (294ec <__swsetup_r+0xd4>)
   2945e:	429c      	cmp	r4, r3
   29460:	bf08      	it	eq
   29462:	68ec      	ldreq	r4, [r5, #12]
   29464:	e7e7      	b.n	29436 <__swsetup_r+0x1e>
   29466:	0758      	lsls	r0, r3, #29
   29468:	d512      	bpl.n	29490 <__swsetup_r+0x78>
   2946a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2946c:	b141      	cbz	r1, 29480 <__swsetup_r+0x68>
   2946e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29472:	4299      	cmp	r1, r3
   29474:	d002      	beq.n	2947c <__swsetup_r+0x64>
   29476:	4630      	mov	r0, r6
   29478:	f7fd fdec 	bl	27054 <_free_r>
   2947c:	2300      	movs	r3, #0
   2947e:	6363      	str	r3, [r4, #52]	; 0x34
   29480:	89a3      	ldrh	r3, [r4, #12]
   29482:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29486:	81a3      	strh	r3, [r4, #12]
   29488:	2300      	movs	r3, #0
   2948a:	6063      	str	r3, [r4, #4]
   2948c:	6923      	ldr	r3, [r4, #16]
   2948e:	6023      	str	r3, [r4, #0]
   29490:	89a3      	ldrh	r3, [r4, #12]
   29492:	f043 0308 	orr.w	r3, r3, #8
   29496:	81a3      	strh	r3, [r4, #12]
   29498:	6923      	ldr	r3, [r4, #16]
   2949a:	b94b      	cbnz	r3, 294b0 <__swsetup_r+0x98>
   2949c:	89a3      	ldrh	r3, [r4, #12]
   2949e:	f403 7320 	and.w	r3, r3, #640	; 0x280
   294a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   294a6:	d003      	beq.n	294b0 <__swsetup_r+0x98>
   294a8:	4621      	mov	r1, r4
   294aa:	4630      	mov	r0, r6
   294ac:	f000 f88a 	bl	295c4 <__smakebuf_r>
   294b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   294b4:	f013 0201 	ands.w	r2, r3, #1
   294b8:	d00a      	beq.n	294d0 <__swsetup_r+0xb8>
   294ba:	2200      	movs	r2, #0
   294bc:	60a2      	str	r2, [r4, #8]
   294be:	6962      	ldr	r2, [r4, #20]
   294c0:	4252      	negs	r2, r2
   294c2:	61a2      	str	r2, [r4, #24]
   294c4:	6922      	ldr	r2, [r4, #16]
   294c6:	b942      	cbnz	r2, 294da <__swsetup_r+0xc2>
   294c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   294cc:	d1bb      	bne.n	29446 <__swsetup_r+0x2e>
   294ce:	bd70      	pop	{r4, r5, r6, pc}
   294d0:	0799      	lsls	r1, r3, #30
   294d2:	bf58      	it	pl
   294d4:	6962      	ldrpl	r2, [r4, #20]
   294d6:	60a2      	str	r2, [r4, #8]
   294d8:	e7f4      	b.n	294c4 <__swsetup_r+0xac>
   294da:	2000      	movs	r0, #0
   294dc:	e7f7      	b.n	294ce <__swsetup_r+0xb6>
   294de:	bf00      	nop
   294e0:	200087f8 	.word	0x200087f8
   294e4:	00034198 	.word	0x00034198
   294e8:	00034178 	.word	0x00034178
   294ec:	00034158 	.word	0x00034158

000294f0 <_close_r>:
   294f0:	b538      	push	{r3, r4, r5, lr}
   294f2:	2300      	movs	r3, #0
   294f4:	4d05      	ldr	r5, [pc, #20]	; (2950c <_close_r+0x1c>)
   294f6:	4604      	mov	r4, r0
   294f8:	4608      	mov	r0, r1
   294fa:	602b      	str	r3, [r5, #0]
   294fc:	f002 f9ca 	bl	2b894 <_close>
   29500:	1c43      	adds	r3, r0, #1
   29502:	d102      	bne.n	2950a <_close_r+0x1a>
   29504:	682b      	ldr	r3, [r5, #0]
   29506:	b103      	cbz	r3, 2950a <_close_r+0x1a>
   29508:	6023      	str	r3, [r4, #0]
   2950a:	bd38      	pop	{r3, r4, r5, pc}
   2950c:	20030d80 	.word	0x20030d80

00029510 <__env_lock>:
   29510:	4801      	ldr	r0, [pc, #4]	; (29518 <__env_lock+0x8>)
   29512:	f002 b9e2 	b.w	2b8da <__retarget_lock_acquire_recursive>
   29516:	bf00      	nop
   29518:	20008ba0 	.word	0x20008ba0

0002951c <__env_unlock>:
   2951c:	4801      	ldr	r0, [pc, #4]	; (29524 <__env_unlock+0x8>)
   2951e:	f002 b9e4 	b.w	2b8ea <__retarget_lock_release_recursive>
   29522:	bf00      	nop
   29524:	20008ba0 	.word	0x20008ba0

00029528 <_fflush_r>:
   29528:	b538      	push	{r3, r4, r5, lr}
   2952a:	690b      	ldr	r3, [r1, #16]
   2952c:	4605      	mov	r5, r0
   2952e:	460c      	mov	r4, r1
   29530:	b913      	cbnz	r3, 29538 <_fflush_r+0x10>
   29532:	2500      	movs	r5, #0
   29534:	4628      	mov	r0, r5
   29536:	bd38      	pop	{r3, r4, r5, pc}
   29538:	b118      	cbz	r0, 29542 <_fflush_r+0x1a>
   2953a:	6983      	ldr	r3, [r0, #24]
   2953c:	b90b      	cbnz	r3, 29542 <_fflush_r+0x1a>
   2953e:	f7fe fdd3 	bl	280e8 <__sinit>
   29542:	4b14      	ldr	r3, [pc, #80]	; (29594 <_fflush_r+0x6c>)
   29544:	429c      	cmp	r4, r3
   29546:	d11b      	bne.n	29580 <_fflush_r+0x58>
   29548:	686c      	ldr	r4, [r5, #4]
   2954a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2954e:	2b00      	cmp	r3, #0
   29550:	d0ef      	beq.n	29532 <_fflush_r+0xa>
   29552:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29554:	07d0      	lsls	r0, r2, #31
   29556:	d404      	bmi.n	29562 <_fflush_r+0x3a>
   29558:	0599      	lsls	r1, r3, #22
   2955a:	d402      	bmi.n	29562 <_fflush_r+0x3a>
   2955c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2955e:	f002 f9bc 	bl	2b8da <__retarget_lock_acquire_recursive>
   29562:	4628      	mov	r0, r5
   29564:	4621      	mov	r1, r4
   29566:	f008 fef3 	bl	32350 <__sflush_r>
   2956a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2956c:	4605      	mov	r5, r0
   2956e:	07da      	lsls	r2, r3, #31
   29570:	d4e0      	bmi.n	29534 <_fflush_r+0xc>
   29572:	89a3      	ldrh	r3, [r4, #12]
   29574:	059b      	lsls	r3, r3, #22
   29576:	d4dd      	bmi.n	29534 <_fflush_r+0xc>
   29578:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2957a:	f002 f9b6 	bl	2b8ea <__retarget_lock_release_recursive>
   2957e:	e7d9      	b.n	29534 <_fflush_r+0xc>
   29580:	4b05      	ldr	r3, [pc, #20]	; (29598 <_fflush_r+0x70>)
   29582:	429c      	cmp	r4, r3
   29584:	d101      	bne.n	2958a <_fflush_r+0x62>
   29586:	68ac      	ldr	r4, [r5, #8]
   29588:	e7df      	b.n	2954a <_fflush_r+0x22>
   2958a:	4b04      	ldr	r3, [pc, #16]	; (2959c <_fflush_r+0x74>)
   2958c:	429c      	cmp	r4, r3
   2958e:	bf08      	it	eq
   29590:	68ec      	ldreq	r4, [r5, #12]
   29592:	e7da      	b.n	2954a <_fflush_r+0x22>
   29594:	00034198 	.word	0x00034198
   29598:	00034178 	.word	0x00034178
   2959c:	00034158 	.word	0x00034158

000295a0 <_lseek_r>:
   295a0:	b538      	push	{r3, r4, r5, lr}
   295a2:	4604      	mov	r4, r0
   295a4:	4d06      	ldr	r5, [pc, #24]	; (295c0 <_lseek_r+0x20>)
   295a6:	4608      	mov	r0, r1
   295a8:	4611      	mov	r1, r2
   295aa:	2200      	movs	r2, #0
   295ac:	602a      	str	r2, [r5, #0]
   295ae:	461a      	mov	r2, r3
   295b0:	f002 f973 	bl	2b89a <_lseek>
   295b4:	1c43      	adds	r3, r0, #1
   295b6:	d102      	bne.n	295be <_lseek_r+0x1e>
   295b8:	682b      	ldr	r3, [r5, #0]
   295ba:	b103      	cbz	r3, 295be <_lseek_r+0x1e>
   295bc:	6023      	str	r3, [r4, #0]
   295be:	bd38      	pop	{r3, r4, r5, pc}
   295c0:	20030d80 	.word	0x20030d80

000295c4 <__smakebuf_r>:
   295c4:	898b      	ldrh	r3, [r1, #12]
   295c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   295c8:	079d      	lsls	r5, r3, #30
   295ca:	4606      	mov	r6, r0
   295cc:	460c      	mov	r4, r1
   295ce:	d507      	bpl.n	295e0 <__smakebuf_r+0x1c>
   295d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   295d4:	6023      	str	r3, [r4, #0]
   295d6:	6123      	str	r3, [r4, #16]
   295d8:	2301      	movs	r3, #1
   295da:	6163      	str	r3, [r4, #20]
   295dc:	b003      	add	sp, #12
   295de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   295e0:	ab01      	add	r3, sp, #4
   295e2:	466a      	mov	r2, sp
   295e4:	f008 ff33 	bl	3244e <__swhatbuf_r>
   295e8:	9f00      	ldr	r7, [sp, #0]
   295ea:	4605      	mov	r5, r0
   295ec:	4630      	mov	r0, r6
   295ee:	4639      	mov	r1, r7
   295f0:	f7fd fd7a 	bl	270e8 <_malloc_r>
   295f4:	b948      	cbnz	r0, 2960a <__smakebuf_r+0x46>
   295f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   295fa:	059a      	lsls	r2, r3, #22
   295fc:	d4ee      	bmi.n	295dc <__smakebuf_r+0x18>
   295fe:	f023 0303 	bic.w	r3, r3, #3
   29602:	f043 0302 	orr.w	r3, r3, #2
   29606:	81a3      	strh	r3, [r4, #12]
   29608:	e7e2      	b.n	295d0 <__smakebuf_r+0xc>
   2960a:	4b0d      	ldr	r3, [pc, #52]	; (29640 <__smakebuf_r+0x7c>)
   2960c:	62b3      	str	r3, [r6, #40]	; 0x28
   2960e:	89a3      	ldrh	r3, [r4, #12]
   29610:	6020      	str	r0, [r4, #0]
   29612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29616:	81a3      	strh	r3, [r4, #12]
   29618:	9b01      	ldr	r3, [sp, #4]
   2961a:	e9c4 0704 	strd	r0, r7, [r4, #16]
   2961e:	b15b      	cbz	r3, 29638 <__smakebuf_r+0x74>
   29620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29624:	4630      	mov	r0, r6
   29626:	f000 fb1b 	bl	29c60 <_isatty_r>
   2962a:	b128      	cbz	r0, 29638 <__smakebuf_r+0x74>
   2962c:	89a3      	ldrh	r3, [r4, #12]
   2962e:	f023 0303 	bic.w	r3, r3, #3
   29632:	f043 0301 	orr.w	r3, r3, #1
   29636:	81a3      	strh	r3, [r4, #12]
   29638:	89a3      	ldrh	r3, [r4, #12]
   2963a:	431d      	orrs	r5, r3
   2963c:	81a5      	strh	r5, [r4, #12]
   2963e:	e7cd      	b.n	295dc <__smakebuf_r+0x18>
   29640:	000280ad 	.word	0x000280ad

00029644 <__ssvfiscanf_r>:
   29644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29648:	460c      	mov	r4, r1
   2964a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   2964e:	2100      	movs	r1, #0
   29650:	4606      	mov	r6, r0
   29652:	f10d 0804 	add.w	r8, sp, #4
   29656:	4fa7      	ldr	r7, [pc, #668]	; (298f4 <__ssvfiscanf_r+0x2b0>)
   29658:	9300      	str	r3, [sp, #0]
   2965a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2965e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   29662:	49a5      	ldr	r1, [pc, #660]	; (298f8 <__ssvfiscanf_r+0x2b4>)
   29664:	91a0      	str	r1, [sp, #640]	; 0x280
   29666:	49a5      	ldr	r1, [pc, #660]	; (298fc <__ssvfiscanf_r+0x2b8>)
   29668:	91a1      	str	r1, [sp, #644]	; 0x284
   2966a:	7813      	ldrb	r3, [r2, #0]
   2966c:	2b00      	cmp	r3, #0
   2966e:	f000 815c 	beq.w	2992a <__ssvfiscanf_r+0x2e6>
   29672:	5cf9      	ldrb	r1, [r7, r3]
   29674:	1c55      	adds	r5, r2, #1
   29676:	f011 0108 	ands.w	r1, r1, #8
   2967a:	d019      	beq.n	296b0 <__ssvfiscanf_r+0x6c>
   2967c:	6863      	ldr	r3, [r4, #4]
   2967e:	2b00      	cmp	r3, #0
   29680:	dd0f      	ble.n	296a2 <__ssvfiscanf_r+0x5e>
   29682:	6823      	ldr	r3, [r4, #0]
   29684:	781a      	ldrb	r2, [r3, #0]
   29686:	5cba      	ldrb	r2, [r7, r2]
   29688:	0712      	lsls	r2, r2, #28
   2968a:	d401      	bmi.n	29690 <__ssvfiscanf_r+0x4c>
   2968c:	462a      	mov	r2, r5
   2968e:	e7ec      	b.n	2966a <__ssvfiscanf_r+0x26>
   29690:	9a45      	ldr	r2, [sp, #276]	; 0x114
   29692:	3301      	adds	r3, #1
   29694:	3201      	adds	r2, #1
   29696:	6023      	str	r3, [r4, #0]
   29698:	9245      	str	r2, [sp, #276]	; 0x114
   2969a:	6862      	ldr	r2, [r4, #4]
   2969c:	3a01      	subs	r2, #1
   2969e:	6062      	str	r2, [r4, #4]
   296a0:	e7ec      	b.n	2967c <__ssvfiscanf_r+0x38>
   296a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   296a4:	4621      	mov	r1, r4
   296a6:	4630      	mov	r0, r6
   296a8:	4798      	blx	r3
   296aa:	2800      	cmp	r0, #0
   296ac:	d0e9      	beq.n	29682 <__ssvfiscanf_r+0x3e>
   296ae:	e7ed      	b.n	2968c <__ssvfiscanf_r+0x48>
   296b0:	2b25      	cmp	r3, #37	; 0x25
   296b2:	d012      	beq.n	296da <__ssvfiscanf_r+0x96>
   296b4:	4699      	mov	r9, r3
   296b6:	6863      	ldr	r3, [r4, #4]
   296b8:	2b00      	cmp	r3, #0
   296ba:	f340 8094 	ble.w	297e6 <__ssvfiscanf_r+0x1a2>
   296be:	6822      	ldr	r2, [r4, #0]
   296c0:	7813      	ldrb	r3, [r2, #0]
   296c2:	454b      	cmp	r3, r9
   296c4:	f040 8131 	bne.w	2992a <__ssvfiscanf_r+0x2e6>
   296c8:	6863      	ldr	r3, [r4, #4]
   296ca:	3201      	adds	r2, #1
   296cc:	3b01      	subs	r3, #1
   296ce:	6022      	str	r2, [r4, #0]
   296d0:	6063      	str	r3, [r4, #4]
   296d2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   296d4:	3301      	adds	r3, #1
   296d6:	9345      	str	r3, [sp, #276]	; 0x114
   296d8:	e7d8      	b.n	2968c <__ssvfiscanf_r+0x48>
   296da:	9141      	str	r1, [sp, #260]	; 0x104
   296dc:	9143      	str	r1, [sp, #268]	; 0x10c
   296de:	7853      	ldrb	r3, [r2, #1]
   296e0:	2b2a      	cmp	r3, #42	; 0x2a
   296e2:	bf04      	itt	eq
   296e4:	2310      	moveq	r3, #16
   296e6:	1c95      	addeq	r5, r2, #2
   296e8:	f04f 020a 	mov.w	r2, #10
   296ec:	bf08      	it	eq
   296ee:	9341      	streq	r3, [sp, #260]	; 0x104
   296f0:	46a9      	mov	r9, r5
   296f2:	f819 1b01 	ldrb.w	r1, [r9], #1
   296f6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   296fa:	2b09      	cmp	r3, #9
   296fc:	d91e      	bls.n	2973c <__ssvfiscanf_r+0xf8>
   296fe:	f8df a200 	ldr.w	sl, [pc, #512]	; 29900 <__ssvfiscanf_r+0x2bc>
   29702:	2203      	movs	r2, #3
   29704:	4650      	mov	r0, sl
   29706:	f008 fc5c 	bl	31fc2 <memchr>
   2970a:	b138      	cbz	r0, 2971c <__ssvfiscanf_r+0xd8>
   2970c:	eba0 000a 	sub.w	r0, r0, sl
   29710:	2301      	movs	r3, #1
   29712:	9a41      	ldr	r2, [sp, #260]	; 0x104
   29714:	464d      	mov	r5, r9
   29716:	4083      	lsls	r3, r0
   29718:	4313      	orrs	r3, r2
   2971a:	9341      	str	r3, [sp, #260]	; 0x104
   2971c:	f815 3b01 	ldrb.w	r3, [r5], #1
   29720:	2b78      	cmp	r3, #120	; 0x78
   29722:	d806      	bhi.n	29732 <__ssvfiscanf_r+0xee>
   29724:	2b57      	cmp	r3, #87	; 0x57
   29726:	d810      	bhi.n	2974a <__ssvfiscanf_r+0x106>
   29728:	2b25      	cmp	r3, #37	; 0x25
   2972a:	d0c3      	beq.n	296b4 <__ssvfiscanf_r+0x70>
   2972c:	d856      	bhi.n	297dc <__ssvfiscanf_r+0x198>
   2972e:	2b00      	cmp	r3, #0
   29730:	d064      	beq.n	297fc <__ssvfiscanf_r+0x1b8>
   29732:	2303      	movs	r3, #3
   29734:	9347      	str	r3, [sp, #284]	; 0x11c
   29736:	230a      	movs	r3, #10
   29738:	9342      	str	r3, [sp, #264]	; 0x108
   2973a:	e06a      	b.n	29812 <__ssvfiscanf_r+0x1ce>
   2973c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2973e:	464d      	mov	r5, r9
   29740:	fb02 1103 	mla	r1, r2, r3, r1
   29744:	3930      	subs	r1, #48	; 0x30
   29746:	9143      	str	r1, [sp, #268]	; 0x10c
   29748:	e7d2      	b.n	296f0 <__ssvfiscanf_r+0xac>
   2974a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2974e:	2a20      	cmp	r2, #32
   29750:	d8ef      	bhi.n	29732 <__ssvfiscanf_r+0xee>
   29752:	a101      	add	r1, pc, #4	; (adr r1, 29758 <__ssvfiscanf_r+0x114>)
   29754:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   29758:	00029847 	.word	0x00029847
   2975c:	00029733 	.word	0x00029733
   29760:	00029733 	.word	0x00029733
   29764:	00029869 	.word	0x00029869
   29768:	00029733 	.word	0x00029733
   2976c:	00029733 	.word	0x00029733
   29770:	00029733 	.word	0x00029733
   29774:	00029733 	.word	0x00029733
   29778:	00029733 	.word	0x00029733
   2977c:	00029733 	.word	0x00029733
   29780:	00029733 	.word	0x00029733
   29784:	0002987f 	.word	0x0002987f
   29788:	00029865 	.word	0x00029865
   2978c:	000297e3 	.word	0x000297e3
   29790:	000297e3 	.word	0x000297e3
   29794:	000297e3 	.word	0x000297e3
   29798:	00029733 	.word	0x00029733
   2979c:	00029859 	.word	0x00029859
   297a0:	00029733 	.word	0x00029733
   297a4:	00029733 	.word	0x00029733
   297a8:	00029733 	.word	0x00029733
   297ac:	00029733 	.word	0x00029733
   297b0:	0002988f 	.word	0x0002988f
   297b4:	00029861 	.word	0x00029861
   297b8:	00029803 	.word	0x00029803
   297bc:	00029733 	.word	0x00029733
   297c0:	00029733 	.word	0x00029733
   297c4:	0002988b 	.word	0x0002988b
   297c8:	00029733 	.word	0x00029733
   297cc:	00029865 	.word	0x00029865
   297d0:	00029733 	.word	0x00029733
   297d4:	00029733 	.word	0x00029733
   297d8:	00029847 	.word	0x00029847
   297dc:	3b45      	subs	r3, #69	; 0x45
   297de:	2b02      	cmp	r3, #2
   297e0:	d8a7      	bhi.n	29732 <__ssvfiscanf_r+0xee>
   297e2:	2305      	movs	r3, #5
   297e4:	e014      	b.n	29810 <__ssvfiscanf_r+0x1cc>
   297e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   297e8:	4621      	mov	r1, r4
   297ea:	4630      	mov	r0, r6
   297ec:	4798      	blx	r3
   297ee:	2800      	cmp	r0, #0
   297f0:	f43f af65 	beq.w	296be <__ssvfiscanf_r+0x7a>
   297f4:	9844      	ldr	r0, [sp, #272]	; 0x110
   297f6:	2800      	cmp	r0, #0
   297f8:	f040 808f 	bne.w	2991a <__ssvfiscanf_r+0x2d6>
   297fc:	f04f 30ff 	mov.w	r0, #4294967295
   29800:	e08f      	b.n	29922 <__ssvfiscanf_r+0x2de>
   29802:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29804:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   29808:	9341      	str	r3, [sp, #260]	; 0x104
   2980a:	2310      	movs	r3, #16
   2980c:	9342      	str	r3, [sp, #264]	; 0x108
   2980e:	2304      	movs	r3, #4
   29810:	9347      	str	r3, [sp, #284]	; 0x11c
   29812:	6863      	ldr	r3, [r4, #4]
   29814:	2b00      	cmp	r3, #0
   29816:	dd4a      	ble.n	298ae <__ssvfiscanf_r+0x26a>
   29818:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2981a:	0659      	lsls	r1, r3, #25
   2981c:	d404      	bmi.n	29828 <__ssvfiscanf_r+0x1e4>
   2981e:	6823      	ldr	r3, [r4, #0]
   29820:	781a      	ldrb	r2, [r3, #0]
   29822:	5cba      	ldrb	r2, [r7, r2]
   29824:	0712      	lsls	r2, r2, #28
   29826:	d449      	bmi.n	298bc <__ssvfiscanf_r+0x278>
   29828:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2982a:	2b02      	cmp	r3, #2
   2982c:	dc58      	bgt.n	298e0 <__ssvfiscanf_r+0x29c>
   2982e:	466b      	mov	r3, sp
   29830:	4622      	mov	r2, r4
   29832:	a941      	add	r1, sp, #260	; 0x104
   29834:	4630      	mov	r0, r6
   29836:	f000 f87d 	bl	29934 <_scanf_chars>
   2983a:	2801      	cmp	r0, #1
   2983c:	d075      	beq.n	2992a <__ssvfiscanf_r+0x2e6>
   2983e:	2802      	cmp	r0, #2
   29840:	f47f af24 	bne.w	2968c <__ssvfiscanf_r+0x48>
   29844:	e7d6      	b.n	297f4 <__ssvfiscanf_r+0x1b0>
   29846:	9a41      	ldr	r2, [sp, #260]	; 0x104
   29848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2984c:	9241      	str	r2, [sp, #260]	; 0x104
   2984e:	2210      	movs	r2, #16
   29850:	2b6e      	cmp	r3, #110	; 0x6e
   29852:	9242      	str	r2, [sp, #264]	; 0x108
   29854:	d902      	bls.n	2985c <__ssvfiscanf_r+0x218>
   29856:	e7da      	b.n	2980e <__ssvfiscanf_r+0x1ca>
   29858:	2300      	movs	r3, #0
   2985a:	9342      	str	r3, [sp, #264]	; 0x108
   2985c:	2303      	movs	r3, #3
   2985e:	e7d7      	b.n	29810 <__ssvfiscanf_r+0x1cc>
   29860:	2308      	movs	r3, #8
   29862:	e7d3      	b.n	2980c <__ssvfiscanf_r+0x1c8>
   29864:	220a      	movs	r2, #10
   29866:	e7f3      	b.n	29850 <__ssvfiscanf_r+0x20c>
   29868:	4629      	mov	r1, r5
   2986a:	4640      	mov	r0, r8
   2986c:	f008 fe91 	bl	32592 <__sccl>
   29870:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29872:	4605      	mov	r5, r0
   29874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29878:	9341      	str	r3, [sp, #260]	; 0x104
   2987a:	2301      	movs	r3, #1
   2987c:	e7c8      	b.n	29810 <__ssvfiscanf_r+0x1cc>
   2987e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29884:	9341      	str	r3, [sp, #260]	; 0x104
   29886:	2300      	movs	r3, #0
   29888:	e7c2      	b.n	29810 <__ssvfiscanf_r+0x1cc>
   2988a:	2302      	movs	r3, #2
   2988c:	e7c0      	b.n	29810 <__ssvfiscanf_r+0x1cc>
   2988e:	9841      	ldr	r0, [sp, #260]	; 0x104
   29890:	06c3      	lsls	r3, r0, #27
   29892:	f53f aefb 	bmi.w	2968c <__ssvfiscanf_r+0x48>
   29896:	9b00      	ldr	r3, [sp, #0]
   29898:	f010 0f01 	tst.w	r0, #1
   2989c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2989e:	f103 0104 	add.w	r1, r3, #4
   298a2:	9100      	str	r1, [sp, #0]
   298a4:	681b      	ldr	r3, [r3, #0]
   298a6:	bf14      	ite	ne
   298a8:	801a      	strhne	r2, [r3, #0]
   298aa:	601a      	streq	r2, [r3, #0]
   298ac:	e6ee      	b.n	2968c <__ssvfiscanf_r+0x48>
   298ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   298b0:	4621      	mov	r1, r4
   298b2:	4630      	mov	r0, r6
   298b4:	4798      	blx	r3
   298b6:	2800      	cmp	r0, #0
   298b8:	d0ae      	beq.n	29818 <__ssvfiscanf_r+0x1d4>
   298ba:	e79b      	b.n	297f4 <__ssvfiscanf_r+0x1b0>
   298bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
   298be:	3201      	adds	r2, #1
   298c0:	9245      	str	r2, [sp, #276]	; 0x114
   298c2:	6862      	ldr	r2, [r4, #4]
   298c4:	3a01      	subs	r2, #1
   298c6:	2a00      	cmp	r2, #0
   298c8:	6062      	str	r2, [r4, #4]
   298ca:	dd02      	ble.n	298d2 <__ssvfiscanf_r+0x28e>
   298cc:	3301      	adds	r3, #1
   298ce:	6023      	str	r3, [r4, #0]
   298d0:	e7a5      	b.n	2981e <__ssvfiscanf_r+0x1da>
   298d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   298d4:	4621      	mov	r1, r4
   298d6:	4630      	mov	r0, r6
   298d8:	4798      	blx	r3
   298da:	2800      	cmp	r0, #0
   298dc:	d09f      	beq.n	2981e <__ssvfiscanf_r+0x1da>
   298de:	e789      	b.n	297f4 <__ssvfiscanf_r+0x1b0>
   298e0:	2b04      	cmp	r3, #4
   298e2:	dc0f      	bgt.n	29904 <__ssvfiscanf_r+0x2c0>
   298e4:	466b      	mov	r3, sp
   298e6:	4622      	mov	r2, r4
   298e8:	a941      	add	r1, sp, #260	; 0x104
   298ea:	4630      	mov	r0, r6
   298ec:	f000 f87c 	bl	299e8 <_scanf_i>
   298f0:	e7a3      	b.n	2983a <__ssvfiscanf_r+0x1f6>
   298f2:	bf00      	nop
   298f4:	000385a8 	.word	0x000385a8
   298f8:	000324e3 	.word	0x000324e3
   298fc:	00032559 	.word	0x00032559
   29900:	0003896a 	.word	0x0003896a
   29904:	4b0a      	ldr	r3, [pc, #40]	; (29930 <__ssvfiscanf_r+0x2ec>)
   29906:	2b00      	cmp	r3, #0
   29908:	f43f aec0 	beq.w	2968c <__ssvfiscanf_r+0x48>
   2990c:	466b      	mov	r3, sp
   2990e:	4622      	mov	r2, r4
   29910:	a941      	add	r1, sp, #260	; 0x104
   29912:	4630      	mov	r0, r6
   29914:	f3af 8000 	nop.w
   29918:	e78f      	b.n	2983a <__ssvfiscanf_r+0x1f6>
   2991a:	89a3      	ldrh	r3, [r4, #12]
   2991c:	065b      	lsls	r3, r3, #25
   2991e:	f53f af6d 	bmi.w	297fc <__ssvfiscanf_r+0x1b8>
   29922:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   29926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2992a:	9844      	ldr	r0, [sp, #272]	; 0x110
   2992c:	e7f9      	b.n	29922 <__ssvfiscanf_r+0x2de>
   2992e:	bf00      	nop
   29930:	00000000 	.word	0x00000000

00029934 <_scanf_chars>:
   29934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29938:	4615      	mov	r5, r2
   2993a:	688a      	ldr	r2, [r1, #8]
   2993c:	4680      	mov	r8, r0
   2993e:	460c      	mov	r4, r1
   29940:	b932      	cbnz	r2, 29950 <_scanf_chars+0x1c>
   29942:	698a      	ldr	r2, [r1, #24]
   29944:	2a00      	cmp	r2, #0
   29946:	bf14      	ite	ne
   29948:	f04f 32ff 	movne.w	r2, #4294967295
   2994c:	2201      	moveq	r2, #1
   2994e:	608a      	str	r2, [r1, #8]
   29950:	6822      	ldr	r2, [r4, #0]
   29952:	2700      	movs	r7, #0
   29954:	f8df 908c 	ldr.w	r9, [pc, #140]	; 299e4 <_scanf_chars+0xb0>
   29958:	06d1      	lsls	r1, r2, #27
   2995a:	bf5f      	itttt	pl
   2995c:	681a      	ldrpl	r2, [r3, #0]
   2995e:	1d11      	addpl	r1, r2, #4
   29960:	6019      	strpl	r1, [r3, #0]
   29962:	6816      	ldrpl	r6, [r2, #0]
   29964:	69a0      	ldr	r0, [r4, #24]
   29966:	b188      	cbz	r0, 2998c <_scanf_chars+0x58>
   29968:	2801      	cmp	r0, #1
   2996a:	d107      	bne.n	2997c <_scanf_chars+0x48>
   2996c:	682b      	ldr	r3, [r5, #0]
   2996e:	781a      	ldrb	r2, [r3, #0]
   29970:	6963      	ldr	r3, [r4, #20]
   29972:	5c9b      	ldrb	r3, [r3, r2]
   29974:	b953      	cbnz	r3, 2998c <_scanf_chars+0x58>
   29976:	2f00      	cmp	r7, #0
   29978:	d031      	beq.n	299de <_scanf_chars+0xaa>
   2997a:	e022      	b.n	299c2 <_scanf_chars+0x8e>
   2997c:	2802      	cmp	r0, #2
   2997e:	d120      	bne.n	299c2 <_scanf_chars+0x8e>
   29980:	682b      	ldr	r3, [r5, #0]
   29982:	781b      	ldrb	r3, [r3, #0]
   29984:	f819 3003 	ldrb.w	r3, [r9, r3]
   29988:	071b      	lsls	r3, r3, #28
   2998a:	d41a      	bmi.n	299c2 <_scanf_chars+0x8e>
   2998c:	6823      	ldr	r3, [r4, #0]
   2998e:	3701      	adds	r7, #1
   29990:	06da      	lsls	r2, r3, #27
   29992:	bf5e      	ittt	pl
   29994:	682b      	ldrpl	r3, [r5, #0]
   29996:	781b      	ldrbpl	r3, [r3, #0]
   29998:	f806 3b01 	strbpl.w	r3, [r6], #1
   2999c:	682a      	ldr	r2, [r5, #0]
   2999e:	686b      	ldr	r3, [r5, #4]
   299a0:	3201      	adds	r2, #1
   299a2:	3b01      	subs	r3, #1
   299a4:	602a      	str	r2, [r5, #0]
   299a6:	68a2      	ldr	r2, [r4, #8]
   299a8:	606b      	str	r3, [r5, #4]
   299aa:	3a01      	subs	r2, #1
   299ac:	60a2      	str	r2, [r4, #8]
   299ae:	b142      	cbz	r2, 299c2 <_scanf_chars+0x8e>
   299b0:	2b00      	cmp	r3, #0
   299b2:	dcd7      	bgt.n	29964 <_scanf_chars+0x30>
   299b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   299b8:	4629      	mov	r1, r5
   299ba:	4640      	mov	r0, r8
   299bc:	4798      	blx	r3
   299be:	2800      	cmp	r0, #0
   299c0:	d0d0      	beq.n	29964 <_scanf_chars+0x30>
   299c2:	6823      	ldr	r3, [r4, #0]
   299c4:	f013 0310 	ands.w	r3, r3, #16
   299c8:	d105      	bne.n	299d6 <_scanf_chars+0xa2>
   299ca:	68e2      	ldr	r2, [r4, #12]
   299cc:	3201      	adds	r2, #1
   299ce:	60e2      	str	r2, [r4, #12]
   299d0:	69a2      	ldr	r2, [r4, #24]
   299d2:	b102      	cbz	r2, 299d6 <_scanf_chars+0xa2>
   299d4:	7033      	strb	r3, [r6, #0]
   299d6:	6923      	ldr	r3, [r4, #16]
   299d8:	2000      	movs	r0, #0
   299da:	443b      	add	r3, r7
   299dc:	6123      	str	r3, [r4, #16]
   299de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   299e2:	bf00      	nop
   299e4:	000385a8 	.word	0x000385a8

000299e8 <_scanf_i>:
   299e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299ec:	4698      	mov	r8, r3
   299ee:	b087      	sub	sp, #28
   299f0:	4b78      	ldr	r3, [pc, #480]	; (29bd4 <_scanf_i+0x1ec>)
   299f2:	460c      	mov	r4, r1
   299f4:	4682      	mov	sl, r0
   299f6:	4616      	mov	r6, r2
   299f8:	4627      	mov	r7, r4
   299fa:	f04f 0b00 	mov.w	fp, #0
   299fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29a02:	ab03      	add	r3, sp, #12
   29a04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   29a08:	4b73      	ldr	r3, [pc, #460]	; (29bd8 <_scanf_i+0x1f0>)
   29a0a:	69a1      	ldr	r1, [r4, #24]
   29a0c:	4a73      	ldr	r2, [pc, #460]	; (29bdc <_scanf_i+0x1f4>)
   29a0e:	2903      	cmp	r1, #3
   29a10:	bf08      	it	eq
   29a12:	461a      	moveq	r2, r3
   29a14:	68a3      	ldr	r3, [r4, #8]
   29a16:	9201      	str	r2, [sp, #4]
   29a18:	1e5a      	subs	r2, r3, #1
   29a1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   29a1e:	bf89      	itett	hi
   29a20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   29a24:	f04f 0900 	movls.w	r9, #0
   29a28:	eb03 0905 	addhi.w	r9, r3, r5
   29a2c:	f240 135d 	movwhi	r3, #349	; 0x15d
   29a30:	bf88      	it	hi
   29a32:	60a3      	strhi	r3, [r4, #8]
   29a34:	f857 3b1c 	ldr.w	r3, [r7], #28
   29a38:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   29a3c:	463d      	mov	r5, r7
   29a3e:	6023      	str	r3, [r4, #0]
   29a40:	6831      	ldr	r1, [r6, #0]
   29a42:	ab03      	add	r3, sp, #12
   29a44:	2202      	movs	r2, #2
   29a46:	7809      	ldrb	r1, [r1, #0]
   29a48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   29a4c:	f008 fab9 	bl	31fc2 <memchr>
   29a50:	2800      	cmp	r0, #0
   29a52:	d040      	beq.n	29ad6 <_scanf_i+0xee>
   29a54:	f1bb 0f01 	cmp.w	fp, #1
   29a58:	d112      	bne.n	29a80 <_scanf_i+0x98>
   29a5a:	6862      	ldr	r2, [r4, #4]
   29a5c:	b92a      	cbnz	r2, 29a6a <_scanf_i+0x82>
   29a5e:	6822      	ldr	r2, [r4, #0]
   29a60:	2108      	movs	r1, #8
   29a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   29a66:	6061      	str	r1, [r4, #4]
   29a68:	6022      	str	r2, [r4, #0]
   29a6a:	6822      	ldr	r2, [r4, #0]
   29a6c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   29a70:	6022      	str	r2, [r4, #0]
   29a72:	68a2      	ldr	r2, [r4, #8]
   29a74:	1e51      	subs	r1, r2, #1
   29a76:	60a1      	str	r1, [r4, #8]
   29a78:	b9da      	cbnz	r2, 29ab2 <_scanf_i+0xca>
   29a7a:	f04f 0b02 	mov.w	fp, #2
   29a7e:	e7df      	b.n	29a40 <_scanf_i+0x58>
   29a80:	f1bb 0f02 	cmp.w	fp, #2
   29a84:	d006      	beq.n	29a94 <_scanf_i+0xac>
   29a86:	68a2      	ldr	r2, [r4, #8]
   29a88:	1e51      	subs	r1, r2, #1
   29a8a:	60a1      	str	r1, [r4, #8]
   29a8c:	b98a      	cbnz	r2, 29ab2 <_scanf_i+0xca>
   29a8e:	f04f 0b01 	mov.w	fp, #1
   29a92:	e7d5      	b.n	29a40 <_scanf_i+0x58>
   29a94:	6822      	ldr	r2, [r4, #0]
   29a96:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   29a9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29a9e:	d11f      	bne.n	29ae0 <_scanf_i+0xf8>
   29aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   29aa4:	2110      	movs	r1, #16
   29aa6:	6022      	str	r2, [r4, #0]
   29aa8:	68a2      	ldr	r2, [r4, #8]
   29aaa:	6061      	str	r1, [r4, #4]
   29aac:	1e51      	subs	r1, r2, #1
   29aae:	60a1      	str	r1, [r4, #8]
   29ab0:	b1b2      	cbz	r2, 29ae0 <_scanf_i+0xf8>
   29ab2:	6832      	ldr	r2, [r6, #0]
   29ab4:	1c51      	adds	r1, r2, #1
   29ab6:	6031      	str	r1, [r6, #0]
   29ab8:	7812      	ldrb	r2, [r2, #0]
   29aba:	f805 2b01 	strb.w	r2, [r5], #1
   29abe:	6872      	ldr	r2, [r6, #4]
   29ac0:	3a01      	subs	r2, #1
   29ac2:	2a00      	cmp	r2, #0
   29ac4:	6072      	str	r2, [r6, #4]
   29ac6:	dc06      	bgt.n	29ad6 <_scanf_i+0xee>
   29ac8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   29acc:	4631      	mov	r1, r6
   29ace:	4650      	mov	r0, sl
   29ad0:	4790      	blx	r2
   29ad2:	2800      	cmp	r0, #0
   29ad4:	d174      	bne.n	29bc0 <_scanf_i+0x1d8>
   29ad6:	f10b 0b01 	add.w	fp, fp, #1
   29ada:	f1bb 0f03 	cmp.w	fp, #3
   29ade:	d1af      	bne.n	29a40 <_scanf_i+0x58>
   29ae0:	6863      	ldr	r3, [r4, #4]
   29ae2:	b90b      	cbnz	r3, 29ae8 <_scanf_i+0x100>
   29ae4:	230a      	movs	r3, #10
   29ae6:	6063      	str	r3, [r4, #4]
   29ae8:	6863      	ldr	r3, [r4, #4]
   29aea:	f04f 0b00 	mov.w	fp, #0
   29aee:	493c      	ldr	r1, [pc, #240]	; (29be0 <_scanf_i+0x1f8>)
   29af0:	6960      	ldr	r0, [r4, #20]
   29af2:	1ac9      	subs	r1, r1, r3
   29af4:	f008 fd4d 	bl	32592 <__sccl>
   29af8:	68a3      	ldr	r3, [r4, #8]
   29afa:	6822      	ldr	r2, [r4, #0]
   29afc:	b373      	cbz	r3, 29b5c <_scanf_i+0x174>
   29afe:	6831      	ldr	r1, [r6, #0]
   29b00:	6960      	ldr	r0, [r4, #20]
   29b02:	f891 c000 	ldrb.w	ip, [r1]
   29b06:	f810 000c 	ldrb.w	r0, [r0, ip]
   29b0a:	b338      	cbz	r0, 29b5c <_scanf_i+0x174>
   29b0c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   29b10:	d116      	bne.n	29b40 <_scanf_i+0x158>
   29b12:	0510      	lsls	r0, r2, #20
   29b14:	d514      	bpl.n	29b40 <_scanf_i+0x158>
   29b16:	f10b 0b01 	add.w	fp, fp, #1
   29b1a:	f1b9 0f00 	cmp.w	r9, #0
   29b1e:	d003      	beq.n	29b28 <_scanf_i+0x140>
   29b20:	3301      	adds	r3, #1
   29b22:	f109 39ff 	add.w	r9, r9, #4294967295
   29b26:	60a3      	str	r3, [r4, #8]
   29b28:	6873      	ldr	r3, [r6, #4]
   29b2a:	3b01      	subs	r3, #1
   29b2c:	2b00      	cmp	r3, #0
   29b2e:	6073      	str	r3, [r6, #4]
   29b30:	dd0d      	ble.n	29b4e <_scanf_i+0x166>
   29b32:	6833      	ldr	r3, [r6, #0]
   29b34:	3301      	adds	r3, #1
   29b36:	6033      	str	r3, [r6, #0]
   29b38:	68a3      	ldr	r3, [r4, #8]
   29b3a:	3b01      	subs	r3, #1
   29b3c:	60a3      	str	r3, [r4, #8]
   29b3e:	e7db      	b.n	29af8 <_scanf_i+0x110>
   29b40:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   29b44:	6022      	str	r2, [r4, #0]
   29b46:	780b      	ldrb	r3, [r1, #0]
   29b48:	f805 3b01 	strb.w	r3, [r5], #1
   29b4c:	e7ec      	b.n	29b28 <_scanf_i+0x140>
   29b4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   29b52:	4631      	mov	r1, r6
   29b54:	4650      	mov	r0, sl
   29b56:	4798      	blx	r3
   29b58:	2800      	cmp	r0, #0
   29b5a:	d0ed      	beq.n	29b38 <_scanf_i+0x150>
   29b5c:	6823      	ldr	r3, [r4, #0]
   29b5e:	05d9      	lsls	r1, r3, #23
   29b60:	d50d      	bpl.n	29b7e <_scanf_i+0x196>
   29b62:	42bd      	cmp	r5, r7
   29b64:	d909      	bls.n	29b7a <_scanf_i+0x192>
   29b66:	f105 39ff 	add.w	r9, r5, #4294967295
   29b6a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   29b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   29b72:	4632      	mov	r2, r6
   29b74:	464d      	mov	r5, r9
   29b76:	4650      	mov	r0, sl
   29b78:	4798      	blx	r3
   29b7a:	42bd      	cmp	r5, r7
   29b7c:	d028      	beq.n	29bd0 <_scanf_i+0x1e8>
   29b7e:	6822      	ldr	r2, [r4, #0]
   29b80:	f012 0210 	ands.w	r2, r2, #16
   29b84:	d113      	bne.n	29bae <_scanf_i+0x1c6>
   29b86:	702a      	strb	r2, [r5, #0]
   29b88:	4639      	mov	r1, r7
   29b8a:	6863      	ldr	r3, [r4, #4]
   29b8c:	4650      	mov	r0, sl
   29b8e:	9e01      	ldr	r6, [sp, #4]
   29b90:	47b0      	blx	r6
   29b92:	f8d8 3000 	ldr.w	r3, [r8]
   29b96:	6821      	ldr	r1, [r4, #0]
   29b98:	1d1a      	adds	r2, r3, #4
   29b9a:	f011 0f20 	tst.w	r1, #32
   29b9e:	f8c8 2000 	str.w	r2, [r8]
   29ba2:	681b      	ldr	r3, [r3, #0]
   29ba4:	d00f      	beq.n	29bc6 <_scanf_i+0x1de>
   29ba6:	6018      	str	r0, [r3, #0]
   29ba8:	68e3      	ldr	r3, [r4, #12]
   29baa:	3301      	adds	r3, #1
   29bac:	60e3      	str	r3, [r4, #12]
   29bae:	1bed      	subs	r5, r5, r7
   29bb0:	6923      	ldr	r3, [r4, #16]
   29bb2:	2000      	movs	r0, #0
   29bb4:	445d      	add	r5, fp
   29bb6:	442b      	add	r3, r5
   29bb8:	6123      	str	r3, [r4, #16]
   29bba:	b007      	add	sp, #28
   29bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bc0:	f04f 0b00 	mov.w	fp, #0
   29bc4:	e7ca      	b.n	29b5c <_scanf_i+0x174>
   29bc6:	07ca      	lsls	r2, r1, #31
   29bc8:	bf4c      	ite	mi
   29bca:	8018      	strhmi	r0, [r3, #0]
   29bcc:	6018      	strpl	r0, [r3, #0]
   29bce:	e7eb      	b.n	29ba8 <_scanf_i+0x1c0>
   29bd0:	2001      	movs	r0, #1
   29bd2:	e7f2      	b.n	29bba <_scanf_i+0x1d2>
   29bd4:	00033094 	.word	0x00033094
   29bd8:	00031b51 	.word	0x00031b51
   29bdc:	00031b55 	.word	0x00031b55
   29be0:	00038985 	.word	0x00038985

00029be4 <_read_r>:
   29be4:	b538      	push	{r3, r4, r5, lr}
   29be6:	4604      	mov	r4, r0
   29be8:	4d06      	ldr	r5, [pc, #24]	; (29c04 <_read_r+0x20>)
   29bea:	4608      	mov	r0, r1
   29bec:	4611      	mov	r1, r2
   29bee:	2200      	movs	r2, #0
   29bf0:	602a      	str	r2, [r5, #0]
   29bf2:	461a      	mov	r2, r3
   29bf4:	f001 fe46 	bl	2b884 <_read>
   29bf8:	1c43      	adds	r3, r0, #1
   29bfa:	d102      	bne.n	29c02 <_read_r+0x1e>
   29bfc:	682b      	ldr	r3, [r5, #0]
   29bfe:	b103      	cbz	r3, 29c02 <_read_r+0x1e>
   29c00:	6023      	str	r3, [r4, #0]
   29c02:	bd38      	pop	{r3, r4, r5, pc}
   29c04:	20030d80 	.word	0x20030d80

00029c08 <raise>:
   29c08:	4b02      	ldr	r3, [pc, #8]	; (29c14 <raise+0xc>)
   29c0a:	4601      	mov	r1, r0
   29c0c:	6818      	ldr	r0, [r3, #0]
   29c0e:	f008 bcf9 	b.w	32604 <_raise_r>
   29c12:	bf00      	nop
   29c14:	200087f8 	.word	0x200087f8

00029c18 <_kill_r>:
   29c18:	b538      	push	{r3, r4, r5, lr}
   29c1a:	2300      	movs	r3, #0
   29c1c:	4d06      	ldr	r5, [pc, #24]	; (29c38 <_kill_r+0x20>)
   29c1e:	4604      	mov	r4, r0
   29c20:	4608      	mov	r0, r1
   29c22:	4611      	mov	r1, r2
   29c24:	602b      	str	r3, [r5, #0]
   29c26:	f001 fe3f 	bl	2b8a8 <_kill>
   29c2a:	1c43      	adds	r3, r0, #1
   29c2c:	d102      	bne.n	29c34 <_kill_r+0x1c>
   29c2e:	682b      	ldr	r3, [r5, #0]
   29c30:	b103      	cbz	r3, 29c34 <_kill_r+0x1c>
   29c32:	6023      	str	r3, [r4, #0]
   29c34:	bd38      	pop	{r3, r4, r5, pc}
   29c36:	bf00      	nop
   29c38:	20030d80 	.word	0x20030d80

00029c3c <_fstat_r>:
   29c3c:	b538      	push	{r3, r4, r5, lr}
   29c3e:	2300      	movs	r3, #0
   29c40:	4d06      	ldr	r5, [pc, #24]	; (29c5c <_fstat_r+0x20>)
   29c42:	4604      	mov	r4, r0
   29c44:	4608      	mov	r0, r1
   29c46:	4611      	mov	r1, r2
   29c48:	602b      	str	r3, [r5, #0]
   29c4a:	f001 fe31 	bl	2b8b0 <_fstat>
   29c4e:	1c43      	adds	r3, r0, #1
   29c50:	d102      	bne.n	29c58 <_fstat_r+0x1c>
   29c52:	682b      	ldr	r3, [r5, #0]
   29c54:	b103      	cbz	r3, 29c58 <_fstat_r+0x1c>
   29c56:	6023      	str	r3, [r4, #0]
   29c58:	bd38      	pop	{r3, r4, r5, pc}
   29c5a:	bf00      	nop
   29c5c:	20030d80 	.word	0x20030d80

00029c60 <_isatty_r>:
   29c60:	b538      	push	{r3, r4, r5, lr}
   29c62:	2300      	movs	r3, #0
   29c64:	4d05      	ldr	r5, [pc, #20]	; (29c7c <_isatty_r+0x1c>)
   29c66:	4604      	mov	r4, r0
   29c68:	4608      	mov	r0, r1
   29c6a:	602b      	str	r3, [r5, #0]
   29c6c:	f001 fe17 	bl	2b89e <_isatty>
   29c70:	1c43      	adds	r3, r0, #1
   29c72:	d102      	bne.n	29c7a <_isatty_r+0x1a>
   29c74:	682b      	ldr	r3, [r5, #0]
   29c76:	b103      	cbz	r3, 29c7a <_isatty_r+0x1a>
   29c78:	6023      	str	r3, [r4, #0]
   29c7a:	bd38      	pop	{r3, r4, r5, pc}
   29c7c:	20030d80 	.word	0x20030d80

00029c80 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   29c80:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   29c82:	f7fc fbed 	bl	26460 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   29c86:	f7fc ff01 	bl	26a8c <k_thread_system_pool_assign>
    return 0;
}
   29c8a:	2000      	movs	r0, #0
   29c8c:	bd08      	pop	{r3, pc}

00029c8e <gpio_pin_get_dt>:
{
   29c8e:	4603      	mov	r3, r0
   29c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return gpio_pin_get(spec->port, spec->pin);
   29c92:	6800      	ldr	r0, [r0, #0]
   29c94:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
   29c96:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
   29c98:	6883      	ldr	r3, [r0, #8]
   29c9a:	a901      	add	r1, sp, #4
   29c9c:	685b      	ldr	r3, [r3, #4]
   29c9e:	4798      	blx	r3
	if (ret == 0) {
   29ca0:	b940      	cbnz	r0, 29cb4 <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
   29ca2:	9b01      	ldr	r3, [sp, #4]
   29ca4:	682a      	ldr	r2, [r5, #0]
   29ca6:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   29ca8:	2301      	movs	r3, #1
   29caa:	40a3      	lsls	r3, r4
   29cac:	421a      	tst	r2, r3
   29cae:	bf14      	ite	ne
   29cb0:	2001      	movne	r0, #1
   29cb2:	2000      	moveq	r0, #0
}
   29cb4:	b003      	add	sp, #12
   29cb6:	bd30      	pop	{r4, r5, pc}

00029cb8 <k_sem_give>:
	z_impl_k_sem_give(sem);
   29cb8:	f7fb be94 	b.w	259e4 <z_impl_k_sem_give>

00029cbc <k_uptime_get>:
{
   29cbc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   29cbe:	f007 fb4c 	bl	3135a <z_impl_k_uptime_ticks>
   29cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29cc6:	fba0 0302 	umull	r0, r3, r0, r2
   29cca:	fb02 3101 	mla	r1, r2, r1, r3
   29cce:	0bc0      	lsrs	r0, r0, #15
}
   29cd0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   29cd4:	0bc9      	lsrs	r1, r1, #15
   29cd6:	bd08      	pop	{r3, pc}

00029cd8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29cd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29cda:	ab0b      	add	r3, sp, #44	; 0x2c
   29cdc:	9305      	str	r3, [sp, #20]
   29cde:	9303      	str	r3, [sp, #12]
   29ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29ce2:	9302      	str	r3, [sp, #8]
   29ce4:	2300      	movs	r3, #0
   29ce6:	4618      	mov	r0, r3
   29ce8:	e9cd 3300 	strd	r3, r3, [sp]
   29cec:	f7e5 fb9e 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   29cf0:	b007      	add	sp, #28
   29cf2:	f85d fb04 	ldr.w	pc, [sp], #4

00029cf6 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   29cf6:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   29cf8:	6883      	ldr	r3, [r0, #8]
   29cfa:	2264      	movs	r2, #100	; 0x64
   29cfc:	68dc      	ldr	r4, [r3, #12]
   29cfe:	2332      	movs	r3, #50	; 0x32
   29d00:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   29d02:	bc10      	pop	{r4}
   29d04:	4760      	bx	ip

00029d06 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   29d06:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   29d08:	6883      	ldr	r3, [r0, #8]
   29d0a:	685c      	ldr	r4, [r3, #4]
   29d0c:	f04f 33ff 	mov.w	r3, #4294967295
   29d10:	46a4      	mov	ip, r4
}
   29d12:	bc10      	pop	{r4}
   29d14:	4760      	bx	ip

00029d16 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   29d16:	f7fb be8b 	b.w	25a30 <z_impl_k_sem_take>

00029d1a <gpio_add_callback.isra.0>:
	if (api->manage_callback == NULL) {
   29d1a:	6883      	ldr	r3, [r0, #8]
   29d1c:	69db      	ldr	r3, [r3, #28]
   29d1e:	b10b      	cbz	r3, 29d24 <gpio_add_callback.isra.0+0xa>
	return api->manage_callback(port, callback, true);
   29d20:	2201      	movs	r2, #1
   29d22:	4718      	bx	r3
}
   29d24:	4770      	bx	lr

00029d26 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   29d26:	4603      	mov	r3, r0
   29d28:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29d2a:	7919      	ldrb	r1, [r3, #4]
   29d2c:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   29d2e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29d30:	fa03 f101 	lsl.w	r1, r3, r1
   29d34:	6903      	ldr	r3, [r0, #16]
   29d36:	681b      	ldr	r3, [r3, #0]
   29d38:	4219      	tst	r1, r3
   29d3a:	d003      	beq.n	29d44 <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
   29d3c:	b122      	cbz	r2, 29d48 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
   29d3e:	6883      	ldr	r3, [r0, #8]
   29d40:	691b      	ldr	r3, [r3, #16]
   29d42:	e003      	b.n	29d4c <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
   29d44:	2a00      	cmp	r2, #0
   29d46:	d0fa      	beq.n	29d3e <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
   29d48:	6883      	ldr	r3, [r0, #8]
   29d4a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   29d4c:	4718      	bx	r3

00029d4e <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   29d4e:	4603      	mov	r3, r0
   29d50:	b470      	push	{r4, r5, r6}
   29d52:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   29d54:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   29d56:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   29d58:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   29d5a:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29d5c:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   29d5e:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29d60:	408c      	lsls	r4, r1
   29d62:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   29d64:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   29d68:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29d6a:	bf14      	ite	ne
   29d6c:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   29d6e:	43a3      	biceq	r3, r4
   29d70:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   29d72:	6833      	ldr	r3, [r6, #0]
}
   29d74:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   29d76:	4718      	bx	r3

00029d78 <gpio_pin_interrupt_configure_dt.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
   29d78:	4603      	mov	r3, r0
   29d7a:	b430      	push	{r4, r5}
   29d7c:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   29d7e:	6800      	ldr	r0, [r0, #0]
   29d80:	7919      	ldrb	r1, [r3, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   29d82:	2301      	movs	r3, #1
   29d84:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   29d86:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   29d88:	682d      	ldr	r5, [r5, #0]
   29d8a:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29d8c:	422b      	tst	r3, r5
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29d8e:	69a4      	ldr	r4, [r4, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   29d90:	bf18      	it	ne
   29d92:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29d96:	46a4      	mov	ip, r4
}
   29d98:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29d9a:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   29d9e:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   29da2:	4760      	bx	ip

00029da4 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   29da4:	f7fc bb42 	b.w	2642c <z_impl_k_sleep>

00029da8 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   29da8:	4601      	mov	r1, r0
   29daa:	f240 30e7 	movw	r0, #999	; 0x3e7
   29dae:	b508      	push	{r3, lr}
   29db0:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   29db4:	2300      	movs	r3, #0
   29db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29dba:	1449      	asrs	r1, r1, #17
   29dbc:	f7df f8c0 	bl	8f40 <__aeabi_uldivmod>
}
   29dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   29dc4:	f7ff bfee 	b.w	29da4 <k_sleep.isra.0>

00029dc8 <send_protobuf>:
{
   29dc8:	b510      	push	{r4, lr}
   29dca:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
	buf_proto = send_array_dd_v0();
   29dce:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   29dd2:	4620      	mov	r0, r4
   29dd4:	f7e3 faa8 	bl	d328 <send_array_dd_v0>
	send_bluetooth(buf_proto);
   29dd8:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   29ddc:	f240 72cc 	movw	r2, #1996	; 0x7cc
   29de0:	4668      	mov	r0, sp
   29de2:	f007 fc94 	bl	3170e <memcpy>
   29de6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29dea:	f7e2 fced 	bl	c7c8 <send_bluetooth>
}
   29dee:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   29df2:	bd10      	pop	{r4, pc}

00029df4 <error>:
{
   29df4:	b508      	push	{r3, lr}
	turn_off_all_leds();
   29df6:	f7e2 fe93 	bl	cb20 <turn_off_all_leds>
		k_sleep(K_MSEC(1000));
   29dfa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29dfe:	2100      	movs	r1, #0
   29e00:	f7ff ffd0 	bl	29da4 <k_sleep.isra.0>
	while (true)
   29e04:	e7f9      	b.n	29dfa <error+0x6>

00029e06 <parse_comma_delimited_str>:
{
   29e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29e08:	460d      	mov	r5, r1
   29e0a:	4616      	mov	r6, r2
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   29e0c:	2401      	movs	r4, #1
		*string = '\0';
   29e0e:	2700      	movs	r7, #0
	fields[i++] = string;
   29e10:	6008      	str	r0, [r1, #0]
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   29e12:	42b4      	cmp	r4, r6
   29e14:	da03      	bge.n	29e1e <parse_comma_delimited_str+0x18>
   29e16:	212c      	movs	r1, #44	; 0x2c
   29e18:	f007 fdf5 	bl	31a06 <strchr>
   29e1c:	b908      	cbnz	r0, 29e22 <parse_comma_delimited_str+0x1c>
	return --i;
   29e1e:	1e60      	subs	r0, r4, #1
}
   29e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*string = '\0';
   29e22:	f800 7b01 	strb.w	r7, [r0], #1
		fields[i++] = ++string;
   29e26:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
   29e2a:	3401      	adds	r4, #1
   29e2c:	e7f1      	b.n	29e12 <parse_comma_delimited_str+0xc>

00029e2e <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   29e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   29e30:	6806      	ldr	r6, [r0, #0]
   29e32:	8902      	ldrh	r2, [r0, #8]
   29e34:	8a33      	ldrh	r3, [r6, #16]
   29e36:	429a      	cmp	r2, r3
   29e38:	d271      	bcs.n	29f1e <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29e3a:	6831      	ldr	r1, [r6, #0]
   29e3c:	8942      	ldrh	r2, [r0, #10]
   29e3e:	0093      	lsls	r3, r2, #2
   29e40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   29e44:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29e48:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   29e4c:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29e4e:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29e50:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   29e54:	d01f      	beq.n	29e96 <load_descriptor_values+0x68>
   29e56:	2902      	cmp	r1, #2
   29e58:	d02a      	beq.n	29eb0 <load_descriptor_values+0x82>
   29e5a:	2900      	cmp	r1, #0
   29e5c:	d135      	bne.n	29eca <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   29e5e:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   29e62:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   29e66:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   29e6a:	0f12      	lsrs	r2, r2, #28
   29e6c:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   29e6e:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   29e70:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29e74:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   29e76:	2a00      	cmp	r2, #0
   29e78:	d134      	bne.n	29ee4 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   29e7a:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   29e7c:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   29e7e:	f004 040e 	and.w	r4, r4, #14
   29e82:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   29e84:	bf11      	iteee	ne
   29e86:	2300      	movne	r3, #0
   29e88:	89c2      	ldrheq	r2, [r0, #14]
   29e8a:	6873      	ldreq	r3, [r6, #4]
   29e8c:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   29e90:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   29e92:	2001      	movs	r0, #1
}
   29e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29e96:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   29e98:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29e9c:	4419      	add	r1, r3
   29e9e:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   29ea0:	0f0b      	lsrs	r3, r1, #28
   29ea2:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   29ea6:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   29ea8:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   29eaa:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   29eae:	e7dd      	b.n	29e6c <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29eb0:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   29eb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29eb6:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29eb8:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29ebc:	0a1a      	lsrs	r2, r3, #8
   29ebe:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   29ec2:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   29ec4:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   29ec6:	898a      	ldrh	r2, [r1, #12]
            break;
   29ec8:	e7d0      	b.n	29e6c <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29eca:	6832      	ldr	r2, [r6, #0]
   29ecc:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29ece:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29ed2:	0a19      	lsrs	r1, r3, #8
   29ed4:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   29ed8:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29edc:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   29ede:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   29ee0:	b25b      	sxtb	r3, r3
            break;
   29ee2:	e7c3      	b.n	29e6c <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   29ee4:	443a      	add	r2, r7
   29ee6:	6182      	str	r2, [r0, #24]
        if (size_offset)
   29ee8:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   29eec:	b123      	cbz	r3, 29ef8 <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   29eee:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29ef0:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   29ef2:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29ef4:	d109      	bne.n	29f0a <load_descriptor_values+0xdc>
   29ef6:	e00f      	b.n	29f18 <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   29ef8:	f004 0530 	and.w	r5, r4, #48	; 0x30
   29efc:	2d20      	cmp	r5, #32
   29efe:	d1f7      	bne.n	29ef0 <load_descriptor_values+0xc2>
   29f00:	2c3f      	cmp	r4, #63	; 0x3f
   29f02:	d804      	bhi.n	29f0e <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   29f04:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   29f08:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   29f0a:	61c2      	str	r2, [r0, #28]
   29f0c:	e7b7      	b.n	29e7e <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   29f0e:	2980      	cmp	r1, #128	; 0x80
   29f10:	d1fa      	bne.n	29f08 <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   29f12:	f100 0314 	add.w	r3, r0, #20
   29f16:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   29f18:	6813      	ldr	r3, [r2, #0]
   29f1a:	61c3      	str	r3, [r0, #28]
   29f1c:	e7af      	b.n	29e7e <load_descriptor_values+0x50>
        return false;
   29f1e:	2000      	movs	r0, #0
   29f20:	e7b8      	b.n	29e94 <load_descriptor_values+0x66>

00029f22 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   29f22:	8903      	ldrh	r3, [r0, #8]
{
   29f24:	b510      	push	{r4, lr}
    iter->index++;
   29f26:	3301      	adds	r3, #1
   29f28:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   29f2a:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   29f2c:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   29f2e:	8a0a      	ldrh	r2, [r1, #16]
   29f30:	429a      	cmp	r2, r3
   29f32:	d803      	bhi.n	29f3c <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   29f34:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   29f36:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   29f3a:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   29f3c:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29f3e:	680b      	ldr	r3, [r1, #0]
   29f40:	8942      	ldrh	r2, [r0, #10]
   29f42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   29f46:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   29f48:	f001 0103 	and.w	r1, r1, #3
   29f4c:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   29f50:	440a      	add	r2, r1
   29f52:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   29f54:	8982      	ldrh	r2, [r0, #12]
   29f56:	f003 0130 	and.w	r1, r3, #48	; 0x30
   29f5a:	2900      	cmp	r1, #0
   29f5c:	bf08      	it	eq
   29f5e:	3201      	addeq	r2, #1
   29f60:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   29f62:	89c2      	ldrh	r2, [r0, #14]
   29f64:	f003 030e 	and.w	r3, r3, #14
   29f68:	2b08      	cmp	r3, #8
   29f6a:	bf08      	it	eq
   29f6c:	3201      	addeq	r2, #1
   29f6e:	81c2      	strh	r2, [r0, #14]
}
   29f70:	e7e3      	b.n	29f3a <advance_iterator+0x18>

00029f72 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   29f72:	b570      	push	{r4, r5, r6, lr}
   29f74:	4604      	mov	r4, r0
   29f76:	460e      	mov	r6, r1
   29f78:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   29f7a:	2100      	movs	r1, #0
   29f7c:	2220      	movs	r2, #32
   29f7e:	3008      	adds	r0, #8
   29f80:	f007 fbff 	bl	31782 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   29f84:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   29f88:	4620      	mov	r0, r4
}
   29f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   29f8e:	f7ff bf4e 	b.w	29e2e <load_descriptor_values>

00029f92 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   29f92:	b538      	push	{r3, r4, r5, lr}
   29f94:	460c      	mov	r4, r1
   29f96:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   29f98:	680b      	ldr	r3, [r1, #0]
   29f9a:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   29f9c:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   29f9e:	681b      	ldr	r3, [r3, #0]
   29fa0:	0a1b      	lsrs	r3, r3, #8
   29fa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29fa6:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   29fa8:	bf14      	ite	ne
   29faa:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   29fac:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   29fae:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   29fb0:	f7ff ffdf 	bl	29f72 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   29fb4:	622c      	str	r4, [r5, #32]
    return status;
}
   29fb6:	bd38      	pop	{r3, r4, r5, pc}

00029fb8 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   29fb8:	b510      	push	{r4, lr}
   29fba:	4604      	mov	r4, r0
    advance_iterator(iter);
   29fbc:	f7ff ffb1 	bl	29f22 <advance_iterator>
    (void)load_descriptor_values(iter);
   29fc0:	f7ff ff35 	bl	29e2e <load_descriptor_values>
    return iter->index != 0;
   29fc4:	8920      	ldrh	r0, [r4, #8]
}
   29fc6:	3800      	subs	r0, #0
   29fc8:	bf18      	it	ne
   29fca:	2001      	movne	r0, #1
   29fcc:	bd10      	pop	{r4, pc}

00029fce <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   29fce:	f7ff bfd0 	b.w	29f72 <pb_field_iter_begin>

00029fd2 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   29fd2:	f7ff bfde 	b.w	29f92 <pb_field_iter_begin_extension>

00029fd6 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   29fd6:	b410      	push	{r4}
   29fd8:	460b      	mov	r3, r1
   29fda:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   29fdc:	8a52      	ldrh	r2, [r2, #18]
   29fde:	2a08      	cmp	r2, #8
   29fe0:	d10e      	bne.n	2a000 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   29fe2:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   29fe4:	b162      	cbz	r2, 2a000 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   29fe6:	b128      	cbz	r0, 29ff4 <pb_default_field_callback+0x1e>
   29fe8:	6814      	ldr	r4, [r2, #0]
   29fea:	b11c      	cbz	r4, 29ff4 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   29fec:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   29fee:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   29ff0:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   29ff2:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   29ff4:	b123      	cbz	r3, 2a000 <pb_default_field_callback+0x2a>
   29ff6:	6814      	ldr	r4, [r2, #0]
   29ff8:	b114      	cbz	r4, 2a000 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   29ffa:	4618      	mov	r0, r3
   29ffc:	3204      	adds	r2, #4
   29ffe:	e7f6      	b.n	29fee <pb_default_field_callback+0x18>
}
   2a000:	2001      	movs	r0, #1
   2a002:	bc10      	pop	{r4}
   2a004:	4770      	bx	lr

0002a006 <buf_write>:
{
   2a006:	4603      	mov	r3, r0
   2a008:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   2a00a:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   2a00c:	1884      	adds	r4, r0, r2
   2a00e:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a010:	f007 fb7d 	bl	3170e <memcpy>
}
   2a014:	2001      	movs	r0, #1
   2a016:	bd10      	pop	{r4, pc}

0002a018 <pb_encode_varint>:
{
   2a018:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   2a01a:	2a80      	cmp	r2, #128	; 0x80
{
   2a01c:	b085      	sub	sp, #20
    if (value <= 0x7F)
   2a01e:	f173 0100 	sbcs.w	r1, r3, #0
{
   2a022:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   2a024:	b2d4      	uxtb	r4, r2
   2a026:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2a028:	d206      	bcs.n	2a038 <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   2a02a:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   2a02c:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   2a030:	f7e3 fe3e 	bl	dcb0 <pb_write>
}
   2a034:	b005      	add	sp, #20
   2a036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2a038:	09d5      	lsrs	r5, r2, #7
   2a03a:	4608      	mov	r0, r1
    size_t i = 0;
   2a03c:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   2a03e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a042:	ea53 0c05 	orrs.w	ip, r3, r5
   2a046:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2a048:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   2a04c:	d108      	bne.n	2a060 <pb_encode_varint+0x48>
   2a04e:	463a      	mov	r2, r7
    buffer[i++] = byte;
   2a050:	f102 0310 	add.w	r3, r2, #16
   2a054:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2a056:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2a058:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   2a05c:	3201      	adds	r2, #1
   2a05e:	e7e7      	b.n	2a030 <pb_encode_varint+0x18>
        byte |= 0x80;
   2a060:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a064:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   2a066:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   2a06a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   2a06e:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   2a072:	d1e6      	bne.n	2a042 <pb_encode_varint+0x2a>
    if (high)
   2a074:	2b00      	cmp	r3, #0
   2a076:	d0eb      	beq.n	2a050 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2a078:	0118      	lsls	r0, r3, #4
   2a07a:	f000 0070 	and.w	r0, r0, #112	; 0x70
   2a07e:	4304      	orrs	r4, r0
        high >>= 3;
   2a080:	08db      	lsrs	r3, r3, #3
        while (high)
   2a082:	2b00      	cmp	r3, #0
   2a084:	d0e4      	beq.n	2a050 <pb_encode_varint+0x38>
            byte |= 0x80;
   2a086:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   2a08a:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   2a08c:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   2a090:	3201      	adds	r2, #1
   2a092:	09db      	lsrs	r3, r3, #7
   2a094:	e7f5      	b.n	2a082 <pb_encode_varint+0x6a>

0002a096 <pb_encode_svarint>:
    if (value < 0)
   2a096:	1892      	adds	r2, r2, r2
   2a098:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   2a09c:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   2a0a0:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   2a0a4:	f7ff bfb8 	b.w	2a018 <pb_encode_varint>

0002a0a8 <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   2a0a8:	2204      	movs	r2, #4
   2a0aa:	f7e3 be01 	b.w	dcb0 <pb_write>

0002a0ae <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   2a0ae:	2208      	movs	r2, #8
   2a0b0:	f7e3 bdfe 	b.w	dcb0 <pb_write>

0002a0b4 <pb_encode_tag>:
{
   2a0b4:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   2a0b6:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   2a0ba:	0f5b      	lsrs	r3, r3, #29
   2a0bc:	f7ff bfac 	b.w	2a018 <pb_encode_varint>

0002a0c0 <pb_encode_string>:
{
   2a0c0:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a0c2:	2300      	movs	r3, #0
{
   2a0c4:	4604      	mov	r4, r0
   2a0c6:	460d      	mov	r5, r1
   2a0c8:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a0ca:	f7ff ffa5 	bl	2a018 <pb_encode_varint>
   2a0ce:	b130      	cbz	r0, 2a0de <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   2a0d0:	4632      	mov	r2, r6
   2a0d2:	4629      	mov	r1, r5
   2a0d4:	4620      	mov	r0, r4
}
   2a0d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   2a0da:	f7e3 bde9 	b.w	dcb0 <pb_write>
}
   2a0de:	bd70      	pop	{r4, r5, r6, pc}

0002a0e0 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   2a0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a0e4:	4606      	mov	r6, r0
   2a0e6:	460d      	mov	r5, r1
   2a0e8:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   2a0ea:	4698      	mov	r8, r3
   2a0ec:	b32b      	cbz	r3, 2a13a <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   2a0ee:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a0f2:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a0f6:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a0fa:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a0fc:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a0fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a102:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a106:	441c      	add	r4, r3
   2a108:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2a10a:	45ca      	cmp	sl, r9
   2a10c:	d309      	bcc.n	2a122 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2a10e:	4639      	mov	r1, r7
   2a110:	4630      	mov	r0, r6
   2a112:	46ac      	mov	ip, r5
   2a114:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a118:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   2a11c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2a120:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2a122:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2a126:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2a12a:	4620      	mov	r0, r4
		*ps = s;
   2a12c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2a130:	f7df f96b 	bl	940a <strlen>
   2a134:	3001      	adds	r0, #1
   2a136:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a138:	e7e7      	b.n	2a10a <cbpprintf_external+0x2a>
}
   2a13a:	f06f 0015 	mvn.w	r0, #21
   2a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a142 <arch_printk_char_out>:
}
   2a142:	2000      	movs	r0, #0
   2a144:	4770      	bx	lr

0002a146 <str_out>:
{
   2a146:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a148:	688a      	ldr	r2, [r1, #8]
   2a14a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a14c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a14e:	b114      	cbz	r4, 2a156 <str_out+0x10>
   2a150:	684b      	ldr	r3, [r1, #4]
   2a152:	4293      	cmp	r3, r2
   2a154:	dc01      	bgt.n	2a15a <str_out+0x14>
		ctx->count++;
   2a156:	608d      	str	r5, [r1, #8]
}
   2a158:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a15a:	3b01      	subs	r3, #1
   2a15c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a15e:	bf08      	it	eq
   2a160:	2200      	moveq	r2, #0
   2a162:	608d      	str	r5, [r1, #8]
   2a164:	bf0c      	ite	eq
   2a166:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a168:	54a0      	strbne	r0, [r4, r2]
   2a16a:	e7f5      	b.n	2a158 <str_out+0x12>

0002a16c <printk>:
{
   2a16c:	b40f      	push	{r0, r1, r2, r3}
   2a16e:	b507      	push	{r0, r1, r2, lr}
   2a170:	a904      	add	r1, sp, #16
   2a172:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a176:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a178:	f7e4 fa28 	bl	e5cc <vprintk>
}
   2a17c:	b003      	add	sp, #12
   2a17e:	f85d eb04 	ldr.w	lr, [sp], #4
   2a182:	b004      	add	sp, #16
   2a184:	4770      	bx	lr

0002a186 <snprintk>:
{
   2a186:	b40c      	push	{r2, r3}
   2a188:	b507      	push	{r0, r1, r2, lr}
   2a18a:	ab04      	add	r3, sp, #16
   2a18c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a190:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a192:	f7e4 fa29 	bl	e5e8 <vsnprintk>
}
   2a196:	b003      	add	sp, #12
   2a198:	f85d eb04 	ldr.w	lr, [sp], #4
   2a19c:	b002      	add	sp, #8
   2a19e:	4770      	bx	lr

0002a1a0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a1a0:	4604      	mov	r4, r0
   2a1a2:	b508      	push	{r3, lr}
   2a1a4:	4608      	mov	r0, r1
   2a1a6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a1a8:	461a      	mov	r2, r3
   2a1aa:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a1ac:	f7fc f958 	bl	26460 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a1b0:	f7e7 fc02 	bl	119b8 <z_impl_k_thread_abort>

0002a1b4 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2a1b4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a1b8:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2a1ba:	0840      	lsrs	r0, r0, #1
   2a1bc:	4770      	bx	lr

0002a1be <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2a1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a1c0:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a1c2:	f7ff fff7 	bl	2a1b4 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2a1c6:	fab0 f080 	clz	r0, r0
   2a1ca:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a1ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2a1d2:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2a1d6:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2a1d8:	1d17      	adds	r7, r2, #4
{
   2a1da:	460c      	mov	r4, r1
   2a1dc:	3206      	adds	r2, #6
   2a1de:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2a1e0:	b956      	cbnz	r6, 2a1f8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a1e2:	2101      	movs	r1, #1
   2a1e4:	fa01 f000 	lsl.w	r0, r1, r0
   2a1e8:	68d9      	ldr	r1, [r3, #12]
   2a1ea:	4301      	orrs	r1, r0
   2a1ec:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a1ee:	f8cc 4010 	str.w	r4, [ip, #16]
   2a1f2:	53dd      	strh	r5, [r3, r7]
   2a1f4:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2a1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a1f8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a1fa:	3104      	adds	r1, #4
   2a1fc:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a1fe:	53d8      	strh	r0, [r3, r7]
   2a200:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a204:	529e      	strh	r6, [r3, r2]
   2a206:	80c5      	strh	r5, [r0, #6]
   2a208:	525d      	strh	r5, [r3, r1]
   2a20a:	e7f4      	b.n	2a1f6 <free_list_add+0x38>

0002a20c <free_list_remove_bidx>:
{
   2a20c:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a20e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a212:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a214:	4299      	cmp	r1, r3
   2a216:	f102 0104 	add.w	r1, r2, #4
   2a21a:	d10a      	bne.n	2a232 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a21c:	2301      	movs	r3, #1
   2a21e:	fa03 f202 	lsl.w	r2, r3, r2
   2a222:	68c3      	ldr	r3, [r0, #12]
   2a224:	ea23 0302 	bic.w	r3, r3, r2
   2a228:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a22a:	2300      	movs	r3, #0
   2a22c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a230:	bd10      	pop	{r4, pc}
   2a232:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a234:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a238:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2a23c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a240:	80cb      	strh	r3, [r1, #6]
   2a242:	8082      	strh	r2, [r0, #4]
}
   2a244:	e7f4      	b.n	2a230 <free_list_remove_bidx+0x24>

0002a246 <free_list_remove>:
{
   2a246:	b508      	push	{r3, lr}
   2a248:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a24a:	f7ff ffb3 	bl	2a1b4 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a24e:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2a252:	4618      	mov	r0, r3
}
   2a254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2a258:	f1c2 021f 	rsb	r2, r2, #31
   2a25c:	f7ff bfd6 	b.w	2a20c <free_list_remove_bidx>

0002a260 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2a260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a264:	fab1 f581 	clz	r5, r1
   2a268:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2a26c:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2a270:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2a274:	4603      	mov	r3, r0
   2a276:	460e      	mov	r6, r1
	if (b->next) {
   2a278:	b1c2      	cbz	r2, 2a2ac <alloc_chunk+0x4c>
   2a27a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2a27c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2a280:	4618      	mov	r0, r3
   2a282:	4621      	mov	r1, r4
   2a284:	f7ff ff96 	bl	2a1b4 <chunk_size>
   2a288:	42b0      	cmp	r0, r6
   2a28a:	d306      	bcc.n	2a29a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2a28c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2a28e:	4618      	mov	r0, r3
   2a290:	f7ff ffbc 	bl	2a20c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2a294:	4620      	mov	r0, r4
   2a296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2a29a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2a29e:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2a2a0:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2a2a2:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2a2a6:	d001      	beq.n	2a2ac <alloc_chunk+0x4c>
   2a2a8:	4282      	cmp	r2, r0
   2a2aa:	d1e7      	bne.n	2a27c <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a2ac:	f04f 34ff 	mov.w	r4, #4294967295
   2a2b0:	f1c5 0220 	rsb	r2, r5, #32
   2a2b4:	4094      	lsls	r4, r2
   2a2b6:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2a2b8:	4014      	ands	r4, r2
   2a2ba:	d0eb      	beq.n	2a294 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2a2bc:	fa94 f2a4 	rbit	r2, r4
   2a2c0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a2c4:	1d11      	adds	r1, r2, #4
   2a2c6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a2ca:	4621      	mov	r1, r4
   2a2cc:	e7df      	b.n	2a28e <alloc_chunk+0x2e>

0002a2ce <merge_chunks>:
{
   2a2ce:	b538      	push	{r3, r4, r5, lr}
   2a2d0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a2d2:	f7ff ff6f 	bl	2a1b4 <chunk_size>
{
   2a2d6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a2d8:	4604      	mov	r4, r0
   2a2da:	4611      	mov	r1, r2
   2a2dc:	4618      	mov	r0, r3
   2a2de:	f7ff ff69 	bl	2a1b4 <chunk_size>
   2a2e2:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a2e4:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2a2e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a2ea:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2a2ec:	4618      	mov	r0, r3
   2a2ee:	f7ff ff61 	bl	2a1b4 <chunk_size>
	void *cmem = &buf[c];
   2a2f2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a2f4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2a2f8:	bd38      	pop	{r3, r4, r5, pc}

0002a2fa <split_chunks>:
{
   2a2fa:	b538      	push	{r3, r4, r5, lr}
   2a2fc:	460c      	mov	r4, r1
   2a2fe:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2a300:	f7ff ff58 	bl	2a1b4 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2a304:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2a306:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2a308:	4405      	add	r5, r0
   2a30a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a30e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a310:	8060      	strh	r0, [r4, #2]
   2a312:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a316:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2a318:	8044      	strh	r4, [r0, #2]
   2a31a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2a31e:	4618      	mov	r0, r3
   2a320:	4611      	mov	r1, r2
   2a322:	f7ff ff47 	bl	2a1b4 <chunk_size>
	void *cmem = &buf[c];
   2a326:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a328:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2a32c:	bd38      	pop	{r3, r4, r5, pc}

0002a32e <free_chunk>:
{
   2a32e:	b538      	push	{r3, r4, r5, lr}
   2a330:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2a332:	f7ff ff3f 	bl	2a1b4 <chunk_size>
   2a336:	460c      	mov	r4, r1
   2a338:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2a33a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a33e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a340:	07da      	lsls	r2, r3, #31
   2a342:	d40a      	bmi.n	2a35a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2a344:	4628      	mov	r0, r5
   2a346:	f7ff ff7e 	bl	2a246 <free_list_remove>
	return c + chunk_size(h, c);
   2a34a:	4621      	mov	r1, r4
   2a34c:	4628      	mov	r0, r5
   2a34e:	f7ff ff31 	bl	2a1b4 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2a352:	1822      	adds	r2, r4, r0
   2a354:	4628      	mov	r0, r5
   2a356:	f7ff ffba 	bl	2a2ce <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2a35a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a35e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2a360:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a364:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a366:	07db      	lsls	r3, r3, #31
   2a368:	d40c      	bmi.n	2a384 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2a36a:	4628      	mov	r0, r5
   2a36c:	f7ff ff6b 	bl	2a246 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2a370:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2a374:	4622      	mov	r2, r4
   2a376:	1a61      	subs	r1, r4, r1
   2a378:	4628      	mov	r0, r5
   2a37a:	f7ff ffa8 	bl	2a2ce <merge_chunks>
   2a37e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a382:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2a384:	4621      	mov	r1, r4
   2a386:	4628      	mov	r0, r5
}
   2a388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2a38c:	f7ff bf17 	b.w	2a1be <free_list_add>

0002a390 <sys_heap_free>:
	if (mem == NULL) {
   2a390:	b161      	cbz	r1, 2a3ac <sys_heap_free+0x1c>
   2a392:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a394:	3904      	subs	r1, #4
   2a396:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2a398:	f021 0307 	bic.w	r3, r1, #7
   2a39c:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2a39e:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   2a3a0:	08c9      	lsrs	r1, r1, #3
   2a3a2:	f022 0201 	bic.w	r2, r2, #1
   2a3a6:	805a      	strh	r2, [r3, #2]
   2a3a8:	f7ff bfc1 	b.w	2a32e <free_chunk>
}
   2a3ac:	4770      	bx	lr

0002a3ae <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2a3ae:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2a3b0:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2a3b2:	b909      	cbnz	r1, 2a3b8 <sys_heap_alloc+0xa>
		return NULL;
   2a3b4:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a3b6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a3b8:	68ab      	ldr	r3, [r5, #8]
   2a3ba:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2a3be:	d9f9      	bls.n	2a3b4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a3c0:	310b      	adds	r1, #11
   2a3c2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a3c4:	4621      	mov	r1, r4
   2a3c6:	4628      	mov	r0, r5
   2a3c8:	f7ff ff4a 	bl	2a260 <alloc_chunk>
	if (c == 0U) {
   2a3cc:	4606      	mov	r6, r0
   2a3ce:	2800      	cmp	r0, #0
   2a3d0:	d0f0      	beq.n	2a3b4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2a3d2:	4601      	mov	r1, r0
   2a3d4:	4628      	mov	r0, r5
   2a3d6:	f7ff feed 	bl	2a1b4 <chunk_size>
   2a3da:	42a0      	cmp	r0, r4
   2a3dc:	d907      	bls.n	2a3ee <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2a3de:	4628      	mov	r0, r5
   2a3e0:	1932      	adds	r2, r6, r4
   2a3e2:	f7ff ff8a 	bl	2a2fa <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a3e6:	4611      	mov	r1, r2
   2a3e8:	4628      	mov	r0, r5
   2a3ea:	f7ff fee8 	bl	2a1be <free_list_add>
	void *cmem = &buf[c];
   2a3ee:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a3f2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a3f4:	8853      	ldrh	r3, [r2, #2]
   2a3f6:	3004      	adds	r0, #4
   2a3f8:	f043 0301 	orr.w	r3, r3, #1
   2a3fc:	8053      	strh	r3, [r2, #2]
	return mem;
   2a3fe:	e7da      	b.n	2a3b6 <sys_heap_alloc+0x8>

0002a400 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2a400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a404:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   2a408:	ea19 0901 	ands.w	r9, r9, r1
{
   2a40c:	460f      	mov	r7, r1
   2a40e:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   2a410:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   2a412:	d00c      	beq.n	2a42e <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   2a414:	424b      	negs	r3, r1
   2a416:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2a418:	2b04      	cmp	r3, #4
   2a41a:	461a      	mov	r2, r3
   2a41c:	464f      	mov	r7, r9
   2a41e:	bf28      	it	cs
   2a420:	2204      	movcs	r2, #4
	rew = align & -align;
   2a422:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2a424:	b964      	cbnz	r4, 2a440 <sys_heap_aligned_alloc+0x40>
		return NULL;
   2a426:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a428:	4628      	mov	r0, r5
   2a42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2a42e:	2904      	cmp	r1, #4
   2a430:	d804      	bhi.n	2a43c <sys_heap_aligned_alloc+0x3c>
}
   2a432:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2a436:	4611      	mov	r1, r2
   2a438:	f7ff bfb9 	b.w	2a3ae <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2a43c:	2204      	movs	r2, #4
   2a43e:	e7f1      	b.n	2a424 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2a440:	68b3      	ldr	r3, [r6, #8]
   2a442:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2a446:	d9ee      	bls.n	2a426 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a448:	f104 010b 	add.w	r1, r4, #11
   2a44c:	4439      	add	r1, r7
   2a44e:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2a450:	4630      	mov	r0, r6
   2a452:	08c9      	lsrs	r1, r1, #3
   2a454:	f7ff ff04 	bl	2a260 <alloc_chunk>
	if (c0 == 0) {
   2a458:	4680      	mov	r8, r0
   2a45a:	2800      	cmp	r0, #0
   2a45c:	d0e3      	beq.n	2a426 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2a45e:	f109 0504 	add.w	r5, r9, #4
   2a462:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2a466:	1e7b      	subs	r3, r7, #1
   2a468:	4435      	add	r5, r6
   2a46a:	441d      	add	r5, r3
   2a46c:	427f      	negs	r7, r7
   2a46e:	403d      	ands	r5, r7
   2a470:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a474:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a476:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a478:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a47a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a47c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2a480:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2a482:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a486:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2a48a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2a48e:	d208      	bcs.n	2a4a2 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   2a490:	4601      	mov	r1, r0
   2a492:	463a      	mov	r2, r7
   2a494:	4630      	mov	r0, r6
   2a496:	f7ff ff30 	bl	2a2fa <split_chunks>
		free_list_add(h, c0);
   2a49a:	4641      	mov	r1, r8
   2a49c:	4630      	mov	r0, r6
   2a49e:	f7ff fe8e 	bl	2a1be <free_list_add>
	return c + chunk_size(h, c);
   2a4a2:	4639      	mov	r1, r7
   2a4a4:	4630      	mov	r0, r6
   2a4a6:	f7ff fe85 	bl	2a1b4 <chunk_size>
   2a4aa:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2a4ac:	4284      	cmp	r4, r0
   2a4ae:	d207      	bcs.n	2a4c0 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   2a4b0:	4630      	mov	r0, r6
   2a4b2:	4622      	mov	r2, r4
   2a4b4:	f7ff ff21 	bl	2a2fa <split_chunks>
		free_list_add(h, c_end);
   2a4b8:	4621      	mov	r1, r4
   2a4ba:	4630      	mov	r0, r6
   2a4bc:	f7ff fe7f 	bl	2a1be <free_list_add>
	void *cmem = &buf[c];
   2a4c0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a4c4:	8873      	ldrh	r3, [r6, #2]
   2a4c6:	f043 0301 	orr.w	r3, r3, #1
   2a4ca:	8073      	strh	r3, [r6, #2]
   2a4cc:	e7ac      	b.n	2a428 <sys_heap_aligned_alloc+0x28>

0002a4ce <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2a4ce:	b4f0      	push	{r4, r5, r6, r7}
   2a4d0:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2a4d2:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a4d4:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a4d6:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a4d8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a4dc:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2a4e0:	1a0e      	subs	r6, r1, r0
   2a4e2:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   2a4e4:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2a4e8:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2a4ea:	2700      	movs	r7, #0
   2a4ec:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2a4ee:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   2a4f2:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   2a4f4:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a4f6:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   2a4f8:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2a4fc:	f1c2 0220 	rsb	r2, r2, #32
   2a500:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2a502:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   2a506:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2a50a:	4294      	cmp	r4, r2
   2a50c:	d1fb      	bne.n	2a506 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a50e:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a510:	f042 0201 	orr.w	r2, r2, #1
   2a514:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2a516:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a518:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2a51a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a51e:	8007      	strh	r7, [r0, #0]
   2a520:	8065      	strh	r5, [r4, #2]
   2a522:	1984      	adds	r4, r0, r6
   2a524:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   2a528:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2a52c:	8067      	strh	r7, [r4, #2]
   2a52e:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a530:	885a      	ldrh	r2, [r3, #2]
   2a532:	f042 0201 	orr.w	r2, r2, #1
   2a536:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2a538:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2a53a:	f7ff be40 	b.w	2a1be <free_list_add>

0002a53e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a53e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2a540:	f013 0307 	ands.w	r3, r3, #7
   2a544:	d105      	bne.n	2a552 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a546:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2a548:	2b00      	cmp	r3, #0
   2a54a:	bf0c      	ite	eq
   2a54c:	2000      	moveq	r0, #0
   2a54e:	2003      	movne	r0, #3
   2a550:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a552:	2b02      	cmp	r3, #2
   2a554:	d105      	bne.n	2a562 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a556:	8b40      	ldrh	r0, [r0, #26]
   2a558:	fab0 f080 	clz	r0, r0
   2a55c:	0940      	lsrs	r0, r0, #5
   2a55e:	0080      	lsls	r0, r0, #2
   2a560:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a562:	2b01      	cmp	r3, #1
   2a564:	d105      	bne.n	2a572 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a566:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2a568:	2b00      	cmp	r3, #0
   2a56a:	bf0c      	ite	eq
   2a56c:	2000      	moveq	r0, #0
   2a56e:	2005      	movne	r0, #5
   2a570:	4770      	bx	lr
	int evt = EVT_NOP;
   2a572:	2000      	movs	r0, #0
}
   2a574:	4770      	bx	lr

0002a576 <validate_args>:
{
   2a576:	b510      	push	{r4, lr}
   2a578:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a57a:	b100      	cbz	r0, 2a57e <validate_args+0x8>
   2a57c:	b911      	cbnz	r1, 2a584 <validate_args+0xe>
		return -EINVAL;
   2a57e:	f06f 0015 	mvn.w	r0, #21
}
   2a582:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2a584:	1d08      	adds	r0, r1, #4
   2a586:	f000 f895 	bl	2a6b4 <sys_notify_validate>
	if ((rv == 0)
   2a58a:	2800      	cmp	r0, #0
   2a58c:	d1f9      	bne.n	2a582 <validate_args+0xc>
	    && ((cli->notify.flags
   2a58e:	68a3      	ldr	r3, [r4, #8]
   2a590:	2b03      	cmp	r3, #3
   2a592:	d9f6      	bls.n	2a582 <validate_args+0xc>
   2a594:	e7f3      	b.n	2a57e <validate_args+0x8>

0002a596 <notify_one>:
{
   2a596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a59a:	460d      	mov	r5, r1
   2a59c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a59e:	4619      	mov	r1, r3
   2a5a0:	1d28      	adds	r0, r5, #4
{
   2a5a2:	4690      	mov	r8, r2
   2a5a4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a5a6:	f000 f899 	bl	2a6dc <sys_notify_finalize>
	if (cb) {
   2a5aa:	4604      	mov	r4, r0
   2a5ac:	b138      	cbz	r0, 2a5be <notify_one+0x28>
		cb(mgr, cli, state, res);
   2a5ae:	4633      	mov	r3, r6
   2a5b0:	4642      	mov	r2, r8
   2a5b2:	4629      	mov	r1, r5
   2a5b4:	4638      	mov	r0, r7
   2a5b6:	46a4      	mov	ip, r4
}
   2a5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2a5bc:	4760      	bx	ip
}
   2a5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a5c2 <transition_complete>:
{
   2a5c2:	b410      	push	{r4}
	__asm__ volatile(
   2a5c4:	f04f 0420 	mov.w	r4, #32
   2a5c8:	f3ef 8211 	mrs	r2, BASEPRI
   2a5cc:	f384 8812 	msr	BASEPRI_MAX, r4
   2a5d0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2a5d4:	6141      	str	r1, [r0, #20]
}
   2a5d6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2a5d8:	2101      	movs	r1, #1
   2a5da:	f7e4 b81b 	b.w	e614 <process_event>

0002a5de <onoff_manager_init>:
{
   2a5de:	b538      	push	{r3, r4, r5, lr}
   2a5e0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2a5e2:	4605      	mov	r5, r0
   2a5e4:	b158      	cbz	r0, 2a5fe <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2a5e6:	b151      	cbz	r1, 2a5fe <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2a5e8:	680b      	ldr	r3, [r1, #0]
   2a5ea:	b143      	cbz	r3, 2a5fe <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2a5ec:	684b      	ldr	r3, [r1, #4]
   2a5ee:	b133      	cbz	r3, 2a5fe <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a5f0:	221c      	movs	r2, #28
   2a5f2:	2100      	movs	r1, #0
   2a5f4:	f007 f8c5 	bl	31782 <memset>
	return 0;
   2a5f8:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a5fa:	612c      	str	r4, [r5, #16]
}
   2a5fc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2a5fe:	f06f 0015 	mvn.w	r0, #21
   2a602:	e7fb      	b.n	2a5fc <onoff_manager_init+0x1e>

0002a604 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2a604:	b570      	push	{r4, r5, r6, lr}
   2a606:	4605      	mov	r5, r0
   2a608:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2a60a:	f7ff ffb4 	bl	2a576 <validate_args>

	if (rv < 0) {
   2a60e:	1e04      	subs	r4, r0, #0
   2a610:	db15      	blt.n	2a63e <onoff_request+0x3a>
   2a612:	f04f 0320 	mov.w	r3, #32
   2a616:	f3ef 8211 	mrs	r2, BASEPRI
   2a61a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a61e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2a622:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2a626:	8b6b      	ldrh	r3, [r5, #26]
   2a628:	8b2c      	ldrh	r4, [r5, #24]
   2a62a:	428b      	cmp	r3, r1
   2a62c:	f004 0407 	and.w	r4, r4, #7
   2a630:	d107      	bne.n	2a642 <onoff_request+0x3e>
	__asm__ volatile(
   2a632:	f382 8811 	msr	BASEPRI, r2
   2a636:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   2a63a:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2a63e:	4620      	mov	r0, r4
   2a640:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2a642:	2c02      	cmp	r4, #2
   2a644:	d10c      	bne.n	2a660 <onoff_request+0x5c>
		mgr->refs += 1U;
   2a646:	3301      	adds	r3, #1
   2a648:	836b      	strh	r3, [r5, #26]
   2a64a:	f382 8811 	msr	BASEPRI, r2
   2a64e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2a652:	2300      	movs	r3, #0
   2a654:	4622      	mov	r2, r4
   2a656:	4631      	mov	r1, r6
   2a658:	4628      	mov	r0, r5
   2a65a:	f7ff ff9c 	bl	2a596 <notify_one>
   2a65e:	e7ee      	b.n	2a63e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   2a660:	2c06      	cmp	r4, #6
   2a662:	d814      	bhi.n	2a68e <onoff_request+0x8a>
   2a664:	e8df f004 	tbb	[pc, r4]
   2a668:	13131304 	.word	0x13131304
   2a66c:	1a04      	.short	0x1a04
   2a66e:	04          	.byte	0x04
   2a66f:	00          	.byte	0x00
	parent->next = child;
   2a670:	2300      	movs	r3, #0
   2a672:	6033      	str	r3, [r6, #0]
	return list->tail;
   2a674:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2a676:	b93b      	cbnz	r3, 2a688 <onoff_request+0x84>
	list->head = node;
   2a678:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   2a67c:	b9ac      	cbnz	r4, 2a6aa <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2a67e:	2102      	movs	r1, #2
   2a680:	4628      	mov	r0, r5
   2a682:	f7e3 ffc7 	bl	e614 <process_event>
   2a686:	e7da      	b.n	2a63e <onoff_request+0x3a>
	parent->next = child;
   2a688:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2a68a:	606e      	str	r6, [r5, #4]
}
   2a68c:	e7f6      	b.n	2a67c <onoff_request+0x78>
   2a68e:	f382 8811 	msr	BASEPRI, r2
   2a692:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   2a696:	f06f 0404 	mvn.w	r4, #4
   2a69a:	e7d0      	b.n	2a63e <onoff_request+0x3a>
   2a69c:	f382 8811 	msr	BASEPRI, r2
   2a6a0:	f3bf 8f6f 	isb	sy
   2a6a4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a6a8:	e7c9      	b.n	2a63e <onoff_request+0x3a>
   2a6aa:	f382 8811 	msr	BASEPRI, r2
   2a6ae:	f3bf 8f6f 	isb	sy
		if (notify) {
   2a6b2:	e7c4      	b.n	2a63e <onoff_request+0x3a>

0002a6b4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2a6b4:	4603      	mov	r3, r0
   2a6b6:	b140      	cbz	r0, 2a6ca <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a6b8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2a6ba:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2a6be:	2a02      	cmp	r2, #2
   2a6c0:	d006      	beq.n	2a6d0 <sys_notify_validate+0x1c>
   2a6c2:	2a03      	cmp	r2, #3
   2a6c4:	d004      	beq.n	2a6d0 <sys_notify_validate+0x1c>
   2a6c6:	2a01      	cmp	r2, #1
   2a6c8:	d005      	beq.n	2a6d6 <sys_notify_validate+0x22>
   2a6ca:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2a6ce:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2a6d0:	681a      	ldr	r2, [r3, #0]
   2a6d2:	2a00      	cmp	r2, #0
   2a6d4:	d0f9      	beq.n	2a6ca <sys_notify_validate+0x16>
		notify->result = 0;
   2a6d6:	2000      	movs	r0, #0
   2a6d8:	6098      	str	r0, [r3, #8]
   2a6da:	4770      	bx	lr

0002a6dc <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2a6dc:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a6de:	6842      	ldr	r2, [r0, #4]
   2a6e0:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   2a6e2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2a6e6:	2a02      	cmp	r2, #2
   2a6e8:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   2a6ec:	6081      	str	r1, [r0, #8]
	switch (method) {
   2a6ee:	d007      	beq.n	2a700 <sys_notify_finalize+0x24>
   2a6f0:	2a03      	cmp	r2, #3
   2a6f2:	d002      	beq.n	2a6fa <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a6f4:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   2a6f6:	2000      	movs	r0, #0
   2a6f8:	e001      	b.n	2a6fe <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   2a6fa:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a6fc:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2a6fe:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2a700:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a702:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2a704:	2800      	cmp	r0, #0
   2a706:	d0f6      	beq.n	2a6f6 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   2a708:	f7fc f990 	bl	26a2c <z_impl_k_poll_signal_raise>
   2a70c:	e7f3      	b.n	2a6f6 <sys_notify_finalize+0x1a>

0002a70e <outs>:
{
   2a70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a712:	4607      	mov	r7, r0
   2a714:	4688      	mov	r8, r1
   2a716:	4615      	mov	r5, r2
   2a718:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a71a:	4614      	mov	r4, r2
   2a71c:	42b4      	cmp	r4, r6
   2a71e:	d305      	bcc.n	2a72c <outs+0x1e>
   2a720:	b10e      	cbz	r6, 2a726 <outs+0x18>
	return (int)count;
   2a722:	1b60      	subs	r0, r4, r5
   2a724:	e008      	b.n	2a738 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a726:	7823      	ldrb	r3, [r4, #0]
   2a728:	2b00      	cmp	r3, #0
   2a72a:	d0fa      	beq.n	2a722 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2a72c:	4641      	mov	r1, r8
   2a72e:	f814 0b01 	ldrb.w	r0, [r4], #1
   2a732:	47b8      	blx	r7
		if (rc < 0) {
   2a734:	2800      	cmp	r0, #0
   2a736:	daf1      	bge.n	2a71c <outs+0xe>
}
   2a738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a73c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   2a73c:	b40f      	push	{r0, r1, r2, r3}
   2a73e:	b507      	push	{r0, r1, r2, lr}
   2a740:	a904      	add	r1, sp, #16
   2a742:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2a746:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2a748:	f7e3 ff40 	bl	e5cc <vprintk>

	va_end(ap);
}
   2a74c:	b003      	add	sp, #12
   2a74e:	f85d eb04 	ldr.w	lr, [sp], #4
   2a752:	b004      	add	sp, #16
   2a754:	4770      	bx	lr

0002a756 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 100);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2a756:	4770      	bx	lr

0002a758 <nordicsemi_nrf53_init>:
{
   2a758:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a75a:	f04f 0320 	mov.w	r3, #32
   2a75e:	f3ef 8511 	mrs	r5, BASEPRI
   2a762:	f383 8812 	msr	BASEPRI_MAX, r3
   2a766:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   2a76a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   2a76e:	2401      	movs	r4, #1
   2a770:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   2a772:	4621      	mov	r1, r4
   2a774:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2a778:	2021      	movs	r0, #33	; 0x21
   2a77a:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   2a77e:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   2a782:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   2a786:	f000 f824 	bl	2a7d2 <soc_secure_gpio_pin_mcu_select>
   2a78a:	4621      	mov	r1, r4
   2a78c:	2020      	movs	r0, #32
   2a78e:	f000 f820 	bl	2a7d2 <soc_secure_gpio_pin_mcu_select>
   2a792:	4621      	mov	r1, r4
   2a794:	200b      	movs	r0, #11
   2a796:	f000 f81c 	bl	2a7d2 <soc_secure_gpio_pin_mcu_select>
   2a79a:	4621      	mov	r1, r4
   2a79c:	200a      	movs	r0, #10
   2a79e:	f000 f818 	bl	2a7d2 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   2a7a2:	f385 8811 	msr	BASEPRI, r5
   2a7a6:	f3bf 8f6f 	isb	sy
}
   2a7aa:	2000      	movs	r0, #0
   2a7ac:	bd38      	pop	{r3, r4, r5, pc}

0002a7ae <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2a7ae:	2806      	cmp	r0, #6
   2a7b0:	d108      	bne.n	2a7c4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2a7b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a7b6:	2201      	movs	r2, #1
   2a7b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a7bc:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a7c0:	bf20      	wfe
    while (true)
   2a7c2:	e7fd      	b.n	2a7c0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2a7c4:	4770      	bx	lr

0002a7c6 <pm_state_exit_post_ops>:
   2a7c6:	2300      	movs	r3, #0
   2a7c8:	f383 8811 	msr	BASEPRI, r3
   2a7cc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a7d0:	4770      	bx	lr

0002a7d2 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   2a7d2:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   2a7d4:	aa01      	add	r2, sp, #4
   2a7d6:	f005 fb8f 	bl	2fef8 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
   2a7da:	b003      	add	sp, #12
   2a7dc:	f85d fb04 	ldr.w	pc, [sp], #4

0002a7e0 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   2a7e0:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2a7e2:	ab01      	add	r3, sp, #4
   2a7e4:	f005 fb70 	bl	2fec8 <tfm_platform_mem_read>

	switch (status) {
   2a7e8:	2802      	cmp	r0, #2
   2a7ea:	d00a      	beq.n	2a802 <soc_secure_mem_read+0x22>
   2a7ec:	2803      	cmp	r0, #3
   2a7ee:	d00b      	beq.n	2a808 <soc_secure_mem_read+0x28>
   2a7f0:	b968      	cbnz	r0, 2a80e <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2a7f2:	9801      	ldr	r0, [sp, #4]
   2a7f4:	3800      	subs	r0, #0
   2a7f6:	bf18      	it	ne
   2a7f8:	2001      	movne	r0, #1
   2a7fa:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   2a7fc:	b003      	add	sp, #12
   2a7fe:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2a802:	f06f 0015 	mvn.w	r0, #21
   2a806:	e7f9      	b.n	2a7fc <soc_secure_mem_read+0x1c>
	switch (status) {
   2a808:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a80c:	e7f6      	b.n	2a7fc <soc_secure_mem_read+0x1c>
		return -EPERM;
   2a80e:	f04f 30ff 	mov.w	r0, #4294967295
   2a812:	e7f3      	b.n	2a7fc <soc_secure_mem_read+0x1c>

0002a814 <dummy_timestamp>:
}
   2a814:	2000      	movs	r0, #0
   2a816:	4770      	bx	lr

0002a818 <default_get_timestamp>:
   2a818:	f005 baeb 	b.w	2fdf2 <sys_clock_cycle_get_32>

0002a81c <atomic_inc>:
{
   2a81c:	4603      	mov	r3, r0
}
   2a81e:	e8d3 0fef 	ldaex	r0, [r3]
   2a822:	1c42      	adds	r2, r0, #1
   2a824:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2a828:	2900      	cmp	r1, #0
   2a82a:	d1f8      	bne.n	2a81e <atomic_inc+0x2>
   2a82c:	4770      	bx	lr

0002a82e <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   2a82e:	2100      	movs	r1, #0
{
   2a830:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   2a832:	4608      	mov	r0, r1
   2a834:	f7e4 fcfc 	bl	f230 <z_log_init.isra.0>
	}

	return 0;
}
   2a838:	2000      	movs	r0, #0
   2a83a:	bd08      	pop	{r3, pc}

0002a83c <z_log_notify_backend_enabled>:
}
   2a83c:	4770      	bx	lr

0002a83e <z_log_get_tag>:
}
   2a83e:	2000      	movs	r0, #0
   2a840:	4770      	bx	lr

0002a842 <z_log_msg_finalize>:
{
   2a842:	b570      	push	{r4, r5, r6, lr}
   2a844:	460e      	mov	r6, r1
   2a846:	4615      	mov	r5, r2
   2a848:	4619      	mov	r1, r3
	if (!msg) {
   2a84a:	4604      	mov	r4, r0
   2a84c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2a850:	b918      	cbnz	r0, 2a85a <z_log_msg_finalize+0x18>
}
   2a852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2a856:	f7e4 bd97 	b.w	f388 <z_log_dropped>
	if (data) {
   2a85a:	b12b      	cbz	r3, 2a868 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2a85c:	3010      	adds	r0, #16
   2a85e:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2a862:	4418      	add	r0, r3
   2a864:	f006 ff53 	bl	3170e <memcpy>
	msg->hdr.source = source;
   2a868:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2a86c:	4620      	mov	r0, r4
}
   2a86e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2a872:	f7e4 bd9d 	b.w	f3b0 <z_log_msg_commit>

0002a876 <out_func>:
{
   2a876:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2a878:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   2a87c:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2a880:	2101      	movs	r1, #1
   2a882:	6852      	ldr	r2, [r2, #4]
   2a884:	f10d 0007 	add.w	r0, sp, #7
   2a888:	4798      	blx	r3
}
   2a88a:	2000      	movs	r0, #0
   2a88c:	b003      	add	sp, #12
   2a88e:	f85d fb04 	ldr.w	pc, [sp], #4

0002a892 <cr_out_func>:
	if (c == '\n') {
   2a892:	280a      	cmp	r0, #10
{
   2a894:	b538      	push	{r3, r4, r5, lr}
   2a896:	4604      	mov	r4, r0
   2a898:	460d      	mov	r5, r1
	if (c == '\n') {
   2a89a:	d102      	bne.n	2a8a2 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2a89c:	200d      	movs	r0, #13
   2a89e:	f7ff ffea 	bl	2a876 <out_func>
	out_func(c, ctx);
   2a8a2:	4629      	mov	r1, r5
   2a8a4:	4620      	mov	r0, r4
   2a8a6:	f7ff ffe6 	bl	2a876 <out_func>
}
   2a8aa:	2000      	movs	r0, #0
   2a8ac:	bd38      	pop	{r3, r4, r5, pc}

0002a8ae <buffer_write>:
{
   2a8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a8b0:	4606      	mov	r6, r0
   2a8b2:	460d      	mov	r5, r1
   2a8b4:	4614      	mov	r4, r2
   2a8b6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2a8b8:	4621      	mov	r1, r4
   2a8ba:	4628      	mov	r0, r5
   2a8bc:	463a      	mov	r2, r7
   2a8be:	47b0      	blx	r6
	} while (len != 0);
   2a8c0:	1a24      	subs	r4, r4, r0
		buf += processed;
   2a8c2:	4405      	add	r5, r0
	} while (len != 0);
   2a8c4:	d1f8      	bne.n	2a8b8 <buffer_write+0xa>
}
   2a8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a8c8 <cbvprintf>:
{
   2a8c8:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2a8ca:	2400      	movs	r4, #0
   2a8cc:	9400      	str	r4, [sp, #0]
   2a8ce:	f7e4 f827 	bl	e920 <z_cbvprintf_impl>
}
   2a8d2:	b002      	add	sp, #8
   2a8d4:	bd10      	pop	{r4, pc}

0002a8d6 <log_output_flush>:
{
   2a8d6:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2a8d8:	6842      	ldr	r2, [r0, #4]
{
   2a8da:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2a8dc:	e9d2 2300 	ldrd	r2, r3, [r2]
   2a8e0:	6881      	ldr	r1, [r0, #8]
   2a8e2:	6800      	ldr	r0, [r0, #0]
   2a8e4:	f7ff ffe3 	bl	2a8ae <buffer_write>
	output->control_block->offset = 0;
   2a8e8:	2200      	movs	r2, #0
   2a8ea:	6863      	ldr	r3, [r4, #4]
   2a8ec:	601a      	str	r2, [r3, #0]
}
   2a8ee:	bd10      	pop	{r4, pc}

0002a8f0 <nvs_flash_rd>:
{
   2a8f0:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2a8f2:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a8f4:	8984      	ldrh	r4, [r0, #12]
   2a8f6:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2a8f8:	fa16 f181 	uxtah	r1, r6, r1
   2a8fc:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2a900:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   2a902:	6884      	ldr	r4, [r0, #8]
   2a904:	6824      	ldr	r4, [r4, #0]
   2a906:	46a4      	mov	ip, r4
}
   2a908:	bc70      	pop	{r4, r5, r6}
   2a90a:	4760      	bx	ip

0002a90c <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2a90c:	680b      	ldr	r3, [r1, #0]
   2a90e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2a912:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2a914:	89c0      	ldrh	r0, [r0, #14]
   2a916:	0c1a      	lsrs	r2, r3, #16
   2a918:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2a91c:	bf04      	itt	eq
   2a91e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2a922:	600b      	streq	r3, [r1, #0]
}
   2a924:	4770      	bx	lr

0002a926 <nvs_flash_block_cmp>:
{
   2a926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a92a:	4681      	mov	r9, r0
   2a92c:	460e      	mov	r6, r1
   2a92e:	4617      	mov	r7, r2
   2a930:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a932:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2a934:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a936:	681d      	ldr	r5, [r3, #0]
   2a938:	426d      	negs	r5, r5
	block_size =
   2a93a:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2a93e:	b91c      	cbnz	r4, 2a948 <nvs_flash_block_cmp+0x22>
	return 0;
   2a940:	4620      	mov	r0, r4
}
   2a942:	b009      	add	sp, #36	; 0x24
   2a944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2a948:	42ac      	cmp	r4, r5
   2a94a:	46a0      	mov	r8, r4
   2a94c:	bf28      	it	cs
   2a94e:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2a950:	466a      	mov	r2, sp
   2a952:	4643      	mov	r3, r8
   2a954:	4631      	mov	r1, r6
   2a956:	4648      	mov	r0, r9
   2a958:	f7ff ffca 	bl	2a8f0 <nvs_flash_rd>
		if (rc) {
   2a95c:	2800      	cmp	r0, #0
   2a95e:	d1f0      	bne.n	2a942 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2a960:	4642      	mov	r2, r8
   2a962:	4669      	mov	r1, sp
   2a964:	4638      	mov	r0, r7
   2a966:	f006 fec2 	bl	316ee <memcmp>
		if (rc) {
   2a96a:	b920      	cbnz	r0, 2a976 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2a96c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2a970:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2a972:	4447      	add	r7, r8
   2a974:	e7e3      	b.n	2a93e <nvs_flash_block_cmp+0x18>
			return 1;
   2a976:	2001      	movs	r0, #1
   2a978:	e7e3      	b.n	2a942 <nvs_flash_block_cmp+0x1c>

0002a97a <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a97a:	4601      	mov	r1, r0
{
   2a97c:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a97e:	2207      	movs	r2, #7
{
   2a980:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a982:	20ff      	movs	r0, #255	; 0xff
   2a984:	f7e3 ff54 	bl	e830 <crc8_ccitt>
	entry->crc8 = crc8;
   2a988:	71e0      	strb	r0, [r4, #7]
}
   2a98a:	bd10      	pop	{r4, pc}

0002a98c <nvs_flash_cmp_const>:
{
   2a98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a990:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a992:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2a994:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a996:	681d      	ldr	r5, [r3, #0]
{
   2a998:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a99a:	426d      	negs	r5, r5
	block_size =
   2a99c:	f005 0520 	and.w	r5, r5, #32
{
   2a9a0:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2a9a2:	4668      	mov	r0, sp
{
   2a9a4:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2a9a6:	462a      	mov	r2, r5
   2a9a8:	f006 feeb 	bl	31782 <memset>
	while (len) {
   2a9ac:	b91c      	cbnz	r4, 2a9b6 <nvs_flash_cmp_const+0x2a>
	return 0;
   2a9ae:	4620      	mov	r0, r4
}
   2a9b0:	b008      	add	sp, #32
   2a9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2a9b6:	42ac      	cmp	r4, r5
   2a9b8:	46a0      	mov	r8, r4
   2a9ba:	bf28      	it	cs
   2a9bc:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2a9be:	466a      	mov	r2, sp
   2a9c0:	4643      	mov	r3, r8
   2a9c2:	4631      	mov	r1, r6
   2a9c4:	4638      	mov	r0, r7
   2a9c6:	f7ff ffae 	bl	2a926 <nvs_flash_block_cmp>
		if (rc) {
   2a9ca:	2800      	cmp	r0, #0
   2a9cc:	d1f0      	bne.n	2a9b0 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2a9ce:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2a9d2:	4446      	add	r6, r8
   2a9d4:	e7ea      	b.n	2a9ac <nvs_flash_cmp_const+0x20>

0002a9d6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2a9d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a9d8:	ab0b      	add	r3, sp, #44	; 0x2c
   2a9da:	9305      	str	r3, [sp, #20]
   2a9dc:	9303      	str	r3, [sp, #12]
   2a9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a9e0:	9302      	str	r3, [sp, #8]
   2a9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a9e4:	9301      	str	r3, [sp, #4]
   2a9e6:	2300      	movs	r3, #0
   2a9e8:	4618      	mov	r0, r3
   2a9ea:	9300      	str	r3, [sp, #0]
   2a9ec:	f7e4 fd1e 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2a9f0:	b007      	add	sp, #28
   2a9f2:	f85d fb04 	ldr.w	pc, [sp], #4

0002a9f6 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2a9f6:	7803      	ldrb	r3, [r0, #0]
   2a9f8:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2a9fa:	bf81      	itttt	hi
   2a9fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2aa00:	18c9      	addhi	r1, r1, r3
   2aa02:	425b      	neghi	r3, r3
   2aa04:	4019      	andhi	r1, r3
}
   2aa06:	4608      	mov	r0, r1
   2aa08:	4770      	bx	lr

0002aa0a <nvs_ate_valid>:
{
   2aa0a:	b570      	push	{r4, r5, r6, lr}
   2aa0c:	460c      	mov	r4, r1
   2aa0e:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2aa10:	2108      	movs	r1, #8
   2aa12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2aa14:	f7ff ffef 	bl	2a9f6 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa18:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2aa1a:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa1c:	4621      	mov	r1, r4
   2aa1e:	20ff      	movs	r0, #255	; 0xff
   2aa20:	f7e3 ff06 	bl	e830 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2aa24:	79e3      	ldrb	r3, [r4, #7]
   2aa26:	4283      	cmp	r3, r0
   2aa28:	d107      	bne.n	2aa3a <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2aa2a:	89aa      	ldrh	r2, [r5, #12]
   2aa2c:	8863      	ldrh	r3, [r4, #2]
   2aa2e:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2aa30:	4283      	cmp	r3, r0
   2aa32:	bf2c      	ite	cs
   2aa34:	2000      	movcs	r0, #0
   2aa36:	2001      	movcc	r0, #1
}
   2aa38:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2aa3a:	2000      	movs	r0, #0
   2aa3c:	e7fc      	b.n	2aa38 <nvs_ate_valid+0x2e>

0002aa3e <nvs_close_ate_valid>:
{
   2aa3e:	b538      	push	{r3, r4, r5, lr}
   2aa40:	4605      	mov	r5, r0
   2aa42:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2aa44:	f7ff ffe1 	bl	2aa0a <nvs_ate_valid>
   2aa48:	b1a0      	cbz	r0, 2aa74 <nvs_close_ate_valid+0x36>
   2aa4a:	88a0      	ldrh	r0, [r4, #4]
   2aa4c:	b998      	cbnz	r0, 2aa76 <nvs_close_ate_valid+0x38>
   2aa4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2aa52:	8822      	ldrh	r2, [r4, #0]
   2aa54:	429a      	cmp	r2, r3
   2aa56:	d10d      	bne.n	2aa74 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2aa58:	2108      	movs	r1, #8
   2aa5a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2aa5c:	f7ff ffcb 	bl	2a9f6 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2aa60:	8862      	ldrh	r2, [r4, #2]
   2aa62:	89ab      	ldrh	r3, [r5, #12]
   2aa64:	1a9b      	subs	r3, r3, r2
   2aa66:	fbb3 f2f0 	udiv	r2, r3, r0
   2aa6a:	fb02 3010 	mls	r0, r2, r0, r3
   2aa6e:	fab0 f080 	clz	r0, r0
   2aa72:	0940      	lsrs	r0, r0, #5
}
   2aa74:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2aa76:	2000      	movs	r0, #0
   2aa78:	e7fc      	b.n	2aa74 <nvs_close_ate_valid+0x36>

0002aa7a <nvs_prev_ate>:
{
   2aa7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2aa7c:	4604      	mov	r4, r0
   2aa7e:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2aa80:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2aa82:	2108      	movs	r1, #8
   2aa84:	f7ff ffb7 	bl	2a9f6 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2aa88:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2aa8a:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2aa8c:	6829      	ldr	r1, [r5, #0]
   2aa8e:	4620      	mov	r0, r4
   2aa90:	f7ff ff2e 	bl	2a8f0 <nvs_flash_rd>
	if (rc) {
   2aa94:	4606      	mov	r6, r0
   2aa96:	2800      	cmp	r0, #0
   2aa98:	d136      	bne.n	2ab08 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2aa9a:	682b      	ldr	r3, [r5, #0]
   2aa9c:	443b      	add	r3, r7
   2aa9e:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2aaa0:	89a2      	ldrh	r2, [r4, #12]
   2aaa2:	b299      	uxth	r1, r3
   2aaa4:	1bd2      	subs	r2, r2, r7
   2aaa6:	4291      	cmp	r1, r2
   2aaa8:	d12e      	bne.n	2ab08 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2aaaa:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2aaac:	bf09      	itett	eq
   2aaae:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   2aab0:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2aab4:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2aab8:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2aabc:	4620      	mov	r0, r4
   2aabe:	2308      	movs	r3, #8
   2aac0:	466a      	mov	r2, sp
   2aac2:	6029      	str	r1, [r5, #0]
   2aac4:	f7ff ff14 	bl	2a8f0 <nvs_flash_rd>
	if (rc) {
   2aac8:	b9e8      	cbnz	r0, 2ab06 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2aaca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2aacc:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2aace:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2aad0:	f813 1b01 	ldrb.w	r1, [r3], #1
   2aad4:	428a      	cmp	r2, r1
   2aad6:	d10c      	bne.n	2aaf2 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2aad8:	3001      	adds	r0, #1
   2aada:	2808      	cmp	r0, #8
   2aadc:	d1f8      	bne.n	2aad0 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2aade:	6863      	ldr	r3, [r4, #4]
   2aae0:	e005      	b.n	2aaee <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2aae2:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2aae4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2aae8:	0c1b      	lsrs	r3, r3, #16
   2aaea:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2aaec:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2aaee:	602b      	str	r3, [r5, #0]
		return 0;
   2aaf0:	e00a      	b.n	2ab08 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2aaf2:	4669      	mov	r1, sp
   2aaf4:	4620      	mov	r0, r4
   2aaf6:	f7ff ffa2 	bl	2aa3e <nvs_close_ate_valid>
   2aafa:	2800      	cmp	r0, #0
   2aafc:	d1f1      	bne.n	2aae2 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2aafe:	4629      	mov	r1, r5
   2ab00:	4620      	mov	r0, r4
   2ab02:	f7e4 ff31 	bl	f968 <nvs_recover_last_ate>
   2ab06:	4606      	mov	r6, r0
}
   2ab08:	4630      	mov	r0, r6
   2ab0a:	b003      	add	sp, #12
   2ab0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ab0e <nvs_flash_al_wrt>:
{
   2ab0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ab12:	4607      	mov	r7, r0
   2ab14:	4690      	mov	r8, r2
	if (!len) {
   2ab16:	461e      	mov	r6, r3
{
   2ab18:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   2ab1a:	b91b      	cbnz	r3, 2ab24 <nvs_flash_al_wrt+0x16>
		return 0;
   2ab1c:	2000      	movs	r0, #0
}
   2ab1e:	b009      	add	sp, #36	; 0x24
   2ab20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2ab24:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ab26:	8983      	ldrh	r3, [r0, #12]
   2ab28:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2ab2a:	fa14 f181 	uxtah	r1, r4, r1
   2ab2e:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ab34:	681d      	ldr	r5, [r3, #0]
   2ab36:	426d      	negs	r5, r5
	if (blen > 0) {
   2ab38:	4035      	ands	r5, r6
   2ab3a:	d00c      	beq.n	2ab56 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2ab3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2ab3e:	6883      	ldr	r3, [r0, #8]
   2ab40:	4621      	mov	r1, r4
   2ab42:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2ab46:	462b      	mov	r3, r5
   2ab48:	47c8      	blx	r9
		if (rc) {
   2ab4a:	2800      	cmp	r0, #0
   2ab4c:	d1e7      	bne.n	2ab1e <nvs_flash_al_wrt+0x10>
	if (len) {
   2ab4e:	1b76      	subs	r6, r6, r5
   2ab50:	d0e4      	beq.n	2ab1c <nvs_flash_al_wrt+0xe>
		offset += blen;
   2ab52:	442c      	add	r4, r5
		data8 += blen;
   2ab54:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2ab56:	2320      	movs	r3, #32
   2ab58:	4632      	mov	r2, r6
   2ab5a:	4641      	mov	r1, r8
   2ab5c:	4668      	mov	r0, sp
   2ab5e:	f006 fde3 	bl	31728 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2ab62:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   2ab64:	eb0d 0006 	add.w	r0, sp, r6
   2ab68:	682a      	ldr	r2, [r5, #0]
   2ab6a:	7929      	ldrb	r1, [r5, #4]
   2ab6c:	1b92      	subs	r2, r2, r6
   2ab6e:	f006 fe08 	bl	31782 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2ab72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2ab74:	682b      	ldr	r3, [r5, #0]
   2ab76:	6882      	ldr	r2, [r0, #8]
   2ab78:	4621      	mov	r1, r4
   2ab7a:	6855      	ldr	r5, [r2, #4]
   2ab7c:	466a      	mov	r2, sp
   2ab7e:	47a8      	blx	r5
	return rc;
   2ab80:	e7cd      	b.n	2ab1e <nvs_flash_al_wrt+0x10>

0002ab82 <nvs_flash_ate_wrt>:
{
   2ab82:	b510      	push	{r4, lr}
   2ab84:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ab86:	2308      	movs	r3, #8
   2ab88:	6841      	ldr	r1, [r0, #4]
{
   2ab8a:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ab8c:	f7ff ffbf 	bl	2ab0e <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab90:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ab92:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ab96:	f7ff ff2e 	bl	2a9f6 <nvs_al_size.isra.0>
   2ab9a:	6863      	ldr	r3, [r4, #4]
   2ab9c:	1a1b      	subs	r3, r3, r0
   2ab9e:	6063      	str	r3, [r4, #4]
}
   2aba0:	4610      	mov	r0, r2
   2aba2:	bd10      	pop	{r4, pc}

0002aba4 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2aba4:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2aba6:	2400      	movs	r4, #0
   2aba8:	9400      	str	r4, [sp, #0]
   2abaa:	f7e5 fae5 	bl	10178 <nvs_read_hist>
	return rc;
}
   2abae:	b002      	add	sp, #8
   2abb0:	bd10      	pop	{r4, pc}

0002abb2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2abb2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2abb4:	ab0b      	add	r3, sp, #44	; 0x2c
   2abb6:	9305      	str	r3, [sp, #20]
   2abb8:	9303      	str	r3, [sp, #12]
   2abba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2abbc:	2201      	movs	r2, #1
   2abbe:	9302      	str	r3, [sp, #8]
   2abc0:	2300      	movs	r3, #0
   2abc2:	4618      	mov	r0, r3
   2abc4:	e9cd 3300 	strd	r3, r3, [sp]
   2abc8:	f7e4 fc30 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2abcc:	b007      	add	sp, #28
   2abce:	f85d fb04 	ldr.w	pc, [sp], #4

0002abd2 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2abd2:	6903      	ldr	r3, [r0, #16]
}
   2abd4:	f8d3 0390 	ldr.w	r0, [r3, #912]	; 0x390
   2abd8:	4770      	bx	lr

0002abda <drop_tx_buffer>:
}
   2abda:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2abde:	4770      	bx	lr

0002abe0 <release_rx_buffer>:
{
   2abe0:	4608      	mov	r0, r1
   2abe2:	b508      	push	{r3, lr}
   2abe4:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2abe6:	b118      	cbz	r0, 2abf0 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   2abe8:	f005 fd2d 	bl	30646 <rpmsg_release_rx_buffer>
	return 0;
   2abec:	2000      	movs	r0, #0
}
   2abee:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2abf0:	f06f 0001 	mvn.w	r0, #1
   2abf4:	e7fb      	b.n	2abee <release_rx_buffer+0xe>

0002abf6 <hold_rx_buffer>:
{
   2abf6:	4608      	mov	r0, r1
   2abf8:	b508      	push	{r3, lr}
   2abfa:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2abfc:	b118      	cbz	r0, 2ac06 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   2abfe:	f005 fd1a 	bl	30636 <rpmsg_hold_rx_buffer>
	return 0;
   2ac02:	2000      	movs	r0, #0
}
   2ac04:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2ac06:	f06f 0001 	mvn.w	r0, #1
   2ac0a:	e7fb      	b.n	2ac04 <hold_rx_buffer+0xe>

0002ac0c <send_nocopy>:
{
   2ac0c:	b513      	push	{r0, r1, r4, lr}
   2ac0e:	4604      	mov	r4, r0
   2ac10:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ac12:	6921      	ldr	r1, [r4, #16]
   2ac14:	f501 7163 	add.w	r1, r1, #908	; 0x38c
   2ac18:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   2ac1c:	2902      	cmp	r1, #2
   2ac1e:	d109      	bne.n	2ac34 <send_nocopy+0x28>
	if (len == 0) {
   2ac20:	b15b      	cbz	r3, 2ac3a <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   2ac22:	b168      	cbz	r0, 2ac40 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2ac24:	9300      	str	r3, [sp, #0]
   2ac26:	4613      	mov	r3, r2
   2ac28:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2ac2c:	f7fa f882 	bl	24d34 <rpmsg_send_offchannel_nocopy>
}
   2ac30:	b002      	add	sp, #8
   2ac32:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2ac34:	f06f 000f 	mvn.w	r0, #15
   2ac38:	e7fa      	b.n	2ac30 <send_nocopy+0x24>
		return -EBADMSG;
   2ac3a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   2ac3e:	e7f7      	b.n	2ac30 <send_nocopy+0x24>
		return -ENOENT;
   2ac40:	f06f 0001 	mvn.w	r0, #1
   2ac44:	e7f4      	b.n	2ac30 <send_nocopy+0x24>

0002ac46 <get_tx_buffer>:
{
   2ac46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ac4a:	461c      	mov	r4, r3
   2ac4c:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   2ac50:	4616      	mov	r6, r2
   2ac52:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2ac54:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2ac56:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2ac58:	b339      	cbz	r1, 2acaa <get_tx_buffer+0x64>
	if (!r_data || !size) {
   2ac5a:	b34a      	cbz	r2, 2acb0 <get_tx_buffer+0x6a>
   2ac5c:	b344      	cbz	r4, 2acb0 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   2ac5e:	1c6a      	adds	r2, r5, #1
   2ac60:	f143 0300 	adc.w	r3, r3, #0
   2ac64:	2a02      	cmp	r2, #2
   2ac66:	f173 0300 	sbcs.w	r3, r3, #0
   2ac6a:	d224      	bcs.n	2acb6 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   2ac6c:	6822      	ldr	r2, [r4, #0]
   2ac6e:	b142      	cbz	r2, 2ac82 <get_tx_buffer+0x3c>
   2ac70:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
   2ac74:	429a      	cmp	r2, r3
   2ac76:	d904      	bls.n	2ac82 <get_tx_buffer+0x3c>
		return -ENOMEM;
   2ac78:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   2ac7c:	6023      	str	r3, [r4, #0]
}
   2ac7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2ac82:	ea05 0908 	and.w	r9, r5, r8
   2ac86:	f109 0301 	add.w	r3, r9, #1
   2ac8a:	425a      	negs	r2, r3
   2ac8c:	415a      	adcs	r2, r3
   2ac8e:	4621      	mov	r1, r4
   2ac90:	4638      	mov	r0, r7
   2ac92:	f005 fce1 	bl	30658 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2ac96:	b988      	cbnz	r0, 2acbc <get_tx_buffer+0x76>
   2ac98:	f1b8 3fff 	cmp.w	r8, #4294967295
   2ac9c:	bf08      	it	eq
   2ac9e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2aca2:	d0f0      	beq.n	2ac86 <get_tx_buffer+0x40>
		return -ENOBUFS;
   2aca4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2aca8:	e7e9      	b.n	2ac7e <get_tx_buffer+0x38>
		return -ENOENT;
   2acaa:	f06f 0001 	mvn.w	r0, #1
   2acae:	e7e6      	b.n	2ac7e <get_tx_buffer+0x38>
		return -EINVAL;
   2acb0:	f06f 0015 	mvn.w	r0, #21
   2acb4:	e7e3      	b.n	2ac7e <get_tx_buffer+0x38>
		return -ENOTSUP;
   2acb6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2acba:	e7e0      	b.n	2ac7e <get_tx_buffer+0x38>
	(*r_data) = payload;
   2acbc:	6030      	str	r0, [r6, #0]
	return 0;
   2acbe:	2000      	movs	r0, #0
   2acc0:	e7dd      	b.n	2ac7e <get_tx_buffer+0x38>

0002acc2 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2acc2:	f005 bd0e 	b.w	306e2 <rpmsg_destroy_ept>

0002acc6 <get_ept_slot_with_name>:
{
   2acc6:	b538      	push	{r3, r4, r5, lr}
   2acc8:	460d      	mov	r5, r1
   2acca:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   2accc:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2acd0:	4628      	mov	r0, r5
   2acd2:	f7de fb90 	bl	93f6 <strcmp>
   2acd6:	b130      	cbz	r0, 2ace6 <get_ept_slot_with_name+0x20>
   2acd8:	4628      	mov	r0, r5
   2acda:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2acde:	f7de fb8a 	bl	93f6 <strcmp>
   2ace2:	b920      	cbnz	r0, 2acee <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2ace4:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   2ace6:	2370      	movs	r3, #112	; 0x70
   2ace8:	fb03 4000 	mla	r0, r3, r0, r4
}
   2acec:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   2acee:	2000      	movs	r0, #0
   2acf0:	e7fc      	b.n	2acec <get_ept_slot_with_name+0x26>

0002acf2 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2acf2:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   2acf6:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   2acfa:	f006 b968 	b.w	30fce <k_work_submit_to_queue>

0002acfe <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2acfe:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
	virtqueue_notification(data->vr.vq[vq_id]);
   2ad02:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2ad06:	3b00      	subs	r3, #0
   2ad08:	bf18      	it	ne
   2ad0a:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   2ad0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2ad10:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2ad14:	f005 bc41 	b.w	3059a <virtqueue_notification>

0002ad18 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   2ad18:	68cb      	ldr	r3, [r1, #12]
   2ad1a:	b133      	cbz	r3, 2ad2a <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   2ad1c:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   2ad1e:	6883      	ldr	r3, [r0, #8]
   2ad20:	681b      	ldr	r3, [r3, #0]
   2ad22:	b113      	cbz	r3, 2ad2a <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2ad24:	2200      	movs	r2, #0
   2ad26:	6909      	ldr	r1, [r1, #16]
   2ad28:	4718      	bx	r3
}
   2ad2a:	4770      	bx	lr

0002ad2c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2ad2c:	f7fa bde8 	b.w	25900 <z_impl_k_mutex_unlock>

0002ad30 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ad30:	e8d0 3fef 	ldaex	r3, [r0]
   2ad34:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2ad38:	2a00      	cmp	r2, #0
   2ad3a:	d1f9      	bne.n	2ad30 <atomic_set.isra.0>
}
   2ad3c:	4770      	bx	lr

0002ad3e <backend_init>:
{
   2ad3e:	b510      	push	{r4, lr}
	data->role = conf->role;
   2ad40:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2ad42:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2ad44:	681b      	ldr	r3, [r3, #0]
   2ad46:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
	return z_impl_k_mutex_init(mutex);
   2ad4a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   2ad4e:	f005 fff4 	bl	30d3a <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2ad52:	2100      	movs	r1, #0
   2ad54:	f504 7063 	add.w	r0, r4, #908	; 0x38c
   2ad58:	f7ff ffea 	bl	2ad30 <atomic_set.isra.0>
}
   2ad5c:	4608      	mov	r0, r1
   2ad5e:	bd10      	pop	{r4, pc}

0002ad60 <ns_bind_cb>:
{
   2ad60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ad64:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2ad66:	460d      	mov	r5, r1
   2ad68:	b379      	cbz	r1, 2adca <ns_bind_cb+0x6a>
   2ad6a:	780b      	ldrb	r3, [r1, #0]
   2ad6c:	b36b      	cbz	r3, 2adca <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   2ad6e:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   2ad72:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2ad76:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2ad78:	f04f 32ff 	mov.w	r2, #4294967295
   2ad7c:	f04f 33ff 	mov.w	r3, #4294967295
   2ad80:	4620      	mov	r0, r4
   2ad82:	f7fa fd43 	bl	2580c <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2ad86:	462a      	mov	r2, r5
   2ad88:	4640      	mov	r0, r8
   2ad8a:	a901      	add	r1, sp, #4
   2ad8c:	f7e5 fb28 	bl	103e0 <get_ept>
	if (rpmsg_ept == NULL) {
   2ad90:	9e01      	ldr	r6, [sp, #4]
   2ad92:	b92e      	cbnz	r6, 2ada0 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2ad94:	4620      	mov	r0, r4
}
   2ad96:	b002      	add	sp, #8
   2ad98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   2ad9c:	f7ff bfc6 	b.w	2ad2c <k_mutex_unlock.isra.0>
	if (ept_cached) {
   2ada0:	b158      	cbz	r0, 2adba <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2ada2:	4620      	mov	r0, r4
   2ada4:	f7ff ffc2 	bl	2ad2c <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2ada8:	463b      	mov	r3, r7
   2adaa:	462a      	mov	r2, r5
   2adac:	4631      	mov	r1, r6
   2adae:	4640      	mov	r0, r8
}
   2adb0:	b002      	add	sp, #8
   2adb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2adb6:	f7e5 baf1 	b.w	1039c <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2adba:	2220      	movs	r2, #32
   2adbc:	4629      	mov	r1, r5
   2adbe:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2adc2:	f006 fe47 	bl	31a54 <strncpy>
		rpmsg_ept->dest = dest;
   2adc6:	6637      	str	r7, [r6, #96]	; 0x60
   2adc8:	e7e4      	b.n	2ad94 <ns_bind_cb+0x34>
}
   2adca:	b002      	add	sp, #8
   2adcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002add0 <ept_cb>:
{
   2add0:	b510      	push	{r4, lr}
   2add2:	4608      	mov	r0, r1
   2add4:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   2add6:	4611      	mov	r1, r2
   2add8:	b952      	cbnz	r2, 2adf0 <ept_cb+0x20>
		if (!ept->bound) {
   2adda:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2adde:	b92a      	cbnz	r2, 2adec <ept_cb+0x1c>
			ept->bound = true;
   2ade0:	2201      	movs	r2, #1
			bound_cb(ept);
   2ade2:	4618      	mov	r0, r3
			ept->bound = true;
   2ade4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   2ade8:	f7e5 fc4c 	bl	10684 <bound_cb>
}
   2adec:	2000      	movs	r0, #0
   2adee:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2adf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2adf2:	6854      	ldr	r4, [r2, #4]
   2adf4:	2c00      	cmp	r4, #0
   2adf6:	d0f9      	beq.n	2adec <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   2adf8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2adfa:	47a0      	blx	r4
   2adfc:	e7f6      	b.n	2adec <ept_cb+0x1c>

0002adfe <deregister_ept>:
{
   2adfe:	b510      	push	{r4, lr}
   2ae00:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ae02:	6903      	ldr	r3, [r0, #16]
   2ae04:	f503 7363 	add.w	r3, r3, #908	; 0x38c
   2ae08:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   2ae0c:	2b02      	cmp	r3, #2
   2ae0e:	d10a      	bne.n	2ae26 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2ae10:	b161      	cbz	r1, 2ae2c <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2ae12:	4608      	mov	r0, r1
   2ae14:	f005 fc65 	bl	306e2 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   2ae18:	2270      	movs	r2, #112	; 0x70
   2ae1a:	2100      	movs	r1, #0
   2ae1c:	4620      	mov	r0, r4
   2ae1e:	f006 fcb0 	bl	31782 <memset>
	return 0;
   2ae22:	2000      	movs	r0, #0
}
   2ae24:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2ae26:	f06f 000f 	mvn.w	r0, #15
   2ae2a:	e7fb      	b.n	2ae24 <deregister_ept+0x26>
		return -ENOENT;
   2ae2c:	f06f 0001 	mvn.w	r0, #1
   2ae30:	e7f8      	b.n	2ae24 <deregister_ept+0x26>

0002ae32 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2ae32:	f005 bc56 	b.w	306e2 <rpmsg_destroy_ept>

0002ae36 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2ae36:	b538      	push	{r3, r4, r5, lr}
   2ae38:	460d      	mov	r5, r1
	if (!instance) {
   2ae3a:	4604      	mov	r4, r0
   2ae3c:	b160      	cbz	r0, 2ae58 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   2ae3e:	30e0      	adds	r0, #224	; 0xe0
   2ae40:	f005 fe7b 	bl	30b3a <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2ae44:	b10d      	cbz	r5, 2ae4a <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2ae46:	2000      	movs	r0, #0
}
   2ae48:	bd38      	pop	{r3, r4, r5, pc}
   2ae4a:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   2ae4e:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   2ae52:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2ae56:	e7f6      	b.n	2ae46 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2ae58:	f06f 0015 	mvn.w	r0, #21
   2ae5c:	e7f4      	b.n	2ae48 <ipc_rpmsg_deinit+0x12>

0002ae5e <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   2ae5e:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   2ae60:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2ae64:	b113      	cbz	r3, 2ae6c <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2ae66:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2ae6a:	4718      	bx	r3
}
   2ae6c:	4770      	bx	lr

0002ae6e <virtio_set_features>:
}
   2ae6e:	4770      	bx	lr

0002ae70 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   2ae70:	6983      	ldr	r3, [r0, #24]
   2ae72:	b913      	cbnz	r3, 2ae7a <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2ae74:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2ae78:	7019      	strb	r1, [r3, #0]
}
   2ae7a:	4770      	bx	lr

0002ae7c <virtio_get_features>:
}
   2ae7c:	2001      	movs	r0, #1
   2ae7e:	4770      	bx	lr

0002ae80 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2ae80:	6983      	ldr	r3, [r0, #24]
   2ae82:	2b01      	cmp	r3, #1
   2ae84:	d104      	bne.n	2ae90 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2ae86:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2ae8a:	7818      	ldrb	r0, [r3, #0]
   2ae8c:	b2c0      	uxtb	r0, r0
   2ae8e:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2ae90:	2004      	movs	r0, #4
}
   2ae92:	4770      	bx	lr

0002ae94 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2ae94:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2ae96:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   2ae98:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   2ae9a:	4620      	mov	r0, r4
   2ae9c:	f006 fc1b 	bl	316d6 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2aea0:	4605      	mov	r5, r0
   2aea2:	b118      	cbz	r0, 2aeac <virtqueue_allocate+0x18>
   2aea4:	4622      	mov	r2, r4
   2aea6:	2100      	movs	r1, #0
   2aea8:	f006 fc6b 	bl	31782 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   2aeac:	4628      	mov	r0, r5
   2aeae:	bd38      	pop	{r3, r4, r5, pc}

0002aeb0 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2aeb0:	b538      	push	{r3, r4, r5, lr}
   2aeb2:	4604      	mov	r4, r0
   2aeb4:	2230      	movs	r2, #48	; 0x30
   2aeb6:	2100      	movs	r1, #0
   2aeb8:	f006 fc63 	bl	31782 <memset>
   2aebc:	2218      	movs	r2, #24
   2aebe:	2100      	movs	r1, #0
   2aec0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2aec4:	f006 fc5d 	bl	31782 <memset>
   2aec8:	2218      	movs	r2, #24
   2aeca:	2100      	movs	r1, #0
   2aecc:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2aed0:	f006 fc57 	bl	31782 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2aed4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2aed8:	f7f9 fede 	bl	24c98 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   2aedc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2aee0:	f7f9 feda 	bl	24c98 <virtqueue_free>
	vr->shm_io = 0;
   2aee4:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   2aee6:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   2aeea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2aeee:	f005 f8d5 	bl	3009c <metal_device_close>
	metal_finish();
   2aef2:	f7f9 fe49 	bl	24b88 <metal_finish>
	if (io->ops.close)
   2aef6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   2aef8:	f104 0540 	add.w	r5, r4, #64	; 0x40
   2aefc:	b10b      	cbz	r3, 2af02 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   2aefe:	4628      	mov	r0, r5
   2af00:	4798      	blx	r3
   2af02:	2238      	movs	r2, #56	; 0x38
   2af04:	2100      	movs	r1, #0
   2af06:	4628      	mov	r0, r5
   2af08:	f006 fc3b 	bl	31782 <memset>

	return 0;
}
   2af0c:	2000      	movs	r0, #0
   2af0e:	bd38      	pop	{r3, r4, r5, pc}

0002af10 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2af10:	b538      	push	{r3, r4, r5, lr}
   2af12:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2af14:	42ab      	cmp	r3, r5
{
   2af16:	4611      	mov	r1, r2
   2af18:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2af1a:	d804      	bhi.n	2af26 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2af1c:	461a      	mov	r2, r3
   2af1e:	f006 fbf6 	bl	3170e <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2af22:	4620      	mov	r0, r4
   2af24:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2af26:	2400      	movs	r4, #0
   2af28:	e7fb      	b.n	2af22 <_copy+0x12>

0002af2a <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2af2a:	f006 bc2a 	b.w	31782 <memset>

0002af2e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2af2e:	09c3      	lsrs	r3, r0, #7
   2af30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2af34:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2af38:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2af3c:	b2c0      	uxtb	r0, r0
   2af3e:	4770      	bx	lr

0002af40 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2af40:	78cb      	ldrb	r3, [r1, #3]
   2af42:	7802      	ldrb	r2, [r0, #0]
   2af44:	4053      	eors	r3, r2
   2af46:	7003      	strb	r3, [r0, #0]
   2af48:	884b      	ldrh	r3, [r1, #2]
   2af4a:	7842      	ldrb	r2, [r0, #1]
   2af4c:	4053      	eors	r3, r2
   2af4e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2af50:	680a      	ldr	r2, [r1, #0]
   2af52:	7883      	ldrb	r3, [r0, #2]
   2af54:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2af58:	7083      	strb	r3, [r0, #2]
   2af5a:	680a      	ldr	r2, [r1, #0]
   2af5c:	78c3      	ldrb	r3, [r0, #3]
   2af5e:	4053      	eors	r3, r2
   2af60:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2af62:	79cb      	ldrb	r3, [r1, #7]
   2af64:	7902      	ldrb	r2, [r0, #4]
   2af66:	4053      	eors	r3, r2
   2af68:	7103      	strb	r3, [r0, #4]
   2af6a:	88cb      	ldrh	r3, [r1, #6]
   2af6c:	7942      	ldrb	r2, [r0, #5]
   2af6e:	4053      	eors	r3, r2
   2af70:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2af72:	684a      	ldr	r2, [r1, #4]
   2af74:	7983      	ldrb	r3, [r0, #6]
   2af76:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2af7a:	7183      	strb	r3, [r0, #6]
   2af7c:	684a      	ldr	r2, [r1, #4]
   2af7e:	79c3      	ldrb	r3, [r0, #7]
   2af80:	4053      	eors	r3, r2
   2af82:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2af84:	7acb      	ldrb	r3, [r1, #11]
   2af86:	7a02      	ldrb	r2, [r0, #8]
   2af88:	4053      	eors	r3, r2
   2af8a:	7203      	strb	r3, [r0, #8]
   2af8c:	7a42      	ldrb	r2, [r0, #9]
   2af8e:	894b      	ldrh	r3, [r1, #10]
   2af90:	4053      	eors	r3, r2
   2af92:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2af94:	688a      	ldr	r2, [r1, #8]
   2af96:	7a83      	ldrb	r3, [r0, #10]
   2af98:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2af9c:	7283      	strb	r3, [r0, #10]
   2af9e:	688a      	ldr	r2, [r1, #8]
   2afa0:	7ac3      	ldrb	r3, [r0, #11]
   2afa2:	4053      	eors	r3, r2
   2afa4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2afa6:	7bcb      	ldrb	r3, [r1, #15]
   2afa8:	7b02      	ldrb	r2, [r0, #12]
   2afaa:	4053      	eors	r3, r2
   2afac:	7303      	strb	r3, [r0, #12]
   2afae:	89cb      	ldrh	r3, [r1, #14]
   2afb0:	7b42      	ldrb	r2, [r0, #13]
   2afb2:	4053      	eors	r3, r2
   2afb4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2afb6:	68ca      	ldr	r2, [r1, #12]
   2afb8:	7b83      	ldrb	r3, [r0, #14]
   2afba:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2afbe:	7383      	strb	r3, [r0, #14]
   2afc0:	68ca      	ldr	r2, [r1, #12]
   2afc2:	7bc3      	ldrb	r3, [r0, #15]
   2afc4:	4053      	eors	r3, r2
   2afc6:	73c3      	strb	r3, [r0, #15]
}
   2afc8:	4770      	bx	lr

0002afca <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2afca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2afcc:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2afce:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2afd0:	f88d 2000 	strb.w	r2, [sp]
   2afd4:	7942      	ldrb	r2, [r0, #5]
   2afd6:	f88d 2001 	strb.w	r2, [sp, #1]
   2afda:	7a82      	ldrb	r2, [r0, #10]
   2afdc:	f88d 2002 	strb.w	r2, [sp, #2]
   2afe0:	7bc2      	ldrb	r2, [r0, #15]
   2afe2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2afe6:	7902      	ldrb	r2, [r0, #4]
   2afe8:	f88d 2004 	strb.w	r2, [sp, #4]
   2afec:	7a42      	ldrb	r2, [r0, #9]
   2afee:	f88d 2005 	strb.w	r2, [sp, #5]
   2aff2:	7b82      	ldrb	r2, [r0, #14]
   2aff4:	f88d 2006 	strb.w	r2, [sp, #6]
   2aff8:	78c2      	ldrb	r2, [r0, #3]
   2affa:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2affe:	7a02      	ldrb	r2, [r0, #8]
   2b000:	f88d 2008 	strb.w	r2, [sp, #8]
   2b004:	7b42      	ldrb	r2, [r0, #13]
   2b006:	f88d 2009 	strb.w	r2, [sp, #9]
   2b00a:	7882      	ldrb	r2, [r0, #2]
   2b00c:	f88d 200a 	strb.w	r2, [sp, #10]
   2b010:	79c2      	ldrb	r2, [r0, #7]
   2b012:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b016:	7b02      	ldrb	r2, [r0, #12]
   2b018:	f88d 200c 	strb.w	r2, [sp, #12]
   2b01c:	7842      	ldrb	r2, [r0, #1]
   2b01e:	f88d 200d 	strb.w	r2, [sp, #13]
   2b022:	7982      	ldrb	r2, [r0, #6]
   2b024:	f88d 200e 	strb.w	r2, [sp, #14]
   2b028:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b02c:	2310      	movs	r3, #16
   2b02e:	466a      	mov	r2, sp
   2b030:	4619      	mov	r1, r3
   2b032:	f7ff ff6d 	bl	2af10 <_copy>
}
   2b036:	b005      	add	sp, #20
   2b038:	f85d fb04 	ldr.w	pc, [sp], #4

0002b03c <mult_row_column>:
{
   2b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b03e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b040:	7808      	ldrb	r0, [r1, #0]
{
   2b042:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b044:	f7ff ff73 	bl	2af2e <_double_byte>
   2b048:	4605      	mov	r5, r0
   2b04a:	7860      	ldrb	r0, [r4, #1]
   2b04c:	f7ff ff6f 	bl	2af2e <_double_byte>
   2b050:	78a2      	ldrb	r2, [r4, #2]
   2b052:	7863      	ldrb	r3, [r4, #1]
   2b054:	4053      	eors	r3, r2
   2b056:	78e2      	ldrb	r2, [r4, #3]
   2b058:	4053      	eors	r3, r2
   2b05a:	405d      	eors	r5, r3
   2b05c:	4068      	eors	r0, r5
   2b05e:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b060:	7860      	ldrb	r0, [r4, #1]
   2b062:	7827      	ldrb	r7, [r4, #0]
   2b064:	f7ff ff63 	bl	2af2e <_double_byte>
   2b068:	4605      	mov	r5, r0
   2b06a:	78a0      	ldrb	r0, [r4, #2]
   2b06c:	f7ff ff5f 	bl	2af2e <_double_byte>
   2b070:	78a3      	ldrb	r3, [r4, #2]
   2b072:	405f      	eors	r7, r3
   2b074:	78e3      	ldrb	r3, [r4, #3]
   2b076:	405f      	eors	r7, r3
   2b078:	407d      	eors	r5, r7
   2b07a:	4068      	eors	r0, r5
   2b07c:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b07e:	7863      	ldrb	r3, [r4, #1]
   2b080:	7827      	ldrb	r7, [r4, #0]
   2b082:	78a0      	ldrb	r0, [r4, #2]
   2b084:	405f      	eors	r7, r3
   2b086:	f7ff ff52 	bl	2af2e <_double_byte>
   2b08a:	4605      	mov	r5, r0
   2b08c:	78e0      	ldrb	r0, [r4, #3]
   2b08e:	f7ff ff4e 	bl	2af2e <_double_byte>
   2b092:	78e3      	ldrb	r3, [r4, #3]
   2b094:	405f      	eors	r7, r3
   2b096:	407d      	eors	r5, r7
   2b098:	4068      	eors	r0, r5
   2b09a:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b09c:	7820      	ldrb	r0, [r4, #0]
   2b09e:	f7ff ff46 	bl	2af2e <_double_byte>
   2b0a2:	7862      	ldrb	r2, [r4, #1]
   2b0a4:	7823      	ldrb	r3, [r4, #0]
   2b0a6:	4053      	eors	r3, r2
   2b0a8:	78a2      	ldrb	r2, [r4, #2]
   2b0aa:	4053      	eors	r3, r2
   2b0ac:	ea80 0503 	eor.w	r5, r0, r3
   2b0b0:	78e0      	ldrb	r0, [r4, #3]
   2b0b2:	f7ff ff3c 	bl	2af2e <_double_byte>
   2b0b6:	b2ed      	uxtb	r5, r5
   2b0b8:	4045      	eors	r5, r0
   2b0ba:	70f5      	strb	r5, [r6, #3]
}
   2b0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b0be <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b0be:	b570      	push	{r4, r5, r6, lr}
   2b0c0:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b0c2:	4605      	mov	r5, r0
{
   2b0c4:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2b0c6:	2800      	cmp	r0, #0
   2b0c8:	d049      	beq.n	2b15e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b0ca:	2900      	cmp	r1, #0
   2b0cc:	d049      	beq.n	2b162 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b0ce:	2a00      	cmp	r2, #0
   2b0d0:	d049      	beq.n	2b166 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b0d2:	2310      	movs	r3, #16
   2b0d4:	460a      	mov	r2, r1
   2b0d6:	4668      	mov	r0, sp
   2b0d8:	4619      	mov	r1, r3
   2b0da:	f7ff ff19 	bl	2af10 <_copy>
	add_round_key(state, s->words);
   2b0de:	4621      	mov	r1, r4
   2b0e0:	4668      	mov	r0, sp
   2b0e2:	f7ff ff2d 	bl	2af40 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b0e6:	3410      	adds	r4, #16
   2b0e8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b0ec:	4668      	mov	r0, sp
   2b0ee:	f7e5 fe03 	bl	10cf8 <sub_bytes>
		shift_rows(state);
   2b0f2:	4668      	mov	r0, sp
   2b0f4:	f7ff ff69 	bl	2afca <shift_rows>
	mult_row_column(t, s);
   2b0f8:	4669      	mov	r1, sp
   2b0fa:	a804      	add	r0, sp, #16
   2b0fc:	f7ff ff9e 	bl	2b03c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b100:	a901      	add	r1, sp, #4
   2b102:	a805      	add	r0, sp, #20
   2b104:	f7ff ff9a 	bl	2b03c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b108:	a902      	add	r1, sp, #8
   2b10a:	a806      	add	r0, sp, #24
   2b10c:	f7ff ff96 	bl	2b03c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b110:	a903      	add	r1, sp, #12
   2b112:	a807      	add	r0, sp, #28
   2b114:	f7ff ff92 	bl	2b03c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b118:	2310      	movs	r3, #16
   2b11a:	4668      	mov	r0, sp
   2b11c:	4619      	mov	r1, r3
   2b11e:	eb0d 0203 	add.w	r2, sp, r3
   2b122:	f7ff fef5 	bl	2af10 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b126:	4621      	mov	r1, r4
   2b128:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b12a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b12c:	f7ff ff08 	bl	2af40 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b130:	42b4      	cmp	r4, r6
   2b132:	d1db      	bne.n	2b0ec <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b134:	f7e5 fde0 	bl	10cf8 <sub_bytes>
	shift_rows(state);
   2b138:	4668      	mov	r0, sp
   2b13a:	f7ff ff46 	bl	2afca <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b13e:	4621      	mov	r1, r4
   2b140:	4668      	mov	r0, sp
   2b142:	f7ff fefd 	bl	2af40 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b146:	2310      	movs	r3, #16
   2b148:	466a      	mov	r2, sp
   2b14a:	4619      	mov	r1, r3
   2b14c:	4628      	mov	r0, r5
   2b14e:	f7ff fedf 	bl	2af10 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b152:	4668      	mov	r0, sp
   2b154:	2210      	movs	r2, #16
   2b156:	2100      	movs	r1, #0
   2b158:	f7ff fee7 	bl	2af2a <_set>

	return TC_CRYPTO_SUCCESS;
   2b15c:	2001      	movs	r0, #1
}
   2b15e:	b008      	add	sp, #32
   2b160:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b162:	4608      	mov	r0, r1
   2b164:	e7fb      	b.n	2b15e <tc_aes_encrypt+0xa0>
   2b166:	4610      	mov	r0, r2
   2b168:	e7f9      	b.n	2b15e <tc_aes_encrypt+0xa0>

0002b16a <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b16a:	460a      	mov	r2, r1
{
   2b16c:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b16e:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2b172:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b174:	2b00      	cmp	r3, #0
   2b176:	bfac      	ite	ge
   2b178:	2300      	movge	r3, #0
   2b17a:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b17c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b180:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b184:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b186:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b18a:	d002      	beq.n	2b192 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b18c:	7813      	ldrb	r3, [r2, #0]
   2b18e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b190:	e7f4      	b.n	2b17c <gf_double+0x12>
	}
}
   2b192:	bd10      	pop	{r4, pc}

0002b194 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b194:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b196:	b120      	cbz	r0, 2b1a2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b198:	2258      	movs	r2, #88	; 0x58
   2b19a:	2100      	movs	r1, #0
   2b19c:	f7ff fec5 	bl	2af2a <_set>
   2b1a0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b1a2:	bd08      	pop	{r3, pc}

0002b1a4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b1a4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b1a6:	4604      	mov	r4, r0
   2b1a8:	b188      	cbz	r0, 2b1ce <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b1aa:	2210      	movs	r2, #16
   2b1ac:	2100      	movs	r1, #0
   2b1ae:	f7ff febc 	bl	2af2a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b1b2:	2210      	movs	r2, #16
   2b1b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b1b8:	2100      	movs	r1, #0
   2b1ba:	f7ff feb6 	bl	2af2a <_set>
	s->leftover_offset = 0;
   2b1be:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b1c0:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2b1c2:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2b1c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b1c8:	2001      	movs	r0, #1
   2b1ca:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2b1ce:	bd10      	pop	{r4, pc}

0002b1d0 <tc_cmac_setup>:
{
   2b1d0:	b570      	push	{r4, r5, r6, lr}
   2b1d2:	4604      	mov	r4, r0
   2b1d4:	460d      	mov	r5, r1
   2b1d6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b1d8:	b310      	cbz	r0, 2b220 <tc_cmac_setup+0x50>
   2b1da:	b311      	cbz	r1, 2b222 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b1dc:	2258      	movs	r2, #88	; 0x58
   2b1de:	2100      	movs	r1, #0
   2b1e0:	f7ff fea3 	bl	2af2a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b1e4:	4629      	mov	r1, r5
   2b1e6:	4630      	mov	r0, r6
	s->sched = sched;
   2b1e8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b1ea:	f7e5 fd91 	bl	10d10 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b1ee:	2210      	movs	r2, #16
   2b1f0:	2100      	movs	r1, #0
   2b1f2:	4620      	mov	r0, r4
   2b1f4:	f7ff fe99 	bl	2af2a <_set>
	gf_double (s->K1, s->iv);
   2b1f8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b1fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b1fe:	4621      	mov	r1, r4
   2b200:	4620      	mov	r0, r4
   2b202:	f7ff ff5c 	bl	2b0be <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b206:	4621      	mov	r1, r4
   2b208:	4628      	mov	r0, r5
   2b20a:	f7ff ffae 	bl	2b16a <gf_double>
	gf_double (s->K2, s->K1);
   2b20e:	4629      	mov	r1, r5
   2b210:	f104 0020 	add.w	r0, r4, #32
   2b214:	f7ff ffa9 	bl	2b16a <gf_double>
	tc_cmac_init(s);
   2b218:	4620      	mov	r0, r4
   2b21a:	f7ff ffc3 	bl	2b1a4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b21e:	2001      	movs	r0, #1
}
   2b220:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b222:	4608      	mov	r0, r1
   2b224:	e7fc      	b.n	2b220 <tc_cmac_setup+0x50>

0002b226 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b22a:	460e      	mov	r6, r1
   2b22c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b22e:	4604      	mov	r4, r0
   2b230:	2800      	cmp	r0, #0
   2b232:	d060      	beq.n	2b2f6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b234:	b1fa      	cbz	r2, 2b276 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b236:	2900      	cmp	r1, #0
   2b238:	d05d      	beq.n	2b2f6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b23a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b23e:	ea53 0102 	orrs.w	r1, r3, r2
   2b242:	d058      	beq.n	2b2f6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b244:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b246:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b24a:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b24e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b252:	f1b8 0f00 	cmp.w	r8, #0
   2b256:	d02c      	beq.n	2b2b2 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b258:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b25c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b260:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b262:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b264:	d20a      	bcs.n	2b27c <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b266:	462b      	mov	r3, r5
   2b268:	4632      	mov	r2, r6
   2b26a:	4629      	mov	r1, r5
   2b26c:	f7ff fe50 	bl	2af10 <_copy>
			s->leftover_offset += data_length;
   2b270:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b272:	442b      	add	r3, r5
   2b274:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b276:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b27c:	463b      	mov	r3, r7
   2b27e:	4632      	mov	r2, r6
   2b280:	4639      	mov	r1, r7
   2b282:	f7ff fe45 	bl	2af10 <_copy>
		s->leftover_offset = 0;
   2b286:	2300      	movs	r3, #0
   2b288:	3d10      	subs	r5, #16
   2b28a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b28c:	4445      	add	r5, r8
		data += remaining_space;
   2b28e:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b290:	1e63      	subs	r3, r4, #1
   2b292:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b296:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b29a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b29e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b2a0:	ea82 0200 	eor.w	r2, r2, r0
   2b2a4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b2a6:	d1f6      	bne.n	2b296 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b2a8:	4621      	mov	r1, r4
   2b2aa:	4620      	mov	r0, r4
   2b2ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b2ae:	f7ff ff06 	bl	2b0be <tc_aes_encrypt>
   2b2b2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b2b6:	2d10      	cmp	r5, #16
   2b2b8:	d80a      	bhi.n	2b2d0 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b2ba:	2d00      	cmp	r5, #0
   2b2bc:	d0db      	beq.n	2b276 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b2be:	462b      	mov	r3, r5
   2b2c0:	4632      	mov	r2, r6
   2b2c2:	4629      	mov	r1, r5
   2b2c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b2c8:	f7ff fe22 	bl	2af10 <_copy>
		s->leftover_offset = data_length;
   2b2cc:	6465      	str	r5, [r4, #68]	; 0x44
   2b2ce:	e7d2      	b.n	2b276 <tc_cmac_update+0x50>
   2b2d0:	1e63      	subs	r3, r4, #1
   2b2d2:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b2d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b2d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b2dc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b2de:	ea82 0200 	eor.w	r2, r2, r0
   2b2e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b2e4:	d1f6      	bne.n	2b2d4 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b2e6:	4621      	mov	r1, r4
   2b2e8:	4620      	mov	r0, r4
   2b2ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b2ec:	f7ff fee7 	bl	2b0be <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b2f0:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b2f2:	3d10      	subs	r5, #16
   2b2f4:	e7df      	b.n	2b2b6 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2b2f6:	2000      	movs	r0, #0
   2b2f8:	e7be      	b.n	2b278 <tc_cmac_update+0x52>

0002b2fa <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2b2fa:	b570      	push	{r4, r5, r6, lr}
   2b2fc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b2fe:	4605      	mov	r5, r0
   2b300:	b1f0      	cbz	r0, 2b340 <tc_cmac_final+0x46>
   2b302:	b371      	cbz	r1, 2b362 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b304:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b306:	2a10      	cmp	r2, #16
   2b308:	d11b      	bne.n	2b342 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b30a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b30c:	1e63      	subs	r3, r4, #1
   2b30e:	3901      	subs	r1, #1
   2b310:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b314:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b318:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b31c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b31e:	ea82 0206 	eor.w	r2, r2, r6
   2b322:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2b326:	ea82 0206 	eor.w	r2, r2, r6
   2b32a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b32c:	d1f2      	bne.n	2b314 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2b32e:	4621      	mov	r1, r4
   2b330:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b332:	4628      	mov	r0, r5
   2b334:	f7ff fec3 	bl	2b0be <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2b338:	4620      	mov	r0, r4
   2b33a:	f7ff ff2b 	bl	2b194 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2b33e:	2001      	movs	r0, #1
}
   2b340:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2b342:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2b346:	2100      	movs	r1, #0
   2b348:	f1c2 0210 	rsb	r2, r2, #16
   2b34c:	4420      	add	r0, r4
   2b34e:	f7ff fdec 	bl	2af2a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b352:	2280      	movs	r2, #128	; 0x80
   2b354:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2b356:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b35a:	4423      	add	r3, r4
   2b35c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2b360:	e7d4      	b.n	2b30c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2b362:	4608      	mov	r0, r1
   2b364:	e7ec      	b.n	2b340 <tc_cmac_final+0x46>

0002b366 <tc_sha256_update>:
{
   2b366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b368:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2b36a:	b110      	cbz	r0, 2b372 <tc_sha256_update+0xc>
   2b36c:	b1f9      	cbz	r1, 2b3ae <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2b36e:	b90a      	cbnz	r2, 2b374 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2b370:	2001      	movs	r0, #1
}
   2b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2b374:	2700      	movs	r7, #0
   2b376:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2b378:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   2b37c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2b37e:	1c5a      	adds	r2, r3, #1
   2b380:	6682      	str	r2, [r0, #104]	; 0x68
   2b382:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b386:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b388:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2b38a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b38e:	d90b      	bls.n	2b3a8 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   2b390:	4631      	mov	r1, r6
   2b392:	f7e5 fd11 	bl	10db8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2b396:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2b39a:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2b39e:	f142 0200 	adc.w	r2, r2, #0
   2b3a2:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2b3a6:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2b3a8:	42a5      	cmp	r5, r4
   2b3aa:	d1e7      	bne.n	2b37c <tc_sha256_update+0x16>
   2b3ac:	e7e0      	b.n	2b370 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2b3ae:	4608      	mov	r0, r1
   2b3b0:	e7df      	b.n	2b372 <tc_sha256_update+0xc>

0002b3b2 <tc_sha256_final>:
{
   2b3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b3b4:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2b3b6:	4605      	mov	r5, r0
   2b3b8:	2800      	cmp	r0, #0
   2b3ba:	d054      	beq.n	2b466 <tc_sha256_final+0xb4>
   2b3bc:	2900      	cmp	r1, #0
   2b3be:	d053      	beq.n	2b468 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2b3c0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2b3c2:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2b3c6:	00d8      	lsls	r0, r3, #3
   2b3c8:	1812      	adds	r2, r2, r0
   2b3ca:	f141 0100 	adc.w	r1, r1, #0
   2b3ce:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b3d2:	2280      	movs	r2, #128	; 0x80
   2b3d4:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b3d6:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b3d8:	4423      	add	r3, r4
   2b3da:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2b3dc:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b3e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2b3e4:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b3e8:	d90a      	bls.n	2b400 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2b3ea:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2b3ee:	4639      	mov	r1, r7
   2b3f0:	4430      	add	r0, r6
   2b3f2:	f7ff fd9a 	bl	2af2a <_set>
		compress(s->iv, s->leftover);
   2b3f6:	4631      	mov	r1, r6
   2b3f8:	4620      	mov	r0, r4
   2b3fa:	f7e5 fcdd 	bl	10db8 <compress>
		s->leftover_offset = 0;
   2b3fe:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2b400:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2b402:	2100      	movs	r1, #0
   2b404:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2b408:	4430      	add	r0, r6
   2b40a:	f7ff fd8e 	bl	2af2a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b40e:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2b410:	4631      	mov	r1, r6
   2b412:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b414:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2b416:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b418:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2b41a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b41e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b422:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2b424:	0e1b      	lsrs	r3, r3, #24
   2b426:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2b42a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b42c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2b430:	f7e5 fcc2 	bl	10db8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b434:	1d2b      	adds	r3, r5, #4
   2b436:	1f21      	subs	r1, r4, #4
   2b438:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2b43a:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b43e:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2b440:	0e10      	lsrs	r0, r2, #24
   2b442:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2b446:	0c10      	lsrs	r0, r2, #16
   2b448:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2b44c:	0a10      	lsrs	r0, r2, #8
   2b44e:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2b452:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b456:	42ab      	cmp	r3, r5
   2b458:	d1ef      	bne.n	2b43a <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2b45a:	4620      	mov	r0, r4
   2b45c:	2270      	movs	r2, #112	; 0x70
   2b45e:	2100      	movs	r1, #0
   2b460:	f7ff fd63 	bl	2af2a <_set>
	return TC_CRYPTO_SUCCESS;
   2b464:	2001      	movs	r0, #1
}
   2b466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b468:	4608      	mov	r0, r1
   2b46a:	e7fc      	b.n	2b466 <tc_sha256_final+0xb4>

0002b46c <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2b46c:	b530      	push	{r4, r5, lr}
   2b46e:	1e43      	subs	r3, r0, #1
   2b470:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2b472:	42a9      	cmp	r1, r5
   2b474:	d106      	bne.n	2b484 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2b476:	2136      	movs	r1, #54	; 0x36
   2b478:	245c      	movs	r4, #92	; 0x5c
   2b47a:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2b47c:	1a13      	subs	r3, r2, r0
   2b47e:	2b3f      	cmp	r3, #63	; 0x3f
   2b480:	d90c      	bls.n	2b49c <rekey+0x30>
	}
}
   2b482:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   2b484:	780c      	ldrb	r4, [r1, #0]
   2b486:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   2b48a:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2b48e:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b492:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   2b496:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2b49a:	e7ea      	b.n	2b472 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2b49c:	f802 1b01 	strb.w	r1, [r2], #1
   2b4a0:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2b4a4:	e7ea      	b.n	2b47c <rekey+0x10>

0002b4a6 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2b4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b4a8:	460e      	mov	r6, r1
   2b4aa:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2b4ac:	4605      	mov	r5, r0
{
   2b4ae:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2b4b0:	b1b8      	cbz	r0, 2b4e2 <tc_hmac_set_key+0x3c>
   2b4b2:	b341      	cbz	r1, 2b506 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2b4b4:	b34a      	cbz	r2, 2b50a <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2b4b6:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2b4b8:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2b4bc:	d813      	bhi.n	2b4e6 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2b4be:	a810      	add	r0, sp, #64	; 0x40
   2b4c0:	f7e5 fd64 	bl	10f8c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2b4c4:	4622      	mov	r2, r4
   2b4c6:	4669      	mov	r1, sp
   2b4c8:	a810      	add	r0, sp, #64	; 0x40
   2b4ca:	f7ff ff4c 	bl	2b366 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2b4ce:	a910      	add	r1, sp, #64	; 0x40
   2b4d0:	a834      	add	r0, sp, #208	; 0xd0
   2b4d2:	f7ff ff6e 	bl	2b3b2 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2b4d6:	4622      	mov	r2, r4
   2b4d8:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2b4da:	4638      	mov	r0, r7
   2b4dc:	f7ff ffc6 	bl	2b46c <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2b4e0:	2001      	movs	r0, #1
}
   2b4e2:	b04d      	add	sp, #308	; 0x134
   2b4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2b4e6:	f7e5 fd51 	bl	10f8c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2b4ea:	4622      	mov	r2, r4
   2b4ec:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2b4ee:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2b4f2:	4628      	mov	r0, r5
   2b4f4:	f7ff ff37 	bl	2b366 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2b4f8:	4629      	mov	r1, r5
   2b4fa:	4620      	mov	r0, r4
   2b4fc:	f7ff ff59 	bl	2b3b2 <tc_sha256_final>
		rekey(ctx->key,
   2b500:	2220      	movs	r2, #32
   2b502:	4621      	mov	r1, r4
   2b504:	e7e9      	b.n	2b4da <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2b506:	4608      	mov	r0, r1
   2b508:	e7eb      	b.n	2b4e2 <tc_hmac_set_key+0x3c>
   2b50a:	4610      	mov	r0, r2
   2b50c:	e7e9      	b.n	2b4e2 <tc_hmac_set_key+0x3c>

0002b50e <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2b50e:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2b510:	4604      	mov	r4, r0
   2b512:	b140      	cbz	r0, 2b526 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2b514:	f7e5 fd3a 	bl	10f8c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2b518:	2240      	movs	r2, #64	; 0x40
   2b51a:	4620      	mov	r0, r4
   2b51c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2b520:	f7ff ff21 	bl	2b366 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2b524:	2001      	movs	r0, #1
}
   2b526:	bd10      	pop	{r4, pc}

0002b528 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2b528:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2b52a:	b110      	cbz	r0, 2b532 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2b52c:	f7ff ff1b 	bl	2b366 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2b530:	2001      	movs	r0, #1
}
   2b532:	bd08      	pop	{r3, pc}

0002b534 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2b534:	b570      	push	{r4, r5, r6, lr}
   2b536:	460e      	mov	r6, r1
   2b538:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b53a:	4605      	mov	r5, r0
   2b53c:	b1f0      	cbz	r0, 2b57c <tc_hmac_final+0x48>
   2b53e:	2920      	cmp	r1, #32
   2b540:	d11c      	bne.n	2b57c <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2b542:	b1ea      	cbz	r2, 2b580 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2b544:	4611      	mov	r1, r2
   2b546:	f7ff ff34 	bl	2b3b2 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2b54a:	4620      	mov	r0, r4
   2b54c:	f7e5 fd1e 	bl	10f8c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2b550:	2240      	movs	r2, #64	; 0x40
   2b552:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2b556:	4620      	mov	r0, r4
   2b558:	f7ff ff05 	bl	2b366 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2b55c:	4632      	mov	r2, r6
   2b55e:	4629      	mov	r1, r5
   2b560:	4620      	mov	r0, r4
   2b562:	f7ff ff00 	bl	2b366 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2b566:	4621      	mov	r1, r4
   2b568:	4628      	mov	r0, r5
   2b56a:	f7ff ff22 	bl	2b3b2 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2b56e:	4620      	mov	r0, r4
   2b570:	22f0      	movs	r2, #240	; 0xf0
   2b572:	2100      	movs	r1, #0
   2b574:	f7ff fcd9 	bl	2af2a <_set>

	return TC_CRYPTO_SUCCESS;
   2b578:	2001      	movs	r0, #1
}
   2b57a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b57c:	2000      	movs	r0, #0
   2b57e:	e7fc      	b.n	2b57a <tc_hmac_final+0x46>
   2b580:	4610      	mov	r0, r2
   2b582:	e7fa      	b.n	2b57a <tc_hmac_final+0x46>

0002b584 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2b584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b588:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2b58a:	f04f 0b01 	mov.w	fp, #1
{
   2b58e:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2b590:	2300      	movs	r3, #0
{
   2b592:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b594:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2b598:	4631      	mov	r1, r6
{
   2b59a:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b59c:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   2b59e:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2b5a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2b5a6:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b5aa:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b5ae:	f7ff ff7a 	bl	2b4a6 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2b5b2:	4620      	mov	r0, r4
   2b5b4:	f7ff ffab 	bl	2b50e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b5b8:	2220      	movs	r2, #32
   2b5ba:	4629      	mov	r1, r5
   2b5bc:	4620      	mov	r0, r4
   2b5be:	f7ff ffb3 	bl	2b528 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2b5c2:	465a      	mov	r2, fp
   2b5c4:	4620      	mov	r0, r4
   2b5c6:	f10d 0106 	add.w	r1, sp, #6
   2b5ca:	f7ff ffad 	bl	2b528 <tc_hmac_update>

	if (data && datalen)
   2b5ce:	f1b8 0f00 	cmp.w	r8, #0
   2b5d2:	d007      	beq.n	2b5e4 <update+0x60>
   2b5d4:	f1b9 0f00 	cmp.w	r9, #0
   2b5d8:	d004      	beq.n	2b5e4 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2b5da:	464a      	mov	r2, r9
   2b5dc:	4641      	mov	r1, r8
   2b5de:	4620      	mov	r0, r4
   2b5e0:	f7ff ffa2 	bl	2b528 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2b5e4:	b13f      	cbz	r7, 2b5f6 <update+0x72>
   2b5e6:	f1ba 0f00 	cmp.w	sl, #0
   2b5ea:	d004      	beq.n	2b5f6 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2b5ec:	4652      	mov	r2, sl
   2b5ee:	4639      	mov	r1, r7
   2b5f0:	4620      	mov	r0, r4
   2b5f2:	f7ff ff99 	bl	2b528 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2b5f6:	4622      	mov	r2, r4
   2b5f8:	2120      	movs	r1, #32
   2b5fa:	4630      	mov	r0, r6
   2b5fc:	f7ff ff9a 	bl	2b534 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b600:	2220      	movs	r2, #32
   2b602:	4631      	mov	r1, r6
   2b604:	4620      	mov	r0, r4
   2b606:	f7ff ff4e 	bl	2b4a6 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2b60a:	4620      	mov	r0, r4
   2b60c:	f7ff ff7f 	bl	2b50e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b610:	2220      	movs	r2, #32
   2b612:	4629      	mov	r1, r5
   2b614:	4620      	mov	r0, r4
   2b616:	f7ff ff87 	bl	2b528 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2b61a:	4622      	mov	r2, r4
   2b61c:	2120      	movs	r1, #32
   2b61e:	4628      	mov	r0, r5
   2b620:	f7ff ff88 	bl	2b534 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2b624:	f1b8 0f00 	cmp.w	r8, #0
   2b628:	d03a      	beq.n	2b6a0 <update+0x11c>
   2b62a:	f1b9 0f00 	cmp.w	r9, #0
   2b62e:	d037      	beq.n	2b6a0 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b630:	2220      	movs	r2, #32
   2b632:	4631      	mov	r1, r6
   2b634:	4620      	mov	r0, r4
   2b636:	f7ff ff36 	bl	2b4a6 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2b63a:	4620      	mov	r0, r4
   2b63c:	f7ff ff67 	bl	2b50e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b640:	2220      	movs	r2, #32
   2b642:	4629      	mov	r1, r5
   2b644:	4620      	mov	r0, r4
   2b646:	f7ff ff6f 	bl	2b528 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2b64a:	2201      	movs	r2, #1
   2b64c:	f10d 0107 	add.w	r1, sp, #7
   2b650:	4620      	mov	r0, r4
   2b652:	f7ff ff69 	bl	2b528 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2b656:	464a      	mov	r2, r9
   2b658:	4641      	mov	r1, r8
   2b65a:	4620      	mov	r0, r4
   2b65c:	f7ff ff64 	bl	2b528 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2b660:	b13f      	cbz	r7, 2b672 <update+0xee>
   2b662:	f1ba 0f00 	cmp.w	sl, #0
   2b666:	d004      	beq.n	2b672 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2b668:	4652      	mov	r2, sl
   2b66a:	4639      	mov	r1, r7
   2b66c:	4620      	mov	r0, r4
   2b66e:	f7ff ff5b 	bl	2b528 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2b672:	4622      	mov	r2, r4
   2b674:	2120      	movs	r1, #32
   2b676:	4630      	mov	r0, r6
   2b678:	f7ff ff5c 	bl	2b534 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b67c:	2220      	movs	r2, #32
   2b67e:	4631      	mov	r1, r6
   2b680:	4620      	mov	r0, r4
   2b682:	f7ff ff10 	bl	2b4a6 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2b686:	4620      	mov	r0, r4
   2b688:	f7ff ff41 	bl	2b50e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b68c:	2220      	movs	r2, #32
   2b68e:	4629      	mov	r1, r5
   2b690:	4620      	mov	r0, r4
   2b692:	f7ff ff49 	bl	2b528 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2b696:	4622      	mov	r2, r4
   2b698:	2120      	movs	r1, #32
   2b69a:	4628      	mov	r0, r5
   2b69c:	f7ff ff4a 	bl	2b534 <tc_hmac_final>
}
   2b6a0:	b003      	add	sp, #12
   2b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b6a6 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2b6a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b6a8:	460c      	mov	r4, r1
   2b6aa:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2b6ac:	4605      	mov	r5, r0
   2b6ae:	b1b0      	cbz	r0, 2b6de <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2b6b0:	b1b9      	cbz	r1, 2b6e2 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2b6b2:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2b6b4:	2220      	movs	r2, #32
   2b6b6:	2100      	movs	r1, #0
   2b6b8:	30f0      	adds	r0, #240	; 0xf0
   2b6ba:	f7ff fc36 	bl	2af2a <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2b6be:	2220      	movs	r2, #32
   2b6c0:	2101      	movs	r1, #1
   2b6c2:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2b6c6:	f7ff fc30 	bl	2af2a <_set>
	update(prng, personalization, plen, 0, 0);
   2b6ca:	4628      	mov	r0, r5
   2b6cc:	4633      	mov	r3, r6
   2b6ce:	463a      	mov	r2, r7
   2b6d0:	4621      	mov	r1, r4
   2b6d2:	9600      	str	r6, [sp, #0]
   2b6d4:	f7ff ff56 	bl	2b584 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2b6d8:	2001      	movs	r0, #1
	prng->countdown = 0;
   2b6da:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2b6de:	b003      	add	sp, #12
   2b6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b6e2:	4608      	mov	r0, r1
   2b6e4:	e7fb      	b.n	2b6de <tc_hmac_prng_init+0x38>

0002b6e6 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2b6e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b6e8:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2b6ea:	4605      	mov	r5, r0
   2b6ec:	b180      	cbz	r0, 2b710 <tc_hmac_prng_reseed+0x2a>
   2b6ee:	b179      	cbz	r1, 2b710 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2b6f0:	2a1f      	cmp	r2, #31
   2b6f2:	d90d      	bls.n	2b710 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2b6f4:	b153      	cbz	r3, 2b70c <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2b6f6:	b16c      	cbz	r4, 2b714 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2b6f8:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2b6fa:	f7ff ff43 	bl	2b584 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2b6fe:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2b702:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2b704:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2b708:	b003      	add	sp, #12
   2b70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2b70c:	9300      	str	r3, [sp, #0]
   2b70e:	e7f4      	b.n	2b6fa <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2b710:	2000      	movs	r0, #0
   2b712:	e7f9      	b.n	2b708 <tc_hmac_prng_reseed+0x22>
   2b714:	4620      	mov	r0, r4
   2b716:	e7f7      	b.n	2b708 <tc_hmac_prng_reseed+0x22>

0002b718 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2b718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b71c:	460d      	mov	r5, r1
   2b71e:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2b720:	4680      	mov	r8, r0
   2b722:	b3d8      	cbz	r0, 2b79c <tc_hmac_prng_generate+0x84>
   2b724:	b3d2      	cbz	r2, 2b79c <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2b726:	1e4b      	subs	r3, r1, #1
   2b728:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2b72c:	d236      	bcs.n	2b79c <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2b72e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2b732:	b3ab      	cbz	r3, 2b7a0 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2b734:	3b01      	subs	r3, #1
   2b736:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b73a:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b73e:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b742:	2220      	movs	r2, #32
   2b744:	4649      	mov	r1, r9
   2b746:	4620      	mov	r0, r4
   2b748:	f7ff fead 	bl	2b4a6 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2b74c:	4620      	mov	r0, r4
   2b74e:	f7ff fede 	bl	2b50e <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b752:	2220      	movs	r2, #32
   2b754:	4639      	mov	r1, r7
   2b756:	4620      	mov	r0, r4
   2b758:	f7ff fee6 	bl	2b528 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2b75c:	4622      	mov	r2, r4
   2b75e:	2120      	movs	r1, #32
   2b760:	4638      	mov	r0, r7
   2b762:	f7ff fee7 	bl	2b534 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2b766:	2d20      	cmp	r5, #32
   2b768:	462e      	mov	r6, r5
   2b76a:	bf28      	it	cs
   2b76c:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2b76e:	4640      	mov	r0, r8
   2b770:	4633      	mov	r3, r6
   2b772:	463a      	mov	r2, r7
   2b774:	4631      	mov	r1, r6
   2b776:	f7ff fbcb 	bl	2af10 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2b77a:	2d20      	cmp	r5, #32
   2b77c:	bf38      	it	cc
   2b77e:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2b780:	3d20      	subs	r5, #32
		out += bufferlen;
   2b782:	44b0      	add	r8, r6
	while (outlen != 0) {
   2b784:	d1dd      	bne.n	2b742 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2b786:	4620      	mov	r0, r4
   2b788:	462b      	mov	r3, r5
   2b78a:	462a      	mov	r2, r5
   2b78c:	4629      	mov	r1, r5
   2b78e:	9500      	str	r5, [sp, #0]
   2b790:	f7ff fef8 	bl	2b584 <update>

	return TC_CRYPTO_SUCCESS;
   2b794:	2001      	movs	r0, #1
}
   2b796:	b003      	add	sp, #12
   2b798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2b79c:	2000      	movs	r0, #0
   2b79e:	e7fa      	b.n	2b796 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2b7a0:	f04f 30ff 	mov.w	r0, #4294967295
   2b7a4:	e7f7      	b.n	2b796 <tc_hmac_prng_generate+0x7e>

0002b7a6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b7a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b7a8:	ab0b      	add	r3, sp, #44	; 0x2c
   2b7aa:	9305      	str	r3, [sp, #20]
   2b7ac:	9303      	str	r3, [sp, #12]
   2b7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b7b0:	2201      	movs	r2, #1
   2b7b2:	9302      	str	r3, [sp, #8]
   2b7b4:	2300      	movs	r3, #0
   2b7b6:	4618      	mov	r0, r3
   2b7b8:	e9cd 3300 	strd	r3, r3, [sp]
   2b7bc:	f7e3 fe36 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2b7c0:	b007      	add	sp, #28
   2b7c2:	f85d fb04 	ldr.w	pc, [sp], #4

0002b7c6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2b7c6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2b7c8:	6800      	ldr	r0, [r0, #0]
   2b7ca:	f7e5 bc29 	b.w	11020 <z_arm_fatal_error>

0002b7ce <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2b7ce:	2100      	movs	r1, #0
   2b7d0:	2001      	movs	r0, #1
   2b7d2:	f7e5 bc25 	b.w	11020 <z_arm_fatal_error>

0002b7d6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2b7d6:	b508      	push	{r3, lr}
	handler();
   2b7d8:	f7e5 fcb8 	bl	1114c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2b7dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2b7e0:	f7e5 bd88 	b.w	112f4 <z_arm_exc_exit>

0002b7e4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2b7e4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b7e8:	f383 880b 	msr	PSPLIM, r3
}
   2b7ec:	4770      	bx	lr

0002b7ee <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b7ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b7f0:	ab0b      	add	r3, sp, #44	; 0x2c
   2b7f2:	9305      	str	r3, [sp, #20]
   2b7f4:	9303      	str	r3, [sp, #12]
   2b7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b7f8:	2201      	movs	r2, #1
   2b7fa:	9302      	str	r3, [sp, #8]
   2b7fc:	2300      	movs	r3, #0
   2b7fe:	4618      	mov	r0, r3
   2b800:	e9cd 3300 	strd	r3, r3, [sp]
   2b804:	f7e3 fe12 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2b808:	b007      	add	sp, #28
   2b80a:	f85d fb04 	ldr.w	pc, [sp], #4

0002b80e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2b80e:	4770      	bx	lr

0002b810 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2b810:	4770      	bx	lr

0002b812 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2b812:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2b816:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2b81a:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2b81c:	bf08      	it	eq
   2b81e:	f06f 0015 	mvneq.w	r0, #21
   2b822:	4770      	bx	lr

0002b824 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b826:	ab0b      	add	r3, sp, #44	; 0x2c
   2b828:	9305      	str	r3, [sp, #20]
   2b82a:	9303      	str	r3, [sp, #12]
   2b82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b82e:	2201      	movs	r2, #1
   2b830:	9302      	str	r3, [sp, #8]
   2b832:	2300      	movs	r3, #0
   2b834:	4618      	mov	r0, r3
   2b836:	e9cd 3300 	strd	r3, r3, [sp]
   2b83a:	f7e3 fdf7 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2b83e:	b007      	add	sp, #28
   2b840:	f85d fb04 	ldr.w	pc, [sp], #4

0002b844 <mpu_configure_region>:
{
   2b844:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   2b846:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2b848:	684b      	ldr	r3, [r1, #4]
{
   2b84a:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   2b84c:	890a      	ldrh	r2, [r1, #8]
   2b84e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2b850:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2b852:	3b01      	subs	r3, #1
   2b854:	f024 041f 	bic.w	r4, r4, #31
   2b858:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   2b85a:	f002 021f 	and.w	r2, r2, #31
   2b85e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2b862:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   2b866:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   2b868:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2b86c:	9303      	str	r3, [sp, #12]
   2b86e:	f7e6 f8ef 	bl	11a50 <region_allocate_and_init>
}
   2b872:	b005      	add	sp, #20
   2b874:	bd30      	pop	{r4, r5, pc}

0002b876 <malloc_prepare>:
}
   2b876:	2000      	movs	r0, #0
   2b878:	4770      	bx	lr

0002b87a <_stdout_hook_default>:
}
   2b87a:	f04f 30ff 	mov.w	r0, #4294967295
   2b87e:	4770      	bx	lr

0002b880 <_stdin_hook_default>:
}
   2b880:	2000      	movs	r0, #0
   2b882:	4770      	bx	lr

0002b884 <_read>:
{
   2b884:	4608      	mov	r0, r1
   2b886:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2b888:	f7e6 ba5e 	b.w	11d48 <z_impl_zephyr_read_stdin>

0002b88c <_write>:
{
   2b88c:	4608      	mov	r0, r1
   2b88e:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2b890:	f7e6 ba6e 	b.w	11d70 <z_impl_zephyr_write_stdout>

0002b894 <_close>:
int _close(int file)
   2b894:	f04f 30ff 	mov.w	r0, #4294967295
   2b898:	4770      	bx	lr

0002b89a <_lseek>:
}
   2b89a:	2000      	movs	r0, #0
   2b89c:	4770      	bx	lr

0002b89e <_isatty>:
}
   2b89e:	2802      	cmp	r0, #2
   2b8a0:	bfcc      	ite	gt
   2b8a2:	2000      	movgt	r0, #0
   2b8a4:	2001      	movle	r0, #1
   2b8a6:	4770      	bx	lr

0002b8a8 <_kill>:
}
   2b8a8:	2000      	movs	r0, #0
   2b8aa:	4770      	bx	lr

0002b8ac <_getpid>:
}
   2b8ac:	2000      	movs	r0, #0
   2b8ae:	4770      	bx	lr

0002b8b0 <_fstat>:
	st->st_mode = S_IFCHR;
   2b8b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2b8b4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2b8b6:	604b      	str	r3, [r1, #4]
}
   2b8b8:	4770      	bx	lr

0002b8ba <__retarget_lock_init_recursive>:
{
   2b8ba:	b510      	push	{r4, lr}
   2b8bc:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   2b8be:	2014      	movs	r0, #20
   2b8c0:	f7fb f948 	bl	26b54 <malloc>
   2b8c4:	6020      	str	r0, [r4, #0]
}
   2b8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   2b8ca:	f005 ba36 	b.w	30d3a <z_impl_k_mutex_init>

0002b8ce <__retarget_lock_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b8ce:	f04f 32ff 	mov.w	r2, #4294967295
   2b8d2:	f04f 33ff 	mov.w	r3, #4294967295
   2b8d6:	f7fa b8ab 	b.w	25a30 <z_impl_k_sem_take>

0002b8da <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2b8da:	f04f 32ff 	mov.w	r2, #4294967295
   2b8de:	f04f 33ff 	mov.w	r3, #4294967295
   2b8e2:	f7f9 bf93 	b.w	2580c <z_impl_k_mutex_lock>

0002b8e6 <__retarget_lock_release>:
	z_impl_k_sem_give(sem);
   2b8e6:	f7fa b87d 	b.w	259e4 <z_impl_k_sem_give>

0002b8ea <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   2b8ea:	f7fa b809 	b.w	25900 <z_impl_k_mutex_unlock>

0002b8ee <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2b8ee:	f7f9 bced 	b.w	252cc <z_impl_z_errno>

0002b8f2 <mac_process_notify>:
	LoRaMacProcess();
   2b8f2:	f7ea bb8b 	b.w	1600c <LoRaMacProcess>

0002b8f6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b8f6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b8f8:	ab0b      	add	r3, sp, #44	; 0x2c
   2b8fa:	9305      	str	r3, [sp, #20]
   2b8fc:	9303      	str	r3, [sp, #12]
   2b8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b900:	9302      	str	r3, [sp, #8]
   2b902:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b904:	9301      	str	r3, [sp, #4]
   2b906:	2300      	movs	r3, #0
   2b908:	4618      	mov	r0, r3
   2b90a:	9300      	str	r3, [sp, #0]
   2b90c:	f7e3 fd8e 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2b910:	b007      	add	sp, #28
   2b912:	f85d fb04 	ldr.w	pc, [sp], #4

0002b916 <BoardGetUniqueId>:
}
   2b916:	4770      	bx	lr

0002b918 <lorawan_get_payload_sizes>:
{
   2b918:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b91a:	4605      	mov	r5, r0
   2b91c:	460c      	mov	r4, r1
	(void) LoRaMacQueryTxPossible(0, &tx_info);
   2b91e:	2000      	movs	r0, #0
   2b920:	a901      	add	r1, sp, #4
   2b922:	f7eb fa93 	bl	16e4c <LoRaMacQueryTxPossible>
	*max_next_payload_size = tx_info.MaxPossibleApplicationDataSize;
   2b926:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2b92a:	702b      	strb	r3, [r5, #0]
	*max_payload_size = tx_info.CurrentPossiblePayloadSize;
   2b92c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2b930:	7023      	strb	r3, [r4, #0]
}
   2b932:	b003      	add	sp, #12
   2b934:	bd30      	pop	{r4, r5, pc}

0002b936 <timer_work_handler>:
	TimerIrqHandler();
   2b936:	f7e7 bb9d 	b.w	13074 <TimerIrqHandler>

0002b93a <k_uptime_get_32>:
{
   2b93a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   2b93c:	f005 fd0d 	bl	3135a <z_impl_k_uptime_ticks>
   2b940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b944:	fba0 0302 	umull	r0, r3, r0, r2
   2b948:	fb02 3301 	mla	r3, r2, r1, r3
   2b94c:	0bc0      	lsrs	r0, r0, #15
}
   2b94e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2b952:	bd08      	pop	{r3, pc}

0002b954 <RtcGetCalendarTime>:
{
   2b954:	b538      	push	{r3, r4, r5, lr}
   2b956:	4605      	mov	r5, r0
   2b958:	f005 fcff 	bl	3135a <z_impl_k_uptime_ticks>
   2b95c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b960:	fba0 4302 	umull	r4, r3, r0, r2
   2b964:	fb02 3101 	mla	r1, r2, r1, r3
   2b968:	0be4      	lsrs	r4, r4, #15
   2b96a:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
   2b96e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b972:	2300      	movs	r3, #0
   2b974:	0bc9      	lsrs	r1, r1, #15
   2b976:	f7dd fa93 	bl	8ea0 <__aeabi_ldivmod>
	*milliseconds = now % MSEC_PER_SEC;
   2b97a:	802a      	strh	r2, [r5, #0]
}
   2b97c:	bd38      	pop	{r3, r4, r5, pc}

0002b97e <RtcGetTimerValue>:
	return k_uptime_get_32();
   2b97e:	f7ff bfdc 	b.w	2b93a <k_uptime_get_32>

0002b982 <RtcGetMinimumTimeout>:
}
   2b982:	2001      	movs	r0, #1
   2b984:	4770      	bx	lr

0002b986 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   2b986:	4601      	mov	r1, r0
   2b988:	f240 30e7 	movw	r0, #999	; 0x3e7
   2b98c:	b508      	push	{r3, lr}
   2b98e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b992:	2300      	movs	r3, #0
   2b994:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2b998:	0c49      	lsrs	r1, r1, #17
   2b99a:	f7dd fad1 	bl	8f40 <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   2b99e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   2b9a2:	f7fa bd43 	b.w	2642c <z_impl_k_sleep>

0002b9a6 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   2b9a6:	4770      	bx	lr

0002b9a8 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
   2b9a8:	4770      	bx	lr

0002b9aa <BoardCriticalSectionBegin>:
	__asm__ volatile(
   2b9aa:	f04f 0220 	mov.w	r2, #32
   2b9ae:	f3ef 8311 	mrs	r3, BASEPRI
   2b9b2:	f382 8812 	msr	BASEPRI_MAX, r2
   2b9b6:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   2b9ba:	6003      	str	r3, [r0, #0]
}
   2b9bc:	4770      	bx	lr

0002b9be <BoardCriticalSectionEnd>:
	__asm__ volatile(
   2b9be:	6803      	ldr	r3, [r0, #0]
   2b9c0:	f383 8811 	msr	BASEPRI, r3
   2b9c4:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   2b9c8:	4770      	bx	lr

0002b9ca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b9ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b9cc:	ab0b      	add	r3, sp, #44	; 0x2c
   2b9ce:	9305      	str	r3, [sp, #20]
   2b9d0:	9303      	str	r3, [sp, #12]
   2b9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b9d4:	9302      	str	r3, [sp, #8]
   2b9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b9d8:	9301      	str	r3, [sp, #4]
   2b9da:	2300      	movs	r3, #0
   2b9dc:	4618      	mov	r0, r3
   2b9de:	9300      	str	r3, [sp, #0]
   2b9e0:	f7e3 fd24 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2b9e4:	b007      	add	sp, #28
   2b9e6:	f85d fb04 	ldr.w	pc, [sp], #4

0002b9ea <SX1276CheckRfFrequency>:
}
   2b9ea:	2001      	movs	r0, #1
   2b9ec:	4770      	bx	lr

0002b9ee <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2b9ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2b9f0:	ab0b      	add	r3, sp, #44	; 0x2c
   2b9f2:	9305      	str	r3, [sp, #20]
   2b9f4:	9303      	str	r3, [sp, #12]
   2b9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b9f8:	9302      	str	r3, [sp, #8]
   2b9fa:	2300      	movs	r3, #0
   2b9fc:	4618      	mov	r0, r3
   2b9fe:	e9cd 3300 	strd	r3, r3, [sp]
   2ba02:	f7e3 fd13 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2ba06:	b007      	add	sp, #28
   2ba08:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba0c <SX1276GetBoardTcxoWakeupTime>:
}
   2ba0c:	2000      	movs	r0, #0
   2ba0e:	4770      	bx	lr

0002ba10 <SX1276SetAntSwLowPower>:
}
   2ba10:	4770      	bx	lr

0002ba12 <SX1276SetBoardTcxo>:
}
   2ba12:	4770      	bx	lr

0002ba14 <SX1276SetAntSw>:
void SX127xSetAntSw(uint8_t opMode)
   2ba14:	4770      	bx	lr

0002ba16 <SX1276Reset>:
{
   2ba16:	b508      	push	{r3, lr}
	gpio_pin_set_dt(&dev_config.reset, 1);
   2ba18:	2001      	movs	r0, #1
   2ba1a:	f7e7 f8cd 	bl	12bb8 <gpio_pin_set_dt.constprop.0.isra.0>
   2ba1e:	2100      	movs	r1, #0
   2ba20:	2021      	movs	r0, #33	; 0x21
   2ba22:	f7fa fd03 	bl	2642c <z_impl_k_sleep>
	gpio_pin_set_dt(&dev_config.reset, 0);
   2ba26:	2000      	movs	r0, #0
   2ba28:	f7e7 f8c6 	bl	12bb8 <gpio_pin_set_dt.constprop.0.isra.0>
}
   2ba2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2ba30:	20c5      	movs	r0, #197	; 0xc5
   2ba32:	2100      	movs	r1, #0
   2ba34:	f7fa bcfa 	b.w	2642c <z_impl_k_sleep>

0002ba38 <randr>:
{
   2ba38:	b538      	push	{r3, r4, r5, lr}
   2ba3a:	4605      	mov	r5, r0
   2ba3c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
   2ba3e:	f7e7 faa1 	bl	12f84 <rand1>
   2ba42:	1b61      	subs	r1, r4, r5
   2ba44:	3101      	adds	r1, #1
   2ba46:	fb90 f3f1 	sdiv	r3, r0, r1
   2ba4a:	fb03 0011 	mls	r0, r3, r1, r0
}
   2ba4e:	4428      	add	r0, r5
   2ba50:	bd38      	pop	{r3, r4, r5, pc}

0002ba52 <memcpy1>:
    while( size-- )
   2ba52:	3801      	subs	r0, #1
   2ba54:	440a      	add	r2, r1
   2ba56:	4291      	cmp	r1, r2
   2ba58:	d100      	bne.n	2ba5c <memcpy1+0xa>
}
   2ba5a:	4770      	bx	lr
        *dst++ = *src++;
   2ba5c:	f811 3b01 	ldrb.w	r3, [r1], #1
   2ba60:	f800 3f01 	strb.w	r3, [r0, #1]!
   2ba64:	e7f7      	b.n	2ba56 <memcpy1+0x4>

0002ba66 <memcpyr>:
    while( size-- )
   2ba66:	4410      	add	r0, r2
   2ba68:	440a      	add	r2, r1
   2ba6a:	4291      	cmp	r1, r2
   2ba6c:	d100      	bne.n	2ba70 <memcpyr+0xa>
}
   2ba6e:	4770      	bx	lr
        *dst-- = *src++;
   2ba70:	f811 3b01 	ldrb.w	r3, [r1], #1
   2ba74:	f800 3d01 	strb.w	r3, [r0, #-1]!
   2ba78:	e7f7      	b.n	2ba6a <memcpyr+0x4>

0002ba7a <memset1>:
    while( size-- )
   2ba7a:	4402      	add	r2, r0
   2ba7c:	4290      	cmp	r0, r2
   2ba7e:	d100      	bne.n	2ba82 <memset1+0x8>
}
   2ba80:	4770      	bx	lr
        *dst++ = value;
   2ba82:	f800 1b01 	strb.w	r1, [r0], #1
   2ba86:	e7f9      	b.n	2ba7c <memset1+0x2>

0002ba88 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
   2ba88:	b082      	sub	sp, #8
   2ba8a:	b082      	sub	sp, #8
   2ba8c:	f10d 0c08 	add.w	ip, sp, #8
   2ba90:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2ba94:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
   2ba98:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
   2ba9a:	440b      	add	r3, r1
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2ba9c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2baa0:	440a      	add	r2, r1
   2baa2:	b291      	uxth	r1, r2
   2baa4:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
   2baa6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
   2baaa:	bfa2      	ittt	ge
   2baac:	f5a1 727a 	subge.w	r2, r1, #1000	; 0x3e8
        c.Seconds++;
   2bab0:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
   2bab2:	b212      	sxthge	r2, r2
    }
    return c;
   2bab4:	6003      	str	r3, [r0, #0]
   2bab6:	8082      	strh	r2, [r0, #4]
}
   2bab8:	b002      	add	sp, #8
   2baba:	b002      	add	sp, #8
   2babc:	4770      	bx	lr

0002babe <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
   2babe:	b082      	sub	sp, #8
   2bac0:	b082      	sub	sp, #8
   2bac2:	f10d 0c08 	add.w	ip, sp, #8
   2bac6:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2baca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
   2bace:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
   2bad0:	1acb      	subs	r3, r1, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bad2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bad6:	1a52      	subs	r2, r2, r1
   2bad8:	b291      	uxth	r1, r2
   2bada:	b212      	sxth	r2, r2
    if( c.SubSeconds < 0 )
   2badc:	2a00      	cmp	r2, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
   2bade:	bfbe      	ittt	lt
   2bae0:	f501 727a 	addlt.w	r2, r1, #1000	; 0x3e8
        c.Seconds--;
   2bae4:	f103 33ff 	addlt.w	r3, r3, #4294967295
        c.SubSeconds += 1000;
   2bae8:	b212      	sxthlt	r2, r2
    }
    return c;
   2baea:	6003      	str	r3, [r0, #0]
   2baec:	8082      	strh	r2, [r0, #4]
}
   2baee:	b002      	add	sp, #8
   2baf0:	b002      	add	sp, #8
   2baf2:	4770      	bx	lr

0002baf4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
   2baf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2baf6:	466b      	mov	r3, sp
   2baf8:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bafc:	2300      	movs	r3, #0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bafe:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bb00:	9302      	str	r3, [sp, #8]
   2bb02:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bb06:	f7ff ff25 	bl	2b954 <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
   2bb0a:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bb0c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bb10:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
   2bb12:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bb14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2bb18:	1ac9      	subs	r1, r1, r3
   2bb1a:	b28b      	uxth	r3, r1
   2bb1c:	b209      	sxth	r1, r1
    if( c.SubSeconds < 0 )
   2bb1e:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
   2bb20:	bfbe      	ittt	lt
   2bb22:	f503 737a 	addlt.w	r3, r3, #1000	; 0x3e8
        c.Seconds--;
   2bb26:	f100 30ff 	addlt.w	r0, r0, #4294967295
        c.SubSeconds += 1000;
   2bb2a:	b219      	sxthlt	r1, r3

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
   2bb2c:	f7e6 fd4c 	bl	125c8 <RtcBkupWrite>
}
   2bb30:	b005      	add	sp, #20
   2bb32:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb36 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
   2bb36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bb38:	2300      	movs	r3, #0
{
   2bb3a:	4604      	mov	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bb3c:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bb3e:	9302      	str	r3, [sp, #8]
   2bb40:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bb44:	f7ff ff06 	bl	2b954 <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
   2bb48:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bb4a:	9002      	str	r0, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
   2bb4c:	4668      	mov	r0, sp
   2bb4e:	f7e6 fd41 	bl	125d4 <RtcBkupRead>
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
   2bb52:	4620      	mov	r0, r4
    c.Seconds = a.Seconds + b.Seconds;
   2bb54:	9b02      	ldr	r3, [sp, #8]
   2bb56:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bb58:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
   2bb5c:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bb5e:	9b01      	ldr	r3, [sp, #4]
   2bb60:	440b      	add	r3, r1
   2bb62:	b299      	uxth	r1, r3
   2bb64:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
   2bb66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
   2bb6a:	bfa2      	ittt	ge
   2bb6c:	f5a1 737a 	subge.w	r3, r1, #1000	; 0x3e8
        c.Seconds++;
   2bb70:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
   2bb72:	b21b      	sxthge	r3, r3
    return sysTime;
   2bb74:	6022      	str	r2, [r4, #0]
   2bb76:	80a3      	strh	r3, [r4, #4]
}
   2bb78:	b004      	add	sp, #16
   2bb7a:	bd10      	pop	{r4, pc}

0002bb7c <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bb7c:	2300      	movs	r3, #0
{
   2bb7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bb80:	4604      	mov	r4, r0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bb82:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2bb84:	9300      	str	r3, [sp, #0]
   2bb86:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2bb8a:	f7ff fee3 	bl	2b954 <RtcGetCalendarTime>
   2bb8e:	466d      	mov	r5, sp
   2bb90:	9000      	str	r0, [sp, #0]

    return calendarTime;
   2bb92:	e895 0003 	ldmia.w	r5, {r0, r1}
   2bb96:	e884 0003 	stmia.w	r4, {r0, r1}
}
   2bb9a:	4620      	mov	r0, r4
   2bb9c:	b003      	add	sp, #12
   2bb9e:	bd30      	pop	{r4, r5, pc}

0002bba0 <SysTimeToMs>:

TimerTime_t SysTimeToMs( SysTime_t sysTime )
{
   2bba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2bba2:	466b      	mov	r3, sp
   2bba4:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
   2bba8:	a903      	add	r1, sp, #12
   2bbaa:	a802      	add	r0, sp, #8
   2bbac:	f7e6 fd12 	bl	125d4 <RtcBkupRead>
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return ( TimerTime_t )( calendarTime.Seconds * 1000 + calendarTime.SubSeconds );
}
   2bbb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c.Seconds = a.Seconds - b.Seconds;
   2bbb4:	9b02      	ldr	r3, [sp, #8]
   2bbb6:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bbb8:	9903      	ldr	r1, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
   2bbba:	1ad2      	subs	r2, r2, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bbbc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2bbc0:	1a5b      	subs	r3, r3, r1
   2bbc2:	b299      	uxth	r1, r3
   2bbc4:	b21b      	sxth	r3, r3
    if( c.SubSeconds < 0 )
   2bbc6:	2b00      	cmp	r3, #0
        c.SubSeconds += 1000;
   2bbc8:	bfbe      	ittt	lt
   2bbca:	f501 717a 	addlt.w	r1, r1, #1000	; 0x3e8
        c.Seconds--;
   2bbce:	f102 32ff 	addlt.w	r2, r2, #4294967295
        c.SubSeconds += 1000;
   2bbd2:	b20b      	sxthlt	r3, r1
}
   2bbd4:	fb00 3002 	mla	r0, r0, r2, r3
   2bbd8:	b005      	add	sp, #20
   2bbda:	f85d fb04 	ldr.w	pc, [sp], #4

0002bbde <SysTimeFromMs>:

SysTime_t SysTimeFromMs( TimerTime_t timeMs )
{
    uint32_t seconds = timeMs / 1000;
   2bbde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   2bbe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t seconds = timeMs / 1000;
   2bbe4:	fbb1 f4f3 	udiv	r4, r1, r3
{
   2bbe8:	4606      	mov	r6, r0
   2bbea:	fb03 1514 	mls	r5, r3, r4, r1
    uint32_t subSeconds = timeMs - seconds * 1000;
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
   2bbee:	4668      	mov	r0, sp
   2bbf0:	a901      	add	r1, sp, #4
    uint32_t seconds = timeMs / 1000;
   2bbf2:	9400      	str	r4, [sp, #0]
    uint32_t subSeconds = timeMs - seconds * 1000;
   2bbf4:	9501      	str	r5, [sp, #4]
    RtcBkupRead( &seconds, &subSeconds );
   2bbf6:	f7e6 fced 	bl	125d4 <RtcBkupRead>

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
   2bbfa:	4630      	mov	r0, r6
    c.Seconds = a.Seconds + b.Seconds;
   2bbfc:	9b00      	ldr	r3, [sp, #0]
   2bbfe:	441c      	add	r4, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bc00:	9b01      	ldr	r3, [sp, #4]
   2bc02:	442b      	add	r3, r5
   2bc04:	b29a      	uxth	r2, r3
   2bc06:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
   2bc08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
   2bc0c:	bfa2      	ittt	ge
   2bc0e:	f5a2 737a 	subge.w	r3, r2, #1000	; 0x3e8
        c.Seconds++;
   2bc12:	3401      	addge	r4, #1
        c.SubSeconds -= 1000;
   2bc14:	b21b      	sxthge	r3, r3
    return c;
   2bc16:	6034      	str	r4, [r6, #0]
   2bc18:	80b3      	strh	r3, [r6, #4]
}
   2bc1a:	b002      	add	sp, #8
   2bc1c:	bd70      	pop	{r4, r5, r6, pc}

0002bc1e <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   2bc1e:	b570      	push	{r4, r5, r6, lr}
   2bc20:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   2bc22:	f7ff feae 	bl	2b982 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   2bc26:	2301      	movs	r3, #1
   2bc28:	7263      	strb	r3, [r4, #9]
    int32_t minTicks= RtcGetMinimumTimeout( );
   2bc2a:	4605      	mov	r5, r0

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   2bc2c:	6826      	ldr	r6, [r4, #0]
   2bc2e:	f7e6 fcd9 	bl	125e4 <RtcGetTimerElapsedTime>
   2bc32:	4428      	add	r0, r5
   2bc34:	4286      	cmp	r6, r0
   2bc36:	d203      	bcs.n	2bc40 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   2bc38:	f7e6 fcd4 	bl	125e4 <RtcGetTimerElapsedTime>
   2bc3c:	4405      	add	r5, r0
   2bc3e:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   2bc40:	6820      	ldr	r0, [r4, #0]
}
   2bc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   2bc46:	f7e6 bcdd 	b.w	12604 <RtcSetAlarm>

0002bc4a <TimerInit>:
    obj->Timestamp = 0;
   2bc4a:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   2bc4c:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   2bc50:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   2bc54:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   2bc56:	6143      	str	r3, [r0, #20]
}
   2bc58:	4770      	bx	lr

0002bc5a <TimerSetValue>:
{
   2bc5a:	b538      	push	{r3, r4, r5, lr}
   2bc5c:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   2bc5e:	4608      	mov	r0, r1
   2bc60:	f7ff fea1 	bl	2b9a6 <RtcMs2Tick>
   2bc64:	4604      	mov	r4, r0
    TimerStop( obj );
   2bc66:	4628      	mov	r0, r5
   2bc68:	f7e7 fa42 	bl	130f0 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   2bc6c:	f7ff fe89 	bl	2b982 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   2bc70:	42a0      	cmp	r0, r4
   2bc72:	bf38      	it	cc
   2bc74:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   2bc76:	e9c5 0000 	strd	r0, r0, [r5]
}
   2bc7a:	bd38      	pop	{r3, r4, r5, pc}

0002bc7c <TimerGetCurrentTime>:
{
   2bc7c:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   2bc7e:	f7ff fe7e 	bl	2b97e <RtcGetTimerValue>
}
   2bc82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   2bc86:	f7ff be8f 	b.w	2b9a8 <RtcTick2Ms>

0002bc8a <TimerGetElapsedTime>:
{
   2bc8a:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   2bc8c:	4604      	mov	r4, r0
   2bc8e:	b150      	cbz	r0, 2bca6 <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   2bc90:	f7ff fe75 	bl	2b97e <RtcGetTimerValue>
   2bc94:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   2bc96:	4620      	mov	r0, r4
   2bc98:	f7ff fe85 	bl	2b9a6 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   2bc9c:	1a28      	subs	r0, r5, r0
}
   2bc9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   2bca2:	f7ff be81 	b.w	2b9a8 <RtcTick2Ms>
}
   2bca6:	bd38      	pop	{r3, r4, r5, pc}

0002bca8 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   2bca8:	f7ff be6d 	b.w	2b986 <DelayMsMcu>

0002bcac <SX1276Write>:
{
   2bcac:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   2bcae:	2201      	movs	r2, #1
{
   2bcb0:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   2bcb4:	f10d 0107 	add.w	r1, sp, #7
   2bcb8:	f7e7 f8da 	bl	12e70 <SX1276WriteBuffer>
}
   2bcbc:	b003      	add	sp, #12
   2bcbe:	f85d fb04 	ldr.w	pc, [sp], #4

0002bcc2 <SX1276Read>:
{
   2bcc2:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   2bcc4:	2201      	movs	r2, #1
   2bcc6:	f10d 0107 	add.w	r1, sp, #7
   2bcca:	f7e7 f829 	bl	12d20 <SX1276ReadBuffer>
}
   2bcce:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2bcd2:	b003      	add	sp, #12
   2bcd4:	f85d fb04 	ldr.w	pc, [sp], #4

0002bcd8 <SX1276SetOpMode>:
{
   2bcd8:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   2bcda:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   2bcdc:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   2bcde:	b964      	cbnz	r4, 2bcfa <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   2bce0:	f7ff fe96 	bl	2ba10 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   2bce4:	2001      	movs	r0, #1
   2bce6:	f7ff ffec 	bl	2bcc2 <SX1276Read>
   2bcea:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   2bcee:	4321      	orrs	r1, r4
   2bcf0:	2001      	movs	r0, #1
}
   2bcf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   2bcf6:	f7ff bfd9 	b.w	2bcac <SX1276Write>
        SX1276SetBoardTcxo( true );
   2bcfa:	f7ff fe8a 	bl	2ba12 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   2bcfe:	2000      	movs	r0, #0
   2bd00:	f7ff fe86 	bl	2ba10 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   2bd04:	4620      	mov	r0, r4
   2bd06:	f7ff fe85 	bl	2ba14 <SX1276SetAntSw>
   2bd0a:	e7eb      	b.n	2bce4 <SX1276SetOpMode+0xc>

0002bd0c <SX1276IsChannelFree>:
{
   2bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bd0e:	4607      	mov	r7, r0
   2bd10:	460c      	mov	r4, r1
   2bd12:	4616      	mov	r6, r2
   2bd14:	461d      	mov	r5, r3
    SX1276SetSleep( );
   2bd16:	f7e7 fd6b 	bl	137f0 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
   2bd1a:	2000      	movs	r0, #0
   2bd1c:	f7e7 ff9a 	bl	13c54 <SX1276SetModem>
    SX1276SetChannel( freq );
   2bd20:	4638      	mov	r0, r7
   2bd22:	f7e7 faa9 	bl	13278 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
   2bd26:	4620      	mov	r0, r4
   2bd28:	f7e7 fa0c 	bl	13144 <GetFskBandwidthRegValue>
   2bd2c:	4604      	mov	r4, r0
   2bd2e:	4601      	mov	r1, r0
   2bd30:	2012      	movs	r0, #18
   2bd32:	f7ff ffbb 	bl	2bcac <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
   2bd36:	4621      	mov	r1, r4
   2bd38:	2013      	movs	r0, #19
   2bd3a:	f7ff ffb7 	bl	2bcac <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2bd3e:	2005      	movs	r0, #5
   2bd40:	f7ff ffca 	bl	2bcd8 <SX1276SetOpMode>
    DelayMs( 1 );
   2bd44:	2001      	movs	r0, #1
   2bd46:	f7ff ffaf 	bl	2bca8 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   2bd4a:	f7ff ff97 	bl	2bc7c <TimerGetCurrentTime>
   2bd4e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   2bd50:	4620      	mov	r0, r4
   2bd52:	f7ff ff9a 	bl	2bc8a <TimerGetElapsedTime>
   2bd56:	42a8      	cmp	r0, r5
   2bd58:	d304      	bcc.n	2bd64 <SX1276IsChannelFree+0x58>
    bool status = true;
   2bd5a:	2401      	movs	r4, #1
    SX1276SetSleep( );
   2bd5c:	f7e7 fd48 	bl	137f0 <SX1276SetSleep>
}
   2bd60:	4620      	mov	r0, r4
   2bd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
   2bd64:	2000      	movs	r0, #0
   2bd66:	f7e7 ff53 	bl	13c10 <SX1276ReadRssi>
        if( rssi > rssiThresh )
   2bd6a:	42b0      	cmp	r0, r6
   2bd6c:	ddf0      	ble.n	2bd50 <SX1276IsChannelFree+0x44>
            status = false;
   2bd6e:	2400      	movs	r4, #0
   2bd70:	e7f4      	b.n	2bd5c <SX1276IsChannelFree+0x50>

0002bd72 <SX1276Random>:
{
   2bd72:	b538      	push	{r3, r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2bd74:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
   2bd76:	2001      	movs	r0, #1
   2bd78:	f7e7 ff6c 	bl	13c54 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   2bd7c:	21ff      	movs	r1, #255	; 0xff
   2bd7e:	2011      	movs	r0, #17
   2bd80:	f7ff ff94 	bl	2bcac <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2bd84:	2005      	movs	r0, #5
   2bd86:	f7ff ffa7 	bl	2bcd8 <SX1276SetOpMode>
    uint32_t rnd = 0;
   2bd8a:	4625      	mov	r5, r4
        DelayMs( 1 );
   2bd8c:	2001      	movs	r0, #1
   2bd8e:	f7ff ff8b 	bl	2bca8 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   2bd92:	202c      	movs	r0, #44	; 0x2c
   2bd94:	f7ff ff95 	bl	2bcc2 <SX1276Read>
   2bd98:	f000 0001 	and.w	r0, r0, #1
   2bd9c:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
   2bd9e:	3401      	adds	r4, #1
   2bda0:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   2bda2:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   2bda6:	d1f1      	bne.n	2bd8c <SX1276Random+0x1a>
    SX1276SetSleep( );
   2bda8:	f7e7 fd22 	bl	137f0 <SX1276SetSleep>
}
   2bdac:	4628      	mov	r0, r5
   2bdae:	bd38      	pop	{r3, r4, r5, pc}

0002bdb0 <SX1276GetWakeupTime>:
{
   2bdb0:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   2bdb2:	f7ff fe2b 	bl	2ba0c <SX1276GetBoardTcxoWakeupTime>
}
   2bdb6:	3001      	adds	r0, #1
   2bdb8:	bd08      	pop	{r3, pc}

0002bdba <xor_block>:
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
   2bdba:	780a      	ldrb	r2, [r1, #0]
   2bdbc:	7803      	ldrb	r3, [r0, #0]
   2bdbe:	4053      	eors	r3, r2
   2bdc0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
   2bdc2:	784a      	ldrb	r2, [r1, #1]
   2bdc4:	7843      	ldrb	r3, [r0, #1]
   2bdc6:	4053      	eors	r3, r2
   2bdc8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
   2bdca:	788a      	ldrb	r2, [r1, #2]
   2bdcc:	7883      	ldrb	r3, [r0, #2]
   2bdce:	4053      	eors	r3, r2
   2bdd0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
   2bdd2:	78ca      	ldrb	r2, [r1, #3]
   2bdd4:	78c3      	ldrb	r3, [r0, #3]
   2bdd6:	4053      	eors	r3, r2
   2bdd8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
   2bdda:	790a      	ldrb	r2, [r1, #4]
   2bddc:	7903      	ldrb	r3, [r0, #4]
   2bdde:	4053      	eors	r3, r2
   2bde0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
   2bde2:	794a      	ldrb	r2, [r1, #5]
   2bde4:	7943      	ldrb	r3, [r0, #5]
   2bde6:	4053      	eors	r3, r2
   2bde8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
   2bdea:	798a      	ldrb	r2, [r1, #6]
   2bdec:	7983      	ldrb	r3, [r0, #6]
   2bdee:	4053      	eors	r3, r2
   2bdf0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
   2bdf2:	79ca      	ldrb	r2, [r1, #7]
   2bdf4:	79c3      	ldrb	r3, [r0, #7]
   2bdf6:	4053      	eors	r3, r2
   2bdf8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
   2bdfa:	7a0a      	ldrb	r2, [r1, #8]
   2bdfc:	7a03      	ldrb	r3, [r0, #8]
   2bdfe:	4053      	eors	r3, r2
   2be00:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
   2be02:	7a4a      	ldrb	r2, [r1, #9]
   2be04:	7a43      	ldrb	r3, [r0, #9]
   2be06:	4053      	eors	r3, r2
   2be08:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
   2be0a:	7a8a      	ldrb	r2, [r1, #10]
   2be0c:	7a83      	ldrb	r3, [r0, #10]
   2be0e:	4053      	eors	r3, r2
   2be10:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
   2be12:	7aca      	ldrb	r2, [r1, #11]
   2be14:	7ac3      	ldrb	r3, [r0, #11]
   2be16:	4053      	eors	r3, r2
   2be18:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
   2be1a:	7b0a      	ldrb	r2, [r1, #12]
   2be1c:	7b03      	ldrb	r3, [r0, #12]
   2be1e:	4053      	eors	r3, r2
   2be20:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
   2be22:	7b4a      	ldrb	r2, [r1, #13]
   2be24:	7b43      	ldrb	r3, [r0, #13]
   2be26:	4053      	eors	r3, r2
   2be28:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
   2be2a:	7b8a      	ldrb	r2, [r1, #14]
   2be2c:	7b83      	ldrb	r3, [r0, #14]
   2be2e:	4053      	eors	r3, r2
   2be30:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
   2be32:	7bca      	ldrb	r2, [r1, #15]
   2be34:	7bc3      	ldrb	r3, [r0, #15]
   2be36:	4053      	eors	r3, r2
   2be38:	73c3      	strb	r3, [r0, #15]
}
   2be3a:	4770      	bx	lr

0002be3c <copy_and_key>:
{
   2be3c:	b510      	push	{r4, lr}
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
   2be3e:	780b      	ldrb	r3, [r1, #0]
   2be40:	7814      	ldrb	r4, [r2, #0]
   2be42:	4063      	eors	r3, r4
   2be44:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
   2be46:	7854      	ldrb	r4, [r2, #1]
   2be48:	784b      	ldrb	r3, [r1, #1]
   2be4a:	4063      	eors	r3, r4
   2be4c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
   2be4e:	7894      	ldrb	r4, [r2, #2]
   2be50:	788b      	ldrb	r3, [r1, #2]
   2be52:	4063      	eors	r3, r4
   2be54:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
   2be56:	78d4      	ldrb	r4, [r2, #3]
   2be58:	78cb      	ldrb	r3, [r1, #3]
   2be5a:	4063      	eors	r3, r4
   2be5c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
   2be5e:	7914      	ldrb	r4, [r2, #4]
   2be60:	790b      	ldrb	r3, [r1, #4]
   2be62:	4063      	eors	r3, r4
   2be64:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
   2be66:	7954      	ldrb	r4, [r2, #5]
   2be68:	794b      	ldrb	r3, [r1, #5]
   2be6a:	4063      	eors	r3, r4
   2be6c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
   2be6e:	7994      	ldrb	r4, [r2, #6]
   2be70:	798b      	ldrb	r3, [r1, #6]
   2be72:	4063      	eors	r3, r4
   2be74:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
   2be76:	79d4      	ldrb	r4, [r2, #7]
   2be78:	79cb      	ldrb	r3, [r1, #7]
   2be7a:	4063      	eors	r3, r4
   2be7c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
   2be7e:	7a14      	ldrb	r4, [r2, #8]
   2be80:	7a0b      	ldrb	r3, [r1, #8]
   2be82:	4063      	eors	r3, r4
   2be84:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
   2be86:	7a54      	ldrb	r4, [r2, #9]
   2be88:	7a4b      	ldrb	r3, [r1, #9]
   2be8a:	4063      	eors	r3, r4
   2be8c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
   2be8e:	7a8b      	ldrb	r3, [r1, #10]
   2be90:	7a94      	ldrb	r4, [r2, #10]
   2be92:	4063      	eors	r3, r4
   2be94:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
   2be96:	7ad4      	ldrb	r4, [r2, #11]
   2be98:	7acb      	ldrb	r3, [r1, #11]
   2be9a:	4063      	eors	r3, r4
   2be9c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
   2be9e:	7b14      	ldrb	r4, [r2, #12]
   2bea0:	7b0b      	ldrb	r3, [r1, #12]
   2bea2:	4063      	eors	r3, r4
   2bea4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
   2bea6:	7b54      	ldrb	r4, [r2, #13]
   2bea8:	7b4b      	ldrb	r3, [r1, #13]
   2beaa:	4063      	eors	r3, r4
   2beac:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
   2beae:	7b94      	ldrb	r4, [r2, #14]
   2beb0:	7b8b      	ldrb	r3, [r1, #14]
   2beb2:	4063      	eors	r3, r4
   2beb4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
   2beb6:	7bcb      	ldrb	r3, [r1, #15]
   2beb8:	7bd2      	ldrb	r2, [r2, #15]
   2beba:	4053      	eors	r3, r2
   2bebc:	73c3      	strb	r3, [r0, #15]
}
   2bebe:	bd10      	pop	{r4, pc}

0002bec0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
   2bec0:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
   2bec2:	2210      	movs	r2, #16
{
   2bec4:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
   2bec6:	2100      	movs	r1, #0
   2bec8:	30f1      	adds	r0, #241	; 0xf1
   2beca:	f7ff fdd6 	bl	2ba7a <memset1>
    ctx->M_n = 0;
   2bece:	2100      	movs	r1, #0
   2bed0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
   2bed4:	4620      	mov	r0, r4
}
   2bed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
   2beda:	22f0      	movs	r2, #240	; 0xf0
   2bedc:	f7ff bdcd 	b.w	2ba7a <memset1>

0002bee0 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
   2bee0:	4602      	mov	r2, r0
   2bee2:	4608      	mov	r0, r1
    aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
   2bee4:	2110      	movs	r1, #16
   2bee6:	f7e8 ba73 	b.w	143d0 <aes_set_key>

0002beea <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
   2beea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2beee:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
   2bef0:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
   2bef4:	460e      	mov	r6, r1
   2bef6:	4615      	mov	r5, r2
   2bef8:	b085      	sub	sp, #20
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
   2befa:	f204 1901 	addw	r9, r4, #257	; 0x101
    if( ctx->M_n > 0 )
   2befe:	b388      	cbz	r0, 2bf64 <AES_CMAC_Update+0x7a>
        mlen = MIN( 16 - ctx->M_n, len );
   2bf00:	f1c0 0810 	rsb	r8, r0, #16
   2bf04:	4590      	cmp	r8, r2
   2bf06:	4647      	mov	r7, r8
   2bf08:	bf28      	it	cs
   2bf0a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
   2bf0c:	4448      	add	r0, r9
   2bf0e:	b2ba      	uxth	r2, r7
   2bf10:	f7ff fd9f 	bl	2ba52 <memcpy1>
        ctx->M_n += mlen;
   2bf14:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   2bf18:	443b      	add	r3, r7
        if( ctx->M_n < 16 || len == mlen )
   2bf1a:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
   2bf1c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
   2bf20:	d92d      	bls.n	2bf7e <AES_CMAC_Update+0x94>
   2bf22:	45a8      	cmp	r8, r5
   2bf24:	d22b      	bcs.n	2bf7e <AES_CMAC_Update+0x94>
   2bf26:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2bf2a:	f504 7180 	add.w	r1, r4, #256	; 0x100
            return;
        XOR( ctx->M_last, ctx->X );
   2bf2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2bf32:	7c18      	ldrb	r0, [r3, #16]
   2bf34:	428b      	cmp	r3, r1
   2bf36:	ea82 0200 	eor.w	r2, r2, r0
   2bf3a:	701a      	strb	r2, [r3, #0]
   2bf3c:	d1f7      	bne.n	2bf2e <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2bf3e:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
   2bf42:	2210      	movs	r2, #16
   2bf44:	4641      	mov	r1, r8
   2bf46:	4668      	mov	r0, sp
   2bf48:	f7ff fd83 	bl	2ba52 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
   2bf4c:	4622      	mov	r2, r4
   2bf4e:	4669      	mov	r1, sp
   2bf50:	4668      	mov	r0, sp
   2bf52:	f7e8 fac3 	bl	144dc <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
   2bf56:	2210      	movs	r2, #16
   2bf58:	4669      	mov	r1, sp
   2bf5a:	4640      	mov	r0, r8
   2bf5c:	f7ff fd79 	bl	2ba52 <memcpy1>

        data += mlen;
   2bf60:	443e      	add	r6, r7
        len -= mlen;
   2bf62:	1bed      	subs	r5, r5, r7
   2bf64:	f504 7880 	add.w	r8, r4, #256	; 0x100
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2bf68:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
    while( len > 16 )
   2bf6c:	2d10      	cmp	r5, #16
   2bf6e:	d809      	bhi.n	2bf84 <AES_CMAC_Update+0x9a>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
   2bf70:	4631      	mov	r1, r6
   2bf72:	4648      	mov	r0, r9
   2bf74:	b2aa      	uxth	r2, r5
   2bf76:	f7ff fd6c 	bl	2ba52 <memcpy1>
    ctx->M_n = len;
   2bf7a:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
   2bf7e:	b005      	add	sp, #20
   2bf80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2bf84:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2bf88:	1e71      	subs	r1, r6, #1
        XOR( data, ctx->X );
   2bf8a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2bf8e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2bf92:	4543      	cmp	r3, r8
   2bf94:	ea82 0200 	eor.w	r2, r2, r0
   2bf98:	701a      	strb	r2, [r3, #0]
   2bf9a:	d1f6      	bne.n	2bf8a <AES_CMAC_Update+0xa0>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2bf9c:	2210      	movs	r2, #16
   2bf9e:	4639      	mov	r1, r7
   2bfa0:	4668      	mov	r0, sp
   2bfa2:	f7ff fd56 	bl	2ba52 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
   2bfa6:	4622      	mov	r2, r4
   2bfa8:	4669      	mov	r1, sp
   2bfaa:	4668      	mov	r0, sp
   2bfac:	f7e8 fa96 	bl	144dc <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
   2bfb0:	2210      	movs	r2, #16
   2bfb2:	4669      	mov	r1, sp
   2bfb4:	4638      	mov	r0, r7
   2bfb6:	f7ff fd4c 	bl	2ba52 <memcpy1>
        data += 16;
   2bfba:	3610      	adds	r6, #16
        len -= 16;
   2bfbc:	3d10      	subs	r5, #16
   2bfbe:	e7d5      	b.n	2bf6c <AES_CMAC_Update+0x82>

0002bfc0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
   2bfc0:	b570      	push	{r4, r5, r6, lr}
   2bfc2:	460c      	mov	r4, r1
   2bfc4:	b088      	sub	sp, #32
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
   2bfc6:	2210      	movs	r2, #16
   2bfc8:	2100      	movs	r1, #0
{
   2bfca:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
   2bfcc:	4668      	mov	r0, sp
   2bfce:	f7ff fd54 	bl	2ba7a <memset1>

    aes_encrypt( K, K, &ctx->rijndael );
   2bfd2:	4622      	mov	r2, r4
   2bfd4:	4669      	mov	r1, sp
   2bfd6:	4668      	mov	r0, sp
   2bfd8:	f7e8 fa80 	bl	144dc <aes_encrypt>

    if( K[0] & 0x80 )
   2bfdc:	f99d 3000 	ldrsb.w	r3, [sp]
   2bfe0:	466a      	mov	r2, sp
   2bfe2:	2b00      	cmp	r3, #0
    {
        LSHIFT( K, K );
   2bfe4:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
   2bfe8:	da43      	bge.n	2c072 <AES_CMAC_Final+0xb2>
        LSHIFT( K, K );
   2bfea:	7813      	ldrb	r3, [r2, #0]
   2bfec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2bff0:	3101      	adds	r1, #1
   2bff2:	005b      	lsls	r3, r3, #1
   2bff4:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
   2bff8:	290f      	cmp	r1, #15
   2bffa:	f802 3c01 	strb.w	r3, [r2, #-1]
   2bffe:	d1f4      	bne.n	2bfea <AES_CMAC_Final+0x2a>
   2c000:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c004:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
   2c006:	f083 0387 	eor.w	r3, r3, #135	; 0x87
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
   2c00a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        LSHIFT( K, K );
   2c00e:	b2db      	uxtb	r3, r3
    if( ctx->M_n == 16 )
   2c010:	2a10      	cmp	r2, #16
        K[15] ^= 0x87;
   2c012:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ctx->M_n == 16 )
   2c016:	d13b      	bne.n	2c090 <AES_CMAC_Final+0xd0>
   2c018:	4669      	mov	r1, sp
   2c01a:	f504 7380 	add.w	r3, r4, #256	; 0x100
   2c01e:	f504 7088 	add.w	r0, r4, #272	; 0x110
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
   2c022:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   2c026:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c02a:	4298      	cmp	r0, r3
   2c02c:	ea82 0206 	eor.w	r2, r2, r6
   2c030:	701a      	strb	r2, [r3, #0]
   2c032:	d1f6      	bne.n	2c022 <AES_CMAC_Final+0x62>
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
   2c034:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2c038:	f504 7180 	add.w	r1, r4, #256	; 0x100
   2c03c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c040:	7c18      	ldrb	r0, [r3, #16]
   2c042:	4299      	cmp	r1, r3
   2c044:	ea82 0200 	eor.w	r2, r2, r0
   2c048:	701a      	strb	r2, [r3, #0]
   2c04a:	d1f7      	bne.n	2c03c <AES_CMAC_Final+0x7c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c04c:	2210      	movs	r2, #16
   2c04e:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
   2c052:	eb0d 0002 	add.w	r0, sp, r2
   2c056:	f7ff fcfc 	bl	2ba52 <memcpy1>
    aes_encrypt( in, digest, &ctx->rijndael );
   2c05a:	4622      	mov	r2, r4
   2c05c:	4629      	mov	r1, r5
   2c05e:	a804      	add	r0, sp, #16
   2c060:	f7e8 fa3c 	bl	144dc <aes_encrypt>
    memset1( K, 0, sizeof K );
   2c064:	2210      	movs	r2, #16
   2c066:	2100      	movs	r1, #0
   2c068:	4668      	mov	r0, sp
   2c06a:	f7ff fd06 	bl	2ba7a <memset1>
}
   2c06e:	b008      	add	sp, #32
   2c070:	bd70      	pop	{r4, r5, r6, pc}
        LSHIFT( K, K );
   2c072:	7813      	ldrb	r3, [r2, #0]
   2c074:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2c078:	3101      	adds	r1, #1
   2c07a:	005b      	lsls	r3, r3, #1
   2c07c:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
   2c080:	290f      	cmp	r1, #15
   2c082:	f802 3c01 	strb.w	r3, [r2, #-1]
   2c086:	d1f4      	bne.n	2c072 <AES_CMAC_Final+0xb2>
   2c088:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c08c:	005b      	lsls	r3, r3, #1
   2c08e:	e7bc      	b.n	2c00a <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
   2c090:	f99d 3000 	ldrsb.w	r3, [sp]
   2c094:	4669      	mov	r1, sp
   2c096:	2b00      	cmp	r3, #0
            LSHIFT( K, K );
   2c098:	f04f 0000 	mov.w	r0, #0
        if( K[0] & 0x80 )
   2c09c:	da39      	bge.n	2c112 <AES_CMAC_Final+0x152>
            LSHIFT( K, K );
   2c09e:	780b      	ldrb	r3, [r1, #0]
   2c0a0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2c0a4:	3001      	adds	r0, #1
   2c0a6:	005b      	lsls	r3, r3, #1
   2c0a8:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
   2c0ac:	280f      	cmp	r0, #15
   2c0ae:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c0b2:	d1f4      	bne.n	2c09e <AES_CMAC_Final+0xde>
   2c0b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c0b8:	005b      	lsls	r3, r3, #1
            K[15] ^= 0x87;
   2c0ba:	f083 0387 	eor.w	r3, r3, #135	; 0x87
        ctx->M_last[ctx->M_n] = 0x80;
   2c0be:	2180      	movs	r1, #128	; 0x80
            ctx->M_last[ctx->M_n] = 0;
   2c0c0:	2600      	movs	r6, #0
            LSHIFT( K, K );
   2c0c2:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
   2c0c4:	f88d 300f 	strb.w	r3, [sp, #15]
        ctx->M_last[ctx->M_n] = 0x80;
   2c0c8:	18a3      	adds	r3, r4, r2
   2c0ca:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
   2c0ce:	f202 1301 	addw	r3, r2, #257	; 0x101
   2c0d2:	f1c4 21ff 	rsb	r1, r4, #4278255360	; 0xff00ff00
   2c0d6:	4423      	add	r3, r4
   2c0d8:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
   2c0dc:	18c8      	adds	r0, r1, r3
   2c0de:	280f      	cmp	r0, #15
   2c0e0:	d926      	bls.n	2c130 <AES_CMAC_Final+0x170>
   2c0e2:	1c53      	adds	r3, r2, #1
   2c0e4:	2b10      	cmp	r3, #16
   2c0e6:	f1c2 020f 	rsb	r2, r2, #15
   2c0ea:	bf88      	it	hi
   2c0ec:	2200      	movhi	r2, #0
   2c0ee:	4669      	mov	r1, sp
   2c0f0:	441a      	add	r2, r3
   2c0f2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   2c0f6:	f504 7380 	add.w	r3, r4, #256	; 0x100
   2c0fa:	f504 7088 	add.w	r0, r4, #272	; 0x110
        XOR( K, ctx->M_last );
   2c0fe:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   2c102:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c106:	4298      	cmp	r0, r3
   2c108:	ea82 0206 	eor.w	r2, r2, r6
   2c10c:	701a      	strb	r2, [r3, #0]
   2c10e:	d1f6      	bne.n	2c0fe <AES_CMAC_Final+0x13e>
   2c110:	e790      	b.n	2c034 <AES_CMAC_Final+0x74>
            LSHIFT( K, K );
   2c112:	780b      	ldrb	r3, [r1, #0]
   2c114:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2c118:	3001      	adds	r0, #1
   2c11a:	005b      	lsls	r3, r3, #1
   2c11c:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
   2c120:	280f      	cmp	r0, #15
   2c122:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c126:	d1f4      	bne.n	2c112 <AES_CMAC_Final+0x152>
   2c128:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c12c:	005b      	lsls	r3, r3, #1
   2c12e:	e7c6      	b.n	2c0be <AES_CMAC_Final+0xfe>
            ctx->M_last[ctx->M_n] = 0;
   2c130:	f803 6f01 	strb.w	r6, [r3, #1]!
   2c134:	e7d2      	b.n	2c0dc <AES_CMAC_Final+0x11c>

0002c136 <SecureElementComputeAesCmac>:
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
   2c136:	2b7e      	cmp	r3, #126	; 0x7e
   2c138:	d801      	bhi.n	2c13e <SecureElementComputeAesCmac+0x8>
    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
   2c13a:	f7e8 bb35 	b.w	147a8 <ComputeCmac>
}
   2c13e:	2003      	movs	r0, #3
   2c140:	4770      	bx	lr

0002c142 <SecureElementVerifyAesCmac>:
{
   2c142:	b530      	push	{r4, r5, lr}
   2c144:	460d      	mov	r5, r1
   2c146:	4614      	mov	r4, r2
    if( buffer == NULL )
   2c148:	4601      	mov	r1, r0
{
   2c14a:	b085      	sub	sp, #20
    if( buffer == NULL )
   2c14c:	b168      	cbz	r0, 2c16a <SecureElementVerifyAesCmac+0x28>
    uint32_t              compCmac = 0;
   2c14e:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
   2c150:	aa03      	add	r2, sp, #12
   2c152:	9200      	str	r2, [sp, #0]
   2c154:	462a      	mov	r2, r5
    uint32_t              compCmac = 0;
   2c156:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
   2c158:	f7e8 fb26 	bl	147a8 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
   2c15c:	b918      	cbnz	r0, 2c166 <SecureElementVerifyAesCmac+0x24>
    if( expectedCmac != compCmac )
   2c15e:	9803      	ldr	r0, [sp, #12]
   2c160:	1b00      	subs	r0, r0, r4
   2c162:	bf18      	it	ne
   2c164:	2001      	movne	r0, #1
}
   2c166:	b005      	add	sp, #20
   2c168:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   2c16a:	2002      	movs	r0, #2
   2c16c:	e7fb      	b.n	2c166 <SecureElementVerifyAesCmac+0x24>

0002c16e <SecureElementSetKey>:
    if( key == NULL )
   2c16e:	b109      	cbz	r1, 2c174 <SecureElementSetKey+0x6>
   2c170:	f7e8 bbf8 	b.w	14964 <SecureElementSetKey.part.0>
}
   2c174:	2002      	movs	r0, #2
   2c176:	4770      	bx	lr

0002c178 <SecureElementDeriveAndStoreKey>:
{
   2c178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2c17a:	4614      	mov	r4, r2
    if( input == NULL )
   2c17c:	b1a0      	cbz	r0, 2c1a8 <SecureElementDeriveAndStoreKey+0x30>
    uint8_t               key[16] = { 0 };
   2c17e:	2300      	movs	r3, #0
    if( targetKeyID == MC_KE_KEY )
   2c180:	2a7f      	cmp	r2, #127	; 0x7f
    uint8_t               key[16] = { 0 };
   2c182:	e9cd 3300 	strd	r3, r3, [sp]
   2c186:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( targetKeyID == MC_KE_KEY )
   2c18a:	d101      	bne.n	2c190 <SecureElementDeriveAndStoreKey+0x18>
        if( rootKeyID != MC_ROOT_KEY )
   2c18c:	2908      	cmp	r1, #8
   2c18e:	d10d      	bne.n	2c1ac <SecureElementDeriveAndStoreKey+0x34>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
   2c190:	460a      	mov	r2, r1
   2c192:	466b      	mov	r3, sp
   2c194:	2110      	movs	r1, #16
   2c196:	f7e8 fba7 	bl	148e8 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
   2c19a:	b918      	cbnz	r0, 2c1a4 <SecureElementDeriveAndStoreKey+0x2c>
    if( key == NULL )
   2c19c:	4669      	mov	r1, sp
   2c19e:	4620      	mov	r0, r4
   2c1a0:	f7e8 fbe0 	bl	14964 <SecureElementSetKey.part.0>
}
   2c1a4:	b004      	add	sp, #16
   2c1a6:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   2c1a8:	2002      	movs	r0, #2
   2c1aa:	e7fb      	b.n	2c1a4 <SecureElementDeriveAndStoreKey+0x2c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   2c1ac:	2003      	movs	r0, #3
   2c1ae:	e7f9      	b.n	2c1a4 <SecureElementDeriveAndStoreKey+0x2c>

0002c1b0 <SecureElementProcessJoinAccept>:
{
   2c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c1b4:	b091      	sub	sp, #68	; 0x44
   2c1b6:	4681      	mov	r9, r0
   2c1b8:	e9dd 641b 	ldrd	r6, r4, [sp, #108]	; 0x6c
   2c1bc:	468a      	mov	sl, r1
   2c1be:	4617      	mov	r7, r2
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
   2c1c0:	4698      	mov	r8, r3
{
   2c1c2:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
   2c1c6:	2b00      	cmp	r3, #0
   2c1c8:	d06c      	beq.n	2c2a4 <SecureElementProcessJoinAccept+0xf4>
   2c1ca:	2e00      	cmp	r6, #0
   2c1cc:	d06a      	beq.n	2c2a4 <SecureElementProcessJoinAccept+0xf4>
   2c1ce:	2c00      	cmp	r4, #0
   2c1d0:	d068      	beq.n	2c2a4 <SecureElementProcessJoinAccept+0xf4>
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
   2c1d2:	2d21      	cmp	r5, #33	; 0x21
   2c1d4:	d868      	bhi.n	2c2a8 <SecureElementProcessJoinAccept+0xf8>
        encKeyID = J_S_ENC_KEY;
   2c1d6:	28ff      	cmp	r0, #255	; 0xff
   2c1d8:	bf0c      	ite	eq
   2c1da:	f04f 0b01 	moveq.w	fp, #1
   2c1de:	f04f 0b03 	movne.w	fp, #3
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
   2c1e2:	4619      	mov	r1, r3
   2c1e4:	462a      	mov	r2, r5
   2c1e6:	4630      	mov	r0, r6
   2c1e8:	f7ff fc33 	bl	2ba52 <memcpy1>
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
   2c1ec:	1e69      	subs	r1, r5, #1
   2c1ee:	465a      	mov	r2, fp
   2c1f0:	1c73      	adds	r3, r6, #1
   2c1f2:	b289      	uxth	r1, r1
   2c1f4:	f108 0001 	add.w	r0, r8, #1
   2c1f8:	f7e8 fb76 	bl	148e8 <SecureElementAesEncrypt>
   2c1fc:	4683      	mov	fp, r0
   2c1fe:	2800      	cmp	r0, #0
   2c200:	d154      	bne.n	2c2ac <SecureElementProcessJoinAccept+0xfc>
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
   2c202:	f896 800b 	ldrb.w	r8, [r6, #11]
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
   2c206:	1973      	adds	r3, r6, r5
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
   2c208:	ea4f 18d8 	mov.w	r8, r8, lsr #7
   2c20c:	f884 8000 	strb.w	r8, [r4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c210:	f813 4c02 	ldrb.w	r4, [r3, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
   2c214:	f813 1c03 	ldrb.w	r1, [r3, #-3]
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
   2c218:	f813 2c04 	ldrb.w	r2, [r3, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c21c:	0424      	lsls	r4, r4, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
   2c21e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c222:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
   2c226:	4314      	orrs	r4, r2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
   2c228:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    if( *versionMinor == 0 )
   2c22c:	f1b8 0f00 	cmp.w	r8, #0
   2c230:	d10c      	bne.n	2c24c <SecureElementProcessJoinAccept+0x9c>
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
   2c232:	1f29      	subs	r1, r5, #4
   2c234:	2301      	movs	r3, #1
   2c236:	4622      	mov	r2, r4
   2c238:	4630      	mov	r0, r6
   2c23a:	b289      	uxth	r1, r1
   2c23c:	f7ff ff81 	bl	2c142 <SecureElementVerifyAesCmac>
   2c240:	3800      	subs	r0, #0
   2c242:	bf18      	it	ne
   2c244:	2001      	movne	r0, #1
}
   2c246:	b011      	add	sp, #68	; 0x44
   2c248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c24c:	e9cd 0001 	strd	r0, r0, [sp, #4]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c250:	2208      	movs	r2, #8
   2c252:	4651      	mov	r1, sl
        uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c254:	9003      	str	r0, [sp, #12]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c256:	f10d 0005 	add.w	r0, sp, #5
        micHeader11[bufItr++] = ( uint8_t ) joinReqType;
   2c25a:	f88d 9004 	strb.w	r9, [sp, #4]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c25e:	f7ff fc02 	bl	2ba66 <memcpyr>
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c262:	2229      	movs	r2, #41	; 0x29
   2c264:	4659      	mov	r1, fp
        micHeader11[bufItr++] = devNonce & 0xFF;
   2c266:	f88d 700d 	strb.w	r7, [sp, #13]
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c26a:	a805      	add	r0, sp, #20
        micHeader11[bufItr++] = ( devNonce >> 8 ) & 0xFF;
   2c26c:	0a3f      	lsrs	r7, r7, #8
   2c26e:	f88d 700e 	strb.w	r7, [sp, #14]
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c272:	f8cd b010 	str.w	fp, [sp, #16]
   2c276:	f005 fa84 	bl	31782 <memset>
        memcpy1( localBuffer, micHeader11, JOIN_ACCEPT_MIC_COMPUTATION_OFFSET );
   2c27a:	220c      	movs	r2, #12
   2c27c:	a901      	add	r1, sp, #4
   2c27e:	a804      	add	r0, sp, #16
   2c280:	f7ff fbe7 	bl	2ba52 <memcpy1>
        memcpy1( localBuffer + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET - 1, decJoinAccept, encJoinAcceptSize );
   2c284:	462a      	mov	r2, r5
   2c286:	4631      	mov	r1, r6
   2c288:	f10d 001b 	add.w	r0, sp, #27
   2c28c:	f7ff fbe1 	bl	2ba52 <memcpy1>
        if( SecureElementVerifyAesCmac( localBuffer,
   2c290:	2302      	movs	r3, #2
   2c292:	4622      	mov	r2, r4
   2c294:	1de9      	adds	r1, r5, #7
   2c296:	a804      	add	r0, sp, #16
   2c298:	f7ff ff53 	bl	2c142 <SecureElementVerifyAesCmac>
            return SECURE_ELEMENT_FAIL_CMAC;
   2c29c:	2800      	cmp	r0, #0
   2c29e:	bf18      	it	ne
   2c2a0:	4640      	movne	r0, r8
   2c2a2:	e7d0      	b.n	2c246 <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_ERROR_NPE;
   2c2a4:	2002      	movs	r0, #2
   2c2a6:	e7ce      	b.n	2c246 <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
   2c2a8:	2005      	movs	r0, #5
   2c2aa:	e7cc      	b.n	2c246 <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_FAIL_ENCRYPT;
   2c2ac:	2007      	movs	r0, #7
   2c2ae:	e7ca      	b.n	2c246 <SecureElementProcessJoinAccept+0x96>

0002c2b0 <SoftSeHalGetUniqueId>:

#include "soft-se-hal.h"

void SoftSeHalGetUniqueId( uint8_t *id )
{
    BoardGetUniqueId( id );
   2c2b0:	f7ff bb31 	b.w	2b916 <BoardGetUniqueId>

0002c2b4 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
   2c2b4:	b1d8      	cbz	r0, 2c2ee <DetermineFrameType+0x3a>
   2c2b6:	b1d1      	cbz	r1, 2c2ee <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
   2c2b8:	7b03      	ldrb	r3, [r0, #12]
   2c2ba:	071b      	lsls	r3, r3, #28
   2c2bc:	d007      	beq.n	2c2ce <DetermineFrameType+0x1a>
   2c2be:	f890 3020 	ldrb.w	r3, [r0, #32]
   2c2c2:	b983      	cbnz	r3, 2c2e6 <DetermineFrameType+0x32>
    else if( macMsg->FRMPayloadSize == 0 )
   2c2c4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2c2c8:	b17b      	cbz	r3, 2c2ea <DetermineFrameType+0x36>
        return LORAMAC_STATUS_ERROR;
   2c2ca:	2017      	movs	r0, #23
   2c2cc:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
   2c2ce:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2c2d2:	b153      	cbz	r3, 2c2ea <DetermineFrameType+0x36>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
   2c2d4:	f890 3020 	ldrb.w	r3, [r0, #32]
   2c2d8:	2b00      	cmp	r3, #0
   2c2da:	bf14      	ite	ne
   2c2dc:	2303      	movne	r3, #3
   2c2de:	2302      	moveq	r3, #2
    return LORAMAC_STATUS_OK;
   2c2e0:	2000      	movs	r0, #0
        *fType = FRAME_TYPE_C;
   2c2e2:	700b      	strb	r3, [r1, #0]
   2c2e4:	4770      	bx	lr
   2c2e6:	2300      	movs	r3, #0
   2c2e8:	e7fa      	b.n	2c2e0 <DetermineFrameType+0x2c>
    else if( macMsg->FRMPayloadSize == 0 )
   2c2ea:	2301      	movs	r3, #1
   2c2ec:	e7f8      	b.n	2c2e0 <DetermineFrameType+0x2c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   2c2ee:	2003      	movs	r0, #3
}
   2c2f0:	4770      	bx	lr

0002c2f2 <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
   2c2f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2f6:	b08b      	sub	sp, #44	; 0x2c
   2c2f8:	468a      	mov	sl, r1
   2c2fa:	9300      	str	r3, [sp, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
   2c2fc:	6841      	ldr	r1, [r0, #4]
   2c2fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    int8_t datarate = adrNext->Datarate;
   2c300:	f990 800c 	ldrsb.w	r8, [r0, #12]
    int8_t txPower = adrNext->TxPower;
   2c304:	f990 600d 	ldrsb.w	r6, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
   2c308:	f890 b00e 	ldrb.w	fp, [r0, #14]
    *adrAckCounter = adrNext->AdrAckCounter;
   2c30c:	6019      	str	r1, [r3, #0]

    if( adrNext->AdrEnabled == true )
   2c30e:	7847      	ldrb	r7, [r0, #1]
{
   2c310:	4604      	mov	r4, r0
   2c312:	4691      	mov	r9, r2
    if( adrNext->AdrEnabled == true )
   2c314:	2f00      	cmp	r7, #0
   2c316:	d058      	beq.n	2c3ca <LoRaMacAdrCalcNext+0xd8>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
   2c318:	2302      	movs	r3, #2
   2c31a:	f88d 3010 	strb.w	r3, [sp, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c31e:	7bc3      	ldrb	r3, [r0, #15]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c320:	a904      	add	r1, sp, #16
   2c322:	7c00      	ldrb	r0, [r0, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c324:	f88d 3012 	strb.w	r3, [sp, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c328:	f000 fb77 	bl	2ca1a <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
        datarate = MAX( datarate, minTxDatarate );

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c32c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
        minTxDatarate = phyParam.Value;
   2c330:	b243      	sxtb	r3, r0
        {
            adrAckReq = true;
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c332:	8961      	ldrh	r1, [r4, #10]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c334:	6860      	ldr	r0, [r4, #4]
        datarate = MAX( datarate, minTxDatarate );
   2c336:	4598      	cmp	r8, r3
   2c338:	4645      	mov	r5, r8
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c33a:	4461      	add	r1, ip
        datarate = MAX( datarate, minTxDatarate );
   2c33c:	bfb8      	it	lt
   2c33e:	461d      	movlt	r5, r3
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c340:	4560      	cmp	r0, ip
   2c342:	bf34      	ite	cc
   2c344:	2700      	movcc	r7, #0
   2c346:	2701      	movcs	r7, #1
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c348:	4288      	cmp	r0, r1
   2c34a:	d309      	bcc.n	2c360 <LoRaMacAdrCalcNext+0x6e>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
   2c34c:	210a      	movs	r1, #10
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c34e:	7c20      	ldrb	r0, [r4, #16]
            getPhy.Attribute = PHY_DEF_TX_POWER;
   2c350:	f88d 1010 	strb.w	r1, [sp, #16]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c354:	a904      	add	r1, sp, #16
   2c356:	9301      	str	r3, [sp, #4]
   2c358:	f000 fb5f 	bl	2ca1a <RegionGetPhyParam>
            txPower = phyParam.Value;
   2c35c:	9b01      	ldr	r3, [sp, #4]
   2c35e:	b246      	sxtb	r6, r0
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
   2c360:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   2c364:	8960      	ldrh	r0, [r4, #10]
   2c366:	6861      	ldr	r1, [r4, #4]
   2c368:	eb0c 0e40 	add.w	lr, ip, r0, lsl #1
   2c36c:	4571      	cmp	r1, lr
   2c36e:	d319      	bcc.n	2c3a4 <LoRaMacAdrCalcNext+0xb2>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
   2c370:	eba1 010c 	sub.w	r1, r1, ip
   2c374:	fbb1 fcf0 	udiv	ip, r1, r0
   2c378:	fb00 111c 	mls	r1, r0, ip, r1
   2c37c:	b991      	cbnz	r1, 2c3a4 <LoRaMacAdrCalcNext+0xb2>
            {
                if( datarate == minTxDatarate )
   2c37e:	4598      	cmp	r8, r3
   2c380:	dc03      	bgt.n	2c38a <LoRaMacAdrCalcNext+0x98>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
   2c382:	7823      	ldrb	r3, [r4, #0]
   2c384:	b9cb      	cbnz	r3, 2c3ba <LoRaMacAdrCalcNext+0xc8>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
                        RegionInitDefaults( adrNext->Region, &params );
                    }

                    // Restore NbTrans
                    nbTrans = 1;
   2c386:	f04f 0b01 	mov.w	fp, #1
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
   2c38a:	2320      	movs	r3, #32
   2c38c:	f88d 3010 	strb.w	r3, [sp, #16]
                getPhy.Datarate = datarate;
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c390:	7be3      	ldrb	r3, [r4, #15]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c392:	7c20      	ldrb	r0, [r4, #16]
   2c394:	a904      	add	r1, sp, #16
                getPhy.Datarate = datarate;
   2c396:	f88d 5011 	strb.w	r5, [sp, #17]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c39a:	f88d 3012 	strb.w	r3, [sp, #18]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c39e:	f000 fb3c 	bl	2ca1a <RegionGetPhyParam>
                datarate = phyParam.Value;
   2c3a2:	b245      	sxtb	r5, r0

    *drOut = datarate;
    *txPowOut = txPower;
    *nbTransOut = nbTrans;
    return adrAckReq;
}
   2c3a4:	4638      	mov	r0, r7
    *nbTransOut = nbTrans;
   2c3a6:	9b00      	ldr	r3, [sp, #0]
    *drOut = datarate;
   2c3a8:	f88a 5000 	strb.w	r5, [sl]
    *txPowOut = txPower;
   2c3ac:	f889 6000 	strb.w	r6, [r9]
    *nbTransOut = nbTrans;
   2c3b0:	f883 b000 	strb.w	fp, [r3]
}
   2c3b4:	b00b      	add	sp, #44	; 0x2c
   2c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   2c3ba:	2302      	movs	r3, #2
                        RegionInitDefaults( adrNext->Region, &params );
   2c3bc:	7c20      	ldrb	r0, [r4, #16]
   2c3be:	a906      	add	r1, sp, #24
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   2c3c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        RegionInitDefaults( adrNext->Region, &params );
   2c3c4:	f000 fb39 	bl	2ca3a <RegionInitDefaults>
   2c3c8:	e7dd      	b.n	2c386 <LoRaMacAdrCalcNext+0x94>
    int8_t datarate = adrNext->Datarate;
   2c3ca:	4645      	mov	r5, r8
   2c3cc:	e7ea      	b.n	2c3a4 <LoRaMacAdrCalcNext+0xb2>

0002c3ce <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
   2c3ce:	4770      	bx	lr

0002c3d0 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c3d0:	4770      	bx	lr

0002c3d2 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
   2c3d2:	4770      	bx	lr

0002c3d4 <LoRaMacClassBSetMulticastSlotState>:
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
   2c3d4:	4770      	bx	lr

0002c3d6 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c3d6:	2000      	movs	r0, #0
   2c3d8:	4770      	bx	lr

0002c3da <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c3da:	4770      	bx	lr

0002c3dc <LoRaMacClassBPingSlotTimerEvent>:
        TimerStart( &Ctx.BeaconTimer );
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
   2c3dc:	4770      	bx	lr

0002c3de <LoRaMacClassBMulticastSlotTimerEvent>:
        }
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
   2c3de:	4770      	bx	lr

0002c3e0 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c3e0:	2000      	movs	r0, #0
   2c3e2:	4770      	bx	lr

0002c3e4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
   2c3e4:	2000      	movs	r0, #0
   2c3e6:	4770      	bx	lr

0002c3e8 <LoRaMacClassBIsPingExpected>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsPingExpected( void )
   2c3e8:	2000      	movs	r0, #0
   2c3ea:	4770      	bx	lr

0002c3ec <LoRaMacClassBIsMulticastExpected>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsMulticastExpected( void )
   2c3ec:	2000      	movs	r0, #0
   2c3ee:	4770      	bx	lr

0002c3f0 <LoRaMacClassBIsBeaconModeActive>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
   2c3f0:	2000      	movs	r0, #0
   2c3f2:	4770      	bx	lr

0002c3f4 <LoRaMacClassBSetPingSlotInfo>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
   2c3f4:	4770      	bx	lr

0002c3f6 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c3f6:	4770      	bx	lr

0002c3f8 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
   2c3f8:	4770      	bx	lr

0002c3fa <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c3fa:	2002      	movs	r0, #2
   2c3fc:	4770      	bx	lr

0002c3fe <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c3fe:	2002      	movs	r0, #2
   2c400:	4770      	bx	lr

0002c402 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
   2c402:	2002      	movs	r0, #2
   2c404:	4770      	bx	lr

0002c406 <LoRaMacClassBPingSlotInfoAns>:
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBPingSlotInfoAns( void )
   2c406:	4770      	bx	lr

0002c408 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c408:	2000      	movs	r0, #0
   2c40a:	4770      	bx	lr

0002c40c <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c40c:	4770      	bx	lr

0002c40e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
   2c40e:	4770      	bx	lr

0002c410 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c410:	2000      	movs	r0, #0
   2c412:	4770      	bx	lr

0002c414 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c414:	2000      	movs	r0, #0
   2c416:	4770      	bx	lr

0002c418 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
   2c418:	4770      	bx	lr

0002c41a <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
   2c41a:	4770      	bx	lr

0002c41c <LoRaMacClassBProcess>:

void LoRaMacClassBProcess( void )
   2c41c:	4770      	bx	lr

0002c41e <DeriveSessionKey11x>:
{
   2c41e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c420:	460c      	mov	r4, r1
   2c422:	4605      	mov	r5, r0
   2c424:	461f      	mov	r7, r3
    if( joinEUI == 0 )
   2c426:	4611      	mov	r1, r2
{
   2c428:	b085      	sub	sp, #20
    if( joinEUI == 0 )
   2c42a:	b362      	cbz	r2, 2c486 <DeriveSessionKey11x+0x68>
    switch( keyID )
   2c42c:	2806      	cmp	r0, #6
   2c42e:	d006      	beq.n	2c43e <DeriveSessionKey11x+0x20>
   2c430:	2807      	cmp	r0, #7
   2c432:	d006      	beq.n	2c442 <DeriveSessionKey11x+0x24>
   2c434:	2805      	cmp	r0, #5
   2c436:	d024      	beq.n	2c482 <DeriveSessionKey11x+0x64>
   2c438:	2001      	movs	r0, #1
    KeyIdentifier_t rootKeyId = NWK_KEY;
   2c43a:	2601      	movs	r6, #1
   2c43c:	e003      	b.n	2c446 <DeriveSessionKey11x+0x28>
    switch( keyID )
   2c43e:	2004      	movs	r0, #4
   2c440:	e7fb      	b.n	2c43a <DeriveSessionKey11x+0x1c>
   2c442:	2002      	movs	r0, #2
            rootKeyId = APP_KEY;
   2c444:	2600      	movs	r6, #0
    uint8_t compBase[16] = { 0 };
   2c446:	2300      	movs	r3, #0
    memcpyr( compBase + 4, joinEUI, 8 );
   2c448:	2208      	movs	r2, #8
    uint8_t compBase[16] = { 0 };
   2c44a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2c44e:	9303      	str	r3, [sp, #12]
            compBase[0] = 0x03;
   2c450:	f88d 0000 	strb.w	r0, [sp]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c454:	0a23      	lsrs	r3, r4, #8
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
   2c456:	f88d 4001 	strb.w	r4, [sp, #1]
    memcpyr( compBase + 4, joinEUI, 8 );
   2c45a:	a801      	add	r0, sp, #4
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c45c:	0c24      	lsrs	r4, r4, #16
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c45e:	f88d 3002 	strb.w	r3, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c462:	f88d 4003 	strb.w	r4, [sp, #3]
    memcpyr( compBase + 4, joinEUI, 8 );
   2c466:	f7ff fafe 	bl	2ba66 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c46a:	462a      	mov	r2, r5
   2c46c:	4631      	mov	r1, r6
   2c46e:	4668      	mov	r0, sp
    compBase[12] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
   2c470:	f8ad 700c 	strh.w	r7, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c474:	f7ff fe80 	bl	2c178 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c478:	2800      	cmp	r0, #0
   2c47a:	bf18      	it	ne
   2c47c:	200e      	movne	r0, #14
}
   2c47e:	b005      	add	sp, #20
   2c480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch( keyID )
   2c482:	2003      	movs	r0, #3
   2c484:	e7d9      	b.n	2c43a <DeriveSessionKey11x+0x1c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c486:	2009      	movs	r0, #9
   2c488:	e7f9      	b.n	2c47e <DeriveSessionKey11x+0x60>

0002c48a <DeriveSessionKey10x>:
{
   2c48a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t compBase[16] = { 0 };
   2c48c:	2400      	movs	r4, #0
            compBase[0] = 0x01;
   2c48e:	2807      	cmp	r0, #7
    uint8_t compBase[16] = { 0 };
   2c490:	e9cd 4402 	strd	r4, r4, [sp, #8]
            compBase[0] = 0x01;
   2c494:	bf0c      	ite	eq
   2c496:	2402      	moveq	r4, #2
   2c498:	2401      	movne	r4, #1
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
   2c49a:	f88d 1001 	strb.w	r1, [sp, #1]
   2c49e:	f88d 4000 	strb.w	r4, [sp]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
   2c4a2:	f8ad 2004 	strh.w	r2, [sp, #4]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c4a6:	0a0c      	lsrs	r4, r1, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
   2c4a8:	0c12      	lsrs	r2, r2, #16
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c4aa:	0c09      	lsrs	r1, r1, #16
   2c4ac:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
   2c4b0:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
   2c4b4:	f88d 3007 	strb.w	r3, [sp, #7]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c4b8:	4602      	mov	r2, r0
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
   2c4ba:	0a1b      	lsrs	r3, r3, #8
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c4bc:	2101      	movs	r1, #1
   2c4be:	4668      	mov	r0, sp
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c4c0:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
   2c4c4:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c4c8:	f7ff fe56 	bl	2c178 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c4cc:	2800      	cmp	r0, #0
}
   2c4ce:	bf18      	it	ne
   2c4d0:	200e      	movne	r0, #14
   2c4d2:	b004      	add	sp, #16
   2c4d4:	bd10      	pop	{r4, pc}

0002c4d6 <PayloadEncrypt>:
{
   2c4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c4da:	b088      	sub	sp, #32
   2c4dc:	4690      	mov	r8, r2
   2c4de:	460d      	mov	r5, r1
    if( buffer == 0 )
   2c4e0:	4607      	mov	r7, r0
{
   2c4e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
   2c4e4:	2800      	cmp	r0, #0
   2c4e6:	d047      	beq.n	2c578 <PayloadEncrypt+0xa2>
    uint8_t sBlock[16] = { 0 };
   2c4e8:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
   2c4ea:	2101      	movs	r1, #1
    uint8_t aBlock[16] = { 0 };
   2c4ec:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
   2c4f0:	f88d 1010 	strb.w	r1, [sp, #16]
    aBlock[5] = dir;
   2c4f4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    aBlock[6] = address & 0xFF;
   2c4f8:	f8ad 3016 	strh.w	r3, [sp, #22]
    aBlock[5] = dir;
   2c4fc:	f88d 1015 	strb.w	r1, [sp, #21]
    uint8_t sBlock[16] = { 0 };
   2c500:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   2c504:	0c19      	lsrs	r1, r3, #16
    uint8_t sBlock[16] = { 0 };
   2c506:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
   2c50a:	0e1b      	lsrs	r3, r3, #24
   2c50c:	f88d 3019 	strb.w	r3, [sp, #25]
    aBlock[10] = frameCounter & 0xFF;
   2c510:	f8ad 201a 	strh.w	r2, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   2c514:	0c13      	lsrs	r3, r2, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   2c516:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
   2c518:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   2c51a:	f88d 1018 	strb.w	r1, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   2c51e:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   2c522:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
   2c526:	b2e3      	uxtb	r3, r4
   2c528:	011e      	lsls	r6, r3, #4
   2c52a:	2d00      	cmp	r5, #0
   2c52c:	b2f6      	uxtb	r6, r6
   2c52e:	dc03      	bgt.n	2c538 <PayloadEncrypt+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
   2c530:	2000      	movs	r0, #0
}
   2c532:	b008      	add	sp, #32
   2c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
   2c538:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
   2c53a:	3301      	adds	r3, #1
   2c53c:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
   2c540:	4642      	mov	r2, r8
   2c542:	466b      	mov	r3, sp
   2c544:	eb0d 0001 	add.w	r0, sp, r1
   2c548:	f7e8 f9ce 	bl	148e8 <SecureElementAesEncrypt>
   2c54c:	4603      	mov	r3, r0
   2c54e:	b9a8      	cbnz	r0, 2c57c <PayloadEncrypt+0xa6>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c550:	2d10      	cmp	r5, #16
   2c552:	4628      	mov	r0, r5
   2c554:	4669      	mov	r1, sp
   2c556:	bfa8      	it	ge
   2c558:	2010      	movge	r0, #16
   2c55a:	443e      	add	r6, r7
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c55c:	7832      	ldrb	r2, [r6, #0]
   2c55e:	f811 cb01 	ldrb.w	ip, [r1], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c562:	3301      	adds	r3, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c564:	ea82 020c 	eor.w	r2, r2, ip
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c568:	4298      	cmp	r0, r3
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c56a:	f806 2b01 	strb.w	r2, [r6], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c56e:	dcf5      	bgt.n	2c55c <PayloadEncrypt+0x86>
        size -= 16;
   2c570:	3d10      	subs	r5, #16
   2c572:	b22d      	sxth	r5, r5
        bufferIndex += 16;
   2c574:	3401      	adds	r4, #1
   2c576:	e7d6      	b.n	2c526 <PayloadEncrypt+0x50>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c578:	2009      	movs	r0, #9
   2c57a:	e7da      	b.n	2c532 <PayloadEncrypt+0x5c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c57c:	200e      	movs	r0, #14
   2c57e:	e7d8      	b.n	2c532 <PayloadEncrypt+0x5c>

0002c580 <LoRaMacCryptoDeriveMcKEKey.part.0>:
LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
   2c580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
   2c582:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c584:	227f      	movs	r2, #127	; 0x7f
   2c586:	2108      	movs	r1, #8
   2c588:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
   2c58a:	e9cd 3300 	strd	r3, r3, [sp]
   2c58e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c592:	f7ff fdf1 	bl	2c178 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c596:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   2c598:	bf18      	it	ne
   2c59a:	200e      	movne	r0, #14
   2c59c:	b005      	add	sp, #20
   2c59e:	f85d fb04 	ldr.w	pc, [sp], #4

0002c5a2 <ComputeCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
   2c5a2:	b570      	push	{r4, r5, r6, lr}
   2c5a4:	b086      	sub	sp, #24
   2c5a6:	460c      	mov	r4, r1
   2c5a8:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
   2c5ac:	4613      	mov	r3, r2
    if( ( msg == 0 ) || ( cmac == 0 ) )
   2c5ae:	4601      	mov	r1, r0
   2c5b0:	b330      	cbz	r0, 2c600 <ComputeCmacB0.constprop.0+0x5e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   2c5b2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   2c5b6:	d825      	bhi.n	2c604 <ComputeCmacB0.constprop.0+0x62>
    b0[0] = 0x49;
   2c5b8:	2249      	movs	r2, #73	; 0x49
   2c5ba:	9202      	str	r2, [sp, #8]
    b0[4] = 0x00;
   2c5bc:	2200      	movs	r2, #0
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   2c5be:	0c30      	lsrs	r0, r6, #16
    b0[4] = 0x00;
   2c5c0:	f8ad 200c 	strh.w	r2, [sp, #12]
    b0[14] = 0x00;
   2c5c4:	f88d 2016 	strb.w	r2, [sp, #22]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c5c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   2c5ca:	f88d 0010 	strb.w	r0, [sp, #16]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   2c5ce:	0c28      	lsrs	r0, r5, #16
    b0[6] = devAddr & 0xFF;
   2c5d0:	f8ad 600e 	strh.w	r6, [sp, #14]
    b0[10] = fCnt & 0xFF;
   2c5d4:	f8ad 5012 	strh.w	r5, [sp, #18]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   2c5d8:	f88d 0014 	strb.w	r0, [sp, #20]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c5dc:	9200      	str	r2, [sp, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   2c5de:	0e36      	lsrs	r6, r6, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c5e0:	4622      	mov	r2, r4
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   2c5e2:	0e2d      	lsrs	r5, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c5e4:	a802      	add	r0, sp, #8
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   2c5e6:	f88d 6011 	strb.w	r6, [sp, #17]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   2c5ea:	f88d 5015 	strb.w	r5, [sp, #21]
    b0[15] = msgLen & 0xFF;
   2c5ee:	f88d 4017 	strb.w	r4, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c5f2:	f7ff fda0 	bl	2c136 <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c5f6:	2800      	cmp	r0, #0
   2c5f8:	bf18      	it	ne
   2c5fa:	200e      	movne	r0, #14
}
   2c5fc:	b006      	add	sp, #24
   2c5fe:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c600:	2009      	movs	r0, #9
   2c602:	e7fb      	b.n	2c5fc <ComputeCmacB0.constprop.0+0x5a>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   2c604:	200d      	movs	r0, #13
   2c606:	e7f9      	b.n	2c5fc <ComputeCmacB0.constprop.0+0x5a>

0002c608 <LoRaMacCryptoGetFCntDown>:
    uint32_t lastDown = 0;
   2c608:	2300      	movs	r3, #0
{
   2c60a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c60c:	460c      	mov	r4, r1
    if( currentDown == NULL )
   2c60e:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
   2c610:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
   2c612:	b1ca      	cbz	r2, 2c648 <LoRaMacCryptoGetFCntDown+0x40>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
   2c614:	a901      	add	r1, sp, #4
   2c616:	f7eb fc49 	bl	17eac <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   2c61a:	b918      	cbnz	r0, 2c624 <LoRaMacCryptoGetFCntDown+0x1c>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
   2c61c:	9b01      	ldr	r3, [sp, #4]
   2c61e:	1c5a      	adds	r2, r3, #1
   2c620:	d102      	bne.n	2c628 <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
   2c622:	602c      	str	r4, [r5, #0]
}
   2c624:	b003      	add	sp, #12
   2c626:	bd30      	pop	{r4, r5, pc}
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
   2c628:	b29a      	uxth	r2, r3
   2c62a:	1aa2      	subs	r2, r4, r2
        if( fCntDiff > 0 )
   2c62c:	2a00      	cmp	r2, #0
   2c62e:	dd01      	ble.n	2c634 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown + fCntDiff;
   2c630:	189c      	adds	r4, r3, r2
   2c632:	e7f6      	b.n	2c622 <LoRaMacCryptoGetFCntDown+0x1a>
        else if( fCntDiff == 0 )
   2c634:	d102      	bne.n	2c63c <LoRaMacCryptoGetFCntDown+0x34>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
   2c636:	2007      	movs	r0, #7
            *currentDown = lastDown;
   2c638:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
   2c63a:	e7f3      	b.n	2c624 <LoRaMacCryptoGetFCntDown+0x1c>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
   2c63c:	0c1b      	lsrs	r3, r3, #16
   2c63e:	041b      	lsls	r3, r3, #16
   2c640:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2c644:	441c      	add	r4, r3
   2c646:	e7ec      	b.n	2c622 <LoRaMacCryptoGetFCntDown+0x1a>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c648:	2009      	movs	r0, #9
   2c64a:	e7eb      	b.n	2c624 <LoRaMacCryptoGetFCntDown+0x1c>

0002c64c <LoRaMacCryptoDeriveMcRootKey>:
{
   2c64c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
   2c64e:	b9b1      	cbnz	r1, 2c67e <LoRaMacCryptoDeriveMcRootKey+0x32>
    if( versionMinor == 1 )
   2c650:	2801      	cmp	r0, #1
        compBase[0] = 0x20;
   2c652:	bf08      	it	eq
   2c654:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
   2c656:	e9cd 1100 	strd	r1, r1, [sp]
   2c65a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c65e:	f04f 0208 	mov.w	r2, #8
   2c662:	f04f 0100 	mov.w	r1, #0
   2c666:	4668      	mov	r0, sp
        compBase[0] = 0x20;
   2c668:	bf08      	it	eq
   2c66a:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c66e:	f7ff fd83 	bl	2c178 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c672:	2800      	cmp	r0, #0
   2c674:	bf18      	it	ne
   2c676:	200e      	movne	r0, #14
}
   2c678:	b005      	add	sp, #20
   2c67a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
   2c67e:	200a      	movs	r0, #10
   2c680:	e7fa      	b.n	2c678 <LoRaMacCryptoDeriveMcRootKey+0x2c>

0002c682 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
   2c682:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c684:	4604      	mov	r4, r0
   2c686:	2800      	cmp	r0, #0
   2c688:	d045      	beq.n	2c716 <LoRaMacParserJoinAccept+0x94>
   2c68a:	6801      	ldr	r1, [r0, #0]
   2c68c:	2900      	cmp	r1, #0
   2c68e:	d042      	beq.n	2c716 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c690:	f811 3b01 	ldrb.w	r3, [r1], #1

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
   2c694:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c696:	7143      	strb	r3, [r0, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
   2c698:	3006      	adds	r0, #6
   2c69a:	f7ff f9da 	bl	2ba52 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
   2c69e:	4620      	mov	r0, r4
   2c6a0:	f850 1b09 	ldr.w	r1, [r0], #9
   2c6a4:	2203      	movs	r2, #3
   2c6a6:	3104      	adds	r1, #4
   2c6a8:	f7ff f9d3 	bl	2ba52 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c6ac:	6821      	ldr	r1, [r4, #0]
   2c6ae:	79cb      	ldrb	r3, [r1, #7]
   2c6b0:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c6b2:	7a0a      	ldrb	r2, [r1, #8]
   2c6b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2c6b8:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c6ba:	7a4a      	ldrb	r2, [r1, #9]
   2c6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2c6c0:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c6c2:	7a8a      	ldrb	r2, [r1, #10]
   2c6c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c6c8:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
   2c6ca:	7acb      	ldrb	r3, [r1, #11]
   2c6cc:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
   2c6ce:	7b0b      	ldrb	r3, [r1, #12]
   2c6d0:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
   2c6d2:	7923      	ldrb	r3, [r4, #4]
   2c6d4:	2b21      	cmp	r3, #33	; 0x21
   2c6d6:	d11a      	bne.n	2c70e <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
   2c6d8:	2210      	movs	r2, #16
   2c6da:	310d      	adds	r1, #13
   2c6dc:	f104 0012 	add.w	r0, r4, #18
   2c6e0:	f7ff f9b7 	bl	2ba52 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
   2c6e4:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c6e6:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c6e8:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c6ea:	5c8b      	ldrb	r3, [r1, r2]
   2c6ec:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c6ee:	5c08      	ldrb	r0, [r1, r0]
   2c6f0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2c6f4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c6f6:	1c90      	adds	r0, r2, #2
   2c6f8:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c6fa:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c6fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

    return LORAMAC_PARSER_SUCCESS;
   2c700:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c702:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c704:	5c8a      	ldrb	r2, [r1, r2]
   2c706:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c70a:	6263      	str	r3, [r4, #36]	; 0x24
}
   2c70c:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
   2c70e:	2b11      	cmp	r3, #17
   2c710:	dc03      	bgt.n	2c71a <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
   2c712:	220d      	movs	r2, #13
   2c714:	e7e7      	b.n	2c6e6 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
   2c716:	2002      	movs	r0, #2
   2c718:	e7f8      	b.n	2c70c <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
   2c71a:	2001      	movs	r0, #1
   2c71c:	e7f6      	b.n	2c70c <LoRaMacParserJoinAccept+0x8a>

0002c71e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
   2c71e:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c720:	4604      	mov	r4, r0
   2c722:	2800      	cmp	r0, #0
   2c724:	d063      	beq.n	2c7ee <LoRaMacParserData+0xd0>
   2c726:	6801      	ldr	r1, [r0, #0]
   2c728:	2900      	cmp	r1, #0
   2c72a:	d060      	beq.n	2c7ee <LoRaMacParserData+0xd0>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c72c:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c72e:	3010      	adds	r0, #16
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c730:	f800 3c0b 	strb.w	r3, [r0, #-11]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
   2c734:	784b      	ldrb	r3, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c736:	3108      	adds	r1, #8
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
   2c738:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c73c:	f811 2c06 	ldrb.w	r2, [r1, #-6]
   2c740:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2c744:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c748:	f811 2c05 	ldrb.w	r2, [r1, #-5]
   2c74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2c750:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c754:	f811 2c04 	ldrb.w	r2, [r1, #-4]
   2c758:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c75c:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
   2c760:	f811 3c03 	ldrb.w	r3, [r1, #-3]
   2c764:	f800 3c04 	strb.w	r3, [r0, #-4]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
   2c768:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   2c76c:	f820 3c02 	strh.w	r3, [r0, #-2]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
   2c770:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   2c774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c778:	f810 2c04 	ldrb.w	r2, [r0, #-4]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
   2c77c:	f820 3c02 	strh.w	r3, [r0, #-2]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c780:	f002 020f 	and.w	r2, r2, #15
   2c784:	f7ff f965 	bl	2ba52 <memcpy1>
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
   2c788:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c78a:	7b23      	ldrb	r3, [r4, #12]
    macMsg->FPort = 0;
   2c78c:	f884 2020 	strb.w	r2, [r4, #32]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c790:	f003 030f 	and.w	r3, r3, #15
    macMsg->FRMPayloadSize = 0;
   2c794:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
   2c798:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c79a:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
   2c79e:	1a11      	subs	r1, r2, r0
   2c7a0:	2904      	cmp	r1, #4
   2c7a2:	dd0d      	ble.n	2c7c0 <LoRaMacParserData+0xa2>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2c7a4:	6821      	ldr	r1, [r4, #0]
   2c7a6:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2c7a8:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2c7aa:	5c08      	ldrb	r0, [r1, r0]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2c7ac:	1ad2      	subs	r2, r2, r3
   2c7ae:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2c7b0:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2c7b4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
   2c7b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2c7ba:	4419      	add	r1, r3
   2c7bc:	f7ff f949 	bl	2ba52 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
   2c7c0:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
   2c7c2:	7923      	ldrb	r3, [r4, #4]
   2c7c4:	6822      	ldr	r2, [r4, #0]
   2c7c6:	441a      	add	r2, r3
   2c7c8:	f812 3c04 	ldrb.w	r3, [r2, #-4]
   2c7cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
   2c7ce:	f812 1c03 	ldrb.w	r1, [r2, #-3]
   2c7d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2c7d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
   2c7d8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
   2c7dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2c7e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
   2c7e2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2c7e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c7ea:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   2c7ec:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
   2c7ee:	2002      	movs	r0, #2
   2c7f0:	e7fc      	b.n	2c7ec <LoRaMacParserData+0xce>

0002c7f2 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
   2c7f2:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c7f4:	4604      	mov	r4, r0
   2c7f6:	b360      	cbz	r0, 2c852 <LoRaMacSerializerJoinRequest+0x60>
   2c7f8:	6803      	ldr	r3, [r0, #0]
   2c7fa:	b353      	cbz	r3, 2c852 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
   2c7fc:	7902      	ldrb	r2, [r0, #4]
   2c7fe:	2a16      	cmp	r2, #22
   2c800:	d929      	bls.n	2c856 <LoRaMacSerializerJoinRequest+0x64>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c802:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2c804:	7942      	ldrb	r2, [r0, #5]
   2c806:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c808:	f851 0b06 	ldr.w	r0, [r1], #6
   2c80c:	2208      	movs	r2, #8
   2c80e:	3001      	adds	r0, #1
   2c810:	f7ff f929 	bl	2ba66 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2c814:	4621      	mov	r1, r4
   2c816:	f851 0b0e 	ldr.w	r0, [r1], #14
   2c81a:	2208      	movs	r2, #8
   2c81c:	3009      	adds	r0, #9
   2c81e:	f7ff f922 	bl	2ba66 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
   2c822:	6823      	ldr	r3, [r4, #0]
   2c824:	8ae2      	ldrh	r2, [r4, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2c826:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
   2c828:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
   2c82a:	8ae3      	ldrh	r3, [r4, #22]
   2c82c:	6822      	ldr	r2, [r4, #0]
   2c82e:	0a1b      	lsrs	r3, r3, #8
   2c830:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2c832:	6823      	ldr	r3, [r4, #0]
   2c834:	69a2      	ldr	r2, [r4, #24]
   2c836:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2c838:	69a3      	ldr	r3, [r4, #24]
   2c83a:	6822      	ldr	r2, [r4, #0]
   2c83c:	0a1b      	lsrs	r3, r3, #8
   2c83e:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2c840:	6823      	ldr	r3, [r4, #0]
   2c842:	8b62      	ldrh	r2, [r4, #26]
   2c844:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2c846:	6823      	ldr	r3, [r4, #0]
   2c848:	7ee2      	ldrb	r2, [r4, #27]
   2c84a:	759a      	strb	r2, [r3, #22]
    macMsg->BufSize = bufItr;
   2c84c:	2317      	movs	r3, #23
   2c84e:	7123      	strb	r3, [r4, #4]
}
   2c850:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2c852:	2001      	movs	r0, #1
   2c854:	e7fc      	b.n	2c850 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2c856:	2002      	movs	r0, #2
   2c858:	e7fa      	b.n	2c850 <LoRaMacSerializerJoinRequest+0x5e>

0002c85a <LoRaMacSerializerReJoinType1>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
   2c85a:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c85c:	4604      	mov	r4, r0
   2c85e:	2800      	cmp	r0, #0
   2c860:	d02f      	beq.n	2c8c2 <LoRaMacSerializerReJoinType1+0x68>
   2c862:	6803      	ldr	r3, [r0, #0]
   2c864:	b36b      	cbz	r3, 2c8c2 <LoRaMacSerializerReJoinType1+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
   2c866:	7902      	ldrb	r2, [r0, #4]
   2c868:	2a17      	cmp	r2, #23
   2c86a:	d92c      	bls.n	2c8c6 <LoRaMacSerializerReJoinType1+0x6c>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c86c:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2c86e:	7942      	ldrb	r2, [r0, #5]
   2c870:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
   2c872:	6803      	ldr	r3, [r0, #0]
   2c874:	7982      	ldrb	r2, [r0, #6]
   2c876:	705a      	strb	r2, [r3, #1]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c878:	f851 0b07 	ldr.w	r0, [r1], #7
   2c87c:	2208      	movs	r2, #8
   2c87e:	3002      	adds	r0, #2
   2c880:	f7ff f8f1 	bl	2ba66 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2c884:	4621      	mov	r1, r4
   2c886:	f851 0b0f 	ldr.w	r0, [r1], #15
   2c88a:	2208      	movs	r2, #8
   2c88c:	300a      	adds	r0, #10
   2c88e:	f7ff f8ea 	bl	2ba66 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
   2c892:	6823      	ldr	r3, [r4, #0]
   2c894:	8b22      	ldrh	r2, [r4, #24]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2c896:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
   2c898:	749a      	strb	r2, [r3, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount1 >> 8 ) & 0xFF;
   2c89a:	8b23      	ldrh	r3, [r4, #24]
   2c89c:	6822      	ldr	r2, [r4, #0]
   2c89e:	0a1b      	lsrs	r3, r3, #8
   2c8a0:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2c8a2:	6823      	ldr	r3, [r4, #0]
   2c8a4:	69e2      	ldr	r2, [r4, #28]
   2c8a6:	751a      	strb	r2, [r3, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2c8a8:	69e3      	ldr	r3, [r4, #28]
   2c8aa:	6822      	ldr	r2, [r4, #0]
   2c8ac:	0a1b      	lsrs	r3, r3, #8
   2c8ae:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2c8b0:	6823      	ldr	r3, [r4, #0]
   2c8b2:	8be2      	ldrh	r2, [r4, #30]
   2c8b4:	759a      	strb	r2, [r3, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2c8b6:	6823      	ldr	r3, [r4, #0]
   2c8b8:	7fe2      	ldrb	r2, [r4, #31]
   2c8ba:	75da      	strb	r2, [r3, #23]
    macMsg->BufSize = bufItr;
   2c8bc:	2318      	movs	r3, #24
   2c8be:	7123      	strb	r3, [r4, #4]
}
   2c8c0:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2c8c2:	2001      	movs	r0, #1
   2c8c4:	e7fc      	b.n	2c8c0 <LoRaMacSerializerReJoinType1+0x66>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2c8c6:	2002      	movs	r0, #2
   2c8c8:	e7fa      	b.n	2c8c0 <LoRaMacSerializerReJoinType1+0x66>

0002c8ca <LoRaMacSerializerReJoinType0or2>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
   2c8ca:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c8cc:	4604      	mov	r4, r0
   2c8ce:	2800      	cmp	r0, #0
   2c8d0:	d02f      	beq.n	2c932 <LoRaMacSerializerReJoinType0or2+0x68>
   2c8d2:	6803      	ldr	r3, [r0, #0]
   2c8d4:	b36b      	cbz	r3, 2c932 <LoRaMacSerializerReJoinType0or2+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
   2c8d6:	7902      	ldrb	r2, [r0, #4]
   2c8d8:	2a12      	cmp	r2, #18
   2c8da:	d92c      	bls.n	2c936 <LoRaMacSerializerReJoinType0or2+0x6c>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
   2c8dc:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2c8de:	7942      	ldrb	r2, [r0, #5]
   2c8e0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
   2c8e2:	6803      	ldr	r3, [r0, #0]
   2c8e4:	7982      	ldrb	r2, [r0, #6]
   2c8e6:	705a      	strb	r2, [r3, #1]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
   2c8e8:	f851 0b07 	ldr.w	r0, [r1], #7
   2c8ec:	2203      	movs	r2, #3
   2c8ee:	3002      	adds	r0, #2
   2c8f0:	f7ff f8af 	bl	2ba52 <memcpy1>
    bufItr += LORAMAC_NET_ID_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2c8f4:	4621      	mov	r1, r4
   2c8f6:	f851 0b0a 	ldr.w	r0, [r1], #10
   2c8fa:	2208      	movs	r2, #8
   2c8fc:	3005      	adds	r0, #5
   2c8fe:	f7ff f8b2 	bl	2ba66 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
   2c902:	6823      	ldr	r3, [r4, #0]
   2c904:	8a62      	ldrh	r2, [r4, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2c906:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
   2c908:	735a      	strb	r2, [r3, #13]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount0 >> 8 ) & 0xFF;
   2c90a:	8a63      	ldrh	r3, [r4, #18]
   2c90c:	6822      	ldr	r2, [r4, #0]
   2c90e:	0a1b      	lsrs	r3, r3, #8
   2c910:	7393      	strb	r3, [r2, #14]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2c912:	6823      	ldr	r3, [r4, #0]
   2c914:	6962      	ldr	r2, [r4, #20]
   2c916:	73da      	strb	r2, [r3, #15]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2c918:	6963      	ldr	r3, [r4, #20]
   2c91a:	6822      	ldr	r2, [r4, #0]
   2c91c:	0a1b      	lsrs	r3, r3, #8
   2c91e:	7413      	strb	r3, [r2, #16]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2c920:	6823      	ldr	r3, [r4, #0]
   2c922:	8ae2      	ldrh	r2, [r4, #22]
   2c924:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2c926:	6823      	ldr	r3, [r4, #0]
   2c928:	7de2      	ldrb	r2, [r4, #23]
   2c92a:	749a      	strb	r2, [r3, #18]
    macMsg->BufSize = bufItr;
   2c92c:	2313      	movs	r3, #19
   2c92e:	7123      	strb	r3, [r4, #4]
}
   2c930:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2c932:	2001      	movs	r0, #1
   2c934:	e7fc      	b.n	2c930 <LoRaMacSerializerReJoinType0or2+0x66>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2c936:	2002      	movs	r0, #2
   2c938:	e7fa      	b.n	2c930 <LoRaMacSerializerReJoinType0or2+0x66>

0002c93a <LoRaMacSerializerData>:

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
   2c93a:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c93c:	4604      	mov	r4, r0
   2c93e:	2800      	cmp	r0, #0
   2c940:	d063      	beq.n	2ca0a <LoRaMacSerializerData+0xd0>
   2c942:	6801      	ldr	r1, [r0, #0]
   2c944:	2900      	cmp	r1, #0
   2c946:	d060      	beq.n	2ca0a <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c948:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
   2c94a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c94e:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
   2c952:	2a00      	cmp	r2, #0
   2c954:	d157      	bne.n	2ca06 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c956:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
   2c958:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
   2c95a:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
   2c95c:	4413      	add	r3, r2
   2c95e:	4298      	cmp	r0, r3
   2c960:	d355      	bcc.n	2ca0e <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2c962:	7963      	ldrb	r3, [r4, #5]
   2c964:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c966:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
   2c968:	6823      	ldr	r3, [r4, #0]
   2c96a:	68a2      	ldr	r2, [r4, #8]
   2c96c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
   2c96e:	68a3      	ldr	r3, [r4, #8]
   2c970:	6822      	ldr	r2, [r4, #0]
   2c972:	0a1b      	lsrs	r3, r3, #8
   2c974:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
   2c976:	6823      	ldr	r3, [r4, #0]
   2c978:	8962      	ldrh	r2, [r4, #10]
   2c97a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
   2c97c:	6823      	ldr	r3, [r4, #0]
   2c97e:	7ae2      	ldrb	r2, [r4, #11]
   2c980:	711a      	strb	r2, [r3, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
   2c982:	6823      	ldr	r3, [r4, #0]
   2c984:	7b22      	ldrb	r2, [r4, #12]
   2c986:	715a      	strb	r2, [r3, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
   2c988:	6823      	ldr	r3, [r4, #0]
   2c98a:	89e2      	ldrh	r2, [r4, #14]
   2c98c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
   2c98e:	89e3      	ldrh	r3, [r4, #14]
   2c990:	6822      	ldr	r2, [r4, #0]
   2c992:	0a1b      	lsrs	r3, r3, #8
   2c994:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2c996:	7b22      	ldrb	r2, [r4, #12]
   2c998:	f851 0b10 	ldr.w	r0, [r1], #16
   2c99c:	f002 020f 	and.w	r2, r2, #15
   2c9a0:	3008      	adds	r0, #8
   2c9a2:	f7ff f856 	bl	2ba52 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c9a6:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
   2c9a8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2c9ac:	f003 030f 	and.w	r3, r3, #15
   2c9b0:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
   2c9b4:	b12a      	cbz	r2, 2c9c2 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
   2c9b6:	f894 1020 	ldrb.w	r1, [r4, #32]
   2c9ba:	6822      	ldr	r2, [r4, #0]
   2c9bc:	5551      	strb	r1, [r2, r5]
   2c9be:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
   2c9c2:	6820      	ldr	r0, [r4, #0]
   2c9c4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   2c9c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2c9ca:	4428      	add	r0, r5
   2c9cc:	f7ff f841 	bl	2ba52 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
   2c9d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2c9d4:	6822      	ldr	r2, [r4, #0]
   2c9d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
   2c9d8:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2c9da:	54d1      	strb	r1, [r2, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2c9dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2c9de:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2c9e0:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2c9e2:	b292      	uxth	r2, r2
   2c9e4:	0a09      	lsrs	r1, r1, #8
   2c9e6:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2c9e8:	6821      	ldr	r1, [r4, #0]
   2c9ea:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2c9ec:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2c9ee:	b292      	uxth	r2, r2
   2c9f0:	5488      	strb	r0, [r1, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2c9f2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2c9f6:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2c9f8:	6821      	ldr	r1, [r4, #0]
   2c9fa:	b292      	uxth	r2, r2
   2c9fc:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2c9fe:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2ca00:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
   2ca02:	7123      	strb	r3, [r4, #4]
}
   2ca04:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
   2ca06:	3309      	adds	r3, #9
   2ca08:	e7a6      	b.n	2c958 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2ca0a:	2001      	movs	r0, #1
   2ca0c:	e7fa      	b.n	2ca04 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2ca0e:	2002      	movs	r0, #2
   2ca10:	e7f8      	b.n	2ca04 <LoRaMacSerializerData+0xca>

0002ca12 <RegionIsActive>:
}
   2ca12:	1f43      	subs	r3, r0, #5
   2ca14:	4258      	negs	r0, r3
   2ca16:	4158      	adcs	r0, r3
   2ca18:	4770      	bx	lr

0002ca1a <RegionGetPhyParam>:
    switch( region )
   2ca1a:	2805      	cmp	r0, #5
{
   2ca1c:	b082      	sub	sp, #8
    switch( region )
   2ca1e:	d103      	bne.n	2ca28 <RegionGetPhyParam+0xe>
        EU868_GET_PHY_PARAM( );
   2ca20:	4608      	mov	r0, r1
}
   2ca22:	b002      	add	sp, #8
        EU868_GET_PHY_PARAM( );
   2ca24:	f7eb bfbe 	b.w	189a4 <RegionEU868GetPhyParam>
}
   2ca28:	2000      	movs	r0, #0
   2ca2a:	b002      	add	sp, #8
   2ca2c:	4770      	bx	lr

0002ca2e <RegionSetBandTxDone>:
    switch( region )
   2ca2e:	2805      	cmp	r0, #5
   2ca30:	d102      	bne.n	2ca38 <RegionSetBandTxDone+0xa>
        EU868_SET_BAND_TX_DONE( );
   2ca32:	4608      	mov	r0, r1
   2ca34:	f7ec b846 	b.w	18ac4 <RegionEU868SetBandTxDone>
}
   2ca38:	4770      	bx	lr

0002ca3a <RegionInitDefaults>:
    switch( region )
   2ca3a:	2805      	cmp	r0, #5
   2ca3c:	d102      	bne.n	2ca44 <RegionInitDefaults+0xa>
        EU868_INIT_DEFAULTS( );
   2ca3e:	4608      	mov	r0, r1
   2ca40:	f7ec b85c 	b.w	18afc <RegionEU868InitDefaults>
}
   2ca44:	4770      	bx	lr

0002ca46 <RegionVerify>:
{
   2ca46:	4603      	mov	r3, r0
    switch( region )
   2ca48:	2b05      	cmp	r3, #5
{
   2ca4a:	4608      	mov	r0, r1
   2ca4c:	4611      	mov	r1, r2
    switch( region )
   2ca4e:	d101      	bne.n	2ca54 <RegionVerify+0xe>
        EU868_VERIFY( );
   2ca50:	f000 ba86 	b.w	2cf60 <RegionEU868Verify>
}
   2ca54:	2000      	movs	r0, #0
   2ca56:	4770      	bx	lr

0002ca58 <RegionApplyCFList>:
    switch( region )
   2ca58:	2805      	cmp	r0, #5
   2ca5a:	d102      	bne.n	2ca62 <RegionApplyCFList+0xa>
        EU868_APPLY_CF_LIST( );
   2ca5c:	4608      	mov	r0, r1
   2ca5e:	f000 bac6 	b.w	2cfee <RegionEU868ApplyCFList>
}
   2ca62:	4770      	bx	lr

0002ca64 <RegionChanMaskSet>:
    switch( region )
   2ca64:	2805      	cmp	r0, #5
   2ca66:	d102      	bne.n	2ca6e <RegionChanMaskSet+0xa>
        EU868_CHAN_MASK_SET( );
   2ca68:	4608      	mov	r0, r1
   2ca6a:	f7ec b8ad 	b.w	18bc8 <RegionEU868ChanMaskSet>
}
   2ca6e:	2000      	movs	r0, #0
   2ca70:	4770      	bx	lr

0002ca72 <RegionComputeRxWindowParameters>:
{
   2ca72:	b410      	push	{r4}
   2ca74:	4604      	mov	r4, r0
    switch( region )
   2ca76:	2c05      	cmp	r4, #5
{
   2ca78:	4608      	mov	r0, r1
   2ca7a:	4611      	mov	r1, r2
   2ca7c:	461a      	mov	r2, r3
   2ca7e:	9b01      	ldr	r3, [sp, #4]
    switch( region )
   2ca80:	d102      	bne.n	2ca88 <RegionComputeRxWindowParameters+0x16>
}
   2ca82:	bc10      	pop	{r4}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
   2ca84:	f7ec b8ba 	b.w	18bfc <RegionEU868ComputeRxWindowParameters>
}
   2ca88:	bc10      	pop	{r4}
   2ca8a:	4770      	bx	lr

0002ca8c <RegionRxConfig>:
{
   2ca8c:	4603      	mov	r3, r0
    switch( region )
   2ca8e:	2b05      	cmp	r3, #5
{
   2ca90:	4608      	mov	r0, r1
   2ca92:	4611      	mov	r1, r2
    switch( region )
   2ca94:	d101      	bne.n	2ca9a <RegionRxConfig+0xe>
        EU868_RX_CONFIG( );
   2ca96:	f7ec b8e3 	b.w	18c60 <RegionEU868RxConfig>
}
   2ca9a:	2000      	movs	r0, #0
   2ca9c:	4770      	bx	lr

0002ca9e <RegionTxConfig>:
{
   2ca9e:	b410      	push	{r4}
   2caa0:	4604      	mov	r4, r0
    switch( region )
   2caa2:	2c05      	cmp	r4, #5
{
   2caa4:	4608      	mov	r0, r1
   2caa6:	4611      	mov	r1, r2
   2caa8:	461a      	mov	r2, r3
    switch( region )
   2caaa:	d102      	bne.n	2cab2 <RegionTxConfig+0x14>
}
   2caac:	bc10      	pop	{r4}
        EU868_TX_CONFIG( );
   2caae:	f7ec b943 	b.w	18d38 <RegionEU868TxConfig>
}
   2cab2:	2000      	movs	r0, #0
   2cab4:	bc10      	pop	{r4}
   2cab6:	4770      	bx	lr

0002cab8 <RegionLinkAdrReq>:
{
   2cab8:	b430      	push	{r4, r5}
   2caba:	4605      	mov	r5, r0
    switch( region )
   2cabc:	2d05      	cmp	r5, #5
{
   2cabe:	4608      	mov	r0, r1
   2cac0:	4611      	mov	r1, r2
   2cac2:	461a      	mov	r2, r3
   2cac4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
   2cac8:	d103      	bne.n	2cad2 <RegionLinkAdrReq+0x1a>
        EU868_LINK_ADR_REQ( );
   2caca:	9402      	str	r4, [sp, #8]
}
   2cacc:	bc30      	pop	{r4, r5}
        EU868_LINK_ADR_REQ( );
   2cace:	f7ec b9b7 	b.w	18e40 <RegionEU868LinkAdrReq>
}
   2cad2:	2000      	movs	r0, #0
   2cad4:	bc30      	pop	{r4, r5}
   2cad6:	4770      	bx	lr

0002cad8 <RegionRxParamSetupReq>:
    switch( region )
   2cad8:	2805      	cmp	r0, #5
   2cada:	d102      	bne.n	2cae2 <RegionRxParamSetupReq+0xa>
        EU868_RX_PARAM_SETUP_REQ( );
   2cadc:	4608      	mov	r0, r1
   2cade:	f000 ba64 	b.w	2cfaa <RegionEU868RxParamSetupReq>
}
   2cae2:	2000      	movs	r0, #0
   2cae4:	4770      	bx	lr

0002cae6 <RegionNewChannelReq>:
    switch( region )
   2cae6:	2805      	cmp	r0, #5
   2cae8:	d102      	bne.n	2caf0 <RegionNewChannelReq+0xa>
        EU868_NEW_CHANNEL_REQ( );
   2caea:	4608      	mov	r0, r1
   2caec:	f000 bac5 	b.w	2d07a <RegionEU868NewChannelReq>
}
   2caf0:	2000      	movs	r0, #0
   2caf2:	4770      	bx	lr

0002caf4 <RegionTxParamSetupReq>:
    switch( region )
   2caf4:	2805      	cmp	r0, #5
   2caf6:	d102      	bne.n	2cafe <RegionTxParamSetupReq+0xa>
        EU868_TX_PARAM_SETUP_REQ( );
   2caf8:	4608      	mov	r0, r1
   2cafa:	f000 ba74 	b.w	2cfe6 <RegionEU868TxParamSetupReq>
}
   2cafe:	2000      	movs	r0, #0
   2cb00:	4770      	bx	lr

0002cb02 <RegionDlChannelReq>:
    switch( region )
   2cb02:	2805      	cmp	r0, #5
   2cb04:	d102      	bne.n	2cb0c <RegionDlChannelReq+0xa>
        EU868_DL_CHANNEL_REQ( );
   2cb06:	4608      	mov	r0, r1
   2cb08:	f7ec ba48 	b.w	18f9c <RegionEU868DlChannelReq>
}
   2cb0c:	2000      	movs	r0, #0
   2cb0e:	4770      	bx	lr

0002cb10 <RegionAlternateDr>:
{
   2cb10:	4603      	mov	r3, r0
    switch( region )
   2cb12:	2b05      	cmp	r3, #5
{
   2cb14:	4608      	mov	r0, r1
   2cb16:	4611      	mov	r1, r2
    switch( region )
   2cb18:	d101      	bne.n	2cb1e <RegionAlternateDr+0xe>
        EU868_ALTERNATE_DR( );
   2cb1a:	f000 ba67 	b.w	2cfec <RegionEU868AlternateDr>
}
   2cb1e:	2000      	movs	r0, #0
   2cb20:	4770      	bx	lr

0002cb22 <RegionNextChannel>:
{
   2cb22:	b410      	push	{r4}
   2cb24:	4604      	mov	r4, r0
    switch( region )
   2cb26:	2c05      	cmp	r4, #5
{
   2cb28:	4608      	mov	r0, r1
   2cb2a:	4611      	mov	r1, r2
   2cb2c:	461a      	mov	r2, r3
   2cb2e:	9b01      	ldr	r3, [sp, #4]
    switch( region )
   2cb30:	d102      	bne.n	2cb38 <RegionNextChannel+0x16>
}
   2cb32:	bc10      	pop	{r4}
        EU868_NEXT_CHANNEL( );
   2cb34:	f7ec ba5e 	b.w	18ff4 <RegionEU868NextChannel>
}
   2cb38:	2009      	movs	r0, #9
   2cb3a:	bc10      	pop	{r4}
   2cb3c:	4770      	bx	lr

0002cb3e <RegionApplyDrOffset>:
{
   2cb3e:	b410      	push	{r4}
   2cb40:	4604      	mov	r4, r0
    switch( region )
   2cb42:	2c05      	cmp	r4, #5
{
   2cb44:	4608      	mov	r0, r1
   2cb46:	4611      	mov	r1, r2
   2cb48:	461a      	mov	r2, r3
    switch( region )
   2cb4a:	d102      	bne.n	2cb52 <RegionApplyDrOffset+0x14>
}
   2cb4c:	bc10      	pop	{r4}
        EU868_APPLY_DR_OFFSET( );
   2cb4e:	f000 bab5 	b.w	2d0bc <RegionEU868ApplyDrOffset>
}
   2cb52:	b2c8      	uxtb	r0, r1
   2cb54:	bc10      	pop	{r4}
   2cb56:	4770      	bx	lr

0002cb58 <RegionCommonChanVerifyDr>:
{
   2cb58:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ( value >= min ) && ( value <= max ) )
   2cb5a:	429a      	cmp	r2, r3
{
   2cb5c:	9d06      	ldr	r5, [sp, #24]
    if( ( value >= min ) && ( value <= max ) )
   2cb5e:	db03      	blt.n	2cb68 <RegionCommonChanVerifyDr+0x10>
   2cb60:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   2cb64:	429a      	cmp	r2, r3
   2cb66:	dd20      	ble.n	2cbaa <RegionCommonChanVerifyDr+0x52>
        return false;
   2cb68:	2000      	movs	r0, #0
}
   2cb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
   2cb6c:	2600      	movs	r6, #0
   2cb6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2cb72:	f831 c014 	ldrh.w	ip, [r1, r4, lsl #1]
   2cb76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   2cb7a:	fa4c f706 	asr.w	r7, ip, r6
   2cb7e:	07ff      	lsls	r7, r7, #31
   2cb80:	d507      	bpl.n	2cb92 <RegionCommonChanVerifyDr+0x3a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
   2cb82:	7a1f      	ldrb	r7, [r3, #8]
    if( ( value >= min ) && ( value <= max ) )
   2cb84:	f007 0e0f 	and.w	lr, r7, #15
   2cb88:	4596      	cmp	lr, r2
   2cb8a:	dc02      	bgt.n	2cb92 <RegionCommonChanVerifyDr+0x3a>
   2cb8c:	ebb2 1f17 	cmp.w	r2, r7, lsr #4
   2cb90:	dd0d      	ble.n	2cbae <RegionCommonChanVerifyDr+0x56>
        for( uint8_t j = 0; j < 16; j++ )
   2cb92:	3601      	adds	r6, #1
   2cb94:	2e10      	cmp	r6, #16
   2cb96:	f103 030c 	add.w	r3, r3, #12
   2cb9a:	d1ee      	bne.n	2cb7a <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
   2cb9c:	3401      	adds	r4, #1
   2cb9e:	b2e4      	uxtb	r4, r4
   2cba0:	0123      	lsls	r3, r4, #4
   2cba2:	b2db      	uxtb	r3, r3
   2cba4:	4298      	cmp	r0, r3
   2cba6:	d8e1      	bhi.n	2cb6c <RegionCommonChanVerifyDr+0x14>
   2cba8:	e7de      	b.n	2cb68 <RegionCommonChanVerifyDr+0x10>
   2cbaa:	2400      	movs	r4, #0
   2cbac:	e7f8      	b.n	2cba0 <RegionCommonChanVerifyDr+0x48>
                    return true;
   2cbae:	2001      	movs	r0, #1
   2cbb0:	e7db      	b.n	2cb6a <RegionCommonChanVerifyDr+0x12>

0002cbb2 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
   2cbb2:	4288      	cmp	r0, r1
   2cbb4:	db04      	blt.n	2cbc0 <RegionCommonValueInRange+0xe>
   2cbb6:	4290      	cmp	r0, r2
   2cbb8:	bfcc      	ite	gt
   2cbba:	2000      	movgt	r0, #0
   2cbbc:	2001      	movle	r0, #1
   2cbbe:	4770      	bx	lr
    return 0;
   2cbc0:	2000      	movs	r0, #0
}
   2cbc2:	4770      	bx	lr

0002cbc4 <RegionCommonChanDisable>:
{
   2cbc4:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
   2cbc6:	0914      	lsrs	r4, r2, #4
   2cbc8:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
{
   2cbcc:	4603      	mov	r3, r0
    uint8_t index = id / 16;
   2cbce:	ea4f 1011 	mov.w	r0, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
   2cbd2:	d30e      	bcc.n	2cbf2 <RegionCommonChanDisable+0x2e>
   2cbd4:	4291      	cmp	r1, r2
   2cbd6:	d20c      	bcs.n	2cbf2 <RegionCommonChanDisable+0x2e>
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
   2cbd8:	b202      	sxth	r2, r0
   2cbda:	2001      	movs	r0, #1
   2cbdc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
   2cbe0:	f001 010f 	and.w	r1, r1, #15
   2cbe4:	fa00 f101 	lsl.w	r1, r0, r1
   2cbe8:	ea24 0101 	bic.w	r1, r4, r1
   2cbec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
   2cbf0:	bd10      	pop	{r4, pc}
        return false;
   2cbf2:	2000      	movs	r0, #0
   2cbf4:	e7fc      	b.n	2cbf0 <RegionCommonChanDisable+0x2c>

0002cbf6 <RegionCommonCountChannels>:
{
   2cbf6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( channelsMask == NULL )
   2cbf8:	b128      	cbz	r0, 2cc06 <RegionCommonCountChannels+0x10>
   2cbfa:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
   2cbfe:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
   2cc00:	2000      	movs	r0, #0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cc02:	4291      	cmp	r1, r2
   2cc04:	d300      	bcc.n	2cc08 <RegionCommonCountChannels+0x12>
}
   2cc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cc08:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
   2cc0a:	4623      	mov	r3, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cc0c:	f835 cb02 	ldrh.w	ip, [r5], #2
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
   2cc10:	fa07 f604 	lsl.w	r6, r7, r4
   2cc14:	ea36 060c 	bics.w	r6, r6, ip
            nbActiveBits++;
   2cc18:	bf08      	it	eq
   2cc1a:	3301      	addeq	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
   2cc1c:	f104 0401 	add.w	r4, r4, #1
            nbActiveBits++;
   2cc20:	bf08      	it	eq
   2cc22:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
   2cc24:	2c10      	cmp	r4, #16
   2cc26:	d1f3      	bne.n	2cc10 <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cc28:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cc2a:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cc2c:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cc2e:	b2c9      	uxtb	r1, r1
   2cc30:	e7e7      	b.n	2cc02 <RegionCommonCountChannels+0xc>

0002cc32 <RegionCommonChanMaskCopy>:
{
   2cc32:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
   2cc34:	b100      	cbz	r0, 2cc38 <RegionCommonChanMaskCopy+0x6>
   2cc36:	b949      	cbnz	r1, 2cc4c <RegionCommonChanMaskCopy+0x1a>
}
   2cc38:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
   2cc3a:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
   2cc3e:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
   2cc42:	3301      	adds	r3, #1
   2cc44:	b2dc      	uxtb	r4, r3
   2cc46:	42a2      	cmp	r2, r4
   2cc48:	d8f7      	bhi.n	2cc3a <RegionCommonChanMaskCopy+0x8>
   2cc4a:	e7f5      	b.n	2cc38 <RegionCommonChanMaskCopy+0x6>
   2cc4c:	2300      	movs	r3, #0
   2cc4e:	e7f9      	b.n	2cc44 <RegionCommonChanMaskCopy+0x12>

0002cc50 <RegionCommonSetBandTxDone>:
{
   2cc50:	b082      	sub	sp, #8
   2cc52:	b530      	push	{r4, r5, lr}
   2cc54:	8804      	ldrh	r4, [r0, #0]
   2cc56:	9304      	str	r3, [sp, #16]
    if( joined == false )
   2cc58:	b9d2      	cbnz	r2, 2cc90 <RegionCommonSetBandTxDone+0x40>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
   2cc5a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
   2cc5e:	d315      	bcc.n	2cc8c <RegionCommonSetBandTxDone+0x3c>
            joinDutyCycle = BACKOFF_DC_10_HOURS;
   2cc60:	f649 25af 	movw	r5, #39599	; 0x9aaf
   2cc64:	f242 7210 	movw	r2, #10000	; 0x2710
   2cc68:	42ab      	cmp	r3, r5
   2cc6a:	bf98      	it	ls
   2cc6c:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   2cc70:	4294      	cmp	r4, r2
   2cc72:	bf38      	it	cc
   2cc74:	4614      	movcc	r4, r2
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cc76:	4361      	muls	r1, r4
}
   2cc78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cc7c:	68c3      	ldr	r3, [r0, #12]
}
   2cc7e:	b002      	add	sp, #8
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cc80:	428b      	cmp	r3, r1
        band->TimeCredits = 0;
   2cc82:	bf94      	ite	ls
   2cc84:	2300      	movls	r3, #0
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
   2cc86:	1a5b      	subhi	r3, r3, r1
   2cc88:	60c3      	str	r3, [r0, #12]
}
   2cc8a:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
   2cc8c:	2264      	movs	r2, #100	; 0x64
   2cc8e:	e7ef      	b.n	2cc70 <RegionCommonSetBandTxDone+0x20>
    if( dutyCycle == 0 )
   2cc90:	2c01      	cmp	r4, #1
   2cc92:	bf38      	it	cc
   2cc94:	2401      	movcc	r4, #1
   2cc96:	e7ee      	b.n	2cc76 <RegionCommonSetBandTxDone+0x26>

0002cc98 <RegionCommonParseLinkAdrReq>:
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
   2cc98:	7803      	ldrb	r3, [r0, #0]
   2cc9a:	2b03      	cmp	r3, #3
   2cc9c:	d114      	bne.n	2ccc8 <RegionCommonParseLinkAdrReq+0x30>
        linkAdrParams->Datarate = payload[1];
   2cc9e:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
   2cca0:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
   2cca4:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
   2cca6:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
   2cca8:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
   2ccaa:	7883      	ldrb	r3, [r0, #2]
   2ccac:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
   2ccae:	78c2      	ldrb	r2, [r0, #3]
   2ccb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ccb4:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
   2ccb6:	7903      	ldrb	r3, [r0, #4]
        retIndex = 5;
   2ccb8:	2005      	movs	r0, #5
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
   2ccba:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
   2ccbe:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
   2ccc2:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
   2ccc4:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
   2ccc6:	4770      	bx	lr
    uint8_t retIndex = 0;
   2ccc8:	2000      	movs	r0, #0
}
   2ccca:	4770      	bx	lr

0002cccc <RegionCommonLinkAdrReqVerifyParams>:
{
   2cccc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2ccd0:	4698      	mov	r8, r3
    if( verifyParams->AdrEnabled == false )
   2ccd2:	7943      	ldrb	r3, [r0, #5]
{
   2ccd4:	4691      	mov	r9, r2
   2ccd6:	4604      	mov	r4, r0
   2ccd8:	468a      	mov	sl, r1
    uint8_t status = verifyParams->Status;
   2ccda:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
   2ccdc:	f990 2006 	ldrsb.w	r2, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
   2cce0:	f990 6007 	ldrsb.w	r6, [r0, #7]
    if( verifyParams->AdrEnabled == false )
   2cce4:	b183      	cbz	r3, 2cd08 <RegionCommonLinkAdrReqVerifyParams+0x3c>
    int8_t nbRepetitions = verifyParams->NbRep;
   2cce6:	f990 7008 	ldrsb.w	r7, [r0, #8]
    if( status != 0 )
   2ccea:	b375      	cbz	r5, 2cd4a <RegionCommonLinkAdrReqVerifyParams+0x7e>
        if( datarate == 0x0F )
   2ccec:	2a0f      	cmp	r2, #15
   2ccee:	d112      	bne.n	2cd16 <RegionCommonLinkAdrReqVerifyParams+0x4a>
            datarate =  verifyParams->CurrentDatarate;
   2ccf0:	f994 2009 	ldrsb.w	r2, [r4, #9]
        if( txPower == 0x0F )
   2ccf4:	2e0f      	cmp	r6, #15
   2ccf6:	d11e      	bne.n	2cd36 <RegionCommonLinkAdrReqVerifyParams+0x6a>
            txPower =  verifyParams->CurrentTxPower;
   2ccf8:	f994 600a 	ldrsb.w	r6, [r4, #10]
    if( status == 0x07 )
   2ccfc:	2d07      	cmp	r5, #7
   2ccfe:	d124      	bne.n	2cd4a <RegionCommonLinkAdrReqVerifyParams+0x7e>
            nbRepetitions = 1;
   2cd00:	2f00      	cmp	r7, #0
   2cd02:	bf08      	it	eq
   2cd04:	2701      	moveq	r7, #1
   2cd06:	e020      	b.n	2cd4a <RegionCommonLinkAdrReqVerifyParams+0x7e>
        nbRepetitions = verifyParams->CurrentNbRep;
   2cd08:	f990 700b 	ldrsb.w	r7, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
   2cd0c:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
   2cd10:	f990 600a 	ldrsb.w	r6, [r0, #10]
   2cd14:	e7e9      	b.n	2ccea <RegionCommonLinkAdrReqVerifyParams+0x1e>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
   2cd16:	69a3      	ldr	r3, [r4, #24]
   2cd18:	9301      	str	r3, [sp, #4]
   2cd1a:	f994 3015 	ldrsb.w	r3, [r4, #21]
   2cd1e:	9300      	str	r3, [sp, #0]
   2cd20:	f994 3014 	ldrsb.w	r3, [r4, #20]
   2cd24:	6921      	ldr	r1, [r4, #16]
   2cd26:	7b20      	ldrb	r0, [r4, #12]
   2cd28:	f7ff ff16 	bl	2cb58 <RegionCommonChanVerifyDr>
   2cd2c:	2800      	cmp	r0, #0
   2cd2e:	d1e1      	bne.n	2ccf4 <RegionCommonLinkAdrReqVerifyParams+0x28>
            status &= 0xFD; // Datarate KO
   2cd30:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
   2cd34:	e7de      	b.n	2ccf4 <RegionCommonLinkAdrReqVerifyParams+0x28>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
   2cd36:	f994 301d 	ldrsb.w	r3, [r4, #29]
    if( ( value >= min ) && ( value <= max ) )
   2cd3a:	42b3      	cmp	r3, r6
   2cd3c:	dc0f      	bgt.n	2cd5e <RegionCommonLinkAdrReqVerifyParams+0x92>
   2cd3e:	f994 301c 	ldrsb.w	r3, [r4, #28]
   2cd42:	42b3      	cmp	r3, r6
   2cd44:	dada      	bge.n	2ccfc <RegionCommonLinkAdrReqVerifyParams+0x30>
                status &= 0xFB; // TxPower KO
   2cd46:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
}
   2cd4a:	4628      	mov	r0, r5
    *dr = datarate;
   2cd4c:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
   2cd50:	f889 6000 	strb.w	r6, [r9]
    *nbRep = nbRepetitions;
   2cd54:	f888 7000 	strb.w	r7, [r8]
}
   2cd58:	b002      	add	sp, #8
   2cd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2cd5e:	461e      	mov	r6, r3
   2cd60:	e7cc      	b.n	2ccfc <RegionCommonLinkAdrReqVerifyParams+0x30>

0002cd62 <RegionCommonComputeSymbolTimeFsk>:
}
   2cd62:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   2cd66:	fbb3 f0f0 	udiv	r0, r3, r0
   2cd6a:	4770      	bx	lr

0002cd6c <RegionCommonComputeRxWindowParameters>:
{
   2cd6c:	b530      	push	{r4, r5, lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
   2cd6e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2cd72:	436a      	muls	r2, r5
   2cd74:	1f0c      	subs	r4, r1, #4
   2cd76:	fb00 2204 	mla	r2, r0, r4, r2
   2cd7a:	0052      	lsls	r2, r2, #1
   2cd7c:	bf1e      	ittt	ne
   2cd7e:	f100 34ff 	addne.w	r4, r0, #4294967295
   2cd82:	1912      	addne	r2, r2, r4
   2cd84:	fbb2 f2f0 	udivne	r2, r2, r0
   2cd88:	4291      	cmp	r1, r2
   2cd8a:	bf38      	it	cc
   2cd8c:	4611      	movcc	r1, r2
   2cd8e:	9a03      	ldr	r2, [sp, #12]
   2cd90:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
   2cd92:	0082      	lsls	r2, r0, #2
   2cd94:	4348      	muls	r0, r1
   2cd96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2cd9a:	bf1c      	itt	ne
   2cd9c:	3001      	addne	r0, #1
   2cd9e:	0840      	lsrne	r0, r0, #1
   2cda0:	1a12      	subs	r2, r2, r0
   2cda2:	fb01 2313 	mls	r3, r1, r3, r2
   2cda6:	2b00      	cmp	r3, #0
   2cda8:	bfc6      	itte	gt
   2cdaa:	f203 33e7 	addwgt	r3, r3, #999	; 0x3e7
   2cdae:	fbb3 f1f1 	udivgt	r1, r3, r1
   2cdb2:	fb93 f1f1 	sdivle	r1, r3, r1
   2cdb6:	9b04      	ldr	r3, [sp, #16]
   2cdb8:	6019      	str	r1, [r3, #0]
}
   2cdba:	bd30      	pop	{r4, r5, pc}

0002cdbc <RegionCommonComputeTxPower>:
{
   2cdbc:	b538      	push	{r3, r4, r5, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
   2cdbe:	0040      	lsls	r0, r0, #1
{
   2cdc0:	4614      	mov	r4, r2
   2cdc2:	460d      	mov	r5, r1
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
   2cdc4:	f7db fec4 	bl	8b50 <__aeabi_ui2f>
   2cdc8:	4601      	mov	r1, r0
   2cdca:	4628      	mov	r0, r5
   2cdcc:	f7db fe0e 	bl	89ec <__aeabi_fsub>
   2cdd0:	4621      	mov	r1, r4
   2cdd2:	f7db fe0b 	bl	89ec <__aeabi_fsub>
   2cdd6:	f7db fb23 	bl	8420 <__aeabi_f2d>
   2cdda:	f7dc fdf5 	bl	99c8 <floor>
   2cdde:	f7db fd89 	bl	88f4 <__aeabi_d2iz>
}
   2cde2:	b240      	sxtb	r0, r0
   2cde4:	bd38      	pop	{r3, r4, r5, pc}

0002cde6 <RegionCommonCountNbOfEnabledChannels>:
{
   2cde6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cdea:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2cdec:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
   2cdee:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
   2cdf0:	469e      	mov	lr, r3
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2cdf2:	8a04      	ldrh	r4, [r0, #16]
   2cdf4:	011e      	lsls	r6, r3, #4
   2cdf6:	b2f6      	uxtb	r6, r6
   2cdf8:	42b4      	cmp	r4, r6
   2cdfa:	d946      	bls.n	2ce8a <RegionCommonCountNbOfEnabledChannels+0xa4>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
   2cdfc:	2400      	movs	r4, #0
   2cdfe:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   2ce02:	ea4f 0943 	mov.w	r9, r3, lsl #1
   2ce06:	00ad      	lsls	r5, r5, #2
   2ce08:	6847      	ldr	r7, [r0, #4]
   2ce0a:	f837 7009 	ldrh.w	r7, [r7, r9]
   2ce0e:	4127      	asrs	r7, r4
   2ce10:	07ff      	lsls	r7, r7, #31
   2ce12:	d529      	bpl.n	2ce68 <RegionCommonCountNbOfEnabledChannels+0x82>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
   2ce14:	6887      	ldr	r7, [r0, #8]
   2ce16:	eb07 0a05 	add.w	sl, r7, r5
   2ce1a:	597f      	ldr	r7, [r7, r5]
   2ce1c:	b327      	cbz	r7, 2ce68 <RegionCommonCountNbOfEnabledChannels+0x82>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
   2ce1e:	7807      	ldrb	r7, [r0, #0]
   2ce20:	b937      	cbnz	r7, 2ce30 <RegionCommonCountNbOfEnabledChannels+0x4a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
   2ce22:	6947      	ldr	r7, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
   2ce24:	b127      	cbz	r7, 2ce30 <RegionCommonCountNbOfEnabledChannels+0x4a>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
   2ce26:	f837 7009 	ldrh.w	r7, [r7, r9]
   2ce2a:	4127      	asrs	r7, r4
   2ce2c:	07ff      	lsls	r7, r7, #31
   2ce2e:	d51b      	bpl.n	2ce68 <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
   2ce30:	f89a 7008 	ldrb.w	r7, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
   2ce34:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
   2ce38:	f347 0803 	sbfx	r8, r7, #0, #4
    if( ( value >= min ) && ( value <= max ) )
   2ce3c:	fa4f f888 	sxtb.w	r8, r8
   2ce40:	45d8      	cmp	r8, fp
   2ce42:	dc11      	bgt.n	2ce68 <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
   2ce44:	f347 1703 	sbfx	r7, r7, #4, #4
    if( ( value >= min ) && ( value <= max ) )
   2ce48:	b27f      	sxtb	r7, r7
   2ce4a:	455f      	cmp	r7, fp
   2ce4c:	db0c      	blt.n	2ce68 <RegionCommonCountNbOfEnabledChannels+0x82>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
   2ce4e:	f89a 7009 	ldrb.w	r7, [sl, #9]
   2ce52:	eb07 0847 	add.w	r8, r7, r7, lsl #1
   2ce56:	68c7      	ldr	r7, [r0, #12]
   2ce58:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   2ce5c:	7d3f      	ldrb	r7, [r7, #20]
   2ce5e:	b95f      	cbnz	r7, 2ce78 <RegionCommonCountNbOfEnabledChannels+0x92>
                    nbRestrictedChannelsCount++;
   2ce60:	f10c 0c01 	add.w	ip, ip, #1
   2ce64:	fa5f fc8c 	uxtb.w	ip, ip
        for( uint8_t j = 0; j < 16; j++ )
   2ce68:	3401      	adds	r4, #1
   2ce6a:	2c10      	cmp	r4, #16
   2ce6c:	f105 050c 	add.w	r5, r5, #12
   2ce70:	d1ca      	bne.n	2ce08 <RegionCommonCountNbOfEnabledChannels+0x22>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2ce72:	3301      	adds	r3, #1
   2ce74:	b2db      	uxtb	r3, r3
   2ce76:	e7bc      	b.n	2cdf2 <RegionCommonCountNbOfEnabledChannels+0xc>
                enabledChannels[nbChannelCount++] = i + j;
   2ce78:	f10e 0701 	add.w	r7, lr, #1
   2ce7c:	eb06 0804 	add.w	r8, r6, r4
   2ce80:	f801 800e 	strb.w	r8, [r1, lr]
   2ce84:	fa5f fe87 	uxtb.w	lr, r7
   2ce88:	e7ee      	b.n	2ce68 <RegionCommonCountNbOfEnabledChannels+0x82>
    *nbRestrictedChannels = nbRestrictedChannelsCount;
   2ce8a:	9b01      	ldr	r3, [sp, #4]
    *nbEnabledChannels = nbChannelCount;
   2ce8c:	f882 e000 	strb.w	lr, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
   2ce90:	f883 c000 	strb.w	ip, [r3]
}
   2ce94:	b003      	add	sp, #12
   2ce96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ce9a <RegionCommonIdentifyChannels>:
{
   2ce9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2ce9e:	4604      	mov	r4, r0
   2cea0:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
   2cea4:	6840      	ldr	r0, [r0, #4]
{
   2cea6:	461d      	mov	r5, r3
   2cea8:	468a      	mov	sl, r1
   2ceaa:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
   2ceac:	f7fe feed 	bl	2bc8a <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
   2ceb0:	6823      	ldr	r3, [r4, #0]
    *nbEnabledChannels = 0;
   2ceb2:	f04f 0800 	mov.w	r8, #0
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
   2ceb6:	1a1b      	subs	r3, r3, r0
   2ceb8:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
   2ceba:	2301      	movs	r3, #1
   2cebc:	7033      	strb	r3, [r6, #0]
    *nbEnabledChannels = 0;
   2cebe:	f885 8000 	strb.w	r8, [r5]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
   2cec2:	6863      	ldr	r3, [r4, #4]
   2cec4:	b113      	cbz	r3, 2cecc <RegionCommonIdentifyChannels+0x32>
   2cec6:	6823      	ldr	r3, [r4, #0]
   2cec8:	4283      	cmp	r3, r0
   2ceca:	d824      	bhi.n	2cf16 <RegionCommonIdentifyChannels+0x7c>
        *aggregatedTimeOff = 0;
   2cecc:	f8ca 8000 	str.w	r8, [sl]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
   2ced0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   2ced4:	69a3      	ldr	r3, [r4, #24]
   2ced6:	f89c e000 	ldrb.w	lr, [ip]
   2ceda:	9303      	str	r3, [sp, #12]
   2cedc:	ab01      	add	r3, sp, #4
   2cede:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
   2cee2:	e883 0003 	stmia.w	r3, {r0, r1}
   2cee6:	7d23      	ldrb	r3, [r4, #20]
   2cee8:	4670      	mov	r0, lr
   2ceea:	9300      	str	r3, [sp, #0]
   2ceec:	f8dc 100c 	ldr.w	r1, [ip, #12]
   2cef0:	7a23      	ldrb	r3, [r4, #8]
   2cef2:	7a62      	ldrb	r2, [r4, #9]
   2cef4:	f7eb fbbe 	bl	18674 <RegionCommonUpdateBandTimeOff>
   2cef8:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
   2cefa:	4633      	mov	r3, r6
   2cefc:	462a      	mov	r2, r5
   2cefe:	4649      	mov	r1, r9
   2cf00:	69e0      	ldr	r0, [r4, #28]
   2cf02:	f7ff ff70 	bl	2cde6 <RegionCommonCountNbOfEnabledChannels>
    if( *nbEnabledChannels > 0 )
   2cf06:	782b      	ldrb	r3, [r5, #0]
   2cf08:	b12b      	cbz	r3, 2cf16 <RegionCommonIdentifyChannels+0x7c>
        return LORAMAC_STATUS_OK;
   2cf0a:	2000      	movs	r0, #0
        *nextTxDelay = 0;
   2cf0c:	f8c7 8000 	str.w	r8, [r7]
}
   2cf10:	b004      	add	sp, #16
   2cf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
   2cf16:	7833      	ldrb	r3, [r6, #0]
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
   2cf18:	2b00      	cmp	r3, #0
   2cf1a:	bf0c      	ite	eq
   2cf1c:	200c      	moveq	r0, #12
   2cf1e:	200b      	movne	r0, #11
   2cf20:	e7f6      	b.n	2cf10 <RegionCommonIdentifyChannels+0x76>

0002cf22 <RegionCommonGetNextLowerTxDr>:
{
   2cf22:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t drLocal = params->CurrentDr;
   2cf24:	f990 2000 	ldrsb.w	r2, [r0]
    if( params->CurrentDr == params->MinDr )
   2cf28:	f990 5002 	ldrsb.w	r5, [r0, #2]
{
   2cf2c:	4604      	mov	r4, r0
    if( params->CurrentDr == params->MinDr )
   2cf2e:	4295      	cmp	r5, r2
   2cf30:	d00f      	beq.n	2cf52 <RegionCommonGetNextLowerTxDr+0x30>
            drLocal = ( drLocal - 1 );
   2cf32:	3a01      	subs	r2, #1
   2cf34:	b252      	sxtb	r2, r2
        } while( ( drLocal != params->MinDr ) &&
   2cf36:	4295      	cmp	r5, r2
   2cf38:	d00b      	beq.n	2cf52 <RegionCommonGetNextLowerTxDr+0x30>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
   2cf3a:	68a3      	ldr	r3, [r4, #8]
   2cf3c:	9301      	str	r3, [sp, #4]
   2cf3e:	f994 3001 	ldrsb.w	r3, [r4, #1]
   2cf42:	9300      	str	r3, [sp, #0]
   2cf44:	6861      	ldr	r1, [r4, #4]
   2cf46:	462b      	mov	r3, r5
   2cf48:	78e0      	ldrb	r0, [r4, #3]
   2cf4a:	f7ff fe05 	bl	2cb58 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
   2cf4e:	2800      	cmp	r0, #0
   2cf50:	d0ef      	beq.n	2cf32 <RegionCommonGetNextLowerTxDr+0x10>
}
   2cf52:	4610      	mov	r0, r2
   2cf54:	b003      	add	sp, #12
   2cf56:	bd30      	pop	{r4, r5, pc}

0002cf58 <RegionCommonLimitTxPower>:
}
   2cf58:	4288      	cmp	r0, r1
   2cf5a:	bfb8      	it	lt
   2cf5c:	4608      	movlt	r0, r1
   2cf5e:	4770      	bx	lr

0002cf60 <RegionEU868Verify>:
{
   2cf60:	b507      	push	{r0, r1, r2, lr}
    switch( phyAttribute )
   2cf62:	290e      	cmp	r1, #14
   2cf64:	d81f      	bhi.n	2cfa6 <RegionEU868Verify+0x46>
   2cf66:	e8df f001 	tbb	[pc, r1]
   2cf6a:	1e0c      	.short	0x1e0c
   2cf6c:	1c1e1e1e 	.word	0x1c1e1e1e
   2cf70:	1c1e1c12 	.word	0x1c1e1c12
   2cf74:	1e1e1e1c 	.word	0x1e1e1e1c
   2cf78:	08          	.byte	0x08
   2cf79:	00          	.byte	0x00
            return EU868_DUTY_CYCLE_ENABLED;
   2cf7a:	2001      	movs	r0, #1
}
   2cf7c:	b003      	add	sp, #12
   2cf7e:	f85d fb04 	ldr.w	pc, [sp], #4
            return VerifyRfFreq( verify->Frequency, &band );
   2cf82:	f10d 0107 	add.w	r1, sp, #7
   2cf86:	6800      	ldr	r0, [r0, #0]
   2cf88:	f7eb fcbe 	bl	18908 <VerifyRfFreq>
   2cf8c:	e7f6      	b.n	2cf7c <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
   2cf8e:	2205      	movs	r2, #5
   2cf90:	2100      	movs	r1, #0
   2cf92:	f990 0000 	ldrsb.w	r0, [r0]
   2cf96:	f7ff fe0c 	bl	2cbb2 <RegionCommonValueInRange>
   2cf9a:	3800      	subs	r0, #0
   2cf9c:	bf18      	it	ne
   2cf9e:	2001      	movne	r0, #1
   2cfa0:	e7ec      	b.n	2cf7c <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
   2cfa2:	2207      	movs	r2, #7
   2cfa4:	e7f4      	b.n	2cf90 <RegionEU868Verify+0x30>
    switch( phyAttribute )
   2cfa6:	2000      	movs	r0, #0
   2cfa8:	e7e8      	b.n	2cf7c <RegionEU868Verify+0x1c>

0002cfaa <RegionEU868RxParamSetupReq>:
{
   2cfaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cfac:	4605      	mov	r5, r0
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
   2cfae:	f10d 0107 	add.w	r1, sp, #7
   2cfb2:	6840      	ldr	r0, [r0, #4]
   2cfb4:	f7eb fca8 	bl	18908 <VerifyRfFreq>
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
   2cfb8:	2207      	movs	r2, #7
   2cfba:	1d84      	adds	r4, r0, #6
   2cfbc:	2100      	movs	r1, #0
   2cfbe:	f995 0000 	ldrsb.w	r0, [r5]
   2cfc2:	b2e4      	uxtb	r4, r4
   2cfc4:	f7ff fdf5 	bl	2cbb2 <RegionCommonValueInRange>
   2cfc8:	b908      	cbnz	r0, 2cfce <RegionEU868RxParamSetupReq+0x24>
        status &= 0xFD; // Datarate KO
   2cfca:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
   2cfce:	2205      	movs	r2, #5
   2cfd0:	2100      	movs	r1, #0
   2cfd2:	f995 0001 	ldrsb.w	r0, [r5, #1]
   2cfd6:	f7ff fdec 	bl	2cbb2 <RegionCommonValueInRange>
   2cfda:	b908      	cbnz	r0, 2cfe0 <RegionEU868RxParamSetupReq+0x36>
        status &= 0xFB; // Rx1DrOffset range KO
   2cfdc:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
}
   2cfe0:	4620      	mov	r0, r4
   2cfe2:	b003      	add	sp, #12
   2cfe4:	bd30      	pop	{r4, r5, pc}

0002cfe6 <RegionEU868TxParamSetupReq>:
}
   2cfe6:	f04f 30ff 	mov.w	r0, #4294967295
   2cfea:	4770      	bx	lr

0002cfec <RegionEU868AlternateDr>:
}
   2cfec:	4770      	bx	lr

0002cfee <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
   2cfee:	2350      	movs	r3, #80	; 0x50
{
   2cff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cff4:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
   2cff6:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
   2cffa:	7a03      	ldrb	r3, [r0, #8]
{
   2cffc:	4680      	mov	r8, r0
    if( applyCFList->Size != 16 )
   2cffe:	2b10      	cmp	r3, #16
   2d000:	d12e      	bne.n	2d060 <RegionEU868ApplyCFList+0x72>
    if( applyCFList->Payload[15] != 0 )
   2d002:	6843      	ldr	r3, [r0, #4]
   2d004:	7bdb      	ldrb	r3, [r3, #15]
   2d006:	bb5b      	cbnz	r3, 2d060 <RegionEU868ApplyCFList+0x72>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d008:	2103      	movs	r1, #3
            newChannel.Frequency = 0;
   2d00a:	461c      	mov	r4, r3
            newChannel.Frequency *= 100;
   2d00c:	2764      	movs	r7, #100	; 0x64
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
   2d00e:	2907      	cmp	r1, #7
   2d010:	f101 0601 	add.w	r6, r1, #1
   2d014:	f103 0503 	add.w	r5, r3, #3
   2d018:	d815      	bhi.n	2d046 <RegionEU868ApplyCFList+0x58>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
   2d01a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2d01e:	5cc2      	ldrb	r2, [r0, r3]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
   2d020:	4418      	add	r0, r3
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
   2d022:	9203      	str	r2, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
   2d024:	7843      	ldrb	r3, [r0, #1]
   2d026:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2d02a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
   2d02c:	7882      	ldrb	r2, [r0, #2]
   2d02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
   2d032:	437b      	muls	r3, r7
            newChannel.Rx1Frequency = 0;
   2d034:	e9cd 3403 	strd	r3, r4, [sp, #12]
        if( newChannel.Frequency != 0 )
   2d038:	b9ab      	cbnz	r3, 2d066 <RegionEU868ApplyCFList+0x78>
            RegionEU868ChannelsRemove( &channelRemove );
   2d03a:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
   2d03c:	f88d 1000 	strb.w	r1, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
   2d040:	f7ec f8b2 	bl	191a8 <RegionEU868ChannelsRemove>
   2d044:	e016      	b.n	2d074 <RegionEU868ApplyCFList+0x86>
   2d046:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
   2d048:	f88d 1000 	strb.w	r1, [sp]
            newChannel.Frequency = 0;
   2d04c:	9403      	str	r4, [sp, #12]
            newChannel.DrRange.Value = 0;
   2d04e:	f88d 4014 	strb.w	r4, [sp, #20]
            newChannel.Rx1Frequency = 0;
   2d052:	9404      	str	r4, [sp, #16]
            RegionEU868ChannelsRemove( &channelRemove );
   2d054:	f7ec f8a8 	bl	191a8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d058:	b2f1      	uxtb	r1, r6
   2d05a:	2910      	cmp	r1, #16
   2d05c:	462b      	mov	r3, r5
   2d05e:	d1d6      	bne.n	2d00e <RegionEU868ApplyCFList+0x20>
}
   2d060:	b006      	add	sp, #24
   2d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            channelAdd.NewChannel = &newChannel;
   2d066:	ab03      	add	r3, sp, #12
            RegionEU868ChannelAdd( &channelAdd );
   2d068:	a801      	add	r0, sp, #4
            channelAdd.NewChannel = &newChannel;
   2d06a:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
   2d06c:	f88d 1008 	strb.w	r1, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
   2d070:	f7ec f83a 	bl	190e8 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d074:	462b      	mov	r3, r5
   2d076:	b2f1      	uxtb	r1, r6
   2d078:	e7c9      	b.n	2d00e <RegionEU868ApplyCFList+0x20>

0002d07a <RegionEU868NewChannelReq>:
{
   2d07a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
   2d07c:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
   2d07e:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
   2d080:	6811      	ldr	r1, [r2, #0]
   2d082:	b949      	cbnz	r1, 2d098 <RegionEU868NewChannelReq+0x1e>
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
   2d084:	a801      	add	r0, sp, #4
        channelRemove.ChannelId = newChannelReq->ChannelId;
   2d086:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
   2d08a:	f7ec f88d 	bl	191a8 <RegionEU868ChannelsRemove>
   2d08e:	b178      	cbz	r0, 2d0b0 <RegionEU868NewChannelReq+0x36>
    uint8_t status = 0x03;
   2d090:	2003      	movs	r0, #3
}
   2d092:	b005      	add	sp, #20
   2d094:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( RegionEU868ChannelAdd( &channelAdd ) )
   2d098:	a802      	add	r0, sp, #8
        channelAdd.NewChannel = newChannelReq->NewChannel;
   2d09a:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
   2d09c:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
   2d0a0:	f7ec f822 	bl	190e8 <RegionEU868ChannelAdd>
   2d0a4:	2804      	cmp	r0, #4
   2d0a6:	d005      	beq.n	2d0b4 <RegionEU868NewChannelReq+0x3a>
   2d0a8:	2805      	cmp	r0, #5
   2d0aa:	d005      	beq.n	2d0b8 <RegionEU868NewChannelReq+0x3e>
   2d0ac:	2800      	cmp	r0, #0
   2d0ae:	d0ef      	beq.n	2d090 <RegionEU868NewChannelReq+0x16>
{
   2d0b0:	2000      	movs	r0, #0
   2d0b2:	e7ee      	b.n	2d092 <RegionEU868NewChannelReq+0x18>
                status &= 0xFE;
   2d0b4:	2002      	movs	r0, #2
   2d0b6:	e7ec      	b.n	2d092 <RegionEU868NewChannelReq+0x18>
                status &= 0xFD;
   2d0b8:	2001      	movs	r0, #1
   2d0ba:	e7ea      	b.n	2d092 <RegionEU868NewChannelReq+0x18>

0002d0bc <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
   2d0bc:	1a88      	subs	r0, r1, r2

    if( datarate < 0 )
   2d0be:	b240      	sxtb	r0, r0
   2d0c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    {
        datarate = DR_0;
    }
    return datarate;
}
   2d0c4:	b2c0      	uxtb	r0, r0
   2d0c6:	4770      	bx	lr

0002d0c8 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2d0c8:	b530      	push	{r4, r5, lr}
   2d0ca:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   2d0cc:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   2d0d0:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2d0d2:	794b      	ldrb	r3, [r1, #5]
   2d0d4:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   2d0d8:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   2d0da:	220d      	movs	r2, #13
   2d0dc:	2100      	movs	r1, #0
   2d0de:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   2d0e2:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   2d0e6:	f004 fb4c 	bl	31782 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2d0ea:	aa02      	add	r2, sp, #8
   2d0ec:	4611      	mov	r1, r2
   2d0ee:	4628      	mov	r0, r5
   2d0f0:	f000 fb73 	bl	2d7da <bt_encrypt_le>
	if (err) {
   2d0f4:	b110      	cbz	r0, 2d0fc <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   2d0f6:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2d0f8:	b007      	add	sp, #28
   2d0fa:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   2d0fc:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   2d0fe:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   2d100:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   2d104:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   2d106:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   2d108:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   2d10a:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2d10e:	f004 faee 	bl	316ee <memcmp>
   2d112:	fab0 f080 	clz	r0, r0
   2d116:	0940      	lsrs	r0, r0, #5
   2d118:	e7ee      	b.n	2d0f8 <bt_rpa_irk_matches+0x30>

0002d11a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2d11a:	b510      	push	{r4, lr}
   2d11c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2d11e:	7801      	ldrb	r1, [r0, #0]
   2d120:	7822      	ldrb	r2, [r4, #0]
{
   2d122:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2d124:	428a      	cmp	r2, r1
   2d126:	d00f      	beq.n	2d148 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2d128:	4669      	mov	r1, sp
   2d12a:	f7ec f8d7 	bl	192dc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2d12e:	4620      	mov	r0, r4
   2d130:	a905      	add	r1, sp, #20
   2d132:	f7ec f8d3 	bl	192dc <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2d136:	2210      	movs	r2, #16
   2d138:	f10d 0115 	add.w	r1, sp, #21
   2d13c:	f10d 0001 	add.w	r0, sp, #1
   2d140:	f004 fad5 	bl	316ee <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2d144:	b00a      	add	sp, #40	; 0x28
   2d146:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2d148:	2a01      	cmp	r2, #1
   2d14a:	d006      	beq.n	2d15a <bt_uuid_cmp+0x40>
   2d14c:	2a02      	cmp	r2, #2
   2d14e:	d007      	beq.n	2d160 <bt_uuid_cmp+0x46>
   2d150:	b972      	cbnz	r2, 2d170 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2d152:	8840      	ldrh	r0, [r0, #2]
   2d154:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2d156:	1ac0      	subs	r0, r0, r3
   2d158:	e7f4      	b.n	2d144 <bt_uuid_cmp+0x2a>
   2d15a:	6840      	ldr	r0, [r0, #4]
   2d15c:	6863      	ldr	r3, [r4, #4]
   2d15e:	e7fa      	b.n	2d156 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2d160:	2210      	movs	r2, #16
   2d162:	1c61      	adds	r1, r4, #1
   2d164:	3001      	adds	r0, #1
}
   2d166:	b00a      	add	sp, #40	; 0x28
   2d168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2d16c:	f004 babf 	b.w	316ee <memcmp>
	switch (u1->type) {
   2d170:	f06f 0015 	mvn.w	r0, #21
   2d174:	e7e6      	b.n	2d144 <bt_uuid_cmp+0x2a>

0002d176 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2d176:	2a04      	cmp	r2, #4
   2d178:	d00a      	beq.n	2d190 <bt_uuid_create+0x1a>
   2d17a:	2a10      	cmp	r2, #16
   2d17c:	d00d      	beq.n	2d19a <bt_uuid_create+0x24>
   2d17e:	2a02      	cmp	r2, #2
   2d180:	f04f 0300 	mov.w	r3, #0
   2d184:	d115      	bne.n	2d1b2 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2d186:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2d188:	880b      	ldrh	r3, [r1, #0]
   2d18a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2d18c:	2001      	movs	r0, #1
   2d18e:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2d190:	2301      	movs	r3, #1
   2d192:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2d194:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2d196:	6043      	str	r3, [r0, #4]
		break;
   2d198:	e7f8      	b.n	2d18c <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2d19a:	2302      	movs	r3, #2
   2d19c:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d1a0:	f101 0310 	add.w	r3, r1, #16
   2d1a4:	f851 2b04 	ldr.w	r2, [r1], #4
   2d1a8:	4299      	cmp	r1, r3
   2d1aa:	f840 2b04 	str.w	r2, [r0], #4
   2d1ae:	d1f9      	bne.n	2d1a4 <bt_uuid_create+0x2e>
   2d1b0:	e7ec      	b.n	2d18c <bt_uuid_create+0x16>
	switch (data_len) {
   2d1b2:	4618      	mov	r0, r3
}
   2d1b4:	4770      	bx	lr

0002d1b6 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2d1b6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2d1b8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2d1ba:	2106      	movs	r1, #6
{
   2d1bc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2d1be:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2d1c2:	f7ee fadf 	bl	1b784 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2d1c6:	b918      	cbnz	r0, 2d1d0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2d1c8:	79a3      	ldrb	r3, [r4, #6]
   2d1ca:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2d1ce:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2d1d0:	bd10      	pop	{r4, pc}

0002d1d2 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2d1d2:	280f      	cmp	r0, #15
   2d1d4:	d807      	bhi.n	2d1e6 <bt_hci_evt_get_flags+0x14>
   2d1d6:	280d      	cmp	r0, #13
   2d1d8:	d80b      	bhi.n	2d1f2 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2d1da:	2805      	cmp	r0, #5
   2d1dc:	bf08      	it	eq
   2d1de:	2003      	moveq	r0, #3
   2d1e0:	bf18      	it	ne
   2d1e2:	2002      	movne	r0, #2
   2d1e4:	4770      	bx	lr
	switch (evt) {
   2d1e6:	2813      	cmp	r0, #19
   2d1e8:	d003      	beq.n	2d1f2 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2d1ea:	281a      	cmp	r0, #26
   2d1ec:	bf08      	it	eq
   2d1ee:	2001      	moveq	r0, #1
   2d1f0:	e7f6      	b.n	2d1e0 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2d1f2:	2001      	movs	r0, #1
	}
}
   2d1f4:	4770      	bx	lr

0002d1f6 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2d1f6:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2d1fa:	b183      	cbz	r3, 2d21e <update_sec_level+0x28>
   2d1fc:	7b5a      	ldrb	r2, [r3, #13]
   2d1fe:	07d1      	lsls	r1, r2, #31
   2d200:	d50d      	bpl.n	2d21e <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2d202:	06d2      	lsls	r2, r2, #27
   2d204:	d50d      	bpl.n	2d222 <update_sec_level+0x2c>
   2d206:	7b1b      	ldrb	r3, [r3, #12]
   2d208:	2b10      	cmp	r3, #16
   2d20a:	bf14      	ite	ne
   2d20c:	2303      	movne	r3, #3
   2d20e:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2d210:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2d212:	7a80      	ldrb	r0, [r0, #10]
}
   2d214:	4298      	cmp	r0, r3
   2d216:	bf8c      	ite	hi
   2d218:	2000      	movhi	r0, #0
   2d21a:	2001      	movls	r0, #1
   2d21c:	4770      	bx	lr
   2d21e:	2302      	movs	r3, #2
   2d220:	e7f6      	b.n	2d210 <update_sec_level+0x1a>
   2d222:	2303      	movs	r3, #3
   2d224:	e7f4      	b.n	2d210 <update_sec_level+0x1a>

0002d226 <hci_vendor_event>:
}
   2d226:	4770      	bx	lr

0002d228 <atomic_or>:
{
   2d228:	4603      	mov	r3, r0
   2d22a:	b510      	push	{r4, lr}
}
   2d22c:	e8d3 0fef 	ldaex	r0, [r3]
   2d230:	ea40 0201 	orr.w	r2, r0, r1
   2d234:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d238:	2c00      	cmp	r4, #0
   2d23a:	d1f7      	bne.n	2d22c <atomic_or+0x4>
   2d23c:	bd10      	pop	{r4, pc}

0002d23e <bt_addr_copy>:
   2d23e:	680b      	ldr	r3, [r1, #0]
   2d240:	6003      	str	r3, [r0, #0]
   2d242:	888b      	ldrh	r3, [r1, #4]
   2d244:	8083      	strh	r3, [r0, #4]
}
   2d246:	4770      	bx	lr

0002d248 <bt_addr_le_copy>:
   2d248:	680b      	ldr	r3, [r1, #0]
   2d24a:	6003      	str	r3, [r0, #0]
   2d24c:	888b      	ldrh	r3, [r1, #4]
   2d24e:	8083      	strh	r3, [r0, #4]
   2d250:	798b      	ldrb	r3, [r1, #6]
   2d252:	7183      	strb	r3, [r0, #6]
}
   2d254:	4770      	bx	lr

0002d256 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d256:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d258:	ab0b      	add	r3, sp, #44	; 0x2c
   2d25a:	9305      	str	r3, [sp, #20]
   2d25c:	9303      	str	r3, [sp, #12]
   2d25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d260:	9302      	str	r3, [sp, #8]
   2d262:	2300      	movs	r3, #0
   2d264:	4618      	mov	r0, r3
   2d266:	e9cd 3300 	strd	r3, r3, [sp]
   2d26a:	f7e2 f8df 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2d26e:	b007      	add	sp, #28
   2d270:	f85d fb04 	ldr.w	pc, [sp], #4

0002d274 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d274:	e8d0 3fef 	ldaex	r3, [r0]
   2d278:	400b      	ands	r3, r1
   2d27a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2d27e:	2a00      	cmp	r2, #0
   2d280:	d1f8      	bne.n	2d274 <atomic_and.isra.0>
}
   2d282:	4770      	bx	lr

0002d284 <sys_put_le64>:
	dst[1] = val >> 8;
   2d284:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2d288:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2d28a:	2300      	movs	r3, #0
   2d28c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2d28e:	0e00      	lsrs	r0, r0, #24
   2d290:	70d0      	strb	r0, [r2, #3]
   2d292:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2d296:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2d298:	7093      	strb	r3, [r2, #2]
   2d29a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2d29c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2d29e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2d2a0:	71d1      	strb	r1, [r2, #7]
}
   2d2a2:	4770      	bx	lr

0002d2a4 <bt_hci_disconnect>:
{
   2d2a4:	b570      	push	{r4, r5, r6, lr}
   2d2a6:	4606      	mov	r6, r0
   2d2a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2d2aa:	f240 4006 	movw	r0, #1030	; 0x406
   2d2ae:	2103      	movs	r1, #3
   2d2b0:	f7ec fc8c 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   2d2b4:	4604      	mov	r4, r0
   2d2b6:	b168      	cbz	r0, 2d2d4 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2d2b8:	2103      	movs	r1, #3
   2d2ba:	300c      	adds	r0, #12
   2d2bc:	f002 f829 	bl	2f312 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2d2c0:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2d2c2:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d2c4:	4621      	mov	r1, r4
}
   2d2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d2ca:	2200      	movs	r2, #0
   2d2cc:	f240 4006 	movw	r0, #1030	; 0x406
   2d2d0:	f7ec bcb6 	b.w	19c40 <bt_hci_cmd_send_sync>
}
   2d2d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d2d8:	bd70      	pop	{r4, r5, r6, pc}

0002d2da <bt_le_set_data_len>:
{
   2d2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d2dc:	4607      	mov	r7, r0
   2d2de:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d2e0:	f242 0022 	movw	r0, #8226	; 0x2022
   2d2e4:	2106      	movs	r1, #6
{
   2d2e6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d2e8:	f7ec fc70 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   2d2ec:	4604      	mov	r4, r0
   2d2ee:	b178      	cbz	r0, 2d310 <bt_le_set_data_len+0x36>
   2d2f0:	2106      	movs	r1, #6
   2d2f2:	300c      	adds	r0, #12
   2d2f4:	f002 f80d 	bl	2f312 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d2f8:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2d2fa:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d2fc:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2d2fe:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2d300:	4621      	mov	r1, r4
}
   2d302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2d306:	2200      	movs	r2, #0
   2d308:	f242 0022 	movw	r0, #8226	; 0x2022
   2d30c:	f7ec bc98 	b.w	19c40 <bt_hci_cmd_send_sync>
}
   2d310:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d316 <bt_le_set_phy>:
{
   2d316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d31a:	4681      	mov	r9, r0
   2d31c:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d31e:	f242 0032 	movw	r0, #8242	; 0x2032
   2d322:	2107      	movs	r1, #7
{
   2d324:	4617      	mov	r7, r2
   2d326:	461e      	mov	r6, r3
   2d328:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d32c:	f7ec fc4e 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   2d330:	4605      	mov	r5, r0
   2d332:	b1a0      	cbz	r0, 2d35e <bt_le_set_phy+0x48>
   2d334:	2107      	movs	r1, #7
   2d336:	300c      	adds	r0, #12
   2d338:	f001 ffeb 	bl	2f312 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d33c:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   2d340:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d344:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2d346:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2d348:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2d34a:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2d34e:	4629      	mov	r1, r5
}
   2d350:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2d354:	2200      	movs	r2, #0
   2d356:	f242 0032 	movw	r0, #8242	; 0x2032
   2d35a:	f7ec bc71 	b.w	19c40 <bt_hci_cmd_send_sync>
}
   2d35e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d366 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2d366:	68c0      	ldr	r0, [r0, #12]
   2d368:	f7ec bd34 	b.w	19dd4 <bt_hci_le_enh_conn_complete>

0002d36c <bt_le_conn_params_valid>:
{
   2d36c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2d36e:	8803      	ldrh	r3, [r0, #0]
   2d370:	8842      	ldrh	r2, [r0, #2]
   2d372:	4293      	cmp	r3, r2
   2d374:	d819      	bhi.n	2d3aa <bt_le_conn_params_valid+0x3e>
   2d376:	2b05      	cmp	r3, #5
   2d378:	d917      	bls.n	2d3aa <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2d37a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2d37e:	d814      	bhi.n	2d3aa <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2d380:	8883      	ldrh	r3, [r0, #4]
   2d382:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2d386:	d210      	bcs.n	2d3aa <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d388:	f640 4476 	movw	r4, #3190	; 0xc76
   2d38c:	88c0      	ldrh	r0, [r0, #6]
   2d38e:	f1a0 010a 	sub.w	r1, r0, #10
   2d392:	b289      	uxth	r1, r1
   2d394:	42a1      	cmp	r1, r4
   2d396:	d808      	bhi.n	2d3aa <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2d398:	3301      	adds	r3, #1
   2d39a:	b29b      	uxth	r3, r3
   2d39c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d39e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2d3a2:	bf34      	ite	cc
   2d3a4:	2001      	movcc	r0, #1
   2d3a6:	2000      	movcs	r0, #0
}
   2d3a8:	bd10      	pop	{r4, pc}
		return false;
   2d3aa:	2000      	movs	r0, #0
   2d3ac:	e7fc      	b.n	2d3a8 <bt_le_conn_params_valid+0x3c>

0002d3ae <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2d3ae:	f240 3041 	movw	r0, #833	; 0x341
   2d3b2:	4770      	bx	lr

0002d3b4 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2d3b4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2d3b6:	f7f2 fefd 	bl	201b4 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2d3ba:	b118      	cbz	r0, 2d3c4 <bt_addr_le_is_bonded+0x10>
   2d3bc:	89c0      	ldrh	r0, [r0, #14]
   2d3be:	3800      	subs	r0, #0
   2d3c0:	bf18      	it	ne
   2d3c2:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2d3c4:	bd08      	pop	{r3, pc}

0002d3c6 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2d3c6:	2207      	movs	r2, #7
{
   2d3c8:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2d3ca:	f004 f990 	bl	316ee <memcmp>
}
   2d3ce:	fab0 f080 	clz	r0, r0
   2d3d2:	0940      	lsrs	r0, r0, #5
   2d3d4:	bd08      	pop	{r3, pc}

0002d3d6 <bt_addr_copy>:
   2d3d6:	680b      	ldr	r3, [r1, #0]
   2d3d8:	6003      	str	r3, [r0, #0]
   2d3da:	888b      	ldrh	r3, [r1, #4]
   2d3dc:	8083      	strh	r3, [r0, #4]
}
   2d3de:	4770      	bx	lr

0002d3e0 <bt_addr_le_copy>:
   2d3e0:	680b      	ldr	r3, [r1, #0]
   2d3e2:	6003      	str	r3, [r0, #0]
   2d3e4:	888b      	ldrh	r3, [r1, #4]
   2d3e6:	8083      	strh	r3, [r0, #4]
   2d3e8:	798b      	ldrb	r3, [r1, #6]
   2d3ea:	7183      	strb	r3, [r0, #6]
}
   2d3ec:	4770      	bx	lr

0002d3ee <hci_id_add>:
{
   2d3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3f0:	460f      	mov	r7, r1
   2d3f2:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2d3f4:	bb30      	cbnz	r0, 2d444 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2d3f6:	2127      	movs	r1, #39	; 0x27
   2d3f8:	f242 0027 	movw	r0, #8231	; 0x2027
   2d3fc:	f7ec fbe6 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   2d400:	4605      	mov	r5, r0
   2d402:	b310      	cbz	r0, 2d44a <hci_id_add+0x5c>
   2d404:	2127      	movs	r1, #39	; 0x27
   2d406:	300c      	adds	r0, #12
   2d408:	f001 ff83 	bl	2f312 <net_buf_simple_add>
   2d40c:	4622      	mov	r2, r4
   2d40e:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2d410:	4639      	mov	r1, r7
   2d412:	f7ff ffe5 	bl	2d3e0 <bt_addr_le_copy>
   2d416:	1dc3      	adds	r3, r0, #7
   2d418:	f104 0110 	add.w	r1, r4, #16
   2d41c:	f852 0b04 	ldr.w	r0, [r2], #4
   2d420:	428a      	cmp	r2, r1
   2d422:	f843 0b04 	str.w	r0, [r3], #4
   2d426:	d1f9      	bne.n	2d41c <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2d428:	2210      	movs	r2, #16
   2d42a:	2100      	movs	r1, #0
   2d42c:	f106 0017 	add.w	r0, r6, #23
   2d430:	f004 f9a7 	bl	31782 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2d434:	4629      	mov	r1, r5
}
   2d436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2d43a:	2200      	movs	r2, #0
   2d43c:	f242 0027 	movw	r0, #8231	; 0x2027
   2d440:	f7ec bbfe 	b.w	19c40 <bt_hci_cmd_send_sync>
		return -EINVAL;
   2d444:	f06f 0015 	mvn.w	r0, #21
}
   2d448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2d44a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d44e:	e7fb      	b.n	2d448 <hci_id_add+0x5a>

0002d450 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2d450:	7a03      	ldrb	r3, [r0, #8]
{
   2d452:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2d454:	075b      	lsls	r3, r3, #29
   2d456:	d505      	bpl.n	2d464 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2d458:	4601      	mov	r1, r0
   2d45a:	322a      	adds	r2, #42	; 0x2a
   2d45c:	f811 0b01 	ldrb.w	r0, [r1], #1
   2d460:	f7ff bfc5 	b.w	2d3ee <hci_id_add>
}
   2d464:	4770      	bx	lr

0002d466 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d466:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d468:	ab0b      	add	r3, sp, #44	; 0x2c
   2d46a:	9305      	str	r3, [sp, #20]
   2d46c:	9303      	str	r3, [sp, #12]
   2d46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d470:	9302      	str	r3, [sp, #8]
   2d472:	2300      	movs	r3, #0
   2d474:	4618      	mov	r0, r3
   2d476:	e9cd 3300 	strd	r3, r3, [sp]
   2d47a:	f7e1 ffd7 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2d47e:	b007      	add	sp, #28
   2d480:	f85d fb04 	ldr.w	pc, [sp], #4

0002d484 <addr_res_enable>:
{
   2d484:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2d486:	2101      	movs	r1, #1
{
   2d488:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2d48a:	f242 002d 	movw	r0, #8237	; 0x202d
   2d48e:	f7ec fb9d 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   2d492:	4604      	mov	r4, r0
   2d494:	b158      	cbz	r0, 2d4ae <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2d496:	4629      	mov	r1, r5
   2d498:	300c      	adds	r0, #12
   2d49a:	f001 ff49 	bl	2f330 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2d49e:	4621      	mov	r1, r4
}
   2d4a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2d4a4:	2200      	movs	r2, #0
   2d4a6:	f242 002d 	movw	r0, #8237	; 0x202d
   2d4aa:	f7ec bbc9 	b.w	19c40 <bt_hci_cmd_send_sync>
}
   2d4ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d4b2:	bd38      	pop	{r3, r4, r5, pc}

0002d4b4 <adv_unpause_enabled>:
{
   2d4b4:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d4b6:	f100 0310 	add.w	r3, r0, #16
   2d4ba:	e8d3 2fef 	ldaex	r2, [r3]
   2d4be:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2d4c2:	e8c3 1fe4 	stlex	r4, r1, [r3]
   2d4c6:	2c00      	cmp	r4, #0
   2d4c8:	d1f7      	bne.n	2d4ba <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2d4ca:	0413      	lsls	r3, r2, #16
   2d4cc:	d503      	bpl.n	2d4d6 <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   2d4ce:	2101      	movs	r1, #1
}
   2d4d0:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2d4d2:	f000 b96d 	b.w	2d7b0 <bt_le_adv_set_enable>
}
   2d4d6:	bc10      	pop	{r4}
   2d4d8:	4770      	bx	lr

0002d4da <find_rl_conflict>:
{
   2d4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   2d4de:	684f      	ldr	r7, [r1, #4]
{
   2d4e0:	4605      	mov	r5, r0
   2d4e2:	460c      	mov	r4, r1
   2d4e4:	b086      	sub	sp, #24
	if (conflict->found) {
   2d4e6:	b9c7      	cbnz	r7, 2d51a <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   2d4e8:	7a03      	ldrb	r3, [r0, #8]
   2d4ea:	075b      	lsls	r3, r3, #29
   2d4ec:	d515      	bpl.n	2d51a <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2d4ee:	6808      	ldr	r0, [r1, #0]
   2d4f0:	1c69      	adds	r1, r5, #1
   2d4f2:	3001      	adds	r0, #1
   2d4f4:	f7ff ff67 	bl	2d3c6 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d4f8:	f8d4 8000 	ldr.w	r8, [r4]
   2d4fc:	2216      	movs	r2, #22
   2d4fe:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2d500:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d502:	4668      	mov	r0, sp
   2d504:	f004 f93d 	bl	31782 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   2d508:	2210      	movs	r2, #16
   2d50a:	4669      	mov	r1, sp
   2d50c:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   2d510:	f004 f8ed 	bl	316ee <memcmp>
   2d514:	b920      	cbnz	r0, 2d520 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   2d516:	b106      	cbz	r6, 2d51a <find_rl_conflict+0x40>
		conflict->found = resident;
   2d518:	6065      	str	r5, [r4, #4]
}
   2d51a:	b006      	add	sp, #24
   2d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d520:	6820      	ldr	r0, [r4, #0]
   2d522:	2210      	movs	r2, #16
   2d524:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2d528:	302a      	adds	r0, #42	; 0x2a
   2d52a:	f004 f8e0 	bl	316ee <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d52e:	2800      	cmp	r0, #0
   2d530:	d0f2      	beq.n	2d518 <find_rl_conflict+0x3e>
   2d532:	e7f0      	b.n	2d516 <find_rl_conflict+0x3c>

0002d534 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2d534:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d538:	e8d3 2faf 	lda	r2, [r3]
   2d53c:	0612      	lsls	r2, r2, #24
   2d53e:	d50a      	bpl.n	2d556 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d540:	e8d3 1fef 	ldaex	r1, [r3]
   2d544:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   2d548:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2d54c:	2a00      	cmp	r2, #0
   2d54e:	d1f7      	bne.n	2d540 <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   2d550:	2100      	movs	r1, #0
   2d552:	f000 b92d 	b.w	2d7b0 <bt_le_adv_set_enable>
}
   2d556:	4770      	bx	lr

0002d558 <bt_lookup_id_addr>:
{
   2d558:	b510      	push	{r4, lr}
   2d55a:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2d55c:	b930      	cbnz	r0, 2d56c <bt_lookup_id_addr+0x14>
   2d55e:	b119      	cbz	r1, 2d568 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2d560:	f7f2 fde2 	bl	20128 <bt_keys_find_irk>
		if (keys) {
   2d564:	b100      	cbz	r0, 2d568 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2d566:	1c44      	adds	r4, r0, #1
}
   2d568:	4620      	mov	r0, r4
   2d56a:	bd10      	pop	{r4, pc}
		return NULL;
   2d56c:	2400      	movs	r4, #0
   2d56e:	e7fb      	b.n	2d568 <bt_lookup_id_addr+0x10>

0002d570 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2d570:	b118      	cbz	r0, 2d57a <bt_id_set_adv_random_addr+0xa>
   2d572:	b111      	cbz	r1, 2d57a <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2d574:	4608      	mov	r0, r1
   2d576:	f7ed ba45 	b.w	1aa04 <set_random_address>
}
   2d57a:	f06f 0015 	mvn.w	r0, #21
   2d57e:	4770      	bx	lr

0002d580 <bt_id_set_adv_private_addr>:
{
   2d580:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2d582:	4604      	mov	r4, r0
   2d584:	b180      	cbz	r0, 2d5a8 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2d586:	2106      	movs	r1, #6
   2d588:	4668      	mov	r0, sp
   2d58a:	f7ee f8fb 	bl	1b784 <bt_rand>
	if (err) {
   2d58e:	b948      	cbnz	r0, 2d5a4 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2d590:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d594:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2d596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d59a:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   2d59c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d5a0:	f7ff ffe6 	bl	2d570 <bt_id_set_adv_random_addr>
}
   2d5a4:	b002      	add	sp, #8
   2d5a6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2d5a8:	f06f 0015 	mvn.w	r0, #21
   2d5ac:	e7fa      	b.n	2d5a4 <bt_id_set_adv_private_addr+0x24>

0002d5ae <bt_id_adv_random_addr_check>:
}
   2d5ae:	3800      	subs	r0, #0
   2d5b0:	bf18      	it	ne
   2d5b2:	2001      	movne	r0, #1
   2d5b4:	4770      	bx	lr

0002d5b6 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2d5b6:	7a03      	ldrb	r3, [r0, #8]
   2d5b8:	07d9      	lsls	r1, r3, #31
   2d5ba:	d504      	bpl.n	2d5c6 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2d5bc:	f023 0301 	bic.w	r3, r3, #1
   2d5c0:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2d5c2:	f7ed ba6d 	b.w	1aaa0 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2d5c6:	0799      	lsls	r1, r3, #30
   2d5c8:	d504      	bpl.n	2d5d4 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2d5ca:	f023 0302 	bic.w	r3, r3, #2
   2d5ce:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2d5d0:	f7ed bb32 	b.w	1ac38 <bt_id_del>
}
   2d5d4:	4770      	bx	lr

0002d5d6 <get_adv_channel_map>:
{
   2d5d6:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2d5d8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2d5dc:	bf0c      	ite	eq
   2d5de:	2007      	moveq	r0, #7
   2d5e0:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2d5e2:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2d5e4:	bf48      	it	mi
   2d5e6:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2d5ea:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2d5ec:	bf48      	it	mi
   2d5ee:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2d5f2:	4770      	bx	lr

0002d5f4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d5f4:	e8d0 0faf 	lda	r0, [r0]
}
   2d5f8:	4770      	bx	lr

0002d5fa <atomic_and>:
{
   2d5fa:	4603      	mov	r3, r0
   2d5fc:	b510      	push	{r4, lr}
}
   2d5fe:	e8d3 0fef 	ldaex	r0, [r3]
   2d602:	ea00 0201 	and.w	r2, r0, r1
   2d606:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d60a:	2c00      	cmp	r4, #0
   2d60c:	d1f7      	bne.n	2d5fe <atomic_and+0x4>
   2d60e:	bd10      	pop	{r4, pc}

0002d610 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d610:	680b      	ldr	r3, [r1, #0]
   2d612:	6003      	str	r3, [r0, #0]
   2d614:	888b      	ldrh	r3, [r1, #4]
   2d616:	8083      	strh	r3, [r0, #4]
   2d618:	798b      	ldrb	r3, [r1, #6]
   2d61a:	7183      	strb	r3, [r0, #6]
   2d61c:	4770      	bx	lr

0002d61e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d61e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d620:	ab0b      	add	r3, sp, #44	; 0x2c
   2d622:	9305      	str	r3, [sp, #20]
   2d624:	9303      	str	r3, [sp, #12]
   2d626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d628:	9302      	str	r3, [sp, #8]
   2d62a:	2300      	movs	r3, #0
   2d62c:	4618      	mov	r0, r3
   2d62e:	e9cd 3300 	strd	r3, r3, [sp]
   2d632:	f7e1 fefb 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2d636:	b007      	add	sp, #28
   2d638:	f85d fb04 	ldr.w	pc, [sp], #4

0002d63c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d63c:	2301      	movs	r3, #1
{
   2d63e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d640:	fa03 f101 	lsl.w	r1, r3, r1
{
   2d644:	4604      	mov	r4, r0
	if (val) {
   2d646:	b142      	cbz	r2, 2d65a <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d648:	e8d4 3fef 	ldaex	r3, [r4]
   2d64c:	430b      	orrs	r3, r1
   2d64e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2d652:	2a00      	cmp	r2, #0
   2d654:	d1f8      	bne.n	2d648 <atomic_set_bit_to+0xc>
	}
}
   2d656:	bc10      	pop	{r4}
   2d658:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d65a:	43c9      	mvns	r1, r1
}
   2d65c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d65e:	f7ff bfcc 	b.w	2d5fa <atomic_and>

0002d662 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2d662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d666:	b087      	sub	sp, #28
   2d668:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2d66c:	4605      	mov	r5, r0
   2d66e:	460c      	mov	r4, r1
   2d670:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2d672:	2100      	movs	r1, #0
   2d674:	2210      	movs	r2, #16
   2d676:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2d678:	461f      	mov	r7, r3
   2d67a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2d67e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   2d682:	f004 f87e 	bl	31782 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2d686:	b9ce      	cbnz	r6, 2d6bc <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   2d688:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2d68c:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2d68e:	f242 0008 	movw	r0, #8200	; 0x2008
   2d692:	a902      	add	r1, sp, #8
   2d694:	f7ed fd2c 	bl	1b0f0 <hci_set_ad>
		if (err) {
   2d698:	4604      	mov	r4, r0
   2d69a:	b958      	cbnz	r0, 2d6b4 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   2d69c:	f1ba 0f00 	cmp.w	sl, #0
   2d6a0:	d13a      	bne.n	2d718 <le_adv_update.constprop.0+0xb6>
   2d6a2:	3510      	adds	r5, #16
   2d6a4:	e8d5 3fef 	ldaex	r3, [r5]
   2d6a8:	f043 0304 	orr.w	r3, r3, #4
   2d6ac:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2d6b0:	2a00      	cmp	r2, #0
   2d6b2:	d1f7      	bne.n	2d6a4 <le_adv_update.constprop.0+0x42>
}
   2d6b4:	4620      	mov	r0, r4
   2d6b6:	b007      	add	sp, #28
   2d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2d6bc:	f7ed f958 	bl	1a970 <bt_get_name>
   2d6c0:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2d6c2:	b9e4      	cbnz	r4, 2d6fe <le_adv_update.constprop.0+0x9c>
   2d6c4:	bb37      	cbnz	r7, 2d714 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   2d6c6:	4658      	mov	r0, fp
   2d6c8:	f7db fe9f 	bl	940a <strlen>
   2d6cc:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2d6ce:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2d6d0:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2d6d4:	f88d 3000 	strb.w	r3, [sp]
   2d6d8:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   2d6dc:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2d6e0:	d1d4      	bne.n	2d68c <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2d6e2:	2202      	movs	r2, #2
			d[1].data = &data;
   2d6e4:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2d6e8:	9605      	str	r6, [sp, #20]
			d_len = 2;
   2d6ea:	e7d0      	b.n	2d68e <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2d6ec:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2d6f0:	3a08      	subs	r2, #8
   2d6f2:	2a01      	cmp	r2, #1
   2d6f4:	d924      	bls.n	2d740 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2d6f6:	3301      	adds	r3, #1
   2d6f8:	4598      	cmp	r8, r3
   2d6fa:	d1f7      	bne.n	2d6ec <le_adv_update.constprop.0+0x8a>
   2d6fc:	e7e2      	b.n	2d6c4 <le_adv_update.constprop.0+0x62>
   2d6fe:	2300      	movs	r3, #0
   2d700:	e7fa      	b.n	2d6f8 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2d702:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2d706:	3a08      	subs	r2, #8
   2d708:	2a01      	cmp	r2, #1
   2d70a:	d919      	bls.n	2d740 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2d70c:	3301      	adds	r3, #1
   2d70e:	4599      	cmp	r9, r3
   2d710:	d1f7      	bne.n	2d702 <le_adv_update.constprop.0+0xa0>
   2d712:	e7d8      	b.n	2d6c6 <le_adv_update.constprop.0+0x64>
   2d714:	2300      	movs	r3, #0
   2d716:	e7fa      	b.n	2d70e <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   2d718:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   2d71a:	2e02      	cmp	r6, #2
			d[1].len = 1;
   2d71c:	bf08      	it	eq
   2d71e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d720:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   2d724:	bf08      	it	eq
   2d726:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d728:	a902      	add	r1, sp, #8
			d[1].data = &data;
   2d72a:	bf08      	it	eq
   2d72c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2d730:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2d734:	f7ed fcdc 	bl	1b0f0 <hci_set_ad>
		if (err) {
   2d738:	2800      	cmp	r0, #0
   2d73a:	d0b2      	beq.n	2d6a2 <le_adv_update.constprop.0+0x40>
   2d73c:	4604      	mov	r4, r0
   2d73e:	e7b9      	b.n	2d6b4 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   2d740:	f06f 0415 	mvn.w	r4, #21
   2d744:	e7b6      	b.n	2d6b4 <le_adv_update.constprop.0+0x52>

0002d746 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2d746:	6843      	ldr	r3, [r0, #4]
   2d748:	f013 0008 	ands.w	r0, r3, #8
   2d74c:	d00a      	beq.n	2d764 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2d74e:	035a      	lsls	r2, r3, #13
   2d750:	d407      	bmi.n	2d762 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2d752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2d756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2d75a:	bf14      	ite	ne
   2d75c:	2002      	movne	r0, #2
   2d75e:	2001      	moveq	r0, #1
   2d760:	4770      	bx	lr
   2d762:	2001      	movs	r0, #1
}
   2d764:	4770      	bx	lr

0002d766 <bt_le_adv_set_enable_legacy>:
{
   2d766:	b570      	push	{r4, r5, r6, lr}
   2d768:	4606      	mov	r6, r0
   2d76a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2d76c:	f242 000a 	movw	r0, #8202	; 0x200a
   2d770:	2101      	movs	r1, #1
{
   2d772:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2d774:	f7ec fa2a 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   2d778:	4604      	mov	r4, r0
   2d77a:	b1b0      	cbz	r0, 2d7aa <bt_le_adv_set_enable_legacy+0x44>
   2d77c:	300c      	adds	r0, #12
	if (enable) {
   2d77e:	b195      	cbz	r5, 2d7a6 <bt_le_adv_set_enable_legacy+0x40>
   2d780:	2101      	movs	r1, #1
   2d782:	f001 fdd5 	bl	2f330 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2d786:	4620      	mov	r0, r4
   2d788:	f106 0210 	add.w	r2, r6, #16
   2d78c:	a903      	add	r1, sp, #12
   2d78e:	2307      	movs	r3, #7
   2d790:	9500      	str	r5, [sp, #0]
   2d792:	f7ec fa09 	bl	19ba8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2d796:	2200      	movs	r2, #0
   2d798:	4621      	mov	r1, r4
   2d79a:	f242 000a 	movw	r0, #8202	; 0x200a
   2d79e:	f7ec fa4f 	bl	19c40 <bt_hci_cmd_send_sync>
}
   2d7a2:	b006      	add	sp, #24
   2d7a4:	bd70      	pop	{r4, r5, r6, pc}
   2d7a6:	4629      	mov	r1, r5
   2d7a8:	e7eb      	b.n	2d782 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2d7aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d7ae:	e7f8      	b.n	2d7a2 <bt_le_adv_set_enable_legacy+0x3c>

0002d7b0 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2d7b0:	f7ff bfd9 	b.w	2d766 <bt_le_adv_set_enable_legacy>

0002d7b4 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2d7b4:	3018      	adds	r0, #24
   2d7b6:	f003 bc2f 	b.w	31018 <k_work_cancel_delayable>

0002d7ba <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d7ba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d7bc:	ab0b      	add	r3, sp, #44	; 0x2c
   2d7be:	9305      	str	r3, [sp, #20]
   2d7c0:	9303      	str	r3, [sp, #12]
   2d7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d7c4:	2201      	movs	r2, #1
   2d7c6:	9302      	str	r3, [sp, #8]
   2d7c8:	2300      	movs	r3, #0
   2d7ca:	4618      	mov	r0, r3
   2d7cc:	e9cd 3300 	strd	r3, r3, [sp]
   2d7d0:	f7e1 fe2c 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2d7d4:	b007      	add	sp, #28
   2d7d6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d7da <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2d7da:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d7dc:	460d      	mov	r5, r1
   2d7de:	4614      	mov	r4, r2
   2d7e0:	b0b1      	sub	sp, #196	; 0xc4
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2d7e2:	b370      	cbz	r0, 2d842 <bt_encrypt_le+0x68>
   2d7e4:	b369      	cbz	r1, 2d842 <bt_encrypt_le+0x68>
   2d7e6:	b362      	cbz	r2, 2d842 <bt_encrypt_le+0x68>
	for (; length > 0; length--) {
   2d7e8:	466e      	mov	r6, sp
   2d7ea:	4632      	mov	r2, r6
   2d7ec:	4637      	mov	r7, r6
   2d7ee:	f100 0310 	add.w	r3, r0, #16
		*pdst++ = *psrc--;
   2d7f2:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
	for (; length > 0; length--) {
   2d7f6:	4283      	cmp	r3, r0
		*pdst++ = *psrc--;
   2d7f8:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   2d7fc:	d1f9      	bne.n	2d7f2 <bt_encrypt_le+0x18>
	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2d7fe:	4631      	mov	r1, r6
   2d800:	a804      	add	r0, sp, #16
   2d802:	f7e3 fa85 	bl	10d10 <tc_aes128_set_encrypt_key>
   2d806:	b1e0      	cbz	r0, 2d842 <bt_encrypt_le+0x68>
   2d808:	f105 0310 	add.w	r3, r5, #16
		*pdst++ = *psrc--;
   2d80c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   2d810:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   2d812:	f806 2b01 	strb.w	r2, [r6], #1
	for (; length > 0; length--) {
   2d816:	d1f9      	bne.n	2d80c <bt_encrypt_le+0x32>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2d818:	4639      	mov	r1, r7
   2d81a:	4620      	mov	r0, r4
   2d81c:	aa04      	add	r2, sp, #16
   2d81e:	f7fd fc4e 	bl	2b0be <tc_aes_encrypt>
   2d822:	b170      	cbz	r0, 2d842 <bt_encrypt_le+0x68>
   2d824:	1e63      	subs	r3, r4, #1
   2d826:	f104 0210 	add.w	r2, r4, #16
   2d82a:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2d82c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2d830:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2d834:	429c      	cmp	r4, r3
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2d836:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2d838:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2d83a:	d1f7      	bne.n	2d82c <bt_encrypt_le+0x52>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   2d83c:	2000      	movs	r0, #0
}
   2d83e:	b031      	add	sp, #196	; 0xc4
   2d840:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   2d842:	f06f 0015 	mvn.w	r0, #21
   2d846:	e7fa      	b.n	2d83e <bt_encrypt_le+0x64>

0002d848 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d848:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d84a:	ab0b      	add	r3, sp, #44	; 0x2c
   2d84c:	9305      	str	r3, [sp, #20]
   2d84e:	9303      	str	r3, [sp, #12]
   2d850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d852:	9302      	str	r3, [sp, #8]
   2d854:	2300      	movs	r3, #0
   2d856:	4618      	mov	r0, r3
   2d858:	e9cd 3300 	strd	r3, r3, [sp]
   2d85c:	f7e1 fde6 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2d860:	b007      	add	sp, #28
   2d862:	f85d fb04 	ldr.w	pc, [sp], #4

0002d866 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d866:	2200      	movs	r2, #0
	return list->head;
   2d868:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d86a:	b90b      	cbnz	r3, 2d870 <sys_slist_find_and_remove+0xa>
   2d86c:	4618      	mov	r0, r3
   2d86e:	4770      	bx	lr
   2d870:	428b      	cmp	r3, r1
   2d872:	d110      	bne.n	2d896 <sys_slist_find_and_remove+0x30>
	return node->next;
   2d874:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d876:	b942      	cbnz	r2, 2d88a <sys_slist_find_and_remove+0x24>
   2d878:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2d87a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d87c:	4291      	cmp	r1, r2
   2d87e:	d100      	bne.n	2d882 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2d880:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2d882:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d884:	2001      	movs	r0, #1
	parent->next = child;
   2d886:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d888:	4770      	bx	lr
	parent->next = child;
   2d88a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d88c:	6843      	ldr	r3, [r0, #4]
   2d88e:	4299      	cmp	r1, r3
	list->tail = node;
   2d890:	bf08      	it	eq
   2d892:	6042      	streq	r2, [r0, #4]
}
   2d894:	e7f5      	b.n	2d882 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2d896:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d898:	681b      	ldr	r3, [r3, #0]
   2d89a:	e7e6      	b.n	2d86a <sys_slist_find_and_remove+0x4>

0002d89c <atomic_and>:
{
   2d89c:	4603      	mov	r3, r0
   2d89e:	b510      	push	{r4, lr}
}
   2d8a0:	e8d3 0fef 	ldaex	r0, [r3]
   2d8a4:	ea00 0201 	and.w	r2, r0, r1
   2d8a8:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d8ac:	2c00      	cmp	r4, #0
   2d8ae:	d1f7      	bne.n	2d8a0 <atomic_and+0x4>
   2d8b0:	bd10      	pop	{r4, pc}

0002d8b2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d8b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d8b4:	ab0b      	add	r3, sp, #44	; 0x2c
   2d8b6:	9305      	str	r3, [sp, #20]
   2d8b8:	9303      	str	r3, [sp, #12]
   2d8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d8bc:	9302      	str	r3, [sp, #8]
   2d8be:	2300      	movs	r3, #0
   2d8c0:	4618      	mov	r0, r3
   2d8c2:	e9cd 3300 	strd	r3, r3, [sp]
   2d8c6:	f7e1 fdb1 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2d8ca:	b007      	add	sp, #28
   2d8cc:	f85d fb04 	ldr.w	pc, [sp], #4

0002d8d0 <tx_complete_work>:
	tx_notify(conn);
   2d8d0:	3828      	subs	r0, #40	; 0x28
   2d8d2:	f7ee b8cf 	b.w	1ba74 <tx_notify>

0002d8d6 <bt_conn_reset_rx_state>:
{
   2d8d6:	b510      	push	{r4, lr}
   2d8d8:	4604      	mov	r4, r0
	if (!conn->rx) {
   2d8da:	6900      	ldr	r0, [r0, #16]
   2d8dc:	b118      	cbz	r0, 2d8e6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2d8de:	f7f2 fddf 	bl	204a0 <net_buf_unref>
	conn->rx = NULL;
   2d8e2:	2300      	movs	r3, #0
   2d8e4:	6123      	str	r3, [r4, #16]
}
   2d8e6:	bd10      	pop	{r4, pc}

0002d8e8 <conn_cleanup>:
{
   2d8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d8ec:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2d8ee:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2d8f0:	f104 0638 	add.w	r6, r4, #56	; 0x38
   2d8f4:	2300      	movs	r3, #0
   2d8f6:	2200      	movs	r2, #0
   2d8f8:	4630      	mov	r0, r6
   2d8fa:	f001 fcaf 	bl	2f25c <net_buf_get>
   2d8fe:	4603      	mov	r3, r0
   2d900:	b950      	cbnz	r0, 2d918 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   2d902:	4620      	mov	r0, r4
   2d904:	f7ff ffe7 	bl	2d8d6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2d908:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2d90c:	2200      	movs	r2, #0
}
   2d90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2d912:	2300      	movs	r3, #0
   2d914:	f7f8 babc 	b.w	25e90 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2d918:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   2d91a:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   2d91c:	f7f2 fdc0 	bl	204a0 <net_buf_unref>
		if (tx) {
   2d920:	2d00      	cmp	r5, #0
   2d922:	d0e7      	beq.n	2d8f4 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   2d924:	4629      	mov	r1, r5
   2d926:	4620      	mov	r0, r4
   2d928:	f7ee f8d4 	bl	1bad4 <conn_tx_destroy>
   2d92c:	e7e0      	b.n	2d8f0 <conn_cleanup+0x8>

0002d92e <bt_conn_ref>:
{
   2d92e:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2d930:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d934:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   2d938:	b15b      	cbz	r3, 2d952 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2d93a:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2d93c:	e8d2 4fef 	ldaex	r4, [r2]
   2d940:	429c      	cmp	r4, r3
   2d942:	d104      	bne.n	2d94e <bt_conn_ref+0x20>
   2d944:	e8c2 1fec 	stlex	ip, r1, [r2]
   2d948:	f1bc 0f00 	cmp.w	ip, #0
   2d94c:	d1f6      	bne.n	2d93c <bt_conn_ref+0xe>
   2d94e:	d1f1      	bne.n	2d934 <bt_conn_ref+0x6>
}
   2d950:	bd10      	pop	{r4, pc}
			return NULL;
   2d952:	4618      	mov	r0, r3
   2d954:	e7fc      	b.n	2d950 <bt_conn_ref+0x22>

0002d956 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2d956:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2d95a:	e8d3 2fef 	ldaex	r2, [r3]
   2d95e:	3a01      	subs	r2, #1
   2d960:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2d964:	2900      	cmp	r1, #0
   2d966:	d1f8      	bne.n	2d95a <bt_conn_unref+0x4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2d968:	f240 1201 	movw	r2, #257	; 0x101
   2d96c:	8841      	ldrh	r1, [r0, #2]
   2d96e:	4291      	cmp	r1, r2
   2d970:	d104      	bne.n	2d97c <bt_conn_unref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d972:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2d976:	b90b      	cbnz	r3, 2d97c <bt_conn_unref+0x26>
		bt_le_adv_resume();
   2d978:	f7ed be6a 	b.w	1b650 <bt_le_adv_resume>
}
   2d97c:	4770      	bx	lr

0002d97e <conn_lookup_handle>:
{
   2d97e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d982:	4607      	mov	r7, r0
   2d984:	460e      	mov	r6, r1
   2d986:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2d988:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2d98a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2d98e:	42b4      	cmp	r4, r6
   2d990:	d103      	bne.n	2d99a <conn_lookup_handle+0x1c>
	return NULL;
   2d992:	2300      	movs	r3, #0
}
   2d994:	4618      	mov	r0, r3
   2d996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2d99a:	fb09 7004 	mla	r0, r9, r4, r7
   2d99e:	f7ff ffc6 	bl	2d92e <bt_conn_ref>
   2d9a2:	4603      	mov	r3, r0
		if (!conn) {
   2d9a4:	b158      	cbz	r0, 2d9be <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2d9a6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2d9a8:	2d01      	cmp	r5, #1
   2d9aa:	d002      	beq.n	2d9b2 <conn_lookup_handle+0x34>
   2d9ac:	3d07      	subs	r5, #7
   2d9ae:	2d01      	cmp	r5, #1
   2d9b0:	d803      	bhi.n	2d9ba <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2d9b2:	881a      	ldrh	r2, [r3, #0]
   2d9b4:	4542      	cmp	r2, r8
   2d9b6:	d0ed      	beq.n	2d994 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2d9b8:	4618      	mov	r0, r3
   2d9ba:	f7ff ffcc 	bl	2d956 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2d9be:	3401      	adds	r4, #1
   2d9c0:	e7e5      	b.n	2d98e <conn_lookup_handle+0x10>

0002d9c2 <bt_conn_connected>:
{
   2d9c2:	b510      	push	{r4, lr}
   2d9c4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2d9c6:	f7ee fef5 	bl	1c7b4 <bt_l2cap_connected>
	notify_connected(conn);
   2d9ca:	4620      	mov	r0, r4
}
   2d9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2d9d0:	f7ee b832 	b.w	1ba38 <notify_connected>

0002d9d4 <bt_conn_disconnect>:
{
   2d9d4:	b510      	push	{r4, lr}
	switch (conn->state) {
   2d9d6:	7b43      	ldrb	r3, [r0, #13]
{
   2d9d8:	4604      	mov	r4, r0
	switch (conn->state) {
   2d9da:	3b02      	subs	r3, #2
   2d9dc:	2b06      	cmp	r3, #6
   2d9de:	d816      	bhi.n	2da0e <bt_conn_disconnect+0x3a>
   2d9e0:	e8df f003 	tbb	[pc, r3]
   2d9e4:	15151504 	.word	0x15151504
   2d9e8:	0b09      	.short	0x0b09
   2d9ea:	09          	.byte	0x09
   2d9eb:	00          	.byte	0x00
		conn->err = reason;
   2d9ec:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2d9ee:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2d9f0:	4620      	mov	r0, r4
   2d9f2:	f7ee fa8b 	bl	1bf0c <bt_conn_set_state>
{
   2d9f6:	2000      	movs	r0, #0
}
   2d9f8:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   2d9fa:	8800      	ldrh	r0, [r0, #0]
   2d9fc:	f7ff fc52 	bl	2d2a4 <bt_hci_disconnect>
	if (err) {
   2da00:	2800      	cmp	r0, #0
   2da02:	d1f9      	bne.n	2d9f8 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2da04:	7b63      	ldrb	r3, [r4, #13]
   2da06:	2b07      	cmp	r3, #7
   2da08:	d1f5      	bne.n	2d9f6 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2da0a:	2108      	movs	r1, #8
   2da0c:	e7f0      	b.n	2d9f0 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2da0e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2da12:	e7f1      	b.n	2d9f8 <bt_conn_disconnect+0x24>

0002da14 <bt_conn_set_security>:
{
   2da14:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2da16:	7b43      	ldrb	r3, [r0, #13]
{
   2da18:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2da1a:	2b07      	cmp	r3, #7
{
   2da1c:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2da1e:	d122      	bne.n	2da66 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2da20:	7a43      	ldrb	r3, [r0, #9]
   2da22:	428b      	cmp	r3, r1
   2da24:	d215      	bcs.n	2da52 <bt_conn_set_security+0x3e>
   2da26:	7a83      	ldrb	r3, [r0, #10]
   2da28:	428b      	cmp	r3, r1
   2da2a:	d212      	bcs.n	2da52 <bt_conn_set_security+0x3e>
	if (val) {
   2da2c:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2da2e:	f100 0004 	add.w	r0, r0, #4
   2da32:	d510      	bpl.n	2da56 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2da34:	e8d0 3fef 	ldaex	r3, [r0]
   2da38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2da3c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2da40:	2a00      	cmp	r2, #0
   2da42:	d1f7      	bne.n	2da34 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2da44:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   2da48:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2da4a:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2da4c:	f7f1 fd94 	bl	1f578 <bt_smp_start_security>
	if (err) {
   2da50:	b930      	cbnz	r0, 2da60 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   2da52:	2000      	movs	r0, #0
}
   2da54:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2da56:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2da5a:	f7ff ff1f 	bl	2d89c <atomic_and>
   2da5e:	e7f1      	b.n	2da44 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   2da60:	7a63      	ldrb	r3, [r4, #9]
   2da62:	72a3      	strb	r3, [r4, #10]
   2da64:	e7f6      	b.n	2da54 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   2da66:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2da6a:	e7f3      	b.n	2da54 <bt_conn_set_security+0x40>

0002da6c <bt_conn_get_security>:
}
   2da6c:	7a40      	ldrb	r0, [r0, #9]
   2da6e:	4770      	bx	lr

0002da70 <bt_conn_is_peer_addr_le>:
{
   2da70:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2da72:	7a03      	ldrb	r3, [r0, #8]
{
   2da74:	4604      	mov	r4, r0
	if (id != conn->id) {
   2da76:	428b      	cmp	r3, r1
{
   2da78:	4615      	mov	r5, r2
	if (id != conn->id) {
   2da7a:	d115      	bne.n	2daa8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2da7c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2da80:	2207      	movs	r2, #7
   2da82:	4628      	mov	r0, r5
   2da84:	f003 fe33 	bl	316ee <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2da88:	b180      	cbz	r0, 2daac <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2da8a:	78e3      	ldrb	r3, [r4, #3]
   2da8c:	2207      	movs	r2, #7
   2da8e:	b943      	cbnz	r3, 2daa2 <bt_conn_is_peer_addr_le+0x32>
   2da90:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2da94:	4628      	mov	r0, r5
   2da96:	f003 fe2a 	bl	316ee <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2da9a:	fab0 f080 	clz	r0, r0
   2da9e:	0940      	lsrs	r0, r0, #5
}
   2daa0:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2daa2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2daa6:	e7f5      	b.n	2da94 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2daa8:	2000      	movs	r0, #0
   2daaa:	e7f9      	b.n	2daa0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2daac:	2001      	movs	r0, #1
   2daae:	e7f7      	b.n	2daa0 <bt_conn_is_peer_addr_le+0x30>

0002dab0 <bt_conn_get_dst>:
}
   2dab0:	3088      	adds	r0, #136	; 0x88
   2dab2:	4770      	bx	lr

0002dab4 <bt_conn_le_conn_update>:
{
   2dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dab6:	4607      	mov	r7, r0
   2dab8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2daba:	f242 0013 	movw	r0, #8211	; 0x2013
   2dabe:	210e      	movs	r1, #14
   2dac0:	f7ec f884 	bl	19bcc <bt_hci_cmd_create>
	if (!buf) {
   2dac4:	4606      	mov	r6, r0
   2dac6:	b1d0      	cbz	r0, 2dafe <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2dac8:	210e      	movs	r1, #14
   2daca:	300c      	adds	r0, #12
   2dacc:	f001 fc21 	bl	2f312 <net_buf_simple_add>
   2dad0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2dad2:	220e      	movs	r2, #14
   2dad4:	2100      	movs	r1, #0
   2dad6:	f003 fe54 	bl	31782 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2dada:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2dadc:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2dade:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2dae0:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2dae2:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2dae4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2dae6:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2dae8:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2daec:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2daee:	88ab      	ldrh	r3, [r5, #4]
   2daf0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2daf2:	88eb      	ldrh	r3, [r5, #6]
   2daf4:	8123      	strh	r3, [r4, #8]
}
   2daf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2dafa:	f7ec b8a1 	b.w	19c40 <bt_hci_cmd_send_sync>
}
   2dafe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2db02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002db04 <l2cap_connected>:
}
   2db04:	4770      	bx	lr

0002db06 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2db06:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2db08:	ab0b      	add	r3, sp, #44	; 0x2c
   2db0a:	9305      	str	r3, [sp, #20]
   2db0c:	9303      	str	r3, [sp, #12]
   2db0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2db10:	9302      	str	r3, [sp, #8]
   2db12:	2300      	movs	r3, #0
   2db14:	4618      	mov	r0, r3
   2db16:	e9cd 3300 	strd	r3, r3, [sp]
   2db1a:	f7e1 fc87 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2db1e:	b007      	add	sp, #28
   2db20:	f85d fb04 	ldr.w	pc, [sp], #4

0002db24 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2db24:	4770      	bx	lr

0002db26 <bt_l2cap_chan_del>:
{
   2db26:	b570      	push	{r4, r5, r6, lr}
   2db28:	4604      	mov	r4, r0
	if (!chan->conn) {
   2db2a:	e9d0 3500 	ldrd	r3, r5, [r0]
   2db2e:	b123      	cbz	r3, 2db3a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2db30:	686b      	ldr	r3, [r5, #4]
   2db32:	b103      	cbz	r3, 2db36 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2db34:	4798      	blx	r3
	chan->conn = NULL;
   2db36:	2300      	movs	r3, #0
   2db38:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2db3a:	68e3      	ldr	r3, [r4, #12]
   2db3c:	b10b      	cbz	r3, 2db42 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2db3e:	4620      	mov	r0, r4
   2db40:	4798      	blx	r3
	if (ops->released) {
   2db42:	6a2b      	ldr	r3, [r5, #32]
   2db44:	b11b      	cbz	r3, 2db4e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2db46:	4620      	mov	r0, r4
}
   2db48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2db4c:	4718      	bx	r3
}
   2db4e:	bd70      	pop	{r4, r5, r6, pc}

0002db50 <bt_l2cap_disconnected>:
{
   2db50:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2db52:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2db54:	b130      	cbz	r0, 2db64 <bt_l2cap_disconnected+0x14>
	return node->next;
   2db56:	f850 4908 	ldr.w	r4, [r0], #-8
   2db5a:	b104      	cbz	r4, 2db5e <bt_l2cap_disconnected+0xe>
   2db5c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2db5e:	f7ff ffe2 	bl	2db26 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2db62:	b904      	cbnz	r4, 2db66 <bt_l2cap_disconnected+0x16>
}
   2db64:	bd38      	pop	{r3, r4, r5, pc}
   2db66:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2db68:	b12d      	cbz	r5, 2db76 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2db6a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2db6c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2db6e:	f7ff ffda 	bl	2db26 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2db72:	462c      	mov	r4, r5
   2db74:	e7f7      	b.n	2db66 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2db76:	4620      	mov	r0, r4
}
   2db78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2db7c:	f7ff bfd3 	b.w	2db26 <bt_l2cap_chan_del>

0002db80 <bt_l2cap_security_changed>:
{
   2db80:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2db82:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2db84:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2db86:	b1bb      	cbz	r3, 2dbb8 <bt_l2cap_security_changed+0x38>
   2db88:	4618      	mov	r0, r3
	return node->next;
   2db8a:	f850 4908 	ldr.w	r4, [r0], #-8
   2db8e:	b104      	cbz	r4, 2db92 <bt_l2cap_security_changed+0x12>
   2db90:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2db92:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2db96:	689b      	ldr	r3, [r3, #8]
   2db98:	b10b      	cbz	r3, 2db9e <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2db9a:	4629      	mov	r1, r5
   2db9c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2db9e:	b15c      	cbz	r4, 2dbb8 <bt_l2cap_security_changed+0x38>
   2dba0:	4620      	mov	r0, r4
   2dba2:	68a4      	ldr	r4, [r4, #8]
   2dba4:	6843      	ldr	r3, [r0, #4]
   2dba6:	b124      	cbz	r4, 2dbb2 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2dba8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2dbaa:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2dbac:	2b00      	cmp	r3, #0
   2dbae:	d1f4      	bne.n	2db9a <bt_l2cap_security_changed+0x1a>
   2dbb0:	e7f6      	b.n	2dba0 <bt_l2cap_security_changed+0x20>
   2dbb2:	689b      	ldr	r3, [r3, #8]
   2dbb4:	2b00      	cmp	r3, #0
   2dbb6:	d1f0      	bne.n	2db9a <bt_l2cap_security_changed+0x1a>
}
   2dbb8:	bd38      	pop	{r3, r4, r5, pc}

0002dbba <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2dbba:	3104      	adds	r1, #4
   2dbbc:	f7ee ba96 	b.w	1c0ec <bt_conn_create_pdu_timeout>

0002dbc0 <bt_l2cap_send_cb>:
{
   2dbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dbc4:	4614      	mov	r4, r2
   2dbc6:	4605      	mov	r5, r0
   2dbc8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2dbca:	f102 000c 	add.w	r0, r2, #12
   2dbce:	2104      	movs	r1, #4
   2dbd0:	461e      	mov	r6, r3
   2dbd2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2dbd6:	f001 fbb3 	bl	2f340 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2dbda:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2dbdc:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2dbde:	3a04      	subs	r2, #4
   2dbe0:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2dbe2:	4643      	mov	r3, r8
   2dbe4:	4632      	mov	r2, r6
   2dbe6:	4621      	mov	r1, r4
   2dbe8:	4628      	mov	r0, r5
}
   2dbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2dbee:	f7ee b8e5 	b.w	1bdbc <bt_conn_send_cb>

0002dbf2 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2dbf2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dbf4:	b128      	cbz	r0, 2dc02 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2dbf6:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dbf8:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2dbfa:	428b      	cmp	r3, r1
   2dbfc:	d001      	beq.n	2dc02 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   2dbfe:	6880      	ldr	r0, [r0, #8]
   2dc00:	e7f8      	b.n	2dbf4 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2dc02:	4770      	bx	lr

0002dc04 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2dc04:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dc06:	b128      	cbz	r0, 2dc14 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2dc08:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2dc0a:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2dc0c:	428b      	cmp	r3, r1
   2dc0e:	d001      	beq.n	2dc14 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   2dc10:	6880      	ldr	r0, [r0, #8]
   2dc12:	e7f8      	b.n	2dc06 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2dc14:	4770      	bx	lr

0002dc16 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2dc16:	4770      	bx	lr

0002dc18 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2dc18:	4603      	mov	r3, r0
	return list->head;
   2dc1a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2dc1c:	b128      	cbz	r0, 2dc2a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dc1e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2dc20:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dc22:	4288      	cmp	r0, r1
	list->head = node;
   2dc24:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2dc26:	bf08      	it	eq
   2dc28:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2dc2a:	4770      	bx	lr

0002dc2c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2dc2c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2dc2e:	2000      	movs	r0, #0

	while (buf) {
   2dc30:	b903      	cbnz	r3, 2dc34 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2dc32:	4770      	bx	lr
		bytes += buf->len;
   2dc34:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2dc36:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2dc38:	4410      	add	r0, r2
		buf = buf->frags;
   2dc3a:	e7f9      	b.n	2dc30 <net_buf_frags_len+0x4>

0002dc3c <attr_read_type_cb>:
{
   2dc3c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2dc3e:	68d4      	ldr	r4, [r2, #12]
   2dc40:	3102      	adds	r1, #2
   2dc42:	7823      	ldrb	r3, [r4, #0]
   2dc44:	b913      	cbnz	r3, 2dc4c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2dc46:	7021      	strb	r1, [r4, #0]
	return true;
   2dc48:	2001      	movs	r0, #1
}
   2dc4a:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2dc4c:	428b      	cmp	r3, r1
   2dc4e:	d0fb      	beq.n	2dc48 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2dc50:	8a03      	ldrh	r3, [r0, #16]
   2dc52:	3b02      	subs	r3, #2
   2dc54:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2dc56:	2000      	movs	r0, #0
   2dc58:	6110      	str	r0, [r2, #16]
		return false;
   2dc5a:	e7f6      	b.n	2dc4a <attr_read_type_cb+0xe>

0002dc5c <att_prepare_write_req>:
}
   2dc5c:	2006      	movs	r0, #6
   2dc5e:	4770      	bx	lr

0002dc60 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dc60:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2dc64:	4108      	asrs	r0, r1
}
   2dc66:	f000 0001 	and.w	r0, r0, #1
   2dc6a:	4770      	bx	lr

0002dc6c <write_cb>:
{
   2dc6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2dc6e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2dc70:	4601      	mov	r1, r0
{
   2dc72:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2dc74:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2dc78:	6820      	ldr	r0, [r4, #0]
   2dc7a:	f000 fe39 	bl	2e8f0 <bt_gatt_check_perm>
   2dc7e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2dc80:	bb00      	cbnz	r0, 2dcc4 <write_cb+0x58>
	if (!data->req) {
   2dc82:	7a23      	ldrb	r3, [r4, #8]
   2dc84:	b1b3      	cbz	r3, 2dcb4 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2dc86:	f1a3 0218 	sub.w	r2, r3, #24
   2dc8a:	4253      	negs	r3, r2
   2dc8c:	4153      	adcs	r3, r2
   2dc8e:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2dc90:	9301      	str	r3, [sp, #4]
   2dc92:	8a63      	ldrh	r3, [r4, #18]
   2dc94:	4629      	mov	r1, r5
   2dc96:	9300      	str	r3, [sp, #0]
   2dc98:	68ae      	ldr	r6, [r5, #8]
   2dc9a:	8a23      	ldrh	r3, [r4, #16]
   2dc9c:	68e2      	ldr	r2, [r4, #12]
   2dc9e:	6820      	ldr	r0, [r4, #0]
   2dca0:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2dca2:	2800      	cmp	r0, #0
   2dca4:	db08      	blt.n	2dcb8 <write_cb+0x4c>
   2dca6:	8a23      	ldrh	r3, [r4, #16]
   2dca8:	4283      	cmp	r3, r0
   2dcaa:	d10e      	bne.n	2dcca <write_cb+0x5e>
	data->err = 0U;
   2dcac:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2dcae:	2001      	movs	r0, #1
	data->err = 0U;
   2dcb0:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2dcb2:	e008      	b.n	2dcc6 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2dcb4:	2302      	movs	r3, #2
   2dcb6:	e7eb      	b.n	2dc90 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2dcb8:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2dcbc:	d305      	bcc.n	2dcca <write_cb+0x5e>
		return -err;
   2dcbe:	4240      	negs	r0, r0
   2dcc0:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2dcc2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2dcc4:	2000      	movs	r0, #0
}
   2dcc6:	b002      	add	sp, #8
   2dcc8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2dcca:	200e      	movs	r0, #14
   2dccc:	e7f9      	b.n	2dcc2 <write_cb+0x56>

0002dcce <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2dcce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2dcd0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2dcd4:	2300      	movs	r3, #0
   2dcd6:	461a      	mov	r2, r3
   2dcd8:	9300      	str	r3, [sp, #0]
   2dcda:	f7f0 f8f7 	bl	1decc <bt_gatt_foreach_attr_type>
				  user_data);
}
   2dcde:	b005      	add	sp, #20
   2dce0:	f85d fb04 	ldr.w	pc, [sp], #4

0002dce4 <att_chan_mtu_updated>:
{
   2dce4:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2dce6:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2dce8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2dcea:	b352      	cbz	r2, 2dd42 <att_chan_mtu_updated+0x5e>
	return node->next;
   2dcec:	6813      	ldr	r3, [r2, #0]
   2dcee:	b103      	cbz	r3, 2dcf2 <att_chan_mtu_updated+0xe>
   2dcf0:	3be0      	subs	r3, #224	; 0xe0
   2dcf2:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   2dcf6:	2200      	movs	r2, #0
   2dcf8:	4611      	mov	r1, r2
   2dcfa:	e000      	b.n	2dcfe <att_chan_mtu_updated+0x1a>
   2dcfc:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   2dcfe:	4284      	cmp	r4, r0
   2dd00:	d007      	beq.n	2dd12 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2dd02:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2dd04:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2dd06:	42b1      	cmp	r1, r6
   2dd08:	bf38      	it	cc
   2dd0a:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2dd0c:	42a2      	cmp	r2, r4
   2dd0e:	bf38      	it	cc
   2dd10:	4622      	movcc	r2, r4
   2dd12:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2dd14:	b12b      	cbz	r3, 2dd22 <att_chan_mtu_updated+0x3e>
   2dd16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2dd1a:	2b00      	cmp	r3, #0
   2dd1c:	d1ee      	bne.n	2dcfc <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2dd1e:	4284      	cmp	r4, r0
   2dd20:	d1ef      	bne.n	2dd02 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2dd22:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2dd24:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2dd26:	428b      	cmp	r3, r1
   2dd28:	d801      	bhi.n	2dd2e <att_chan_mtu_updated+0x4a>
   2dd2a:	4290      	cmp	r0, r2
   2dd2c:	d90b      	bls.n	2dd46 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2dd2e:	4282      	cmp	r2, r0
   2dd30:	bf38      	it	cc
   2dd32:	4602      	movcc	r2, r0
   2dd34:	4299      	cmp	r1, r3
   2dd36:	6828      	ldr	r0, [r5, #0]
   2dd38:	bf38      	it	cc
   2dd3a:	4619      	movcc	r1, r3
}
   2dd3c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2dd3e:	f7f0 bd09 	b.w	1e754 <bt_gatt_att_max_mtu_changed>
   2dd42:	4611      	mov	r1, r2
   2dd44:	e7ed      	b.n	2dd22 <att_chan_mtu_updated+0x3e>
}
   2dd46:	bc70      	pop	{r4, r5, r6}
   2dd48:	4770      	bx	lr

0002dd4a <attr_read_group_cb>:
	if (!data->rsp->len) {
   2dd4a:	68d0      	ldr	r0, [r2, #12]
   2dd4c:	3104      	adds	r1, #4
   2dd4e:	7803      	ldrb	r3, [r0, #0]
   2dd50:	b913      	cbnz	r3, 2dd58 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2dd52:	7001      	strb	r1, [r0, #0]
	return true;
   2dd54:	2001      	movs	r0, #1
   2dd56:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2dd58:	428b      	cmp	r3, r1
   2dd5a:	d0fb      	beq.n	2dd54 <attr_read_group_cb+0xa>
		data->group = NULL;
   2dd5c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2dd5e:	6891      	ldr	r1, [r2, #8]
   2dd60:	8a0b      	ldrh	r3, [r1, #16]
   2dd62:	3b04      	subs	r3, #4
   2dd64:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2dd66:	6110      	str	r0, [r2, #16]
}
   2dd68:	4770      	bx	lr

0002dd6a <find_info_cb>:
{
   2dd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2dd6c:	6893      	ldr	r3, [r2, #8]
{
   2dd6e:	4605      	mov	r5, r0
   2dd70:	460f      	mov	r7, r1
   2dd72:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2dd74:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   2dd76:	b963      	cbnz	r3, 2dd92 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2dd78:	6850      	ldr	r0, [r2, #4]
   2dd7a:	2101      	movs	r1, #1
   2dd7c:	300c      	adds	r0, #12
   2dd7e:	f001 fac8 	bl	2f312 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2dd82:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2dd84:	682b      	ldr	r3, [r5, #0]
   2dd86:	781b      	ldrb	r3, [r3, #0]
   2dd88:	2b00      	cmp	r3, #0
   2dd8a:	bf14      	ite	ne
   2dd8c:	2302      	movne	r3, #2
   2dd8e:	2301      	moveq	r3, #1
   2dd90:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2dd92:	68a3      	ldr	r3, [r4, #8]
   2dd94:	781b      	ldrb	r3, [r3, #0]
   2dd96:	2b01      	cmp	r3, #1
   2dd98:	d003      	beq.n	2dda2 <find_info_cb+0x38>
   2dd9a:	2b02      	cmp	r3, #2
   2dd9c:	d019      	beq.n	2ddd2 <find_info_cb+0x68>
   2dd9e:	2000      	movs	r0, #0
   2dda0:	e016      	b.n	2ddd0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2dda2:	682b      	ldr	r3, [r5, #0]
   2dda4:	781b      	ldrb	r3, [r3, #0]
   2dda6:	2b00      	cmp	r3, #0
   2dda8:	d1f9      	bne.n	2dd9e <find_info_cb+0x34>
   2ddaa:	6860      	ldr	r0, [r4, #4]
   2ddac:	2104      	movs	r1, #4
   2ddae:	300c      	adds	r0, #12
   2ddb0:	f001 faaf 	bl	2f312 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2ddb4:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2ddb6:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2ddb8:	682a      	ldr	r2, [r5, #0]
   2ddba:	68e3      	ldr	r3, [r4, #12]
   2ddbc:	8852      	ldrh	r2, [r2, #2]
   2ddbe:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2ddc0:	6863      	ldr	r3, [r4, #4]
   2ddc2:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2ddc4:	8a1b      	ldrh	r3, [r3, #16]
   2ddc6:	1ac0      	subs	r0, r0, r3
   2ddc8:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2ddca:	bf94      	ite	ls
   2ddcc:	2000      	movls	r0, #0
   2ddce:	2001      	movhi	r0, #1
}
   2ddd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2ddd2:	682b      	ldr	r3, [r5, #0]
   2ddd4:	781b      	ldrb	r3, [r3, #0]
   2ddd6:	2b02      	cmp	r3, #2
   2ddd8:	d1e1      	bne.n	2dd9e <find_info_cb+0x34>
   2ddda:	6860      	ldr	r0, [r4, #4]
   2dddc:	2112      	movs	r1, #18
   2ddde:	300c      	adds	r0, #12
   2dde0:	f001 fa97 	bl	2f312 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2dde4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2dde6:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2dde8:	682b      	ldr	r3, [r5, #0]
   2ddea:	68e2      	ldr	r2, [r4, #12]
   2ddec:	1c59      	adds	r1, r3, #1
   2ddee:	3202      	adds	r2, #2
   2ddf0:	3311      	adds	r3, #17
   2ddf2:	f851 0b04 	ldr.w	r0, [r1], #4
   2ddf6:	4299      	cmp	r1, r3
   2ddf8:	f842 0b04 	str.w	r0, [r2], #4
   2ddfc:	d1f9      	bne.n	2ddf2 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2ddfe:	6863      	ldr	r3, [r4, #4]
   2de00:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2de02:	8a1b      	ldrh	r3, [r3, #16]
   2de04:	1ac0      	subs	r0, r0, r3
   2de06:	2812      	cmp	r0, #18
   2de08:	e7df      	b.n	2ddca <find_info_cb+0x60>

0002de0a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2de0a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2de0c:	ab0b      	add	r3, sp, #44	; 0x2c
   2de0e:	9305      	str	r3, [sp, #20]
   2de10:	9303      	str	r3, [sp, #12]
   2de12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2de14:	9302      	str	r3, [sp, #8]
   2de16:	2300      	movs	r3, #0
   2de18:	4618      	mov	r0, r3
   2de1a:	e9cd 3300 	strd	r3, r3, [sp]
   2de1e:	f7e1 fb05 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2de22:	b007      	add	sp, #28
   2de24:	f85d fb04 	ldr.w	pc, [sp], #4

0002de28 <chan_req_send>:
{
   2de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de2a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2de2c:	6888      	ldr	r0, [r1, #8]
   2de2e:	f7ff fefd 	bl	2dc2c <net_buf_frags_len>
   2de32:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2de34:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2de36:	4283      	cmp	r3, r0
   2de38:	d30d      	bcc.n	2de56 <chan_req_send+0x2e>
	req->buf = NULL;
   2de3a:	2600      	movs	r6, #0
	chan->req = req;
   2de3c:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   2de40:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   2de42:	4628      	mov	r0, r5
	req->buf = NULL;
   2de44:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2de46:	4639      	mov	r1, r7
   2de48:	f7ee fed2 	bl	1cbf0 <chan_send>
	if (err) {
   2de4c:	b110      	cbz	r0, 2de54 <chan_req_send+0x2c>
		req->buf = buf;
   2de4e:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2de50:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   2de54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2de56:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2de5a:	e7fb      	b.n	2de54 <chan_req_send+0x2c>

0002de5c <process_queue>:
{
   2de5c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2de5e:	2200      	movs	r2, #0
{
   2de60:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2de62:	2300      	movs	r3, #0
   2de64:	4608      	mov	r0, r1
{
   2de66:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2de68:	f001 f9f8 	bl	2f25c <net_buf_get>
	if (buf) {
   2de6c:	4605      	mov	r5, r0
   2de6e:	b158      	cbz	r0, 2de88 <process_queue+0x2c>
	return chan_send(chan, buf);
   2de70:	4601      	mov	r1, r0
   2de72:	4620      	mov	r0, r4
   2de74:	f7ee febc 	bl	1cbf0 <chan_send>
		if (err) {
   2de78:	4604      	mov	r4, r0
   2de7a:	b118      	cbz	r0, 2de84 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2de7c:	4629      	mov	r1, r5
   2de7e:	4630      	mov	r0, r6
   2de80:	f002 ffec 	bl	30e5c <k_queue_prepend>
}
   2de84:	4620      	mov	r0, r4
   2de86:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2de88:	f06f 0401 	mvn.w	r4, #1
   2de8c:	e7fa      	b.n	2de84 <process_queue+0x28>

0002de8e <bt_att_chan_send_rsp>:
{
   2de8e:	b538      	push	{r3, r4, r5, lr}
   2de90:	4604      	mov	r4, r0
   2de92:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2de94:	f7ee feac 	bl	1cbf0 <chan_send>
	if (err) {
   2de98:	b130      	cbz	r0, 2dea8 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2de9a:	4629      	mov	r1, r5
   2de9c:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   2dea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2dea4:	f001 ba0d 	b.w	2f2c2 <net_buf_put>
}
   2dea8:	bd38      	pop	{r3, r4, r5, pc}

0002deaa <att_chan_read>:
{
   2deaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2deae:	4680      	mov	r8, r0
   2deb0:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2deb2:	4610      	mov	r0, r2
{
   2deb4:	4699      	mov	r9, r3
   2deb6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2deb8:	f7ff feb8 	bl	2dc2c <net_buf_frags_len>
   2debc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   2dec0:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2dec2:	4283      	cmp	r3, r0
   2dec4:	d97a      	bls.n	2dfbc <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2dec6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2deca:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2decc:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2dece:	f001 f9fe 	bl	2f2ce <net_buf_frag_last>
	size_t len, total = 0;
   2ded2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2ded6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2ded8:	4630      	mov	r0, r6
   2deda:	f7ff fea7 	bl	2dc2c <net_buf_frags_len>
   2dede:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2dee2:	f105 070c 	add.w	r7, r5, #12
   2dee6:	1a24      	subs	r4, r4, r0
   2dee8:	4638      	mov	r0, r7
   2deea:	f001 fa56 	bl	2f39a <net_buf_simple_tailroom>
   2deee:	4284      	cmp	r4, r0
   2def0:	d211      	bcs.n	2df16 <att_chan_read+0x6c>
   2def2:	4630      	mov	r0, r6
   2def4:	f7ff fe9a 	bl	2dc2c <net_buf_frags_len>
   2def8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2defc:	1a24      	subs	r4, r4, r0
		if (!len) {
   2defe:	bb34      	cbnz	r4, 2df4e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2df00:	7ab0      	ldrb	r0, [r6, #10]
   2df02:	f7f2 fa0b 	bl	2031c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2df06:	2200      	movs	r2, #0
   2df08:	2300      	movs	r3, #0
   2df0a:	f001 f9a2 	bl	2f252 <net_buf_alloc_fixed>
			if (!frag) {
   2df0e:	4605      	mov	r5, r0
   2df10:	b930      	cbnz	r0, 2df20 <att_chan_read+0x76>
	return total;
   2df12:	4657      	mov	r7, sl
   2df14:	e02c      	b.n	2df70 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2df16:	4638      	mov	r0, r7
   2df18:	f001 fa3f 	bl	2f39a <net_buf_simple_tailroom>
   2df1c:	4604      	mov	r4, r0
   2df1e:	e7ee      	b.n	2defe <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2df20:	4601      	mov	r1, r0
   2df22:	4630      	mov	r0, r6
   2df24:	f001 f9e4 	bl	2f2f0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2df28:	4630      	mov	r0, r6
   2df2a:	f7ff fe7f 	bl	2dc2c <net_buf_frags_len>
   2df2e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2df32:	f105 070c 	add.w	r7, r5, #12
   2df36:	1a24      	subs	r4, r4, r0
   2df38:	4638      	mov	r0, r7
   2df3a:	f001 fa2e 	bl	2f39a <net_buf_simple_tailroom>
   2df3e:	4284      	cmp	r4, r0
   2df40:	d21a      	bcs.n	2df78 <att_chan_read+0xce>
   2df42:	4630      	mov	r0, r6
   2df44:	f7ff fe72 	bl	2dc2c <net_buf_frags_len>
   2df48:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2df4c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2df4e:	68e9      	ldr	r1, [r5, #12]
   2df50:	8a2a      	ldrh	r2, [r5, #16]
   2df52:	f8cd 9000 	str.w	r9, [sp]
   2df56:	f8db 7004 	ldr.w	r7, [fp, #4]
   2df5a:	440a      	add	r2, r1
   2df5c:	9803      	ldr	r0, [sp, #12]
   2df5e:	4659      	mov	r1, fp
   2df60:	b2a3      	uxth	r3, r4
   2df62:	47b8      	blx	r7
		if (read < 0) {
   2df64:	1e07      	subs	r7, r0, #0
   2df66:	da0c      	bge.n	2df82 <att_chan_read+0xd8>
				return total;
   2df68:	f1ba 0f00 	cmp.w	sl, #0
   2df6c:	bf18      	it	ne
   2df6e:	4657      	movne	r7, sl
}
   2df70:	4638      	mov	r0, r7
   2df72:	b005      	add	sp, #20
   2df74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2df78:	4638      	mov	r0, r7
   2df7a:	f001 fa0e 	bl	2f39a <net_buf_simple_tailroom>
   2df7e:	4604      	mov	r4, r0
   2df80:	e7e5      	b.n	2df4e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2df82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2df84:	b993      	cbnz	r3, 2dfac <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2df86:	4639      	mov	r1, r7
   2df88:	f105 000c 	add.w	r0, r5, #12
   2df8c:	f001 f9c1 	bl	2f312 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2df90:	4630      	mov	r0, r6
   2df92:	f7ff fe4b 	bl	2dc2c <net_buf_frags_len>
   2df96:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2df9a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2df9c:	4283      	cmp	r3, r0
		total += read;
   2df9e:	44ba      	add	sl, r7
		offset += read;
   2dfa0:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2dfa4:	d9b5      	bls.n	2df12 <att_chan_read+0x68>
   2dfa6:	42a7      	cmp	r7, r4
   2dfa8:	d096      	beq.n	2ded8 <att_chan_read+0x2e>
   2dfaa:	e7b2      	b.n	2df12 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2dfac:	4639      	mov	r1, r7
   2dfae:	4628      	mov	r0, r5
   2dfb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2dfb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2dfb4:	4798      	blx	r3
   2dfb6:	2800      	cmp	r0, #0
   2dfb8:	d1e5      	bne.n	2df86 <att_chan_read+0xdc>
   2dfba:	e7aa      	b.n	2df12 <att_chan_read+0x68>
		return 0;
   2dfbc:	2700      	movs	r7, #0
   2dfbe:	e7d7      	b.n	2df70 <att_chan_read+0xc6>

0002dfc0 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dfc0:	2200      	movs	r2, #0
	return list->head;
   2dfc2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dfc4:	b903      	cbnz	r3, 2dfc8 <sys_slist_find_and_remove.isra.0+0x8>
   2dfc6:	4770      	bx	lr
   2dfc8:	428b      	cmp	r3, r1
   2dfca:	d10f      	bne.n	2dfec <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2dfcc:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dfce:	b93a      	cbnz	r2, 2dfe0 <sys_slist_find_and_remove.isra.0+0x20>
   2dfd0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2dfd2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dfd4:	4291      	cmp	r1, r2
   2dfd6:	d100      	bne.n	2dfda <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2dfd8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2dfda:	2300      	movs	r3, #0
   2dfdc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dfde:	4770      	bx	lr
	parent->next = child;
   2dfe0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dfe2:	6843      	ldr	r3, [r0, #4]
   2dfe4:	4299      	cmp	r1, r3
	list->tail = node;
   2dfe6:	bf08      	it	eq
   2dfe8:	6042      	streq	r2, [r0, #4]
}
   2dfea:	e7f6      	b.n	2dfda <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2dfec:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dfee:	681b      	ldr	r3, [r3, #0]
   2dff0:	e7e8      	b.n	2dfc4 <sys_slist_find_and_remove.isra.0+0x4>

0002dff2 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2dff2:	2006      	movs	r0, #6
   2dff4:	4770      	bx	lr

0002dff6 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2dff6:	2301      	movs	r3, #1
{
   2dff8:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2dffa:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2dffe:	e8d0 3fef 	ldaex	r3, [r0]
   2e002:	ea43 0201 	orr.w	r2, r3, r1
   2e006:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2e00a:	2c00      	cmp	r4, #0
   2e00c:	d1f7      	bne.n	2dffe <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2e00e:	4219      	tst	r1, r3
}
   2e010:	bf14      	ite	ne
   2e012:	2001      	movne	r0, #1
   2e014:	2000      	moveq	r0, #0
   2e016:	bd10      	pop	{r4, pc}

0002e018 <read_cb>:
{
   2e018:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   2e01a:	2300      	movs	r3, #0
{
   2e01c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2e01e:	6816      	ldr	r6, [r2, #0]
{
   2e020:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2e022:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e024:	4629      	mov	r1, r5
	data->err = 0x00;
   2e026:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e028:	2295      	movs	r2, #149	; 0x95
   2e02a:	f000 fc61 	bl	2e8f0 <bt_gatt_check_perm>
   2e02e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2e030:	b980      	cbnz	r0, 2e054 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2e032:	e9cd 0000 	strd	r0, r0, [sp]
   2e036:	4629      	mov	r1, r5
   2e038:	4630      	mov	r0, r6
   2e03a:	88a3      	ldrh	r3, [r4, #4]
   2e03c:	68a2      	ldr	r2, [r4, #8]
   2e03e:	f7ff ff34 	bl	2deaa <att_chan_read>
	if (ret < 0) {
   2e042:	2800      	cmp	r0, #0
   2e044:	da09      	bge.n	2e05a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2e046:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2e04a:	bf32      	itee	cc
   2e04c:	200e      	movcc	r0, #14
		return -err;
   2e04e:	4240      	negcs	r0, r0
   2e050:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   2e052:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2e054:	2000      	movs	r0, #0
}
   2e056:	b002      	add	sp, #8
   2e058:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2e05a:	2001      	movs	r0, #1
   2e05c:	e7fb      	b.n	2e056 <read_cb+0x3e>

0002e05e <read_vl_cb>:
{
   2e05e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   2e062:	2300      	movs	r3, #0
{
   2e064:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2e066:	f8d2 8000 	ldr.w	r8, [r2]
{
   2e06a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2e06c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e070:	4631      	mov	r1, r6
	data->err = 0x00;
   2e072:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e074:	2295      	movs	r2, #149	; 0x95
   2e076:	f000 fc3b 	bl	2e8f0 <bt_gatt_check_perm>
   2e07a:	4605      	mov	r5, r0
   2e07c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2e07e:	b9e0      	cbnz	r0, 2e0ba <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2e080:	68a0      	ldr	r0, [r4, #8]
   2e082:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2e086:	8a02      	ldrh	r2, [r0, #16]
   2e088:	1a9b      	subs	r3, r3, r2
   2e08a:	2b01      	cmp	r3, #1
   2e08c:	dd15      	ble.n	2e0ba <read_vl_cb+0x5c>
   2e08e:	2102      	movs	r1, #2
   2e090:	300c      	adds	r0, #12
   2e092:	f001 f93e 	bl	2f312 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2e096:	e9cd 5500 	strd	r5, r5, [sp]
   2e09a:	4607      	mov	r7, r0
   2e09c:	88a3      	ldrh	r3, [r4, #4]
   2e09e:	4631      	mov	r1, r6
   2e0a0:	4640      	mov	r0, r8
   2e0a2:	68a2      	ldr	r2, [r4, #8]
   2e0a4:	f7ff ff01 	bl	2deaa <att_chan_read>
	if (read < 0) {
   2e0a8:	1e03      	subs	r3, r0, #0
   2e0aa:	da0a      	bge.n	2e0c2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2e0ac:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2e0b0:	bf32      	itee	cc
   2e0b2:	230e      	movcc	r3, #14
		return -err;
   2e0b4:	425b      	negcs	r3, r3
   2e0b6:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2e0b8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2e0ba:	2000      	movs	r0, #0
}
   2e0bc:	b002      	add	sp, #8
   2e0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   2e0c2:	2001      	movs	r0, #1
	rsp->len = read;
   2e0c4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2e0c6:	e7f9      	b.n	2e0bc <read_vl_cb+0x5e>

0002e0c8 <bt_att_sent>:
{
   2e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e0ca:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   2e0cc:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2e0d0:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e0d2:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2e0d6:	e8d3 1fef 	ldaex	r1, [r3]
   2e0da:	f021 0110 	bic.w	r1, r1, #16
   2e0de:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e0e2:	2a00      	cmp	r2, #0
   2e0e4:	d1f7      	bne.n	2e0d6 <bt_att_sent+0xe>
	if (!att) {
   2e0e6:	b30c      	cbz	r4, 2e12c <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2e0e8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2e0ec:	b98b      	cbnz	r3, 2e112 <bt_att_sent+0x4a>
   2e0ee:	6863      	ldr	r3, [r4, #4]
   2e0f0:	b17b      	cbz	r3, 2e112 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2e0f2:	1d20      	adds	r0, r4, #4
   2e0f4:	f7ff fd90 	bl	2dc18 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e0f8:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2e0fa:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e0fc:	4638      	mov	r0, r7
   2e0fe:	f7ff fe93 	bl	2de28 <chan_req_send>
   2e102:	2800      	cmp	r0, #0
   2e104:	da12      	bge.n	2e12c <bt_att_sent+0x64>
	return list->head;
   2e106:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2e108:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e10a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2e10c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e10e:	b903      	cbnz	r3, 2e112 <bt_att_sent+0x4a>
	list->tail = node;
   2e110:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2e112:	4638      	mov	r0, r7
   2e114:	f105 0194 	add.w	r1, r5, #148	; 0x94
   2e118:	f7ff fea0 	bl	2de5c <process_queue>
	if (!err) {
   2e11c:	b130      	cbz	r0, 2e12c <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   2e11e:	4638      	mov	r0, r7
   2e120:	f104 010c 	add.w	r1, r4, #12
}
   2e124:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2e128:	f7ff be98 	b.w	2de5c <process_queue>
}
   2e12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e12e <att_req_send_process>:
{
   2e12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2e132:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2e134:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e136:	2c00      	cmp	r4, #0
   2e138:	d03b      	beq.n	2e1b2 <att_req_send_process+0x84>
	return node->next;
   2e13a:	f854 69e0 	ldr.w	r6, [r4], #-224
   2e13e:	b106      	cbz	r6, 2e142 <att_req_send_process+0x14>
   2e140:	3ee0      	subs	r6, #224	; 0xe0
{
   2e142:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   2e144:	f108 0704 	add.w	r7, r8, #4
{
   2e148:	461d      	mov	r5, r3
   2e14a:	e013      	b.n	2e174 <att_req_send_process+0x46>
		if (!req && prev &&
   2e14c:	b1c3      	cbz	r3, 2e180 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2e14e:	2103      	movs	r1, #3
   2e150:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2e154:	f7ff fd84 	bl	2dc60 <atomic_test_bit>
   2e158:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2e15a:	f103 0090 	add.w	r0, r3, #144	; 0x90
   2e15e:	f7ff fd7f 	bl	2dc60 <atomic_test_bit>
		if (!req && prev &&
   2e162:	4282      	cmp	r2, r0
   2e164:	d10c      	bne.n	2e180 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e166:	b326      	cbz	r6, 2e1b2 <att_req_send_process+0x84>
   2e168:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   2e16c:	b102      	cbz	r2, 2e170 <att_req_send_process+0x42>
   2e16e:	3ae0      	subs	r2, #224	; 0xe0
{
   2e170:	4634      	mov	r4, r6
   2e172:	4616      	mov	r6, r2
		if (chan->req) {
   2e174:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2e178:	2a00      	cmp	r2, #0
   2e17a:	d1f4      	bne.n	2e166 <att_req_send_process+0x38>
		if (!req && prev &&
   2e17c:	2d00      	cmp	r5, #0
   2e17e:	d0e5      	beq.n	2e14c <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2e180:	4638      	mov	r0, r7
   2e182:	f7ff fd49 	bl	2dc18 <sys_slist_get>
	if (node) {
   2e186:	4605      	mov	r5, r0
   2e188:	b908      	cbnz	r0, 2e18e <att_req_send_process+0x60>
   2e18a:	4623      	mov	r3, r4
   2e18c:	e7eb      	b.n	2e166 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   2e18e:	4601      	mov	r1, r0
   2e190:	4620      	mov	r0, r4
   2e192:	f7ff fe49 	bl	2de28 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2e196:	2800      	cmp	r0, #0
   2e198:	da0b      	bge.n	2e1b2 <att_req_send_process+0x84>
	return list->head;
   2e19a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2e19e:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e1a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2e1a4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e1a8:	2b00      	cmp	r3, #0
   2e1aa:	d1ee      	bne.n	2e18a <att_req_send_process+0x5c>
	list->tail = node;
   2e1ac:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2e1b0:	e7eb      	b.n	2e18a <att_req_send_process+0x5c>
}
   2e1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e1b6 <bt_att_status>:
{
   2e1b6:	b538      	push	{r3, r4, r5, lr}
   2e1b8:	4605      	mov	r5, r0
   2e1ba:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2e1bc:	2100      	movs	r1, #0
   2e1be:	f7ff fd4f 	bl	2dc60 <atomic_test_bit>
   2e1c2:	b1c0      	cbz	r0, 2e1f6 <bt_att_status+0x40>
	if (!chan->att) {
   2e1c4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2e1c8:	b1a8      	cbz	r0, 2e1f6 <bt_att_status+0x40>
	if (chan->req) {
   2e1ca:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2e1ce:	b993      	cbnz	r3, 2e1f6 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2e1d0:	3004      	adds	r0, #4
   2e1d2:	f7ff fd21 	bl	2dc18 <sys_slist_get>
	if (!node) {
   2e1d6:	4604      	mov	r4, r0
   2e1d8:	b168      	cbz	r0, 2e1f6 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   2e1da:	4601      	mov	r1, r0
   2e1dc:	1f28      	subs	r0, r5, #4
   2e1de:	f7ff fe23 	bl	2de28 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e1e2:	2800      	cmp	r0, #0
   2e1e4:	da07      	bge.n	2e1f6 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2e1e6:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2e1ea:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2e1ec:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e1ee:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2e1f0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e1f2:	b902      	cbnz	r2, 2e1f6 <bt_att_status+0x40>
	list->tail = node;
   2e1f4:	609c      	str	r4, [r3, #8]
}
   2e1f6:	bd38      	pop	{r3, r4, r5, pc}

0002e1f8 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2e1f8:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2e1fa:	6883      	ldr	r3, [r0, #8]
   2e1fc:	699b      	ldr	r3, [r3, #24]
   2e1fe:	b10b      	cbz	r3, 2e204 <att_sent+0xc>
		chan->ops->sent(chan);
   2e200:	3004      	adds	r0, #4
   2e202:	4718      	bx	r3
}
   2e204:	4770      	bx	lr

0002e206 <att_unknown>:
{
   2e206:	b510      	push	{r4, lr}
   2e208:	460c      	mov	r4, r1
	if (!err) {
   2e20a:	b90a      	cbnz	r2, 2e210 <att_unknown+0xa>
		att_sent(conn, user_data);
   2e20c:	f7ff fff4 	bl	2e1f8 <att_sent>
	tx_meta_data_free(user_data);
   2e210:	4620      	mov	r0, r4
}
   2e212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2e216:	f7ee bc31 	b.w	1ca7c <tx_meta_data_free>

0002e21a <att_tx_complete>:
{
   2e21a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e21e:	4606      	mov	r6, r0
   2e220:	460d      	mov	r5, r1
	if (!err) {
   2e222:	4614      	mov	r4, r2
   2e224:	b122      	cbz	r2, 2e230 <att_tx_complete+0x16>
}
   2e226:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2e22a:	4608      	mov	r0, r1
   2e22c:	f7ee bc26 	b.w	1ca7c <tx_meta_data_free>
		att_sent(conn, user_data);
   2e230:	f7ff ffe2 	bl	2e1f8 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2e234:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   2e236:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2e238:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2e23c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2e240:	f7ee fc1c 	bl	1ca7c <tx_meta_data_free>
	if (!err && func) {
   2e244:	b92f      	cbnz	r7, 2e252 <att_tx_complete+0x38>
}
   2e246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2e24a:	4649      	mov	r1, r9
   2e24c:	4630      	mov	r0, r6
   2e24e:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2e250:	3401      	adds	r4, #1
   2e252:	b2a3      	uxth	r3, r4
   2e254:	4543      	cmp	r3, r8
   2e256:	d3f8      	bcc.n	2e24a <att_tx_complete+0x30>
   2e258:	e7f5      	b.n	2e246 <att_tx_complete+0x2c>

0002e25a <att_req_sent>:
{
   2e25a:	b510      	push	{r4, lr}
   2e25c:	460c      	mov	r4, r1
	if (!err) {
   2e25e:	b90a      	cbnz	r2, 2e264 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2e260:	f7ff ffca 	bl	2e1f8 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2e264:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2e266:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2e26a:	b12b      	cbz	r3, 2e278 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2e26c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2e270:	2300      	movs	r3, #0
   2e272:	30b0      	adds	r0, #176	; 0xb0
   2e274:	f7f7 fe0c 	bl	25e90 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2e278:	4620      	mov	r0, r4
}
   2e27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2e27e:	f7ee bbfd 	b.w	1ca7c <tx_meta_data_free>

0002e282 <att_cfm_sent>:
{
   2e282:	b510      	push	{r4, lr}
   2e284:	460c      	mov	r4, r1
	if (!err) {
   2e286:	b90a      	cbnz	r2, 2e28c <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2e288:	f7ff ffb6 	bl	2e1f8 <att_sent>
   2e28c:	6823      	ldr	r3, [r4, #0]
   2e28e:	3390      	adds	r3, #144	; 0x90
   2e290:	e8d3 1fef 	ldaex	r1, [r3]
   2e294:	f021 0102 	bic.w	r1, r1, #2
   2e298:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e29c:	2a00      	cmp	r2, #0
   2e29e:	d1f7      	bne.n	2e290 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2e2a0:	4620      	mov	r0, r4
}
   2e2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2e2a6:	f7ee bbe9 	b.w	1ca7c <tx_meta_data_free>

0002e2aa <att_rsp_sent>:
{
   2e2aa:	b510      	push	{r4, lr}
   2e2ac:	460c      	mov	r4, r1
	if (!err) {
   2e2ae:	b90a      	cbnz	r2, 2e2b4 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2e2b0:	f7ff ffa2 	bl	2e1f8 <att_sent>
   2e2b4:	6823      	ldr	r3, [r4, #0]
   2e2b6:	3390      	adds	r3, #144	; 0x90
   2e2b8:	e8d3 1fef 	ldaex	r1, [r3]
   2e2bc:	f021 0101 	bic.w	r1, r1, #1
   2e2c0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e2c4:	2a00      	cmp	r2, #0
   2e2c6:	d1f7      	bne.n	2e2b8 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   2e2c8:	4620      	mov	r0, r4
}
   2e2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2e2ce:	f7ee bbd5 	b.w	1ca7c <tx_meta_data_free>

0002e2d2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2e2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e2d6:	4688      	mov	r8, r1
   2e2d8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e2da:	2101      	movs	r1, #1
   2e2dc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2e2de:	4605      	mov	r5, r0
   2e2e0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e2e2:	f7ee fe47 	bl	1cf74 <bt_att_chan_create_pdu>
	if (!buf) {
   2e2e6:	4604      	mov	r4, r0
   2e2e8:	b170      	cbz	r0, 2e308 <send_err_rsp.part.0+0x36>
   2e2ea:	2104      	movs	r1, #4
   2e2ec:	300c      	adds	r0, #12
   2e2ee:	f001 f810 	bl	2f312 <net_buf_simple_add>
	rsp->request = req;
   2e2f2:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2e2f6:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2e2fa:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2e2fc:	4621      	mov	r1, r4
   2e2fe:	4628      	mov	r0, r5
}
   2e300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2e304:	f7ff bdc3 	b.w	2de8e <bt_att_chan_send_rsp>
}
   2e308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e30c <att_write_req>:
{
   2e30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e30e:	460c      	mov	r4, r1
   2e310:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2e312:	f101 000c 	add.w	r0, r1, #12
   2e316:	f001 f834 	bl	2f382 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2e31a:	8a22      	ldrh	r2, [r4, #16]
   2e31c:	4603      	mov	r3, r0
   2e31e:	9201      	str	r2, [sp, #4]
   2e320:	68e2      	ldr	r2, [r4, #12]
   2e322:	2112      	movs	r1, #18
   2e324:	9200      	str	r2, [sp, #0]
   2e326:	4628      	mov	r0, r5
   2e328:	2213      	movs	r2, #19
   2e32a:	f7ee ff1b 	bl	1d164 <att_write_rsp.constprop.0>
}
   2e32e:	b003      	add	sp, #12
   2e330:	bd30      	pop	{r4, r5, pc}

0002e332 <att_write_cmd>:
{
   2e332:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e334:	460c      	mov	r4, r1
   2e336:	4605      	mov	r5, r0
   2e338:	f101 000c 	add.w	r0, r1, #12
   2e33c:	f001 f821 	bl	2f382 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2e340:	8a22      	ldrh	r2, [r4, #16]
   2e342:	4603      	mov	r3, r0
   2e344:	9201      	str	r2, [sp, #4]
   2e346:	68e2      	ldr	r2, [r4, #12]
   2e348:	4628      	mov	r0, r5
   2e34a:	9200      	str	r2, [sp, #0]
   2e34c:	2200      	movs	r2, #0
   2e34e:	4611      	mov	r1, r2
   2e350:	f7ee ff08 	bl	1d164 <att_write_rsp.constprop.0>
}
   2e354:	b003      	add	sp, #12
   2e356:	bd30      	pop	{r4, r5, pc}

0002e358 <att_read_blob_req>:
{
   2e358:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2e35a:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2e35c:	210c      	movs	r1, #12
   2e35e:	8813      	ldrh	r3, [r2, #0]
   2e360:	8852      	ldrh	r2, [r2, #2]
   2e362:	9200      	str	r2, [sp, #0]
   2e364:	220d      	movs	r2, #13
   2e366:	f7ef f8bf 	bl	1d4e8 <att_read_rsp>
}
   2e36a:	b003      	add	sp, #12
   2e36c:	f85d fb04 	ldr.w	pc, [sp], #4

0002e370 <att_read_req>:
{
   2e370:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e372:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2e374:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e376:	210a      	movs	r1, #10
   2e378:	881b      	ldrh	r3, [r3, #0]
   2e37a:	9200      	str	r2, [sp, #0]
   2e37c:	220b      	movs	r2, #11
   2e37e:	f7ef f8b3 	bl	1d4e8 <att_read_rsp>
}
   2e382:	b003      	add	sp, #12
   2e384:	f85d fb04 	ldr.w	pc, [sp], #4

0002e388 <att_mtu_req>:
{
   2e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e38a:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2e38c:	f850 2b90 	ldr.w	r2, [r0], #144
{
   2e390:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2e392:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2e394:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2e396:	f7ff fc63 	bl	2dc60 <atomic_test_bit>
   2e39a:	4604      	mov	r4, r0
   2e39c:	b9f0      	cbnz	r0, 2e3dc <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2e39e:	68db      	ldr	r3, [r3, #12]
   2e3a0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2e3a2:	2e16      	cmp	r6, #22
   2e3a4:	d91c      	bls.n	2e3e0 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2e3a6:	4638      	mov	r0, r7
   2e3a8:	2202      	movs	r2, #2
   2e3aa:	f7ee ff3f 	bl	1d22c <bt_att_create_pdu>
	if (!pdu) {
   2e3ae:	4607      	mov	r7, r0
   2e3b0:	b1c0      	cbz	r0, 2e3e4 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2e3b2:	2102      	movs	r1, #2
   2e3b4:	300c      	adds	r0, #12
   2e3b6:	f000 ffac 	bl	2f312 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2e3ba:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2e3bc:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2e3be:	7003      	strb	r3, [r0, #0]
   2e3c0:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2e3c2:	4628      	mov	r0, r5
   2e3c4:	f7ff fd63 	bl	2de8e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e3c8:	2e41      	cmp	r6, #65	; 0x41
   2e3ca:	bf28      	it	cs
   2e3cc:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2e3ce:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e3d0:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2e3d2:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2e3d4:	f7ff fc86 	bl	2dce4 <att_chan_mtu_updated>
	return 0;
   2e3d8:	4620      	mov	r0, r4
}
   2e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2e3dc:	2006      	movs	r0, #6
   2e3de:	e7fc      	b.n	2e3da <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2e3e0:	2004      	movs	r0, #4
   2e3e2:	e7fa      	b.n	2e3da <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2e3e4:	200e      	movs	r0, #14
   2e3e6:	e7f8      	b.n	2e3da <att_mtu_req+0x52>

0002e3e8 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2e3e8:	8a0a      	ldrh	r2, [r1, #16]
   2e3ea:	2300      	movs	r3, #0
   2e3ec:	68c9      	ldr	r1, [r1, #12]
   2e3ee:	f7ef ba25 	b.w	1d83c <att_handle_rsp>

0002e3f2 <bt_att_encrypt_change>:
{
   2e3f2:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2e3f4:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2e3f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2e3fa:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2e3fc:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   2e400:	2b00      	cmp	r3, #0
   2e402:	d038      	beq.n	2e476 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   2e404:	b141      	cbz	r1, 2e418 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   2e406:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   2e40a:	2b00      	cmp	r3, #0
   2e40c:	d033      	beq.n	2e476 <bt_att_encrypt_change+0x84>
   2e40e:	7c1b      	ldrb	r3, [r3, #16]
   2e410:	07da      	lsls	r2, r3, #31
   2e412:	d530      	bpl.n	2e476 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   2e414:	2305      	movs	r3, #5
   2e416:	e021      	b.n	2e45c <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2e418:	4628      	mov	r0, r5
   2e41a:	f7f0 f9af 	bl	1e77c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2e41e:	7a6b      	ldrb	r3, [r5, #9]
   2e420:	2b01      	cmp	r3, #1
   2e422:	d028      	beq.n	2e476 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2e424:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   2e428:	b32d      	cbz	r5, 2e476 <bt_att_encrypt_change+0x84>
   2e42a:	7c2b      	ldrb	r3, [r5, #16]
   2e42c:	07db      	lsls	r3, r3, #31
   2e42e:	d522      	bpl.n	2e476 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2e430:	68eb      	ldr	r3, [r5, #12]
   2e432:	2b00      	cmp	r3, #0
   2e434:	d0ee      	beq.n	2e414 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2e436:	4630      	mov	r0, r6
   2e438:	696a      	ldr	r2, [r5, #20]
   2e43a:	7c69      	ldrb	r1, [r5, #17]
   2e43c:	f7ee fd9a 	bl	1cf74 <bt_att_chan_create_pdu>
	if (!buf) {
   2e440:	4604      	mov	r4, r0
   2e442:	b150      	cbz	r0, 2e45a <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2e444:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2e448:	68eb      	ldr	r3, [r5, #12]
   2e44a:	4798      	blx	r3
   2e44c:	b168      	cbz	r0, 2e46a <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2e44e:	69a0      	ldr	r0, [r4, #24]
   2e450:	f7ee fb14 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(buf);
   2e454:	4620      	mov	r0, r4
   2e456:	f7f2 f823 	bl	204a0 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2e45a:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2e45c:	2200      	movs	r2, #0
   2e45e:	4630      	mov	r0, r6
}
   2e460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2e464:	4611      	mov	r1, r2
   2e466:	f7ef b9e9 	b.w	1d83c <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2e46a:	4621      	mov	r1, r4
   2e46c:	4630      	mov	r0, r6
   2e46e:	f7ee fbbf 	bl	1cbf0 <chan_send>
   2e472:	2800      	cmp	r0, #0
   2e474:	d1eb      	bne.n	2e44e <bt_att_encrypt_change+0x5c>
}
   2e476:	bd70      	pop	{r4, r5, r6, pc}

0002e478 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e47a:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2e47c:	f7ee fc16 	bl	1ccac <att_get>
	if (!att) {
   2e480:	4604      	mov	r4, r0
   2e482:	b940      	cbnz	r0, 2e496 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2e484:	69a8      	ldr	r0, [r5, #24]
   2e486:	f7ee faf9 	bl	1ca7c <tx_meta_data_free>
		net_buf_unref(buf);
   2e48a:	4628      	mov	r0, r5
   2e48c:	f7f2 f808 	bl	204a0 <net_buf_unref>
		return -ENOTCONN;
   2e490:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2e494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2e496:	f100 060c 	add.w	r6, r0, #12
   2e49a:	4629      	mov	r1, r5
   2e49c:	4630      	mov	r0, r6
   2e49e:	f000 ff10 	bl	2f2c2 <net_buf_put>
	return list->head;
   2e4a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e4a4:	b14d      	cbz	r5, 2e4ba <bt_att_send+0x42>
	return node->next;
   2e4a6:	f855 49e0 	ldr.w	r4, [r5], #-224
   2e4aa:	b104      	cbz	r4, 2e4ae <bt_att_send+0x36>
   2e4ac:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   2e4ae:	4631      	mov	r1, r6
   2e4b0:	4628      	mov	r0, r5
   2e4b2:	f7ff fcd3 	bl	2de5c <process_queue>
		if (!err) {
   2e4b6:	4603      	mov	r3, r0
   2e4b8:	b980      	cbnz	r0, 2e4dc <bt_att_send+0x64>
	return 0;
   2e4ba:	2000      	movs	r0, #0
   2e4bc:	e7ea      	b.n	2e494 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2e4be:	2103      	movs	r1, #3
   2e4c0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2e4c4:	f7ff fbcc 	bl	2dc60 <atomic_test_bit>
   2e4c8:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2e4ca:	f105 0090 	add.w	r0, r5, #144	; 0x90
   2e4ce:	f7ff fbc7 	bl	2dc60 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2e4d2:	4287      	cmp	r7, r0
   2e4d4:	f06f 0301 	mvn.w	r3, #1
   2e4d8:	d107      	bne.n	2e4ea <bt_att_send+0x72>
   2e4da:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e4dc:	2c00      	cmp	r4, #0
   2e4de:	d0ec      	beq.n	2e4ba <bt_att_send+0x42>
   2e4e0:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   2e4e4:	b922      	cbnz	r2, 2e4f0 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   2e4e6:	3302      	adds	r3, #2
   2e4e8:	d0e9      	beq.n	2e4be <bt_att_send+0x46>
{
   2e4ea:	4625      	mov	r5, r4
   2e4ec:	4614      	mov	r4, r2
   2e4ee:	e7de      	b.n	2e4ae <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e4f0:	3ae0      	subs	r2, #224	; 0xe0
   2e4f2:	e7f8      	b.n	2e4e6 <bt_att_send+0x6e>

0002e4f4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2e4f4:	b510      	push	{r4, lr}
   2e4f6:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2e4f8:	f7ee fbd8 	bl	1ccac <att_get>
	if (!att) {
   2e4fc:	b160      	cbz	r0, 2e518 <bt_att_req_send+0x24>
	parent->next = child;
   2e4fe:	2300      	movs	r3, #0
   2e500:	6023      	str	r3, [r4, #0]
	return list->tail;
   2e502:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2e504:	b92b      	cbnz	r3, 2e512 <bt_att_req_send+0x1e>
	list->head = node;
   2e506:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2e50a:	f7ff fe10 	bl	2e12e <att_req_send_process>

	return 0;
   2e50e:	2000      	movs	r0, #0
}
   2e510:	bd10      	pop	{r4, pc}
	parent->next = child;
   2e512:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e514:	6084      	str	r4, [r0, #8]
}
   2e516:	e7f8      	b.n	2e50a <bt_att_req_send+0x16>
		return -ENOTCONN;
   2e518:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e51c:	e7f8      	b.n	2e510 <bt_att_req_send+0x1c>

0002e51e <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2e51e:	2001      	movs	r0, #1
   2e520:	4770      	bx	lr

0002e522 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2e522:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2e524:	f7ee fbc2 	bl	1ccac <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2e528:	b178      	cbz	r0, 2e54a <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2e52a:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2e52c:	b16b      	cbz	r3, 2e54a <bt_att_clear_out_of_sync_sent+0x28>
   2e52e:	3be0      	subs	r3, #224	; 0xe0
   2e530:	f103 0290 	add.w	r2, r3, #144	; 0x90
   2e534:	e8d2 0fef 	ldaex	r0, [r2]
   2e538:	f020 0020 	bic.w	r0, r0, #32
   2e53c:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2e540:	2900      	cmp	r1, #0
   2e542:	d1f7      	bne.n	2e534 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2e544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2e548:	e7f0      	b.n	2e52c <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2e54a:	bd08      	pop	{r3, pc}

0002e54c <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2e54c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2e54e:	2104      	movs	r1, #4
   2e550:	f7ff fb58 	bl	2dc04 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2e554:	b128      	cbz	r0, 2e562 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2e556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2e55a:	2105      	movs	r1, #5
   2e55c:	308c      	adds	r0, #140	; 0x8c
   2e55e:	f7ff bb7f 	b.w	2dc60 <atomic_test_bit>
}
   2e562:	bd08      	pop	{r3, pc}

0002e564 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2e564:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2e566:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2e56a:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   2e56c:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2e56e:	8082      	strh	r2, [r0, #4]
}
   2e570:	4770      	bx	lr

0002e572 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2e572:	6010      	str	r0, [r2, #0]
}
   2e574:	2000      	movs	r0, #0
   2e576:	4770      	bx	lr

0002e578 <gatt_ccc_changed>:
{
   2e578:	460b      	mov	r3, r1
   2e57a:	8909      	ldrh	r1, [r1, #8]
   2e57c:	8a5a      	ldrh	r2, [r3, #18]
   2e57e:	4291      	cmp	r1, r2
   2e580:	bf38      	it	cc
   2e582:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   2e584:	8a9a      	ldrh	r2, [r3, #20]
   2e586:	428a      	cmp	r2, r1
   2e588:	d003      	beq.n	2e592 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2e58a:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   2e58c:	699b      	ldr	r3, [r3, #24]
   2e58e:	b103      	cbz	r3, 2e592 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2e590:	4718      	bx	r3
}
   2e592:	4770      	bx	lr

0002e594 <gatt_indicate_rsp>:
{
   2e594:	b510      	push	{r4, lr}
   2e596:	9c02      	ldr	r4, [sp, #8]
   2e598:	460a      	mov	r2, r1
	if (params->func) {
   2e59a:	68a3      	ldr	r3, [r4, #8]
   2e59c:	b10b      	cbz	r3, 2e5a2 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2e59e:	4621      	mov	r1, r4
   2e5a0:	4798      	blx	r3
	params->_ref--;
   2e5a2:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e5a4:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2e5a6:	3b01      	subs	r3, #1
   2e5a8:	b2db      	uxtb	r3, r3
   2e5aa:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e5ac:	b122      	cbz	r2, 2e5b8 <gatt_indicate_rsp+0x24>
   2e5ae:	b91b      	cbnz	r3, 2e5b8 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2e5b0:	4620      	mov	r0, r4
}
   2e5b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2e5b6:	4710      	bx	r2
}
   2e5b8:	bd10      	pop	{r4, pc}

0002e5ba <match_uuid>:
	data->attr = attr;
   2e5ba:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2e5bc:	8091      	strh	r1, [r2, #4]
}
   2e5be:	2000      	movs	r0, #0
   2e5c0:	4770      	bx	lr

0002e5c2 <gen_hash_m>:
{
   2e5c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e5c4:	6807      	ldr	r7, [r0, #0]
{
   2e5c6:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e5c8:	783d      	ldrb	r5, [r7, #0]
{
   2e5ca:	4614      	mov	r4, r2
   2e5cc:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e5ce:	b9dd      	cbnz	r5, 2e608 <gen_hash_m+0x46>
	switch (u16->val) {
   2e5d0:	887b      	ldrh	r3, [r7, #2]
   2e5d2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2e5d6:	d004      	beq.n	2e5e2 <gen_hash_m+0x20>
   2e5d8:	d810      	bhi.n	2e5fc <gen_hash_m+0x3a>
   2e5da:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2e5de:	2b03      	cmp	r3, #3
   2e5e0:	d812      	bhi.n	2e608 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2e5e2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e5e6:	2202      	movs	r2, #2
   2e5e8:	4620      	mov	r0, r4
   2e5ea:	f10d 010a 	add.w	r1, sp, #10
   2e5ee:	f7fc fe1a 	bl	2b226 <tc_cmac_update>
   2e5f2:	b968      	cbnz	r0, 2e610 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2e5f4:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2e5f8:	65a2      	str	r2, [r4, #88]	; 0x58
   2e5fa:	e006      	b.n	2e60a <gen_hash_m+0x48>
	switch (u16->val) {
   2e5fc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2e600:	33ff      	adds	r3, #255	; 0xff
   2e602:	b29b      	uxth	r3, r3
   2e604:	2b04      	cmp	r3, #4
   2e606:	d91e      	bls.n	2e646 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2e608:	2501      	movs	r5, #1
}
   2e60a:	4628      	mov	r0, r5
   2e60c:	b009      	add	sp, #36	; 0x24
   2e60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2e610:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e612:	2202      	movs	r2, #2
   2e614:	4620      	mov	r0, r4
   2e616:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2e61a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e61e:	f7fc fe02 	bl	2b226 <tc_cmac_update>
   2e622:	2800      	cmp	r0, #0
   2e624:	d0e6      	beq.n	2e5f4 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2e626:	2000      	movs	r0, #0
   2e628:	9000      	str	r0, [sp, #0]
   2e62a:	aa03      	add	r2, sp, #12
   2e62c:	2313      	movs	r3, #19
   2e62e:	4631      	mov	r1, r6
   2e630:	6877      	ldr	r7, [r6, #4]
   2e632:	47b8      	blx	r7
		if (len < 0) {
   2e634:	1e02      	subs	r2, r0, #0
   2e636:	dbdf      	blt.n	2e5f8 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2e638:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e63a:	4620      	mov	r0, r4
   2e63c:	f7fc fdf3 	bl	2b226 <tc_cmac_update>
   2e640:	2800      	cmp	r0, #0
   2e642:	d1e1      	bne.n	2e608 <gen_hash_m+0x46>
   2e644:	e7d6      	b.n	2e5f4 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2e646:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e64a:	2202      	movs	r2, #2
   2e64c:	4620      	mov	r0, r4
   2e64e:	f10d 010a 	add.w	r1, sp, #10
   2e652:	f7fc fde8 	bl	2b226 <tc_cmac_update>
   2e656:	2800      	cmp	r0, #0
   2e658:	d0cc      	beq.n	2e5f4 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2e65a:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e65c:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2e65e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e662:	f10d 010a 	add.w	r1, sp, #10
   2e666:	e7e8      	b.n	2e63a <gen_hash_m+0x78>

0002e668 <bt_addr_le_eq>:
   2e668:	2207      	movs	r2, #7
{
   2e66a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2e66c:	f003 f83f 	bl	316ee <memcmp>
}
   2e670:	fab0 f080 	clz	r0, r0
   2e674:	0940      	lsrs	r0, r0, #5
   2e676:	bd08      	pop	{r3, pc}

0002e678 <bt_addr_le_copy>:
   2e678:	680b      	ldr	r3, [r1, #0]
   2e67a:	6003      	str	r3, [r0, #0]
   2e67c:	888b      	ldrh	r3, [r1, #4]
   2e67e:	8083      	strh	r3, [r0, #4]
   2e680:	798b      	ldrb	r3, [r1, #6]
   2e682:	7183      	strb	r3, [r0, #6]
}
   2e684:	4770      	bx	lr

0002e686 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2e686:	2300      	movs	r3, #0
   2e688:	6003      	str	r3, [r0, #0]
   2e68a:	6043      	str	r3, [r0, #4]
   2e68c:	6083      	str	r3, [r0, #8]
}
   2e68e:	4770      	bx	lr

0002e690 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2e690:	b538      	push	{r3, r4, r5, lr}
   2e692:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2e696:	4615      	mov	r5, r2
	if (offset > value_len) {
   2e698:	4294      	cmp	r4, r2
   2e69a:	d30a      	bcc.n	2e6b2 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   2e69c:	1aa4      	subs	r4, r4, r2
   2e69e:	428c      	cmp	r4, r1
   2e6a0:	bfa8      	it	ge
   2e6a2:	460c      	movge	r4, r1
   2e6a4:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e6a6:	4622      	mov	r2, r4
   2e6a8:	1959      	adds	r1, r3, r5
   2e6aa:	f003 f830 	bl	3170e <memcpy>
}
   2e6ae:	4620      	mov	r0, r4
   2e6b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e6b2:	f06f 0406 	mvn.w	r4, #6
   2e6b6:	e7fa      	b.n	2e6ae <bt_gatt_attr_read.constprop.0+0x1e>

0002e6b8 <bt_gatt_attr_read_ccc>:
{
   2e6b8:	b530      	push	{r4, r5, lr}
   2e6ba:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   2e6bc:	68c9      	ldr	r1, [r1, #12]
{
   2e6be:	4614      	mov	r4, r2
   2e6c0:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2e6c2:	f7ef f9cd 	bl	1da60 <find_ccc_cfg>
	if (cfg) {
   2e6c6:	b100      	cbz	r0, 2e6ca <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2e6c8:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2e6ca:	2302      	movs	r3, #2
   2e6cc:	f8ad 000e 	strh.w	r0, [sp, #14]
   2e6d0:	9300      	str	r3, [sp, #0]
   2e6d2:	4629      	mov	r1, r5
   2e6d4:	4620      	mov	r0, r4
   2e6d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2e6da:	f10d 030e 	add.w	r3, sp, #14
   2e6de:	f7ff ffd7 	bl	2e690 <bt_gatt_attr_read.constprop.0>
}
   2e6e2:	b005      	add	sp, #20
   2e6e4:	bd30      	pop	{r4, r5, pc}

0002e6e6 <bt_gatt_attr_read_service>:
{
   2e6e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2e6e8:	460c      	mov	r4, r1
   2e6ea:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2e6ec:	68e3      	ldr	r3, [r4, #12]
{
   2e6ee:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2e6f0:	781c      	ldrb	r4, [r3, #0]
{
   2e6f2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2e6f6:	b13c      	cbz	r4, 2e708 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2e6f8:	2410      	movs	r4, #16
   2e6fa:	3301      	adds	r3, #1
   2e6fc:	9406      	str	r4, [sp, #24]
}
   2e6fe:	b004      	add	sp, #16
   2e700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2e704:	f7ff bfc4 	b.w	2e690 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2e708:	885b      	ldrh	r3, [r3, #2]
   2e70a:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2e70e:	2302      	movs	r3, #2
   2e710:	9300      	str	r3, [sp, #0]
   2e712:	f10d 030e 	add.w	r3, sp, #14
   2e716:	f7ff ffbb 	bl	2e690 <bt_gatt_attr_read.constprop.0>
}
   2e71a:	b004      	add	sp, #16
   2e71c:	bd10      	pop	{r4, pc}

0002e71e <cf_read>:
{
   2e71e:	b530      	push	{r4, r5, lr}
   2e720:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2e722:	2300      	movs	r3, #0
{
   2e724:	b085      	sub	sp, #20
   2e726:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2e728:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2e72c:	f7ef f948 	bl	1d9c0 <find_cf_cfg>
	if (cfg) {
   2e730:	b110      	cbz	r0, 2e738 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2e732:	7a03      	ldrb	r3, [r0, #8]
   2e734:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2e738:	2301      	movs	r3, #1
   2e73a:	4629      	mov	r1, r5
   2e73c:	9300      	str	r3, [sp, #0]
   2e73e:	4620      	mov	r0, r4
   2e740:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2e744:	ab03      	add	r3, sp, #12
   2e746:	f7ff ffa3 	bl	2e690 <bt_gatt_attr_read.constprop.0>
}
   2e74a:	b005      	add	sp, #20
   2e74c:	bd30      	pop	{r4, r5, pc}

0002e74e <read_name>:
{
   2e74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e752:	4614      	mov	r4, r2
   2e754:	461d      	mov	r5, r3
   2e756:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2e75a:	f7ec f909 	bl	1a970 <bt_get_name>
   2e75e:	4606      	mov	r6, r0
				 strlen(name));
   2e760:	f7da fe53 	bl	940a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2e764:	b280      	uxth	r0, r0
   2e766:	9006      	str	r0, [sp, #24]
   2e768:	4633      	mov	r3, r6
   2e76a:	463a      	mov	r2, r7
   2e76c:	4629      	mov	r1, r5
   2e76e:	4620      	mov	r0, r4
}
   2e770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2e774:	f7ff bf8c 	b.w	2e690 <bt_gatt_attr_read.constprop.0>

0002e778 <read_appearance>:
{
   2e778:	b530      	push	{r4, r5, lr}
   2e77a:	b085      	sub	sp, #20
   2e77c:	4614      	mov	r4, r2
   2e77e:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2e780:	f7fe fe15 	bl	2d3ae <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2e784:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2e786:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2e78a:	9300      	str	r3, [sp, #0]
   2e78c:	4629      	mov	r1, r5
   2e78e:	4620      	mov	r0, r4
   2e790:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2e794:	f10d 030e 	add.w	r3, sp, #14
   2e798:	f7ff ff7a 	bl	2e690 <bt_gatt_attr_read.constprop.0>
}
   2e79c:	b005      	add	sp, #20
   2e79e:	bd30      	pop	{r4, r5, pc}

0002e7a0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2e7a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2e7a2:	ab0b      	add	r3, sp, #44	; 0x2c
   2e7a4:	9305      	str	r3, [sp, #20]
   2e7a6:	9303      	str	r3, [sp, #12]
   2e7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e7aa:	9302      	str	r3, [sp, #8]
   2e7ac:	2300      	movs	r3, #0
   2e7ae:	4618      	mov	r0, r3
   2e7b0:	e9cd 3300 	strd	r3, r3, [sp]
   2e7b4:	f7e0 fe3a 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2e7b8:	b007      	add	sp, #28
   2e7ba:	f85d fb04 	ldr.w	pc, [sp], #4

0002e7be <sc_clear>:
{
   2e7be:	b538      	push	{r3, r4, r5, lr}
   2e7c0:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e7c2:	f100 0588 	add.w	r5, r0, #136	; 0x88
   2e7c6:	4629      	mov	r1, r5
   2e7c8:	7a00      	ldrb	r0, [r0, #8]
   2e7ca:	f7fe fdf3 	bl	2d3b4 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2e7ce:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e7d0:	7a20      	ldrb	r0, [r4, #8]
   2e7d2:	f7ef f923 	bl	1da1c <find_sc_cfg>
		if (cfg) {
   2e7d6:	b118      	cbz	r0, 2e7e0 <sc_clear+0x22>
}
   2e7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2e7dc:	f7ff bf53 	b.w	2e686 <clear_sc_cfg>
}
   2e7e0:	bd38      	pop	{r3, r4, r5, pc}

0002e7e2 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2e7e2:	2a02      	cmp	r2, #2
{
   2e7e4:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2e7e6:	d108      	bne.n	2e7fa <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2e7e8:	2300      	movs	r3, #0
   2e7ea:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2e7ee:	461a      	mov	r2, r3
   2e7f0:	7a00      	ldrb	r0, [r0, #8]
   2e7f2:	f7ef f9e5 	bl	1dbc0 <sc_save>
}
   2e7f6:	2002      	movs	r0, #2
   2e7f8:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2e7fa:	f7ff ffe0 	bl	2e7be <sc_clear>
   2e7fe:	e7fa      	b.n	2e7f6 <sc_ccc_cfg_write+0x14>

0002e800 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e800:	2301      	movs	r3, #1
   2e802:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e804:	e8d0 2fef 	ldaex	r2, [r0]
   2e808:	431a      	orrs	r2, r3
   2e80a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2e80e:	2900      	cmp	r1, #0
   2e810:	d1f8      	bne.n	2e804 <atomic_set_bit+0x4>
}
   2e812:	4770      	bx	lr

0002e814 <sc_restore_rsp>:
{
   2e814:	b538      	push	{r3, r4, r5, lr}
   2e816:	4604      	mov	r4, r0
   2e818:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2e81a:	f7ff fe80 	bl	2e51e <bt_att_fixed_chan_only>
   2e81e:	b150      	cbz	r0, 2e836 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2e820:	4620      	mov	r0, r4
   2e822:	f7ef f8cd 	bl	1d9c0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2e826:	b130      	cbz	r0, 2e836 <sc_restore_rsp+0x22>
   2e828:	7a03      	ldrb	r3, [r0, #8]
   2e82a:	07db      	lsls	r3, r3, #31
   2e82c:	d503      	bpl.n	2e836 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2e82e:	2100      	movs	r1, #0
   2e830:	300c      	adds	r0, #12
   2e832:	f7ff ffe5 	bl	2e800 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2e836:	b935      	cbnz	r5, 2e846 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e838:	7a20      	ldrb	r0, [r4, #8]
   2e83a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2e83e:	f7ef f8ed 	bl	1da1c <find_sc_cfg>
		if (sc_cfg) {
   2e842:	b100      	cbz	r0, 2e846 <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   2e844:	6085      	str	r5, [r0, #8]
}
   2e846:	bd38      	pop	{r3, r4, r5, pc}

0002e848 <bt_gatt_attr_value_handle>:
{
   2e848:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e84a:	4604      	mov	r4, r0
   2e84c:	b910      	cbnz	r0, 2e854 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2e84e:	2000      	movs	r0, #0
}
   2e850:	b002      	add	sp, #8
   2e852:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2e854:	2300      	movs	r3, #0
   2e856:	f88d 3004 	strb.w	r3, [sp, #4]
   2e85a:	f642 0303 	movw	r3, #10243	; 0x2803
   2e85e:	6800      	ldr	r0, [r0, #0]
   2e860:	a901      	add	r1, sp, #4
   2e862:	f8ad 3006 	strh.w	r3, [sp, #6]
   2e866:	f7fe fc58 	bl	2d11a <bt_uuid_cmp>
   2e86a:	2800      	cmp	r0, #0
   2e86c:	d1ef      	bne.n	2e84e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2e86e:	68e3      	ldr	r3, [r4, #12]
   2e870:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2e872:	2800      	cmp	r0, #0
   2e874:	d1ec      	bne.n	2e850 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2e876:	4620      	mov	r0, r4
   2e878:	f7ef faf8 	bl	1de6c <bt_gatt_attr_get_handle>
   2e87c:	3001      	adds	r0, #1
   2e87e:	b280      	uxth	r0, r0
	return handle;
   2e880:	e7e6      	b.n	2e850 <bt_gatt_attr_value_handle+0x8>

0002e882 <bt_gatt_attr_read_chrc>:
{
   2e882:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2e884:	68cc      	ldr	r4, [r1, #12]
{
   2e886:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2e888:	79a3      	ldrb	r3, [r4, #6]
{
   2e88a:	b088      	sub	sp, #32
   2e88c:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2e88e:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2e892:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2e894:	f7ff ffd8 	bl	2e848 <bt_gatt_attr_value_handle>
   2e898:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2e89c:	6824      	ldr	r4, [r4, #0]
   2e89e:	7823      	ldrb	r3, [r4, #0]
   2e8a0:	b96b      	cbnz	r3, 2e8be <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2e8a2:	8863      	ldrh	r3, [r4, #2]
   2e8a4:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2e8a8:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2e8aa:	9300      	str	r3, [sp, #0]
   2e8ac:	4631      	mov	r1, r6
   2e8ae:	4628      	mov	r0, r5
   2e8b0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2e8b4:	ab03      	add	r3, sp, #12
   2e8b6:	f7ff feeb 	bl	2e690 <bt_gatt_attr_read.constprop.0>
}
   2e8ba:	b008      	add	sp, #32
   2e8bc:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2e8be:	1c63      	adds	r3, r4, #1
   2e8c0:	f10d 020f 	add.w	r2, sp, #15
   2e8c4:	3411      	adds	r4, #17
   2e8c6:	f853 1b04 	ldr.w	r1, [r3], #4
   2e8ca:	42a3      	cmp	r3, r4
   2e8cc:	f842 1b04 	str.w	r1, [r2], #4
   2e8d0:	d1f9      	bne.n	2e8c6 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2e8d2:	2313      	movs	r3, #19
   2e8d4:	e7e9      	b.n	2e8aa <bt_gatt_attr_read_chrc+0x28>

0002e8d6 <bt_gatt_foreach_attr>:
{
   2e8d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2e8d8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2e8dc:	2300      	movs	r3, #0
   2e8de:	461a      	mov	r2, r3
   2e8e0:	9300      	str	r3, [sp, #0]
   2e8e2:	f7ef faf3 	bl	1decc <bt_gatt_foreach_attr_type>
}
   2e8e6:	b005      	add	sp, #20
   2e8e8:	f85d fb04 	ldr.w	pc, [sp], #4

0002e8ec <db_hash_process>:
	db_hash_gen(true);
   2e8ec:	f7ef bb48 	b.w	1df80 <db_hash_gen.constprop.0>

0002e8f0 <bt_gatt_check_perm>:
{
   2e8f0:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2e8f2:	07d4      	lsls	r4, r2, #31
{
   2e8f4:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2e8f6:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2e8f8:	d504      	bpl.n	2e904 <bt_gatt_check_perm+0x14>
   2e8fa:	f013 0f95 	tst.w	r3, #149	; 0x95
   2e8fe:	d027      	beq.n	2e950 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2e900:	6848      	ldr	r0, [r1, #4]
   2e902:	b328      	cbz	r0, 2e950 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2e904:	0790      	lsls	r0, r2, #30
   2e906:	d504      	bpl.n	2e912 <bt_gatt_check_perm+0x22>
   2e908:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2e90c:	d022      	beq.n	2e954 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2e90e:	6889      	ldr	r1, [r1, #8]
   2e910:	b301      	cbz	r1, 2e954 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2e912:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2e916:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2e91a:	d007      	beq.n	2e92c <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2e91c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   2e920:	b90b      	cbnz	r3, 2e926 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2e922:	2005      	movs	r0, #5
}
   2e924:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2e926:	7b5b      	ldrb	r3, [r3, #13]
   2e928:	06db      	lsls	r3, r3, #27
   2e92a:	d5fa      	bpl.n	2e922 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2e92c:	f014 0f30 	tst.w	r4, #48	; 0x30
   2e930:	d108      	bne.n	2e944 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2e932:	f014 000c 	ands.w	r0, r4, #12
   2e936:	d0f5      	beq.n	2e924 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2e938:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2e93a:	2b00      	cmp	r3, #0
   2e93c:	bf14      	ite	ne
   2e93e:	2000      	movne	r0, #0
   2e940:	200f      	moveq	r0, #15
   2e942:	e7ef      	b.n	2e924 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2e944:	4628      	mov	r0, r5
   2e946:	f7ff f891 	bl	2da6c <bt_conn_get_security>
   2e94a:	2802      	cmp	r0, #2
   2e94c:	d8f1      	bhi.n	2e932 <bt_gatt_check_perm+0x42>
   2e94e:	e7e8      	b.n	2e922 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2e950:	2002      	movs	r0, #2
   2e952:	e7e7      	b.n	2e924 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2e954:	2003      	movs	r0, #3
   2e956:	e7e5      	b.n	2e924 <bt_gatt_check_perm+0x34>

0002e958 <bt_gatt_is_subscribed>:
{
   2e958:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2e95c:	7b43      	ldrb	r3, [r0, #13]
{
   2e95e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2e960:	2b07      	cmp	r3, #7
{
   2e962:	460c      	mov	r4, r1
   2e964:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2e966:	d110      	bne.n	2e98a <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2e968:	2300      	movs	r3, #0
   2e96a:	f88d 300c 	strb.w	r3, [sp, #12]
   2e96e:	f642 0303 	movw	r3, #10243	; 0x2803
   2e972:	6820      	ldr	r0, [r4, #0]
   2e974:	a903      	add	r1, sp, #12
   2e976:	f8ad 300e 	strh.w	r3, [sp, #14]
   2e97a:	f7fe fbce 	bl	2d11a <bt_uuid_cmp>
   2e97e:	b960      	cbnz	r0, 2e99a <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2e980:	68e3      	ldr	r3, [r4, #12]
   2e982:	799b      	ldrb	r3, [r3, #6]
   2e984:	f013 0f30 	tst.w	r3, #48	; 0x30
   2e988:	d103      	bne.n	2e992 <bt_gatt_is_subscribed+0x3a>
		return false;
   2e98a:	2000      	movs	r0, #0
}
   2e98c:	b004      	add	sp, #16
   2e98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2e992:	4620      	mov	r0, r4
   2e994:	f7ef fb70 	bl	1e078 <bt_gatt_attr_next>
   2e998:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2e99a:	2300      	movs	r3, #0
   2e99c:	6820      	ldr	r0, [r4, #0]
   2e99e:	f88d 300c 	strb.w	r3, [sp, #12]
   2e9a2:	f642 1302 	movw	r3, #10498	; 0x2902
   2e9a6:	a903      	add	r1, sp, #12
   2e9a8:	f8ad 300e 	strh.w	r3, [sp, #14]
   2e9ac:	f7fe fbb5 	bl	2d11a <bt_uuid_cmp>
   2e9b0:	b118      	cbz	r0, 2e9ba <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2e9b2:	4620      	mov	r0, r4
   2e9b4:	f7ef fb60 	bl	1e078 <bt_gatt_attr_next>
   2e9b8:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2e9ba:	2700      	movs	r7, #0
   2e9bc:	f642 1802 	movw	r8, #10498	; 0x2902
   2e9c0:	6820      	ldr	r0, [r4, #0]
   2e9c2:	4669      	mov	r1, sp
   2e9c4:	f88d 7000 	strb.w	r7, [sp]
   2e9c8:	f8ad 8002 	strh.w	r8, [sp, #2]
   2e9cc:	f7fe fba5 	bl	2d11a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2e9d0:	bb20      	cbnz	r0, 2ea1c <bt_gatt_is_subscribed+0xc4>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2e9d2:	2300      	movs	r3, #0
   2e9d4:	6820      	ldr	r0, [r4, #0]
   2e9d6:	f88d 300c 	strb.w	r3, [sp, #12]
   2e9da:	f642 1302 	movw	r3, #10498	; 0x2902
   2e9de:	a903      	add	r1, sp, #12
   2e9e0:	f8ad 300e 	strh.w	r3, [sp, #14]
   2e9e4:	f7fe fb99 	bl	2d11a <bt_uuid_cmp>
   2e9e8:	2800      	cmp	r0, #0
   2e9ea:	d1ce      	bne.n	2e98a <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   2e9ec:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2e9ee:	4628      	mov	r0, r5
   2e9f0:	4622      	mov	r2, r4
   2e9f2:	f812 1b01 	ldrb.w	r1, [r2], #1
   2e9f6:	f7ff f83b 	bl	2da70 <bt_conn_is_peer_addr_le>
   2e9fa:	b110      	cbz	r0, 2ea02 <bt_gatt_is_subscribed+0xaa>
   2e9fc:	8923      	ldrh	r3, [r4, #8]
   2e9fe:	421e      	tst	r6, r3
   2ea00:	d10a      	bne.n	2ea18 <bt_gatt_is_subscribed+0xc0>
   2ea02:	4628      	mov	r0, r5
   2ea04:	7aa1      	ldrb	r1, [r4, #10]
   2ea06:	f104 020b 	add.w	r2, r4, #11
   2ea0a:	f7ff f831 	bl	2da70 <bt_conn_is_peer_addr_le>
   2ea0e:	2800      	cmp	r0, #0
   2ea10:	d0bb      	beq.n	2e98a <bt_gatt_is_subscribed+0x32>
   2ea12:	8a63      	ldrh	r3, [r4, #18]
   2ea14:	421e      	tst	r6, r3
   2ea16:	d0b8      	beq.n	2e98a <bt_gatt_is_subscribed+0x32>
			return true;
   2ea18:	2001      	movs	r0, #1
   2ea1a:	e7b7      	b.n	2e98c <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2ea1c:	f642 0303 	movw	r3, #10243	; 0x2803
   2ea20:	6820      	ldr	r0, [r4, #0]
   2ea22:	a901      	add	r1, sp, #4
   2ea24:	f88d 7004 	strb.w	r7, [sp, #4]
   2ea28:	f8ad 3006 	strh.w	r3, [sp, #6]
   2ea2c:	f7fe fb75 	bl	2d11a <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2ea30:	2800      	cmp	r0, #0
   2ea32:	d0ce      	beq.n	2e9d2 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2ea34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2ea38:	6820      	ldr	r0, [r4, #0]
   2ea3a:	a902      	add	r1, sp, #8
   2ea3c:	f88d 7008 	strb.w	r7, [sp, #8]
   2ea40:	f8ad 300a 	strh.w	r3, [sp, #10]
   2ea44:	f7fe fb69 	bl	2d11a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2ea48:	2800      	cmp	r0, #0
   2ea4a:	d0c2      	beq.n	2e9d2 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2ea4c:	f642 0301 	movw	r3, #10241	; 0x2801
   2ea50:	6820      	ldr	r0, [r4, #0]
   2ea52:	a903      	add	r1, sp, #12
   2ea54:	f88d 700c 	strb.w	r7, [sp, #12]
   2ea58:	f8ad 300e 	strh.w	r3, [sp, #14]
   2ea5c:	f7fe fb5d 	bl	2d11a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2ea60:	2800      	cmp	r0, #0
   2ea62:	d0b6      	beq.n	2e9d2 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2ea64:	4620      	mov	r0, r4
   2ea66:	f7ef fb07 	bl	1e078 <bt_gatt_attr_next>
		if (!attr) {
   2ea6a:	4604      	mov	r4, r0
   2ea6c:	2800      	cmp	r0, #0
   2ea6e:	d1a7      	bne.n	2e9c0 <bt_gatt_is_subscribed+0x68>
   2ea70:	e78b      	b.n	2e98a <bt_gatt_is_subscribed+0x32>

0002ea72 <bt_gatt_change_aware>:
{
   2ea72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ea74:	4606      	mov	r6, r0
   2ea76:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2ea78:	f7ee ffa2 	bl	1d9c0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ea7c:	b1e0      	cbz	r0, 2eab8 <bt_gatt_change_aware+0x46>
   2ea7e:	7a03      	ldrb	r3, [r0, #8]
   2ea80:	07db      	lsls	r3, r3, #31
   2ea82:	d519      	bpl.n	2eab8 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2ea84:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ea88:	e8d4 5faf 	lda	r5, [r4]
   2ea8c:	f015 0501 	ands.w	r5, r5, #1
   2ea90:	d112      	bne.n	2eab8 <bt_gatt_change_aware+0x46>
	if (!req) {
   2ea92:	b197      	cbz	r7, 2eaba <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ea94:	e8d4 1fef 	ldaex	r1, [r4]
   2ea98:	f021 0302 	bic.w	r3, r1, #2
   2ea9c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2eaa0:	2a00      	cmp	r2, #0
   2eaa2:	d1f7      	bne.n	2ea94 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2eaa4:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   2eaa8:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2eaaa:	d008      	beq.n	2eabe <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2eaac:	f7ff fd39 	bl	2e522 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2eab0:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2eab2:	4620      	mov	r0, r4
   2eab4:	f7ff fea4 	bl	2e800 <atomic_set_bit>
		return true;
   2eab8:	2501      	movs	r5, #1
}
   2eaba:	4628      	mov	r0, r5
   2eabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2eabe:	f7ff fd2e 	bl	2e51e <bt_att_fixed_chan_only>
   2eac2:	2800      	cmp	r0, #0
   2eac4:	d0f9      	beq.n	2eaba <bt_gatt_change_aware+0x48>
   2eac6:	4630      	mov	r0, r6
   2eac8:	f7ff fd40 	bl	2e54c <bt_att_out_of_sync_sent_on_fixed>
   2eacc:	2800      	cmp	r0, #0
   2eace:	d0f4      	beq.n	2eaba <bt_gatt_change_aware+0x48>
   2ead0:	e8d4 3fef 	ldaex	r3, [r4]
   2ead4:	f023 0302 	bic.w	r3, r3, #2
   2ead8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2eadc:	2a00      	cmp	r2, #0
   2eade:	d1f7      	bne.n	2ead0 <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   2eae0:	4630      	mov	r0, r6
   2eae2:	f7ff fd1e 	bl	2e522 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2eae6:	4639      	mov	r1, r7
   2eae8:	e7e3      	b.n	2eab2 <bt_gatt_change_aware+0x40>

0002eaea <smp_pairing_rsp>:
}
   2eaea:	2007      	movs	r0, #7
   2eaec:	4770      	bx	lr

0002eaee <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2eaee:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2eaf2:	4108      	asrs	r0, r1
}
   2eaf4:	f000 0001 	and.w	r0, r0, #1
   2eaf8:	4770      	bx	lr

0002eafa <update_keys_check>:
{
   2eafa:	4603      	mov	r3, r0
   2eafc:	b510      	push	{r4, lr}
	if (!keys ||
   2eafe:	b1d9      	cbz	r1, 2eb38 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2eb00:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2eb02:	f010 0f24 	tst.w	r0, #36	; 0x24
   2eb06:	d017      	beq.n	2eb38 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2eb08:	7d1a      	ldrb	r2, [r3, #20]
   2eb0a:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2eb0c:	7b09      	ldrb	r1, [r1, #12]
   2eb0e:	42a2      	cmp	r2, r4
   2eb10:	bf28      	it	cs
   2eb12:	4622      	movcs	r2, r4
   2eb14:	4291      	cmp	r1, r2
   2eb16:	d901      	bls.n	2eb1c <update_keys_check+0x22>
			return false;
   2eb18:	2000      	movs	r0, #0
}
   2eb1a:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2eb1c:	0682      	lsls	r2, r0, #26
   2eb1e:	d404      	bmi.n	2eb2a <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2eb20:	7a18      	ldrb	r0, [r3, #8]
   2eb22:	3800      	subs	r0, #0
   2eb24:	bf18      	it	ne
   2eb26:	2001      	movne	r0, #1
   2eb28:	e7f7      	b.n	2eb1a <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2eb2a:	2105      	movs	r1, #5
   2eb2c:	1d18      	adds	r0, r3, #4
   2eb2e:	f7ff ffde 	bl	2eaee <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2eb32:	2800      	cmp	r0, #0
   2eb34:	d1f4      	bne.n	2eb20 <update_keys_check+0x26>
   2eb36:	e7ef      	b.n	2eb18 <update_keys_check+0x1e>
	return true;
   2eb38:	2001      	movs	r0, #1
   2eb3a:	e7ee      	b.n	2eb1a <update_keys_check+0x20>

0002eb3c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2eb3c:	2301      	movs	r3, #1
   2eb3e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2eb40:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2eb42:	e8d0 2fef 	ldaex	r2, [r0]
   2eb46:	401a      	ands	r2, r3
   2eb48:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2eb4c:	2900      	cmp	r1, #0
   2eb4e:	d1f8      	bne.n	2eb42 <atomic_clear_bit+0x6>
}
   2eb50:	4770      	bx	lr

0002eb52 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2eb52:	680b      	ldr	r3, [r1, #0]
   2eb54:	6003      	str	r3, [r0, #0]
   2eb56:	888b      	ldrh	r3, [r1, #4]
   2eb58:	8083      	strh	r3, [r0, #4]
   2eb5a:	798b      	ldrb	r3, [r1, #6]
   2eb5c:	7183      	strb	r3, [r0, #6]
   2eb5e:	4770      	bx	lr

0002eb60 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2eb60:	2007      	movs	r0, #7
   2eb62:	4770      	bx	lr

0002eb64 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2eb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2eb66:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2eb68:	2200      	movs	r2, #0
   2eb6a:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2eb6c:	4604      	mov	r4, r0
   2eb6e:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2eb70:	460a      	mov	r2, r1
   2eb72:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2eb76:	2106      	movs	r1, #6
   2eb78:	f7ff f822 	bl	2dbc0 <bt_l2cap_send_cb>
   2eb7c:	b128      	cbz	r0, 2eb8a <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2eb7e:	4628      	mov	r0, r5
}
   2eb80:	b003      	add	sp, #12
   2eb82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2eb86:	f7f1 bc8b 	b.w	204a0 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2eb8a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2eb8e:	2300      	movs	r3, #0
   2eb90:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   2eb94:	b003      	add	sp, #12
   2eb96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2eb9a:	f7f7 b979 	b.w	25e90 <k_work_reschedule>

0002eb9e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2eb9e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2eba0:	ab0b      	add	r3, sp, #44	; 0x2c
   2eba2:	9305      	str	r3, [sp, #20]
   2eba4:	9303      	str	r3, [sp, #12]
   2eba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2eba8:	9302      	str	r3, [sp, #8]
   2ebaa:	2300      	movs	r3, #0
   2ebac:	4618      	mov	r0, r3
   2ebae:	e9cd 3300 	strd	r3, r3, [sp]
   2ebb2:	f7e0 fc3b 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2ebb6:	b007      	add	sp, #28
   2ebb8:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebbc <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ebbc:	2301      	movs	r3, #1
   2ebbe:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ebc0:	e8d0 2fef 	ldaex	r2, [r0]
   2ebc4:	431a      	orrs	r2, r3
   2ebc6:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2ebca:	2900      	cmp	r1, #0
   2ebcc:	d1f8      	bne.n	2ebc0 <atomic_set_bit+0x4>
}
   2ebce:	4770      	bx	lr

0002ebd0 <smp_keypress_notif>:
{
   2ebd0:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2ebd2:	210e      	movs	r1, #14
   2ebd4:	f7ff fff2 	bl	2ebbc <atomic_set_bit>
}
   2ebd8:	2000      	movs	r0, #0
   2ebda:	bd08      	pop	{r3, pc}

0002ebdc <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2ebdc:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2ebde:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2ebe0:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2ebe2:	4628      	mov	r0, r5
   2ebe4:	2104      	movs	r1, #4
   2ebe6:	f7ff ff82 	bl	2eaee <atomic_test_bit>
   2ebea:	b168      	cbz	r0, 2ec08 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2ebec:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ebee:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2ebf0:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ebf2:	4608      	mov	r0, r1
   2ebf4:	f7fe ffe1 	bl	2dbba <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2ebf8:	4604      	mov	r4, r0
   2ebfa:	b940      	cbnz	r0, 2ec0e <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2ebfc:	2104      	movs	r1, #4
   2ebfe:	4628      	mov	r0, r5
   2ec00:	f7ff ffdc 	bl	2ebbc <atomic_set_bit>
}
   2ec04:	4620      	mov	r0, r4
   2ec06:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2ec08:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ec0c:	e7ef      	b.n	2ebee <smp_create_pdu.constprop.0+0x12>
   2ec0e:	2101      	movs	r1, #1
   2ec10:	300c      	adds	r0, #12
   2ec12:	f000 fb7e 	bl	2f312 <net_buf_simple_add>
	hdr->code = op;
   2ec16:	7006      	strb	r6, [r0, #0]
	return buf;
   2ec18:	e7f4      	b.n	2ec04 <smp_create_pdu.constprop.0+0x28>

0002ec1a <send_pairing_rsp>:
{
   2ec1a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ec1c:	2102      	movs	r1, #2
{
   2ec1e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ec20:	f7ff ffdc 	bl	2ebdc <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ec24:	4605      	mov	r5, r0
   2ec26:	b180      	cbz	r0, 2ec4a <send_pairing_rsp+0x30>
   2ec28:	2106      	movs	r1, #6
   2ec2a:	300c      	adds	r0, #12
   2ec2c:	f000 fb71 	bl	2f312 <net_buf_simple_add>
   2ec30:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   2ec34:	2200      	movs	r2, #0
   2ec36:	6003      	str	r3, [r0, #0]
   2ec38:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2ec3c:	4629      	mov	r1, r5
   2ec3e:	8083      	strh	r3, [r0, #4]
   2ec40:	4620      	mov	r0, r4
   2ec42:	f7ff ff8f 	bl	2eb64 <smp_send.constprop.0>
	return 0;
   2ec46:	2000      	movs	r0, #0
}
   2ec48:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ec4a:	2008      	movs	r0, #8
   2ec4c:	e7fc      	b.n	2ec48 <send_pairing_rsp+0x2e>

0002ec4e <smp_send_pairing_random>:
{
   2ec4e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ec50:	2104      	movs	r1, #4
{
   2ec52:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ec54:	f7ff ffc2 	bl	2ebdc <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ec58:	4605      	mov	r5, r0
   2ec5a:	b1a0      	cbz	r0, 2ec86 <smp_send_pairing_random+0x38>
   2ec5c:	2110      	movs	r1, #16
   2ec5e:	300c      	adds	r0, #12
   2ec60:	f000 fb57 	bl	2f312 <net_buf_simple_add>
   2ec64:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2ec68:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2ec6c:	f853 1b04 	ldr.w	r1, [r3], #4
   2ec70:	4293      	cmp	r3, r2
   2ec72:	f840 1b04 	str.w	r1, [r0], #4
   2ec76:	d1f9      	bne.n	2ec6c <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2ec78:	4620      	mov	r0, r4
   2ec7a:	2200      	movs	r2, #0
   2ec7c:	4629      	mov	r1, r5
   2ec7e:	f7ff ff71 	bl	2eb64 <smp_send.constprop.0>
	return 0;
   2ec82:	2000      	movs	r0, #0
}
   2ec84:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ec86:	2008      	movs	r0, #8
   2ec88:	e7fc      	b.n	2ec84 <smp_send_pairing_random+0x36>

0002ec8a <smp_dhkey_check>:
{
   2ec8a:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2ec8c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   2ec90:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2ec92:	78db      	ldrb	r3, [r3, #3]
   2ec94:	2b01      	cmp	r3, #1
   2ec96:	d119      	bne.n	2eccc <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2ec98:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2ec9a:	1d06      	adds	r6, r0, #4
   2ec9c:	2110      	movs	r1, #16
   2ec9e:	4630      	mov	r0, r6
   2eca0:	f7ff ff4c 	bl	2eb3c <atomic_clear_bit>
   2eca4:	462b      	mov	r3, r5
   2eca6:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2ecaa:	f105 0110 	add.w	r1, r5, #16
   2ecae:	f853 0b04 	ldr.w	r0, [r3], #4
   2ecb2:	428b      	cmp	r3, r1
   2ecb4:	f842 0b04 	str.w	r0, [r2], #4
   2ecb8:	d1f9      	bne.n	2ecae <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2ecba:	2107      	movs	r1, #7
   2ecbc:	4630      	mov	r0, r6
   2ecbe:	f7ff ff16 	bl	2eaee <atomic_test_bit>
   2ecc2:	b128      	cbz	r0, 2ecd0 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2ecc4:	2109      	movs	r1, #9
   2ecc6:	4630      	mov	r0, r6
   2ecc8:	f7ff ff78 	bl	2ebbc <atomic_set_bit>
}
   2eccc:	2000      	movs	r0, #0
   2ecce:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2ecd0:	210a      	movs	r1, #10
   2ecd2:	4630      	mov	r0, r6
   2ecd4:	f7ff ff0b 	bl	2eaee <atomic_test_bit>
   2ecd8:	2800      	cmp	r0, #0
   2ecda:	d1f3      	bne.n	2ecc4 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2ecdc:	4620      	mov	r0, r4
}
   2ecde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2ece2:	f7f0 b9f9 	b.w	1f0d8 <compute_and_check_and_send_periph_dhcheck>

0002ece6 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2ece6:	2007      	movs	r0, #7
   2ece8:	4770      	bx	lr

0002ecea <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ecea:	2301      	movs	r3, #1
   2ecec:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ecf0:	43ca      	mvns	r2, r1
{
   2ecf2:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ecf4:	e8d0 3fef 	ldaex	r3, [r0]
   2ecf8:	ea03 0402 	and.w	r4, r3, r2
   2ecfc:	e8c0 4fe5 	stlex	r5, r4, [r0]
   2ed00:	2d00      	cmp	r5, #0
   2ed02:	d1f7      	bne.n	2ecf4 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2ed04:	4219      	tst	r1, r3
}
   2ed06:	bf14      	ite	ne
   2ed08:	2001      	movne	r0, #1
   2ed0a:	2000      	moveq	r0, #0
   2ed0c:	bd30      	pop	{r4, r5, pc}

0002ed0e <smp_reset>:
{
   2ed0e:	b538      	push	{r3, r4, r5, lr}
   2ed10:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ed12:	2500      	movs	r5, #0
   2ed14:	1d03      	adds	r3, r0, #4
   2ed16:	e8d3 2fef 	ldaex	r2, [r3]
   2ed1a:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2ed1e:	2900      	cmp	r1, #0
   2ed20:	d1f9      	bne.n	2ed16 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2ed22:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   2ed26:	f002 f977 	bl	31018 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2ed2a:	7225      	strb	r5, [r4, #8]
   2ed2c:	e8d4 3fef 	ldaex	r3, [r4]
   2ed30:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2ed34:	2a00      	cmp	r2, #0
   2ed36:	d1f9      	bne.n	2ed2c <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2ed38:	4620      	mov	r0, r4
}
   2ed3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2ed3e:	2101      	movs	r1, #1
   2ed40:	f7ff bf3c 	b.w	2ebbc <atomic_set_bit>

0002ed44 <smp_c1>:
{
   2ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ed46:	b089      	sub	sp, #36	; 0x24
   2ed48:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2ed4c:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2ed4e:	7830      	ldrb	r0, [r6, #0]
{
   2ed50:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2ed52:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2ed56:	7838      	ldrb	r0, [r7, #0]
   2ed58:	f101 0c10 	add.w	ip, r1, #16
   2ed5c:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2ed60:	6810      	ldr	r0, [r2, #0]
   2ed62:	f8cd 0002 	str.w	r0, [sp, #2]
   2ed66:	8890      	ldrh	r0, [r2, #4]
   2ed68:	7992      	ldrb	r2, [r2, #6]
   2ed6a:	f8ad 0006 	strh.w	r0, [sp, #6]
   2ed6e:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2ed72:	681a      	ldr	r2, [r3, #0]
   2ed74:	4668      	mov	r0, sp
   2ed76:	f8cd 2009 	str.w	r2, [sp, #9]
   2ed7a:	889a      	ldrh	r2, [r3, #4]
   2ed7c:	799b      	ldrb	r3, [r3, #6]
   2ed7e:	f8ad 200d 	strh.w	r2, [sp, #13]
   2ed82:	4622      	mov	r2, r4
   2ed84:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   2ed88:	f811 3b01 	ldrb.w	r3, [r1], #1
   2ed8c:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   2ed90:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   2ed92:	ea83 030e 	eor.w	r3, r3, lr
   2ed96:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2ed9a:	d1f5      	bne.n	2ed88 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2ed9c:	4622      	mov	r2, r4
   2ed9e:	4621      	mov	r1, r4
   2eda0:	4628      	mov	r0, r5
   2eda2:	f7fe fd1a 	bl	2d7da <bt_encrypt_le>
	if (err) {
   2eda6:	4603      	mov	r3, r0
   2eda8:	bb28      	cbnz	r0, 2edf6 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   2edaa:	9307      	str	r3, [sp, #28]
   2edac:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   2edae:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2edb2:	f8d7 0001 	ldr.w	r0, [r7, #1]
   2edb6:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2edba:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2edbe:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   2edc0:	f8cd 2016 	str.w	r2, [sp, #22]
   2edc4:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   2edc8:	f104 0010 	add.w	r0, r4, #16
   2edcc:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   2edd0:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   2edd2:	f813 2b01 	ldrb.w	r2, [r3], #1
   2edd6:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   2edda:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   2eddc:	ea82 0206 	eor.w	r2, r2, r6
   2ede0:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   2ede4:	d1f5      	bne.n	2edd2 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   2ede6:	4622      	mov	r2, r4
   2ede8:	4621      	mov	r1, r4
   2edea:	4628      	mov	r0, r5
}
   2edec:	b009      	add	sp, #36	; 0x24
   2edee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2edf2:	f7fe bcf2 	b.w	2d7da <bt_encrypt_le>
}
   2edf6:	b009      	add	sp, #36	; 0x24
   2edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002edfa <legacy_pairing_confirm>:
{
   2edfa:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2edfc:	1d07      	adds	r7, r0, #4
{
   2edfe:	4604      	mov	r4, r0
   2ee00:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2ee02:	210a      	movs	r1, #10
   2ee04:	4638      	mov	r0, r7
   2ee06:	f7ff fe72 	bl	2eaee <atomic_test_bit>
   2ee0a:	bb88      	cbnz	r0, 2ee70 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2ee0c:	2104      	movs	r1, #4
   2ee0e:	4620      	mov	r0, r4
   2ee10:	f7ff fed4 	bl	2ebbc <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2ee14:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2ee16:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2ee1a:	f7ff fedf 	bl	2ebdc <smp_create_pdu.constprop.0>
	if (!buf) {
   2ee1e:	4605      	mov	r5, r0
   2ee20:	b1c0      	cbz	r0, 2ee54 <legacy_pairing_confirm+0x5a>
   2ee22:	2110      	movs	r1, #16
   2ee24:	300c      	adds	r0, #12
   2ee26:	f000 fa74 	bl	2f312 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2ee2a:	f106 0396 	add.w	r3, r6, #150	; 0x96
   2ee2e:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2ee30:	9002      	str	r0, [sp, #8]
   2ee32:	9301      	str	r3, [sp, #4]
   2ee34:	9600      	str	r6, [sp, #0]
   2ee36:	f104 0310 	add.w	r3, r4, #16
   2ee3a:	f104 0209 	add.w	r2, r4, #9
   2ee3e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2ee42:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2ee46:	f7ff ff7d 	bl	2ed44 <smp_c1>
   2ee4a:	4606      	mov	r6, r0
   2ee4c:	b128      	cbz	r0, 2ee5a <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2ee4e:	4628      	mov	r0, r5
   2ee50:	f7f1 fb26 	bl	204a0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2ee54:	2008      	movs	r0, #8
}
   2ee56:	b005      	add	sp, #20
   2ee58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2ee5a:	4602      	mov	r2, r0
   2ee5c:	4629      	mov	r1, r5
   2ee5e:	4620      	mov	r0, r4
   2ee60:	f7ff fe80 	bl	2eb64 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2ee64:	4631      	mov	r1, r6
   2ee66:	4638      	mov	r0, r7
   2ee68:	f7ff fe68 	bl	2eb3c <atomic_clear_bit>
	return 0;
   2ee6c:	2000      	movs	r0, #0
   2ee6e:	e7f2      	b.n	2ee56 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2ee70:	2100      	movs	r1, #0
   2ee72:	4638      	mov	r0, r7
   2ee74:	f7ff fea2 	bl	2ebbc <atomic_set_bit>
	return 0;
   2ee78:	e7f8      	b.n	2ee6c <legacy_pairing_confirm+0x72>

0002ee7a <bt_smp_request_ltk>:
{
   2ee7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ee7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2ee80:	4604      	mov	r4, r0
   2ee82:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2ee86:	f7ef fd15 	bl	1e8b4 <smp_chan_get>
	if (!smp) {
   2ee8a:	4605      	mov	r5, r0
   2ee8c:	2800      	cmp	r0, #0
   2ee8e:	d07c      	beq.n	2ef8a <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2ee90:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2ee94:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2ee96:	f1b8 0f00 	cmp.w	r8, #0
   2ee9a:	d128      	bne.n	2eeee <bt_smp_request_ltk+0x74>
   2ee9c:	e9dd 3200 	ldrd	r3, r2, [sp]
   2eea0:	4313      	orrs	r3, r2
   2eea2:	d124      	bne.n	2eeee <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2eea4:	2103      	movs	r1, #3
   2eea6:	4630      	mov	r0, r6
   2eea8:	f7ff fe21 	bl	2eaee <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2eeac:	b1f8      	cbz	r0, 2eeee <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2eeae:	2101      	movs	r1, #1
   2eeb0:	4630      	mov	r0, r6
   2eeb2:	f7ff fe1c 	bl	2eaee <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2eeb6:	b1d0      	cbz	r0, 2eeee <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2eeb8:	7d2c      	ldrb	r4, [r5, #20]
   2eeba:	7b6b      	ldrb	r3, [r5, #13]
   2eebc:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2eec0:	429c      	cmp	r4, r3
   2eec2:	bf28      	it	cs
   2eec4:	461c      	movcs	r4, r3
   2eec6:	4622      	mov	r2, r4
   2eec8:	4638      	mov	r0, r7
   2eeca:	f002 fc20 	bl	3170e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2eece:	2c0f      	cmp	r4, #15
   2eed0:	d805      	bhi.n	2eede <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   2eed2:	4641      	mov	r1, r8
   2eed4:	f1c4 0210 	rsb	r2, r4, #16
   2eed8:	1938      	adds	r0, r7, r4
   2eeda:	f002 fc52 	bl	31782 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2eede:	4630      	mov	r0, r6
   2eee0:	2101      	movs	r1, #1
   2eee2:	f7ff fe6b 	bl	2ebbc <atomic_set_bit>
		return true;
   2eee6:	2001      	movs	r0, #1
}
   2eee8:	b002      	add	sp, #8
   2eeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2eeee:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   2eef2:	b983      	cbnz	r3, 2ef16 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2eef4:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2eef8:	4642      	mov	r2, r8
   2eefa:	2020      	movs	r0, #32
   2eefc:	7a21      	ldrb	r1, [r4, #8]
   2eefe:	f7f1 f8ef 	bl	200e0 <bt_keys_find>
   2ef02:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   2ef06:	b930      	cbnz	r0, 2ef16 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2ef08:	4642      	mov	r2, r8
   2ef0a:	2001      	movs	r0, #1
   2ef0c:	7a21      	ldrb	r1, [r4, #8]
   2ef0e:	f7f1 f8e7 	bl	200e0 <bt_keys_find>
   2ef12:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2ef16:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2ef1a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2ef1e:	f1b8 0f00 	cmp.w	r8, #0
   2ef22:	d10c      	bne.n	2ef3e <bt_smp_request_ltk+0xc4>
   2ef24:	e9dd 3200 	ldrd	r3, r2, [sp]
   2ef28:	4313      	orrs	r3, r2
   2ef2a:	d108      	bne.n	2ef3e <bt_smp_request_ltk+0xc4>
   2ef2c:	b300      	cbz	r0, 2ef70 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2ef2e:	89c3      	ldrh	r3, [r0, #14]
   2ef30:	069a      	lsls	r2, r3, #26
   2ef32:	d505      	bpl.n	2ef40 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2ef34:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ef36:	f100 011a 	add.w	r1, r0, #26
   2ef3a:	4622      	mov	r2, r4
   2ef3c:	e7c4      	b.n	2eec8 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2ef3e:	b1b8      	cbz	r0, 2ef70 <bt_smp_request_ltk+0xf6>
   2ef40:	89c3      	ldrh	r3, [r0, #14]
   2ef42:	07db      	lsls	r3, r3, #31
   2ef44:	d514      	bpl.n	2ef70 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2ef46:	2208      	movs	r2, #8
   2ef48:	4669      	mov	r1, sp
   2ef4a:	3040      	adds	r0, #64	; 0x40
   2ef4c:	f002 fbcf 	bl	316ee <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2ef50:	b970      	cbnz	r0, 2ef70 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2ef52:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2ef56:	2202      	movs	r2, #2
   2ef58:	a908      	add	r1, sp, #32
   2ef5a:	3048      	adds	r0, #72	; 0x48
   2ef5c:	f002 fbc7 	bl	316ee <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2ef60:	4680      	mov	r8, r0
   2ef62:	b928      	cbnz	r0, 2ef70 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2ef64:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   2ef68:	7b0c      	ldrb	r4, [r1, #12]
   2ef6a:	314a      	adds	r1, #74	; 0x4a
   2ef6c:	4622      	mov	r2, r4
   2ef6e:	e7ab      	b.n	2eec8 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2ef70:	210f      	movs	r1, #15
   2ef72:	4630      	mov	r0, r6
   2ef74:	f7ff fdbb 	bl	2eaee <atomic_test_bit>
   2ef78:	b120      	cbz	r0, 2ef84 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2ef7a:	2202      	movs	r2, #2
   2ef7c:	2106      	movs	r1, #6
   2ef7e:	4620      	mov	r0, r4
   2ef80:	f7ed f97e 	bl	1c280 <bt_conn_security_changed>
	smp_reset(smp);
   2ef84:	4628      	mov	r0, r5
   2ef86:	f7ff fec2 	bl	2ed0e <smp_reset>
		return false;
   2ef8a:	2000      	movs	r0, #0
   2ef8c:	e7ac      	b.n	2eee8 <bt_smp_request_ltk+0x6e>

0002ef8e <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2ef8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ef92:	4770      	bx	lr

0002ef94 <bt_smp_dhkey_ready>:
{
   2ef94:	b570      	push	{r4, r5, r6, lr}
   2ef96:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2ef98:	2008      	movs	r0, #8
   2ef9a:	f7ef fc23 	bl	1e7e4 <smp_find>
	if (smp) {
   2ef9e:	4605      	mov	r5, r0
   2efa0:	b1e0      	cbz	r0, 2efdc <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2efa2:	1d06      	adds	r6, r0, #4
   2efa4:	2108      	movs	r1, #8
   2efa6:	4630      	mov	r0, r6
   2efa8:	f7ff fdc8 	bl	2eb3c <atomic_clear_bit>
	if (!dhkey) {
   2efac:	b3bc      	cbz	r4, 2f01e <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2efae:	2107      	movs	r1, #7
   2efb0:	f7ff fdc4 	bl	2eb3c <atomic_clear_bit>
   2efb4:	4623      	mov	r3, r4
   2efb6:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2efba:	f104 0120 	add.w	r1, r4, #32
   2efbe:	f853 0b04 	ldr.w	r0, [r3], #4
   2efc2:	428b      	cmp	r3, r1
   2efc4:	f842 0b04 	str.w	r0, [r2], #4
   2efc8:	d1f9      	bne.n	2efbe <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2efca:	210a      	movs	r1, #10
   2efcc:	4630      	mov	r0, r6
   2efce:	f7ff fd8e 	bl	2eaee <atomic_test_bit>
   2efd2:	b170      	cbz	r0, 2eff2 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2efd4:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2efd6:	4630      	mov	r0, r6
   2efd8:	f7ff fdf0 	bl	2ebbc <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2efdc:	2007      	movs	r0, #7
   2efde:	f7ef fc01 	bl	1e7e4 <smp_find>
		if (smp) {
   2efe2:	4604      	mov	r4, r0
   2efe4:	b1e8      	cbz	r0, 2f022 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2efe6:	f7ef fcbf 	bl	1e968 <smp_dhkey_generate>
			if (err) {
   2efea:	4601      	mov	r1, r0
   2efec:	b1c8      	cbz	r0, 2f022 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2efee:	4620      	mov	r0, r4
   2eff0:	e012      	b.n	2f018 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2eff2:	2110      	movs	r1, #16
   2eff4:	4630      	mov	r0, r6
   2eff6:	f7ff fd7a 	bl	2eaee <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2effa:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2effc:	2800      	cmp	r0, #0
   2effe:	d1ea      	bne.n	2efd6 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2f000:	4630      	mov	r0, r6
   2f002:	f7ff fd74 	bl	2eaee <atomic_test_bit>
   2f006:	2800      	cmp	r0, #0
   2f008:	d0e8      	beq.n	2efdc <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2f00a:	4628      	mov	r0, r5
   2f00c:	f7f0 f864 	bl	1f0d8 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2f010:	4601      	mov	r1, r0
   2f012:	2800      	cmp	r0, #0
   2f014:	d0e2      	beq.n	2efdc <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2f016:	4628      	mov	r0, r5
   2f018:	f7f0 fbf2 	bl	1f800 <smp_error>
   2f01c:	e7de      	b.n	2efdc <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2f01e:	210b      	movs	r1, #11
   2f020:	e7f9      	b.n	2f016 <bt_smp_dhkey_ready+0x82>
}
   2f022:	bd70      	pop	{r4, r5, r6, pc}

0002f024 <bt_smp_disconnected>:
{
   2f024:	b570      	push	{r4, r5, r6, lr}
   2f026:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2f028:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2f02c:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f030:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2f032:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   2f036:	f001 ffef 	bl	31018 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f03a:	2103      	movs	r1, #3
   2f03c:	4620      	mov	r0, r4
   2f03e:	f7ff fd56 	bl	2eaee <atomic_test_bit>
   2f042:	b1a0      	cbz	r0, 2f06e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2f044:	2108      	movs	r1, #8
   2f046:	4630      	mov	r0, r6
   2f048:	f7f0 fb5c 	bl	1f704 <smp_pairing_complete>
	if (keys) {
   2f04c:	b13d      	cbz	r5, 2f05e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2f04e:	89eb      	ldrh	r3, [r5, #14]
   2f050:	b113      	cbz	r3, 2f058 <bt_smp_disconnected+0x34>
   2f052:	7b6b      	ldrb	r3, [r5, #13]
   2f054:	079b      	lsls	r3, r3, #30
   2f056:	d502      	bpl.n	2f05e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2f058:	4628      	mov	r0, r5
   2f05a:	f000 f840 	bl	2f0de <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2f05e:	4630      	mov	r0, r6
}
   2f060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f064:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   2f068:	2100      	movs	r1, #0
   2f06a:	f002 bb8a 	b.w	31782 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2f06e:	2101      	movs	r1, #1
   2f070:	4620      	mov	r0, r4
   2f072:	f7ff fd3c 	bl	2eaee <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f076:	2800      	cmp	r0, #0
   2f078:	d1e4      	bne.n	2f044 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f07a:	210f      	movs	r1, #15
   2f07c:	4620      	mov	r0, r4
   2f07e:	f7ff fd36 	bl	2eaee <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2f082:	2800      	cmp	r0, #0
   2f084:	d1de      	bne.n	2f044 <bt_smp_disconnected+0x20>
   2f086:	e7e1      	b.n	2f04c <bt_smp_disconnected+0x28>

0002f088 <smp_ident_sent>:
{
   2f088:	b508      	push	{r3, lr}
	if (!err) {
   2f08a:	b99a      	cbnz	r2, 2f0b4 <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   2f08c:	7883      	ldrb	r3, [r0, #2]
   2f08e:	2b01      	cmp	r3, #1
   2f090:	d110      	bne.n	2f0b4 <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2f092:	2106      	movs	r1, #6
   2f094:	f7fe fdad 	bl	2dbf2 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2f098:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2f09c:	f023 0301 	bic.w	r3, r3, #1
   2f0a0:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2f0a4:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   2f0a8:	b921      	cbnz	r1, 2f0b4 <smp_ident_sent+0x2c>
}
   2f0aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2f0ae:	38ec      	subs	r0, #236	; 0xec
   2f0b0:	f7f0 bb28 	b.w	1f704 <smp_pairing_complete>
}
   2f0b4:	bd08      	pop	{r3, pc}

0002f0b6 <bt_keys_get_type>:
{
   2f0b6:	b570      	push	{r4, r5, r6, lr}
   2f0b8:	4604      	mov	r4, r0
   2f0ba:	460d      	mov	r5, r1
   2f0bc:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2f0be:	f7f1 f80f 	bl	200e0 <bt_keys_find>
	if (keys) {
   2f0c2:	b938      	cbnz	r0, 2f0d4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2f0c4:	4631      	mov	r1, r6
   2f0c6:	4628      	mov	r0, r5
   2f0c8:	f7f0 ffd4 	bl	20074 <bt_keys_get_addr>
	if (!keys) {
   2f0cc:	b110      	cbz	r0, 2f0d4 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
	__ASSERT_NO_MSG(keys != NULL);

	keys->keys |= type;
   2f0ce:	89c3      	ldrh	r3, [r0, #14]
   2f0d0:	431c      	orrs	r4, r3
   2f0d2:	81c4      	strh	r4, [r0, #14]
}
   2f0d4:	bd70      	pop	{r4, r5, r6, pc}

0002f0d6 <bt_keys_add_type>:
	keys->keys |= type;
   2f0d6:	89c3      	ldrh	r3, [r0, #14]
   2f0d8:	4319      	orrs	r1, r3
   2f0da:	81c1      	strh	r1, [r0, #14]
}
   2f0dc:	4770      	bx	lr

0002f0de <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2f0de:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2f0e0:	7a03      	ldrb	r3, [r0, #8]
{
   2f0e2:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2f0e4:	075b      	lsls	r3, r3, #29
   2f0e6:	d501      	bpl.n	2f0ec <bt_keys_clear+0xe>
		bt_id_del(keys);
   2f0e8:	f7eb fda6 	bl	1ac38 <bt_id_del>
   2f0ec:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   2f0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f0f2:	225c      	movs	r2, #92	; 0x5c
   2f0f4:	2100      	movs	r1, #0
   2f0f6:	f002 bb44 	b.w	31782 <memset>

0002f0fa <sys_memcpy_swap>:
	psrc += length - 1;
   2f0fa:	1e53      	subs	r3, r2, #1
   2f0fc:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2f0fe:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2f100:	f811 3901 	ldrb.w	r3, [r1], #-1
   2f104:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2f108:	4290      	cmp	r0, r2
   2f10a:	d1f9      	bne.n	2f100 <sys_memcpy_swap+0x6>
}
   2f10c:	4770      	bx	lr

0002f10e <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2f10e:	b510      	push	{r4, lr}
   2f110:	1e43      	subs	r3, r0, #1
   2f112:	f100 0210 	add.w	r2, r0, #16
   2f116:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2f118:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2f11c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2f120:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2f122:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2f124:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2f126:	d1f7      	bne.n	2f118 <sys_mem_swap.constprop.0+0xa>
	}
}
   2f128:	bd10      	pop	{r4, pc}

0002f12a <bt_crypto_aes_cmac>:
{
   2f12a:	b570      	push	{r4, r5, r6, lr}
   2f12c:	b0c2      	sub	sp, #264	; 0x108
   2f12e:	460d      	mov	r5, r1
   2f130:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2f132:	4601      	mov	r1, r0
   2f134:	aa16      	add	r2, sp, #88	; 0x58
   2f136:	4668      	mov	r0, sp
{
   2f138:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2f13a:	f7fc f849 	bl	2b1d0 <tc_cmac_setup>
   2f13e:	b918      	cbnz	r0, 2f148 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2f140:	f06f 0004 	mvn.w	r0, #4
}
   2f144:	b042      	add	sp, #264	; 0x108
   2f146:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2f148:	4632      	mov	r2, r6
   2f14a:	4629      	mov	r1, r5
   2f14c:	4668      	mov	r0, sp
   2f14e:	f7fc f86a 	bl	2b226 <tc_cmac_update>
   2f152:	2800      	cmp	r0, #0
   2f154:	d0f4      	beq.n	2f140 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2f156:	4669      	mov	r1, sp
   2f158:	4620      	mov	r0, r4
   2f15a:	f7fc f8ce 	bl	2b2fa <tc_cmac_final>
   2f15e:	2800      	cmp	r0, #0
   2f160:	d0ee      	beq.n	2f140 <bt_crypto_aes_cmac+0x16>
	return 0;
   2f162:	2000      	movs	r0, #0
   2f164:	e7ee      	b.n	2f144 <bt_crypto_aes_cmac+0x1a>

0002f166 <bt_crypto_f4>:
{
   2f166:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f168:	460e      	mov	r6, r1
   2f16a:	4614      	mov	r4, r2
   2f16c:	461d      	mov	r5, r3
   2f16e:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2f170:	4601      	mov	r1, r0
   2f172:	2220      	movs	r2, #32
   2f174:	a805      	add	r0, sp, #20
{
   2f176:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2f178:	f7ff ffbf 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2f17c:	2220      	movs	r2, #32
   2f17e:	4631      	mov	r1, r6
   2f180:	a80d      	add	r0, sp, #52	; 0x34
   2f182:	f7ff ffba 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2f186:	4621      	mov	r1, r4
   2f188:	2210      	movs	r2, #16
   2f18a:	a801      	add	r0, sp, #4
	m[64] = z;
   2f18c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2f190:	f7ff ffb3 	bl	2f0fa <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2f194:	463b      	mov	r3, r7
   2f196:	2241      	movs	r2, #65	; 0x41
   2f198:	a905      	add	r1, sp, #20
   2f19a:	a801      	add	r0, sp, #4
   2f19c:	f7ff ffc5 	bl	2f12a <bt_crypto_aes_cmac>
	if (err) {
   2f1a0:	4604      	mov	r4, r0
   2f1a2:	b910      	cbnz	r0, 2f1aa <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2f1a4:	4638      	mov	r0, r7
   2f1a6:	f7ff ffb2 	bl	2f10e <sys_mem_swap.constprop.0>
}
   2f1aa:	4620      	mov	r0, r4
   2f1ac:	b017      	add	sp, #92	; 0x5c
   2f1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f1b0 <bt_crypto_f6>:
{
   2f1b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f1b4:	4616      	mov	r6, r2
   2f1b6:	461d      	mov	r5, r3
   2f1b8:	b097      	sub	sp, #92	; 0x5c
   2f1ba:	4604      	mov	r4, r0
   2f1bc:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2f1c0:	2210      	movs	r2, #16
   2f1c2:	a805      	add	r0, sp, #20
{
   2f1c4:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2f1c6:	f7ff ff98 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2f1ca:	2210      	movs	r2, #16
   2f1cc:	4631      	mov	r1, r6
   2f1ce:	a809      	add	r0, sp, #36	; 0x24
   2f1d0:	f7ff ff93 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2f1d4:	2210      	movs	r2, #16
   2f1d6:	4629      	mov	r1, r5
   2f1d8:	a80d      	add	r0, sp, #52	; 0x34
   2f1da:	f7ff ff8e 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2f1de:	2203      	movs	r2, #3
   2f1e0:	991e      	ldr	r1, [sp, #120]	; 0x78
   2f1e2:	a811      	add	r0, sp, #68	; 0x44
   2f1e4:	f7ff ff89 	bl	2f0fa <sys_memcpy_swap>
	m[51] = a1->type;
   2f1e8:	4649      	mov	r1, r9
   2f1ea:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   2f1ee:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2f1f2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2f1f6:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f1f8:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2f1fa:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f1fc:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   2f1fe:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f202:	f7ff ff7a 	bl	2f0fa <sys_memcpy_swap>
	m[58] = a2->type;
   2f206:	4641      	mov	r1, r8
   2f208:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f20c:	2206      	movs	r2, #6
	m[58] = a2->type;
   2f20e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2f212:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f216:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2f21a:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2f21e:	888b      	ldrh	r3, [r1, #4]
   2f220:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f224:	f7ff ff69 	bl	2f0fa <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2f228:	4621      	mov	r1, r4
   2f22a:	2210      	movs	r2, #16
   2f22c:	a801      	add	r0, sp, #4
   2f22e:	f7ff ff64 	bl	2f0fa <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2f232:	463b      	mov	r3, r7
   2f234:	2241      	movs	r2, #65	; 0x41
   2f236:	a905      	add	r1, sp, #20
   2f238:	a801      	add	r0, sp, #4
   2f23a:	f7ff ff76 	bl	2f12a <bt_crypto_aes_cmac>
	if (err) {
   2f23e:	4604      	mov	r4, r0
   2f240:	b910      	cbnz	r0, 2f248 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2f242:	4638      	mov	r0, r7
   2f244:	f7ff ff63 	bl	2f10e <sys_mem_swap.constprop.0>
}
   2f248:	4620      	mov	r0, r4
   2f24a:	b017      	add	sp, #92	; 0x5c
   2f24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002f250 <fixed_data_unref>:
}
   2f250:	4770      	bx	lr

0002f252 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2f252:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2f254:	6849      	ldr	r1, [r1, #4]
   2f256:	6809      	ldr	r1, [r1, #0]
   2f258:	f7f1 b890 	b.w	2037c <net_buf_alloc_len>

0002f25c <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2f25c:	f7f6 bb8e 	b.w	2597c <z_impl_k_queue_get>

0002f260 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2f260:	6883      	ldr	r3, [r0, #8]
   2f262:	440b      	add	r3, r1
   2f264:	6003      	str	r3, [r0, #0]
}
   2f266:	4770      	bx	lr

0002f268 <net_buf_slist_put>:
	__asm__ volatile(
   2f268:	f04f 0320 	mov.w	r3, #32
   2f26c:	f3ef 8211 	mrs	r2, BASEPRI
   2f270:	f383 8812 	msr	BASEPRI_MAX, r3
   2f274:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2f278:	2300      	movs	r3, #0
   2f27a:	600b      	str	r3, [r1, #0]
	return list->tail;
   2f27c:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2f27e:	b933      	cbnz	r3, 2f28e <net_buf_slist_put+0x26>
	list->head = node;
   2f280:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   2f284:	f382 8811 	msr	BASEPRI, r2
   2f288:	f3bf 8f6f 	isb	sy
}
   2f28c:	4770      	bx	lr
	parent->next = child;
   2f28e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2f290:	6041      	str	r1, [r0, #4]
}
   2f292:	e7f7      	b.n	2f284 <net_buf_slist_put+0x1c>

0002f294 <net_buf_slist_get>:
{
   2f294:	4603      	mov	r3, r0
   2f296:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f298:	f04f 0220 	mov.w	r2, #32
   2f29c:	f3ef 8111 	mrs	r1, BASEPRI
   2f2a0:	f382 8812 	msr	BASEPRI_MAX, r2
   2f2a4:	f3bf 8f6f 	isb	sy
	return list->head;
   2f2a8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2f2aa:	b128      	cbz	r0, 2f2b8 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2f2ac:	685c      	ldr	r4, [r3, #4]
	return node->next;
   2f2ae:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2f2b0:	42a0      	cmp	r0, r4
	list->head = node;
   2f2b2:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2f2b4:	bf08      	it	eq
   2f2b6:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2f2b8:	f381 8811 	msr	BASEPRI, r1
   2f2bc:	f3bf 8f6f 	isb	sy
}
   2f2c0:	bd10      	pop	{r4, pc}

0002f2c2 <net_buf_put>:
	k_fifo_put(fifo, buf);
   2f2c2:	f001 bdc0 	b.w	30e46 <k_queue_append>

0002f2c6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2f2c6:	7a02      	ldrb	r2, [r0, #8]
   2f2c8:	3201      	adds	r2, #1
   2f2ca:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2f2cc:	4770      	bx	lr

0002f2ce <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2f2ce:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2f2d0:	4618      	mov	r0, r3
   2f2d2:	685b      	ldr	r3, [r3, #4]
   2f2d4:	2b00      	cmp	r3, #0
   2f2d6:	d1fb      	bne.n	2f2d0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2f2d8:	4770      	bx	lr

0002f2da <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2f2da:	6842      	ldr	r2, [r0, #4]
{
   2f2dc:	b510      	push	{r4, lr}
	if (parent->frags) {
   2f2de:	b12a      	cbz	r2, 2f2ec <net_buf_frag_insert+0x12>
   2f2e0:	460b      	mov	r3, r1
	while (buf->frags) {
   2f2e2:	461c      	mov	r4, r3
   2f2e4:	685b      	ldr	r3, [r3, #4]
   2f2e6:	2b00      	cmp	r3, #0
   2f2e8:	d1fb      	bne.n	2f2e2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2f2ea:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2f2ec:	6041      	str	r1, [r0, #4]
}
   2f2ee:	bd10      	pop	{r4, pc}

0002f2f0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2f2f0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2f2f2:	4604      	mov	r4, r0
   2f2f4:	b920      	cbnz	r0, 2f300 <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   2f2f6:	4608      	mov	r0, r1
	buf->ref++;
   2f2f8:	7a0b      	ldrb	r3, [r1, #8]
   2f2fa:	3301      	adds	r3, #1
   2f2fc:	720b      	strb	r3, [r1, #8]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2f2fe:	bd10      	pop	{r4, pc}
   2f300:	4603      	mov	r3, r0
	while (buf->frags) {
   2f302:	4618      	mov	r0, r3
   2f304:	685b      	ldr	r3, [r3, #4]
   2f306:	2b00      	cmp	r3, #0
   2f308:	d1fb      	bne.n	2f302 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2f30a:	f7ff ffe6 	bl	2f2da <net_buf_frag_insert>
   2f30e:	4620      	mov	r0, r4
   2f310:	e7f5      	b.n	2f2fe <net_buf_frag_add+0xe>

0002f312 <net_buf_simple_add>:
	return buf->data + buf->len;
   2f312:	8883      	ldrh	r3, [r0, #4]
   2f314:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2f316:	4419      	add	r1, r3
   2f318:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2f31a:	18d0      	adds	r0, r2, r3
   2f31c:	4770      	bx	lr

0002f31e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2f31e:	b430      	push	{r4, r5}
   2f320:	8884      	ldrh	r4, [r0, #4]
   2f322:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2f324:	18a3      	adds	r3, r4, r2
   2f326:	8083      	strh	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f328:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   2f32a:	bc30      	pop	{r4, r5}
   2f32c:	f002 b9ef 	b.w	3170e <memcpy>

0002f330 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2f330:	b510      	push	{r4, lr}
   2f332:	8883      	ldrh	r3, [r0, #4]
   2f334:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   2f336:	1c5c      	adds	r4, r3, #1
   2f338:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2f33a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2f33c:	18d0      	adds	r0, r2, r3
   2f33e:	bd10      	pop	{r4, pc}

0002f340 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2f340:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2f342:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2f344:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2f346:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2f348:	4411      	add	r1, r2
	buf->data -= len;
   2f34a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2f34c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2f34e:	4770      	bx	lr

0002f350 <net_buf_simple_push_u8>:
	buf->data -= len;
   2f350:	6802      	ldr	r2, [r0, #0]
   2f352:	1e53      	subs	r3, r2, #1
   2f354:	6003      	str	r3, [r0, #0]
	buf->len += len;
   2f356:	8883      	ldrh	r3, [r0, #4]
   2f358:	3301      	adds	r3, #1
   2f35a:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   2f35c:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   2f360:	4770      	bx	lr

0002f362 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2f362:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2f364:	8882      	ldrh	r2, [r0, #4]
   2f366:	1a52      	subs	r2, r2, r1
   2f368:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2f36a:	6800      	ldr	r0, [r0, #0]
   2f36c:	4408      	add	r0, r1
   2f36e:	6018      	str	r0, [r3, #0]
}
   2f370:	4770      	bx	lr

0002f372 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2f372:	4603      	mov	r3, r0
	void *data = buf->data;
   2f374:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2f376:	889a      	ldrh	r2, [r3, #4]
   2f378:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2f37a:	4401      	add	r1, r0
	buf->len -= len;
   2f37c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2f37e:	6019      	str	r1, [r3, #0]

	return data;
}
   2f380:	4770      	bx	lr

0002f382 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2f382:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2f384:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2f386:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2f388:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2f38a:	f7ff ffea 	bl	2f362 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2f38e:	4620      	mov	r0, r4
   2f390:	bd10      	pop	{r4, pc}

0002f392 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2f392:	6802      	ldr	r2, [r0, #0]
   2f394:	6880      	ldr	r0, [r0, #8]
}
   2f396:	1a10      	subs	r0, r2, r0
   2f398:	4770      	bx	lr

0002f39a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2f39a:	8883      	ldrh	r3, [r0, #4]
   2f39c:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2f39e:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2f3a0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2f3a2:	6803      	ldr	r3, [r0, #0]
   2f3a4:	1a5b      	subs	r3, r3, r1
}
   2f3a6:	1ad0      	subs	r0, r2, r3
   2f3a8:	4770      	bx	lr

0002f3aa <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f3aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f3ac:	ab0b      	add	r3, sp, #44	; 0x2c
   2f3ae:	9305      	str	r3, [sp, #20]
   2f3b0:	9303      	str	r3, [sp, #12]
   2f3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f3b4:	2201      	movs	r2, #1
   2f3b6:	9302      	str	r3, [sp, #8]
   2f3b8:	2300      	movs	r3, #0
   2f3ba:	4618      	mov	r0, r3
   2f3bc:	e9cd 3300 	strd	r3, r3, [sp]
   2f3c0:	f7e0 f834 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2f3c4:	b007      	add	sp, #28
   2f3c6:	f85d fb04 	ldr.w	pc, [sp], #4

0002f3ca <adc_context_on_timer_expired>:
{
   2f3ca:	b410      	push	{r4}
   2f3cc:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2f3ce:	3808      	subs	r0, #8
   2f3d0:	e8d0 2fef 	ldaex	r2, [r0]
   2f3d4:	1c51      	adds	r1, r2, #1
   2f3d6:	e8c0 1fe4 	stlex	r4, r1, [r0]
   2f3da:	2c00      	cmp	r4, #0
   2f3dc:	d1f8      	bne.n	2f3d0 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2f3de:	b912      	cbnz	r2, 2f3e6 <adc_context_on_timer_expired+0x1c>
}
   2f3e0:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2f3e2:	f7f1 b905 	b.w	205f0 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2f3e6:	f06f 020f 	mvn.w	r2, #15
}
   2f3ea:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2f3ec:	669a      	str	r2, [r3, #104]	; 0x68
}
   2f3ee:	4770      	bx	lr

0002f3f0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2f3f0:	220c      	movs	r2, #12
   2f3f2:	6903      	ldr	r3, [r0, #16]
   2f3f4:	b2c9      	uxtb	r1, r1
   2f3f6:	fb01 3302 	mla	r3, r1, r2, r3
   2f3fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   2f3fc:	f000 0007 	and.w	r0, r0, #7
   2f400:	4770      	bx	lr

0002f402 <set_on_state>:
	__asm__ volatile(
   2f402:	f04f 0320 	mov.w	r3, #32
   2f406:	f3ef 8211 	mrs	r2, BASEPRI
   2f40a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f40e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2f412:	6803      	ldr	r3, [r0, #0]
   2f414:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f418:	f043 0302 	orr.w	r3, r3, #2
   2f41c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2f41e:	f382 8811 	msr	BASEPRI, r2
   2f422:	f3bf 8f6f 	isb	sy
}
   2f426:	4770      	bx	lr

0002f428 <stop>:
{
   2f428:	b570      	push	{r4, r5, r6, lr}
   2f42a:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2f42c:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2f42e:	f04f 0420 	mov.w	r4, #32
   2f432:	f3ef 8511 	mrs	r5, BASEPRI
   2f436:	f384 8812 	msr	BASEPRI_MAX, r4
   2f43a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f43e:	260c      	movs	r6, #12
   2f440:	fb06 3401 	mla	r4, r6, r1, r3
   2f444:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2f446:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2f44a:	d008      	beq.n	2f45e <stop+0x36>
   2f44c:	42a2      	cmp	r2, r4
   2f44e:	d006      	beq.n	2f45e <stop+0x36>
	__asm__ volatile(
   2f450:	f385 8811 	msr	BASEPRI, r5
   2f454:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2f458:	f04f 30ff 	mov.w	r0, #4294967295
}
   2f45c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2f45e:	2201      	movs	r2, #1
   2f460:	4371      	muls	r1, r6
   2f462:	440b      	add	r3, r1
   2f464:	679a      	str	r2, [r3, #120]	; 0x78
   2f466:	f385 8811 	msr	BASEPRI, r5
   2f46a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2f46e:	6843      	ldr	r3, [r0, #4]
   2f470:	440b      	add	r3, r1
   2f472:	685b      	ldr	r3, [r3, #4]
   2f474:	4798      	blx	r3
	return 0;
   2f476:	2000      	movs	r0, #0
   2f478:	e7f0      	b.n	2f45c <stop+0x34>

0002f47a <api_stop>:
	return stop(dev, subsys, CTX_API);
   2f47a:	2280      	movs	r2, #128	; 0x80
   2f47c:	f7ff bfd4 	b.w	2f428 <stop>

0002f480 <async_start>:
{
   2f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f482:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2f484:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2f486:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2f488:	f04f 0520 	mov.w	r5, #32
   2f48c:	f3ef 8611 	mrs	r6, BASEPRI
   2f490:	f385 8812 	msr	BASEPRI_MAX, r5
   2f494:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f498:	250c      	movs	r5, #12
   2f49a:	4369      	muls	r1, r5
   2f49c:	440c      	add	r4, r1
   2f49e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2f4a0:	f005 0c07 	and.w	ip, r5, #7
   2f4a4:	f1bc 0f01 	cmp.w	ip, #1
   2f4a8:	d10b      	bne.n	2f4c2 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2f4aa:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   2f4ac:	f386 8811 	msr	BASEPRI, r6
   2f4b0:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2f4b4:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   2f4b8:	6843      	ldr	r3, [r0, #4]
   2f4ba:	585b      	ldr	r3, [r3, r1]
   2f4bc:	4798      	blx	r3
	return 0;
   2f4be:	2000      	movs	r0, #0
}
   2f4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2f4c2:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2f4c6:	42af      	cmp	r7, r5
   2f4c8:	f386 8811 	msr	BASEPRI, r6
   2f4cc:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2f4d0:	bf0c      	ite	eq
   2f4d2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2f4d6:	f04f 30ff 	movne.w	r0, #4294967295
   2f4da:	e7f1      	b.n	2f4c0 <async_start+0x40>

0002f4dc <api_start>:
{
   2f4dc:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2f4de:	2480      	movs	r4, #128	; 0x80
   2f4e0:	9400      	str	r4, [sp, #0]
   2f4e2:	f7ff ffcd 	bl	2f480 <async_start>
}
   2f4e6:	b002      	add	sp, #8
   2f4e8:	bd10      	pop	{r4, pc}

0002f4ea <onoff_started_callback>:
{
   2f4ea:	b410      	push	{r4}
	notify(mgr, 0);
   2f4ec:	241c      	movs	r4, #28
	return &data->mgr[type];
   2f4ee:	6900      	ldr	r0, [r0, #16]
   2f4f0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2f4f2:	fb03 0004 	mla	r0, r3, r4, r0
   2f4f6:	2100      	movs	r1, #0
}
   2f4f8:	bc10      	pop	{r4}
	notify(mgr, 0);
   2f4fa:	4710      	bx	r2

0002f4fc <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2f4fc:	2003      	movs	r0, #3
   2f4fe:	f7f4 b857 	b.w	235b0 <nrfx_clock_start>

0002f502 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2f502:	2002      	movs	r0, #2
   2f504:	f7f4 b854 	b.w	235b0 <nrfx_clock_start>

0002f508 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2f508:	2000      	movs	r0, #0
   2f50a:	f7f4 b851 	b.w	235b0 <nrfx_clock_start>

0002f50e <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2f50e:	2003      	movs	r0, #3
   2f510:	f000 bd10 	b.w	2ff34 <nrfx_clock_stop>

0002f514 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2f514:	2002      	movs	r0, #2
   2f516:	f000 bd0d 	b.w	2ff34 <nrfx_clock_stop>

0002f51a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2f51a:	2000      	movs	r0, #0
   2f51c:	f000 bd0a 	b.w	2ff34 <nrfx_clock_stop>

0002f520 <blocking_start_callback>:
{
   2f520:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2f522:	f7f6 ba5f 	b.w	259e4 <z_impl_k_sem_give>

0002f526 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f526:	6843      	ldr	r3, [r0, #4]
}
   2f528:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f52a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2f52c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2f52e:	600b      	str	r3, [r1, #0]
}
   2f530:	4770      	bx	lr

0002f532 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f532:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2f534:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f538:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2f53a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2f53e:	6098      	str	r0, [r3, #8]
}
   2f540:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2f542:	60d9      	str	r1, [r3, #12]
   2f544:	4770      	bx	lr

0002f546 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f546:	6843      	ldr	r3, [r0, #4]
}
   2f548:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f54a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2f54c:	6099      	str	r1, [r3, #8]
}
   2f54e:	4770      	bx	lr

0002f550 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f550:	6843      	ldr	r3, [r0, #4]
}
   2f552:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f554:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2f556:	60d9      	str	r1, [r3, #12]
}
   2f558:	4770      	bx	lr

0002f55a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f55a:	6843      	ldr	r3, [r0, #4]
   2f55c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2f55e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2f560:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2f564:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2f566:	6090      	str	r0, [r2, #8]
}
   2f568:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2f56a:	60d3      	str	r3, [r2, #12]
   2f56c:	4770      	bx	lr

0002f56e <gpio_nrfx_manage_callback>:
{
   2f56e:	b510      	push	{r4, lr}
	return port->data;
   2f570:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2f572:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2f574:	b1f8      	cbz	r0, 2f5b6 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f576:	4288      	cmp	r0, r1
   2f578:	d119      	bne.n	2f5ae <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2f57a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2f57c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f57e:	42a1      	cmp	r1, r4
	list->head = node;
   2f580:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2f582:	d100      	bne.n	2f586 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2f584:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2f586:	2000      	movs	r0, #0
   2f588:	6008      	str	r0, [r1, #0]
	if (set) {
   2f58a:	b12a      	cbz	r2, 2f598 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2f58c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2f58e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f590:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2f592:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f594:	b902      	cbnz	r2, 2f598 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2f596:	6099      	str	r1, [r3, #8]
	return 0;
   2f598:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2f59a:	e010      	b.n	2f5be <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f59c:	4281      	cmp	r1, r0
   2f59e:	d106      	bne.n	2f5ae <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2f5a0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2f5a2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f5a4:	6898      	ldr	r0, [r3, #8]
   2f5a6:	4281      	cmp	r1, r0
   2f5a8:	d1ed      	bne.n	2f586 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2f5aa:	609c      	str	r4, [r3, #8]
}
   2f5ac:	e7eb      	b.n	2f586 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2f5ae:	4604      	mov	r4, r0
   2f5b0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f5b2:	2800      	cmp	r0, #0
   2f5b4:	d1f2      	bne.n	2f59c <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2f5b6:	2a00      	cmp	r2, #0
   2f5b8:	d1e8      	bne.n	2f58c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   2f5ba:	f06f 0015 	mvn.w	r0, #21
}
   2f5be:	bd10      	pop	{r4, pc}

0002f5c0 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2f5c0:	2200      	movs	r2, #0
   2f5c2:	2101      	movs	r1, #1
   2f5c4:	200a      	movs	r0, #10
   2f5c6:	f7e1 bdab 	b.w	11120 <z_arm_irq_priority_set>

0002f5ca <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2f5ca:	b510      	push	{r4, lr}
	while (*count) {
   2f5cc:	680b      	ldr	r3, [r1, #0]
   2f5ce:	b913      	cbnz	r3, 2f5d6 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2f5d0:	4618      	mov	r0, r3
	*buf_len = 0;
   2f5d2:	6013      	str	r3, [r2, #0]
	return NULL;
   2f5d4:	e005      	b.n	2f5e2 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2f5d6:	6803      	ldr	r3, [r0, #0]
   2f5d8:	685c      	ldr	r4, [r3, #4]
   2f5da:	b11c      	cbz	r4, 2f5e4 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2f5dc:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2f5de:	6803      	ldr	r3, [r0, #0]
   2f5e0:	6818      	ldr	r0, [r3, #0]
}
   2f5e2:	bd10      	pop	{r4, pc}
		++(*current);
   2f5e4:	3308      	adds	r3, #8
   2f5e6:	6003      	str	r3, [r0, #0]
		--(*count);
   2f5e8:	680b      	ldr	r3, [r1, #0]
   2f5ea:	3b01      	subs	r3, #1
   2f5ec:	600b      	str	r3, [r1, #0]
   2f5ee:	e7ed      	b.n	2f5cc <spi_context_get_next_buf.constprop.0+0x2>

0002f5f0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f5f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f5f2:	ab0b      	add	r3, sp, #44	; 0x2c
   2f5f4:	9305      	str	r3, [sp, #20]
   2f5f6:	9303      	str	r3, [sp, #12]
   2f5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f5fa:	2201      	movs	r2, #1
   2f5fc:	9302      	str	r3, [sp, #8]
   2f5fe:	2300      	movs	r3, #0
   2f600:	4618      	mov	r0, r3
   2f602:	e9cd 3300 	strd	r3, r3, [sp]
   2f606:	f7df ff11 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2f60a:	b007      	add	sp, #28
   2f60c:	f85d fb04 	ldr.w	pc, [sp], #4

0002f610 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   2f610:	4603      	mov	r3, r0
   2f612:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2f614:	7919      	ldrb	r1, [r3, #4]
   2f616:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   2f618:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2f61a:	fa03 f101 	lsl.w	r1, r3, r1
   2f61e:	6903      	ldr	r3, [r0, #16]
   2f620:	681b      	ldr	r3, [r3, #0]
   2f622:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2f624:	bf18      	it	ne
   2f626:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2f62a:	b112      	cbz	r2, 2f632 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   2f62c:	6883      	ldr	r3, [r0, #8]
   2f62e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2f630:	4718      	bx	r3
   2f632:	6883      	ldr	r3, [r0, #8]
   2f634:	691b      	ldr	r3, [r3, #16]
   2f636:	e7fb      	b.n	2f630 <gpio_pin_set_dt.isra.0+0x20>

0002f638 <_spi_context_cs_control>:
{
   2f638:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2f63a:	6803      	ldr	r3, [r0, #0]
{
   2f63c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2f63e:	b1e3      	cbz	r3, 2f67a <_spi_context_cs_control+0x42>
   2f640:	6898      	ldr	r0, [r3, #8]
   2f642:	b1d0      	cbz	r0, 2f67a <_spi_context_cs_control+0x42>
   2f644:	6805      	ldr	r5, [r0, #0]
   2f646:	b1c5      	cbz	r5, 2f67a <_spi_context_cs_control+0x42>
		if (on) {
   2f648:	b149      	cbz	r1, 2f65e <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2f64a:	2101      	movs	r1, #1
   2f64c:	f7ff ffe0 	bl	2f610 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2f650:	6823      	ldr	r3, [r4, #0]
   2f652:	689b      	ldr	r3, [r3, #8]
   2f654:	6898      	ldr	r0, [r3, #8]
}
   2f656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2f65a:	f001 be80 	b.w	3135e <z_impl_k_busy_wait>
			if (!force_off &&
   2f65e:	b912      	cbnz	r2, 2f666 <_spi_context_cs_control+0x2e>
   2f660:	889b      	ldrh	r3, [r3, #4]
   2f662:	04db      	lsls	r3, r3, #19
   2f664:	d409      	bmi.n	2f67a <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2f666:	6880      	ldr	r0, [r0, #8]
   2f668:	f001 fe79 	bl	3135e <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2f66c:	6823      	ldr	r3, [r4, #0]
   2f66e:	2100      	movs	r1, #0
   2f670:	6898      	ldr	r0, [r3, #8]
}
   2f672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2f676:	f7ff bfcb 	b.w	2f610 <gpio_pin_set_dt.isra.0>
}
   2f67a:	bd38      	pop	{r3, r4, r5, pc}

0002f67c <spi_context_unlock_unconditionally>:
{
   2f67c:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2f67e:	2201      	movs	r2, #1
   2f680:	2100      	movs	r1, #0
{
   2f682:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2f684:	f7ff ffd8 	bl	2f638 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2f688:	69a3      	ldr	r3, [r4, #24]
   2f68a:	b933      	cbnz	r3, 2f69a <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2f68c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2f68e:	f104 0010 	add.w	r0, r4, #16
}
   2f692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f696:	f7f6 b9a5 	b.w	259e4 <z_impl_k_sem_give>
   2f69a:	bd10      	pop	{r4, pc}

0002f69c <spi_nrfx_release>:
{
   2f69c:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2f69e:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2f6a0:	6803      	ldr	r3, [r0, #0]
   2f6a2:	428b      	cmp	r3, r1
   2f6a4:	d106      	bne.n	2f6b4 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2f6a6:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2f6aa:	b934      	cbnz	r4, 2f6ba <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2f6ac:	f7ff ffe6 	bl	2f67c <spi_context_unlock_unconditionally>
	return 0;
   2f6b0:	4620      	mov	r0, r4
}
   2f6b2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2f6b4:	f06f 0015 	mvn.w	r0, #21
   2f6b8:	e7fb      	b.n	2f6b2 <spi_nrfx_release+0x16>
		return -EBUSY;
   2f6ba:	f06f 000f 	mvn.w	r0, #15
   2f6be:	e7f8      	b.n	2f6b2 <spi_nrfx_release+0x16>

0002f6c0 <k_sem_give>:
   2f6c0:	f7f6 b990 	b.w	259e4 <z_impl_k_sem_give>

0002f6c4 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2f6c4:	b918      	cbnz	r0, 2f6ce <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2f6c6:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2f6ca:	f7ff bff9 	b.w	2f6c0 <k_sem_give>
}
   2f6ce:	4770      	bx	lr

0002f6d0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f6d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f6d2:	ab0b      	add	r3, sp, #44	; 0x2c
   2f6d4:	9305      	str	r3, [sp, #20]
   2f6d6:	9303      	str	r3, [sp, #12]
   2f6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f6da:	9302      	str	r3, [sp, #8]
   2f6dc:	2300      	movs	r3, #0
   2f6de:	4618      	mov	r0, r3
   2f6e0:	e9cd 3300 	strd	r3, r3, [sp]
   2f6e4:	f7df fea2 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2f6e8:	b007      	add	sp, #28
   2f6ea:	f85d fb04 	ldr.w	pc, [sp], #4

0002f6ee <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2f6ee:	f04f 32ff 	mov.w	r2, #4294967295
   2f6f2:	f04f 33ff 	mov.w	r3, #4294967295
   2f6f6:	3018      	adds	r0, #24
   2f6f8:	f7f6 b99a 	b.w	25a30 <z_impl_k_sem_take>

0002f6fc <qspi_trans_lock.isra.0>:
   2f6fc:	f04f 32ff 	mov.w	r2, #4294967295
   2f700:	f04f 33ff 	mov.w	r3, #4294967295
   2f704:	f7f6 b994 	b.w	25a30 <z_impl_k_sem_take>

0002f708 <qspi_nor_write_protection_set>:
{
   2f708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2f70a:	2200      	movs	r2, #0
   2f70c:	4291      	cmp	r1, r2
   2f70e:	bf0c      	ite	eq
   2f710:	2306      	moveq	r3, #6
   2f712:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2f714:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2f716:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2f71a:	9203      	str	r2, [sp, #12]
   2f71c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2f720:	f7f1 ff5e 	bl	215e0 <qspi_send_cmd>
		ret = -EIO;
   2f724:	2800      	cmp	r0, #0
}
   2f726:	bf18      	it	ne
   2f728:	f06f 0004 	mvnne.w	r0, #4
   2f72c:	b005      	add	sp, #20
   2f72e:	f85d fb04 	ldr.w	pc, [sp], #4

0002f732 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2f732:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2f734:	23ff      	movs	r3, #255	; 0xff
   2f736:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2f73a:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2f73e:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2f740:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2f742:	2301      	movs	r3, #1
   2f744:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2f748:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2f74a:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2f74c:	f88d 300c 	strb.w	r3, [sp, #12]
   2f750:	ab01      	add	r3, sp, #4
   2f752:	9204      	str	r2, [sp, #16]
   2f754:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2f756:	f7f1 ff43 	bl	215e0 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2f75a:	2800      	cmp	r0, #0
   2f75c:	bfa8      	it	ge
   2f75e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2f762:	b007      	add	sp, #28
   2f764:	f85d fb04 	ldr.w	pc, [sp], #4

0002f768 <is_regular_addr_valid>:
{
   2f768:	b538      	push	{r3, r4, r5, lr}
   2f76a:	4605      	mov	r5, r0
   2f76c:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2f76e:	f000 fc3b 	bl	2ffe8 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2f772:	2d00      	cmp	r5, #0
   2f774:	db07      	blt.n	2f786 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2f776:	42a8      	cmp	r0, r5
   2f778:	d905      	bls.n	2f786 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2f77a:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2f77c:	4284      	cmp	r4, r0
   2f77e:	bf8c      	ite	hi
   2f780:	2000      	movhi	r0, #0
   2f782:	2001      	movls	r0, #1
}
   2f784:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2f786:	2000      	movs	r0, #0
   2f788:	e7fc      	b.n	2f784 <is_regular_addr_valid+0x1c>

0002f78a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f78a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f78c:	ab0b      	add	r3, sp, #44	; 0x2c
   2f78e:	9305      	str	r3, [sp, #20]
   2f790:	9303      	str	r3, [sp, #12]
   2f792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f794:	2201      	movs	r2, #1
   2f796:	9302      	str	r3, [sp, #8]
   2f798:	2300      	movs	r3, #0
   2f79a:	4618      	mov	r0, r3
   2f79c:	e9cd 3300 	strd	r3, r3, [sp]
   2f7a0:	f7df fe44 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2f7a4:	b007      	add	sp, #28
   2f7a6:	f85d fb04 	ldr.w	pc, [sp], #4

0002f7aa <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2f7aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f7ac:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2f7ae:	2300      	movs	r3, #0
{
   2f7b0:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2f7b2:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2f7b4:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2f7b6:	60a3      	str	r3, [r4, #8]
{
   2f7b8:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2f7ba:	6913      	ldr	r3, [r2, #16]
   2f7bc:	4669      	mov	r1, sp
   2f7be:	aa01      	add	r2, sp, #4
   2f7c0:	4798      	blx	r3

	while (layout_size--) {
   2f7c2:	9b01      	ldr	r3, [sp, #4]
   2f7c4:	1e5a      	subs	r2, r3, #1
   2f7c6:	9201      	str	r2, [sp, #4]
   2f7c8:	b91b      	cbnz	r3, 2f7d2 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2f7ca:	f06f 0015 	mvn.w	r0, #21
}
   2f7ce:	b003      	add	sp, #12
   2f7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2f7d2:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2f7d4:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2f7d6:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2f7d8:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2f7da:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2f7dc:	b985      	cbnz	r5, 2f800 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2f7de:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2f7e0:	f8d0 c000 	ldr.w	ip, [r0]
   2f7e4:	4563      	cmp	r3, ip
   2f7e6:	bf28      	it	cs
   2f7e8:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2f7ea:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2f7ee:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2f7f0:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2f7f2:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2f7f4:	6802      	ldr	r2, [r0, #0]
   2f7f6:	429a      	cmp	r2, r3
   2f7f8:	d806      	bhi.n	2f808 <flash_get_page_info+0x5e>
		layout++;
   2f7fa:	3008      	adds	r0, #8
   2f7fc:	9000      	str	r0, [sp, #0]
   2f7fe:	e7e0      	b.n	2f7c2 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2f800:	1a6b      	subs	r3, r5, r1
   2f802:	fbb3 f3f7 	udiv	r3, r3, r7
   2f806:	e7eb      	b.n	2f7e0 <flash_get_page_info+0x36>
			return 0;
   2f808:	2000      	movs	r0, #0
   2f80a:	e7e0      	b.n	2f7ce <flash_get_page_info+0x24>

0002f80c <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2f80c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2f80e:	2200      	movs	r2, #0
   2f810:	f7ff bfcb 	b.w	2f7aa <flash_get_page_info>

0002f814 <uarte_nrfx_config_get>:
{
   2f814:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2f816:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2f818:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2f81c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2f820:	2000      	movs	r0, #0
   2f822:	4770      	bx	lr

0002f824 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2f824:	6843      	ldr	r3, [r0, #4]
   2f826:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f828:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f82c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2f830:	4770      	bx	lr

0002f832 <tx_start>:
{
   2f832:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2f834:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2f836:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f838:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f83c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f840:	2200      	movs	r2, #0
   2f842:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2f846:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2f84a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2f84e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2f852:	6862      	ldr	r2, [r4, #4]
   2f854:	06d2      	lsls	r2, r2, #27
   2f856:	d511      	bpl.n	2f87c <tx_start+0x4a>
	if (data->async) {
   2f858:	6902      	ldr	r2, [r0, #16]
   2f85a:	68d2      	ldr	r2, [r2, #12]
   2f85c:	b12a      	cbz	r2, 2f86a <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2f85e:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2f862:	f041 0101 	orr.w	r1, r1, #1
   2f866:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2f86a:	2108      	movs	r1, #8
	return config->uarte_regs;
   2f86c:	6842      	ldr	r2, [r0, #4]
   2f86e:	6812      	ldr	r2, [r2, #0]
   2f870:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2f874:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2f878:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f87c:	2201      	movs	r2, #1
   2f87e:	609a      	str	r2, [r3, #8]
}
   2f880:	bd10      	pop	{r4, pc}

0002f882 <user_callback>:
	if (data->async->user_callback) {
   2f882:	6903      	ldr	r3, [r0, #16]
   2f884:	68da      	ldr	r2, [r3, #12]
   2f886:	6813      	ldr	r3, [r2, #0]
   2f888:	b10b      	cbz	r3, 2f88e <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2f88a:	6852      	ldr	r2, [r2, #4]
   2f88c:	4718      	bx	r3
}
   2f88e:	4770      	bx	lr

0002f890 <notify_uart_rx_rdy>:
{
   2f890:	b570      	push	{r4, r5, r6, lr}
   2f892:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2f894:	6906      	ldr	r6, [r0, #16]
{
   2f896:	4604      	mov	r4, r0
   2f898:	460d      	mov	r5, r1
	struct uart_event evt = {
   2f89a:	2214      	movs	r2, #20
   2f89c:	2100      	movs	r1, #0
   2f89e:	a801      	add	r0, sp, #4
   2f8a0:	f001 ff6f 	bl	31782 <memset>
   2f8a4:	2302      	movs	r3, #2
   2f8a6:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2f8aa:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2f8ac:	4620      	mov	r0, r4
	struct uart_event evt = {
   2f8ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2f8b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2f8b2:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2f8b4:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2f8b8:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2f8ba:	f7ff ffe2 	bl	2f882 <user_callback>
}
   2f8be:	b006      	add	sp, #24
   2f8c0:	bd70      	pop	{r4, r5, r6, pc}

0002f8c2 <rx_buf_release>:
{
   2f8c2:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2f8c4:	680e      	ldr	r6, [r1, #0]
{
   2f8c6:	4605      	mov	r5, r0
   2f8c8:	460c      	mov	r4, r1
   2f8ca:	b086      	sub	sp, #24
	if (*buf) {
   2f8cc:	b17e      	cbz	r6, 2f8ee <rx_buf_release+0x2c>
		struct uart_event evt = {
   2f8ce:	2214      	movs	r2, #20
   2f8d0:	2100      	movs	r1, #0
   2f8d2:	a801      	add	r0, sp, #4
   2f8d4:	f001 ff55 	bl	31782 <memset>
   2f8d8:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2f8da:	4628      	mov	r0, r5
   2f8dc:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2f8e0:	f88d 3004 	strb.w	r3, [sp, #4]
   2f8e4:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2f8e6:	f7ff ffcc 	bl	2f882 <user_callback>
		*buf = NULL;
   2f8ea:	2300      	movs	r3, #0
   2f8ec:	6023      	str	r3, [r4, #0]
}
   2f8ee:	b006      	add	sp, #24
   2f8f0:	bd70      	pop	{r4, r5, r6, pc}

0002f8f2 <notify_rx_disable>:
{
   2f8f2:	b510      	push	{r4, lr}
   2f8f4:	b086      	sub	sp, #24
   2f8f6:	4604      	mov	r4, r0
	struct uart_event evt = {
   2f8f8:	2214      	movs	r2, #20
   2f8fa:	2100      	movs	r1, #0
   2f8fc:	a801      	add	r0, sp, #4
   2f8fe:	f001 ff40 	bl	31782 <memset>
   2f902:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2f904:	4620      	mov	r0, r4
   2f906:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2f908:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2f90c:	f7ff ffb9 	bl	2f882 <user_callback>
}
   2f910:	b006      	add	sp, #24
   2f912:	bd10      	pop	{r4, pc}

0002f914 <uarte_nrfx_rx_buf_rsp>:
{
   2f914:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2f916:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2f918:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2f91a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2f91c:	f04f 0020 	mov.w	r0, #32
   2f920:	f3ef 8611 	mrs	r6, BASEPRI
   2f924:	f380 8812 	msr	BASEPRI_MAX, r0
   2f928:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2f92c:	68ec      	ldr	r4, [r5, #12]
   2f92e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2f930:	b198      	cbz	r0, 2f95a <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2f932:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2f934:	b9a0      	cbnz	r0, 2f960 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2f936:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2f938:	68ec      	ldr	r4, [r5, #12]
   2f93a:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2f93c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2f940:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2f944:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2f948:	f042 0220 	orr.w	r2, r2, #32
   2f94c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2f950:	f386 8811 	msr	BASEPRI, r6
   2f954:	f3bf 8f6f 	isb	sy
}
   2f958:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2f95a:	f06f 000c 	mvn.w	r0, #12
   2f95e:	e7f7      	b.n	2f950 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2f960:	f06f 000f 	mvn.w	r0, #15
   2f964:	e7f4      	b.n	2f950 <uarte_nrfx_rx_buf_rsp+0x3c>

0002f966 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2f966:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2f968:	68d8      	ldr	r0, [r3, #12]
   2f96a:	b120      	cbz	r0, 2f976 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2f96c:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2f96e:	68db      	ldr	r3, [r3, #12]
	return 0;
   2f970:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2f972:	605a      	str	r2, [r3, #4]
	return 0;
   2f974:	4770      	bx	lr
		return -ENOTSUP;
   2f976:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2f97a:	4770      	bx	lr

0002f97c <uarte_nrfx_poll_in>:
{
   2f97c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2f97e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2f980:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2f982:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2f984:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2f986:	b960      	cbnz	r0, 2f9a2 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f988:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2f98c:	b164      	cbz	r4, 2f9a8 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2f98e:	6992      	ldr	r2, [r2, #24]
   2f990:	7812      	ldrb	r2, [r2, #0]
   2f992:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f994:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2f998:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f99c:	2201      	movs	r2, #1
   2f99e:	601a      	str	r2, [r3, #0]
}
   2f9a0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2f9a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2f9a6:	e7fb      	b.n	2f9a0 <uarte_nrfx_poll_in+0x24>
		return -1;
   2f9a8:	f04f 30ff 	mov.w	r0, #4294967295
   2f9ac:	e7f8      	b.n	2f9a0 <uarte_nrfx_poll_in+0x24>

0002f9ae <uarte_nrfx_rx_disable>:
{
   2f9ae:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2f9b0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2f9b2:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2f9b4:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2f9b6:	68eb      	ldr	r3, [r5, #12]
   2f9b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2f9ba:	b1ba      	cbz	r2, 2f9ec <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2f9bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2f9be:	b153      	cbz	r3, 2f9d6 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2f9c0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2f9c4:	f023 0320 	bic.w	r3, r3, #32
   2f9c8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f9cc:	2300      	movs	r3, #0
   2f9ce:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2f9d2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2f9d6:	68e8      	ldr	r0, [r5, #12]
   2f9d8:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2f9da:	f001 fcf2 	bl	313c2 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2f9de:	2000      	movs	r0, #0
   2f9e0:	68eb      	ldr	r3, [r5, #12]
   2f9e2:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f9e6:	2301      	movs	r3, #1
   2f9e8:	6063      	str	r3, [r4, #4]
}
   2f9ea:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2f9ec:	f06f 000d 	mvn.w	r0, #13
   2f9f0:	e7fb      	b.n	2f9ea <uarte_nrfx_rx_disable+0x3c>

0002f9f2 <setup_tx_cache>:
{
   2f9f2:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2f9f4:	68c3      	ldr	r3, [r0, #12]
   2f9f6:	68da      	ldr	r2, [r3, #12]
   2f9f8:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2f9fa:	1a52      	subs	r2, r2, r1
   2f9fc:	d00f      	beq.n	2fa1e <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2f9fe:	2a08      	cmp	r2, #8
   2fa00:	bf28      	it	cs
   2fa02:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2fa04:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2fa06:	68c3      	ldr	r3, [r0, #12]
   2fa08:	6999      	ldr	r1, [r3, #24]
   2fa0a:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2fa0c:	68c3      	ldr	r3, [r0, #12]
   2fa0e:	6898      	ldr	r0, [r3, #8]
   2fa10:	69d9      	ldr	r1, [r3, #28]
   2fa12:	4401      	add	r1, r0
   2fa14:	6998      	ldr	r0, [r3, #24]
   2fa16:	f001 fe7a 	bl	3170e <memcpy>
	return true;
   2fa1a:	2001      	movs	r0, #1
}
   2fa1c:	bd08      	pop	{r3, pc}
		return false;
   2fa1e:	4610      	mov	r0, r2
   2fa20:	e7fc      	b.n	2fa1c <setup_tx_cache+0x2a>

0002fa22 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2fa22:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2fa24:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2fa26:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2fa28:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2fa2a:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2fa2e:	b1f1      	cbz	r1, 2fa6e <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2fa30:	2100      	movs	r1, #0
   2fa32:	4618      	mov	r0, r3
   2fa34:	f001 fea5 	bl	31782 <memset>
   2fa38:	4603      	mov	r3, r0
   2fa3a:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fa3c:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fa40:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fa42:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2fa44:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fa48:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2fa4c:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fa50:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fa52:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2fa56:	2800      	cmp	r0, #0
   2fa58:	d0fb      	beq.n	2fa52 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fa5a:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2fa5e:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2fa62:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2fa66:	b92b      	cbnz	r3, 2fa74 <rx_flush.isra.0+0x52>
			return rx_amount;
   2fa68:	b2c0      	uxtb	r0, r0
}
   2fa6a:	b002      	add	sp, #8
   2fa6c:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2fa6e:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2fa70:	4669      	mov	r1, sp
   2fa72:	e7e3      	b.n	2fa3c <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2fa74:	4285      	cmp	r5, r0
   2fa76:	d1f7      	bne.n	2fa68 <rx_flush.isra.0+0x46>
   2fa78:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2fa7a:	4293      	cmp	r3, r2
   2fa7c:	d101      	bne.n	2fa82 <rx_flush.isra.0+0x60>
	return 0;
   2fa7e:	2000      	movs	r0, #0
   2fa80:	e7f3      	b.n	2fa6a <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2fa82:	f813 1b01 	ldrb.w	r1, [r3], #1
   2fa86:	2900      	cmp	r1, #0
   2fa88:	d0f7      	beq.n	2fa7a <rx_flush.isra.0+0x58>
   2fa8a:	e7ed      	b.n	2fa68 <rx_flush.isra.0+0x46>

0002fa8c <async_uart_release>:
{
   2fa8c:	b570      	push	{r4, r5, r6, lr}
   2fa8e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2fa90:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2fa92:	f04f 0320 	mov.w	r3, #32
   2fa96:	f3ef 8611 	mrs	r6, BASEPRI
   2fa9a:	f383 8812 	msr	BASEPRI_MAX, r3
   2fa9e:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2faa2:	68d0      	ldr	r0, [r2, #12]
   2faa4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2faa8:	ea23 0301 	bic.w	r3, r3, r1
   2faac:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2fab0:	68d5      	ldr	r5, [r2, #12]
   2fab2:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2fab6:	b973      	cbnz	r3, 2fad6 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2fab8:	2902      	cmp	r1, #2
   2faba:	d107      	bne.n	2facc <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2fabc:	2205      	movs	r2, #5
   2fabe:	6860      	ldr	r0, [r4, #4]
   2fac0:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2fac4:	f7ff ffad 	bl	2fa22 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2fac8:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2facc:	2200      	movs	r2, #0
	return config->uarte_regs;
   2face:	6863      	ldr	r3, [r4, #4]
   2fad0:	681b      	ldr	r3, [r3, #0]
   2fad2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2fad6:	f386 8811 	msr	BASEPRI, r6
   2fada:	f3bf 8f6f 	isb	sy
}
   2fade:	bd70      	pop	{r4, r5, r6, pc}

0002fae0 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2fae0:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2fae2:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fae4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fae8:	b940      	cbnz	r0, 2fafc <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2faea:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2faec:	079b      	lsls	r3, r3, #30
   2faee:	d406      	bmi.n	2fafe <is_tx_ready.isra.0+0x1e>
   2faf0:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2faf4:	3800      	subs	r0, #0
   2faf6:	bf18      	it	ne
   2faf8:	2001      	movne	r0, #1
   2fafa:	4770      	bx	lr
   2fafc:	2001      	movs	r0, #1
}
   2fafe:	4770      	bx	lr

0002fb00 <start_tx_locked>:
{
   2fb00:	b510      	push	{r4, lr}
   2fb02:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2fb04:	6840      	ldr	r0, [r0, #4]
   2fb06:	f7ff ffeb 	bl	2fae0 <is_tx_ready.isra.0>
   2fb0a:	68cb      	ldr	r3, [r1, #12]
   2fb0c:	b918      	cbnz	r0, 2fb16 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2fb0e:	2201      	movs	r2, #1
   2fb10:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2fb14:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2fb16:	2200      	movs	r2, #0
   2fb18:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2fb1c:	f04f 32ff 	mov.w	r2, #4294967295
   2fb20:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fb22:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2fb24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fb28:	68cb      	ldr	r3, [r1, #12]
}
   2fb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fb2e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2fb32:	f7ff be7e 	b.w	2f832 <tx_start>

0002fb36 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2fb36:	b510      	push	{r4, lr}
   2fb38:	4604      	mov	r4, r0
   2fb3a:	2200      	movs	r2, #0
   2fb3c:	2101      	movs	r1, #1
   2fb3e:	200b      	movs	r0, #11
   2fb40:	f7e1 faee 	bl	11120 <z_arm_irq_priority_set>
   2fb44:	200b      	movs	r0, #11
   2fb46:	f7e1 fabb 	bl	110c0 <arch_irq_enable>
   2fb4a:	4620      	mov	r0, r4
   2fb4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fb50:	f7f2 baaa 	b.w	220a8 <uarte_instance_init.constprop.0>

0002fb54 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2fb54:	b510      	push	{r4, lr}
   2fb56:	4604      	mov	r4, r0
   2fb58:	2200      	movs	r2, #0
   2fb5a:	2101      	movs	r1, #1
   2fb5c:	2008      	movs	r0, #8
   2fb5e:	f7e1 fadf 	bl	11120 <z_arm_irq_priority_set>
   2fb62:	2008      	movs	r0, #8
   2fb64:	f7e1 faac 	bl	110c0 <arch_irq_enable>
   2fb68:	4620      	mov	r0, r4
   2fb6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fb6e:	f7f2 ba9b 	b.w	220a8 <uarte_instance_init.constprop.0>

0002fb72 <uarte_nrfx_rx_enable>:
{
   2fb72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   2fb76:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   2fb7a:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   2fb7c:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   2fb80:	4605      	mov	r5, r0
   2fb82:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   2fb84:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   2fb86:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   2fb8a:	2a00      	cmp	r2, #0
   2fb8c:	d175      	bne.n	2fc7a <uarte_nrfx_rx_enable+0x108>
	if (data->async->rx_enabled) {
   2fb8e:	68e2      	ldr	r2, [r4, #12]
   2fb90:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   2fb94:	2900      	cmp	r1, #0
   2fb96:	d173      	bne.n	2fc80 <uarte_nrfx_rx_enable+0x10e>
		MAX(timeout / RX_TIMEOUT_DIV,
   2fb98:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   2fb9c:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   2fb9e:	bfca      	itet	gt
   2fba0:	2205      	movgt	r2, #5
   2fba2:	235c      	movle	r3, #92	; 0x5c
   2fba4:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   2fba8:	68e2      	ldr	r2, [r4, #12]
   2fbaa:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   2fbac:	68e3      	ldr	r3, [r4, #12]
   2fbae:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   2fbb2:	68e3      	ldr	r3, [r4, #12]
   2fbb4:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   2fbb6:	2300      	movs	r3, #0
   2fbb8:	68e2      	ldr	r2, [r4, #12]
   2fbba:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   2fbbc:	68e2      	ldr	r2, [r4, #12]
   2fbbe:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   2fbc0:	68e2      	ldr	r2, [r4, #12]
   2fbc2:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fbc4:	f8da 3004 	ldr.w	r3, [sl, #4]
   2fbc8:	06da      	lsls	r2, r3, #27
   2fbca:	d523      	bpl.n	2fc14 <uarte_nrfx_rx_enable+0xa2>
		if (data->async->rx_flush_cnt) {
   2fbcc:	68e1      	ldr	r1, [r4, #12]
   2fbce:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   2fbd2:	b1fe      	cbz	r6, 2fc14 <uarte_nrfx_rx_enable+0xa2>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   2fbd4:	42be      	cmp	r6, r7
   2fbd6:	bf28      	it	cs
   2fbd8:	463e      	movcs	r6, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2fbda:	4640      	mov	r0, r8
   2fbdc:	4632      	mov	r2, r6
   2fbde:	31c4      	adds	r1, #196	; 0xc4
   2fbe0:	f001 fd95 	bl	3170e <memcpy>
			if (!len) {
   2fbe4:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   2fbe6:	44b0      	add	r8, r6
			if (!len) {
   2fbe8:	d114      	bne.n	2fc14 <uarte_nrfx_rx_enable+0xa2>
				data->async->rx_flush_cnt -= cpy_len;
   2fbea:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   2fbec:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   2fbee:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   2fbf2:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   2fbf4:	1b9b      	subs	r3, r3, r6
   2fbf6:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   2fbfa:	f7ff fe49 	bl	2f890 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   2fbfe:	68e1      	ldr	r1, [r4, #12]
   2fc00:	4628      	mov	r0, r5
   2fc02:	3158      	adds	r1, #88	; 0x58
   2fc04:	f7ff fe5d 	bl	2f8c2 <rx_buf_release>
				notify_rx_disable(dev);
   2fc08:	4628      	mov	r0, r5
   2fc0a:	f7ff fe72 	bl	2f8f2 <notify_rx_disable>
				return 0;
   2fc0e:	2000      	movs	r0, #0
}
   2fc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fc14:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fc16:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2fc1a:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fc1e:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   2fc22:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   2fc26:	2201      	movs	r2, #1
   2fc28:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   2fc2c:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   2fc30:	68e3      	ldr	r3, [r4, #12]
   2fc32:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fc36:	f8da 3004 	ldr.w	r3, [sl, #4]
   2fc3a:	06db      	lsls	r3, r3, #27
   2fc3c:	d519      	bpl.n	2fc72 <uarte_nrfx_rx_enable+0x100>
	__asm__ volatile(
   2fc3e:	f04f 0320 	mov.w	r3, #32
   2fc42:	f3ef 8111 	mrs	r1, BASEPRI
   2fc46:	f383 8812 	msr	BASEPRI_MAX, r3
   2fc4a:	f3bf 8f6f 	isb	sy
	if (data->async) {
   2fc4e:	692b      	ldr	r3, [r5, #16]
   2fc50:	68db      	ldr	r3, [r3, #12]
   2fc52:	b12b      	cbz	r3, 2fc60 <uarte_nrfx_rx_enable+0xee>
		data->async->low_power_mask |= mask;
   2fc54:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2fc58:	f042 0202 	orr.w	r2, r2, #2
   2fc5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2fc60:	2208      	movs	r2, #8
	return config->uarte_regs;
   2fc62:	686b      	ldr	r3, [r5, #4]
   2fc64:	681b      	ldr	r3, [r3, #0]
   2fc66:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2fc6a:	f381 8811 	msr	BASEPRI, r1
   2fc6e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fc72:	2301      	movs	r3, #1
   2fc74:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   2fc78:	e7c9      	b.n	2fc0e <uarte_nrfx_rx_enable+0x9c>
		return -ENOTSUP;
   2fc7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fc7e:	e7c7      	b.n	2fc10 <uarte_nrfx_rx_enable+0x9e>
		return -EBUSY;
   2fc80:	f06f 000f 	mvn.w	r0, #15
   2fc84:	e7c4      	b.n	2fc10 <uarte_nrfx_rx_enable+0x9e>

0002fc86 <rx_timeout>:
{
   2fc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2fc88:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2fc8a:	68e3      	ldr	r3, [r4, #12]
   2fc8c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2fc90:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2fc94:	bb13      	cbnz	r3, 2fcdc <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2fc96:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2fc98:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2fc9a:	6873      	ldr	r3, [r6, #4]
   2fc9c:	681b      	ldr	r3, [r3, #0]
   2fc9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2fca2:	68e3      	ldr	r3, [r4, #12]
   2fca4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2fca8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2fcaa:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2fcac:	bf1f      	itttt	ne
   2fcae:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2fcb0:	68e3      	ldrne	r3, [r4, #12]
   2fcb2:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2fcb4:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2fcb6:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2fcb8:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2fcbc:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2fcbe:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2fcc0:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2fcc2:	da0c      	bge.n	2fcde <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2fcc4:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2fcc8:	68e3      	ldr	r3, [r4, #12]
   2fcca:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2fcce:	4281      	cmp	r1, r0
   2fcd0:	d80b      	bhi.n	2fcea <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2fcd2:	2210      	movs	r2, #16
	return config->uarte_regs;
   2fcd4:	6873      	ldr	r3, [r6, #4]
   2fcd6:	681b      	ldr	r3, [r3, #0]
   2fcd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2fcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2fcde:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2fce2:	eb02 0c01 	add.w	ip, r2, r1
   2fce6:	4584      	cmp	ip, r0
   2fce8:	d904      	bls.n	2fcf4 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2fcea:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2fcec:	2d00      	cmp	r5, #0
   2fcee:	ddf0      	ble.n	2fcd2 <rx_timeout+0x4c>
		clipped = true;
   2fcf0:	2701      	movs	r7, #1
   2fcf2:	e005      	b.n	2fd00 <rx_timeout+0x7a>
	if (len > 0) {
   2fcf4:	2a00      	cmp	r2, #0
   2fcf6:	d0ec      	beq.n	2fcd2 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2fcf8:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2fcfc:	428a      	cmp	r2, r1
   2fcfe:	da12      	bge.n	2fd26 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2fd00:	4629      	mov	r1, r5
   2fd02:	4630      	mov	r0, r6
   2fd04:	f7ff fdc4 	bl	2f890 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2fd08:	68e2      	ldr	r2, [r4, #12]
   2fd0a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2fd0c:	442b      	add	r3, r5
   2fd0e:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2fd10:	68e2      	ldr	r2, [r4, #12]
   2fd12:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2fd14:	442b      	add	r3, r5
   2fd16:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2fd18:	2f00      	cmp	r7, #0
   2fd1a:	d0da      	beq.n	2fcd2 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2fd1c:	68e0      	ldr	r0, [r4, #12]
   2fd1e:	3080      	adds	r0, #128	; 0x80
   2fd20:	f001 fb4f 	bl	313c2 <z_impl_k_timer_stop>
}
   2fd24:	e7d5      	b.n	2fcd2 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2fd26:	1a52      	subs	r2, r2, r1
   2fd28:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2fd2a:	e7d2      	b.n	2fcd2 <rx_timeout+0x4c>

0002fd2c <uarte_nrfx_tx_abort>:
{
   2fd2c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2fd2e:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2fd30:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2fd32:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2fd34:	68da      	ldr	r2, [r3, #12]
   2fd36:	6891      	ldr	r1, [r2, #8]
   2fd38:	b151      	cbz	r1, 2fd50 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2fd3a:	2400      	movs	r4, #0
   2fd3c:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2fd40:	68d8      	ldr	r0, [r3, #12]
   2fd42:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2fd44:	f001 fb3d 	bl	313c2 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fd48:	2301      	movs	r3, #1
	return 0;
   2fd4a:	4620      	mov	r0, r4
   2fd4c:	60eb      	str	r3, [r5, #12]
}
   2fd4e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2fd50:	f06f 000d 	mvn.w	r0, #13
   2fd54:	e7fb      	b.n	2fd4e <uarte_nrfx_tx_abort+0x22>

0002fd56 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2fd56:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2fd58:	6818      	ldr	r0, [r3, #0]
   2fd5a:	f7ff bfe7 	b.w	2fd2c <uarte_nrfx_tx_abort>

0002fd5e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2fd5e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2fd60:	ab0b      	add	r3, sp, #44	; 0x2c
   2fd62:	9305      	str	r3, [sp, #20]
   2fd64:	9303      	str	r3, [sp, #12]
   2fd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fd68:	9302      	str	r3, [sp, #8]
   2fd6a:	2300      	movs	r3, #0
   2fd6c:	4618      	mov	r0, r3
   2fd6e:	e9cd 3300 	strd	r3, r3, [sp]
   2fd72:	f7df fb5b 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2fd76:	b007      	add	sp, #28
   2fd78:	f85d fb04 	ldr.w	pc, [sp], #4

0002fd7c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2fd7c:	2000      	movs	r0, #0
   2fd7e:	4770      	bx	lr

0002fd80 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2fd80:	b538      	push	{r3, r4, r5, lr}
   2fd82:	460c      	mov	r4, r1
   2fd84:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2fd86:	f7ea fdeb 	bl	1a960 <bt_is_ready>
   2fd8a:	b128      	cbz	r0, 2fd98 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2fd8c:	4629      	mov	r1, r5
   2fd8e:	4620      	mov	r0, r4
}
   2fd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2fd94:	f7e9 bff2 	b.w	19d7c <bt_hci_le_rand>
}
   2fd98:	f06f 000a 	mvn.w	r0, #10
   2fd9c:	bd38      	pop	{r3, r4, r5, pc}

0002fd9e <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2fd9e:	4608      	mov	r0, r1
   2fda0:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2fda2:	4611      	mov	r1, r2
   2fda4:	f7f3 fa80 	bl	232a8 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2fda8:	2800      	cmp	r0, #0
	}

	return 0;
}
   2fdaa:	bf18      	it	ne
   2fdac:	f06f 0004 	mvnne.w	r0, #4
   2fdb0:	bd08      	pop	{r3, pc}

0002fdb2 <entropy_psa_crypto_rng_init>:
{
   2fdb2:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2fdb4:	f000 f886 	bl	2fec4 <psa_crypto_init>
		return -EIO;
   2fdb8:	2800      	cmp	r0, #0
}
   2fdba:	bf18      	it	ne
   2fdbc:	f06f 0004 	mvnne.w	r0, #4
   2fdc0:	bd08      	pop	{r3, pc}

0002fdc2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2fdc2:	4770      	bx	lr

0002fdc4 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2fdc4:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2fdc6:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2fdca:	009b      	lsls	r3, r3, #2
   2fdcc:	b29b      	uxth	r3, r3
   2fdce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2fdd2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2fdd6:	601a      	str	r2, [r3, #0]
   2fdd8:	681b      	ldr	r3, [r3, #0]
}
   2fdda:	4770      	bx	lr

0002fddc <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   2fddc:	b130      	cbz	r0, 2fdec <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   2fdde:	3010      	adds	r0, #16
   2fde0:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   2fde2:	b2c0      	uxtb	r0, r0
   2fde4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2fde8:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   2fdec:	4770      	bx	lr

0002fdee <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   2fdee:	f7f2 be73 	b.w	22ad8 <compare_set>

0002fdf2 <sys_clock_cycle_get_32>:
{
   2fdf2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2fdf4:	f7f2 fe4e 	bl	22a94 <z_nrf_rtc_timer_read>
}
   2fdf8:	bd08      	pop	{r3, pc}

0002fdfa <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2fdfa:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2fdfc:	6843      	ldr	r3, [r0, #4]
   2fdfe:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2fe00:	7a05      	ldrb	r5, [r0, #8]
   2fe02:	6844      	ldr	r4, [r0, #4]
   2fe04:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2fe08:	42a3      	cmp	r3, r4
   2fe0a:	d302      	bcc.n	2fe12 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2fe0c:	f06f 0001 	mvn.w	r0, #1
}
   2fe10:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2fe12:	795c      	ldrb	r4, [r3, #5]
   2fe14:	428c      	cmp	r4, r1
   2fe16:	d001      	beq.n	2fe1c <pinctrl_lookup_state+0x22>
		(*state)++;
   2fe18:	3308      	adds	r3, #8
   2fe1a:	e7f0      	b.n	2fdfe <pinctrl_lookup_state+0x4>
			return 0;
   2fe1c:	2000      	movs	r0, #0
   2fe1e:	e7f7      	b.n	2fe10 <pinctrl_lookup_state+0x16>

0002fe20 <mbox_nrf_register_callback>:
{
   2fe20:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2fe22:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2fe24:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2fe26:	bf9f      	itttt	ls
   2fe28:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2fe2c:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2fe30:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2fe32:	2000      	movls	r0, #0
		return -EINVAL;
   2fe34:	bf88      	it	hi
   2fe36:	f06f 0015 	mvnhi.w	r0, #21
}
   2fe3a:	bd10      	pop	{r4, pc}

0002fe3c <mbox_nrf_mtu_get>:
}
   2fe3c:	2000      	movs	r0, #0
   2fe3e:	4770      	bx	lr

0002fe40 <mbox_nrf_max_channels_get>:
}
   2fe40:	2010      	movs	r0, #16
   2fe42:	4770      	bx	lr

0002fe44 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2fe44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2fe46:	ab0b      	add	r3, sp, #44	; 0x2c
   2fe48:	9305      	str	r3, [sp, #20]
   2fe4a:	9303      	str	r3, [sp, #12]
   2fe4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fe4e:	2202      	movs	r2, #2
   2fe50:	9302      	str	r3, [sp, #8]
   2fe52:	2300      	movs	r3, #0
   2fe54:	4618      	mov	r0, r3
   2fe56:	e9cd 3300 	strd	r3, r3, [sp]
   2fe5a:	f7df fae7 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   2fe5e:	b007      	add	sp, #28
   2fe60:	f85d fb04 	ldr.w	pc, [sp], #4

0002fe64 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2fe64:	2000      	movs	r0, #0
   2fe66:	4770      	bx	lr

0002fe68 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2fe68:	2300      	movs	r3, #0
{
   2fe6a:	b570      	push	{r4, r5, r6, lr}
   2fe6c:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2fe6e:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2fe72:	ab03      	add	r3, sp, #12
   2fe74:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2fe76:	2304      	movs	r3, #4
{
   2fe78:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2fe7a:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2fe7c:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2fe7e:	b169      	cbz	r1, 2fe9c <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2fe80:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2fe82:	680b      	ldr	r3, [r1, #0]
   2fe84:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2fe86:	684b      	ldr	r3, [r1, #4]
   2fe88:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2fe8a:	2101      	movs	r1, #1
   2fe8c:	2041      	movs	r0, #65	; 0x41
   2fe8e:	f7f3 fa49 	bl	23324 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2fe92:	1e05      	subs	r5, r0, #0
   2fe94:	dc04      	bgt.n	2fea0 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2fe96:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2fe98:	b008      	add	sp, #32
   2fe9a:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2fe9c:	2601      	movs	r6, #1
   2fe9e:	e7f4      	b.n	2fe8a <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2fea0:	1e23      	subs	r3, r4, #0
   2fea2:	bf18      	it	ne
   2fea4:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2fea6:	2100      	movs	r1, #0
   2fea8:	e9cd 4300 	strd	r4, r3, [sp]
   2feac:	aa04      	add	r2, sp, #16
   2feae:	4633      	mov	r3, r6
   2feb0:	f7f3 fa1c 	bl	232ec <psa_call>
   2feb4:	4604      	mov	r4, r0
    psa_close(handle);
   2feb6:	4628      	mov	r0, r5
   2feb8:	f7f3 fa42 	bl	23340 <psa_close>
    if (status < PSA_SUCCESS) {
   2febc:	2c00      	cmp	r4, #0
   2febe:	dbea      	blt.n	2fe96 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2fec0:	4620      	mov	r0, r4
   2fec2:	e7e9      	b.n	2fe98 <tfm_platform_ioctl+0x30>

0002fec4 <psa_crypto_init>:
}
   2fec4:	2000      	movs	r0, #0
   2fec6:	4770      	bx	lr

0002fec8 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2fec8:	b510      	push	{r4, lr}
   2feca:	b088      	sub	sp, #32
   2fecc:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2fece:	ab05      	add	r3, sp, #20
   2fed0:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2fed2:	230c      	movs	r3, #12
   2fed4:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2fed6:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2fed8:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2fedc:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2fee0:	eb0d 0103 	add.w	r1, sp, r3
   2fee4:	aa03      	add	r2, sp, #12
   2fee6:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   2fee8:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2feec:	f7ff ffbc 	bl	2fe68 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2fef0:	9b00      	ldr	r3, [sp, #0]
   2fef2:	6023      	str	r3, [r4, #0]

	return ret;
}
   2fef4:	b008      	add	sp, #32
   2fef6:	bd10      	pop	{r4, pc}

0002fef8 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2fef8:	2300      	movs	r3, #0
{
   2fefa:	b510      	push	{r4, lr}
   2fefc:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2fefe:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   2ff02:	ab05      	add	r3, sp, #20
   2ff04:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2ff06:	230c      	movs	r3, #12
   2ff08:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2ff0a:	2304      	movs	r3, #4
{
   2ff0c:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2ff0e:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2ff10:	aa03      	add	r2, sp, #12
   2ff12:	eb0d 0103 	add.w	r1, sp, r3
   2ff16:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   2ff18:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2ff1a:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2ff1e:	f7ff ffa3 	bl	2fe68 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2ff22:	9b00      	ldr	r3, [sp, #0]
   2ff24:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2ff26:	b008      	add	sp, #32
   2ff28:	bd10      	pop	{r4, pc}

0002ff2a <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2ff2a:	f7f3 ba17 	b.w	2335c <SystemCoreClockUpdate>

0002ff2e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2ff2e:	4700      	bx	r0

0002ff30 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2ff30:	f001 ba15 	b.w	3135e <z_impl_k_busy_wait>

0002ff34 <nrfx_clock_stop>:
    clock_stop(domain);
   2ff34:	f7f3 ba5a 	b.w	233ec <clock_stop>

0002ff38 <nrf_gpio_reconfigure>:
{
   2ff38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ff3a:	4616      	mov	r6, r2
   2ff3c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2ff40:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ff42:	a801      	add	r0, sp, #4
{
   2ff44:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ff46:	f7f3 fbf9 	bl	2373c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ff4a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ff4c:	f1b6 0c00 	subs.w	ip, r6, #0
   2ff50:	bf18      	it	ne
   2ff52:	f04f 0c01 	movne.w	ip, #1
   2ff56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ff5a:	1e0b      	subs	r3, r1, #0
   2ff5c:	bf18      	it	ne
   2ff5e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ff60:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ff62:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ff66:	bf14      	ite	ne
   2ff68:	f04f 0c0c 	movne.w	ip, #12
   2ff6c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2ff70:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ff72:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2ff76:	bf14      	ite	ne
   2ff78:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   2ff7c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2ff80:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ff82:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2ff86:	bf14      	ite	ne
   2ff88:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2ff8c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ff90:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ff94:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2ff98:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ff9c:	b101      	cbz	r1, 2ffa0 <nrf_gpio_reconfigure+0x68>
   2ff9e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2ffa0:	b10e      	cbz	r6, 2ffa6 <nrf_gpio_reconfigure+0x6e>
   2ffa2:	7836      	ldrb	r6, [r6, #0]
   2ffa4:	0076      	lsls	r6, r6, #1
   2ffa6:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2ffa8:	b10d      	cbz	r5, 2ffae <nrf_gpio_reconfigure+0x76>
   2ffaa:	782d      	ldrb	r5, [r5, #0]
   2ffac:	00ad      	lsls	r5, r5, #2
   2ffae:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2ffb0:	b10c      	cbz	r4, 2ffb6 <nrf_gpio_reconfigure+0x7e>
   2ffb2:	7824      	ldrb	r4, [r4, #0]
   2ffb4:	0224      	lsls	r4, r4, #8
   2ffb6:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2ffb8:	b10f      	cbz	r7, 2ffbe <nrf_gpio_reconfigure+0x86>
   2ffba:	783f      	ldrb	r7, [r7, #0]
   2ffbc:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ffbe:	430c      	orrs	r4, r1
   2ffc0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2ffc2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   2ffc6:	b003      	add	sp, #12
   2ffc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ffca <nrf_gpio_cfg_sense_set>:
{
   2ffca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ffcc:	f10d 030f 	add.w	r3, sp, #15
   2ffd0:	9301      	str	r3, [sp, #4]
   2ffd2:	2300      	movs	r3, #0
{
   2ffd4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ffd8:	461a      	mov	r2, r3
   2ffda:	4619      	mov	r1, r3
   2ffdc:	9300      	str	r3, [sp, #0]
   2ffde:	f7ff ffab 	bl	2ff38 <nrf_gpio_reconfigure>
}
   2ffe2:	b005      	add	sp, #20
   2ffe4:	f85d fb04 	ldr.w	pc, [sp], #4

0002ffe8 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2ffe8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2ffec:	4770      	bx	lr

0002ffee <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2ffee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2fff2:	4770      	bx	lr

0002fff4 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2fff4:	f44f 7080 	mov.w	r0, #256	; 0x100
   2fff8:	4770      	bx	lr

0002fffa <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   2fffa:	2100      	movs	r1, #0
   2fffc:	f7f4 b84e 	b.w	2409c <nrf_gpio_cfg.constprop.0>

00030000 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   30000:	2302      	movs	r3, #2
   30002:	f7f3 bfa3 	b.w	23f4c <qspi_xfer>

00030006 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   30006:	2303      	movs	r3, #3
   30008:	f7f3 bfa0 	b.w	23f4c <qspi_xfer>

0003000c <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   3000c:	2100      	movs	r1, #0
   3000e:	2002      	movs	r0, #2
   30010:	f7f4 ba3a 	b.w	24488 <nrfx_qspi_erase>

00030014 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30014:	1c43      	adds	r3, r0, #1
{
   30016:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30018:	d005      	beq.n	30026 <spim_pin_uninit+0x12>
   3001a:	2300      	movs	r3, #0
   3001c:	2201      	movs	r2, #1
   3001e:	4619      	mov	r1, r3
   30020:	9300      	str	r3, [sp, #0]
   30022:	f7f4 faa7 	bl	24574 <nrf_gpio_cfg.constprop.0>
}
   30026:	b003      	add	sp, #12
   30028:	f85d fb04 	ldr.w	pc, [sp], #4

0003002c <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   3002c:	7f83      	ldrb	r3, [r0, #30]
   3002e:	075a      	lsls	r2, r3, #29
   30030:	d40b      	bmi.n	3004a <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   30032:	7fc0      	ldrb	r0, [r0, #31]
   30034:	28ff      	cmp	r0, #255	; 0xff
   30036:	d008      	beq.n	3004a <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   30038:	079b      	lsls	r3, r3, #30
   3003a:	bf58      	it	pl
   3003c:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   30040:	b909      	cbnz	r1, 30046 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   30042:	f7f4 ba87 	b.w	24554 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   30046:	f7f4 bab5 	b.w	245b4 <nrf_gpio_pin_set>
}
   3004a:	4770      	bx	lr

0003004c <metal_device_open>:
{
   3004c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3004e:	460c      	mov	r4, r1
   30050:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   30052:	4606      	mov	r6, r0
   30054:	b918      	cbnz	r0, 3005e <metal_device_open+0x12>
		return -EINVAL;
   30056:	f06f 0015 	mvn.w	r0, #21
}
   3005a:	b002      	add	sp, #8
   3005c:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   3005e:	f7d9 f9d4 	bl	940a <strlen>
   30062:	2800      	cmp	r0, #0
   30064:	d0f7      	beq.n	30056 <metal_device_open+0xa>
   30066:	2c00      	cmp	r4, #0
   30068:	d0f5      	beq.n	30056 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   3006a:	4620      	mov	r0, r4
   3006c:	f7d9 f9cd 	bl	940a <strlen>
   30070:	2800      	cmp	r0, #0
   30072:	d0f0      	beq.n	30056 <metal_device_open+0xa>
   30074:	2d00      	cmp	r5, #0
   30076:	d0ee      	beq.n	30056 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   30078:	4630      	mov	r0, r6
   3007a:	a901      	add	r1, sp, #4
   3007c:	f7f4 fcf2 	bl	24a64 <metal_bus_find>
	if (error)
   30080:	2800      	cmp	r0, #0
   30082:	d1ea      	bne.n	3005a <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   30084:	9801      	ldr	r0, [sp, #4]
   30086:	6883      	ldr	r3, [r0, #8]
   30088:	b12b      	cbz	r3, 30096 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   3008a:	462a      	mov	r2, r5
   3008c:	4621      	mov	r1, r4
}
   3008e:	b002      	add	sp, #8
   30090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   30094:	4718      	bx	r3
		return -ENODEV;
   30096:	f06f 0012 	mvn.w	r0, #18
   3009a:	e7de      	b.n	3005a <metal_device_open+0xe>

0003009c <metal_device_close>:
{
   3009c:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
   3009e:	6840      	ldr	r0, [r0, #4]
   300a0:	68c3      	ldr	r3, [r0, #12]
   300a2:	b103      	cbz	r3, 300a6 <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
   300a4:	4718      	bx	r3
}
   300a6:	4770      	bx	lr

000300a8 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   300a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   300ac:	b089      	sub	sp, #36	; 0x24
   300ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
   300b0:	4604      	mov	r4, r0
   300b2:	4689      	mov	r9, r1
   300b4:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   300b6:	2100      	movs	r1, #0
   300b8:	2220      	movs	r2, #32
   300ba:	4668      	mov	r0, sp
{
   300bc:	461f      	mov	r7, r3
   300be:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   300c0:	f001 fb5f 	bl	31782 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   300c4:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   300c6:	bf97      	itett	ls
   300c8:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   300ca:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   300ce:	40b3      	lslls	r3, r6
   300d0:	f103 33ff 	addls.w	r3, r3, #4294967295
   300d4:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   300d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   300d8:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   300dc:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   300e0:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   300e2:	3418      	adds	r4, #24
   300e4:	b145      	cbz	r5, 300f8 <metal_io_init+0x50>
   300e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   300e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   300ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   300ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   300f2:	b009      	add	sp, #36	; 0x24
   300f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   300f8:	466d      	mov	r5, sp
   300fa:	e7f4      	b.n	300e6 <metal_io_init+0x3e>

000300fc <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   300fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   300fe:	6804      	ldr	r4, [r0, #0]
		: NULL);
   30100:	1c66      	adds	r6, r4, #1
   30102:	d031      	beq.n	30168 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   30104:	6885      	ldr	r5, [r0, #8]
   30106:	42a9      	cmp	r1, r5
   30108:	d22e      	bcs.n	30168 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   3010a:	1864      	adds	r4, r4, r1
   3010c:	d02c      	beq.n	30168 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   3010e:	185e      	adds	r6, r3, r1
   30110:	42ae      	cmp	r6, r5
		len = io->size - offset;
   30112:	bf88      	it	hi
   30114:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   30116:	6a05      	ldr	r5, [r0, #32]
   30118:	b135      	cbz	r5, 30128 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   3011a:	9300      	str	r3, [sp, #0]
   3011c:	2305      	movs	r3, #5
   3011e:	47a8      	blx	r5
   30120:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   30122:	4618      	mov	r0, r3
   30124:	b002      	add	sp, #8
   30126:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   30128:	f3bf 8f5b 	dmb	ish
		while ( len && (
   3012c:	4619      	mov	r1, r3
   3012e:	1aa4      	subs	r4, r4, r2
   30130:	1910      	adds	r0, r2, r4
   30132:	b119      	cbz	r1, 3013c <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   30134:	ea40 0502 	orr.w	r5, r0, r2
   30138:	07ad      	lsls	r5, r5, #30
   3013a:	d10a      	bne.n	30152 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   3013c:	2903      	cmp	r1, #3
   3013e:	dc0d      	bgt.n	3015c <metal_io_block_read+0x60>
   30140:	3801      	subs	r0, #1
   30142:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   30144:	428a      	cmp	r2, r1
   30146:	d0ec      	beq.n	30122 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   30148:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   3014c:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   30150:	e7f8      	b.n	30144 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   30152:	7800      	ldrb	r0, [r0, #0]
			len--;
   30154:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   30156:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   3015a:	e7e9      	b.n	30130 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   3015c:	f850 4b04 	ldr.w	r4, [r0], #4
   30160:	3904      	subs	r1, #4
   30162:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   30166:	e7e9      	b.n	3013c <metal_io_block_read+0x40>
		return -ERANGE;
   30168:	f06f 0321 	mvn.w	r3, #33	; 0x21
   3016c:	e7d9      	b.n	30122 <metal_io_block_read+0x26>

0003016e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   3016e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30170:	6804      	ldr	r4, [r0, #0]
		: NULL);
   30172:	1c65      	adds	r5, r4, #1
   30174:	d032      	beq.n	301dc <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   30176:	6885      	ldr	r5, [r0, #8]
   30178:	42a9      	cmp	r1, r5
   3017a:	d22f      	bcs.n	301dc <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   3017c:	1864      	adds	r4, r4, r1
   3017e:	d02d      	beq.n	301dc <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   30180:	185e      	adds	r6, r3, r1
   30182:	42ae      	cmp	r6, r5
		len = io->size - offset;
   30184:	bf88      	it	hi
   30186:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   30188:	6a45      	ldr	r5, [r0, #36]	; 0x24
   3018a:	b1cd      	cbz	r5, 301c0 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   3018c:	9300      	str	r3, [sp, #0]
   3018e:	2305      	movs	r3, #5
   30190:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   30192:	b002      	add	sp, #8
   30194:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   30196:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   3019a:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   3019c:	7005      	strb	r5, [r0, #0]
			len--;
   3019e:	4615      	mov	r5, r2
   301a0:	18a0      	adds	r0, r4, r2
		while ( len && (
   301a2:	b119      	cbz	r1, 301ac <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   301a4:	ea40 0602 	orr.w	r6, r0, r2
   301a8:	07b6      	lsls	r6, r6, #30
   301aa:	d1f4      	bne.n	30196 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   301ac:	2903      	cmp	r1, #3
   301ae:	dc0a      	bgt.n	301c6 <metal_io_block_write+0x58>
   301b0:	3d01      	subs	r5, #1
   301b2:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   301b4:	4288      	cmp	r0, r1
   301b6:	d10c      	bne.n	301d2 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   301b8:	f3bf 8f5b 	dmb	ish
	retlen = len;
   301bc:	4618      	mov	r0, r3
   301be:	e7e8      	b.n	30192 <metal_io_block_write+0x24>
   301c0:	4619      	mov	r1, r3
   301c2:	1aa4      	subs	r4, r4, r2
   301c4:	e7eb      	b.n	3019e <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   301c6:	f855 2b04 	ldr.w	r2, [r5], #4
   301ca:	3904      	subs	r1, #4
   301cc:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   301d0:	e7ec      	b.n	301ac <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   301d2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   301d6:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   301da:	e7eb      	b.n	301b4 <metal_io_block_write+0x46>
		return -ERANGE;
   301dc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   301e0:	e7d7      	b.n	30192 <metal_io_block_write+0x24>

000301e2 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   301e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   301e4:	6804      	ldr	r4, [r0, #0]
   301e6:	461d      	mov	r5, r3
		: NULL);
   301e8:	1c66      	adds	r6, r4, #1
   301ea:	d02b      	beq.n	30244 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   301ec:	6883      	ldr	r3, [r0, #8]
   301ee:	4299      	cmp	r1, r3
   301f0:	d228      	bcs.n	30244 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   301f2:	1864      	adds	r4, r4, r1
   301f4:	d026      	beq.n	30244 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   301f6:	186e      	adds	r6, r5, r1
   301f8:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   301fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   301fc:	bf88      	it	hi
   301fe:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   30200:	b12e      	cbz	r6, 3020e <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   30202:	2305      	movs	r3, #5
   30204:	9500      	str	r5, [sp, #0]
   30206:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   30208:	4628      	mov	r0, r5
}
   3020a:	b002      	add	sp, #8
   3020c:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   3020e:	4621      	mov	r1, r4
   30210:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   30212:	b94b      	cbnz	r3, 30228 <metal_io_block_set+0x46>
   30214:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   30216:	4299      	cmp	r1, r3
   30218:	d111      	bne.n	3023e <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   3021a:	f3bf 8f5b 	dmb	ish
   3021e:	e7f3      	b.n	30208 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   30220:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   30224:	3b01      	subs	r3, #1
   30226:	e7f4      	b.n	30212 <metal_io_block_set+0x30>
   30228:	0788      	lsls	r0, r1, #30
   3022a:	d1f9      	bne.n	30220 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   3022c:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   30230:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   30232:	2b03      	cmp	r3, #3
   30234:	ddee      	ble.n	30214 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   30236:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   3023a:	3b04      	subs	r3, #4
   3023c:	e7f9      	b.n	30232 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   3023e:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   30242:	e7e8      	b.n	30216 <metal_io_block_set+0x34>
		return -ERANGE;
   30244:	f06f 0021 	mvn.w	r0, #33	; 0x21
   30248:	e7df      	b.n	3020a <metal_io_block_set+0x28>

0003024a <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   3024a:	2000      	movs	r0, #0
   3024c:	4770      	bx	lr

0003024e <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   3024e:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   30250:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   30252:	4602      	mov	r2, r0
   30254:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   30256:	b984      	cbnz	r4, 3027a <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   30258:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   3025a:	291f      	cmp	r1, #31
   3025c:	bf98      	it	ls
   3025e:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   30262:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   30264:	b161      	cbz	r1, 30280 <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   30266:	6880      	ldr	r0, [r0, #8]
   30268:	4283      	cmp	r3, r0
   3026a:	d209      	bcs.n	30280 <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   3026c:	6910      	ldr	r0, [r2, #16]
   3026e:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   30270:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   30274:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   30276:	bc10      	pop	{r4}
   30278:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   3027a:	4623      	mov	r3, r4
}
   3027c:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   3027e:	4718      	bx	r3
			: METAL_BAD_PHYS);
   30280:	f04f 30ff 	mov.w	r0, #4294967295
   30284:	e7f7      	b.n	30276 <metal_io_phys+0x28>

00030286 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   30286:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   30288:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   3028a:	4605      	mov	r5, r0
   3028c:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   3028e:	b9e3      	cbnz	r3, 302ca <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   30290:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   30292:	1c62      	adds	r2, r4, #1
   30294:	bf09      	itett	eq
   30296:	6843      	ldreq	r3, [r0, #4]
   30298:	400c      	andne	r4, r1
   3029a:	681c      	ldreq	r4, [r3, #0]
   3029c:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   3029e:	4621      	mov	r1, r4
   302a0:	4628      	mov	r0, r5
   302a2:	f7ff ffd4 	bl	3024e <metal_io_phys>
   302a6:	4286      	cmp	r6, r0
   302a8:	d007      	beq.n	302ba <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   302aa:	692b      	ldr	r3, [r5, #16]
   302ac:	3301      	adds	r3, #1
   302ae:	441c      	add	r4, r3
		} while (offset < io->size);
   302b0:	68ab      	ldr	r3, [r5, #8]
   302b2:	429c      	cmp	r4, r3
   302b4:	d3f3      	bcc.n	3029e <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   302b6:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   302ba:	6828      	ldr	r0, [r5, #0]
		: NULL);
   302bc:	1c43      	adds	r3, r0, #1
   302be:	d007      	beq.n	302d0 <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   302c0:	68ab      	ldr	r3, [r5, #8]
   302c2:	42a3      	cmp	r3, r4
   302c4:	d904      	bls.n	302d0 <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   302c6:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   302c8:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   302ca:	4798      	blx	r3
   302cc:	4604      	mov	r4, r0
   302ce:	e7f4      	b.n	302ba <metal_io_phys_to_virt+0x34>
		: NULL);
   302d0:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   302d2:	e7f9      	b.n	302c8 <metal_io_phys_to_virt+0x42>

000302d4 <virtqueue_create>:
{
   302d4:	b530      	push	{r4, r5, lr}
   302d6:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   302d8:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   302dc:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   302de:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   302e0:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   302e2:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   302e4:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   302e6:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   302e8:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   302ea:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   302ec:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   302f0:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   302f4:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   302f8:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   302fa:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   302fc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   30300:	1c6a      	adds	r2, r5, #1
   30302:	4413      	add	r3, r2
   30304:	426d      	negs	r5, r5
   30306:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   30308:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3030a:	6983      	ldr	r3, [r0, #24]
   3030c:	b953      	cbnz	r3, 30324 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   3030e:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   30310:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   30312:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   30314:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   30318:	db06      	blt.n	30328 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   3031a:	2300      	movs	r3, #0
   3031c:	7393      	strb	r3, [r2, #14]
   3031e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   30322:	73d3      	strb	r3, [r2, #15]
}
   30324:	2000      	movs	r0, #0
   30326:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   30328:	3301      	adds	r3, #1
   3032a:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   3032c:	e7f0      	b.n	30310 <virtqueue_create+0x3c>

0003032e <virtqueue_add_buffer>:
{
   3032e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   30332:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   30336:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   30338:	4655      	mov	r5, sl
   3033a:	2600      	movs	r6, #0
{
   3033c:	b085      	sub	sp, #20
	needed = readable + writable;
   3033e:	eb02 0803 	add.w	r8, r2, r3
{
   30342:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   30344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   30346:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   3034a:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   3034e:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   30350:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   30354:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   30358:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   3035a:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   3035c:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   3035e:	45b0      	cmp	r8, r6
   30360:	dc1a      	bgt.n	30398 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   30362:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   30364:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   30366:	eba3 030b 	sub.w	r3, r3, fp
   3036a:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   3036c:	69e3      	ldr	r3, [r4, #28]
   3036e:	8961      	ldrh	r1, [r4, #10]
   30370:	885a      	ldrh	r2, [r3, #2]
   30372:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   30374:	400a      	ands	r2, r1
   30376:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   3037a:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   3037e:	f3bf 8f5b 	dmb	ish
}
   30382:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   30384:	69e2      	ldr	r2, [r4, #28]
   30386:	8853      	ldrh	r3, [r2, #2]
   30388:	3301      	adds	r3, #1
   3038a:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   3038c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   3038e:	3301      	adds	r3, #1
   30390:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   30392:	b005      	add	sp, #20
   30394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   30398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   3039a:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   3039c:	f857 1c04 	ldr.w	r1, [r7, #-4]
   303a0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   303a4:	9302      	str	r3, [sp, #8]
   303a6:	6803      	ldr	r3, [r0, #0]
   303a8:	9203      	str	r2, [sp, #12]
   303aa:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   303ac:	6883      	ldr	r3, [r0, #8]
   303ae:	3708      	adds	r7, #8
   303b0:	4299      	cmp	r1, r3
   303b2:	bf28      	it	cs
   303b4:	f04f 31ff 	movcs.w	r1, #4294967295
   303b8:	f7ff ff49 	bl	3024e <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   303bc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   303c0:	5098      	str	r0, [r3, r2]
   303c2:	2200      	movs	r2, #0
   303c4:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   303c6:	f857 2c08 	ldr.w	r2, [r7, #-8]
   303ca:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   303cc:	9a01      	ldr	r2, [sp, #4]
   303ce:	4296      	cmp	r6, r2
   303d0:	bfac      	ite	ge
   303d2:	2200      	movge	r2, #0
   303d4:	2201      	movlt	r2, #1
		if (i >= readable)
   303d6:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   303d8:	bfd8      	it	le
   303da:	f042 0202 	orrle.w	r2, r2, #2
   303de:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   303e0:	3601      	adds	r6, #1
   303e2:	89ed      	ldrh	r5, [r5, #14]
   303e4:	e7bb      	b.n	3035e <virtqueue_add_buffer+0x30>

000303e6 <virtqueue_get_buffer>:
{
   303e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   303e8:	b350      	cbz	r0, 30440 <virtqueue_get_buffer+0x5a>
   303ea:	6a05      	ldr	r5, [r0, #32]
   303ec:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   303ee:	886b      	ldrh	r3, [r5, #2]
   303f0:	42a3      	cmp	r3, r4
   303f2:	d030      	beq.n	30456 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   303f4:	1c63      	adds	r3, r4, #1
   303f6:	85c3      	strh	r3, [r0, #46]	; 0x2e
   303f8:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   303fa:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   303fe:	3b01      	subs	r3, #1
   30400:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   30402:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   30406:	686b      	ldr	r3, [r5, #4]
   30408:	b29e      	uxth	r6, r3
	if (len)
   3040a:	b109      	cbz	r1, 30410 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   3040c:	68ad      	ldr	r5, [r5, #8]
   3040e:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   30410:	f8d0 c018 	ldr.w	ip, [r0, #24]
   30414:	b29b      	uxth	r3, r3
   30416:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   3041a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   3041e:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   30420:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   30422:	442f      	add	r7, r5
	dxp->ndescs--;
   30424:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   30426:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   30428:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   3042a:	898d      	ldrh	r5, [r1, #12]
   3042c:	076f      	lsls	r7, r5, #29
   3042e:	d50e      	bpl.n	3044e <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   30430:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   30432:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   30434:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   30436:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   30438:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   3043a:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   3043c:	b102      	cbz	r2, 30440 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   3043e:	8014      	strh	r4, [r2, #0]
}
   30440:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   30442:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   30444:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   30446:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   30448:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   3044c:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   3044e:	898d      	ldrh	r5, [r1, #12]
   30450:	07ed      	lsls	r5, r5, #31
   30452:	d4f6      	bmi.n	30442 <virtqueue_get_buffer+0x5c>
   30454:	e7ec      	b.n	30430 <virtqueue_get_buffer+0x4a>
		return NULL;
   30456:	2000      	movs	r0, #0
   30458:	e7f2      	b.n	30440 <virtqueue_get_buffer+0x5a>

0003045a <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   3045a:	6983      	ldr	r3, [r0, #24]
   3045c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   30460:	6898      	ldr	r0, [r3, #8]
   30462:	4770      	bx	lr

00030464 <virtqueue_get_available_buffer>:
{
   30464:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   30466:	f3bf 8f5b 	dmb	ish
{
   3046a:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   3046c:	69c1      	ldr	r1, [r0, #28]
{
   3046e:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   30470:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   30472:	884a      	ldrh	r2, [r1, #2]
{
   30474:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   30476:	429a      	cmp	r2, r3
   30478:	d016      	beq.n	304a8 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   3047a:	1c5a      	adds	r2, r3, #1
   3047c:	8602      	strh	r2, [r0, #48]	; 0x30
   3047e:	8942      	ldrh	r2, [r0, #10]
   30480:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   30482:	4013      	ands	r3, r2
   30484:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   30488:	888a      	ldrh	r2, [r1, #4]
   3048a:	802a      	strh	r2, [r5, #0]
   3048c:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   3048e:	6982      	ldr	r2, [r0, #24]
   30490:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   30492:	58d1      	ldr	r1, [r2, r3]
   30494:	6a80      	ldr	r0, [r0, #40]	; 0x28
   30496:	f7ff fef6 	bl	30286 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   3049a:	882a      	ldrh	r2, [r5, #0]
   3049c:	69a3      	ldr	r3, [r4, #24]
   3049e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   304a2:	689b      	ldr	r3, [r3, #8]
   304a4:	6033      	str	r3, [r6, #0]
}
   304a6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   304a8:	2000      	movs	r0, #0
   304aa:	e7fc      	b.n	304a6 <virtqueue_get_available_buffer+0x42>

000304ac <virtqueue_disable_cb>:
{
   304ac:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   304ae:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   304b0:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   304b2:	6912      	ldr	r2, [r2, #16]
   304b4:	0092      	lsls	r2, r2, #2
   304b6:	d517      	bpl.n	304e8 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   304b8:	b943      	cbnz	r3, 304cc <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   304ba:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   304bc:	69c2      	ldr	r2, [r0, #28]
   304be:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   304c0:	8944      	ldrh	r4, [r0, #10]
   304c2:	3b01      	subs	r3, #1
   304c4:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   304c6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   304ca:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   304cc:	6803      	ldr	r3, [r0, #0]
   304ce:	699b      	ldr	r3, [r3, #24]
   304d0:	2b01      	cmp	r3, #1
   304d2:	d108      	bne.n	304e6 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   304d4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   304d6:	6a02      	ldr	r2, [r0, #32]
   304d8:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   304da:	8940      	ldrh	r0, [r0, #10]
   304dc:	3b01      	subs	r3, #1
   304de:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   304e0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   304e4:	8093      	strh	r3, [r2, #4]
}
   304e6:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   304e8:	b923      	cbnz	r3, 304f4 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   304ea:	69c2      	ldr	r2, [r0, #28]
   304ec:	8813      	ldrh	r3, [r2, #0]
   304ee:	f043 0301 	orr.w	r3, r3, #1
   304f2:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   304f4:	6803      	ldr	r3, [r0, #0]
   304f6:	699b      	ldr	r3, [r3, #24]
   304f8:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   304fa:	bf01      	itttt	eq
   304fc:	6a02      	ldreq	r2, [r0, #32]
   304fe:	8813      	ldrheq	r3, [r2, #0]
   30500:	f043 0301 	orreq.w	r3, r3, #1
   30504:	8013      	strheq	r3, [r2, #0]
}
   30506:	e7ee      	b.n	304e6 <virtqueue_disable_cb+0x3a>

00030508 <virtqueue_kick>:
{
   30508:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   3050a:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   3050e:	6803      	ldr	r3, [r0, #0]
{
   30510:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   30512:	691a      	ldr	r2, [r3, #16]
   30514:	699b      	ldr	r3, [r3, #24]
   30516:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   3051a:	d01a      	beq.n	30552 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3051c:	b97b      	cbnz	r3, 3053e <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   3051e:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   30520:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   30522:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   30524:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   30526:	3b01      	subs	r3, #1
   30528:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   3052c:	8892      	ldrh	r2, [r2, #4]
   3052e:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   30530:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   30532:	b29b      	uxth	r3, r3
   30534:	429a      	cmp	r2, r3
   30536:	d814      	bhi.n	30562 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   30538:	2300      	movs	r3, #0
   3053a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   3053c:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   3053e:	2b01      	cmp	r3, #1
   30540:	d1fa      	bne.n	30538 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   30542:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   30544:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   30546:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   30548:	6941      	ldr	r1, [r0, #20]
   3054a:	3b01      	subs	r3, #1
   3054c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   30550:	e7ec      	b.n	3052c <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   30552:	b963      	cbnz	r3, 3056e <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   30554:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   30556:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   30558:	43db      	mvns	r3, r3
   3055a:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   3055e:	2b00      	cmp	r3, #0
   30560:	d0ea      	beq.n	30538 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   30562:	6923      	ldr	r3, [r4, #16]
   30564:	2b00      	cmp	r3, #0
   30566:	d0e7      	beq.n	30538 <virtqueue_kick+0x30>
		vq->notify(vq);
   30568:	4620      	mov	r0, r4
   3056a:	4798      	blx	r3
   3056c:	e7e4      	b.n	30538 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   3056e:	2b01      	cmp	r3, #1
   30570:	d1e2      	bne.n	30538 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   30572:	69c3      	ldr	r3, [r0, #28]
   30574:	e7ef      	b.n	30556 <virtqueue_kick+0x4e>

00030576 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   30576:	69c3      	ldr	r3, [r0, #28]
   30578:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   3057a:	8859      	ldrh	r1, [r3, #2]
   3057c:	4291      	cmp	r1, r2
   3057e:	d00a      	beq.n	30596 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   30580:	8941      	ldrh	r1, [r0, #10]
   30582:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   30584:	400a      	ands	r2, r1
   30586:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   3058a:	889a      	ldrh	r2, [r3, #4]
   3058c:	6983      	ldr	r3, [r0, #24]
   3058e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   30592:	6898      	ldr	r0, [r3, #8]
	return len;
   30594:	4770      	bx	lr
		return 0;
   30596:	2000      	movs	r0, #0
}
   30598:	4770      	bx	lr

0003059a <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   3059a:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   3059e:	68c3      	ldr	r3, [r0, #12]
   305a0:	b103      	cbz	r3, 305a4 <virtqueue_notification+0xa>
		vq->callback(vq);
   305a2:	4718      	bx	r3
}
   305a4:	4770      	bx	lr

000305a6 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   305a6:	f04f 32ff 	mov.w	r2, #4294967295
   305aa:	f04f 33ff 	mov.w	r3, #4294967295
   305ae:	f7f5 ba3f 	b.w	25a30 <z_impl_k_sem_take>

000305b2 <rpmsg_unregister_endpoint>:
{
   305b2:	b570      	push	{r4, r5, r6, lr}
   305b4:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   305b6:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   305b8:	f105 0658 	add.w	r6, r5, #88	; 0x58
   305bc:	4630      	mov	r0, r6
   305be:	f7ff fff2 	bl	305a6 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   305c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   305c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   305c8:	2b7f      	cmp	r3, #127	; 0x7f
   305ca:	d80b      	bhi.n	305e4 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   305cc:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   305ce:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   305d0:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   305d2:	f003 031f 	and.w	r3, r3, #31
   305d6:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   305d8:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   305dc:	ea23 0302 	bic.w	r3, r3, r2
   305e0:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   305e4:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   305e8:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   305ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   305ec:	f104 0334 	add.w	r3, r4, #52	; 0x34
   305f0:	6011      	str	r1, [r2, #0]
	node->next = node;
   305f2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   305f6:	2300      	movs	r3, #0
   305f8:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   305fa:	4630      	mov	r0, r6
}
   305fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30600:	f7f5 b9f0 	b.w	259e4 <z_impl_k_sem_give>

00030604 <rpmsg_send_ns_message>:
{
   30604:	b530      	push	{r4, r5, lr}
   30606:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   30608:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   3060a:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   3060c:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   3060e:	2220      	movs	r2, #32
   30610:	4601      	mov	r1, r0
   30612:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   30614:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   30616:	f001 fa1d 	bl	31a54 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   3061a:	2328      	movs	r3, #40	; 0x28
   3061c:	2201      	movs	r2, #1
   3061e:	4629      	mov	r1, r5
   30620:	e9cd 3200 	strd	r3, r2, [sp]
   30624:	4620      	mov	r0, r4
   30626:	2235      	movs	r2, #53	; 0x35
   30628:	ab02      	add	r3, sp, #8
   3062a:	f7f4 fb6d 	bl	24d08 <rpmsg_send_offchannel_raw>
}
   3062e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   30632:	b00d      	add	sp, #52	; 0x34
   30634:	bd30      	pop	{r4, r5, pc}

00030636 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   30636:	b128      	cbz	r0, 30644 <rpmsg_hold_rx_buffer+0xe>
   30638:	6a00      	ldr	r0, [r0, #32]
   3063a:	b118      	cbz	r0, 30644 <rpmsg_hold_rx_buffer+0xe>
   3063c:	b111      	cbz	r1, 30644 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   3063e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   30640:	b103      	cbz	r3, 30644 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   30642:	4718      	bx	r3
}
   30644:	4770      	bx	lr

00030646 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   30646:	b130      	cbz	r0, 30656 <rpmsg_release_rx_buffer+0x10>
   30648:	6a00      	ldr	r0, [r0, #32]
   3064a:	b120      	cbz	r0, 30656 <rpmsg_release_rx_buffer+0x10>
   3064c:	b119      	cbz	r1, 30656 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   3064e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   30652:	b103      	cbz	r3, 30656 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   30654:	4718      	bx	r3
}
   30656:	4770      	bx	lr

00030658 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   30658:	b130      	cbz	r0, 30668 <rpmsg_get_tx_payload_buffer+0x10>
   3065a:	6a00      	ldr	r0, [r0, #32]
   3065c:	b120      	cbz	r0, 30668 <rpmsg_get_tx_payload_buffer+0x10>
   3065e:	b119      	cbz	r1, 30668 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   30660:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   30664:	b103      	cbz	r3, 30668 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   30666:	4718      	bx	r3
}
   30668:	2000      	movs	r0, #0
   3066a:	4770      	bx	lr

0003066c <rpmsg_get_endpoint>:
{
   3066c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30670:	4606      	mov	r6, r0
   30672:	4688      	mov	r8, r1
   30674:	4617      	mov	r7, r2
   30676:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   30678:	6804      	ldr	r4, [r0, #0]
   3067a:	42a6      	cmp	r6, r4
   3067c:	d101      	bne.n	30682 <rpmsg_get_endpoint+0x16>
	return NULL;
   3067e:	2500      	movs	r5, #0
   30680:	e023      	b.n	306ca <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   30682:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   30684:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   30688:	d002      	beq.n	30690 <rpmsg_get_endpoint+0x24>
   3068a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3068c:	42bb      	cmp	r3, r7
   3068e:	d01c      	beq.n	306ca <rpmsg_get_endpoint+0x5e>
		if (name)
   30690:	f1b8 0f00 	cmp.w	r8, #0
   30694:	d101      	bne.n	3069a <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   30696:	6824      	ldr	r4, [r4, #0]
   30698:	e7ef      	b.n	3067a <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   3069a:	2220      	movs	r2, #32
   3069c:	4641      	mov	r1, r8
   3069e:	4628      	mov	r0, r5
   306a0:	f001 f9c6 	bl	31a30 <strncmp>
		if (!name || !name_match)
   306a4:	2800      	cmp	r0, #0
   306a6:	d1f6      	bne.n	30696 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   306a8:	f1b9 3fff 	cmp.w	r9, #4294967295
   306ac:	d002      	beq.n	306b4 <rpmsg_get_endpoint+0x48>
   306ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   306b0:	454b      	cmp	r3, r9
   306b2:	d00a      	beq.n	306ca <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   306b4:	1c7b      	adds	r3, r7, #1
   306b6:	d00b      	beq.n	306d0 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   306b8:	6824      	ldr	r4, [r4, #0]
   306ba:	42b4      	cmp	r4, r6
   306bc:	d0df      	beq.n	3067e <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   306be:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   306c2:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   306c6:	429f      	cmp	r7, r3
   306c8:	d1e7      	bne.n	3069a <rpmsg_get_endpoint+0x2e>
}
   306ca:	4628      	mov	r0, r5
   306cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   306d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   306d2:	3301      	adds	r3, #1
   306d4:	d0f9      	beq.n	306ca <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   306d6:	6824      	ldr	r4, [r4, #0]
   306d8:	42b4      	cmp	r4, r6
   306da:	d0d0      	beq.n	3067e <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   306dc:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   306e0:	e7d6      	b.n	30690 <rpmsg_get_endpoint+0x24>

000306e2 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   306e2:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   306e4:	4604      	mov	r4, r0
   306e6:	b190      	cbz	r0, 3070e <rpmsg_destroy_ept+0x2c>
   306e8:	6a03      	ldr	r3, [r0, #32]
   306ea:	b183      	cbz	r3, 3070e <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   306ec:	7802      	ldrb	r2, [r0, #0]
   306ee:	b14a      	cbz	r2, 30704 <rpmsg_destroy_ept+0x22>
   306f0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   306f4:	b133      	cbz	r3, 30704 <rpmsg_destroy_ept+0x22>
   306f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   306f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   306fc:	d302      	bcc.n	30704 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   306fe:	2101      	movs	r1, #1
   30700:	f7ff ff80 	bl	30604 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   30704:	4620      	mov	r0, r4
}
   30706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   3070a:	f7ff bf52 	b.w	305b2 <rpmsg_unregister_endpoint>
}
   3070e:	bd10      	pop	{r4, pc}

00030710 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   30710:	f851 3c08 	ldr.w	r3, [r1, #-8]
   30714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   30718:	f841 3c08 	str.w	r3, [r1, #-8]
}
   3071c:	4770      	bx	lr

0003071e <rpmsg_virtio_tx_callback>:
}
   3071e:	4770      	bx	lr

00030720 <k_sem_give>:
   30720:	f7f5 b960 	b.w	259e4 <z_impl_k_sem_give>

00030724 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   30724:	f04f 32ff 	mov.w	r2, #4294967295
   30728:	f04f 33ff 	mov.w	r3, #4294967295
   3072c:	f7f5 b980 	b.w	25a30 <z_impl_k_sem_take>

00030730 <rpmsg_virtio_release_tx_buffer>:
{
   30730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30732:	460c      	mov	r4, r1
   30734:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   30736:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   3073a:	f100 0758 	add.w	r7, r0, #88	; 0x58
   3073e:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   30740:	b2b6      	uxth	r6, r6
   30742:	f7ff ffef 	bl	30724 <__metal_mutex_acquire>
	r_desc->idx = idx;
   30746:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   3074a:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   3074e:	f1a4 0310 	sub.w	r3, r4, #16
   30752:	f844 2c0c 	str.w	r2, [r4, #-12]
   30756:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   3075a:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   3075e:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   30762:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   30766:	4638      	mov	r0, r7
   30768:	6013      	str	r3, [r2, #0]
   3076a:	f7ff ffd9 	bl	30720 <k_sem_give>
}
   3076e:	2000      	movs	r0, #0
   30770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030772 <rpmsg_virtio_ns_callback>:
{
   30772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   30776:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   30778:	2a28      	cmp	r2, #40	; 0x28
{
   3077a:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   3077c:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   30780:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   30782:	d126      	bne.n	307d2 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   30784:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   30786:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   30788:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   3078a:	42a1      	cmp	r1, r4
   3078c:	bf28      	it	cs
   3078e:	f04f 31ff 	movcs.w	r1, #4294967295
   30792:	2320      	movs	r3, #32
   30794:	466a      	mov	r2, sp
   30796:	f7ff fcb1 	bl	300fc <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   3079a:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   3079e:	f8d7 8020 	ldr.w	r8, [r7, #32]
   307a2:	4630      	mov	r0, r6
   307a4:	f7ff ffbe 	bl	30724 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   307a8:	4643      	mov	r3, r8
   307aa:	f04f 32ff 	mov.w	r2, #4294967295
   307ae:	4669      	mov	r1, sp
   307b0:	4628      	mov	r0, r5
   307b2:	f7ff ff5b 	bl	3066c <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   307b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   307b8:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   307ba:	07db      	lsls	r3, r3, #31
   307bc:	d519      	bpl.n	307f2 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   307be:	b960      	cbnz	r0, 307da <rpmsg_virtio_ns_callback+0x68>
   307c0:	4630      	mov	r0, r6
   307c2:	f7ff ffad 	bl	30720 <k_sem_give>
		if (rdev->ns_unbind_cb)
   307c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   307c8:	b11b      	cbz	r3, 307d2 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   307ca:	4642      	mov	r2, r8
   307cc:	4669      	mov	r1, sp
   307ce:	4628      	mov	r0, r5
   307d0:	4798      	blx	r3
}
   307d2:	2000      	movs	r0, #0
   307d4:	b008      	add	sp, #32
   307d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   307da:	f04f 33ff 	mov.w	r3, #4294967295
   307de:	6283      	str	r3, [r0, #40]	; 0x28
   307e0:	4630      	mov	r0, r6
   307e2:	f7ff ff9d 	bl	30720 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   307e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   307e8:	2b00      	cmp	r3, #0
   307ea:	d0ec      	beq.n	307c6 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   307ec:	4620      	mov	r0, r4
   307ee:	4798      	blx	r3
   307f0:	e7e9      	b.n	307c6 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   307f2:	b920      	cbnz	r0, 307fe <rpmsg_virtio_ns_callback+0x8c>
   307f4:	4630      	mov	r0, r6
   307f6:	f7ff ff93 	bl	30720 <k_sem_give>
			if (rdev->ns_bind_cb)
   307fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   307fc:	e7e4      	b.n	307c8 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   307fe:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   30802:	4630      	mov	r0, r6
   30804:	f7ff ff8c 	bl	30720 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   30808:	e7e3      	b.n	307d2 <rpmsg_virtio_ns_callback+0x60>

0003080a <rpmsg_virtio_get_rx_buffer>:
{
   3080a:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   3080c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   30810:	4613      	mov	r3, r2
   30812:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   30814:	b925      	cbnz	r5, 30820 <rpmsg_virtio_get_rx_buffer+0x16>
}
   30816:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   30818:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   3081c:	f7ff bde3 	b.w	303e6 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   30820:	2d01      	cmp	r5, #1
   30822:	d106      	bne.n	30832 <rpmsg_virtio_get_rx_buffer+0x28>
}
   30824:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   30826:	460a      	mov	r2, r1
   30828:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   3082c:	4619      	mov	r1, r3
   3082e:	f7ff be19 	b.w	30464 <virtqueue_get_available_buffer>
}
   30832:	2000      	movs	r0, #0
   30834:	bc30      	pop	{r4, r5}
   30836:	4770      	bx	lr

00030838 <rpmsg_virtio_return_buffer>:
{
   30838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3083a:	460c      	mov	r4, r1
   3083c:	4619      	mov	r1, r3
   3083e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   30842:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   30844:	b95d      	cbnz	r5, 3085e <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   30846:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   30848:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   3084c:	2301      	movs	r3, #1
   3084e:	462a      	mov	r2, r5
   30850:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   30854:	a902      	add	r1, sp, #8
   30856:	f7ff fd6a 	bl	3032e <virtqueue_add_buffer>
}
   3085a:	b004      	add	sp, #16
   3085c:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   3085e:	2d01      	cmp	r5, #1
   30860:	d1fb      	bne.n	3085a <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   30862:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   30866:	b004      	add	sp, #16
   30868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   3086c:	f7f4 ba30 	b.w	24cd0 <virtqueue_add_consumed_buffer>

00030870 <rpmsg_virtio_rx_callback>:
{
   30870:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   30874:	6803      	ldr	r3, [r0, #0]
   30876:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   30878:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
   3087c:	4630      	mov	r0, r6
   3087e:	f7ff ff51 	bl	30724 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   30882:	4638      	mov	r0, r7
   30884:	f10d 020a 	add.w	r2, sp, #10
   30888:	a903      	add	r1, sp, #12
   3088a:	f7ff ffbe 	bl	3080a <rpmsg_virtio_get_rx_buffer>
   3088e:	4604      	mov	r4, r0
   30890:	4630      	mov	r0, r6
   30892:	f7ff ff45 	bl	30720 <k_sem_give>
	while (rp_hdr) {
   30896:	2c00      	cmp	r4, #0
   30898:	d041      	beq.n	3091e <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
   3089a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   3089e:	4630      	mov	r0, r6
   308a0:	60a3      	str	r3, [r4, #8]
   308a2:	f7ff ff3f 	bl	30724 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   308a6:	f04f 33ff 	mov.w	r3, #4294967295
   308aa:	2100      	movs	r1, #0
   308ac:	4638      	mov	r0, r7
   308ae:	6862      	ldr	r2, [r4, #4]
   308b0:	f7ff fedc 	bl	3066c <rpmsg_get_endpoint>
   308b4:	4605      	mov	r5, r0
   308b6:	4630      	mov	r0, r6
   308b8:	f7ff ff32 	bl	30720 <k_sem_give>
		if (ept) {
   308bc:	b17d      	cbz	r5, 308de <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   308be:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   308c0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   308c2:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   308c4:	bf08      	it	eq
   308c6:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   308c8:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   308ca:	bf08      	it	eq
   308cc:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   308ce:	6823      	ldr	r3, [r4, #0]
   308d0:	89a2      	ldrh	r2, [r4, #12]
   308d2:	9100      	str	r1, [sp, #0]
   308d4:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   308d8:	f104 0110 	add.w	r1, r4, #16
   308dc:	47c0      	blx	r8
   308de:	4630      	mov	r0, r6
   308e0:	f7ff ff20 	bl	30724 <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   308e4:	68a3      	ldr	r3, [r4, #8]
   308e6:	2b00      	cmp	r3, #0
   308e8:	db06      	blt.n	308f8 <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   308ea:	4621      	mov	r1, r4
   308ec:	4638      	mov	r0, r7
   308ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   308f2:	9a03      	ldr	r2, [sp, #12]
   308f4:	f7ff ffa0 	bl	30838 <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   308f8:	4638      	mov	r0, r7
   308fa:	f10d 020a 	add.w	r2, sp, #10
   308fe:	a903      	add	r1, sp, #12
   30900:	f7ff ff83 	bl	3080a <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   30904:	4604      	mov	r4, r0
   30906:	b118      	cbz	r0, 30910 <rpmsg_virtio_rx_callback+0xa0>
   30908:	4630      	mov	r0, r6
   3090a:	f7ff ff09 	bl	30720 <k_sem_give>
	while (rp_hdr) {
   3090e:	e7c4      	b.n	3089a <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
   30910:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   30914:	f7ff fdf8 	bl	30508 <virtqueue_kick>
   30918:	4630      	mov	r0, r6
   3091a:	f7ff ff01 	bl	30720 <k_sem_give>
}
   3091e:	b004      	add	sp, #16
   30920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030924 <rpmsg_virtio_release_rx_buffer>:
{
   30924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30926:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   30928:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   3092c:	f100 0758 	add.w	r7, r0, #88	; 0x58
   30930:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   30932:	b2b6      	uxth	r6, r6
{
   30934:	460d      	mov	r5, r1
   30936:	f7ff fef5 	bl	30724 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   3093a:	4631      	mov	r1, r6
   3093c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   30940:	f7ff fd8b 	bl	3045a <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30944:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   30946:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30948:	f1a5 0110 	sub.w	r1, r5, #16
   3094c:	4620      	mov	r0, r4
   3094e:	f7ff ff73 	bl	30838 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   30952:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   30956:	f7ff fdd7 	bl	30508 <virtqueue_kick>
   3095a:	4638      	mov	r0, r7
}
   3095c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30960:	f7ff bede 	b.w	30720 <k_sem_give>

00030964 <rpmsg_virtio_send_offchannel_nocopy>:
{
   30964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   30968:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
   3096c:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
   30970:	2300      	movs	r3, #0
{
   30972:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   30974:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   30976:	f8ad 301e 	strh.w	r3, [sp, #30]
{
   3097a:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   3097c:	2310      	movs	r3, #16
	rp_hdr.src = src;
   3097e:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   30982:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
   30984:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   30988:	f8ad 701c 	strh.w	r7, [sp, #28]
   3098c:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   3098e:	f8d0 c008 	ldr.w	ip, [r0, #8]
   30992:	1a71      	subs	r1, r6, r1
   30994:	eb0d 0203 	add.w	r2, sp, r3
   30998:	4561      	cmp	r1, ip
   3099a:	bf28      	it	cs
   3099c:	f04f 31ff 	movcs.w	r1, #4294967295
	metal_mutex_acquire(&rdev->lock);
   309a0:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   309a4:	f7ff fbe3 	bl	3016e <metal_io_block_write>
   309a8:	4640      	mov	r0, r8
   309aa:	f7ff febb 	bl	30724 <__metal_mutex_acquire>
   309ae:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	idx = hdr->reserved;
   309b2:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   309b4:	699b      	ldr	r3, [r3, #24]
   309b6:	b9cb      	cbnz	r3, 309ec <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
   309b8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   309bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   309c0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   309c4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   309c6:	b9c3      	cbnz	r3, 309fa <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
   309c8:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   309cc:	9600      	str	r6, [sp, #0]
   309ce:	2201      	movs	r2, #1
   309d0:	a902      	add	r1, sp, #8
   309d2:	f7ff fcac 	bl	3032e <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
   309d6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   309da:	f7ff fd95 	bl	30508 <virtqueue_kick>
   309de:	4640      	mov	r0, r8
   309e0:	f7ff fe9e 	bl	30720 <k_sem_give>
}
   309e4:	4638      	mov	r0, r7
   309e6:	b008      	add	sp, #32
   309e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   309ec:	4629      	mov	r1, r5
   309ee:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   309f2:	f7ff fd32 	bl	3045a <virtqueue_get_buffer_length>
   309f6:	4602      	mov	r2, r0
   309f8:	e7e0      	b.n	309bc <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
   309fa:	2b01      	cmp	r3, #1
   309fc:	d1eb      	bne.n	309d6 <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   309fe:	4629      	mov	r1, r5
   30a00:	f7f4 f966 	bl	24cd0 <virtqueue_add_consumed_buffer>
   30a04:	e7e7      	b.n	309d6 <rpmsg_virtio_send_offchannel_nocopy+0x72>

00030a06 <rpmsg_virtio_shm_pool_get_buffer>:
{
   30a06:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   30a08:	b148      	cbz	r0, 30a1e <rpmsg_virtio_shm_pool_get_buffer+0x18>
   30a0a:	b149      	cbz	r1, 30a20 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   30a0c:	6843      	ldr	r3, [r0, #4]
   30a0e:	428b      	cmp	r3, r1
   30a10:	d306      	bcc.n	30a20 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   30a12:	6882      	ldr	r2, [r0, #8]
   30a14:	6804      	ldr	r4, [r0, #0]
   30a16:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   30a18:	1a5b      	subs	r3, r3, r1
   30a1a:	6043      	str	r3, [r0, #4]
	return buffer;
   30a1c:	18a0      	adds	r0, r4, r2
}
   30a1e:	bd10      	pop	{r4, pc}
		return NULL;
   30a20:	2000      	movs	r0, #0
   30a22:	e7fc      	b.n	30a1e <rpmsg_virtio_shm_pool_get_buffer+0x18>

00030a24 <rpmsg_virtio_get_tx_payload_buffer>:
{
   30a24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   30a28:	4605      	mov	r5, r0
   30a2a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   30a2e:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   30a30:	6a03      	ldr	r3, [r0, #32]
   30a32:	4617      	mov	r7, r2
   30a34:	681b      	ldr	r3, [r3, #0]
   30a36:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   30a38:	0743      	lsls	r3, r0, #29
   30a3a:	d403      	bmi.n	30a44 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   30a3c:	2000      	movs	r0, #0
}
   30a3e:	b002      	add	sp, #8
   30a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   30a44:	f643 2398 	movw	r3, #15000	; 0x3a98
   30a48:	2f00      	cmp	r7, #0
   30a4a:	bf18      	it	ne
   30a4c:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   30a4e:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   30a52:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   30a56:	4640      	mov	r0, r8
   30a58:	f7ff fe64 	bl	30724 <__metal_mutex_acquire>
	return list->next == list;
   30a5c:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   30a60:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   30a64:	4554      	cmp	r4, sl
   30a66:	f8d3 9018 	ldr.w	r9, [r3, #24]
   30a6a:	d025      	beq.n	30ab8 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   30a6c:	b324      	cbz	r4, 30ab8 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   30a6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   30a72:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   30a74:	6822      	ldr	r2, [r4, #0]
   30a76:	601a      	str	r2, [r3, #0]
	node->next = node;
   30a78:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   30a7c:	f1b9 0f00 	cmp.w	r9, #0
   30a80:	d10e      	bne.n	30aa0 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   30a82:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   30a86:	6033      	str	r3, [r6, #0]
   30a88:	4640      	mov	r0, r8
   30a8a:	f7ff fe49 	bl	30720 <k_sem_give>
	rp_hdr->reserved = idx;
   30a8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30a92:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   30a96:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   30a98:	6833      	ldr	r3, [r6, #0]
   30a9a:	3b10      	subs	r3, #16
   30a9c:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30a9e:	e7ce      	b.n	30a3e <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   30aa0:	f1b9 0f01 	cmp.w	r9, #1
   30aa4:	d1f0      	bne.n	30a88 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   30aa6:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   30aa8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   30aac:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   30ab0:	f7ff fcd3 	bl	3045a <virtqueue_get_buffer_length>
   30ab4:	6030      	str	r0, [r6, #0]
   30ab6:	e7e7      	b.n	30a88 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   30ab8:	f1b9 0f00 	cmp.w	r9, #0
   30abc:	d12a      	bne.n	30b14 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   30abe:	4631      	mov	r1, r6
   30ac0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30ac4:	f10d 0206 	add.w	r2, sp, #6
   30ac8:	f7ff fc8d 	bl	303e6 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   30acc:	4604      	mov	r4, r0
   30ace:	2800      	cmp	r0, #0
   30ad0:	d1da      	bne.n	30a88 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   30ad2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   30ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   30ad8:	b953      	cbnz	r3, 30af0 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   30ada:	4640      	mov	r0, r8
   30adc:	f7ff fe20 	bl	30720 <k_sem_give>
		if (rp_hdr || !tick_count)
   30ae0:	2f00      	cmp	r7, #0
   30ae2:	d0ab      	beq.n	30a3c <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   30ae4:	2021      	movs	r0, #33	; 0x21
   30ae6:	2100      	movs	r1, #0
   30ae8:	f7f5 fca0 	bl	2642c <z_impl_k_sleep>
		tick_count--;
   30aec:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   30aee:	e7b2      	b.n	30a56 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   30af0:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   30af4:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   30af8:	f7ff ff85 	bl	30a06 <rpmsg_virtio_shm_pool_get_buffer>
   30afc:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   30afe:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   30b02:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   30b06:	6033      	str	r3, [r6, #0]
   30b08:	4640      	mov	r0, r8
   30b0a:	f7ff fe09 	bl	30720 <k_sem_give>
		if (rp_hdr || !tick_count)
   30b0e:	2c00      	cmp	r4, #0
   30b10:	d0e6      	beq.n	30ae0 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   30b12:	e7bc      	b.n	30a8e <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   30b14:	f1b9 0f01 	cmp.w	r9, #1
   30b18:	d1df      	bne.n	30ada <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   30b1a:	4632      	mov	r2, r6
   30b1c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30b20:	f10d 0106 	add.w	r1, sp, #6
   30b24:	f7ff fc9e 	bl	30464 <virtqueue_get_available_buffer>
   30b28:	4604      	mov	r4, r0
   30b2a:	e7ed      	b.n	30b08 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

00030b2c <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   30b2c:	b120      	cbz	r0, 30b38 <rpmsg_virtio_init_shm_pool+0xc>
   30b2e:	b119      	cbz	r1, 30b38 <rpmsg_virtio_init_shm_pool+0xc>
   30b30:	b112      	cbz	r2, 30b38 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   30b32:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   30b36:	6001      	str	r1, [r0, #0]
}
   30b38:	4770      	bx	lr

00030b3a <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   30b3a:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   30b3c:	4604      	mov	r4, r0
   30b3e:	b918      	cbnz	r0, 30b48 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   30b40:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   30b42:	3834      	subs	r0, #52	; 0x34
   30b44:	f7ff fdcd 	bl	306e2 <rpmsg_destroy_ept>
	return list->next == list;
   30b48:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   30b4a:	4284      	cmp	r4, r0
   30b4c:	d1f9      	bne.n	30b42 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   30b4e:	2300      	movs	r3, #0
		rvdev->svq = 0;
   30b50:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   30b54:	e7f4      	b.n	30b40 <rpmsg_deinit_vdev+0x6>

00030b56 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   30b56:	f7f4 bb37 	b.w	251c8 <_DoInit>

00030b5a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   30b5a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   30b5c:	f7ff fffb 	bl	30b56 <SEGGER_RTT_Init>

	return 0;
}
   30b60:	2000      	movs	r0, #0
   30b62:	bd08      	pop	{r3, pc}

00030b64 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   30b64:	4770      	bx	lr

00030b66 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   30b66:	b140      	cbz	r0, 30b7a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   30b68:	68c3      	ldr	r3, [r0, #12]
   30b6a:	7858      	ldrb	r0, [r3, #1]
   30b6c:	f010 0001 	ands.w	r0, r0, #1
   30b70:	bf1e      	ittt	ne
   30b72:	7818      	ldrbne	r0, [r3, #0]
   30b74:	fab0 f080 	clzne	r0, r0
   30b78:	0940      	lsrne	r0, r0, #5
}
   30b7a:	4770      	bx	lr

00030b7c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30b7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   30b7e:	ab0b      	add	r3, sp, #44	; 0x2c
   30b80:	9305      	str	r3, [sp, #20]
   30b82:	9303      	str	r3, [sp, #12]
   30b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30b86:	2201      	movs	r2, #1
   30b88:	9302      	str	r3, [sp, #8]
   30b8a:	2300      	movs	r3, #0
   30b8c:	4618      	mov	r0, r3
   30b8e:	e9cd 3300 	strd	r3, r3, [sp]
   30b92:	f7de fc4b 	bl	f42c <z_impl_z_log_msg_runtime_vcreate>
}
   30b96:	b007      	add	sp, #28
   30b98:	f85d fb04 	ldr.w	pc, [sp], #4

00030b9c <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   30b9c:	f000 bdf1 	b.w	31782 <memset>

00030ba0 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30ba0:	f000 bdb5 	b.w	3170e <memcpy>

00030ba4 <k_heap_init>:
{
   30ba4:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   30ba6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   30baa:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30bae:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   30bb0:	f7f9 bc8d 	b.w	2a4ce <sys_heap_init>

00030bb4 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   30bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30bb8:	b085      	sub	sp, #20
   30bba:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   30bbe:	4607      	mov	r7, r0
   30bc0:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30bc2:	4650      	mov	r0, sl
   30bc4:	4621      	mov	r1, r4
{
   30bc6:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30bc8:	f000 fbcd 	bl	31366 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30bcc:	f1b4 3fff 	cmp.w	r4, #4294967295
   30bd0:	bf08      	it	eq
   30bd2:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30bd6:	4605      	mov	r5, r0
   30bd8:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30bda:	bf04      	itt	eq
   30bdc:	f04f 35ff 	moveq.w	r5, #4294967295
   30be0:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   30be4:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   30be8:	f04f 0320 	mov.w	r3, #32
   30bec:	f3ef 8411 	mrs	r4, BASEPRI
   30bf0:	f383 8812 	msr	BASEPRI_MAX, r3
   30bf4:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30bf8:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   30bfc:	464a      	mov	r2, r9
   30bfe:	4641      	mov	r1, r8
   30c00:	4638      	mov	r0, r7
   30c02:	f7f9 fbfd 	bl	2a400 <sys_heap_aligned_alloc>
   30c06:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   30c08:	f7f5 fde4 	bl	267d4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   30c0c:	9b03      	ldr	r3, [sp, #12]
   30c0e:	b13b      	cbz	r3, 30c20 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   30c10:	f384 8811 	msr	BASEPRI, r4
   30c14:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   30c18:	4618      	mov	r0, r3
   30c1a:	b005      	add	sp, #20
   30c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   30c20:	1a28      	subs	r0, r5, r0
   30c22:	eb66 0101 	sbc.w	r1, r6, r1
   30c26:	2801      	cmp	r0, #1
   30c28:	f171 0200 	sbcs.w	r2, r1, #0
   30c2c:	dbf0      	blt.n	30c10 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30c2e:	e9cd 0100 	strd	r0, r1, [sp]
   30c32:	465a      	mov	r2, fp
   30c34:	4621      	mov	r1, r4
   30c36:	4650      	mov	r0, sl
   30c38:	f7f5 fa74 	bl	26124 <z_pend_curr>
	__asm__ volatile(
   30c3c:	f04f 0320 	mov.w	r3, #32
   30c40:	f3ef 8411 	mrs	r4, BASEPRI
   30c44:	f383 8812 	msr	BASEPRI_MAX, r3
   30c48:	f3bf 8f6f 	isb	sy
	return k;
   30c4c:	e7d6      	b.n	30bfc <k_heap_aligned_alloc+0x48>

00030c4e <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   30c4e:	b538      	push	{r3, r4, r5, lr}
   30c50:	4604      	mov	r4, r0
   30c52:	f04f 0320 	mov.w	r3, #32
   30c56:	f3ef 8511 	mrs	r5, BASEPRI
   30c5a:	f383 8812 	msr	BASEPRI_MAX, r3
   30c5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   30c62:	f7f9 fb95 	bl	2a390 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   30c66:	f104 000c 	add.w	r0, r4, #12
   30c6a:	f000 fafc 	bl	31266 <z_unpend_all>
   30c6e:	b130      	cbz	r0, 30c7e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   30c70:	4629      	mov	r1, r5
   30c72:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   30c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   30c7a:	f7f5 bab7 	b.w	261ec <z_reschedule>
	__asm__ volatile(
   30c7e:	f385 8811 	msr	BASEPRI, r5
   30c82:	f3bf 8f6f 	isb	sy
}
   30c86:	bd38      	pop	{r3, r4, r5, pc}

00030c88 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   30c88:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   30c8c:	4313      	orrs	r3, r2
   30c8e:	f013 0303 	ands.w	r3, r3, #3
   30c92:	d10c      	bne.n	30cae <create_free_list+0x26>
	slab->free_list = NULL;
   30c94:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30c96:	6881      	ldr	r1, [r0, #8]
   30c98:	4299      	cmp	r1, r3
   30c9a:	d801      	bhi.n	30ca0 <create_free_list+0x18>
	return 0;
   30c9c:	2000      	movs	r0, #0
   30c9e:	4770      	bx	lr
		*(char **)p = slab->free_list;
   30ca0:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30ca2:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   30ca4:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   30ca6:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   30ca8:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   30caa:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   30cac:	e7f3      	b.n	30c96 <create_free_list+0xe>
		return -EINVAL;
   30cae:	f06f 0015 	mvn.w	r0, #21
}
   30cb2:	4770      	bx	lr

00030cb4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   30cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30cb6:	4604      	mov	r4, r0
   30cb8:	460d      	mov	r5, r1
	__asm__ volatile(
   30cba:	f04f 0320 	mov.w	r3, #32
   30cbe:	f3ef 8611 	mrs	r6, BASEPRI
   30cc2:	f383 8812 	msr	BASEPRI_MAX, r3
   30cc6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   30cca:	6947      	ldr	r7, [r0, #20]
   30ccc:	b97f      	cbnz	r7, 30cee <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   30cce:	f000 fa84 	bl	311da <z_unpend_first_thread>

		if (pending_thread != NULL) {
   30cd2:	b160      	cbz	r0, 30cee <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   30cd4:	682a      	ldr	r2, [r5, #0]
   30cd6:	f8c0 709c 	str.w	r7, [r0, #156]	; 0x9c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   30cda:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   30cdc:	f000 fa46 	bl	3116c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   30ce0:	4631      	mov	r1, r6
   30ce2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   30ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   30cea:	f7f5 ba7f 	b.w	261ec <z_reschedule>
	**(char ***) mem = slab->free_list;
   30cee:	682b      	ldr	r3, [r5, #0]
   30cf0:	6962      	ldr	r2, [r4, #20]
   30cf2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   30cf4:	682b      	ldr	r3, [r5, #0]
   30cf6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   30cf8:	69a3      	ldr	r3, [r4, #24]
   30cfa:	3b01      	subs	r3, #1
   30cfc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   30cfe:	f386 8811 	msr	BASEPRI, r6
   30d02:	f3bf 8f6f 	isb	sy
}
   30d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030d08 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30d08:	f3ef 8005 	mrs	r0, IPSR
}
   30d0c:	3800      	subs	r0, #0
   30d0e:	bf18      	it	ne
   30d10:	2001      	movne	r0, #1
   30d12:	4770      	bx	lr

00030d14 <k_thread_name_get>:
}
   30d14:	3062      	adds	r0, #98	; 0x62
   30d16:	4770      	bx	lr

00030d18 <z_impl_k_thread_start>:
	z_sched_start(thread);
   30d18:	f7f5 ba7a 	b.w	26210 <z_sched_start>

00030d1c <z_pm_save_idle_exit>:
{
   30d1c:	b508      	push	{r3, lr}
	pm_system_resume();
   30d1e:	f7df fe9b 	bl	10a58 <pm_system_resume>
}
   30d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   30d26:	f7ff b84c 	b.w	2fdc2 <sys_clock_idle_exit>

00030d2a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   30d2a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   30d2e:	428b      	cmp	r3, r1
   30d30:	d001      	beq.n	30d36 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   30d32:	f7f5 ba15 	b.w	26160 <z_set_prio>
}
   30d36:	2000      	movs	r0, #0
   30d38:	4770      	bx	lr

00030d3a <z_impl_k_mutex_init>:
{
   30d3a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   30d3c:	2000      	movs	r0, #0
   30d3e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   30d42:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   30d46:	4770      	bx	lr

00030d48 <queue_insert>:
{
   30d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30d4c:	4699      	mov	r9, r3
   30d4e:	4604      	mov	r4, r0
   30d50:	460d      	mov	r5, r1
   30d52:	4690      	mov	r8, r2
   30d54:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   30d58:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   30d5c:	f04f 0220 	mov.w	r2, #32
   30d60:	f3ef 8711 	mrs	r7, BASEPRI
   30d64:	f382 8812 	msr	BASEPRI_MAX, r2
   30d68:	f3bf 8f6f 	isb	sy
	if (is_append) {
   30d6c:	b103      	cbz	r3, 30d70 <queue_insert+0x28>
	return list->tail;
   30d6e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   30d70:	4630      	mov	r0, r6
   30d72:	f000 fa32 	bl	311da <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   30d76:	b160      	cbz	r0, 30d92 <queue_insert+0x4a>
   30d78:	2300      	movs	r3, #0
   30d7a:	f8c0 8014 	str.w	r8, [r0, #20]
   30d7e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	z_ready_thread(thread);
   30d82:	f000 f9f3 	bl	3116c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   30d86:	4630      	mov	r0, r6
   30d88:	4639      	mov	r1, r7
   30d8a:	f7f5 fa2f 	bl	261ec <z_reschedule>
		return 0;
   30d8e:	2000      	movs	r0, #0
   30d90:	e00c      	b.n	30dac <queue_insert+0x64>
	if (alloc) {
   30d92:	f1b9 0f00 	cmp.w	r9, #0
   30d96:	d01b      	beq.n	30dd0 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   30d98:	2108      	movs	r1, #8
   30d9a:	f7f5 fe7d 	bl	26a98 <z_thread_aligned_alloc>
		if (anode == NULL) {
   30d9e:	b938      	cbnz	r0, 30db0 <queue_insert+0x68>
	__asm__ volatile(
   30da0:	f387 8811 	msr	BASEPRI, r7
   30da4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   30da8:	f06f 000b 	mvn.w	r0, #11
}
   30dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   30db0:	2201      	movs	r2, #1
		anode->data = data;
   30db2:	f8c0 8004 	str.w	r8, [r0, #4]
   30db6:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30db8:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30dba:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   30dbe:	b95d      	cbnz	r5, 30dd8 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   30dc0:	6822      	ldr	r2, [r4, #0]
   30dc2:	430a      	orrs	r2, r1
   30dc4:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   30dc6:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   30dc8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   30dca:	b96a      	cbnz	r2, 30de8 <queue_insert+0xa0>
	list->tail = node;
   30dcc:	6060      	str	r0, [r4, #4]
}
   30dce:	e00b      	b.n	30de8 <queue_insert+0xa0>
}
   30dd0:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   30dd2:	f8c8 9000 	str.w	r9, [r8]
}
   30dd6:	e7ef      	b.n	30db8 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   30dd8:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   30dda:	2a03      	cmp	r2, #3
   30ddc:	d810      	bhi.n	30e00 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   30dde:	6001      	str	r1, [r0, #0]
	return list->tail;
   30de0:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   30de2:	b939      	cbnz	r1, 30df4 <queue_insert+0xac>
	list->head = node;
   30de4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   30de8:	2104      	movs	r1, #4
   30dea:	f104 0010 	add.w	r0, r4, #16
   30dee:	f000 fc45 	bl	3167c <z_handle_obj_poll_events>
   30df2:	e7c8      	b.n	30d86 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30df4:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30df6:	f002 0203 	and.w	r2, r2, #3
   30dfa:	4302      	orrs	r2, r0
   30dfc:	600a      	str	r2, [r1, #0]
   30dfe:	e7e5      	b.n	30dcc <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   30e00:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30e04:	430a      	orrs	r2, r1
   30e06:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30e08:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30e0a:	f002 0203 	and.w	r2, r2, #3
   30e0e:	ea40 0302 	orr.w	r3, r0, r2
   30e12:	602b      	str	r3, [r5, #0]
}
   30e14:	e7e8      	b.n	30de8 <queue_insert+0xa0>

00030e16 <z_queue_node_peek>:
{
   30e16:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   30e18:	4604      	mov	r4, r0
   30e1a:	b130      	cbz	r0, 30e2a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30e1c:	6802      	ldr	r2, [r0, #0]
   30e1e:	0793      	lsls	r3, r2, #30
   30e20:	d003      	beq.n	30e2a <z_queue_node_peek+0x14>
		ret = anode->data;
   30e22:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   30e24:	b109      	cbz	r1, 30e2a <z_queue_node_peek+0x14>
			k_free(anode);
   30e26:	f000 fc4f 	bl	316c8 <k_free>
}
   30e2a:	4620      	mov	r0, r4
   30e2c:	bd10      	pop	{r4, pc}

00030e2e <z_impl_k_queue_init>:
	list->head = NULL;
   30e2e:	2300      	movs	r3, #0
	list->tail = NULL;
   30e30:	e9c0 3300 	strd	r3, r3, [r0]
   30e34:	f100 0308 	add.w	r3, r0, #8
   30e38:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   30e3c:	f100 0310 	add.w	r3, r0, #16
   30e40:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   30e44:	4770      	bx	lr

00030e46 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   30e46:	2301      	movs	r3, #1
{
   30e48:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   30e4a:	9300      	str	r3, [sp, #0]
   30e4c:	2300      	movs	r3, #0
{
   30e4e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   30e50:	4619      	mov	r1, r3
   30e52:	f7ff ff79 	bl	30d48 <queue_insert>
}
   30e56:	b003      	add	sp, #12
   30e58:	f85d fb04 	ldr.w	pc, [sp], #4

00030e5c <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   30e5c:	2300      	movs	r3, #0
{
   30e5e:	b507      	push	{r0, r1, r2, lr}
   30e60:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   30e62:	9300      	str	r3, [sp, #0]
   30e64:	4619      	mov	r1, r3
   30e66:	f7ff ff6f 	bl	30d48 <queue_insert>
}
   30e6a:	b003      	add	sp, #12
   30e6c:	f85d fb04 	ldr.w	pc, [sp], #4

00030e70 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   30e70:	b15a      	cbz	r2, 30e8a <z_impl_k_sem_init+0x1a>
   30e72:	428a      	cmp	r2, r1
   30e74:	d309      	bcc.n	30e8a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   30e76:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   30e7a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   30e7e:	e9c0 0000 	strd	r0, r0, [r0]
   30e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   30e86:	2000      	movs	r0, #0
   30e88:	4770      	bx	lr
		return -EINVAL;
   30e8a:	f06f 0015 	mvn.w	r0, #21
}
   30e8e:	4770      	bx	lr

00030e90 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   30e90:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   30e92:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   30e94:	408b      	lsls	r3, r1
   30e96:	ea22 0303 	bic.w	r3, r2, r3
   30e9a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   30e9c:	fa22 f001 	lsr.w	r0, r2, r1
}
   30ea0:	f000 0001 	and.w	r0, r0, #1
   30ea4:	4770      	bx	lr

00030ea6 <unschedule_locked>:
{
   30ea6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30ea8:	2103      	movs	r1, #3
{
   30eaa:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30eac:	300c      	adds	r0, #12
   30eae:	f7ff ffef 	bl	30e90 <flag_test_and_clear>
   30eb2:	4604      	mov	r4, r0
   30eb4:	b118      	cbz	r0, 30ebe <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   30eb6:	f105 0010 	add.w	r0, r5, #16
   30eba:	f000 fa08 	bl	312ce <z_abort_timeout>
}
   30ebe:	4620      	mov	r0, r4
   30ec0:	bd38      	pop	{r3, r4, r5, pc}

00030ec2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   30ec2:	b120      	cbz	r0, 30ece <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   30ec4:	2200      	movs	r2, #0
   30ec6:	30b0      	adds	r0, #176	; 0xb0
   30ec8:	4611      	mov	r1, r2
   30eca:	f000 b9dc 	b.w	31286 <z_sched_wake>
}
   30ece:	4770      	bx	lr

00030ed0 <cancel_async_locked>:
{
   30ed0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   30ed2:	68c3      	ldr	r3, [r0, #12]
{
   30ed4:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30ed6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   30eda:	079b      	lsls	r3, r3, #30
   30edc:	d416      	bmi.n	30f0c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   30ede:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   30ee0:	2102      	movs	r1, #2
   30ee2:	300c      	adds	r0, #12
   30ee4:	f7ff ffd4 	bl	30e90 <flag_test_and_clear>
   30ee8:	b180      	cbz	r0, 30f0c <cancel_async_locked+0x3c>
	return list->head;
   30eea:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30eee:	b16a      	cbz	r2, 30f0c <cancel_async_locked+0x3c>
   30ef0:	4294      	cmp	r4, r2
   30ef2:	d11d      	bne.n	30f30 <cancel_async_locked+0x60>
	return node->next;
   30ef4:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   30ef6:	b99e      	cbnz	r6, 30f20 <cancel_async_locked+0x50>
   30ef8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
	list->head = node;
   30efc:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
Z_GENLIST_REMOVE(slist, snode)
   30f00:	429c      	cmp	r4, r3
   30f02:	d101      	bne.n	30f08 <cancel_async_locked+0x38>
	list->tail = node;
   30f04:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
	parent->next = child;
   30f08:	2300      	movs	r3, #0
   30f0a:	6023      	str	r3, [r4, #0]
	return *flagp;
   30f0c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   30f0e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   30f12:	bf1e      	ittt	ne
   30f14:	f043 0302 	orrne.w	r3, r3, #2
   30f18:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   30f1a:	f040 0002 	orrne.w	r0, r0, #2
}
   30f1e:	bd70      	pop	{r4, r5, r6, pc}
   30f20:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   30f22:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
   30f26:	4294      	cmp	r4, r2
	list->tail = node;
   30f28:	bf08      	it	eq
   30f2a:	f8c5 60ac 	streq.w	r6, [r5, #172]	; 0xac
}
   30f2e:	e7eb      	b.n	30f08 <cancel_async_locked+0x38>
	return node->next;
   30f30:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30f32:	6812      	ldr	r2, [r2, #0]
   30f34:	e7db      	b.n	30eee <cancel_async_locked+0x1e>

00030f36 <work_timeout>:
{
   30f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30f38:	4604      	mov	r4, r0
	__asm__ volatile(
   30f3a:	f04f 0320 	mov.w	r3, #32
   30f3e:	f3ef 8511 	mrs	r5, BASEPRI
   30f42:	f383 8812 	msr	BASEPRI_MAX, r3
   30f46:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   30f4a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   30f4c:	f1a0 0610 	sub.w	r6, r0, #16
   30f50:	2103      	movs	r1, #3
   30f52:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   30f54:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   30f56:	f7ff ff9b 	bl	30e90 <flag_test_and_clear>
   30f5a:	b128      	cbz	r0, 30f68 <work_timeout+0x32>
		queue = dw->queue;
   30f5c:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   30f5e:	4630      	mov	r0, r6
   30f60:	a901      	add	r1, sp, #4
		queue = dw->queue;
   30f62:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   30f64:	f7f4 fe60 	bl	25c28 <submit_to_queue_locked>
	__asm__ volatile(
   30f68:	f385 8811 	msr	BASEPRI, r5
   30f6c:	f3bf 8f6f 	isb	sy
}
   30f70:	b002      	add	sp, #8
   30f72:	bd70      	pop	{r4, r5, r6, pc}

00030f74 <k_work_init>:
{
   30f74:	b538      	push	{r3, r4, r5, lr}
   30f76:	4604      	mov	r4, r0
   30f78:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   30f7a:	2210      	movs	r2, #16
   30f7c:	2100      	movs	r1, #0
   30f7e:	f000 fc00 	bl	31782 <memset>
   30f82:	6065      	str	r5, [r4, #4]
}
   30f84:	bd38      	pop	{r3, r4, r5, pc}

00030f86 <k_work_busy_get>:
	__asm__ volatile(
   30f86:	f04f 0220 	mov.w	r2, #32
   30f8a:	f3ef 8311 	mrs	r3, BASEPRI
   30f8e:	f382 8812 	msr	BASEPRI_MAX, r2
   30f92:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   30f96:	68c0      	ldr	r0, [r0, #12]
   30f98:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   30f9c:	f383 8811 	msr	BASEPRI, r3
   30fa0:	f3bf 8f6f 	isb	sy
}
   30fa4:	4770      	bx	lr

00030fa6 <z_work_submit_to_queue>:
{
   30fa6:	b513      	push	{r0, r1, r4, lr}
   30fa8:	9001      	str	r0, [sp, #4]
   30faa:	4608      	mov	r0, r1
	__asm__ volatile(
   30fac:	f04f 0320 	mov.w	r3, #32
   30fb0:	f3ef 8411 	mrs	r4, BASEPRI
   30fb4:	f383 8812 	msr	BASEPRI_MAX, r3
   30fb8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   30fbc:	a901      	add	r1, sp, #4
   30fbe:	f7f4 fe33 	bl	25c28 <submit_to_queue_locked>
	__asm__ volatile(
   30fc2:	f384 8811 	msr	BASEPRI, r4
   30fc6:	f3bf 8f6f 	isb	sy
}
   30fca:	b002      	add	sp, #8
   30fcc:	bd10      	pop	{r4, pc}

00030fce <k_work_submit_to_queue>:
{
   30fce:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   30fd0:	f7ff ffe9 	bl	30fa6 <z_work_submit_to_queue>
	if (ret > 0) {
   30fd4:	1e04      	subs	r4, r0, #0
   30fd6:	dd09      	ble.n	30fec <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   30fd8:	f04f 0320 	mov.w	r3, #32
   30fdc:	f3ef 8011 	mrs	r0, BASEPRI
   30fe0:	f383 8812 	msr	BASEPRI_MAX, r3
   30fe4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   30fe8:	f000 f927 	bl	3123a <z_reschedule_irqlock>
}
   30fec:	4620      	mov	r0, r4
   30fee:	bd10      	pop	{r4, pc}

00030ff0 <k_work_queue_init>:
{
   30ff0:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   30ff2:	22c8      	movs	r2, #200	; 0xc8
   30ff4:	2100      	movs	r1, #0
   30ff6:	f000 fbc4 	bl	31782 <memset>
}
   30ffa:	bd08      	pop	{r3, pc}

00030ffc <k_work_init_delayable>:
{
   30ffc:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   30ffe:	2230      	movs	r2, #48	; 0x30
{
   31000:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   31002:	2100      	movs	r1, #0
{
   31004:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   31006:	f000 fbbc 	bl	31782 <memset>
   3100a:	f44f 7380 	mov.w	r3, #256	; 0x100
   3100e:	6065      	str	r5, [r4, #4]
   31010:	60e3      	str	r3, [r4, #12]
}
   31012:	bd38      	pop	{r3, r4, r5, pc}

00031014 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   31014:	f7ff bfb7 	b.w	30f86 <k_work_busy_get>

00031018 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   31018:	b538      	push	{r3, r4, r5, lr}
   3101a:	4604      	mov	r4, r0
   3101c:	f04f 0320 	mov.w	r3, #32
   31020:	f3ef 8511 	mrs	r5, BASEPRI
   31024:	f383 8812 	msr	BASEPRI_MAX, r3
   31028:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   3102c:	f7ff ff3b 	bl	30ea6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   31030:	4620      	mov	r0, r4
   31032:	f7ff ff4d 	bl	30ed0 <cancel_async_locked>
	__asm__ volatile(
   31036:	f385 8811 	msr	BASEPRI, r5
   3103a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   3103e:	bd38      	pop	{r3, r4, r5, pc}

00031040 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   31040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31042:	4604      	mov	r4, r0
   31044:	460d      	mov	r5, r1
	__asm__ volatile(
   31046:	f04f 0320 	mov.w	r3, #32
   3104a:	f3ef 8611 	mrs	r6, BASEPRI
   3104e:	f383 8812 	msr	BASEPRI_MAX, r3
   31052:	f3bf 8f6f 	isb	sy
	return *flagp;
   31056:	68c3      	ldr	r3, [r0, #12]
   31058:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   3105c:	2b00      	cmp	r3, #0
   3105e:	bf14      	ite	ne
   31060:	2701      	movne	r7, #1
   31062:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   31064:	d105      	bne.n	31072 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   31066:	f386 8811 	msr	BASEPRI, r6
   3106a:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   3106e:	4638      	mov	r0, r7
   31070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   31072:	f7ff ff18 	bl	30ea6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   31076:	4620      	mov	r0, r4
   31078:	f7ff ff2a 	bl	30ed0 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   3107c:	4629      	mov	r1, r5
   3107e:	4620      	mov	r0, r4
   31080:	f7f4 fdb4 	bl	25bec <cancel_sync_locked>
   31084:	f386 8811 	msr	BASEPRI, r6
   31088:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   3108c:	2800      	cmp	r0, #0
   3108e:	d0ee      	beq.n	3106e <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   31090:	f04f 32ff 	mov.w	r2, #4294967295
   31094:	f04f 33ff 	mov.w	r3, #4294967295
   31098:	f105 0008 	add.w	r0, r5, #8
   3109c:	f7f4 fcc8 	bl	25a30 <z_impl_k_sem_take>
   310a0:	e7e5      	b.n	3106e <k_work_cancel_delayable_sync+0x2e>

000310a2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   310a2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   310a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   310a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   310aa:	2300      	movs	r3, #0
	node->prev = NULL;
   310ac:	e9c0 3300 	strd	r3, r3, [r0]
}
   310b0:	4770      	bx	lr

000310b2 <unpend_thread_no_timeout>:
{
   310b2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   310b4:	f7ff fff5 	bl	310a2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   310b8:	7b43      	ldrb	r3, [r0, #13]
   310ba:	f023 0302 	bic.w	r3, r3, #2
   310be:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   310c0:	2300      	movs	r3, #0
   310c2:	6083      	str	r3, [r0, #8]
}
   310c4:	bd08      	pop	{r3, pc}

000310c6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   310c6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   310ca:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   310ce:	4283      	cmp	r3, r0
		return b2 - b1;
   310d0:	bf14      	ite	ne
   310d2:	1ac0      	subne	r0, r0, r3
	return 0;
   310d4:	2000      	moveq	r0, #0
}
   310d6:	4770      	bx	lr

000310d8 <z_thread_timeout>:
{
   310d8:	4601      	mov	r1, r0
   310da:	b510      	push	{r4, lr}
	__asm__ volatile(
   310dc:	f04f 0320 	mov.w	r3, #32
   310e0:	f3ef 8411 	mrs	r4, BASEPRI
   310e4:	f383 8812 	msr	BASEPRI_MAX, r3
   310e8:	f3bf 8f6f 	isb	sy
		if (!killed) {
   310ec:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   310f0:	f013 0f28 	tst.w	r3, #40	; 0x28
   310f4:	d10d      	bne.n	31112 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   310f6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   310fa:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   310fc:	b10b      	cbz	r3, 31102 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   310fe:	f7ff ffd8 	bl	310b2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   31102:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   31106:	f023 0314 	bic.w	r3, r3, #20
   3110a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   3110e:	f7f4 ff31 	bl	25f74 <ready_thread>
	__asm__ volatile(
   31112:	f384 8811 	msr	BASEPRI, r4
   31116:	f3bf 8f6f 	isb	sy
}
   3111a:	bd10      	pop	{r4, pc}

0003111c <add_to_waitq_locked>:
{
   3111c:	b538      	push	{r3, r4, r5, lr}
   3111e:	4604      	mov	r4, r0
   31120:	460d      	mov	r5, r1
	unready_thread(thread);
   31122:	f7f4 ff5b 	bl	25fdc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   31126:	7b63      	ldrb	r3, [r4, #13]
   31128:	f043 0302 	orr.w	r3, r3, #2
   3112c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3112e:	b1e5      	cbz	r5, 3116a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   31130:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   31132:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31134:	429d      	cmp	r5, r3
   31136:	d109      	bne.n	3114c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   31138:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   3113a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   3113e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31140:	606c      	str	r4, [r5, #4]
}
   31142:	e012      	b.n	3116a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   31144:	686a      	ldr	r2, [r5, #4]
   31146:	4293      	cmp	r3, r2
   31148:	d0f6      	beq.n	31138 <add_to_waitq_locked+0x1c>
   3114a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3114c:	2b00      	cmp	r3, #0
   3114e:	d0f3      	beq.n	31138 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   31150:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   31154:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   31158:	428a      	cmp	r2, r1
   3115a:	d0f3      	beq.n	31144 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3115c:	4291      	cmp	r1, r2
   3115e:	ddf1      	ble.n	31144 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   31160:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   31162:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   31166:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   31168:	605c      	str	r4, [r3, #4]
}
   3116a:	bd38      	pop	{r3, r4, r5, pc}

0003116c <z_ready_thread>:
{
   3116c:	b510      	push	{r4, lr}
	__asm__ volatile(
   3116e:	f04f 0320 	mov.w	r3, #32
   31172:	f3ef 8411 	mrs	r4, BASEPRI
   31176:	f383 8812 	msr	BASEPRI_MAX, r3
   3117a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   3117e:	f7f4 fef9 	bl	25f74 <ready_thread>
	__asm__ volatile(
   31182:	f384 8811 	msr	BASEPRI, r4
   31186:	f3bf 8f6f 	isb	sy
}
   3118a:	bd10      	pop	{r4, pc}

0003118c <z_unpend_thread_no_timeout>:
{
   3118c:	b508      	push	{r3, lr}
	__asm__ volatile(
   3118e:	f04f 0320 	mov.w	r3, #32
   31192:	f3ef 8111 	mrs	r1, BASEPRI
   31196:	f383 8812 	msr	BASEPRI_MAX, r3
   3119a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   3119e:	f7ff ff88 	bl	310b2 <unpend_thread_no_timeout>
	__asm__ volatile(
   311a2:	f381 8811 	msr	BASEPRI, r1
   311a6:	f3bf 8f6f 	isb	sy
}
   311aa:	bd08      	pop	{r3, pc}

000311ac <z_unpend1_no_timeout>:
{
   311ac:	b508      	push	{r3, lr}
   311ae:	4603      	mov	r3, r0
	__asm__ volatile(
   311b0:	f04f 0220 	mov.w	r2, #32
   311b4:	f3ef 8111 	mrs	r1, BASEPRI
   311b8:	f382 8812 	msr	BASEPRI_MAX, r2
   311bc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   311c0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   311c2:	4283      	cmp	r3, r0
   311c4:	d007      	beq.n	311d6 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   311c6:	b108      	cbz	r0, 311cc <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   311c8:	f7ff ff73 	bl	310b2 <unpend_thread_no_timeout>
	__asm__ volatile(
   311cc:	f381 8811 	msr	BASEPRI, r1
   311d0:	f3bf 8f6f 	isb	sy
}
   311d4:	bd08      	pop	{r3, pc}
   311d6:	2000      	movs	r0, #0
   311d8:	e7f8      	b.n	311cc <z_unpend1_no_timeout+0x20>

000311da <z_unpend_first_thread>:
{
   311da:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   311dc:	f04f 0320 	mov.w	r3, #32
   311e0:	f3ef 8511 	mrs	r5, BASEPRI
   311e4:	f383 8812 	msr	BASEPRI_MAX, r3
   311e8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   311ec:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   311ee:	42a0      	cmp	r0, r4
   311f0:	d00d      	beq.n	3120e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   311f2:	b134      	cbz	r4, 31202 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   311f4:	4620      	mov	r0, r4
   311f6:	f7ff ff5c 	bl	310b2 <unpend_thread_no_timeout>
   311fa:	f104 0018 	add.w	r0, r4, #24
   311fe:	f000 f866 	bl	312ce <z_abort_timeout>
	__asm__ volatile(
   31202:	f385 8811 	msr	BASEPRI, r5
   31206:	f3bf 8f6f 	isb	sy
}
   3120a:	4620      	mov	r0, r4
   3120c:	bd38      	pop	{r3, r4, r5, pc}
   3120e:	2400      	movs	r4, #0
   31210:	e7f7      	b.n	31202 <z_unpend_first_thread+0x28>

00031212 <z_unpend_thread>:
{
   31212:	b510      	push	{r4, lr}
	__asm__ volatile(
   31214:	f04f 0320 	mov.w	r3, #32
   31218:	f3ef 8411 	mrs	r4, BASEPRI
   3121c:	f383 8812 	msr	BASEPRI_MAX, r3
   31220:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   31224:	f7ff ff45 	bl	310b2 <unpend_thread_no_timeout>
	__asm__ volatile(
   31228:	f384 8811 	msr	BASEPRI, r4
   3122c:	f3bf 8f6f 	isb	sy
}
   31230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31234:	3018      	adds	r0, #24
   31236:	f000 b84a 	b.w	312ce <z_abort_timeout>

0003123a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3123a:	4603      	mov	r3, r0
   3123c:	b920      	cbnz	r0, 31248 <z_reschedule_irqlock+0xe>
   3123e:	f3ef 8205 	mrs	r2, IPSR
   31242:	b90a      	cbnz	r2, 31248 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   31244:	f7df bfa2 	b.w	1118c <arch_swap>
   31248:	f383 8811 	msr	BASEPRI, r3
   3124c:	f3bf 8f6f 	isb	sy
}
   31250:	4770      	bx	lr

00031252 <z_reschedule_unlocked>:
	__asm__ volatile(
   31252:	f04f 0320 	mov.w	r3, #32
   31256:	f3ef 8011 	mrs	r0, BASEPRI
   3125a:	f383 8812 	msr	BASEPRI_MAX, r3
   3125e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   31262:	f7ff bfea 	b.w	3123a <z_reschedule_irqlock>

00031266 <z_unpend_all>:
{
   31266:	b538      	push	{r3, r4, r5, lr}
   31268:	4605      	mov	r5, r0
	int need_sched = 0;
   3126a:	2000      	movs	r0, #0
	return list->head == list;
   3126c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3126e:	42a5      	cmp	r5, r4
   31270:	d000      	beq.n	31274 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   31272:	b904      	cbnz	r4, 31276 <z_unpend_all+0x10>
}
   31274:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   31276:	4620      	mov	r0, r4
   31278:	f7ff ffcb 	bl	31212 <z_unpend_thread>
		z_ready_thread(thread);
   3127c:	4620      	mov	r0, r4
   3127e:	f7ff ff75 	bl	3116c <z_ready_thread>
		need_sched = 1;
   31282:	2001      	movs	r0, #1
   31284:	e7f2      	b.n	3126c <z_unpend_all+0x6>

00031286 <z_sched_wake>:
{
   31286:	b538      	push	{r3, r4, r5, lr}
   31288:	f04f 0320 	mov.w	r3, #32
   3128c:	f3ef 8511 	mrs	r5, BASEPRI
   31290:	f383 8812 	msr	BASEPRI_MAX, r3
   31294:	f3bf 8f6f 	isb	sy
	return list->head == list;
   31298:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3129a:	42a0      	cmp	r0, r4
   3129c:	d013      	beq.n	312c6 <z_sched_wake+0x40>
		if (thread != NULL) {
   3129e:	b1a4      	cbz	r4, 312ca <z_sched_wake+0x44>
   312a0:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
	thread->base.swap_data = data;
   312a4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   312a6:	4620      	mov	r0, r4
   312a8:	f7ff ff03 	bl	310b2 <unpend_thread_no_timeout>
   312ac:	f104 0018 	add.w	r0, r4, #24
   312b0:	f000 f80d 	bl	312ce <z_abort_timeout>
			ready_thread(thread);
   312b4:	4620      	mov	r0, r4
   312b6:	f7f4 fe5d 	bl	25f74 <ready_thread>
			ret = true;
   312ba:	2001      	movs	r0, #1
	__asm__ volatile(
   312bc:	f385 8811 	msr	BASEPRI, r5
   312c0:	f3bf 8f6f 	isb	sy
}
   312c4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   312c6:	2000      	movs	r0, #0
   312c8:	e7f8      	b.n	312bc <z_sched_wake+0x36>
   312ca:	4620      	mov	r0, r4
   312cc:	e7f6      	b.n	312bc <z_sched_wake+0x36>

000312ce <z_abort_timeout>:
{
   312ce:	b510      	push	{r4, lr}
	__asm__ volatile(
   312d0:	f04f 0220 	mov.w	r2, #32
   312d4:	f3ef 8411 	mrs	r4, BASEPRI
   312d8:	f382 8812 	msr	BASEPRI_MAX, r2
   312dc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   312e0:	6803      	ldr	r3, [r0, #0]
   312e2:	b13b      	cbz	r3, 312f4 <z_abort_timeout+0x26>
			remove_timeout(to);
   312e4:	f7f5 f980 	bl	265e8 <remove_timeout>
			ret = 0;
   312e8:	2000      	movs	r0, #0
	__asm__ volatile(
   312ea:	f384 8811 	msr	BASEPRI, r4
   312ee:	f3bf 8f6f 	isb	sy
}
   312f2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   312f4:	f06f 0015 	mvn.w	r0, #21
   312f8:	e7f7      	b.n	312ea <z_abort_timeout+0x1c>

000312fa <z_get_next_timeout_expiry>:
{
   312fa:	b510      	push	{r4, lr}
	__asm__ volatile(
   312fc:	f04f 0320 	mov.w	r3, #32
   31300:	f3ef 8411 	mrs	r4, BASEPRI
   31304:	f383 8812 	msr	BASEPRI_MAX, r3
   31308:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   3130c:	f7f5 f944 	bl	26598 <next_timeout>
	__asm__ volatile(
   31310:	f384 8811 	msr	BASEPRI, r4
   31314:	f3bf 8f6f 	isb	sy
}
   31318:	bd10      	pop	{r4, pc}

0003131a <z_set_timeout_expiry>:
{
   3131a:	b570      	push	{r4, r5, r6, lr}
   3131c:	4604      	mov	r4, r0
   3131e:	460d      	mov	r5, r1
	__asm__ volatile(
   31320:	f04f 0320 	mov.w	r3, #32
   31324:	f3ef 8611 	mrs	r6, BASEPRI
   31328:	f383 8812 	msr	BASEPRI_MAX, r3
   3132c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   31330:	f7f5 f932 	bl	26598 <next_timeout>
			      || (ticks <= next_to);
   31334:	2801      	cmp	r0, #1
   31336:	dd07      	ble.n	31348 <z_set_timeout_expiry+0x2e>
   31338:	42a0      	cmp	r0, r4
   3133a:	db05      	blt.n	31348 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   3133c:	42a0      	cmp	r0, r4
   3133e:	4629      	mov	r1, r5
   31340:	bfa8      	it	ge
   31342:	4620      	movge	r0, r4
   31344:	f7f1 fd62 	bl	22e0c <sys_clock_set_timeout>
	__asm__ volatile(
   31348:	f386 8811 	msr	BASEPRI, r6
   3134c:	f3bf 8f6f 	isb	sy
}
   31350:	bd70      	pop	{r4, r5, r6, pc}

00031352 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   31352:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   31354:	f7f5 fa3e 	bl	267d4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   31358:	bd08      	pop	{r3, pc}

0003135a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3135a:	f7f5 ba3b 	b.w	267d4 <sys_clock_tick_get>

0003135e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3135e:	b108      	cbz	r0, 31364 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   31360:	f7dd be82 	b.w	f068 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   31364:	4770      	bx	lr

00031366 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31366:	f1b1 3fff 	cmp.w	r1, #4294967295
   3136a:	bf08      	it	eq
   3136c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   31370:	b538      	push	{r3, r4, r5, lr}
   31372:	460c      	mov	r4, r1
   31374:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   31376:	d014      	beq.n	313a2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31378:	4308      	orrs	r0, r1
   3137a:	d103      	bne.n	31384 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3137c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   31380:	f7f5 ba28 	b.w	267d4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   31384:	f06f 0001 	mvn.w	r0, #1
   31388:	f04f 33ff 	mov.w	r3, #4294967295
   3138c:	1b40      	subs	r0, r0, r5
   3138e:	eb63 0101 	sbc.w	r1, r3, r1
   31392:	2900      	cmp	r1, #0
   31394:	da04      	bge.n	313a0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   31396:	f7f5 fa1d 	bl	267d4 <sys_clock_tick_get>
   3139a:	1940      	adds	r0, r0, r5
   3139c:	eb41 0104 	adc.w	r1, r1, r4
}
   313a0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   313a2:	f04f 30ff 	mov.w	r0, #4294967295
   313a6:	4601      	mov	r1, r0
   313a8:	e7fa      	b.n	313a0 <sys_clock_timeout_end_calc+0x3a>

000313aa <k_timer_init>:
	timer->status = 0U;
   313aa:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   313ac:	e9c0 1208 	strd	r1, r2, [r0, #32]
   313b0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   313b4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   313b8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   313bc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   313be:	6343      	str	r3, [r0, #52]	; 0x34
}
   313c0:	4770      	bx	lr

000313c2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   313c2:	b510      	push	{r4, lr}
   313c4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   313c6:	f7ff ff82 	bl	312ce <z_abort_timeout>

	if (inactive) {
   313ca:	b9b0      	cbnz	r0, 313fa <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   313cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   313ce:	b10b      	cbz	r3, 313d4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   313d0:	4620      	mov	r0, r4
   313d2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   313d4:	f104 0018 	add.w	r0, r4, #24
   313d8:	f7ff fee8 	bl	311ac <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   313dc:	b168      	cbz	r0, 313fa <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   313de:	f7ff fec5 	bl	3116c <z_ready_thread>
	__asm__ volatile(
   313e2:	f04f 0320 	mov.w	r3, #32
   313e6:	f3ef 8011 	mrs	r0, BASEPRI
   313ea:	f383 8812 	msr	BASEPRI_MAX, r3
   313ee:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   313f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   313f6:	f7ff bf20 	b.w	3123a <z_reschedule_irqlock>
   313fa:	bd10      	pop	{r4, pc}

000313fc <add_event>:
{
   313fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   313fe:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   31400:	e9d0 1300 	ldrd	r1, r3, [r0]
   31404:	4288      	cmp	r0, r1
   31406:	4604      	mov	r4, r0
   31408:	d105      	bne.n	31416 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   3140a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3140c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   31410:	601d      	str	r5, [r3, #0]
	list->tail = node;
   31412:	6065      	str	r5, [r4, #4]
   31414:	e01d      	b.n	31452 <add_event+0x56>
	if ((pending == NULL) ||
   31416:	2b00      	cmp	r3, #0
   31418:	d0f7      	beq.n	3140a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3141a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3141c:	b100      	cbz	r0, 31420 <add_event+0x24>
   3141e:	3860      	subs	r0, #96	; 0x60
   31420:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31424:	4639      	mov	r1, r7
   31426:	f7ff fe4e 	bl	310c6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3142a:	2800      	cmp	r0, #0
   3142c:	dced      	bgt.n	3140a <add_event+0xe>
	return list->head == list;
   3142e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31430:	42b4      	cmp	r4, r6
   31432:	d0ea      	beq.n	3140a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   31434:	2e00      	cmp	r6, #0
   31436:	d0e8      	beq.n	3140a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   31438:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3143a:	b101      	cbz	r1, 3143e <add_event+0x42>
   3143c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   3143e:	4638      	mov	r0, r7
   31440:	f7ff fe41 	bl	310c6 <z_sched_prio_cmp>
   31444:	2800      	cmp	r0, #0
   31446:	dd05      	ble.n	31454 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   31448:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3144a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   3144e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   31450:	6075      	str	r5, [r6, #4]
}
   31452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   31454:	6863      	ldr	r3, [r4, #4]
   31456:	429e      	cmp	r6, r3
   31458:	d0d7      	beq.n	3140a <add_event+0xe>
   3145a:	6836      	ldr	r6, [r6, #0]
   3145c:	e7ea      	b.n	31434 <add_event+0x38>

0003145e <register_events>:
{
   3145e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   31462:	2500      	movs	r5, #0
{
   31464:	468b      	mov	fp, r1
   31466:	4614      	mov	r4, r2
   31468:	461f      	mov	r7, r3
   3146a:	4682      	mov	sl, r0
	int events_registered = 0;
   3146c:	462e      	mov	r6, r5
	event->poller = NULL;
   3146e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   31470:	455d      	cmp	r5, fp
   31472:	db02      	blt.n	3147a <register_events+0x1c>
}
   31474:	4630      	mov	r0, r6
   31476:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3147a:	f04f 0320 	mov.w	r3, #32
   3147e:	f3ef 8911 	mrs	r9, BASEPRI
   31482:	f383 8812 	msr	BASEPRI_MAX, r3
   31486:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   3148a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   3148e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31492:	3b01      	subs	r3, #1
   31494:	2b07      	cmp	r3, #7
   31496:	d80f      	bhi.n	314b8 <register_events+0x5a>
   31498:	e8df f003 	tbb	[pc, r3]
   3149c:	0a0e041e 	.word	0x0a0e041e
   314a0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   314a4:	f8da 3010 	ldr.w	r3, [sl, #16]
   314a8:	689b      	ldr	r3, [r3, #8]
   314aa:	b12b      	cbz	r3, 314b8 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   314ac:	2302      	movs	r3, #2
   314ae:	e020      	b.n	314f2 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   314b0:	f8da 3010 	ldr.w	r3, [sl, #16]
   314b4:	681b      	ldr	r3, [r3, #0]
   314b6:	bb8b      	cbnz	r3, 3151c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   314b8:	bb47      	cbnz	r7, 3150c <register_events+0xae>
   314ba:	7823      	ldrb	r3, [r4, #0]
   314bc:	b333      	cbz	r3, 3150c <register_events+0xae>
	switch (event->type) {
   314be:	f89a 300d 	ldrb.w	r3, [sl, #13]
   314c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   314c6:	3b01      	subs	r3, #1
   314c8:	2b07      	cmp	r3, #7
   314ca:	d830      	bhi.n	3152e <register_events+0xd0>
   314cc:	e8df f003 	tbb	[pc, r3]
   314d0:	282f2833 	.word	0x282f2833
   314d4:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   314d8:	f8da 3010 	ldr.w	r3, [sl, #16]
   314dc:	689b      	ldr	r3, [r3, #8]
   314de:	2b00      	cmp	r3, #0
   314e0:	d0ea      	beq.n	314b8 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   314e2:	2301      	movs	r3, #1
   314e4:	e005      	b.n	314f2 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   314e6:	f8da 3010 	ldr.w	r3, [sl, #16]
   314ea:	6a1b      	ldr	r3, [r3, #32]
   314ec:	2b00      	cmp	r3, #0
   314ee:	d0e3      	beq.n	314b8 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   314f0:	2310      	movs	r3, #16
	event->state |= state;
   314f2:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   314f6:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   314fa:	f3c2 3186 	ubfx	r1, r2, #14, #7
   314fe:	430b      	orrs	r3, r1
   31500:	f363 3294 	bfi	r2, r3, #14, #7
   31504:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   31508:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   3150c:	f389 8811 	msr	BASEPRI, r9
   31510:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   31514:	3501      	adds	r5, #1
   31516:	f10a 0a14 	add.w	sl, sl, #20
   3151a:	e7a9      	b.n	31470 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3151c:	2304      	movs	r3, #4
   3151e:	e7e8      	b.n	314f2 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   31520:	4622      	mov	r2, r4
   31522:	4651      	mov	r1, sl
   31524:	f8da 0010 	ldr.w	r0, [sl, #16]
   31528:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   3152a:	f7ff ff67 	bl	313fc <add_event>
	event->poller = poller;
   3152e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   31532:	3601      	adds	r6, #1
   31534:	e7ea      	b.n	3150c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   31536:	4622      	mov	r2, r4
   31538:	4651      	mov	r1, sl
   3153a:	f8da 0010 	ldr.w	r0, [sl, #16]
   3153e:	e7f4      	b.n	3152a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   31540:	f8da 0010 	ldr.w	r0, [sl, #16]
   31544:	4622      	mov	r2, r4
   31546:	4651      	mov	r1, sl
   31548:	3024      	adds	r0, #36	; 0x24
   3154a:	e7ee      	b.n	3152a <register_events+0xcc>

0003154c <signal_poll_event>:
{
   3154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   31550:	6884      	ldr	r4, [r0, #8]
{
   31552:	4605      	mov	r5, r0
   31554:	460e      	mov	r6, r1
	if (poller != NULL) {
   31556:	b144      	cbz	r4, 3156a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   31558:	7863      	ldrb	r3, [r4, #1]
   3155a:	2b01      	cmp	r3, #1
   3155c:	d12e      	bne.n	315bc <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   3155e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   31562:	f013 0302 	ands.w	r3, r3, #2
   31566:	d10a      	bne.n	3157e <signal_poll_event+0x32>
		poller->is_polling = false;
   31568:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3156a:	2000      	movs	r0, #0
	event->state |= state;
   3156c:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   3156e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   31570:	f3c3 3286 	ubfx	r2, r3, #14, #7
   31574:	4316      	orrs	r6, r2
   31576:	f366 3394 	bfi	r3, r6, #14, #7
   3157a:	60eb      	str	r3, [r5, #12]
	return retcode;
   3157c:	e03e      	b.n	315fc <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   3157e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   31582:	f1b3 3fff 	cmp.w	r3, #4294967295
   31586:	bf08      	it	eq
   31588:	f112 0f02 	cmneq.w	r2, #2
   3158c:	d032      	beq.n	315f4 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3158e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   31592:	4640      	mov	r0, r8
   31594:	f7ff fe3d 	bl	31212 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   31598:	2e08      	cmp	r6, #8
   3159a:	bf0c      	ite	eq
   3159c:	f06f 0303 	mvneq.w	r3, #3
   315a0:	2300      	movne	r3, #0
   315a2:	63e3      	str	r3, [r4, #60]	; 0x3c
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   315a4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   315a8:	06db      	lsls	r3, r3, #27
   315aa:	d109      	bne.n	315c0 <signal_poll_event+0x74>
   315ac:	f854 7c48 	ldr.w	r7, [r4, #-72]
   315b0:	b937      	cbnz	r7, 315c0 <signal_poll_event+0x74>
	z_ready_thread(thread);
   315b2:	4640      	mov	r0, r8
   315b4:	f7ff fdda 	bl	3116c <z_ready_thread>
		poller->is_polling = false;
   315b8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   315ba:	e7d6      	b.n	3156a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   315bc:	2b02      	cmp	r3, #2
   315be:	d001      	beq.n	315c4 <signal_poll_event+0x78>
		poller->is_polling = false;
   315c0:	2300      	movs	r3, #0
   315c2:	e7d1      	b.n	31568 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   315c4:	7823      	ldrb	r3, [r4, #0]
   315c6:	2b00      	cmp	r3, #0
   315c8:	d0cf      	beq.n	3156a <signal_poll_event+0x1e>
   315ca:	f854 7c04 	ldr.w	r7, [r4, #-4]
   315ce:	2f00      	cmp	r7, #0
   315d0:	d0f2      	beq.n	315b8 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   315d2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   315d6:	f1a4 0914 	sub.w	r9, r4, #20
   315da:	f104 0014 	add.w	r0, r4, #20
   315de:	f7ff fe76 	bl	312ce <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   315e2:	4649      	mov	r1, r9
   315e4:	4638      	mov	r0, r7
		twork->poll_result = 0;
   315e6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   315ea:	f7ff fcdc 	bl	30fa6 <z_work_submit_to_queue>
		poller->is_polling = false;
   315ee:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   315f2:	e7ba      	b.n	3156a <signal_poll_event+0x1e>
		poller->is_polling = false;
   315f4:	2300      	movs	r3, #0
		return -EAGAIN;
   315f6:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   315fa:	7023      	strb	r3, [r4, #0]
}
   315fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00031600 <clear_event_registrations>:
	while (num_events--) {
   31600:	2314      	movs	r3, #20
{
   31602:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   31604:	2400      	movs	r4, #0
	switch (event->type) {
   31606:	f44f 768b 	mov.w	r6, #278	; 0x116
   3160a:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   3160e:	b901      	cbnz	r1, 31612 <clear_event_registrations+0x12>
}
   31610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   31612:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   31616:	f1a0 0714 	sub.w	r7, r0, #20
   3161a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3161e:	2b08      	cmp	r3, #8
	event->poller = NULL;
   31620:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   31624:	d80c      	bhi.n	31640 <clear_event_registrations+0x40>
   31626:	fa26 f303 	lsr.w	r3, r6, r3
   3162a:	07db      	lsls	r3, r3, #31
   3162c:	d508      	bpl.n	31640 <clear_event_registrations+0x40>
	return node->next != NULL;
   3162e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   31632:	b12b      	cbz	r3, 31640 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   31634:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   31638:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   3163a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   3163c:	e940 4405 	strd	r4, r4, [r0, #-20]
   31640:	f382 8811 	msr	BASEPRI, r2
   31644:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   31648:	f04f 0320 	mov.w	r3, #32
   3164c:	f3ef 8211 	mrs	r2, BASEPRI
   31650:	f383 8812 	msr	BASEPRI_MAX, r3
   31654:	f3bf 8f6f 	isb	sy
   31658:	4638      	mov	r0, r7
   3165a:	3901      	subs	r1, #1
   3165c:	e7d7      	b.n	3160e <clear_event_registrations+0xe>

0003165e <k_poll_event_init>:
{
   3165e:	b510      	push	{r4, lr}
	event->poller = NULL;
   31660:	2400      	movs	r4, #0
	event->type = type;
   31662:	0552      	lsls	r2, r2, #21
   31664:	0209      	lsls	r1, r1, #8
   31666:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   3166a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   3166e:	430a      	orrs	r2, r1
   31670:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   31672:	6084      	str	r4, [r0, #8]
	event->type = type;
   31674:	430a      	orrs	r2, r1
	event->obj = obj;
   31676:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   3167a:	bd10      	pop	{r4, pc}

0003167c <z_handle_obj_poll_events>:
{
   3167c:	4603      	mov	r3, r0
	return list->head == list;
   3167e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   31680:	4283      	cmp	r3, r0
   31682:	d008      	beq.n	31696 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   31684:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   31688:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3168a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3168c:	2300      	movs	r3, #0
	node->prev = NULL;
   3168e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   31692:	f7ff bf5b 	b.w	3154c <signal_poll_event>
}
   31696:	4770      	bx	lr

00031698 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   31698:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   3169a:	e9c0 0000 	strd	r0, r0, [r0]
   3169e:	6083      	str	r3, [r0, #8]
}
   316a0:	4770      	bx	lr

000316a2 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   316a2:	3204      	adds	r2, #4
{
   316a4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   316a6:	4604      	mov	r4, r0
   316a8:	d208      	bcs.n	316bc <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   316aa:	2600      	movs	r6, #0
   316ac:	2700      	movs	r7, #0
   316ae:	f041 0104 	orr.w	r1, r1, #4
   316b2:	e9cd 6700 	strd	r6, r7, [sp]
   316b6:	f7ff fa7d 	bl	30bb4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   316ba:	b910      	cbnz	r0, 316c2 <z_heap_aligned_alloc+0x20>
		return NULL;
   316bc:	2000      	movs	r0, #0
}
   316be:	b002      	add	sp, #8
   316c0:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   316c2:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   316c6:	e7fa      	b.n	316be <z_heap_aligned_alloc+0x1c>

000316c8 <k_free>:
	if (ptr != NULL) {
   316c8:	b120      	cbz	r0, 316d4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   316ca:	1f01      	subs	r1, r0, #4
   316cc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   316d0:	f7ff babd 	b.w	30c4e <k_heap_free>
}
   316d4:	4770      	bx	lr

000316d6 <k_malloc>:
{
   316d6:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   316d8:	2004      	movs	r0, #4
   316da:	f7f5 b9cf 	b.w	26a7c <k_aligned_alloc>

000316de <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   316de:	4770      	bx	lr

000316e0 <atof>:
   316e0:	2100      	movs	r1, #0
   316e2:	f7f6 b8e7 	b.w	278b4 <strtod>

000316e6 <atoi>:
   316e6:	220a      	movs	r2, #10
   316e8:	2100      	movs	r1, #0
   316ea:	f7f6 b9a1 	b.w	27a30 <strtol>

000316ee <memcmp>:
   316ee:	3901      	subs	r1, #1
   316f0:	4402      	add	r2, r0
   316f2:	b510      	push	{r4, lr}
   316f4:	4290      	cmp	r0, r2
   316f6:	d101      	bne.n	316fc <memcmp+0xe>
   316f8:	2000      	movs	r0, #0
   316fa:	e005      	b.n	31708 <memcmp+0x1a>
   316fc:	7803      	ldrb	r3, [r0, #0]
   316fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   31702:	42a3      	cmp	r3, r4
   31704:	d001      	beq.n	3170a <memcmp+0x1c>
   31706:	1b18      	subs	r0, r3, r4
   31708:	bd10      	pop	{r4, pc}
   3170a:	3001      	adds	r0, #1
   3170c:	e7f2      	b.n	316f4 <memcmp+0x6>

0003170e <memcpy>:
   3170e:	440a      	add	r2, r1
   31710:	1e43      	subs	r3, r0, #1
   31712:	4291      	cmp	r1, r2
   31714:	d100      	bne.n	31718 <memcpy+0xa>
   31716:	4770      	bx	lr
   31718:	b510      	push	{r4, lr}
   3171a:	f811 4b01 	ldrb.w	r4, [r1], #1
   3171e:	4291      	cmp	r1, r2
   31720:	f803 4f01 	strb.w	r4, [r3, #1]!
   31724:	d1f9      	bne.n	3171a <memcpy+0xc>
   31726:	bd10      	pop	{r4, pc}

00031728 <__memcpy_chk>:
   31728:	429a      	cmp	r2, r3
   3172a:	b508      	push	{r3, lr}
   3172c:	d901      	bls.n	31732 <__memcpy_chk+0xa>
   3172e:	f7e0 fb53 	bl	11dd8 <__chk_fail>
   31732:	4281      	cmp	r1, r0
   31734:	d804      	bhi.n	31740 <__memcpy_chk+0x18>
   31736:	188b      	adds	r3, r1, r2
   31738:	4298      	cmp	r0, r3
   3173a:	d3f8      	bcc.n	3172e <__memcpy_chk+0x6>
   3173c:	4281      	cmp	r1, r0
   3173e:	d102      	bne.n	31746 <__memcpy_chk+0x1e>
   31740:	1883      	adds	r3, r0, r2
   31742:	4299      	cmp	r1, r3
   31744:	d3f3      	bcc.n	3172e <__memcpy_chk+0x6>
   31746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3174a:	f7ff bfe0 	b.w	3170e <memcpy>

0003174e <memmove>:
   3174e:	4288      	cmp	r0, r1
   31750:	b510      	push	{r4, lr}
   31752:	eb01 0402 	add.w	r4, r1, r2
   31756:	d902      	bls.n	3175e <memmove+0x10>
   31758:	4284      	cmp	r4, r0
   3175a:	4623      	mov	r3, r4
   3175c:	d807      	bhi.n	3176e <memmove+0x20>
   3175e:	1e43      	subs	r3, r0, #1
   31760:	42a1      	cmp	r1, r4
   31762:	d008      	beq.n	31776 <memmove+0x28>
   31764:	f811 2b01 	ldrb.w	r2, [r1], #1
   31768:	f803 2f01 	strb.w	r2, [r3, #1]!
   3176c:	e7f8      	b.n	31760 <memmove+0x12>
   3176e:	4402      	add	r2, r0
   31770:	4601      	mov	r1, r0
   31772:	428a      	cmp	r2, r1
   31774:	d100      	bne.n	31778 <memmove+0x2a>
   31776:	bd10      	pop	{r4, pc}
   31778:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3177c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   31780:	e7f7      	b.n	31772 <memmove+0x24>

00031782 <memset>:
   31782:	4402      	add	r2, r0
   31784:	4603      	mov	r3, r0
   31786:	4293      	cmp	r3, r2
   31788:	d100      	bne.n	3178c <memset+0xa>
   3178a:	4770      	bx	lr
   3178c:	f803 1b01 	strb.w	r1, [r3], #1
   31790:	e7f9      	b.n	31786 <memset+0x4>

00031792 <_calloc_r>:
   31792:	b538      	push	{r3, r4, r5, lr}
   31794:	fb02 f501 	mul.w	r5, r2, r1
   31798:	4629      	mov	r1, r5
   3179a:	f7f5 fca5 	bl	270e8 <_malloc_r>
   3179e:	4604      	mov	r4, r0
   317a0:	b118      	cbz	r0, 317aa <_calloc_r+0x18>
   317a2:	462a      	mov	r2, r5
   317a4:	2100      	movs	r1, #0
   317a6:	f7ff ffec 	bl	31782 <memset>
   317aa:	4620      	mov	r0, r4
   317ac:	bd38      	pop	{r3, r4, r5, pc}

000317ae <__cvt>:
   317ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   317b2:	b089      	sub	sp, #36	; 0x24
   317b4:	2b00      	cmp	r3, #0
   317b6:	461d      	mov	r5, r3
   317b8:	4614      	mov	r4, r2
   317ba:	bfba      	itte	lt
   317bc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   317c0:	4614      	movlt	r4, r2
   317c2:	2300      	movge	r3, #0
   317c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   317c6:	bfbc      	itt	lt
   317c8:	461d      	movlt	r5, r3
   317ca:	232d      	movlt	r3, #45	; 0x2d
   317cc:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   317d0:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   317d4:	f028 0a20 	bic.w	sl, r8, #32
   317d8:	7013      	strb	r3, [r2, #0]
   317da:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   317de:	d005      	beq.n	317ec <__cvt+0x3e>
   317e0:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   317e4:	d100      	bne.n	317e8 <__cvt+0x3a>
   317e6:	3601      	adds	r6, #1
   317e8:	2302      	movs	r3, #2
   317ea:	e000      	b.n	317ee <__cvt+0x40>
   317ec:	2303      	movs	r3, #3
   317ee:	aa07      	add	r2, sp, #28
   317f0:	9204      	str	r2, [sp, #16]
   317f2:	aa06      	add	r2, sp, #24
   317f4:	e9cd 3600 	strd	r3, r6, [sp]
   317f8:	e9cd 9202 	strd	r9, r2, [sp, #8]
   317fc:	462b      	mov	r3, r5
   317fe:	4622      	mov	r2, r4
   31800:	f7d9 f90e 	bl	aa20 <_dtoa_r>
   31804:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   31808:	4607      	mov	r7, r0
   3180a:	d119      	bne.n	31840 <__cvt+0x92>
   3180c:	f01b 0f01 	tst.w	fp, #1
   31810:	d00e      	beq.n	31830 <__cvt+0x82>
   31812:	eb07 0806 	add.w	r8, r7, r6
   31816:	2200      	movs	r2, #0
   31818:	2300      	movs	r3, #0
   3181a:	4620      	mov	r0, r4
   3181c:	4629      	mov	r1, r5
   3181e:	f7d7 fc1d 	bl	905c <__aeabi_dcmpeq>
   31822:	b108      	cbz	r0, 31828 <__cvt+0x7a>
   31824:	f8cd 801c 	str.w	r8, [sp, #28]
   31828:	2230      	movs	r2, #48	; 0x30
   3182a:	9b07      	ldr	r3, [sp, #28]
   3182c:	4543      	cmp	r3, r8
   3182e:	d321      	bcc.n	31874 <__cvt+0xc6>
   31830:	9b07      	ldr	r3, [sp, #28]
   31832:	4638      	mov	r0, r7
   31834:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   31836:	1bdb      	subs	r3, r3, r7
   31838:	6013      	str	r3, [r2, #0]
   3183a:	b009      	add	sp, #36	; 0x24
   3183c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31840:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   31844:	d0e2      	beq.n	3180c <__cvt+0x5e>
   31846:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   3184a:	eb00 0806 	add.w	r8, r0, r6
   3184e:	d1e2      	bne.n	31816 <__cvt+0x68>
   31850:	7803      	ldrb	r3, [r0, #0]
   31852:	2b30      	cmp	r3, #48	; 0x30
   31854:	d10a      	bne.n	3186c <__cvt+0xbe>
   31856:	2200      	movs	r2, #0
   31858:	2300      	movs	r3, #0
   3185a:	4620      	mov	r0, r4
   3185c:	4629      	mov	r1, r5
   3185e:	f7d7 fbfd 	bl	905c <__aeabi_dcmpeq>
   31862:	b918      	cbnz	r0, 3186c <__cvt+0xbe>
   31864:	f1c6 0601 	rsb	r6, r6, #1
   31868:	f8c9 6000 	str.w	r6, [r9]
   3186c:	f8d9 3000 	ldr.w	r3, [r9]
   31870:	4498      	add	r8, r3
   31872:	e7d0      	b.n	31816 <__cvt+0x68>
   31874:	1c59      	adds	r1, r3, #1
   31876:	9107      	str	r1, [sp, #28]
   31878:	701a      	strb	r2, [r3, #0]
   3187a:	e7d6      	b.n	3182a <__cvt+0x7c>

0003187c <__exponent>:
   3187c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3187e:	2900      	cmp	r1, #0
   31880:	7002      	strb	r2, [r0, #0]
   31882:	bfba      	itte	lt
   31884:	4249      	neglt	r1, r1
   31886:	232d      	movlt	r3, #45	; 0x2d
   31888:	232b      	movge	r3, #43	; 0x2b
   3188a:	2909      	cmp	r1, #9
   3188c:	7043      	strb	r3, [r0, #1]
   3188e:	dd28      	ble.n	318e2 <__exponent+0x66>
   31890:	f10d 0307 	add.w	r3, sp, #7
   31894:	270a      	movs	r7, #10
   31896:	461d      	mov	r5, r3
   31898:	461a      	mov	r2, r3
   3189a:	3b01      	subs	r3, #1
   3189c:	fbb1 f6f7 	udiv	r6, r1, r7
   318a0:	fb07 1416 	mls	r4, r7, r6, r1
   318a4:	3430      	adds	r4, #48	; 0x30
   318a6:	f802 4c01 	strb.w	r4, [r2, #-1]
   318aa:	460c      	mov	r4, r1
   318ac:	4631      	mov	r1, r6
   318ae:	2c63      	cmp	r4, #99	; 0x63
   318b0:	dcf2      	bgt.n	31898 <__exponent+0x1c>
   318b2:	3130      	adds	r1, #48	; 0x30
   318b4:	1e94      	subs	r4, r2, #2
   318b6:	f803 1c01 	strb.w	r1, [r3, #-1]
   318ba:	1c41      	adds	r1, r0, #1
   318bc:	4623      	mov	r3, r4
   318be:	42ab      	cmp	r3, r5
   318c0:	d30a      	bcc.n	318d8 <__exponent+0x5c>
   318c2:	f10d 0309 	add.w	r3, sp, #9
   318c6:	1a9b      	subs	r3, r3, r2
   318c8:	42ac      	cmp	r4, r5
   318ca:	bf88      	it	hi
   318cc:	2300      	movhi	r3, #0
   318ce:	3302      	adds	r3, #2
   318d0:	4403      	add	r3, r0
   318d2:	1a18      	subs	r0, r3, r0
   318d4:	b003      	add	sp, #12
   318d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   318d8:	f813 6b01 	ldrb.w	r6, [r3], #1
   318dc:	f801 6f01 	strb.w	r6, [r1, #1]!
   318e0:	e7ed      	b.n	318be <__exponent+0x42>
   318e2:	2330      	movs	r3, #48	; 0x30
   318e4:	3130      	adds	r1, #48	; 0x30
   318e6:	7083      	strb	r3, [r0, #2]
   318e8:	1d03      	adds	r3, r0, #4
   318ea:	70c1      	strb	r1, [r0, #3]
   318ec:	e7f1      	b.n	318d2 <__exponent+0x56>

000318ee <_printf_common>:
   318ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   318f2:	4616      	mov	r6, r2
   318f4:	4698      	mov	r8, r3
   318f6:	688a      	ldr	r2, [r1, #8]
   318f8:	4607      	mov	r7, r0
   318fa:	690b      	ldr	r3, [r1, #16]
   318fc:	460c      	mov	r4, r1
   318fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
   31902:	4293      	cmp	r3, r2
   31904:	bfb8      	it	lt
   31906:	4613      	movlt	r3, r2
   31908:	6033      	str	r3, [r6, #0]
   3190a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3190e:	b10a      	cbz	r2, 31914 <_printf_common+0x26>
   31910:	3301      	adds	r3, #1
   31912:	6033      	str	r3, [r6, #0]
   31914:	6823      	ldr	r3, [r4, #0]
   31916:	0699      	lsls	r1, r3, #26
   31918:	bf42      	ittt	mi
   3191a:	6833      	ldrmi	r3, [r6, #0]
   3191c:	3302      	addmi	r3, #2
   3191e:	6033      	strmi	r3, [r6, #0]
   31920:	6825      	ldr	r5, [r4, #0]
   31922:	f015 0506 	ands.w	r5, r5, #6
   31926:	d106      	bne.n	31936 <_printf_common+0x48>
   31928:	f104 0a19 	add.w	sl, r4, #25
   3192c:	68e3      	ldr	r3, [r4, #12]
   3192e:	6832      	ldr	r2, [r6, #0]
   31930:	1a9b      	subs	r3, r3, r2
   31932:	42ab      	cmp	r3, r5
   31934:	dc2b      	bgt.n	3198e <_flash_used+0x46>
   31936:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   3193a:	6822      	ldr	r2, [r4, #0]
   3193c:	3b00      	subs	r3, #0
   3193e:	bf18      	it	ne
   31940:	2301      	movne	r3, #1
   31942:	0692      	lsls	r2, r2, #26
   31944:	d430      	bmi.n	319a8 <_flash_used+0x60>
   31946:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3194a:	4641      	mov	r1, r8
   3194c:	4638      	mov	r0, r7
   3194e:	47c8      	blx	r9
   31950:	3001      	adds	r0, #1
   31952:	d023      	beq.n	3199c <_flash_used+0x54>
   31954:	6823      	ldr	r3, [r4, #0]
   31956:	341a      	adds	r4, #26
   31958:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   3195c:	f003 0306 	and.w	r3, r3, #6
   31960:	2b04      	cmp	r3, #4
   31962:	bf0a      	itet	eq
   31964:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   31968:	2500      	movne	r5, #0
   3196a:	6833      	ldreq	r3, [r6, #0]
   3196c:	f04f 0600 	mov.w	r6, #0
   31970:	bf08      	it	eq
   31972:	1aed      	subeq	r5, r5, r3
   31974:	f854 3c12 	ldr.w	r3, [r4, #-18]
   31978:	bf08      	it	eq
   3197a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3197e:	4293      	cmp	r3, r2
   31980:	bfc4      	itt	gt
   31982:	1a9b      	subgt	r3, r3, r2
   31984:	18ed      	addgt	r5, r5, r3
   31986:	42b5      	cmp	r5, r6
   31988:	d11a      	bne.n	319c0 <_flash_used+0x78>
   3198a:	2000      	movs	r0, #0
   3198c:	e008      	b.n	319a0 <_flash_used+0x58>
   3198e:	2301      	movs	r3, #1
   31990:	4652      	mov	r2, sl
   31992:	4641      	mov	r1, r8
   31994:	4638      	mov	r0, r7
   31996:	47c8      	blx	r9
   31998:	3001      	adds	r0, #1
   3199a:	d103      	bne.n	319a4 <_flash_used+0x5c>
   3199c:	f04f 30ff 	mov.w	r0, #4294967295
   319a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   319a4:	3501      	adds	r5, #1
   319a6:	e7c1      	b.n	3192c <_printf_common+0x3e>
   319a8:	18e1      	adds	r1, r4, r3
   319aa:	1c5a      	adds	r2, r3, #1
   319ac:	2030      	movs	r0, #48	; 0x30
   319ae:	3302      	adds	r3, #2
   319b0:	4422      	add	r2, r4
   319b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   319b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   319ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   319be:	e7c2      	b.n	31946 <_printf_common+0x58>
   319c0:	2301      	movs	r3, #1
   319c2:	4622      	mov	r2, r4
   319c4:	4641      	mov	r1, r8
   319c6:	4638      	mov	r0, r7
   319c8:	47c8      	blx	r9
   319ca:	3001      	adds	r0, #1
   319cc:	d0e6      	beq.n	3199c <_flash_used+0x54>
   319ce:	3601      	adds	r6, #1
   319d0:	e7d9      	b.n	31986 <_flash_used+0x3e>

000319d2 <__sprintf_chk>:
   319d2:	b408      	push	{r3}
   319d4:	b517      	push	{r0, r1, r2, r4, lr}
   319d6:	ab05      	add	r3, sp, #20
   319d8:	1e14      	subs	r4, r2, #0
   319da:	f853 1b04 	ldr.w	r1, [r3], #4
   319de:	9301      	str	r3, [sp, #4]
   319e0:	da07      	bge.n	319f2 <__sprintf_chk+0x20>
   319e2:	461a      	mov	r2, r3
   319e4:	f7f6 fb16 	bl	28014 <vsiprintf>
   319e8:	b003      	add	sp, #12
   319ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   319ee:	b001      	add	sp, #4
   319f0:	4770      	bx	lr
   319f2:	460a      	mov	r2, r1
   319f4:	4621      	mov	r1, r4
   319f6:	f7f6 fae9 	bl	27fcc <vsniprintf>
   319fa:	2800      	cmp	r0, #0
   319fc:	dbf4      	blt.n	319e8 <__sprintf_chk+0x16>
   319fe:	42a0      	cmp	r0, r4
   31a00:	d3f2      	bcc.n	319e8 <__sprintf_chk+0x16>
   31a02:	f7e0 f9e9 	bl	11dd8 <__chk_fail>

00031a06 <strchr>:
   31a06:	b2c9      	uxtb	r1, r1
   31a08:	4603      	mov	r3, r0
   31a0a:	4618      	mov	r0, r3
   31a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   31a10:	b112      	cbz	r2, 31a18 <strchr+0x12>
   31a12:	428a      	cmp	r2, r1
   31a14:	d1f9      	bne.n	31a0a <strchr+0x4>
   31a16:	4770      	bx	lr
   31a18:	2900      	cmp	r1, #0
   31a1a:	bf18      	it	ne
   31a1c:	2000      	movne	r0, #0
   31a1e:	4770      	bx	lr

00031a20 <strcpy>:
   31a20:	4603      	mov	r3, r0
   31a22:	f811 2b01 	ldrb.w	r2, [r1], #1
   31a26:	f803 2b01 	strb.w	r2, [r3], #1
   31a2a:	2a00      	cmp	r2, #0
   31a2c:	d1f9      	bne.n	31a22 <strcpy+0x2>
   31a2e:	4770      	bx	lr

00031a30 <strncmp>:
   31a30:	b510      	push	{r4, lr}
   31a32:	b16a      	cbz	r2, 31a50 <strncmp+0x20>
   31a34:	3901      	subs	r1, #1
   31a36:	1884      	adds	r4, r0, r2
   31a38:	f810 2b01 	ldrb.w	r2, [r0], #1
   31a3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   31a40:	429a      	cmp	r2, r3
   31a42:	d103      	bne.n	31a4c <strncmp+0x1c>
   31a44:	42a0      	cmp	r0, r4
   31a46:	d001      	beq.n	31a4c <strncmp+0x1c>
   31a48:	2a00      	cmp	r2, #0
   31a4a:	d1f5      	bne.n	31a38 <strncmp+0x8>
   31a4c:	1ad0      	subs	r0, r2, r3
   31a4e:	bd10      	pop	{r4, pc}
   31a50:	4610      	mov	r0, r2
   31a52:	e7fc      	b.n	31a4e <strncmp+0x1e>

00031a54 <strncpy>:
   31a54:	3901      	subs	r1, #1
   31a56:	4603      	mov	r3, r0
   31a58:	b510      	push	{r4, lr}
   31a5a:	b132      	cbz	r2, 31a6a <strncpy+0x16>
   31a5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   31a60:	3a01      	subs	r2, #1
   31a62:	f803 4b01 	strb.w	r4, [r3], #1
   31a66:	2c00      	cmp	r4, #0
   31a68:	d1f7      	bne.n	31a5a <strncpy+0x6>
   31a6a:	441a      	add	r2, r3
   31a6c:	2100      	movs	r1, #0
   31a6e:	4293      	cmp	r3, r2
   31a70:	d100      	bne.n	31a74 <strncpy+0x20>
   31a72:	bd10      	pop	{r4, pc}
   31a74:	f803 1b01 	strb.w	r1, [r3], #1
   31a78:	e7f9      	b.n	31a6e <strncpy+0x1a>

00031a7a <strnlen>:
   31a7a:	4602      	mov	r2, r0
   31a7c:	4401      	add	r1, r0
   31a7e:	b510      	push	{r4, lr}
   31a80:	428a      	cmp	r2, r1
   31a82:	4613      	mov	r3, r2
   31a84:	d003      	beq.n	31a8e <strnlen+0x14>
   31a86:	781c      	ldrb	r4, [r3, #0]
   31a88:	3201      	adds	r2, #1
   31a8a:	2c00      	cmp	r4, #0
   31a8c:	d1f8      	bne.n	31a80 <strnlen+0x6>
   31a8e:	1a18      	subs	r0, r3, r0
   31a90:	bd10      	pop	{r4, pc}

00031a92 <strstr>:
   31a92:	780a      	ldrb	r2, [r1, #0]
   31a94:	b570      	push	{r4, r5, r6, lr}
   31a96:	b96a      	cbnz	r2, 31ab4 <strstr+0x22>
   31a98:	bd70      	pop	{r4, r5, r6, pc}
   31a9a:	429a      	cmp	r2, r3
   31a9c:	d109      	bne.n	31ab2 <strstr+0x20>
   31a9e:	460c      	mov	r4, r1
   31aa0:	4605      	mov	r5, r0
   31aa2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   31aa6:	2b00      	cmp	r3, #0
   31aa8:	d0f6      	beq.n	31a98 <strstr+0x6>
   31aaa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   31aae:	429e      	cmp	r6, r3
   31ab0:	d0f7      	beq.n	31aa2 <strstr+0x10>
   31ab2:	3001      	adds	r0, #1
   31ab4:	7803      	ldrb	r3, [r0, #0]
   31ab6:	2b00      	cmp	r3, #0
   31ab8:	d1ef      	bne.n	31a9a <strstr+0x8>
   31aba:	4618      	mov	r0, r3
   31abc:	e7ec      	b.n	31a98 <strstr+0x6>

00031abe <sulp>:
   31abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31ac2:	4690      	mov	r8, r2
   31ac4:	460f      	mov	r7, r1
   31ac6:	f7f7 f92f 	bl	28d28 <__ulp>
   31aca:	4604      	mov	r4, r0
   31acc:	460d      	mov	r5, r1
   31ace:	f1b8 0f00 	cmp.w	r8, #0
   31ad2:	d011      	beq.n	31af8 <sulp+0x3a>
   31ad4:	f3c7 530a 	ubfx	r3, r7, #20, #11
   31ad8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   31adc:	2b00      	cmp	r3, #0
   31ade:	dd0b      	ble.n	31af8 <sulp+0x3a>
   31ae0:	051b      	lsls	r3, r3, #20
   31ae2:	2400      	movs	r4, #0
   31ae4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   31ae8:	4622      	mov	r2, r4
   31aea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   31aee:	462b      	mov	r3, r5
   31af0:	f7d6 fcee 	bl	84d0 <__aeabi_dmul>
   31af4:	4604      	mov	r4, r0
   31af6:	460d      	mov	r5, r1
   31af8:	4620      	mov	r0, r4
   31afa:	4629      	mov	r1, r5
   31afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00031b00 <__strtok_r>:
   31b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   31b02:	4604      	mov	r4, r0
   31b04:	b908      	cbnz	r0, 31b0a <__strtok_r+0xa>
   31b06:	6814      	ldr	r4, [r2, #0]
   31b08:	b144      	cbz	r4, 31b1c <__strtok_r+0x1c>
   31b0a:	4620      	mov	r0, r4
   31b0c:	460f      	mov	r7, r1
   31b0e:	f814 5b01 	ldrb.w	r5, [r4], #1
   31b12:	f817 6b01 	ldrb.w	r6, [r7], #1
   31b16:	b91e      	cbnz	r6, 31b20 <__strtok_r+0x20>
   31b18:	b965      	cbnz	r5, 31b34 <__strtok_r+0x34>
   31b1a:	6015      	str	r5, [r2, #0]
   31b1c:	2000      	movs	r0, #0
   31b1e:	e005      	b.n	31b2c <__strtok_r+0x2c>
   31b20:	42b5      	cmp	r5, r6
   31b22:	d1f6      	bne.n	31b12 <__strtok_r+0x12>
   31b24:	2b00      	cmp	r3, #0
   31b26:	d1f0      	bne.n	31b0a <__strtok_r+0xa>
   31b28:	6014      	str	r4, [r2, #0]
   31b2a:	7003      	strb	r3, [r0, #0]
   31b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b2e:	461c      	mov	r4, r3
   31b30:	e00c      	b.n	31b4c <__strtok_r+0x4c>
   31b32:	b915      	cbnz	r5, 31b3a <__strtok_r+0x3a>
   31b34:	f814 3b01 	ldrb.w	r3, [r4], #1
   31b38:	460e      	mov	r6, r1
   31b3a:	f816 5b01 	ldrb.w	r5, [r6], #1
   31b3e:	42ab      	cmp	r3, r5
   31b40:	d1f7      	bne.n	31b32 <__strtok_r+0x32>
   31b42:	2b00      	cmp	r3, #0
   31b44:	d0f3      	beq.n	31b2e <__strtok_r+0x2e>
   31b46:	2300      	movs	r3, #0
   31b48:	f804 3c01 	strb.w	r3, [r4, #-1]
   31b4c:	6014      	str	r4, [r2, #0]
   31b4e:	e7ed      	b.n	31b2c <__strtok_r+0x2c>

00031b50 <_strtol_r>:
   31b50:	f7f5 bef0 	b.w	27934 <_strtol_l.constprop.0>

00031b54 <_strtoul_r>:
   31b54:	f7f5 bf76 	b.w	27a44 <_strtoul_l.constprop.0>

00031b58 <_vsniprintf_r>:
   31b58:	b530      	push	{r4, r5, lr}
   31b5a:	4614      	mov	r4, r2
   31b5c:	b09b      	sub	sp, #108	; 0x6c
   31b5e:	4605      	mov	r5, r0
   31b60:	461a      	mov	r2, r3
   31b62:	2c00      	cmp	r4, #0
   31b64:	da05      	bge.n	31b72 <_vsniprintf_r+0x1a>
   31b66:	238b      	movs	r3, #139	; 0x8b
   31b68:	6003      	str	r3, [r0, #0]
   31b6a:	f04f 30ff 	mov.w	r0, #4294967295
   31b6e:	b01b      	add	sp, #108	; 0x6c
   31b70:	bd30      	pop	{r4, r5, pc}
   31b72:	f44f 7302 	mov.w	r3, #520	; 0x208
   31b76:	9100      	str	r1, [sp, #0]
   31b78:	9104      	str	r1, [sp, #16]
   31b7a:	4669      	mov	r1, sp
   31b7c:	f8ad 300c 	strh.w	r3, [sp, #12]
   31b80:	bf14      	ite	ne
   31b82:	f104 33ff 	addne.w	r3, r4, #4294967295
   31b86:	4623      	moveq	r3, r4
   31b88:	9302      	str	r3, [sp, #8]
   31b8a:	9305      	str	r3, [sp, #20]
   31b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31b90:	f8ad 300e 	strh.w	r3, [sp, #14]
   31b94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   31b96:	f7f7 f989 	bl	28eac <_svfiprintf_r>
   31b9a:	1c43      	adds	r3, r0, #1
   31b9c:	bfbc      	itt	lt
   31b9e:	238b      	movlt	r3, #139	; 0x8b
   31ba0:	602b      	strlt	r3, [r5, #0]
   31ba2:	2c00      	cmp	r4, #0
   31ba4:	d0e3      	beq.n	31b6e <_vsniprintf_r+0x16>
   31ba6:	9b00      	ldr	r3, [sp, #0]
   31ba8:	2200      	movs	r2, #0
   31baa:	701a      	strb	r2, [r3, #0]
   31bac:	e7df      	b.n	31b6e <_vsniprintf_r+0x16>

00031bae <div>:
   31bae:	b510      	push	{r4, lr}
   31bb0:	fb91 f4f2 	sdiv	r4, r1, r2
   31bb4:	fb02 1114 	mls	r1, r2, r4, r1
   31bb8:	6004      	str	r4, [r0, #0]
   31bba:	6041      	str	r1, [r0, #4]
   31bbc:	bd10      	pop	{r4, pc}

00031bbe <quorem>:
   31bbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31bc2:	6903      	ldr	r3, [r0, #16]
   31bc4:	4607      	mov	r7, r0
   31bc6:	690c      	ldr	r4, [r1, #16]
   31bc8:	42a3      	cmp	r3, r4
   31bca:	f2c0 8083 	blt.w	31cd4 <quorem+0x116>
   31bce:	3c01      	subs	r4, #1
   31bd0:	f100 0514 	add.w	r5, r0, #20
   31bd4:	f101 0814 	add.w	r8, r1, #20
   31bd8:	00a3      	lsls	r3, r4, #2
   31bda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   31bde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   31be2:	9300      	str	r3, [sp, #0]
   31be4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   31be8:	9301      	str	r3, [sp, #4]
   31bea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   31bee:	3301      	adds	r3, #1
   31bf0:	429a      	cmp	r2, r3
   31bf2:	fbb2 f6f3 	udiv	r6, r2, r3
   31bf6:	d331      	bcc.n	31c5c <quorem+0x9e>
   31bf8:	f04f 0a00 	mov.w	sl, #0
   31bfc:	46c4      	mov	ip, r8
   31bfe:	46ae      	mov	lr, r5
   31c00:	46d3      	mov	fp, sl
   31c02:	f85c 3b04 	ldr.w	r3, [ip], #4
   31c06:	b298      	uxth	r0, r3
   31c08:	45e1      	cmp	r9, ip
   31c0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   31c0e:	fb06 a000 	mla	r0, r6, r0, sl
   31c12:	ea4f 4210 	mov.w	r2, r0, lsr #16
   31c16:	b280      	uxth	r0, r0
   31c18:	fb06 2303 	mla	r3, r6, r3, r2
   31c1c:	f8de 2000 	ldr.w	r2, [lr]
   31c20:	b292      	uxth	r2, r2
   31c22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   31c26:	eba2 0200 	sub.w	r2, r2, r0
   31c2a:	b29b      	uxth	r3, r3
   31c2c:	f8de 0000 	ldr.w	r0, [lr]
   31c30:	445a      	add	r2, fp
   31c32:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   31c36:	b292      	uxth	r2, r2
   31c38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   31c3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   31c40:	ea4f 4b23 	mov.w	fp, r3, asr #16
   31c44:	f84e 2b04 	str.w	r2, [lr], #4
   31c48:	d2db      	bcs.n	31c02 <quorem+0x44>
   31c4a:	9b00      	ldr	r3, [sp, #0]
   31c4c:	58eb      	ldr	r3, [r5, r3]
   31c4e:	b92b      	cbnz	r3, 31c5c <quorem+0x9e>
   31c50:	9b01      	ldr	r3, [sp, #4]
   31c52:	3b04      	subs	r3, #4
   31c54:	429d      	cmp	r5, r3
   31c56:	461a      	mov	r2, r3
   31c58:	d330      	bcc.n	31cbc <quorem+0xfe>
   31c5a:	613c      	str	r4, [r7, #16]
   31c5c:	4638      	mov	r0, r7
   31c5e:	f000 fa0d 	bl	3207c <__mcmp>
   31c62:	2800      	cmp	r0, #0
   31c64:	db26      	blt.n	31cb4 <quorem+0xf6>
   31c66:	4629      	mov	r1, r5
   31c68:	2000      	movs	r0, #0
   31c6a:	f858 2b04 	ldr.w	r2, [r8], #4
   31c6e:	f8d1 c000 	ldr.w	ip, [r1]
   31c72:	fa1f fe82 	uxth.w	lr, r2
   31c76:	45c1      	cmp	r9, r8
   31c78:	fa1f f38c 	uxth.w	r3, ip
   31c7c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   31c80:	eba3 030e 	sub.w	r3, r3, lr
   31c84:	4403      	add	r3, r0
   31c86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   31c8a:	b29b      	uxth	r3, r3
   31c8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   31c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   31c94:	ea4f 4022 	mov.w	r0, r2, asr #16
   31c98:	f841 3b04 	str.w	r3, [r1], #4
   31c9c:	d2e5      	bcs.n	31c6a <quorem+0xac>
   31c9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   31ca2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   31ca6:	b922      	cbnz	r2, 31cb2 <quorem+0xf4>
   31ca8:	3b04      	subs	r3, #4
   31caa:	429d      	cmp	r5, r3
   31cac:	461a      	mov	r2, r3
   31cae:	d30b      	bcc.n	31cc8 <quorem+0x10a>
   31cb0:	613c      	str	r4, [r7, #16]
   31cb2:	3601      	adds	r6, #1
   31cb4:	4630      	mov	r0, r6
   31cb6:	b003      	add	sp, #12
   31cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31cbc:	6812      	ldr	r2, [r2, #0]
   31cbe:	3b04      	subs	r3, #4
   31cc0:	2a00      	cmp	r2, #0
   31cc2:	d1ca      	bne.n	31c5a <quorem+0x9c>
   31cc4:	3c01      	subs	r4, #1
   31cc6:	e7c5      	b.n	31c54 <quorem+0x96>
   31cc8:	6812      	ldr	r2, [r2, #0]
   31cca:	3b04      	subs	r3, #4
   31ccc:	2a00      	cmp	r2, #0
   31cce:	d1ef      	bne.n	31cb0 <quorem+0xf2>
   31cd0:	3c01      	subs	r4, #1
   31cd2:	e7ea      	b.n	31caa <quorem+0xec>
   31cd4:	2000      	movs	r0, #0
   31cd6:	e7ee      	b.n	31cb6 <quorem+0xf8>

00031cd8 <__sfmoreglue>:
   31cd8:	b570      	push	{r4, r5, r6, lr}
   31cda:	2368      	movs	r3, #104	; 0x68
   31cdc:	1e4d      	subs	r5, r1, #1
   31cde:	460e      	mov	r6, r1
   31ce0:	435d      	muls	r5, r3
   31ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
   31ce6:	f7f5 f9ff 	bl	270e8 <_malloc_r>
   31cea:	4604      	mov	r4, r0
   31cec:	b140      	cbz	r0, 31d00 <__sfmoreglue+0x28>
   31cee:	2100      	movs	r1, #0
   31cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
   31cf4:	e9c0 1600 	strd	r1, r6, [r0]
   31cf8:	300c      	adds	r0, #12
   31cfa:	60a0      	str	r0, [r4, #8]
   31cfc:	f7ff fd41 	bl	31782 <memset>
   31d00:	4620      	mov	r0, r4
   31d02:	bd70      	pop	{r4, r5, r6, pc}

00031d04 <_fwalk_reent>:
   31d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31d08:	4606      	mov	r6, r0
   31d0a:	4688      	mov	r8, r1
   31d0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   31d10:	2700      	movs	r7, #0
   31d12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   31d16:	f1b9 0901 	subs.w	r9, r9, #1
   31d1a:	d505      	bpl.n	31d28 <_fwalk_reent+0x24>
   31d1c:	6824      	ldr	r4, [r4, #0]
   31d1e:	2c00      	cmp	r4, #0
   31d20:	d1f7      	bne.n	31d12 <_fwalk_reent+0xe>
   31d22:	4638      	mov	r0, r7
   31d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   31d28:	89ab      	ldrh	r3, [r5, #12]
   31d2a:	2b01      	cmp	r3, #1
   31d2c:	d907      	bls.n	31d3e <_fwalk_reent+0x3a>
   31d2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   31d32:	3301      	adds	r3, #1
   31d34:	d003      	beq.n	31d3e <_fwalk_reent+0x3a>
   31d36:	4629      	mov	r1, r5
   31d38:	4630      	mov	r0, r6
   31d3a:	47c0      	blx	r8
   31d3c:	4307      	orrs	r7, r0
   31d3e:	3568      	adds	r5, #104	; 0x68
   31d40:	e7e9      	b.n	31d16 <_fwalk_reent+0x12>

00031d42 <rshift>:
   31d42:	6903      	ldr	r3, [r0, #16]
   31d44:	114a      	asrs	r2, r1, #5
   31d46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   31d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31d4e:	dc04      	bgt.n	31d5a <rshift+0x18>
   31d50:	2300      	movs	r3, #0
   31d52:	6103      	str	r3, [r0, #16]
   31d54:	2300      	movs	r3, #0
   31d56:	6143      	str	r3, [r0, #20]
   31d58:	e031      	b.n	31dbe <rshift+0x7c>
   31d5a:	f100 0414 	add.w	r4, r0, #20
   31d5e:	f011 011f 	ands.w	r1, r1, #31
   31d62:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   31d66:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   31d6a:	d10c      	bne.n	31d86 <rshift+0x44>
   31d6c:	f100 0710 	add.w	r7, r0, #16
   31d70:	4629      	mov	r1, r5
   31d72:	42b1      	cmp	r1, r6
   31d74:	d331      	bcc.n	31dda <rshift+0x98>
   31d76:	1a9b      	subs	r3, r3, r2
   31d78:	1eea      	subs	r2, r5, #3
   31d7a:	009b      	lsls	r3, r3, #2
   31d7c:	4296      	cmp	r6, r2
   31d7e:	bf38      	it	cc
   31d80:	2300      	movcc	r3, #0
   31d82:	4423      	add	r3, r4
   31d84:	e015      	b.n	31db2 <rshift+0x70>
   31d86:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   31d8a:	f1c1 0820 	rsb	r8, r1, #32
   31d8e:	f105 0e04 	add.w	lr, r5, #4
   31d92:	46a1      	mov	r9, r4
   31d94:	40cf      	lsrs	r7, r1
   31d96:	4576      	cmp	r6, lr
   31d98:	46f4      	mov	ip, lr
   31d9a:	d812      	bhi.n	31dc2 <rshift+0x80>
   31d9c:	1a9a      	subs	r2, r3, r2
   31d9e:	3501      	adds	r5, #1
   31da0:	0092      	lsls	r2, r2, #2
   31da2:	3a04      	subs	r2, #4
   31da4:	42ae      	cmp	r6, r5
   31da6:	bf38      	it	cc
   31da8:	2200      	movcc	r2, #0
   31daa:	18a3      	adds	r3, r4, r2
   31dac:	50a7      	str	r7, [r4, r2]
   31dae:	b107      	cbz	r7, 31db2 <rshift+0x70>
   31db0:	3304      	adds	r3, #4
   31db2:	1b1a      	subs	r2, r3, r4
   31db4:	42a3      	cmp	r3, r4
   31db6:	ea4f 02a2 	mov.w	r2, r2, asr #2
   31dba:	6102      	str	r2, [r0, #16]
   31dbc:	d0ca      	beq.n	31d54 <rshift+0x12>
   31dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31dc2:	f8dc c000 	ldr.w	ip, [ip]
   31dc6:	fa0c fc08 	lsl.w	ip, ip, r8
   31dca:	ea4c 0707 	orr.w	r7, ip, r7
   31dce:	f849 7b04 	str.w	r7, [r9], #4
   31dd2:	f85e 7b04 	ldr.w	r7, [lr], #4
   31dd6:	40cf      	lsrs	r7, r1
   31dd8:	e7dd      	b.n	31d96 <rshift+0x54>
   31dda:	f851 cb04 	ldr.w	ip, [r1], #4
   31dde:	f847 cf04 	str.w	ip, [r7, #4]!
   31de2:	e7c6      	b.n	31d72 <rshift+0x30>

00031de4 <__hexdig_fun>:
   31de4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   31de8:	2b09      	cmp	r3, #9
   31dea:	d802      	bhi.n	31df2 <__hexdig_fun+0xe>
   31dec:	3820      	subs	r0, #32
   31dee:	b2c0      	uxtb	r0, r0
   31df0:	4770      	bx	lr
   31df2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   31df6:	2b05      	cmp	r3, #5
   31df8:	d801      	bhi.n	31dfe <__hexdig_fun+0x1a>
   31dfa:	3847      	subs	r0, #71	; 0x47
   31dfc:	e7f7      	b.n	31dee <__hexdig_fun+0xa>
   31dfe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   31e02:	2b05      	cmp	r3, #5
   31e04:	d801      	bhi.n	31e0a <__hexdig_fun+0x26>
   31e06:	3827      	subs	r0, #39	; 0x27
   31e08:	e7f1      	b.n	31dee <__hexdig_fun+0xa>
   31e0a:	2000      	movs	r0, #0
   31e0c:	4770      	bx	lr

00031e0e <L_shift>:
   31e0e:	f1c2 0208 	rsb	r2, r2, #8
   31e12:	0092      	lsls	r2, r2, #2
   31e14:	b570      	push	{r4, r5, r6, lr}
   31e16:	f1c2 0620 	rsb	r6, r2, #32
   31e1a:	6843      	ldr	r3, [r0, #4]
   31e1c:	6804      	ldr	r4, [r0, #0]
   31e1e:	fa03 f506 	lsl.w	r5, r3, r6
   31e22:	40d3      	lsrs	r3, r2
   31e24:	432c      	orrs	r4, r5
   31e26:	6004      	str	r4, [r0, #0]
   31e28:	f840 3f04 	str.w	r3, [r0, #4]!
   31e2c:	4288      	cmp	r0, r1
   31e2e:	d3f4      	bcc.n	31e1a <L_shift+0xc>
   31e30:	bd70      	pop	{r4, r5, r6, pc}

00031e32 <__match>:
   31e32:	6803      	ldr	r3, [r0, #0]
   31e34:	3301      	adds	r3, #1
   31e36:	b530      	push	{r4, r5, lr}
   31e38:	f811 4b01 	ldrb.w	r4, [r1], #1
   31e3c:	b914      	cbnz	r4, 31e44 <__match+0x12>
   31e3e:	6003      	str	r3, [r0, #0]
   31e40:	2001      	movs	r0, #1
   31e42:	bd30      	pop	{r4, r5, pc}
   31e44:	f813 2b01 	ldrb.w	r2, [r3], #1
   31e48:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   31e4c:	2d19      	cmp	r5, #25
   31e4e:	bf98      	it	ls
   31e50:	3220      	addls	r2, #32
   31e52:	42a2      	cmp	r2, r4
   31e54:	d0f0      	beq.n	31e38 <__match+0x6>
   31e56:	2000      	movs	r0, #0
   31e58:	e7f3      	b.n	31e42 <__match+0x10>

00031e5a <__hexnan>:
   31e5a:	680b      	ldr	r3, [r1, #0]
   31e5c:	6801      	ldr	r1, [r0, #0]
   31e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31e62:	115e      	asrs	r6, r3, #5
   31e64:	f013 031f 	ands.w	r3, r3, #31
   31e68:	f04f 0500 	mov.w	r5, #0
   31e6c:	b087      	sub	sp, #28
   31e6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   31e72:	4682      	mov	sl, r0
   31e74:	4690      	mov	r8, r2
   31e76:	46ab      	mov	fp, r5
   31e78:	bf18      	it	ne
   31e7a:	3604      	addne	r6, #4
   31e7c:	9301      	str	r3, [sp, #4]
   31e7e:	9502      	str	r5, [sp, #8]
   31e80:	1f37      	subs	r7, r6, #4
   31e82:	f846 5c04 	str.w	r5, [r6, #-4]
   31e86:	46b9      	mov	r9, r7
   31e88:	463c      	mov	r4, r7
   31e8a:	1c4b      	adds	r3, r1, #1
   31e8c:	784a      	ldrb	r2, [r1, #1]
   31e8e:	9303      	str	r3, [sp, #12]
   31e90:	b342      	cbz	r2, 31ee4 <__hexnan+0x8a>
   31e92:	4610      	mov	r0, r2
   31e94:	9105      	str	r1, [sp, #20]
   31e96:	9204      	str	r2, [sp, #16]
   31e98:	f7ff ffa4 	bl	31de4 <__hexdig_fun>
   31e9c:	2800      	cmp	r0, #0
   31e9e:	d151      	bne.n	31f44 <__hexnan+0xea>
   31ea0:	9a04      	ldr	r2, [sp, #16]
   31ea2:	9905      	ldr	r1, [sp, #20]
   31ea4:	2a20      	cmp	r2, #32
   31ea6:	d818      	bhi.n	31eda <__hexnan+0x80>
   31ea8:	9b02      	ldr	r3, [sp, #8]
   31eaa:	459b      	cmp	fp, r3
   31eac:	dd13      	ble.n	31ed6 <__hexnan+0x7c>
   31eae:	454c      	cmp	r4, r9
   31eb0:	d206      	bcs.n	31ec0 <__hexnan+0x66>
   31eb2:	2d07      	cmp	r5, #7
   31eb4:	dc04      	bgt.n	31ec0 <__hexnan+0x66>
   31eb6:	462a      	mov	r2, r5
   31eb8:	4649      	mov	r1, r9
   31eba:	4620      	mov	r0, r4
   31ebc:	f7ff ffa7 	bl	31e0e <L_shift>
   31ec0:	4544      	cmp	r4, r8
   31ec2:	d951      	bls.n	31f68 <__hexnan+0x10e>
   31ec4:	2300      	movs	r3, #0
   31ec6:	f1a4 0904 	sub.w	r9, r4, #4
   31eca:	f8cd b008 	str.w	fp, [sp, #8]
   31ece:	f844 3c04 	str.w	r3, [r4, #-4]
   31ed2:	461d      	mov	r5, r3
   31ed4:	464c      	mov	r4, r9
   31ed6:	9903      	ldr	r1, [sp, #12]
   31ed8:	e7d7      	b.n	31e8a <__hexnan+0x30>
   31eda:	2a29      	cmp	r2, #41	; 0x29
   31edc:	d156      	bne.n	31f8c <__hexnan+0x132>
   31ede:	3102      	adds	r1, #2
   31ee0:	f8ca 1000 	str.w	r1, [sl]
   31ee4:	f1bb 0f00 	cmp.w	fp, #0
   31ee8:	d050      	beq.n	31f8c <__hexnan+0x132>
   31eea:	454c      	cmp	r4, r9
   31eec:	d206      	bcs.n	31efc <__hexnan+0xa2>
   31eee:	2d07      	cmp	r5, #7
   31ef0:	dc04      	bgt.n	31efc <__hexnan+0xa2>
   31ef2:	462a      	mov	r2, r5
   31ef4:	4649      	mov	r1, r9
   31ef6:	4620      	mov	r0, r4
   31ef8:	f7ff ff89 	bl	31e0e <L_shift>
   31efc:	4544      	cmp	r4, r8
   31efe:	d935      	bls.n	31f6c <__hexnan+0x112>
   31f00:	f1a8 0204 	sub.w	r2, r8, #4
   31f04:	4623      	mov	r3, r4
   31f06:	f853 1b04 	ldr.w	r1, [r3], #4
   31f0a:	429f      	cmp	r7, r3
   31f0c:	f842 1f04 	str.w	r1, [r2, #4]!
   31f10:	d2f9      	bcs.n	31f06 <__hexnan+0xac>
   31f12:	1b3b      	subs	r3, r7, r4
   31f14:	3e03      	subs	r6, #3
   31f16:	3401      	adds	r4, #1
   31f18:	2200      	movs	r2, #0
   31f1a:	f023 0303 	bic.w	r3, r3, #3
   31f1e:	3304      	adds	r3, #4
   31f20:	42b4      	cmp	r4, r6
   31f22:	bf88      	it	hi
   31f24:	2304      	movhi	r3, #4
   31f26:	4443      	add	r3, r8
   31f28:	f843 2b04 	str.w	r2, [r3], #4
   31f2c:	429f      	cmp	r7, r3
   31f2e:	d2fb      	bcs.n	31f28 <__hexnan+0xce>
   31f30:	683b      	ldr	r3, [r7, #0]
   31f32:	b91b      	cbnz	r3, 31f3c <__hexnan+0xe2>
   31f34:	4547      	cmp	r7, r8
   31f36:	d127      	bne.n	31f88 <__hexnan+0x12e>
   31f38:	2301      	movs	r3, #1
   31f3a:	603b      	str	r3, [r7, #0]
   31f3c:	2005      	movs	r0, #5
   31f3e:	b007      	add	sp, #28
   31f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31f44:	3501      	adds	r5, #1
   31f46:	f10b 0b01 	add.w	fp, fp, #1
   31f4a:	2d08      	cmp	r5, #8
   31f4c:	dd05      	ble.n	31f5a <__hexnan+0x100>
   31f4e:	4544      	cmp	r4, r8
   31f50:	d9c1      	bls.n	31ed6 <__hexnan+0x7c>
   31f52:	2300      	movs	r3, #0
   31f54:	3c04      	subs	r4, #4
   31f56:	2501      	movs	r5, #1
   31f58:	6023      	str	r3, [r4, #0]
   31f5a:	6822      	ldr	r2, [r4, #0]
   31f5c:	f000 000f 	and.w	r0, r0, #15
   31f60:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   31f64:	6020      	str	r0, [r4, #0]
   31f66:	e7b6      	b.n	31ed6 <__hexnan+0x7c>
   31f68:	2508      	movs	r5, #8
   31f6a:	e7b4      	b.n	31ed6 <__hexnan+0x7c>
   31f6c:	9b01      	ldr	r3, [sp, #4]
   31f6e:	2b00      	cmp	r3, #0
   31f70:	d0de      	beq.n	31f30 <__hexnan+0xd6>
   31f72:	f1c3 0320 	rsb	r3, r3, #32
   31f76:	f04f 32ff 	mov.w	r2, #4294967295
   31f7a:	40da      	lsrs	r2, r3
   31f7c:	f856 3c04 	ldr.w	r3, [r6, #-4]
   31f80:	4013      	ands	r3, r2
   31f82:	f846 3c04 	str.w	r3, [r6, #-4]
   31f86:	e7d3      	b.n	31f30 <__hexnan+0xd6>
   31f88:	3f04      	subs	r7, #4
   31f8a:	e7d1      	b.n	31f30 <__hexnan+0xd6>
   31f8c:	2004      	movs	r0, #4
   31f8e:	e7d6      	b.n	31f3e <__hexnan+0xe4>

00031f90 <_getenv_r>:
   31f90:	b507      	push	{r0, r1, r2, lr}
   31f92:	aa01      	add	r2, sp, #4
   31f94:	f7f6 fb68 	bl	28668 <_findenv_r>
   31f98:	b003      	add	sp, #12
   31f9a:	f85d fb04 	ldr.w	pc, [sp], #4

00031f9e <__ascii_mbtowc>:
   31f9e:	b082      	sub	sp, #8
   31fa0:	b901      	cbnz	r1, 31fa4 <__ascii_mbtowc+0x6>
   31fa2:	a901      	add	r1, sp, #4
   31fa4:	b142      	cbz	r2, 31fb8 <__ascii_mbtowc+0x1a>
   31fa6:	b14b      	cbz	r3, 31fbc <__ascii_mbtowc+0x1e>
   31fa8:	7813      	ldrb	r3, [r2, #0]
   31faa:	600b      	str	r3, [r1, #0]
   31fac:	7812      	ldrb	r2, [r2, #0]
   31fae:	1e10      	subs	r0, r2, #0
   31fb0:	bf18      	it	ne
   31fb2:	2001      	movne	r0, #1
   31fb4:	b002      	add	sp, #8
   31fb6:	4770      	bx	lr
   31fb8:	4610      	mov	r0, r2
   31fba:	e7fb      	b.n	31fb4 <__ascii_mbtowc+0x16>
   31fbc:	f06f 0001 	mvn.w	r0, #1
   31fc0:	e7f8      	b.n	31fb4 <__ascii_mbtowc+0x16>

00031fc2 <memchr>:
   31fc2:	b2c9      	uxtb	r1, r1
   31fc4:	4603      	mov	r3, r0
   31fc6:	4402      	add	r2, r0
   31fc8:	b510      	push	{r4, lr}
   31fca:	4293      	cmp	r3, r2
   31fcc:	4618      	mov	r0, r3
   31fce:	d101      	bne.n	31fd4 <memchr+0x12>
   31fd0:	2000      	movs	r0, #0
   31fd2:	e003      	b.n	31fdc <memchr+0x1a>
   31fd4:	7804      	ldrb	r4, [r0, #0]
   31fd6:	3301      	adds	r3, #1
   31fd8:	428c      	cmp	r4, r1
   31fda:	d1f6      	bne.n	31fca <memchr+0x8>
   31fdc:	bd10      	pop	{r4, pc}

00031fde <__hi0bits>:
   31fde:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   31fe2:	4603      	mov	r3, r0
   31fe4:	bf36      	itet	cc
   31fe6:	0403      	lslcc	r3, r0, #16
   31fe8:	2000      	movcs	r0, #0
   31fea:	2010      	movcc	r0, #16
   31fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   31ff0:	bf3c      	itt	cc
   31ff2:	021b      	lslcc	r3, r3, #8
   31ff4:	3008      	addcc	r0, #8
   31ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   31ffa:	bf3c      	itt	cc
   31ffc:	011b      	lslcc	r3, r3, #4
   31ffe:	3004      	addcc	r0, #4
   32000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   32004:	d303      	bcc.n	3200e <__hi0bits+0x30>
   32006:	2b00      	cmp	r3, #0
   32008:	db0a      	blt.n	32020 <__hi0bits+0x42>
   3200a:	3001      	adds	r0, #1
   3200c:	4770      	bx	lr
   3200e:	009b      	lsls	r3, r3, #2
   32010:	d501      	bpl.n	32016 <__hi0bits+0x38>
   32012:	3002      	adds	r0, #2
   32014:	4770      	bx	lr
   32016:	005b      	lsls	r3, r3, #1
   32018:	d501      	bpl.n	3201e <__hi0bits+0x40>
   3201a:	3003      	adds	r0, #3
   3201c:	4770      	bx	lr
   3201e:	2020      	movs	r0, #32
   32020:	4770      	bx	lr

00032022 <__lo0bits>:
   32022:	6803      	ldr	r3, [r0, #0]
   32024:	4602      	mov	r2, r0
   32026:	f013 0007 	ands.w	r0, r3, #7
   3202a:	d00b      	beq.n	32044 <__lo0bits+0x22>
   3202c:	07d9      	lsls	r1, r3, #31
   3202e:	d421      	bmi.n	32074 <__lo0bits+0x52>
   32030:	0798      	lsls	r0, r3, #30
   32032:	bf47      	ittee	mi
   32034:	085b      	lsrmi	r3, r3, #1
   32036:	2001      	movmi	r0, #1
   32038:	089b      	lsrpl	r3, r3, #2
   3203a:	2002      	movpl	r0, #2
   3203c:	bf4c      	ite	mi
   3203e:	6013      	strmi	r3, [r2, #0]
   32040:	6013      	strpl	r3, [r2, #0]
   32042:	4770      	bx	lr
   32044:	b299      	uxth	r1, r3
   32046:	b909      	cbnz	r1, 3204c <__lo0bits+0x2a>
   32048:	0c1b      	lsrs	r3, r3, #16
   3204a:	2010      	movs	r0, #16
   3204c:	b2d9      	uxtb	r1, r3
   3204e:	b909      	cbnz	r1, 32054 <__lo0bits+0x32>
   32050:	3008      	adds	r0, #8
   32052:	0a1b      	lsrs	r3, r3, #8
   32054:	0719      	lsls	r1, r3, #28
   32056:	bf04      	itt	eq
   32058:	091b      	lsreq	r3, r3, #4
   3205a:	3004      	addeq	r0, #4
   3205c:	0799      	lsls	r1, r3, #30
   3205e:	bf04      	itt	eq
   32060:	089b      	lsreq	r3, r3, #2
   32062:	3002      	addeq	r0, #2
   32064:	07d9      	lsls	r1, r3, #31
   32066:	d403      	bmi.n	32070 <__lo0bits+0x4e>
   32068:	085b      	lsrs	r3, r3, #1
   3206a:	f100 0001 	add.w	r0, r0, #1
   3206e:	d003      	beq.n	32078 <__lo0bits+0x56>
   32070:	6013      	str	r3, [r2, #0]
   32072:	4770      	bx	lr
   32074:	2000      	movs	r0, #0
   32076:	4770      	bx	lr
   32078:	2020      	movs	r0, #32
   3207a:	4770      	bx	lr

0003207c <__mcmp>:
   3207c:	4603      	mov	r3, r0
   3207e:	690a      	ldr	r2, [r1, #16]
   32080:	6900      	ldr	r0, [r0, #16]
   32082:	1a80      	subs	r0, r0, r2
   32084:	b530      	push	{r4, r5, lr}
   32086:	d10e      	bne.n	320a6 <__mcmp+0x2a>
   32088:	3314      	adds	r3, #20
   3208a:	3114      	adds	r1, #20
   3208c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   32090:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   32094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   32098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   3209c:	4295      	cmp	r5, r2
   3209e:	d003      	beq.n	320a8 <__mcmp+0x2c>
   320a0:	d205      	bcs.n	320ae <__mcmp+0x32>
   320a2:	f04f 30ff 	mov.w	r0, #4294967295
   320a6:	bd30      	pop	{r4, r5, pc}
   320a8:	42a3      	cmp	r3, r4
   320aa:	d3f3      	bcc.n	32094 <__mcmp+0x18>
   320ac:	e7fb      	b.n	320a6 <__mcmp+0x2a>
   320ae:	2001      	movs	r0, #1
   320b0:	e7f9      	b.n	320a6 <__mcmp+0x2a>

000320b2 <__ratio>:
   320b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   320b6:	b085      	sub	sp, #20
   320b8:	e9cd 1000 	strd	r1, r0, [sp]
   320bc:	a902      	add	r1, sp, #8
   320be:	f7f6 fe53 	bl	28d68 <__b2d>
   320c2:	468b      	mov	fp, r1
   320c4:	4606      	mov	r6, r0
   320c6:	460f      	mov	r7, r1
   320c8:	9800      	ldr	r0, [sp, #0]
   320ca:	a903      	add	r1, sp, #12
   320cc:	f7f6 fe4c 	bl	28d68 <__b2d>
   320d0:	9b01      	ldr	r3, [sp, #4]
   320d2:	4689      	mov	r9, r1
   320d4:	460d      	mov	r5, r1
   320d6:	6919      	ldr	r1, [r3, #16]
   320d8:	4604      	mov	r4, r0
   320da:	9b00      	ldr	r3, [sp, #0]
   320dc:	4630      	mov	r0, r6
   320de:	691b      	ldr	r3, [r3, #16]
   320e0:	1ac9      	subs	r1, r1, r3
   320e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   320e6:	1a9b      	subs	r3, r3, r2
   320e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   320ec:	2b00      	cmp	r3, #0
   320ee:	bfdb      	ittet	le
   320f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   320f4:	462a      	movle	r2, r5
   320f6:	463a      	movgt	r2, r7
   320f8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   320fc:	bfc8      	it	gt
   320fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   32102:	4622      	mov	r2, r4
   32104:	464b      	mov	r3, r9
   32106:	4659      	mov	r1, fp
   32108:	f7d6 fb0c 	bl	8724 <__aeabi_ddiv>
   3210c:	b005      	add	sp, #20
   3210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00032112 <__copybits>:
   32112:	3901      	subs	r1, #1
   32114:	f102 0314 	add.w	r3, r2, #20
   32118:	1149      	asrs	r1, r1, #5
   3211a:	b570      	push	{r4, r5, r6, lr}
   3211c:	3101      	adds	r1, #1
   3211e:	6914      	ldr	r4, [r2, #16]
   32120:	1f05      	subs	r5, r0, #4
   32122:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   32126:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3212a:	42a3      	cmp	r3, r4
   3212c:	d30c      	bcc.n	32148 <__copybits+0x36>
   3212e:	1aa3      	subs	r3, r4, r2
   32130:	3211      	adds	r2, #17
   32132:	3b11      	subs	r3, #17
   32134:	f023 0303 	bic.w	r3, r3, #3
   32138:	42a2      	cmp	r2, r4
   3213a:	bf88      	it	hi
   3213c:	2300      	movhi	r3, #0
   3213e:	4418      	add	r0, r3
   32140:	2300      	movs	r3, #0
   32142:	4288      	cmp	r0, r1
   32144:	d305      	bcc.n	32152 <__copybits+0x40>
   32146:	bd70      	pop	{r4, r5, r6, pc}
   32148:	f853 6b04 	ldr.w	r6, [r3], #4
   3214c:	f845 6f04 	str.w	r6, [r5, #4]!
   32150:	e7eb      	b.n	3212a <__copybits+0x18>
   32152:	f840 3b04 	str.w	r3, [r0], #4
   32156:	e7f4      	b.n	32142 <__copybits+0x30>

00032158 <__any_on>:
   32158:	f100 0214 	add.w	r2, r0, #20
   3215c:	114b      	asrs	r3, r1, #5
   3215e:	6900      	ldr	r0, [r0, #16]
   32160:	4298      	cmp	r0, r3
   32162:	b510      	push	{r4, lr}
   32164:	db11      	blt.n	3218a <__any_on+0x32>
   32166:	dd0a      	ble.n	3217e <__any_on+0x26>
   32168:	f011 011f 	ands.w	r1, r1, #31
   3216c:	d007      	beq.n	3217e <__any_on+0x26>
   3216e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   32172:	fa24 f001 	lsr.w	r0, r4, r1
   32176:	fa00 f101 	lsl.w	r1, r0, r1
   3217a:	428c      	cmp	r4, r1
   3217c:	d10b      	bne.n	32196 <__any_on+0x3e>
   3217e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   32182:	4293      	cmp	r3, r2
   32184:	d803      	bhi.n	3218e <__any_on+0x36>
   32186:	2000      	movs	r0, #0
   32188:	bd10      	pop	{r4, pc}
   3218a:	4603      	mov	r3, r0
   3218c:	e7f7      	b.n	3217e <__any_on+0x26>
   3218e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   32192:	2900      	cmp	r1, #0
   32194:	d0f5      	beq.n	32182 <__any_on+0x2a>
   32196:	2001      	movs	r0, #1
   32198:	e7f6      	b.n	32188 <__any_on+0x30>

0003219a <__ssputs_r>:
   3219a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3219e:	461f      	mov	r7, r3
   321a0:	688e      	ldr	r6, [r1, #8]
   321a2:	4682      	mov	sl, r0
   321a4:	460c      	mov	r4, r1
   321a6:	42be      	cmp	r6, r7
   321a8:	4690      	mov	r8, r2
   321aa:	680b      	ldr	r3, [r1, #0]
   321ac:	d82d      	bhi.n	3220a <__ssputs_r+0x70>
   321ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   321b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
   321b6:	d026      	beq.n	32206 <__ssputs_r+0x6c>
   321b8:	6965      	ldr	r5, [r4, #20]
   321ba:	6909      	ldr	r1, [r1, #16]
   321bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   321c0:	eba3 0901 	sub.w	r9, r3, r1
   321c4:	1c7b      	adds	r3, r7, #1
   321c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   321ca:	444b      	add	r3, r9
   321cc:	106d      	asrs	r5, r5, #1
   321ce:	429d      	cmp	r5, r3
   321d0:	bf38      	it	cc
   321d2:	461d      	movcc	r5, r3
   321d4:	0553      	lsls	r3, r2, #21
   321d6:	d527      	bpl.n	32228 <__ssputs_r+0x8e>
   321d8:	4629      	mov	r1, r5
   321da:	f7f4 ff85 	bl	270e8 <_malloc_r>
   321de:	4606      	mov	r6, r0
   321e0:	b360      	cbz	r0, 3223c <__ssputs_r+0xa2>
   321e2:	464a      	mov	r2, r9
   321e4:	6921      	ldr	r1, [r4, #16]
   321e6:	f7ff fa92 	bl	3170e <memcpy>
   321ea:	89a3      	ldrh	r3, [r4, #12]
   321ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   321f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   321f4:	81a3      	strh	r3, [r4, #12]
   321f6:	6126      	str	r6, [r4, #16]
   321f8:	444e      	add	r6, r9
   321fa:	6165      	str	r5, [r4, #20]
   321fc:	eba5 0509 	sub.w	r5, r5, r9
   32200:	6026      	str	r6, [r4, #0]
   32202:	463e      	mov	r6, r7
   32204:	60a5      	str	r5, [r4, #8]
   32206:	42be      	cmp	r6, r7
   32208:	d900      	bls.n	3220c <__ssputs_r+0x72>
   3220a:	463e      	mov	r6, r7
   3220c:	4632      	mov	r2, r6
   3220e:	4641      	mov	r1, r8
   32210:	6820      	ldr	r0, [r4, #0]
   32212:	f7ff fa9c 	bl	3174e <memmove>
   32216:	68a3      	ldr	r3, [r4, #8]
   32218:	2000      	movs	r0, #0
   3221a:	1b9b      	subs	r3, r3, r6
   3221c:	60a3      	str	r3, [r4, #8]
   3221e:	6823      	ldr	r3, [r4, #0]
   32220:	4433      	add	r3, r6
   32222:	6023      	str	r3, [r4, #0]
   32224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32228:	462a      	mov	r2, r5
   3222a:	f000 f935 	bl	32498 <_realloc_r>
   3222e:	4606      	mov	r6, r0
   32230:	2800      	cmp	r0, #0
   32232:	d1e0      	bne.n	321f6 <__ssputs_r+0x5c>
   32234:	6921      	ldr	r1, [r4, #16]
   32236:	4650      	mov	r0, sl
   32238:	f7f4 ff0c 	bl	27054 <_free_r>
   3223c:	230c      	movs	r3, #12
   3223e:	f04f 30ff 	mov.w	r0, #4294967295
   32242:	f8ca 3000 	str.w	r3, [sl]
   32246:	89a3      	ldrh	r3, [r4, #12]
   32248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3224c:	81a3      	strh	r3, [r4, #12]
   3224e:	e7e9      	b.n	32224 <__ssputs_r+0x8a>

00032250 <__sfputc_r>:
   32250:	6893      	ldr	r3, [r2, #8]
   32252:	3b01      	subs	r3, #1
   32254:	2b00      	cmp	r3, #0
   32256:	6093      	str	r3, [r2, #8]
   32258:	b410      	push	{r4}
   3225a:	da07      	bge.n	3226c <__sfputc_r+0x1c>
   3225c:	6994      	ldr	r4, [r2, #24]
   3225e:	42a3      	cmp	r3, r4
   32260:	db01      	blt.n	32266 <__sfputc_r+0x16>
   32262:	290a      	cmp	r1, #10
   32264:	d102      	bne.n	3226c <__sfputc_r+0x1c>
   32266:	bc10      	pop	{r4}
   32268:	f7f7 b872 	b.w	29350 <__swbuf_r>
   3226c:	6813      	ldr	r3, [r2, #0]
   3226e:	1c58      	adds	r0, r3, #1
   32270:	6010      	str	r0, [r2, #0]
   32272:	4608      	mov	r0, r1
   32274:	7019      	strb	r1, [r3, #0]
   32276:	bc10      	pop	{r4}
   32278:	4770      	bx	lr

0003227a <__sfputs_r>:
   3227a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3227c:	4606      	mov	r6, r0
   3227e:	460f      	mov	r7, r1
   32280:	4614      	mov	r4, r2
   32282:	18d5      	adds	r5, r2, r3
   32284:	42ac      	cmp	r4, r5
   32286:	d101      	bne.n	3228c <__sfputs_r+0x12>
   32288:	2000      	movs	r0, #0
   3228a:	e007      	b.n	3229c <__sfputs_r+0x22>
   3228c:	463a      	mov	r2, r7
   3228e:	f814 1b01 	ldrb.w	r1, [r4], #1
   32292:	4630      	mov	r0, r6
   32294:	f7ff ffdc 	bl	32250 <__sfputc_r>
   32298:	1c43      	adds	r3, r0, #1
   3229a:	d1f3      	bne.n	32284 <__sfputs_r+0xa>
   3229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003229e <__sread>:
   3229e:	b510      	push	{r4, lr}
   322a0:	460c      	mov	r4, r1
   322a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   322a6:	f7f7 fc9d 	bl	29be4 <_read_r>
   322aa:	2800      	cmp	r0, #0
   322ac:	bfab      	itete	ge
   322ae:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   322b0:	89a3      	ldrhlt	r3, [r4, #12]
   322b2:	181b      	addge	r3, r3, r0
   322b4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   322b8:	bfac      	ite	ge
   322ba:	6563      	strge	r3, [r4, #84]	; 0x54
   322bc:	81a3      	strhlt	r3, [r4, #12]
   322be:	bd10      	pop	{r4, pc}

000322c0 <__seofread>:
   322c0:	2000      	movs	r0, #0
   322c2:	4770      	bx	lr

000322c4 <__swrite>:
   322c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   322c8:	461f      	mov	r7, r3
   322ca:	898b      	ldrh	r3, [r1, #12]
   322cc:	4605      	mov	r5, r0
   322ce:	460c      	mov	r4, r1
   322d0:	05db      	lsls	r3, r3, #23
   322d2:	4616      	mov	r6, r2
   322d4:	d505      	bpl.n	322e2 <__swrite+0x1e>
   322d6:	2302      	movs	r3, #2
   322d8:	2200      	movs	r2, #0
   322da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   322de:	f7f7 f95f 	bl	295a0 <_lseek_r>
   322e2:	89a3      	ldrh	r3, [r4, #12]
   322e4:	4632      	mov	r2, r6
   322e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   322ea:	4628      	mov	r0, r5
   322ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   322f0:	81a3      	strh	r3, [r4, #12]
   322f2:	463b      	mov	r3, r7
   322f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   322f8:	f7f7 b87c 	b.w	293f4 <_write_r>

000322fc <__sseek>:
   322fc:	b510      	push	{r4, lr}
   322fe:	460c      	mov	r4, r1
   32300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32304:	f7f7 f94c 	bl	295a0 <_lseek_r>
   32308:	1c43      	adds	r3, r0, #1
   3230a:	89a3      	ldrh	r3, [r4, #12]
   3230c:	bf15      	itete	ne
   3230e:	6560      	strne	r0, [r4, #84]	; 0x54
   32310:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   32314:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   32318:	81a3      	strheq	r3, [r4, #12]
   3231a:	bf18      	it	ne
   3231c:	81a3      	strhne	r3, [r4, #12]
   3231e:	bd10      	pop	{r4, pc}

00032320 <__sclose>:
   32320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32324:	f7f7 b8e4 	b.w	294f0 <_close_r>

00032328 <__ascii_wctomb>:
   32328:	4603      	mov	r3, r0
   3232a:	4608      	mov	r0, r1
   3232c:	b141      	cbz	r1, 32340 <__ascii_wctomb+0x18>
   3232e:	2aff      	cmp	r2, #255	; 0xff
   32330:	d904      	bls.n	3233c <__ascii_wctomb+0x14>
   32332:	228a      	movs	r2, #138	; 0x8a
   32334:	f04f 30ff 	mov.w	r0, #4294967295
   32338:	601a      	str	r2, [r3, #0]
   3233a:	4770      	bx	lr
   3233c:	2001      	movs	r0, #1
   3233e:	700a      	strb	r2, [r1, #0]
   32340:	4770      	bx	lr

00032342 <abort>:
   32342:	2006      	movs	r0, #6
   32344:	b508      	push	{r3, lr}
   32346:	f7f7 fc5f 	bl	29c08 <raise>
   3234a:	2001      	movs	r0, #1
   3234c:	f7df fd28 	bl	11da0 <_exit>

00032350 <__sflush_r>:
   32350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   32354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32356:	0717      	lsls	r7, r2, #28
   32358:	4605      	mov	r5, r0
   3235a:	460c      	mov	r4, r1
   3235c:	d456      	bmi.n	3240c <__sflush_r+0xbc>
   3235e:	684b      	ldr	r3, [r1, #4]
   32360:	2b00      	cmp	r3, #0
   32362:	dc02      	bgt.n	3236a <__sflush_r+0x1a>
   32364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   32366:	2b00      	cmp	r3, #0
   32368:	dd3d      	ble.n	323e6 <__sflush_r+0x96>
   3236a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3236c:	2e00      	cmp	r6, #0
   3236e:	d03a      	beq.n	323e6 <__sflush_r+0x96>
   32370:	2300      	movs	r3, #0
   32372:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   32376:	682f      	ldr	r7, [r5, #0]
   32378:	6a21      	ldr	r1, [r4, #32]
   3237a:	602b      	str	r3, [r5, #0]
   3237c:	d025      	beq.n	323ca <__sflush_r+0x7a>
   3237e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   32380:	89a3      	ldrh	r3, [r4, #12]
   32382:	0758      	lsls	r0, r3, #29
   32384:	d505      	bpl.n	32392 <__sflush_r+0x42>
   32386:	6863      	ldr	r3, [r4, #4]
   32388:	1ad2      	subs	r2, r2, r3
   3238a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3238c:	b10b      	cbz	r3, 32392 <__sflush_r+0x42>
   3238e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   32390:	1ad2      	subs	r2, r2, r3
   32392:	6a21      	ldr	r1, [r4, #32]
   32394:	2300      	movs	r3, #0
   32396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   32398:	4628      	mov	r0, r5
   3239a:	47b0      	blx	r6
   3239c:	1c41      	adds	r1, r0, #1
   3239e:	d024      	beq.n	323ea <__sflush_r+0x9a>
   323a0:	2300      	movs	r3, #0
   323a2:	6063      	str	r3, [r4, #4]
   323a4:	6923      	ldr	r3, [r4, #16]
   323a6:	6023      	str	r3, [r4, #0]
   323a8:	89a3      	ldrh	r3, [r4, #12]
   323aa:	04da      	lsls	r2, r3, #19
   323ac:	d500      	bpl.n	323b0 <__sflush_r+0x60>
   323ae:	6560      	str	r0, [r4, #84]	; 0x54
   323b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   323b2:	602f      	str	r7, [r5, #0]
   323b4:	b1b9      	cbz	r1, 323e6 <__sflush_r+0x96>
   323b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   323ba:	4299      	cmp	r1, r3
   323bc:	d002      	beq.n	323c4 <__sflush_r+0x74>
   323be:	4628      	mov	r0, r5
   323c0:	f7f4 fe48 	bl	27054 <_free_r>
   323c4:	2300      	movs	r3, #0
   323c6:	6363      	str	r3, [r4, #52]	; 0x34
   323c8:	e00d      	b.n	323e6 <__sflush_r+0x96>
   323ca:	2301      	movs	r3, #1
   323cc:	4628      	mov	r0, r5
   323ce:	47b0      	blx	r6
   323d0:	1c46      	adds	r6, r0, #1
   323d2:	4602      	mov	r2, r0
   323d4:	d1d4      	bne.n	32380 <__sflush_r+0x30>
   323d6:	682b      	ldr	r3, [r5, #0]
   323d8:	2b00      	cmp	r3, #0
   323da:	d0d1      	beq.n	32380 <__sflush_r+0x30>
   323dc:	2b1d      	cmp	r3, #29
   323de:	d001      	beq.n	323e4 <__sflush_r+0x94>
   323e0:	2b16      	cmp	r3, #22
   323e2:	d129      	bne.n	32438 <__sflush_r+0xe8>
   323e4:	602f      	str	r7, [r5, #0]
   323e6:	2000      	movs	r0, #0
   323e8:	e02d      	b.n	32446 <__sflush_r+0xf6>
   323ea:	682a      	ldr	r2, [r5, #0]
   323ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   323f0:	b142      	cbz	r2, 32404 <__sflush_r+0xb4>
   323f2:	2a1d      	cmp	r2, #29
   323f4:	d001      	beq.n	323fa <__sflush_r+0xaa>
   323f6:	2a16      	cmp	r2, #22
   323f8:	d120      	bne.n	3243c <__sflush_r+0xec>
   323fa:	2300      	movs	r3, #0
   323fc:	6063      	str	r3, [r4, #4]
   323fe:	6923      	ldr	r3, [r4, #16]
   32400:	6023      	str	r3, [r4, #0]
   32402:	e7d5      	b.n	323b0 <__sflush_r+0x60>
   32404:	6062      	str	r2, [r4, #4]
   32406:	6922      	ldr	r2, [r4, #16]
   32408:	6022      	str	r2, [r4, #0]
   3240a:	e7ce      	b.n	323aa <__sflush_r+0x5a>
   3240c:	690f      	ldr	r7, [r1, #16]
   3240e:	2f00      	cmp	r7, #0
   32410:	d0e9      	beq.n	323e6 <__sflush_r+0x96>
   32412:	0793      	lsls	r3, r2, #30
   32414:	680e      	ldr	r6, [r1, #0]
   32416:	600f      	str	r7, [r1, #0]
   32418:	bf0c      	ite	eq
   3241a:	694b      	ldreq	r3, [r1, #20]
   3241c:	2300      	movne	r3, #0
   3241e:	1bf6      	subs	r6, r6, r7
   32420:	608b      	str	r3, [r1, #8]
   32422:	2e00      	cmp	r6, #0
   32424:	dddf      	ble.n	323e6 <__sflush_r+0x96>
   32426:	4633      	mov	r3, r6
   32428:	463a      	mov	r2, r7
   3242a:	6a21      	ldr	r1, [r4, #32]
   3242c:	4628      	mov	r0, r5
   3242e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   32432:	47e0      	blx	ip
   32434:	2800      	cmp	r0, #0
   32436:	dc07      	bgt.n	32448 <__sflush_r+0xf8>
   32438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3243c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   32440:	f04f 30ff 	mov.w	r0, #4294967295
   32444:	81a3      	strh	r3, [r4, #12]
   32446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32448:	4407      	add	r7, r0
   3244a:	1a36      	subs	r6, r6, r0
   3244c:	e7e9      	b.n	32422 <__sflush_r+0xd2>

0003244e <__swhatbuf_r>:
   3244e:	b570      	push	{r4, r5, r6, lr}
   32450:	460c      	mov	r4, r1
   32452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32456:	b096      	sub	sp, #88	; 0x58
   32458:	4615      	mov	r5, r2
   3245a:	2900      	cmp	r1, #0
   3245c:	461e      	mov	r6, r3
   3245e:	da0c      	bge.n	3247a <__swhatbuf_r+0x2c>
   32460:	89a3      	ldrh	r3, [r4, #12]
   32462:	2100      	movs	r1, #0
   32464:	f013 0f80 	tst.w	r3, #128	; 0x80
   32468:	bf14      	ite	ne
   3246a:	2340      	movne	r3, #64	; 0x40
   3246c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   32470:	2000      	movs	r0, #0
   32472:	6031      	str	r1, [r6, #0]
   32474:	602b      	str	r3, [r5, #0]
   32476:	b016      	add	sp, #88	; 0x58
   32478:	bd70      	pop	{r4, r5, r6, pc}
   3247a:	466a      	mov	r2, sp
   3247c:	f7f7 fbde 	bl	29c3c <_fstat_r>
   32480:	2800      	cmp	r0, #0
   32482:	dbed      	blt.n	32460 <__swhatbuf_r+0x12>
   32484:	9901      	ldr	r1, [sp, #4]
   32486:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   3248a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   3248e:	4259      	negs	r1, r3
   32490:	4159      	adcs	r1, r3
   32492:	f44f 6380 	mov.w	r3, #1024	; 0x400
   32496:	e7eb      	b.n	32470 <__swhatbuf_r+0x22>

00032498 <_realloc_r>:
   32498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3249a:	4607      	mov	r7, r0
   3249c:	4615      	mov	r5, r2
   3249e:	460c      	mov	r4, r1
   324a0:	b921      	cbnz	r1, 324ac <_realloc_r+0x14>
   324a2:	4611      	mov	r1, r2
   324a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   324a8:	f7f4 be1e 	b.w	270e8 <_malloc_r>
   324ac:	b922      	cbnz	r2, 324b8 <_realloc_r+0x20>
   324ae:	f7f4 fdd1 	bl	27054 <_free_r>
   324b2:	2400      	movs	r4, #0
   324b4:	4620      	mov	r0, r4
   324b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   324b8:	f000 f905 	bl	326c6 <_malloc_usable_size_r>
   324bc:	42a8      	cmp	r0, r5
   324be:	d2f9      	bcs.n	324b4 <_realloc_r+0x1c>
   324c0:	4629      	mov	r1, r5
   324c2:	4638      	mov	r0, r7
   324c4:	f7f4 fe10 	bl	270e8 <_malloc_r>
   324c8:	4606      	mov	r6, r0
   324ca:	2800      	cmp	r0, #0
   324cc:	d0f1      	beq.n	324b2 <_realloc_r+0x1a>
   324ce:	4621      	mov	r1, r4
   324d0:	462a      	mov	r2, r5
   324d2:	f7ff f91c 	bl	3170e <memcpy>
   324d6:	4621      	mov	r1, r4
   324d8:	4638      	mov	r0, r7
   324da:	4634      	mov	r4, r6
   324dc:	f7f4 fdba 	bl	27054 <_free_r>
   324e0:	e7e8      	b.n	324b4 <_realloc_r+0x1c>

000324e2 <_sungetc_r>:
   324e2:	b538      	push	{r3, r4, r5, lr}
   324e4:	1c4b      	adds	r3, r1, #1
   324e6:	4614      	mov	r4, r2
   324e8:	d103      	bne.n	324f2 <_sungetc_r+0x10>
   324ea:	f04f 35ff 	mov.w	r5, #4294967295
   324ee:	4628      	mov	r0, r5
   324f0:	bd38      	pop	{r3, r4, r5, pc}
   324f2:	8993      	ldrh	r3, [r2, #12]
   324f4:	b2cd      	uxtb	r5, r1
   324f6:	f023 0320 	bic.w	r3, r3, #32
   324fa:	8193      	strh	r3, [r2, #12]
   324fc:	6853      	ldr	r3, [r2, #4]
   324fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
   32500:	b18a      	cbz	r2, 32526 <_sungetc_r+0x44>
   32502:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   32504:	429a      	cmp	r2, r3
   32506:	dd08      	ble.n	3251a <_sungetc_r+0x38>
   32508:	6823      	ldr	r3, [r4, #0]
   3250a:	1e5a      	subs	r2, r3, #1
   3250c:	6022      	str	r2, [r4, #0]
   3250e:	f803 5c01 	strb.w	r5, [r3, #-1]
   32512:	6863      	ldr	r3, [r4, #4]
   32514:	3301      	adds	r3, #1
   32516:	6063      	str	r3, [r4, #4]
   32518:	e7e9      	b.n	324ee <_sungetc_r+0xc>
   3251a:	4621      	mov	r1, r4
   3251c:	f000 f89c 	bl	32658 <__submore>
   32520:	2800      	cmp	r0, #0
   32522:	d0f1      	beq.n	32508 <_sungetc_r+0x26>
   32524:	e7e1      	b.n	324ea <_sungetc_r+0x8>
   32526:	6921      	ldr	r1, [r4, #16]
   32528:	6822      	ldr	r2, [r4, #0]
   3252a:	b141      	cbz	r1, 3253e <_sungetc_r+0x5c>
   3252c:	4291      	cmp	r1, r2
   3252e:	d206      	bcs.n	3253e <_sungetc_r+0x5c>
   32530:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   32534:	42a9      	cmp	r1, r5
   32536:	d102      	bne.n	3253e <_sungetc_r+0x5c>
   32538:	3a01      	subs	r2, #1
   3253a:	6022      	str	r2, [r4, #0]
   3253c:	e7ea      	b.n	32514 <_sungetc_r+0x32>
   3253e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   32542:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32546:	6363      	str	r3, [r4, #52]	; 0x34
   32548:	2303      	movs	r3, #3
   3254a:	63a3      	str	r3, [r4, #56]	; 0x38
   3254c:	4623      	mov	r3, r4
   3254e:	f803 5f46 	strb.w	r5, [r3, #70]!
   32552:	6023      	str	r3, [r4, #0]
   32554:	2301      	movs	r3, #1
   32556:	e7de      	b.n	32516 <_sungetc_r+0x34>

00032558 <__ssrefill_r>:
   32558:	b510      	push	{r4, lr}
   3255a:	460c      	mov	r4, r1
   3255c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3255e:	b169      	cbz	r1, 3257c <__ssrefill_r+0x24>
   32560:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32564:	4299      	cmp	r1, r3
   32566:	d001      	beq.n	3256c <__ssrefill_r+0x14>
   32568:	f7f4 fd74 	bl	27054 <_free_r>
   3256c:	2000      	movs	r0, #0
   3256e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   32570:	6360      	str	r0, [r4, #52]	; 0x34
   32572:	6063      	str	r3, [r4, #4]
   32574:	b113      	cbz	r3, 3257c <__ssrefill_r+0x24>
   32576:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   32578:	6023      	str	r3, [r4, #0]
   3257a:	bd10      	pop	{r4, pc}
   3257c:	6923      	ldr	r3, [r4, #16]
   3257e:	f04f 30ff 	mov.w	r0, #4294967295
   32582:	6023      	str	r3, [r4, #0]
   32584:	2300      	movs	r3, #0
   32586:	6063      	str	r3, [r4, #4]
   32588:	89a3      	ldrh	r3, [r4, #12]
   3258a:	f043 0320 	orr.w	r3, r3, #32
   3258e:	81a3      	strh	r3, [r4, #12]
   32590:	e7f3      	b.n	3257a <__ssrefill_r+0x22>

00032592 <__sccl>:
   32592:	b570      	push	{r4, r5, r6, lr}
   32594:	780b      	ldrb	r3, [r1, #0]
   32596:	4604      	mov	r4, r0
   32598:	3801      	subs	r0, #1
   3259a:	2b5e      	cmp	r3, #94	; 0x5e
   3259c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   325a0:	bf13      	iteet	ne
   325a2:	1c4a      	addne	r2, r1, #1
   325a4:	1c8a      	addeq	r2, r1, #2
   325a6:	784b      	ldrbeq	r3, [r1, #1]
   325a8:	2100      	movne	r1, #0
   325aa:	bf08      	it	eq
   325ac:	2101      	moveq	r1, #1
   325ae:	f800 1f01 	strb.w	r1, [r0, #1]!
   325b2:	42a8      	cmp	r0, r5
   325b4:	d1fb      	bne.n	325ae <__sccl+0x1c>
   325b6:	b90b      	cbnz	r3, 325bc <__sccl+0x2a>
   325b8:	1e50      	subs	r0, r2, #1
   325ba:	bd70      	pop	{r4, r5, r6, pc}
   325bc:	f081 0101 	eor.w	r1, r1, #1
   325c0:	4610      	mov	r0, r2
   325c2:	54e1      	strb	r1, [r4, r3]
   325c4:	4602      	mov	r2, r0
   325c6:	f812 5b01 	ldrb.w	r5, [r2], #1
   325ca:	2d2d      	cmp	r5, #45	; 0x2d
   325cc:	d005      	beq.n	325da <__sccl+0x48>
   325ce:	2d5d      	cmp	r5, #93	; 0x5d
   325d0:	d016      	beq.n	32600 <__sccl+0x6e>
   325d2:	2d00      	cmp	r5, #0
   325d4:	d0f1      	beq.n	325ba <__sccl+0x28>
   325d6:	462b      	mov	r3, r5
   325d8:	e7f2      	b.n	325c0 <__sccl+0x2e>
   325da:	7846      	ldrb	r6, [r0, #1]
   325dc:	2e5d      	cmp	r6, #93	; 0x5d
   325de:	d0fa      	beq.n	325d6 <__sccl+0x44>
   325e0:	42b3      	cmp	r3, r6
   325e2:	dcf8      	bgt.n	325d6 <__sccl+0x44>
   325e4:	3002      	adds	r0, #2
   325e6:	461a      	mov	r2, r3
   325e8:	3201      	adds	r2, #1
   325ea:	4296      	cmp	r6, r2
   325ec:	54a1      	strb	r1, [r4, r2]
   325ee:	dcfb      	bgt.n	325e8 <__sccl+0x56>
   325f0:	1af2      	subs	r2, r6, r3
   325f2:	1c5d      	adds	r5, r3, #1
   325f4:	3a01      	subs	r2, #1
   325f6:	42b3      	cmp	r3, r6
   325f8:	bfa8      	it	ge
   325fa:	2200      	movge	r2, #0
   325fc:	18ab      	adds	r3, r5, r2
   325fe:	e7e1      	b.n	325c4 <__sccl+0x32>
   32600:	4610      	mov	r0, r2
   32602:	e7da      	b.n	325ba <__sccl+0x28>

00032604 <_raise_r>:
   32604:	291f      	cmp	r1, #31
   32606:	b538      	push	{r3, r4, r5, lr}
   32608:	4605      	mov	r5, r0
   3260a:	460c      	mov	r4, r1
   3260c:	d904      	bls.n	32618 <_raise_r+0x14>
   3260e:	2316      	movs	r3, #22
   32610:	6003      	str	r3, [r0, #0]
   32612:	f04f 30ff 	mov.w	r0, #4294967295
   32616:	bd38      	pop	{r3, r4, r5, pc}
   32618:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3261a:	b112      	cbz	r2, 32622 <_raise_r+0x1e>
   3261c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   32620:	b94b      	cbnz	r3, 32636 <_raise_r+0x32>
   32622:	4628      	mov	r0, r5
   32624:	f000 f816 	bl	32654 <_getpid_r>
   32628:	4622      	mov	r2, r4
   3262a:	4601      	mov	r1, r0
   3262c:	4628      	mov	r0, r5
   3262e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   32632:	f7f7 baf1 	b.w	29c18 <_kill_r>
   32636:	2b01      	cmp	r3, #1
   32638:	d00a      	beq.n	32650 <_raise_r+0x4c>
   3263a:	1c59      	adds	r1, r3, #1
   3263c:	d103      	bne.n	32646 <_raise_r+0x42>
   3263e:	2316      	movs	r3, #22
   32640:	6003      	str	r3, [r0, #0]
   32642:	2001      	movs	r0, #1
   32644:	e7e7      	b.n	32616 <_raise_r+0x12>
   32646:	2100      	movs	r1, #0
   32648:	4620      	mov	r0, r4
   3264a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   3264e:	4798      	blx	r3
   32650:	2000      	movs	r0, #0
   32652:	e7e0      	b.n	32616 <_raise_r+0x12>

00032654 <_getpid_r>:
   32654:	f7f9 b92a 	b.w	2b8ac <_getpid>

00032658 <__submore>:
   32658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3265c:	460c      	mov	r4, r1
   3265e:	6b49      	ldr	r1, [r1, #52]	; 0x34
   32660:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32664:	4299      	cmp	r1, r3
   32666:	d11a      	bne.n	3269e <__submore+0x46>
   32668:	f44f 6180 	mov.w	r1, #1024	; 0x400
   3266c:	f7f4 fd3c 	bl	270e8 <_malloc_r>
   32670:	b918      	cbnz	r0, 3267a <__submore+0x22>
   32672:	f04f 30ff 	mov.w	r0, #4294967295
   32676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3267a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3267e:	6360      	str	r0, [r4, #52]	; 0x34
   32680:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   32684:	63a3      	str	r3, [r4, #56]	; 0x38
   32686:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   3268a:	7083      	strb	r3, [r0, #2]
   3268c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   32690:	7043      	strb	r3, [r0, #1]
   32692:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   32696:	7003      	strb	r3, [r0, #0]
   32698:	6020      	str	r0, [r4, #0]
   3269a:	2000      	movs	r0, #0
   3269c:	e7eb      	b.n	32676 <__submore+0x1e>
   3269e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   326a0:	0077      	lsls	r7, r6, #1
   326a2:	463a      	mov	r2, r7
   326a4:	f7ff fef8 	bl	32498 <_realloc_r>
   326a8:	4605      	mov	r5, r0
   326aa:	2800      	cmp	r0, #0
   326ac:	d0e1      	beq.n	32672 <__submore+0x1a>
   326ae:	eb00 0806 	add.w	r8, r0, r6
   326b2:	4601      	mov	r1, r0
   326b4:	4632      	mov	r2, r6
   326b6:	4640      	mov	r0, r8
   326b8:	f7ff f829 	bl	3170e <memcpy>
   326bc:	f8c4 8000 	str.w	r8, [r4]
   326c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   326c4:	e7e9      	b.n	3269a <__submore+0x42>

000326c6 <_malloc_usable_size_r>:
   326c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   326ca:	1f18      	subs	r0, r3, #4
   326cc:	2b00      	cmp	r3, #0
   326ce:	bfbc      	itt	lt
   326d0:	580b      	ldrlt	r3, [r1, r0]
   326d2:	18c0      	addlt	r0, r0, r3
   326d4:	4770      	bx	lr
	...
