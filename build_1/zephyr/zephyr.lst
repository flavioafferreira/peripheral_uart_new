
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	38 43 03 20 39 10 01 00 a7 7f 02 00 0d 10 01 00     8C. 9...........
    8010:	0d 10 01 00 0d 10 01 00 0d 10 01 00 0d 10 01 00     ................
	...
    802c:	b5 08 01 00 0d 10 01 00 00 00 00 00 55 08 01 00     ............U...
    803c:	0d 10 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8050:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8060:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8070:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8080:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8090:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    80a0:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    80b0:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    80c0:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    80d0:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    80e0:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    80f0:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8100:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8110:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8120:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8130:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8140:	3d 09 01 00 3d 09 01 00 3d 09 01 00 3d 09 01 00     =...=...=...=...
    8150:	3d 09 01 00                                         =...

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__gedf2>:
    88f4:	f04f 3cff 	mov.w	ip, #4294967295
    88f8:	e006      	b.n	8908 <__cmpdf2+0x4>
    88fa:	bf00      	nop

000088fc <__ledf2>:
    88fc:	f04f 0c01 	mov.w	ip, #1
    8900:	e002      	b.n	8908 <__cmpdf2+0x4>
    8902:	bf00      	nop

00008904 <__cmpdf2>:
    8904:	f04f 0c01 	mov.w	ip, #1
    8908:	f84d cd04 	str.w	ip, [sp, #-4]!
    890c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8918:	bf18      	it	ne
    891a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    891e:	d01b      	beq.n	8958 <__cmpdf2+0x54>
    8920:	b001      	add	sp, #4
    8922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8926:	bf0c      	ite	eq
    8928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    892c:	ea91 0f03 	teqne	r1, r3
    8930:	bf02      	ittt	eq
    8932:	ea90 0f02 	teqeq	r0, r2
    8936:	2000      	moveq	r0, #0
    8938:	4770      	bxeq	lr
    893a:	f110 0f00 	cmn.w	r0, #0
    893e:	ea91 0f03 	teq	r1, r3
    8942:	bf58      	it	pl
    8944:	4299      	cmppl	r1, r3
    8946:	bf08      	it	eq
    8948:	4290      	cmpeq	r0, r2
    894a:	bf2c      	ite	cs
    894c:	17d8      	asrcs	r0, r3, #31
    894e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8952:	f040 0001 	orr.w	r0, r0, #1
    8956:	4770      	bx	lr
    8958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    895c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8960:	d102      	bne.n	8968 <__cmpdf2+0x64>
    8962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8966:	d107      	bne.n	8978 <__cmpdf2+0x74>
    8968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    896c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8970:	d1d6      	bne.n	8920 <__cmpdf2+0x1c>
    8972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8976:	d0d3      	beq.n	8920 <__cmpdf2+0x1c>
    8978:	f85d 0b04 	ldr.w	r0, [sp], #4
    897c:	4770      	bx	lr
    897e:	bf00      	nop

00008980 <__aeabi_cdrcmple>:
    8980:	4684      	mov	ip, r0
    8982:	4610      	mov	r0, r2
    8984:	4662      	mov	r2, ip
    8986:	468c      	mov	ip, r1
    8988:	4619      	mov	r1, r3
    898a:	4663      	mov	r3, ip
    898c:	e000      	b.n	8990 <__aeabi_cdcmpeq>
    898e:	bf00      	nop

00008990 <__aeabi_cdcmpeq>:
    8990:	b501      	push	{r0, lr}
    8992:	f7ff ffb7 	bl	8904 <__cmpdf2>
    8996:	2800      	cmp	r0, #0
    8998:	bf48      	it	mi
    899a:	f110 0f00 	cmnmi.w	r0, #0
    899e:	bd01      	pop	{r0, pc}

000089a0 <__aeabi_dcmpeq>:
    89a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    89a4:	f7ff fff4 	bl	8990 <__aeabi_cdcmpeq>
    89a8:	bf0c      	ite	eq
    89aa:	2001      	moveq	r0, #1
    89ac:	2000      	movne	r0, #0
    89ae:	f85d fb08 	ldr.w	pc, [sp], #8
    89b2:	bf00      	nop

000089b4 <__aeabi_dcmplt>:
    89b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    89b8:	f7ff ffea 	bl	8990 <__aeabi_cdcmpeq>
    89bc:	bf34      	ite	cc
    89be:	2001      	movcc	r0, #1
    89c0:	2000      	movcs	r0, #0
    89c2:	f85d fb08 	ldr.w	pc, [sp], #8
    89c6:	bf00      	nop

000089c8 <__aeabi_dcmple>:
    89c8:	f84d ed08 	str.w	lr, [sp, #-8]!
    89cc:	f7ff ffe0 	bl	8990 <__aeabi_cdcmpeq>
    89d0:	bf94      	ite	ls
    89d2:	2001      	movls	r0, #1
    89d4:	2000      	movhi	r0, #0
    89d6:	f85d fb08 	ldr.w	pc, [sp], #8
    89da:	bf00      	nop

000089dc <__aeabi_dcmpge>:
    89dc:	f84d ed08 	str.w	lr, [sp, #-8]!
    89e0:	f7ff ffce 	bl	8980 <__aeabi_cdrcmple>
    89e4:	bf94      	ite	ls
    89e6:	2001      	movls	r0, #1
    89e8:	2000      	movhi	r0, #0
    89ea:	f85d fb08 	ldr.w	pc, [sp], #8
    89ee:	bf00      	nop

000089f0 <__aeabi_dcmpgt>:
    89f0:	f84d ed08 	str.w	lr, [sp, #-8]!
    89f4:	f7ff ffc4 	bl	8980 <__aeabi_cdrcmple>
    89f8:	bf34      	ite	cc
    89fa:	2001      	movcc	r0, #1
    89fc:	2000      	movcs	r0, #0
    89fe:	f85d fb08 	ldr.w	pc, [sp], #8
    8a02:	bf00      	nop

00008a04 <__aeabi_d2f>:
    8a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    8a0c:	bf24      	itt	cs
    8a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8a16:	d90d      	bls.n	8a34 <__aeabi_d2f+0x30>
    8a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    8a2c:	bf08      	it	eq
    8a2e:	f020 0001 	biceq.w	r0, r0, #1
    8a32:	4770      	bx	lr
    8a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8a38:	d121      	bne.n	8a7e <__aeabi_d2f+0x7a>
    8a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    8a3e:	bfbc      	itt	lt
    8a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8a44:	4770      	bxlt	lr
    8a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    8a4e:	f1c2 0218 	rsb	r2, r2, #24
    8a52:	f1c2 0c20 	rsb	ip, r2, #32
    8a56:	fa10 f30c 	lsls.w	r3, r0, ip
    8a5a:	fa20 f002 	lsr.w	r0, r0, r2
    8a5e:	bf18      	it	ne
    8a60:	f040 0001 	orrne.w	r0, r0, #1
    8a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    8a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8a70:	ea40 000c 	orr.w	r0, r0, ip
    8a74:	fa23 f302 	lsr.w	r3, r3, r2
    8a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8a7c:	e7cc      	b.n	8a18 <__aeabi_d2f+0x14>
    8a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8a82:	d107      	bne.n	8a94 <__aeabi_d2f+0x90>
    8a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8a88:	bf1e      	ittt	ne
    8a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    8a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8a92:	4770      	bxne	lr
    8a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8aa0:	4770      	bx	lr
    8aa2:	bf00      	nop

00008aa4 <__aeabi_frsub>:
    8aa4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8aa8:	e002      	b.n	8ab0 <__addsf3>
    8aaa:	bf00      	nop

00008aac <__aeabi_fsub>:
    8aac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00008ab0 <__addsf3>:
    8ab0:	0042      	lsls	r2, r0, #1
    8ab2:	bf1f      	itttt	ne
    8ab4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    8ab8:	ea92 0f03 	teqne	r2, r3
    8abc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8ac0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8ac4:	d06a      	beq.n	8b9c <__addsf3+0xec>
    8ac6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8aca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8ace:	bfc1      	itttt	gt
    8ad0:	18d2      	addgt	r2, r2, r3
    8ad2:	4041      	eorgt	r1, r0
    8ad4:	4048      	eorgt	r0, r1
    8ad6:	4041      	eorgt	r1, r0
    8ad8:	bfb8      	it	lt
    8ada:	425b      	neglt	r3, r3
    8adc:	2b19      	cmp	r3, #25
    8ade:	bf88      	it	hi
    8ae0:	4770      	bxhi	lr
    8ae2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8ae6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8aea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8aee:	bf18      	it	ne
    8af0:	4240      	negne	r0, r0
    8af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8af6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8afa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8afe:	bf18      	it	ne
    8b00:	4249      	negne	r1, r1
    8b02:	ea92 0f03 	teq	r2, r3
    8b06:	d03f      	beq.n	8b88 <__addsf3+0xd8>
    8b08:	f1a2 0201 	sub.w	r2, r2, #1
    8b0c:	fa41 fc03 	asr.w	ip, r1, r3
    8b10:	eb10 000c 	adds.w	r0, r0, ip
    8b14:	f1c3 0320 	rsb	r3, r3, #32
    8b18:	fa01 f103 	lsl.w	r1, r1, r3
    8b1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8b20:	d502      	bpl.n	8b28 <__addsf3+0x78>
    8b22:	4249      	negs	r1, r1
    8b24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8b28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8b2c:	d313      	bcc.n	8b56 <__addsf3+0xa6>
    8b2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8b32:	d306      	bcc.n	8b42 <__addsf3+0x92>
    8b34:	0840      	lsrs	r0, r0, #1
    8b36:	ea4f 0131 	mov.w	r1, r1, rrx
    8b3a:	f102 0201 	add.w	r2, r2, #1
    8b3e:	2afe      	cmp	r2, #254	; 0xfe
    8b40:	d251      	bcs.n	8be6 <__addsf3+0x136>
    8b42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8b46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8b4a:	bf08      	it	eq
    8b4c:	f020 0001 	biceq.w	r0, r0, #1
    8b50:	ea40 0003 	orr.w	r0, r0, r3
    8b54:	4770      	bx	lr
    8b56:	0049      	lsls	r1, r1, #1
    8b58:	eb40 0000 	adc.w	r0, r0, r0
    8b5c:	3a01      	subs	r2, #1
    8b5e:	bf28      	it	cs
    8b60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8b64:	d2ed      	bcs.n	8b42 <__addsf3+0x92>
    8b66:	fab0 fc80 	clz	ip, r0
    8b6a:	f1ac 0c08 	sub.w	ip, ip, #8
    8b6e:	ebb2 020c 	subs.w	r2, r2, ip
    8b72:	fa00 f00c 	lsl.w	r0, r0, ip
    8b76:	bfaa      	itet	ge
    8b78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8b7c:	4252      	neglt	r2, r2
    8b7e:	4318      	orrge	r0, r3
    8b80:	bfbc      	itt	lt
    8b82:	40d0      	lsrlt	r0, r2
    8b84:	4318      	orrlt	r0, r3
    8b86:	4770      	bx	lr
    8b88:	f092 0f00 	teq	r2, #0
    8b8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8b90:	bf06      	itte	eq
    8b92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8b96:	3201      	addeq	r2, #1
    8b98:	3b01      	subne	r3, #1
    8b9a:	e7b5      	b.n	8b08 <__addsf3+0x58>
    8b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8ba4:	bf18      	it	ne
    8ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8baa:	d021      	beq.n	8bf0 <__addsf3+0x140>
    8bac:	ea92 0f03 	teq	r2, r3
    8bb0:	d004      	beq.n	8bbc <__addsf3+0x10c>
    8bb2:	f092 0f00 	teq	r2, #0
    8bb6:	bf08      	it	eq
    8bb8:	4608      	moveq	r0, r1
    8bba:	4770      	bx	lr
    8bbc:	ea90 0f01 	teq	r0, r1
    8bc0:	bf1c      	itt	ne
    8bc2:	2000      	movne	r0, #0
    8bc4:	4770      	bxne	lr
    8bc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8bca:	d104      	bne.n	8bd6 <__addsf3+0x126>
    8bcc:	0040      	lsls	r0, r0, #1
    8bce:	bf28      	it	cs
    8bd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8bd4:	4770      	bx	lr
    8bd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8bda:	bf3c      	itt	cc
    8bdc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8be0:	4770      	bxcc	lr
    8be2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8be6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8bee:	4770      	bx	lr
    8bf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8bf4:	bf16      	itet	ne
    8bf6:	4608      	movne	r0, r1
    8bf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8bfc:	4601      	movne	r1, r0
    8bfe:	0242      	lsls	r2, r0, #9
    8c00:	bf06      	itte	eq
    8c02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8c06:	ea90 0f01 	teqeq	r0, r1
    8c0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8c0e:	4770      	bx	lr

00008c10 <__aeabi_ui2f>:
    8c10:	f04f 0300 	mov.w	r3, #0
    8c14:	e004      	b.n	8c20 <__aeabi_i2f+0x8>
    8c16:	bf00      	nop

00008c18 <__aeabi_i2f>:
    8c18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8c1c:	bf48      	it	mi
    8c1e:	4240      	negmi	r0, r0
    8c20:	ea5f 0c00 	movs.w	ip, r0
    8c24:	bf08      	it	eq
    8c26:	4770      	bxeq	lr
    8c28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8c2c:	4601      	mov	r1, r0
    8c2e:	f04f 0000 	mov.w	r0, #0
    8c32:	e01c      	b.n	8c6e <__aeabi_l2f+0x2a>

00008c34 <__aeabi_ul2f>:
    8c34:	ea50 0201 	orrs.w	r2, r0, r1
    8c38:	bf08      	it	eq
    8c3a:	4770      	bxeq	lr
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	e00a      	b.n	8c58 <__aeabi_l2f+0x14>
    8c42:	bf00      	nop

00008c44 <__aeabi_l2f>:
    8c44:	ea50 0201 	orrs.w	r2, r0, r1
    8c48:	bf08      	it	eq
    8c4a:	4770      	bxeq	lr
    8c4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8c50:	d502      	bpl.n	8c58 <__aeabi_l2f+0x14>
    8c52:	4240      	negs	r0, r0
    8c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8c58:	ea5f 0c01 	movs.w	ip, r1
    8c5c:	bf02      	ittt	eq
    8c5e:	4684      	moveq	ip, r0
    8c60:	4601      	moveq	r1, r0
    8c62:	2000      	moveq	r0, #0
    8c64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8c68:	bf08      	it	eq
    8c6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8c6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8c72:	fabc f28c 	clz	r2, ip
    8c76:	3a08      	subs	r2, #8
    8c78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8c7c:	db10      	blt.n	8ca0 <__aeabi_l2f+0x5c>
    8c7e:	fa01 fc02 	lsl.w	ip, r1, r2
    8c82:	4463      	add	r3, ip
    8c84:	fa00 fc02 	lsl.w	ip, r0, r2
    8c88:	f1c2 0220 	rsb	r2, r2, #32
    8c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8c90:	fa20 f202 	lsr.w	r2, r0, r2
    8c94:	eb43 0002 	adc.w	r0, r3, r2
    8c98:	bf08      	it	eq
    8c9a:	f020 0001 	biceq.w	r0, r0, #1
    8c9e:	4770      	bx	lr
    8ca0:	f102 0220 	add.w	r2, r2, #32
    8ca4:	fa01 fc02 	lsl.w	ip, r1, r2
    8ca8:	f1c2 0220 	rsb	r2, r2, #32
    8cac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8cb0:	fa21 f202 	lsr.w	r2, r1, r2
    8cb4:	eb43 0002 	adc.w	r0, r3, r2
    8cb8:	bf08      	it	eq
    8cba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8cbe:	4770      	bx	lr

00008cc0 <__aeabi_fmul>:
    8cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8cc8:	bf1e      	ittt	ne
    8cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8cce:	ea92 0f0c 	teqne	r2, ip
    8cd2:	ea93 0f0c 	teqne	r3, ip
    8cd6:	d06f      	beq.n	8db8 <__aeabi_fmul+0xf8>
    8cd8:	441a      	add	r2, r3
    8cda:	ea80 0c01 	eor.w	ip, r0, r1
    8cde:	0240      	lsls	r0, r0, #9
    8ce0:	bf18      	it	ne
    8ce2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8ce6:	d01e      	beq.n	8d26 <__aeabi_fmul+0x66>
    8ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8cec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8cf0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8cf4:	fba0 3101 	umull	r3, r1, r0, r1
    8cf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8cfc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8d00:	bf3e      	ittt	cc
    8d02:	0049      	lslcc	r1, r1, #1
    8d04:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8d08:	005b      	lslcc	r3, r3, #1
    8d0a:	ea40 0001 	orr.w	r0, r0, r1
    8d0e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8d12:	2afd      	cmp	r2, #253	; 0xfd
    8d14:	d81d      	bhi.n	8d52 <__aeabi_fmul+0x92>
    8d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8d1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8d1e:	bf08      	it	eq
    8d20:	f020 0001 	biceq.w	r0, r0, #1
    8d24:	4770      	bx	lr
    8d26:	f090 0f00 	teq	r0, #0
    8d2a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8d2e:	bf08      	it	eq
    8d30:	0249      	lsleq	r1, r1, #9
    8d32:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8d36:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8d3a:	3a7f      	subs	r2, #127	; 0x7f
    8d3c:	bfc2      	ittt	gt
    8d3e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8d42:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8d46:	4770      	bxgt	lr
    8d48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d4c:	f04f 0300 	mov.w	r3, #0
    8d50:	3a01      	subs	r2, #1
    8d52:	dc5d      	bgt.n	8e10 <__aeabi_fmul+0x150>
    8d54:	f112 0f19 	cmn.w	r2, #25
    8d58:	bfdc      	itt	le
    8d5a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8d5e:	4770      	bxle	lr
    8d60:	f1c2 0200 	rsb	r2, r2, #0
    8d64:	0041      	lsls	r1, r0, #1
    8d66:	fa21 f102 	lsr.w	r1, r1, r2
    8d6a:	f1c2 0220 	rsb	r2, r2, #32
    8d6e:	fa00 fc02 	lsl.w	ip, r0, r2
    8d72:	ea5f 0031 	movs.w	r0, r1, rrx
    8d76:	f140 0000 	adc.w	r0, r0, #0
    8d7a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8d7e:	bf08      	it	eq
    8d80:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8d84:	4770      	bx	lr
    8d86:	f092 0f00 	teq	r2, #0
    8d8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8d8e:	bf02      	ittt	eq
    8d90:	0040      	lsleq	r0, r0, #1
    8d92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8d96:	3a01      	subeq	r2, #1
    8d98:	d0f9      	beq.n	8d8e <__aeabi_fmul+0xce>
    8d9a:	ea40 000c 	orr.w	r0, r0, ip
    8d9e:	f093 0f00 	teq	r3, #0
    8da2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8da6:	bf02      	ittt	eq
    8da8:	0049      	lsleq	r1, r1, #1
    8daa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dae:	3b01      	subeq	r3, #1
    8db0:	d0f9      	beq.n	8da6 <__aeabi_fmul+0xe6>
    8db2:	ea41 010c 	orr.w	r1, r1, ip
    8db6:	e78f      	b.n	8cd8 <__aeabi_fmul+0x18>
    8db8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8dbc:	ea92 0f0c 	teq	r2, ip
    8dc0:	bf18      	it	ne
    8dc2:	ea93 0f0c 	teqne	r3, ip
    8dc6:	d00a      	beq.n	8dde <__aeabi_fmul+0x11e>
    8dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8dcc:	bf18      	it	ne
    8dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8dd2:	d1d8      	bne.n	8d86 <__aeabi_fmul+0xc6>
    8dd4:	ea80 0001 	eor.w	r0, r0, r1
    8dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ddc:	4770      	bx	lr
    8dde:	f090 0f00 	teq	r0, #0
    8de2:	bf17      	itett	ne
    8de4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8de8:	4608      	moveq	r0, r1
    8dea:	f091 0f00 	teqne	r1, #0
    8dee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8df2:	d014      	beq.n	8e1e <__aeabi_fmul+0x15e>
    8df4:	ea92 0f0c 	teq	r2, ip
    8df8:	d101      	bne.n	8dfe <__aeabi_fmul+0x13e>
    8dfa:	0242      	lsls	r2, r0, #9
    8dfc:	d10f      	bne.n	8e1e <__aeabi_fmul+0x15e>
    8dfe:	ea93 0f0c 	teq	r3, ip
    8e02:	d103      	bne.n	8e0c <__aeabi_fmul+0x14c>
    8e04:	024b      	lsls	r3, r1, #9
    8e06:	bf18      	it	ne
    8e08:	4608      	movne	r0, r1
    8e0a:	d108      	bne.n	8e1e <__aeabi_fmul+0x15e>
    8e0c:	ea80 0001 	eor.w	r0, r0, r1
    8e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8e14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8e18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8e1c:	4770      	bx	lr
    8e1e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8e22:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8e26:	4770      	bx	lr

00008e28 <__aeabi_fdiv>:
    8e28:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8e2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8e30:	bf1e      	ittt	ne
    8e32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8e36:	ea92 0f0c 	teqne	r2, ip
    8e3a:	ea93 0f0c 	teqne	r3, ip
    8e3e:	d069      	beq.n	8f14 <__aeabi_fdiv+0xec>
    8e40:	eba2 0203 	sub.w	r2, r2, r3
    8e44:	ea80 0c01 	eor.w	ip, r0, r1
    8e48:	0249      	lsls	r1, r1, #9
    8e4a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8e4e:	d037      	beq.n	8ec0 <__aeabi_fdiv+0x98>
    8e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8e54:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8e58:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8e5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8e60:	428b      	cmp	r3, r1
    8e62:	bf38      	it	cc
    8e64:	005b      	lslcc	r3, r3, #1
    8e66:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8e6a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8e6e:	428b      	cmp	r3, r1
    8e70:	bf24      	itt	cs
    8e72:	1a5b      	subcs	r3, r3, r1
    8e74:	ea40 000c 	orrcs.w	r0, r0, ip
    8e78:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8e7c:	bf24      	itt	cs
    8e7e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8e82:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8e86:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8e8a:	bf24      	itt	cs
    8e8c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8e90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8e94:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8e98:	bf24      	itt	cs
    8e9a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8e9e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8ea2:	011b      	lsls	r3, r3, #4
    8ea4:	bf18      	it	ne
    8ea6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8eaa:	d1e0      	bne.n	8e6e <__aeabi_fdiv+0x46>
    8eac:	2afd      	cmp	r2, #253	; 0xfd
    8eae:	f63f af50 	bhi.w	8d52 <__aeabi_fmul+0x92>
    8eb2:	428b      	cmp	r3, r1
    8eb4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8eb8:	bf08      	it	eq
    8eba:	f020 0001 	biceq.w	r0, r0, #1
    8ebe:	4770      	bx	lr
    8ec0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8ec4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8ec8:	327f      	adds	r2, #127	; 0x7f
    8eca:	bfc2      	ittt	gt
    8ecc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8ed0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8ed4:	4770      	bxgt	lr
    8ed6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8eda:	f04f 0300 	mov.w	r3, #0
    8ede:	3a01      	subs	r2, #1
    8ee0:	e737      	b.n	8d52 <__aeabi_fmul+0x92>
    8ee2:	f092 0f00 	teq	r2, #0
    8ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8eea:	bf02      	ittt	eq
    8eec:	0040      	lsleq	r0, r0, #1
    8eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8ef2:	3a01      	subeq	r2, #1
    8ef4:	d0f9      	beq.n	8eea <__aeabi_fdiv+0xc2>
    8ef6:	ea40 000c 	orr.w	r0, r0, ip
    8efa:	f093 0f00 	teq	r3, #0
    8efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8f02:	bf02      	ittt	eq
    8f04:	0049      	lsleq	r1, r1, #1
    8f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8f0a:	3b01      	subeq	r3, #1
    8f0c:	d0f9      	beq.n	8f02 <__aeabi_fdiv+0xda>
    8f0e:	ea41 010c 	orr.w	r1, r1, ip
    8f12:	e795      	b.n	8e40 <__aeabi_fdiv+0x18>
    8f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8f18:	ea92 0f0c 	teq	r2, ip
    8f1c:	d108      	bne.n	8f30 <__aeabi_fdiv+0x108>
    8f1e:	0242      	lsls	r2, r0, #9
    8f20:	f47f af7d 	bne.w	8e1e <__aeabi_fmul+0x15e>
    8f24:	ea93 0f0c 	teq	r3, ip
    8f28:	f47f af70 	bne.w	8e0c <__aeabi_fmul+0x14c>
    8f2c:	4608      	mov	r0, r1
    8f2e:	e776      	b.n	8e1e <__aeabi_fmul+0x15e>
    8f30:	ea93 0f0c 	teq	r3, ip
    8f34:	d104      	bne.n	8f40 <__aeabi_fdiv+0x118>
    8f36:	024b      	lsls	r3, r1, #9
    8f38:	f43f af4c 	beq.w	8dd4 <__aeabi_fmul+0x114>
    8f3c:	4608      	mov	r0, r1
    8f3e:	e76e      	b.n	8e1e <__aeabi_fmul+0x15e>
    8f40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8f44:	bf18      	it	ne
    8f46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8f4a:	d1ca      	bne.n	8ee2 <__aeabi_fdiv+0xba>
    8f4c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8f50:	f47f af5c 	bne.w	8e0c <__aeabi_fmul+0x14c>
    8f54:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8f58:	f47f af3c 	bne.w	8dd4 <__aeabi_fmul+0x114>
    8f5c:	e75f      	b.n	8e1e <__aeabi_fmul+0x15e>
    8f5e:	bf00      	nop

00008f60 <__aeabi_ldivmod>:
    8f60:	b97b      	cbnz	r3, 8f82 <__aeabi_ldivmod+0x22>
    8f62:	b972      	cbnz	r2, 8f82 <__aeabi_ldivmod+0x22>
    8f64:	2900      	cmp	r1, #0
    8f66:	bfbe      	ittt	lt
    8f68:	2000      	movlt	r0, #0
    8f6a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8f6e:	e006      	blt.n	8f7e <__aeabi_ldivmod+0x1e>
    8f70:	bf08      	it	eq
    8f72:	2800      	cmpeq	r0, #0
    8f74:	bf1c      	itt	ne
    8f76:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8f7a:	f04f 30ff 	movne.w	r0, #4294967295
    8f7e:	f000 b857 	b.w	9030 <__aeabi_idiv0>
    8f82:	f1ad 0c08 	sub.w	ip, sp, #8
    8f86:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f8a:	2900      	cmp	r1, #0
    8f8c:	db09      	blt.n	8fa2 <__aeabi_ldivmod+0x42>
    8f8e:	2b00      	cmp	r3, #0
    8f90:	db1a      	blt.n	8fc8 <__aeabi_ldivmod+0x68>
    8f92:	f000 f88d 	bl	90b0 <__udivmoddi4>
    8f96:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f9e:	b004      	add	sp, #16
    8fa0:	4770      	bx	lr
    8fa2:	4240      	negs	r0, r0
    8fa4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8fa8:	2b00      	cmp	r3, #0
    8faa:	db1b      	blt.n	8fe4 <__aeabi_ldivmod+0x84>
    8fac:	f000 f880 	bl	90b0 <__udivmoddi4>
    8fb0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8fb8:	b004      	add	sp, #16
    8fba:	4240      	negs	r0, r0
    8fbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8fc0:	4252      	negs	r2, r2
    8fc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8fc6:	4770      	bx	lr
    8fc8:	4252      	negs	r2, r2
    8fca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8fce:	f000 f86f 	bl	90b0 <__udivmoddi4>
    8fd2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8fda:	b004      	add	sp, #16
    8fdc:	4240      	negs	r0, r0
    8fde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8fe2:	4770      	bx	lr
    8fe4:	4252      	negs	r2, r2
    8fe6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8fea:	f000 f861 	bl	90b0 <__udivmoddi4>
    8fee:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ff6:	b004      	add	sp, #16
    8ff8:	4252      	negs	r2, r2
    8ffa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ffe:	4770      	bx	lr

00009000 <__aeabi_uldivmod>:
    9000:	b953      	cbnz	r3, 9018 <__aeabi_uldivmod+0x18>
    9002:	b94a      	cbnz	r2, 9018 <__aeabi_uldivmod+0x18>
    9004:	2900      	cmp	r1, #0
    9006:	bf08      	it	eq
    9008:	2800      	cmpeq	r0, #0
    900a:	bf1c      	itt	ne
    900c:	f04f 31ff 	movne.w	r1, #4294967295
    9010:	f04f 30ff 	movne.w	r0, #4294967295
    9014:	f000 b80c 	b.w	9030 <__aeabi_idiv0>
    9018:	f1ad 0c08 	sub.w	ip, sp, #8
    901c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    9020:	f000 f846 	bl	90b0 <__udivmoddi4>
    9024:	f8dd e004 	ldr.w	lr, [sp, #4]
    9028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    902c:	b004      	add	sp, #16
    902e:	4770      	bx	lr

00009030 <__aeabi_idiv0>:
    9030:	4770      	bx	lr
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__udivmoddi4>:
    90b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90b4:	4686      	mov	lr, r0
    90b6:	468c      	mov	ip, r1
    90b8:	4608      	mov	r0, r1
    90ba:	9e08      	ldr	r6, [sp, #32]
    90bc:	4615      	mov	r5, r2
    90be:	4674      	mov	r4, lr
    90c0:	4619      	mov	r1, r3
    90c2:	2b00      	cmp	r3, #0
    90c4:	f040 80c1 	bne.w	924a <__udivmoddi4+0x19a>
    90c8:	4285      	cmp	r5, r0
    90ca:	fab2 f282 	clz	r2, r2
    90ce:	d945      	bls.n	915c <__udivmoddi4+0xac>
    90d0:	b14a      	cbz	r2, 90e6 <__udivmoddi4+0x36>
    90d2:	f1c2 0320 	rsb	r3, r2, #32
    90d6:	fa00 fc02 	lsl.w	ip, r0, r2
    90da:	4095      	lsls	r5, r2
    90dc:	4094      	lsls	r4, r2
    90de:	fa2e f303 	lsr.w	r3, lr, r3
    90e2:	ea43 0c0c 	orr.w	ip, r3, ip
    90e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    90ea:	b2a8      	uxth	r0, r5
    90ec:	0c23      	lsrs	r3, r4, #16
    90ee:	fbbc f8fe 	udiv	r8, ip, lr
    90f2:	fb0e cc18 	mls	ip, lr, r8, ip
    90f6:	fb08 f900 	mul.w	r9, r8, r0
    90fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    90fe:	4599      	cmp	r9, r3
    9100:	d928      	bls.n	9154 <__udivmoddi4+0xa4>
    9102:	18eb      	adds	r3, r5, r3
    9104:	f108 37ff 	add.w	r7, r8, #4294967295
    9108:	d204      	bcs.n	9114 <__udivmoddi4+0x64>
    910a:	4599      	cmp	r9, r3
    910c:	d902      	bls.n	9114 <__udivmoddi4+0x64>
    910e:	f1a8 0702 	sub.w	r7, r8, #2
    9112:	442b      	add	r3, r5
    9114:	eba3 0309 	sub.w	r3, r3, r9
    9118:	b2a4      	uxth	r4, r4
    911a:	fbb3 fcfe 	udiv	ip, r3, lr
    911e:	fb0e 331c 	mls	r3, lr, ip, r3
    9122:	fb0c f000 	mul.w	r0, ip, r0
    9126:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    912a:	42a0      	cmp	r0, r4
    912c:	d914      	bls.n	9158 <__udivmoddi4+0xa8>
    912e:	192c      	adds	r4, r5, r4
    9130:	f10c 33ff 	add.w	r3, ip, #4294967295
    9134:	d204      	bcs.n	9140 <__udivmoddi4+0x90>
    9136:	42a0      	cmp	r0, r4
    9138:	d902      	bls.n	9140 <__udivmoddi4+0x90>
    913a:	f1ac 0302 	sub.w	r3, ip, #2
    913e:	442c      	add	r4, r5
    9140:	1a24      	subs	r4, r4, r0
    9142:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9146:	b11e      	cbz	r6, 9150 <__udivmoddi4+0xa0>
    9148:	40d4      	lsrs	r4, r2
    914a:	2300      	movs	r3, #0
    914c:	6034      	str	r4, [r6, #0]
    914e:	6073      	str	r3, [r6, #4]
    9150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9154:	4647      	mov	r7, r8
    9156:	e7dd      	b.n	9114 <__udivmoddi4+0x64>
    9158:	4663      	mov	r3, ip
    915a:	e7f1      	b.n	9140 <__udivmoddi4+0x90>
    915c:	bb92      	cbnz	r2, 91c4 <__udivmoddi4+0x114>
    915e:	1b43      	subs	r3, r0, r5
    9160:	2101      	movs	r1, #1
    9162:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9166:	b2af      	uxth	r7, r5
    9168:	0c20      	lsrs	r0, r4, #16
    916a:	fbb3 fcfe 	udiv	ip, r3, lr
    916e:	fb0e 331c 	mls	r3, lr, ip, r3
    9172:	fb0c f807 	mul.w	r8, ip, r7
    9176:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    917a:	4598      	cmp	r8, r3
    917c:	d961      	bls.n	9242 <__udivmoddi4+0x192>
    917e:	18eb      	adds	r3, r5, r3
    9180:	f10c 30ff 	add.w	r0, ip, #4294967295
    9184:	d204      	bcs.n	9190 <__udivmoddi4+0xe0>
    9186:	4598      	cmp	r8, r3
    9188:	d902      	bls.n	9190 <__udivmoddi4+0xe0>
    918a:	f1ac 0002 	sub.w	r0, ip, #2
    918e:	442b      	add	r3, r5
    9190:	eba3 0308 	sub.w	r3, r3, r8
    9194:	b2a4      	uxth	r4, r4
    9196:	fbb3 fcfe 	udiv	ip, r3, lr
    919a:	fb0e 331c 	mls	r3, lr, ip, r3
    919e:	fb0c f707 	mul.w	r7, ip, r7
    91a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91a6:	42a7      	cmp	r7, r4
    91a8:	d94d      	bls.n	9246 <__udivmoddi4+0x196>
    91aa:	192c      	adds	r4, r5, r4
    91ac:	f10c 33ff 	add.w	r3, ip, #4294967295
    91b0:	d204      	bcs.n	91bc <__udivmoddi4+0x10c>
    91b2:	42a7      	cmp	r7, r4
    91b4:	d902      	bls.n	91bc <__udivmoddi4+0x10c>
    91b6:	f1ac 0302 	sub.w	r3, ip, #2
    91ba:	442c      	add	r4, r5
    91bc:	1be4      	subs	r4, r4, r7
    91be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91c2:	e7c0      	b.n	9146 <__udivmoddi4+0x96>
    91c4:	f1c2 0320 	rsb	r3, r2, #32
    91c8:	4095      	lsls	r5, r2
    91ca:	4094      	lsls	r4, r2
    91cc:	fa20 f103 	lsr.w	r1, r0, r3
    91d0:	fa2e f303 	lsr.w	r3, lr, r3
    91d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91d8:	4090      	lsls	r0, r2
    91da:	b2af      	uxth	r7, r5
    91dc:	4303      	orrs	r3, r0
    91de:	fbb1 fcfe 	udiv	ip, r1, lr
    91e2:	fb0e 101c 	mls	r0, lr, ip, r1
    91e6:	0c19      	lsrs	r1, r3, #16
    91e8:	fb0c f807 	mul.w	r8, ip, r7
    91ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91f0:	4588      	cmp	r8, r1
    91f2:	d922      	bls.n	923a <__udivmoddi4+0x18a>
    91f4:	1869      	adds	r1, r5, r1
    91f6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91fa:	d204      	bcs.n	9206 <__udivmoddi4+0x156>
    91fc:	4588      	cmp	r8, r1
    91fe:	d902      	bls.n	9206 <__udivmoddi4+0x156>
    9200:	f1ac 0002 	sub.w	r0, ip, #2
    9204:	4429      	add	r1, r5
    9206:	eba1 0108 	sub.w	r1, r1, r8
    920a:	b29b      	uxth	r3, r3
    920c:	fbb1 fcfe 	udiv	ip, r1, lr
    9210:	fb0e 111c 	mls	r1, lr, ip, r1
    9214:	fb0c f707 	mul.w	r7, ip, r7
    9218:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    921c:	429f      	cmp	r7, r3
    921e:	d90e      	bls.n	923e <__udivmoddi4+0x18e>
    9220:	18eb      	adds	r3, r5, r3
    9222:	f10c 31ff 	add.w	r1, ip, #4294967295
    9226:	d204      	bcs.n	9232 <__udivmoddi4+0x182>
    9228:	429f      	cmp	r7, r3
    922a:	d902      	bls.n	9232 <__udivmoddi4+0x182>
    922c:	f1ac 0102 	sub.w	r1, ip, #2
    9230:	442b      	add	r3, r5
    9232:	1bdb      	subs	r3, r3, r7
    9234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9238:	e793      	b.n	9162 <__udivmoddi4+0xb2>
    923a:	4660      	mov	r0, ip
    923c:	e7e3      	b.n	9206 <__udivmoddi4+0x156>
    923e:	4661      	mov	r1, ip
    9240:	e7f7      	b.n	9232 <__udivmoddi4+0x182>
    9242:	4660      	mov	r0, ip
    9244:	e7a4      	b.n	9190 <__udivmoddi4+0xe0>
    9246:	4663      	mov	r3, ip
    9248:	e7b8      	b.n	91bc <__udivmoddi4+0x10c>
    924a:	4283      	cmp	r3, r0
    924c:	d906      	bls.n	925c <__udivmoddi4+0x1ac>
    924e:	b916      	cbnz	r6, 9256 <__udivmoddi4+0x1a6>
    9250:	2100      	movs	r1, #0
    9252:	4608      	mov	r0, r1
    9254:	e77c      	b.n	9150 <__udivmoddi4+0xa0>
    9256:	e9c6 e000 	strd	lr, r0, [r6]
    925a:	e7f9      	b.n	9250 <__udivmoddi4+0x1a0>
    925c:	fab3 f783 	clz	r7, r3
    9260:	b98f      	cbnz	r7, 9286 <__udivmoddi4+0x1d6>
    9262:	4283      	cmp	r3, r0
    9264:	d301      	bcc.n	926a <__udivmoddi4+0x1ba>
    9266:	4572      	cmp	r2, lr
    9268:	d808      	bhi.n	927c <__udivmoddi4+0x1cc>
    926a:	ebbe 0402 	subs.w	r4, lr, r2
    926e:	eb60 0303 	sbc.w	r3, r0, r3
    9272:	2001      	movs	r0, #1
    9274:	469c      	mov	ip, r3
    9276:	b91e      	cbnz	r6, 9280 <__udivmoddi4+0x1d0>
    9278:	2100      	movs	r1, #0
    927a:	e769      	b.n	9150 <__udivmoddi4+0xa0>
    927c:	4638      	mov	r0, r7
    927e:	e7fa      	b.n	9276 <__udivmoddi4+0x1c6>
    9280:	e9c6 4c00 	strd	r4, ip, [r6]
    9284:	e7f8      	b.n	9278 <__udivmoddi4+0x1c8>
    9286:	f1c7 0c20 	rsb	ip, r7, #32
    928a:	40bb      	lsls	r3, r7
    928c:	fa0e f507 	lsl.w	r5, lr, r7
    9290:	fa22 f40c 	lsr.w	r4, r2, ip
    9294:	fa2e f10c 	lsr.w	r1, lr, ip
    9298:	40ba      	lsls	r2, r7
    929a:	431c      	orrs	r4, r3
    929c:	fa20 f30c 	lsr.w	r3, r0, ip
    92a0:	40b8      	lsls	r0, r7
    92a2:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92a6:	4301      	orrs	r1, r0
    92a8:	fa1f fe84 	uxth.w	lr, r4
    92ac:	fbb3 f8f9 	udiv	r8, r3, r9
    92b0:	fb09 3018 	mls	r0, r9, r8, r3
    92b4:	0c0b      	lsrs	r3, r1, #16
    92b6:	fb08 fa0e 	mul.w	sl, r8, lr
    92ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92be:	459a      	cmp	sl, r3
    92c0:	d940      	bls.n	9344 <__udivmoddi4+0x294>
    92c2:	18e3      	adds	r3, r4, r3
    92c4:	f108 30ff 	add.w	r0, r8, #4294967295
    92c8:	d204      	bcs.n	92d4 <__udivmoddi4+0x224>
    92ca:	459a      	cmp	sl, r3
    92cc:	d902      	bls.n	92d4 <__udivmoddi4+0x224>
    92ce:	f1a8 0002 	sub.w	r0, r8, #2
    92d2:	4423      	add	r3, r4
    92d4:	eba3 030a 	sub.w	r3, r3, sl
    92d8:	b289      	uxth	r1, r1
    92da:	fbb3 f8f9 	udiv	r8, r3, r9
    92de:	fb09 3318 	mls	r3, r9, r8, r3
    92e2:	fb08 fe0e 	mul.w	lr, r8, lr
    92e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    92ea:	458e      	cmp	lr, r1
    92ec:	d92c      	bls.n	9348 <__udivmoddi4+0x298>
    92ee:	1861      	adds	r1, r4, r1
    92f0:	f108 33ff 	add.w	r3, r8, #4294967295
    92f4:	d204      	bcs.n	9300 <__udivmoddi4+0x250>
    92f6:	458e      	cmp	lr, r1
    92f8:	d902      	bls.n	9300 <__udivmoddi4+0x250>
    92fa:	f1a8 0302 	sub.w	r3, r8, #2
    92fe:	4421      	add	r1, r4
    9300:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9304:	eba1 010e 	sub.w	r1, r1, lr
    9308:	fba0 9802 	umull	r9, r8, r0, r2
    930c:	4541      	cmp	r1, r8
    930e:	46ce      	mov	lr, r9
    9310:	4643      	mov	r3, r8
    9312:	d302      	bcc.n	931a <__udivmoddi4+0x26a>
    9314:	d106      	bne.n	9324 <__udivmoddi4+0x274>
    9316:	454d      	cmp	r5, r9
    9318:	d204      	bcs.n	9324 <__udivmoddi4+0x274>
    931a:	3801      	subs	r0, #1
    931c:	ebb9 0e02 	subs.w	lr, r9, r2
    9320:	eb68 0304 	sbc.w	r3, r8, r4
    9324:	2e00      	cmp	r6, #0
    9326:	d0a7      	beq.n	9278 <__udivmoddi4+0x1c8>
    9328:	ebb5 020e 	subs.w	r2, r5, lr
    932c:	eb61 0103 	sbc.w	r1, r1, r3
    9330:	fa01 fc0c 	lsl.w	ip, r1, ip
    9334:	fa22 f307 	lsr.w	r3, r2, r7
    9338:	40f9      	lsrs	r1, r7
    933a:	ea4c 0303 	orr.w	r3, ip, r3
    933e:	e9c6 3100 	strd	r3, r1, [r6]
    9342:	e799      	b.n	9278 <__udivmoddi4+0x1c8>
    9344:	4640      	mov	r0, r8
    9346:	e7c5      	b.n	92d4 <__udivmoddi4+0x224>
    9348:	4643      	mov	r3, r8
    934a:	e7d9      	b.n	9300 <__udivmoddi4+0x250>

0000934c <strcmp>:
    934c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9350:	f811 3b01 	ldrb.w	r3, [r1], #1
    9354:	2a01      	cmp	r2, #1
    9356:	bf28      	it	cs
    9358:	429a      	cmpcs	r2, r3
    935a:	d0f7      	beq.n	934c <strcmp>
    935c:	1ad0      	subs	r0, r2, r3
    935e:	4770      	bx	lr

00009360 <strlen>:
    9360:	4603      	mov	r3, r0
    9362:	f813 2b01 	ldrb.w	r2, [r3], #1
    9366:	2a00      	cmp	r2, #0
    9368:	d1fb      	bne.n	9362 <strlen+0x2>
    936a:	1a18      	subs	r0, r3, r0
    936c:	3801      	subs	r0, #1
    936e:	4770      	bx	lr

00009370 <ntc_temperature>:
  }

}


float ntc_temperature(uint16_t conversao){
    9370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	  double Rt = 0;
  	double Vout = 0;
  	
	  int index,index_ntc=0;

 	  resistenciaTermistor = resistenciaEmSerie * (voltageUc /  ((  conversao * voltageUc) /   adcResolutionUc ) - 1)  ;
    9374:	f7ff fc50 	bl	8c18 <__aeabi_i2f>
    9378:	493f      	ldr	r1, [pc, #252]	; (9478 <ntc_temperature+0x108>)
    937a:	f7ff fca1 	bl	8cc0 <__aeabi_fmul>
    937e:	493f      	ldr	r1, [pc, #252]	; (947c <ntc_temperature+0x10c>)
    9380:	f7ff fd52 	bl	8e28 <__aeabi_fdiv>
    9384:	4601      	mov	r1, r0
    9386:	483c      	ldr	r0, [pc, #240]	; (9478 <ntc_temperature+0x108>)
    9388:	f7ff fd4e 	bl	8e28 <__aeabi_fdiv>
    938c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    9390:	f7ff fb8c 	bl	8aac <__aeabi_fsub>
    9394:	493a      	ldr	r1, [pc, #232]	; (9480 <ntc_temperature+0x110>)
    9396:	f7ff fc93 	bl	8cc0 <__aeabi_fmul>
	  Vout = resistenciaEmSerie / (resistenciaEmSerie + resistenciaTermistor) *  voltageUc;
    939a:	4939      	ldr	r1, [pc, #228]	; (9480 <ntc_temperature+0x110>)
    939c:	f7ff fb88 	bl	8ab0 <__addsf3>
    93a0:	4601      	mov	r1, r0
    93a2:	4837      	ldr	r0, [pc, #220]	; (9480 <ntc_temperature+0x110>)
    93a4:	f7ff fd40 	bl	8e28 <__aeabi_fdiv>
    93a8:	4933      	ldr	r1, [pc, #204]	; (9478 <ntc_temperature+0x108>)
    93aa:	f7ff fc89 	bl	8cc0 <__aeabi_fmul>
    93ae:	f7ff f837 	bl	8420 <__aeabi_f2d>
	  Rt = resistenciaEmSerie * Vout / (voltageUc - Vout);
    93b2:	a32d      	add	r3, pc, #180	; (adr r3, 9468 <ntc_temperature+0xf8>)
    93b4:	e9d3 2300 	ldrd	r2, r3, [r3]
	  Vout = resistenciaEmSerie / (resistenciaEmSerie + resistenciaTermistor) *  voltageUc;
    93b8:	4606      	mov	r6, r0
    93ba:	460f      	mov	r7, r1
	  Rt = resistenciaEmSerie * Vout / (voltageUc - Vout);
    93bc:	f7ff f888 	bl	84d0 <__aeabi_dmul>
    93c0:	4632      	mov	r2, r6
    93c2:	4604      	mov	r4, r0
    93c4:	460d      	mov	r5, r1
    93c6:	a12a      	add	r1, pc, #168	; (adr r1, 9470 <ntc_temperature+0x100>)
    93c8:	e9d1 0100 	ldrd	r0, r1, [r1]
    93cc:	463b      	mov	r3, r7
    93ce:	f7fe fec7 	bl	8160 <__aeabi_dsub>
    93d2:	4602      	mov	r2, r0
    93d4:	460b      	mov	r3, r1
    93d6:	4620      	mov	r0, r4
    93d8:	4629      	mov	r1, r5
    93da:	f7ff f9a3 	bl	8724 <__aeabi_ddiv>
    Rt = Rt/1000;  //table is in kOhms
    93de:	2200      	movs	r2, #0
    93e0:	4b28      	ldr	r3, [pc, #160]	; (9484 <ntc_temperature+0x114>)
    93e2:	f7ff f99f 	bl	8724 <__aeabi_ddiv>
    93e6:	4d28      	ldr	r5, [pc, #160]	; (9488 <ntc_temperature+0x118>)
    93e8:	4606      	mov	r6, r0
    93ea:	460f      	mov	r7, r1
	  int index,index_ntc=0;
    93ec:	2400      	movs	r4, #0
    93ee:	46a9      	mov	r9, r5

    

	  while (index_ntc<=MAX_INDEX){
		  if (Rt >= (ntc_table[index_ntc])){
    93f0:	6828      	ldr	r0, [r5, #0]
    93f2:	f7ff f815 	bl	8420 <__aeabi_f2d>
    93f6:	4632      	mov	r2, r6
    93f8:	463b      	mov	r3, r7
    93fa:	f7ff fae5 	bl	89c8 <__aeabi_dcmple>
    93fe:	b910      	cbnz	r0, 9406 <ntc_temperature+0x96>
    9400:	3504      	adds	r5, #4
                  
                  index=index_ntc;
  				  index_ntc=(MAX_INDEX+1); //to stop search
		  }
	  			  index_ntc++;
    9402:	3401      	adds	r4, #1
	  while (index_ntc<=MAX_INDEX){
    9404:	e7f4      	b.n	93f0 <ntc_temperature+0x80>
	  }
    


    
    float m1 = (ntc_table[index] - ntc_table[index-1]);
    9406:	f859 8024 	ldr.w	r8, [r9, r4, lsl #2]
    940a:	1e63      	subs	r3, r4, #1
    940c:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
    9410:	4640      	mov	r0, r8
    9412:	f7ff fb4b 	bl	8aac <__aeabi_fsub>
    9416:	4601      	mov	r1, r0
    float m = 1 / m1;
    9418:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    941c:	f7ff fd04 	bl	8e28 <__aeabi_fdiv>
    9420:	4605      	mov	r5, r0
    float n = index - m *  ntc_table[index];
    9422:	4620      	mov	r0, r4
    9424:	f7ff fbf8 	bl	8c18 <__aeabi_i2f>
    9428:	4629      	mov	r1, r5
    942a:	4604      	mov	r4, r0
    942c:	4640      	mov	r0, r8
    942e:	f7ff fc47 	bl	8cc0 <__aeabi_fmul>
    9432:	4601      	mov	r1, r0
    9434:	4620      	mov	r0, r4
    9436:	f7ff fb39 	bl	8aac <__aeabi_fsub>
    float result= Rt * m + n;
    943a:	f7fe fff1 	bl	8420 <__aeabi_f2d>
    943e:	4680      	mov	r8, r0
    9440:	4628      	mov	r0, r5
    9442:	4689      	mov	r9, r1
    9444:	f7fe ffec 	bl	8420 <__aeabi_f2d>
    9448:	4632      	mov	r2, r6
    944a:	463b      	mov	r3, r7
    944c:	f7ff f840 	bl	84d0 <__aeabi_dmul>
    9450:	4602      	mov	r2, r0
    9452:	460b      	mov	r3, r1
    9454:	4640      	mov	r0, r8
    9456:	4649      	mov	r1, r9
    9458:	f7fe fe84 	bl	8164 <__adddf3>
    945c:	f7ff fad2 	bl	8a04 <__aeabi_d2f>
    if (DEBUG) printf("index=%d m=%f n=%f result=%f\n",index,m,n,result);
    if (DEBUG) printf("Rt:%fkohms\n",Rt);

	return result;

}
    9460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9464:	f3af 8000 	nop.w
    9468:	00000000 	.word	0x00000000
    946c:	40ba8400 	.word	0x40ba8400
    9470:	c0000000 	.word	0xc0000000
    9474:	400ccccc 	.word	0x400ccccc
    9478:	40666666 	.word	0x40666666
    947c:	467ffc00 	.word	0x467ffc00
    9480:	45d42000 	.word	0x45d42000
    9484:	408f4000 	.word	0x408f4000
    9488:	20008328 	.word	0x20008328
    948c:	00000000 	.word	0x00000000

00009490 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9490:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9492:	4d65      	ldr	r5, [pc, #404]	; (9628 <bt_init+0x198>)
{
    9494:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9496:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    949a:	6899      	ldr	r1, [r3, #8]
    949c:	f011 0101 	ands.w	r1, r1, #1
    94a0:	d11a      	bne.n	94d8 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    94a2:	f640 4003 	movw	r0, #3075	; 0xc03
    94a6:	aa01      	add	r2, sp, #4
    94a8:	f009 f854 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
    94ac:	4604      	mov	r4, r0
    94ae:	2800      	cmp	r0, #0
    94b0:	f040 80b6 	bne.w	9620 <bt_init+0x190>
		hci_reset_complete(rsp);
    94b4:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    94b6:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    94b8:	781b      	ldrb	r3, [r3, #0]
    94ba:	b95b      	cbnz	r3, 94d4 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    94bc:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    94c0:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    94c4:	f002 0209 	and.w	r2, r2, #9
    94c8:	e8d3 1fef 	ldaex	r1, [r3]
    94cc:	e8c3 2fe4 	stlex	r4, r2, [r3]
    94d0:	2c00      	cmp	r4, #0
    94d2:	d1f9      	bne.n	94c8 <bt_init+0x38>
		net_buf_unref(rsp);
    94d4:	f011 fb9e 	bl	1ac14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    94d8:	2100      	movs	r1, #0
    94da:	f241 0003 	movw	r0, #4099	; 0x1003
    94de:	aa01      	add	r2, sp, #4
    94e0:	f009 f838 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    94e4:	4604      	mov	r4, r0
    94e6:	2800      	cmp	r0, #0
    94e8:	f040 809a 	bne.w	9620 <bt_init+0x190>
	read_local_features_complete(rsp);
    94ec:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94ee:	4e4f      	ldr	r6, [pc, #316]	; (962c <bt_init+0x19c>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94f0:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94f2:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94f6:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94fa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94fc:	4618      	mov	r0, r3
    94fe:	f011 fb89 	bl	1ac14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9502:	4621      	mov	r1, r4
    9504:	f241 0001 	movw	r0, #4097	; 0x1001
    9508:	aa01      	add	r2, sp, #4
    950a:	f009 f823 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    950e:	4604      	mov	r4, r0
    9510:	2800      	cmp	r0, #0
    9512:	f040 8085 	bne.w	9620 <bt_init+0x190>
	read_local_ver_complete(rsp);
    9516:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    9518:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    951a:	785a      	ldrb	r2, [r3, #1]
    951c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9520:	885a      	ldrh	r2, [r3, #2]
    9522:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    9526:	791a      	ldrb	r2, [r3, #4]
    9528:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    952c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9530:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9534:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9538:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    953c:	f011 fb6a 	bl	1ac14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    9540:	4621      	mov	r1, r4
    9542:	f241 0002 	movw	r0, #4098	; 0x1002
    9546:	aa01      	add	r2, sp, #4
    9548:	f009 f804 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    954c:	4604      	mov	r4, r0
    954e:	2800      	cmp	r0, #0
    9550:	d166      	bne.n	9620 <bt_init+0x190>
	read_supported_commands_complete(rsp);
    9552:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    9554:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    9556:	1c53      	adds	r3, r2, #1
    9558:	3241      	adds	r2, #65	; 0x41
    955a:	4634      	mov	r4, r6
    955c:	6818      	ldr	r0, [r3, #0]
    955e:	6859      	ldr	r1, [r3, #4]
    9560:	3308      	adds	r3, #8
    9562:	c403      	stmia	r4!, {r0, r1}
    9564:	4293      	cmp	r3, r2
    9566:	4626      	mov	r6, r4
    9568:	d1f7      	bne.n	955a <bt_init+0xca>
	net_buf_unref(rsp);
    956a:	4638      	mov	r0, r7
    956c:	f011 fb52 	bl	1ac14 <net_buf_unref>
		err = prng_init();
    9570:	f00a fe40 	bl	141f4 <prng_init>
		if (err) {
    9574:	4604      	mov	r4, r0
    9576:	2800      	cmp	r0, #0
    9578:	d152      	bne.n	9620 <bt_init+0x190>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    957a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    957e:	069a      	lsls	r2, r3, #26
    9580:	d41a      	bmi.n	95b8 <bt_init+0x128>
		LOG_WRN("Controller to host flow control not supported");
    9582:	4b2b      	ldr	r3, [pc, #172]	; (9630 <bt_init+0x1a0>)
    9584:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9588:	9307      	str	r3, [sp, #28]
    958a:	2302      	movs	r3, #2
    958c:	4829      	ldr	r0, [pc, #164]	; (9634 <bt_init+0x1a4>)
    958e:	aa06      	add	r2, sp, #24
    9590:	9306      	str	r3, [sp, #24]
    9592:	f01e fe4c 	bl	2822e <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9596:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    959a:	065b      	lsls	r3, r3, #25
    959c:	d44e      	bmi.n	963c <bt_init+0x1ac>
		LOG_ERR("Non-LE capable controller detected!");
    959e:	4b26      	ldr	r3, [pc, #152]	; (9638 <bt_init+0x1a8>)
    95a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    95a4:	9307      	str	r3, [sp, #28]
    95a6:	2302      	movs	r3, #2
    95a8:	4822      	ldr	r0, [pc, #136]	; (9634 <bt_init+0x1a4>)
    95aa:	aa06      	add	r2, sp, #24
    95ac:	9306      	str	r3, [sp, #24]
		return -ENODEV;
    95ae:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
    95b2:	f01e fe3c 	bl	2822e <z_log_msg_static_create.constprop.0>
	if (err) {
    95b6:	e033      	b.n	9620 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    95b8:	2107      	movs	r1, #7
    95ba:	f640 4033 	movw	r0, #3123	; 0xc33
    95be:	f008 ff7b 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
    95c2:	4606      	mov	r6, r0
    95c4:	2800      	cmp	r0, #0
    95c6:	f000 8141 	beq.w	984c <bt_init+0x3bc>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    95ca:	2107      	movs	r1, #7
    95cc:	300c      	adds	r0, #12
    95ce:	f011 fc43 	bl	1ae58 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    95d2:	2345      	movs	r3, #69	; 0x45
    95d4:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95d6:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    95d8:	f8c0 4002 	str.w	r4, [r0, #2]
    95dc:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    95de:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95e0:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    95e2:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95e4:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    95e6:	4631      	mov	r1, r6
    95e8:	f640 4033 	movw	r0, #3123	; 0xc33
    95ec:	f008 ffb2 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    95f0:	4604      	mov	r4, r0
    95f2:	b9a8      	cbnz	r0, 9620 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95f4:	2101      	movs	r1, #1
    95f6:	f640 4031 	movw	r0, #3121	; 0xc31
    95fa:	f008 ff5d 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
    95fe:	4606      	mov	r6, r0
    9600:	2800      	cmp	r0, #0
    9602:	f000 8123 	beq.w	984c <bt_init+0x3bc>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    9606:	2101      	movs	r1, #1
    9608:	300c      	adds	r0, #12
    960a:	f020 fc6f 	bl	29eec <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    960e:	4622      	mov	r2, r4
    9610:	4631      	mov	r1, r6
    9612:	f640 4031 	movw	r0, #3121	; 0xc31
    9616:	f008 ff9d 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    961a:	4604      	mov	r4, r0
    961c:	2800      	cmp	r0, #0
    961e:	d0ba      	beq.n	9596 <bt_init+0x106>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    9620:	4620      	mov	r0, r4
    9622:	b009      	add	sp, #36	; 0x24
    9624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9626:	bf00      	nop
    9628:	20008000 	.word	0x20008000
    962c:	20008070 	.word	0x20008070
    9630:	0002ff92 	.word	0x0002ff92
    9634:	0002c80c 	.word	0x0002c80c
    9638:	0002ffc0 	.word	0x0002ffc0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    963c:	2100      	movs	r1, #0
    963e:	f242 0003 	movw	r0, #8195	; 0x2003
    9642:	aa02      	add	r2, sp, #8
    9644:	f008 ff86 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    9648:	4604      	mov	r4, r0
    964a:	2800      	cmp	r0, #0
    964c:	d1e8      	bne.n	9620 <bt_init+0x190>
	read_le_features_complete(rsp);
    964e:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9650:	4ebf      	ldr	r6, [pc, #764]	; (9950 <bt_init+0x4c0>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    9652:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9654:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9658:	f8d2 1005 	ldr.w	r1, [r2, #5]
    965c:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    965e:	4618      	mov	r0, r3
    9660:	f011 fad8 	bl	1ac14 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9664:	4621      	mov	r1, r4
    9666:	f242 0002 	movw	r0, #8194	; 0x2002
    966a:	aa02      	add	r2, sp, #8
    966c:	f008 ff72 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
    9670:	4604      	mov	r4, r0
    9672:	2800      	cmp	r0, #0
    9674:	d1d4      	bne.n	9620 <bt_init+0x190>
		le_read_buffer_size_complete(rsp);
    9676:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9678:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    967a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    967e:	b291      	uxth	r1, r2
    9680:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    9684:	b129      	cbz	r1, 9692 <bt_init+0x202>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9686:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9688:	4611      	mov	r1, r2
    968a:	f106 0028 	add.w	r0, r6, #40	; 0x28
    968e:	f021 ff8b 	bl	2b5a8 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    9692:	4620      	mov	r0, r4
    9694:	f011 fabe 	bl	1ac14 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9698:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    969c:	f016 0620 	ands.w	r6, r6, #32
    96a0:	d118      	bne.n	96d4 <bt_init+0x244>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    96a2:	2102      	movs	r1, #2
    96a4:	f640 406d 	movw	r0, #3181	; 0xc6d
    96a8:	f008 ff06 	bl	124b8 <bt_hci_cmd_create>
		if (!buf) {
    96ac:	4604      	mov	r4, r0
    96ae:	2800      	cmp	r0, #0
    96b0:	f000 80cc 	beq.w	984c <bt_init+0x3bc>
	return net_buf_simple_add(&buf->b, len);
    96b4:	2102      	movs	r1, #2
    96b6:	300c      	adds	r0, #12
    96b8:	f011 fbce 	bl	1ae58 <net_buf_simple_add>
		cp_le->le = 0x01;
    96bc:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    96be:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    96c0:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    96c2:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    96c4:	4632      	mov	r2, r6
    96c6:	f640 406d 	movw	r0, #3181	; 0xc6d
    96ca:	f008 ff43 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
    96ce:	4604      	mov	r4, r0
    96d0:	2800      	cmp	r0, #0
    96d2:	d1a5      	bne.n	9620 <bt_init+0x190>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    96d4:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    96d8:	071f      	lsls	r7, r3, #28
    96da:	d512      	bpl.n	9702 <bt_init+0x272>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    96dc:	2100      	movs	r1, #0
    96de:	f242 001c 	movw	r0, #8220	; 0x201c
    96e2:	aa02      	add	r2, sp, #8
    96e4:	f008 ff36 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
    96e8:	4604      	mov	r4, r0
    96ea:	2800      	cmp	r0, #0
    96ec:	d198      	bne.n	9620 <bt_init+0x190>
		le_read_supp_states_complete(rsp);
    96ee:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    96f0:	68c3      	ldr	r3, [r0, #12]
    96f2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96f6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96fa:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96fe:	f011 fa89 	bl	1ac14 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    9702:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9706:	069e      	lsls	r6, r3, #26
    9708:	d524      	bpl.n	9754 <bt_init+0x2c4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    970a:	a901      	add	r1, sp, #4
    970c:	f10d 0002 	add.w	r0, sp, #2
    9710:	f008 ff9c 	bl	1264c <hci_le_read_max_data_len>
		if (err) {
    9714:	4604      	mov	r4, r0
    9716:	2800      	cmp	r0, #0
    9718:	d182      	bne.n	9620 <bt_init+0x190>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    971a:	2104      	movs	r1, #4
    971c:	f242 0024 	movw	r0, #8228	; 0x2024
    9720:	f008 feca 	bl	124b8 <bt_hci_cmd_create>
		if (!buf) {
    9724:	4606      	mov	r6, r0
    9726:	2800      	cmp	r0, #0
    9728:	f000 8090 	beq.w	984c <bt_init+0x3bc>
    972c:	2104      	movs	r1, #4
    972e:	300c      	adds	r0, #12
    9730:	f011 fb92 	bl	1ae58 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9734:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9738:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    973a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    973c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9740:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9742:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9744:	f242 0024 	movw	r0, #8228	; 0x2024
    9748:	f008 ff04 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
    974c:	4604      	mov	r4, r0
    974e:	2800      	cmp	r0, #0
    9750:	f47f af66 	bne.w	9620 <bt_init+0x190>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9754:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9758:	065c      	lsls	r4, r3, #25
    975a:	d510      	bpl.n	977e <bt_init+0x2ee>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    975c:	2100      	movs	r1, #0
    975e:	f242 002a 	movw	r0, #8234	; 0x202a
    9762:	aa02      	add	r2, sp, #8
    9764:	f008 fef6 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
    9768:	4604      	mov	r4, r0
    976a:	2800      	cmp	r0, #0
    976c:	f47f af58 	bne.w	9620 <bt_init+0x190>
		le_read_resolving_list_size_complete(rsp);
    9770:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
    9772:	68c3      	ldr	r3, [r0, #12]
    9774:	785b      	ldrb	r3, [r3, #1]
    9776:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    977a:	f011 fa4b 	bl	1ac14 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    977e:	2108      	movs	r1, #8
    9780:	f242 0001 	movw	r0, #8193	; 0x2001
    9784:	f008 fe98 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
    9788:	4604      	mov	r4, r0
    978a:	2800      	cmp	r0, #0
    978c:	d05e      	beq.n	984c <bt_init+0x3bc>
    978e:	2108      	movs	r1, #8
    9790:	300c      	adds	r0, #12
    9792:	f011 fb61 	bl	1ae58 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    9796:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    979a:	f240 2302 	movw	r3, #514	; 0x202
    979e:	f011 0f40 	tst.w	r1, #64	; 0x40
    97a2:	bf08      	it	eq
    97a4:	2303      	moveq	r3, #3
    97a6:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    97a8:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    97aa:	bf4c      	ite	mi
    97ac:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    97b0:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    97b4:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    97b8:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    97ba:	bf48      	it	mi
    97bc:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    97c0:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97c4:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    97c8:	bf18      	it	ne
    97ca:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97ce:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    97d2:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    97d4:	bf48      	it	mi
    97d6:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97da:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    97dc:	bf08      	it	eq
    97de:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    97e2:	2100      	movs	r1, #0
    97e4:	f01e fd2e 	bl	28244 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    97e8:	4621      	mov	r1, r4
    97ea:	2200      	movs	r2, #0
    97ec:	f242 0001 	movw	r0, #8193	; 0x2001
    97f0:	f008 feb0 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    97f4:	4604      	mov	r4, r0
    97f6:	2800      	cmp	r0, #0
    97f8:	f47f af12 	bne.w	9620 <bt_init+0x190>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97fc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    9800:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9804:	0698      	lsls	r0, r3, #26
    9806:	d424      	bmi.n	9852 <bt_init+0x3c2>
	if (bt_dev.le.acl_mtu) {
    9808:	b9c9      	cbnz	r1, 983e <bt_init+0x3ae>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    980a:	f241 0005 	movw	r0, #4101	; 0x1005
    980e:	aa02      	add	r2, sp, #8
    9810:	f008 fea0 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    9814:	4604      	mov	r4, r0
    9816:	2800      	cmp	r0, #0
    9818:	f47f af02 	bne.w	9620 <bt_init+0x190>
	if (bt_dev.le.acl_mtu) {
    981c:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    9820:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
    9822:	b94b      	cbnz	r3, 9838 <bt_init+0x3a8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    9824:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9826:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    982a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    982e:	889a      	ldrh	r2, [r3, #4]
    9830:	4848      	ldr	r0, [pc, #288]	; (9954 <bt_init+0x4c4>)
    9832:	4611      	mov	r1, r2
    9834:	f021 feb8 	bl	2b5a8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9838:	4620      	mov	r0, r4
    983a:	f011 f9eb 	bl	1ac14 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    983e:	2108      	movs	r1, #8
    9840:	f640 4001 	movw	r0, #3073	; 0xc01
    9844:	f008 fe38 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
    9848:	4604      	mov	r4, r0
    984a:	b988      	cbnz	r0, 9870 <bt_init+0x3e0>
		return -ENOBUFS;
    984c:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9850:	e6e6      	b.n	9620 <bt_init+0x190>
	else if (!bt_dev.le.acl_mtu) {
    9852:	2900      	cmp	r1, #0
    9854:	d1f3      	bne.n	983e <bt_init+0x3ae>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9856:	4b40      	ldr	r3, [pc, #256]	; (9958 <bt_init+0x4c8>)
    9858:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    985c:	9307      	str	r3, [sp, #28]
    985e:	2302      	movs	r3, #2
    9860:	483e      	ldr	r0, [pc, #248]	; (995c <bt_init+0x4cc>)
    9862:	aa06      	add	r2, sp, #24
    9864:	9306      	str	r3, [sp, #24]
		return -EIO;
    9866:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
    986a:	f01e fce0 	bl	2822e <z_log_msg_static_create.constprop.0>
	if (err) {
    986e:	e6d7      	b.n	9620 <bt_init+0x190>
    9870:	2108      	movs	r1, #8
    9872:	300c      	adds	r0, #12
    9874:	f011 faf0 	bl	1ae58 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9878:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    987c:	4602      	mov	r2, r0
    987e:	07d9      	lsls	r1, r3, #31
    9880:	d431      	bmi.n	98e6 <bt_init+0x456>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    9882:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    9886:	4836      	ldr	r0, [pc, #216]	; (9960 <bt_init+0x4d0>)
	sys_put_le64(mask, ev->events);
    9888:	f01e fcdc 	bl	28244 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    988c:	4621      	mov	r1, r4
    988e:	2200      	movs	r2, #0
    9890:	f640 4001 	movw	r0, #3073	; 0xc01
    9894:	f008 fe5e 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    9898:	4604      	mov	r4, r0
    989a:	2800      	cmp	r0, #0
    989c:	f47f aec0 	bne.w	9620 <bt_init+0x190>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    98a0:	4601      	mov	r1, r0
    98a2:	aa01      	add	r2, sp, #4
    98a4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    98a8:	f008 fe54 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    98ac:	4604      	mov	r4, r0
    98ae:	b1f0      	cbz	r0, 98ee <bt_init+0x45e>
		LOG_WRN("Vendor HCI extensions not available");
    98b0:	4b2c      	ldr	r3, [pc, #176]	; (9964 <bt_init+0x4d4>)
			LOG_WRN("Failed to read supported vendor features");
    98b2:	9307      	str	r3, [sp, #28]
    98b4:	2302      	movs	r3, #2
    98b6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    98ba:	4828      	ldr	r0, [pc, #160]	; (995c <bt_init+0x4cc>)
    98bc:	aa06      	add	r2, sp, #24
    98be:	9306      	str	r3, [sp, #24]
    98c0:	f01e fcb5 	bl	2822e <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    98c4:	f01e fe52 	bl	2856c <bt_id_init>
	if (err) {
    98c8:	4604      	mov	r4, r0
    98ca:	2800      	cmp	r0, #0
    98cc:	f47f aea8 	bne.w	9620 <bt_init+0x190>
		err = bt_conn_init();
    98d0:	f00b fe2c 	bl	1552c <bt_conn_init>
		if (err) {
    98d4:	4604      	mov	r4, r0
    98d6:	2800      	cmp	r0, #0
    98d8:	f47f aea2 	bne.w	9620 <bt_init+0x190>
}
    98dc:	b009      	add	sp, #36	; 0x24
    98de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    98e2:	f009 bc53 	b.w	1318c <bt_init.part.0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    98e6:	a118      	add	r1, pc, #96	; (adr r1, 9948 <bt_init+0x4b8>)
    98e8:	e9d1 0100 	ldrd	r0, r1, [r1]
    98ec:	e7cc      	b.n	9888 <bt_init+0x3f8>
	net_buf_unref(rsp);
    98ee:	9801      	ldr	r0, [sp, #4]
    98f0:	f011 f990 	bl	1ac14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    98f4:	4621      	mov	r1, r4
    98f6:	f64f 4002 	movw	r0, #64514	; 0xfc02
    98fa:	aa01      	add	r2, sp, #4
    98fc:	f008 fe2a 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
    9900:	4604      	mov	r4, r0
    9902:	b108      	cbz	r0, 9908 <bt_init+0x478>
		LOG_WRN("Failed to read supported vendor commands");
    9904:	4b18      	ldr	r3, [pc, #96]	; (9968 <bt_init+0x4d8>)
    9906:	e7d4      	b.n	98b2 <bt_init+0x422>
	rp.cmds = (void *)rsp->data;
    9908:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    990a:	68c3      	ldr	r3, [r0, #12]
    990c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    9910:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    9914:	f011 f97e 	bl	1ac14 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9918:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    991c:	075b      	lsls	r3, r3, #29
    991e:	d5d1      	bpl.n	98c4 <bt_init+0x434>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    9920:	4621      	mov	r1, r4
    9922:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9926:	aa01      	add	r2, sp, #4
    9928:	f008 fe14 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
    992c:	b108      	cbz	r0, 9932 <bt_init+0x4a2>
			LOG_WRN("Failed to read supported vendor features");
    992e:	4b0f      	ldr	r3, [pc, #60]	; (996c <bt_init+0x4dc>)
    9930:	e7bf      	b.n	98b2 <bt_init+0x422>
		rp.feat = (void *)rsp->data;
    9932:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9934:	68c3      	ldr	r3, [r0, #12]
    9936:	785b      	ldrb	r3, [r3, #1]
    9938:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    993c:	f011 f96a 	bl	1ac14 <net_buf_unref>
    9940:	e7c0      	b.n	98c4 <bt_init+0x434>
    9942:	bf00      	nop
    9944:	f3af 8000 	nop.w
    9948:	02008890 	.word	0x02008890
    994c:	20008000 	.word	0x20008000
    9950:	200080d0 	.word	0x200080d0
    9954:	20008100 	.word	0x20008100
    9958:	0002ffe4 	.word	0x0002ffe4
    995c:	0002c80c 	.word	0x0002c80c
    9960:	02008810 	.word	0x02008810
    9964:	00030007 	.word	0x00030007
    9968:	0003002b 	.word	0x0003002b
    996c:	00030054 	.word	0x00030054

00009970 <_dtoa_r>:
    9970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9974:	4614      	mov	r4, r2
    9976:	b097      	sub	sp, #92	; 0x5c
    9978:	461d      	mov	r5, r3
    997a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    997c:	4683      	mov	fp, r0
    997e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9980:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9984:	b97f      	cbnz	r7, 99a6 <_dtoa_r+0x36>
    9986:	2010      	movs	r0, #16
    9988:	f01a ffd8 	bl	2493c <malloc>
    998c:	4602      	mov	r2, r0
    998e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9992:	b920      	cbnz	r0, 999e <_dtoa_r+0x2e>
    9994:	4ba2      	ldr	r3, [pc, #648]	; (9c20 <_dtoa_r+0x2b0>)
    9996:	21ea      	movs	r1, #234	; 0xea
    9998:	48a2      	ldr	r0, [pc, #648]	; (9c24 <_dtoa_r+0x2b4>)
    999a:	f01b fc83 	bl	252a4 <__assert_func>
    999e:	e9c0 7701 	strd	r7, r7, [r0, #4]
    99a2:	6007      	str	r7, [r0, #0]
    99a4:	60c7      	str	r7, [r0, #12]
    99a6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    99aa:	6819      	ldr	r1, [r3, #0]
    99ac:	b159      	cbz	r1, 99c6 <_dtoa_r+0x56>
    99ae:	685a      	ldr	r2, [r3, #4]
    99b0:	2301      	movs	r3, #1
    99b2:	4658      	mov	r0, fp
    99b4:	4093      	lsls	r3, r2
    99b6:	604a      	str	r2, [r1, #4]
    99b8:	608b      	str	r3, [r1, #8]
    99ba:	f01b fdb3 	bl	25524 <_Bfree>
    99be:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    99c2:	2200      	movs	r2, #0
    99c4:	601a      	str	r2, [r3, #0]
    99c6:	1e2b      	subs	r3, r5, #0
    99c8:	bfb7      	itett	lt
    99ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    99ce:	2300      	movge	r3, #0
    99d0:	2201      	movlt	r2, #1
    99d2:	9305      	strlt	r3, [sp, #20]
    99d4:	bfa8      	it	ge
    99d6:	6033      	strge	r3, [r6, #0]
    99d8:	9f05      	ldr	r7, [sp, #20]
    99da:	4b93      	ldr	r3, [pc, #588]	; (9c28 <_dtoa_r+0x2b8>)
    99dc:	bfb8      	it	lt
    99de:	6032      	strlt	r2, [r6, #0]
    99e0:	43bb      	bics	r3, r7
    99e2:	d119      	bne.n	9a18 <_dtoa_r+0xa8>
    99e4:	f242 730f 	movw	r3, #9999	; 0x270f
    99e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    99ea:	6013      	str	r3, [r2, #0]
    99ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
    99f0:	4323      	orrs	r3, r4
    99f2:	f000 85e0 	beq.w	a5b6 <_dtoa_r+0xc46>
    99f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    99f8:	b953      	cbnz	r3, 9a10 <_dtoa_r+0xa0>
    99fa:	4b8c      	ldr	r3, [pc, #560]	; (9c2c <_dtoa_r+0x2bc>)
    99fc:	e021      	b.n	9a42 <_dtoa_r+0xd2>
    99fe:	4b8c      	ldr	r3, [pc, #560]	; (9c30 <_dtoa_r+0x2c0>)
    9a00:	9308      	str	r3, [sp, #32]
    9a02:	3308      	adds	r3, #8
    9a04:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9a06:	6013      	str	r3, [r2, #0]
    9a08:	9808      	ldr	r0, [sp, #32]
    9a0a:	b017      	add	sp, #92	; 0x5c
    9a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a10:	4b86      	ldr	r3, [pc, #536]	; (9c2c <_dtoa_r+0x2bc>)
    9a12:	9308      	str	r3, [sp, #32]
    9a14:	3303      	adds	r3, #3
    9a16:	e7f5      	b.n	9a04 <_dtoa_r+0x94>
    9a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9a1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9a24:	2200      	movs	r2, #0
    9a26:	2300      	movs	r3, #0
    9a28:	f7fe ffba 	bl	89a0 <__aeabi_dcmpeq>
    9a2c:	4680      	mov	r8, r0
    9a2e:	b150      	cbz	r0, 9a46 <_dtoa_r+0xd6>
    9a30:	2301      	movs	r3, #1
    9a32:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9a34:	6013      	str	r3, [r2, #0]
    9a36:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9a38:	b113      	cbz	r3, 9a40 <_dtoa_r+0xd0>
    9a3a:	4b7e      	ldr	r3, [pc, #504]	; (9c34 <_dtoa_r+0x2c4>)
    9a3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9a3e:	6013      	str	r3, [r2, #0]
    9a40:	4b7d      	ldr	r3, [pc, #500]	; (9c38 <_dtoa_r+0x2c8>)
    9a42:	9308      	str	r3, [sp, #32]
    9a44:	e7e0      	b.n	9a08 <_dtoa_r+0x98>
    9a46:	ab14      	add	r3, sp, #80	; 0x50
    9a48:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9a4c:	4658      	mov	r0, fp
    9a4e:	9301      	str	r3, [sp, #4]
    9a50:	ab15      	add	r3, sp, #84	; 0x54
    9a52:	9300      	str	r3, [sp, #0]
    9a54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9a58:	f01b ffea 	bl	25a30 <__d2b>
    9a5c:	9003      	str	r0, [sp, #12]
    9a5e:	2e00      	cmp	r6, #0
    9a60:	d078      	beq.n	9b54 <_dtoa_r+0x1e4>
    9a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9a64:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9a68:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9a70:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9a78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9a7c:	4619      	mov	r1, r3
    9a7e:	2200      	movs	r2, #0
    9a80:	4b6e      	ldr	r3, [pc, #440]	; (9c3c <_dtoa_r+0x2cc>)
    9a82:	f7fe fb6d 	bl	8160 <__aeabi_dsub>
    9a86:	a360      	add	r3, pc, #384	; (adr r3, 9c08 <_dtoa_r+0x298>)
    9a88:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a8c:	f7fe fd20 	bl	84d0 <__aeabi_dmul>
    9a90:	a35f      	add	r3, pc, #380	; (adr r3, 9c10 <_dtoa_r+0x2a0>)
    9a92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a96:	f7fe fb65 	bl	8164 <__adddf3>
    9a9a:	4604      	mov	r4, r0
    9a9c:	460d      	mov	r5, r1
    9a9e:	4630      	mov	r0, r6
    9aa0:	f7fe fcac 	bl	83fc <__aeabi_i2d>
    9aa4:	a35c      	add	r3, pc, #368	; (adr r3, 9c18 <_dtoa_r+0x2a8>)
    9aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9aaa:	f7fe fd11 	bl	84d0 <__aeabi_dmul>
    9aae:	4602      	mov	r2, r0
    9ab0:	460b      	mov	r3, r1
    9ab2:	4620      	mov	r0, r4
    9ab4:	4629      	mov	r1, r5
    9ab6:	f7fe fb55 	bl	8164 <__adddf3>
    9aba:	4604      	mov	r4, r0
    9abc:	460d      	mov	r5, r1
    9abe:	f7ff facf 	bl	9060 <__aeabi_d2iz>
    9ac2:	2200      	movs	r2, #0
    9ac4:	4607      	mov	r7, r0
    9ac6:	2300      	movs	r3, #0
    9ac8:	4620      	mov	r0, r4
    9aca:	4629      	mov	r1, r5
    9acc:	f7fe ff72 	bl	89b4 <__aeabi_dcmplt>
    9ad0:	b140      	cbz	r0, 9ae4 <_dtoa_r+0x174>
    9ad2:	4638      	mov	r0, r7
    9ad4:	f7fe fc92 	bl	83fc <__aeabi_i2d>
    9ad8:	4622      	mov	r2, r4
    9ada:	462b      	mov	r3, r5
    9adc:	f7fe ff60 	bl	89a0 <__aeabi_dcmpeq>
    9ae0:	b900      	cbnz	r0, 9ae4 <_dtoa_r+0x174>
    9ae2:	3f01      	subs	r7, #1
    9ae4:	2f16      	cmp	r7, #22
    9ae6:	d854      	bhi.n	9b92 <_dtoa_r+0x222>
    9ae8:	4b55      	ldr	r3, [pc, #340]	; (9c40 <_dtoa_r+0x2d0>)
    9aea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9af2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9af6:	f7fe ff5d 	bl	89b4 <__aeabi_dcmplt>
    9afa:	2800      	cmp	r0, #0
    9afc:	d04b      	beq.n	9b96 <_dtoa_r+0x226>
    9afe:	3f01      	subs	r7, #1
    9b00:	2300      	movs	r3, #0
    9b02:	9312      	str	r3, [sp, #72]	; 0x48
    9b04:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9b06:	1b9b      	subs	r3, r3, r6
    9b08:	1e5a      	subs	r2, r3, #1
    9b0a:	bf4c      	ite	mi
    9b0c:	f1c3 0301 	rsbmi	r3, r3, #1
    9b10:	2300      	movpl	r3, #0
    9b12:	920a      	str	r2, [sp, #40]	; 0x28
    9b14:	bf45      	ittet	mi
    9b16:	9306      	strmi	r3, [sp, #24]
    9b18:	2300      	movmi	r3, #0
    9b1a:	9306      	strpl	r3, [sp, #24]
    9b1c:	930a      	strmi	r3, [sp, #40]	; 0x28
    9b1e:	2f00      	cmp	r7, #0
    9b20:	db3b      	blt.n	9b9a <_dtoa_r+0x22a>
    9b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9b24:	970f      	str	r7, [sp, #60]	; 0x3c
    9b26:	443b      	add	r3, r7
    9b28:	930a      	str	r3, [sp, #40]	; 0x28
    9b2a:	2300      	movs	r3, #0
    9b2c:	930b      	str	r3, [sp, #44]	; 0x2c
    9b2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b30:	2b09      	cmp	r3, #9
    9b32:	f200 8089 	bhi.w	9c48 <_dtoa_r+0x2d8>
    9b36:	2b05      	cmp	r3, #5
    9b38:	bfc5      	ittet	gt
    9b3a:	3b04      	subgt	r3, #4
    9b3c:	2400      	movgt	r4, #0
    9b3e:	2401      	movle	r4, #1
    9b40:	9320      	strgt	r3, [sp, #128]	; 0x80
    9b42:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b44:	3b02      	subs	r3, #2
    9b46:	2b03      	cmp	r3, #3
    9b48:	f200 8089 	bhi.w	9c5e <_dtoa_r+0x2ee>
    9b4c:	e8df f003 	tbb	[pc, r3]
    9b50:	59383a2d 	.word	0x59383a2d
    9b54:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9b58:	441e      	add	r6, r3
    9b5a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9b5e:	2b20      	cmp	r3, #32
    9b60:	bfc9      	itett	gt
    9b62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9b66:	f1c3 0320 	rsble	r3, r3, #32
    9b6a:	409f      	lslgt	r7, r3
    9b6c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9b70:	bfd8      	it	le
    9b72:	fa04 f003 	lslle.w	r0, r4, r3
    9b76:	f106 36ff 	add.w	r6, r6, #4294967295
    9b7a:	bfc4      	itt	gt
    9b7c:	fa24 f303 	lsrgt.w	r3, r4, r3
    9b80:	ea47 0003 	orrgt.w	r0, r7, r3
    9b84:	f7fe fc2a 	bl	83dc <__aeabi_ui2d>
    9b88:	2201      	movs	r2, #1
    9b8a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9b8e:	9213      	str	r2, [sp, #76]	; 0x4c
    9b90:	e774      	b.n	9a7c <_dtoa_r+0x10c>
    9b92:	2301      	movs	r3, #1
    9b94:	e7b5      	b.n	9b02 <_dtoa_r+0x192>
    9b96:	9012      	str	r0, [sp, #72]	; 0x48
    9b98:	e7b4      	b.n	9b04 <_dtoa_r+0x194>
    9b9a:	9b06      	ldr	r3, [sp, #24]
    9b9c:	1bdb      	subs	r3, r3, r7
    9b9e:	9306      	str	r3, [sp, #24]
    9ba0:	427b      	negs	r3, r7
    9ba2:	930b      	str	r3, [sp, #44]	; 0x2c
    9ba4:	2300      	movs	r3, #0
    9ba6:	930f      	str	r3, [sp, #60]	; 0x3c
    9ba8:	e7c1      	b.n	9b2e <_dtoa_r+0x1be>
    9baa:	2300      	movs	r3, #0
    9bac:	930e      	str	r3, [sp, #56]	; 0x38
    9bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	dc57      	bgt.n	9c64 <_dtoa_r+0x2f4>
    9bb4:	2301      	movs	r3, #1
    9bb6:	4699      	mov	r9, r3
    9bb8:	461a      	mov	r2, r3
    9bba:	9309      	str	r3, [sp, #36]	; 0x24
    9bbc:	9221      	str	r2, [sp, #132]	; 0x84
    9bbe:	e00c      	b.n	9bda <_dtoa_r+0x26a>
    9bc0:	2301      	movs	r3, #1
    9bc2:	e7f3      	b.n	9bac <_dtoa_r+0x23c>
    9bc4:	2300      	movs	r3, #0
    9bc6:	930e      	str	r3, [sp, #56]	; 0x38
    9bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9bca:	18fb      	adds	r3, r7, r3
    9bcc:	f103 0901 	add.w	r9, r3, #1
    9bd0:	9309      	str	r3, [sp, #36]	; 0x24
    9bd2:	464b      	mov	r3, r9
    9bd4:	2b01      	cmp	r3, #1
    9bd6:	bfb8      	it	lt
    9bd8:	2301      	movlt	r3, #1
    9bda:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9bde:	2100      	movs	r1, #0
    9be0:	2204      	movs	r2, #4
    9be2:	f102 0514 	add.w	r5, r2, #20
    9be6:	429d      	cmp	r5, r3
    9be8:	d940      	bls.n	9c6c <_dtoa_r+0x2fc>
    9bea:	6041      	str	r1, [r0, #4]
    9bec:	4658      	mov	r0, fp
    9bee:	f01b fc59 	bl	254a4 <_Balloc>
    9bf2:	9008      	str	r0, [sp, #32]
    9bf4:	2800      	cmp	r0, #0
    9bf6:	d13c      	bne.n	9c72 <_dtoa_r+0x302>
    9bf8:	4b12      	ldr	r3, [pc, #72]	; (9c44 <_dtoa_r+0x2d4>)
    9bfa:	4602      	mov	r2, r0
    9bfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9c00:	e6ca      	b.n	9998 <_dtoa_r+0x28>
    9c02:	2301      	movs	r3, #1
    9c04:	e7df      	b.n	9bc6 <_dtoa_r+0x256>
    9c06:	bf00      	nop
    9c08:	636f4361 	.word	0x636f4361
    9c0c:	3fd287a7 	.word	0x3fd287a7
    9c10:	8b60c8b3 	.word	0x8b60c8b3
    9c14:	3fc68a28 	.word	0x3fc68a28
    9c18:	509f79fb 	.word	0x509f79fb
    9c1c:	3fd34413 	.word	0x3fd34413
    9c20:	000336b9 	.word	0x000336b9
    9c24:	000336d0 	.word	0x000336d0
    9c28:	7ff00000 	.word	0x7ff00000
    9c2c:	000336b5 	.word	0x000336b5
    9c30:	000336ac 	.word	0x000336ac
    9c34:	000334e1 	.word	0x000334e1
    9c38:	000334e0 	.word	0x000334e0
    9c3c:	3ff80000 	.word	0x3ff80000
    9c40:	0002ca80 	.word	0x0002ca80
    9c44:	00033744 	.word	0x00033744
    9c48:	2401      	movs	r4, #1
    9c4a:	2300      	movs	r3, #0
    9c4c:	940e      	str	r4, [sp, #56]	; 0x38
    9c4e:	9320      	str	r3, [sp, #128]	; 0x80
    9c50:	f04f 33ff 	mov.w	r3, #4294967295
    9c54:	2200      	movs	r2, #0
    9c56:	4699      	mov	r9, r3
    9c58:	9309      	str	r3, [sp, #36]	; 0x24
    9c5a:	2312      	movs	r3, #18
    9c5c:	e7ae      	b.n	9bbc <_dtoa_r+0x24c>
    9c5e:	2301      	movs	r3, #1
    9c60:	930e      	str	r3, [sp, #56]	; 0x38
    9c62:	e7f5      	b.n	9c50 <_dtoa_r+0x2e0>
    9c64:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c66:	4699      	mov	r9, r3
    9c68:	9309      	str	r3, [sp, #36]	; 0x24
    9c6a:	e7b6      	b.n	9bda <_dtoa_r+0x26a>
    9c6c:	3101      	adds	r1, #1
    9c6e:	0052      	lsls	r2, r2, #1
    9c70:	e7b7      	b.n	9be2 <_dtoa_r+0x272>
    9c72:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9c76:	f1b9 0f0e 	cmp.w	r9, #14
    9c7a:	9a08      	ldr	r2, [sp, #32]
    9c7c:	601a      	str	r2, [r3, #0]
    9c7e:	d86f      	bhi.n	9d60 <_dtoa_r+0x3f0>
    9c80:	2c00      	cmp	r4, #0
    9c82:	d06d      	beq.n	9d60 <_dtoa_r+0x3f0>
    9c84:	2f00      	cmp	r7, #0
    9c86:	dd36      	ble.n	9cf6 <_dtoa_r+0x386>
    9c88:	f007 020f 	and.w	r2, r7, #15
    9c8c:	4ba0      	ldr	r3, [pc, #640]	; (9f10 <_dtoa_r+0x5a0>)
    9c8e:	05f8      	lsls	r0, r7, #23
    9c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9c94:	e9d3 3400 	ldrd	r3, r4, [r3]
    9c98:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9c9c:	ea4f 1427 	mov.w	r4, r7, asr #4
    9ca0:	d517      	bpl.n	9cd2 <_dtoa_r+0x362>
    9ca2:	4b9c      	ldr	r3, [pc, #624]	; (9f14 <_dtoa_r+0x5a4>)
    9ca4:	f004 040f 	and.w	r4, r4, #15
    9ca8:	f04f 0803 	mov.w	r8, #3
    9cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9cb4:	f7fe fd36 	bl	8724 <__aeabi_ddiv>
    9cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9cbc:	4d95      	ldr	r5, [pc, #596]	; (9f14 <_dtoa_r+0x5a4>)
    9cbe:	b95c      	cbnz	r4, 9cd8 <_dtoa_r+0x368>
    9cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9cc8:	f7fe fd2c 	bl	8724 <__aeabi_ddiv>
    9ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9cd0:	e02b      	b.n	9d2a <_dtoa_r+0x3ba>
    9cd2:	f04f 0802 	mov.w	r8, #2
    9cd6:	e7f1      	b.n	9cbc <_dtoa_r+0x34c>
    9cd8:	07e1      	lsls	r1, r4, #31
    9cda:	d509      	bpl.n	9cf0 <_dtoa_r+0x380>
    9cdc:	f108 0801 	add.w	r8, r8, #1
    9ce0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9ce4:	e9d5 2300 	ldrd	r2, r3, [r5]
    9ce8:	f7fe fbf2 	bl	84d0 <__aeabi_dmul>
    9cec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9cf0:	1064      	asrs	r4, r4, #1
    9cf2:	3508      	adds	r5, #8
    9cf4:	e7e3      	b.n	9cbe <_dtoa_r+0x34e>
    9cf6:	f000 8107 	beq.w	9f08 <_dtoa_r+0x598>
    9cfa:	427c      	negs	r4, r7
    9cfc:	4b84      	ldr	r3, [pc, #528]	; (9f10 <_dtoa_r+0x5a0>)
    9cfe:	4d85      	ldr	r5, [pc, #532]	; (9f14 <_dtoa_r+0x5a4>)
    9d00:	f04f 0802 	mov.w	r8, #2
    9d04:	f004 020f 	and.w	r2, r4, #15
    9d08:	1124      	asrs	r4, r4, #4
    9d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d12:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d16:	f7fe fbdb 	bl	84d0 <__aeabi_dmul>
    9d1a:	2300      	movs	r3, #0
    9d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9d20:	2c00      	cmp	r4, #0
    9d22:	f040 80e5 	bne.w	9ef0 <_dtoa_r+0x580>
    9d26:	2b00      	cmp	r3, #0
    9d28:	d1d0      	bne.n	9ccc <_dtoa_r+0x35c>
    9d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9d2c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    9d30:	2b00      	cmp	r3, #0
    9d32:	f000 814c 	beq.w	9fce <_dtoa_r+0x65e>
    9d36:	2200      	movs	r2, #0
    9d38:	4b77      	ldr	r3, [pc, #476]	; (9f18 <_dtoa_r+0x5a8>)
    9d3a:	4620      	mov	r0, r4
    9d3c:	4629      	mov	r1, r5
    9d3e:	f7fe fe39 	bl	89b4 <__aeabi_dcmplt>
    9d42:	2800      	cmp	r0, #0
    9d44:	f000 8143 	beq.w	9fce <_dtoa_r+0x65e>
    9d48:	f1b9 0f00 	cmp.w	r9, #0
    9d4c:	f000 813f 	beq.w	9fce <_dtoa_r+0x65e>
    9d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d52:	2b00      	cmp	r3, #0
    9d54:	f300 80e4 	bgt.w	9f20 <_dtoa_r+0x5b0>
    9d58:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    9d5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    9d60:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9d62:	2b00      	cmp	r3, #0
    9d64:	db02      	blt.n	9d6c <_dtoa_r+0x3fc>
    9d66:	2f0e      	cmp	r7, #14
    9d68:	f340 8242 	ble.w	a1f0 <_dtoa_r+0x880>
    9d6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9d6e:	2a00      	cmp	r2, #0
    9d70:	f040 8267 	bne.w	a242 <_dtoa_r+0x8d2>
    9d74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9d76:	2500      	movs	r5, #0
    9d78:	f8dd 8018 	ldr.w	r8, [sp, #24]
    9d7c:	f1b8 0f00 	cmp.w	r8, #0
    9d80:	d00d      	beq.n	9d9e <_dtoa_r+0x42e>
    9d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9d84:	2b00      	cmp	r3, #0
    9d86:	dd0a      	ble.n	9d9e <_dtoa_r+0x42e>
    9d88:	4543      	cmp	r3, r8
    9d8a:	9a06      	ldr	r2, [sp, #24]
    9d8c:	bfa8      	it	ge
    9d8e:	4643      	movge	r3, r8
    9d90:	1ad2      	subs	r2, r2, r3
    9d92:	eba8 0803 	sub.w	r8, r8, r3
    9d96:	9206      	str	r2, [sp, #24]
    9d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9d9a:	1ad3      	subs	r3, r2, r3
    9d9c:	930a      	str	r3, [sp, #40]	; 0x28
    9d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9da0:	b30b      	cbz	r3, 9de6 <_dtoa_r+0x476>
    9da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9da4:	2b00      	cmp	r3, #0
    9da6:	f000 82a6 	beq.w	a2f6 <_dtoa_r+0x986>
    9daa:	2c00      	cmp	r4, #0
    9dac:	f000 82a1 	beq.w	a2f2 <_dtoa_r+0x982>
    9db0:	4629      	mov	r1, r5
    9db2:	4622      	mov	r2, r4
    9db4:	4658      	mov	r0, fp
    9db6:	f01b fcdf 	bl	25778 <__pow5mult>
    9dba:	9a03      	ldr	r2, [sp, #12]
    9dbc:	4601      	mov	r1, r0
    9dbe:	4605      	mov	r5, r0
    9dc0:	4658      	mov	r0, fp
    9dc2:	f01b fc2f 	bl	25624 <__multiply>
    9dc6:	9903      	ldr	r1, [sp, #12]
    9dc8:	4606      	mov	r6, r0
    9dca:	4658      	mov	r0, fp
    9dcc:	f01b fbaa 	bl	25524 <_Bfree>
    9dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dd2:	1b1b      	subs	r3, r3, r4
    9dd4:	930b      	str	r3, [sp, #44]	; 0x2c
    9dd6:	f000 8291 	beq.w	a2fc <_dtoa_r+0x98c>
    9dda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9ddc:	4631      	mov	r1, r6
    9dde:	4658      	mov	r0, fp
    9de0:	f01b fcca 	bl	25778 <__pow5mult>
    9de4:	9003      	str	r0, [sp, #12]
    9de6:	2101      	movs	r1, #1
    9de8:	4658      	mov	r0, fp
    9dea:	f01b fc05 	bl	255f8 <__i2b>
    9dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9df0:	4604      	mov	r4, r0
    9df2:	2b00      	cmp	r3, #0
    9df4:	f000 8284 	beq.w	a300 <_dtoa_r+0x990>
    9df8:	461a      	mov	r2, r3
    9dfa:	4601      	mov	r1, r0
    9dfc:	4658      	mov	r0, fp
    9dfe:	f01b fcbb 	bl	25778 <__pow5mult>
    9e02:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e04:	4604      	mov	r4, r0
    9e06:	2b01      	cmp	r3, #1
    9e08:	dc03      	bgt.n	9e12 <_dtoa_r+0x4a2>
    9e0a:	9b04      	ldr	r3, [sp, #16]
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	f000 827c 	beq.w	a30a <_dtoa_r+0x99a>
    9e12:	2600      	movs	r6, #0
    9e14:	6923      	ldr	r3, [r4, #16]
    9e16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9e1a:	6918      	ldr	r0, [r3, #16]
    9e1c:	f021 ffe3 	bl	2bde6 <__hi0bits>
    9e20:	f1c0 0020 	rsb	r0, r0, #32
    9e24:	960f      	str	r6, [sp, #60]	; 0x3c
    9e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e28:	4418      	add	r0, r3
    9e2a:	f010 001f 	ands.w	r0, r0, #31
    9e2e:	f000 8291 	beq.w	a354 <_dtoa_r+0x9e4>
    9e32:	f1c0 0320 	rsb	r3, r0, #32
    9e36:	2b04      	cmp	r3, #4
    9e38:	f340 8281 	ble.w	a33e <_dtoa_r+0x9ce>
    9e3c:	f1c0 001c 	rsb	r0, r0, #28
    9e40:	9b06      	ldr	r3, [sp, #24]
    9e42:	4403      	add	r3, r0
    9e44:	4480      	add	r8, r0
    9e46:	9306      	str	r3, [sp, #24]
    9e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e4a:	4403      	add	r3, r0
    9e4c:	930a      	str	r3, [sp, #40]	; 0x28
    9e4e:	9b06      	ldr	r3, [sp, #24]
    9e50:	2b00      	cmp	r3, #0
    9e52:	dd05      	ble.n	9e60 <_dtoa_r+0x4f0>
    9e54:	461a      	mov	r2, r3
    9e56:	9903      	ldr	r1, [sp, #12]
    9e58:	4658      	mov	r0, fp
    9e5a:	f01b fce7 	bl	2582c <__lshift>
    9e5e:	9003      	str	r0, [sp, #12]
    9e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e62:	2b00      	cmp	r3, #0
    9e64:	dd05      	ble.n	9e72 <_dtoa_r+0x502>
    9e66:	4621      	mov	r1, r4
    9e68:	461a      	mov	r2, r3
    9e6a:	4658      	mov	r0, fp
    9e6c:	f01b fcde 	bl	2582c <__lshift>
    9e70:	4604      	mov	r4, r0
    9e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9e74:	2b00      	cmp	r3, #0
    9e76:	f000 8276 	beq.w	a366 <_dtoa_r+0x9f6>
    9e7a:	4621      	mov	r1, r4
    9e7c:	9803      	ldr	r0, [sp, #12]
    9e7e:	f022 f801 	bl	2be84 <__mcmp>
    9e82:	2800      	cmp	r0, #0
    9e84:	f280 826f 	bge.w	a366 <_dtoa_r+0x9f6>
    9e88:	2300      	movs	r3, #0
    9e8a:	220a      	movs	r2, #10
    9e8c:	9903      	ldr	r1, [sp, #12]
    9e8e:	4658      	mov	r0, fp
    9e90:	f01b fb6a 	bl	25568 <__multadd>
    9e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e96:	1e7e      	subs	r6, r7, #1
    9e98:	9003      	str	r0, [sp, #12]
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	f000 825c 	beq.w	a358 <_dtoa_r+0x9e8>
    9ea0:	2300      	movs	r3, #0
    9ea2:	4629      	mov	r1, r5
    9ea4:	220a      	movs	r2, #10
    9ea6:	4658      	mov	r0, fp
    9ea8:	f01b fb5e 	bl	25568 <__multadd>
    9eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9eae:	4605      	mov	r5, r0
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	dc03      	bgt.n	9ebc <_dtoa_r+0x54c>
    9eb4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9eb6:	2b02      	cmp	r3, #2
    9eb8:	f300 825e 	bgt.w	a378 <_dtoa_r+0xa08>
    9ebc:	f1b8 0f00 	cmp.w	r8, #0
    9ec0:	dd05      	ble.n	9ece <_dtoa_r+0x55e>
    9ec2:	4629      	mov	r1, r5
    9ec4:	4642      	mov	r2, r8
    9ec6:	4658      	mov	r0, fp
    9ec8:	f01b fcb0 	bl	2582c <__lshift>
    9ecc:	4605      	mov	r5, r0
    9ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	f000 82d0 	beq.w	a476 <_dtoa_r+0xb06>
    9ed6:	6869      	ldr	r1, [r5, #4]
    9ed8:	4658      	mov	r0, fp
    9eda:	f01b fae3 	bl	254a4 <_Balloc>
    9ede:	4607      	mov	r7, r0
    9ee0:	2800      	cmp	r0, #0
    9ee2:	f040 827f 	bne.w	a3e4 <_dtoa_r+0xa74>
    9ee6:	4b0d      	ldr	r3, [pc, #52]	; (9f1c <_dtoa_r+0x5ac>)
    9ee8:	4602      	mov	r2, r0
    9eea:	f240 21ea 	movw	r1, #746	; 0x2ea
    9eee:	e553      	b.n	9998 <_dtoa_r+0x28>
    9ef0:	07e2      	lsls	r2, r4, #31
    9ef2:	d506      	bpl.n	9f02 <_dtoa_r+0x592>
    9ef4:	f108 0801 	add.w	r8, r8, #1
    9ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
    9efc:	f7fe fae8 	bl	84d0 <__aeabi_dmul>
    9f00:	2301      	movs	r3, #1
    9f02:	1064      	asrs	r4, r4, #1
    9f04:	3508      	adds	r5, #8
    9f06:	e70b      	b.n	9d20 <_dtoa_r+0x3b0>
    9f08:	f04f 0802 	mov.w	r8, #2
    9f0c:	e70d      	b.n	9d2a <_dtoa_r+0x3ba>
    9f0e:	bf00      	nop
    9f10:	0002ca80 	.word	0x0002ca80
    9f14:	0002ca58 	.word	0x0002ca58
    9f18:	3ff00000 	.word	0x3ff00000
    9f1c:	00033744 	.word	0x00033744
    9f20:	4620      	mov	r0, r4
    9f22:	2200      	movs	r2, #0
    9f24:	4bac      	ldr	r3, [pc, #688]	; (a1d8 <_dtoa_r+0x868>)
    9f26:	4629      	mov	r1, r5
    9f28:	f7fe fad2 	bl	84d0 <__aeabi_dmul>
    9f2c:	1e7e      	subs	r6, r7, #1
    9f2e:	f108 0801 	add.w	r8, r8, #1
    9f32:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9f34:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9f38:	4640      	mov	r0, r8
    9f3a:	f7fe fa5f 	bl	83fc <__aeabi_i2d>
    9f3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9f42:	f7fe fac5 	bl	84d0 <__aeabi_dmul>
    9f46:	4ba5      	ldr	r3, [pc, #660]	; (a1dc <_dtoa_r+0x86c>)
    9f48:	2200      	movs	r2, #0
    9f4a:	f7fe f90b 	bl	8164 <__adddf3>
    9f4e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    9f52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9f56:	9311      	str	r3, [sp, #68]	; 0x44
    9f58:	2c00      	cmp	r4, #0
    9f5a:	d13b      	bne.n	9fd4 <_dtoa_r+0x664>
    9f5c:	2200      	movs	r2, #0
    9f5e:	4ba0      	ldr	r3, [pc, #640]	; (a1e0 <_dtoa_r+0x870>)
    9f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9f64:	f7fe f8fc 	bl	8160 <__aeabi_dsub>
    9f68:	4602      	mov	r2, r0
    9f6a:	460b      	mov	r3, r1
    9f6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9f70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9f74:	f7fe fd3c 	bl	89f0 <__aeabi_dcmpgt>
    9f78:	2800      	cmp	r0, #0
    9f7a:	f040 8157 	bne.w	a22c <_dtoa_r+0x8bc>
    9f7e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    9f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    9f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9f8a:	f7fe fd13 	bl	89b4 <__aeabi_dcmplt>
    9f8e:	2800      	cmp	r0, #0
    9f90:	f43f aee2 	beq.w	9d58 <_dtoa_r+0x3e8>
    9f94:	2400      	movs	r4, #0
    9f96:	4625      	mov	r5, r4
    9f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f9a:	f8dd a020 	ldr.w	sl, [sp, #32]
    9f9e:	43de      	mvns	r6, r3
    9fa0:	f04f 0800 	mov.w	r8, #0
    9fa4:	4621      	mov	r1, r4
    9fa6:	4658      	mov	r0, fp
    9fa8:	f01b fabc 	bl	25524 <_Bfree>
    9fac:	2d00      	cmp	r5, #0
    9fae:	f000 80a9 	beq.w	a104 <_dtoa_r+0x794>
    9fb2:	f1b8 0f00 	cmp.w	r8, #0
    9fb6:	d005      	beq.n	9fc4 <_dtoa_r+0x654>
    9fb8:	45a8      	cmp	r8, r5
    9fba:	d003      	beq.n	9fc4 <_dtoa_r+0x654>
    9fbc:	4641      	mov	r1, r8
    9fbe:	4658      	mov	r0, fp
    9fc0:	f01b fab0 	bl	25524 <_Bfree>
    9fc4:	4629      	mov	r1, r5
    9fc6:	4658      	mov	r0, fp
    9fc8:	f01b faac 	bl	25524 <_Bfree>
    9fcc:	e09a      	b.n	a104 <_dtoa_r+0x794>
    9fce:	463e      	mov	r6, r7
    9fd0:	464c      	mov	r4, r9
    9fd2:	e7b1      	b.n	9f38 <_dtoa_r+0x5c8>
    9fd4:	4b83      	ldr	r3, [pc, #524]	; (a1e4 <_dtoa_r+0x874>)
    9fd6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    9fda:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    9fde:	9b08      	ldr	r3, [sp, #32]
    9fe0:	441c      	add	r4, r3
    9fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d04a      	beq.n	a07e <_dtoa_r+0x70e>
    9fe8:	4602      	mov	r2, r0
    9fea:	460b      	mov	r3, r1
    9fec:	2000      	movs	r0, #0
    9fee:	497e      	ldr	r1, [pc, #504]	; (a1e8 <_dtoa_r+0x878>)
    9ff0:	f7fe fb98 	bl	8724 <__aeabi_ddiv>
    9ff4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9ff8:	f7fe f8b2 	bl	8160 <__aeabi_dsub>
    9ffc:	f8dd a020 	ldr.w	sl, [sp, #32]
    a000:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a008:	f7ff f82a 	bl	9060 <__aeabi_d2iz>
    a00c:	4605      	mov	r5, r0
    a00e:	f7fe f9f5 	bl	83fc <__aeabi_i2d>
    a012:	4602      	mov	r2, r0
    a014:	3530      	adds	r5, #48	; 0x30
    a016:	460b      	mov	r3, r1
    a018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a01c:	f7fe f8a0 	bl	8160 <__aeabi_dsub>
    a020:	f80a 5b01 	strb.w	r5, [sl], #1
    a024:	4602      	mov	r2, r0
    a026:	460b      	mov	r3, r1
    a028:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a02c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a030:	f7fe fcde 	bl	89f0 <__aeabi_dcmpgt>
    a034:	2800      	cmp	r0, #0
    a036:	d165      	bne.n	a104 <_dtoa_r+0x794>
    a038:	2000      	movs	r0, #0
    a03a:	496c      	ldr	r1, [pc, #432]	; (a1ec <_dtoa_r+0x87c>)
    a03c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a040:	f7fe f88e 	bl	8160 <__aeabi_dsub>
    a044:	4602      	mov	r2, r0
    a046:	460b      	mov	r3, r1
    a048:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a04c:	f7fe fcd0 	bl	89f0 <__aeabi_dcmpgt>
    a050:	2800      	cmp	r0, #0
    a052:	f040 810d 	bne.w	a270 <_dtoa_r+0x900>
    a056:	45a2      	cmp	sl, r4
    a058:	f000 80ea 	beq.w	a230 <_dtoa_r+0x8c0>
    a05c:	2200      	movs	r2, #0
    a05e:	4b5e      	ldr	r3, [pc, #376]	; (a1d8 <_dtoa_r+0x868>)
    a060:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a064:	f7fe fa34 	bl	84d0 <__aeabi_dmul>
    a068:	2200      	movs	r2, #0
    a06a:	4b5b      	ldr	r3, [pc, #364]	; (a1d8 <_dtoa_r+0x868>)
    a06c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a074:	f7fe fa2c 	bl	84d0 <__aeabi_dmul>
    a078:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a07c:	e7c2      	b.n	a004 <_dtoa_r+0x694>
    a07e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a082:	f7fe fa25 	bl	84d0 <__aeabi_dmul>
    a086:	46a0      	mov	r8, r4
    a088:	f8dd a020 	ldr.w	sl, [sp, #32]
    a08c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a090:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a094:	f7fe ffe4 	bl	9060 <__aeabi_d2iz>
    a098:	4605      	mov	r5, r0
    a09a:	f7fe f9af 	bl	83fc <__aeabi_i2d>
    a09e:	4602      	mov	r2, r0
    a0a0:	3530      	adds	r5, #48	; 0x30
    a0a2:	460b      	mov	r3, r1
    a0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a0a8:	f7fe f85a 	bl	8160 <__aeabi_dsub>
    a0ac:	f80a 5b01 	strb.w	r5, [sl], #1
    a0b0:	4602      	mov	r2, r0
    a0b2:	460b      	mov	r3, r1
    a0b4:	45a2      	cmp	sl, r4
    a0b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a0ba:	f04f 0200 	mov.w	r2, #0
    a0be:	d123      	bne.n	a108 <_dtoa_r+0x798>
    a0c0:	4b49      	ldr	r3, [pc, #292]	; (a1e8 <_dtoa_r+0x878>)
    a0c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a0c6:	f7fe f84d 	bl	8164 <__adddf3>
    a0ca:	4602      	mov	r2, r0
    a0cc:	460b      	mov	r3, r1
    a0ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a0d2:	f7fe fc8d 	bl	89f0 <__aeabi_dcmpgt>
    a0d6:	2800      	cmp	r0, #0
    a0d8:	f040 80ca 	bne.w	a270 <_dtoa_r+0x900>
    a0dc:	2000      	movs	r0, #0
    a0de:	4942      	ldr	r1, [pc, #264]	; (a1e8 <_dtoa_r+0x878>)
    a0e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a0e4:	f7fe f83c 	bl	8160 <__aeabi_dsub>
    a0e8:	4602      	mov	r2, r0
    a0ea:	460b      	mov	r3, r1
    a0ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a0f0:	f7fe fc60 	bl	89b4 <__aeabi_dcmplt>
    a0f4:	b170      	cbz	r0, a114 <_dtoa_r+0x7a4>
    a0f6:	46c2      	mov	sl, r8
    a0f8:	f108 38ff 	add.w	r8, r8, #4294967295
    a0fc:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a100:	2b30      	cmp	r3, #48	; 0x30
    a102:	d0f8      	beq.n	a0f6 <_dtoa_r+0x786>
    a104:	4637      	mov	r7, r6
    a106:	e055      	b.n	a1b4 <_dtoa_r+0x844>
    a108:	4b33      	ldr	r3, [pc, #204]	; (a1d8 <_dtoa_r+0x868>)
    a10a:	f7fe f9e1 	bl	84d0 <__aeabi_dmul>
    a10e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a112:	e7bd      	b.n	a090 <_dtoa_r+0x720>
    a114:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a118:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a11c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a11e:	2b00      	cmp	r3, #0
    a120:	f6ff ae28 	blt.w	9d74 <_dtoa_r+0x404>
    a124:	2f0e      	cmp	r7, #14
    a126:	f73f ae25 	bgt.w	9d74 <_dtoa_r+0x404>
    a12a:	4b2e      	ldr	r3, [pc, #184]	; (a1e4 <_dtoa_r+0x874>)
    a12c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a130:	e9d3 3400 	ldrd	r3, r4, [r3]
    a134:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a138:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a13a:	2b00      	cmp	r3, #0
    a13c:	da02      	bge.n	a144 <_dtoa_r+0x7d4>
    a13e:	f1b9 0f00 	cmp.w	r9, #0
    a142:	d064      	beq.n	a20e <_dtoa_r+0x89e>
    a144:	f8dd a020 	ldr.w	sl, [sp, #32]
    a148:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a14c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a150:	4620      	mov	r0, r4
    a152:	4629      	mov	r1, r5
    a154:	f7fe fae6 	bl	8724 <__aeabi_ddiv>
    a158:	f7fe ff82 	bl	9060 <__aeabi_d2iz>
    a15c:	4606      	mov	r6, r0
    a15e:	f7fe f94d 	bl	83fc <__aeabi_i2d>
    a162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a166:	f7fe f9b3 	bl	84d0 <__aeabi_dmul>
    a16a:	4602      	mov	r2, r0
    a16c:	4620      	mov	r0, r4
    a16e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a172:	460b      	mov	r3, r1
    a174:	4629      	mov	r1, r5
    a176:	f7fd fff3 	bl	8160 <__aeabi_dsub>
    a17a:	f80a 4b01 	strb.w	r4, [sl], #1
    a17e:	9c08      	ldr	r4, [sp, #32]
    a180:	4602      	mov	r2, r0
    a182:	460b      	mov	r3, r1
    a184:	ebaa 0404 	sub.w	r4, sl, r4
    a188:	45a1      	cmp	r9, r4
    a18a:	f040 8082 	bne.w	a292 <_dtoa_r+0x922>
    a18e:	f7fd ffe9 	bl	8164 <__adddf3>
    a192:	4604      	mov	r4, r0
    a194:	460d      	mov	r5, r1
    a196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a19a:	f7fe fc29 	bl	89f0 <__aeabi_dcmpgt>
    a19e:	2800      	cmp	r0, #0
    a1a0:	d165      	bne.n	a26e <_dtoa_r+0x8fe>
    a1a2:	4620      	mov	r0, r4
    a1a4:	4629      	mov	r1, r5
    a1a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a1aa:	f7fe fbf9 	bl	89a0 <__aeabi_dcmpeq>
    a1ae:	b108      	cbz	r0, a1b4 <_dtoa_r+0x844>
    a1b0:	07f3      	lsls	r3, r6, #31
    a1b2:	d45c      	bmi.n	a26e <_dtoa_r+0x8fe>
    a1b4:	9903      	ldr	r1, [sp, #12]
    a1b6:	4658      	mov	r0, fp
    a1b8:	f01b f9b4 	bl	25524 <_Bfree>
    a1bc:	2300      	movs	r3, #0
    a1be:	3701      	adds	r7, #1
    a1c0:	f88a 3000 	strb.w	r3, [sl]
    a1c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a1c6:	601f      	str	r7, [r3, #0]
    a1c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	f43f ac1c 	beq.w	9a08 <_dtoa_r+0x98>
    a1d0:	f8c3 a000 	str.w	sl, [r3]
    a1d4:	e418      	b.n	9a08 <_dtoa_r+0x98>
    a1d6:	bf00      	nop
    a1d8:	40240000 	.word	0x40240000
    a1dc:	401c0000 	.word	0x401c0000
    a1e0:	40140000 	.word	0x40140000
    a1e4:	0002ca80 	.word	0x0002ca80
    a1e8:	3fe00000 	.word	0x3fe00000
    a1ec:	3ff00000 	.word	0x3ff00000
    a1f0:	4ba2      	ldr	r3, [pc, #648]	; (a47c <_dtoa_r+0xb0c>)
    a1f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a1f6:	e9d3 3400 	ldrd	r3, r4, [r3]
    a1fa:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a200:	2b00      	cmp	r3, #0
    a202:	da9f      	bge.n	a144 <_dtoa_r+0x7d4>
    a204:	f1b9 0f00 	cmp.w	r9, #0
    a208:	dc9c      	bgt.n	a144 <_dtoa_r+0x7d4>
    a20a:	f47f aec3 	bne.w	9f94 <_dtoa_r+0x624>
    a20e:	2200      	movs	r2, #0
    a210:	4b9b      	ldr	r3, [pc, #620]	; (a480 <_dtoa_r+0xb10>)
    a212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a216:	f7fe f95b 	bl	84d0 <__aeabi_dmul>
    a21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a21e:	f7fe fbdd 	bl	89dc <__aeabi_dcmpge>
    a222:	4604      	mov	r4, r0
    a224:	2800      	cmp	r0, #0
    a226:	f47f aeb5 	bne.w	9f94 <_dtoa_r+0x624>
    a22a:	463e      	mov	r6, r7
    a22c:	4625      	mov	r5, r4
    a22e:	e0b4      	b.n	a39a <_dtoa_r+0xa2a>
    a230:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a234:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a238:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a23a:	2b00      	cmp	r3, #0
    a23c:	db01      	blt.n	a242 <_dtoa_r+0x8d2>
    a23e:	2f0e      	cmp	r7, #14
    a240:	ddd6      	ble.n	a1f0 <_dtoa_r+0x880>
    a242:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a244:	2a01      	cmp	r2, #1
    a246:	dc36      	bgt.n	a2b6 <_dtoa_r+0x946>
    a248:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a24a:	b382      	cbz	r2, a2ae <_dtoa_r+0x93e>
    a24c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a250:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a252:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a256:	9a06      	ldr	r2, [sp, #24]
    a258:	2101      	movs	r1, #1
    a25a:	4658      	mov	r0, fp
    a25c:	441a      	add	r2, r3
    a25e:	9206      	str	r2, [sp, #24]
    a260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a262:	441a      	add	r2, r3
    a264:	920a      	str	r2, [sp, #40]	; 0x28
    a266:	f01b f9c7 	bl	255f8 <__i2b>
    a26a:	4605      	mov	r5, r0
    a26c:	e586      	b.n	9d7c <_dtoa_r+0x40c>
    a26e:	463e      	mov	r6, r7
    a270:	4653      	mov	r3, sl
    a272:	469a      	mov	sl, r3
    a274:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a278:	2a39      	cmp	r2, #57	; 0x39
    a27a:	d106      	bne.n	a28a <_dtoa_r+0x91a>
    a27c:	9a08      	ldr	r2, [sp, #32]
    a27e:	429a      	cmp	r2, r3
    a280:	d1f7      	bne.n	a272 <_dtoa_r+0x902>
    a282:	2230      	movs	r2, #48	; 0x30
    a284:	9908      	ldr	r1, [sp, #32]
    a286:	3601      	adds	r6, #1
    a288:	700a      	strb	r2, [r1, #0]
    a28a:	781a      	ldrb	r2, [r3, #0]
    a28c:	3201      	adds	r2, #1
    a28e:	701a      	strb	r2, [r3, #0]
    a290:	e738      	b.n	a104 <_dtoa_r+0x794>
    a292:	2200      	movs	r2, #0
    a294:	4b7b      	ldr	r3, [pc, #492]	; (a484 <_dtoa_r+0xb14>)
    a296:	f7fe f91b 	bl	84d0 <__aeabi_dmul>
    a29a:	2200      	movs	r2, #0
    a29c:	2300      	movs	r3, #0
    a29e:	4604      	mov	r4, r0
    a2a0:	460d      	mov	r5, r1
    a2a2:	f7fe fb7d 	bl	89a0 <__aeabi_dcmpeq>
    a2a6:	2800      	cmp	r0, #0
    a2a8:	f43f af50 	beq.w	a14c <_dtoa_r+0x7dc>
    a2ac:	e782      	b.n	a1b4 <_dtoa_r+0x844>
    a2ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a2b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a2b4:	e7cc      	b.n	a250 <_dtoa_r+0x8e0>
    a2b6:	f109 34ff 	add.w	r4, r9, #4294967295
    a2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a2bc:	42a3      	cmp	r3, r4
    a2be:	db08      	blt.n	a2d2 <_dtoa_r+0x962>
    a2c0:	f1b9 0f00 	cmp.w	r9, #0
    a2c4:	eba3 0404 	sub.w	r4, r3, r4
    a2c8:	db0e      	blt.n	a2e8 <_dtoa_r+0x978>
    a2ca:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a2ce:	464b      	mov	r3, r9
    a2d0:	e7c1      	b.n	a256 <_dtoa_r+0x8e6>
    a2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a2d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a2d6:	1ae3      	subs	r3, r4, r3
    a2d8:	940b      	str	r4, [sp, #44]	; 0x2c
    a2da:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a2de:	2400      	movs	r4, #0
    a2e0:	441a      	add	r2, r3
    a2e2:	464b      	mov	r3, r9
    a2e4:	920f      	str	r2, [sp, #60]	; 0x3c
    a2e6:	e7b6      	b.n	a256 <_dtoa_r+0x8e6>
    a2e8:	9b06      	ldr	r3, [sp, #24]
    a2ea:	eba3 0809 	sub.w	r8, r3, r9
    a2ee:	2300      	movs	r3, #0
    a2f0:	e7b1      	b.n	a256 <_dtoa_r+0x8e6>
    a2f2:	9e03      	ldr	r6, [sp, #12]
    a2f4:	e571      	b.n	9dda <_dtoa_r+0x46a>
    a2f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a2f8:	9903      	ldr	r1, [sp, #12]
    a2fa:	e570      	b.n	9dde <_dtoa_r+0x46e>
    a2fc:	9603      	str	r6, [sp, #12]
    a2fe:	e572      	b.n	9de6 <_dtoa_r+0x476>
    a300:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a302:	2b01      	cmp	r3, #1
    a304:	dc17      	bgt.n	a336 <_dtoa_r+0x9c6>
    a306:	9b04      	ldr	r3, [sp, #16]
    a308:	b9ab      	cbnz	r3, a336 <_dtoa_r+0x9c6>
    a30a:	9b05      	ldr	r3, [sp, #20]
    a30c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a310:	b99b      	cbnz	r3, a33a <_dtoa_r+0x9ca>
    a312:	9b05      	ldr	r3, [sp, #20]
    a314:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a318:	0d36      	lsrs	r6, r6, #20
    a31a:	0536      	lsls	r6, r6, #20
    a31c:	b136      	cbz	r6, a32c <_dtoa_r+0x9bc>
    a31e:	9b06      	ldr	r3, [sp, #24]
    a320:	2601      	movs	r6, #1
    a322:	3301      	adds	r3, #1
    a324:	9306      	str	r3, [sp, #24]
    a326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a328:	3301      	adds	r3, #1
    a32a:	930a      	str	r3, [sp, #40]	; 0x28
    a32c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a32e:	2b00      	cmp	r3, #0
    a330:	f47f ad70 	bne.w	9e14 <_dtoa_r+0x4a4>
    a334:	960f      	str	r6, [sp, #60]	; 0x3c
    a336:	2001      	movs	r0, #1
    a338:	e575      	b.n	9e26 <_dtoa_r+0x4b6>
    a33a:	2600      	movs	r6, #0
    a33c:	e7f6      	b.n	a32c <_dtoa_r+0x9bc>
    a33e:	f43f ad86 	beq.w	9e4e <_dtoa_r+0x4de>
    a342:	331c      	adds	r3, #28
    a344:	9a06      	ldr	r2, [sp, #24]
    a346:	441a      	add	r2, r3
    a348:	4498      	add	r8, r3
    a34a:	9206      	str	r2, [sp, #24]
    a34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a34e:	441a      	add	r2, r3
    a350:	920a      	str	r2, [sp, #40]	; 0x28
    a352:	e57c      	b.n	9e4e <_dtoa_r+0x4de>
    a354:	4603      	mov	r3, r0
    a356:	e7f4      	b.n	a342 <_dtoa_r+0x9d2>
    a358:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a35a:	2b00      	cmp	r3, #0
    a35c:	dc2b      	bgt.n	a3b6 <_dtoa_r+0xa46>
    a35e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a360:	2b02      	cmp	r3, #2
    a362:	dc09      	bgt.n	a378 <_dtoa_r+0xa08>
    a364:	e027      	b.n	a3b6 <_dtoa_r+0xa46>
    a366:	f1b9 0f00 	cmp.w	r9, #0
    a36a:	dc1d      	bgt.n	a3a8 <_dtoa_r+0xa38>
    a36c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a36e:	2b02      	cmp	r3, #2
    a370:	dd1a      	ble.n	a3a8 <_dtoa_r+0xa38>
    a372:	463e      	mov	r6, r7
    a374:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a378:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a37a:	2b00      	cmp	r3, #0
    a37c:	f47f ae0c 	bne.w	9f98 <_dtoa_r+0x628>
    a380:	4621      	mov	r1, r4
    a382:	2205      	movs	r2, #5
    a384:	4658      	mov	r0, fp
    a386:	f01b f8ef 	bl	25568 <__multadd>
    a38a:	4601      	mov	r1, r0
    a38c:	4604      	mov	r4, r0
    a38e:	9803      	ldr	r0, [sp, #12]
    a390:	f021 fd78 	bl	2be84 <__mcmp>
    a394:	2800      	cmp	r0, #0
    a396:	f77f adff 	ble.w	9f98 <_dtoa_r+0x628>
    a39a:	f8dd a020 	ldr.w	sl, [sp, #32]
    a39e:	2331      	movs	r3, #49	; 0x31
    a3a0:	3601      	adds	r6, #1
    a3a2:	f80a 3b01 	strb.w	r3, [sl], #1
    a3a6:	e5fb      	b.n	9fa0 <_dtoa_r+0x630>
    a3a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a3aa:	463e      	mov	r6, r7
    a3ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	f47f ad83 	bne.w	9ebc <_dtoa_r+0x54c>
    a3b6:	9f08      	ldr	r7, [sp, #32]
    a3b8:	4621      	mov	r1, r4
    a3ba:	9803      	ldr	r0, [sp, #12]
    a3bc:	f021 fc51 	bl	2bc62 <quorem>
    a3c0:	9b08      	ldr	r3, [sp, #32]
    a3c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a3c8:	f807 9b01 	strb.w	r9, [r7], #1
    a3cc:	1afb      	subs	r3, r7, r3
    a3ce:	429a      	cmp	r2, r3
    a3d0:	f340 80cb 	ble.w	a56a <_dtoa_r+0xbfa>
    a3d4:	2300      	movs	r3, #0
    a3d6:	220a      	movs	r2, #10
    a3d8:	9903      	ldr	r1, [sp, #12]
    a3da:	4658      	mov	r0, fp
    a3dc:	f01b f8c4 	bl	25568 <__multadd>
    a3e0:	9003      	str	r0, [sp, #12]
    a3e2:	e7e9      	b.n	a3b8 <_dtoa_r+0xa48>
    a3e4:	692a      	ldr	r2, [r5, #16]
    a3e6:	f105 010c 	add.w	r1, r5, #12
    a3ea:	300c      	adds	r0, #12
    a3ec:	3202      	adds	r2, #2
    a3ee:	0092      	lsls	r2, r2, #2
    a3f0:	f021 fa9c 	bl	2b92c <memcpy>
    a3f4:	2201      	movs	r2, #1
    a3f6:	4639      	mov	r1, r7
    a3f8:	4658      	mov	r0, fp
    a3fa:	f01b fa17 	bl	2582c <__lshift>
    a3fe:	9b08      	ldr	r3, [sp, #32]
    a400:	46a8      	mov	r8, r5
    a402:	4605      	mov	r5, r0
    a404:	f103 0a01 	add.w	sl, r3, #1
    a408:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a40c:	4413      	add	r3, r2
    a40e:	930a      	str	r3, [sp, #40]	; 0x28
    a410:	9b04      	ldr	r3, [sp, #16]
    a412:	f003 0301 	and.w	r3, r3, #1
    a416:	930b      	str	r3, [sp, #44]	; 0x2c
    a418:	f10a 33ff 	add.w	r3, sl, #4294967295
    a41c:	4621      	mov	r1, r4
    a41e:	9803      	ldr	r0, [sp, #12]
    a420:	9306      	str	r3, [sp, #24]
    a422:	f021 fc1e 	bl	2bc62 <quorem>
    a426:	4641      	mov	r1, r8
    a428:	9009      	str	r0, [sp, #36]	; 0x24
    a42a:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a42e:	9803      	ldr	r0, [sp, #12]
    a430:	f021 fd28 	bl	2be84 <__mcmp>
    a434:	462a      	mov	r2, r5
    a436:	4621      	mov	r1, r4
    a438:	4607      	mov	r7, r0
    a43a:	4658      	mov	r0, fp
    a43c:	f01b fa62 	bl	25904 <__mdiff>
    a440:	68c2      	ldr	r2, [r0, #12]
    a442:	4601      	mov	r1, r0
    a444:	b302      	cbz	r2, a488 <_dtoa_r+0xb18>
    a446:	4658      	mov	r0, fp
    a448:	f01b f86c 	bl	25524 <_Bfree>
    a44c:	2f00      	cmp	r7, #0
    a44e:	da3a      	bge.n	a4c6 <_dtoa_r+0xb56>
    a450:	2201      	movs	r2, #1
    a452:	9903      	ldr	r1, [sp, #12]
    a454:	4658      	mov	r0, fp
    a456:	f01b f9e9 	bl	2582c <__lshift>
    a45a:	4621      	mov	r1, r4
    a45c:	9003      	str	r0, [sp, #12]
    a45e:	f021 fd11 	bl	2be84 <__mcmp>
    a462:	2800      	cmp	r0, #0
    a464:	dc03      	bgt.n	a46e <_dtoa_r+0xafe>
    a466:	d129      	bne.n	a4bc <_dtoa_r+0xb4c>
    a468:	f019 0f01 	tst.w	r9, #1
    a46c:	d026      	beq.n	a4bc <_dtoa_r+0xb4c>
    a46e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a472:	d11d      	bne.n	a4b0 <_dtoa_r+0xb40>
    a474:	e032      	b.n	a4dc <_dtoa_r+0xb6c>
    a476:	4628      	mov	r0, r5
    a478:	e7c1      	b.n	a3fe <_dtoa_r+0xa8e>
    a47a:	bf00      	nop
    a47c:	0002ca80 	.word	0x0002ca80
    a480:	40140000 	.word	0x40140000
    a484:	40240000 	.word	0x40240000
    a488:	900e      	str	r0, [sp, #56]	; 0x38
    a48a:	9803      	ldr	r0, [sp, #12]
    a48c:	f021 fcfa 	bl	2be84 <__mcmp>
    a490:	990e      	ldr	r1, [sp, #56]	; 0x38
    a492:	900c      	str	r0, [sp, #48]	; 0x30
    a494:	4658      	mov	r0, fp
    a496:	f01b f845 	bl	25524 <_Bfree>
    a49a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a49c:	bb5a      	cbnz	r2, a4f6 <_dtoa_r+0xb86>
    a49e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a4a0:	b953      	cbnz	r3, a4b8 <_dtoa_r+0xb48>
    a4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a4a4:	b943      	cbnz	r3, a4b8 <_dtoa_r+0xb48>
    a4a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a4aa:	d017      	beq.n	a4dc <_dtoa_r+0xb6c>
    a4ac:	2f00      	cmp	r7, #0
    a4ae:	dd05      	ble.n	a4bc <_dtoa_r+0xb4c>
    a4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a4b6:	e001      	b.n	a4bc <_dtoa_r+0xb4c>
    a4b8:	2f00      	cmp	r7, #0
    a4ba:	da2a      	bge.n	a512 <_dtoa_r+0xba2>
    a4bc:	f8dd a018 	ldr.w	sl, [sp, #24]
    a4c0:	f80a 9b01 	strb.w	r9, [sl], #1
    a4c4:	e56e      	b.n	9fa4 <_dtoa_r+0x634>
    a4c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a4c8:	433b      	orrs	r3, r7
    a4ca:	d104      	bne.n	a4d6 <_dtoa_r+0xb66>
    a4cc:	9b04      	ldr	r3, [sp, #16]
    a4ce:	f003 0301 	and.w	r3, r3, #1
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	d0bc      	beq.n	a450 <_dtoa_r+0xae0>
    a4d6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a4da:	d136      	bne.n	a54a <_dtoa_r+0xbda>
    a4dc:	9f06      	ldr	r7, [sp, #24]
    a4de:	2339      	movs	r3, #57	; 0x39
    a4e0:	f807 3b01 	strb.w	r3, [r7], #1
    a4e4:	46ba      	mov	sl, r7
    a4e6:	3f01      	subs	r7, #1
    a4e8:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a4ec:	2b39      	cmp	r3, #57	; 0x39
    a4ee:	d05a      	beq.n	a5a6 <_dtoa_r+0xc36>
    a4f0:	3301      	adds	r3, #1
    a4f2:	703b      	strb	r3, [r7, #0]
    a4f4:	e556      	b.n	9fa4 <_dtoa_r+0x634>
    a4f6:	2f00      	cmp	r7, #0
    a4f8:	db06      	blt.n	a508 <_dtoa_r+0xb98>
    a4fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a4fc:	433b      	orrs	r3, r7
    a4fe:	d106      	bne.n	a50e <_dtoa_r+0xb9e>
    a500:	9b04      	ldr	r3, [sp, #16]
    a502:	f003 0301 	and.w	r3, r3, #1
    a506:	b913      	cbnz	r3, a50e <_dtoa_r+0xb9e>
    a508:	2a00      	cmp	r2, #0
    a50a:	dca1      	bgt.n	a450 <_dtoa_r+0xae0>
    a50c:	e7d6      	b.n	a4bc <_dtoa_r+0xb4c>
    a50e:	2a00      	cmp	r2, #0
    a510:	dce1      	bgt.n	a4d6 <_dtoa_r+0xb66>
    a512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a514:	4657      	mov	r7, sl
    a516:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a51a:	4553      	cmp	r3, sl
    a51c:	d02e      	beq.n	a57c <_dtoa_r+0xc0c>
    a51e:	2300      	movs	r3, #0
    a520:	220a      	movs	r2, #10
    a522:	9903      	ldr	r1, [sp, #12]
    a524:	4658      	mov	r0, fp
    a526:	f01b f81f 	bl	25568 <__multadd>
    a52a:	45a8      	cmp	r8, r5
    a52c:	9003      	str	r0, [sp, #12]
    a52e:	f04f 0300 	mov.w	r3, #0
    a532:	f04f 020a 	mov.w	r2, #10
    a536:	4641      	mov	r1, r8
    a538:	4658      	mov	r0, fp
    a53a:	d10b      	bne.n	a554 <_dtoa_r+0xbe4>
    a53c:	f01b f814 	bl	25568 <__multadd>
    a540:	4680      	mov	r8, r0
    a542:	4605      	mov	r5, r0
    a544:	f10a 0a01 	add.w	sl, sl, #1
    a548:	e766      	b.n	a418 <_dtoa_r+0xaa8>
    a54a:	f8dd a018 	ldr.w	sl, [sp, #24]
    a54e:	f109 0901 	add.w	r9, r9, #1
    a552:	e7b5      	b.n	a4c0 <_dtoa_r+0xb50>
    a554:	f01b f808 	bl	25568 <__multadd>
    a558:	4629      	mov	r1, r5
    a55a:	4680      	mov	r8, r0
    a55c:	2300      	movs	r3, #0
    a55e:	220a      	movs	r2, #10
    a560:	4658      	mov	r0, fp
    a562:	f01b f801 	bl	25568 <__multadd>
    a566:	4605      	mov	r5, r0
    a568:	e7ec      	b.n	a544 <_dtoa_r+0xbd4>
    a56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a56c:	f04f 0800 	mov.w	r8, #0
    a570:	2b00      	cmp	r3, #0
    a572:	bfcc      	ite	gt
    a574:	461f      	movgt	r7, r3
    a576:	2701      	movle	r7, #1
    a578:	9b08      	ldr	r3, [sp, #32]
    a57a:	441f      	add	r7, r3
    a57c:	2201      	movs	r2, #1
    a57e:	9903      	ldr	r1, [sp, #12]
    a580:	4658      	mov	r0, fp
    a582:	f01b f953 	bl	2582c <__lshift>
    a586:	4621      	mov	r1, r4
    a588:	9003      	str	r0, [sp, #12]
    a58a:	f021 fc7b 	bl	2be84 <__mcmp>
    a58e:	2800      	cmp	r0, #0
    a590:	dca8      	bgt.n	a4e4 <_dtoa_r+0xb74>
    a592:	d102      	bne.n	a59a <_dtoa_r+0xc2a>
    a594:	f019 0f01 	tst.w	r9, #1
    a598:	d1a4      	bne.n	a4e4 <_dtoa_r+0xb74>
    a59a:	46ba      	mov	sl, r7
    a59c:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a5a0:	2b30      	cmp	r3, #48	; 0x30
    a5a2:	d0fa      	beq.n	a59a <_dtoa_r+0xc2a>
    a5a4:	e4fe      	b.n	9fa4 <_dtoa_r+0x634>
    a5a6:	9b08      	ldr	r3, [sp, #32]
    a5a8:	42bb      	cmp	r3, r7
    a5aa:	d19b      	bne.n	a4e4 <_dtoa_r+0xb74>
    a5ac:	2331      	movs	r3, #49	; 0x31
    a5ae:	9a08      	ldr	r2, [sp, #32]
    a5b0:	3601      	adds	r6, #1
    a5b2:	7013      	strb	r3, [r2, #0]
    a5b4:	e4f6      	b.n	9fa4 <_dtoa_r+0x634>
    a5b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a5b8:	2b00      	cmp	r3, #0
    a5ba:	f47f aa20 	bne.w	99fe <_dtoa_r+0x8e>
    a5be:	4b01      	ldr	r3, [pc, #4]	; (a5c4 <_dtoa_r+0xc54>)
    a5c0:	f7ff ba3f 	b.w	9a42 <_dtoa_r+0xd2>
    a5c4:	000336ac 	.word	0x000336ac

0000a5c8 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a5c8:	4603      	mov	r3, r0
    a5ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a5cc:	2401      	movs	r4, #1
    a5ce:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a5d0:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a5d2:	409c      	lsls	r4, r3
    a5d4:	6843      	ldr	r3, [r0, #4]
    a5d6:	681b      	ldr	r3, [r3, #0]
    a5d8:	421c      	tst	r4, r3
    a5da:	d10e      	bne.n	a5fa <gpio_pin_get_dt+0x32>
    a5dc:	490e      	ldr	r1, [pc, #56]	; (a618 <gpio_pin_get_dt+0x50>)
    a5de:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a5e2:	4a0e      	ldr	r2, [pc, #56]	; (a61c <gpio_pin_get_dt+0x54>)
    a5e4:	480e      	ldr	r0, [pc, #56]	; (a620 <gpio_pin_get_dt+0x58>)
    a5e6:	f01c f99c 	bl	26922 <assert_print>
    a5ea:	480e      	ldr	r0, [pc, #56]	; (a624 <gpio_pin_get_dt+0x5c>)
    a5ec:	f01c f999 	bl	26922 <assert_print>
    a5f0:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a5f4:	4809      	ldr	r0, [pc, #36]	; (a61c <gpio_pin_get_dt+0x54>)
    a5f6:	f01c f98d 	bl	26914 <assert_post_action>
	const struct gpio_driver_data *const data =
    a5fa:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a5fc:	6883      	ldr	r3, [r0, #8]
    a5fe:	a901      	add	r1, sp, #4
    a600:	685b      	ldr	r3, [r3, #4]
    a602:	4798      	blx	r3
	if (ret == 0) {
    a604:	b930      	cbnz	r0, a614 <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a606:	682a      	ldr	r2, [r5, #0]
    a608:	9b01      	ldr	r3, [sp, #4]
    a60a:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a60c:	4223      	tst	r3, r4
    a60e:	bf14      	ite	ne
    a610:	2001      	movne	r0, #1
    a612:	2000      	moveq	r0, #0
}
    a614:	b003      	add	sp, #12
    a616:	bd30      	pop	{r4, r5, pc}
    a618:	0002d843 	.word	0x0002d843
    a61c:	0002d812 	.word	0x0002d812
    a620:	0002d881 	.word	0x0002d881
    a624:	0002d89e 	.word	0x0002d89e

0000a628 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
	
}

//DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a628:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a62a:	f020 f83f 	bl	2a6ac <sys_clock_cycle_get_32>
    a62e:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a630:	4804      	ldr	r0, [pc, #16]	; (a644 <digital_0_call_back+0x1c>)
    a632:	f01b ffb4 	bl	2659e <printk>
	if(digital_value[0]<=DIGITAL_0_LIMIT)digital_value[0]++;
    a636:	4a04      	ldr	r2, [pc, #16]	; (a648 <digital_0_call_back+0x20>)
    a638:	8813      	ldrh	r3, [r2, #0]
    a63a:	8813      	ldrh	r3, [r2, #0]
    a63c:	3301      	adds	r3, #1
    a63e:	b21b      	sxth	r3, r3
    a640:	8013      	strh	r3, [r2, #0]
}
    a642:	bd08      	pop	{r3, pc}
    a644:	0002d8b0 	.word	0x0002d8b0
    a648:	20021bc0 	.word	0x20021bc0

0000a64c <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a64c:	b508      	push	{r3, lr}
    a64e:	f020 f82d 	bl	2a6ac <sys_clock_cycle_get_32>
    a652:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a654:	4804      	ldr	r0, [pc, #16]	; (a668 <digital_1_call_back+0x1c>)
    a656:	f01b ffa2 	bl	2659e <printk>
	if(digital_value[1]<=DIGITAL_0_LIMIT)digital_value[1]++;
    a65a:	4a04      	ldr	r2, [pc, #16]	; (a66c <digital_1_call_back+0x20>)
    a65c:	8853      	ldrh	r3, [r2, #2]
    a65e:	8853      	ldrh	r3, [r2, #2]
    a660:	3301      	adds	r3, #1
    a662:	b21b      	sxth	r3, r3
    a664:	8053      	strh	r3, [r2, #2]
}
    a666:	bd08      	pop	{r3, pc}
    a668:	0002d8cb 	.word	0x0002d8cb
    a66c:	20021bc0 	.word	0x20021bc0

0000a670 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a670:	b508      	push	{r3, lr}
    a672:	f020 f81b 	bl	2a6ac <sys_clock_cycle_get_32>
    a676:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a678:	4804      	ldr	r0, [pc, #16]	; (a68c <digital_2_call_back+0x1c>)
    a67a:	f01b ff90 	bl	2659e <printk>
	if(digital_value[2]<=DIGITAL_0_LIMIT)digital_value[2]++;
    a67e:	4a04      	ldr	r2, [pc, #16]	; (a690 <digital_2_call_back+0x20>)
    a680:	8893      	ldrh	r3, [r2, #4]
    a682:	8893      	ldrh	r3, [r2, #4]
    a684:	3301      	adds	r3, #1
    a686:	b21b      	sxth	r3, r3
    a688:	8093      	strh	r3, [r2, #4]
}
    a68a:	bd08      	pop	{r3, pc}
    a68c:	0002d8e6 	.word	0x0002d8e6
    a690:	20021bc0 	.word	0x20021bc0

0000a694 <uart_work_handler.part.0>:
static void uart_work_handler(struct k_work *item)
    a694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART receive buffer");
    a696:	4b09      	ldr	r3, [pc, #36]	; (a6bc <uart_work_handler.part.0+0x28>)
    a698:	aa04      	add	r2, sp, #16
    a69a:	9305      	str	r3, [sp, #20]
    a69c:	2302      	movs	r3, #2
    a69e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a6a2:	4807      	ldr	r0, [pc, #28]	; (a6c0 <uart_work_handler.part.0+0x2c>)
    a6a4:	9304      	str	r3, [sp, #16]
    a6a6:	f01b fd03 	bl	260b0 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    a6aa:	f240 6267 	movw	r2, #1639	; 0x667
    a6ae:	2300      	movs	r3, #0
    a6b0:	4804      	ldr	r0, [pc, #16]	; (a6c4 <uart_work_handler.part.0+0x30>)
}
    a6b2:	b007      	add	sp, #28
    a6b4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    a6b8:	f017 beaa 	b.w	22410 <k_work_reschedule>
    a6bc:	0002d901 	.word	0x0002d901
    a6c0:	0002c8d4 	.word	0x0002c8d4
    a6c4:	20009308 	.word	0x20009308

0000a6c8 <uart_work_handler>:
{
    a6c8:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    a6ca:	2030      	movs	r0, #48	; 0x30
    a6cc:	f021 f90b 	bl	2b8e6 <k_malloc>
	if (buf) {
    a6d0:	b138      	cbz	r0, a6e2 <uart_work_handler+0x1a>
		buf->len = 0;
    a6d2:	2300      	movs	r3, #0
    a6d4:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a6d6:	1d01      	adds	r1, r0, #4
}
    a6d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a6dc:	4803      	ldr	r0, [pc, #12]	; (a6ec <uart_work_handler+0x24>)
    a6de:	f01b bcea 	b.w	260b6 <uart_rx_enable.constprop.0>
}
    a6e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a6e6:	f7ff bfd5 	b.w	a694 <uart_work_handler.part.0>
    a6ea:	bf00      	nop
    a6ec:	0002c2e0 	.word	0x0002c2e0

0000a6f0 <button3_thread>:
		    flash_test_();
	}
}


void button3_thread(void){
    a6f0:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;
	while(1){
		i=0;
		k_sem_take(&button_3,K_FOREVER);
    a6f2:	4e09      	ldr	r6, [pc, #36]	; (a718 <button3_thread+0x28>)
	    while (i<=C_Buffer_Current_Position){
    a6f4:	4d09      	ldr	r5, [pc, #36]	; (a71c <button3_thread+0x2c>)
		k_sem_take(&button_3,K_FOREVER);
    a6f6:	f04f 32ff 	mov.w	r2, #4294967295
    a6fa:	f04f 33ff 	mov.w	r3, #4294967295
    a6fe:	4630      	mov	r0, r6
    a700:	f01b fce9 	bl	260d6 <k_sem_take.constprop.0.isra.0>
		i=0;
    a704:	2400      	movs	r4, #0
	     print_current_position_cb(i);
    a706:	4620      	mov	r0, r4
    a708:	f001 f9d0 	bl	baac <print_current_position_cb>
	    while (i<=C_Buffer_Current_Position){
    a70c:	682b      	ldr	r3, [r5, #0]
	     i++;
    a70e:	3401      	adds	r4, #1
	    while (i<=C_Buffer_Current_Position){
    a710:	42a3      	cmp	r3, r4
    a712:	d3f0      	bcc.n	a6f6 <button3_thread+0x6>
    a714:	e7f7      	b.n	a706 <button3_thread+0x16>
    a716:	bf00      	nop
    a718:	20008ccc 	.word	0x20008ccc
    a71c:	20021548 	.word	0x20021548

0000a720 <button4_thread>:
		}
    }
}

void button4_thread(void){
    a720:	b538      	push	{r3, r4, r5, lr}

    uint8_t *packet_data;
	packet_data = k_malloc(25);
    a722:	2019      	movs	r0, #25
    a724:	f021 f8df 	bl	2b8e6 <k_malloc>
	//49 53 41 44 4f 52 41 
    *packet_data = 0x49;
    a728:	2349      	movs	r3, #73	; 0x49
    *(packet_data+1) = 0x53;
    *(packet_data+2) = 0x41;
    *(packet_data+3) = 0x44;
    a72a:	2244      	movs	r2, #68	; 0x44
    *packet_data = 0x49;
    a72c:	7003      	strb	r3, [r0, #0]
    *(packet_data+3) = 0x44;
    a72e:	70c2      	strb	r2, [r0, #3]
    *(packet_data+1) = 0x53;
    a730:	2353      	movs	r3, #83	; 0x53
    *(packet_data+4) = 0x4F;
    a732:	224f      	movs	r2, #79	; 0x4f
    *(packet_data+1) = 0x53;
    a734:	7043      	strb	r3, [r0, #1]
    *(packet_data+4) = 0x4F;
    a736:	7102      	strb	r2, [r0, #4]
    *(packet_data+2) = 0x41;
    a738:	2341      	movs	r3, #65	; 0x41
    *(packet_data+5) = 0x52;
    a73a:	2252      	movs	r2, #82	; 0x52
	packet_data = k_malloc(25);
    a73c:	4604      	mov	r4, r0
    *(packet_data+6) = 0x41;
	while(1){
		k_sem_take(&button_test,K_FOREVER);
    a73e:	4d08      	ldr	r5, [pc, #32]	; (a760 <button4_thread+0x40>)
    *(packet_data+2) = 0x41;
    a740:	7083      	strb	r3, [r0, #2]
    *(packet_data+5) = 0x52;
    a742:	7142      	strb	r2, [r0, #5]
    *(packet_data+6) = 0x41;
    a744:	7183      	strb	r3, [r0, #6]
		k_sem_take(&button_test,K_FOREVER);
    a746:	4628      	mov	r0, r5
    a748:	f04f 32ff 	mov.w	r2, #4294967295
    a74c:	f04f 33ff 	mov.w	r3, #4294967295
    a750:	f01b fcc1 	bl	260d6 <k_sem_take.constprop.0.isra.0>
    	bt_nus_send(NULL, packet_data,7);
    a754:	2207      	movs	r2, #7
    a756:	4621      	mov	r1, r4
    a758:	2000      	movs	r0, #0
    a75a:	f005 fdbf 	bl	102dc <bt_nus_send>
	while(1){
    a75e:	e7f2      	b.n	a746 <button4_thread+0x26>
    a760:	20008ce4 	.word	0x20008ce4

0000a764 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    a764:	4603      	mov	r3, r0
    a766:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    a768:	6800      	ldr	r0, [r0, #0]
    a76a:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a76c:	2301      	movs	r3, #1
    a76e:	6845      	ldr	r5, [r0, #4]
    a770:	408b      	lsls	r3, r1
    a772:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    a774:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a776:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    a778:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a77a:	d10e      	bne.n	a79a <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    a77c:	490e      	ldr	r1, [pc, #56]	; (a7b8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    a77e:	f44f 731d 	mov.w	r3, #628	; 0x274
    a782:	4a0e      	ldr	r2, [pc, #56]	; (a7bc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    a784:	480e      	ldr	r0, [pc, #56]	; (a7c0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    a786:	f01c f8cc 	bl	26922 <assert_print>
    a78a:	480e      	ldr	r0, [pc, #56]	; (a7c4 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    a78c:	f01c f8c9 	bl	26922 <assert_print>
    a790:	f44f 711d 	mov.w	r1, #628	; 0x274
    a794:	4809      	ldr	r0, [pc, #36]	; (a7bc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    a796:	f01c f8bd 	bl	26914 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    a79a:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    a79c:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    a79e:	6994      	ldr	r4, [r2, #24]
    a7a0:	bf18      	it	ne
    a7a2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    a7a6:	46a4      	mov	ip, r4
}
    a7a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    a7ac:	bf08      	it	eq
    a7ae:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    a7b2:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    a7b6:	4760      	bx	ip
    a7b8:	0002d843 	.word	0x0002d843
    a7bc:	0002d812 	.word	0x0002d812
    a7c0:	0002d881 	.word	0x0002d881
    a7c4:	0002d89e 	.word	0x0002d89e

0000a7c8 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a7c8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    a7ca:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a7cc:	b08a      	sub	sp, #40	; 0x28
    a7ce:	4604      	mov	r4, r0
    a7d0:	460e      	mov	r6, r1
    a7d2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    a7d4:	2b03      	cmp	r3, #3
    a7d6:	d820      	bhi.n	a81a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    a7d8:	e8df f003 	tbb	[pc, r3]
    a7dc:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    a7e0:	4911      	ldr	r1, [pc, #68]	; (a828 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    a7e2:	4628      	mov	r0, r5
    a7e4:	f021 fa04 	bl	2bbf0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a7e8:	9505      	str	r5, [sp, #20]
    a7ea:	7863      	ldrb	r3, [r4, #1]
    a7ec:	211e      	movs	r1, #30
    a7ee:	9304      	str	r3, [sp, #16]
    a7f0:	78a3      	ldrb	r3, [r4, #2]
    a7f2:	4630      	mov	r0, r6
    a7f4:	9303      	str	r3, [sp, #12]
    a7f6:	78e3      	ldrb	r3, [r4, #3]
    a7f8:	4a0c      	ldr	r2, [pc, #48]	; (a82c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    a7fa:	9302      	str	r3, [sp, #8]
    a7fc:	7923      	ldrb	r3, [r4, #4]
    a7fe:	9301      	str	r3, [sp, #4]
    a800:	7963      	ldrb	r3, [r4, #5]
    a802:	9300      	str	r3, [sp, #0]
    a804:	79a3      	ldrb	r3, [r4, #6]
    a806:	f01b fed7 	bl	265b8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    a80a:	b00a      	add	sp, #40	; 0x28
    a80c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a80e:	4908      	ldr	r1, [pc, #32]	; (a830 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    a810:	e7e7      	b.n	a7e2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    a812:	4908      	ldr	r1, [pc, #32]	; (a834 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    a814:	e7e5      	b.n	a7e2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    a816:	4908      	ldr	r1, [pc, #32]	; (a838 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    a818:	e7e3      	b.n	a7e2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a81a:	210a      	movs	r1, #10
    a81c:	4628      	mov	r0, r5
    a81e:	4a07      	ldr	r2, [pc, #28]	; (a83c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    a820:	f01b feca 	bl	265b8 <snprintk>
		break;
    a824:	e7e0      	b.n	a7e8 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    a826:	bf00      	nop
    a828:	0002d92a 	.word	0x0002d92a
    a82c:	0002d94c 	.word	0x0002d94c
    a830:	0002d931 	.word	0x0002d931
    a834:	0002d938 	.word	0x0002d938
    a838:	0002d942 	.word	0x0002d942
    a83c:	00031500 	.word	0x00031500

0000a840 <security_changed>:
{
    a840:	b5f0      	push	{r4, r5, r6, r7, lr}
    a842:	4614      	mov	r4, r2
    a844:	b089      	sub	sp, #36	; 0x24
    a846:	af00      	add	r7, sp, #0
    a848:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a84a:	f01e f86e 	bl	2892a <bt_conn_get_dst>
    a84e:	4639      	mov	r1, r7
    a850:	f7ff ffba 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    a854:	b9ac      	cbnz	r4, a882 <security_changed+0x42>
		LOG_INF("Security changed: %s level %u", addr, level);
    a856:	466c      	mov	r4, sp
    a858:	b08a      	sub	sp, #40	; 0x28
    a85a:	466a      	mov	r2, sp
    a85c:	4b14      	ldr	r3, [pc, #80]	; (a8b0 <security_changed+0x70>)
    a85e:	61d5      	str	r5, [r2, #28]
    a860:	e9c2 3705 	strd	r3, r7, [r2, #20]
    a864:	f44f 7300 	mov.w	r3, #512	; 0x200
    a868:	8413      	strh	r3, [r2, #32]
    a86a:	4b12      	ldr	r3, [pc, #72]	; (a8b4 <security_changed+0x74>)
    a86c:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    a870:	4811      	ldr	r0, [pc, #68]	; (a8b8 <security_changed+0x78>)
    a872:	f842 3f10 	str.w	r3, [r2, #16]!
    a876:	f01b fc1b 	bl	260b0 <z_log_msg_static_create.constprop.0>
    a87a:	46a5      	mov	sp, r4
}
    a87c:	3724      	adds	r7, #36	; 0x24
    a87e:	46bd      	mov	sp, r7
    a880:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    a882:	466e      	mov	r6, sp
    a884:	b08a      	sub	sp, #40	; 0x28
    a886:	466b      	mov	r3, sp
    a888:	4a0c      	ldr	r2, [pc, #48]	; (a8bc <security_changed+0x7c>)
    a88a:	e9c3 5407 	strd	r5, r4, [r3, #28]
    a88e:	e9c3 2705 	strd	r2, r7, [r3, #20]
    a892:	f44f 7200 	mov.w	r2, #512	; 0x200
    a896:	849a      	strh	r2, [r3, #36]	; 0x24
    a898:	461a      	mov	r2, r3
    a89a:	4b09      	ldr	r3, [pc, #36]	; (a8c0 <security_changed+0x80>)
    a89c:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    a8a0:	4805      	ldr	r0, [pc, #20]	; (a8b8 <security_changed+0x78>)
    a8a2:	f842 3f10 	str.w	r3, [r2, #16]!
    a8a6:	f01b fc03 	bl	260b0 <z_log_msg_static_create.constprop.0>
    a8aa:	46b5      	mov	sp, r6
}
    a8ac:	e7e6      	b.n	a87c <security_changed+0x3c>
    a8ae:	bf00      	nop
    a8b0:	0002d96f 	.word	0x0002d96f
    a8b4:	01000004 	.word	0x01000004
    a8b8:	0002c8d4 	.word	0x0002c8d4
    a8bc:	0002d98d 	.word	0x0002d98d
    a8c0:	01000005 	.word	0x01000005

0000a8c4 <pairing_failed>:
{
    a8c4:	b590      	push	{r4, r7, lr}
    a8c6:	b089      	sub	sp, #36	; 0x24
    a8c8:	af00      	add	r7, sp, #0
    a8ca:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a8cc:	f01e f82d 	bl	2892a <bt_conn_get_dst>
    a8d0:	4639      	mov	r1, r7
    a8d2:	f7ff ff79 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    a8d6:	b08a      	sub	sp, #40	; 0x28
    a8d8:	466a      	mov	r2, sp
    a8da:	4b09      	ldr	r3, [pc, #36]	; (a900 <pairing_failed+0x3c>)
    a8dc:	61d4      	str	r4, [r2, #28]
    a8de:	e9c2 3705 	strd	r3, r7, [r2, #20]
    a8e2:	f44f 7300 	mov.w	r3, #512	; 0x200
    a8e6:	8413      	strh	r3, [r2, #32]
    a8e8:	4b06      	ldr	r3, [pc, #24]	; (a904 <pairing_failed+0x40>)
    a8ea:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    a8ee:	4806      	ldr	r0, [pc, #24]	; (a908 <pairing_failed+0x44>)
    a8f0:	f842 3f10 	str.w	r3, [r2, #16]!
    a8f4:	f01b fbdc 	bl	260b0 <z_log_msg_static_create.constprop.0>
}
    a8f8:	3724      	adds	r7, #36	; 0x24
    a8fa:	46bd      	mov	sp, r7
    a8fc:	bd90      	pop	{r4, r7, pc}
    a8fe:	bf00      	nop
    a900:	0002d9b1 	.word	0x0002d9b1
    a904:	01000004 	.word	0x01000004
    a908:	0002c8d4 	.word	0x0002c8d4

0000a90c <pairing_complete>:
{
    a90c:	b590      	push	{r4, r7, lr}
    a90e:	b089      	sub	sp, #36	; 0x24
    a910:	af00      	add	r7, sp, #0
    a912:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a914:	f01e f809 	bl	2892a <bt_conn_get_dst>
    a918:	4639      	mov	r1, r7
    a91a:	f7ff ff55 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    a91e:	b08a      	sub	sp, #40	; 0x28
    a920:	466a      	mov	r2, sp
    a922:	4b09      	ldr	r3, [pc, #36]	; (a948 <pairing_complete+0x3c>)
    a924:	61d4      	str	r4, [r2, #28]
    a926:	e9c2 3705 	strd	r3, r7, [r2, #20]
    a92a:	f44f 7300 	mov.w	r3, #512	; 0x200
    a92e:	8413      	strh	r3, [r2, #32]
    a930:	4b06      	ldr	r3, [pc, #24]	; (a94c <pairing_complete+0x40>)
    a932:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    a936:	4806      	ldr	r0, [pc, #24]	; (a950 <pairing_complete+0x44>)
    a938:	f842 3f10 	str.w	r3, [r2, #16]!
    a93c:	f01b fbb8 	bl	260b0 <z_log_msg_static_create.constprop.0>
}
    a940:	3724      	adds	r7, #36	; 0x24
    a942:	46bd      	mov	sp, r7
    a944:	bd90      	pop	{r4, r7, pc}
    a946:	bf00      	nop
    a948:	0002d9d4 	.word	0x0002d9d4
    a94c:	01000004 	.word	0x01000004
    a950:	0002c8d4 	.word	0x0002c8d4

0000a954 <auth_cancel>:
{
    a954:	b580      	push	{r7, lr}
    a956:	b088      	sub	sp, #32
    a958:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a95a:	f01d ffe6 	bl	2892a <bt_conn_get_dst>
    a95e:	4639      	mov	r1, r7
    a960:	f7ff ff32 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    a964:	b088      	sub	sp, #32
    a966:	466a      	mov	r2, sp
    a968:	4b08      	ldr	r3, [pc, #32]	; (a98c <auth_cancel+0x38>)
    a96a:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    a96e:	e9c2 3705 	strd	r3, r7, [r2, #20]
    a972:	f44f 7300 	mov.w	r3, #512	; 0x200
    a976:	8393      	strh	r3, [r2, #28]
    a978:	4b05      	ldr	r3, [pc, #20]	; (a990 <auth_cancel+0x3c>)
    a97a:	4806      	ldr	r0, [pc, #24]	; (a994 <auth_cancel+0x40>)
    a97c:	f842 3f10 	str.w	r3, [r2, #16]!
    a980:	f01b fb96 	bl	260b0 <z_log_msg_static_create.constprop.0>
}
    a984:	3720      	adds	r7, #32
    a986:	46bd      	mov	sp, r7
    a988:	bd80      	pop	{r7, pc}
    a98a:	bf00      	nop
    a98c:	0002d9f6 	.word	0x0002d9f6
    a990:	01000003 	.word	0x01000003
    a994:	0002c8d4 	.word	0x0002c8d4

0000a998 <auth_passkey_display>:
{
    a998:	b590      	push	{r4, r7, lr}
    a99a:	b089      	sub	sp, #36	; 0x24
    a99c:	af00      	add	r7, sp, #0
    a99e:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a9a0:	f01d ffc3 	bl	2892a <bt_conn_get_dst>
    a9a4:	4639      	mov	r1, r7
    a9a6:	f7ff ff0f 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    a9aa:	b08a      	sub	sp, #40	; 0x28
    a9ac:	466a      	mov	r2, sp
    a9ae:	4b09      	ldr	r3, [pc, #36]	; (a9d4 <auth_passkey_display+0x3c>)
    a9b0:	61d4      	str	r4, [r2, #28]
    a9b2:	e9c2 3705 	strd	r3, r7, [r2, #20]
    a9b6:	f44f 7300 	mov.w	r3, #512	; 0x200
    a9ba:	8413      	strh	r3, [r2, #32]
    a9bc:	4b06      	ldr	r3, [pc, #24]	; (a9d8 <auth_passkey_display+0x40>)
    a9be:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    a9c2:	4806      	ldr	r0, [pc, #24]	; (a9dc <auth_passkey_display+0x44>)
    a9c4:	f842 3f10 	str.w	r3, [r2, #16]!
    a9c8:	f01b fb72 	bl	260b0 <z_log_msg_static_create.constprop.0>
}
    a9cc:	3724      	adds	r7, #36	; 0x24
    a9ce:	46bd      	mov	sp, r7
    a9d0:	bd90      	pop	{r4, r7, pc}
    a9d2:	bf00      	nop
    a9d4:	0002da0c 	.word	0x0002da0c
    a9d8:	01000004 	.word	0x01000004
    a9dc:	0002c8d4 	.word	0x0002c8d4

0000a9e0 <auth_passkey_confirm>:
{
    a9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9e2:	b08f      	sub	sp, #60	; 0x3c
    a9e4:	af00      	add	r7, sp, #0
    a9e6:	460c      	mov	r4, r1
    a9e8:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    a9ea:	f00a f883 	bl	14af4 <bt_conn_ref>
    a9ee:	4b16      	ldr	r3, [pc, #88]	; (aa48 <auth_passkey_confirm+0x68>)
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    a9f0:	466e      	mov	r6, sp
	auth_conn = bt_conn_ref(conn);
    a9f2:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    a9f4:	4628      	mov	r0, r5
    a9f6:	f107 0518 	add.w	r5, r7, #24
    a9fa:	f01d ff96 	bl	2892a <bt_conn_get_dst>
    a9fe:	4629      	mov	r1, r5
    aa00:	f7ff fee2 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    aa04:	b08a      	sub	sp, #40	; 0x28
    aa06:	466a      	mov	r2, sp
    aa08:	4b10      	ldr	r3, [pc, #64]	; (aa4c <auth_passkey_confirm+0x6c>)
    aa0a:	61d4      	str	r4, [r2, #28]
    aa0c:	e9c2 3505 	strd	r3, r5, [r2, #20]
    aa10:	f44f 7300 	mov.w	r3, #512	; 0x200
    aa14:	4c0e      	ldr	r4, [pc, #56]	; (aa50 <auth_passkey_confirm+0x70>)
    aa16:	8413      	strh	r3, [r2, #32]
    aa18:	4b0e      	ldr	r3, [pc, #56]	; (aa54 <auth_passkey_confirm+0x74>)
    aa1a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    aa1e:	4620      	mov	r0, r4
    aa20:	f842 3f10 	str.w	r3, [r2, #16]!
    aa24:	f01b fb44 	bl	260b0 <z_log_msg_static_create.constprop.0>
    aa28:	46b5      	mov	sp, r6
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    aa2a:	4b0b      	ldr	r3, [pc, #44]	; (aa58 <auth_passkey_confirm+0x78>)
    aa2c:	f107 0210 	add.w	r2, r7, #16
    aa30:	617b      	str	r3, [r7, #20]
    aa32:	2302      	movs	r3, #2
    aa34:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    aa38:	613b      	str	r3, [r7, #16]
    aa3a:	4620      	mov	r0, r4
    aa3c:	f01b fb38 	bl	260b0 <z_log_msg_static_create.constprop.0>
}
    aa40:	373c      	adds	r7, #60	; 0x3c
    aa42:	46bd      	mov	sp, r7
    aa44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa46:	bf00      	nop
    aa48:	2000a408 	.word	0x2000a408
    aa4c:	0002da0c 	.word	0x0002da0c
    aa50:	0002c8d4 	.word	0x0002c8d4
    aa54:	01000004 	.word	0x01000004
    aa58:	0002da21 	.word	0x0002da21

0000aa5c <bt_receive_cb>:
{
    aa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    aa60:	2400      	movs	r4, #0
{
    aa62:	4605      	mov	r5, r0
    aa64:	b088      	sub	sp, #32
    aa66:	460f      	mov	r7, r1
    aa68:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    aa6a:	4621      	mov	r1, r4
    aa6c:	221a      	movs	r2, #26
    aa6e:	a801      	add	r0, sp, #4
    aa70:	9400      	str	r4, [sp, #0]
    aa72:	f020 ff95 	bl	2b9a0 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    aa76:	4628      	mov	r0, r5
    aa78:	f01d ff57 	bl	2892a <bt_conn_get_dst>
    aa7c:	4669      	mov	r1, sp
    aa7e:	f7ff fea3 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    aa82:	4669      	mov	r1, sp
    aa84:	481d      	ldr	r0, [pc, #116]	; (aafc <bt_receive_cb+0xa0>)
    aa86:	f01a fb69 	bl	2515c <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    aa8a:	f8df 8074 	ldr.w	r8, [pc, #116]	; ab00 <bt_receive_cb+0xa4>
			k_fifo_put(&fifo_uart_tx_data, tx);
    aa8e:	f8df 9074 	ldr.w	r9, [pc, #116]	; ab04 <bt_receive_cb+0xa8>
	for (uint16_t pos = 0; pos != len;) {
    aa92:	42b4      	cmp	r4, r6
    aa94:	d007      	beq.n	aaa6 <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    aa96:	2030      	movs	r0, #48	; 0x30
    aa98:	f020 ff25 	bl	2b8e6 <k_malloc>
		if (!tx) {
    aa9c:	4605      	mov	r5, r0
    aa9e:	b928      	cbnz	r0, aaac <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    aaa0:	4819      	ldr	r0, [pc, #100]	; (ab08 <bt_receive_cb+0xac>)
    aaa2:	f01a fb5b 	bl	2515c <iprintf>
}
    aaa6:	b008      	add	sp, #32
    aaa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size) {
    aaac:	1b32      	subs	r2, r6, r4
    aaae:	2a27      	cmp	r2, #39	; 0x27
			tx->len = tx_data_size;
    aab0:	bf8c      	ite	hi
    aab2:	2227      	movhi	r2, #39	; 0x27
			tx->len = (len - pos);
    aab4:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    aab6:	f100 0a04 	add.w	sl, r0, #4
    aaba:	8582      	strh	r2, [r0, #44]	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    aabc:	1939      	adds	r1, r7, r4
    aabe:	4650      	mov	r0, sl
    aac0:	f020 ff34 	bl	2b92c <memcpy>
		pos += tx->len;
    aac4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    aac6:	441c      	add	r4, r3
    aac8:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    aaca:	42a6      	cmp	r6, r4
    aacc:	d109      	bne.n	aae2 <bt_receive_cb+0x86>
    aace:	19ba      	adds	r2, r7, r6
    aad0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    aad4:	2a0d      	cmp	r2, #13
    aad6:	d104      	bne.n	aae2 <bt_receive_cb+0x86>
			tx->data[tx->len] = '\n';
    aad8:	210a      	movs	r1, #10
    aada:	18ea      	adds	r2, r5, r3
			tx->len++;
    aadc:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    aade:	7111      	strb	r1, [r2, #4]
			tx->len++;
    aae0:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    aae2:	4651      	mov	r1, sl
    aae4:	4640      	mov	r0, r8
    aae6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    aae8:	f01b faed 	bl	260c6 <uart_tx.constprop.0>
		if (err) {
    aaec:	2800      	cmp	r0, #0
    aaee:	d0d0      	beq.n	aa92 <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    aaf0:	4629      	mov	r1, r5
    aaf2:	4648      	mov	r0, r9
    aaf4:	f020 fd43 	bl	2b57e <k_queue_append>
    aaf8:	e7cb      	b.n	aa92 <bt_receive_cb+0x36>
    aafa:	bf00      	nop
    aafc:	0002da50 	.word	0x0002da50
    ab00:	0002c2e0 	.word	0x0002c2e0
    ab04:	20008d90 	.word	0x20008d90
    ab08:	0002da67 	.word	0x0002da67

0000ab0c <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    ab0c:	4603      	mov	r3, r0
    ab0e:	b510      	push	{r4, lr}
    ab10:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab12:	7919      	ldrb	r1, [r3, #4]
    ab14:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    ab16:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab18:	fa03 f101 	lsl.w	r1, r3, r1
    ab1c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    ab1e:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab20:	681b      	ldr	r3, [r3, #0]
    ab22:	4219      	tst	r1, r3
    ab24:	d10e      	bne.n	ab44 <gpio_pin_set_dt.isra.0+0x38>
    ab26:	490e      	ldr	r1, [pc, #56]	; (ab60 <gpio_pin_set_dt.isra.0+0x54>)
    ab28:	f240 533d 	movw	r3, #1341	; 0x53d
    ab2c:	4a0d      	ldr	r2, [pc, #52]	; (ab64 <gpio_pin_set_dt.isra.0+0x58>)
    ab2e:	480e      	ldr	r0, [pc, #56]	; (ab68 <gpio_pin_set_dt.isra.0+0x5c>)
    ab30:	f01b fef7 	bl	26922 <assert_print>
    ab34:	480d      	ldr	r0, [pc, #52]	; (ab6c <gpio_pin_set_dt.isra.0+0x60>)
    ab36:	f01b fef4 	bl	26922 <assert_print>
    ab3a:	f240 513d 	movw	r1, #1341	; 0x53d
    ab3e:	4809      	ldr	r0, [pc, #36]	; (ab64 <gpio_pin_set_dt.isra.0+0x58>)
    ab40:	f01b fee8 	bl	26914 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    ab44:	6823      	ldr	r3, [r4, #0]
    ab46:	4219      	tst	r1, r3
    ab48:	d003      	beq.n	ab52 <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    ab4a:	b122      	cbz	r2, ab56 <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    ab4c:	6883      	ldr	r3, [r0, #8]
    ab4e:	691b      	ldr	r3, [r3, #16]
    ab50:	e003      	b.n	ab5a <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    ab52:	2a00      	cmp	r2, #0
    ab54:	d0fa      	beq.n	ab4c <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    ab56:	6883      	ldr	r3, [r0, #8]
    ab58:	68db      	ldr	r3, [r3, #12]
}
    ab5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    ab5e:	4718      	bx	r3
    ab60:	0002d843 	.word	0x0002d843
    ab64:	0002d812 	.word	0x0002d812
    ab68:	0002d881 	.word	0x0002d881
    ab6c:	0002d89e 	.word	0x0002d89e

0000ab70 <button_pressed_1>:
void button_pressed_1(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    ab70:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ab72:	4807      	ldr	r0, [pc, #28]	; (ab90 <button_pressed_1+0x20>)
    ab74:	f016 feac 	bl	218d0 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    ab78:	2101      	movs	r1, #1
    ab7a:	4806      	ldr	r0, [pc, #24]	; (ab94 <button_pressed_1+0x24>)
    ab7c:	f7ff ffc6 	bl	ab0c <gpio_pin_set_dt.isra.0>
    ab80:	f01f fd94 	bl	2a6ac <sys_clock_cycle_get_32>
}
    ab84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ab88:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    ab8a:	4803      	ldr	r0, [pc, #12]	; (ab98 <button_pressed_1+0x28>)
    ab8c:	f01b bd07 	b.w	2659e <printk>
    ab90:	20008d5c 	.word	0x20008d5c
    ab94:	0002cbd8 	.word	0x0002cbd8
    ab98:	0002da92 	.word	0x0002da92

0000ab9c <connected>:
{
    ab9c:	b5b0      	push	{r4, r5, r7, lr}
    ab9e:	b088      	sub	sp, #32
    aba0:	4604      	mov	r4, r0
    aba2:	af00      	add	r7, sp, #0
	if (err) {
    aba4:	b189      	cbz	r1, abca <connected+0x2e>
		LOG_ERR("Connection failed (err %u)", err);
    aba6:	466c      	mov	r4, sp
    aba8:	b088      	sub	sp, #32
    abaa:	466a      	mov	r2, sp
    abac:	4b17      	ldr	r3, [pc, #92]	; (ac0c <connected+0x70>)
    abae:	4818      	ldr	r0, [pc, #96]	; (ac10 <connected+0x74>)
    abb0:	e9c2 3105 	strd	r3, r1, [r2, #20]
    abb4:	2303      	movs	r3, #3
    abb6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    abba:	f842 3f10 	str.w	r3, [r2, #16]!
    abbe:	f01b fa77 	bl	260b0 <z_log_msg_static_create.constprop.0>
    abc2:	46a5      	mov	sp, r4
}
    abc4:	3720      	adds	r7, #32
    abc6:	46bd      	mov	sp, r7
    abc8:	bdb0      	pop	{r4, r5, r7, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abca:	f01d feae 	bl	2892a <bt_conn_get_dst>
    abce:	4639      	mov	r1, r7
    abd0:	f7ff fdfa 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    abd4:	466d      	mov	r5, sp
    abd6:	b088      	sub	sp, #32
    abd8:	466a      	mov	r2, sp
    abda:	4b0e      	ldr	r3, [pc, #56]	; (ac14 <connected+0x78>)
    abdc:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    abe0:	e9c2 3705 	strd	r3, r7, [r2, #20]
    abe4:	f44f 7300 	mov.w	r3, #512	; 0x200
    abe8:	8393      	strh	r3, [r2, #28]
    abea:	4b0b      	ldr	r3, [pc, #44]	; (ac18 <connected+0x7c>)
    abec:	4808      	ldr	r0, [pc, #32]	; (ac10 <connected+0x74>)
    abee:	f842 3f10 	str.w	r3, [r2, #16]!
    abf2:	f01b fa5d 	bl	260b0 <z_log_msg_static_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    abf6:	4620      	mov	r0, r4
    abf8:	46ad      	mov	sp, r5
    abfa:	f009 ff7b 	bl	14af4 <bt_conn_ref>
    abfe:	4b07      	ldr	r3, [pc, #28]	; (ac1c <connected+0x80>)
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    ac00:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    ac02:	6018      	str	r0, [r3, #0]
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    ac04:	4806      	ldr	r0, [pc, #24]	; (ac20 <connected+0x84>)
    ac06:	f7ff ff81 	bl	ab0c <gpio_pin_set_dt.isra.0>
    ac0a:	e7db      	b.n	abc4 <connected+0x28>
    ac0c:	0002daaa 	.word	0x0002daaa
    ac10:	0002c8d4 	.word	0x0002c8d4
    ac14:	0002dac5 	.word	0x0002dac5
    ac18:	01000003 	.word	0x01000003
    ac1c:	2000a40c 	.word	0x2000a40c
    ac20:	0002cbf0 	.word	0x0002cbf0

0000ac24 <disconnected>:
{
    ac24:	b5b0      	push	{r4, r5, r7, lr}
    ac26:	b088      	sub	sp, #32
    ac28:	af00      	add	r7, sp, #0
    ac2a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac2c:	f01d fe7d 	bl	2892a <bt_conn_get_dst>
    ac30:	4639      	mov	r1, r7
    ac32:	f7ff fdc9 	bl	a7c8 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    ac36:	466d      	mov	r5, sp
    ac38:	b08a      	sub	sp, #40	; 0x28
    ac3a:	466a      	mov	r2, sp
    ac3c:	4b11      	ldr	r3, [pc, #68]	; (ac84 <disconnected+0x60>)
    ac3e:	61d4      	str	r4, [r2, #28]
    ac40:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ac44:	f44f 7300 	mov.w	r3, #512	; 0x200
    ac48:	8413      	strh	r3, [r2, #32]
    ac4a:	4b0f      	ldr	r3, [pc, #60]	; (ac88 <disconnected+0x64>)
	if (auth_conn) {
    ac4c:	4c0f      	ldr	r4, [pc, #60]	; (ac8c <disconnected+0x68>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    ac4e:	4810      	ldr	r0, [pc, #64]	; (ac90 <disconnected+0x6c>)
    ac50:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ac54:	f842 3f10 	str.w	r3, [r2, #16]!
    ac58:	f01b fa2a 	bl	260b0 <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
    ac5c:	6820      	ldr	r0, [r4, #0]
    ac5e:	46ad      	mov	sp, r5
    ac60:	b118      	cbz	r0, ac6a <disconnected+0x46>
		bt_conn_unref(auth_conn);
    ac62:	f009 ff6f 	bl	14b44 <bt_conn_unref>
		auth_conn = NULL;
    ac66:	2300      	movs	r3, #0
    ac68:	6023      	str	r3, [r4, #0]
	if (current_conn) {
    ac6a:	4c0a      	ldr	r4, [pc, #40]	; (ac94 <disconnected+0x70>)
    ac6c:	6820      	ldr	r0, [r4, #0]
    ac6e:	b130      	cbz	r0, ac7e <disconnected+0x5a>
		bt_conn_unref(current_conn);
    ac70:	f009 ff68 	bl	14b44 <bt_conn_unref>
		current_conn = NULL;
    ac74:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    ac76:	4808      	ldr	r0, [pc, #32]	; (ac98 <disconnected+0x74>)
		current_conn = NULL;
    ac78:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    ac7a:	f7ff ff47 	bl	ab0c <gpio_pin_set_dt.isra.0>
}
    ac7e:	3720      	adds	r7, #32
    ac80:	46bd      	mov	sp, r7
    ac82:	bdb0      	pop	{r4, r5, r7, pc}
    ac84:	0002dad2 	.word	0x0002dad2
    ac88:	01000004 	.word	0x01000004
    ac8c:	2000a408 	.word	0x2000a408
    ac90:	0002c8d4 	.word	0x0002c8d4
    ac94:	2000a40c 	.word	0x2000a40c
    ac98:	0002cbf0 	.word	0x0002cbf0

0000ac9c <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    ac9c:	4603      	mov	r3, r0
    ac9e:	b570      	push	{r4, r5, r6, lr}
    aca0:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    aca2:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    aca4:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    aca6:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    aca8:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    acaa:	f002 0430 	and.w	r4, r2, #48	; 0x30
    acae:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    acb0:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    acb2:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    acb6:	d10e      	bne.n	acd6 <gpio_pin_configure_dt.isra.0+0x3a>
    acb8:	4925      	ldr	r1, [pc, #148]	; (ad50 <gpio_pin_configure_dt.isra.0+0xb4>)
    acba:	f240 23b7 	movw	r3, #695	; 0x2b7
    acbe:	4a25      	ldr	r2, [pc, #148]	; (ad54 <gpio_pin_configure_dt.isra.0+0xb8>)
    acc0:	4825      	ldr	r0, [pc, #148]	; (ad58 <gpio_pin_configure_dt.isra.0+0xbc>)
    acc2:	f01b fe2e 	bl	26922 <assert_print>
    acc6:	4825      	ldr	r0, [pc, #148]	; (ad5c <gpio_pin_configure_dt.isra.0+0xc0>)
    acc8:	f01b fe2b 	bl	26922 <assert_print>
    accc:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    acd0:	4820      	ldr	r0, [pc, #128]	; (ad54 <gpio_pin_configure_dt.isra.0+0xb8>)
    acd2:	f01b fe1f 	bl	26914 <assert_post_action>
    acd6:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    acda:	2c02      	cmp	r4, #2
    acdc:	d10c      	bne.n	acf8 <gpio_pin_configure_dt.isra.0+0x5c>
    acde:	4920      	ldr	r1, [pc, #128]	; (ad60 <gpio_pin_configure_dt.isra.0+0xc4>)
    ace0:	f240 23bb 	movw	r3, #699	; 0x2bb
    ace4:	4a1b      	ldr	r2, [pc, #108]	; (ad54 <gpio_pin_configure_dt.isra.0+0xb8>)
    ace6:	481c      	ldr	r0, [pc, #112]	; (ad58 <gpio_pin_configure_dt.isra.0+0xbc>)
    ace8:	f01b fe1b 	bl	26922 <assert_print>
    acec:	481d      	ldr	r0, [pc, #116]	; (ad64 <gpio_pin_configure_dt.isra.0+0xc8>)
    acee:	f01b fe18 	bl	26922 <assert_print>
    acf2:	f240 21bb 	movw	r1, #699	; 0x2bb
    acf6:	e7eb      	b.n	acd0 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    acf8:	f002 0406 	and.w	r4, r2, #6
    acfc:	2c04      	cmp	r4, #4
    acfe:	d109      	bne.n	ad14 <gpio_pin_configure_dt.isra.0+0x78>
    ad00:	4919      	ldr	r1, [pc, #100]	; (ad68 <gpio_pin_configure_dt.isra.0+0xcc>)
    ad02:	f240 23bf 	movw	r3, #703	; 0x2bf
    ad06:	4a13      	ldr	r2, [pc, #76]	; (ad54 <gpio_pin_configure_dt.isra.0+0xb8>)
    ad08:	4813      	ldr	r0, [pc, #76]	; (ad58 <gpio_pin_configure_dt.isra.0+0xbc>)
    ad0a:	f01b fe0a 	bl	26922 <assert_print>
    ad0e:	f240 21bf 	movw	r1, #703	; 0x2bf
    ad12:	e7dd      	b.n	acd0 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ad14:	2401      	movs	r4, #1
    ad16:	681b      	ldr	r3, [r3, #0]
    ad18:	408c      	lsls	r4, r1
    ad1a:	421c      	tst	r4, r3
    ad1c:	d10c      	bne.n	ad38 <gpio_pin_configure_dt.isra.0+0x9c>
    ad1e:	4913      	ldr	r1, [pc, #76]	; (ad6c <gpio_pin_configure_dt.isra.0+0xd0>)
    ad20:	f240 23d2 	movw	r3, #722	; 0x2d2
    ad24:	4a0b      	ldr	r2, [pc, #44]	; (ad54 <gpio_pin_configure_dt.isra.0+0xb8>)
    ad26:	480c      	ldr	r0, [pc, #48]	; (ad58 <gpio_pin_configure_dt.isra.0+0xbc>)
    ad28:	f01b fdfb 	bl	26922 <assert_print>
    ad2c:	4810      	ldr	r0, [pc, #64]	; (ad70 <gpio_pin_configure_dt.isra.0+0xd4>)
    ad2e:	f01b fdf8 	bl	26922 <assert_print>
    ad32:	f240 21d2 	movw	r1, #722	; 0x2d2
    ad36:	e7cb      	b.n	acd0 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    ad38:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    ad3a:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    ad3e:	bf14      	ite	ne
    ad40:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    ad42:	43a3      	biceq	r3, r4
    ad44:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    ad46:	6833      	ldr	r3, [r6, #0]
}
    ad48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    ad4c:	4718      	bx	r3
    ad4e:	bf00      	nop
    ad50:	0002daef 	.word	0x0002daef
    ad54:	0002d812 	.word	0x0002d812
    ad58:	0002d881 	.word	0x0002d881
    ad5c:	0002db28 	.word	0x0002db28
    ad60:	0002db65 	.word	0x0002db65
    ad64:	0002db9a 	.word	0x0002db9a
    ad68:	0002dbec 	.word	0x0002dbec
    ad6c:	0002d843 	.word	0x0002d843
    ad70:	0002d89e 	.word	0x0002d89e

0000ad74 <uart_cb>:
{
    ad74:	b510      	push	{r4, lr}
	switch (evt->type) {
    ad76:	780b      	ldrb	r3, [r1, #0]
{
    ad78:	b086      	sub	sp, #24
	switch (evt->type) {
    ad7a:	2b05      	cmp	r3, #5
    ad7c:	d828      	bhi.n	add0 <uart_cb+0x5c>
    ad7e:	e8df f003 	tbb	[pc, r3]
    ad82:	8a03      	.short	0x8a03
    ad84:	467a682b 	.word	0x467a682b
		if ((evt->data.tx.len == 0) ||
    ad88:	688b      	ldr	r3, [r1, #8]
    ad8a:	b30b      	cbz	r3, add0 <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
    ad8c:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    ad8e:	b1f8      	cbz	r0, add0 <uart_cb+0x5c>
		if (aborted_buf) {
    ad90:	4a4b      	ldr	r2, [pc, #300]	; (aec0 <uart_cb+0x14c>)
    ad92:	6813      	ldr	r3, [r2, #0]
    ad94:	b1f3      	cbz	r3, add4 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    ad96:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    ad98:	2300      	movs	r3, #0
    ad9a:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    ad9c:	4a49      	ldr	r2, [pc, #292]	; (aec4 <uart_cb+0x150>)
    ad9e:	6013      	str	r3, [r2, #0]
		k_free(buf);
    ada0:	f020 fd9a 	bl	2b8d8 <k_free>
	return z_impl_k_queue_get(queue, timeout);
    ada4:	2200      	movs	r2, #0
    ada6:	2300      	movs	r3, #0
    ada8:	4847      	ldr	r0, [pc, #284]	; (aec8 <uart_cb+0x154>)
    adaa:	f016 fd27 	bl	217fc <z_impl_k_queue_get>
		if (!buf) {
    adae:	b178      	cbz	r0, add0 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
    adb0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    adb2:	1d01      	adds	r1, r0, #4
    adb4:	4845      	ldr	r0, [pc, #276]	; (aecc <uart_cb+0x158>)
    adb6:	f01b f986 	bl	260c6 <uart_tx.constprop.0>
    adba:	b148      	cbz	r0, add0 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    adbc:	4b44      	ldr	r3, [pc, #272]	; (aed0 <uart_cb+0x15c>)
			LOG_WRN("Not able to allocate UART receive buffer");
    adbe:	9305      	str	r3, [sp, #20]
    adc0:	2302      	movs	r3, #2
    adc2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    adc6:	4843      	ldr	r0, [pc, #268]	; (aed4 <uart_cb+0x160>)
    adc8:	aa04      	add	r2, sp, #16
    adca:	9304      	str	r3, [sp, #16]
    adcc:	f01b f970 	bl	260b0 <z_log_msg_static_create.constprop.0>
}
    add0:	b006      	add	sp, #24
    add2:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
    add4:	3804      	subs	r0, #4
    add6:	e7e3      	b.n	ada0 <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    add8:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    adda:	68cb      	ldr	r3, [r1, #12]
    addc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
    adde:	4403      	add	r3, r0
		if (disable_req) {
    ade0:	483d      	ldr	r0, [pc, #244]	; (aed8 <uart_cb+0x164>)
		buf->len += evt->data.rx.len;
    ade2:	b29b      	uxth	r3, r3
    ade4:	8513      	strh	r3, [r2, #40]	; 0x28
		if (disable_req) {
    ade6:	7802      	ldrb	r2, [r0, #0]
    ade8:	2a00      	cmp	r2, #0
    adea:	d1f1      	bne.n	add0 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    adec:	684a      	ldr	r2, [r1, #4]
    adee:	4413      	add	r3, r2
    adf0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    adf4:	2b0a      	cmp	r3, #10
    adf6:	d001      	beq.n	adfc <uart_cb+0x88>
    adf8:	2b0d      	cmp	r3, #13
    adfa:	d1e9      	bne.n	add0 <uart_cb+0x5c>
			disable_req = true;
    adfc:	2301      	movs	r3, #1
    adfe:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    ae00:	4832      	ldr	r0, [pc, #200]	; (aecc <uart_cb+0x158>)
    ae02:	6883      	ldr	r3, [r0, #8]
    ae04:	695b      	ldr	r3, [r3, #20]
}
    ae06:	b006      	add	sp, #24
    ae08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae0c:	4718      	bx	r3
		disable_req = false;
    ae0e:	2400      	movs	r4, #0
    ae10:	4b31      	ldr	r3, [pc, #196]	; (aed8 <uart_cb+0x164>)
		buf = k_malloc(sizeof(*buf));
    ae12:	2030      	movs	r0, #48	; 0x30
		disable_req = false;
    ae14:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    ae16:	f020 fd66 	bl	2b8e6 <k_malloc>
		if (buf) {
    ae1a:	b138      	cbz	r0, ae2c <uart_cb+0xb8>
			buf->len = 0;
    ae1c:	8584      	strh	r4, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    ae1e:	1d01      	adds	r1, r0, #4
    ae20:	482a      	ldr	r0, [pc, #168]	; (aecc <uart_cb+0x158>)
}
    ae22:	b006      	add	sp, #24
    ae24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    ae28:	f01b b945 	b.w	260b6 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    ae2c:	4b2b      	ldr	r3, [pc, #172]	; (aedc <uart_cb+0x168>)
    ae2e:	aa04      	add	r2, sp, #16
    ae30:	9305      	str	r3, [sp, #20]
    ae32:	2302      	movs	r3, #2
    ae34:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ae38:	4826      	ldr	r0, [pc, #152]	; (aed4 <uart_cb+0x160>)
    ae3a:	9304      	str	r3, [sp, #16]
    ae3c:	f01b f938 	bl	260b0 <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    ae40:	f240 6267 	movw	r2, #1639	; 0x667
    ae44:	2300      	movs	r3, #0
    ae46:	4826      	ldr	r0, [pc, #152]	; (aee0 <uart_cb+0x16c>)
}
    ae48:	b006      	add	sp, #24
    ae4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    ae4e:	f017 badf 	b.w	22410 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    ae52:	2030      	movs	r0, #48	; 0x30
    ae54:	f020 fd47 	bl	2b8e6 <k_malloc>
		if (buf) {
    ae58:	4601      	mov	r1, r0
    ae5a:	b150      	cbz	r0, ae72 <uart_cb+0xfe>
			buf->len = 0;
    ae5c:	2300      	movs	r3, #0
	return api->rx_buf_rsp(dev, buf, len);
    ae5e:	2228      	movs	r2, #40	; 0x28
    ae60:	8583      	strh	r3, [r0, #44]	; 0x2c
    ae62:	481a      	ldr	r0, [pc, #104]	; (aecc <uart_cb+0x158>)
    ae64:	3104      	adds	r1, #4
    ae66:	6883      	ldr	r3, [r0, #8]
    ae68:	691b      	ldr	r3, [r3, #16]
}
    ae6a:	b006      	add	sp, #24
    ae6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae70:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    ae72:	4b1a      	ldr	r3, [pc, #104]	; (aedc <uart_cb+0x168>)
    ae74:	e7a3      	b.n	adbe <uart_cb+0x4a>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    ae76:	684b      	ldr	r3, [r1, #4]
    ae78:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
    ae7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    ae7c:	b12b      	cbz	r3, ae8a <uart_cb+0x116>
			k_fifo_put(&fifo_uart_rx_data, buf);
    ae7e:	4819      	ldr	r0, [pc, #100]	; (aee4 <uart_cb+0x170>)
}
    ae80:	b006      	add	sp, #24
    ae82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    ae86:	f020 bb7a 	b.w	2b57e <k_queue_append>
			k_free(buf);
    ae8a:	4608      	mov	r0, r1
}
    ae8c:	b006      	add	sp, #24
    ae8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    ae92:	f020 bd21 	b.w	2b8d8 <k_free>
		if (!aborted_buf) {
    ae96:	4a0a      	ldr	r2, [pc, #40]	; (aec0 <uart_cb+0x14c>)
    ae98:	6813      	ldr	r3, [r2, #0]
    ae9a:	b90b      	cbnz	r3, aea0 <uart_cb+0x12c>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    ae9c:	684b      	ldr	r3, [r1, #4]
    ae9e:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    aea0:	4808      	ldr	r0, [pc, #32]	; (aec4 <uart_cb+0x150>)
    aea2:	688b      	ldr	r3, [r1, #8]
    aea4:	6801      	ldr	r1, [r0, #0]
    aea6:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    aea8:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    aeaa:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
    aeac:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
		uart_tx(uart, &buf->data[aborted_len],
    aeae:	4807      	ldr	r0, [pc, #28]	; (aecc <uart_cb+0x158>)
    aeb0:	1ad2      	subs	r2, r2, r3
    aeb2:	4419      	add	r1, r3
}
    aeb4:	b006      	add	sp, #24
    aeb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
    aeba:	f01b b904 	b.w	260c6 <uart_tx.constprop.0>
    aebe:	bf00      	nop
    aec0:	2000a404 	.word	0x2000a404
    aec4:	2000a400 	.word	0x2000a400
    aec8:	20008d90 	.word	0x20008d90
    aecc:	0002c2e0 	.word	0x0002c2e0
    aed0:	0002dc1f 	.word	0x0002dc1f
    aed4:	0002c8d4 	.word	0x0002c8d4
    aed8:	20021bfe 	.word	0x20021bfe
    aedc:	0002d901 	.word	0x0002d901
    aee0:	20009308 	.word	0x20009308
    aee4:	20008d74 	.word	0x20008d74

0000aee8 <shoot_minute_save_thread>:
void shoot_minute_save_thread(void){
    aee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
    aeec:	f020 fc05 	bl	2b6fa <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    aef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aef4:	fba0 0302 	umull	r0, r3, r0, r2
    aef8:	fb02 3101 	mla	r1, r2, r1, r3
    aefc:	0bc0      	lsrs	r0, r0, #15
   uint64_t actual_time = k_uptime_get()/1000;
    aefe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    af02:	2300      	movs	r3, #0
    af04:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    af08:	0bc9      	lsrs	r1, r1, #15
    af0a:	f7fe f829 	bl	8f60 <__aeabi_ldivmod>
    h = (actual_time/3600); 
    af0e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    af12:	2300      	movs	r3, #0
   uint64_t actual_time = k_uptime_get()/1000;
    af14:	460d      	mov	r5, r1
    af16:	4606      	mov	r6, r0
    h = (actual_time/3600); 
    af18:	f7fe f872 	bl	9000 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    af1c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    af20:	fb03 f100 	mul.w	r1, r3, r0
    af24:	1a70      	subs	r0, r6, r1
    af26:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    af2a:	223c      	movs	r2, #60	; 0x3c
    af2c:	2300      	movs	r3, #0
    af2e:	f7fe f867 	bl	9000 <__aeabi_uldivmod>
    af32:	4605      	mov	r5, r0
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    af34:	4f22      	ldr	r7, [pc, #136]	; (afc0 <shoot_minute_save_thread+0xd8>)
    af36:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    af3a:	f020 fbde 	bl	2b6fa <z_impl_k_uptime_ticks>
    af3e:	fba0 4306 	umull	r4, r3, r0, r6
    af42:	fb06 3101 	mla	r1, r6, r1, r3
    af46:	0be4      	lsrs	r4, r4, #15
    actual_time = k_uptime_get()/1000;
    af48:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    af4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    af50:	2300      	movs	r3, #0
    af52:	0bc9      	lsrs	r1, r1, #15
    af54:	f7fe f804 	bl	8f60 <__aeabi_ldivmod>
	h = (actual_time/3600); 
    af58:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    af5c:	2300      	movs	r3, #0
    actual_time = k_uptime_get()/1000;
    af5e:	4604      	mov	r4, r0
    af60:	468a      	mov	sl, r1
	m = (actual_time -(3600*h))/60;
    af62:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	h = (actual_time/3600); 
    af66:	f7fe f84b 	bl	9000 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    af6a:	fb08 f800 	mul.w	r8, r8, r0
	h = (actual_time/3600); 
    af6e:	4681      	mov	r9, r0
	m = (actual_time -(3600*h))/60;
    af70:	ebb4 0008 	subs.w	r0, r4, r8
    af74:	f04f 023c 	mov.w	r2, #60	; 0x3c
    af78:	eb6a 71e8 	sbc.w	r1, sl, r8, asr #31
    af7c:	2300      	movs	r3, #0
    af7e:	f7fe f83f 	bl	9000 <__aeabi_uldivmod>
   if (m==(last_minute+1)){
    af82:	1c6a      	adds	r2, r5, #1
    af84:	4282      	cmp	r2, r0
    af86:	d1d8      	bne.n	af3a <shoot_minute_save_thread+0x52>
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    af88:	233c      	movs	r3, #60	; 0x3c
        if (m==59){last_minute=-1;}
    af8a:	2a3b      	cmp	r2, #59	; 0x3b
    af8c:	bf14      	ite	ne
    af8e:	4615      	movne	r5, r2
    af90:	f04f 35ff 	moveq.w	r5, #4294967295
	s = (actual_time -(3600*h)-(m*60));
    af94:	eba4 0408 	sub.w	r4, r4, r8
		if (h==24){h=0;} // only up to 23:59:59h
    af98:	f1b9 0f18 	cmp.w	r9, #24
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    af9c:	fb03 4312 	mls	r3, r3, r2, r4
    afa0:	bf14      	ite	ne
    afa2:	4649      	movne	r1, r9
    afa4:	2100      	moveq	r1, #0
    afa6:	4638      	mov	r0, r7
    afa8:	f01b faf9 	bl	2659e <printk>
        feed_circular_buffer();
    afac:	f000 fc48 	bl	b840 <feed_circular_buffer>
		print_current_position_cb(C_Buffer_Current_Position);
    afb0:	4b04      	ldr	r3, [pc, #16]	; (afc4 <shoot_minute_save_thread+0xdc>)
    afb2:	6818      	ldr	r0, [r3, #0]
    afb4:	f000 fd7a 	bl	baac <print_current_position_cb>
		printk(" \n");
    afb8:	4803      	ldr	r0, [pc, #12]	; (afc8 <shoot_minute_save_thread+0xe0>)
    afba:	f01b faf0 	bl	2659e <printk>
    afbe:	e7ba      	b.n	af36 <shoot_minute_save_thread+0x4e>
    afc0:	0002dc3d 	.word	0x0002dc3d
    afc4:	20021548 	.word	0x20021548
    afc8:	0002e16f 	.word	0x0002e16f

0000afcc <ble_write_thread>:
{
    afcc:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    afce:	f04f 32ff 	mov.w	r2, #4294967295
    afd2:	f04f 33ff 	mov.w	r3, #4294967295
    afd6:	480d      	ldr	r0, [pc, #52]	; (b00c <ble_write_thread+0x40>)
    afd8:	f01b f87d 	bl	260d6 <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    afdc:	4d0c      	ldr	r5, [pc, #48]	; (b010 <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    afde:	4e0d      	ldr	r6, [pc, #52]	; (b014 <ble_write_thread+0x48>)
    afe0:	f04f 32ff 	mov.w	r2, #4294967295
    afe4:	f04f 33ff 	mov.w	r3, #4294967295
    afe8:	4628      	mov	r0, r5
    afea:	f016 fc07 	bl	217fc <z_impl_k_queue_get>
    afee:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len)) {
    aff0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    aff2:	1d01      	adds	r1, r0, #4
    aff4:	2000      	movs	r0, #0
    aff6:	f005 f971 	bl	102dc <bt_nus_send>
    affa:	b110      	cbz	r0, b002 <ble_write_thread+0x36>
			printk("Falha aqui- Failed to send data over BLE connection");
    affc:	4630      	mov	r0, r6
    affe:	f01b face 	bl	2659e <printk>
		k_free(buf);
    b002:	4620      	mov	r0, r4
    b004:	f020 fc68 	bl	2b8d8 <k_free>
	for (;;) {
    b008:	e7ea      	b.n	afe0 <ble_write_thread+0x14>
    b00a:	bf00      	nop
    b00c:	20008cb4 	.word	0x20008cb4
    b010:	20008d74 	.word	0x20008d74
    b014:	0002dc6d 	.word	0x0002dc6d

0000b018 <adc_thread>:
}




void adc_thread(void){
    b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b01c:	4e36      	ldr	r6, [pc, #216]	; (b0f8 <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b01e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b0fc <adc_thread+0xe4>
    b022:	b085      	sub	sp, #20
	int err;
    

    while (1) {	
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b024:	4c36      	ldr	r4, [pc, #216]	; (b100 <adc_thread+0xe8>)
    b026:	2700      	movs	r7, #0
    b028:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b02a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b104 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b02e:	7963      	ldrb	r3, [r4, #5]
    b030:	b13b      	cbz	r3, b042 <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b032:	2301      	movs	r3, #1
    b034:	7922      	ldrb	r2, [r4, #4]
    b036:	4093      	lsls	r3, r2
    b038:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b03a:	7c23      	ldrb	r3, [r4, #16]
    b03c:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b03e:	7c63      	ldrb	r3, [r4, #17]
    b040:	7473      	strb	r3, [r6, #17]
    b042:	f04f 32ff 	mov.w	r2, #4294967295
    b046:	f04f 33ff 	mov.w	r3, #4294967295
    b04a:	4650      	mov	r0, sl
    b04c:	f016 f9de 	bl	2140c <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b050:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b052:	68ab      	ldr	r3, [r5, #8]
    b054:	4631      	mov	r1, r6
    b056:	4628      	mov	r0, r5
    b058:	685b      	ldr	r3, [r3, #4]
    b05a:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b05c:	7922      	ldrb	r2, [r4, #4]
    b05e:	f9b8 1000 	ldrsh.w	r1, [r8]
    b062:	4b29      	ldr	r3, [pc, #164]	; (b108 <adc_thread+0xf0>)
    b064:	9201      	str	r2, [sp, #4]
    b066:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

           if (flag==1){
    b06a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b10c <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b06e:	4650      	mov	r0, sl
    b070:	f016 fa9c 	bl	215ac <z_impl_k_mutex_unlock>
    b074:	f8d9 3000 	ldr.w	r3, [r9]
    b078:	9a01      	ldr	r2, [sp, #4]
    b07a:	2b01      	cmp	r3, #1
    b07c:	d12d      	bne.n	b0da <adc_thread+0xc2>
			printk("- %s, channel %d: ",adc_channels[i].dev->name,adc_channels[i].channel_id);
    b07e:	6829      	ldr	r1, [r5, #0]
    b080:	4823      	ldr	r0, [pc, #140]	; (b110 <adc_thread+0xf8>)
    b082:	f01b fa8c 	bl	2659e <printk>
			printk("%"PRId16, buf_adc);
    b086:	f9b8 1000 	ldrsh.w	r1, [r8]
    b08a:	4822      	ldr	r0, [pc, #136]	; (b114 <adc_thread+0xfc>)
    b08c:	f01b fa87 	bl	2659e <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b090:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf_adc;
    b092:	f9b8 5000 	ldrsh.w	r5, [r8]
    b096:	b1e3      	cbz	r3, b0d2 <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b098:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b09a:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b09c:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b0a0:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b0a2:	bf0a      	itet	eq
    b0a4:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b0a6:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b0a8:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b0aa:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b0ac:	bf08      	it	eq
    b0ae:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b0b0:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b0b2:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b0b4:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b0b6:	bf44      	itt	mi
    b0b8:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b0bc:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b0be:	79a0      	ldrb	r0, [r4, #6]
    b0c0:	a903      	add	r1, sp, #12
    b0c2:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b0c4:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b0c6:	f00f fef3 	bl	1aeb0 <adc_gain_invert>
	if (ret == 0) {
    b0ca:	b910      	cbnz	r0, b0d2 <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b0cc:	9d03      	ldr	r5, [sp, #12]
    b0ce:	9b01      	ldr	r3, [sp, #4]
    b0d0:	411d      	asrs	r5, r3
			adc_raw_to_millivolts_dt(&adc_channels[i],&val_mv);
			printk(" = %"PRId32" mV\n", val_mv);
    b0d2:	4629      	mov	r1, r5
    b0d4:	4810      	ldr	r0, [pc, #64]	; (b118 <adc_thread+0x100>)
    b0d6:	f01b fa62 	bl	2659e <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b0da:	3701      	adds	r7, #1
    b0dc:	2f06      	cmp	r7, #6
    b0de:	f104 0414 	add.w	r4, r4, #20
    b0e2:	d1a4      	bne.n	b02e <adc_thread+0x16>
		   }
			
		}
        flag=0;
    b0e4:	2300      	movs	r3, #0
    b0e6:	f8c9 3000 	str.w	r3, [r9]
	return z_impl_k_sleep(timeout);
    b0ea:	2100      	movs	r1, #0
    b0ec:	f640 40cd 	movw	r0, #3277	; 0xccd
    b0f0:	f018 fae2 	bl	236b8 <z_impl_k_sleep>
    while (1) {	
    b0f4:	e796      	b.n	b024 <adc_thread+0xc>
    b0f6:	bf00      	nop
    b0f8:	20008314 	.word	0x20008314
    b0fc:	2000a414 	.word	0x2000a414
    b100:	0002cb60 	.word	0x0002cb60
    b104:	20021be0 	.word	0x20021be0
    b108:	20021bd0 	.word	0x20021bd0
    b10c:	2000a410 	.word	0x2000a410
    b110:	0002dca1 	.word	0x0002dca1
    b114:	0002dcb4 	.word	0x0002dcb4
    b118:	0002dcb8 	.word	0x0002dcb8

0000b11c <button_pressed_4>:
void button_pressed_4(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b11c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b11e:	4805      	ldr	r0, [pc, #20]	; (b134 <button_pressed_4+0x18>)
    b120:	f016 fbd6 	bl	218d0 <z_impl_k_sem_give>
    b124:	f01f fac2 	bl	2a6ac <sys_clock_cycle_get_32>
}
    b128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b12c:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b12e:	4802      	ldr	r0, [pc, #8]	; (b138 <button_pressed_4+0x1c>)
    b130:	f01b ba35 	b.w	2659e <printk>
    b134:	20008ce4 	.word	0x20008ce4
    b138:	0002dcc2 	.word	0x0002dcc2

0000b13c <button_pressed_3>:
void button_pressed_3(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b13c:	b508      	push	{r3, lr}
    b13e:	4805      	ldr	r0, [pc, #20]	; (b154 <button_pressed_3+0x18>)
    b140:	f016 fbc6 	bl	218d0 <z_impl_k_sem_give>
    b144:	f01f fab2 	bl	2a6ac <sys_clock_cycle_get_32>
}
    b148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b14c:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b14e:	4802      	ldr	r0, [pc, #8]	; (b158 <button_pressed_3+0x1c>)
    b150:	f01b ba25 	b.w	2659e <printk>
    b154:	20008ccc 	.word	0x20008ccc
    b158:	0002dcda 	.word	0x0002dcda

0000b15c <button_pressed_2>:
void button_pressed_2(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b15c:	b508      	push	{r3, lr}
    b15e:	4807      	ldr	r0, [pc, #28]	; (b17c <button_pressed_2+0x20>)
    b160:	f016 fbb6 	bl	218d0 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b164:	2101      	movs	r1, #1
    b166:	4806      	ldr	r0, [pc, #24]	; (b180 <button_pressed_2+0x24>)
    b168:	f7ff fcd0 	bl	ab0c <gpio_pin_set_dt.isra.0>
    b16c:	f01f fa9e 	bl	2a6ac <sys_clock_cycle_get_32>
}
    b170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b174:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b176:	4803      	ldr	r0, [pc, #12]	; (b184 <button_pressed_2+0x28>)
    b178:	f01b ba11 	b.w	2659e <printk>
    b17c:	20008d2c 	.word	0x20008d2c
    b180:	0002cbe0 	.word	0x0002cbe0
    b184:	0002dcf2 	.word	0x0002dcf2

0000b188 <flash_test_>:
void flash_test_(void) {
    b188:	b530      	push	{r4, r5, lr}
    b18a:	b085      	sub	sp, #20
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b18c:	483b      	ldr	r0, [pc, #236]	; (b27c <flash_test_+0xf4>)
    b18e:	f015 fc0d 	bl	209ac <z_impl_device_get_binding>
const struct device *flash_dev = device_get_binding(FLASH_DEVICE);
    b192:	9001      	str	r0, [sp, #4]
my_area_partition = (struct flash_area*)k_malloc(sizeof(struct flash_area));
    b194:	2010      	movs	r0, #16
    b196:	f020 fba6 	bl	2b8e6 <k_malloc>
my_area_partition->fa_dev=&flash_dev;
    b19a:	ab01      	add	r3, sp, #4
    b19c:	60c3      	str	r3, [r0, #12]
my_area_partition = (struct flash_area*)k_malloc(sizeof(struct flash_area));
    b19e:	9002      	str	r0, [sp, #8]
err=flash_area_open(DT_FIXED_PARTITION_ID(DT_NODE_BY_FIXED_PARTITION_LABEL(partition_0)), &my_area_partition);
    b1a0:	a902      	add	r1, sp, #8
    b1a2:	2007      	movs	r0, #7
    b1a4:	f004 fc36 	bl	fa14 <flash_area_open>
    b1a8:	4601      	mov	r1, r0
   printf("Result Open:%d \n", err);
    b1aa:	4835      	ldr	r0, [pc, #212]	; (b280 <flash_test_+0xf8>)
    b1ac:	f019 ffd6 	bl	2515c <iprintf>
   printf("fa_id %d device_id %d\n", my_area_partition->fa_id,my_area_partition->fa_device_id);
    b1b0:	9b02      	ldr	r3, [sp, #8]
    b1b2:	4834      	ldr	r0, [pc, #208]	; (b284 <flash_test_+0xfc>)
    b1b4:	785a      	ldrb	r2, [r3, #1]
    b1b6:	7819      	ldrb	r1, [r3, #0]
    b1b8:	f019 ffd0 	bl	2515c <iprintf>
   err = flash_area_erase(my_area_partition, 0, my_area_partition->fa_size);
    b1bc:	9802      	ldr	r0, [sp, #8]
    b1be:	2100      	movs	r1, #0
    b1c0:	6882      	ldr	r2, [r0, #8]
    b1c2:	f01c f96d 	bl	274a0 <flash_area_erase>
   uint32_t buf_word = 0U;
    b1c6:	2400      	movs	r4, #0
   printf("Result Erase:%d size=%lu \n", err,my_area_partition->fa_size);
    b1c8:	9b02      	ldr	r3, [sp, #8]
   err = flash_area_erase(my_area_partition, 0, my_area_partition->fa_size);
    b1ca:	4601      	mov	r1, r0
   printf("Result Erase:%d size=%lu \n", err,my_area_partition->fa_size);
    b1cc:	689a      	ldr	r2, [r3, #8]
    b1ce:	482e      	ldr	r0, [pc, #184]	; (b288 <flash_test_+0x100>)
    b1d0:	f019 ffc4 	bl	2515c <iprintf>
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b1d4:	aa03      	add	r2, sp, #12
    b1d6:	2304      	movs	r3, #4
    b1d8:	2114      	movs	r1, #20
    b1da:	9802      	ldr	r0, [sp, #8]
   uint32_t buf_word = 0U;
    b1dc:	9403      	str	r4, [sp, #12]
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b1de:	f01c f935 	bl	2744c <flash_area_read>
    b1e2:	4605      	mov	r5, r0
   printf("1  Data read: %x\n", buf_word);
    b1e4:	9903      	ldr	r1, [sp, #12]
    b1e6:	4829      	ldr	r0, [pc, #164]	; (b28c <flash_test_+0x104>)
    b1e8:	f019 ffb8 	bl	2515c <iprintf>
   printf("2  Status Read:%d \n", err);
    b1ec:	4629      	mov	r1, r5
    b1ee:	4828      	ldr	r0, [pc, #160]	; (b290 <flash_test_+0x108>)
    b1f0:	f019 ffb4 	bl	2515c <iprintf>
   buf_word = 0x51525357;
    b1f4:	4b27      	ldr	r3, [pc, #156]	; (b294 <flash_test_+0x10c>)
   err = flash_area_write(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b1f6:	aa03      	add	r2, sp, #12
   buf_word = 0x51525357;
    b1f8:	9303      	str	r3, [sp, #12]
   err = flash_area_write(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b1fa:	2114      	movs	r1, #20
    b1fc:	2304      	movs	r3, #4
    b1fe:	9802      	ldr	r0, [sp, #8]
    b200:	f01c f939 	bl	27476 <flash_area_write>
    b204:	4601      	mov	r1, r0
   printf("3  Status Write:%d \n", err);
    b206:	4824      	ldr	r0, [pc, #144]	; (b298 <flash_test_+0x110>)
    b208:	f019 ffa8 	bl	2515c <iprintf>
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b20c:	2304      	movs	r3, #4
    b20e:	aa03      	add	r2, sp, #12
    b210:	2114      	movs	r1, #20
    b212:	9802      	ldr	r0, [sp, #8]
   buf_word = 0x0;
    b214:	9403      	str	r4, [sp, #12]
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b216:	f01c f919 	bl	2744c <flash_area_read>
    b21a:	4605      	mov	r5, r0
   printf("4  Data read: %x\n", buf_word);
    b21c:	9903      	ldr	r1, [sp, #12]
    b21e:	481f      	ldr	r0, [pc, #124]	; (b29c <flash_test_+0x114>)
    b220:	f019 ff9c 	bl	2515c <iprintf>
   printf("5  Status Read:%d \n", err);
    b224:	4629      	mov	r1, r5
    b226:	481e      	ldr	r0, [pc, #120]	; (b2a0 <flash_test_+0x118>)
    b228:	f019 ff98 	bl	2515c <iprintf>
   err = flash_area_erase(my_area_partition, 0, my_area_partition->fa_size);
    b22c:	9802      	ldr	r0, [sp, #8]
    b22e:	4621      	mov	r1, r4
    b230:	6882      	ldr	r2, [r0, #8]
    b232:	f01c f935 	bl	274a0 <flash_area_erase>
    b236:	4601      	mov	r1, r0
   printf("Result Erase:%d \n", err);
    b238:	481a      	ldr	r0, [pc, #104]	; (b2a4 <flash_test_+0x11c>)
    b23a:	f019 ff8f 	bl	2515c <iprintf>
   buf_word = 0x51525358;
    b23e:	4b1a      	ldr	r3, [pc, #104]	; (b2a8 <flash_test_+0x120>)
   err = flash_area_write(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b240:	aa03      	add	r2, sp, #12
   buf_word = 0x51525358;
    b242:	9303      	str	r3, [sp, #12]
   err = flash_area_write(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b244:	2114      	movs	r1, #20
    b246:	2304      	movs	r3, #4
    b248:	9802      	ldr	r0, [sp, #8]
    b24a:	f01c f914 	bl	27476 <flash_area_write>
    b24e:	4601      	mov	r1, r0
   printf("6  Status Write:%d \n", err);
    b250:	4816      	ldr	r0, [pc, #88]	; (b2ac <flash_test_+0x124>)
    b252:	f019 ff83 	bl	2515c <iprintf>
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b256:	2304      	movs	r3, #4
    b258:	aa03      	add	r2, sp, #12
    b25a:	2114      	movs	r1, #20
    b25c:	9802      	ldr	r0, [sp, #8]
   buf_word = 0x0;
    b25e:	9403      	str	r4, [sp, #12]
   err = flash_area_read(my_area_partition, position_info, &buf_word, quantity_of_bytes);
    b260:	f01c f8f4 	bl	2744c <flash_area_read>
    b264:	4604      	mov	r4, r0
   printf("7  Data read: %x\n", buf_word);
    b266:	9903      	ldr	r1, [sp, #12]
    b268:	4811      	ldr	r0, [pc, #68]	; (b2b0 <flash_test_+0x128>)
    b26a:	f019 ff77 	bl	2515c <iprintf>
   printf("8  Status Read:%d \n", err);
    b26e:	4621      	mov	r1, r4
    b270:	4810      	ldr	r0, [pc, #64]	; (b2b4 <flash_test_+0x12c>)
    b272:	f019 ff73 	bl	2515c <iprintf>
}
    b276:	b005      	add	sp, #20
    b278:	bd30      	pop	{r4, r5, pc}
    b27a:	bf00      	nop
    b27c:	0002dd0a 	.word	0x0002dd0a
    b280:	0002dd17 	.word	0x0002dd17
    b284:	0002dd28 	.word	0x0002dd28
    b288:	0002dd3f 	.word	0x0002dd3f
    b28c:	0002dd5a 	.word	0x0002dd5a
    b290:	0002dd6c 	.word	0x0002dd6c
    b294:	51525357 	.word	0x51525357
    b298:	0002dd80 	.word	0x0002dd80
    b29c:	0002dd95 	.word	0x0002dd95
    b2a0:	0002dda7 	.word	0x0002dda7
    b2a4:	0002ddbb 	.word	0x0002ddbb
    b2a8:	51525358 	.word	0x51525358
    b2ac:	0002ddcd 	.word	0x0002ddcd
    b2b0:	0002dde2 	.word	0x0002dde2
    b2b4:	0002ddf4 	.word	0x0002ddf4

0000b2b8 <write_memory_thread>:
void write_memory_thread(void){
    b2b8:	b510      	push	{r4, lr}
		    k_sem_take(&save_memory,K_FOREVER);
    b2ba:	4c05      	ldr	r4, [pc, #20]	; (b2d0 <write_memory_thread+0x18>)
    b2bc:	f04f 32ff 	mov.w	r2, #4294967295
    b2c0:	f04f 33ff 	mov.w	r3, #4294967295
    b2c4:	4620      	mov	r0, r4
    b2c6:	f01a ff06 	bl	260d6 <k_sem_take.constprop.0.isra.0>
		    flash_test_();
    b2ca:	f7ff ff5d 	bl	b188 <flash_test_>
	while(1){
    b2ce:	e7f5      	b.n	b2bc <write_memory_thread+0x4>
    b2d0:	20008d2c 	.word	0x20008d2c

0000b2d4 <send_bluetooth>:
{
    b2d4:	b084      	sub	sp, #16
    b2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2da:	ac06      	add	r4, sp, #24
    b2dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b2e0:	203d      	movs	r0, #61	; 0x3d
    uint32_t comprimento=buf.len;
    b2e2:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b2e6:	f020 fafe 	bl	2b8e6 <k_malloc>
    int k=0;
    b2ea:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b2ec:	4605      	mov	r5, r0
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b2ee:	f8df 8054 	ldr.w	r8, [pc, #84]	; b344 <send_bluetooth+0x70>
    while(k<comprimento-1){
    b2f2:	1e77      	subs	r7, r6, #1
    b2f4:	42a7      	cmp	r7, r4
    b2f6:	d91d      	bls.n	b334 <send_bluetooth+0x60>
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b2f8:	42b4      	cmp	r4, r6
    b2fa:	d301      	bcc.n	b300 <send_bluetooth+0x2c>
    b2fc:	2200      	movs	r2, #0
    b2fe:	e00f      	b.n	b320 <send_bluetooth+0x4c>
    b300:	2200      	movs	r2, #0
    b302:	1e6b      	subs	r3, r5, #1
       data[small_pkt]=buf.data[k];
    b304:	f104 0118 	add.w	r1, r4, #24
    b308:	4469      	add	r1, sp
       small_pkt++;
    b30a:	3201      	adds	r2, #1
	   *(packet_data+small_pkt) = buf.data[k];
    b30c:	7909      	ldrb	r1, [r1, #4]
       small_pkt++;
    b30e:	b292      	uxth	r2, r2
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b310:	2a3d      	cmp	r2, #61	; 0x3d
	   *(packet_data+small_pkt) = buf.data[k];
    b312:	f803 1f01 	strb.w	r1, [r3, #1]!
       k++;
    b316:	f104 0401 	add.w	r4, r4, #1
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b31a:	d001      	beq.n	b320 <send_bluetooth+0x4c>
    b31c:	42a6      	cmp	r6, r4
    b31e:	d8f1      	bhi.n	b304 <send_bluetooth+0x30>
           if (bt_nus_send(NULL, packet_data ,small_pkt)) {
    b320:	4629      	mov	r1, r5
    b322:	2000      	movs	r0, #0
    b324:	f004 ffda 	bl	102dc <bt_nus_send>
    b328:	2800      	cmp	r0, #0
    b32a:	d0e3      	beq.n	b2f4 <send_bluetooth+0x20>
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b32c:	4640      	mov	r0, r8
    b32e:	f01b f936 	bl	2659e <printk>
    b332:	e7df      	b.n	b2f4 <send_bluetooth+0x20>
     k_free(packet_data);
    b334:	4628      	mov	r0, r5
    b336:	f020 facf 	bl	2b8d8 <k_free>
}
    b33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b33e:	2000      	movs	r0, #0
    b340:	b004      	add	sp, #16
    b342:	4770      	bx	lr
    b344:	0002de08 	.word	0x0002de08

0000b348 <send_protobuf_thread>:
void send_protobuf_thread(void){
    b348:	b510      	push	{r4, lr}
		    k_sem_take(&send_proto,K_FOREVER);
    b34a:	4c05      	ldr	r4, [pc, #20]	; (b360 <send_protobuf_thread+0x18>)
    b34c:	f04f 32ff 	mov.w	r2, #4294967295
    b350:	f04f 33ff 	mov.w	r3, #4294967295
    b354:	4620      	mov	r0, r4
    b356:	f01a febe 	bl	260d6 <k_sem_take.constprop.0.isra.0>
		    send_protobuf();
    b35a:	f01a fec4 	bl	260e6 <send_protobuf>
   while(1){
    b35e:	e7f5      	b.n	b34c <send_protobuf_thread+0x4>
    b360:	20008d5c 	.word	0x20008d5c

0000b364 <configure_all_buttons>:
void configure_all_buttons(void){
    b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b366:	4c30      	ldr	r4, [pc, #192]	; (b428 <configure_all_buttons+0xc4>)
    b368:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b36c:	4620      	mov	r0, r4
    b36e:	f7ff fc95 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b372:	4620      	mov	r0, r4
    b374:	f7ff f9f6 	bl	a764 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b378:	492c      	ldr	r1, [pc, #176]	; (b42c <configure_all_buttons+0xc8>)
    b37a:	4b2d      	ldr	r3, [pc, #180]	; (b430 <configure_all_buttons+0xcc>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b37c:	4c2d      	ldr	r4, [pc, #180]	; (b434 <configure_all_buttons+0xd0>)
    b37e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b380:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b384:	4620      	mov	r0, r4
    b386:	608b      	str	r3, [r1, #8]
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b388:	4d2b      	ldr	r5, [pc, #172]	; (b438 <configure_all_buttons+0xd4>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b38a:	f01a fea6 	bl	260da <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b38e:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b390:	4f2a      	ldr	r7, [pc, #168]	; (b43c <configure_all_buttons+0xd8>)
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b392:	2217      	movs	r2, #23
    b394:	4631      	mov	r1, r6
    b396:	4628      	mov	r0, r5
    b398:	f01b f901 	bl	2659e <printk>
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b39c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b3a0:	4638      	mov	r0, r7
    b3a2:	f7ff fc7b 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b3a6:	4638      	mov	r0, r7
    b3a8:	f7ff f9dc 	bl	a764 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b3ac:	4924      	ldr	r1, [pc, #144]	; (b440 <configure_all_buttons+0xdc>)
    b3ae:	4b25      	ldr	r3, [pc, #148]	; (b444 <configure_all_buttons+0xe0>)
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b3b0:	4620      	mov	r0, r4
    b3b2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b3b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b3b8:	4f23      	ldr	r7, [pc, #140]	; (b448 <configure_all_buttons+0xe4>)
    b3ba:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b3bc:	f01a fe8d 	bl	260da <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b3c0:	2218      	movs	r2, #24
    b3c2:	4631      	mov	r1, r6
    b3c4:	4628      	mov	r0, r5
    b3c6:	f01b f8ea 	bl	2659e <printk>
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b3ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b3ce:	4638      	mov	r0, r7
    b3d0:	f7ff fc64 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON3_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b3d4:	4638      	mov	r0, r7
    b3d6:	f7ff f9c5 	bl	a764 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b3da:	491c      	ldr	r1, [pc, #112]	; (b44c <configure_all_buttons+0xe8>)
    b3dc:	4b1c      	ldr	r3, [pc, #112]	; (b450 <configure_all_buttons+0xec>)
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b3de:	4620      	mov	r0, r4
    b3e0:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b3e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b3e6:	4f1b      	ldr	r7, [pc, #108]	; (b454 <configure_all_buttons+0xf0>)
    b3e8:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b3ea:	f01a fe76 	bl	260da <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b3ee:	2208      	movs	r2, #8
    b3f0:	4631      	mov	r1, r6
    b3f2:	4628      	mov	r0, r5
    b3f4:	f01b f8d3 	bl	2659e <printk>
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b3f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b3fc:	4638      	mov	r0, r7
    b3fe:	f7ff fc4d 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON4_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b402:	4638      	mov	r0, r7
    b404:	f7ff f9ae 	bl	a764 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b408:	4913      	ldr	r1, [pc, #76]	; (b458 <configure_all_buttons+0xf4>)
    b40a:	4b14      	ldr	r3, [pc, #80]	; (b45c <configure_all_buttons+0xf8>)
 gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b40c:	4620      	mov	r0, r4
    b40e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b410:	f44f 7300 	mov.w	r3, #512	; 0x200
    b414:	608b      	str	r3, [r1, #8]
    b416:	f01a fe60 	bl	260da <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b41a:	4631      	mov	r1, r6
    b41c:	4628      	mov	r0, r5
}
    b41e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b422:	2209      	movs	r2, #9
    b424:	f01b b8bb 	b.w	2659e <printk>
    b428:	0002cc28 	.word	0x0002cc28
    b42c:	2000a470 	.word	0x2000a470
    b430:	0000ab71 	.word	0x0000ab71
    b434:	0002c298 	.word	0x0002c298
    b438:	0002de2c 	.word	0x0002de2c
    b43c:	0002cc20 	.word	0x0002cc20
    b440:	2000a464 	.word	0x2000a464
    b444:	0000b15d 	.word	0x0000b15d
    b448:	0002cc18 	.word	0x0002cc18
    b44c:	2000a458 	.word	0x2000a458
    b450:	0000b13d 	.word	0x0000b13d
    b454:	0002cc10 	.word	0x0002cc10
    b458:	2000a44c 	.word	0x2000a44c
    b45c:	0000b11d 	.word	0x0000b11d

0000b460 <configure_digital_inputs>:
void configure_digital_inputs(void){
    b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT );
    b462:	4c2e      	ldr	r4, [pc, #184]	; (b51c <configure_digital_inputs+0xbc>)
    b464:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b468:	4620      	mov	r0, r4
    b46a:	f7ff fc17 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 4 Value:%d \n",gpio_pin_get_dt(DIG_0_ADR));
    b46e:	4620      	mov	r0, r4
    b470:	f7ff f8aa 	bl	a5c8 <gpio_pin_get_dt>
    b474:	4601      	mov	r1, r0
    b476:	482a      	ldr	r0, [pc, #168]	; (b520 <configure_digital_inputs+0xc0>)
    b478:	f01b f891 	bl	2659e <printk>
 gpio_pin_interrupt_configure_dt(DIG_0_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b47c:	4620      	mov	r0, r4
    b47e:	f7ff f971 	bl	a764 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b482:	4928      	ldr	r1, [pc, #160]	; (b524 <configure_digital_inputs+0xc4>)
    b484:	4b28      	ldr	r3, [pc, #160]	; (b528 <configure_digital_inputs+0xc8>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b486:	4c29      	ldr	r4, [pc, #164]	; (b52c <configure_digital_inputs+0xcc>)
    b488:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b48a:	2310      	movs	r3, #16
    b48c:	4620      	mov	r0, r4
    b48e:	608b      	str	r3, [r1, #8]
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b490:	4d27      	ldr	r5, [pc, #156]	; (b530 <configure_digital_inputs+0xd0>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b492:	f01a fe22 	bl	260da <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b496:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b498:	4f26      	ldr	r7, [pc, #152]	; (b534 <configure_digital_inputs+0xd4>)
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b49a:	2204      	movs	r2, #4
    b49c:	4631      	mov	r1, r6
    b49e:	4628      	mov	r0, r5
    b4a0:	f01b f87d 	bl	2659e <printk>
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b4a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b4a8:	4638      	mov	r0, r7
    b4aa:	f7ff fbf7 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 5 Value:%d \n",gpio_pin_get_dt(DIG_1_ADR));
    b4ae:	4638      	mov	r0, r7
    b4b0:	f7ff f88a 	bl	a5c8 <gpio_pin_get_dt>
    b4b4:	4601      	mov	r1, r0
    b4b6:	4820      	ldr	r0, [pc, #128]	; (b538 <configure_digital_inputs+0xd8>)
    b4b8:	f01b f871 	bl	2659e <printk>
 gpio_pin_interrupt_configure_dt(DIG_1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b4bc:	4638      	mov	r0, r7
    b4be:	f7ff f951 	bl	a764 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b4c2:	491e      	ldr	r1, [pc, #120]	; (b53c <configure_digital_inputs+0xdc>)
    b4c4:	4b1e      	ldr	r3, [pc, #120]	; (b540 <configure_digital_inputs+0xe0>)
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b4c6:	4f1f      	ldr	r7, [pc, #124]	; (b544 <configure_digital_inputs+0xe4>)
    b4c8:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b4ca:	2320      	movs	r3, #32
 gpio_add_callback(DIG_1.port, DIG_1_CB);
    b4cc:	4620      	mov	r0, r4
    b4ce:	608b      	str	r3, [r1, #8]
    b4d0:	f01a fe03 	bl	260da <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b4d4:	2205      	movs	r2, #5
    b4d6:	4631      	mov	r1, r6
    b4d8:	4628      	mov	r0, r5
    b4da:	f01b f860 	bl	2659e <printk>
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b4de:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b4e2:	4638      	mov	r0, r7
    b4e4:	f7ff fbda 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 6 Value:%d \n",gpio_pin_get_dt(DIG_2_ADR));
    b4e8:	4638      	mov	r0, r7
    b4ea:	f7ff f86d 	bl	a5c8 <gpio_pin_get_dt>
    b4ee:	4601      	mov	r1, r0
    b4f0:	4815      	ldr	r0, [pc, #84]	; (b548 <configure_digital_inputs+0xe8>)
    b4f2:	f01b f854 	bl	2659e <printk>
 gpio_pin_interrupt_configure_dt(DIG_2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b4f6:	4638      	mov	r0, r7
    b4f8:	f7ff f934 	bl	a764 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b4fc:	4913      	ldr	r1, [pc, #76]	; (b54c <configure_digital_inputs+0xec>)
    b4fe:	4b14      	ldr	r3, [pc, #80]	; (b550 <configure_digital_inputs+0xf0>)
 gpio_add_callback(DIG_2.port, DIG_2_CB);
    b500:	4620      	mov	r0, r4
    b502:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b504:	2340      	movs	r3, #64	; 0x40
    b506:	608b      	str	r3, [r1, #8]
    b508:	f01a fde7 	bl	260da <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b50c:	4631      	mov	r1, r6
    b50e:	4628      	mov	r0, r5
}
    b510:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b514:	2206      	movs	r2, #6
    b516:	f01b b842 	b.w	2659e <printk>
    b51a:	bf00      	nop
    b51c:	0002cc08 	.word	0x0002cc08
    b520:	0002de48 	.word	0x0002de48
    b524:	2000a440 	.word	0x2000a440
    b528:	0000a629 	.word	0x0000a629
    b52c:	0002c280 	.word	0x0002c280
    b530:	0002de60 	.word	0x0002de60
    b534:	0002cc00 	.word	0x0002cc00
    b538:	0002de83 	.word	0x0002de83
    b53c:	2000a434 	.word	0x2000a434
    b540:	0000a64d 	.word	0x0000a64d
    b544:	0002cbf8 	.word	0x0002cbf8
    b548:	0002de9b 	.word	0x0002de9b
    b54c:	2000a428 	.word	0x2000a428
    b550:	0000a671 	.word	0x0000a671

0000b554 <configure_led>:
void configure_led(void){
    b554:	b508      	push	{r3, lr}
 gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    b556:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b55a:	480a      	ldr	r0, [pc, #40]	; (b584 <configure_led+0x30>)
    b55c:	f7ff fb9e 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    b560:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b564:	4808      	ldr	r0, [pc, #32]	; (b588 <configure_led+0x34>)
    b566:	f7ff fb99 	bl	ac9c <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    b56a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b56e:	4807      	ldr	r0, [pc, #28]	; (b58c <configure_led+0x38>)
    b570:	f7ff fb94 	bl	ac9c <gpio_pin_configure_dt.isra.0>
}
    b574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    b578:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b57c:	4804      	ldr	r0, [pc, #16]	; (b590 <configure_led+0x3c>)
    b57e:	f7ff bb8d 	b.w	ac9c <gpio_pin_configure_dt.isra.0>
    b582:	bf00      	nop
    b584:	0002cbf0 	.word	0x0002cbf0
    b588:	0002cbe8 	.word	0x0002cbe8
    b58c:	0002cbe0 	.word	0x0002cbe0
    b590:	0002cbd8 	.word	0x0002cbd8

0000b594 <turn_off_all_leds>:
void turn_off_all_leds(void){
    b594:	b508      	push	{r3, lr}
       gpio_pin_set_dt(LED1, OFF);
    b596:	2100      	movs	r1, #0
    b598:	4808      	ldr	r0, [pc, #32]	; (b5bc <turn_off_all_leds+0x28>)
    b59a:	f7ff fab7 	bl	ab0c <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED2, OFF);
    b59e:	2100      	movs	r1, #0
    b5a0:	4807      	ldr	r0, [pc, #28]	; (b5c0 <turn_off_all_leds+0x2c>)
    b5a2:	f7ff fab3 	bl	ab0c <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED3, OFF);
    b5a6:	2100      	movs	r1, #0
    b5a8:	4806      	ldr	r0, [pc, #24]	; (b5c4 <turn_off_all_leds+0x30>)
    b5aa:	f7ff faaf 	bl	ab0c <gpio_pin_set_dt.isra.0>
}
    b5ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       gpio_pin_set_dt(LED4, OFF);
    b5b2:	2100      	movs	r1, #0
    b5b4:	4804      	ldr	r0, [pc, #16]	; (b5c8 <turn_off_all_leds+0x34>)
    b5b6:	f7ff baa9 	b.w	ab0c <gpio_pin_set_dt.isra.0>
    b5ba:	bf00      	nop
    b5bc:	0002cbf0 	.word	0x0002cbf0
    b5c0:	0002cbe8 	.word	0x0002cbe8
    b5c4:	0002cbe0 	.word	0x0002cbe0
    b5c8:	0002cbd8 	.word	0x0002cbd8

0000b5cc <configure_adc>:
void configure_adc(void){
    b5cc:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b5ce:	2500      	movs	r5, #0
    b5d0:	4c12      	ldr	r4, [pc, #72]	; (b61c <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    b5d2:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b5d6:	f01f ff69 	bl	2b4ac <z_device_is_ready>
    b5da:	b920      	cbnz	r0, b5e6 <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    b5dc:	4810      	ldr	r0, [pc, #64]	; (b620 <configure_adc+0x54>)
}
    b5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    b5e2:	f01a bfdc 	b.w	2659e <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b5e6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b5ea:	b16b      	cbz	r3, b608 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    b5ec:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    b5f0:	6883      	ldr	r3, [r0, #8]
    b5f2:	4621      	mov	r1, r4
    b5f4:	681b      	ldr	r3, [r3, #0]
    b5f6:	4798      	blx	r3
		if (err < 0) {
    b5f8:	1e02      	subs	r2, r0, #0
    b5fa:	da08      	bge.n	b60e <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b5fc:	4629      	mov	r1, r5
}
    b5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    b602:	4808      	ldr	r0, [pc, #32]	; (b624 <configure_adc+0x58>)
    b604:	f01a bfcb 	b.w	2659e <printk>
		return -ENOTSUP;
    b608:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b60c:	e7f6      	b.n	b5fc <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b60e:	3501      	adds	r5, #1
    b610:	2d06      	cmp	r5, #6
    b612:	f104 0414 	add.w	r4, r4, #20
    b616:	d1dc      	bne.n	b5d2 <configure_adc+0x6>
}
    b618:	bd38      	pop	{r3, r4, r5, pc}
    b61a:	bf00      	nop
    b61c:	0002cb66 	.word	0x0002cb66
    b620:	0002deb3 	.word	0x0002deb3
    b624:	0002ded4 	.word	0x0002ded4

0000b628 <main>:
{
    b628:	b570      	push	{r4, r5, r6, lr}
    b62a:	b08a      	sub	sp, #40	; 0x28
	return z_impl_k_mutex_init(mutex);
    b62c:	4856      	ldr	r0, [pc, #344]	; (b788 <main+0x160>)
    b62e:	f01f ff86 	bl	2b53e <z_impl_k_mutex_init>
	configure_led();
    b632:	f7ff ff8f 	bl	b554 <configure_led>
	turn_off_all_leds();
    b636:	f7ff ffad 	bl	b594 <turn_off_all_leds>
 	configure_all_buttons();
    b63a:	f7ff fe93 	bl	b364 <configure_all_buttons>
	configure_digital_inputs();
    b63e:	f7ff ff0f 	bl	b460 <configure_digital_inputs>
	configure_adc();
    b642:	f7ff ffc3 	bl	b5cc <configure_adc>
    b646:	4d51      	ldr	r5, [pc, #324]	; (b78c <main+0x164>)
    b648:	4628      	mov	r0, r5
    b64a:	f01f ff2f 	bl	2b4ac <z_device_is_ready>
	if (!device_is_ready(uart)) {
    b64e:	b1d0      	cbz	r0, b686 <main+0x5e>
	rx = k_malloc(sizeof(*rx));
    b650:	2030      	movs	r0, #48	; 0x30
    b652:	f020 f948 	bl	2b8e6 <k_malloc>
	if (rx) {
    b656:	4604      	mov	r4, r0
    b658:	b1a8      	cbz	r0, b686 <main+0x5e>
		rx->len = 0;
    b65a:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    b65c:	494c      	ldr	r1, [pc, #304]	; (b790 <main+0x168>)
		rx->len = 0;
    b65e:	8586      	strh	r6, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
    b660:	484c      	ldr	r0, [pc, #304]	; (b794 <main+0x16c>)
    b662:	f016 fdb9 	bl	221d8 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b666:	68ab      	ldr	r3, [r5, #8]
    b668:	681b      	ldr	r3, [r3, #0]
    b66a:	b973      	cbnz	r3, b68a <main+0x62>
		k_free(rx);
    b66c:	4620      	mov	r0, r4
    b66e:	f020 f933 	bl	2b8d8 <k_free>
		LOG_ERR("Cannot initialize UART callback");
    b672:	4b49      	ldr	r3, [pc, #292]	; (b798 <main+0x170>)
    b674:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b678:	9309      	str	r3, [sp, #36]	; 0x24
    b67a:	2302      	movs	r3, #2
    b67c:	4847      	ldr	r0, [pc, #284]	; (b79c <main+0x174>)
    b67e:	aa08      	add	r2, sp, #32
    b680:	9308      	str	r3, [sp, #32]
    b682:	f01a fd15 	bl	260b0 <z_log_msg_static_create.constprop.0>
		error();
    b686:	f01a fd44 	bl	26112 <error>
	return api->callback_set(dev, callback, user_data);
    b68a:	4632      	mov	r2, r6
    b68c:	4628      	mov	r0, r5
    b68e:	4944      	ldr	r1, [pc, #272]	; (b7a0 <main+0x178>)
    b690:	4798      	blx	r3
	if (err) {
    b692:	2800      	cmp	r0, #0
    b694:	d1ea      	bne.n	b66c <main+0x44>
	tx = k_malloc(sizeof(*tx));
    b696:	2030      	movs	r0, #48	; 0x30
    b698:	f020 f925 	bl	2b8e6 <k_malloc>
	if (tx) {
    b69c:	4606      	mov	r6, r0
    b69e:	2800      	cmp	r0, #0
    b6a0:	d0f1      	beq.n	b686 <main+0x5e>
		pos = snprintf(tx->data, sizeof(tx->data),
    b6a2:	1d03      	adds	r3, r0, #4
    b6a4:	4618      	mov	r0, r3
    b6a6:	493f      	ldr	r1, [pc, #252]	; (b7a4 <main+0x17c>)
    b6a8:	f020 faa2 	bl	2bbf0 <strcpy>
		tx->len = pos;
    b6ac:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b6ae:	4601      	mov	r1, r0
		tx->len = pos;
    b6b0:	85b2      	strh	r2, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b6b2:	4628      	mov	r0, r5
    b6b4:	f01a fd07 	bl	260c6 <uart_tx.constprop.0>
	if (err) {
    b6b8:	4601      	mov	r1, r0
    b6ba:	b118      	cbz	r0, b6c4 <main+0x9c>
		printf("Cannot display welcome message (err: %d)", err);
    b6bc:	483a      	ldr	r0, [pc, #232]	; (b7a8 <main+0x180>)
    b6be:	f019 fd4d 	bl	2515c <iprintf>
	if (err) {
    b6c2:	e7e0      	b.n	b686 <main+0x5e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
    b6c4:	4628      	mov	r0, r5
    b6c6:	1d21      	adds	r1, r4, #4
    b6c8:	f01a fcf5 	bl	260b6 <uart_rx_enable.constprop.0>
	if (err) {
    b6cc:	2800      	cmp	r0, #0
    b6ce:	d1da      	bne.n	b686 <main+0x5e>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    b6d0:	4836      	ldr	r0, [pc, #216]	; (b7ac <main+0x184>)
    b6d2:	f009 fef5 	bl	154c0 <bt_conn_auth_cb_register>
		if (err) {
    b6d6:	b128      	cbz	r0, b6e4 <main+0xbc>
			printk("Failed to register authorization callbacks.\n");
    b6d8:	4835      	ldr	r0, [pc, #212]	; (b7b0 <main+0x188>)
}
    b6da:	b00a      	add	sp, #40	; 0x28
    b6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    b6e0:	f01a bf5d 	b.w	2659e <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    b6e4:	4833      	ldr	r0, [pc, #204]	; (b7b4 <main+0x18c>)
    b6e6:	f009 ff05 	bl	154f4 <bt_conn_auth_info_cb_register>
		if (err) {
    b6ea:	b108      	cbz	r0, b6f0 <main+0xc8>
			printk("Failed to register authorization info callbacks.\n");
    b6ec:	4832      	ldr	r0, [pc, #200]	; (b7b8 <main+0x190>)
    b6ee:	e7f4      	b.n	b6da <main+0xb2>
	err = bt_enable(NULL);
    b6f0:	f007 fd78 	bl	131e4 <bt_enable>
	if (err) {
    b6f4:	2800      	cmp	r0, #0
    b6f6:	d1c6      	bne.n	b686 <main+0x5e>
	printf("Bluetooth initialized \n\r");
    b6f8:	4830      	ldr	r0, [pc, #192]	; (b7bc <main+0x194>)
    b6fa:	f019 fd2f 	bl	2515c <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    b6fe:	4830      	ldr	r0, [pc, #192]	; (b7c0 <main+0x198>)
    b700:	f019 fd2c 	bl	2515c <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    b704:	482f      	ldr	r0, [pc, #188]	; (b7c4 <main+0x19c>)
    b706:	f019 fd29 	bl	2515c <iprintf>
	z_impl_k_sem_give(sem);
    b70a:	482f      	ldr	r0, [pc, #188]	; (b7c8 <main+0x1a0>)
    b70c:	f016 f8e0 	bl	218d0 <z_impl_k_sem_give>
		settings_load();
    b710:	f01b fefc 	bl	2750c <settings_load>
	err = bt_nus_init(&nus_cb);
    b714:	482d      	ldr	r0, [pc, #180]	; (b7cc <main+0x1a4>)
    b716:	f004 fdd5 	bl	102c4 <bt_nus_init>
	if (err) {
    b71a:	4601      	mov	r1, r0
    b71c:	b128      	cbz	r0, b72a <main+0x102>
		printf("Failed to initialize UART service (err: %d)", err);
    b71e:	482c      	ldr	r0, [pc, #176]	; (b7d0 <main+0x1a8>)
}
    b720:	b00a      	add	sp, #40	; 0x28
    b722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    b726:	f019 bd19 	b.w	2515c <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    b72a:	4d2a      	ldr	r5, [pc, #168]	; (b7d4 <main+0x1ac>)
    b72c:	ac04      	add	r4, sp, #16
    b72e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b732:	682b      	ldr	r3, [r5, #0]
    b734:	2501      	movs	r5, #1
    b736:	6023      	str	r3, [r4, #0]
    b738:	2202      	movs	r2, #2
    b73a:	4b27      	ldr	r3, [pc, #156]	; (b7d8 <main+0x1b0>)
    b73c:	4927      	ldr	r1, [pc, #156]	; (b7dc <main+0x1b4>)
    b73e:	9500      	str	r5, [sp, #0]
    b740:	a804      	add	r0, sp, #16
    b742:	f008 fc29 	bl	13f98 <bt_le_adv_start>
	if (err) {
    b746:	4604      	mov	r4, r0
    b748:	b128      	cbz	r0, b756 <main+0x12e>
		printf("Advertising failed to start (err %d)", err);
    b74a:	4601      	mov	r1, r0
    b74c:	4824      	ldr	r0, [pc, #144]	; (b7e0 <main+0x1b8>)
    b74e:	f019 fd05 	bl	2515c <iprintf>
}
    b752:	b00a      	add	sp, #40	; 0x28
    b754:	bd70      	pop	{r4, r5, r6, pc}
	flag=1;//print ad values once
    b756:	4b23      	ldr	r3, [pc, #140]	; (b7e4 <main+0x1bc>)
    ntc_temperature(1000);
    b758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	flag=1;//print ad values once
    b75c:	601d      	str	r5, [r3, #0]
    ntc_temperature(1000);
    b75e:	f7fd fe07 	bl	9370 <ntc_temperature>
    b762:	4e21      	ldr	r6, [pc, #132]	; (b7e8 <main+0x1c0>)
    b764:	ad02      	add	r5, sp, #8
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    b766:	3401      	adds	r4, #1
    b768:	e896 0003 	ldmia.w	r6, {r0, r1}
    b76c:	e885 0003 	stmia.w	r5, {r0, r1}
        gpio_pin_set_dt(&led, value);
    b770:	4628      	mov	r0, r5
    b772:	f004 0101 	and.w	r1, r4, #1
    b776:	f7ff f9c9 	bl	ab0c <gpio_pin_set_dt.isra.0>
	return z_impl_k_sleep(timeout);
    b77a:	2100      	movs	r1, #0
    b77c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    b780:	f017 ff9a 	bl	236b8 <z_impl_k_sleep>
	for (;;) {
    b784:	e7ef      	b.n	b766 <main+0x13e>
    b786:	bf00      	nop
    b788:	2000a414 	.word	0x2000a414
    b78c:	0002c2e0 	.word	0x0002c2e0
    b790:	0000a6c9 	.word	0x0000a6c9
    b794:	20009308 	.word	0x20009308
    b798:	0002def6 	.word	0x0002def6
    b79c:	0002c8d4 	.word	0x0002c8d4
    b7a0:	0000ad75 	.word	0x0000ad75
    b7a4:	0002df16 	.word	0x0002df16
    b7a8:	0002df3d 	.word	0x0002df3d
    b7ac:	200082fc 	.word	0x200082fc
    b7b0:	0002df66 	.word	0x0002df66
    b7b4:	200082ec 	.word	0x200082ec
    b7b8:	0002df93 	.word	0x0002df93
    b7bc:	0002dfc5 	.word	0x0002dfc5
    b7c0:	0002dfde 	.word	0x0002dfde
    b7c4:	0002dfff 	.word	0x0002dfff
    b7c8:	20008cb4 	.word	0x20008cb4
    b7cc:	200082e0 	.word	0x200082e0
    b7d0:	0002e028 	.word	0x0002e028
    b7d4:	0002c9a0 	.word	0x0002c9a0
    b7d8:	0002cb48 	.word	0x0002cb48
    b7dc:	0002cb50 	.word	0x0002cb50
    b7e0:	0002e054 	.word	0x0002e054
    b7e4:	2000a410 	.word	0x2000a410
    b7e8:	0002cbe8 	.word	0x0002cbe8

0000b7ec <time_stamp_function>:
uint32_t time_stamp_function(void){
    b7ec:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    b7ee:	f01f ff84 	bl	2b6fa <z_impl_k_uptime_ticks>
    b7f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b7f6:	fba0 0302 	umull	r0, r3, r0, r2
    b7fa:	fb02 3101 	mla	r1, r2, r1, r3
    b7fe:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    b800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b804:	2300      	movs	r3, #0
    b806:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    b80a:	0bc9      	lsrs	r1, r1, #15
    b80c:	f7fd fba8 	bl	8f60 <__aeabi_ldivmod>
    b810:	4603      	mov	r3, r0
}
    b812:	4801      	ldr	r0, [pc, #4]	; (b818 <time_stamp_function+0x2c>)
    b814:	4418      	add	r0, r3
    b816:	bd08      	pop	{r3, pc}
    b818:	61cf9980 	.word	0x61cf9980

0000b81c <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    b81c:	b538      	push	{r3, r4, r5, lr}
    b81e:	460d      	mov	r5, r1
    b820:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    b822:	f7ff ffe3 	bl	b7ec <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    b826:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    b828:	4b04      	ldr	r3, [pc, #16]	; (b83c <values_of_digital_sensor+0x20>)
    b82a:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    b82e:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    b832:	e9c4 0200 	strd	r0, r2, [r4]
}
    b836:	4620      	mov	r0, r4
    b838:	bd38      	pop	{r3, r4, r5, pc}
    b83a:	bf00      	nop
    b83c:	20021bc0 	.word	0x20021bc0

0000b840 <feed_circular_buffer>:
void feed_circular_buffer(void){
    b840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    b844:	4d2f      	ldr	r5, [pc, #188]	; (b904 <feed_circular_buffer+0xc4>)
    b846:	4b30      	ldr	r3, [pc, #192]	; (b908 <feed_circular_buffer+0xc8>)
    b848:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    b84a:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    b84e:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    b850:	d256      	bcs.n	b900 <feed_circular_buffer+0xc0>
  gnss_return_value.timestamp=time_stamp_function();
    b852:	f7ff ffcb 	bl	b7ec <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    b856:	f04f 0800 	mov.w	r8, #0
    b85a:	4c2c      	ldr	r4, [pc, #176]	; (b90c <feed_circular_buffer+0xcc>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    b85c:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    b85e:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    b862:	e9c6 8802 	strd	r8, r8, [r6, #8]
    b866:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    b868:	f7ff ffc0 	bl	b7ec <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    b86c:	4e28      	ldr	r6, [pc, #160]	; (b910 <feed_circular_buffer+0xd0>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    b86e:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    b872:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    b876:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    b878:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    b87c:	f7ff ffb6 	bl	b7ec <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    b880:	682b      	ldr	r3, [r5, #0]
    b882:	8872      	ldrh	r2, [r6, #2]
    b884:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    b888:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    b88a:	f7ff ffaf 	bl	b7ec <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    b88e:	682b      	ldr	r3, [r5, #0]
    b890:	88b2      	ldrh	r2, [r6, #4]
    b892:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    b896:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    b898:	f7ff ffa8 	bl	b7ec <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    b89c:	682b      	ldr	r3, [r5, #0]
    b89e:	88f2      	ldrh	r2, [r6, #6]
    b8a0:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    b8a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    b8a6:	f7ff ffa1 	bl	b7ec <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    b8aa:	682b      	ldr	r3, [r5, #0]
    b8ac:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    b8b0:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    b8b2:	f7ff ff9b 	bl	b7ec <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    b8b6:	682b      	ldr	r3, [r5, #0]
    b8b8:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    b8bc:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    b8be:	f7ff ff95 	bl	b7ec <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    b8c2:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    b8c4:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    b8c6:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    b8ca:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    b8cc:	4638      	mov	r0, r7
    b8ce:	f7ff ffa5 	bl	b81c <values_of_digital_sensor>
    b8d2:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    b8d6:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    b8d8:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    b8da:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    b8de:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    b8e2:	3438      	adds	r4, #56	; 0x38
    b8e4:	2101      	movs	r1, #1
    b8e6:	4638      	mov	r0, r7
    b8e8:	f7ff ff98 	bl	b81c <values_of_digital_sensor>
    b8ec:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer_Free_Position++;
    b8f0:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    b8f2:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer_Free_Position++;
    b8f6:	3301      	adds	r3, #1
    b8f8:	602b      	str	r3, [r5, #0]
}
    b8fa:	b002      	add	sp, #8
    b8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b900:	2300      	movs	r3, #0
    b902:	e7f9      	b.n	b8f8 <feed_circular_buffer+0xb8>
    b904:	2002154c 	.word	0x2002154c
    b908:	20021548 	.word	0x20021548
    b90c:	2000ad48 	.word	0x2000ad48
    b910:	20021bd0 	.word	0x20021bd0

0000b914 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    b914:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    b916:	4b1c      	ldr	r3, [pc, #112]	; (b988 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    b918:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    b91a:	6818      	ldr	r0, [r3, #0]
    b91c:	889b      	ldrh	r3, [r3, #4]
    b91e:	9000      	str	r0, [sp, #0]
    b920:	2218      	movs	r2, #24
    b922:	2100      	movs	r1, #0
    b924:	f10d 0006 	add.w	r0, sp, #6
    b928:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    b92c:	2601      	movs	r6, #1
   char tag[30]="10203";
    b92e:	f020 f837 	bl	2b9a0 <memset>
     msg.positions.timestamp=1;
    b932:	2300      	movs	r3, #0
    msg.timestamp=0;
    b934:	4c15      	ldr	r4, [pc, #84]	; (b98c <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    b936:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    b938:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    b93c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b940:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    b942:	4b13      	ldr	r3, [pc, #76]	; (b990 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    b944:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    b946:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    b948:	230b      	movs	r3, #11
    b94a:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    b94c:	4b11      	ldr	r3, [pc, #68]	; (b994 <fill_fields_to_test+0x80>)
    b94e:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    b950:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    b952:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    b954:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    b956:	7766      	strb	r6, [r4, #29]
    b958:	f104 001e 	add.w	r0, r4, #30
    b95c:	f020 f948 	bl	2bbf0 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    b960:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    b964:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    b968:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    b96c:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    b96e:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    b972:	f7fd f951 	bl	8c18 <__aeabi_i2f>
   while (sensor_id<6){
    b976:	3501      	adds	r5, #1
    b978:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    b97a:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    b97c:	f104 0424 	add.w	r4, r4, #36	; 0x24
    b980:	d1e6      	bne.n	b950 <fill_fields_to_test+0x3c>
}
    b982:	4802      	ldr	r0, [pc, #8]	; (b98c <fill_fields_to_test+0x78>)
    b984:	b009      	add	sp, #36	; 0x24
    b986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b988:	0002c9f4 	.word	0x0002c9f4
    b98c:	2000ac58 	.word	0x2000ac58
    b990:	40400000 	.word	0x40400000
    b994:	41400000 	.word	0x41400000

0000b998 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    b998:	b5f0      	push	{r4, r5, r6, r7, lr}
    b99a:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    b99e:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    b9a0:	f7ff ffb8 	bl	b914 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    b9a4:	2202      	movs	r2, #2
    b9a6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    b9aa:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    b9ae:	4a3a      	ldr	r2, [pc, #232]	; (ba98 <send_array_dd_v0+0x100>)
    b9b0:	ae0c      	add	r6, sp, #48	; 0x30
    b9b2:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    b9b4:	4631      	mov	r1, r6
    b9b6:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    b9b8:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    b9ba:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    b9bc:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    b9be:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    b9c0:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    b9c2:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    b9c4:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    b9c6:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    b9c8:	f101 010c 	add.w	r1, r1, #12
    b9cc:	d1f8      	bne.n	b9c0 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    b9ce:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    b9d0:	6958      	ldr	r0, [r3, #20]
    b9d2:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    b9d4:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    b9d6:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    b9d8:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    b9dc:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    b9e0:	f101 0108 	add.w	r1, r1, #8
    b9e4:	d1f6      	bne.n	b9d4 <send_array_dd_v0+0x3c>
    b9e6:	f103 051e 	add.w	r5, r3, #30
    b9ea:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    b9ee:	f855 3c06 	ldr.w	r3, [r5, #-6]
    b9f2:	4629      	mov	r1, r5
    b9f4:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    b9f8:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    b9fc:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    ba00:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    ba04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    ba08:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    ba0c:	f020 f8f0 	bl	2bbf0 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    ba10:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    ba12:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    ba14:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    ba18:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    ba1a:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    ba1e:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    ba22:	4633      	mov	r3, r6
    ba24:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    ba28:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    ba2a:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    ba2c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    ba30:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    ba34:	f103 0308 	add.w	r3, r3, #8
    ba38:	d1f6      	bne.n	ba28 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    ba3a:	3524      	adds	r5, #36	; 0x24
    ba3c:	42a5      	cmp	r5, r4
    ba3e:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    ba42:	d1d4      	bne.n	b9ee <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    ba44:	466c      	mov	r4, sp
    ba46:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    ba4a:	4668      	mov	r0, sp
    ba4c:	4913      	ldr	r1, [pc, #76]	; (ba9c <send_array_dd_v0+0x104>)
    ba4e:	ad07      	add	r5, sp, #28
    ba50:	f000 f902 	bl	bc58 <pb_ostream_from_buffer>
    ba54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ba56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ba58:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    ba5a:	4911      	ldr	r1, [pc, #68]	; (baa0 <send_array_dd_v0+0x108>)
    ba5c:	aa0c      	add	r2, sp, #48	; 0x30
    ba5e:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    ba60:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    ba62:	f000 fb79 	bl	c158 <pb_encode>
   int j=0;
    ba66:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    ba68:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    ba6a:	490c      	ldr	r1, [pc, #48]	; (ba9c <send_array_dd_v0+0x104>)
    ba6c:	4a0d      	ldr	r2, [pc, #52]	; (baa4 <send_array_dd_v0+0x10c>)
    ba6e:	4283      	cmp	r3, r0
    ba70:	d10b      	bne.n	ba8a <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    ba72:	490d      	ldr	r1, [pc, #52]	; (baa8 <send_array_dd_v0+0x110>)
    return function_return;
    ba74:	f240 72dc 	movw	r2, #2012	; 0x7dc
    ba78:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    ba7a:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    ba7e:	f01f ff55 	bl	2b92c <memcpy>
}
    ba82:	4638      	mov	r0, r7
    ba84:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    ba88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    ba8a:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    ba8e:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    ba90:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    ba94:	e7eb      	b.n	ba6e <send_array_dd_v0+0xd6>
    ba96:	bf00      	nop
    ba98:	0012d687 	.word	0x0012d687
    ba9c:	20021bff 	.word	0x20021bff
    baa0:	0002cc30 	.word	0x0002cc30
    baa4:	2000a47f 	.word	0x2000a47f
    baa8:	2000a47c 	.word	0x2000a47c

0000baac <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    baac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    bab0:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bab2:	4d2e      	ldr	r5, [pc, #184]	; (bb6c <print_current_position_cb+0xc0>)
    printf("\n\n####Position %d #####\n",pos);
    bab4:	4601      	mov	r1, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bab6:	01a6      	lsls	r6, r4, #6
    printf("\n\n####Position %d #####\n",pos);
    bab8:	482d      	ldr	r0, [pc, #180]	; (bb70 <print_current_position_cb+0xc4>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    baba:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    babe:	f019 fb4d 	bl	2515c <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bac2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    bac6:	6863      	ldr	r3, [r4, #4]
    bac8:	482a      	ldr	r0, [pc, #168]	; (bb74 <print_current_position_cb+0xc8>)
    baca:	f019 fb47 	bl	2515c <iprintf>
	if (!spec->channel_cfg_dt_node_exists) {
    bace:	4a2a      	ldr	r2, [pc, #168]	; (bb78 <print_current_position_cb+0xcc>)
    val_mv = C_Buffer[pos].analog.value;
    bad0:	6967      	ldr	r7, [r4, #20]
    bad2:	7953      	ldrb	r3, [r2, #5]
    bad4:	b1cb      	cbz	r3, bb0a <print_current_position_cb+0x5e>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bad6:	79d3      	ldrb	r3, [r2, #7]
	if (spec->channel_cfg.differential) {
    bad8:	7a91      	ldrb	r1, [r2, #10]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bada:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    badc:	bf0a      	itet	eq
    bade:	6813      	ldreq	r3, [r2, #0]
		vref_mv = spec->vref_mv;
    bae0:	89d3      	ldrhne	r3, [r2, #14]
	return api->ref_internal;
    bae2:	689b      	ldreq	r3, [r3, #8]
	resolution = spec->resolution;
    bae4:	7c14      	ldrb	r4, [r2, #16]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bae6:	bf08      	it	eq
    bae8:	891b      	ldrheq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    baea:	0689      	lsls	r1, r1, #26
	int32_t adc_mv = *valp * ref_mv;
    baec:	fb07 f303 	mul.w	r3, r7, r3
		resolution -= 1U;
    baf0:	bf48      	it	mi
    baf2:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    baf6:	7990      	ldrb	r0, [r2, #6]
    baf8:	a903      	add	r1, sp, #12
		resolution -= 1U;
    bafa:	bf48      	it	mi
    bafc:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    bafe:	9303      	str	r3, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bb00:	f00f f9d6 	bl	1aeb0 <adc_gain_invert>
	if (ret == 0) {
    bb04:	b908      	cbnz	r0, bb0a <print_current_position_cb+0x5e>
		*valp = (adc_mv >> resolution);
    bb06:	9f03      	ldr	r7, [sp, #12]
    bb08:	4127      	asrs	r7, r4
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    bb0a:	19ac      	adds	r4, r5, r6
    bb0c:	463b      	mov	r3, r7
    bb0e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    bb12:	481a      	ldr	r0, [pc, #104]	; (bb7c <print_current_position_cb+0xd0>)
    bb14:	f019 fb22 	bl	2515c <iprintf>
    int i=0;
    bb18:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %fcelsius\n",
    bb1a:	f8df 8064 	ldr.w	r8, [pc, #100]	; bb80 <print_current_position_cb+0xd4>
      ntc_temperature(C_Buffer[pos].ntc[i].value));
    bb1e:	8ba0      	ldrh	r0, [r4, #28]
    bb20:	f7fd fc26 	bl	9370 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %fcelsius\n",
    bb24:	f7fc fc7c 	bl	8420 <__aeabi_f2d>
    bb28:	f8d4 9018 	ldr.w	r9, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    bb2c:	f9b4 a01c 	ldrsh.w	sl, [r4, #28]
      printf("NTC %d TimeStamp=%d Value=%d %fcelsius\n",
    bb30:	464a      	mov	r2, r9
    bb32:	e9cd 0100 	strd	r0, r1, [sp]
    bb36:	4653      	mov	r3, sl
    bb38:	4639      	mov	r1, r7
    bb3a:	4640      	mov	r0, r8
      i++;
    bb3c:	3701      	adds	r7, #1
      printf("NTC %d TimeStamp=%d Value=%d %fcelsius\n",
    bb3e:	f019 fb0d 	bl	2515c <iprintf>
    while (i<3){
    bb42:	2f03      	cmp	r7, #3
    bb44:	f104 0408 	add.w	r4, r4, #8
    bb48:	d1e9      	bne.n	bb1e <print_current_position_cb+0x72>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    bb4a:	4435      	add	r5, r6
    bb4c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    bb50:	2100      	movs	r1, #0
    bb52:	480c      	ldr	r0, [pc, #48]	; (bb84 <print_current_position_cb+0xd8>)
    bb54:	f019 fb02 	bl	2515c <iprintf>
    bb58:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    bb5c:	2101      	movs	r1, #1
    bb5e:	4809      	ldr	r0, [pc, #36]	; (bb84 <print_current_position_cb+0xd8>)
}
    bb60:	b004      	add	sp, #16
    bb62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    bb66:	f019 baf9 	b.w	2515c <iprintf>
    bb6a:	bf00      	nop
    bb6c:	2000ad48 	.word	0x2000ad48
    bb70:	0002e107 	.word	0x0002e107
    bb74:	0002e120 	.word	0x0002e120
    bb78:	0002cb60 	.word	0x0002cb60
    bb7c:	0002e14c 	.word	0x0002e14c
    bb80:	0002e172 	.word	0x0002e172
    bb84:	0002e19a 	.word	0x0002e19a

0000bb88 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    bb88:	b500      	push	{lr}
    pb_type_t type = field->type;
    bb8a:	7d83      	ldrb	r3, [r0, #22]
{
    bb8c:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    bb8e:	2b3f      	cmp	r3, #63	; 0x3f
{
    bb90:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    bb92:	d849      	bhi.n	bc28 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    bb94:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    bb98:	d01c      	beq.n	bbd4 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    bb9a:	2820      	cmp	r0, #32
    bb9c:	d102      	bne.n	bba4 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    bb9e:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    bba0:	8818      	ldrh	r0, [r3, #0]
    bba2:	e006      	b.n	bbb2 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    bba4:	2830      	cmp	r0, #48	; 0x30
    bba6:	d0fa      	beq.n	bb9e <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    bba8:	2810      	cmp	r0, #16
    bbaa:	d106      	bne.n	bbba <pb_check_proto3_default_value+0x32>
    bbac:	6a0a      	ldr	r2, [r1, #32]
    bbae:	b122      	cbz	r2, bbba <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    bbb0:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    bbb2:	fab0 f080 	clz	r0, r0
    bbb6:	0940      	lsrs	r0, r0, #5
    bbb8:	e00c      	b.n	bbd4 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    bbba:	680a      	ldr	r2, [r1, #0]
    bbbc:	6890      	ldr	r0, [r2, #8]
    bbbe:	b980      	cbnz	r0, bbe2 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    bbc0:	f003 020f 	and.w	r2, r3, #15
    bbc4:	2a05      	cmp	r2, #5
    bbc6:	d80e      	bhi.n	bbe6 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    bbc8:	69cb      	ldr	r3, [r1, #28]
    bbca:	8a4a      	ldrh	r2, [r1, #18]
    bbcc:	441a      	add	r2, r3
    bbce:	4293      	cmp	r3, r2
    bbd0:	d103      	bne.n	bbda <pb_check_proto3_default_value+0x52>
            return true;
    bbd2:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    bbd4:	b00b      	add	sp, #44	; 0x2c
    bbd6:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    bbda:	f813 1b01 	ldrb.w	r1, [r3], #1
    bbde:	2900      	cmp	r1, #0
    bbe0:	d0f5      	beq.n	bbce <pb_check_proto3_default_value+0x46>
            return false;
    bbe2:	2000      	movs	r0, #0
    bbe4:	e7f6      	b.n	bbd4 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    bbe6:	2a06      	cmp	r2, #6
    bbe8:	d101      	bne.n	bbee <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    bbea:	69cb      	ldr	r3, [r1, #28]
    bbec:	e7d8      	b.n	bba0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    bbee:	2a07      	cmp	r2, #7
    bbf0:	d102      	bne.n	bbf8 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    bbf2:	69cb      	ldr	r3, [r1, #28]
    bbf4:	7818      	ldrb	r0, [r3, #0]
    bbf6:	e7dc      	b.n	bbb2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    bbf8:	2a0b      	cmp	r2, #11
    bbfa:	d101      	bne.n	bc00 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    bbfc:	8a48      	ldrh	r0, [r1, #18]
    bbfe:	e7d8      	b.n	bbb2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    bc00:	f003 030e 	and.w	r3, r3, #14
    bc04:	2b08      	cmp	r3, #8
    bc06:	d1e5      	bne.n	bbd4 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    bc08:	69ca      	ldr	r2, [r1, #28]
    bc0a:	4668      	mov	r0, sp
    bc0c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bc0e:	f01a fb2b 	bl	26268 <pb_field_iter_begin>
    bc12:	2800      	cmp	r0, #0
    bc14:	d0dd      	beq.n	bbd2 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    bc16:	4668      	mov	r0, sp
    bc18:	f7ff ffb6 	bl	bb88 <pb_check_proto3_default_value>
    bc1c:	2800      	cmp	r0, #0
    bc1e:	d0d9      	beq.n	bbd4 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    bc20:	4668      	mov	r0, sp
    bc22:	f01a fb44 	bl	262ae <pb_field_iter_next>
    bc26:	e7f4      	b.n	bc12 <pb_check_proto3_default_value+0x8a>
    bc28:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    bc2c:	2a80      	cmp	r2, #128	; 0x80
    bc2e:	d101      	bne.n	bc34 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    bc30:	69c0      	ldr	r0, [r0, #28]
    bc32:	e7be      	b.n	bbb2 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    bc34:	2a40      	cmp	r2, #64	; 0x40
    bc36:	d1d4      	bne.n	bbe2 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    bc38:	f003 030f 	and.w	r3, r3, #15
    bc3c:	2b0a      	cmp	r3, #10
    bc3e:	d102      	bne.n	bc46 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    bc40:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    bc42:	6818      	ldr	r0, [r3, #0]
    bc44:	e7b5      	b.n	bbb2 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    bc46:	6803      	ldr	r3, [r0, #0]
    bc48:	4a02      	ldr	r2, [pc, #8]	; (bc54 <pb_check_proto3_default_value+0xcc>)
    bc4a:	68d8      	ldr	r0, [r3, #12]
    bc4c:	4290      	cmp	r0, r2
    bc4e:	d1b0      	bne.n	bbb2 <pb_check_proto3_default_value+0x2a>
    bc50:	e7f6      	b.n	bc40 <pb_check_proto3_default_value+0xb8>
    bc52:	bf00      	nop
    bc54:	000262cd 	.word	0x000262cd

0000bc58 <pb_ostream_from_buffer>:
    return stream;
    bc58:	6082      	str	r2, [r0, #8]
    bc5a:	2200      	movs	r2, #0
{
    bc5c:	b510      	push	{r4, lr}
    return stream;
    bc5e:	4c03      	ldr	r4, [pc, #12]	; (bc6c <pb_ostream_from_buffer+0x14>)
    bc60:	e9c0 2203 	strd	r2, r2, [r0, #12]
    bc64:	e9c0 4100 	strd	r4, r1, [r0]
}
    bc68:	bd10      	pop	{r4, pc}
    bc6a:	bf00      	nop
    bc6c:	000262fd 	.word	0x000262fd

0000bc70 <pb_write>:
{
    bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc72:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    bc74:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    bc76:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    bc78:	b19a      	cbz	r2, bca2 <pb_write+0x32>
    bc7a:	6806      	ldr	r6, [r0, #0]
    bc7c:	b18e      	cbz	r6, bca2 <pb_write+0x32>
    bc7e:	18d3      	adds	r3, r2, r3
    bc80:	d202      	bcs.n	bc88 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    bc82:	6887      	ldr	r7, [r0, #8]
    bc84:	429f      	cmp	r7, r3
    bc86:	d207      	bcs.n	bc98 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    bc88:	6923      	ldr	r3, [r4, #16]
    bc8a:	4a08      	ldr	r2, [pc, #32]	; (bcac <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    bc8c:	2b00      	cmp	r3, #0
    bc8e:	bf08      	it	eq
    bc90:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    bc92:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    bc94:	6123      	str	r3, [r4, #16]
}
    bc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    bc98:	47b0      	blx	r6
    bc9a:	b910      	cbnz	r0, bca2 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    bc9c:	6923      	ldr	r3, [r4, #16]
    bc9e:	4a04      	ldr	r2, [pc, #16]	; (bcb0 <pb_write+0x40>)
    bca0:	e7f4      	b.n	bc8c <pb_write+0x1c>
    stream->bytes_written += count;
    bca2:	68e3      	ldr	r3, [r4, #12]
    return true;
    bca4:	2001      	movs	r0, #1
    stream->bytes_written += count;
    bca6:	442b      	add	r3, r5
    bca8:	60e3      	str	r3, [r4, #12]
    return true;
    bcaa:	e7f4      	b.n	bc96 <pb_write+0x26>
    bcac:	0002e1bc 	.word	0x0002e1bc
    bcb0:	0002e1c8 	.word	0x0002e1c8

0000bcb4 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    bcb4:	b410      	push	{r4}
    bcb6:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    bcb8:	8a4b      	ldrh	r3, [r1, #18]
    bcba:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    bcbe:	2c02      	cmp	r4, #2
    bcc0:	d117      	bne.n	bcf2 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    bcc2:	2b01      	cmp	r3, #1
    bcc4:	d105      	bne.n	bcd2 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    bcc6:	69cb      	ldr	r3, [r1, #28]
    bcc8:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    bcca:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    bccc:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    bcce:	f01a bb1e 	b.w	2630e <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    bcd2:	2b02      	cmp	r3, #2
    bcd4:	d102      	bne.n	bcdc <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    bcd6:	69cb      	ldr	r3, [r1, #28]
    bcd8:	881a      	ldrh	r2, [r3, #0]
    bcda:	e7f6      	b.n	bcca <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    bcdc:	2b04      	cmp	r3, #4
    bcde:	d102      	bne.n	bce6 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    bce0:	69cb      	ldr	r3, [r1, #28]
    bce2:	681a      	ldr	r2, [r3, #0]
    bce4:	e7f1      	b.n	bcca <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    bce6:	2b08      	cmp	r3, #8
    bce8:	d11f      	bne.n	bd2a <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    bcea:	69cb      	ldr	r3, [r1, #28]
    bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
    bcf0:	e7ec      	b.n	bccc <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    bcf2:	2b01      	cmp	r3, #1
    bcf4:	d108      	bne.n	bd08 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    bcf6:	69cb      	ldr	r3, [r1, #28]
    bcf8:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    bcfc:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    bcfe:	2c03      	cmp	r4, #3
    bd00:	d1e4      	bne.n	bccc <pb_enc_varint+0x18>
}
    bd02:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    bd04:	f01a bb42 	b.w	2638c <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    bd08:	2b02      	cmp	r3, #2
    bd0a:	d103      	bne.n	bd14 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    bd0c:	69cb      	ldr	r3, [r1, #28]
    bd0e:	f9b3 2000 	ldrsh.w	r2, [r3]
    bd12:	e7f3      	b.n	bcfc <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    bd14:	2b04      	cmp	r3, #4
    bd16:	d102      	bne.n	bd1e <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    bd18:	69cb      	ldr	r3, [r1, #28]
    bd1a:	681a      	ldr	r2, [r3, #0]
    bd1c:	e7ee      	b.n	bcfc <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    bd1e:	2b08      	cmp	r3, #8
    bd20:	d103      	bne.n	bd2a <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    bd22:	69cb      	ldr	r3, [r1, #28]
    bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd28:	e7e9      	b.n	bcfe <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    bd2a:	6903      	ldr	r3, [r0, #16]
    bd2c:	4a03      	ldr	r2, [pc, #12]	; (bd3c <pb_enc_varint+0x88>)
    bd2e:	2b00      	cmp	r3, #0
    bd30:	bf08      	it	eq
    bd32:	4613      	moveq	r3, r2
    bd34:	6103      	str	r3, [r0, #16]
}
    bd36:	bc10      	pop	{r4}
    bd38:	2000      	movs	r0, #0
    bd3a:	4770      	bx	lr
    bd3c:	0002e1d1 	.word	0x0002e1d1

0000bd40 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    bd40:	8a4a      	ldrh	r2, [r1, #18]
    bd42:	2a04      	cmp	r2, #4
    bd44:	d102      	bne.n	bd4c <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    bd46:	69c9      	ldr	r1, [r1, #28]
    bd48:	f01a bb29 	b.w	2639e <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    bd4c:	2a08      	cmp	r2, #8
    bd4e:	d102      	bne.n	bd56 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    bd50:	69c9      	ldr	r1, [r1, #28]
    bd52:	f01a bb27 	b.w	263a4 <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    bd56:	6902      	ldr	r2, [r0, #16]
    bd58:	4903      	ldr	r1, [pc, #12]	; (bd68 <pb_enc_fixed+0x28>)
    bd5a:	2a00      	cmp	r2, #0
    bd5c:	bf08      	it	eq
    bd5e:	460a      	moveq	r2, r1
    bd60:	6102      	str	r2, [r0, #16]
    }
}
    bd62:	2000      	movs	r0, #0
    bd64:	4770      	bx	lr
    bd66:	bf00      	nop
    bd68:	0002e1d1 	.word	0x0002e1d1

0000bd6c <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    bd6c:	7d8a      	ldrb	r2, [r1, #22]
{
    bd6e:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    bd70:	f002 020f 	and.w	r2, r2, #15
    bd74:	2a0b      	cmp	r2, #11
    bd76:	d811      	bhi.n	bd9c <pb_encode_tag_for_field+0x30>
    bd78:	e8df f002 	tbb	[pc, r2]
    bd7c:	0c0c0c0c 	.word	0x0c0c0c0c
    bd80:	0a0a060e 	.word	0x0a0a060e
    bd84:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    bd88:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    bd8a:	8a1a      	ldrh	r2, [r3, #16]
    bd8c:	f01a bb0d 	b.w	263aa <pb_encode_tag>
            wiretype = PB_WT_STRING;
    bd90:	2102      	movs	r1, #2
            break;
    bd92:	e7fa      	b.n	bd8a <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    bd94:	2100      	movs	r1, #0
    bd96:	e7f8      	b.n	bd8a <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    bd98:	2105      	movs	r1, #5
    bd9a:	e7f6      	b.n	bd8a <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    bd9c:	6903      	ldr	r3, [r0, #16]
    bd9e:	4a03      	ldr	r2, [pc, #12]	; (bdac <pb_encode_tag_for_field+0x40>)
    bda0:	2b00      	cmp	r3, #0
    bda2:	bf08      	it	eq
    bda4:	4613      	moveq	r3, r2
    bda6:	6103      	str	r3, [r0, #16]
}
    bda8:	2000      	movs	r0, #0
    bdaa:	4770      	bx	lr
    bdac:	0002e1e3 	.word	0x0002e1e3

0000bdb0 <pb_encode_submessage>:
{
    bdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdb4:	460e      	mov	r6, r1
    bdb6:	4617      	mov	r7, r2
    bdb8:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    bdba:	2214      	movs	r2, #20
    bdbc:	2100      	movs	r1, #0
{
    bdbe:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    bdc0:	a801      	add	r0, sp, #4
    bdc2:	f01f fded 	bl	2b9a0 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    bdc6:	463a      	mov	r2, r7
    bdc8:	4631      	mov	r1, r6
    bdca:	a801      	add	r0, sp, #4
    bdcc:	f000 f9c4 	bl	c158 <pb_encode>
    bdd0:	b910      	cbnz	r0, bdd8 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    bdd2:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    bdd4:	6123      	str	r3, [r4, #16]
    bdd6:	e008      	b.n	bdea <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    bdd8:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    bddc:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    bdde:	4643      	mov	r3, r8
    bde0:	462a      	mov	r2, r5
    bde2:	4620      	mov	r0, r4
    bde4:	f01a fa93 	bl	2630e <pb_encode_varint>
    bde8:	b918      	cbnz	r0, bdf2 <pb_encode_submessage+0x42>
        return false;
    bdea:	2000      	movs	r0, #0
}
    bdec:	b006      	add	sp, #24
    bdee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    bdf2:	6821      	ldr	r1, [r4, #0]
    bdf4:	b921      	cbnz	r1, be00 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    bdf6:	462a      	mov	r2, r5
    bdf8:	4620      	mov	r0, r4
    bdfa:	f7ff ff39 	bl	bc70 <pb_write>
    bdfe:	e7f5      	b.n	bdec <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    be00:	68e3      	ldr	r3, [r4, #12]
    be02:	68a2      	ldr	r2, [r4, #8]
    be04:	442b      	add	r3, r5
    be06:	4293      	cmp	r3, r2
    be08:	d905      	bls.n	be16 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    be0a:	6923      	ldr	r3, [r4, #16]
    be0c:	4a0e      	ldr	r2, [pc, #56]	; (be48 <pb_encode_submessage+0x98>)
    be0e:	2b00      	cmp	r3, #0
    be10:	bf08      	it	eq
    be12:	4613      	moveq	r3, r2
    be14:	e7de      	b.n	bdd4 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    be16:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    be18:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    be1a:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    be1c:	a801      	add	r0, sp, #4
    be1e:	4631      	mov	r1, r6
    substream.max_size = size;
    be20:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    be24:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    be28:	f000 f996 	bl	c158 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    be2c:	9a04      	ldr	r2, [sp, #16]
    be2e:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    be30:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    be32:	4413      	add	r3, r2
    be34:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    be36:	9b02      	ldr	r3, [sp, #8]
    be38:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    be3a:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    be3c:	d101      	bne.n	be42 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    be3e:	6123      	str	r3, [r4, #16]
    be40:	e7d4      	b.n	bdec <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    be42:	4a02      	ldr	r2, [pc, #8]	; (be4c <pb_encode_submessage+0x9c>)
    be44:	e7e3      	b.n	be0e <pb_encode_submessage+0x5e>
    be46:	bf00      	nop
    be48:	0002e1bc 	.word	0x0002e1bc
    be4c:	0002e1f6 	.word	0x0002e1f6

0000be50 <encode_basic_field>:
{
    be50:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    be52:	69cb      	ldr	r3, [r1, #28]
{
    be54:	4604      	mov	r4, r0
    be56:	460d      	mov	r5, r1
    if (!field->pData)
    be58:	2b00      	cmp	r3, #0
    be5a:	d07f      	beq.n	bf5c <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    be5c:	f7ff ff86 	bl	bd6c <pb_encode_tag_for_field>
    be60:	2800      	cmp	r0, #0
    be62:	d073      	beq.n	bf4c <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    be64:	7da8      	ldrb	r0, [r5, #22]
    be66:	f000 030f 	and.w	r3, r0, #15
    be6a:	2b0b      	cmp	r3, #11
    be6c:	d873      	bhi.n	bf56 <encode_basic_field+0x106>
    be6e:	e8df f003 	tbb	[pc, r3]
    be72:	1106      	.short	0x1106
    be74:	17171111 	.word	0x17171111
    be78:	5252351d 	.word	0x5252351d
    be7c:	6f72      	.short	0x6f72
        if (p[i] != 0)
    be7e:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    be80:	4620      	mov	r0, r4
}
    be82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    be86:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    be88:	2300      	movs	r3, #0
    be8a:	3a00      	subs	r2, #0
    be8c:	bf18      	it	ne
    be8e:	2201      	movne	r2, #1
    be90:	f01a ba3d 	b.w	2630e <pb_encode_varint>
            return pb_enc_varint(stream, field);
    be94:	4629      	mov	r1, r5
    be96:	4620      	mov	r0, r4
}
    be98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    be9c:	f7ff bf0a 	b.w	bcb4 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    bea0:	4629      	mov	r1, r5
    bea2:	4620      	mov	r0, r4
}
    bea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    bea8:	f7ff bf4a 	b.w	bd40 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    beac:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    beae:	b909      	cbnz	r1, beb4 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    beb0:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    beb2:	e00e      	b.n	bed2 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    beb4:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    beb6:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    beb8:	d80a      	bhi.n	bed0 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    beba:	8a6b      	ldrh	r3, [r5, #18]
    bebc:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    bebe:	4293      	cmp	r3, r2
    bec0:	d206      	bcs.n	bed0 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    bec2:	6923      	ldr	r3, [r4, #16]
    bec4:	4a26      	ldr	r2, [pc, #152]	; (bf60 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    bec6:	2b00      	cmp	r3, #0
    bec8:	bf08      	it	eq
    beca:	4613      	moveq	r3, r2
    becc:	6123      	str	r3, [r4, #16]
    bece:	e03d      	b.n	bf4c <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    bed0:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    bed2:	4620      	mov	r0, r4
}
    bed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    bed8:	f01a ba6d 	b.w	263b6 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    bedc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    bee0:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    bee2:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    bee4:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    bee6:	d00e      	beq.n	bf06 <encode_basic_field+0xb6>
        if (max_size == 0)
    bee8:	b913      	cbnz	r3, bef0 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    beea:	6923      	ldr	r3, [r4, #16]
    beec:	4a1d      	ldr	r2, [pc, #116]	; (bf64 <encode_basic_field+0x114>)
    beee:	e7ea      	b.n	bec6 <encode_basic_field+0x76>
        max_size -= 1;
    bef0:	3b01      	subs	r3, #1
    if (str == NULL)
    bef2:	2900      	cmp	r1, #0
    bef4:	d0dc      	beq.n	beb0 <encode_basic_field+0x60>
    size_t size = 0;
    bef6:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    bef8:	429a      	cmp	r2, r3
    befa:	5c88      	ldrb	r0, [r1, r2]
    befc:	d006      	beq.n	bf0c <encode_basic_field+0xbc>
    befe:	2800      	cmp	r0, #0
    bf00:	d0e7      	beq.n	bed2 <encode_basic_field+0x82>
            size++;
    bf02:	3201      	adds	r2, #1
            p++;
    bf04:	e7f8      	b.n	bef8 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    bf06:	f04f 33ff 	mov.w	r3, #4294967295
    bf0a:	e7f2      	b.n	bef2 <encode_basic_field+0xa2>
        if (*p != '\0')
    bf0c:	2800      	cmp	r0, #0
    bf0e:	d0e0      	beq.n	bed2 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    bf10:	6923      	ldr	r3, [r4, #16]
    bf12:	4a15      	ldr	r2, [pc, #84]	; (bf68 <encode_basic_field+0x118>)
    bf14:	e7d7      	b.n	bec6 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    bf16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    bf18:	b912      	cbnz	r2, bf20 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    bf1a:	6923      	ldr	r3, [r4, #16]
    bf1c:	4a13      	ldr	r2, [pc, #76]	; (bf6c <encode_basic_field+0x11c>)
    bf1e:	e7d2      	b.n	bec6 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    bf20:	2b09      	cmp	r3, #9
    bf22:	d006      	beq.n	bf32 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    bf24:	4620      	mov	r0, r4
    bf26:	69ea      	ldr	r2, [r5, #28]
    bf28:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    bf2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    bf2e:	f7ff bf3f 	b.w	bdb0 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    bf32:	6a2a      	ldr	r2, [r5, #32]
    bf34:	2a00      	cmp	r2, #0
    bf36:	d0f5      	beq.n	bf24 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    bf38:	f852 3c08 	ldr.w	r3, [r2, #-8]
    bf3c:	2b00      	cmp	r3, #0
    bf3e:	d0f1      	beq.n	bf24 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    bf40:	4629      	mov	r1, r5
    bf42:	4620      	mov	r0, r4
    bf44:	3a04      	subs	r2, #4
    bf46:	4798      	blx	r3
    bf48:	2800      	cmp	r0, #0
    bf4a:	d1eb      	bne.n	bf24 <encode_basic_field+0xd4>
        return false;
    bf4c:	2000      	movs	r0, #0
}
    bf4e:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    bf50:	8a6a      	ldrh	r2, [r5, #18]
    bf52:	69e9      	ldr	r1, [r5, #28]
    bf54:	e7bd      	b.n	bed2 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    bf56:	6923      	ldr	r3, [r4, #16]
    bf58:	4a05      	ldr	r2, [pc, #20]	; (bf70 <encode_basic_field+0x120>)
    bf5a:	e7b4      	b.n	bec6 <encode_basic_field+0x76>
        return true;
    bf5c:	2001      	movs	r0, #1
    bf5e:	e7f6      	b.n	bf4e <encode_basic_field+0xfe>
    bf60:	0002e20a 	.word	0x0002e20a
    bf64:	0002e21e 	.word	0x0002e21e
    bf68:	0002e231 	.word	0x0002e231
    bf6c:	0002e245 	.word	0x0002e245
    bf70:	0002e1e3 	.word	0x0002e1e3

0000bf74 <encode_field>:
{
    bf74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    bf78:	7d8b      	ldrb	r3, [r1, #22]
{
    bf7a:	4605      	mov	r5, r0
    bf7c:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    bf80:	2a30      	cmp	r2, #48	; 0x30
{
    bf82:	460c      	mov	r4, r1
    bf84:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    bf86:	d112      	bne.n	bfae <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    bf88:	6a0b      	ldr	r3, [r1, #32]
    bf8a:	881a      	ldrh	r2, [r3, #0]
    bf8c:	8a0b      	ldrh	r3, [r1, #16]
    bf8e:	429a      	cmp	r2, r3
    bf90:	d114      	bne.n	bfbc <encode_field+0x48>
    if (!field->pData)
    bf92:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    bf94:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    bf96:	b9ea      	cbnz	r2, bfd4 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    bf98:	f013 0f30 	tst.w	r3, #48	; 0x30
    bf9c:	d10e      	bne.n	bfbc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    bf9e:	692b      	ldr	r3, [r5, #16]
    bfa0:	4a69      	ldr	r2, [pc, #420]	; (c148 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    bfa2:	2b00      	cmp	r3, #0
    bfa4:	bf08      	it	eq
    bfa6:	4613      	moveq	r3, r2
    bfa8:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    bfaa:	2000      	movs	r0, #0
    bfac:	e007      	b.n	bfbe <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    bfae:	2a10      	cmp	r2, #16
    bfb0:	d1ef      	bne.n	bf92 <encode_field+0x1e>
        if (field->pSize)
    bfb2:	6a0a      	ldr	r2, [r1, #32]
    bfb4:	b132      	cbz	r2, bfc4 <encode_field+0x50>
        if (p[i] != 0)
    bfb6:	7813      	ldrb	r3, [r2, #0]
    bfb8:	2b00      	cmp	r3, #0
    bfba:	d1ea      	bne.n	bf92 <encode_field+0x1e>
            return true;
    bfbc:	2001      	movs	r0, #1
}
    bfbe:	b007      	add	sp, #28
    bfc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    bfc4:	2b3f      	cmp	r3, #63	; 0x3f
    bfc6:	d8e4      	bhi.n	bf92 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    bfc8:	4608      	mov	r0, r1
    bfca:	f7ff fddd 	bl	bb88 <pb_check_proto3_default_value>
    bfce:	2800      	cmp	r0, #0
    bfd0:	d0df      	beq.n	bf92 <encode_field+0x1e>
    bfd2:	e7f3      	b.n	bfbc <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    bfd4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    bfd8:	2a40      	cmp	r2, #64	; 0x40
    bfda:	d10c      	bne.n	bff6 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    bfdc:	6823      	ldr	r3, [r4, #0]
    bfde:	68db      	ldr	r3, [r3, #12]
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d0eb      	beq.n	bfbc <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    bfe4:	4622      	mov	r2, r4
    bfe6:	4629      	mov	r1, r5
    bfe8:	2000      	movs	r0, #0
    bfea:	4798      	blx	r3
    bfec:	2800      	cmp	r0, #0
    bfee:	d1e5      	bne.n	bfbc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    bff0:	692b      	ldr	r3, [r5, #16]
    bff2:	4a56      	ldr	r2, [pc, #344]	; (c14c <encode_field+0x1d8>)
    bff4:	e7d5      	b.n	bfa2 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    bff6:	f003 0130 	and.w	r1, r3, #48	; 0x30
    bffa:	2920      	cmp	r1, #32
    bffc:	f040 809d 	bne.w	c13a <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c000:	6a21      	ldr	r1, [r4, #32]
    c002:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c004:	2e00      	cmp	r6, #0
    c006:	d0d9      	beq.n	bfbc <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c008:	2a80      	cmp	r2, #128	; 0x80
    c00a:	d120      	bne.n	c04e <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c00c:	f003 030f 	and.w	r3, r3, #15
    c010:	2b05      	cmp	r3, #5
    c012:	d85e      	bhi.n	c0d2 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c014:	2102      	movs	r1, #2
    c016:	4628      	mov	r0, r5
    c018:	8a22      	ldrh	r2, [r4, #16]
    c01a:	f01a f9c6 	bl	263aa <pb_encode_tag>
    c01e:	2800      	cmp	r0, #0
    c020:	d0c3      	beq.n	bfaa <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c022:	7da3      	ldrb	r3, [r4, #22]
    c024:	f003 030f 	and.w	r3, r3, #15
    c028:	2b04      	cmp	r3, #4
    c02a:	d116      	bne.n	c05a <encode_field+0xe6>
            size = 4 * (size_t)count;
    c02c:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c02e:	463a      	mov	r2, r7
    c030:	2300      	movs	r3, #0
    c032:	4628      	mov	r0, r5
    c034:	f01a f96b 	bl	2630e <pb_encode_varint>
    c038:	2800      	cmp	r0, #0
    c03a:	d0b6      	beq.n	bfaa <encode_field+0x36>
        if (stream->callback == NULL)
    c03c:	6829      	ldr	r1, [r5, #0]
    c03e:	bb79      	cbnz	r1, c0a0 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c040:	463a      	mov	r2, r7
    c042:	4628      	mov	r0, r5
}
    c044:	b007      	add	sp, #28
    c046:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c04a:	f7ff be11 	b.w	bc70 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c04e:	8aa2      	ldrh	r2, [r4, #20]
    c050:	42b2      	cmp	r2, r6
    c052:	d2db      	bcs.n	c00c <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c054:	692b      	ldr	r3, [r5, #16]
    c056:	4a3e      	ldr	r2, [pc, #248]	; (c150 <encode_field+0x1dc>)
    c058:	e7a3      	b.n	bfa2 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c05a:	2b05      	cmp	r3, #5
    c05c:	d101      	bne.n	c062 <encode_field+0xee>
            size = 8 * (size_t)count;
    c05e:	00f7      	lsls	r7, r6, #3
    c060:	e7e5      	b.n	c02e <encode_field+0xba>
            void *pData_orig = field->pData;
    c062:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c064:	2214      	movs	r2, #20
    c066:	2100      	movs	r1, #0
    c068:	a801      	add	r0, sp, #4
    c06a:	f01f fc99 	bl	2b9a0 <memset>
            void *pData_orig = field->pData;
    c06e:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c072:	4621      	mov	r1, r4
    c074:	a801      	add	r0, sp, #4
    c076:	f7ff fe1d 	bl	bcb4 <pb_enc_varint>
    c07a:	b928      	cbnz	r0, c088 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c07c:	692b      	ldr	r3, [r5, #16]
    c07e:	2b00      	cmp	r3, #0
    c080:	d192      	bne.n	bfa8 <encode_field+0x34>
    c082:	9b05      	ldr	r3, [sp, #20]
    c084:	4a33      	ldr	r2, [pc, #204]	; (c154 <encode_field+0x1e0>)
    c086:	e78c      	b.n	bfa2 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c088:	69e3      	ldr	r3, [r4, #28]
    c08a:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c08c:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c08e:	4413      	add	r3, r2
    c090:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c092:	b2bb      	uxth	r3, r7
    c094:	429e      	cmp	r6, r3
    c096:	d8ec      	bhi.n	c072 <encode_field+0xfe>
            size = sizestream.bytes_written;
    c098:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c09a:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c09e:	e7c6      	b.n	c02e <encode_field+0xba>
    c0a0:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c0a2:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c0a4:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c0a6:	f003 030e 	and.w	r3, r3, #14
    c0aa:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c0ac:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c0ae:	d10d      	bne.n	c0cc <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c0b0:	f7ff fe46 	bl	bd40 <pb_enc_fixed>
    c0b4:	2800      	cmp	r0, #0
    c0b6:	f43f af78 	beq.w	bfaa <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c0ba:	69e3      	ldr	r3, [r4, #28]
    c0bc:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c0be:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c0c0:	4413      	add	r3, r2
    c0c2:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c0c4:	b2bb      	uxth	r3, r7
    c0c6:	429e      	cmp	r6, r3
    c0c8:	d8eb      	bhi.n	c0a2 <encode_field+0x12e>
    c0ca:	e777      	b.n	bfbc <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c0cc:	f7ff fdf2 	bl	bcb4 <pb_enc_varint>
    c0d0:	e7f0      	b.n	c0b4 <encode_field+0x140>
    c0d2:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c0d6:	7da3      	ldrb	r3, [r4, #22]
    c0d8:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c0dc:	2b86      	cmp	r3, #134	; 0x86
    c0de:	d127      	bne.n	c130 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c0e0:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c0e2:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c0e4:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c0e8:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c0ea:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c0ee:	f1b9 0f00 	cmp.w	r9, #0
    c0f2:	d11a      	bne.n	c12a <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c0f4:	f7ff fe3a 	bl	bd6c <pb_encode_tag_for_field>
    c0f8:	b908      	cbnz	r0, c0fe <encode_field+0x18a>
                field->pData = pData_orig;
    c0fa:	61e7      	str	r7, [r4, #28]
                if (!status)
    c0fc:	e755      	b.n	bfaa <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c0fe:	2201      	movs	r2, #1
    c100:	4628      	mov	r0, r5
    c102:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c104:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c108:	f7ff fdb2 	bl	bc70 <pb_write>
                field->pData = pData_orig;
    c10c:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c10e:	2800      	cmp	r0, #0
    c110:	f43f af4b 	beq.w	bfaa <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c114:	69e3      	ldr	r3, [r4, #28]
    c116:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c118:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c11c:	4413      	add	r3, r2
    c11e:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c120:	fa1f f388 	uxth.w	r3, r8
    c124:	429e      	cmp	r6, r3
    c126:	d8d6      	bhi.n	c0d6 <encode_field+0x162>
    c128:	e748      	b.n	bfbc <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c12a:	f7ff fe91 	bl	be50 <encode_basic_field>
    c12e:	e7ed      	b.n	c10c <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c130:	4621      	mov	r1, r4
    c132:	4628      	mov	r0, r5
    c134:	f7ff fe8c 	bl	be50 <encode_basic_field>
    c138:	e7e9      	b.n	c10e <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c13a:	4621      	mov	r1, r4
    c13c:	4628      	mov	r0, r5
}
    c13e:	b007      	add	sp, #28
    c140:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c144:	f7ff be84 	b.w	be50 <encode_basic_field>
    c148:	0002e25e 	.word	0x0002e25e
    c14c:	0002e275 	.word	0x0002e275
    c150:	0002e284 	.word	0x0002e284
    c154:	0002e29c 	.word	0x0002e29c

0000c158 <pb_encode>:
{
    c158:	b530      	push	{r4, r5, lr}
    c15a:	b095      	sub	sp, #84	; 0x54
    c15c:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c15e:	4668      	mov	r0, sp
    c160:	f01a f8b0 	bl	262c4 <pb_field_iter_begin_const>
    c164:	b370      	cbz	r0, c1c4 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c166:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c16a:	f003 030f 	and.w	r3, r3, #15
    c16e:	2b0a      	cmp	r3, #10
    c170:	d121      	bne.n	c1b6 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c172:	9b07      	ldr	r3, [sp, #28]
    c174:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c176:	b91d      	cbnz	r5, c180 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c178:	4668      	mov	r0, sp
    c17a:	f01a f898 	bl	262ae <pb_field_iter_next>
    c17e:	e7f1      	b.n	c164 <pb_encode+0xc>
        if (extension->type->encode)
    c180:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c182:	4629      	mov	r1, r5
        if (extension->type->encode)
    c184:	685b      	ldr	r3, [r3, #4]
    c186:	b123      	cbz	r3, c192 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c188:	4620      	mov	r0, r4
    c18a:	4798      	blx	r3
        if (!status)
    c18c:	b158      	cbz	r0, c1a6 <pb_encode+0x4e>
        extension = extension->next;
    c18e:	68ad      	ldr	r5, [r5, #8]
    c190:	e7f1      	b.n	c176 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c192:	a80a      	add	r0, sp, #40	; 0x28
    c194:	f01a f898 	bl	262c8 <pb_field_iter_begin_extension_const>
    c198:	b940      	cbnz	r0, c1ac <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c19a:	6923      	ldr	r3, [r4, #16]
    c19c:	4a0a      	ldr	r2, [pc, #40]	; (c1c8 <pb_encode+0x70>)
    c19e:	2b00      	cmp	r3, #0
    c1a0:	bf08      	it	eq
    c1a2:	4613      	moveq	r3, r2
    c1a4:	6123      	str	r3, [r4, #16]
                return false;
    c1a6:	2000      	movs	r0, #0
}
    c1a8:	b015      	add	sp, #84	; 0x54
    c1aa:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c1ac:	4620      	mov	r0, r4
    c1ae:	a90a      	add	r1, sp, #40	; 0x28
    c1b0:	f7ff fee0 	bl	bf74 <encode_field>
    c1b4:	e7ea      	b.n	c18c <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c1b6:	4669      	mov	r1, sp
    c1b8:	4620      	mov	r0, r4
    c1ba:	f7ff fedb 	bl	bf74 <encode_field>
    c1be:	2800      	cmp	r0, #0
    c1c0:	d1da      	bne.n	c178 <pb_encode+0x20>
    c1c2:	e7f0      	b.n	c1a6 <pb_encode+0x4e>
        return true; /* Empty message type */
    c1c4:	2001      	movs	r0, #1
    c1c6:	e7ef      	b.n	c1a8 <pb_encode+0x50>
    c1c8:	0002e2a3 	.word	0x0002e2a3

0000c1cc <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    c1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1d0:	b097      	sub	sp, #92	; 0x5c
    c1d2:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    c1d4:	4604      	mov	r4, r0
{
    c1d6:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
    c1da:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    c1de:	61fb      	str	r3, [r7, #28]
	__ASSERT_NO_MSG(in_packaged != NULL);
    c1e0:	b958      	cbnz	r0, c1fa <cbprintf_package_convert+0x2e>
    c1e2:	49ab      	ldr	r1, [pc, #684]	; (c490 <cbprintf_package_convert+0x2c4>)
    c1e4:	f44f 7365 	mov.w	r3, #916	; 0x394
    c1e8:	4aaa      	ldr	r2, [pc, #680]	; (c494 <cbprintf_package_convert+0x2c8>)
    c1ea:	48ab      	ldr	r0, [pc, #684]	; (c498 <cbprintf_package_convert+0x2cc>)
    c1ec:	f01a fb99 	bl	26922 <assert_print>
    c1f0:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c1f4:	48a7      	ldr	r0, [pc, #668]	; (c494 <cbprintf_package_convert+0x2c8>)
    c1f6:	f01a fb8d 	bl	26914 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    c1fa:	f3ca 03c0 	ubfx	r3, sl, #3, #1
    c1fe:	617b      	str	r3, [r7, #20]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c202:	b953      	cbnz	r3, c21a <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
    c204:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    c206:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    c208:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    c20a:	6abd      	ldr	r5, [r7, #40]	; 0x28
	buf += ros_nbr;
    c20c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c210:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    c212:	42b5      	cmp	r5, r6
    c214:	d319      	bcc.n	c24a <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
    c216:	1b03      	subs	r3, r0, r4
    c218:	62bb      	str	r3, [r7, #40]	; 0x28
	rws_nbr = in_desc->rw_str_cnt;
    c21a:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    c21c:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    c220:	61bb      	str	r3, [r7, #24]
	ro_cpy = ros_nbr &&
    c222:	f1bb 0f00 	cmp.w	fp, #0
    c226:	d002      	beq.n	c22e <cbprintf_package_convert+0x62>
    c228:	f01a 0f01 	tst.w	sl, #1
    c22c:	d116      	bne.n	c25c <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
    c22e:	69bb      	ldr	r3, [r7, #24]
    c230:	bb53      	cbnz	r3, c288 <cbprintf_package_convert+0xbc>
		if (cb) {
    c232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c234:	b11b      	cbz	r3, c23e <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
    c236:	4620      	mov	r0, r4
    c238:	69fa      	ldr	r2, [r7, #28]
    c23a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c23c:	4798      	blx	r3
		return in_len;
    c23e:	6abd      	ldr	r5, [r7, #40]	; 0x28

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    c240:	4628      	mov	r0, r5
    c242:	375c      	adds	r7, #92	; 0x5c
    c244:	46bd      	mov	sp, r7
    c246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    c24a:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    c24e:	4640      	mov	r0, r8
    c250:	f7fd f886 	bl	9360 <strlen>
    c254:	3001      	adds	r0, #1
    c256:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    c258:	3501      	adds	r5, #1
    c25a:	e7da      	b.n	c212 <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
    c25c:	7823      	ldrb	r3, [r4, #0]
    c25e:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    c260:	627b      	str	r3, [r7, #36]	; 0x24
    c262:	009b      	lsls	r3, r3, #2
    c264:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
    c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c268:	623a      	str	r2, [r7, #32]
	uint8_t *str_pos = &buf[args_size];
    c26a:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c270:	2b00      	cmp	r3, #0
    c272:	f040 8101 	bne.w	c478 <cbprintf_package_convert+0x2ac>
		out_len = (int)in_len;
    c276:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    c278:	2600      	movs	r6, #0
		out_len = (int)in_len;
    c27a:	6abd      	ldr	r5, [r7, #40]	; 0x28
		if (ro_cpy) {
    c27c:	eb09 030b 	add.w	r3, r9, fp
			for (int i = 0; i < ros_nbr; i++) {
    c280:	4543      	cmp	r3, r8
    c282:	d14e      	bne.n	c322 <cbprintf_package_convert+0x156>
    c284:	44d9      	add	r9, fp
    c286:	e013      	b.n	c2b0 <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
    c288:	f01a 0f02 	tst.w	sl, #2
    c28c:	d0d1      	beq.n	c232 <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
    c28e:	7823      	ldrb	r3, [r4, #0]
    c290:	4699      	mov	r9, r3
    c292:	627b      	str	r3, [r7, #36]	; 0x24
    c294:	009b      	lsls	r3, r3, #2
    c296:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c298:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    c29a:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c29e:	623b      	str	r3, [r7, #32]
	if (cb == NULL) {
    c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d17c      	bne.n	c3a0 <cbprintf_package_convert+0x1d4>
		out_len = (int)in_len;
    c2a6:	6abd      	ldr	r5, [r7, #40]	; 0x28
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c2a8:	f1bb 0f00 	cmp.w	fp, #0
    c2ac:	d150      	bne.n	c350 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
    c2ae:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
    c2b0:	f01a 0f05 	tst.w	sl, #5
    c2b4:	bf0c      	ite	eq
    c2b6:	2302      	moveq	r3, #2
    c2b8:	2301      	movne	r3, #1
    c2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    c2bc:	69bb      	ldr	r3, [r7, #24]
    c2be:	eb09 0b43 	add.w	fp, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c2c2:	f00a 0302 	and.w	r3, sl, #2
    c2c6:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < rws_nbr; i++) {
    c2c8:	45d9      	cmp	r9, fp
    c2ca:	d0b9      	beq.n	c240 <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
    c2cc:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    c2d0:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c2d4:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c2d8:	4b70      	ldr	r3, [pc, #448]	; (c49c <cbprintf_package_convert+0x2d0>)
    c2da:	4598      	cmp	r8, r3
    c2dc:	d302      	bcc.n	c2e4 <cbprintf_package_convert+0x118>
    c2de:	4b70      	ldr	r3, [pc, #448]	; (c4a0 <cbprintf_package_convert+0x2d4>)
    c2e0:	4598      	cmp	r8, r3
    c2e2:	d33b      	bcc.n	c35c <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c2e4:	697b      	ldr	r3, [r7, #20]
    c2e6:	2b00      	cmp	r3, #0
    c2e8:	d045      	beq.n	c376 <cbprintf_package_convert+0x1aa>
    c2ea:	6a38      	ldr	r0, [r7, #32]
    c2ec:	f01a f8a4 	bl	26438 <is_ptr>
    c2f0:	2800      	cmp	r0, #0
    c2f2:	d040      	beq.n	c376 <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    c2f4:	46e8      	mov	r8, sp
    c2f6:	b08a      	sub	sp, #40	; 0x28
    c2f8:	466a      	mov	r2, sp
    c2fa:	4b6a      	ldr	r3, [pc, #424]	; (c4a4 <cbprintf_package_convert+0x2d8>)
    c2fc:	6153      	str	r3, [r2, #20]
    c2fe:	6a3b      	ldr	r3, [r7, #32]
    c300:	e9c2 3106 	strd	r3, r1, [r2, #24]
    c304:	f44f 7300 	mov.w	r3, #512	; 0x200
    c308:	8413      	strh	r3, [r2, #32]
    c30a:	4b67      	ldr	r3, [pc, #412]	; (c4a8 <cbprintf_package_convert+0x2dc>)
    c30c:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c310:	2300      	movs	r3, #0
    c312:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    c316:	4865      	ldr	r0, [pc, #404]	; (c4ac <cbprintf_package_convert+0x2e0>)
    c318:	f002 f93a 	bl	e590 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    c31c:	3d02      	subs	r5, #2
    c31e:	46c5      	mov	sp, r8
				continue;
    c320:	e7d2      	b.n	c2c8 <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
    c322:	f818 2b01 	ldrb.w	r2, [r8], #1
    c326:	62fb      	str	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c328:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    c32c:	f7fd f818 	bl	9360 <strlen>
				if (strl && strl_cnt < strl_len) {
    c330:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c336:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    c338:	b142      	cbz	r2, c34c <cbprintf_package_convert+0x180>
    c33a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    c33e:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    c340:	bf3e      	ittt	cc
    c342:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
    c346:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    c34a:	3601      	addcc	r6, #1
				out_len += len;
    c34c:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    c34e:	e797      	b.n	c280 <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c350:	f01a 0604 	ands.w	r6, sl, #4
	size_t strl_cnt = 0;
    c354:	bf1c      	itt	ne
    c356:	6afe      	ldrne	r6, [r7, #44]	; 0x2c
				str_pos += ros_nbr;
    c358:	44d9      	addne	r9, fp
    c35a:	e7a9      	b.n	c2b0 <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c35c:	697b      	ldr	r3, [r7, #20]
    c35e:	b123      	cbz	r3, c36a <cbprintf_package_convert+0x19e>
    c360:	6a38      	ldr	r0, [r7, #32]
    c362:	f01a f869 	bl	26438 <is_ptr>
    c366:	2800      	cmp	r0, #0
    c368:	d1c4      	bne.n	c2f4 <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c36a:	f01a 0f01 	tst.w	sl, #1
    c36e:	d105      	bne.n	c37c <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
    c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c372:	1aed      	subs	r5, r5, r3
    c374:	e7a8      	b.n	c2c8 <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c378:	2b00      	cmp	r3, #0
    c37a:	d0a5      	beq.n	c2c8 <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
    c37c:	4640      	mov	r0, r8
    c37e:	f7fc ffef 	bl	9360 <strlen>
				if (strl && strl_cnt < strl_len) {
    c382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c386:	b14b      	cbz	r3, c39c <cbprintf_package_convert+0x1d0>
    c388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c38c:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    c38e:	bf3f      	itttt	cc
    c390:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
		return 1 + strlen(str);
    c394:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    c396:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    c39a:	3601      	addcc	r6, #1
				out_len += (len - 1);
    c39c:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    c39e:	e793      	b.n	c2c8 <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c3a0:	f1bb 0f00 	cmp.w	fp, #0
    c3a4:	d06e      	beq.n	c484 <cbprintf_package_convert+0x2b8>
    c3a6:	f01a 0604 	ands.w	r6, sl, #4
    c3aa:	d06e      	beq.n	c48a <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
    c3ac:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    c3ae:	2600      	movs	r6, #0
		dst = keep_str_pos;
    c3b0:	f107 0048 	add.w	r0, r7, #72	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c3b4:	465a      	mov	r2, fp
    c3b6:	4649      	mov	r1, r9
    c3b8:	f01f fab8 	bl	2b92c <memcpy>
	str_pos += ros_nbr;
    c3bc:	69bb      	ldr	r3, [r7, #24]
    c3be:	44d9      	add	r9, fp
	for (int i = 0; i < rws_nbr; i++) {
    c3c0:	005b      	lsls	r3, r3, #1
    c3c2:	60fb      	str	r3, [r7, #12]
    c3c4:	69bb      	ldr	r3, [r7, #24]
    c3c6:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    c3ca:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c3cc:	f00a 0302 	and.w	r3, sl, #2
    c3d0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    c3d2:	68bb      	ldr	r3, [r7, #8]
    c3d4:	454b      	cmp	r3, r9
    c3d6:	d16b      	bne.n	c4b0 <cbprintf_package_convert+0x2e4>
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c3d8:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c3da:	f01a 0f02 	tst.w	sl, #2
    c3de:	bf18      	it	ne
    c3e0:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c3e2:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c3e6:	bf08      	it	eq
    c3e8:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c3ec:	f01a 0f01 	tst.w	sl, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c3f0:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c3f2:	f040 80e1 	bne.w	c5b8 <cbprintf_package_convert+0x3ec>
    c3f6:	f01a 0f04 	tst.w	sl, #4
    c3fa:	bf14      	ite	ne
    c3fc:	4640      	movne	r0, r8
    c3fe:	2000      	moveq	r0, #0
    c400:	623b      	str	r3, [r7, #32]
	*in_desc = out_desc;
    c402:	7062      	strb	r2, [r4, #1]
    c404:	70a0      	strb	r0, [r4, #2]
    c406:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    c408:	4620      	mov	r0, r4
    c40a:	69fa      	ldr	r2, [r7, #28]
    c40c:	6939      	ldr	r1, [r7, #16]
    c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c410:	4798      	blx	r3
	if (rv < 0) {
    c412:	1e05      	subs	r5, r0, #0
    c414:	f6ff af14 	blt.w	c240 <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
    c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c41a:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    c41c:	7023      	strb	r3, [r4, #0]
    c41e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c420:	69fa      	ldr	r2, [r7, #28]
	*in_desc = in_desc_backup;
    c422:	7063      	strb	r3, [r4, #1]
    c424:	69bb      	ldr	r3, [r7, #24]
    c426:	f884 b002 	strb.w	fp, [r4, #2]
    c42a:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c42c:	f107 0048 	add.w	r0, r7, #72	; 0x48
    c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c432:	4798      	blx	r3
	if (rv < 0) {
    c434:	f1b0 0800 	subs.w	r8, r0, #0
    c438:	f2c0 80ec 	blt.w	c614 <cbprintf_package_convert+0x448>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	rv = cb(str_pos, strs_len, ctx);
    c43e:	4648      	mov	r0, r9
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c440:	eba3 010b 	sub.w	r1, r3, fp
    c444:	693b      	ldr	r3, [r7, #16]
	rv = cb(str_pos, strs_len, ctx);
    c446:	69fa      	ldr	r2, [r7, #28]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c448:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    c44a:	68fb      	ldr	r3, [r7, #12]
    c44c:	1ac9      	subs	r1, r1, r3
    c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c450:	4798      	blx	r3
	if (rv < 0) {
    c452:	2800      	cmp	r0, #0
    c454:	f2c0 80e0 	blt.w	c618 <cbprintf_package_convert+0x44c>
	for (int i = 0; i < scpy_cnt; i++) {
    c458:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    c45c:	44a8      	add	r8, r5
	out_len += rv;
    c45e:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    c462:	f107 0a38 	add.w	sl, r7, #56	; 0x38
	for (int i = 0; i < scpy_cnt; i++) {
    c466:	45b3      	cmp	fp, r6
    c468:	f2c0 80a8 	blt.w	c5bc <cbprintf_package_convert+0x3f0>
	(void)cb(NULL, 0, ctx);
    c46c:	2100      	movs	r1, #0
    c46e:	69fa      	ldr	r2, [r7, #28]
    c470:	4608      	mov	r0, r1
    c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c474:	4798      	blx	r3
	return out_len;
    c476:	e6e3      	b.n	c240 <cbprintf_package_convert+0x74>
	if (cb == NULL) {
    c478:	465e      	mov	r6, fp
    c47a:	f04f 0800 	mov.w	r8, #0
    c47e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    c482:	e797      	b.n	c3b4 <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
    c484:	465e      	mov	r6, fp
		keep_cnt = 0;
    c486:	46d8      	mov	r8, fp
    c488:	e798      	b.n	c3bc <cbprintf_package_convert+0x1f0>
    c48a:	46b0      	mov	r8, r6
    c48c:	e796      	b.n	c3bc <cbprintf_package_convert+0x1f0>
    c48e:	bf00      	nop
    c490:	0002e34a 	.word	0x0002e34a
    c494:	0002e2b5 	.word	0x0002e2b5
    c498:	0002d881 	.word	0x0002d881
    c49c:	0002c180 	.word	0x0002c180
    c4a0:	000337e4 	.word	0x000337e4
    c4a4:	0002e365 	.word	0x0002e365
    c4a8:	01000004 	.word	0x01000004
    c4ac:	0002c85c 	.word	0x0002c85c
		uint8_t arg_idx = *str_pos++;
    c4b0:	f819 1b02 	ldrb.w	r1, [r9], #2
    c4b4:	4b59      	ldr	r3, [pc, #356]	; (c61c <cbprintf_package_convert+0x450>)
		uint8_t arg_pos = *str_pos++;
    c4b6:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    c4ba:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    c4be:	4298      	cmp	r0, r3
    c4c0:	d302      	bcc.n	c4c8 <cbprintf_package_convert+0x2fc>
    c4c2:	4b57      	ldr	r3, [pc, #348]	; (c620 <cbprintf_package_convert+0x454>)
    c4c4:	4298      	cmp	r0, r3
    c4c6:	d316      	bcc.n	c4f6 <cbprintf_package_convert+0x32a>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c4c8:	697b      	ldr	r3, [r7, #20]
    c4ca:	b12b      	cbz	r3, c4d8 <cbprintf_package_convert+0x30c>
    c4cc:	6a38      	ldr	r0, [r7, #32]
    c4ce:	f019 ffb3 	bl	26438 <is_ptr>
    c4d2:	2800      	cmp	r0, #0
    c4d4:	f47f af7d 	bne.w	c3d2 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c4d8:	687b      	ldr	r3, [r7, #4]
    c4da:	2b00      	cmp	r3, #0
    c4dc:	d04a      	beq.n	c574 <cbprintf_package_convert+0x3a8>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c4de:	2e0f      	cmp	r6, #15
    c4e0:	d93e      	bls.n	c560 <cbprintf_package_convert+0x394>
    c4e2:	4950      	ldr	r1, [pc, #320]	; (c624 <cbprintf_package_convert+0x458>)
    c4e4:	f44f 6389 	mov.w	r3, #1096	; 0x448
    c4e8:	4a4f      	ldr	r2, [pc, #316]	; (c628 <cbprintf_package_convert+0x45c>)
    c4ea:	4850      	ldr	r0, [pc, #320]	; (c62c <cbprintf_package_convert+0x460>)
    c4ec:	f01a fa19 	bl	26922 <assert_print>
    c4f0:	f44f 6189 	mov.w	r1, #1096	; 0x448
    c4f4:	e67e      	b.n	c1f4 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c4f6:	697b      	ldr	r3, [r7, #20]
    c4f8:	b12b      	cbz	r3, c506 <cbprintf_package_convert+0x33a>
    c4fa:	6a38      	ldr	r0, [r7, #32]
    c4fc:	f019 ff9c 	bl	26438 <is_ptr>
    c500:	2800      	cmp	r0, #0
    c502:	f47f af66 	bne.w	c3d2 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c506:	f01a 0f01 	tst.w	sl, #1
    c50a:	d00b      	beq.n	c524 <cbprintf_package_convert+0x358>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c50c:	2e0f      	cmp	r6, #15
    c50e:	d927      	bls.n	c560 <cbprintf_package_convert+0x394>
    c510:	4944      	ldr	r1, [pc, #272]	; (c624 <cbprintf_package_convert+0x458>)
    c512:	f240 433e 	movw	r3, #1086	; 0x43e
    c516:	4a44      	ldr	r2, [pc, #272]	; (c628 <cbprintf_package_convert+0x45c>)
    c518:	4844      	ldr	r0, [pc, #272]	; (c62c <cbprintf_package_convert+0x460>)
    c51a:	f01a fa02 	bl	26922 <assert_print>
    c51e:	f240 413e 	movw	r1, #1086	; 0x43e
    c522:	e667      	b.n	c1f4 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c524:	f01a 0f04 	tst.w	sl, #4
    c528:	f43f af53 	beq.w	c3d2 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c52c:	f1b8 0f0f 	cmp.w	r8, #15
    c530:	d909      	bls.n	c546 <cbprintf_package_convert+0x37a>
    c532:	493f      	ldr	r1, [pc, #252]	; (c630 <cbprintf_package_convert+0x464>)
    c534:	f240 4341 	movw	r3, #1089	; 0x441
    c538:	4a3b      	ldr	r2, [pc, #236]	; (c628 <cbprintf_package_convert+0x45c>)
    c53a:	483c      	ldr	r0, [pc, #240]	; (c62c <cbprintf_package_convert+0x460>)
    c53c:	f01a f9f1 	bl	26922 <assert_print>
    c540:	f240 4141 	movw	r1, #1089	; 0x441
    c544:	e656      	b.n	c1f4 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
    c546:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c54a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c54e:	f108 0101 	add.w	r1, r8, #1
    c552:	eb03 0802 	add.w	r8, r3, r2
    c556:	f808 5c10 	strb.w	r5, [r8, #-16]
    c55a:	fa5f f881 	uxtb.w	r8, r1
    c55e:	e738      	b.n	c3d2 <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    c560:	f106 0328 	add.w	r3, r6, #40	; 0x28
    c564:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c568:	1c71      	adds	r1, r6, #1
    c56a:	189e      	adds	r6, r3, r2
    c56c:	f806 5c20 	strb.w	r5, [r6, #-32]
    c570:	b2ce      	uxtb	r6, r1
    c572:	e72e      	b.n	c3d2 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c574:	f1b8 0f0f 	cmp.w	r8, #15
    c578:	d909      	bls.n	c58e <cbprintf_package_convert+0x3c2>
    c57a:	492d      	ldr	r1, [pc, #180]	; (c630 <cbprintf_package_convert+0x464>)
    c57c:	f240 434b 	movw	r3, #1099	; 0x44b
    c580:	4a29      	ldr	r2, [pc, #164]	; (c628 <cbprintf_package_convert+0x45c>)
    c582:	482a      	ldr	r0, [pc, #168]	; (c62c <cbprintf_package_convert+0x460>)
    c584:	f01a f9cd 	bl	26922 <assert_print>
    c588:	f240 414b 	movw	r1, #1099	; 0x44b
    c58c:	e632      	b.n	c1f4 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
    c58e:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c592:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c596:	f108 0001 	add.w	r0, r8, #1
    c59a:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    c59e:	f107 0358 	add.w	r3, r7, #88	; 0x58
    c5a2:	f108 0802 	add.w	r8, r8, #2
    c5a6:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    c5aa:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    c5ae:	fa5f f888 	uxtb.w	r8, r8
    c5b2:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    c5b6:	e70c      	b.n	c3d2 <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c5b8:	2000      	movs	r0, #0
    c5ba:	e721      	b.n	c400 <cbprintf_package_convert+0x234>
		uint8_t loc = cpy_str_pos[i];
    c5bc:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    c5c0:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    c5c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t str_len = strl ? strl[i] : 0;
    c5c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c5cc:	b1fb      	cbz	r3, c60e <cbprintf_package_convert+0x442>
    c5ce:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    c5d2:	2101      	movs	r1, #1
    c5d4:	69fa      	ldr	r2, [r7, #28]
    c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5d8:	f107 0037 	add.w	r0, r7, #55	; 0x37
    c5dc:	4798      	blx	r3
		if (rv < 0) {
    c5de:	2800      	cmp	r0, #0
    c5e0:	db1a      	blt.n	c618 <cbprintf_package_convert+0x44c>
		out_len += rv;
    c5e2:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    c5e4:	f1b8 0f00 	cmp.w	r8, #0
    c5e8:	d106      	bne.n	c5f8 <cbprintf_package_convert+0x42c>
    c5ea:	4648      	mov	r0, r9
    c5ec:	f7fc feb8 	bl	9360 <strlen>
    c5f0:	f100 0801 	add.w	r8, r0, #1
    c5f4:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    c5f8:	4641      	mov	r1, r8
    c5fa:	4648      	mov	r0, r9
    c5fc:	69fa      	ldr	r2, [r7, #28]
    c5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c600:	4798      	blx	r3
		if (rv < 0) {
    c602:	2800      	cmp	r0, #0
    c604:	db08      	blt.n	c618 <cbprintf_package_convert+0x44c>
		out_len += rv;
    c606:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    c608:	f10b 0b01 	add.w	fp, fp, #1
    c60c:	e72b      	b.n	c466 <cbprintf_package_convert+0x29a>
		uint16_t str_len = strl ? strl[i] : 0;
    c60e:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
    c612:	e7de      	b.n	c5d2 <cbprintf_package_convert+0x406>
    c614:	4645      	mov	r5, r8
    c616:	e613      	b.n	c240 <cbprintf_package_convert+0x74>
    c618:	4605      	mov	r5, r0
    c61a:	e611      	b.n	c240 <cbprintf_package_convert+0x74>
    c61c:	0002c180 	.word	0x0002c180
    c620:	000337e4 	.word	0x000337e4
    c624:	0002e408 	.word	0x0002e408
    c628:	0002e2b5 	.word	0x0002e2b5
    c62c:	0002d881 	.word	0x0002d881
    c630:	0002e427 	.word	0x0002e427

0000c634 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    c634:	4b01      	ldr	r3, [pc, #4]	; (c63c <char_out+0x8>)
    c636:	681b      	ldr	r3, [r3, #0]
    c638:	4718      	bx	r3
    c63a:	bf00      	nop
    c63c:	20008584 	.word	0x20008584

0000c640 <__printk_hook_install>:
	_char_out = fn;
    c640:	4b01      	ldr	r3, [pc, #4]	; (c648 <__printk_hook_install+0x8>)
    c642:	6018      	str	r0, [r3, #0]
}
    c644:	4770      	bx	lr
    c646:	bf00      	nop
    c648:	20008584 	.word	0x20008584

0000c64c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    c64c:	b507      	push	{r0, r1, r2, lr}
    c64e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c650:	2100      	movs	r1, #0
    c652:	4602      	mov	r2, r0
    c654:	9100      	str	r1, [sp, #0]
    c656:	4803      	ldr	r0, [pc, #12]	; (c664 <vprintk+0x18>)
    c658:	f000 fcb0 	bl	cfbc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    c65c:	b003      	add	sp, #12
    c65e:	f85d fb04 	ldr.w	pc, [sp], #4
    c662:	bf00      	nop
    c664:	0000c635 	.word	0x0000c635

0000c668 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c668:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    c66a:	2500      	movs	r5, #0
{
    c66c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    c66e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    c672:	4604      	mov	r4, r0
    c674:	9500      	str	r5, [sp, #0]
    c676:	a903      	add	r1, sp, #12
    c678:	4805      	ldr	r0, [pc, #20]	; (c690 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    c67a:	9505      	str	r5, [sp, #20]
    c67c:	f000 fc9e 	bl	cfbc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    c680:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    c684:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c686:	bfb8      	it	lt
    c688:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c68a:	b007      	add	sp, #28
    c68c:	bd30      	pop	{r4, r5, pc}
    c68e:	bf00      	nop
    c690:	00026579 	.word	0x00026579

0000c694 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    c694:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    c696:	460c      	mov	r4, r1
    c698:	2900      	cmp	r1, #0
    c69a:	d034      	beq.n	c706 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    c69c:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c69e:	1f0b      	subs	r3, r1, #4
    c6a0:	1a9b      	subs	r3, r3, r2
    c6a2:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    c6a4:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c6a8:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c6aa:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    c6ac:	07e8      	lsls	r0, r5, #31
    c6ae:	d40d      	bmi.n	c6cc <sys_heap_free+0x38>
    c6b0:	23af      	movs	r3, #175	; 0xaf
    c6b2:	4a15      	ldr	r2, [pc, #84]	; (c708 <sys_heap_free+0x74>)
    c6b4:	4915      	ldr	r1, [pc, #84]	; (c70c <sys_heap_free+0x78>)
    c6b6:	4816      	ldr	r0, [pc, #88]	; (c710 <sys_heap_free+0x7c>)
    c6b8:	f01a f933 	bl	26922 <assert_print>
    c6bc:	4621      	mov	r1, r4
    c6be:	4815      	ldr	r0, [pc, #84]	; (c714 <sys_heap_free+0x80>)
    c6c0:	f01a f92f 	bl	26922 <assert_print>
    c6c4:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    c6c6:	4810      	ldr	r0, [pc, #64]	; (c708 <sys_heap_free+0x74>)
    c6c8:	f01a f924 	bl	26914 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    c6cc:	4610      	mov	r0, r2
    c6ce:	f019 ff8a 	bl	265e6 <chunk_size>
    c6d2:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    c6d4:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c6d8:	1b80      	subs	r0, r0, r6
    c6da:	4281      	cmp	r1, r0
    c6dc:	d00b      	beq.n	c6f6 <sys_heap_free+0x62>
    c6de:	23b7      	movs	r3, #183	; 0xb7
    c6e0:	4a09      	ldr	r2, [pc, #36]	; (c708 <sys_heap_free+0x74>)
    c6e2:	490d      	ldr	r1, [pc, #52]	; (c718 <sys_heap_free+0x84>)
    c6e4:	480a      	ldr	r0, [pc, #40]	; (c710 <sys_heap_free+0x7c>)
    c6e6:	f01a f91c 	bl	26922 <assert_print>
    c6ea:	4621      	mov	r1, r4
    c6ec:	480b      	ldr	r0, [pc, #44]	; (c71c <sys_heap_free+0x88>)
    c6ee:	f01a f918 	bl	26922 <assert_print>
    c6f2:	21b7      	movs	r1, #183	; 0xb7
    c6f4:	e7e7      	b.n	c6c6 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c6f6:	f025 0501 	bic.w	r5, r5, #1
    c6fa:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    c6fc:	4610      	mov	r0, r2
}
    c6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    c702:	f01a b82d 	b.w	26760 <free_chunk>
}
    c706:	bd70      	pop	{r4, r5, r6, pc}
    c708:	0002e458 	.word	0x0002e458
    c70c:	0002e479 	.word	0x0002e479
    c710:	0002d881 	.word	0x0002d881
    c714:	0002e48a 	.word	0x0002e48a
    c718:	0002e4c2 	.word	0x0002e4c2
    c71c:	0002e4e8 	.word	0x0002e4e8

0000c720 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c724:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    c726:	400b      	ands	r3, r1
{
    c728:	460f      	mov	r7, r1
    c72a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    c72c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    c72e:	d010      	beq.n	c752 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    c730:	f1c1 0900 	rsb	r9, r1, #0
    c734:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    c738:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    c73a:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    c73c:	2a04      	cmp	r2, #4
    c73e:	bf28      	it	cs
    c740:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    c742:	4219      	tst	r1, r3
    c744:	d10c      	bne.n	c760 <sys_heap_aligned_alloc+0x40>
    c746:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    c748:	b9e4      	cbnz	r4, c784 <sys_heap_aligned_alloc+0x64>
		return NULL;
    c74a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    c74c:	4628      	mov	r0, r5
    c74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    c752:	2904      	cmp	r1, #4
    c754:	d813      	bhi.n	c77e <sys_heap_aligned_alloc+0x5e>
}
    c756:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    c75a:	4611      	mov	r1, r2
    c75c:	f01a b831 	b.w	267c2 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    c760:	492c      	ldr	r1, [pc, #176]	; (c814 <sys_heap_aligned_alloc+0xf4>)
    c762:	f44f 73a2 	mov.w	r3, #324	; 0x144
    c766:	4a2c      	ldr	r2, [pc, #176]	; (c818 <sys_heap_aligned_alloc+0xf8>)
    c768:	482c      	ldr	r0, [pc, #176]	; (c81c <sys_heap_aligned_alloc+0xfc>)
    c76a:	f01a f8da 	bl	26922 <assert_print>
    c76e:	482c      	ldr	r0, [pc, #176]	; (c820 <sys_heap_aligned_alloc+0x100>)
    c770:	f01a f8d7 	bl	26922 <assert_print>
    c774:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c778:	4827      	ldr	r0, [pc, #156]	; (c818 <sys_heap_aligned_alloc+0xf8>)
    c77a:	f01a f8cb 	bl	26914 <assert_post_action>
		rew = 0;
    c77e:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    c780:	2204      	movs	r2, #4
    c782:	e7e1      	b.n	c748 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    c784:	68b3      	ldr	r3, [r6, #8]
    c786:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    c78a:	d9de      	bls.n	c74a <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c78c:	f104 010b 	add.w	r1, r4, #11
    c790:	4439      	add	r1, r7
    c792:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    c794:	4630      	mov	r0, r6
    c796:	08c9      	lsrs	r1, r1, #3
    c798:	f019 ff7b 	bl	26692 <alloc_chunk>
	if (c0 == 0) {
    c79c:	4680      	mov	r8, r0
    c79e:	2800      	cmp	r0, #0
    c7a0:	d0d3      	beq.n	c74a <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    c7a2:	f109 0504 	add.w	r5, r9, #4
    c7a6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    c7aa:	1e7b      	subs	r3, r7, #1
    c7ac:	4435      	add	r5, r6
    c7ae:	441d      	add	r5, r3
    c7b0:	427f      	negs	r7, r7
    c7b2:	403d      	ands	r5, r7
    c7b4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c7b8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c7ba:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c7bc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c7be:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c7c0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    c7c4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    c7c6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c7ca:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    c7ce:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    c7d2:	d208      	bcs.n	c7e6 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    c7d4:	4601      	mov	r1, r0
    c7d6:	463a      	mov	r2, r7
    c7d8:	4630      	mov	r0, r6
    c7da:	f019 ffa7 	bl	2672c <split_chunks>
		free_list_add(h, c0);
    c7de:	4641      	mov	r1, r8
    c7e0:	4630      	mov	r0, r6
    c7e2:	f019 ff05 	bl	265f0 <free_list_add>
	return c + chunk_size(h, c);
    c7e6:	4639      	mov	r1, r7
    c7e8:	4630      	mov	r0, r6
    c7ea:	f019 fefc 	bl	265e6 <chunk_size>
    c7ee:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    c7f0:	4284      	cmp	r4, r0
    c7f2:	d207      	bcs.n	c804 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    c7f4:	4630      	mov	r0, r6
    c7f6:	4622      	mov	r2, r4
    c7f8:	f019 ff98 	bl	2672c <split_chunks>
		free_list_add(h, c_end);
    c7fc:	4621      	mov	r1, r4
    c7fe:	4630      	mov	r0, r6
    c800:	f019 fef6 	bl	265f0 <free_list_add>
	void *cmem = &buf[c];
    c804:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c808:	8873      	ldrh	r3, [r6, #2]
    c80a:	f043 0301 	orr.w	r3, r3, #1
    c80e:	8073      	strh	r3, [r6, #2]
    c810:	e79c      	b.n	c74c <sys_heap_aligned_alloc+0x2c>
    c812:	bf00      	nop
    c814:	0002e524 	.word	0x0002e524
    c818:	0002e458 	.word	0x0002e458
    c81c:	0002d881 	.word	0x0002d881
    c820:	0002e53f 	.word	0x0002e53f

0000c824 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    c824:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c82a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    c82c:	d30e      	bcc.n	c84c <sys_heap_init+0x28>
    c82e:	493a      	ldr	r1, [pc, #232]	; (c918 <sys_heap_init+0xf4>)
    c830:	f240 13eb 	movw	r3, #491	; 0x1eb
    c834:	4a39      	ldr	r2, [pc, #228]	; (c91c <sys_heap_init+0xf8>)
    c836:	483a      	ldr	r0, [pc, #232]	; (c920 <sys_heap_init+0xfc>)
    c838:	f01a f873 	bl	26922 <assert_print>
    c83c:	4839      	ldr	r0, [pc, #228]	; (c924 <sys_heap_init+0x100>)
    c83e:	f01a f870 	bl	26922 <assert_print>
    c842:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    c846:	4835      	ldr	r0, [pc, #212]	; (c91c <sys_heap_init+0xf8>)
    c848:	f01a f864 	bl	26914 <assert_post_action>
    c84c:	2a04      	cmp	r2, #4
    c84e:	d80c      	bhi.n	c86a <sys_heap_init+0x46>
    c850:	4935      	ldr	r1, [pc, #212]	; (c928 <sys_heap_init+0x104>)
    c852:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    c856:	4a31      	ldr	r2, [pc, #196]	; (c91c <sys_heap_init+0xf8>)
    c858:	4831      	ldr	r0, [pc, #196]	; (c920 <sys_heap_init+0xfc>)
    c85a:	f01a f862 	bl	26922 <assert_print>
    c85e:	4833      	ldr	r0, [pc, #204]	; (c92c <sys_heap_init+0x108>)
    c860:	f01a f85f 	bl	26922 <assert_print>
    c864:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    c868:	e7ed      	b.n	c846 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    c86a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c86c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c86e:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c870:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c874:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    c878:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    c87a:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    c87c:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    c880:	d80c      	bhi.n	c89c <sys_heap_init+0x78>
    c882:	492b      	ldr	r1, [pc, #172]	; (c930 <sys_heap_init+0x10c>)
    c884:	f240 13fb 	movw	r3, #507	; 0x1fb
    c888:	4a24      	ldr	r2, [pc, #144]	; (c91c <sys_heap_init+0xf8>)
    c88a:	4825      	ldr	r0, [pc, #148]	; (c920 <sys_heap_init+0xfc>)
    c88c:	f01a f849 	bl	26922 <assert_print>
    c890:	4826      	ldr	r0, [pc, #152]	; (c92c <sys_heap_init+0x108>)
    c892:	f01a f846 	bl	26922 <assert_print>
    c896:	f240 11fb 	movw	r1, #507	; 0x1fb
    c89a:	e7d4      	b.n	c846 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    c89c:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    c8a0:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    c8a2:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    c8a4:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c8a8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    c8ac:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c8ae:	3107      	adds	r1, #7
    c8b0:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    c8b2:	1c4d      	adds	r5, r1, #1
    c8b4:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    c8b6:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    c8b8:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    c8ba:	d90c      	bls.n	c8d6 <sys_heap_init+0xb2>
    c8bc:	491d      	ldr	r1, [pc, #116]	; (c934 <sys_heap_init+0x110>)
    c8be:	f44f 7303 	mov.w	r3, #524	; 0x20c
    c8c2:	4a16      	ldr	r2, [pc, #88]	; (c91c <sys_heap_init+0xf8>)
    c8c4:	4816      	ldr	r0, [pc, #88]	; (c920 <sys_heap_init+0xfc>)
    c8c6:	f01a f82c 	bl	26922 <assert_print>
    c8ca:	4818      	ldr	r0, [pc, #96]	; (c92c <sys_heap_init+0x108>)
    c8cc:	f01a f829 	bl	26922 <assert_print>
    c8d0:	f44f 7103 	mov.w	r1, #524	; 0x20c
    c8d4:	e7b7      	b.n	c846 <sys_heap_init+0x22>
    c8d6:	f100 050c 	add.w	r5, r0, #12
    c8da:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    c8de:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    c8e2:	42b5      	cmp	r5, r6
    c8e4:	d1fb      	bne.n	c8de <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c8e6:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c8e8:	f045 0501 	orr.w	r5, r5, #1
    c8ec:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    c8ee:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    c8f0:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c8f4:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    c8f6:	8004      	strh	r4, [r0, #0]
    c8f8:	8077      	strh	r7, [r6, #2]
    c8fa:	1886      	adds	r6, r0, r2
    c8fc:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    c900:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    c904:	8074      	strh	r4, [r6, #2]
    c906:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c908:	885a      	ldrh	r2, [r3, #2]
    c90a:	f042 0201 	orr.w	r2, r2, #1
    c90e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    c910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    c914:	f019 be6c 	b.w	265f0 <free_list_add>
    c918:	0002e55c 	.word	0x0002e55c
    c91c:	0002e458 	.word	0x0002e458
    c920:	0002d881 	.word	0x0002d881
    c924:	0002e572 	.word	0x0002e572
    c928:	0002e589 	.word	0x0002e589
    c92c:	0002e5aa 	.word	0x0002e5aa
    c930:	0002e5c3 	.word	0x0002e5c3
    c934:	0002e5ec 	.word	0x0002e5ec

0000c938 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    c938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c93c:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c93e:	8ba3      	ldrh	r3, [r4, #28]
{
    c940:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    c942:	0719      	lsls	r1, r3, #28
{
    c944:	4615      	mov	r5, r2
	if (processing) {
    c946:	d412      	bmi.n	c96e <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    c948:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c94a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    c94e:	d164      	bne.n	ca1a <process_event+0xe2>
			evt = process_recheck(mgr);
    c950:	4620      	mov	r0, r4
    c952:	f019 ff5f 	bl	26814 <process_recheck>
		}

		if (evt == EVT_NOP) {
    c956:	b188      	cbz	r0, c97c <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    c958:	3801      	subs	r0, #1
    c95a:	2804      	cmp	r0, #4
    c95c:	f200 8134 	bhi.w	cbc8 <process_event+0x290>
    c960:	e8df f010 	tbh	[pc, r0, lsl #1]
    c964:	0132005b 	.word	0x0132005b
    c968:	00d10081 	.word	0x00d10081
    c96c:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    c96e:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    c970:	bf0c      	ite	eq
    c972:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c976:	f043 0120 	orrne.w	r1, r3, #32
    c97a:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    c97c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c97e:	4620      	mov	r0, r4
    c980:	f014 fcfc 	bl	2137c <z_spin_unlock_valid>
    c984:	2800      	cmp	r0, #0
    c986:	f040 819b 	bne.w	ccc0 <process_event+0x388>
    c98a:	4998      	ldr	r1, [pc, #608]	; (cbec <process_event+0x2b4>)
    c98c:	23c2      	movs	r3, #194	; 0xc2
    c98e:	4a98      	ldr	r2, [pc, #608]	; (cbf0 <process_event+0x2b8>)
    c990:	4898      	ldr	r0, [pc, #608]	; (cbf4 <process_event+0x2bc>)
    c992:	f019 ffc6 	bl	26922 <assert_print>
    c996:	4621      	mov	r1, r4
    c998:	e0b0      	b.n	cafc <process_event+0x1c4>
    c99a:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    c99e:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    c9a0:	2801      	cmp	r0, #1
    c9a2:	d81e      	bhi.n	c9e2 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    c9a4:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    c9a6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    c9a8:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    c9aa:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    c9ae:	d114      	bne.n	c9da <process_event+0xa2>
		*clients = mgr->clients;
    c9b0:	463a      	mov	r2, r7
    c9b2:	e003      	b.n	c9bc <process_event+0x84>
				mgr->refs += 1U;
    c9b4:	8be0      	ldrh	r0, [r4, #30]
    c9b6:	3001      	adds	r0, #1
    c9b8:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    c9ba:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c9bc:	2a00      	cmp	r2, #0
    c9be:	d1f9      	bne.n	c9b4 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c9c0:	f023 0307 	bic.w	r3, r3, #7
    c9c4:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    c9c8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    c9ca:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    c9cc:	f019 ff22 	bl	26814 <process_recheck>
    c9d0:	b390      	cbz	r0, ca38 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c9d2:	f042 0220 	orr.w	r2, r2, #32
    c9d6:	83a2      	strh	r2, [r4, #28]
    c9d8:	e02e      	b.n	ca38 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c9da:	f023 0307 	bic.w	r3, r3, #7
    c9de:	b29a      	uxth	r2, r3
}
    c9e0:	e7f2      	b.n	c9c8 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    c9e2:	2a04      	cmp	r2, #4
    c9e4:	d133      	bne.n	ca4e <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c9e6:	f023 0307 	bic.w	r3, r3, #7
    c9ea:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    c9ec:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    c9ee:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    c9f0:	f019 ff10 	bl	26814 <process_recheck>
    c9f4:	b110      	cbz	r0, c9fc <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c9f6:	f042 0220 	orr.w	r2, r2, #32
    c9fa:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    c9fc:	8ba3      	ldrh	r3, [r4, #28]
    c9fe:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ca02:	4589      	cmp	r9, r1
    ca04:	f040 80ea 	bne.w	cbdc <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ca08:	8ba1      	ldrh	r1, [r4, #28]
    ca0a:	06ca      	lsls	r2, r1, #27
    ca0c:	f140 814f 	bpl.w	ccae <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ca10:	f021 0310 	bic.w	r3, r1, #16
    ca14:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    ca16:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    ca1a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ca1e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    ca20:	f1b8 0f00 	cmp.w	r8, #0
    ca24:	dab9      	bge.n	c99a <process_event+0x62>
	list->head = NULL;
    ca26:	2200      	movs	r2, #0
		*clients = mgr->clients;
    ca28:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca2a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    ca2e:	e9c4 2200 	strd	r2, r2, [r4]
    ca32:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ca36:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ca38:	8ba3      	ldrh	r3, [r4, #28]
    ca3a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ca3e:	4589      	cmp	r9, r1
    ca40:	f040 80cd 	bne.w	cbde <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    ca44:	2f00      	cmp	r7, #0
    ca46:	d0df      	beq.n	ca08 <process_event+0xd0>
    ca48:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ca4a:	46b2      	mov	sl, r6
    ca4c:	e044      	b.n	cad8 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    ca4e:	496a      	ldr	r1, [pc, #424]	; (cbf8 <process_event+0x2c0>)
    ca50:	f240 131b 	movw	r3, #283	; 0x11b
    ca54:	4a69      	ldr	r2, [pc, #420]	; (cbfc <process_event+0x2c4>)
    ca56:	4867      	ldr	r0, [pc, #412]	; (cbf4 <process_event+0x2bc>)
    ca58:	f019 ff63 	bl	26922 <assert_print>
    ca5c:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    ca60:	4866      	ldr	r0, [pc, #408]	; (cbfc <process_event+0x2c4>)
    ca62:	f019 ff57 	bl	26914 <assert_post_action>
    ca66:	b149      	cbz	r1, ca7c <process_event+0x144>
    ca68:	4965      	ldr	r1, [pc, #404]	; (cc00 <process_event+0x2c8>)
    ca6a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    ca6e:	4a63      	ldr	r2, [pc, #396]	; (cbfc <process_event+0x2c4>)
    ca70:	4860      	ldr	r0, [pc, #384]	; (cbf4 <process_event+0x2bc>)
    ca72:	f019 ff56 	bl	26922 <assert_print>
    ca76:	f44f 71ab 	mov.w	r1, #342	; 0x156
    ca7a:	e7f1      	b.n	ca60 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ca7c:	6823      	ldr	r3, [r4, #0]
    ca7e:	b94b      	cbnz	r3, ca94 <process_event+0x15c>
    ca80:	4960      	ldr	r1, [pc, #384]	; (cc04 <process_event+0x2cc>)
    ca82:	f240 1357 	movw	r3, #343	; 0x157
    ca86:	4a5d      	ldr	r2, [pc, #372]	; (cbfc <process_event+0x2c4>)
    ca88:	485a      	ldr	r0, [pc, #360]	; (cbf4 <process_event+0x2bc>)
    ca8a:	f019 ff4a 	bl	26922 <assert_print>
    ca8e:	f240 1157 	movw	r1, #343	; 0x157
    ca92:	e7e5      	b.n	ca60 <process_event+0x128>
			transit = mgr->transitions->start;
    ca94:	6923      	ldr	r3, [r4, #16]
    ca96:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    ca98:	b94e      	cbnz	r6, caae <process_event+0x176>
    ca9a:	495b      	ldr	r1, [pc, #364]	; (cc08 <process_event+0x2d0>)
    ca9c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    caa0:	4a56      	ldr	r2, [pc, #344]	; (cbfc <process_event+0x2c4>)
    caa2:	4854      	ldr	r0, [pc, #336]	; (cbf4 <process_event+0x2bc>)
    caa4:	f019 ff3d 	bl	26922 <assert_print>
    caa8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    caac:	e7d8      	b.n	ca60 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    caae:	460f      	mov	r7, r1
		res = 0;
    cab0:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cab2:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cab6:	8ba3      	ldrh	r3, [r4, #28]
    cab8:	f023 0307 	bic.w	r3, r3, #7
    cabc:	f043 0306 	orr.w	r3, r3, #6
    cac0:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    cac2:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    cac4:	68a2      	ldr	r2, [r4, #8]
    cac6:	2a00      	cmp	r2, #0
    cac8:	f040 808b 	bne.w	cbe2 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    cacc:	2f00      	cmp	r7, #0
    cace:	f040 808b 	bne.w	cbe8 <process_event+0x2b0>
		    || (transit != NULL)) {
    cad2:	2e00      	cmp	r6, #0
    cad4:	d098      	beq.n	ca08 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cad6:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cad8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    cadc:	f104 0b14 	add.w	fp, r4, #20
    cae0:	4658      	mov	r0, fp
			mgr->flags = flags;
    cae2:	83a3      	strh	r3, [r4, #28]
    cae4:	f014 fc4a 	bl	2137c <z_spin_unlock_valid>
    cae8:	2800      	cmp	r0, #0
    caea:	f040 8097 	bne.w	cc1c <process_event+0x2e4>
    caee:	493f      	ldr	r1, [pc, #252]	; (cbec <process_event+0x2b4>)
    caf0:	23c2      	movs	r3, #194	; 0xc2
    caf2:	4a3f      	ldr	r2, [pc, #252]	; (cbf0 <process_event+0x2b8>)
    caf4:	483f      	ldr	r0, [pc, #252]	; (cbf4 <process_event+0x2bc>)
    caf6:	f019 ff14 	bl	26922 <assert_print>
    cafa:	4659      	mov	r1, fp
    cafc:	4843      	ldr	r0, [pc, #268]	; (cc0c <process_event+0x2d4>)
    cafe:	f019 ff10 	bl	26922 <assert_print>
    cb02:	21c2      	movs	r1, #194	; 0xc2
    cb04:	e0ae      	b.n	cc64 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    cb06:	2902      	cmp	r1, #2
    cb08:	d009      	beq.n	cb1e <process_event+0x1e6>
    cb0a:	4941      	ldr	r1, [pc, #260]	; (cc10 <process_event+0x2d8>)
    cb0c:	f240 135d 	movw	r3, #349	; 0x15d
    cb10:	4a3a      	ldr	r2, [pc, #232]	; (cbfc <process_event+0x2c4>)
    cb12:	4838      	ldr	r0, [pc, #224]	; (cbf4 <process_event+0x2bc>)
    cb14:	f019 ff05 	bl	26922 <assert_print>
    cb18:	f240 115d 	movw	r1, #349	; 0x15d
    cb1c:	e7a0      	b.n	ca60 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    cb1e:	8be7      	ldrh	r7, [r4, #30]
    cb20:	b14f      	cbz	r7, cb36 <process_event+0x1fe>
    cb22:	493c      	ldr	r1, [pc, #240]	; (cc14 <process_event+0x2dc>)
    cb24:	f44f 73af 	mov.w	r3, #350	; 0x15e
    cb28:	4a34      	ldr	r2, [pc, #208]	; (cbfc <process_event+0x2c4>)
    cb2a:	4832      	ldr	r0, [pc, #200]	; (cbf4 <process_event+0x2bc>)
    cb2c:	f019 fef9 	bl	26922 <assert_print>
    cb30:	f44f 71af 	mov.w	r1, #350	; 0x15e
    cb34:	e794      	b.n	ca60 <process_event+0x128>
			transit = mgr->transitions->stop;
    cb36:	6923      	ldr	r3, [r4, #16]
    cb38:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    cb3a:	b94e      	cbnz	r6, cb50 <process_event+0x218>
    cb3c:	4932      	ldr	r1, [pc, #200]	; (cc08 <process_event+0x2d0>)
    cb3e:	f240 1361 	movw	r3, #353	; 0x161
    cb42:	4a2e      	ldr	r2, [pc, #184]	; (cbfc <process_event+0x2c4>)
    cb44:	482b      	ldr	r0, [pc, #172]	; (cbf4 <process_event+0x2bc>)
    cb46:	f019 feec 	bl	26922 <assert_print>
    cb4a:	f240 1161 	movw	r1, #353	; 0x161
    cb4e:	e787      	b.n	ca60 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cb50:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    cb52:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cb54:	f023 0307 	bic.w	r3, r3, #7
    cb58:	f043 0304 	orr.w	r3, r3, #4
    cb5c:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cb5e:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cb62:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cb64:	e7ae      	b.n	cac4 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    cb66:	2901      	cmp	r1, #1
    cb68:	d009      	beq.n	cb7e <process_event+0x246>
    cb6a:	492b      	ldr	r1, [pc, #172]	; (cc18 <process_event+0x2e0>)
    cb6c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    cb70:	4a22      	ldr	r2, [pc, #136]	; (cbfc <process_event+0x2c4>)
    cb72:	4820      	ldr	r0, [pc, #128]	; (cbf4 <process_event+0x2bc>)
    cb74:	f019 fed5 	bl	26922 <assert_print>
    cb78:	f44f 71b2 	mov.w	r1, #356	; 0x164
    cb7c:	e770      	b.n	ca60 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    cb7e:	6823      	ldr	r3, [r4, #0]
    cb80:	b94b      	cbnz	r3, cb96 <process_event+0x25e>
    cb82:	4920      	ldr	r1, [pc, #128]	; (cc04 <process_event+0x2cc>)
    cb84:	f240 1365 	movw	r3, #357	; 0x165
    cb88:	4a1c      	ldr	r2, [pc, #112]	; (cbfc <process_event+0x2c4>)
    cb8a:	481a      	ldr	r0, [pc, #104]	; (cbf4 <process_event+0x2bc>)
    cb8c:	f019 fec9 	bl	26922 <assert_print>
    cb90:	f240 1165 	movw	r1, #357	; 0x165
    cb94:	e764      	b.n	ca60 <process_event+0x128>
			transit = mgr->transitions->reset;
    cb96:	6923      	ldr	r3, [r4, #16]
    cb98:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    cb9a:	b94e      	cbnz	r6, cbb0 <process_event+0x278>
    cb9c:	491a      	ldr	r1, [pc, #104]	; (cc08 <process_event+0x2d0>)
    cb9e:	f44f 73b4 	mov.w	r3, #360	; 0x168
    cba2:	4a16      	ldr	r2, [pc, #88]	; (cbfc <process_event+0x2c4>)
    cba4:	4813      	ldr	r0, [pc, #76]	; (cbf4 <process_event+0x2bc>)
    cba6:	f019 febc 	bl	26922 <assert_print>
    cbaa:	f44f 71b4 	mov.w	r1, #360	; 0x168
    cbae:	e757      	b.n	ca60 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    cbb0:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cbb2:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    cbb4:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cbb6:	f023 0307 	bic.w	r3, r3, #7
    cbba:	f043 0305 	orr.w	r3, r3, #5
    cbbe:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cbc0:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    cbc4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cbc6:	e77d      	b.n	cac4 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    cbc8:	490b      	ldr	r1, [pc, #44]	; (cbf8 <process_event+0x2c0>)
    cbca:	f240 136b 	movw	r3, #363	; 0x16b
    cbce:	4a0b      	ldr	r2, [pc, #44]	; (cbfc <process_event+0x2c4>)
    cbd0:	4808      	ldr	r0, [pc, #32]	; (cbf4 <process_event+0x2bc>)
    cbd2:	f019 fea6 	bl	26922 <assert_print>
    cbd6:	f240 116b 	movw	r1, #363	; 0x16b
    cbda:	e741      	b.n	ca60 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    cbdc:	2700      	movs	r7, #0
    cbde:	2600      	movs	r6, #0
    cbe0:	e770      	b.n	cac4 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cbe2:	f04f 0a01 	mov.w	sl, #1
    cbe6:	e777      	b.n	cad8 <process_event+0x1a0>
    cbe8:	4692      	mov	sl, r2
    cbea:	e775      	b.n	cad8 <process_event+0x1a0>
    cbec:	0002e6e7 	.word	0x0002e6e7
    cbf0:	0002e6ba 	.word	0x0002e6ba
    cbf4:	0002d881 	.word	0x0002d881
    cbf8:	000334e0 	.word	0x000334e0
    cbfc:	0002e617 	.word	0x0002e617
    cc00:	0002e639 	.word	0x0002e639
    cc04:	0002e645 	.word	0x0002e645
    cc08:	0002e668 	.word	0x0002e668
    cc0c:	0002e6fe 	.word	0x0002e6fe
    cc10:	0002e67f 	.word	0x0002e67f
    cc14:	0002e695 	.word	0x0002e695
    cc18:	0002e6a4 	.word	0x0002e6a4
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cc1c:	f385 8811 	msr	BASEPRI, r5
    cc20:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cc24:	f1ba 0f00 	cmp.w	sl, #0
    cc28:	d11e      	bne.n	cc68 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    cc2a:	2f00      	cmp	r7, #0
    cc2c:	d12f      	bne.n	cc8e <process_event+0x356>
			if (transit != NULL) {
    cc2e:	b116      	cbz	r6, cc36 <process_event+0x2fe>
				transit(mgr, transition_complete);
    cc30:	4620      	mov	r0, r4
    cc32:	4926      	ldr	r1, [pc, #152]	; (cccc <process_event+0x394>)
    cc34:	47b0      	blx	r6
	__asm__ volatile(
    cc36:	f04f 0320 	mov.w	r3, #32
    cc3a:	f3ef 8511 	mrs	r5, BASEPRI
    cc3e:	f383 8812 	msr	BASEPRI_MAX, r3
    cc42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cc46:	4658      	mov	r0, fp
    cc48:	f014 fb8a 	bl	21360 <z_spin_lock_valid>
    cc4c:	bb38      	cbnz	r0, cc9e <process_event+0x366>
    cc4e:	2394      	movs	r3, #148	; 0x94
    cc50:	4a1f      	ldr	r2, [pc, #124]	; (ccd0 <process_event+0x398>)
    cc52:	4920      	ldr	r1, [pc, #128]	; (ccd4 <process_event+0x39c>)
    cc54:	4820      	ldr	r0, [pc, #128]	; (ccd8 <process_event+0x3a0>)
    cc56:	f019 fe64 	bl	26922 <assert_print>
    cc5a:	4659      	mov	r1, fp
    cc5c:	481f      	ldr	r0, [pc, #124]	; (ccdc <process_event+0x3a4>)
    cc5e:	f019 fe60 	bl	26922 <assert_print>
    cc62:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc64:	481a      	ldr	r0, [pc, #104]	; (ccd0 <process_event+0x398>)
    cc66:	e6fc      	b.n	ca62 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    cc68:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cc6a:	2900      	cmp	r1, #0
    cc6c:	d0dd      	beq.n	cc2a <process_event+0x2f2>
	return node->next;
    cc6e:	680d      	ldr	r5, [r1, #0]
    cc70:	2900      	cmp	r1, #0
    cc72:	d0da      	beq.n	cc2a <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    cc74:	4643      	mov	r3, r8
    cc76:	464a      	mov	r2, r9
    cc78:	4620      	mov	r0, r4
    cc7a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    cc7e:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cc80:	b11d      	cbz	r5, cc8a <process_event+0x352>
    cc82:	682b      	ldr	r3, [r5, #0]
    cc84:	4629      	mov	r1, r5
    cc86:	461d      	mov	r5, r3
    cc88:	e7f2      	b.n	cc70 <process_event+0x338>
    cc8a:	462b      	mov	r3, r5
    cc8c:	e7fa      	b.n	cc84 <process_event+0x34c>
    cc8e:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    cc90:	4643      	mov	r3, r8
    cc92:	464a      	mov	r2, r9
    cc94:	4620      	mov	r0, r4
    cc96:	683f      	ldr	r7, [r7, #0]
    cc98:	f019 fde8 	bl	2686c <notify_one>
    cc9c:	e7c5      	b.n	cc2a <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    cc9e:	4658      	mov	r0, fp
    cca0:	f014 fb7a 	bl	21398 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cca4:	8ba3      	ldrh	r3, [r4, #28]
    cca6:	f023 0308 	bic.w	r3, r3, #8
    ccaa:	83a3      	strh	r3, [r4, #28]
    ccac:	e6ac      	b.n	ca08 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ccae:	068b      	lsls	r3, r1, #26
    ccb0:	f57f ae64 	bpl.w	c97c <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ccb4:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ccb8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    ccba:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    ccbe:	e647      	b.n	c950 <process_event+0x18>
	__asm__ volatile(
    ccc0:	f385 8811 	msr	BASEPRI, r5
    ccc4:	f3bf 8f6f 	isb	sy
}
    ccc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cccc:	0000cce1 	.word	0x0000cce1
    ccd0:	0002e6ba 	.word	0x0002e6ba
    ccd4:	0002e713 	.word	0x0002e713
    ccd8:	0002d881 	.word	0x0002d881
    ccdc:	0002e728 	.word	0x0002e728

0000cce0 <transition_complete>:
{
    cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cce2:	4604      	mov	r4, r0
    cce4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    cce6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    ccea:	f04f 0320 	mov.w	r3, #32
    ccee:	f3ef 8711 	mrs	r7, BASEPRI
    ccf2:	f383 8812 	msr	BASEPRI_MAX, r3
    ccf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ccfa:	4630      	mov	r0, r6
    ccfc:	f014 fb30 	bl	21360 <z_spin_lock_valid>
    cd00:	b968      	cbnz	r0, cd1e <transition_complete+0x3e>
    cd02:	2394      	movs	r3, #148	; 0x94
    cd04:	4a0b      	ldr	r2, [pc, #44]	; (cd34 <transition_complete+0x54>)
    cd06:	490c      	ldr	r1, [pc, #48]	; (cd38 <transition_complete+0x58>)
    cd08:	480c      	ldr	r0, [pc, #48]	; (cd3c <transition_complete+0x5c>)
    cd0a:	f019 fe0a 	bl	26922 <assert_print>
    cd0e:	4631      	mov	r1, r6
    cd10:	480b      	ldr	r0, [pc, #44]	; (cd40 <transition_complete+0x60>)
    cd12:	f019 fe06 	bl	26922 <assert_print>
    cd16:	2194      	movs	r1, #148	; 0x94
    cd18:	4806      	ldr	r0, [pc, #24]	; (cd34 <transition_complete+0x54>)
    cd1a:	f019 fdfb 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
    cd1e:	4630      	mov	r0, r6
    cd20:	f014 fb3a 	bl	21398 <z_spin_lock_set_owner>
	mgr->last_res = res;
    cd24:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    cd26:	463a      	mov	r2, r7
    cd28:	4620      	mov	r0, r4
}
    cd2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    cd2e:	2101      	movs	r1, #1
    cd30:	f7ff be02 	b.w	c938 <process_event>
    cd34:	0002e6ba 	.word	0x0002e6ba
    cd38:	0002e713 	.word	0x0002e713
    cd3c:	0002d881 	.word	0x0002d881
    cd40:	0002e728 	.word	0x0002e728

0000cd44 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    cd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cd48:	4604      	mov	r4, r0
    cd4a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    cd4c:	f019 fd7e 	bl	2684c <validate_args>

	if (rv < 0) {
    cd50:	1e05      	subs	r5, r0, #0
    cd52:	db67      	blt.n	ce24 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    cd54:	f104 0914 	add.w	r9, r4, #20
    cd58:	f04f 0320 	mov.w	r3, #32
    cd5c:	f3ef 8a11 	mrs	sl, BASEPRI
    cd60:	f383 8812 	msr	BASEPRI_MAX, r3
    cd64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd68:	4648      	mov	r0, r9
    cd6a:	f014 faf9 	bl	21360 <z_spin_lock_valid>
    cd6e:	4680      	mov	r8, r0
    cd70:	b960      	cbnz	r0, cd8c <onoff_request+0x48>
    cd72:	2394      	movs	r3, #148	; 0x94
    cd74:	4a37      	ldr	r2, [pc, #220]	; (ce54 <onoff_request+0x110>)
    cd76:	4938      	ldr	r1, [pc, #224]	; (ce58 <onoff_request+0x114>)
    cd78:	4838      	ldr	r0, [pc, #224]	; (ce5c <onoff_request+0x118>)
    cd7a:	f019 fdd2 	bl	26922 <assert_print>
    cd7e:	4649      	mov	r1, r9
    cd80:	4837      	ldr	r0, [pc, #220]	; (ce60 <onoff_request+0x11c>)
    cd82:	f019 fdce 	bl	26922 <assert_print>
    cd86:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd88:	4832      	ldr	r0, [pc, #200]	; (ce54 <onoff_request+0x110>)
    cd8a:	e040      	b.n	ce0e <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    cd8c:	4648      	mov	r0, r9
    cd8e:	f014 fb03 	bl	21398 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    cd92:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cd96:	8be3      	ldrh	r3, [r4, #30]
    cd98:	8ba6      	ldrh	r6, [r4, #28]
    cd9a:	4293      	cmp	r3, r2
    cd9c:	f006 0607 	and.w	r6, r6, #7
    cda0:	d043      	beq.n	ce2a <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    cda2:	2e02      	cmp	r6, #2
    cda4:	d113      	bne.n	cdce <onoff_request+0x8a>
	rv = state;
    cda6:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    cda8:	3301      	adds	r3, #1
    cdaa:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cdac:	4648      	mov	r0, r9
    cdae:	f014 fae5 	bl	2137c <z_spin_unlock_valid>
    cdb2:	2800      	cmp	r0, #0
    cdb4:	d13f      	bne.n	ce36 <onoff_request+0xf2>
    cdb6:	23c2      	movs	r3, #194	; 0xc2
    cdb8:	4a26      	ldr	r2, [pc, #152]	; (ce54 <onoff_request+0x110>)
    cdba:	492a      	ldr	r1, [pc, #168]	; (ce64 <onoff_request+0x120>)
    cdbc:	4827      	ldr	r0, [pc, #156]	; (ce5c <onoff_request+0x118>)
    cdbe:	f019 fdb0 	bl	26922 <assert_print>
    cdc2:	4649      	mov	r1, r9
    cdc4:	4828      	ldr	r0, [pc, #160]	; (ce68 <onoff_request+0x124>)
    cdc6:	f019 fdac 	bl	26922 <assert_print>
    cdca:	21c2      	movs	r1, #194	; 0xc2
    cdcc:	e7dc      	b.n	cd88 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    cdce:	2e06      	cmp	r6, #6
    cdd0:	d813      	bhi.n	cdfa <onoff_request+0xb6>
    cdd2:	e8df f006 	tbb	[pc, r6]
    cdd6:	2d09      	.short	0x2d09
    cdd8:	04091212 	.word	0x04091212
    cddc:	09          	.byte	0x09
    cddd:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    cdde:	f06f 0585 	mvn.w	r5, #133	; 0x85
    cde2:	f04f 0800 	mov.w	r8, #0
    cde6:	e7e1      	b.n	cdac <onoff_request+0x68>
	parent->next = child;
    cde8:	2300      	movs	r3, #0
    cdea:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    cdec:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    cdee:	b983      	cbnz	r3, ce12 <onoff_request+0xce>
	list->head = node;
    cdf0:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    cdf4:	b186      	cbz	r6, ce18 <onoff_request+0xd4>
	rv = state;
    cdf6:	4635      	mov	r5, r6
    cdf8:	e7f3      	b.n	cde2 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    cdfa:	491c      	ldr	r1, [pc, #112]	; (ce6c <onoff_request+0x128>)
    cdfc:	4817      	ldr	r0, [pc, #92]	; (ce5c <onoff_request+0x118>)
    cdfe:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    ce02:	4a1b      	ldr	r2, [pc, #108]	; (ce70 <onoff_request+0x12c>)
    ce04:	f019 fd8d 	bl	26922 <assert_print>
    ce08:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    ce0c:	4818      	ldr	r0, [pc, #96]	; (ce70 <onoff_request+0x12c>)
    ce0e:	f019 fd81 	bl	26914 <assert_post_action>
	parent->next = child;
    ce12:	601f      	str	r7, [r3, #0]
	list->tail = node;
    ce14:	6067      	str	r7, [r4, #4]
}
    ce16:	e7ed      	b.n	cdf4 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    ce18:	4652      	mov	r2, sl
    ce1a:	2102      	movs	r1, #2
    ce1c:	4620      	mov	r0, r4
    ce1e:	f7ff fd8b 	bl	c938 <process_event>
    ce22:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    ce24:	4628      	mov	r0, r5
    ce26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    ce2a:	f06f 050a 	mvn.w	r5, #10
    ce2e:	e7d8      	b.n	cde2 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    ce30:	f06f 0504 	mvn.w	r5, #4
    ce34:	e7d5      	b.n	cde2 <onoff_request+0x9e>
	__asm__ volatile(
    ce36:	f38a 8811 	msr	BASEPRI, sl
    ce3a:	f3bf 8f6f 	isb	sy
		if (notify) {
    ce3e:	f1b8 0f00 	cmp.w	r8, #0
    ce42:	d0ef      	beq.n	ce24 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    ce44:	2300      	movs	r3, #0
    ce46:	4632      	mov	r2, r6
    ce48:	4639      	mov	r1, r7
    ce4a:	4620      	mov	r0, r4
    ce4c:	f019 fd0e 	bl	2686c <notify_one>
    ce50:	e7e8      	b.n	ce24 <onoff_request+0xe0>
    ce52:	bf00      	nop
    ce54:	0002e6ba 	.word	0x0002e6ba
    ce58:	0002e713 	.word	0x0002e713
    ce5c:	0002d881 	.word	0x0002d881
    ce60:	0002e728 	.word	0x0002e728
    ce64:	0002e6e7 	.word	0x0002e6e7
    ce68:	0002e6fe 	.word	0x0002e6fe
    ce6c:	0002e6a4 	.word	0x0002e6a4
    ce70:	0002e617 	.word	0x0002e617

0000ce74 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    ce74:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ce76:	6842      	ldr	r2, [r0, #4]
    ce78:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    ce7a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    ce7e:	2a02      	cmp	r2, #2
	notify->result = res;
    ce80:	6081      	str	r1, [r0, #8]
	switch (method) {
    ce82:	d00a      	beq.n	ce9a <sys_notify_finalize+0x26>
    ce84:	2a03      	cmp	r2, #3
    ce86:	f04f 0100 	mov.w	r1, #0
    ce8a:	d003      	beq.n	ce94 <sys_notify_finalize+0x20>
    ce8c:	2a01      	cmp	r2, #1
    ce8e:	d10a      	bne.n	cea6 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    ce90:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    ce92:	e006      	b.n	cea2 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    ce94:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    ce96:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    ce98:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    ce9a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    ce9c:	2200      	movs	r2, #0
    ce9e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    cea0:	b958      	cbnz	r0, ceba <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    cea2:	2000      	movs	r0, #0
    cea4:	e7f8      	b.n	ce98 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    cea6:	4906      	ldr	r1, [pc, #24]	; (cec0 <sys_notify_finalize+0x4c>)
    cea8:	4806      	ldr	r0, [pc, #24]	; (cec4 <sys_notify_finalize+0x50>)
    ceaa:	2345      	movs	r3, #69	; 0x45
    ceac:	4a06      	ldr	r2, [pc, #24]	; (cec8 <sys_notify_finalize+0x54>)
    ceae:	f019 fd38 	bl	26922 <assert_print>
    ceb2:	2145      	movs	r1, #69	; 0x45
    ceb4:	4804      	ldr	r0, [pc, #16]	; (cec8 <sys_notify_finalize+0x54>)
    ceb6:	f019 fd2d 	bl	26914 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    ceba:	f017 fc57 	bl	2476c <z_impl_k_poll_signal_raise>
    cebe:	e7f0      	b.n	cea2 <sys_notify_finalize+0x2e>
    cec0:	000334e0 	.word	0x000334e0
    cec4:	0002d881 	.word	0x0002d881
    cec8:	0002e740 	.word	0x0002e740

0000cecc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    cecc:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    cece:	4c09      	ldr	r4, [pc, #36]	; (cef4 <crc8_ccitt+0x28>)
    ced0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    ced2:	4291      	cmp	r1, r2
    ced4:	d100      	bne.n	ced8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    ced6:	bd10      	pop	{r4, pc}
		val ^= p[i];
    ced8:	f811 3b01 	ldrb.w	r3, [r1], #1
    cedc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    cede:	0903      	lsrs	r3, r0, #4
    cee0:	5ce3      	ldrb	r3, [r4, r3]
    cee2:	0100      	lsls	r0, r0, #4
    cee4:	b2c0      	uxtb	r0, r0
    cee6:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    cee8:	0918      	lsrs	r0, r3, #4
    ceea:	5c20      	ldrb	r0, [r4, r0]
    ceec:	011b      	lsls	r3, r3, #4
    ceee:	b2db      	uxtb	r3, r3
    cef0:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    cef2:	e7ee      	b.n	ced2 <crc8_ccitt+0x6>
    cef4:	0002e763 	.word	0x0002e763

0000cef8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cefa:	4602      	mov	r2, r0
    cefc:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    cefe:	270a      	movs	r7, #10
	size_t val = 0;
    cf00:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    cf02:	4e07      	ldr	r6, [pc, #28]	; (cf20 <extract_decimal+0x28>)
    cf04:	460b      	mov	r3, r1
    cf06:	781c      	ldrb	r4, [r3, #0]
    cf08:	3101      	adds	r1, #1
    cf0a:	5d35      	ldrb	r5, [r6, r4]
    cf0c:	076d      	lsls	r5, r5, #29
    cf0e:	d401      	bmi.n	cf14 <extract_decimal+0x1c>
	}
	*str = sp;
    cf10:	6013      	str	r3, [r2, #0]
	return val;
}
    cf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    cf14:	fb07 4300 	mla	r3, r7, r0, r4
    cf18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    cf1c:	e7f2      	b.n	cf04 <extract_decimal+0xc>
    cf1e:	bf00      	nop
    cf20:	00033542 	.word	0x00033542

0000cf24 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    cf24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf28:	4615      	mov	r5, r2
    cf2a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    cf2c:	78d3      	ldrb	r3, [r2, #3]
    cf2e:	4a22      	ldr	r2, [pc, #136]	; (cfb8 <encode_uint+0x94>)
	switch (specifier) {
    cf30:	2b6f      	cmp	r3, #111	; 0x6f
    cf32:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    cf36:	4680      	mov	r8, r0
    cf38:	460f      	mov	r7, r1
    cf3a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    cf3e:	d029      	beq.n	cf94 <encode_uint+0x70>
    cf40:	d824      	bhi.n	cf8c <encode_uint+0x68>
		return 10;
    cf42:	2b58      	cmp	r3, #88	; 0x58
    cf44:	bf0c      	ite	eq
    cf46:	2610      	moveq	r6, #16
    cf48:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    cf4a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    cf4e:	4632      	mov	r2, r6
    cf50:	2300      	movs	r3, #0
    cf52:	4640      	mov	r0, r8
    cf54:	4639      	mov	r1, r7
    cf56:	f7fc f853 	bl	9000 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    cf5a:	2a09      	cmp	r2, #9
    cf5c:	b2d4      	uxtb	r4, r2
    cf5e:	d81e      	bhi.n	cf9e <encode_uint+0x7a>
    cf60:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    cf62:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cf64:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    cf66:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cf6a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    cf6e:	d301      	bcc.n	cf74 <encode_uint+0x50>
    cf70:	45d1      	cmp	r9, sl
    cf72:	d811      	bhi.n	cf98 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    cf74:	782b      	ldrb	r3, [r5, #0]
    cf76:	069b      	lsls	r3, r3, #26
    cf78:	d505      	bpl.n	cf86 <encode_uint+0x62>
		if (radix == 8) {
    cf7a:	2e08      	cmp	r6, #8
    cf7c:	d115      	bne.n	cfaa <encode_uint+0x86>
			conv->altform_0 = true;
    cf7e:	78ab      	ldrb	r3, [r5, #2]
    cf80:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    cf84:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    cf86:	4648      	mov	r0, r9
    cf88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    cf8c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    cf90:	2b70      	cmp	r3, #112	; 0x70
    cf92:	e7d7      	b.n	cf44 <encode_uint+0x20>
	switch (specifier) {
    cf94:	2608      	movs	r6, #8
    cf96:	e7d8      	b.n	cf4a <encode_uint+0x26>
		value /= radix;
    cf98:	4680      	mov	r8, r0
    cf9a:	460f      	mov	r7, r1
    cf9c:	e7d7      	b.n	cf4e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cf9e:	f1bb 0f01 	cmp.w	fp, #1
    cfa2:	bf0c      	ite	eq
    cfa4:	3437      	addeq	r4, #55	; 0x37
    cfa6:	3457      	addne	r4, #87	; 0x57
    cfa8:	e7db      	b.n	cf62 <encode_uint+0x3e>
		} else if (radix == 16) {
    cfaa:	2e10      	cmp	r6, #16
    cfac:	d1eb      	bne.n	cf86 <encode_uint+0x62>
			conv->altform_0c = true;
    cfae:	78ab      	ldrb	r3, [r5, #2]
    cfb0:	f043 0310 	orr.w	r3, r3, #16
    cfb4:	e7e6      	b.n	cf84 <encode_uint+0x60>
    cfb6:	bf00      	nop
    cfb8:	00033542 	.word	0x00033542

0000cfbc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    cfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfc0:	4682      	mov	sl, r0
    cfc2:	4617      	mov	r7, r2
    cfc4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    cfc6:	2500      	movs	r5, #0
{
    cfc8:	b097      	sub	sp, #92	; 0x5c
    cfca:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    cfcc:	7838      	ldrb	r0, [r7, #0]
    cfce:	b908      	cbnz	r0, cfd4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    cfd0:	4628      	mov	r0, r5
    cfd2:	e349      	b.n	d668 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    cfd4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    cfd6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    cfd8:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    cfda:	d006      	beq.n	cfea <z_cbvprintf_impl+0x2e>
			OUTC('%');
    cfdc:	9903      	ldr	r1, [sp, #12]
    cfde:	47d0      	blx	sl
    cfe0:	2800      	cmp	r0, #0
    cfe2:	f2c0 8341 	blt.w	d668 <z_cbvprintf_impl+0x6ac>
    cfe6:	3501      	adds	r5, #1
		if (bps == NULL) {
    cfe8:	e1f0      	b.n	d3cc <z_cbvprintf_impl+0x410>
		} state = {
    cfea:	2218      	movs	r2, #24
    cfec:	2100      	movs	r1, #0
    cfee:	a810      	add	r0, sp, #64	; 0x40
    cff0:	f01e fcd6 	bl	2b9a0 <memset>
	if (*sp == '%') {
    cff4:	787b      	ldrb	r3, [r7, #1]
    cff6:	2b25      	cmp	r3, #37	; 0x25
    cff8:	f000 80a3 	beq.w	d142 <z_cbvprintf_impl+0x186>
    cffc:	2300      	movs	r3, #0
    cffe:	4698      	mov	r8, r3
    d000:	469e      	mov	lr, r3
    d002:	469c      	mov	ip, r3
    d004:	4618      	mov	r0, r3
    d006:	1c79      	adds	r1, r7, #1
    d008:	460e      	mov	r6, r1
		switch (*sp) {
    d00a:	f811 2b01 	ldrb.w	r2, [r1], #1
    d00e:	2a2b      	cmp	r2, #43	; 0x2b
    d010:	f000 80c6 	beq.w	d1a0 <z_cbvprintf_impl+0x1e4>
    d014:	f200 80bd 	bhi.w	d192 <z_cbvprintf_impl+0x1d6>
    d018:	2a20      	cmp	r2, #32
    d01a:	f000 80c4 	beq.w	d1a6 <z_cbvprintf_impl+0x1ea>
    d01e:	2a23      	cmp	r2, #35	; 0x23
    d020:	f000 80c4 	beq.w	d1ac <z_cbvprintf_impl+0x1f0>
    d024:	b12b      	cbz	r3, d032 <z_cbvprintf_impl+0x76>
    d026:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d02a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d02e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d032:	f1b8 0f00 	cmp.w	r8, #0
    d036:	d005      	beq.n	d044 <z_cbvprintf_impl+0x88>
    d038:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d03c:	f043 0320 	orr.w	r3, r3, #32
    d040:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d044:	f1be 0f00 	cmp.w	lr, #0
    d048:	d005      	beq.n	d056 <z_cbvprintf_impl+0x9a>
    d04a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d04e:	f043 0310 	orr.w	r3, r3, #16
    d052:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d056:	f1bc 0f00 	cmp.w	ip, #0
    d05a:	d005      	beq.n	d068 <z_cbvprintf_impl+0xac>
    d05c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d060:	f043 0308 	orr.w	r3, r3, #8
    d064:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d068:	b128      	cbz	r0, d076 <z_cbvprintf_impl+0xba>
    d06a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d06e:	f043 0304 	orr.w	r3, r3, #4
    d072:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d076:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d07a:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d07e:	2944      	cmp	r1, #68	; 0x44
    d080:	d103      	bne.n	d08a <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d082:	f36f 1386 	bfc	r3, #6, #1
    d086:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d08a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d08e:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d094:	9609      	str	r6, [sp, #36]	; 0x24
    d096:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d09a:	f040 808c 	bne.w	d1b6 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d09e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d0a2:	f043 0301 	orr.w	r3, r3, #1
    d0a6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d0aa:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d0ac:	781a      	ldrb	r2, [r3, #0]
    d0ae:	2a2e      	cmp	r2, #46	; 0x2e
    d0b0:	bf0c      	ite	eq
    d0b2:	2101      	moveq	r1, #1
    d0b4:	2100      	movne	r1, #0
    d0b6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d0ba:	f361 0241 	bfi	r2, r1, #1, #1
    d0be:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d0c2:	d10c      	bne.n	d0de <z_cbvprintf_impl+0x122>
	++sp;
    d0c4:	1c5a      	adds	r2, r3, #1
    d0c6:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d0c8:	785a      	ldrb	r2, [r3, #1]
    d0ca:	2a2a      	cmp	r2, #42	; 0x2a
    d0cc:	f040 8083 	bne.w	d1d6 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d0d0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d0d4:	3302      	adds	r3, #2
		conv->prec_star = true;
    d0d6:	f042 0204 	orr.w	r2, r2, #4
    d0da:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d0de:	781a      	ldrb	r2, [r3, #0]
    d0e0:	2a6c      	cmp	r2, #108	; 0x6c
    d0e2:	f000 80a4 	beq.w	d22e <z_cbvprintf_impl+0x272>
    d0e6:	f200 8086 	bhi.w	d1f6 <z_cbvprintf_impl+0x23a>
    d0ea:	2a68      	cmp	r2, #104	; 0x68
    d0ec:	f000 808c 	beq.w	d208 <z_cbvprintf_impl+0x24c>
    d0f0:	2a6a      	cmp	r2, #106	; 0x6a
    d0f2:	f000 80a5 	beq.w	d240 <z_cbvprintf_impl+0x284>
    d0f6:	2a4c      	cmp	r2, #76	; 0x4c
    d0f8:	f000 80aa 	beq.w	d250 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d0fc:	461a      	mov	r2, r3
    d0fe:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d102:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d104:	9204      	str	r2, [sp, #16]
    d106:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d10a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d10e:	f200 8117 	bhi.w	d340 <z_cbvprintf_impl+0x384>
    d112:	2b6d      	cmp	r3, #109	; 0x6d
    d114:	f200 80a9 	bhi.w	d26a <z_cbvprintf_impl+0x2ae>
    d118:	2b69      	cmp	r3, #105	; 0x69
    d11a:	f200 8111 	bhi.w	d340 <z_cbvprintf_impl+0x384>
    d11e:	2b57      	cmp	r3, #87	; 0x57
    d120:	f200 80be 	bhi.w	d2a0 <z_cbvprintf_impl+0x2e4>
    d124:	2b41      	cmp	r3, #65	; 0x41
    d126:	d003      	beq.n	d130 <z_cbvprintf_impl+0x174>
    d128:	3b45      	subs	r3, #69	; 0x45
    d12a:	2b02      	cmp	r3, #2
    d12c:	f200 8108 	bhi.w	d340 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d130:	2204      	movs	r2, #4
    d132:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d136:	f362 0302 	bfi	r3, r2, #0, #3
    d13a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d13e:	2301      	movs	r3, #1
			break;
    d140:	e0ca      	b.n	d2d8 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d142:	1cba      	adds	r2, r7, #2
    d144:	9204      	str	r2, [sp, #16]
    d146:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d14a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d14e:	07da      	lsls	r2, r3, #31
    d150:	f140 80fd 	bpl.w	d34e <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d154:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d158:	f1b9 0f00 	cmp.w	r9, #0
    d15c:	da07      	bge.n	d16e <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d15e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d162:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d166:	f042 0204 	orr.w	r2, r2, #4
    d16a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d16e:	075e      	lsls	r6, r3, #29
    d170:	f140 80f6 	bpl.w	d360 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d174:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d178:	f1bb 0f00 	cmp.w	fp, #0
    d17c:	f280 80f5 	bge.w	d36a <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d180:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d184:	f36f 0341 	bfc	r3, #1, #1
    d188:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d18c:	f04f 3bff 	mov.w	fp, #4294967295
    d190:	e0eb      	b.n	d36a <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d192:	2a2d      	cmp	r2, #45	; 0x2d
    d194:	d00d      	beq.n	d1b2 <z_cbvprintf_impl+0x1f6>
    d196:	2a30      	cmp	r2, #48	; 0x30
    d198:	f47f af44 	bne.w	d024 <z_cbvprintf_impl+0x68>
    d19c:	2301      	movs	r3, #1
	} while (loop);
    d19e:	e733      	b.n	d008 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d1a0:	f04f 0c01 	mov.w	ip, #1
    d1a4:	e730      	b.n	d008 <z_cbvprintf_impl+0x4c>
    d1a6:	f04f 0e01 	mov.w	lr, #1
    d1aa:	e72d      	b.n	d008 <z_cbvprintf_impl+0x4c>
    d1ac:	f04f 0801 	mov.w	r8, #1
    d1b0:	e72a      	b.n	d008 <z_cbvprintf_impl+0x4c>
    d1b2:	2001      	movs	r0, #1
    d1b4:	e728      	b.n	d008 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d1b6:	a809      	add	r0, sp, #36	; 0x24
    d1b8:	f7ff fe9e 	bl	cef8 <extract_decimal>
	if (sp != wp) {
    d1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1be:	42b3      	cmp	r3, r6
    d1c0:	f43f af74 	beq.w	d0ac <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d1c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d1c8:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d1ca:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d1cc:	f360 0241 	bfi	r2, r0, #1, #1
    d1d0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d1d4:	e76a      	b.n	d0ac <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d1d6:	a809      	add	r0, sp, #36	; 0x24
    d1d8:	f7ff fe8e 	bl	cef8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d1dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d1e0:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d1e2:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d1e6:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d1ea:	f362 0341 	bfi	r3, r2, #1, #1
    d1ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1f4:	e773      	b.n	d0de <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d1f6:	2a74      	cmp	r2, #116	; 0x74
    d1f8:	d026      	beq.n	d248 <z_cbvprintf_impl+0x28c>
    d1fa:	2a7a      	cmp	r2, #122	; 0x7a
    d1fc:	f47f af7e 	bne.w	d0fc <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d200:	2106      	movs	r1, #6
    d202:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d206:	e00c      	b.n	d222 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d208:	785a      	ldrb	r2, [r3, #1]
    d20a:	2a68      	cmp	r2, #104	; 0x68
    d20c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d210:	d106      	bne.n	d220 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d212:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d214:	f361 02c6 	bfi	r2, r1, #3, #4
    d218:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d21c:	3302      	adds	r3, #2
    d21e:	e76d      	b.n	d0fc <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d220:	2102      	movs	r1, #2
    d222:	f361 02c6 	bfi	r2, r1, #3, #4
    d226:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d22a:	3301      	adds	r3, #1
    d22c:	e766      	b.n	d0fc <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d22e:	785a      	ldrb	r2, [r3, #1]
    d230:	2a6c      	cmp	r2, #108	; 0x6c
    d232:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d236:	d101      	bne.n	d23c <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d238:	2104      	movs	r1, #4
    d23a:	e7eb      	b.n	d214 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d23c:	2103      	movs	r1, #3
    d23e:	e7f0      	b.n	d222 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d240:	2105      	movs	r1, #5
    d242:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d246:	e7ec      	b.n	d222 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d248:	2107      	movs	r1, #7
    d24a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d24e:	e7e8      	b.n	d222 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d250:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d254:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d258:	f022 0202 	bic.w	r2, r2, #2
    d25c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d260:	f042 0202 	orr.w	r2, r2, #2
    d264:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d268:	e7df      	b.n	d22a <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d26a:	3b6e      	subs	r3, #110	; 0x6e
    d26c:	b2d9      	uxtb	r1, r3
    d26e:	2301      	movs	r3, #1
    d270:	408b      	lsls	r3, r1
    d272:	f240 4182 	movw	r1, #1154	; 0x482
    d276:	420b      	tst	r3, r1
    d278:	d138      	bne.n	d2ec <z_cbvprintf_impl+0x330>
    d27a:	f013 0f24 	tst.w	r3, #36	; 0x24
    d27e:	d152      	bne.n	d326 <z_cbvprintf_impl+0x36a>
    d280:	07d8      	lsls	r0, r3, #31
    d282:	d55d      	bpl.n	d340 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d284:	2103      	movs	r1, #3
    d286:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d28a:	f361 0302 	bfi	r3, r1, #0, #3
    d28e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d292:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d296:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d29a:	424b      	negs	r3, r1
    d29c:	414b      	adcs	r3, r1
    d29e:	e01b      	b.n	d2d8 <z_cbvprintf_impl+0x31c>
    d2a0:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d2a2:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d2a6:	b2c9      	uxtb	r1, r1
    d2a8:	fa00 f101 	lsl.w	r1, r0, r1
    d2ac:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d2b0:	f47f af3e 	bne.w	d130 <z_cbvprintf_impl+0x174>
    d2b4:	f640 0601 	movw	r6, #2049	; 0x801
    d2b8:	4231      	tst	r1, r6
    d2ba:	d11d      	bne.n	d2f8 <z_cbvprintf_impl+0x33c>
    d2bc:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d2c0:	d03e      	beq.n	d340 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d2c2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d2c6:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d2ca:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d2ce:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d2d0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d2d4:	d034      	beq.n	d340 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d2d6:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d2d8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d2dc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d2e0:	430b      	orrs	r3, r1
    d2e2:	f363 0241 	bfi	r2, r3, #1, #1
    d2e6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d2ea:	e72e      	b.n	d14a <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    d2ec:	2102      	movs	r1, #2
    d2ee:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d2f2:	f361 0302 	bfi	r3, r1, #0, #3
    d2f6:	e7e8      	b.n	d2ca <z_cbvprintf_impl+0x30e>
    d2f8:	2002      	movs	r0, #2
    d2fa:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d2fe:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d302:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d306:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d308:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d30c:	bf02      	ittt	eq
    d30e:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d312:	f041 0101 	orreq.w	r1, r1, #1
    d316:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d31a:	2b63      	cmp	r3, #99	; 0x63
    d31c:	d1db      	bne.n	d2d6 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d31e:	1e13      	subs	r3, r2, #0
    d320:	bf18      	it	ne
    d322:	2301      	movne	r3, #1
    d324:	e7d8      	b.n	d2d8 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    d326:	2103      	movs	r1, #3
    d328:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d32c:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d330:	f361 0302 	bfi	r3, r1, #0, #3
    d334:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d338:	bf14      	ite	ne
    d33a:	2301      	movne	r3, #1
    d33c:	2300      	moveq	r3, #0
    d33e:	e7cb      	b.n	d2d8 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    d340:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d344:	f043 0301 	orr.w	r3, r3, #1
    d348:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d34c:	e7c3      	b.n	d2d6 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    d34e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d352:	2a00      	cmp	r2, #0
		int width = -1;
    d354:	bfac      	ite	ge
    d356:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    d35a:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    d35e:	e706      	b.n	d16e <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    d360:	0798      	lsls	r0, r3, #30
    d362:	f57f af13 	bpl.w	d18c <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    d366:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d36a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d36c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d370:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d374:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d378:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d37c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d37e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d382:	d133      	bne.n	d3ec <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    d384:	1ecb      	subs	r3, r1, #3
    d386:	2b04      	cmp	r3, #4
    d388:	d804      	bhi.n	d394 <z_cbvprintf_impl+0x3d8>
    d38a:	e8df f003 	tbb	[pc, r3]
    d38e:	4621      	.short	0x4621
    d390:	2146      	.short	0x2146
    d392:	21          	.byte	0x21
    d393:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d394:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d396:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d398:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d39c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d3a0:	d11c      	bne.n	d3dc <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    d3a2:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d3a6:	17da      	asrs	r2, r3, #31
    d3a8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d3ac:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d3ae:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d3b2:	f013 0603 	ands.w	r6, r3, #3
    d3b6:	d050      	beq.n	d45a <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    d3b8:	463a      	mov	r2, r7
    d3ba:	4650      	mov	r0, sl
    d3bc:	9b04      	ldr	r3, [sp, #16]
    d3be:	9903      	ldr	r1, [sp, #12]
    d3c0:	f019 fa91 	bl	268e6 <outs>
    d3c4:	2800      	cmp	r0, #0
    d3c6:	f2c0 814f 	blt.w	d668 <z_cbvprintf_impl+0x6ac>
    d3ca:	4405      	add	r5, r0
			continue;
    d3cc:	9f04      	ldr	r7, [sp, #16]
    d3ce:	e5fd      	b.n	cfcc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d3d0:	f854 3b04 	ldr.w	r3, [r4], #4
    d3d4:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d3d6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d3da:	e7e8      	b.n	d3ae <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    d3dc:	2902      	cmp	r1, #2
    d3de:	d1e5      	bne.n	d3ac <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    d3e0:	b21a      	sxth	r2, r3
    d3e2:	f343 33c0 	sbfx	r3, r3, #15, #1
    d3e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d3ea:	e7df      	b.n	d3ac <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    d3ec:	2b02      	cmp	r3, #2
    d3ee:	d124      	bne.n	d43a <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    d3f0:	1ecb      	subs	r3, r1, #3
    d3f2:	2b04      	cmp	r3, #4
    d3f4:	d804      	bhi.n	d400 <z_cbvprintf_impl+0x444>
    d3f6:	e8df f003 	tbb	[pc, r3]
    d3fa:	1018      	.short	0x1018
    d3fc:	1810      	.short	0x1810
    d3fe:	18          	.byte	0x18
    d3ff:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    d400:	2901      	cmp	r1, #1
    d402:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    d406:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    d40a:	d014      	beq.n	d436 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    d40c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    d40e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    d412:	d1cc      	bne.n	d3ae <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    d414:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    d416:	9310      	str	r3, [sp, #64]	; 0x40
    d418:	e7c9      	b.n	d3ae <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    d41a:	3407      	adds	r4, #7
    d41c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    d420:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    d424:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d428:	e7c1      	b.n	d3ae <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    d42a:	f854 3b04 	ldr.w	r3, [r4], #4
    d42e:	9310      	str	r3, [sp, #64]	; 0x40
    d430:	2300      	movs	r3, #0
    d432:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    d434:	e7bb      	b.n	d3ae <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    d436:	b2db      	uxtb	r3, r3
    d438:	e7cd      	b.n	d3d6 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    d43a:	2b04      	cmp	r3, #4
    d43c:	d108      	bne.n	d450 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    d43e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    d440:	f024 0407 	bic.w	r4, r4, #7
    d444:	e9d4 2300 	ldrd	r2, r3, [r4]
    d448:	3408      	adds	r4, #8
    d44a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d44e:	e7ae      	b.n	d3ae <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d450:	2b03      	cmp	r3, #3
    d452:	d1ac      	bne.n	d3ae <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    d454:	f854 3b04 	ldr.w	r3, [r4], #4
    d458:	e7dd      	b.n	d416 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    d45a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d45e:	2878      	cmp	r0, #120	; 0x78
    d460:	d8b4      	bhi.n	d3cc <z_cbvprintf_impl+0x410>
    d462:	2862      	cmp	r0, #98	; 0x62
    d464:	d81c      	bhi.n	d4a0 <z_cbvprintf_impl+0x4e4>
    d466:	2825      	cmp	r0, #37	; 0x25
    d468:	f43f adb8 	beq.w	cfdc <z_cbvprintf_impl+0x20>
    d46c:	2858      	cmp	r0, #88	; 0x58
    d46e:	d1ad      	bne.n	d3cc <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d470:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d474:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d478:	9300      	str	r3, [sp, #0]
    d47a:	aa12      	add	r2, sp, #72	; 0x48
    d47c:	ab0a      	add	r3, sp, #40	; 0x28
    d47e:	f7ff fd51 	bl	cf24 <encode_uint>
			if (precision >= 0) {
    d482:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    d486:	4607      	mov	r7, r0
			if (precision >= 0) {
    d488:	f280 8097 	bge.w	d5ba <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    d48c:	2f00      	cmp	r7, #0
    d48e:	d09d      	beq.n	d3cc <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d490:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d494:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    d498:	2e00      	cmp	r6, #0
    d49a:	d04e      	beq.n	d53a <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    d49c:	3001      	adds	r0, #1
    d49e:	e04c      	b.n	d53a <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    d4a0:	3863      	subs	r0, #99	; 0x63
    d4a2:	2815      	cmp	r0, #21
    d4a4:	d892      	bhi.n	d3cc <z_cbvprintf_impl+0x410>
    d4a6:	a201      	add	r2, pc, #4	; (adr r2, d4ac <z_cbvprintf_impl+0x4f0>)
    d4a8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d4ac:	0000d52b 	.word	0x0000d52b
    d4b0:	0000d591 	.word	0x0000d591
    d4b4:	0000d3cd 	.word	0x0000d3cd
    d4b8:	0000d3cd 	.word	0x0000d3cd
    d4bc:	0000d3cd 	.word	0x0000d3cd
    d4c0:	0000d3cd 	.word	0x0000d3cd
    d4c4:	0000d591 	.word	0x0000d591
    d4c8:	0000d3cd 	.word	0x0000d3cd
    d4cc:	0000d3cd 	.word	0x0000d3cd
    d4d0:	0000d3cd 	.word	0x0000d3cd
    d4d4:	0000d3cd 	.word	0x0000d3cd
    d4d8:	0000d619 	.word	0x0000d619
    d4dc:	0000d5b5 	.word	0x0000d5b5
    d4e0:	0000d5db 	.word	0x0000d5db
    d4e4:	0000d3cd 	.word	0x0000d3cd
    d4e8:	0000d3cd 	.word	0x0000d3cd
    d4ec:	0000d505 	.word	0x0000d505
    d4f0:	0000d3cd 	.word	0x0000d3cd
    d4f4:	0000d5b5 	.word	0x0000d5b5
    d4f8:	0000d3cd 	.word	0x0000d3cd
    d4fc:	0000d3cd 	.word	0x0000d3cd
    d500:	0000d5b5 	.word	0x0000d5b5
			if (precision >= 0) {
    d504:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    d508:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    d50a:	db0a      	blt.n	d522 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    d50c:	4659      	mov	r1, fp
    d50e:	4638      	mov	r0, r7
    d510:	f01e fb9b 	bl	2bc4a <strnlen>
			bpe = bps + len;
    d514:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    d518:	2f00      	cmp	r7, #0
    d51a:	f43f af57 	beq.w	d3cc <z_cbvprintf_impl+0x410>
		char sign = 0;
    d51e:	2600      	movs	r6, #0
    d520:	e00b      	b.n	d53a <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    d522:	4638      	mov	r0, r7
    d524:	f7fb ff1c 	bl	9360 <strlen>
    d528:	e7f4      	b.n	d514 <z_cbvprintf_impl+0x558>
		char sign = 0;
    d52a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    d52c:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d52e:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    d530:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d534:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    d538:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    d53a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d53e:	f013 0210 	ands.w	r2, r3, #16
    d542:	9205      	str	r2, [sp, #20]
    d544:	f000 8083 	beq.w	d64e <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    d548:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    d54a:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    d54c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    d550:	bf48      	it	mi
    d552:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    d554:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    d556:	bf48      	it	mi
    d558:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    d55a:	f1b9 0f00 	cmp.w	r9, #0
    d55e:	f340 8090 	ble.w	d682 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    d562:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    d566:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    d56a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d56e:	0750      	lsls	r0, r2, #29
    d570:	9306      	str	r3, [sp, #24]
    d572:	f100 8086 	bmi.w	d682 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    d576:	0651      	lsls	r1, r2, #25
    d578:	d579      	bpl.n	d66e <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    d57a:	b13e      	cbz	r6, d58c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    d57c:	4630      	mov	r0, r6
    d57e:	9903      	ldr	r1, [sp, #12]
    d580:	47d0      	blx	sl
    d582:	2800      	cmp	r0, #0
    d584:	db70      	blt.n	d668 <z_cbvprintf_impl+0x6ac>
    d586:	9b06      	ldr	r3, [sp, #24]
    d588:	3501      	adds	r5, #1
    d58a:	461e      	mov	r6, r3
					pad = '0';
    d58c:	2230      	movs	r2, #48	; 0x30
    d58e:	e06f      	b.n	d670 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    d590:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    d592:	bf5a      	itte	pl
    d594:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    d598:	015e      	lslpl	r6, r3, #5
				sign = '+';
    d59a:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    d59c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	f6bf af65 	bge.w	d470 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    d5a6:	4252      	negs	r2, r2
    d5a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    d5ac:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    d5ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d5b2:	e75d      	b.n	d470 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    d5b4:	2600      	movs	r6, #0
    d5b6:	e75b      	b.n	d470 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    d5b8:	2600      	movs	r6, #0
				conv->flag_zero = false;
    d5ba:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    d5be:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d5c2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    d5c4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    d5c8:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    d5ca:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    d5ce:	f67f af5d 	bls.w	d48c <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    d5d2:	ebab 0303 	sub.w	r3, fp, r3
    d5d6:	9313      	str	r3, [sp, #76]	; 0x4c
    d5d8:	e758      	b.n	d48c <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    d5da:	9810      	ldr	r0, [sp, #64]	; 0x40
    d5dc:	b380      	cbz	r0, d640 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d5de:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d5e2:	ab0a      	add	r3, sp, #40	; 0x28
    d5e4:	2100      	movs	r1, #0
    d5e6:	f8cd 8000 	str.w	r8, [sp]
    d5ea:	aa12      	add	r2, sp, #72	; 0x48
    d5ec:	f7ff fc9a 	bl	cf24 <encode_uint>
				conv->altform_0c = true;
    d5f0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d5f4:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    d5f8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d5fc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d600:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d604:	4607      	mov	r7, r0
				conv->altform_0c = true;
    d606:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d60a:	dad5      	bge.n	d5b8 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    d60c:	2800      	cmp	r0, #0
    d60e:	f43f aedd 	beq.w	d3cc <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d612:	eba8 0000 	sub.w	r0, r8, r0
    d616:	e782      	b.n	d51e <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    d618:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    d61a:	2907      	cmp	r1, #7
    d61c:	f63f aed6 	bhi.w	d3cc <z_cbvprintf_impl+0x410>
    d620:	e8df f001 	tbb	[pc, r1]
    d624:	0c06040c 	.word	0x0c06040c
    d628:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    d62c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    d62e:	e6cd      	b.n	d3cc <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    d630:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    d632:	e6cb      	b.n	d3cc <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    d634:	17ea      	asrs	r2, r5, #31
    d636:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    d63a:	e6c7      	b.n	d3cc <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    d63c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    d63e:	e6c5      	b.n	d3cc <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    d640:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d700 <z_cbvprintf_impl+0x744>
		char sign = 0;
    d644:	4606      	mov	r6, r0
    d646:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    d64a:	2005      	movs	r0, #5
    d64c:	e775      	b.n	d53a <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    d64e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    d650:	bf48      	it	mi
    d652:	3001      	addmi	r0, #1
    d654:	e779      	b.n	d54a <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    d656:	4610      	mov	r0, r2
    d658:	9307      	str	r3, [sp, #28]
    d65a:	9206      	str	r2, [sp, #24]
    d65c:	9903      	ldr	r1, [sp, #12]
    d65e:	47d0      	blx	sl
    d660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d664:	2800      	cmp	r0, #0
    d666:	da04      	bge.n	d672 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    d668:	b017      	add	sp, #92	; 0x5c
    d66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    d66e:	2220      	movs	r2, #32
					pad = '0';
    d670:	464b      	mov	r3, r9
				while (width-- > 0) {
    d672:	4619      	mov	r1, r3
    d674:	2900      	cmp	r1, #0
    d676:	f103 33ff 	add.w	r3, r3, #4294967295
    d67a:	dcec      	bgt.n	d656 <z_cbvprintf_impl+0x69a>
    d67c:	444d      	add	r5, r9
    d67e:	4699      	mov	r9, r3
    d680:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    d682:	b12e      	cbz	r6, d690 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    d684:	4630      	mov	r0, r6
    d686:	9903      	ldr	r1, [sp, #12]
    d688:	47d0      	blx	sl
    d68a:	2800      	cmp	r0, #0
    d68c:	dbec      	blt.n	d668 <z_cbvprintf_impl+0x6ac>
    d68e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    d690:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d694:	06da      	lsls	r2, r3, #27
    d696:	d401      	bmi.n	d69c <z_cbvprintf_impl+0x6e0>
    d698:	071b      	lsls	r3, r3, #28
    d69a:	d505      	bpl.n	d6a8 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    d69c:	2030      	movs	r0, #48	; 0x30
    d69e:	9903      	ldr	r1, [sp, #12]
    d6a0:	47d0      	blx	sl
    d6a2:	2800      	cmp	r0, #0
    d6a4:	dbe0      	blt.n	d668 <z_cbvprintf_impl+0x6ac>
    d6a6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    d6a8:	9b05      	ldr	r3, [sp, #20]
    d6aa:	b133      	cbz	r3, d6ba <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    d6ac:	9903      	ldr	r1, [sp, #12]
    d6ae:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d6b2:	47d0      	blx	sl
    d6b4:	2800      	cmp	r0, #0
    d6b6:	dbd7      	blt.n	d668 <z_cbvprintf_impl+0x6ac>
    d6b8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d6ba:	44ab      	add	fp, r5
    d6bc:	e005      	b.n	d6ca <z_cbvprintf_impl+0x70e>
				OUTC('0');
    d6be:	2030      	movs	r0, #48	; 0x30
    d6c0:	9903      	ldr	r1, [sp, #12]
    d6c2:	47d0      	blx	sl
    d6c4:	2800      	cmp	r0, #0
    d6c6:	dbcf      	blt.n	d668 <z_cbvprintf_impl+0x6ac>
    d6c8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d6ca:	ebab 0305 	sub.w	r3, fp, r5
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	dcf5      	bgt.n	d6be <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    d6d2:	4643      	mov	r3, r8
    d6d4:	463a      	mov	r2, r7
    d6d6:	4650      	mov	r0, sl
    d6d8:	9903      	ldr	r1, [sp, #12]
    d6da:	f019 f904 	bl	268e6 <outs>
    d6de:	2800      	cmp	r0, #0
    d6e0:	dbc2      	blt.n	d668 <z_cbvprintf_impl+0x6ac>
    d6e2:	4405      	add	r5, r0
		while (width > 0) {
    d6e4:	44a9      	add	r9, r5
    d6e6:	eba9 0305 	sub.w	r3, r9, r5
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	f77f ae6e 	ble.w	d3cc <z_cbvprintf_impl+0x410>
			OUTC(' ');
    d6f0:	2020      	movs	r0, #32
    d6f2:	9903      	ldr	r1, [sp, #12]
    d6f4:	47d0      	blx	sl
    d6f6:	2800      	cmp	r0, #0
    d6f8:	dbb6      	blt.n	d668 <z_cbvprintf_impl+0x6ac>
    d6fa:	3501      	adds	r5, #1
			--width;
    d6fc:	e7f3      	b.n	d6e6 <z_cbvprintf_impl+0x72a>
    d6fe:	bf00      	nop
    d700:	0002e778 	.word	0x0002e778

0000d704 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    d704:	b538      	push	{r3, r4, r5, lr}
    d706:	460d      	mov	r5, r1
    d708:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    d70a:	2220      	movs	r2, #32
    d70c:	2100      	movs	r1, #0
    d70e:	f01e f947 	bl	2b9a0 <memset>
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    d712:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    d714:	68eb      	ldr	r3, [r5, #12]
    d716:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    d718:	68ab      	ldr	r3, [r5, #8]
    d71a:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    d71c:	682b      	ldr	r3, [r5, #0]
    d71e:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    d720:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    d722:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    d724:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    d726:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    d728:	b123      	cbz	r3, d734 <mpsc_pbuf_init+0x30>
    d72a:	1e59      	subs	r1, r3, #1
    d72c:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    d72e:	bf08      	it	eq
    d730:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    d734:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    d736:	2201      	movs	r2, #1
    d738:	2100      	movs	r1, #0
    d73a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d73e:	f01d ff33 	bl	2b5a8 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    d742:	b148      	cbz	r0, d758 <mpsc_pbuf_init+0x54>
    d744:	4905      	ldr	r1, [pc, #20]	; (d75c <mpsc_pbuf_init+0x58>)
    d746:	4806      	ldr	r0, [pc, #24]	; (d760 <mpsc_pbuf_init+0x5c>)
    d748:	232e      	movs	r3, #46	; 0x2e
    d74a:	4a06      	ldr	r2, [pc, #24]	; (d764 <mpsc_pbuf_init+0x60>)
    d74c:	f019 f8e9 	bl	26922 <assert_print>
    d750:	212e      	movs	r1, #46	; 0x2e
    d752:	4804      	ldr	r0, [pc, #16]	; (d764 <mpsc_pbuf_init+0x60>)
    d754:	f019 f8de 	bl	26914 <assert_post_action>
	ARG_UNUSED(err);
}
    d758:	bd38      	pop	{r3, r4, r5, pc}
    d75a:	bf00      	nop
    d75c:	0002e79f 	.word	0x0002e79f
    d760:	0002d881 	.word	0x0002d881
    d764:	0002e779 	.word	0x0002e779

0000d768 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d76c:	b087      	sub	sp, #28
    d76e:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    d772:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    d774:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    d776:	3b01      	subs	r3, #1
    d778:	428b      	cmp	r3, r1
{
    d77a:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
    d77c:	f0c0 80a0 	bcc.w	d8c0 <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
    d780:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
    d782:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    d784:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    d788:	f04f 0320 	mov.w	r3, #32
    d78c:	f3ef 8b11 	mrs	fp, BASEPRI
    d790:	f383 8812 	msr	BASEPRI_MAX, r3
    d794:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d798:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
    d79a:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d79c:	f013 fde0 	bl	21360 <z_spin_lock_valid>
    d7a0:	b958      	cbnz	r0, d7ba <mpsc_pbuf_alloc+0x52>
    d7a2:	2394      	movs	r3, #148	; 0x94
    d7a4:	4a49      	ldr	r2, [pc, #292]	; (d8cc <mpsc_pbuf_alloc+0x164>)
    d7a6:	494a      	ldr	r1, [pc, #296]	; (d8d0 <mpsc_pbuf_alloc+0x168>)
    d7a8:	484a      	ldr	r0, [pc, #296]	; (d8d4 <mpsc_pbuf_alloc+0x16c>)
    d7aa:	f019 f8ba 	bl	26922 <assert_print>
    d7ae:	4629      	mov	r1, r5
    d7b0:	4849      	ldr	r0, [pc, #292]	; (d8d8 <mpsc_pbuf_alloc+0x170>)
    d7b2:	f019 f8b6 	bl	26922 <assert_print>
    d7b6:	2194      	movs	r1, #148	; 0x94
    d7b8:	e050      	b.n	d85c <mpsc_pbuf_alloc+0xf4>
	z_spin_lock_set_owner(l);
    d7ba:	4628      	mov	r0, r5
    d7bc:	f013 fdec 	bl	21398 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    d7c0:	a905      	add	r1, sp, #20
    d7c2:	4620      	mov	r0, r4
    d7c4:	f019 f8ba 	bl	2693c <free_space>

		if (free_wlen >= wlen) {
    d7c8:	9905      	ldr	r1, [sp, #20]
		wrap = free_space(buffer, &free_wlen);
    d7ca:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
    d7cc:	42b9      	cmp	r1, r7
    d7ce:	d328      	bcc.n	d822 <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    d7d0:	6822      	ldr	r2, [r4, #0]
			item =
    d7d2:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    d7d4:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    d7d6:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    d7da:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    d7de:	f021 0103 	bic.w	r1, r1, #3
    d7e2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    d7e6:	6821      	ldr	r1, [r4, #0]
    d7e8:	463a      	mov	r2, r7
    d7ea:	f019 f8c9 	bl	26980 <idx_inc>
		cont = false;
    d7ee:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    d7f2:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d7f4:	4628      	mov	r0, r5
    d7f6:	f013 fdc1 	bl	2137c <z_spin_unlock_valid>
    d7fa:	b320      	cbz	r0, d846 <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
    d7fc:	f389 8811 	msr	BASEPRI, r9
    d800:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    d804:	f1b8 0f00 	cmp.w	r8, #0
    d808:	d05c      	beq.n	d8c4 <mpsc_pbuf_alloc+0x15c>
    d80a:	b146      	cbz	r6, d81e <mpsc_pbuf_alloc+0xb6>
    d80c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d810:	2b00      	cmp	r3, #0
    d812:	d0b9      	beq.n	d788 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    d814:	69a3      	ldr	r3, [r4, #24]
    d816:	b113      	cbz	r3, d81e <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
    d818:	4631      	mov	r1, r6
    d81a:	4620      	mov	r0, r4
    d81c:	4798      	blx	r3
{
    d81e:	2600      	movs	r6, #0
    d820:	e7b2      	b.n	d788 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    d822:	b118      	cbz	r0, d82c <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
    d824:	4620      	mov	r0, r4
    d826:	f019 f8b9 	bl	2699c <add_skip_item>
			cont = true;
    d82a:	e7e3      	b.n	d7f4 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d82c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    d830:	4313      	orrs	r3, r2
    d832:	d036      	beq.n	d8a2 <mpsc_pbuf_alloc+0x13a>
    d834:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
    d836:	f01d fe66 	bl	2b506 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d83a:	9903      	ldr	r1, [sp, #12]
    d83c:	bb88      	cbnz	r0, d8a2 <mpsc_pbuf_alloc+0x13a>
    d83e:	4628      	mov	r0, r5
    d840:	f013 fd9c 	bl	2137c <z_spin_unlock_valid>
    d844:	b968      	cbnz	r0, d862 <mpsc_pbuf_alloc+0xfa>
    d846:	23c2      	movs	r3, #194	; 0xc2
    d848:	4a20      	ldr	r2, [pc, #128]	; (d8cc <mpsc_pbuf_alloc+0x164>)
    d84a:	4924      	ldr	r1, [pc, #144]	; (d8dc <mpsc_pbuf_alloc+0x174>)
    d84c:	4821      	ldr	r0, [pc, #132]	; (d8d4 <mpsc_pbuf_alloc+0x16c>)
    d84e:	f019 f868 	bl	26922 <assert_print>
    d852:	4629      	mov	r1, r5
    d854:	4822      	ldr	r0, [pc, #136]	; (d8e0 <mpsc_pbuf_alloc+0x178>)
    d856:	f019 f864 	bl	26922 <assert_print>
    d85a:	21c2      	movs	r1, #194	; 0xc2
    d85c:	481b      	ldr	r0, [pc, #108]	; (d8cc <mpsc_pbuf_alloc+0x164>)
    d85e:	f019 f859 	bl	26914 <assert_post_action>
    d862:	f38b 8811 	msr	BASEPRI, fp
    d866:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    d86a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d86e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    d872:	f014 f871 	bl	21958 <z_impl_k_sem_take>
    d876:	4680      	mov	r8, r0
	__asm__ volatile(
    d878:	f04f 0320 	mov.w	r3, #32
    d87c:	f3ef 8911 	mrs	r9, BASEPRI
    d880:	f383 8812 	msr	BASEPRI_MAX, r3
    d884:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d888:	4628      	mov	r0, r5
    d88a:	f013 fd69 	bl	21360 <z_spin_lock_valid>
    d88e:	2800      	cmp	r0, #0
    d890:	d087      	beq.n	d7a2 <mpsc_pbuf_alloc+0x3a>
			if (err == 0) {
    d892:	fab8 f888 	clz	r8, r8
	z_spin_lock_set_owner(l);
    d896:	4628      	mov	r0, r5
    d898:	f013 fd7e 	bl	21398 <z_spin_lock_set_owner>
    d89c:	ea4f 1858 	mov.w	r8, r8, lsr #5
    d8a0:	e7a8      	b.n	d7f4 <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    d8a2:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    d8a4:	4620      	mov	r0, r4
    d8a6:	f10d 0313 	add.w	r3, sp, #19
    d8aa:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d8ae:	f019 f898 	bl	269e2 <drop_item_locked>
			cont = dropped_item != NULL;
    d8b2:	f1b0 0800 	subs.w	r8, r0, #0
    d8b6:	4606      	mov	r6, r0
    d8b8:	bf18      	it	ne
    d8ba:	f04f 0801 	movne.w	r8, #1
    d8be:	e799      	b.n	d7f4 <mpsc_pbuf_alloc+0x8c>
		return NULL;
    d8c0:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    d8c4:	4650      	mov	r0, sl
    d8c6:	b007      	add	sp, #28
    d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8cc:	0002e6ba 	.word	0x0002e6ba
    d8d0:	0002e713 	.word	0x0002e713
    d8d4:	0002d881 	.word	0x0002d881
    d8d8:	0002e728 	.word	0x0002e728
    d8dc:	0002e6e7 	.word	0x0002e6e7
    d8e0:	0002e6fe 	.word	0x0002e6fe

0000d8e4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    d8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8e8:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    d8ea:	69c3      	ldr	r3, [r0, #28]
    d8ec:	4608      	mov	r0, r1
{
    d8ee:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    d8f0:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    d8f2:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    d8f6:	4607      	mov	r7, r0
    d8f8:	f04f 0320 	mov.w	r3, #32
    d8fc:	f3ef 8811 	mrs	r8, BASEPRI
    d900:	f383 8812 	msr	BASEPRI_MAX, r3
    d904:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d908:	4628      	mov	r0, r5
    d90a:	f013 fd29 	bl	21360 <z_spin_lock_valid>
    d90e:	b968      	cbnz	r0, d92c <mpsc_pbuf_commit+0x48>
    d910:	2394      	movs	r3, #148	; 0x94
    d912:	4a19      	ldr	r2, [pc, #100]	; (d978 <mpsc_pbuf_commit+0x94>)
    d914:	4919      	ldr	r1, [pc, #100]	; (d97c <mpsc_pbuf_commit+0x98>)
    d916:	481a      	ldr	r0, [pc, #104]	; (d980 <mpsc_pbuf_commit+0x9c>)
    d918:	f019 f803 	bl	26922 <assert_print>
    d91c:	4629      	mov	r1, r5
    d91e:	4819      	ldr	r0, [pc, #100]	; (d984 <mpsc_pbuf_commit+0xa0>)
    d920:	f018 ffff 	bl	26922 <assert_print>
    d924:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d926:	4814      	ldr	r0, [pc, #80]	; (d978 <mpsc_pbuf_commit+0x94>)
    d928:	f018 fff4 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
    d92c:	4628      	mov	r0, r5
    d92e:	f013 fd33 	bl	21398 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    d932:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d934:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    d936:	f043 0301 	orr.w	r3, r3, #1
    d93a:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d93c:	6861      	ldr	r1, [r4, #4]
    d93e:	4620      	mov	r0, r4
    d940:	f019 f81e 	bl	26980 <idx_inc>
    d944:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    d946:	4620      	mov	r0, r4
    d948:	f019 f83e 	bl	269c8 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d94c:	4628      	mov	r0, r5
    d94e:	f013 fd15 	bl	2137c <z_spin_unlock_valid>
    d952:	b958      	cbnz	r0, d96c <mpsc_pbuf_commit+0x88>
    d954:	23c2      	movs	r3, #194	; 0xc2
    d956:	4a08      	ldr	r2, [pc, #32]	; (d978 <mpsc_pbuf_commit+0x94>)
    d958:	490b      	ldr	r1, [pc, #44]	; (d988 <mpsc_pbuf_commit+0xa4>)
    d95a:	4809      	ldr	r0, [pc, #36]	; (d980 <mpsc_pbuf_commit+0x9c>)
    d95c:	f018 ffe1 	bl	26922 <assert_print>
    d960:	4629      	mov	r1, r5
    d962:	480a      	ldr	r0, [pc, #40]	; (d98c <mpsc_pbuf_commit+0xa8>)
    d964:	f018 ffdd 	bl	26922 <assert_print>
    d968:	21c2      	movs	r1, #194	; 0xc2
    d96a:	e7dc      	b.n	d926 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    d96c:	f388 8811 	msr	BASEPRI, r8
    d970:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    d974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d978:	0002e6ba 	.word	0x0002e6ba
    d97c:	0002e713 	.word	0x0002e713
    d980:	0002d881 	.word	0x0002d881
    d984:	0002e728 	.word	0x0002e728
    d988:	0002e6e7 	.word	0x0002e6e7
    d98c:	0002e6fe 	.word	0x0002e6fe

0000d990 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    d990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d994:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    d996:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    d99a:	f04f 0320 	mov.w	r3, #32
    d99e:	f3ef 8811 	mrs	r8, BASEPRI
    d9a2:	f383 8812 	msr	BASEPRI_MAX, r3
    d9a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d9aa:	4638      	mov	r0, r7
    d9ac:	f013 fcd8 	bl	21360 <z_spin_lock_valid>
    d9b0:	4605      	mov	r5, r0
    d9b2:	b968      	cbnz	r0, d9d0 <mpsc_pbuf_claim+0x40>
    d9b4:	2394      	movs	r3, #148	; 0x94
    d9b6:	4a33      	ldr	r2, [pc, #204]	; (da84 <mpsc_pbuf_claim+0xf4>)
    d9b8:	4933      	ldr	r1, [pc, #204]	; (da88 <mpsc_pbuf_claim+0xf8>)
    d9ba:	4834      	ldr	r0, [pc, #208]	; (da8c <mpsc_pbuf_claim+0xfc>)
    d9bc:	f018 ffb1 	bl	26922 <assert_print>
    d9c0:	4639      	mov	r1, r7
    d9c2:	4833      	ldr	r0, [pc, #204]	; (da90 <mpsc_pbuf_claim+0x100>)
    d9c4:	f018 ffad 	bl	26922 <assert_print>
    d9c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d9ca:	482e      	ldr	r0, [pc, #184]	; (da84 <mpsc_pbuf_claim+0xf4>)
    d9cc:	f018 ffa2 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
    d9d0:	4638      	mov	r0, r7
    d9d2:	f013 fce1 	bl	21398 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    d9d6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    d9da:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    d9dc:	bf88      	it	hi
    d9de:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    d9e0:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    d9e2:	2b00      	cmp	r3, #0
    d9e4:	d03f      	beq.n	da66 <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
    d9e6:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    d9e8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    d9ec:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    d9f0:	f013 0003 	ands.w	r0, r3, #3
    d9f4:	d03a      	beq.n	da6c <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
    d9f6:	2802      	cmp	r0, #2
    d9f8:	d103      	bne.n	da02 <mpsc_pbuf_claim+0x72>
		return item->skip.len;
    d9fa:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    d9fe:	08b6      	lsrs	r6, r6, #2
    da00:	d105      	bne.n	da0e <mpsc_pbuf_claim+0x7e>
    da02:	07d8      	lsls	r0, r3, #31
    da04:	d41f      	bmi.n	da46 <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    da06:	4648      	mov	r0, r9
    da08:	69e3      	ldr	r3, [r4, #28]
    da0a:	4798      	blx	r3
    da0c:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    da0e:	68a1      	ldr	r1, [r4, #8]
    da10:	4632      	mov	r2, r6
    da12:	4620      	mov	r0, r4
    da14:	f018 ffb4 	bl	26980 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    da18:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    da1a:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    da1c:	4632      	mov	r2, r6
    da1e:	4620      	mov	r0, r4
    da20:	f018 ffae 	bl	26980 <idx_inc>
				buffer->rd_idx =
    da24:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    da26:	4638      	mov	r0, r7
    da28:	f013 fca8 	bl	2137c <z_spin_unlock_valid>
    da2c:	bb00      	cbnz	r0, da70 <mpsc_pbuf_claim+0xe0>
    da2e:	23c2      	movs	r3, #194	; 0xc2
    da30:	4a14      	ldr	r2, [pc, #80]	; (da84 <mpsc_pbuf_claim+0xf4>)
    da32:	4918      	ldr	r1, [pc, #96]	; (da94 <mpsc_pbuf_claim+0x104>)
    da34:	4815      	ldr	r0, [pc, #84]	; (da8c <mpsc_pbuf_claim+0xfc>)
    da36:	f018 ff74 	bl	26922 <assert_print>
    da3a:	4639      	mov	r1, r7
    da3c:	4816      	ldr	r0, [pc, #88]	; (da98 <mpsc_pbuf_claim+0x108>)
    da3e:	f018 ff70 	bl	26922 <assert_print>
    da42:	21c2      	movs	r1, #194	; 0xc2
    da44:	e7c1      	b.n	d9ca <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    da46:	f043 0302 	orr.w	r3, r3, #2
    da4a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    da4e:	69e3      	ldr	r3, [r4, #28]
    da50:	4648      	mov	r0, r9
    da52:	68a5      	ldr	r5, [r4, #8]
    da54:	4798      	blx	r3
    da56:	4629      	mov	r1, r5
    da58:	4602      	mov	r2, r0
    da5a:	4620      	mov	r0, r4
    da5c:	f018 ff90 	bl	26980 <idx_inc>
		cont = false;
    da60:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    da62:	60a0      	str	r0, [r4, #8]
    da64:	e7df      	b.n	da26 <mpsc_pbuf_claim+0x96>
		cont = false;
    da66:	461d      	mov	r5, r3
			item = NULL;
    da68:	46a9      	mov	r9, r5
    da6a:	e7dc      	b.n	da26 <mpsc_pbuf_claim+0x96>
		cont = false;
    da6c:	4605      	mov	r5, r0
    da6e:	e7fb      	b.n	da68 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
    da70:	f388 8811 	msr	BASEPRI, r8
    da74:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    da78:	2d00      	cmp	r5, #0
    da7a:	d18e      	bne.n	d99a <mpsc_pbuf_claim+0xa>

	return item;
}
    da7c:	4648      	mov	r0, r9
    da7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da82:	bf00      	nop
    da84:	0002e6ba 	.word	0x0002e6ba
    da88:	0002e713 	.word	0x0002e713
    da8c:	0002d881 	.word	0x0002d881
    da90:	0002e728 	.word	0x0002e728
    da94:	0002e6e7 	.word	0x0002e6e7
    da98:	0002e6fe 	.word	0x0002e6fe

0000da9c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daa0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    daa2:	69c3      	ldr	r3, [r0, #28]
    daa4:	4608      	mov	r0, r1
{
    daa6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    daa8:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    daaa:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    daae:	4607      	mov	r7, r0
	__asm__ volatile(
    dab0:	f04f 0320 	mov.w	r3, #32
    dab4:	f3ef 8811 	mrs	r8, BASEPRI
    dab8:	f383 8812 	msr	BASEPRI_MAX, r3
    dabc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dac0:	4630      	mov	r0, r6
    dac2:	f013 fc4d 	bl	21360 <z_spin_lock_valid>
    dac6:	b968      	cbnz	r0, dae4 <mpsc_pbuf_free+0x48>
    dac8:	2394      	movs	r3, #148	; 0x94
    daca:	4a23      	ldr	r2, [pc, #140]	; (db58 <mpsc_pbuf_free+0xbc>)
    dacc:	4923      	ldr	r1, [pc, #140]	; (db5c <mpsc_pbuf_free+0xc0>)
    dace:	4824      	ldr	r0, [pc, #144]	; (db60 <mpsc_pbuf_free+0xc4>)
    dad0:	f018 ff27 	bl	26922 <assert_print>
    dad4:	4631      	mov	r1, r6
    dad6:	4823      	ldr	r0, [pc, #140]	; (db64 <mpsc_pbuf_free+0xc8>)
    dad8:	f018 ff23 	bl	26922 <assert_print>
    dadc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dade:	481e      	ldr	r0, [pc, #120]	; (db58 <mpsc_pbuf_free+0xbc>)
    dae0:	f018 ff18 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
    dae4:	4630      	mov	r0, r6
    dae6:	f013 fc57 	bl	21398 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    daea:	782b      	ldrb	r3, [r5, #0]
    daec:	f36f 0300 	bfc	r3, #0, #1
    daf0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    daf2:	6923      	ldr	r3, [r4, #16]
    daf4:	079b      	lsls	r3, r3, #30
    daf6:	d505      	bpl.n	db04 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    daf8:	68e2      	ldr	r2, [r4, #12]
    dafa:	6a23      	ldr	r3, [r4, #32]
    dafc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    db00:	429d      	cmp	r5, r3
    db02:	d119      	bne.n	db38 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
    db04:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    db06:	463a      	mov	r2, r7
		witem->hdr.busy = 0;
    db08:	f36f 0341 	bfc	r3, #1, #1
    db0c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    db0e:	68e1      	ldr	r1, [r4, #12]
    db10:	4620      	mov	r0, r4
    db12:	f018 ff35 	bl	26980 <idx_inc>
    db16:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    db18:	4630      	mov	r0, r6
    db1a:	f013 fc2f 	bl	2137c <z_spin_unlock_valid>
    db1e:	b980      	cbnz	r0, db42 <mpsc_pbuf_free+0xa6>
    db20:	23c2      	movs	r3, #194	; 0xc2
    db22:	4a0d      	ldr	r2, [pc, #52]	; (db58 <mpsc_pbuf_free+0xbc>)
    db24:	4910      	ldr	r1, [pc, #64]	; (db68 <mpsc_pbuf_free+0xcc>)
    db26:	480e      	ldr	r0, [pc, #56]	; (db60 <mpsc_pbuf_free+0xc4>)
    db28:	f018 fefb 	bl	26922 <assert_print>
    db2c:	4631      	mov	r1, r6
    db2e:	480f      	ldr	r0, [pc, #60]	; (db6c <mpsc_pbuf_free+0xd0>)
    db30:	f018 fef7 	bl	26922 <assert_print>
    db34:	21c2      	movs	r1, #194	; 0xc2
    db36:	e7d2      	b.n	dade <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
    db38:	682b      	ldr	r3, [r5, #0]
    db3a:	f367 039f 	bfi	r3, r7, #2, #30
    db3e:	602b      	str	r3, [r5, #0]
    db40:	e7ea      	b.n	db18 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
    db42:	f388 8811 	msr	BASEPRI, r8
    db46:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    db4a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    db4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db52:	f013 bebd 	b.w	218d0 <z_impl_k_sem_give>
    db56:	bf00      	nop
    db58:	0002e6ba 	.word	0x0002e6ba
    db5c:	0002e713 	.word	0x0002e713
    db60:	0002d881 	.word	0x0002d881
    db64:	0002e728 	.word	0x0002e728
    db68:	0002e6e7 	.word	0x0002e6e7
    db6c:	0002e6fe 	.word	0x0002e6fe

0000db70 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    db70:	b148      	cbz	r0, db86 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    db72:	4b05      	ldr	r3, [pc, #20]	; (db88 <arch_busy_wait+0x18>)
    db74:	4a05      	ldr	r2, [pc, #20]	; (db8c <arch_busy_wait+0x1c>)
    db76:	681b      	ldr	r3, [r3, #0]
    db78:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    db7c:	4358      	muls	r0, r3
    db7e:	4b04      	ldr	r3, [pc, #16]	; (db90 <arch_busy_wait+0x20>)
    db80:	f043 0301 	orr.w	r3, r3, #1
    db84:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    db86:	4770      	bx	lr
    db88:	20008800 	.word	0x20008800
    db8c:	000f4240 	.word	0x000f4240
    db90:	0002ca50 	.word	0x0002ca50

0000db94 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    db94:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    db96:	b570      	push	{r4, r5, r6, lr}
    db98:	4605      	mov	r5, r0
    db9a:	461e      	mov	r6, r3
    db9c:	4608      	mov	r0, r1
    db9e:	d90b      	bls.n	dbb8 <ppi_ipc_to_rtc.isra.0+0x24>
    dba0:	491d      	ldr	r1, [pc, #116]	; (dc18 <ppi_ipc_to_rtc.isra.0+0x84>)
    dba2:	481e      	ldr	r0, [pc, #120]	; (dc1c <ppi_ipc_to_rtc.isra.0+0x88>)
    dba4:	f240 13e7 	movw	r3, #487	; 0x1e7
    dba8:	4a1d      	ldr	r2, [pc, #116]	; (dc20 <ppi_ipc_to_rtc.isra.0+0x8c>)
    dbaa:	f018 feba 	bl	26922 <assert_print>
    dbae:	f240 11e7 	movw	r1, #487	; 0x1e7
    dbb2:	481b      	ldr	r0, [pc, #108]	; (dc20 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    dbb4:	f018 feae 	bl	26914 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    dbb8:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    dbba:	f00f ff07 	bl	1d9cc <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    dbbe:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    dbc2:	b1ae      	cbz	r6, dbf0 <ppi_ipc_to_rtc.isra.0+0x5c>
    dbc4:	b950      	cbnz	r0, dbdc <ppi_ipc_to_rtc.isra.0+0x48>
    dbc6:	4917      	ldr	r1, [pc, #92]	; (dc24 <ppi_ipc_to_rtc.isra.0+0x90>)
    dbc8:	f240 234e 	movw	r3, #590	; 0x24e
    dbcc:	4a16      	ldr	r2, [pc, #88]	; (dc28 <ppi_ipc_to_rtc.isra.0+0x94>)
    dbce:	4813      	ldr	r0, [pc, #76]	; (dc1c <ppi_ipc_to_rtc.isra.0+0x88>)
    dbd0:	f018 fea7 	bl	26922 <assert_print>
    dbd4:	f240 214e 	movw	r1, #590	; 0x24e
    dbd8:	4813      	ldr	r0, [pc, #76]	; (dc28 <ppi_ipc_to_rtc.isra.0+0x94>)
    dbda:	e7eb      	b.n	dbb4 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    dbdc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dbe0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    dbe4:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    dbe8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    dbec:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    dbee:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    dbf0:	b948      	cbnz	r0, dc06 <ppi_ipc_to_rtc.isra.0+0x72>
    dbf2:	490c      	ldr	r1, [pc, #48]	; (dc24 <ppi_ipc_to_rtc.isra.0+0x90>)
    dbf4:	f240 2363 	movw	r3, #611	; 0x263
    dbf8:	4a0b      	ldr	r2, [pc, #44]	; (dc28 <ppi_ipc_to_rtc.isra.0+0x94>)
    dbfa:	4808      	ldr	r0, [pc, #32]	; (dc1c <ppi_ipc_to_rtc.isra.0+0x88>)
    dbfc:	f018 fe91 	bl	26922 <assert_print>
    dc00:	f240 2163 	movw	r1, #611	; 0x263
    dc04:	e7e8      	b.n	dbd8 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    dc06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    dc0a:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    dc0e:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    dc12:	6016      	str	r6, [r2, #0]
    dc14:	e7eb      	b.n	dbee <ppi_ipc_to_rtc.isra.0+0x5a>
    dc16:	bf00      	nop
    dc18:	0002e7de 	.word	0x0002e7de
    dc1c:	0002d881 	.word	0x0002d881
    dc20:	0002e7ac 	.word	0x0002e7ac
    dc24:	0002e821 	.word	0x0002e821
    dc28:	0002e7e9 	.word	0x0002e7e9

0000dc2c <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    dc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc2e:	b083      	sub	sp, #12
    dc30:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    dc32:	1d38      	adds	r0, r7, #4
    dc34:	f010 fd72 	bl	1e71c <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    dc38:	4b24      	ldr	r3, [pc, #144]	; (dccc <sync_rtc_setup+0xa0>)
    dc3a:	4298      	cmp	r0, r3
    dc3c:	d143      	bne.n	dcc6 <sync_rtc_setup+0x9a>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    dc3e:	f010 f8b9 	bl	1ddb4 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    dc42:	1e04      	subs	r4, r0, #0
    dc44:	da13      	bge.n	dc6e <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    dc46:	7938      	ldrb	r0, [r7, #4]
    dc48:	f010 fd6e 	bl	1e728 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    dc4c:	466d      	mov	r5, sp
    dc4e:	b088      	sub	sp, #32
    dc50:	466a      	mov	r2, sp
    dc52:	4b1f      	ldr	r3, [pc, #124]	; (dcd0 <sync_rtc_setup+0xa4>)
    dc54:	e9c2 3405 	strd	r3, r4, [r2, #20]
    dc58:	2303      	movs	r3, #3
    dc5a:	f842 3f10 	str.w	r3, [r2, #16]!
    dc5e:	2300      	movs	r3, #0
    dc60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dc64:	481b      	ldr	r0, [pc, #108]	; (dcd4 <sync_rtc_setup+0xa8>)
    dc66:	f000 fc93 	bl	e590 <z_impl_z_log_msg_static_create>
    dc6a:	46ad      	mov	sp, r5
	}

	return rv;
    dc6c:	e027      	b.n	dcbe <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    dc6e:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    dc72:	4d19      	ldr	r5, [pc, #100]	; (dcd8 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    dc74:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    dc76:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    dc78:	80fb      	strh	r3, [r7, #6]
    dc7a:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    dc7c:	687b      	ldr	r3, [r7, #4]
    dc7e:	b914      	cbnz	r4, dc86 <sync_rtc_setup+0x5a>
		return -ENOSYS;
    dc80:	f06f 0457 	mvn.w	r4, #87	; 0x57
    dc84:	e7e2      	b.n	dc4c <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    dc86:	2108      	movs	r1, #8
    dc88:	4628      	mov	r0, r5
    dc8a:	4a14      	ldr	r2, [pc, #80]	; (dcdc <sync_rtc_setup+0xb0>)
    dc8c:	47a0      	blx	r4
	if (err < 0) {
    dc8e:	1e04      	subs	r4, r0, #0
    dc90:	dbdc      	blt.n	dc4c <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    dc92:	6933      	ldr	r3, [r6, #16]
    dc94:	2b00      	cmp	r3, #0
    dc96:	d0f3      	beq.n	dc80 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    dc98:	2201      	movs	r2, #1
    dc9a:	2108      	movs	r1, #8
    dc9c:	4628      	mov	r0, r5
    dc9e:	4798      	blx	r3
	if (rv < 0) {
    dca0:	1e04      	subs	r4, r0, #0
    dca2:	dbd3      	blt.n	dc4c <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    dca4:	2301      	movs	r3, #1
    dca6:	7938      	ldrb	r0, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    dca8:	4a0d      	ldr	r2, [pc, #52]	; (dce0 <sync_rtc_setup+0xb4>)
    dcaa:	fa03 f100 	lsl.w	r1, r3, r0
    dcae:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    dcb2:	79fa      	ldrb	r2, [r7, #7]
    dcb4:	7979      	ldrb	r1, [r7, #5]
    dcb6:	f7ff ff6d 	bl	db94 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    dcba:	2c00      	cmp	r4, #0
    dcbc:	d1c6      	bne.n	dc4c <sync_rtc_setup+0x20>
}
    dcbe:	4620      	mov	r0, r4
    dcc0:	370c      	adds	r7, #12
    dcc2:	46bd      	mov	sp, r7
    dcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    dcc6:	f06f 0412 	mvn.w	r4, #18
    dcca:	e7bf      	b.n	dc4c <sync_rtc_setup+0x20>
    dccc:	0bad0000 	.word	0x0bad0000
    dcd0:	0002e825 	.word	0x0002e825
    dcd4:	0002c904 	.word	0x0002c904
    dcd8:	0002c340 	.word	0x0002c340
    dcdc:	0000dd95 	.word	0x0000dd95
    dce0:	40017000 	.word	0x40017000

0000dce4 <rtc_cb>:
{
    dce4:	b570      	push	{r4, r5, r6, lr}
    dce6:	9e04      	ldr	r6, [sp, #16]
    dce8:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    dcec:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    dcee:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dcf2:	4630      	mov	r0, r6
    dcf4:	f00f fe50 	bl	1d998 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    dcf8:	2c0f      	cmp	r4, #15
    dcfa:	d90b      	bls.n	dd14 <rtc_cb+0x30>
    dcfc:	491b      	ldr	r1, [pc, #108]	; (dd6c <rtc_cb+0x88>)
    dcfe:	481c      	ldr	r0, [pc, #112]	; (dd70 <rtc_cb+0x8c>)
    dd00:	f240 13e1 	movw	r3, #481	; 0x1e1
    dd04:	4a1b      	ldr	r2, [pc, #108]	; (dd74 <rtc_cb+0x90>)
    dd06:	f018 fe0c 	bl	26922 <assert_print>
    dd0a:	f240 11e1 	movw	r1, #481	; 0x1e1
    dd0e:	4819      	ldr	r0, [pc, #100]	; (dd74 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    dd10:	f018 fe00 	bl	26914 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    dd14:	00a4      	lsls	r4, r4, #2
    dd16:	b2e4      	uxtb	r4, r4
    dd18:	b950      	cbnz	r0, dd30 <rtc_cb+0x4c>
    dd1a:	4917      	ldr	r1, [pc, #92]	; (dd78 <rtc_cb+0x94>)
    dd1c:	4814      	ldr	r0, [pc, #80]	; (dd70 <rtc_cb+0x8c>)
    dd1e:	f44f 7317 	mov.w	r3, #604	; 0x25c
    dd22:	4a16      	ldr	r2, [pc, #88]	; (dd7c <rtc_cb+0x98>)
    dd24:	f018 fdfd 	bl	26922 <assert_print>
    dd28:	f44f 7117 	mov.w	r1, #604	; 0x25c
    dd2c:	4813      	ldr	r0, [pc, #76]	; (dd7c <rtc_cb+0x98>)
    dd2e:	e7ef      	b.n	dd10 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    dd30:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    dd32:	4b13      	ldr	r3, [pc, #76]	; (dd80 <rtc_cb+0x9c>)
    dd34:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    dd38:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    dd3a:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    dd3c:	4a11      	ldr	r2, [pc, #68]	; (dd84 <rtc_cb+0xa0>)
    dd3e:	40ab      	lsls	r3, r5
    dd40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    dd44:	4630      	mov	r0, r6
    dd46:	f010 f853 	bl	1ddf0 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    dd4a:	4628      	mov	r0, r5
    dd4c:	f010 fcec 	bl	1e728 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    dd50:	4b0d      	ldr	r3, [pc, #52]	; (dd88 <rtc_cb+0xa4>)
    dd52:	4298      	cmp	r0, r3
    dd54:	d008      	beq.n	dd68 <rtc_cb+0x84>
    dd56:	490d      	ldr	r1, [pc, #52]	; (dd8c <rtc_cb+0xa8>)
    dd58:	4805      	ldr	r0, [pc, #20]	; (dd70 <rtc_cb+0x8c>)
    dd5a:	2374      	movs	r3, #116	; 0x74
    dd5c:	4a0c      	ldr	r2, [pc, #48]	; (dd90 <rtc_cb+0xac>)
    dd5e:	f018 fde0 	bl	26922 <assert_print>
    dd62:	2174      	movs	r1, #116	; 0x74
    dd64:	480a      	ldr	r0, [pc, #40]	; (dd90 <rtc_cb+0xac>)
    dd66:	e7d3      	b.n	dd10 <rtc_cb+0x2c>
}
    dd68:	bd70      	pop	{r4, r5, r6, pc}
    dd6a:	bf00      	nop
    dd6c:	0002e7de 	.word	0x0002e7de
    dd70:	0002d881 	.word	0x0002d881
    dd74:	0002e7ac 	.word	0x0002e7ac
    dd78:	0002e84d 	.word	0x0002e84d
    dd7c:	0002e7e9 	.word	0x0002e7e9
    dd80:	4002a080 	.word	0x4002a080
    dd84:	40017000 	.word	0x40017000
    dd88:	0bad0000 	.word	0x0bad0000
    dd8c:	0002e888 	.word	0x0002e888
    dd90:	0002e851 	.word	0x0002e851

0000dd94 <mbox_callback>:
{
    dd94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dd98:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    dd9a:	6883      	ldr	r3, [r0, #8]
    dd9c:	691b      	ldr	r3, [r3, #16]
    dd9e:	b94b      	cbnz	r3, ddb4 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    dda0:	4927      	ldr	r1, [pc, #156]	; (de40 <mbox_callback+0xac>)
    dda2:	4828      	ldr	r0, [pc, #160]	; (de44 <mbox_callback+0xb0>)
    dda4:	23ca      	movs	r3, #202	; 0xca
    dda6:	4a28      	ldr	r2, [pc, #160]	; (de48 <mbox_callback+0xb4>)
    dda8:	f018 fdbb 	bl	26922 <assert_print>
    ddac:	21ca      	movs	r1, #202	; 0xca
    ddae:	4826      	ldr	r0, [pc, #152]	; (de48 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    ddb0:	f018 fdb0 	bl	26914 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    ddb4:	2200      	movs	r2, #0
    ddb6:	4798      	blx	r3
    ddb8:	4606      	mov	r6, r0
    ddba:	2800      	cmp	r0, #0
    ddbc:	d1f0      	bne.n	dda0 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    ddbe:	f3c4 2907 	ubfx	r9, r4, #8, #8
    ddc2:	4648      	mov	r0, r9
    ddc4:	f00f fe1c 	bl	1da00 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    ddc8:	fa5f f884 	uxtb.w	r8, r4
    ddcc:	4633      	mov	r3, r6
    ddce:	4649      	mov	r1, r9
    ddd0:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    ddd2:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    ddd4:	4640      	mov	r0, r8
    ddd6:	f7ff fedd 	bl	db94 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    ddda:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    ddde:	4648      	mov	r0, r9
    dde0:	f00f fdda 	bl	1d998 <z_nrf_rtc_timer_compare_evt_address_get>
    dde4:	2d0f      	cmp	r5, #15
    dde6:	d90a      	bls.n	ddfe <mbox_callback+0x6a>
    dde8:	4918      	ldr	r1, [pc, #96]	; (de4c <mbox_callback+0xb8>)
    ddea:	4816      	ldr	r0, [pc, #88]	; (de44 <mbox_callback+0xb0>)
    ddec:	f240 13e1 	movw	r3, #481	; 0x1e1
    ddf0:	4a17      	ldr	r2, [pc, #92]	; (de50 <mbox_callback+0xbc>)
    ddf2:	f018 fd96 	bl	26922 <assert_print>
    ddf6:	f240 11e1 	movw	r1, #481	; 0x1e1
    ddfa:	4815      	ldr	r0, [pc, #84]	; (de50 <mbox_callback+0xbc>)
    ddfc:	e7d8      	b.n	ddb0 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    ddfe:	4a15      	ldr	r2, [pc, #84]	; (de54 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    de00:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    de02:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    de04:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    de08:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    de0a:	b950      	cbnz	r0, de22 <mbox_callback+0x8e>
    de0c:	4912      	ldr	r1, [pc, #72]	; (de58 <mbox_callback+0xc4>)
    de0e:	480d      	ldr	r0, [pc, #52]	; (de44 <mbox_callback+0xb0>)
    de10:	f44f 7312 	mov.w	r3, #584	; 0x248
    de14:	4a11      	ldr	r2, [pc, #68]	; (de5c <mbox_callback+0xc8>)
    de16:	f018 fd84 	bl	26922 <assert_print>
    de1a:	f44f 7112 	mov.w	r1, #584	; 0x248
    de1e:	480f      	ldr	r0, [pc, #60]	; (de5c <mbox_callback+0xc8>)
    de20:	e7c6      	b.n	ddb0 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    de22:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    de26:	4b0e      	ldr	r3, [pc, #56]	; (de60 <mbox_callback+0xcc>)
    de28:	f107 0232 	add.w	r2, r7, #50	; 0x32
    de2c:	9300      	str	r3, [sp, #0]
    de2e:	4648      	mov	r0, r9
    de30:	4633      	mov	r3, r6
    de32:	9401      	str	r4, [sp, #4]
    de34:	0052      	lsls	r2, r2, #1
    de36:	f00f fecd 	bl	1dbd4 <z_nrf_rtc_timer_set>
}
    de3a:	b003      	add	sp, #12
    de3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    de40:	0002e79f 	.word	0x0002e79f
    de44:	0002d881 	.word	0x0002d881
    de48:	0002e851 	.word	0x0002e851
    de4c:	0002e7de 	.word	0x0002e7de
    de50:	0002e7ac 	.word	0x0002e7ac
    de54:	4002a080 	.word	0x4002a080
    de58:	0002e84d 	.word	0x0002e84d
    de5c:	0002e7e9 	.word	0x0002e7e9
    de60:	0000dce5 	.word	0x0000dce5

0000de64 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    de64:	f01c bd60 	b.w	2a928 <SystemInit>

0000de68 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    de68:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    de6a:	aa01      	add	r2, sp, #4
    de6c:	f01c fd43 	bl	2a8f6 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    de70:	4604      	mov	r4, r0
    de72:	b168      	cbz	r0, de90 <soc_secure_gpio_pin_mcu_select+0x28>
    de74:	2316      	movs	r3, #22
    de76:	4a0e      	ldr	r2, [pc, #56]	; (deb0 <soc_secure_gpio_pin_mcu_select+0x48>)
    de78:	490e      	ldr	r1, [pc, #56]	; (deb4 <soc_secure_gpio_pin_mcu_select+0x4c>)
    de7a:	480f      	ldr	r0, [pc, #60]	; (deb8 <soc_secure_gpio_pin_mcu_select+0x50>)
    de7c:	f018 fd51 	bl	26922 <assert_print>
    de80:	4621      	mov	r1, r4
    de82:	480e      	ldr	r0, [pc, #56]	; (debc <soc_secure_gpio_pin_mcu_select+0x54>)
    de84:	f018 fd4d 	bl	26922 <assert_print>
    de88:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    de8a:	4809      	ldr	r0, [pc, #36]	; (deb0 <soc_secure_gpio_pin_mcu_select+0x48>)
    de8c:	f018 fd42 	bl	26914 <assert_post_action>
    de90:	9b01      	ldr	r3, [sp, #4]
    de92:	b15b      	cbz	r3, deac <soc_secure_gpio_pin_mcu_select+0x44>
    de94:	2317      	movs	r3, #23
    de96:	4a06      	ldr	r2, [pc, #24]	; (deb0 <soc_secure_gpio_pin_mcu_select+0x48>)
    de98:	4909      	ldr	r1, [pc, #36]	; (dec0 <soc_secure_gpio_pin_mcu_select+0x58>)
    de9a:	4807      	ldr	r0, [pc, #28]	; (deb8 <soc_secure_gpio_pin_mcu_select+0x50>)
    de9c:	f018 fd41 	bl	26922 <assert_print>
    dea0:	9901      	ldr	r1, [sp, #4]
    dea2:	4808      	ldr	r0, [pc, #32]	; (dec4 <soc_secure_gpio_pin_mcu_select+0x5c>)
    dea4:	f018 fd3d 	bl	26922 <assert_print>
    dea8:	2117      	movs	r1, #23
    deaa:	e7ee      	b.n	de8a <soc_secure_gpio_pin_mcu_select+0x22>
}
    deac:	b002      	add	sp, #8
    deae:	bd10      	pop	{r4, pc}
    deb0:	0002e8a5 	.word	0x0002e8a5
    deb4:	0002e8df 	.word	0x0002e8df
    deb8:	0002d881 	.word	0x0002d881
    debc:	0002e8ff 	.word	0x0002e8ff
    dec0:	0002e919 	.word	0x0002e919
    dec4:	0002e925 	.word	0x0002e925

0000dec8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    dec8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    deca:	2200      	movs	r2, #0
{
    decc:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    dece:	490f      	ldr	r1, [pc, #60]	; (df0c <enable_logger+0x44>)
    ded0:	480f      	ldr	r0, [pc, #60]	; (df10 <enable_logger+0x48>)
    ded2:	f01d fc3a 	bl	2b74a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ded6:	2200      	movs	r2, #0
    ded8:	2300      	movs	r3, #0
    deda:	2400      	movs	r4, #0
    dedc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    dee0:	230e      	movs	r3, #14
    dee2:	4d0c      	ldr	r5, [pc, #48]	; (df14 <enable_logger+0x4c>)
    dee4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    dee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    deec:	4628      	mov	r0, r5
    deee:	e9cd 4401 	strd	r4, r4, [sp, #4]
    def2:	4b09      	ldr	r3, [pc, #36]	; (df18 <enable_logger+0x50>)
    def4:	4909      	ldr	r1, [pc, #36]	; (df1c <enable_logger+0x54>)
    def6:	9400      	str	r4, [sp, #0]
    def8:	f013 f968 	bl	211cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    defc:	4908      	ldr	r1, [pc, #32]	; (df20 <enable_logger+0x58>)
    defe:	4628      	mov	r0, r5
    df00:	f01d fb07 	bl	2b512 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    df04:	4620      	mov	r0, r4
    df06:	b009      	add	sp, #36	; 0x24
    df08:	bd30      	pop	{r4, r5, pc}
    df0a:	bf00      	nop
    df0c:	0000e069 	.word	0x0000e069
    df10:	200097c8 	.word	0x200097c8
    df14:	20009338 	.word	0x20009338
    df18:	0000e339 	.word	0x0000e339
    df1c:	20031750 	.word	0x20031750
    df20:	0002e93f 	.word	0x0002e93f

0000df24 <activate_foreach_backend>:
{
    df24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df28:	4604      	mov	r4, r0
	while (mask_cpy) {
    df2a:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    df2c:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    df30:	f8df 8050 	ldr.w	r8, [pc, #80]	; df84 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    df34:	b914      	cbnz	r4, df3c <activate_foreach_backend+0x18>
}
    df36:	4638      	mov	r0, r7
    df38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    df3c:	fa94 f5a4 	rbit	r5, r4
    df40:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    df44:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    df48:	012e      	lsls	r6, r5, #4
    df4a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    df4e:	ea6f 0a03 	mvn.w	sl, r3
    df52:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    df56:	7b2b      	ldrb	r3, [r5, #12]
    df58:	2b00      	cmp	r3, #0
    df5a:	d0eb      	beq.n	df34 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    df5c:	f858 3006 	ldr.w	r3, [r8, r6]
    df60:	691b      	ldr	r3, [r3, #16]
    df62:	b94b      	cbnz	r3, df78 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    df64:	4446      	add	r6, r8
			log_backend_enable(backend,
    df66:	6873      	ldr	r3, [r6, #4]
    df68:	2204      	movs	r2, #4
    df6a:	4628      	mov	r0, r5
    df6c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    df6e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    df72:	f000 fae7 	bl	e544 <log_backend_enable>
    df76:	e7dd      	b.n	df34 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    df78:	4628      	mov	r0, r5
    df7a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    df7c:	2800      	cmp	r0, #0
    df7e:	d1d9      	bne.n	df34 <activate_foreach_backend+0x10>
    df80:	e7f0      	b.n	df64 <activate_foreach_backend+0x40>
    df82:	bf00      	nop
    df84:	0002c914 	.word	0x0002c914

0000df88 <z_log_init>:
{
    df88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    df8c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; e048 <z_log_init+0xc0>
    df90:	4c2e      	ldr	r4, [pc, #184]	; (e04c <z_log_init+0xc4>)
    df92:	4680      	mov	r8, r0
    df94:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    df98:	2b9f      	cmp	r3, #159	; 0x9f
{
    df9a:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    df9c:	d90b      	bls.n	dfb6 <z_log_init+0x2e>
    df9e:	492c      	ldr	r1, [pc, #176]	; (e050 <z_log_init+0xc8>)
    dfa0:	f240 1315 	movw	r3, #277	; 0x115
    dfa4:	4a2b      	ldr	r2, [pc, #172]	; (e054 <z_log_init+0xcc>)
    dfa6:	482c      	ldr	r0, [pc, #176]	; (e058 <z_log_init+0xd0>)
    dfa8:	f018 fcbb 	bl	26922 <assert_print>
    dfac:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dfb0:	4828      	ldr	r0, [pc, #160]	; (e054 <z_log_init+0xcc>)
    dfb2:	f018 fcaf 	bl	26914 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    dfb6:	4829      	ldr	r0, [pc, #164]	; (e05c <z_log_init+0xd4>)
    dfb8:	f018 fde4 	bl	26b84 <atomic_inc>
    dfbc:	4606      	mov	r6, r0
    dfbe:	b360      	cbz	r0, e01a <z_log_init+0x92>
	uint32_t mask = 0;
    dfc0:	2500      	movs	r5, #0
}
    dfc2:	4628      	mov	r0, r5
    dfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    dfc8:	7b23      	ldrb	r3, [r4, #12]
    dfca:	b173      	cbz	r3, dfea <z_log_init+0x62>
	if (backend->api->init) {
    dfcc:	6823      	ldr	r3, [r4, #0]
    dfce:	68db      	ldr	r3, [r3, #12]
    dfd0:	b10b      	cbz	r3, dfd6 <z_log_init+0x4e>
		backend->api->init(backend);
    dfd2:	4620      	mov	r0, r4
    dfd4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    dfd6:	6823      	ldr	r3, [r4, #0]
    dfd8:	691b      	ldr	r3, [r3, #16]
    dfda:	b9b3      	cbnz	r3, e00a <z_log_init+0x82>
				log_backend_enable(backend,
    dfdc:	6863      	ldr	r3, [r4, #4]
    dfde:	2204      	movs	r2, #4
    dfe0:	4620      	mov	r0, r4
    dfe2:	6819      	ldr	r1, [r3, #0]
    dfe4:	f000 faae 	bl	e544 <log_backend_enable>
			i++;
    dfe8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dfea:	3410      	adds	r4, #16
    dfec:	454c      	cmp	r4, r9
    dfee:	d918      	bls.n	e022 <z_log_init+0x9a>
    dff0:	491b      	ldr	r1, [pc, #108]	; (e060 <z_log_init+0xd8>)
    dff2:	f44f 7391 	mov.w	r3, #290	; 0x122
    dff6:	4a17      	ldr	r2, [pc, #92]	; (e054 <z_log_init+0xcc>)
    dff8:	4817      	ldr	r0, [pc, #92]	; (e058 <z_log_init+0xd0>)
    dffa:	f018 fc92 	bl	26922 <assert_print>
    dffe:	4819      	ldr	r0, [pc, #100]	; (e064 <z_log_init+0xdc>)
    e000:	f018 fc8f 	bl	26922 <assert_print>
    e004:	f44f 7191 	mov.w	r1, #290	; 0x122
    e008:	e7d2      	b.n	dfb0 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    e00a:	4620      	mov	r0, r4
    e00c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    e00e:	2800      	cmp	r0, #0
    e010:	d0e4      	beq.n	dfdc <z_log_init+0x54>
				mask |= BIT(i);
    e012:	fa0a f306 	lsl.w	r3, sl, r6
    e016:	431d      	orrs	r5, r3
    e018:	e7e6      	b.n	dfe8 <z_log_init+0x60>
	uint32_t mask = 0;
    e01a:	4605      	mov	r5, r0
				mask |= BIT(i);
    e01c:	f04f 0a01 	mov.w	sl, #1
    e020:	e7e4      	b.n	dfec <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e022:	d3d1      	bcc.n	dfc8 <z_log_init+0x40>
	if (blocking) {
    e024:	f1b8 0f00 	cmp.w	r8, #0
    e028:	d0cb      	beq.n	dfc2 <z_log_init+0x3a>
		while (mask) {
    e02a:	2d00      	cmp	r5, #0
    e02c:	d0c8      	beq.n	dfc0 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    e02e:	4628      	mov	r0, r5
    e030:	f7ff ff78 	bl	df24 <activate_foreach_backend>
    e034:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    e036:	2f00      	cmp	r7, #0
    e038:	d0f7      	beq.n	e02a <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    e03a:	2100      	movs	r1, #0
    e03c:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e040:	f015 fb3a 	bl	236b8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    e044:	e7f1      	b.n	e02a <z_log_init+0xa2>
    e046:	bf00      	nop
    e048:	0002c924 	.word	0x0002c924
    e04c:	0002c914 	.word	0x0002c914
    e050:	0002e974 	.word	0x0002e974
    e054:	0002e947 	.word	0x0002e947
    e058:	0002d881 	.word	0x0002d881
    e05c:	20021564 	.word	0x20021564
    e060:	0002e998 	.word	0x0002e998
    e064:	0002e9b9 	.word	0x0002e9b9

0000e068 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    e068:	4801      	ldr	r0, [pc, #4]	; (e070 <log_process_thread_timer_expiry_fn+0x8>)
    e06a:	f013 bc31 	b.w	218d0 <z_impl_k_sem_give>
    e06e:	bf00      	nop
    e070:	20008d14 	.word	0x20008d14

0000e074 <log_format_func_t_get>:
}
    e074:	4b01      	ldr	r3, [pc, #4]	; (e07c <log_format_func_t_get+0x8>)
    e076:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e07a:	4770      	bx	lr
    e07c:	0002ce5c 	.word	0x0002ce5c

0000e080 <log_set_timestamp_func>:
{
    e080:	b508      	push	{r3, lr}
    e082:	4603      	mov	r3, r0
    e084:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    e086:	b12b      	cbz	r3, e094 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    e088:	4a04      	ldr	r2, [pc, #16]	; (e09c <log_set_timestamp_func+0x1c>)
    e08a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    e08c:	f000 fcfc 	bl	ea88 <log_output_timestamp_freq_set>
	return 0;
    e090:	2000      	movs	r0, #0
}
    e092:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e094:	f06f 0015 	mvn.w	r0, #21
    e098:	e7fb      	b.n	e092 <log_set_timestamp_func+0x12>
    e09a:	bf00      	nop
    e09c:	20008588 	.word	0x20008588

0000e0a0 <z_log_notify_backend_enabled>:
{
    e0a0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    e0a2:	4c04      	ldr	r4, [pc, #16]	; (e0b4 <z_log_notify_backend_enabled+0x14>)
    e0a4:	7823      	ldrb	r3, [r4, #0]
    e0a6:	b913      	cbnz	r3, e0ae <z_log_notify_backend_enabled+0xe>
    e0a8:	4803      	ldr	r0, [pc, #12]	; (e0b8 <z_log_notify_backend_enabled+0x18>)
    e0aa:	f013 fc11 	bl	218d0 <z_impl_k_sem_give>
	backend_attached = true;
    e0ae:	2301      	movs	r3, #1
    e0b0:	7023      	strb	r3, [r4, #0]
}
    e0b2:	bd10      	pop	{r4, pc}
    e0b4:	200223d2 	.word	0x200223d2
    e0b8:	20008d14 	.word	0x20008d14

0000e0bc <z_log_dropped>:
{
    e0bc:	b510      	push	{r4, lr}
    e0be:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    e0c0:	4806      	ldr	r0, [pc, #24]	; (e0dc <z_log_dropped+0x20>)
    e0c2:	f018 fd5f 	bl	26b84 <atomic_inc>
	if (buffered) {
    e0c6:	b13c      	cbz	r4, e0d8 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e0c8:	4b05      	ldr	r3, [pc, #20]	; (e0e0 <z_log_dropped+0x24>)
    e0ca:	e8d3 1fef 	ldaex	r1, [r3]
    e0ce:	3901      	subs	r1, #1
    e0d0:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e0d4:	2a00      	cmp	r2, #0
    e0d6:	d1f8      	bne.n	e0ca <z_log_dropped+0xe>
}
    e0d8:	bd10      	pop	{r4, pc}
    e0da:	bf00      	nop
    e0dc:	2002155c 	.word	0x2002155c
    e0e0:	20021560 	.word	0x20021560

0000e0e4 <z_log_dropped_read_and_clear>:
}
    e0e4:	2000      	movs	r0, #0
    e0e6:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e0e8:	4b03      	ldr	r3, [pc, #12]	; (e0f8 <z_log_dropped_read_and_clear+0x14>)
    e0ea:	e8d3 0fef 	ldaex	r0, [r3]
    e0ee:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e0f2:	2a00      	cmp	r2, #0
    e0f4:	d1f9      	bne.n	e0ea <z_log_dropped_read_and_clear+0x6>
    e0f6:	4770      	bx	lr
    e0f8:	2002155c 	.word	0x2002155c

0000e0fc <dropped_notify>:
{
    e0fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    e0fe:	f7ff fff1 	bl	e0e4 <z_log_dropped_read_and_clear>
    e102:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e104:	4c0f      	ldr	r4, [pc, #60]	; (e144 <dropped_notify+0x48>)
    e106:	4e10      	ldr	r6, [pc, #64]	; (e148 <dropped_notify+0x4c>)
    e108:	42b4      	cmp	r4, r6
    e10a:	d919      	bls.n	e140 <dropped_notify+0x44>
    e10c:	490f      	ldr	r1, [pc, #60]	; (e14c <dropped_notify+0x50>)
    e10e:	f240 13cd 	movw	r3, #461	; 0x1cd
    e112:	4a0f      	ldr	r2, [pc, #60]	; (e150 <dropped_notify+0x54>)
    e114:	480f      	ldr	r0, [pc, #60]	; (e154 <dropped_notify+0x58>)
    e116:	f018 fc04 	bl	26922 <assert_print>
    e11a:	480f      	ldr	r0, [pc, #60]	; (e158 <dropped_notify+0x5c>)
    e11c:	f018 fc01 	bl	26922 <assert_print>
    e120:	f240 11cd 	movw	r1, #461	; 0x1cd
    e124:	480a      	ldr	r0, [pc, #40]	; (e150 <dropped_notify+0x54>)
    e126:	f018 fbf5 	bl	26914 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e12a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e12c:	795b      	ldrb	r3, [r3, #5]
    e12e:	b12b      	cbz	r3, e13c <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    e130:	6823      	ldr	r3, [r4, #0]
    e132:	685b      	ldr	r3, [r3, #4]
    e134:	b113      	cbz	r3, e13c <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    e136:	4629      	mov	r1, r5
    e138:	4620      	mov	r0, r4
    e13a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e13c:	3410      	adds	r4, #16
    e13e:	e7e3      	b.n	e108 <dropped_notify+0xc>
    e140:	d3f3      	bcc.n	e12a <dropped_notify+0x2e>
}
    e142:	bd70      	pop	{r4, r5, r6, pc}
    e144:	0002c914 	.word	0x0002c914
    e148:	0002c924 	.word	0x0002c924
    e14c:	0002e998 	.word	0x0002e998
    e150:	0002e947 	.word	0x0002e947
    e154:	0002d881 	.word	0x0002d881
    e158:	0002e9b9 	.word	0x0002e9b9

0000e15c <z_log_msg_init>:
{
    e15c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    e15e:	4c04      	ldr	r4, [pc, #16]	; (e170 <z_log_msg_init+0x14>)
    e160:	4904      	ldr	r1, [pc, #16]	; (e174 <z_log_msg_init+0x18>)
    e162:	4620      	mov	r0, r4
    e164:	f7ff face 	bl	d704 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    e168:	4b03      	ldr	r3, [pc, #12]	; (e178 <z_log_msg_init+0x1c>)
    e16a:	601c      	str	r4, [r3, #0]
}
    e16c:	bd10      	pop	{r4, pc}
    e16e:	bf00      	nop
    e170:	20008b7c 	.word	0x20008b7c
    e174:	0002ce48 	.word	0x0002ce48
    e178:	20021554 	.word	0x20021554

0000e17c <log_core_init>:
{
    e17c:	b508      	push	{r3, lr}
	panic_mode = false;
    e17e:	2300      	movs	r3, #0
    e180:	4a06      	ldr	r2, [pc, #24]	; (e19c <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    e182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    e186:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    e188:	4a05      	ldr	r2, [pc, #20]	; (e1a0 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    e18a:	4806      	ldr	r0, [pc, #24]	; (e1a4 <log_core_init+0x28>)
	dropped_cnt = 0;
    e18c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    e18e:	f7ff ff77 	bl	e080 <log_set_timestamp_func>
}
    e192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    e196:	f7ff bfe1 	b.w	e15c <z_log_msg_init>
    e19a:	bf00      	nop
    e19c:	200223d3 	.word	0x200223d3
    e1a0:	2002155c 	.word	0x2002155c
    e1a4:	00026b81 	.word	0x00026b81

0000e1a8 <z_log_msg_alloc>:
{
    e1a8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    e1aa:	2200      	movs	r2, #0
    e1ac:	2300      	movs	r3, #0
    e1ae:	4801      	ldr	r0, [pc, #4]	; (e1b4 <z_log_msg_alloc+0xc>)
    e1b0:	f7ff bada 	b.w	d768 <mpsc_pbuf_alloc>
    e1b4:	20008b7c 	.word	0x20008b7c

0000e1b8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    e1b8:	4801      	ldr	r0, [pc, #4]	; (e1c0 <z_log_msg_local_claim+0x8>)
    e1ba:	f7ff bbe9 	b.w	d990 <mpsc_pbuf_claim>
    e1be:	bf00      	nop
    e1c0:	20008b7c 	.word	0x20008b7c

0000e1c4 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    e1c4:	4b02      	ldr	r3, [pc, #8]	; (e1d0 <z_log_msg_free+0xc>)
{
    e1c6:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    e1c8:	6818      	ldr	r0, [r3, #0]
    e1ca:	f7ff bc67 	b.w	da9c <mpsc_pbuf_free>
    e1ce:	bf00      	nop
    e1d0:	20021554 	.word	0x20021554

0000e1d4 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    e1d4:	4801      	ldr	r0, [pc, #4]	; (e1dc <z_log_msg_pending+0x8>)
    e1d6:	f018 bc5e 	b.w	26a96 <mpsc_pbuf_is_pending>
    e1da:	bf00      	nop
    e1dc:	20008b7c 	.word	0x20008b7c

0000e1e0 <z_impl_log_process>:
{
    e1e0:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    e1e2:	4b2e      	ldr	r3, [pc, #184]	; (e29c <z_impl_log_process+0xbc>)
    e1e4:	7818      	ldrb	r0, [r3, #0]
    e1e6:	2800      	cmp	r0, #0
    e1e8:	d057      	beq.n	e29a <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    e1ea:	f7ff ffe5 	bl	e1b8 <z_log_msg_local_claim>
	if (msg) {
    e1ee:	4605      	mov	r5, r0
    e1f0:	b340      	cbz	r0, e244 <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e1f2:	4b2b      	ldr	r3, [pc, #172]	; (e2a0 <z_impl_log_process+0xc0>)
    e1f4:	e8d3 1fef 	ldaex	r1, [r3]
    e1f8:	3901      	subs	r1, #1
    e1fa:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e1fe:	2a00      	cmp	r2, #0
    e200:	d1f8      	bne.n	e1f4 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e202:	4c28      	ldr	r4, [pc, #160]	; (e2a4 <z_impl_log_process+0xc4>)
    e204:	4e28      	ldr	r6, [pc, #160]	; (e2a8 <z_impl_log_process+0xc8>)
    e206:	42b4      	cmp	r4, r6
    e208:	d918      	bls.n	e23c <z_impl_log_process+0x5c>
    e20a:	4928      	ldr	r1, [pc, #160]	; (e2ac <z_impl_log_process+0xcc>)
    e20c:	f240 13c1 	movw	r3, #449	; 0x1c1
    e210:	4a27      	ldr	r2, [pc, #156]	; (e2b0 <z_impl_log_process+0xd0>)
    e212:	4828      	ldr	r0, [pc, #160]	; (e2b4 <z_impl_log_process+0xd4>)
    e214:	f018 fb85 	bl	26922 <assert_print>
    e218:	4827      	ldr	r0, [pc, #156]	; (e2b8 <z_impl_log_process+0xd8>)
    e21a:	f018 fb82 	bl	26922 <assert_print>
    e21e:	f240 11c1 	movw	r1, #449	; 0x1c1
    e222:	4823      	ldr	r0, [pc, #140]	; (e2b0 <z_impl_log_process+0xd0>)
    e224:	f018 fb76 	bl	26914 <assert_post_action>
	return backend->cb->active;
    e228:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    e22a:	795b      	ldrb	r3, [r3, #5]
    e22c:	b123      	cbz	r3, e238 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    e22e:	6823      	ldr	r3, [r4, #0]
    e230:	4629      	mov	r1, r5
    e232:	4620      	mov	r0, r4
    e234:	681b      	ldr	r3, [r3, #0]
    e236:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e238:	3410      	adds	r4, #16
    e23a:	e7e4      	b.n	e206 <z_impl_log_process+0x26>
    e23c:	d3f4      	bcc.n	e228 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    e23e:	4628      	mov	r0, r5
    e240:	f7ff ffc0 	bl	e1c4 <z_log_msg_free>
	return dropped_cnt > 0;
    e244:	4b1d      	ldr	r3, [pc, #116]	; (e2bc <z_impl_log_process+0xdc>)
    e246:	4c1e      	ldr	r4, [pc, #120]	; (e2c0 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    e248:	681b      	ldr	r3, [r3, #0]
    e24a:	2b00      	cmp	r3, #0
    e24c:	dd19      	ble.n	e282 <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    e24e:	f01d fa54 	bl	2b6fa <z_impl_k_uptime_ticks>
    e252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e256:	fba0 0302 	umull	r0, r3, r0, r2
    e25a:	fb02 3101 	mla	r1, r2, r1, r3
    e25e:	0bc3      	lsrs	r3, r0, #15
    e260:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e264:	e9d4 2000 	ldrd	r2, r0, [r4]
    e268:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    e26a:	f240 32e9 	movw	r2, #1001	; 0x3e9
    e26e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e272:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    e276:	4293      	cmp	r3, r2
    e278:	f171 0100 	sbcs.w	r1, r1, #0
    e27c:	d301      	bcc.n	e282 <z_impl_log_process+0xa2>
				dropped_notify();
    e27e:	f7ff ff3d 	bl	e0fc <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    e282:	e9d4 3200 	ldrd	r3, r2, [r4]
    e286:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    e28a:	f142 0200 	adc.w	r2, r2, #0
    e28e:	e9c4 3200 	strd	r3, r2, [r4]
}
    e292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    e296:	f7ff bf9d 	b.w	e1d4 <z_log_msg_pending>
}
    e29a:	bd70      	pop	{r4, r5, r6, pc}
    e29c:	200223d2 	.word	0x200223d2
    e2a0:	20021560 	.word	0x20021560
    e2a4:	0002c914 	.word	0x0002c914
    e2a8:	0002c924 	.word	0x0002c924
    e2ac:	0002e998 	.word	0x0002e998
    e2b0:	0002e947 	.word	0x0002e947
    e2b4:	0002d881 	.word	0x0002d881
    e2b8:	0002e9b9 	.word	0x0002e9b9
    e2bc:	2002155c 	.word	0x2002155c
    e2c0:	200097c0 	.word	0x200097c0

0000e2c4 <z_impl_log_panic>:
{
    e2c4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    e2c6:	4d15      	ldr	r5, [pc, #84]	; (e31c <z_impl_log_panic+0x58>)
    e2c8:	7829      	ldrb	r1, [r5, #0]
    e2ca:	bb29      	cbnz	r1, e318 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    e2cc:	2001      	movs	r0, #1
    e2ce:	f7ff fe5b 	bl	df88 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2d2:	4c13      	ldr	r4, [pc, #76]	; (e320 <z_impl_log_panic+0x5c>)
    e2d4:	4e13      	ldr	r6, [pc, #76]	; (e324 <z_impl_log_panic+0x60>)
    e2d6:	42b4      	cmp	r4, r6
    e2d8:	d917      	bls.n	e30a <z_impl_log_panic+0x46>
    e2da:	4913      	ldr	r1, [pc, #76]	; (e328 <z_impl_log_panic+0x64>)
    e2dc:	f44f 73c2 	mov.w	r3, #388	; 0x184
    e2e0:	4a12      	ldr	r2, [pc, #72]	; (e32c <z_impl_log_panic+0x68>)
    e2e2:	4813      	ldr	r0, [pc, #76]	; (e330 <z_impl_log_panic+0x6c>)
    e2e4:	f018 fb1d 	bl	26922 <assert_print>
    e2e8:	4812      	ldr	r0, [pc, #72]	; (e334 <z_impl_log_panic+0x70>)
    e2ea:	f018 fb1a 	bl	26922 <assert_print>
    e2ee:	f44f 71c2 	mov.w	r1, #388	; 0x184
    e2f2:	480e      	ldr	r0, [pc, #56]	; (e32c <z_impl_log_panic+0x68>)
    e2f4:	f018 fb0e 	bl	26914 <assert_post_action>
	return backend->cb->active;
    e2f8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e2fa:	795b      	ldrb	r3, [r3, #5]
    e2fc:	b11b      	cbz	r3, e306 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    e2fe:	6823      	ldr	r3, [r4, #0]
    e300:	4620      	mov	r0, r4
    e302:	689b      	ldr	r3, [r3, #8]
    e304:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e306:	3410      	adds	r4, #16
    e308:	e7e5      	b.n	e2d6 <z_impl_log_panic+0x12>
    e30a:	d3f5      	bcc.n	e2f8 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    e30c:	f7ff ff68 	bl	e1e0 <z_impl_log_process>
		while (log_process() == true) {
    e310:	2800      	cmp	r0, #0
    e312:	d1fb      	bne.n	e30c <z_impl_log_panic+0x48>
	panic_mode = true;
    e314:	2301      	movs	r3, #1
    e316:	702b      	strb	r3, [r5, #0]
}
    e318:	bd70      	pop	{r4, r5, r6, pc}
    e31a:	bf00      	nop
    e31c:	200223d3 	.word	0x200223d3
    e320:	0002c914 	.word	0x0002c914
    e324:	0002c924 	.word	0x0002c924
    e328:	0002e998 	.word	0x0002e998
    e32c:	0002e947 	.word	0x0002e947
    e330:	0002d881 	.word	0x0002d881
    e334:	0002e9b9 	.word	0x0002e9b9

0000e338 <log_process_thread_func>:
{
    e338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e33c:	4b2f      	ldr	r3, [pc, #188]	; (e3fc <log_process_thread_func+0xc4>)
    e33e:	4f30      	ldr	r7, [pc, #192]	; (e400 <log_process_thread_func+0xc8>)
    e340:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    e342:	091b      	lsrs	r3, r3, #4
    e344:	d10b      	bne.n	e35e <log_process_thread_func+0x26>
    e346:	492f      	ldr	r1, [pc, #188]	; (e404 <log_process_thread_func+0xcc>)
    e348:	f240 3347 	movw	r3, #839	; 0x347
    e34c:	4a2e      	ldr	r2, [pc, #184]	; (e408 <log_process_thread_func+0xd0>)
    e34e:	482f      	ldr	r0, [pc, #188]	; (e40c <log_process_thread_func+0xd4>)
    e350:	f018 fae7 	bl	26922 <assert_print>
    e354:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e358:	482b      	ldr	r0, [pc, #172]	; (e408 <log_process_thread_func+0xd0>)
    e35a:	f018 fadb 	bl	26914 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    e35e:	2100      	movs	r1, #0
    e360:	4608      	mov	r0, r1
    e362:	f7ff fe11 	bl	df88 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e366:	4604      	mov	r4, r0
    e368:	b340      	cbz	r0, e3bc <log_process_thread_func+0x84>
    e36a:	f240 6867 	movw	r8, #1639	; 0x667
    e36e:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    e372:	f015 f9d5 	bl	23720 <z_impl_z_current_get>
	proc_tid = process_tid;
    e376:	4b26      	ldr	r3, [pc, #152]	; (e410 <log_process_thread_func+0xd8>)
    e378:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e37a:	b130      	cbz	r0, e38a <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    e37c:	4b25      	ldr	r3, [pc, #148]	; (e414 <log_process_thread_func+0xdc>)
	    process_tid &&
    e37e:	681b      	ldr	r3, [r3, #0]
    e380:	2b09      	cmp	r3, #9
    e382:	dd02      	ble.n	e38a <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    e384:	4824      	ldr	r0, [pc, #144]	; (e418 <log_process_thread_func+0xe0>)
    e386:	f013 faa3 	bl	218d0 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e38a:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    e38c:	f8df a088 	ldr.w	sl, [pc, #136]	; e418 <log_process_thread_func+0xe0>
		if (activate_mask) {
    e390:	b144      	cbz	r4, e3a4 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    e392:	4620      	mov	r0, r4
    e394:	f7ff fdc6 	bl	df24 <activate_foreach_backend>
			if (!activate_mask) {
    e398:	4604      	mov	r4, r0
    e39a:	b918      	cbnz	r0, e3a4 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    e39c:	f04f 38ff 	mov.w	r8, #4294967295
    e3a0:	f04f 39ff 	mov.w	r9, #4294967295
    e3a4:	f7ff ff1c 	bl	e1e0 <z_impl_log_process>
		if (log_process() == false) {
    e3a8:	4606      	mov	r6, r0
    e3aa:	b928      	cbnz	r0, e3b8 <log_process_thread_func+0x80>
			if (processed_any) {
    e3ac:	b95d      	cbnz	r5, e3c6 <log_process_thread_func+0x8e>
    e3ae:	4642      	mov	r2, r8
    e3b0:	464b      	mov	r3, r9
    e3b2:	4650      	mov	r0, sl
    e3b4:	f013 fad0 	bl	21958 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e3b8:	4635      	mov	r5, r6
    e3ba:	e7e9      	b.n	e390 <log_process_thread_func+0x58>
    e3bc:	f04f 38ff 	mov.w	r8, #4294967295
    e3c0:	f04f 39ff 	mov.w	r9, #4294967295
    e3c4:	e7d5      	b.n	e372 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e3c6:	4d0d      	ldr	r5, [pc, #52]	; (e3fc <log_process_thread_func+0xc4>)
    e3c8:	e008      	b.n	e3dc <log_process_thread_func+0xa4>
    e3ca:	d2f0      	bcs.n	e3ae <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    e3cc:	682b      	ldr	r3, [r5, #0]
    e3ce:	699b      	ldr	r3, [r3, #24]
    e3d0:	b11b      	cbz	r3, e3da <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    e3d2:	2200      	movs	r2, #0
    e3d4:	4628      	mov	r0, r5
    e3d6:	4611      	mov	r1, r2
    e3d8:	4798      	blx	r3
    e3da:	3510      	adds	r5, #16
    e3dc:	42bd      	cmp	r5, r7
    e3de:	d9f4      	bls.n	e3ca <log_process_thread_func+0x92>
    e3e0:	490e      	ldr	r1, [pc, #56]	; (e41c <log_process_thread_func+0xe4>)
    e3e2:	f240 333b 	movw	r3, #827	; 0x33b
    e3e6:	4a08      	ldr	r2, [pc, #32]	; (e408 <log_process_thread_func+0xd0>)
    e3e8:	4808      	ldr	r0, [pc, #32]	; (e40c <log_process_thread_func+0xd4>)
    e3ea:	f018 fa9a 	bl	26922 <assert_print>
    e3ee:	480c      	ldr	r0, [pc, #48]	; (e420 <log_process_thread_func+0xe8>)
    e3f0:	f018 fa97 	bl	26922 <assert_print>
    e3f4:	f240 313b 	movw	r1, #827	; 0x33b
    e3f8:	e7ae      	b.n	e358 <log_process_thread_func+0x20>
    e3fa:	bf00      	nop
    e3fc:	0002c914 	.word	0x0002c914
    e400:	0002c924 	.word	0x0002c924
    e404:	0002e9d8 	.word	0x0002e9d8
    e408:	0002e947 	.word	0x0002e947
    e40c:	0002d881 	.word	0x0002d881
    e410:	20021558 	.word	0x20021558
    e414:	20021560 	.word	0x20021560
    e418:	20008d14 	.word	0x20008d14
    e41c:	0002e998 	.word	0x0002e998
    e420:	0002e9b9 	.word	0x0002e9b9

0000e424 <z_log_msg_post_finalize>:
{
    e424:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    e426:	482b      	ldr	r0, [pc, #172]	; (e4d4 <z_log_msg_post_finalize+0xb0>)
    e428:	f018 fbac 	bl	26b84 <atomic_inc>
	if (panic_mode) {
    e42c:	4b2a      	ldr	r3, [pc, #168]	; (e4d8 <z_log_msg_post_finalize+0xb4>)
    e42e:	781b      	ldrb	r3, [r3, #0]
    e430:	2b00      	cmp	r3, #0
    e432:	d034      	beq.n	e49e <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    e434:	f04f 0320 	mov.w	r3, #32
    e438:	f3ef 8411 	mrs	r4, BASEPRI
    e43c:	f383 8812 	msr	BASEPRI_MAX, r3
    e440:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e444:	4825      	ldr	r0, [pc, #148]	; (e4dc <z_log_msg_post_finalize+0xb8>)
    e446:	f012 ff8b 	bl	21360 <z_spin_lock_valid>
    e44a:	b968      	cbnz	r0, e468 <z_log_msg_post_finalize+0x44>
    e44c:	2394      	movs	r3, #148	; 0x94
    e44e:	4a24      	ldr	r2, [pc, #144]	; (e4e0 <z_log_msg_post_finalize+0xbc>)
    e450:	4924      	ldr	r1, [pc, #144]	; (e4e4 <z_log_msg_post_finalize+0xc0>)
    e452:	4825      	ldr	r0, [pc, #148]	; (e4e8 <z_log_msg_post_finalize+0xc4>)
    e454:	f018 fa65 	bl	26922 <assert_print>
    e458:	4920      	ldr	r1, [pc, #128]	; (e4dc <z_log_msg_post_finalize+0xb8>)
    e45a:	4824      	ldr	r0, [pc, #144]	; (e4ec <z_log_msg_post_finalize+0xc8>)
    e45c:	f018 fa61 	bl	26922 <assert_print>
    e460:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e462:	481f      	ldr	r0, [pc, #124]	; (e4e0 <z_log_msg_post_finalize+0xbc>)
    e464:	f018 fa56 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
    e468:	481c      	ldr	r0, [pc, #112]	; (e4dc <z_log_msg_post_finalize+0xb8>)
    e46a:	f012 ff95 	bl	21398 <z_spin_lock_set_owner>
    e46e:	f7ff feb7 	bl	e1e0 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e472:	481a      	ldr	r0, [pc, #104]	; (e4dc <z_log_msg_post_finalize+0xb8>)
    e474:	f012 ff82 	bl	2137c <z_spin_unlock_valid>
    e478:	b958      	cbnz	r0, e492 <z_log_msg_post_finalize+0x6e>
    e47a:	23c2      	movs	r3, #194	; 0xc2
    e47c:	4a18      	ldr	r2, [pc, #96]	; (e4e0 <z_log_msg_post_finalize+0xbc>)
    e47e:	491c      	ldr	r1, [pc, #112]	; (e4f0 <z_log_msg_post_finalize+0xcc>)
    e480:	4819      	ldr	r0, [pc, #100]	; (e4e8 <z_log_msg_post_finalize+0xc4>)
    e482:	f018 fa4e 	bl	26922 <assert_print>
    e486:	4915      	ldr	r1, [pc, #84]	; (e4dc <z_log_msg_post_finalize+0xb8>)
    e488:	481a      	ldr	r0, [pc, #104]	; (e4f4 <z_log_msg_post_finalize+0xd0>)
    e48a:	f018 fa4a 	bl	26922 <assert_print>
    e48e:	21c2      	movs	r1, #194	; 0xc2
    e490:	e7e7      	b.n	e462 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    e492:	f384 8811 	msr	BASEPRI, r4
    e496:	f3bf 8f6f 	isb	sy
}
    e49a:	b002      	add	sp, #8
    e49c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    e49e:	4b16      	ldr	r3, [pc, #88]	; (e4f8 <z_log_msg_post_finalize+0xd4>)
    e4a0:	681b      	ldr	r3, [r3, #0]
    e4a2:	2b00      	cmp	r3, #0
    e4a4:	d0f9      	beq.n	e49a <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    e4a6:	b950      	cbnz	r0, e4be <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    e4a8:	2200      	movs	r2, #0
    e4aa:	2300      	movs	r3, #0
    e4ac:	4813      	ldr	r0, [pc, #76]	; (e4fc <z_log_msg_post_finalize+0xd8>)
    e4ae:	e9cd 2300 	strd	r2, r3, [sp]
    e4b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e4b6:	2300      	movs	r3, #0
    e4b8:	f015 fe1c 	bl	240f4 <z_impl_k_timer_start>
    e4bc:	e7ed      	b.n	e49a <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e4be:	280a      	cmp	r0, #10
    e4c0:	d1eb      	bne.n	e49a <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    e4c2:	480e      	ldr	r0, [pc, #56]	; (e4fc <z_log_msg_post_finalize+0xd8>)
    e4c4:	f01d f94d 	bl	2b762 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    e4c8:	480d      	ldr	r0, [pc, #52]	; (e500 <z_log_msg_post_finalize+0xdc>)
}
    e4ca:	b002      	add	sp, #8
    e4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4d0:	f013 b9fe 	b.w	218d0 <z_impl_k_sem_give>
    e4d4:	20021560 	.word	0x20021560
    e4d8:	200223d3 	.word	0x200223d3
    e4dc:	20021550 	.word	0x20021550
    e4e0:	0002e6ba 	.word	0x0002e6ba
    e4e4:	0002e713 	.word	0x0002e713
    e4e8:	0002d881 	.word	0x0002d881
    e4ec:	0002e728 	.word	0x0002e728
    e4f0:	0002e6e7 	.word	0x0002e6e7
    e4f4:	0002e6fe 	.word	0x0002e6fe
    e4f8:	20021558 	.word	0x20021558
    e4fc:	200097c8 	.word	0x200097c8
    e500:	20008d14 	.word	0x20008d14

0000e504 <z_log_msg_commit>:
{
    e504:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    e506:	4b06      	ldr	r3, [pc, #24]	; (e520 <z_log_msg_commit+0x1c>)
{
    e508:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    e50a:	681b      	ldr	r3, [r3, #0]
    e50c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    e50e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    e510:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    e512:	4804      	ldr	r0, [pc, #16]	; (e524 <z_log_msg_commit+0x20>)
    e514:	f7ff f9e6 	bl	d8e4 <mpsc_pbuf_commit>
}
    e518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    e51c:	f7ff bf82 	b.w	e424 <z_log_msg_post_finalize>
    e520:	20008588 	.word	0x20008588
    e524:	20008b7c 	.word	0x20008b7c

0000e528 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    e528:	4a04      	ldr	r2, [pc, #16]	; (e53c <log_source_name_get+0x14>)
    e52a:	4b05      	ldr	r3, [pc, #20]	; (e540 <log_source_name_get+0x18>)
    e52c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    e52e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    e532:	bf34      	ite	cc
    e534:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    e538:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    e53a:	4770      	bx	lr
    e53c:	0002c7ac 	.word	0x0002c7ac
    e540:	0002c914 	.word	0x0002c914

0000e544 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e544:	4b0e      	ldr	r3, [pc, #56]	; (e580 <log_backend_enable+0x3c>)
{
    e546:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    e548:	1ac3      	subs	r3, r0, r3
    e54a:	111b      	asrs	r3, r3, #4
    e54c:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    e54e:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    e550:	b948      	cbnz	r0, e566 <log_backend_enable+0x22>
    e552:	490c      	ldr	r1, [pc, #48]	; (e584 <log_backend_enable+0x40>)
    e554:	480c      	ldr	r0, [pc, #48]	; (e588 <log_backend_enable+0x44>)
    e556:	23de      	movs	r3, #222	; 0xde
    e558:	4a0c      	ldr	r2, [pc, #48]	; (e58c <log_backend_enable+0x48>)
    e55a:	f018 f9e2 	bl	26922 <assert_print>
    e55e:	21de      	movs	r1, #222	; 0xde
    e560:	480a      	ldr	r0, [pc, #40]	; (e58c <log_backend_enable+0x48>)
    e562:	f018 f9d7 	bl	26914 <assert_post_action>
	backend->cb->id = id;
    e566:	6844      	ldr	r4, [r0, #4]
    e568:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    e56a:	6843      	ldr	r3, [r0, #4]
    e56c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    e56e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    e570:	6843      	ldr	r3, [r0, #4]
    e572:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    e574:	6843      	ldr	r3, [r0, #4]
    e576:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    e578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    e57c:	f7ff bd90 	b.w	e0a0 <z_log_notify_backend_enabled>
    e580:	0002c914 	.word	0x0002c914
    e584:	0002ea78 	.word	0x0002ea78
    e588:	0002d881 	.word	0x0002d881
    e58c:	0002ea40 	.word	0x0002ea40

0000e590 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    e590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    e594:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    e598:	b08f      	sub	sp, #60	; 0x3c
    e59a:	f3c1 2649 	ubfx	r6, r1, #9, #10
    e59e:	460d      	mov	r5, r1
    e5a0:	4690      	mov	r8, r2
    e5a2:	4699      	mov	r9, r3
    e5a4:	9005      	str	r0, [sp, #20]
    e5a6:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    e5a8:	2e00      	cmp	r6, #0
    e5aa:	d03d      	beq.n	e628 <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
    e5ac:	f04f 0b04 	mov.w	fp, #4
    e5b0:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    e5b4:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    e5b6:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    e5b8:	4631      	mov	r1, r6
    e5ba:	ab0b      	add	r3, sp, #44	; 0x2c
    e5bc:	4640      	mov	r0, r8
    e5be:	f8cd b008 	str.w	fp, [sp, #8]
    e5c2:	9701      	str	r7, [sp, #4]
    e5c4:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    e5c8:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    e5cc:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e5ce:	9607      	str	r6, [sp, #28]
    e5d0:	f7fd fdfc 	bl	c1cc <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    e5d4:	f3c0 0309 	ubfx	r3, r0, #0, #10
    e5d8:	1918      	adds	r0, r3, r4
    e5da:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e5de:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    e5e0:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e5e2:	f363 2552 	bfi	r5, r3, #9, #10
    e5e6:	9306      	str	r3, [sp, #24]
    e5e8:	f7ff fdde 	bl	e1a8 <z_log_msg_alloc>
		if (msg) {
    e5ec:	4604      	mov	r4, r0
    e5ee:	b308      	cbz	r0, e634 <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
    e5f0:	2200      	movs	r2, #0
    e5f2:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    e5f4:	3010      	adds	r0, #16
    e5f6:	900b      	str	r0, [sp, #44]	; 0x2c
    e5f8:	930c      	str	r3, [sp, #48]	; 0x30
    e5fa:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e5fc:	4640      	mov	r0, r8
    e5fe:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    e602:	4a12      	ldr	r2, [pc, #72]	; (e64c <z_impl_z_log_msg_static_create+0xbc>)
    e604:	9907      	ldr	r1, [sp, #28]
    e606:	f8cd a000 	str.w	sl, [sp]
    e60a:	ab0b      	add	r3, sp, #44	; 0x2c
    e60c:	f7fd fdde 	bl	c1cc <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    e610:	2800      	cmp	r0, #0
    e612:	da0f      	bge.n	e634 <z_impl_z_log_msg_static_create+0xa4>
    e614:	490e      	ldr	r1, [pc, #56]	; (e650 <z_impl_z_log_msg_static_create+0xc0>)
    e616:	480f      	ldr	r0, [pc, #60]	; (e654 <z_impl_z_log_msg_static_create+0xc4>)
    e618:	2349      	movs	r3, #73	; 0x49
    e61a:	4a0f      	ldr	r2, [pc, #60]	; (e658 <z_impl_z_log_msg_static_create+0xc8>)
    e61c:	f018 f981 	bl	26922 <assert_print>
    e620:	2149      	movs	r1, #73	; 0x49
    e622:	480d      	ldr	r0, [pc, #52]	; (e658 <z_impl_z_log_msg_static_create+0xc8>)
    e624:	f018 f976 	bl	26914 <assert_post_action>
    e628:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e62c:	0880      	lsrs	r0, r0, #2
    e62e:	f7ff fdbb 	bl	e1a8 <z_log_msg_alloc>
    e632:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    e634:	f366 2552 	bfi	r5, r6, #9, #10
    e638:	464b      	mov	r3, r9
    e63a:	462a      	mov	r2, r5
    e63c:	4620      	mov	r0, r4
    e63e:	9905      	ldr	r1, [sp, #20]
}
    e640:	b00f      	add	sp, #60	; 0x3c
    e642:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    e646:	f018 bac1 	b.w	26bcc <z_log_msg_finalize>
    e64a:	bf00      	nop
    e64c:	00026ba1 	.word	0x00026ba1
    e650:	0002eac4 	.word	0x0002eac4
    e654:	0002d881 	.word	0x0002d881
    e658:	0002ea98 	.word	0x0002ea98

0000e65c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    e65c:	b40e      	push	{r1, r2, r3}
    e65e:	b503      	push	{r0, r1, lr}
    e660:	ab03      	add	r3, sp, #12
    e662:	f853 2b04 	ldr.w	r2, [r3], #4
    e666:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e668:	4804      	ldr	r0, [pc, #16]	; (e67c <print_formatted+0x20>)
	va_start(args, fmt);
    e66a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e66c:	f018 fad5 	bl	26c1a <cbvprintf>
	va_end(args);

	return length;
}
    e670:	b002      	add	sp, #8
    e672:	f85d eb04 	ldr.w	lr, [sp], #4
    e676:	b003      	add	sp, #12
    e678:	4770      	bx	lr
    e67a:	bf00      	nop
    e67c:	0000e69d 	.word	0x0000e69d

0000e680 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e680:	06ca      	lsls	r2, r1, #27
    e682:	d405      	bmi.n	e690 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e684:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    e686:	bf4c      	ite	mi
    e688:	4902      	ldrmi	r1, [pc, #8]	; (e694 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    e68a:	4903      	ldrpl	r1, [pc, #12]	; (e698 <newline_print+0x18>)
    e68c:	f7ff bfe6 	b.w	e65c <print_formatted>
	}
}
    e690:	4770      	bx	lr
    e692:	bf00      	nop
    e694:	00031892 	.word	0x00031892
    e698:	0002df3a 	.word	0x0002df3a

0000e69c <out_func>:
{
    e69c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    e69e:	684b      	ldr	r3, [r1, #4]
{
    e6a0:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    e6a2:	681a      	ldr	r2, [r3, #0]
    e6a4:	68cb      	ldr	r3, [r1, #12]
{
    e6a6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    e6a8:	429a      	cmp	r2, r3
    e6aa:	d102      	bne.n	e6b2 <out_func+0x16>
		log_output_flush(out_ctx);
    e6ac:	4608      	mov	r0, r1
    e6ae:	f018 fabb 	bl	26c28 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e6b2:	6863      	ldr	r3, [r4, #4]
    e6b4:	e8d3 2fef 	ldaex	r2, [r3]
    e6b8:	1c51      	adds	r1, r2, #1
    e6ba:	e8c3 1fe0 	stlex	r0, r1, [r3]
    e6be:	2800      	cmp	r0, #0
    e6c0:	d1f8      	bne.n	e6b4 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    e6c2:	68a3      	ldr	r3, [r4, #8]
    e6c4:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    e6c6:	6863      	ldr	r3, [r4, #4]
    e6c8:	681a      	ldr	r2, [r3, #0]
    e6ca:	68e3      	ldr	r3, [r4, #12]
    e6cc:	429a      	cmp	r2, r3
    e6ce:	d909      	bls.n	e6e4 <out_func+0x48>
    e6d0:	4905      	ldr	r1, [pc, #20]	; (e6e8 <out_func+0x4c>)
    e6d2:	4806      	ldr	r0, [pc, #24]	; (e6ec <out_func+0x50>)
    e6d4:	2379      	movs	r3, #121	; 0x79
    e6d6:	4a06      	ldr	r2, [pc, #24]	; (e6f0 <out_func+0x54>)
    e6d8:	f018 f923 	bl	26922 <assert_print>
    e6dc:	2179      	movs	r1, #121	; 0x79
    e6de:	4804      	ldr	r0, [pc, #16]	; (e6f0 <out_func+0x54>)
    e6e0:	f018 f918 	bl	26914 <assert_post_action>
}
    e6e4:	2000      	movs	r0, #0
    e6e6:	bd38      	pop	{r3, r4, r5, pc}
    e6e8:	0002eafc 	.word	0x0002eafc
    e6ec:	0002d881 	.word	0x0002d881
    e6f0:	0002eacd 	.word	0x0002eacd

0000e6f4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6f8:	b089      	sub	sp, #36	; 0x24
    e6fa:	469a      	mov	sl, r3
    e6fc:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    e700:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    e704:	9305      	str	r3, [sp, #20]
    e706:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e708:	4604      	mov	r4, r0
    e70a:	460d      	mov	r5, r1
    e70c:	9e16      	ldr	r6, [sp, #88]	; 0x58
    e70e:	9206      	str	r2, [sp, #24]
    e710:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    e712:	f1bb 0f00 	cmp.w	fp, #0
    e716:	f000 8085 	beq.w	e824 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    e71a:	f006 0308 	and.w	r3, r6, #8
    e71e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    e720:	f018 fa3c 	bl	26b9c <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    e724:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    e728:	4602      	mov	r2, r0
    e72a:	2800      	cmp	r0, #0
    e72c:	d049      	beq.n	e7c2 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    e72e:	4620      	mov	r0, r4
    e730:	498c      	ldr	r1, [pc, #560]	; (e964 <log_output_process+0x270>)
    e732:	f7ff ff93 	bl	e65c <print_formatted>
    e736:	4680      	mov	r8, r0
	if (stamp) {
    e738:	f1b9 0f00 	cmp.w	r9, #0
    e73c:	d008      	beq.n	e750 <log_output_process+0x5c>
	if (!format) {
    e73e:	f016 0f44 	tst.w	r6, #68	; 0x44
    e742:	d140      	bne.n	e7c6 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    e744:	462a      	mov	r2, r5
    e746:	4620      	mov	r0, r4
    e748:	4987      	ldr	r1, [pc, #540]	; (e968 <log_output_process+0x274>)
    e74a:	f7ff ff87 	bl	e65c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    e74e:	4480      	add	r8, r0
	if (color) {
    e750:	f006 0301 	and.w	r3, r6, #1
    e754:	b153      	cbz	r3, e76c <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    e756:	4b85      	ldr	r3, [pc, #532]	; (e96c <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    e758:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    e75a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    e75e:	4b84      	ldr	r3, [pc, #528]	; (e970 <log_output_process+0x27c>)
    e760:	4984      	ldr	r1, [pc, #528]	; (e974 <log_output_process+0x280>)
    e762:	2a00      	cmp	r2, #0
    e764:	bf08      	it	eq
    e766:	461a      	moveq	r2, r3
    e768:	f7ff ff78 	bl	e65c <print_formatted>
	if (level_on) {
    e76c:	f006 0308 	and.w	r3, r6, #8
    e770:	2b00      	cmp	r3, #0
    e772:	d054      	beq.n	e81e <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    e774:	4b80      	ldr	r3, [pc, #512]	; (e978 <log_output_process+0x284>)
    e776:	4620      	mov	r0, r4
    e778:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    e77c:	497f      	ldr	r1, [pc, #508]	; (e97c <log_output_process+0x288>)
    e77e:	f7ff ff6d 	bl	e65c <print_formatted>
    e782:	4605      	mov	r5, r0
	if (domain) {
    e784:	9b06      	ldr	r3, [sp, #24]
    e786:	b12b      	cbz	r3, e794 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    e788:	461a      	mov	r2, r3
    e78a:	4620      	mov	r0, r4
    e78c:	497c      	ldr	r1, [pc, #496]	; (e980 <log_output_process+0x28c>)
    e78e:	f7ff ff65 	bl	e65c <print_formatted>
    e792:	4405      	add	r5, r0
	if (source) {
    e794:	f1ba 0f00 	cmp.w	sl, #0
    e798:	d005      	beq.n	e7a6 <log_output_process+0xb2>
		total += print_formatted(output,
    e79a:	4652      	mov	r2, sl
    e79c:	4620      	mov	r0, r4
    e79e:	4979      	ldr	r1, [pc, #484]	; (e984 <log_output_process+0x290>)
    e7a0:	f7ff ff5c 	bl	e65c <print_formatted>
    e7a4:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    e7a6:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    e7a8:	2f00      	cmp	r7, #0
    e7aa:	d149      	bne.n	e840 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    e7ac:	9b04      	ldr	r3, [sp, #16]
    e7ae:	2b00      	cmp	r3, #0
    e7b0:	d160      	bne.n	e874 <log_output_process+0x180>
	if (color) {
    e7b2:	07f3      	lsls	r3, r6, #31
    e7b4:	f100 80cf 	bmi.w	e956 <log_output_process+0x262>
	newline_print(output, flags);
    e7b8:	4631      	mov	r1, r6
    e7ba:	4620      	mov	r0, r4
    e7bc:	f7ff ff60 	bl	e680 <newline_print>
}
    e7c0:	e0c3      	b.n	e94a <log_output_process+0x256>
	uint32_t length = 0U;
    e7c2:	4680      	mov	r8, r0
    e7c4:	e7b8      	b.n	e738 <log_output_process+0x44>
	} else if (freq != 0U) {
    e7c6:	4b70      	ldr	r3, [pc, #448]	; (e988 <log_output_process+0x294>)
    e7c8:	6818      	ldr	r0, [r3, #0]
    e7ca:	2800      	cmp	r0, #0
    e7cc:	d0bf      	beq.n	e74e <log_output_process+0x5a>
		timestamp /= timestamp_div;
    e7ce:	4b6f      	ldr	r3, [pc, #444]	; (e98c <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    e7d0:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    e7d4:	681b      	ldr	r3, [r3, #0]
    e7d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    e7da:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    e7de:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    e7e2:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    e7e6:	fb09 f505 	mul.w	r5, r9, r5
    e7ea:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e7ee:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    e7f2:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    e7f6:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e7fa:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    e7fe:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e802:	fb09 f505 	mul.w	r5, r9, r5
    e806:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    e80a:	fb0c 1113 	mls	r1, ip, r3, r1
    e80e:	4620      	mov	r0, r4
    e810:	9100      	str	r1, [sp, #0]
    e812:	e9cd e501 	strd	lr, r5, [sp, #4]
    e816:	495e      	ldr	r1, [pc, #376]	; (e990 <log_output_process+0x29c>)
    e818:	f7ff ff20 	bl	e65c <print_formatted>
    e81c:	e797      	b.n	e74e <log_output_process+0x5a>
	int total = 0;
    e81e:	f006 0508 	and.w	r5, r6, #8
    e822:	e7af      	b.n	e784 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e824:	f1ba 0f01 	cmp.w	sl, #1
    e828:	d106      	bne.n	e838 <log_output_process+0x144>
	if (package) {
    e82a:	b9ef      	cbnz	r7, e868 <log_output_process+0x174>
	if (data_len) {
    e82c:	9b04      	ldr	r3, [sp, #16]
    e82e:	2b00      	cmp	r3, #0
    e830:	f000 808b 	beq.w	e94a <log_output_process+0x256>
		prefix_offset = 0;
    e834:	2500      	movs	r5, #0
    e836:	e01d      	b.n	e874 <log_output_process+0x180>
	if (package) {
    e838:	2f00      	cmp	r7, #0
    e83a:	d0f7      	beq.n	e82c <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e83c:	4855      	ldr	r0, [pc, #340]	; (e994 <log_output_process+0x2a0>)
    e83e:	e014      	b.n	e86a <log_output_process+0x176>
		cb = out_func;
    e840:	4855      	ldr	r0, [pc, #340]	; (e998 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    e842:	463b      	mov	r3, r7
    e844:	4622      	mov	r2, r4
    e846:	4955      	ldr	r1, [pc, #340]	; (e99c <log_output_process+0x2a8>)
    e848:	f017 fdc5 	bl	263d6 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    e84c:	2800      	cmp	r0, #0
    e84e:	da0e      	bge.n	e86e <log_output_process+0x17a>
    e850:	4953      	ldr	r1, [pc, #332]	; (e9a0 <log_output_process+0x2ac>)
    e852:	4854      	ldr	r0, [pc, #336]	; (e9a4 <log_output_process+0x2b0>)
    e854:	f44f 7300 	mov.w	r3, #512	; 0x200
    e858:	4a53      	ldr	r2, [pc, #332]	; (e9a8 <log_output_process+0x2b4>)
    e85a:	f018 f862 	bl	26922 <assert_print>
    e85e:	f44f 7100 	mov.w	r1, #512	; 0x200
    e862:	4851      	ldr	r0, [pc, #324]	; (e9a8 <log_output_process+0x2b4>)
    e864:	f018 f856 	bl	26914 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e868:	484b      	ldr	r0, [pc, #300]	; (e998 <log_output_process+0x2a4>)
		prefix_offset = 0;
    e86a:	465d      	mov	r5, fp
    e86c:	e7e9      	b.n	e842 <log_output_process+0x14e>
	if (data_len) {
    e86e:	9b04      	ldr	r3, [sp, #16]
    e870:	2b00      	cmp	r3, #0
    e872:	d066      	beq.n	e942 <log_output_process+0x24e>
		print_formatted(output, " ");
    e874:	f8df 8134 	ldr.w	r8, [pc, #308]	; e9ac <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    e878:	f8df 9134 	ldr.w	r9, [pc, #308]	; e9b0 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e87c:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    e87e:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e880:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    e882:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e884:	bf28      	it	cs
    e886:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    e888:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    e88c:	f7ff fef8 	bl	e680 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    e890:	4555      	cmp	r5, sl
    e892:	dc43      	bgt.n	e91c <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    e894:	9b05      	ldr	r3, [sp, #20]
    e896:	4649      	mov	r1, r9
    e898:	4620      	mov	r0, r4
    e89a:	781a      	ldrb	r2, [r3, #0]
    e89c:	f7ff fede 	bl	e65c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e8a0:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    e8a4:	f01a 0f07 	tst.w	sl, #7
    e8a8:	d103      	bne.n	e8b2 <log_output_process+0x1be>
			print_formatted(output, " ");
    e8aa:	4641      	mov	r1, r8
    e8ac:	4620      	mov	r0, r4
    e8ae:	f7ff fed5 	bl	e65c <print_formatted>
		if (i < length) {
    e8b2:	4557      	cmp	r7, sl
    e8b4:	d939      	bls.n	e92a <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    e8b6:	9b05      	ldr	r3, [sp, #20]
    e8b8:	4649      	mov	r1, r9
    e8ba:	4620      	mov	r0, r4
    e8bc:	f813 200a 	ldrb.w	r2, [r3, sl]
    e8c0:	f7ff fecc 	bl	e65c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e8c4:	f10a 0a01 	add.w	sl, sl, #1
    e8c8:	f1ba 0f10 	cmp.w	sl, #16
    e8cc:	d1ea      	bne.n	e8a4 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e8ce:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    e8d2:	4620      	mov	r0, r4
    e8d4:	4937      	ldr	r1, [pc, #220]	; (e9b4 <log_output_process+0x2c0>)
    e8d6:	f7ff fec1 	bl	e65c <print_formatted>
		if (i < length) {
    e8da:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    e8dc:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    e8de:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    e8e0:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    e8e2:	4b35      	ldr	r3, [pc, #212]	; (e9b8 <log_output_process+0x2c4>)
    e8e4:	5c99      	ldrb	r1, [r3, r2]
    e8e6:	f011 0f97 	tst.w	r1, #151	; 0x97
    e8ea:	bf08      	it	eq
    e8ec:	222e      	moveq	r2, #46	; 0x2e
    e8ee:	4933      	ldr	r1, [pc, #204]	; (e9bc <log_output_process+0x2c8>)
    e8f0:	f7ff feb4 	bl	e65c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e8f4:	f10a 0a01 	add.w	sl, sl, #1
    e8f8:	f1ba 0f10 	cmp.w	sl, #16
    e8fc:	d01a      	beq.n	e934 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    e8fe:	f01a 0f07 	tst.w	sl, #7
    e902:	d103      	bne.n	e90c <log_output_process+0x218>
			print_formatted(output, " ");
    e904:	4641      	mov	r1, r8
    e906:	4620      	mov	r0, r4
    e908:	f7ff fea8 	bl	e65c <print_formatted>
		if (i < length) {
    e90c:	4557      	cmp	r7, sl
    e90e:	4652      	mov	r2, sl
    e910:	d8e4      	bhi.n	e8dc <log_output_process+0x1e8>
			print_formatted(output, " ");
    e912:	4641      	mov	r1, r8
    e914:	4620      	mov	r0, r4
    e916:	f7ff fea1 	bl	e65c <print_formatted>
    e91a:	e7eb      	b.n	e8f4 <log_output_process+0x200>
		print_formatted(output, " ");
    e91c:	4641      	mov	r1, r8
    e91e:	4620      	mov	r0, r4
    e920:	f7ff fe9c 	bl	e65c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    e924:	f10a 0a01 	add.w	sl, sl, #1
    e928:	e7b2      	b.n	e890 <log_output_process+0x19c>
			print_formatted(output, "   ");
    e92a:	4620      	mov	r0, r4
    e92c:	4924      	ldr	r1, [pc, #144]	; (e9c0 <log_output_process+0x2cc>)
    e92e:	f7ff fe95 	bl	e65c <print_formatted>
    e932:	e7c7      	b.n	e8c4 <log_output_process+0x1d0>
		data += length;
    e934:	9b05      	ldr	r3, [sp, #20]
    e936:	443b      	add	r3, r7
    e938:	9305      	str	r3, [sp, #20]
	} while (len);
    e93a:	9b04      	ldr	r3, [sp, #16]
    e93c:	1bdb      	subs	r3, r3, r7
    e93e:	9304      	str	r3, [sp, #16]
    e940:	d19c      	bne.n	e87c <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    e942:	f1bb 0f00 	cmp.w	fp, #0
    e946:	f47f af34 	bne.w	e7b2 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    e94a:	4620      	mov	r0, r4
}
    e94c:	b009      	add	sp, #36	; 0x24
    e94e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    e952:	f018 b969 	b.w	26c28 <log_output_flush>
		print_formatted(output, "%s", log_color);
    e956:	4620      	mov	r0, r4
    e958:	4a05      	ldr	r2, [pc, #20]	; (e970 <log_output_process+0x27c>)
    e95a:	4906      	ldr	r1, [pc, #24]	; (e974 <log_output_process+0x280>)
    e95c:	f7ff fe7e 	bl	e65c <print_formatted>
}
    e960:	e72a      	b.n	e7b8 <log_output_process+0xc4>
    e962:	bf00      	nop
    e964:	0002eb31 	.word	0x0002eb31
    e968:	0002eb35 	.word	0x0002eb35
    e96c:	0002ce6c 	.word	0x0002ce6c
    e970:	0002eb2c 	.word	0x0002eb2c
    e974:	0002da09 	.word	0x0002da09
    e978:	0002ce80 	.word	0x0002ce80
    e97c:	0002eb5a 	.word	0x0002eb5a
    e980:	0002eb60 	.word	0x0002eb60
    e984:	0002eb64 	.word	0x0002eb64
    e988:	2002156c 	.word	0x2002156c
    e98c:	20021568 	.word	0x20021568
    e990:	0002eb3e 	.word	0x0002eb3e
    e994:	00026c43 	.word	0x00026c43
    e998:	0000e69d 	.word	0x0000e69d
    e99c:	00026c1b 	.word	0x00026c1b
    e9a0:	0002eb69 	.word	0x0002eb69
    e9a4:	0002d881 	.word	0x0002d881
    e9a8:	0002eacd 	.word	0x0002eacd
    e9ac:	00032a02 	.word	0x00032a02
    e9b0:	0002eb72 	.word	0x0002eb72
    e9b4:	0002eb78 	.word	0x0002eb78
    e9b8:	00033542 	.word	0x00033542
    e9bc:	0002eb7a 	.word	0x0002eb7a
    e9c0:	00032a00 	.word	0x00032a00

0000e9c4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    e9c8:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    e9ca:	684b      	ldr	r3, [r1, #4]
    e9cc:	4605      	mov	r5, r0
    e9ce:	460c      	mov	r4, r1
    e9d0:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    e9d2:	688e      	ldr	r6, [r1, #8]
    e9d4:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    e9d6:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    e9da:	b15b      	cbz	r3, e9f4 <log_output_msg_process+0x30>
    e9dc:	4a13      	ldr	r2, [pc, #76]	; (ea2c <log_output_msg_process+0x68>)
    e9de:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    e9e0:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e9e4:	2900      	cmp	r1, #0
    e9e6:	db1f      	blt.n	ea28 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    e9e8:	7820      	ldrb	r0, [r4, #0]
    e9ea:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e9ee:	f7ff fd9b 	bl	e528 <log_source_name_get>
    e9f2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    e9f4:	4621      	mov	r1, r4
    e9f6:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    e9fa:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    e9fc:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    ea00:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    ea02:	eb01 0402 	add.w	r4, r1, r2
    ea06:	bf08      	it	eq
    ea08:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    ea0a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    ea0e:	e9cd 0803 	strd	r0, r8, [sp, #12]
    ea12:	e9cd 1401 	strd	r1, r4, [sp, #4]
    ea16:	2200      	movs	r2, #0
    ea18:	4631      	mov	r1, r6
    ea1a:	4628      	mov	r0, r5
    ea1c:	9700      	str	r7, [sp, #0]
    ea1e:	f7ff fe69 	bl	e6f4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    ea22:	b006      	add	sp, #24
    ea24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ea28:	2300      	movs	r3, #0
    ea2a:	e7e3      	b.n	e9f4 <log_output_msg_process+0x30>
    ea2c:	0002c7ac 	.word	0x0002c7ac

0000ea30 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ea30:	f242 730f 	movw	r3, #9999	; 0x270f
{
    ea34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ea36:	428b      	cmp	r3, r1
    ea38:	bf28      	it	cs
    ea3a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    ea3c:	6805      	ldr	r5, [r0, #0]
{
    ea3e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ea40:	2105      	movs	r1, #5
    ea42:	4668      	mov	r0, sp
    ea44:	4a0d      	ldr	r2, [pc, #52]	; (ea7c <log_output_dropped_process+0x4c>)
    ea46:	f017 fdb7 	bl	265b8 <snprintk>
    ea4a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    ea4c:	6863      	ldr	r3, [r4, #4]
    ea4e:	4628      	mov	r0, r5
    ea50:	220b      	movs	r2, #11
    ea52:	685b      	ldr	r3, [r3, #4]
    ea54:	490a      	ldr	r1, [pc, #40]	; (ea80 <log_output_dropped_process+0x50>)
    ea56:	f018 f8d3 	bl	26c00 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ea5a:	6863      	ldr	r3, [r4, #4]
    ea5c:	4632      	mov	r2, r6
    ea5e:	4669      	mov	r1, sp
    ea60:	4628      	mov	r0, r5
    ea62:	685b      	ldr	r3, [r3, #4]
    ea64:	f018 f8cc 	bl	26c00 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    ea68:	6863      	ldr	r3, [r4, #4]
    ea6a:	221b      	movs	r2, #27
    ea6c:	4628      	mov	r0, r5
    ea6e:	685b      	ldr	r3, [r3, #4]
    ea70:	4904      	ldr	r1, [pc, #16]	; (ea84 <log_output_dropped_process+0x54>)
    ea72:	f018 f8c5 	bl	26c00 <buffer_write>
		     output->control_block->ctx);
}
    ea76:	b002      	add	sp, #8
    ea78:	bd70      	pop	{r4, r5, r6, pc}
    ea7a:	bf00      	nop
    ea7c:	0002d9f3 	.word	0x0002d9f3
    ea80:	0002eb99 	.word	0x0002eb99
    ea84:	0002eb7d 	.word	0x0002eb7d

0000ea88 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    ea88:	2100      	movs	r1, #0
    ea8a:	2301      	movs	r3, #1
    ea8c:	4a06      	ldr	r2, [pc, #24]	; (eaa8 <log_output_timestamp_freq_set+0x20>)
    ea8e:	4290      	cmp	r0, r2
    ea90:	d806      	bhi.n	eaa0 <log_output_timestamp_freq_set+0x18>
    ea92:	4a06      	ldr	r2, [pc, #24]	; (eaac <log_output_timestamp_freq_set+0x24>)
    ea94:	b901      	cbnz	r1, ea98 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    ea96:	2301      	movs	r3, #1
    ea98:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ea9a:	4b05      	ldr	r3, [pc, #20]	; (eab0 <log_output_timestamp_freq_set+0x28>)
    ea9c:	6018      	str	r0, [r3, #0]
}
    ea9e:	4770      	bx	lr
		timestamp_div *= 2U;
    eaa0:	2101      	movs	r1, #1
		frequency /= 2U;
    eaa2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    eaa4:	005b      	lsls	r3, r3, #1
    eaa6:	e7f2      	b.n	ea8e <log_output_timestamp_freq_set+0x6>
    eaa8:	000f4240 	.word	0x000f4240
    eaac:	20021568 	.word	0x20021568
    eab0:	2002156c 	.word	0x2002156c

0000eab4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    eab4:	2201      	movs	r2, #1
    eab6:	4b01      	ldr	r3, [pc, #4]	; (eabc <log_backend_rtt_init+0x8>)
    eab8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    eaba:	4770      	bx	lr
    eabc:	200223d4 	.word	0x200223d4

0000eac0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    eac0:	4b01      	ldr	r3, [pc, #4]	; (eac8 <format_set+0x8>)
	return 0;
}
    eac2:	2000      	movs	r0, #0
	log_format_current = log_type;
    eac4:	6019      	str	r1, [r3, #0]
}
    eac6:	4770      	bx	lr
    eac8:	20021584 	.word	0x20021584

0000eacc <panic>:
	panic_mode = true;
    eacc:	2201      	movs	r2, #1
    eace:	4b02      	ldr	r3, [pc, #8]	; (ead8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    ead0:	4802      	ldr	r0, [pc, #8]	; (eadc <panic+0x10>)
    ead2:	701a      	strb	r2, [r3, #0]
    ead4:	f018 b8a8 	b.w	26c28 <log_output_flush>
    ead8:	200223d5 	.word	0x200223d5
    eadc:	0002ceb0 	.word	0x0002ceb0

0000eae0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    eae0:	4801      	ldr	r0, [pc, #4]	; (eae8 <dropped+0x8>)
    eae2:	f7ff bfa5 	b.w	ea30 <log_output_dropped_process>
    eae6:	bf00      	nop
    eae8:	0002ceb0 	.word	0x0002ceb0

0000eaec <process>:
{
    eaec:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    eaee:	4b06      	ldr	r3, [pc, #24]	; (eb08 <process+0x1c>)
{
    eaf0:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    eaf2:	6818      	ldr	r0, [r3, #0]
    eaf4:	f7ff fabe 	bl	e074 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    eaf8:	4621      	mov	r1, r4
}
    eafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    eafe:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    eb00:	220f      	movs	r2, #15
    eb02:	4802      	ldr	r0, [pc, #8]	; (eb0c <process+0x20>)
    eb04:	4718      	bx	r3
    eb06:	bf00      	nop
    eb08:	20021584 	.word	0x20021584
    eb0c:	0002ceb0 	.word	0x0002ceb0

0000eb10 <on_failed_write>:
	if (retry_cnt == 0) {
    eb10:	b910      	cbnz	r0, eb18 <on_failed_write+0x8>
		host_present = false;
    eb12:	4b07      	ldr	r3, [pc, #28]	; (eb30 <on_failed_write+0x20>)
    eb14:	7018      	strb	r0, [r3, #0]
}
    eb16:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    eb18:	4b06      	ldr	r3, [pc, #24]	; (eb34 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    eb1a:	781b      	ldrb	r3, [r3, #0]
    eb1c:	b11b      	cbz	r3, eb26 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    eb1e:	f241 3088 	movw	r0, #5000	; 0x1388
    eb22:	f01c bdec 	b.w	2b6fe <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    eb26:	20a4      	movs	r0, #164	; 0xa4
    eb28:	2100      	movs	r1, #0
    eb2a:	f014 bdc5 	b.w	236b8 <z_impl_k_sleep>
    eb2e:	bf00      	nop
    eb30:	200223d4 	.word	0x200223d4
    eb34:	200223d5 	.word	0x200223d5

0000eb38 <data_out_block_mode>:
{
    eb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eb3c:	4680      	mov	r8, r0
    eb3e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    eb40:	2404      	movs	r4, #4
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    eb42:	f8df 9070 	ldr.w	r9, [pc, #112]	; ebb4 <data_out_block_mode+0x7c>
    eb46:	4f1c      	ldr	r7, [pc, #112]	; (ebb8 <data_out_block_mode+0x80>)
		if (!is_sync_mode()) {
    eb48:	f899 5000 	ldrb.w	r5, [r9]
    eb4c:	b995      	cbnz	r5, eb74 <data_out_block_mode+0x3c>
			RTT_LOCK();
    eb4e:	f011 ff1d 	bl	2098c <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    eb52:	4628      	mov	r0, r5
    eb54:	4632      	mov	r2, r6
    eb56:	4641      	mov	r1, r8
    eb58:	f011 fec6 	bl	208e8 <SEGGER_RTT_WriteSkipNoLock>
    eb5c:	4605      	mov	r5, r0
			RTT_UNLOCK();
    eb5e:	f011 ff1f 	bl	209a0 <zephyr_rtt_mutex_unlock>
		if (ret) {
    eb62:	b1e5      	cbz	r5, eb9e <data_out_block_mode+0x66>
	host_present = true;
    eb64:	2301      	movs	r3, #1
    eb66:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    eb68:	f899 3000 	ldrb.w	r3, [r9]
    eb6c:	b973      	cbnz	r3, eb8c <data_out_block_mode+0x54>
}
    eb6e:	4630      	mov	r0, r6
    eb70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    eb74:	4632      	mov	r2, r6
    eb76:	4641      	mov	r1, r8
    eb78:	2000      	movs	r0, #0
    eb7a:	f011 feb5 	bl	208e8 <SEGGER_RTT_WriteSkipNoLock>
    eb7e:	4605      	mov	r5, r0
    eb80:	e7ef      	b.n	eb62 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    eb82:	4620      	mov	r0, r4
    eb84:	1e65      	subs	r5, r4, #1
    eb86:	f7ff ffc3 	bl	eb10 <on_failed_write>
    eb8a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    eb8c:	2000      	movs	r0, #0
    eb8e:	f011 fef3 	bl	20978 <SEGGER_RTT_HasDataUp>
    eb92:	2800      	cmp	r0, #0
    eb94:	d0eb      	beq.n	eb6e <data_out_block_mode+0x36>
    eb96:	783b      	ldrb	r3, [r7, #0]
    eb98:	2b00      	cmp	r3, #0
    eb9a:	d1f2      	bne.n	eb82 <data_out_block_mode+0x4a>
    eb9c:	e7e7      	b.n	eb6e <data_out_block_mode+0x36>
		} else if (host_present) {
    eb9e:	783b      	ldrb	r3, [r7, #0]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d0e4      	beq.n	eb6e <data_out_block_mode+0x36>
			retry_cnt--;
    eba4:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    eba6:	4620      	mov	r0, r4
    eba8:	f7ff ffb2 	bl	eb10 <on_failed_write>
	} while ((ret == 0) && host_present);
    ebac:	783b      	ldrb	r3, [r7, #0]
    ebae:	2b00      	cmp	r3, #0
    ebb0:	d1ca      	bne.n	eb48 <data_out_block_mode+0x10>
    ebb2:	e7dc      	b.n	eb6e <data_out_block_mode+0x36>
    ebb4:	200223d5 	.word	0x200223d5
    ebb8:	200223d4 	.word	0x200223d4

0000ebbc <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    ebbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ebc0:	460f      	mov	r7, r1
    ebc2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ebc4:	2108      	movs	r1, #8
    ebc6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    ebc8:	f018 f8d9 	bl	26d7e <nvs_al_size.isra.0>
    ebcc:	4680      	mov	r8, r0

	*addr -= ate_size;
    ebce:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    ebd0:	f8df 9048 	ldr.w	r9, [pc, #72]	; ec1c <nvs_recover_last_ate+0x60>
	*addr -= ate_size;
    ebd4:	1a24      	subs	r4, r4, r0
    ebd6:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    ebd8:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    ebdc:	42ac      	cmp	r4, r5
    ebde:	d803      	bhi.n	ebe8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    ebe0:	2000      	movs	r0, #0
}
    ebe2:	b003      	add	sp, #12
    ebe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ebe8:	2308      	movs	r3, #8
    ebea:	466a      	mov	r2, sp
    ebec:	4621      	mov	r1, r4
    ebee:	4630      	mov	r0, r6
    ebf0:	f018 f835 	bl	26c5e <nvs_flash_rd>
		if (rc) {
    ebf4:	2800      	cmp	r0, #0
    ebf6:	d1f4      	bne.n	ebe2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    ebf8:	4669      	mov	r1, sp
    ebfa:	4630      	mov	r0, r6
    ebfc:	f018 f8c9 	bl	26d92 <nvs_ate_valid>
    ec00:	b140      	cbz	r0, ec14 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    ec02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ec06:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    ec0a:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    ec0e:	4413      	add	r3, r2
    ec10:	441d      	add	r5, r3
			*addr = ate_end_addr;
    ec12:	603c      	str	r4, [r7, #0]
		ate_end_addr -= ate_size;
    ec14:	eba4 0408 	sub.w	r4, r4, r8
    ec18:	e7e0      	b.n	ebdc <nvs_recover_last_ate+0x20>
    ec1a:	bf00      	nop
    ec1c:	ffff0000 	.word	0xffff0000

0000ec20 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec24:	b08f      	sub	sp, #60	; 0x3c
    ec26:	4604      	mov	r4, r0
    ec28:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    ec2a:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    ec2e:	4640      	mov	r0, r8
    ec30:	f01c fc85 	bl	2b53e <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    ec34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    ec36:	6883      	ldr	r3, [r0, #8]
    ec38:	68db      	ldr	r3, [r3, #12]
    ec3a:	4798      	blx	r3
    ec3c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    ec3e:	b988      	cbnz	r0, ec64 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
    ec40:	4b8d      	ldr	r3, [pc, #564]	; (ee78 <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
    ec42:	637b      	str	r3, [r7, #52]	; 0x34
    ec44:	2302      	movs	r3, #2
		return -EINVAL;
    ec46:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
    ec4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ec4e:	488b      	ldr	r0, [pc, #556]	; (ee7c <nvs_mount+0x25c>)
    ec50:	633b      	str	r3, [r7, #48]	; 0x30
    ec52:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ec56:	f018 f88f 	bl	26d78 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    ec5a:	4628      	mov	r0, r5
    ec5c:	373c      	adds	r7, #60	; 0x3c
    ec5e:	46bd      	mov	sp, r7
    ec60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    ec64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    ec66:	6883      	ldr	r3, [r0, #8]
    ec68:	68db      	ldr	r3, [r3, #12]
    ec6a:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    ec6c:	6803      	ldr	r3, [r0, #0]
    ec6e:	3b01      	subs	r3, #1
    ec70:	2b1f      	cmp	r3, #31
    ec72:	d901      	bls.n	ec78 <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
    ec74:	4b82      	ldr	r3, [pc, #520]	; (ee80 <nvs_mount+0x260>)
    ec76:	e7e4      	b.n	ec42 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    ec78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ec7a:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    ec7c:	f107 0214 	add.w	r2, r7, #20
    ec80:	f01b fac0 	bl	2a204 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    ec84:	b108      	cbz	r0, ec8a <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
    ec86:	4b7f      	ldr	r3, [pc, #508]	; (ee84 <nvs_mount+0x264>)
    ec88:	e7db      	b.n	ec42 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
    ec8a:	89a5      	ldrh	r5, [r4, #12]
    ec8c:	b12d      	cbz	r5, ec9a <nvs_mount+0x7a>
    ec8e:	69bb      	ldr	r3, [r7, #24]
    ec90:	fbb5 f2f3 	udiv	r2, r5, r3
    ec94:	fb03 5512 	mls	r5, r3, r2, r5
    ec98:	b10d      	cbz	r5, ec9e <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
    ec9a:	4b7b      	ldr	r3, [pc, #492]	; (ee88 <nvs_mount+0x268>)
    ec9c:	e7d1      	b.n	ec42 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
    ec9e:	89e3      	ldrh	r3, [r4, #14]
    eca0:	2b01      	cmp	r3, #1
    eca2:	d801      	bhi.n	eca8 <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
    eca4:	4b79      	ldr	r3, [pc, #484]	; (ee8c <nvs_mount+0x26c>)
    eca6:	e7cc      	b.n	ec42 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    eca8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    ecaa:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ecac:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    ecb0:	f04f 33ff 	mov.w	r3, #4294967295
    ecb4:	f04f 32ff 	mov.w	r2, #4294967295
    ecb8:	4640      	mov	r0, r8
    ecba:	f012 fba7 	bl	2140c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ecbe:	2108      	movs	r1, #8
    ecc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ecc2:	f018 f85c 	bl	26d7e <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    ecc6:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ecc8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    ecca:	89e3      	ldrh	r3, [r4, #14]
    eccc:	fa1f fb85 	uxth.w	fp, r5
    ecd0:	455b      	cmp	r3, fp
    ecd2:	d808      	bhi.n	ece6 <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
    ecd4:	89e3      	ldrh	r3, [r4, #14]
    ecd6:	454b      	cmp	r3, r9
    ecd8:	d123      	bne.n	ed22 <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
    ecda:	4640      	mov	r0, r8
    ecdc:	f012 fc66 	bl	215ac <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    ece0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    ece4:	e7b9      	b.n	ec5a <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
    ece6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    ece8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    ecea:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    ecec:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ecf0:	4652      	mov	r2, sl
    ecf2:	2308      	movs	r3, #8
    ecf4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    ecf6:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ecf8:	f017 ffff 	bl	26cfa <nvs_flash_cmp_const>
		if (rc) {
    ecfc:	b178      	cbz	r0, ed1e <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
    ecfe:	4639      	mov	r1, r7
    ed00:	4620      	mov	r0, r4
    ed02:	f017 ffba 	bl	26c7a <nvs_sector_advance>
			closed_sectors++;
    ed06:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ed0a:	2308      	movs	r3, #8
    ed0c:	4652      	mov	r2, sl
    ed0e:	4620      	mov	r0, r4
    ed10:	6839      	ldr	r1, [r7, #0]
			closed_sectors++;
    ed12:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ed16:	f017 fff0 	bl	26cfa <nvs_flash_cmp_const>
			if (!rc) {
    ed1a:	2800      	cmp	r0, #0
    ed1c:	d0da      	beq.n	ecd4 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
    ed1e:	3501      	adds	r5, #1
    ed20:	e7d3      	b.n	ecca <nvs_mount+0xaa>
	if (i == fs->sector_count) {
    ed22:	455b      	cmp	r3, fp
    ed24:	d10b      	bne.n	ed3e <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    ed26:	6839      	ldr	r1, [r7, #0]
    ed28:	2308      	movs	r3, #8
    ed2a:	4652      	mov	r2, sl
    ed2c:	4620      	mov	r0, r4
    ed2e:	1b89      	subs	r1, r1, r6
    ed30:	f017 ffe3 	bl	26cfa <nvs_flash_cmp_const>
		if (!rc) {
    ed34:	b918      	cbnz	r0, ed3e <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
    ed36:	4639      	mov	r1, r7
    ed38:	4620      	mov	r0, r4
    ed3a:	f017 ff9e 	bl	26c7a <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    ed3e:	4639      	mov	r1, r7
    ed40:	4620      	mov	r0, r4
    ed42:	f7ff ff3b 	bl	ebbc <nvs_recover_last_ate>
	if (rc) {
    ed46:	4605      	mov	r5, r0
    ed48:	b118      	cbz	r0, ed52 <nvs_mount+0x132>
    ed4a:	4640      	mov	r0, r8
    ed4c:	f012 fc2e 	bl	215ac <z_impl_k_mutex_unlock>
	if (rc) {
    ed50:	e783      	b.n	ec5a <nvs_mount+0x3a>
	fs->ate_wra = addr;
    ed52:	683b      	ldr	r3, [r7, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    ed54:	ea4f 4913 	mov.w	r9, r3, lsr #16
    ed58:	ea4f 4909 	mov.w	r9, r9, lsl #16
	fs->ate_wra = addr;
    ed5c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    ed5e:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    ed62:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    ed66:	4299      	cmp	r1, r3
    ed68:	d30f      	bcc.n	ed8a <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ed6a:	2308      	movs	r3, #8
    ed6c:	4620      	mov	r0, r4
    ed6e:	1d3a      	adds	r2, r7, #4
    ed70:	f017 ff75 	bl	26c5e <nvs_flash_rd>
		if (rc) {
    ed74:	4605      	mov	r5, r0
    ed76:	2800      	cmp	r0, #0
    ed78:	d1e7      	bne.n	ed4a <nvs_mount+0x12a>
    ed7a:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
    ed7c:	f813 2b01 	ldrb.w	r2, [r3], #1
    ed80:	4592      	cmp	sl, r2
    ed82:	d144      	bne.n	ee0e <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    ed84:	3501      	adds	r5, #1
    ed86:	2d08      	cmp	r5, #8
    ed88:	d1f8      	bne.n	ed7c <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ed8a:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    ed8c:	4639      	mov	r1, r7
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ed8e:	0c1b      	lsrs	r3, r3, #16
    ed90:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    ed92:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ed94:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
    ed96:	f017 ff70 	bl	26c7a <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    ed9a:	4652      	mov	r2, sl
    ed9c:	4620      	mov	r0, r4
    ed9e:	89a3      	ldrh	r3, [r4, #12]
    eda0:	6839      	ldr	r1, [r7, #0]
    eda2:	f017 ffaa 	bl	26cfa <nvs_flash_cmp_const>
	if (rc < 0) {
    eda6:	1e05      	subs	r5, r0, #0
    eda8:	dbcf      	blt.n	ed4a <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
    edaa:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    edac:	f000 8082 	beq.w	eeb4 <nvs_mount+0x294>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    edb0:	f64f 7aff 	movw	sl, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    edb4:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    edb8:	89a3      	ldrh	r3, [r4, #12]
    edba:	fa1f f289 	uxth.w	r2, r9
    edbe:	1b9b      	subs	r3, r3, r6
    edc0:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    edc2:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    edc6:	d33c      	bcc.n	ee42 <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
    edc8:	4b31      	ldr	r3, [pc, #196]	; (ee90 <nvs_mount+0x270>)
    edca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    edce:	637b      	str	r3, [r7, #52]	; 0x34
    edd0:	2302      	movs	r3, #2
    edd2:	482a      	ldr	r0, [pc, #168]	; (ee7c <nvs_mount+0x25c>)
    edd4:	633b      	str	r3, [r7, #48]	; 0x30
    edd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    edda:	f017 ffcd 	bl	26d78 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    edde:	4620      	mov	r0, r4
    ede0:	6861      	ldr	r1, [r4, #4]
    ede2:	f017 ffaf 	bl	26d44 <nvs_flash_erase_sector>
		if (rc) {
    ede6:	4605      	mov	r5, r0
    ede8:	2800      	cmp	r0, #0
    edea:	d1ae      	bne.n	ed4a <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
    edec:	6863      	ldr	r3, [r4, #4]
    edee:	4a29      	ldr	r2, [pc, #164]	; (ee94 <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    edf0:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    edf2:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    edf4:	440b      	add	r3, r1
    edf6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    edfa:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    edfc:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    edfe:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    ee00:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    ee02:	f018 f8a8 	bl	26f56 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    ee06:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    ee08:	2d00      	cmp	r5, #0
    ee0a:	d06f      	beq.n	eeec <nvs_mount+0x2cc>
    ee0c:	e79d      	b.n	ed4a <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
    ee0e:	4620      	mov	r0, r4
    ee10:	1d39      	adds	r1, r7, #4
    ee12:	f017 ffbe 	bl	26d92 <nvs_ate_valid>
    ee16:	6862      	ldr	r2, [r4, #4]
    ee18:	b910      	cbnz	r0, ee20 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
    ee1a:	1b92      	subs	r2, r2, r6
    ee1c:	6062      	str	r2, [r4, #4]
    ee1e:	e7a0      	b.n	ed62 <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ee20:	893d      	ldrh	r5, [r7, #8]
    ee22:	88f9      	ldrh	r1, [r7, #6]
    ee24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    ee26:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ee2a:	4429      	add	r1, r5
    ee2c:	f017 ffa7 	bl	26d7e <nvs_al_size.isra.0>
    ee30:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    ee32:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ee34:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    ee36:	d1f0      	bne.n	ee1a <nvs_mount+0x1fa>
    ee38:	2d00      	cmp	r5, #0
    ee3a:	d0ee      	beq.n	ee1a <nvs_mount+0x1fa>
				rc = -ESPIPE;
    ee3c:	f06f 051c 	mvn.w	r5, #28
    ee40:	e09c      	b.n	ef7c <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ee42:	2308      	movs	r3, #8
    ee44:	4649      	mov	r1, r9
    ee46:	4620      	mov	r0, r4
    ee48:	f107 020c 	add.w	r2, r7, #12
    ee4c:	f017 ff07 	bl	26c5e <nvs_flash_rd>
			if (rc) {
    ee50:	4605      	mov	r5, r0
    ee52:	2800      	cmp	r0, #0
    ee54:	f47f af79 	bne.w	ed4a <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    ee58:	4620      	mov	r0, r4
    ee5a:	f107 010c 	add.w	r1, r7, #12
    ee5e:	f017 ff98 	bl	26d92 <nvs_ate_valid>
    ee62:	b130      	cbz	r0, ee72 <nvs_mount+0x252>
    ee64:	89bb      	ldrh	r3, [r7, #12]
    ee66:	4553      	cmp	r3, sl
    ee68:	d103      	bne.n	ee72 <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
    ee6a:	8a3b      	ldrh	r3, [r7, #16]
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	f000 808b 	beq.w	ef88 <nvs_mount+0x368>
			addr += ate_size;
    ee72:	44b1      	add	r9, r6
    ee74:	e7a0      	b.n	edb8 <nvs_mount+0x198>
    ee76:	bf00      	nop
    ee78:	0002ebe9 	.word	0x0002ebe9
    ee7c:	0002c88c 	.word	0x0002c88c
    ee80:	0002ec0b 	.word	0x0002ec0b
    ee84:	0002ec28 	.word	0x0002ec28
    ee88:	0002ec40 	.word	0x0002ec40
    ee8c:	0002ec54 	.word	0x0002ec54
    ee90:	0002ecb1 	.word	0x0002ecb1
    ee94:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    ee98:	4652      	mov	r2, sl
    ee9a:	4620      	mov	r0, r4
    ee9c:	1a5b      	subs	r3, r3, r1
    ee9e:	f017 ff2c 	bl	26cfa <nvs_flash_cmp_const>
		if (rc < 0) {
    eea2:	1e05      	subs	r5, r0, #0
    eea4:	f6ff af51 	blt.w	ed4a <nvs_mount+0x12a>
		if (!rc) {
    eea8:	d008      	beq.n	eebc <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    eeaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    eeac:	68a3      	ldr	r3, [r4, #8]
    eeae:	6812      	ldr	r2, [r2, #0]
    eeb0:	4413      	add	r3, r2
    eeb2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    eeb4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    eeb8:	428b      	cmp	r3, r1
    eeba:	d8ed      	bhi.n	ee98 <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    eebc:	6861      	ldr	r1, [r4, #4]
    eebe:	89a3      	ldrh	r3, [r4, #12]
    eec0:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    eec4:	429a      	cmp	r2, r3
    eec6:	d19f      	bne.n	ee08 <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    eec8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; efb8 <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    eecc:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    eece:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    eed2:	4293      	cmp	r3, r2
    eed4:	d098      	beq.n	ee08 <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    eed6:	4620      	mov	r0, r4
    eed8:	f017 ff34 	bl	26d44 <nvs_flash_erase_sector>
		if (rc) {
    eedc:	4605      	mov	r5, r0
    eede:	2800      	cmp	r0, #0
    eee0:	f47f af33 	bne.w	ed4a <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    eee4:	6863      	ldr	r3, [r4, #4]
    eee6:	ea03 0309 	and.w	r3, r3, r9
    eeea:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    eeec:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    eeee:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    eef0:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    eef4:	429a      	cmp	r2, r3
    eef6:	d03d      	beq.n	ef74 <nvs_mount+0x354>
    eef8:	4640      	mov	r0, r8
    eefa:	f012 fb57 	bl	215ac <z_impl_k_mutex_unlock>
	fs->ready = true;
    eefe:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    ef00:	46e8      	mov	r8, sp
    ef02:	b088      	sub	sp, #32
	fs->ready = true;
    ef04:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    ef06:	466d      	mov	r5, sp
    ef08:	89e2      	ldrh	r2, [r4, #14]
    ef0a:	89a3      	ldrh	r3, [r4, #12]
    ef0c:	f04f 0904 	mov.w	r9, #4
    ef10:	462e      	mov	r6, r5
    ef12:	492a      	ldr	r1, [pc, #168]	; (efbc <nvs_mount+0x39c>)
    ef14:	61eb      	str	r3, [r5, #28]
    ef16:	e9c5 1205 	strd	r1, r2, [r5, #20]
    ef1a:	f846 9f10 	str.w	r9, [r6, #16]!
    ef1e:	4632      	mov	r2, r6
    ef20:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    ef24:	4826      	ldr	r0, [pc, #152]	; (efc0 <nvs_mount+0x3a0>)
    ef26:	f017 ff27 	bl	26d78 <z_log_msg_static_create.constprop.0>
    ef2a:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
    ef2c:	6863      	ldr	r3, [r4, #4]
    ef2e:	46ad      	mov	sp, r5
    ef30:	4a24      	ldr	r2, [pc, #144]	; (efc4 <nvs_mount+0x3a4>)
    ef32:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    ef36:	616a      	str	r2, [r5, #20]
    ef38:	0c1a      	lsrs	r2, r3, #16
    ef3a:	b29b      	uxth	r3, r3
    ef3c:	61aa      	str	r2, [r5, #24]
    ef3e:	61eb      	str	r3, [r5, #28]
    ef40:	4632      	mov	r2, r6
    ef42:	481f      	ldr	r0, [pc, #124]	; (efc0 <nvs_mount+0x3a0>)
    ef44:	f8c5 9010 	str.w	r9, [r5, #16]
    ef48:	f017 ff16 	bl	26d78 <z_log_msg_static_create.constprop.0>
    ef4c:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
    ef4e:	68a3      	ldr	r3, [r4, #8]
    ef50:	46ad      	mov	sp, r5
    ef52:	4a1d      	ldr	r2, [pc, #116]	; (efc8 <nvs_mount+0x3a8>)
    ef54:	f8c5 9010 	str.w	r9, [r5, #16]
    ef58:	616a      	str	r2, [r5, #20]
    ef5a:	0c1a      	lsrs	r2, r3, #16
    ef5c:	b29b      	uxth	r3, r3
    ef5e:	61aa      	str	r2, [r5, #24]
    ef60:	61eb      	str	r3, [r5, #28]
    ef62:	4632      	mov	r2, r6
    ef64:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    ef68:	4815      	ldr	r0, [pc, #84]	; (efc0 <nvs_mount+0x3a0>)
    ef6a:	f017 ff05 	bl	26d78 <z_log_msg_static_create.constprop.0>
	return 0;
    ef6e:	2500      	movs	r5, #0
    ef70:	46c5      	mov	sp, r8
    ef72:	e672      	b.n	ec5a <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
    ef74:	4620      	mov	r0, r4
    ef76:	f017 ffd9 	bl	26f2c <nvs_add_gc_done_ate>
    ef7a:	4605      	mov	r5, r0
    ef7c:	4640      	mov	r0, r8
    ef7e:	f012 fb15 	bl	215ac <z_impl_k_mutex_unlock>
	if (rc) {
    ef82:	2d00      	cmp	r5, #0
    ef84:	d0bb      	beq.n	eefe <nvs_mount+0x2de>
    ef86:	e668      	b.n	ec5a <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
    ef88:	4b10      	ldr	r3, [pc, #64]	; (efcc <nvs_mount+0x3ac>)
    ef8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ef8e:	637b      	str	r3, [r7, #52]	; 0x34
    ef90:	2302      	movs	r3, #2
    ef92:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    ef96:	633b      	str	r3, [r7, #48]	; 0x30
    ef98:	4809      	ldr	r0, [pc, #36]	; (efc0 <nvs_mount+0x3a0>)
    ef9a:	f017 feed 	bl	26d78 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ef9e:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    efa0:	4639      	mov	r1, r7
			addr = fs->ate_wra & ADDR_SECT_MASK;
    efa2:	0c1b      	lsrs	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    efa4:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    efa6:	041b      	lsls	r3, r3, #16
    efa8:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
    efaa:	f017 fe66 	bl	26c7a <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    efae:	4620      	mov	r0, r4
    efb0:	6839      	ldr	r1, [r7, #0]
    efb2:	f017 fec7 	bl	26d44 <nvs_flash_erase_sector>
    efb6:	e726      	b.n	ee06 <nvs_mount+0x1e6>
    efb8:	ffff0000 	.word	0xffff0000
    efbc:	0002ec77 	.word	0x0002ec77
    efc0:	0002c88c 	.word	0x0002c88c
    efc4:	0002ec8e 	.word	0x0002ec8e
    efc8:	0002eca0 	.word	0x0002eca0
    efcc:	0002ecd8 	.word	0x0002ecd8

0000efd0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efd4:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    efd6:	7c03      	ldrb	r3, [r0, #16]
{
    efd8:	4604      	mov	r4, r0
    efda:	4689      	mov	r9, r1
    efdc:	4690      	mov	r8, r2
    efde:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    efe0:	b97b      	cbnz	r3, f002 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
    efe2:	4b66      	ldr	r3, [pc, #408]	; (f17c <nvs_write+0x1ac>)
		return -EACCES;
    efe4:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
    efe8:	930b      	str	r3, [sp, #44]	; 0x2c
    efea:	2302      	movs	r3, #2
    efec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    eff0:	4863      	ldr	r0, [pc, #396]	; (f180 <nvs_write+0x1b0>)
    eff2:	aa0a      	add	r2, sp, #40	; 0x28
    eff4:	930a      	str	r3, [sp, #40]	; 0x28
    eff6:	f017 febf 	bl	26d78 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    effa:	4630      	mov	r0, r6
    effc:	b00d      	add	sp, #52	; 0x34
    effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f002:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    f004:	2108      	movs	r1, #8
    f006:	4610      	mov	r0, r2
    f008:	f017 feb9 	bl	26d7e <nvs_al_size.isra.0>
    f00c:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    f00e:	4629      	mov	r1, r5
    f010:	4610      	mov	r0, r2
    f012:	f017 feb4 	bl	26d7e <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f016:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    f018:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f01a:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    f01e:	42ab      	cmp	r3, r5
    f020:	f0c0 80a9 	bcc.w	f176 <nvs_write+0x1a6>
    f024:	b11d      	cbz	r5, f02e <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    f026:	f1b8 0f00 	cmp.w	r8, #0
    f02a:	f000 80a4 	beq.w	f176 <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    f02e:	6863      	ldr	r3, [r4, #4]
    f030:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f032:	4620      	mov	r0, r4
    f034:	aa04      	add	r2, sp, #16
    f036:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    f038:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f03c:	f017 fee1 	bl	26e02 <nvs_prev_ate>
		if (rc) {
    f040:	4606      	mov	r6, r0
    f042:	2800      	cmp	r0, #0
    f044:	d1d9      	bne.n	effa <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f046:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f04a:	454b      	cmp	r3, r9
    f04c:	d005      	beq.n	f05a <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    f04e:	6862      	ldr	r2, [r4, #4]
    f050:	9b03      	ldr	r3, [sp, #12]
    f052:	429a      	cmp	r2, r3
    f054:	d1ed      	bne.n	f032 <nvs_write+0x62>
		if (len == 0) {
    f056:	b9e5      	cbnz	r5, f092 <nvs_write+0xc2>
    f058:	e7cf      	b.n	effa <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f05a:	4620      	mov	r0, r4
    f05c:	a904      	add	r1, sp, #16
    f05e:	f017 fe98 	bl	26d92 <nvs_ate_valid>
    f062:	2800      	cmp	r0, #0
    f064:	d0f3      	beq.n	f04e <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
    f066:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
    f06a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    f06e:	b175      	cbz	r5, f08e <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    f070:	42ab      	cmp	r3, r5
    f072:	d10e      	bne.n	f092 <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
    f074:	ea4f 411b 	mov.w	r1, fp, lsr #16
    f078:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    f07a:	4401      	add	r1, r0
    f07c:	462b      	mov	r3, r5
    f07e:	4642      	mov	r2, r8
    f080:	4620      	mov	r0, r4
    f082:	f017 fe07 	bl	26c94 <nvs_flash_block_cmp>
			if (rc <= 0) {
    f086:	2800      	cmp	r0, #0
    f088:	dc03      	bgt.n	f092 <nvs_write+0xc2>
    f08a:	4606      	mov	r6, r0
    f08c:	e7b5      	b.n	effa <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    f08e:	2b00      	cmp	r3, #0
    f090:	d0b3      	beq.n	effa <nvs_write+0x2a>
	if (data_size) {
    f092:	2f00      	cmp	r7, #0
    f094:	d13e      	bne.n	f114 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    f096:	f104 0314 	add.w	r3, r4, #20
    f09a:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f09c:	f04f 32ff 	mov.w	r2, #4294967295
    f0a0:	f04f 33ff 	mov.w	r3, #4294967295
    f0a4:	f104 0014 	add.w	r0, r4, #20
    f0a8:	f012 f9b0 	bl	2140c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    f0ac:	f8df b0d4 	ldr.w	fp, [pc, #212]	; f184 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    f0b0:	89e3      	ldrh	r3, [r4, #14]
    f0b2:	429e      	cmp	r6, r3
    f0b4:	d05c      	beq.n	f170 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    f0b6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f0ba:	18f9      	adds	r1, r7, r3
    f0bc:	428a      	cmp	r2, r1
    f0be:	d32c      	bcc.n	f11a <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f0c0:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    f0c4:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    f0c6:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    f0c8:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    f0cc:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    f0d0:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
    f0d4:	f017 fe08 	bl	26ce8 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f0d8:	462b      	mov	r3, r5
    f0da:	4642      	mov	r2, r8
    f0dc:	68a1      	ldr	r1, [r4, #8]
    f0de:	4620      	mov	r0, r4
    f0e0:	f017 fed9 	bl	26e96 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    f0e4:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f0e6:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    f0e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f0ea:	f017 fe48 	bl	26d7e <nvs_al_size.isra.0>
    f0ee:	68a2      	ldr	r2, [r4, #8]
    f0f0:	4402      	add	r2, r0
    f0f2:	60a2      	str	r2, [r4, #8]
	if (rc) {
    f0f4:	f1ba 0f00 	cmp.w	sl, #0
    f0f8:	d107      	bne.n	f10a <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
    f0fa:	4620      	mov	r0, r4
    f0fc:	a906      	add	r1, sp, #24
    f0fe:	f017 ff04 	bl	26f0a <nvs_flash_ate_wrt>
	rc = len;
    f102:	2800      	cmp	r0, #0
    f104:	bf14      	ite	ne
    f106:	4682      	movne	sl, r0
    f108:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    f10a:	9801      	ldr	r0, [sp, #4]
    f10c:	f012 fa4e 	bl	215ac <z_impl_k_mutex_unlock>
	return rc;
    f110:	4656      	mov	r6, sl
    f112:	e772      	b.n	effa <nvs_write+0x2a>
		required_space = data_size + ate_size;
    f114:	4457      	add	r7, sl
    f116:	b2bf      	uxth	r7, r7
    f118:	e7bd      	b.n	f096 <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f11a:	2108      	movs	r1, #8
    f11c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f11e:	f017 fe2e 	bl	26d7e <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    f122:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f126:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    f12a:	2300      	movs	r3, #0
    f12c:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    f130:	1813      	adds	r3, r2, r0
    f132:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    f136:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    f138:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    f13c:	441a      	add	r2, r3
    f13e:	1a10      	subs	r0, r2, r0
    f140:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    f142:	a806      	add	r0, sp, #24
    f144:	f017 fdd0 	bl	26ce8 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    f148:	a906      	add	r1, sp, #24
    f14a:	4620      	mov	r0, r4
    f14c:	f017 fedd 	bl	26f0a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    f150:	4620      	mov	r0, r4
    f152:	1d21      	adds	r1, r4, #4
    f154:	f017 fd91 	bl	26c7a <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f158:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    f15a:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f15c:	ea03 030b 	and.w	r3, r3, fp
    f160:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f162:	f017 fef8 	bl	26f56 <nvs_gc>
		if (rc) {
    f166:	4682      	mov	sl, r0
    f168:	2800      	cmp	r0, #0
    f16a:	d1ce      	bne.n	f10a <nvs_write+0x13a>
		gc_count++;
    f16c:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    f16e:	e79f      	b.n	f0b0 <nvs_write+0xe0>
			rc = -ENOSPC;
    f170:	f06f 0a1b 	mvn.w	sl, #27
    f174:	e7c9      	b.n	f10a <nvs_write+0x13a>
		return -EINVAL;
    f176:	f06f 0615 	mvn.w	r6, #21
    f17a:	e73e      	b.n	effa <nvs_write+0x2a>
    f17c:	0002ebd5 	.word	0x0002ebd5
    f180:	0002c88c 	.word	0x0002c88c
    f184:	ffff0000 	.word	0xffff0000

0000f188 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    f188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f18c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    f18e:	7c03      	ldrb	r3, [r0, #16]
{
    f190:	b088      	sub	sp, #32
    f192:	4604      	mov	r4, r0
    f194:	460f      	mov	r7, r1
    f196:	4690      	mov	r8, r2
    f198:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    f19c:	b973      	cbnz	r3, f1bc <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
    f19e:	4b2f      	ldr	r3, [pc, #188]	; (f25c <nvs_read_hist+0xd4>)
    f1a0:	482f      	ldr	r0, [pc, #188]	; (f260 <nvs_read_hist+0xd8>)
    f1a2:	9307      	str	r3, [sp, #28]
    f1a4:	2302      	movs	r3, #2
    f1a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f1aa:	aa06      	add	r2, sp, #24
    f1ac:	9306      	str	r3, [sp, #24]
    f1ae:	f017 fde3 	bl	26d78 <z_log_msg_static_create.constprop.0>
		return -EACCES;
    f1b2:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    f1b6:	b008      	add	sp, #32
    f1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f1bc:	2108      	movs	r1, #8
    f1be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f1c0:	f017 fddd 	bl	26d7e <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    f1c4:	89a3      	ldrh	r3, [r4, #12]
    f1c6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    f1ca:	42b3      	cmp	r3, r6
    f1cc:	d343      	bcc.n	f256 <nvs_read_hist+0xce>
	cnt_his = 0U;
    f1ce:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    f1d0:	f8d4 a004 	ldr.w	sl, [r4, #4]
    f1d4:	f8cd a004 	str.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f1d8:	454d      	cmp	r5, r9
    f1da:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    f1dc:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f1e0:	d909      	bls.n	f1f6 <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f1e2:	6863      	ldr	r3, [r4, #4]
    f1e4:	4553      	cmp	r3, sl
    f1e6:	d11e      	bne.n	f226 <nvs_read_hist+0x9e>
    f1e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f1ec:	42bb      	cmp	r3, r7
    f1ee:	d01a      	beq.n	f226 <nvs_read_hist+0x9e>
		return -ENOENT;
    f1f0:	f06f 0001 	mvn.w	r0, #1
    f1f4:	e7df      	b.n	f1b6 <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f1f6:	4620      	mov	r0, r4
    f1f8:	aa02      	add	r2, sp, #8
    f1fa:	a901      	add	r1, sp, #4
    f1fc:	f017 fe01 	bl	26e02 <nvs_prev_ate>
		if (rc) {
    f200:	2800      	cmp	r0, #0
    f202:	d1d8      	bne.n	f1b6 <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    f204:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f208:	42bb      	cmp	r3, r7
    f20a:	d106      	bne.n	f21a <nvs_read_hist+0x92>
    f20c:	4620      	mov	r0, r4
    f20e:	a902      	add	r1, sp, #8
    f210:	f017 fdbf 	bl	26d92 <nvs_ate_valid>
    f214:	b108      	cbz	r0, f21a <nvs_read_hist+0x92>
			cnt_his++;
    f216:	3501      	adds	r5, #1
    f218:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    f21a:	6862      	ldr	r2, [r4, #4]
    f21c:	9b01      	ldr	r3, [sp, #4]
    f21e:	429a      	cmp	r2, r3
    f220:	d1da      	bne.n	f1d8 <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
    f222:	4651      	mov	r1, sl
    f224:	e7e0      	b.n	f1e8 <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f226:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f22a:	2b00      	cmp	r3, #0
    f22c:	d0e0      	beq.n	f1f0 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f22e:	45a9      	cmp	r9, r5
    f230:	d8de      	bhi.n	f1f0 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
    f232:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    f236:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f238:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    f23a:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f23e:	bf28      	it	cs
    f240:	4633      	movcs	r3, r6
    f242:	4401      	add	r1, r0
    f244:	4642      	mov	r2, r8
    f246:	4620      	mov	r0, r4
    f248:	f017 fd09 	bl	26c5e <nvs_flash_rd>
	if (rc) {
    f24c:	2800      	cmp	r0, #0
    f24e:	d1b2      	bne.n	f1b6 <nvs_read_hist+0x2e>
	return wlk_ate.len;
    f250:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    f254:	e7af      	b.n	f1b6 <nvs_read_hist+0x2e>
		return -EINVAL;
    f256:	f06f 0015 	mvn.w	r0, #21
    f25a:	e7ac      	b.n	f1b6 <nvs_read_hist+0x2e>
    f25c:	0002ebd5 	.word	0x0002ebd5
    f260:	0002c88c 	.word	0x0002c88c

0000f264 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    f264:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    f266:	b970      	cbnz	r0, f286 <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    f268:	4b12      	ldr	r3, [pc, #72]	; (f2b4 <ipc_service_open_instance+0x50>)
    f26a:	4813      	ldr	r0, [pc, #76]	; (f2b8 <ipc_service_open_instance+0x54>)
    f26c:	9305      	str	r3, [sp, #20]
    f26e:	2302      	movs	r3, #2
    f270:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f274:	aa04      	add	r2, sp, #16
    f276:	9304      	str	r3, [sp, #16]
    f278:	f017 ff45 	bl	27106 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f27c:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    f280:	b007      	add	sp, #28
    f282:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    f286:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    f288:	b963      	cbnz	r3, f2a4 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    f28a:	4b0c      	ldr	r3, [pc, #48]	; (f2bc <ipc_service_open_instance+0x58>)
    f28c:	480a      	ldr	r0, [pc, #40]	; (f2b8 <ipc_service_open_instance+0x54>)
    f28e:	9305      	str	r3, [sp, #20]
    f290:	2302      	movs	r3, #2
    f292:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f296:	aa04      	add	r2, sp, #16
    f298:	9304      	str	r3, [sp, #16]
    f29a:	f017 ff34 	bl	27106 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f29e:	f06f 0004 	mvn.w	r0, #4
    f2a2:	e7ed      	b.n	f280 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    f2a4:	681b      	ldr	r3, [r3, #0]
    f2a6:	b11b      	cbz	r3, f2b0 <ipc_service_open_instance+0x4c>
}
    f2a8:	b007      	add	sp, #28
    f2aa:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    f2ae:	4718      	bx	r3
		return 0;
    f2b0:	4618      	mov	r0, r3
    f2b2:	e7e5      	b.n	f280 <ipc_service_open_instance+0x1c>
    f2b4:	0002ecf4 	.word	0x0002ecf4
    f2b8:	0002c894 	.word	0x0002c894
    f2bc:	0002ed05 	.word	0x0002ed05

0000f2c0 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    f2c0:	b530      	push	{r4, r5, lr}
    f2c2:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    f2c4:	b108      	cbz	r0, f2ca <ipc_service_register_endpoint+0xa>
    f2c6:	b101      	cbz	r1, f2ca <ipc_service_register_endpoint+0xa>
    f2c8:	b96a      	cbnz	r2, f2e6 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    f2ca:	4b13      	ldr	r3, [pc, #76]	; (f318 <ipc_service_register_endpoint+0x58>)
    f2cc:	4813      	ldr	r0, [pc, #76]	; (f31c <ipc_service_register_endpoint+0x5c>)
    f2ce:	9305      	str	r3, [sp, #20]
    f2d0:	2302      	movs	r3, #2
    f2d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f2d6:	aa04      	add	r2, sp, #16
    f2d8:	9304      	str	r3, [sp, #16]
    f2da:	f017 ff14 	bl	27106 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f2de:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    f2e2:	b007      	add	sp, #28
    f2e4:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    f2e6:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    f2e8:	b10c      	cbz	r4, f2ee <ipc_service_register_endpoint+0x2e>
    f2ea:	68e5      	ldr	r5, [r4, #12]
    f2ec:	b965      	cbnz	r5, f308 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    f2ee:	4b0c      	ldr	r3, [pc, #48]	; (f320 <ipc_service_register_endpoint+0x60>)
    f2f0:	480a      	ldr	r0, [pc, #40]	; (f31c <ipc_service_register_endpoint+0x5c>)
    f2f2:	9305      	str	r3, [sp, #20]
    f2f4:	2302      	movs	r3, #2
    f2f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f2fa:	aa04      	add	r2, sp, #16
    f2fc:	9304      	str	r3, [sp, #16]
    f2fe:	f017 ff02 	bl	27106 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f302:	f06f 0004 	mvn.w	r0, #4
    f306:	e7ec      	b.n	f2e2 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    f308:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    f30c:	68e3      	ldr	r3, [r4, #12]
}
    f30e:	b007      	add	sp, #28
    f310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    f314:	4718      	bx	r3
    f316:	bf00      	nop
    f318:	0002ed23 	.word	0x0002ed23
    f31c:	0002c894 	.word	0x0002c894
    f320:	0002ed05 	.word	0x0002ed05

0000f324 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    f324:	b530      	push	{r4, r5, lr}
    f326:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    f328:	4604      	mov	r4, r0
{
    f32a:	b087      	sub	sp, #28
	if (!ept) {
    f32c:	b968      	cbnz	r0, f34a <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    f32e:	4b1a      	ldr	r3, [pc, #104]	; (f398 <ipc_service_send+0x74>)
    f330:	481a      	ldr	r0, [pc, #104]	; (f39c <ipc_service_send+0x78>)
    f332:	9305      	str	r3, [sp, #20]
    f334:	2302      	movs	r3, #2
    f336:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f33a:	aa04      	add	r2, sp, #16
    f33c:	9304      	str	r3, [sp, #16]
    f33e:	f017 fee2 	bl	27106 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f342:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    f346:	b007      	add	sp, #28
    f348:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    f34a:	6800      	ldr	r0, [r0, #0]
    f34c:	b960      	cbnz	r0, f368 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    f34e:	4b14      	ldr	r3, [pc, #80]	; (f3a0 <ipc_service_send+0x7c>)
    f350:	4812      	ldr	r0, [pc, #72]	; (f39c <ipc_service_send+0x78>)
    f352:	9305      	str	r3, [sp, #20]
    f354:	2302      	movs	r3, #2
    f356:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f35a:	aa04      	add	r2, sp, #16
    f35c:	9304      	str	r3, [sp, #16]
    f35e:	f017 fed2 	bl	27106 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    f362:	f06f 0001 	mvn.w	r0, #1
    f366:	e7ee      	b.n	f346 <ipc_service_send+0x22>
	backend = ept->instance->api;
    f368:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    f36a:	b10a      	cbz	r2, f370 <ipc_service_send+0x4c>
    f36c:	6895      	ldr	r5, [r2, #8]
    f36e:	b965      	cbnz	r5, f38a <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    f370:	4b0c      	ldr	r3, [pc, #48]	; (f3a4 <ipc_service_send+0x80>)
    f372:	480a      	ldr	r0, [pc, #40]	; (f39c <ipc_service_send+0x78>)
    f374:	9305      	str	r3, [sp, #20]
    f376:	2302      	movs	r3, #2
    f378:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f37c:	aa04      	add	r2, sp, #16
    f37e:	9304      	str	r3, [sp, #16]
    f380:	f017 fec1 	bl	27106 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f384:	f06f 0004 	mvn.w	r0, #4
    f388:	e7dd      	b.n	f346 <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    f38a:	460a      	mov	r2, r1
    f38c:	46ac      	mov	ip, r5
    f38e:	6861      	ldr	r1, [r4, #4]
}
    f390:	b007      	add	sp, #28
    f392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    f396:	4760      	bx	ip
    f398:	0002ed4f 	.word	0x0002ed4f
    f39c:	0002c894 	.word	0x0002c894
    f3a0:	0002ed60 	.word	0x0002ed60
    f3a4:	0002ed05 	.word	0x0002ed05

0000f3a8 <shared_memory_prepare>:
    f3a8:	2000      	movs	r0, #0
    f3aa:	4b01      	ldr	r3, [pc, #4]	; (f3b0 <shared_memory_prepare+0x8>)
    f3ac:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    f3ae:	4770      	bx	lr
    f3b0:	20070000 	.word	0x20070000

0000f3b4 <advertise_ept>:
{
    f3b4:	b530      	push	{r4, r5, lr}
    f3b6:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f3b8:	490e      	ldr	r1, [pc, #56]	; (f3f4 <advertise_ept+0x40>)
{
    f3ba:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f3bc:	9102      	str	r1, [sp, #8]
    f3be:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    f3c2:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f3c4:	e9cd 3100 	strd	r3, r1, [sp]
    f3c8:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f3cc:	f04f 33ff 	mov.w	r3, #4294967295
    f3d0:	4620      	mov	r0, r4
    f3d2:	f010 ff4f 	bl	20274 <rpmsg_create_ept>
	if (err != 0) {
    f3d6:	b950      	cbnz	r0, f3ee <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    f3d8:	2301      	movs	r3, #1
    f3da:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    f3de:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    f3e2:	b123      	cbz	r3, f3ee <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    f3e4:	4620      	mov	r0, r4
}
    f3e6:	b005      	add	sp, #20
    f3e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    f3ec:	4718      	bx	r3
}
    f3ee:	b005      	add	sp, #20
    f3f0:	bd30      	pop	{r4, r5, pc}
    f3f2:	bf00      	nop
    f3f4:	000271fd 	.word	0x000271fd

0000f3f8 <get_ept>:
{
    f3f8:	b538      	push	{r3, r4, r5, lr}
    f3fa:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f3fc:	4611      	mov	r1, r2
{
    f3fe:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f400:	f017 fefe 	bl	27200 <get_ept_slot_with_name>
	if (ept != NULL) {
    f404:	4603      	mov	r3, r0
    f406:	b938      	cbnz	r0, f418 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f408:	4628      	mov	r0, r5
    f40a:	4904      	ldr	r1, [pc, #16]	; (f41c <get_ept+0x24>)
    f40c:	f017 fef8 	bl	27200 <get_ept_slot_with_name>
    f410:	4603      	mov	r3, r0
	if (ept != NULL) {
    f412:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    f414:	6023      	str	r3, [r4, #0]
}
    f416:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    f418:	2001      	movs	r0, #1
    f41a:	e7fb      	b.n	f414 <get_ept+0x1c>
    f41c:	00031893 	.word	0x00031893

0000f420 <open>:
{
    f420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f424:	2301      	movs	r3, #1
    f426:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    f428:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f42a:	6846      	ldr	r6, [r0, #4]
{
    f42c:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    f42e:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f432:	e8d7 2fef 	ldaex	r2, [r7]
    f436:	2a00      	cmp	r2, #0
    f438:	d103      	bne.n	f442 <open+0x22>
    f43a:	e8c7 3fe1 	stlex	r1, r3, [r7]
    f43e:	2900      	cmp	r1, #0
    f440:	d1f7      	bne.n	f432 <open+0x12>
    f442:	f040 80b8 	bne.w	f5b6 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    f446:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f448:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    f44a:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f44c:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    f44e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    f452:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    f456:	bf26      	itte	cs
    f458:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    f45c:	fab3 f383 	clzcs	r3, r3
		return 0;
    f460:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    f462:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    f466:	bf28      	it	cs
    f468:	f1c3 0320 	rsbcs	r3, r3, #32
    f46c:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    f46e:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    f470:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    f474:	f000 8099 	beq.w	f5aa <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    f478:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f47a:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    f47c:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    f47e:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    f480:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    f484:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f486:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    f488:	3209      	adds	r2, #9
    f48a:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    f48e:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    f490:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    f494:	440a      	add	r2, r1
	return (buf_size * num);
    f496:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f498:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    f49c:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    f49e:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    f4a2:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    f4a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f4a8:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    f4aa:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    f4ae:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    f4b2:	3303      	adds	r3, #3
    f4b4:	4413      	add	r3, r2
    f4b6:	f023 0303 	bic.w	r3, r3, #3
    f4ba:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    f4be:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    f4c0:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    f4c4:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    f4c8:	4b3c      	ldr	r3, [pc, #240]	; (f5bc <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f4ca:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    f4cc:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f4d0:	6831      	ldr	r1, [r6, #0]
    f4d2:	f000 fa1d 	bl	f910 <ipc_static_vrings_init>
	if (err != 0) {
    f4d6:	4604      	mov	r4, r0
    f4d8:	bb30      	cbnz	r0, f528 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    f4da:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    f4de:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f4e2:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    f4e6:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f4ea:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    f4ec:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f4ee:	bf08      	it	eq
    f4f0:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    f4f2:	f012 fd61 	bl	21fb8 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    f4f6:	2300      	movs	r3, #0
    f4f8:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    f4fc:	4930      	ldr	r1, [pc, #192]	; (f5c0 <open+0x1a0>)
    f4fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f502:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    f506:	9300      	str	r3, [sp, #0]
    f508:	4658      	mov	r0, fp
    f50a:	4623      	mov	r3, r4
    f50c:	f012 fd6e 	bl	21fec <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    f510:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    f514:	492b      	ldr	r1, [pc, #172]	; (f5c4 <open+0x1a4>)
    f516:	f012 fc83 	bl	21e20 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    f51a:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    f51e:	6883      	ldr	r3, [r0, #8]
    f520:	685c      	ldr	r4, [r3, #4]
    f522:	b91c      	cbnz	r4, f52c <open+0x10c>
		return -ENOSYS;
    f524:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    f528:	2100      	movs	r1, #0
    f52a:	e037      	b.n	f59c <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f52c:	464b      	mov	r3, r9
    f52e:	4a26      	ldr	r2, [pc, #152]	; (f5c8 <open+0x1a8>)
    f530:	f8da 1018 	ldr.w	r1, [sl, #24]
    f534:	47a0      	blx	r4
	if (err != 0) {
    f536:	4604      	mov	r4, r0
    f538:	2800      	cmp	r0, #0
    f53a:	d1f5      	bne.n	f528 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    f53c:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    f540:	6883      	ldr	r3, [r0, #8]
    f542:	691b      	ldr	r3, [r3, #16]
    f544:	2b00      	cmp	r3, #0
    f546:	d0ed      	beq.n	f524 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    f548:	2201      	movs	r2, #1
    f54a:	f8da 1018 	ldr.w	r1, [sl, #24]
    f54e:	4798      	blx	r3
	if (err != 0) {
    f550:	4604      	mov	r4, r0
    f552:	2800      	cmp	r0, #0
    f554:	d1e8      	bne.n	f528 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    f556:	4b1d      	ldr	r3, [pc, #116]	; (f5cc <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f558:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    f55a:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    f55e:	4b1c      	ldr	r3, [pc, #112]	; (f5d0 <open+0x1b0>)
    f560:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f564:	4b1b      	ldr	r3, [pc, #108]	; (f5d4 <open+0x1b4>)
    f566:	9303      	str	r3, [sp, #12]
    f568:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    f56c:	9302      	str	r3, [sp, #8]
    f56e:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    f572:	e9cd 8300 	strd	r8, r3, [sp]
    f576:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    f57a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    f57c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f580:	f000 f98e 	bl	f8a0 <ipc_rpmsg_init>
	if (err != 0) {
    f584:	4604      	mov	r4, r0
    f586:	2800      	cmp	r0, #0
    f588:	d1ce      	bne.n	f528 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f58a:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    f58e:	f011 f815 	bl	205bc <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    f592:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f594:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    f598:	db0a      	blt.n	f5b0 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    f59a:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    f59c:	4638      	mov	r0, r7
    f59e:	f017 fe64 	bl	2726a <atomic_set.isra.0>
}
    f5a2:	4620      	mov	r0, r4
    f5a4:	b005      	add	sp, #20
    f5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f5aa:	f06f 040b 	mvn.w	r4, #11
    f5ae:	e7bb      	b.n	f528 <open+0x108>
		err = -EINVAL;
    f5b0:	f06f 0415 	mvn.w	r4, #21
    f5b4:	e7b8      	b.n	f528 <open+0x108>
		return -EALREADY;
    f5b6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f5ba:	e7f2      	b.n	f5a2 <open+0x182>
    f5bc:	00027253 	.word	0x00027253
    f5c0:	20031f50 	.word	0x20031f50
    f5c4:	00027239 	.word	0x00027239
    f5c8:	0002722d 	.word	0x0002722d
    f5cc:	0000f69d 	.word	0x0000f69d
    f5d0:	0002730b 	.word	0x0002730b
    f5d4:	0002729b 	.word	0x0002729b

0000f5d8 <close>:
{
    f5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f5dc:	4606      	mov	r6, r0
    f5de:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    f5e2:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f5e4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    f5e8:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f5ec:	e8d7 3fef 	ldaex	r3, [r7]
    f5f0:	2b02      	cmp	r3, #2
    f5f2:	d103      	bne.n	f5fc <close+0x24>
    f5f4:	e8c7 9fe2 	stlex	r2, r9, [r7]
    f5f8:	2a00      	cmp	r2, #0
    f5fa:	d1f7      	bne.n	f5ec <close+0x14>
    f5fc:	d149      	bne.n	f692 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    f5fe:	4826      	ldr	r0, [pc, #152]	; (f698 <close+0xc0>)
    f600:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f604:	f7f9 fea2 	bl	934c <strcmp>
    f608:	b120      	cbz	r0, f614 <close+0x3c>
		return -EBUSY;
    f60a:	f06f 040f 	mvn.w	r4, #15
}
    f60e:	4620      	mov	r0, r4
    f610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    f614:	4820      	ldr	r0, [pc, #128]	; (f698 <close+0xc0>)
    f616:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    f61a:	f7f9 fe97 	bl	934c <strcmp>
    f61e:	2800      	cmp	r0, #0
    f620:	d1f3      	bne.n	f60a <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    f622:	4628      	mov	r0, r5
    f624:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f628:	f017 fea2 	bl	27370 <ipc_rpmsg_deinit>
	if (err != 0) {
    f62c:	4604      	mov	r4, r0
    f62e:	bb70      	cbnz	r0, f68e <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    f630:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    f632:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    f634:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    f636:	6883      	ldr	r3, [r0, #8]
    f638:	691b      	ldr	r3, [r3, #16]
    f63a:	b333      	cbz	r3, f68a <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    f63c:	4622      	mov	r2, r4
    f63e:	6989      	ldr	r1, [r1, #24]
    f640:	4798      	blx	r3
	if (err != 0) {
    f642:	4604      	mov	r4, r0
    f644:	bb18      	cbnz	r0, f68e <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    f646:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    f64a:	4649      	mov	r1, r9
    f64c:	4630      	mov	r0, r6
    f64e:	f012 fd35 	bl	220bc <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    f652:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    f654:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    f658:	f001 fd68 	bl	1112c <z_impl_k_thread_abort>
    f65c:	4630      	mov	r0, r6
    f65e:	f8d8 1000 	ldr.w	r1, [r8]
    f662:	f017 fec2 	bl	273ea <ipc_static_vrings_deinit>
	if (err != 0) {
    f666:	4604      	mov	r4, r0
    f668:	b988      	cbnz	r0, f68e <close+0xb6>
    f66a:	4601      	mov	r1, r0
    f66c:	22e8      	movs	r2, #232	; 0xe8
    f66e:	4630      	mov	r0, r6
    f670:	f01c f996 	bl	2b9a0 <memset>
    f674:	4621      	mov	r1, r4
    f676:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    f67a:	4628      	mov	r0, r5
    f67c:	f01c f990 	bl	2b9a0 <memset>
	atomic_set(&data->state, STATE_READY);
    f680:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    f682:	4638      	mov	r0, r7
    f684:	f017 fdf1 	bl	2726a <atomic_set.isra.0>
	return err;
    f688:	e7c1      	b.n	f60e <close+0x36>
		return -ENOSYS;
    f68a:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    f68e:	2102      	movs	r1, #2
    f690:	e7f7      	b.n	f682 <close+0xaa>
		return -EALREADY;
    f692:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f696:	e7ba      	b.n	f60e <close+0x36>
    f698:	00031893 	.word	0x00031893

0000f69c <bound_cb>:
{
    f69c:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    f69e:	4604      	mov	r4, r0
    f6a0:	b140      	cbz	r0, f6b4 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    f6a2:	2300      	movs	r3, #0
    f6a4:	2201      	movs	r2, #1
    f6a6:	e9cd 3200 	strd	r3, r2, [sp]
    f6aa:	4b07      	ldr	r3, [pc, #28]	; (f6c8 <bound_cb+0x2c>)
    f6ac:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f6b0:	f010 fd94 	bl	201dc <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    f6b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f6b6:	681b      	ldr	r3, [r3, #0]
    f6b8:	b123      	cbz	r3, f6c4 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    f6ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    f6bc:	b002      	add	sp, #8
    f6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    f6c2:	4718      	bx	r3
}
    f6c4:	b002      	add	sp, #8
    f6c6:	bd10      	pop	{r4, pc}
    f6c8:	00031893 	.word	0x00031893

0000f6cc <send>:
{
    f6cc:	b513      	push	{r0, r1, r4, lr}
    f6ce:	4604      	mov	r4, r0
    f6d0:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f6d2:	6921      	ldr	r1, [r4, #16]
    f6d4:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    f6d8:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    f6dc:	2902      	cmp	r1, #2
    f6de:	d110      	bne.n	f702 <send+0x36>
	if (len == 0) {
    f6e0:	b193      	cbz	r3, f708 <send+0x3c>
	if (!rpmsg_ept) {
    f6e2:	b1a0      	cbz	r0, f70e <send+0x42>
    f6e4:	2101      	movs	r1, #1
    f6e6:	e9cd 3100 	strd	r3, r1, [sp]
    f6ea:	4613      	mov	r3, r2
    f6ec:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f6f0:	f010 fd74 	bl	201dc <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    f6f4:	4b07      	ldr	r3, [pc, #28]	; (f714 <send+0x48>)
		return -ENOMEM;
    f6f6:	4298      	cmp	r0, r3
    f6f8:	bf08      	it	eq
    f6fa:	f06f 000b 	mvneq.w	r0, #11
}
    f6fe:	b002      	add	sp, #8
    f700:	bd10      	pop	{r4, pc}
		return -EBUSY;
    f702:	f06f 000f 	mvn.w	r0, #15
    f706:	e7fa      	b.n	f6fe <send+0x32>
		return -EBADMSG;
    f708:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f70c:	e7f7      	b.n	f6fe <send+0x32>
		return -ENOENT;
    f70e:	f06f 0001 	mvn.w	r0, #1
    f712:	e7f4      	b.n	f6fe <send+0x32>
    f714:	fffff82e 	.word	0xfffff82e

0000f718 <register_ept>:
{
    f718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f71c:	4688      	mov	r8, r1
    f71e:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    f720:	6906      	ldr	r6, [r0, #16]
    f722:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    f726:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    f72a:	2b02      	cmp	r3, #2
    f72c:	d15f      	bne.n	f7ee <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    f72e:	6813      	ldr	r3, [r2, #0]
    f730:	b923      	cbnz	r3, f73c <register_ept+0x24>
		return -EINVAL;
    f732:	f06f 0015 	mvn.w	r0, #21
}
    f736:	b003      	add	sp, #12
    f738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	2b00      	cmp	r3, #0
    f740:	d0f7      	beq.n	f732 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    f742:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    f746:	f1b9 0f00 	cmp.w	r9, #0
    f74a:	d133      	bne.n	f7b4 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    f74c:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    f750:	f04f 32ff 	mov.w	r2, #4294967295
    f754:	f04f 33ff 	mov.w	r3, #4294967295
    f758:	4638      	mov	r0, r7
    f75a:	f011 fe57 	bl	2140c <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    f75e:	4630      	mov	r0, r6
    f760:	682a      	ldr	r2, [r5, #0]
    f762:	a901      	add	r1, sp, #4
    f764:	f7ff fe48 	bl	f3f8 <get_ept>
	if (rpmsg_ept == NULL) {
    f768:	9c01      	ldr	r4, [sp, #4]
    f76a:	b91c      	cbnz	r4, f774 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f76c:	4638      	mov	r0, r7
    f76e:	f017 fd7a 	bl	27266 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    f772:	e7de      	b.n	f732 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    f774:	f105 0308 	add.w	r3, r5, #8
    f778:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    f77a:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    f77c:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    f780:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    f782:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    f784:	b160      	cbz	r0, f7a0 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f786:	4638      	mov	r0, r7
    f788:	f017 fd6d 	bl	27266 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    f78c:	4621      	mov	r1, r4
    f78e:	4630      	mov	r0, r6
    f790:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f792:	682a      	ldr	r2, [r5, #0]
    f794:	f7ff fe0e 	bl	f3b4 <advertise_ept>
	return 0;
    f798:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    f79a:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    f79e:	e7ca      	b.n	f736 <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    f7a0:	2220      	movs	r2, #32
    f7a2:	6829      	ldr	r1, [r5, #0]
    f7a4:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f7a8:	f01c fa3c 	bl	2bc24 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f7ac:	4638      	mov	r0, r7
    f7ae:	f017 fd5a 	bl	27266 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    f7b2:	e7f1      	b.n	f798 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f7b4:	4630      	mov	r0, r6
    f7b6:	490f      	ldr	r1, [pc, #60]	; (f7f4 <register_ept+0xdc>)
    f7b8:	f017 fd22 	bl	27200 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    f7bc:	4604      	mov	r4, r0
    f7be:	2800      	cmp	r0, #0
    f7c0:	d0b7      	beq.n	f732 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    f7c2:	f105 0308 	add.w	r3, r5, #8
    f7c6:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    f7c8:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    f7ca:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    f7cc:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    f7ce:	2300      	movs	r3, #0
    f7d0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    f7d4:	2220      	movs	r2, #32
    f7d6:	6829      	ldr	r1, [r5, #0]
    f7d8:	3040      	adds	r0, #64	; 0x40
    f7da:	f01c fa23 	bl	2bc24 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    f7de:	4622      	mov	r2, r4
    f7e0:	2101      	movs	r1, #1
    f7e2:	4630      	mov	r0, r6
    f7e4:	f000 f83e 	bl	f864 <ipc_rpmsg_register_ept>
	if (err != 0) {
    f7e8:	2800      	cmp	r0, #0
    f7ea:	d0d5      	beq.n	f798 <register_ept+0x80>
    f7ec:	e7a1      	b.n	f732 <register_ept+0x1a>
		return -EBUSY;
    f7ee:	f06f 000f 	mvn.w	r0, #15
    f7f2:	e7a0      	b.n	f736 <register_ept+0x1e>
    f7f4:	00031893 	.word	0x00031893

0000f7f8 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    f7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7fc:	4605      	mov	r5, r0
    f7fe:	460e      	mov	r6, r1
    f800:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f802:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    f804:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    f808:	b085      	sub	sp, #20
    f80a:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    f80e:	4621      	mov	r1, r4
    f810:	4630      	mov	r0, r6
    f812:	f7f9 fd9b 	bl	934c <strcmp>
    f816:	b9e0      	cbnz	r0, f852 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f818:	4b11      	ldr	r3, [pc, #68]	; (f860 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    f81a:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f81e:	9302      	str	r3, [sp, #8]
    f820:	f8da 3010 	ldr.w	r3, [sl, #16]
    f824:	4632      	mov	r2, r6
    f826:	e9cd 8300 	strd	r8, r3, [sp]
    f82a:	4629      	mov	r1, r5
    f82c:	f04f 33ff 	mov.w	r3, #4294967295
    f830:	4658      	mov	r0, fp
    f832:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    f836:	f010 fd1d 	bl	20274 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    f83a:	b960      	cbnz	r0, f856 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    f83c:	2370      	movs	r3, #112	; 0x70
    f83e:	2201      	movs	r2, #1
    f840:	fb03 9307 	mla	r3, r3, r7, r9
    f844:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    f848:	f8da 300c 	ldr.w	r3, [sl, #12]
    f84c:	b10b      	cbz	r3, f852 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    f84e:	4658      	mov	r0, fp
    f850:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f852:	3470      	adds	r4, #112	; 0x70
    f854:	b117      	cbz	r7, f85c <ns_bind_cb+0x64>
			}
		}
	}
}
    f856:	b005      	add	sp, #20
    f858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f85c:	2701      	movs	r7, #1
    f85e:	e7d6      	b.n	f80e <ns_bind_cb+0x16>
    f860:	0002736d 	.word	0x0002736d

0000f864 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    f864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f866:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    f868:	b190      	cbz	r0, f890 <ipc_rpmsg_register_ept+0x2c>
    f86a:	b18a      	cbz	r2, f890 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    f86c:	2901      	cmp	r1, #1
    f86e:	d112      	bne.n	f896 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    f870:	4b0a      	ldr	r3, [pc, #40]	; (f89c <ipc_rpmsg_register_ept+0x38>)
    f872:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f876:	9302      	str	r3, [sp, #8]
    f878:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    f87c:	3240      	adds	r2, #64	; 0x40
    f87e:	9301      	str	r3, [sp, #4]
    f880:	f04f 33ff 	mov.w	r3, #4294967295
    f884:	4620      	mov	r0, r4
    f886:	9300      	str	r3, [sp, #0]
    f888:	f010 fcf4 	bl	20274 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    f88c:	b004      	add	sp, #16
    f88e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f890:	f06f 0015 	mvn.w	r0, #21
    f894:	e7fa      	b.n	f88c <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    f896:	2000      	movs	r0, #0
    f898:	e7f8      	b.n	f88c <ipc_rpmsg_register_ept+0x28>
    f89a:	bf00      	nop
    f89c:	0002736d 	.word	0x0002736d

0000f8a0 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    f8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f8a4:	b087      	sub	sp, #28
    f8a6:	460e      	mov	r6, r1
    f8a8:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    f8ac:	4614      	mov	r4, r2
    f8ae:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    f8b2:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    f8b4:	b330      	cbz	r0, f904 <ipc_rpmsg_init+0x64>
    f8b6:	b329      	cbz	r1, f904 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    f8b8:	f8df c050 	ldr.w	ip, [pc, #80]	; f90c <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    f8bc:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    f8c0:	2d00      	cmp	r5, #0
    f8c2:	bf08      	it	eq
    f8c4:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    f8c6:	b99e      	cbnz	r6, f8f0 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    f8c8:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    f8cc:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    f8d0:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    f8d2:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    f8d4:	f01b fdcd 	bl	2b472 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    f8d8:	ab03      	add	r3, sp, #12
    f8da:	e9cd 4300 	strd	r4, r3, [sp]
    f8de:	462a      	mov	r2, r5
    f8e0:	463b      	mov	r3, r7
    f8e2:	4641      	mov	r1, r8
    f8e4:	4648      	mov	r0, r9
    f8e6:	f010 fe8f 	bl	20608 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    f8ea:	b007      	add	sp, #28
    f8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    f8f0:	2200      	movs	r2, #0
    f8f2:	4641      	mov	r1, r8
    f8f4:	920e      	str	r2, [sp, #56]	; 0x38
    f8f6:	4648      	mov	r0, r9
    f8f8:	462a      	mov	r2, r5
}
    f8fa:	b007      	add	sp, #28
    f8fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    f900:	f010 bfac 	b.w	2085c <rpmsg_init_vdev>
		return -EINVAL;
    f904:	f06f 0015 	mvn.w	r0, #21
    f908:	e7ef      	b.n	f8ea <ipc_rpmsg_init+0x4a>
    f90a:	bf00      	nop
    f90c:	0000f7f9 	.word	0x0000f7f9

0000f910 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    f910:	b5f0      	push	{r4, r5, r6, r7, lr}
    f912:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    f914:	4604      	mov	r4, r0
{
    f916:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    f918:	2800      	cmp	r0, #0
    f91a:	d06f      	beq.n	f9fc <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    f91c:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    f91e:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    f920:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f922:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    f924:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    f928:	4f36      	ldr	r7, [pc, #216]	; (fa04 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f92a:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    f92c:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    f930:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f934:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f938:	f04f 33ff 	mov.w	r3, #4294967295
    f93c:	9300      	str	r3, [sp, #0]
    f93e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    f940:	f01b f900 	bl	2ab44 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    f944:	4a30      	ldr	r2, [pc, #192]	; (fa08 <ipc_static_vrings_init+0xf8>)
    f946:	ab06      	add	r3, sp, #24
    f948:	e892 0003 	ldmia.w	r2, {r0, r1}
    f94c:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    f950:	4618      	mov	r0, r3
    f952:	f010 fb63 	bl	2001c <metal_init>
	if (err != 0) {
    f956:	4605      	mov	r5, r0
    f958:	b9d8      	cbnz	r0, f992 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    f95a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    f95e:	f010 fb3d 	bl	1ffdc <metal_register_generic_device>
	if (err != 0) {
    f962:	4605      	mov	r5, r0
    f964:	b9a8      	cbnz	r0, f992 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    f966:	4639      	mov	r1, r7
    f968:	4828      	ldr	r0, [pc, #160]	; (fa0c <ipc_static_vrings_init+0xfc>)
    f96a:	aa05      	add	r2, sp, #20
    f96c:	f01b f8c2 	bl	2aaf4 <metal_device_open>
	if (err != 0) {
    f970:	4605      	mov	r5, r0
    f972:	b970      	cbnz	r0, f992 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    f974:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    f976:	689a      	ldr	r2, [r3, #8]
    f978:	b172      	cbz	r2, f998 <ipc_static_vrings_init+0x88>
    f97a:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    f97c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    f980:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    f984:	f017 fd23 	bl	273ce <virtqueue_allocate>
    f988:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    f98c:	b930      	cbnz	r0, f99c <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    f98e:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    f992:	4628      	mov	r0, r5
    f994:	b009      	add	sp, #36	; 0x24
    f996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f998:	4603      	mov	r3, r0
    f99a:	e7ef      	b.n	f97c <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    f99c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    f9a0:	f017 fd15 	bl	273ce <virtqueue_allocate>
    f9a4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    f9a8:	2800      	cmp	r0, #0
    f9aa:	d0f0      	beq.n	f98e <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    f9ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    f9b0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    f9b4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    f9b8:	2304      	movs	r3, #4
    f9ba:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    f9be:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    f9c2:	2302      	movs	r3, #2
    f9c4:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    f9c6:	4b12      	ldr	r3, [pc, #72]	; (fa10 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    f9c8:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    f9cc:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    f9d0:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    f9d4:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    f9d8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    f9dc:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    f9de:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    f9e2:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    f9e6:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    f9ea:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    f9ee:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    f9f2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    f9f6:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    f9f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    f9fa:	e7ca      	b.n	f992 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    f9fc:	f06f 0515 	mvn.w	r5, #21
    fa00:	e7c7      	b.n	f992 <ipc_static_vrings_init+0x82>
    fa02:	bf00      	nop
    fa04:	0002ed8a 	.word	0x0002ed8a
    fa08:	0002c9b4 	.word	0x0002c9b4
    fa0c:	0002ed94 	.word	0x0002ed94
    fa10:	0002ceec 	.word	0x0002ceec

0000fa14 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    fa14:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    fa16:	4b11      	ldr	r3, [pc, #68]	; (fa5c <flash_area_open+0x48>)
{
    fa18:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    fa1a:	681c      	ldr	r4, [r3, #0]
    fa1c:	b1dc      	cbz	r4, fa56 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    fa1e:	4b10      	ldr	r3, [pc, #64]	; (fa60 <flash_area_open+0x4c>)
    fa20:	6819      	ldr	r1, [r3, #0]
    fa22:	2300      	movs	r3, #0
    fa24:	428b      	cmp	r3, r1
    fa26:	db02      	blt.n	fa2e <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    fa28:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    fa2c:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    fa2e:	4622      	mov	r2, r4
    fa30:	f812 6b10 	ldrb.w	r6, [r2], #16
    fa34:	4286      	cmp	r6, r0
    fa36:	d002      	beq.n	fa3e <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    fa38:	4614      	mov	r4, r2
    fa3a:	3301      	adds	r3, #1
    fa3c:	e7f2      	b.n	fa24 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fa3e:	68e0      	ldr	r0, [r4, #12]
    fa40:	b910      	cbnz	r0, fa48 <flash_area_open+0x34>
		return -ENODEV;
    fa42:	f06f 0012 	mvn.w	r0, #18
    fa46:	e7f1      	b.n	fa2c <flash_area_open+0x18>
    fa48:	f01b fd30 	bl	2b4ac <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fa4c:	2800      	cmp	r0, #0
    fa4e:	d0f8      	beq.n	fa42 <flash_area_open+0x2e>
	return 0;
    fa50:	2000      	movs	r0, #0
	*fap = area;
    fa52:	602c      	str	r4, [r5, #0]
	return 0;
    fa54:	e7ea      	b.n	fa2c <flash_area_open+0x18>
		return -EACCES;
    fa56:	f06f 000c 	mvn.w	r0, #12
    fa5a:	e7e7      	b.n	fa2c <flash_area_open+0x18>
    fa5c:	200085f8 	.word	0x200085f8
    fa60:	0002cf88 	.word	0x0002cf88

0000fa64 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    fa64:	b570      	push	{r4, r5, r6, lr}
    fa66:	b088      	sub	sp, #32
    fa68:	4605      	mov	r5, r0
    fa6a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    fa6c:	b2c0      	uxtb	r0, r0
    fa6e:	4669      	mov	r1, sp
{
    fa70:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    fa72:	f7ff ffcf 	bl	fa14 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    fa76:	2800      	cmp	r0, #0
    fa78:	db1b      	blt.n	fab2 <flash_area_get_sectors+0x4e>
    fa7a:	9800      	ldr	r0, [sp, #0]
    fa7c:	b1c8      	cbz	r0, fab2 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    fa7e:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    fa80:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    fa82:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    fa84:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    fa86:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    fa88:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    fa8c:	2300      	movs	r3, #0
	cb_data->status = 0;
    fa8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    fa92:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    fa94:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    fa96:	f017 fcd8 	bl	2744a <flash_area_close>
	if (flash_dev == NULL) {
    fa9a:	b16d      	cbz	r5, fab8 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    fa9c:	4628      	mov	r0, r5
    fa9e:	4908      	ldr	r1, [pc, #32]	; (fac0 <flash_area_get_sectors+0x5c>)
    faa0:	aa01      	add	r2, sp, #4
    faa2:	f01a fbb3 	bl	2a20c <flash_page_foreach>
	if (cb_data->status == 0) {
    faa6:	9807      	ldr	r0, [sp, #28]
    faa8:	b908      	cbnz	r0, faae <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    faaa:	9b05      	ldr	r3, [sp, #20]
    faac:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    faae:	b008      	add	sp, #32
    fab0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    fab2:	f06f 0015 	mvn.w	r0, #21
    fab6:	e7fa      	b.n	faae <flash_area_get_sectors+0x4a>
		return -ENODEV;
    fab8:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    fabc:	e7f7      	b.n	faae <flash_area_get_sectors+0x4a>
    fabe:	bf00      	nop
    fac0:	000274c9 	.word	0x000274c9

0000fac4 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
    fac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    fac8:	4b0f      	ldr	r3, [pc, #60]	; (fb08 <settings_save_one+0x44>)
{
    faca:	4605      	mov	r5, r0
	cs = settings_save_dst;
    facc:	681c      	ldr	r4, [r3, #0]
{
    face:	460e      	mov	r6, r1
    fad0:	4617      	mov	r7, r2
	if (!cs) {
    fad2:	b1ac      	cbz	r4, fb00 <settings_save_one+0x3c>
    fad4:	f04f 32ff 	mov.w	r2, #4294967295
    fad8:	f04f 33ff 	mov.w	r3, #4294967295
    fadc:	480b      	ldr	r0, [pc, #44]	; (fb0c <settings_save_one+0x48>)
    fade:	f011 fc95 	bl	2140c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    fae2:	6863      	ldr	r3, [r4, #4]
    fae4:	4632      	mov	r2, r6
    fae6:	f8d3 8008 	ldr.w	r8, [r3, #8]
    faea:	4629      	mov	r1, r5
    faec:	463b      	mov	r3, r7
    faee:	4620      	mov	r0, r4
    faf0:	47c0      	blx	r8
    faf2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    faf4:	4805      	ldr	r0, [pc, #20]	; (fb0c <settings_save_one+0x48>)
    faf6:	f011 fd59 	bl	215ac <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    fafa:	4620      	mov	r0, r4
    fafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    fb00:	f06f 0401 	mvn.w	r4, #1
    fb04:	e7f9      	b.n	fafa <settings_save_one+0x36>
    fb06:	bf00      	nop
    fb08:	20021588 	.word	0x20021588
    fb0c:	20008c8c 	.word	0x20008c8c

0000fb10 <settings_src_register>:
	parent->next = child;
    fb10:	2300      	movs	r3, #0
    fb12:	6003      	str	r3, [r0, #0]
	return list->tail;
    fb14:	4b04      	ldr	r3, [pc, #16]	; (fb28 <settings_src_register+0x18>)
    fb16:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    fb18:	b912      	cbnz	r2, fb20 <settings_src_register+0x10>
	list->head = node;
    fb1a:	e9c3 0000 	strd	r0, r0, [r3]
}
    fb1e:	4770      	bx	lr
	parent->next = child;
    fb20:	6010      	str	r0, [r2, #0]
	list->tail = node;
    fb22:	6058      	str	r0, [r3, #4]
}
    fb24:	4770      	bx	lr
    fb26:	bf00      	nop
    fb28:	2002158c 	.word	0x2002158c

0000fb2c <settings_dst_register>:
	settings_save_dst = cs;
    fb2c:	4b01      	ldr	r3, [pc, #4]	; (fb34 <settings_dst_register+0x8>)
    fb2e:	6018      	str	r0, [r3, #0]
}
    fb30:	4770      	bx	lr
    fb32:	bf00      	nop
    fb34:	20021588 	.word	0x20021588

0000fb38 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    fb38:	2300      	movs	r3, #0
{
    fb3a:	b530      	push	{r4, r5, lr}
    fb3c:	b085      	sub	sp, #20
    fb3e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    fb40:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fb44:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fb46:	f04f 33ff 	mov.w	r3, #4294967295
    fb4a:	f04f 32ff 	mov.w	r2, #4294967295
    fb4e:	480b      	ldr	r0, [pc, #44]	; (fb7c <settings_load_subtree+0x44>)
    fb50:	f011 fc5c 	bl	2140c <z_impl_k_mutex_lock>
	return list->head;
    fb54:	4b0a      	ldr	r3, [pc, #40]	; (fb80 <settings_load_subtree+0x48>)
    fb56:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fb58:	b94c      	cbnz	r4, fb6e <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
    fb5a:	4628      	mov	r0, r5
    fb5c:	f000 f8f6 	bl	fd4c <settings_commit_subtree>
    fb60:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fb62:	4806      	ldr	r0, [pc, #24]	; (fb7c <settings_load_subtree+0x44>)
    fb64:	f011 fd22 	bl	215ac <z_impl_k_mutex_unlock>
}
    fb68:	4620      	mov	r0, r4
    fb6a:	b005      	add	sp, #20
    fb6c:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
    fb6e:	6863      	ldr	r3, [r4, #4]
    fb70:	4620      	mov	r0, r4
    fb72:	681b      	ldr	r3, [r3, #0]
    fb74:	a901      	add	r1, sp, #4
    fb76:	4798      	blx	r3
	return node->next;
    fb78:	6824      	ldr	r4, [r4, #0]
    fb7a:	e7ed      	b.n	fb58 <settings_load_subtree+0x20>
    fb7c:	20008c8c 	.word	0x20008c8c
    fb80:	2002158c 	.word	0x2002158c

0000fb84 <settings_load_subtree_direct>:
{
    fb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    fb86:	e9cd 0101 	strd	r0, r1, [sp, #4]
    fb8a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    fb8c:	f04f 33ff 	mov.w	r3, #4294967295
    fb90:	f04f 32ff 	mov.w	r2, #4294967295
    fb94:	4809      	ldr	r0, [pc, #36]	; (fbbc <settings_load_subtree_direct+0x38>)
    fb96:	f011 fc39 	bl	2140c <z_impl_k_mutex_lock>
	return list->head;
    fb9a:	4b09      	ldr	r3, [pc, #36]	; (fbc0 <settings_load_subtree_direct+0x3c>)
    fb9c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fb9e:	b92c      	cbnz	r4, fbac <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
    fba0:	4806      	ldr	r0, [pc, #24]	; (fbbc <settings_load_subtree_direct+0x38>)
    fba2:	f011 fd03 	bl	215ac <z_impl_k_mutex_unlock>
}
    fba6:	4620      	mov	r0, r4
    fba8:	b004      	add	sp, #16
    fbaa:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
    fbac:	6863      	ldr	r3, [r4, #4]
    fbae:	4620      	mov	r0, r4
    fbb0:	681b      	ldr	r3, [r3, #0]
    fbb2:	a901      	add	r1, sp, #4
    fbb4:	4798      	blx	r3
	return node->next;
    fbb6:	6824      	ldr	r4, [r4, #0]
    fbb8:	e7f1      	b.n	fb9e <settings_load_subtree_direct+0x1a>
    fbba:	bf00      	nop
    fbbc:	20008c8c 	.word	0x20008c8c
    fbc0:	2002158c 	.word	0x2002158c

0000fbc4 <settings_store_init>:
	list->head = NULL;
    fbc4:	2200      	movs	r2, #0
    fbc6:	4b02      	ldr	r3, [pc, #8]	; (fbd0 <settings_store_init+0xc>)
	list->tail = NULL;
    fbc8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    fbcc:	4770      	bx	lr
    fbce:	bf00      	nop
    fbd0:	2002158c 	.word	0x2002158c

0000fbd4 <settings_init>:
	list->head = NULL;
    fbd4:	2200      	movs	r2, #0
    fbd6:	4b02      	ldr	r3, [pc, #8]	; (fbe0 <settings_init+0xc>)
	list->tail = NULL;
    fbd8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    fbdc:	f7ff bff2 	b.w	fbc4 <settings_store_init>
    fbe0:	20021594 	.word	0x20021594

0000fbe4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    fbe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fbe8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    fbea:	460c      	mov	r4, r1
    fbec:	b109      	cbz	r1, fbf2 <settings_parse_and_lookup+0xe>
		*next = NULL;
    fbee:	2300      	movs	r3, #0
    fbf0:	600b      	str	r3, [r1, #0]
{
    fbf2:	2600      	movs	r6, #0
    fbf4:	4d25      	ldr	r5, [pc, #148]	; (fc8c <settings_parse_and_lookup+0xa8>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    fbf6:	f8df 9098 	ldr.w	r9, [pc, #152]	; fc90 <settings_parse_and_lookup+0xac>
    fbfa:	454d      	cmp	r5, r9
    fbfc:	d924      	bls.n	fc48 <settings_parse_and_lookup+0x64>
    fbfe:	4925      	ldr	r1, [pc, #148]	; (fc94 <settings_parse_and_lookup+0xb0>)
    fc00:	2394      	movs	r3, #148	; 0x94
    fc02:	4a25      	ldr	r2, [pc, #148]	; (fc98 <settings_parse_and_lookup+0xb4>)
    fc04:	4825      	ldr	r0, [pc, #148]	; (fc9c <settings_parse_and_lookup+0xb8>)
    fc06:	f016 fe8c 	bl	26922 <assert_print>
    fc0a:	4825      	ldr	r0, [pc, #148]	; (fca0 <settings_parse_and_lookup+0xbc>)
    fc0c:	f016 fe89 	bl	26922 <assert_print>
    fc10:	2194      	movs	r1, #148	; 0x94
    fc12:	4821      	ldr	r0, [pc, #132]	; (fc98 <settings_parse_and_lookup+0xb4>)
    fc14:	f016 fe7e 	bl	26914 <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    fc18:	f8d5 8000 	ldr.w	r8, [r5]
    fc1c:	4638      	mov	r0, r7
    fc1e:	4641      	mov	r1, r8
    fc20:	aa01      	add	r2, sp, #4
    fc22:	f017 fc7a 	bl	2751a <settings_name_steq>
    fc26:	b150      	cbz	r0, fc3e <settings_parse_and_lookup+0x5a>
			continue;
		}
		if (!bestmatch) {
    fc28:	b916      	cbnz	r6, fc30 <settings_parse_and_lookup+0x4c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
    fc2a:	b954      	cbnz	r4, fc42 <settings_parse_and_lookup+0x5e>
{
    fc2c:	462e      	mov	r6, r5
    fc2e:	e006      	b.n	fc3e <settings_parse_and_lookup+0x5a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    fc30:	2200      	movs	r2, #0
    fc32:	4640      	mov	r0, r8
    fc34:	6831      	ldr	r1, [r6, #0]
    fc36:	f017 fc70 	bl	2751a <settings_name_steq>
    fc3a:	2800      	cmp	r0, #0
    fc3c:	d1f5      	bne.n	fc2a <settings_parse_and_lookup+0x46>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    fc3e:	3514      	adds	r5, #20
    fc40:	e7db      	b.n	fbfa <settings_parse_and_lookup+0x16>
				*next = tmpnext;
    fc42:	9b01      	ldr	r3, [sp, #4]
    fc44:	6023      	str	r3, [r4, #0]
    fc46:	e7f1      	b.n	fc2c <settings_parse_and_lookup+0x48>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    fc48:	d3e6      	bcc.n	fc18 <settings_parse_and_lookup+0x34>
	return list->head;
    fc4a:	4b16      	ldr	r3, [pc, #88]	; (fca4 <settings_parse_and_lookup+0xc0>)
    fc4c:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    fc4e:	b1c5      	cbz	r5, fc82 <settings_parse_and_lookup+0x9e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    fc50:	f855 8c14 	ldr.w	r8, [r5, #-20]
    fc54:	4638      	mov	r0, r7
    fc56:	4641      	mov	r1, r8
    fc58:	aa01      	add	r2, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    fc5a:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    fc5c:	f017 fc5d 	bl	2751a <settings_name_steq>
    fc60:	b150      	cbz	r0, fc78 <settings_parse_and_lookup+0x94>
			continue;
		}
		if (!bestmatch) {
    fc62:	b916      	cbnz	r6, fc6a <settings_parse_and_lookup+0x86>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
    fc64:	b954      	cbnz	r4, fc7c <settings_parse_and_lookup+0x98>
{
    fc66:	462e      	mov	r6, r5
    fc68:	e006      	b.n	fc78 <settings_parse_and_lookup+0x94>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    fc6a:	2200      	movs	r2, #0
    fc6c:	4640      	mov	r0, r8
    fc6e:	6831      	ldr	r1, [r6, #0]
    fc70:	f017 fc53 	bl	2751a <settings_name_steq>
    fc74:	2800      	cmp	r0, #0
    fc76:	d1f5      	bne.n	fc64 <settings_parse_and_lookup+0x80>
	return node->next;
    fc78:	696d      	ldr	r5, [r5, #20]
    fc7a:	e7e8      	b.n	fc4e <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    fc7c:	9b01      	ldr	r3, [sp, #4]
    fc7e:	6023      	str	r3, [r4, #0]
    fc80:	e7f1      	b.n	fc66 <settings_parse_and_lookup+0x82>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    fc82:	4630      	mov	r0, r6
    fc84:	b003      	add	sp, #12
    fc86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fc8a:	bf00      	nop
    fc8c:	0002c924 	.word	0x0002c924
    fc90:	0002c99c 	.word	0x0002c99c
    fc94:	0002edce 	.word	0x0002edce
    fc98:	0002ed9c 	.word	0x0002ed9c
    fc9c:	0002d881 	.word	0x0002d881
    fca0:	0002e9b9 	.word	0x0002e9b9
    fca4:	20021594 	.word	0x20021594

0000fca8 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    fca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fcac:	b084      	sub	sp, #16
    fcae:	af02      	add	r7, sp, #8
    fcb0:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
    fcb4:	4604      	mov	r4, r0
    fcb6:	460d      	mov	r5, r1
    fcb8:	4616      	mov	r6, r2
    fcba:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
    fcbc:	6078      	str	r0, [r7, #4]

	if (load_arg && load_arg->subtree &&
    fcbe:	f1b9 0f00 	cmp.w	r9, #0
    fcc2:	d007      	beq.n	fcd4 <settings_call_set_handler+0x2c>
    fcc4:	f8d9 1000 	ldr.w	r1, [r9]
    fcc8:	bb31      	cbnz	r1, fd18 <settings_call_set_handler+0x70>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
    fcca:	f8d9 a004 	ldr.w	sl, [r9, #4]
    fcce:	f1ba 0f00 	cmp.w	sl, #0
    fcd2:	d128      	bne.n	fd26 <settings_call_set_handler+0x7e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
    fcd4:	4620      	mov	r0, r4
    fcd6:	1d39      	adds	r1, r7, #4
    fcd8:	f7ff ff84 	bl	fbe4 <settings_parse_and_lookup>
		if (!ch) {
    fcdc:	b308      	cbz	r0, fd22 <settings_call_set_handler+0x7a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    fcde:	f8d0 9008 	ldr.w	r9, [r0, #8]
    fce2:	4643      	mov	r3, r8
    fce4:	4632      	mov	r2, r6
    fce6:	4629      	mov	r1, r5
    fce8:	6878      	ldr	r0, [r7, #4]
    fcea:	47c8      	blx	r9

		if (rc != 0) {
    fcec:	b1c8      	cbz	r0, fd22 <settings_call_set_handler+0x7a>
			LOG_ERR("set-value failure. key: %s error(%d)",
    fcee:	466d      	mov	r5, sp
    fcf0:	b08a      	sub	sp, #40	; 0x28
    fcf2:	aa02      	add	r2, sp, #8
    fcf4:	4b12      	ldr	r3, [pc, #72]	; (fd40 <settings_call_set_handler+0x98>)
    fcf6:	61d0      	str	r0, [r2, #28]
    fcf8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    fcfc:	f44f 7300 	mov.w	r3, #512	; 0x200
    fd00:	8413      	strh	r3, [r2, #32]
    fd02:	4b10      	ldr	r3, [pc, #64]	; (fd44 <settings_call_set_handler+0x9c>)
    fd04:	f842 3f10 	str.w	r3, [r2, #16]!
    fd08:	2300      	movs	r3, #0
    fd0a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    fd0e:	480e      	ldr	r0, [pc, #56]	; (fd48 <settings_call_set_handler+0xa0>)
    fd10:	f7fe fc3e 	bl	e590 <z_impl_z_log_msg_static_create>
    fd14:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
    fd16:	e004      	b.n	fd22 <settings_call_set_handler+0x7a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    fd18:	1d3a      	adds	r2, r7, #4
    fd1a:	f017 fbfe 	bl	2751a <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    fd1e:	2800      	cmp	r0, #0
    fd20:	d1d3      	bne.n	fcca <settings_call_set_handler+0x22>
		return 0;
    fd22:	2000      	movs	r0, #0
    fd24:	e007      	b.n	fd36 <settings_call_set_handler+0x8e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    fd26:	f8d9 3008 	ldr.w	r3, [r9, #8]
    fd2a:	4632      	mov	r2, r6
    fd2c:	9300      	str	r3, [sp, #0]
    fd2e:	4629      	mov	r1, r5
    fd30:	4643      	mov	r3, r8
    fd32:	6878      	ldr	r0, [r7, #4]
    fd34:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
    fd36:	3708      	adds	r7, #8
    fd38:	46bd      	mov	sp, r7
    fd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd3e:	bf00      	nop
    fd40:	0002edf6 	.word	0x0002edf6
    fd44:	01000004 	.word	0x01000004
    fd48:	0002c8ec 	.word	0x0002c8ec

0000fd4c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd4e:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    fd50:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    fd52:	4c1e      	ldr	r4, [pc, #120]	; (fdcc <settings_commit_subtree+0x80>)
    fd54:	4f1e      	ldr	r7, [pc, #120]	; (fdd0 <settings_commit_subtree+0x84>)
    fd56:	42bc      	cmp	r4, r7
    fd58:	d91f      	bls.n	fd9a <settings_commit_subtree+0x4e>
    fd5a:	491e      	ldr	r1, [pc, #120]	; (fdd4 <settings_commit_subtree+0x88>)
    fd5c:	23f4      	movs	r3, #244	; 0xf4
    fd5e:	4a1e      	ldr	r2, [pc, #120]	; (fdd8 <settings_commit_subtree+0x8c>)
    fd60:	481e      	ldr	r0, [pc, #120]	; (fddc <settings_commit_subtree+0x90>)
    fd62:	f016 fdde 	bl	26922 <assert_print>
    fd66:	481e      	ldr	r0, [pc, #120]	; (fde0 <settings_commit_subtree+0x94>)
    fd68:	f016 fddb 	bl	26922 <assert_print>
    fd6c:	21f4      	movs	r1, #244	; 0xf4
    fd6e:	481a      	ldr	r0, [pc, #104]	; (fdd8 <settings_commit_subtree+0x8c>)
    fd70:	f016 fdd0 	bl	26914 <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    fd74:	b92e      	cbnz	r6, fd82 <settings_commit_subtree+0x36>
			continue;
		}
		if (ch->h_commit) {
    fd76:	68e3      	ldr	r3, [r4, #12]
    fd78:	b95b      	cbnz	r3, fd92 <settings_commit_subtree+0x46>
{
    fd7a:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    fd7c:	4605      	mov	r5, r0
    fd7e:	3414      	adds	r4, #20
    fd80:	e7e9      	b.n	fd56 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    fd82:	2200      	movs	r2, #0
    fd84:	4631      	mov	r1, r6
    fd86:	6820      	ldr	r0, [r4, #0]
    fd88:	f017 fbc7 	bl	2751a <settings_name_steq>
    fd8c:	2800      	cmp	r0, #0
    fd8e:	d1f2      	bne.n	fd76 <settings_commit_subtree+0x2a>
    fd90:	e7f3      	b.n	fd7a <settings_commit_subtree+0x2e>
			rc2 = ch->h_commit();
    fd92:	4798      	blx	r3
			if (!rc) {
    fd94:	2d00      	cmp	r5, #0
    fd96:	d1f0      	bne.n	fd7a <settings_commit_subtree+0x2e>
    fd98:	e7f0      	b.n	fd7c <settings_commit_subtree+0x30>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    fd9a:	d3eb      	bcc.n	fd74 <settings_commit_subtree+0x28>
	return list->head;
    fd9c:	4b11      	ldr	r3, [pc, #68]	; (fde4 <settings_commit_subtree+0x98>)
    fd9e:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    fda0:	b194      	cbz	r4, fdc8 <settings_commit_subtree+0x7c>
    fda2:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    fda4:	b91e      	cbnz	r6, fdae <settings_commit_subtree+0x62>
			continue;
		}
		if (ch->h_commit) {
    fda6:	68e3      	ldr	r3, [r4, #12]
    fda8:	b94b      	cbnz	r3, fdbe <settings_commit_subtree+0x72>
	return node->next;
    fdaa:	6964      	ldr	r4, [r4, #20]
    fdac:	e7f8      	b.n	fda0 <settings_commit_subtree+0x54>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    fdae:	2200      	movs	r2, #0
    fdb0:	4631      	mov	r1, r6
    fdb2:	6820      	ldr	r0, [r4, #0]
    fdb4:	f017 fbb1 	bl	2751a <settings_name_steq>
    fdb8:	2800      	cmp	r0, #0
    fdba:	d1f4      	bne.n	fda6 <settings_commit_subtree+0x5a>
    fdbc:	e7f5      	b.n	fdaa <settings_commit_subtree+0x5e>
			rc2 = ch->h_commit();
    fdbe:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
    fdc0:	2d00      	cmp	r5, #0
    fdc2:	bf08      	it	eq
    fdc4:	4605      	moveq	r5, r0
    fdc6:	e7f0      	b.n	fdaa <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    fdc8:	4628      	mov	r0, r5
    fdca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdcc:	0002c924 	.word	0x0002c924
    fdd0:	0002c99c 	.word	0x0002c99c
    fdd4:	0002edce 	.word	0x0002edce
    fdd8:	0002ed9c 	.word	0x0002ed9c
    fddc:	0002d881 	.word	0x0002d881
    fde0:	0002e9b9 	.word	0x0002e9b9
    fde4:	20021594 	.word	0x20021594

0000fde8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    fde8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    fdea:	4c07      	ldr	r4, [pc, #28]	; (fe08 <settings_subsys_init+0x20>)
    fdec:	7823      	ldrb	r3, [r4, #0]
    fdee:	b10b      	cbz	r3, fdf4 <settings_subsys_init+0xc>
		return 0;
    fdf0:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
    fdf2:	bd10      	pop	{r4, pc}
	settings_init();
    fdf4:	f7ff feee 	bl	fbd4 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
    fdf8:	f000 f866 	bl	fec8 <settings_backend_init>
	if (!err) {
    fdfc:	2800      	cmp	r0, #0
    fdfe:	d1f8      	bne.n	fdf2 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
    fe00:	2301      	movs	r3, #1
    fe02:	7023      	strb	r3, [r4, #0]
    fe04:	e7f4      	b.n	fdf0 <settings_subsys_init+0x8>
    fe06:	bf00      	nop
    fe08:	200223e6 	.word	0x200223e6

0000fe0c <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    fe0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe10:	4680      	mov	r8, r0
    fe12:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    fe14:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
    fe16:	f8df a0ac 	ldr.w	sl, [pc, #172]	; fec4 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
    fe1a:	3401      	adds	r4, #1
{
    fe1c:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    fe1e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    fe20:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    fe24:	1e65      	subs	r5, r4, #1
    fe26:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    fe28:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    fe2c:	d047      	beq.n	febe <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    fe2e:	234a      	movs	r3, #74	; 0x4a
    fe30:	4629      	mov	r1, r5
    fe32:	aa05      	add	r2, sp, #20
    fe34:	4630      	mov	r0, r6
    fe36:	f017 f95f 	bl	270f8 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    fe3a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    fe3e:	343f      	adds	r4, #63	; 0x3f
    fe40:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    fe42:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    fe44:	4621      	mov	r1, r4
    fe46:	2301      	movs	r3, #1
    fe48:	4630      	mov	r0, r6
    fe4a:	f10d 020b 	add.w	r2, sp, #11
    fe4e:	f017 f953 	bl	270f8 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    fe52:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    fe54:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    fe56:	dc03      	bgt.n	fe60 <settings_nvs_load+0x54>
    fe58:	2800      	cmp	r0, #0
    fe5a:	dc03      	bgt.n	fe64 <settings_nvs_load+0x58>
{
    fe5c:	462c      	mov	r4, r5
    fe5e:	e7e1      	b.n	fe24 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    fe60:	2800      	cmp	r0, #0
    fe62:	dc16      	bgt.n	fe92 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    fe64:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    fe68:	42ab      	cmp	r3, r5
    fe6a:	d109      	bne.n	fe80 <settings_nvs_load+0x74>
				cf->last_name_id--;
    fe6c:	4642      	mov	r2, r8
    fe6e:	1e6b      	subs	r3, r5, #1
    fe70:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    fe74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fe78:	2302      	movs	r3, #2
    fe7a:	4630      	mov	r0, r6
    fe7c:	f7ff f8a8 	bl	efd0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    fe80:	4629      	mov	r1, r5
    fe82:	4630      	mov	r0, r6
    fe84:	f017 f934 	bl	270f0 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    fe88:	4621      	mov	r1, r4
    fe8a:	4630      	mov	r0, r6
    fe8c:	f017 f930 	bl	270f0 <nvs_delete>
			continue;
    fe90:	e7e4      	b.n	fe5c <settings_nvs_load+0x50>
		name[rc1] = '\0';
    fe92:	f107 0360 	add.w	r3, r7, #96	; 0x60
    fe96:	eb0d 0703 	add.w	r7, sp, r3
    fe9a:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    fe9c:	4652      	mov	r2, sl
		name[rc1] = '\0';
    fe9e:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    fea2:	a805      	add	r0, sp, #20
    fea4:	f8cd 9000 	str.w	r9, [sp]
    fea8:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    feaa:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    feac:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    feb0:	f7ff fefa 	bl	fca8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    feb4:	2800      	cmp	r0, #0
    feb6:	d0d1      	beq.n	fe5c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    feb8:	b018      	add	sp, #96	; 0x60
    feba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    febe:	2000      	movs	r0, #0
	return ret;
    fec0:	e7fa      	b.n	feb8 <settings_nvs_load+0xac>
    fec2:	bf00      	nop
    fec4:	0002758b 	.word	0x0002758b

0000fec8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    fec8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    feca:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
    fecc:	4669      	mov	r1, sp
    fece:	2006      	movs	r0, #6
	uint32_t sector_cnt = 1;
    fed0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
    fed2:	f7ff fd9f 	bl	fa14 <flash_area_open>
	if (rc) {
    fed6:	4604      	mov	r4, r0
    fed8:	2800      	cmp	r0, #0
    feda:	d134      	bne.n	ff46 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
    fedc:	2006      	movs	r0, #6
    fede:	aa02      	add	r2, sp, #8
    fee0:	a901      	add	r1, sp, #4
    fee2:	f7ff fdbf 	bl	fa64 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    fee6:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
    feea:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    feec:	d02b      	beq.n	ff46 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    feee:	b138      	cbz	r0, ff00 <settings_backend_init+0x38>
    fef0:	340c      	adds	r4, #12
    fef2:	d005      	beq.n	ff00 <settings_backend_init+0x38>
		k_panic();
    fef4:	4040      	eors	r0, r0
    fef6:	f380 8811 	msr	BASEPRI, r0
    fefa:	f04f 0004 	mov.w	r0, #4
    fefe:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    ff00:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    ff02:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    ff06:	d223      	bcs.n	ff50 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    ff08:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    ff0a:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    ff0c:	9a00      	ldr	r2, [sp, #0]
    ff0e:	6894      	ldr	r4, [r2, #8]
		nvs_size += nvs_sector_size;
    ff10:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    ff12:	4284      	cmp	r4, r0
    ff14:	d31a      	bcc.n	ff4c <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    ff16:	3301      	adds	r3, #1
    ff18:	2b08      	cmp	r3, #8
    ff1a:	d1f9      	bne.n	ff10 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    ff1c:	4d0e      	ldr	r5, [pc, #56]	; (ff58 <settings_backend_init+0x90>)
    ff1e:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    ff20:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    ff22:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    ff24:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    ff26:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
    ff28:	68d3      	ldr	r3, [r2, #12]
    ff2a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    ff2c:	f017 fbc7 	bl	276be <settings_nvs_backend_init>
	if (rc) {
    ff30:	4604      	mov	r4, r0
    ff32:	b940      	cbnz	r0, ff46 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    ff34:	4e09      	ldr	r6, [pc, #36]	; (ff5c <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    ff36:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    ff38:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    ff3a:	f7ff fde9 	bl	fb10 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    ff3e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    ff40:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    ff42:	f7ff fdf3 	bl	fb2c <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    ff46:	4620      	mov	r0, r4
    ff48:	b004      	add	sp, #16
    ff4a:	bd70      	pop	{r4, r5, r6, pc}
    ff4c:	b29b      	uxth	r3, r3
    ff4e:	e7e5      	b.n	ff1c <settings_backend_init+0x54>
		return -EDOM;
    ff50:	f06f 0420 	mvn.w	r4, #32
    ff54:	e7f7      	b.n	ff46 <settings_backend_init+0x7e>
    ff56:	bf00      	nop
    ff58:	2002159c 	.word	0x2002159c
    ff5c:	200085b8 	.word	0x200085b8

0000ff60 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    ff60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff64:	4605      	mov	r5, r0
	__asm__ volatile(
    ff66:	f04f 0320 	mov.w	r3, #32
    ff6a:	f3ef 8611 	mrs	r6, BASEPRI
    ff6e:	f383 8812 	msr	BASEPRI_MAX, r3
    ff72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff76:	4820      	ldr	r0, [pc, #128]	; (fff8 <pm_state_notify+0x98>)
    ff78:	f011 f9f2 	bl	21360 <z_spin_lock_valid>
    ff7c:	b968      	cbnz	r0, ff9a <pm_state_notify+0x3a>
    ff7e:	2394      	movs	r3, #148	; 0x94
    ff80:	4a1e      	ldr	r2, [pc, #120]	; (fffc <pm_state_notify+0x9c>)
    ff82:	491f      	ldr	r1, [pc, #124]	; (10000 <CONFIG_RPMSG_NRF53_SRAM_SIZE>)
    ff84:	481f      	ldr	r0, [pc, #124]	; (10004 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4>)
    ff86:	f016 fccc 	bl	26922 <assert_print>
    ff8a:	491b      	ldr	r1, [pc, #108]	; (fff8 <pm_state_notify+0x98>)
    ff8c:	481e      	ldr	r0, [pc, #120]	; (10008 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x8>)
    ff8e:	f016 fcc8 	bl	26922 <assert_print>
    ff92:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ff94:	4819      	ldr	r0, [pc, #100]	; (fffc <pm_state_notify+0x9c>)
    ff96:	f016 fcbd 	bl	26914 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ff9a:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    ff9e:	4816      	ldr	r0, [pc, #88]	; (fff8 <pm_state_notify+0x98>)
    ffa0:	f011 f9fa 	bl	21398 <z_spin_lock_set_owner>
	return list->head;
    ffa4:	4b19      	ldr	r3, [pc, #100]	; (1000c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc>)
    ffa6:	4f1a      	ldr	r7, [pc, #104]	; (10010 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10>)
    ffa8:	681c      	ldr	r4, [r3, #0]
    ffaa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ffae:	b97c      	cbnz	r4, ffd0 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ffb0:	4811      	ldr	r0, [pc, #68]	; (fff8 <pm_state_notify+0x98>)
    ffb2:	f011 f9e3 	bl	2137c <z_spin_unlock_valid>
    ffb6:	b9c8      	cbnz	r0, ffec <pm_state_notify+0x8c>
    ffb8:	23c2      	movs	r3, #194	; 0xc2
    ffba:	4a10      	ldr	r2, [pc, #64]	; (fffc <pm_state_notify+0x9c>)
    ffbc:	4916      	ldr	r1, [pc, #88]	; (10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>)
    ffbe:	4811      	ldr	r0, [pc, #68]	; (10004 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4>)
    ffc0:	f016 fcaf 	bl	26922 <assert_print>
    ffc4:	490c      	ldr	r1, [pc, #48]	; (fff8 <pm_state_notify+0x98>)
    ffc6:	4815      	ldr	r0, [pc, #84]	; (1001c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c>)
    ffc8:	f016 fcab 	bl	26922 <assert_print>
    ffcc:	21c2      	movs	r1, #194	; 0xc2
    ffce:	e7e1      	b.n	ff94 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    ffd0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    ffd4:	2d00      	cmp	r5, #0
    ffd6:	bf18      	it	ne
    ffd8:	4613      	movne	r3, r2
		if (callback) {
    ffda:	b12b      	cbz	r3, ffe8 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ffdc:	f898 2014 	ldrb.w	r2, [r8, #20]
    ffe0:	fb09 f202 	mul.w	r2, r9, r2
    ffe4:	5cb8      	ldrb	r0, [r7, r2]
    ffe6:	4798      	blx	r3
	return node->next;
    ffe8:	6824      	ldr	r4, [r4, #0]
    ffea:	e7e0      	b.n	ffae <pm_state_notify+0x4e>
	__asm__ volatile(
    ffec:	f386 8811 	msr	BASEPRI, r6
    fff0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    fff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fff8:	200215dc 	.word	0x200215dc
    fffc:	0002e6ba 	.word	0x0002e6ba
   10000:	0002e713 	.word	0x0002e713
   10004:	0002d881 	.word	0x0002d881
   10008:	0002e728 	.word	0x0002e728
   1000c:	200215fc 	.word	0x200215fc
   10010:	200215f0 	.word	0x200215f0
   10014:	20021b58 	.word	0x20021b58
   10018:	0002e6e7 	.word	0x0002e6e7
   1001c:	0002e6fe 	.word	0x0002e6fe

00010020 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10020:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   10022:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10024:	4b16      	ldr	r3, [pc, #88]	; (10080 <pm_system_resume+0x60>)
   10026:	7d1c      	ldrb	r4, [r3, #20]
   10028:	f004 031f 	and.w	r3, r4, #31
   1002c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1002e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10030:	4b14      	ldr	r3, [pc, #80]	; (10084 <pm_system_resume+0x64>)
   10032:	0961      	lsrs	r1, r4, #5
   10034:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10038:	e8d3 1fef 	ldaex	r1, [r3]
   1003c:	ea01 0500 	and.w	r5, r1, r0
   10040:	e8c3 5fe6 	stlex	r6, r5, [r3]
   10044:	2e00      	cmp	r6, #0
   10046:	d1f7      	bne.n	10038 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10048:	420a      	tst	r2, r1
   1004a:	d013      	beq.n	10074 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   1004c:	4b0e      	ldr	r3, [pc, #56]	; (10088 <pm_system_resume+0x68>)
   1004e:	4d0f      	ldr	r5, [pc, #60]	; (1008c <pm_system_resume+0x6c>)
   10050:	b18b      	cbz	r3, 10076 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10052:	230c      	movs	r3, #12
   10054:	4363      	muls	r3, r4
   10056:	18ea      	adds	r2, r5, r3
   10058:	7851      	ldrb	r1, [r2, #1]
   1005a:	5ce8      	ldrb	r0, [r5, r3]
   1005c:	f016 fd5d 	bl	26b1a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10060:	2000      	movs	r0, #0
   10062:	f7ff ff7d 	bl	ff60 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10066:	230c      	movs	r3, #12
   10068:	435c      	muls	r4, r3
   1006a:	2300      	movs	r3, #0
   1006c:	192a      	adds	r2, r5, r4
   1006e:	512b      	str	r3, [r5, r4]
   10070:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10074:	bd70      	pop	{r4, r5, r6, pc}
   10076:	f383 8811 	msr	BASEPRI, r3
   1007a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1007e:	e7ef      	b.n	10060 <pm_system_resume+0x40>
   10080:	20021b58 	.word	0x20021b58
   10084:	20021604 	.word	0x20021604
   10088:	00026b1b 	.word	0x00026b1b
   1008c:	200215f0 	.word	0x200215f0

00010090 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10094:	4b45      	ldr	r3, [pc, #276]	; (101ac <pm_system_suspend+0x11c>)
{
   10096:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10098:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1009a:	f04f 0320 	mov.w	r3, #32
   1009e:	f3ef 8811 	mrs	r8, BASEPRI
   100a2:	f383 8812 	msr	BASEPRI_MAX, r3
   100a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   100aa:	4841      	ldr	r0, [pc, #260]	; (101b0 <pm_system_suspend+0x120>)
   100ac:	f011 f958 	bl	21360 <z_spin_lock_valid>
   100b0:	b968      	cbnz	r0, 100ce <pm_system_suspend+0x3e>
   100b2:	2394      	movs	r3, #148	; 0x94
   100b4:	4a3f      	ldr	r2, [pc, #252]	; (101b4 <pm_system_suspend+0x124>)
   100b6:	4940      	ldr	r1, [pc, #256]	; (101b8 <pm_system_suspend+0x128>)
   100b8:	4840      	ldr	r0, [pc, #256]	; (101bc <pm_system_suspend+0x12c>)
   100ba:	f016 fc32 	bl	26922 <assert_print>
   100be:	493c      	ldr	r1, [pc, #240]	; (101b0 <pm_system_suspend+0x120>)
   100c0:	483f      	ldr	r0, [pc, #252]	; (101c0 <pm_system_suspend+0x130>)
   100c2:	f016 fc2e 	bl	26922 <assert_print>
   100c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   100c8:	483a      	ldr	r0, [pc, #232]	; (101b4 <pm_system_suspend+0x124>)
   100ca:	f016 fc23 	bl	26914 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   100ce:	240c      	movs	r4, #12
   100d0:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   100d2:	4837      	ldr	r0, [pc, #220]	; (101b0 <pm_system_suspend+0x120>)
   100d4:	f011 f960 	bl	21398 <z_spin_lock_set_owner>
   100d8:	4b3a      	ldr	r3, [pc, #232]	; (101c4 <pm_system_suspend+0x134>)
   100da:	4e3b      	ldr	r6, [pc, #236]	; (101c8 <pm_system_suspend+0x138>)
   100dc:	5d19      	ldrb	r1, [r3, r4]
   100de:	191a      	adds	r2, r3, r4
   100e0:	b1b9      	cbz	r1, 10112 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   100e2:	ca07      	ldmia	r2, {r0, r1, r2}
   100e4:	eb06 0c04 	add.w	ip, r6, r4
   100e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   100ec:	2200      	movs	r2, #0
   100ee:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   100f0:	482f      	ldr	r0, [pc, #188]	; (101b0 <pm_system_suspend+0x120>)
   100f2:	f011 f943 	bl	2137c <z_spin_unlock_valid>
   100f6:	4604      	mov	r4, r0
   100f8:	b9b0      	cbnz	r0, 10128 <pm_system_suspend+0x98>
   100fa:	23c2      	movs	r3, #194	; 0xc2
   100fc:	4a2d      	ldr	r2, [pc, #180]	; (101b4 <pm_system_suspend+0x124>)
   100fe:	4933      	ldr	r1, [pc, #204]	; (101cc <pm_system_suspend+0x13c>)
   10100:	482e      	ldr	r0, [pc, #184]	; (101bc <pm_system_suspend+0x12c>)
   10102:	f016 fc0e 	bl	26922 <assert_print>
   10106:	492a      	ldr	r1, [pc, #168]	; (101b0 <pm_system_suspend+0x120>)
   10108:	4831      	ldr	r0, [pc, #196]	; (101d0 <pm_system_suspend+0x140>)
   1010a:	f016 fc0a 	bl	26922 <assert_print>
   1010e:	21c2      	movs	r1, #194	; 0xc2
   10110:	e7da      	b.n	100c8 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   10112:	4639      	mov	r1, r7
   10114:	4628      	mov	r0, r5
   10116:	f000 f865 	bl	101e4 <pm_policy_next_state>
		if (info != NULL) {
   1011a:	2800      	cmp	r0, #0
   1011c:	d0e8      	beq.n	100f0 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   1011e:	c807      	ldmia	r0, {r0, r1, r2}
   10120:	4434      	add	r4, r6
   10122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10126:	e7e3      	b.n	100f0 <pm_system_suspend+0x60>
	__asm__ volatile(
   10128:	f388 8811 	msr	BASEPRI, r8
   1012c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10130:	230c      	movs	r3, #12
   10132:	436b      	muls	r3, r5
   10134:	18f2      	adds	r2, r6, r3
   10136:	5cf3      	ldrb	r3, [r6, r3]
   10138:	b3ab      	cbz	r3, 101a6 <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1013a:	1c7b      	adds	r3, r7, #1
   1013c:	d00f      	beq.n	1015e <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1013e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10142:	2100      	movs	r1, #0
   10144:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10148:	4822      	ldr	r0, [pc, #136]	; (101d4 <pm_system_suspend+0x144>)
   1014a:	2300      	movs	r3, #0
   1014c:	fbee 010c 	umlal	r0, r1, lr, ip
   10150:	4a21      	ldr	r2, [pc, #132]	; (101d8 <pm_system_suspend+0x148>)
   10152:	f7f8 ff55 	bl	9000 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10156:	2101      	movs	r1, #1
   10158:	1a38      	subs	r0, r7, r0
   1015a:	f013 fddf 	bl	23d1c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1015e:	f012 fc5d 	bl	22a1c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10162:	2001      	movs	r0, #1
   10164:	f7ff fefc 	bl	ff60 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10168:	4b1c      	ldr	r3, [pc, #112]	; (101dc <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1016a:	096a      	lsrs	r2, r5, #5
   1016c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10170:	2201      	movs	r2, #1
   10172:	f005 011f 	and.w	r1, r5, #31
   10176:	408a      	lsls	r2, r1
   10178:	e8d3 0fef 	ldaex	r0, [r3]
   1017c:	4310      	orrs	r0, r2
   1017e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10182:	2900      	cmp	r1, #0
   10184:	d1f8      	bne.n	10178 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   10186:	4b16      	ldr	r3, [pc, #88]	; (101e0 <pm_system_suspend+0x150>)
   10188:	b133      	cbz	r3, 10198 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   1018a:	230c      	movs	r3, #12
   1018c:	436b      	muls	r3, r5
   1018e:	18f2      	adds	r2, r6, r3
   10190:	7851      	ldrb	r1, [r2, #1]
   10192:	5cf0      	ldrb	r0, [r6, r3]
   10194:	f016 fcb5 	bl	26b02 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10198:	f7ff ff42 	bl	10020 <pm_system_resume>
	k_sched_unlock();
   1019c:	f012 fcaa 	bl	22af4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   101a0:	4620      	mov	r0, r4
   101a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   101a6:	461c      	mov	r4, r3
   101a8:	e7fa      	b.n	101a0 <pm_system_suspend+0x110>
   101aa:	bf00      	nop
   101ac:	20021b58 	.word	0x20021b58
   101b0:	200215e0 	.word	0x200215e0
   101b4:	0002e6ba 	.word	0x0002e6ba
   101b8:	0002e713 	.word	0x0002e713
   101bc:	0002d881 	.word	0x0002d881
   101c0:	0002e728 	.word	0x0002e728
   101c4:	200215e4 	.word	0x200215e4
   101c8:	200215f0 	.word	0x200215f0
   101cc:	0002e6e7 	.word	0x0002e6e7
   101d0:	0002e6fe 	.word	0x0002e6fe
   101d4:	000f423f 	.word	0x000f423f
   101d8:	000f4240 	.word	0x000f4240
   101dc:	20021604 	.word	0x20021604
   101e0:	00026b03 	.word	0x00026b03

000101e4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   101e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101e8:	b085      	sub	sp, #20
   101ea:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   101ec:	a903      	add	r1, sp, #12
   101ee:	f000 f843 	bl	10278 <pm_state_cpu_get_all>
   101f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   101f6:	4604      	mov	r4, r0
   101f8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   101fc:	4b1b      	ldr	r3, [pc, #108]	; (1026c <pm_policy_next_state+0x88>)
   101fe:	9d03      	ldr	r5, [sp, #12]
   10200:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10204:	1e43      	subs	r3, r0, #1
   10206:	b21b      	sxth	r3, r3
   10208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1020c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10270 <pm_policy_next_state+0x8c>
   10210:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10214:	b924      	cbnz	r4, 10220 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10216:	46a1      	mov	r9, r4
}
   10218:	4648      	mov	r0, r9
   1021a:	b005      	add	sp, #20
   1021c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10220:	46c4      	mov	ip, r8
   10222:	4659      	mov	r1, fp
   10224:	6868      	ldr	r0, [r5, #4]
   10226:	2300      	movs	r3, #0
   10228:	fbe0 c107 	umlal	ip, r1, r0, r7
   1022c:	4a11      	ldr	r2, [pc, #68]	; (10274 <pm_policy_next_state+0x90>)
   1022e:	4660      	mov	r0, ip
   10230:	f7f8 fee6 	bl	9000 <__aeabi_uldivmod>
   10234:	46c4      	mov	ip, r8
   10236:	4659      	mov	r1, fp
   10238:	9001      	str	r0, [sp, #4]
   1023a:	68a8      	ldr	r0, [r5, #8]
   1023c:	2300      	movs	r3, #0
   1023e:	fbe0 c107 	umlal	ip, r1, r0, r7
   10242:	4a0c      	ldr	r2, [pc, #48]	; (10274 <pm_policy_next_state+0x90>)
   10244:	4660      	mov	r0, ip
   10246:	f7f8 fedb 	bl	9000 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1024a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1024e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10250:	d001      	beq.n	10256 <pm_policy_next_state+0x72>
   10252:	4582      	cmp	sl, r0
   10254:	d905      	bls.n	10262 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10256:	1c73      	adds	r3, r6, #1
   10258:	d0de      	beq.n	10218 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1025a:	9b01      	ldr	r3, [sp, #4]
   1025c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1025e:	42b0      	cmp	r0, r6
   10260:	d9da      	bls.n	10218 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10262:	3c01      	subs	r4, #1
   10264:	b2a4      	uxth	r4, r4
   10266:	3d0c      	subs	r5, #12
   10268:	e7d4      	b.n	10214 <pm_policy_next_state+0x30>
   1026a:	bf00      	nop
   1026c:	200085cc 	.word	0x200085cc
   10270:	000f423f 	.word	0x000f423f
   10274:	000f4240 	.word	0x000f4240

00010278 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10278:	b908      	cbnz	r0, 1027e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1027a:	4b02      	ldr	r3, [pc, #8]	; (10284 <pm_state_cpu_get_all+0xc>)
   1027c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1027e:	2000      	movs	r0, #0
   10280:	4770      	bx	lr
   10282:	bf00      	nop
   10284:	0002cf10 	.word	0x0002cf10

00010288 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10288:	4b03      	ldr	r3, [pc, #12]	; (10298 <nus_ccc_cfg_changed+0x10>)
   1028a:	689b      	ldr	r3, [r3, #8]
   1028c:	b11b      	cbz	r3, 10296 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   1028e:	1e48      	subs	r0, r1, #1
   10290:	bf18      	it	ne
   10292:	2001      	movne	r0, #1
   10294:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   10296:	4770      	bx	lr
   10298:	20021608 	.word	0x20021608

0001029c <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   1029c:	b510      	push	{r4, lr}
   1029e:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   102a0:	4b03      	ldr	r3, [pc, #12]	; (102b0 <on_receive+0x14>)
{
   102a2:	4611      	mov	r1, r2
	if (nus_cb.received) {
   102a4:	681b      	ldr	r3, [r3, #0]
   102a6:	b10b      	cbz	r3, 102ac <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   102a8:	4622      	mov	r2, r4
   102aa:	4798      	blx	r3
}
	return len;
}
   102ac:	4620      	mov	r0, r4
   102ae:	bd10      	pop	{r4, pc}
   102b0:	20021608 	.word	0x20021608

000102b4 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   102b4:	4b02      	ldr	r3, [pc, #8]	; (102c0 <on_sent+0xc>)
   102b6:	685b      	ldr	r3, [r3, #4]
   102b8:	b103      	cbz	r3, 102bc <on_sent+0x8>
		nus_cb.sent(conn);
   102ba:	4718      	bx	r3
	}
}
   102bc:	4770      	bx	lr
   102be:	bf00      	nop
   102c0:	20021608 	.word	0x20021608

000102c4 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   102c4:	b130      	cbz	r0, 102d4 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   102c6:	4b04      	ldr	r3, [pc, #16]	; (102d8 <bt_nus_init+0x14>)
   102c8:	6802      	ldr	r2, [r0, #0]
   102ca:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   102cc:	6842      	ldr	r2, [r0, #4]
   102ce:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   102d0:	6882      	ldr	r2, [r0, #8]
   102d2:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   102d4:	2000      	movs	r0, #0
   102d6:	4770      	bx	lr
   102d8:	20021608 	.word	0x20021608

000102dc <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   102dc:	b570      	push	{r4, r5, r6, lr}
   102de:	460e      	mov	r6, r1
   102e0:	4615      	mov	r5, r2
   102e2:	4604      	mov	r4, r0
   102e4:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   102e6:	2100      	movs	r1, #0
   102e8:	2218      	movs	r2, #24
   102ea:	4668      	mov	r0, sp
   102ec:	f01b fb58 	bl	2b9a0 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   102f0:	490b      	ldr	r1, [pc, #44]	; (10320 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   102f2:	4b0c      	ldr	r3, [pc, #48]	; (10324 <bt_nus_send+0x48>)
	params.data = data;
   102f4:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   102f8:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   102fc:	9304      	str	r3, [sp, #16]

	if (!conn) {
   102fe:	b92c      	cbnz	r4, 1030c <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10300:	4669      	mov	r1, sp
   10302:	4620      	mov	r0, r4
   10304:	f007 ff0a 	bl	1811c <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10308:	b006      	add	sp, #24
   1030a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   1030c:	2201      	movs	r2, #1
   1030e:	4620      	mov	r0, r4
   10310:	f007 fbd2 	bl	17ab8 <bt_gatt_is_subscribed>
   10314:	2800      	cmp	r0, #0
   10316:	d1f3      	bne.n	10300 <bt_nus_send+0x24>
		return -EINVAL;
   10318:	f06f 0015 	mvn.w	r0, #21
   1031c:	e7f4      	b.n	10308 <bt_nus_send+0x2c>
   1031e:	bf00      	nop
   10320:	0002cf38 	.word	0x0002cf38
   10324:	000102b5 	.word	0x000102b5

00010328 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10328:	4904      	ldr	r1, [pc, #16]	; (1033c <sub_bytes+0x14>)
   1032a:	1e43      	subs	r3, r0, #1
   1032c:	300f      	adds	r0, #15
   1032e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10332:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10334:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10336:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10338:	d1f9      	bne.n	1032e <sub_bytes+0x6>
	}
}
   1033a:	4770      	bx	lr
   1033c:	0002ee25 	.word	0x0002ee25

00010340 <tc_aes128_set_encrypt_key>:
{
   10340:	b5f0      	push	{r4, r5, r6, r7, lr}
   10342:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10344:	4e26      	ldr	r6, [pc, #152]	; (103e0 <tc_aes128_set_encrypt_key+0xa0>)
{
   10346:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10348:	ad01      	add	r5, sp, #4
{
   1034a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1034c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1034e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10350:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10354:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10358:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   1035c:	4638      	mov	r0, r7
   1035e:	2f00      	cmp	r7, #0
   10360:	d039      	beq.n	103d6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10362:	2c00      	cmp	r4, #0
   10364:	d039      	beq.n	103da <tc_aes128_set_encrypt_key+0x9a>
   10366:	1f38      	subs	r0, r7, #4
   10368:	4602      	mov	r2, r0
   1036a:	4621      	mov	r1, r4
   1036c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1036e:	784b      	ldrb	r3, [r1, #1]
   10370:	780d      	ldrb	r5, [r1, #0]
   10372:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10374:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10378:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   1037a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1037c:	432b      	orrs	r3, r5
   1037e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10382:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10384:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10388:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1038c:	d1ef      	bne.n	1036e <tc_aes128_set_encrypt_key+0x2e>
   1038e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10390:	4c14      	ldr	r4, [pc, #80]	; (103e4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   10392:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10394:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10396:	d116      	bne.n	103c6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10398:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1039c:	5ca5      	ldrb	r5, [r4, r2]
   1039e:	0e1a      	lsrs	r2, r3, #24
   103a0:	5ca2      	ldrb	r2, [r4, r2]
   103a2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   103a6:	f3c3 2507 	ubfx	r5, r3, #8, #8
   103aa:	5d65      	ldrb	r5, [r4, r5]
   103ac:	b2db      	uxtb	r3, r3
   103ae:	5ce3      	ldrb	r3, [r4, r3]
   103b0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   103b4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   103b8:	f021 0303 	bic.w	r3, r1, #3
   103bc:	3330      	adds	r3, #48	; 0x30
   103be:	446b      	add	r3, sp
   103c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   103c4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   103c6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   103ca:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   103cc:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   103ce:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   103d0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   103d2:	d1de      	bne.n	10392 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   103d4:	2001      	movs	r0, #1
}
   103d6:	b00d      	add	sp, #52	; 0x34
   103d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   103da:	4620      	mov	r0, r4
   103dc:	e7fb      	b.n	103d6 <tc_aes128_set_encrypt_key+0x96>
   103de:	bf00      	nop
   103e0:	0002c9bc 	.word	0x0002c9bc
   103e4:	0002ee25 	.word	0x0002ee25

000103e8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   103e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   103ec:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   103ee:	6803      	ldr	r3, [r0, #0]
{
   103f0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   103f2:	9302      	str	r3, [sp, #8]
   103f4:	6843      	ldr	r3, [r0, #4]
   103f6:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 105b4 <compress+0x1cc>
   103fa:	9303      	str	r3, [sp, #12]
   103fc:	6883      	ldr	r3, [r0, #8]
   103fe:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   10402:	9304      	str	r3, [sp, #16]
   10404:	68c3      	ldr	r3, [r0, #12]
   10406:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10408:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1040a:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1040e:	9306      	str	r3, [sp, #24]
   10410:	6943      	ldr	r3, [r0, #20]
   10412:	9307      	str	r3, [sp, #28]
   10414:	6983      	ldr	r3, [r0, #24]
   10416:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   1041a:	9308      	str	r3, [sp, #32]
   1041c:	69c3      	ldr	r3, [r0, #28]
   1041e:	4698      	mov	r8, r3
   10420:	9309      	str	r3, [sp, #36]	; 0x24
   10422:	9b08      	ldr	r3, [sp, #32]
   10424:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   10426:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   10428:	ab0c      	add	r3, sp, #48	; 0x30
   1042a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1042c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   10430:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   10432:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10436:	44a9      	add	r9, r5
   10438:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   1043c:	9d00      	ldr	r5, [sp, #0]
   1043e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   10442:	444b      	add	r3, r9
   10444:	ea25 0502 	bic.w	r5, r5, r2
   10448:	ea02 090c 	and.w	r9, r2, ip
   1044c:	ea85 0509 	eor.w	r5, r5, r9
   10450:	442b      	add	r3, r5
   10452:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   10454:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   10458:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   1045c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10460:	4025      	ands	r5, r4
   10462:	ea06 090b 	and.w	r9, r6, fp
   10466:	ea85 0509 	eor.w	r5, r5, r9
   1046a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   1046e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10470:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   10472:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   10474:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   10478:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   1047a:	46de      	mov	lr, fp
   1047c:	f8dd 8000 	ldr.w	r8, [sp]
   10480:	f040 8088 	bne.w	10594 <compress+0x1ac>
   10484:	f04f 0a10 	mov.w	sl, #16
   10488:	494b      	ldr	r1, [pc, #300]	; (105b8 <compress+0x1d0>)
   1048a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   1048c:	4651      	mov	r1, sl
   1048e:	f10a 0a01 	add.w	sl, sl, #1
   10492:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10496:	f00a 070f 	and.w	r7, sl, #15
   1049a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1049e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   104a2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   104a6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   104aa:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   104ac:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   104b0:	f101 070e 	add.w	r7, r1, #14
   104b4:	f007 070f 	and.w	r7, r7, #15
   104b8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   104bc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   104c0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   104c2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   104c6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   104ca:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   104ce:	f001 010f 	and.w	r1, r1, #15
   104d2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   104d6:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   104da:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   104de:	f859 ec40 	ldr.w	lr, [r9, #-64]
   104e2:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   104e6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   104ea:	4471      	add	r1, lr
		s0 = sigma0(s0);
   104ec:	f8dd e004 	ldr.w	lr, [sp, #4]
   104f0:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   104f4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   104f8:	4441      	add	r1, r8
		s1 = sigma1(s1);
   104fa:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   104fe:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10500:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10504:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10508:	ea2c 0705 	bic.w	r7, ip, r5
   1050c:	ea87 0708 	eor.w	r7, r7, r8
   10510:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10514:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10518:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   1051c:	4477      	add	r7, lr
   1051e:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10522:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10526:	4477      	add	r7, lr
   10528:	440f      	add	r7, r1
   1052a:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   1052c:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10530:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   10532:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10536:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   1053a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   1053e:	ea07 0703 	and.w	r7, r7, r3
   10542:	ea04 0806 	and.w	r8, r4, r6
   10546:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   1054a:	ea87 0708 	eor.w	r7, r7, r8
   1054e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10550:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   10552:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   10556:	f8cd c000 	str.w	ip, [sp]
   1055a:	46b3      	mov	fp, r6
   1055c:	d122      	bne.n	105a4 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1055e:	9902      	ldr	r1, [sp, #8]
   10560:	4439      	add	r1, r7
   10562:	6001      	str	r1, [r0, #0]
   10564:	9903      	ldr	r1, [sp, #12]
   10566:	4419      	add	r1, r3
   10568:	9b04      	ldr	r3, [sp, #16]
   1056a:	6041      	str	r1, [r0, #4]
   1056c:	4423      	add	r3, r4
   1056e:	6083      	str	r3, [r0, #8]
   10570:	9b05      	ldr	r3, [sp, #20]
   10572:	4433      	add	r3, r6
   10574:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   10576:	9b06      	ldr	r3, [sp, #24]
   10578:	4473      	add	r3, lr
   1057a:	6103      	str	r3, [r0, #16]
   1057c:	9b07      	ldr	r3, [sp, #28]
   1057e:	442b      	add	r3, r5
   10580:	6143      	str	r3, [r0, #20]
   10582:	9b08      	ldr	r3, [sp, #32]
   10584:	4413      	add	r3, r2
   10586:	6183      	str	r3, [r0, #24]
   10588:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1058a:	4463      	add	r3, ip
   1058c:	61c3      	str	r3, [r0, #28]
}
   1058e:	b01d      	add	sp, #116	; 0x74
   10590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10594:	46b3      	mov	fp, r6
   10596:	f8cd c000 	str.w	ip, [sp]
   1059a:	4626      	mov	r6, r4
   1059c:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   1059e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   105a0:	462a      	mov	r2, r5
   105a2:	e740      	b.n	10426 <compress+0x3e>
   105a4:	4694      	mov	ip, r2
   105a6:	4626      	mov	r6, r4
   105a8:	462a      	mov	r2, r5
   105aa:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   105ac:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   105ae:	463b      	mov	r3, r7
   105b0:	e76c      	b.n	1048c <compress+0xa4>
   105b2:	bf00      	nop
   105b4:	0002d00c 	.word	0x0002d00c
   105b8:	0002d048 	.word	0x0002d048

000105bc <tc_sha256_init>:
{
   105bc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   105be:	4604      	mov	r4, r0
   105c0:	b1c8      	cbz	r0, 105f6 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   105c2:	2270      	movs	r2, #112	; 0x70
   105c4:	2100      	movs	r1, #0
   105c6:	f017 f8a8 	bl	2771a <_set>
	s->iv[1] = 0xbb67ae85;
   105ca:	4b0b      	ldr	r3, [pc, #44]	; (105f8 <tc_sha256_init+0x3c>)
   105cc:	4a0b      	ldr	r2, [pc, #44]	; (105fc <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   105ce:	490c      	ldr	r1, [pc, #48]	; (10600 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   105d0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   105d4:	4b0b      	ldr	r3, [pc, #44]	; (10604 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   105d6:	480c      	ldr	r0, [pc, #48]	; (10608 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   105d8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   105dc:	4b0b      	ldr	r3, [pc, #44]	; (1060c <tc_sha256_init+0x50>)
   105de:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   105e2:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   105e4:	4b0a      	ldr	r3, [pc, #40]	; (10610 <tc_sha256_init+0x54>)
   105e6:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   105e8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   105ec:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   105f0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   105f4:	61e3      	str	r3, [r4, #28]
}
   105f6:	bd10      	pop	{r4, pc}
   105f8:	bb67ae85 	.word	0xbb67ae85
   105fc:	6a09e667 	.word	0x6a09e667
   10600:	3c6ef372 	.word	0x3c6ef372
   10604:	a54ff53a 	.word	0xa54ff53a
   10608:	510e527f 	.word	0x510e527f
   1060c:	9b05688c 	.word	0x9b05688c
   10610:	1f83d9ab 	.word	0x1f83d9ab

00010614 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10614:	4901      	ldr	r1, [pc, #4]	; (1061c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10616:	2210      	movs	r2, #16
	str	r2, [r1]
   10618:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1061a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1061c:	e000ed10 	.word	0xe000ed10

00010620 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10620:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10622:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10624:	f380 8811 	msr	BASEPRI, r0
	isb
   10628:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1062c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10630:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10632:	b662      	cpsie	i
	isb
   10634:	f3bf 8f6f 	isb	sy

	bx	lr
   10638:	4770      	bx	lr
   1063a:	bf00      	nop

0001063c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1063c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1063e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10640:	f381 8811 	msr	BASEPRI, r1

	wfe
   10644:	bf20      	wfe

	msr	BASEPRI, r0
   10646:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1064a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1064c:	4770      	bx	lr
   1064e:	bf00      	nop

00010650 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10654:	4681      	mov	r9, r0

	if (esf != NULL) {
   10656:	460c      	mov	r4, r1
{
   10658:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   1065a:	2900      	cmp	r1, #0
   1065c:	d04c      	beq.n	106f8 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1065e:	e9d1 1200 	ldrd	r1, r2, [r1]
   10662:	466e      	mov	r6, sp
   10664:	b08a      	sub	sp, #40	; 0x28
   10666:	68a3      	ldr	r3, [r4, #8]
   10668:	466d      	mov	r5, sp
   1066a:	f04f 0a05 	mov.w	sl, #5
   1066e:	46a8      	mov	r8, r5
   10670:	4825      	ldr	r0, [pc, #148]	; (10708 <z_arm_fatal_error+0xb8>)
   10672:	e9c5 2307 	strd	r2, r3, [r5, #28]
   10676:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1067a:	f848 af10 	str.w	sl, [r8, #16]!
   1067e:	2300      	movs	r3, #0
   10680:	4642      	mov	r2, r8
   10682:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   10686:	4821      	ldr	r0, [pc, #132]	; (1070c <z_arm_fatal_error+0xbc>)
   10688:	f7fd ff82 	bl	e590 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1068c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   10690:	46b5      	mov	sp, r6
   10692:	6963      	ldr	r3, [r4, #20]
   10694:	46ad      	mov	sp, r5
   10696:	481e      	ldr	r0, [pc, #120]	; (10710 <z_arm_fatal_error+0xc0>)
   10698:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1069c:	e9c5 0105 	strd	r0, r1, [r5, #20]
   106a0:	f8c5 a010 	str.w	sl, [r5, #16]
   106a4:	2300      	movs	r3, #0
   106a6:	4642      	mov	r2, r8
   106a8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   106ac:	4817      	ldr	r0, [pc, #92]	; (1070c <z_arm_fatal_error+0xbc>)
   106ae:	f7fd ff6f 	bl	e590 <z_impl_z_log_msg_static_create>
   106b2:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   106b4:	b088      	sub	sp, #32
   106b6:	69e3      	ldr	r3, [r4, #28]
   106b8:	466d      	mov	r5, sp
   106ba:	f04f 0a03 	mov.w	sl, #3
   106be:	46a8      	mov	r8, r5
   106c0:	4a14      	ldr	r2, [pc, #80]	; (10714 <z_arm_fatal_error+0xc4>)
   106c2:	e9c5 2305 	strd	r2, r3, [r5, #20]
   106c6:	f848 af10 	str.w	sl, [r8, #16]!
   106ca:	2300      	movs	r3, #0
   106cc:	4642      	mov	r2, r8
   106ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   106d2:	480e      	ldr	r0, [pc, #56]	; (1070c <z_arm_fatal_error+0xbc>)
   106d4:	f7fd ff5c 	bl	e590 <z_impl_z_log_msg_static_create>
   106d8:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   106da:	69a3      	ldr	r3, [r4, #24]
   106dc:	46ad      	mov	sp, r5
   106de:	4a0e      	ldr	r2, [pc, #56]	; (10718 <z_arm_fatal_error+0xc8>)
   106e0:	f8c5 a010 	str.w	sl, [r5, #16]
   106e4:	e9c5 2305 	strd	r2, r3, [r5, #20]
   106e8:	2300      	movs	r3, #0
   106ea:	4642      	mov	r2, r8
   106ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   106f0:	4806      	ldr	r0, [pc, #24]	; (1070c <z_arm_fatal_error+0xbc>)
   106f2:	f7fd ff4d 	bl	e590 <z_impl_z_log_msg_static_create>
   106f6:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   106f8:	4621      	mov	r1, r4
   106fa:	4648      	mov	r0, r9
   106fc:	f010 f980 	bl	20a00 <z_fatal_error>
}
   10700:	46bd      	mov	sp, r7
   10702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10706:	bf00      	nop
   10708:	0002ef25 	.word	0x0002ef25
   1070c:	0002c8cc 	.word	0x0002c8cc
   10710:	0002ef54 	.word	0x0002ef54
   10714:	0002ef83 	.word	0x0002ef83
   10718:	0002ef92 	.word	0x0002ef92

0001071c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1071c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1071e:	2800      	cmp	r0, #0
   10720:	db07      	blt.n	10732 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10722:	2301      	movs	r3, #1
   10724:	0941      	lsrs	r1, r0, #5
   10726:	4a03      	ldr	r2, [pc, #12]	; (10734 <arch_irq_enable+0x18>)
   10728:	f000 001f 	and.w	r0, r0, #31
   1072c:	4083      	lsls	r3, r0
   1072e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10732:	4770      	bx	lr
   10734:	e000e100 	.word	0xe000e100

00010738 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10738:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1073a:	2800      	cmp	r0, #0
   1073c:	db0c      	blt.n	10758 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1073e:	2201      	movs	r2, #1
   10740:	4906      	ldr	r1, [pc, #24]	; (1075c <arch_irq_disable+0x24>)
   10742:	0943      	lsrs	r3, r0, #5
   10744:	f000 001f 	and.w	r0, r0, #31
   10748:	4082      	lsls	r2, r0
   1074a:	3320      	adds	r3, #32
   1074c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10750:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10754:	f3bf 8f6f 	isb	sy
}
   10758:	4770      	bx	lr
   1075a:	bf00      	nop
   1075c:	e000e100 	.word	0xe000e100

00010760 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10760:	4b05      	ldr	r3, [pc, #20]	; (10778 <arch_irq_is_enabled+0x18>)
   10762:	0942      	lsrs	r2, r0, #5
   10764:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10768:	2301      	movs	r3, #1
   1076a:	f000 001f 	and.w	r0, r0, #31
   1076e:	fa03 f000 	lsl.w	r0, r3, r0
}
   10772:	4010      	ands	r0, r2
   10774:	4770      	bx	lr
   10776:	bf00      	nop
   10778:	e000e100 	.word	0xe000e100

0001077c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1077c:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1077e:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10780:	2b07      	cmp	r3, #7
{
   10782:	4604      	mov	r4, r0
   10784:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10786:	d90f      	bls.n	107a8 <z_arm_irq_priority_set+0x2c>
   10788:	235b      	movs	r3, #91	; 0x5b
   1078a:	4a10      	ldr	r2, [pc, #64]	; (107cc <z_arm_irq_priority_set+0x50>)
   1078c:	4910      	ldr	r1, [pc, #64]	; (107d0 <z_arm_irq_priority_set+0x54>)
   1078e:	4811      	ldr	r0, [pc, #68]	; (107d4 <z_arm_irq_priority_set+0x58>)
   10790:	f016 f8c7 	bl	26922 <assert_print>
   10794:	4629      	mov	r1, r5
   10796:	4810      	ldr	r0, [pc, #64]	; (107d8 <z_arm_irq_priority_set+0x5c>)
   10798:	2307      	movs	r3, #7
   1079a:	4622      	mov	r2, r4
   1079c:	f016 f8c1 	bl	26922 <assert_print>
   107a0:	215b      	movs	r1, #91	; 0x5b
   107a2:	480a      	ldr	r0, [pc, #40]	; (107cc <z_arm_irq_priority_set+0x50>)
   107a4:	f016 f8b6 	bl	26914 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   107a8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   107aa:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   107ac:	bfac      	ite	ge
   107ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   107b2:	4a0a      	ldrlt	r2, [pc, #40]	; (107dc <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   107b4:	ea4f 1343 	mov.w	r3, r3, lsl #5
   107b8:	b2db      	uxtb	r3, r3
   107ba:	bfab      	itete	ge
   107bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   107c0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   107c4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   107c8:	5413      	strblt	r3, [r2, r0]
}
   107ca:	bd38      	pop	{r3, r4, r5, pc}
   107cc:	0002efc0 	.word	0x0002efc0
   107d0:	0002eff6 	.word	0x0002eff6
   107d4:	0002d881 	.word	0x0002d881
   107d8:	0002f011 	.word	0x0002f011
   107dc:	e000ed14 	.word	0xe000ed14

000107e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   107e0:	bf30      	wfi
    b z_SysNmiOnReset
   107e2:	f7ff bffd 	b.w	107e0 <z_SysNmiOnReset>
   107e6:	bf00      	nop

000107e8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   107e8:	4a0b      	ldr	r2, [pc, #44]	; (10818 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   107ea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   107ec:	4b0b      	ldr	r3, [pc, #44]	; (1081c <z_arm_prep_c+0x34>)
   107ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   107f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   107f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   107f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   107fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10800:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10808:	f010 f9cc 	bl	20ba4 <z_bss_zero>
	z_data_copy();
   1080c:	f013 f8c6 	bl	2399c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10810:	f000 fc06 	bl	11020 <z_arm_interrupt_init>
	z_cstart();
   10814:	f010 fa06 	bl	20c24 <z_cstart>
   10818:	00008000 	.word	0x00008000
   1081c:	e000ed00 	.word	0xe000ed00

00010820 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10820:	4a09      	ldr	r2, [pc, #36]	; (10848 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10822:	490a      	ldr	r1, [pc, #40]	; (1084c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10824:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   10826:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   10828:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1082a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1082c:	4908      	ldr	r1, [pc, #32]	; (10850 <arch_swap+0x30>)
   1082e:	684b      	ldr	r3, [r1, #4]
   10830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10834:	604b      	str	r3, [r1, #4]
   10836:	2300      	movs	r3, #0
   10838:	f383 8811 	msr	BASEPRI, r3
   1083c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10840:	6893      	ldr	r3, [r2, #8]
}
   10842:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10844:	4770      	bx	lr
   10846:	bf00      	nop
   10848:	20021b58 	.word	0x20021b58
   1084c:	0002d75c 	.word	0x0002d75c
   10850:	e000ed00 	.word	0xe000ed00

00010854 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10854:	4915      	ldr	r1, [pc, #84]	; (108ac <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10856:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   10858:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1085c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10860:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10862:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10866:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1086a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1086c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10870:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10874:	4f0e      	ldr	r7, [pc, #56]	; (108b0 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10876:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1087a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1087c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1087e:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   10880:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10884:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   10886:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10888:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1088a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1088e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10892:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10896:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1089a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1089e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   108a0:	f017 fb88 	bl	27fb4 <configure_builtin_stack_guard>
    pop {r2, lr}
   108a4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   108a8:	4770      	bx	lr
   108aa:	0000      	.short	0x0000
    ldr r1, =_kernel
   108ac:	20021b58 	.word	0x20021b58
    ldr v4, =_SCS_ICSR
   108b0:	e000ed04 	.word	0xe000ed04

000108b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   108b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   108b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   108ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   108be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   108c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   108c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   108c8:	2902      	cmp	r1, #2
    beq _oops
   108ca:	d0ff      	beq.n	108cc <_oops>

000108cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   108cc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   108ce:	f017 fb62 	bl	27f96 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   108d2:	bd01      	pop	{r0, pc}

000108d4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   108d4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   108d8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   108da:	490d      	ldr	r1, [pc, #52]	; (10910 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   108dc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   108e0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   108e2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   108e6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   108ea:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   108ec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   108f0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   108f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   108f8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   108fc:	2300      	movs	r3, #0
   108fe:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   10900:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10904:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   10906:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   10908:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1090c:	4770      	bx	lr
   1090e:	bf00      	nop
   10910:	000265d3 	.word	0x000265d3

00010914 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10914:	4b08      	ldr	r3, [pc, #32]	; (10938 <arch_switch_to_main_thread+0x24>)
   10916:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   10918:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1091a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1091e:	4610      	mov	r0, r2
   10920:	f381 8809 	msr	PSP, r1
   10924:	2100      	movs	r1, #0
   10926:	b663      	cpsie	if
   10928:	f381 8811 	msr	BASEPRI, r1
   1092c:	f3bf 8f6f 	isb	sy
   10930:	2200      	movs	r2, #0
   10932:	2300      	movs	r3, #0
   10934:	f015 fe4d 	bl	265d2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10938:	20021b58 	.word	0x20021b58

0001093c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1093c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1093e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10940:	4a0b      	ldr	r2, [pc, #44]	; (10970 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10942:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   10944:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10946:	bf1e      	ittt	ne
	movne	r1, #0
   10948:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1094a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1094c:	f01a fde8 	blne	2b520 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10950:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10952:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10956:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1095a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1095e:	4905      	ldr	r1, [pc, #20]	; (10974 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10960:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10962:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10964:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10966:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1096a:	4903      	ldr	r1, [pc, #12]	; (10978 <_isr_wrapper+0x3c>)
	bx r1
   1096c:	4708      	bx	r1
   1096e:	0000      	.short	0x0000
	ldr r2, =_kernel
   10970:	20021b58 	.word	0x20021b58
	ldr r1, =_sw_isr_table
   10974:	0002c388 	.word	0x0002c388
	ldr r1, =z_arm_int_exit
   10978:	0001097d 	.word	0x0001097d

0001097c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1097c:	4b04      	ldr	r3, [pc, #16]	; (10990 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1097e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10980:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10982:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10984:	d003      	beq.n	1098e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   10986:	4903      	ldr	r1, [pc, #12]	; (10994 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1098c:	600a      	str	r2, [r1, #0]

0001098e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1098e:	4770      	bx	lr
	ldr r3, =_kernel
   10990:	20021b58 	.word	0x20021b58
	ldr r1, =_SCS_ICSR
   10994:	e000ed04 	.word	0xe000ed04

00010998 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1099c:	b086      	sub	sp, #24
   1099e:	4606      	mov	r6, r0
   109a0:	460d      	mov	r5, r1
   109a2:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   109a4:	2402      	movs	r4, #2
   109a6:	4b4b      	ldr	r3, [pc, #300]	; (10ad4 <mem_manage_fault.constprop.0+0x13c>)
   109a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   109ac:	617b      	str	r3, [r7, #20]
   109ae:	484a      	ldr	r0, [pc, #296]	; (10ad8 <mem_manage_fault.constprop.0+0x140>)
   109b0:	613c      	str	r4, [r7, #16]
   109b2:	f107 0210 	add.w	r2, r7, #16
   109b6:	f017 fb01 	bl	27fbc <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   109ba:	4b48      	ldr	r3, [pc, #288]	; (10adc <mem_manage_fault.constprop.0+0x144>)
   109bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   109be:	06db      	lsls	r3, r3, #27
   109c0:	d509      	bpl.n	109d6 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   109c2:	4b47      	ldr	r3, [pc, #284]	; (10ae0 <mem_manage_fault.constprop.0+0x148>)
   109c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   109c8:	e9c7 4304 	strd	r4, r3, [r7, #16]
   109cc:	4842      	ldr	r0, [pc, #264]	; (10ad8 <mem_manage_fault.constprop.0+0x140>)
   109ce:	f107 0210 	add.w	r2, r7, #16
   109d2:	f017 faf3 	bl	27fbc <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   109d6:	4b41      	ldr	r3, [pc, #260]	; (10adc <mem_manage_fault.constprop.0+0x144>)
   109d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   109da:	0718      	lsls	r0, r3, #28
   109dc:	d50a      	bpl.n	109f4 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   109de:	4b41      	ldr	r3, [pc, #260]	; (10ae4 <mem_manage_fault.constprop.0+0x14c>)
   109e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   109e4:	617b      	str	r3, [r7, #20]
   109e6:	2302      	movs	r3, #2
   109e8:	483b      	ldr	r0, [pc, #236]	; (10ad8 <mem_manage_fault.constprop.0+0x140>)
   109ea:	613b      	str	r3, [r7, #16]
   109ec:	f107 0210 	add.w	r2, r7, #16
   109f0:	f017 fae4 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   109f4:	4c39      	ldr	r4, [pc, #228]	; (10adc <mem_manage_fault.constprop.0+0x144>)
   109f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   109f8:	0799      	lsls	r1, r3, #30
   109fa:	d522      	bpl.n	10a42 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   109fc:	46e8      	mov	r8, sp
   109fe:	4b3a      	ldr	r3, [pc, #232]	; (10ae8 <mem_manage_fault.constprop.0+0x150>)
   10a00:	f107 0210 	add.w	r2, r7, #16
   10a04:	617b      	str	r3, [r7, #20]
   10a06:	2302      	movs	r3, #2
   10a08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10a0c:	613b      	str	r3, [r7, #16]
   10a0e:	4832      	ldr	r0, [pc, #200]	; (10ad8 <mem_manage_fault.constprop.0+0x140>)
   10a10:	f017 fad4 	bl	27fbc <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   10a14:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10a16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10a18:	0612      	lsls	r2, r2, #24
   10a1a:	d512      	bpl.n	10a42 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10a1c:	b088      	sub	sp, #32
   10a1e:	466a      	mov	r2, sp
   10a20:	4932      	ldr	r1, [pc, #200]	; (10aec <mem_manage_fault.constprop.0+0x154>)
   10a22:	482d      	ldr	r0, [pc, #180]	; (10ad8 <mem_manage_fault.constprop.0+0x140>)
   10a24:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10a28:	2303      	movs	r3, #3
   10a2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10a2e:	f842 3f10 	str.w	r3, [r2, #16]!
   10a32:	f017 fac3 	bl	27fbc <z_log_msg_static_create.constprop.0>
   10a36:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10a38:	b11e      	cbz	r6, 10a42 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10a40:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10a42:	4b26      	ldr	r3, [pc, #152]	; (10adc <mem_manage_fault.constprop.0+0x144>)
   10a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10a46:	07db      	lsls	r3, r3, #31
   10a48:	d50a      	bpl.n	10a60 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   10a4a:	4b29      	ldr	r3, [pc, #164]	; (10af0 <mem_manage_fault.constprop.0+0x158>)
   10a4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10a50:	617b      	str	r3, [r7, #20]
   10a52:	2302      	movs	r3, #2
   10a54:	4820      	ldr	r0, [pc, #128]	; (10ad8 <mem_manage_fault.constprop.0+0x140>)
   10a56:	613b      	str	r3, [r7, #16]
   10a58:	f107 0210 	add.w	r2, r7, #16
   10a5c:	f017 faae 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10a60:	4b1e      	ldr	r3, [pc, #120]	; (10adc <mem_manage_fault.constprop.0+0x144>)
   10a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10a64:	069e      	lsls	r6, r3, #26
   10a66:	d50a      	bpl.n	10a7e <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   10a68:	4b22      	ldr	r3, [pc, #136]	; (10af4 <mem_manage_fault.constprop.0+0x15c>)
   10a6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10a6e:	617b      	str	r3, [r7, #20]
   10a70:	2302      	movs	r3, #2
   10a72:	4819      	ldr	r0, [pc, #100]	; (10ad8 <mem_manage_fault.constprop.0+0x140>)
   10a74:	613b      	str	r3, [r7, #16]
   10a76:	f107 0210 	add.w	r2, r7, #16
   10a7a:	f017 fa9f 	bl	27fbc <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10a7e:	4b17      	ldr	r3, [pc, #92]	; (10adc <mem_manage_fault.constprop.0+0x144>)
   10a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10a82:	06d4      	lsls	r4, r2, #27
   10a84:	d402      	bmi.n	10a8c <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10a88:	0790      	lsls	r0, r2, #30
   10a8a:	d511      	bpl.n	10ab0 <mem_manage_fault.constprop.0+0x118>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   10a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10a8e:	06d9      	lsls	r1, r3, #27
   10a90:	d50e      	bpl.n	10ab0 <mem_manage_fault.constprop.0+0x118>
   10a92:	4919      	ldr	r1, [pc, #100]	; (10af8 <mem_manage_fault.constprop.0+0x160>)
   10a94:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   10a98:	4a18      	ldr	r2, [pc, #96]	; (10afc <mem_manage_fault.constprop.0+0x164>)
   10a9a:	4819      	ldr	r0, [pc, #100]	; (10b00 <mem_manage_fault.constprop.0+0x168>)
   10a9c:	f015 ff41 	bl	26922 <assert_print>
   10aa0:	4818      	ldr	r0, [pc, #96]	; (10b04 <mem_manage_fault.constprop.0+0x16c>)
   10aa2:	f015 ff3e 	bl	26922 <assert_print>
   10aa6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   10aaa:	4814      	ldr	r0, [pc, #80]	; (10afc <mem_manage_fault.constprop.0+0x164>)
   10aac:	f015 ff32 	bl	26914 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   10ab0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10ab2:	4b0a      	ldr	r3, [pc, #40]	; (10adc <mem_manage_fault.constprop.0+0x144>)

	return reason;
}
   10ab4:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10ab8:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   10aba:	bf42      	ittt	mi
   10abc:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   10abe:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   10ac2:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10ac6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   10aca:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10acc:	7028      	strb	r0, [r5, #0]
}
   10ace:	46bd      	mov	sp, r7
   10ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ad4:	0002f051 	.word	0x0002f051
   10ad8:	0002c8cc 	.word	0x0002c8cc
   10adc:	e000ed00 	.word	0xe000ed00
   10ae0:	0002f067 	.word	0x0002f067
   10ae4:	0002f09a 	.word	0x0002f09a
   10ae8:	0002f0ad 	.word	0x0002f0ad
   10aec:	0002f0c5 	.word	0x0002f0c5
   10af0:	0002f0db 	.word	0x0002f0db
   10af4:	0002f0fa 	.word	0x0002f0fa
   10af8:	0002f163 	.word	0x0002f163
   10afc:	0002f129 	.word	0x0002f129
   10b00:	0002d881 	.word	0x0002d881
   10b04:	0002f1ad 	.word	0x0002f1ad

00010b08 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b0c:	b086      	sub	sp, #24
   10b0e:	4606      	mov	r6, r0
   10b10:	460d      	mov	r5, r1
   10b12:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   10b14:	2402      	movs	r4, #2
   10b16:	4b3e      	ldr	r3, [pc, #248]	; (10c10 <bus_fault.constprop.0+0x108>)
   10b18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b1c:	617b      	str	r3, [r7, #20]
   10b1e:	483d      	ldr	r0, [pc, #244]	; (10c14 <bus_fault.constprop.0+0x10c>)
   10b20:	613c      	str	r4, [r7, #16]
   10b22:	f107 0210 	add.w	r2, r7, #16
   10b26:	f017 fa49 	bl	27fbc <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10b2a:	4b3b      	ldr	r3, [pc, #236]	; (10c18 <bus_fault.constprop.0+0x110>)
   10b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10b2e:	04d9      	lsls	r1, r3, #19
   10b30:	d509      	bpl.n	10b46 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   10b32:	4b3a      	ldr	r3, [pc, #232]	; (10c1c <bus_fault.constprop.0+0x114>)
   10b34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b38:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10b3c:	4835      	ldr	r0, [pc, #212]	; (10c14 <bus_fault.constprop.0+0x10c>)
   10b3e:	f107 0210 	add.w	r2, r7, #16
   10b42:	f017 fa3b 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10b46:	4b34      	ldr	r3, [pc, #208]	; (10c18 <bus_fault.constprop.0+0x110>)
   10b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10b4a:	051a      	lsls	r2, r3, #20
   10b4c:	d50a      	bpl.n	10b64 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10b4e:	4b34      	ldr	r3, [pc, #208]	; (10c20 <bus_fault.constprop.0+0x118>)
   10b50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b54:	617b      	str	r3, [r7, #20]
   10b56:	2302      	movs	r3, #2
   10b58:	482e      	ldr	r0, [pc, #184]	; (10c14 <bus_fault.constprop.0+0x10c>)
   10b5a:	613b      	str	r3, [r7, #16]
   10b5c:	f107 0210 	add.w	r2, r7, #16
   10b60:	f017 fa2c 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10b64:	4c2c      	ldr	r4, [pc, #176]	; (10c18 <bus_fault.constprop.0+0x110>)
   10b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10b68:	059b      	lsls	r3, r3, #22
   10b6a:	d522      	bpl.n	10bb2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   10b6c:	46e8      	mov	r8, sp
   10b6e:	4b2d      	ldr	r3, [pc, #180]	; (10c24 <bus_fault.constprop.0+0x11c>)
   10b70:	4828      	ldr	r0, [pc, #160]	; (10c14 <bus_fault.constprop.0+0x10c>)
   10b72:	617b      	str	r3, [r7, #20]
   10b74:	2302      	movs	r3, #2
   10b76:	f107 0210 	add.w	r2, r7, #16
   10b7a:	613b      	str	r3, [r7, #16]
   10b7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b80:	f017 fa1c 	bl	27fbc <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10b84:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10b86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10b88:	0410      	lsls	r0, r2, #16
   10b8a:	d512      	bpl.n	10bb2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10b8c:	b088      	sub	sp, #32
   10b8e:	466a      	mov	r2, sp
   10b90:	4925      	ldr	r1, [pc, #148]	; (10c28 <bus_fault.constprop.0+0x120>)
   10b92:	4820      	ldr	r0, [pc, #128]	; (10c14 <bus_fault.constprop.0+0x10c>)
   10b94:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10b98:	2303      	movs	r3, #3
   10b9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10b9e:	f842 3f10 	str.w	r3, [r2, #16]!
   10ba2:	f017 fa0b 	bl	27fbc <z_log_msg_static_create.constprop.0>
   10ba6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10ba8:	b11e      	cbz	r6, 10bb2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10bac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10bb0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10bb2:	4b19      	ldr	r3, [pc, #100]	; (10c18 <bus_fault.constprop.0+0x110>)
   10bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10bb6:	0559      	lsls	r1, r3, #21
   10bb8:	d50a      	bpl.n	10bd0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   10bba:	4b1c      	ldr	r3, [pc, #112]	; (10c2c <bus_fault.constprop.0+0x124>)
   10bbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10bc0:	617b      	str	r3, [r7, #20]
   10bc2:	2302      	movs	r3, #2
   10bc4:	4813      	ldr	r0, [pc, #76]	; (10c14 <bus_fault.constprop.0+0x10c>)
   10bc6:	613b      	str	r3, [r7, #16]
   10bc8:	f107 0210 	add.w	r2, r7, #16
   10bcc:	f017 f9f6 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10bd0:	4b11      	ldr	r3, [pc, #68]	; (10c18 <bus_fault.constprop.0+0x110>)
   10bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10bd4:	05d2      	lsls	r2, r2, #23
   10bd6:	d515      	bpl.n	10c04 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   10bd8:	4b15      	ldr	r3, [pc, #84]	; (10c30 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10bda:	617b      	str	r3, [r7, #20]
   10bdc:	2302      	movs	r3, #2
   10bde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10be2:	480c      	ldr	r0, [pc, #48]	; (10c14 <bus_fault.constprop.0+0x10c>)
   10be4:	613b      	str	r3, [r7, #16]
   10be6:	f107 0210 	add.w	r2, r7, #16
   10bea:	f017 f9e7 	bl	27fbc <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   10bee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10bf0:	4a09      	ldr	r2, [pc, #36]	; (10c18 <bus_fault.constprop.0+0x110>)

	return reason;
}
   10bf2:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10bf4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10bf6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10bfa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10bfc:	7028      	strb	r0, [r5, #0]
}
   10bfe:	46bd      	mov	sp, r7
   10c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c06:	049b      	lsls	r3, r3, #18
   10c08:	d5f1      	bpl.n	10bee <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10c0a:	4b0a      	ldr	r3, [pc, #40]	; (10c34 <bus_fault.constprop.0+0x12c>)
   10c0c:	e7e5      	b.n	10bda <bus_fault.constprop.0+0xd2>
   10c0e:	bf00      	nop
   10c10:	0002f211 	.word	0x0002f211
   10c14:	0002c8cc 	.word	0x0002c8cc
   10c18:	e000ed00 	.word	0xe000ed00
   10c1c:	0002f227 	.word	0x0002f227
   10c20:	0002f09a 	.word	0x0002f09a
   10c24:	0002f238 	.word	0x0002f238
   10c28:	0002f251 	.word	0x0002f251
   10c2c:	0002f266 	.word	0x0002f266
   10c30:	0002f281 	.word	0x0002f281
   10c34:	0002f0fa 	.word	0x0002f0fa

00010c38 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   10c38:	b510      	push	{r4, lr}
   10c3a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   10c3c:	2402      	movs	r4, #2
   10c3e:	4b3a      	ldr	r3, [pc, #232]	; (10d28 <usage_fault.constprop.0+0xf0>)
   10c40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c44:	4839      	ldr	r0, [pc, #228]	; (10d2c <usage_fault.constprop.0+0xf4>)
   10c46:	aa04      	add	r2, sp, #16
   10c48:	9305      	str	r3, [sp, #20]
   10c4a:	9404      	str	r4, [sp, #16]
   10c4c:	f017 f9b6 	bl	27fbc <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   10c50:	4b37      	ldr	r3, [pc, #220]	; (10d30 <usage_fault.constprop.0+0xf8>)
   10c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c54:	019b      	lsls	r3, r3, #6
   10c56:	d508      	bpl.n	10c6a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   10c58:	4b36      	ldr	r3, [pc, #216]	; (10d34 <usage_fault.constprop.0+0xfc>)
   10c5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c5e:	4833      	ldr	r0, [pc, #204]	; (10d2c <usage_fault.constprop.0+0xf4>)
   10c60:	aa04      	add	r2, sp, #16
   10c62:	e9cd 4304 	strd	r4, r3, [sp, #16]
   10c66:	f017 f9a9 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10c6a:	4b31      	ldr	r3, [pc, #196]	; (10d30 <usage_fault.constprop.0+0xf8>)
   10c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c6e:	01dc      	lsls	r4, r3, #7
   10c70:	d509      	bpl.n	10c86 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   10c72:	4b31      	ldr	r3, [pc, #196]	; (10d38 <usage_fault.constprop.0+0x100>)
   10c74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c78:	9305      	str	r3, [sp, #20]
   10c7a:	2302      	movs	r3, #2
   10c7c:	482b      	ldr	r0, [pc, #172]	; (10d2c <usage_fault.constprop.0+0xf4>)
   10c7e:	aa04      	add	r2, sp, #16
   10c80:	9304      	str	r3, [sp, #16]
   10c82:	f017 f99b 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   10c86:	4b2a      	ldr	r3, [pc, #168]	; (10d30 <usage_fault.constprop.0+0xf8>)
   10c88:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   10c8a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   10c8e:	d009      	beq.n	10ca4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   10c90:	2402      	movs	r4, #2
   10c92:	4b2a      	ldr	r3, [pc, #168]	; (10d3c <usage_fault.constprop.0+0x104>)
   10c94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c98:	4824      	ldr	r0, [pc, #144]	; (10d2c <usage_fault.constprop.0+0xf4>)
   10c9a:	aa04      	add	r2, sp, #16
   10c9c:	9305      	str	r3, [sp, #20]
   10c9e:	9404      	str	r4, [sp, #16]
   10ca0:	f017 f98c 	bl	27fbc <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10ca4:	4b22      	ldr	r3, [pc, #136]	; (10d30 <usage_fault.constprop.0+0xf8>)
   10ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ca8:	0318      	lsls	r0, r3, #12
   10caa:	d509      	bpl.n	10cc0 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   10cac:	4b24      	ldr	r3, [pc, #144]	; (10d40 <usage_fault.constprop.0+0x108>)
   10cae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10cb2:	9305      	str	r3, [sp, #20]
   10cb4:	2302      	movs	r3, #2
   10cb6:	481d      	ldr	r0, [pc, #116]	; (10d2c <usage_fault.constprop.0+0xf4>)
   10cb8:	aa04      	add	r2, sp, #16
   10cba:	9304      	str	r3, [sp, #16]
   10cbc:	f017 f97e 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   10cc0:	4b1b      	ldr	r3, [pc, #108]	; (10d30 <usage_fault.constprop.0+0xf8>)
   10cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10cc4:	0359      	lsls	r1, r3, #13
   10cc6:	d509      	bpl.n	10cdc <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   10cc8:	4b1e      	ldr	r3, [pc, #120]	; (10d44 <usage_fault.constprop.0+0x10c>)
   10cca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10cce:	9305      	str	r3, [sp, #20]
   10cd0:	2302      	movs	r3, #2
   10cd2:	4816      	ldr	r0, [pc, #88]	; (10d2c <usage_fault.constprop.0+0xf4>)
   10cd4:	aa04      	add	r2, sp, #16
   10cd6:	9304      	str	r3, [sp, #16]
   10cd8:	f017 f970 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10cdc:	4b14      	ldr	r3, [pc, #80]	; (10d30 <usage_fault.constprop.0+0xf8>)
   10cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ce0:	039a      	lsls	r2, r3, #14
   10ce2:	d509      	bpl.n	10cf8 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   10ce4:	4b18      	ldr	r3, [pc, #96]	; (10d48 <usage_fault.constprop.0+0x110>)
   10ce6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10cea:	9305      	str	r3, [sp, #20]
   10cec:	2302      	movs	r3, #2
   10cee:	480f      	ldr	r0, [pc, #60]	; (10d2c <usage_fault.constprop.0+0xf4>)
   10cf0:	aa04      	add	r2, sp, #16
   10cf2:	9304      	str	r3, [sp, #16]
   10cf4:	f017 f962 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   10cf8:	4b0d      	ldr	r3, [pc, #52]	; (10d30 <usage_fault.constprop.0+0xf8>)
   10cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10cfc:	03db      	lsls	r3, r3, #15
   10cfe:	d509      	bpl.n	10d14 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   10d00:	4b12      	ldr	r3, [pc, #72]	; (10d4c <usage_fault.constprop.0+0x114>)
   10d02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d06:	9305      	str	r3, [sp, #20]
   10d08:	2302      	movs	r3, #2
   10d0a:	4808      	ldr	r0, [pc, #32]	; (10d2c <usage_fault.constprop.0+0xf4>)
   10d0c:	aa04      	add	r2, sp, #16
   10d0e:	9304      	str	r3, [sp, #16]
   10d10:	f017 f954 	bl	27fbc <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10d14:	4a06      	ldr	r2, [pc, #24]	; (10d30 <usage_fault.constprop.0+0xf8>)

	return reason;
}
   10d16:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10d18:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10d1a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   10d1e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   10d22:	6293      	str	r3, [r2, #40]	; 0x28
}
   10d24:	b006      	add	sp, #24
   10d26:	bd10      	pop	{r4, pc}
   10d28:	0002f299 	.word	0x0002f299
   10d2c:	0002c8cc 	.word	0x0002c8cc
   10d30:	e000ed00 	.word	0xe000ed00
   10d34:	0002f2b1 	.word	0x0002f2b1
   10d38:	0002f2c4 	.word	0x0002f2c4
   10d3c:	0002f2de 	.word	0x0002f2de
   10d40:	0002f308 	.word	0x0002f308
   10d44:	0002f326 	.word	0x0002f326
   10d48:	0002f34b 	.word	0x0002f34b
   10d4c:	0002f365 	.word	0x0002f365

00010d50 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   10d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d54:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10d56:	4b93      	ldr	r3, [pc, #588]	; (10fa4 <z_arm_fault+0x254>)
{
   10d58:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10d5a:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   10d5e:	4688      	mov	r8, r1
   10d60:	4616      	mov	r6, r2
   10d62:	2300      	movs	r3, #0
   10d64:	af00      	add	r7, sp, #0
   10d66:	f3ca 0908 	ubfx	r9, sl, #0, #9
   10d6a:	f383 8811 	msr	BASEPRI, r3
   10d6e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10d72:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   10d76:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   10d7a:	d00e      	beq.n	10d9a <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   10d7c:	498a      	ldr	r1, [pc, #552]	; (10fa8 <z_arm_fault+0x258>)
   10d7e:	f44f 6384 	mov.w	r3, #1056	; 0x420
   10d82:	4a8a      	ldr	r2, [pc, #552]	; (10fac <z_arm_fault+0x25c>)
   10d84:	488a      	ldr	r0, [pc, #552]	; (10fb0 <z_arm_fault+0x260>)
   10d86:	f015 fdcc 	bl	26922 <assert_print>
   10d8a:	488a      	ldr	r0, [pc, #552]	; (10fb4 <z_arm_fault+0x264>)
   10d8c:	f015 fdc9 	bl	26922 <assert_print>
   10d90:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   10d94:	4885      	ldr	r0, [pc, #532]	; (10fac <z_arm_fault+0x25c>)
   10d96:	f015 fdbd 	bl	26914 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   10d9a:	f012 0401 	ands.w	r4, r2, #1
   10d9e:	d1ed      	bne.n	10d7c <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   10da0:	0653      	lsls	r3, r2, #25
   10da2:	d404      	bmi.n	10dae <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10da4:	0710      	lsls	r0, r2, #28
   10da6:	d40f      	bmi.n	10dc8 <z_arm_fault+0x78>
			*nested_exc = true;
   10da8:	f04f 0801 	mov.w	r8, #1
   10dac:	e00f      	b.n	10dce <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   10dae:	4b82      	ldr	r3, [pc, #520]	; (10fb8 <z_arm_fault+0x268>)
   10db0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10db4:	61fb      	str	r3, [r7, #28]
   10db6:	2302      	movs	r3, #2
   10db8:	4880      	ldr	r0, [pc, #512]	; (10fbc <z_arm_fault+0x26c>)
   10dba:	61bb      	str	r3, [r7, #24]
   10dbc:	f107 0218 	add.w	r2, r7, #24
   10dc0:	f017 f8fc 	bl	27fbc <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   10dc4:	0771      	lsls	r1, r6, #29
   10dc6:	d500      	bpl.n	10dca <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
   10dc8:	4645      	mov	r5, r8
	*nested_exc = false;
   10dca:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
   10dce:	2d00      	cmp	r5, #0
   10dd0:	d0d4      	beq.n	10d7c <z_arm_fault+0x2c>
	*recoverable = false;
   10dd2:	2300      	movs	r3, #0
   10dd4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   10dd6:	f1a9 0303 	sub.w	r3, r9, #3
   10dda:	2b09      	cmp	r3, #9
   10ddc:	f200 80c1 	bhi.w	10f62 <z_arm_fault+0x212>
   10de0:	e8df f003 	tbb	[pc, r3]
   10de4:	97b7b405 	.word	0x97b7b405
   10de8:	bfbfbfbf 	.word	0xbfbfbfbf
   10dec:	babf      	.short	0xbabf
	PR_FAULT_INFO("***** HARD FAULT *****");
   10dee:	46e9      	mov	r9, sp
   10df0:	f04f 0a02 	mov.w	sl, #2
   10df4:	4b72      	ldr	r3, [pc, #456]	; (10fc0 <z_arm_fault+0x270>)
   10df6:	f107 0218 	add.w	r2, r7, #24
   10dfa:	61fb      	str	r3, [r7, #28]
   10dfc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e00:	486e      	ldr	r0, [pc, #440]	; (10fbc <z_arm_fault+0x26c>)
   10e02:	f8c7 a018 	str.w	sl, [r7, #24]
   10e06:	f017 f8d9 	bl	27fbc <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   10e0a:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10e0c:	4e65      	ldr	r6, [pc, #404]	; (10fa4 <z_arm_fault+0x254>)
	*recoverable = false;
   10e0e:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10e10:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10e12:	079a      	lsls	r2, r3, #30
   10e14:	d50a      	bpl.n	10e2c <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
   10e16:	4b6b      	ldr	r3, [pc, #428]	; (10fc4 <z_arm_fault+0x274>)
		PR_EXC("  Debug event");
   10e18:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   10e1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e20:	4866      	ldr	r0, [pc, #408]	; (10fbc <z_arm_fault+0x26c>)
   10e22:	f107 0218 	add.w	r2, r7, #24
   10e26:	f017 f8c9 	bl	27fbc <z_log_msg_static_create.constprop.0>
}
   10e2a:	e042      	b.n	10eb2 <z_arm_fault+0x162>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   10e2c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10e2e:	2b00      	cmp	r3, #0
   10e30:	da01      	bge.n	10e36 <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
   10e32:	4b65      	ldr	r3, [pc, #404]	; (10fc8 <z_arm_fault+0x278>)
   10e34:	e7f0      	b.n	10e18 <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   10e36:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10e38:	005b      	lsls	r3, r3, #1
   10e3a:	d57a      	bpl.n	10f32 <z_arm_fault+0x1e2>
		PR_EXC("  Fault escalation (see below)");
   10e3c:	4b63      	ldr	r3, [pc, #396]	; (10fcc <z_arm_fault+0x27c>)
   10e3e:	f107 0218 	add.w	r2, r7, #24
   10e42:	e9c7 a306 	strd	sl, r3, [r7, #24]
   10e46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e4a:	485c      	ldr	r0, [pc, #368]	; (10fbc <z_arm_fault+0x26c>)
   10e4c:	f017 f8b6 	bl	27fbc <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   10e50:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   10e52:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   10e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10e58:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   10e5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10e5e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   10e62:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   10e64:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   10e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10e6c:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   10e6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10e72:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   10e76:	f64d 7302 	movw	r3, #57090	; 0xdf02
   10e7a:	429a      	cmp	r2, r3
   10e7c:	d009      	beq.n	10e92 <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   10e7e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   10e80:	b2db      	uxtb	r3, r3
   10e82:	2b00      	cmp	r3, #0
   10e84:	d038      	beq.n	10ef8 <z_arm_fault+0x1a8>
			reason = mem_manage_fault(esf, 1, recoverable);
   10e86:	2001      	movs	r0, #1
   10e88:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10e8a:	f7ff fd85 	bl	10998 <mem_manage_fault.constprop.0>
   10e8e:	4604      	mov	r4, r0
		break;
   10e90:	e00f      	b.n	10eb2 <z_arm_fault+0x162>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   10e92:	b088      	sub	sp, #32
   10e94:	682b      	ldr	r3, [r5, #0]
   10e96:	466a      	mov	r2, sp
   10e98:	494d      	ldr	r1, [pc, #308]	; (10fd0 <z_arm_fault+0x280>)
   10e9a:	4848      	ldr	r0, [pc, #288]	; (10fbc <z_arm_fault+0x26c>)
   10e9c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10ea0:	2303      	movs	r3, #3
   10ea2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10ea6:	f842 3f10 	str.w	r3, [r2, #16]!
   10eaa:	f017 f887 	bl	27fbc <z_log_msg_static_create.constprop.0>
   10eae:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   10eb0:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10eb2:	79fb      	ldrb	r3, [r7, #7]
   10eb4:	b9e3      	cbnz	r3, 10ef0 <z_arm_fault+0x1a0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10eb6:	f107 0208 	add.w	r2, r7, #8
   10eba:	f105 0620 	add.w	r6, r5, #32
   10ebe:	4613      	mov	r3, r2
   10ec0:	6828      	ldr	r0, [r5, #0]
   10ec2:	6869      	ldr	r1, [r5, #4]
   10ec4:	3508      	adds	r5, #8
   10ec6:	c303      	stmia	r3!, {r0, r1}
   10ec8:	42b5      	cmp	r5, r6
   10eca:	461a      	mov	r2, r3
   10ecc:	d1f7      	bne.n	10ebe <z_arm_fault+0x16e>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   10ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10ed0:	f1b8 0f00 	cmp.w	r8, #0
   10ed4:	d061      	beq.n	10f9a <z_arm_fault+0x24a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   10ed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   10eda:	b922      	cbnz	r2, 10ee6 <z_arm_fault+0x196>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   10edc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10ee0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10ee4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   10ee6:	4620      	mov	r0, r4
   10ee8:	f107 0108 	add.w	r1, r7, #8
   10eec:	f7ff fbb0 	bl	10650 <z_arm_fatal_error>
}
   10ef0:	3728      	adds	r7, #40	; 0x28
   10ef2:	46bd      	mov	sp, r7
   10ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   10ef8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   10efa:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   10efe:	d004      	beq.n	10f0a <z_arm_fault+0x1ba>
			reason = bus_fault(esf, 1, recoverable);
   10f00:	2001      	movs	r0, #1
   10f02:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   10f04:	f7ff fe00 	bl	10b08 <bus_fault.constprop.0>
   10f08:	e7c1      	b.n	10e8e <z_arm_fault+0x13e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   10f0a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   10f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10f10:	d302      	bcc.n	10f18 <z_arm_fault+0x1c8>
		reason = usage_fault(esf);
   10f12:	f7ff fe91 	bl	10c38 <usage_fault.constprop.0>
   10f16:	e7ba      	b.n	10e8e <z_arm_fault+0x13e>
			__ASSERT(0,
   10f18:	492e      	ldr	r1, [pc, #184]	; (10fd4 <z_arm_fault+0x284>)
   10f1a:	f240 23f2 	movw	r3, #754	; 0x2f2
   10f1e:	4a23      	ldr	r2, [pc, #140]	; (10fac <z_arm_fault+0x25c>)
   10f20:	4823      	ldr	r0, [pc, #140]	; (10fb0 <z_arm_fault+0x260>)
   10f22:	f015 fcfe 	bl	26922 <assert_print>
   10f26:	482c      	ldr	r0, [pc, #176]	; (10fd8 <z_arm_fault+0x288>)
   10f28:	f015 fcfb 	bl	26922 <assert_print>
   10f2c:	f240 21f2 	movw	r1, #754	; 0x2f2
   10f30:	e730      	b.n	10d94 <z_arm_fault+0x44>
		__ASSERT(0,
   10f32:	4928      	ldr	r1, [pc, #160]	; (10fd4 <z_arm_fault+0x284>)
   10f34:	f240 23f6 	movw	r3, #758	; 0x2f6
   10f38:	4a1c      	ldr	r2, [pc, #112]	; (10fac <z_arm_fault+0x25c>)
   10f3a:	481d      	ldr	r0, [pc, #116]	; (10fb0 <z_arm_fault+0x260>)
   10f3c:	f015 fcf1 	bl	26922 <assert_print>
   10f40:	4826      	ldr	r0, [pc, #152]	; (10fdc <z_arm_fault+0x28c>)
   10f42:	f015 fcee 	bl	26922 <assert_print>
   10f46:	f240 21f6 	movw	r1, #758	; 0x2f6
   10f4a:	e723      	b.n	10d94 <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   10f4c:	2000      	movs	r0, #0
   10f4e:	1df9      	adds	r1, r7, #7
   10f50:	e79b      	b.n	10e8a <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
   10f52:	2000      	movs	r0, #0
   10f54:	1df9      	adds	r1, r7, #7
   10f56:	e7d5      	b.n	10f04 <z_arm_fault+0x1b4>
	PR_FAULT_INFO(
   10f58:	4b21      	ldr	r3, [pc, #132]	; (10fe0 <z_arm_fault+0x290>)
   10f5a:	61fb      	str	r3, [r7, #28]
   10f5c:	2302      	movs	r3, #2
   10f5e:	61bb      	str	r3, [r7, #24]
   10f60:	e75c      	b.n	10e1c <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
   10f62:	4a20      	ldr	r2, [pc, #128]	; (10fe4 <z_arm_fault+0x294>)
   10f64:	466e      	mov	r6, sp
   10f66:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   10f6a:	b08a      	sub	sp, #40	; 0x28
   10f6c:	4b1e      	ldr	r3, [pc, #120]	; (10fe8 <z_arm_fault+0x298>)
   10f6e:	bf18      	it	ne
   10f70:	4613      	movne	r3, r2
   10f72:	466a      	mov	r2, sp
   10f74:	491d      	ldr	r1, [pc, #116]	; (10fec <z_arm_fault+0x29c>)
   10f76:	4811      	ldr	r0, [pc, #68]	; (10fbc <z_arm_fault+0x26c>)
   10f78:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10f7c:	f1a9 0310 	sub.w	r3, r9, #16
   10f80:	61d3      	str	r3, [r2, #28]
   10f82:	f44f 7300 	mov.w	r3, #512	; 0x200
   10f86:	8413      	strh	r3, [r2, #32]
   10f88:	4b19      	ldr	r3, [pc, #100]	; (10ff0 <z_arm_fault+0x2a0>)
   10f8a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   10f8e:	f842 3f10 	str.w	r3, [r2, #16]!
   10f92:	f017 f813 	bl	27fbc <z_log_msg_static_create.constprop.0>
   10f96:	46b5      	mov	sp, r6
}
   10f98:	e78b      	b.n	10eb2 <z_arm_fault+0x162>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10f9a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   10f9e:	f023 0301 	bic.w	r3, r3, #1
   10fa2:	e79f      	b.n	10ee4 <z_arm_fault+0x194>
   10fa4:	e000ed00 	.word	0xe000ed00
   10fa8:	0002f3be 	.word	0x0002f3be
   10fac:	0002f129 	.word	0x0002f129
   10fb0:	0002d881 	.word	0x0002d881
   10fb4:	0002f3d1 	.word	0x0002f3d1
   10fb8:	0002f40f 	.word	0x0002f40f
   10fbc:	0002c8cc 	.word	0x0002c8cc
   10fc0:	0002f432 	.word	0x0002f432
   10fc4:	0002f449 	.word	0x0002f449
   10fc8:	0002f46a 	.word	0x0002f46a
   10fcc:	0002f478 	.word	0x0002f478
   10fd0:	0002f497 	.word	0x0002f497
   10fd4:	000334e0 	.word	0x000334e0
   10fd8:	0002f4b3 	.word	0x0002f4b3
   10fdc:	0002f4d7 	.word	0x0002f4d7
   10fe0:	0002f507 	.word	0x0002f507
   10fe4:	0002f3a5 	.word	0x0002f3a5
   10fe8:	0002f390 	.word	0x0002f390
   10fec:	0002f52b 	.word	0x0002f52b
   10ff0:	01000004 	.word	0x01000004

00010ff4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10ff4:	4b04      	ldr	r3, [pc, #16]	; (11008 <z_arm_fault_init+0x14>)
   10ff6:	695a      	ldr	r2, [r3, #20]
   10ff8:	f042 0210 	orr.w	r2, r2, #16
   10ffc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   10ffe:	695a      	ldr	r2, [r3, #20]
   11000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11004:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11006:	4770      	bx	lr
   11008:	e000ed00 	.word	0xe000ed00

0001100c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1100c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11010:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11014:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11016:	4672      	mov	r2, lr
	bl z_arm_fault
   11018:	f7ff fe9a 	bl	10d50 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1101c:	bd01      	pop	{r0, pc}
   1101e:	bf00      	nop

00011020 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11020:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11022:	2120      	movs	r1, #32
   11024:	4803      	ldr	r0, [pc, #12]	; (11034 <z_arm_interrupt_init+0x14>)
   11026:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11028:	3301      	adds	r3, #1
   1102a:	2b45      	cmp	r3, #69	; 0x45
   1102c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11030:	d1f9      	bne.n	11026 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11032:	4770      	bx	lr
   11034:	e000e100 	.word	0xe000e100

00011038 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11038:	2000      	movs	r0, #0
    msr CONTROL, r0
   1103a:	f380 8814 	msr	CONTROL, r0
    isb
   1103e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   11042:	2000      	movs	r0, #0
    msr MSPLIM, r0
   11044:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   11048:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1104c:	f7fc ff0a 	bl	de64 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11050:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11052:	490e      	ldr	r1, [pc, #56]	; (1108c <__start+0x54>)
    str r0, [r1]
   11054:	6008      	str	r0, [r1, #0]
    dsb
   11056:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1105a:	480d      	ldr	r0, [pc, #52]	; (11090 <__start+0x58>)
    msr msp, r0
   1105c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11060:	f000 f83e 	bl	110e0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11064:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11066:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1106a:	480a      	ldr	r0, [pc, #40]	; (11094 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1106c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11070:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11072:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11076:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1107a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1107c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1107e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11082:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11086:	f7ff fbaf 	bl	107e8 <z_arm_prep_c>
   1108a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1108c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11090:	20034338 	.word	0x20034338
    ldr r0, =z_interrupt_stacks
   11094:	200335f8 	.word	0x200335f8

00011098 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11098:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1109c:	4905      	ldr	r1, [pc, #20]	; (110b4 <sys_arch_reboot+0x1c>)
   1109e:	4b06      	ldr	r3, [pc, #24]	; (110b8 <sys_arch_reboot+0x20>)
   110a0:	68ca      	ldr	r2, [r1, #12]
   110a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   110a6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   110a8:	60cb      	str	r3, [r1, #12]
   110aa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   110ae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   110b0:	e7fd      	b.n	110ae <sys_arch_reboot+0x16>
   110b2:	bf00      	nop
   110b4:	e000ed00 	.word	0xe000ed00
   110b8:	05fa0004 	.word	0x05fa0004

000110bc <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   110bc:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   110be:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   110c0:	4906      	ldr	r1, [pc, #24]	; (110dc <z_arm_clear_arm_mpu_config+0x20>)
   110c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   110c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   110ca:	4293      	cmp	r3, r2
   110cc:	db00      	blt.n	110d0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   110ce:	4770      	bx	lr
  mpu->RNR = rnr;
   110d0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   110d4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   110d8:	3301      	adds	r3, #1
   110da:	e7f6      	b.n	110ca <z_arm_clear_arm_mpu_config+0xe>
   110dc:	e000ed00 	.word	0xe000ed00

000110e0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   110e0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   110e2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   110e4:	2400      	movs	r4, #0
   110e6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   110ea:	f7ff ffe7 	bl	110bc <z_arm_clear_arm_mpu_config>
   110ee:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   110f0:	f04f 30ff 	mov.w	r0, #4294967295
   110f4:	4a0c      	ldr	r2, [pc, #48]	; (11128 <z_arm_init_arch_hw_at_boot+0x48>)
   110f6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   110fa:	3301      	adds	r3, #1
   110fc:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   110fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11102:	d1f8      	bne.n	110f6 <z_arm_init_arch_hw_at_boot+0x16>
   11104:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11106:	f04f 30ff 	mov.w	r0, #4294967295
   1110a:	4a07      	ldr	r2, [pc, #28]	; (11128 <z_arm_init_arch_hw_at_boot+0x48>)
   1110c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11110:	3301      	adds	r3, #1
   11112:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11114:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11118:	d1f8      	bne.n	1110c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1111a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1111c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11120:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11124:	bd10      	pop	{r4, pc}
   11126:	bf00      	nop
   11128:	e000e100 	.word	0xe000e100

0001112c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1112c:	4b08      	ldr	r3, [pc, #32]	; (11150 <z_impl_k_thread_abort+0x24>)
   1112e:	689b      	ldr	r3, [r3, #8]
   11130:	4283      	cmp	r3, r0
   11132:	d10b      	bne.n	1114c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11134:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11138:	b143      	cbz	r3, 1114c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1113a:	4b06      	ldr	r3, [pc, #24]	; (11154 <z_impl_k_thread_abort+0x28>)
   1113c:	685a      	ldr	r2, [r3, #4]
   1113e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11142:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   11144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1114a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1114c:	f012 baee 	b.w	2372c <z_thread_abort>
   11150:	20021b58 	.word	0x20021b58
   11154:	e000ed00 	.word	0xe000ed00

00011158 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1115a:	4c09      	ldr	r4, [pc, #36]	; (11180 <z_arm_configure_static_mpu_regions+0x28>)
   1115c:	4a09      	ldr	r2, [pc, #36]	; (11184 <z_arm_configure_static_mpu_regions+0x2c>)
   1115e:	4623      	mov	r3, r4
   11160:	2101      	movs	r1, #1
   11162:	4809      	ldr	r0, [pc, #36]	; (11188 <z_arm_configure_static_mpu_regions+0x30>)
   11164:	f000 f92a 	bl	113bc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11168:	2300      	movs	r3, #0
   1116a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1116c:	4b07      	ldr	r3, [pc, #28]	; (1118c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1116e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11170:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11172:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11174:	9301      	str	r3, [sp, #4]
   11176:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11178:	f000 f944 	bl	11404 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1117c:	b004      	add	sp, #16
   1117e:	bd10      	pop	{r4, pc}
   11180:	20070000 	.word	0x20070000
   11184:	20008000 	.word	0x20008000
   11188:	0002d10c 	.word	0x0002d10c
   1118c:	20008f50 	.word	0x20008f50

00011190 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11190:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11192:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11194:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11196:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1119a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   1119e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   111a0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   111a2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   111a4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   111a8:	4905      	ldr	r1, [pc, #20]	; (111c0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   111aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   111ae:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   111b2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   111b6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   111ba:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   111be:	bd10      	pop	{r4, pc}
   111c0:	e000ed00 	.word	0xe000ed00

000111c4 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   111c4:	b580      	push	{r7, lr}
   111c6:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   111c8:	b088      	sub	sp, #32
   111ca:	466a      	mov	r2, sp
   111cc:	4b07      	ldr	r3, [pc, #28]	; (111ec <region_allocate_and_init.part.0+0x28>)
   111ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
   111d2:	2303      	movs	r3, #3
   111d4:	f842 3f10 	str.w	r3, [r2, #16]!
   111d8:	2300      	movs	r3, #0
   111da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   111de:	4804      	ldr	r0, [pc, #16]	; (111f0 <region_allocate_and_init.part.0+0x2c>)
   111e0:	f7fd f9d6 	bl	e590 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   111e4:	f06f 0015 	mvn.w	r0, #21
   111e8:	46bd      	mov	sp, r7
   111ea:	bd80      	pop	{r7, pc}
   111ec:	0002f542 	.word	0x0002f542
   111f0:	0002c8b4 	.word	0x0002c8b4

000111f4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   111f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   111fa:	4606      	mov	r6, r0
   111fc:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11200:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   11202:	4d5f      	ldr	r5, [pc, #380]	; (11380 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11204:	af00      	add	r7, sp, #0
   11206:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   11208:	687b      	ldr	r3, [r7, #4]
   1120a:	4599      	cmp	r9, r3
   1120c:	da35      	bge.n	1127a <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   1120e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   11212:	f1b8 0f00 	cmp.w	r8, #0
   11216:	d054      	beq.n	112c2 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   11218:	f1b8 0f1f 	cmp.w	r8, #31
   1121c:	d91b      	bls.n	11256 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   1121e:	f018 0f1f 	tst.w	r8, #31
   11222:	d118      	bne.n	11256 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   11224:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11228:	f01b 0f1f 	tst.w	fp, #31
   1122c:	d113      	bne.n	11256 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1122e:	4658      	mov	r0, fp
   11230:	f016 fec9 	bl	27fc6 <arm_cmse_mpu_region_get>
   11234:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11236:	eb08 000b 	add.w	r0, r8, fp
   1123a:	3801      	subs	r0, #1
   1123c:	f016 fec3 	bl	27fc6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11240:	4582      	cmp	sl, r0
   11242:	d01f      	beq.n	11284 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11244:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11248:	466c      	mov	r4, sp
   1124a:	b088      	sub	sp, #32
   1124c:	466a      	mov	r2, sp
   1124e:	494d      	ldr	r1, [pc, #308]	; (11384 <mpu_configure_regions_and_partition.constprop.0+0x190>)
   11250:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   11254:	e005      	b.n	11262 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11256:	466c      	mov	r4, sp
   11258:	b088      	sub	sp, #32
   1125a:	466a      	mov	r2, sp
   1125c:	4b4a      	ldr	r3, [pc, #296]	; (11388 <mpu_configure_regions_and_partition.constprop.0+0x194>)
   1125e:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   11262:	2303      	movs	r3, #3
   11264:	f842 3f10 	str.w	r3, [r2, #16]!
   11268:	2300      	movs	r3, #0
   1126a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1126e:	4847      	ldr	r0, [pc, #284]	; (1138c <mpu_configure_regions_and_partition.constprop.0+0x198>)
   11270:	f7fd f98e 	bl	e590 <z_impl_z_log_msg_static_create>
   11274:	46a5      	mov	sp, r4
			return -EINVAL;
   11276:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1127a:	4620      	mov	r0, r4
   1127c:	371c      	adds	r7, #28
   1127e:	46bd      	mov	sp, r7
   11280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11284:	f11a 0f16 	cmn.w	sl, #22
   11288:	d0de      	beq.n	11248 <mpu_configure_regions_and_partition.constprop.0+0x54>
   1128a:	4554      	cmp	r4, sl
   1128c:	dddc      	ble.n	11248 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   1128e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   11292:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   11296:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   1129a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1129e:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   112a2:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   112a6:	e9d6 2100 	ldrd	r2, r1, [r6]
   112aa:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   112ac:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   112ae:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   112b2:	d11e      	bne.n	112f2 <mpu_configure_regions_and_partition.constprop.0+0xfe>
   112b4:	45d8      	cmp	r8, fp
   112b6:	d108      	bne.n	112ca <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   112b8:	4631      	mov	r1, r6
   112ba:	fa5f f08a 	uxtb.w	r0, sl
   112be:	f016 fe8b 	bl	27fd8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   112c2:	f109 0901 	add.w	r9, r9, #1
   112c6:	360c      	adds	r6, #12
   112c8:	e79e      	b.n	11208 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   112ca:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   112ce:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   112d2:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   112d6:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   112da:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   112dc:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   112de:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   112e2:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   112e4:	f016 fe78 	bl	27fd8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   112e8:	f110 0f16 	cmn.w	r0, #22
   112ec:	d0c3      	beq.n	11276 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   112ee:	1c44      	adds	r4, r0, #1
   112f0:	e7e7      	b.n	112c2 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   112f2:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   112f4:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   112f6:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   112f8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   112fc:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   11300:	d108      	bne.n	11314 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   11302:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   11306:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11308:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1130c:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1130e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   11312:	e7e7      	b.n	112e4 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   11314:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11318:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1131c:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   1131e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   11322:	4631      	mov	r1, r6
   11324:	f016 fe58 	bl	27fd8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11328:	f110 0f16 	cmn.w	r0, #22
   1132c:	d0a3      	beq.n	11276 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   1132e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   11332:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11336:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11338:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   1133c:	f362 0304 	bfi	r3, r2, #0, #5
   11340:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   11342:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11346:	7c3a      	ldrb	r2, [r7, #16]
   11348:	085b      	lsrs	r3, r3, #1
   1134a:	f363 1247 	bfi	r2, r3, #5, #3
   1134e:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   11350:	e9d6 3200 	ldrd	r3, r2, [r6]
   11354:	4413      	add	r3, r2
   11356:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   11358:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1135c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1135e:	4443      	add	r3, r8
   11360:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   11364:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   11366:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1136a:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
   1136c:	617b      	str	r3, [r7, #20]
   1136e:	d902      	bls.n	11376 <mpu_configure_regions_and_partition.constprop.0+0x182>
   11370:	f7ff ff28 	bl	111c4 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   11374:	e7b8      	b.n	112e8 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   11376:	f107 0108 	add.w	r1, r7, #8
   1137a:	f7ff ff09 	bl	11190 <region_init>
   1137e:	e7b6      	b.n	112ee <mpu_configure_regions_and_partition.constprop.0+0xfa>
   11380:	e000ed00 	.word	0xe000ed00
   11384:	0002f58b 	.word	0x0002f58b
   11388:	0002f568 	.word	0x0002f568
   1138c:	0002c8b4 	.word	0x0002c8b4

00011390 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11390:	2205      	movs	r2, #5
   11392:	4b04      	ldr	r3, [pc, #16]	; (113a4 <arm_core_mpu_enable+0x14>)
   11394:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11398:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1139c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   113a0:	4770      	bx	lr
   113a2:	bf00      	nop
   113a4:	e000ed00 	.word	0xe000ed00

000113a8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   113a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   113ac:	2200      	movs	r2, #0
   113ae:	4b02      	ldr	r3, [pc, #8]	; (113b8 <arm_core_mpu_disable+0x10>)
   113b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   113b4:	4770      	bx	lr
   113b6:	bf00      	nop
   113b8:	e000ed00 	.word	0xe000ed00

000113bc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   113bc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   113be:	4d0c      	ldr	r5, [pc, #48]	; (113f0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   113c0:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   113c2:	782a      	ldrb	r2, [r5, #0]
   113c4:	f7ff ff16 	bl	111f4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   113c8:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   113ca:	3016      	adds	r0, #22
   113cc:	d10f      	bne.n	113ee <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   113ce:	f44f 738d 	mov.w	r3, #282	; 0x11a
   113d2:	4a08      	ldr	r2, [pc, #32]	; (113f4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   113d4:	4908      	ldr	r1, [pc, #32]	; (113f8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   113d6:	4809      	ldr	r0, [pc, #36]	; (113fc <arm_core_mpu_configure_static_mpu_regions+0x40>)
   113d8:	f015 faa3 	bl	26922 <assert_print>
   113dc:	4621      	mov	r1, r4
   113de:	4808      	ldr	r0, [pc, #32]	; (11400 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   113e0:	f015 fa9f 	bl	26922 <assert_print>
   113e4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   113e8:	4802      	ldr	r0, [pc, #8]	; (113f4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   113ea:	f015 fa93 	bl	26914 <assert_post_action>
			regions_num);
	}
}
   113ee:	bd38      	pop	{r3, r4, r5, pc}
   113f0:	200223e7 	.word	0x200223e7
   113f4:	0002f5ae 	.word	0x0002f5ae
   113f8:	000334e0 	.word	0x000334e0
   113fc:	0002d881 	.word	0x0002d881
   11400:	0002f5e5 	.word	0x0002f5e5

00011404 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   11404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11408:	4e31      	ldr	r6, [pc, #196]	; (114d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1140a:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1140c:	4605      	mov	r5, r0
   1140e:	f04f 0800 	mov.w	r8, #0
   11412:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   11414:	4f2f      	ldr	r7, [pc, #188]	; (114d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11416:	45c8      	cmp	r8, r9
   11418:	db02      	blt.n	11420 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1141a:	b003      	add	sp, #12
   1141c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   11420:	f8d5 a004 	ldr.w	sl, [r5, #4]
   11424:	f1ba 0f00 	cmp.w	sl, #0
   11428:	d04c      	beq.n	114c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1142a:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1142c:	4608      	mov	r0, r1
   1142e:	9101      	str	r1, [sp, #4]
   11430:	f016 fdc9 	bl	27fc6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11434:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11436:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11438:	eb0a 0001 	add.w	r0, sl, r1
   1143c:	3801      	subs	r0, #1
   1143e:	f016 fdc2 	bl	27fc6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11442:	4284      	cmp	r4, r0
   11444:	f04f 0214 	mov.w	r2, #20
   11448:	4b23      	ldr	r3, [pc, #140]	; (114d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1144a:	d015      	beq.n	11478 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   1144c:	fb02 f308 	mul.w	r3, r2, r8
   11450:	f06f 0215 	mvn.w	r2, #21
   11454:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   11458:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1145c:	4a1f      	ldr	r2, [pc, #124]	; (114dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1145e:	4920      	ldr	r1, [pc, #128]	; (114e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   11460:	4820      	ldr	r0, [pc, #128]	; (114e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   11462:	f015 fa5e 	bl	26922 <assert_print>
   11466:	4649      	mov	r1, r9
   11468:	481f      	ldr	r0, [pc, #124]	; (114e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   1146a:	f015 fa5a 	bl	26922 <assert_print>
   1146e:	f44f 7195 	mov.w	r1, #298	; 0x12a
   11472:	481a      	ldr	r0, [pc, #104]	; (114dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11474:	f015 fa4e 	bl	26914 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11478:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1147c:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1147e:	d0eb      	beq.n	11458 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11480:	7819      	ldrb	r1, [r3, #0]
   11482:	42a1      	cmp	r1, r4
   11484:	dde8      	ble.n	11458 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   11486:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   1148a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1148e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   11492:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11496:	f100 0108 	add.w	r1, r0, #8
   1149a:	7b00      	ldrb	r0, [r0, #12]
   1149c:	f364 0004 	bfi	r0, r4, #0, #5
   114a0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   114a2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   114a6:	790c      	ldrb	r4, [r1, #4]
   114a8:	0840      	lsrs	r0, r0, #1
   114aa:	f360 1447 	bfi	r4, r0, #5, #3
   114ae:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   114b0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   114b4:	f021 011f 	bic.w	r1, r1, #31
   114b8:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   114ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   114be:	f021 011f 	bic.w	r1, r1, #31
   114c2:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   114c4:	f108 0801 	add.w	r8, r8, #1
   114c8:	3614      	adds	r6, #20
   114ca:	350c      	adds	r5, #12
   114cc:	e7a3      	b.n	11416 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   114ce:	bf00      	nop
   114d0:	20021614 	.word	0x20021614
   114d4:	e000ed00 	.word	0xe000ed00
   114d8:	200223e7 	.word	0x200223e7
   114dc:	0002f5ae 	.word	0x0002f5ae
   114e0:	000334e0 	.word	0x000334e0
   114e4:	0002d881 	.word	0x0002d881
   114e8:	0002f611 	.word	0x0002f611

000114ec <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   114ec:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   114ee:	4d1f      	ldr	r5, [pc, #124]	; (1156c <z_arm_mpu_init+0x80>)
   114f0:	682c      	ldr	r4, [r5, #0]
   114f2:	2c08      	cmp	r4, #8
   114f4:	d910      	bls.n	11518 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   114f6:	f240 1351 	movw	r3, #337	; 0x151
   114fa:	4a1d      	ldr	r2, [pc, #116]	; (11570 <z_arm_mpu_init+0x84>)
   114fc:	491d      	ldr	r1, [pc, #116]	; (11574 <z_arm_mpu_init+0x88>)
   114fe:	481e      	ldr	r0, [pc, #120]	; (11578 <z_arm_mpu_init+0x8c>)
   11500:	f015 fa0f 	bl	26922 <assert_print>
   11504:	4621      	mov	r1, r4
   11506:	2208      	movs	r2, #8
   11508:	481c      	ldr	r0, [pc, #112]	; (1157c <z_arm_mpu_init+0x90>)
   1150a:	f015 fa0a 	bl	26922 <assert_print>
   1150e:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   11512:	4817      	ldr	r0, [pc, #92]	; (11570 <z_arm_mpu_init+0x84>)
   11514:	f015 f9fe 	bl	26914 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11518:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1151a:	f7ff ff45 	bl	113a8 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1151e:	4b18      	ldr	r3, [pc, #96]	; (11580 <z_arm_mpu_init+0x94>)
   11520:	4a18      	ldr	r2, [pc, #96]	; (11584 <z_arm_mpu_init+0x98>)
   11522:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11526:	4284      	cmp	r4, r0
   11528:	d117      	bne.n	1155a <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   1152a:	4b17      	ldr	r3, [pc, #92]	; (11588 <z_arm_mpu_init+0x9c>)
   1152c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1152e:	f7ff ff2f 	bl	11390 <arm_core_mpu_enable>
	__ASSERT(
   11532:	4b13      	ldr	r3, [pc, #76]	; (11580 <z_arm_mpu_init+0x94>)
   11534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   11538:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1153c:	2b08      	cmp	r3, #8
   1153e:	d013      	beq.n	11568 <z_arm_mpu_init+0x7c>
   11540:	4912      	ldr	r1, [pc, #72]	; (1158c <z_arm_mpu_init+0xa0>)
   11542:	f240 13bb 	movw	r3, #443	; 0x1bb
   11546:	4a0a      	ldr	r2, [pc, #40]	; (11570 <z_arm_mpu_init+0x84>)
   11548:	480b      	ldr	r0, [pc, #44]	; (11578 <z_arm_mpu_init+0x8c>)
   1154a:	f015 f9ea 	bl	26922 <assert_print>
   1154e:	4810      	ldr	r0, [pc, #64]	; (11590 <z_arm_mpu_init+0xa4>)
   11550:	f015 f9e7 	bl	26922 <assert_print>
   11554:	f240 11bb 	movw	r1, #443	; 0x1bb
   11558:	e7db      	b.n	11512 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1155a:	6869      	ldr	r1, [r5, #4]
   1155c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11560:	f7ff fe16 	bl	11190 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11564:	3001      	adds	r0, #1
   11566:	e7de      	b.n	11526 <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11568:	2000      	movs	r0, #0
   1156a:	bd38      	pop	{r3, r4, r5, pc}
   1156c:	0002d118 	.word	0x0002d118
   11570:	0002f5ae 	.word	0x0002f5ae
   11574:	000334e0 	.word	0x000334e0
   11578:	0002d881 	.word	0x0002d881
   1157c:	0002f640 	.word	0x0002f640
   11580:	e000ed00 	.word	0xe000ed00
   11584:	0044ffaa 	.word	0x0044ffaa
   11588:	200223e7 	.word	0x200223e7
   1158c:	0002f674 	.word	0x0002f674
   11590:	0002f6c4 	.word	0x0002f6c4

00011594 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11594:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11596:	4b0b      	ldr	r3, [pc, #44]	; (115c4 <malloc_prepare+0x30>)
   11598:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   1159c:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   115a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   115a4:	d20c      	bcs.n	115c0 <malloc_prepare+0x2c>
   115a6:	4908      	ldr	r1, [pc, #32]	; (115c8 <malloc_prepare+0x34>)
   115a8:	2381      	movs	r3, #129	; 0x81
   115aa:	4a08      	ldr	r2, [pc, #32]	; (115cc <malloc_prepare+0x38>)
   115ac:	4808      	ldr	r0, [pc, #32]	; (115d0 <malloc_prepare+0x3c>)
   115ae:	f015 f9b8 	bl	26922 <assert_print>
   115b2:	4808      	ldr	r0, [pc, #32]	; (115d4 <malloc_prepare+0x40>)
   115b4:	f015 f9b5 	bl	26922 <assert_print>
   115b8:	2181      	movs	r1, #129	; 0x81
   115ba:	4804      	ldr	r0, [pc, #16]	; (115cc <malloc_prepare+0x38>)
   115bc:	f015 f9aa 	bl	26914 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   115c0:	2000      	movs	r0, #0
   115c2:	bd08      	pop	{r3, pc}
   115c4:	200382a8 	.word	0x200382a8
   115c8:	0002f715 	.word	0x0002f715
   115cc:	0002f6e5 	.word	0x0002f6e5
   115d0:	0002d881 	.word	0x0002d881
   115d4:	0002f75c 	.word	0x0002f75c

000115d8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   115d8:	4b01      	ldr	r3, [pc, #4]	; (115e0 <__stdout_hook_install+0x8>)
   115da:	6018      	str	r0, [r3, #0]
}
   115dc:	4770      	bx	lr
   115de:	bf00      	nop
   115e0:	20008600 	.word	0x20008600

000115e4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   115e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115e6:	4606      	mov	r6, r0
   115e8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   115ea:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   115ec:	4f06      	ldr	r7, [pc, #24]	; (11608 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   115ee:	42ac      	cmp	r4, r5
   115f0:	da08      	bge.n	11604 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   115f2:	683b      	ldr	r3, [r7, #0]
   115f4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   115f6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   115f8:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   115fa:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   115fe:	d001      	beq.n	11604 <z_impl_zephyr_read_stdin+0x20>
   11600:	280d      	cmp	r0, #13
   11602:	d1f4      	bne.n	115ee <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   11604:	4620      	mov	r0, r4
   11606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11608:	200085fc 	.word	0x200085fc

0001160c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1160e:	460d      	mov	r5, r1
   11610:	4f09      	ldr	r7, [pc, #36]	; (11638 <z_impl_zephyr_write_stdout+0x2c>)
   11612:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11614:	f1c0 0401 	rsb	r4, r0, #1
   11618:	19a3      	adds	r3, r4, r6
   1161a:	429d      	cmp	r5, r3
   1161c:	dc01      	bgt.n	11622 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1161e:	4628      	mov	r0, r5
   11620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11622:	7873      	ldrb	r3, [r6, #1]
   11624:	2b0a      	cmp	r3, #10
   11626:	d102      	bne.n	1162e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11628:	200d      	movs	r0, #13
   1162a:	683b      	ldr	r3, [r7, #0]
   1162c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1162e:	683b      	ldr	r3, [r7, #0]
   11630:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11634:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11636:	e7ef      	b.n	11618 <z_impl_zephyr_write_stdout+0xc>
   11638:	20008600 	.word	0x20008600

0001163c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1163c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1163e:	2105      	movs	r1, #5
   11640:	4801      	ldr	r0, [pc, #4]	; (11648 <_exit+0xc>)
   11642:	f7ff ffe3 	bl	1160c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11646:	e7fe      	b.n	11646 <_exit+0xa>
   11648:	0002f7e3 	.word	0x0002f7e3

0001164c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1164c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1164e:	4c07      	ldr	r4, [pc, #28]	; (1166c <_sbrk+0x20>)
   11650:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11652:	18c2      	adds	r2, r0, r3
   11654:	4806      	ldr	r0, [pc, #24]	; (11670 <_sbrk+0x24>)
   11656:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1165a:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   1165e:	428a      	cmp	r2, r1
		heap_sz += count;
   11660:	bf36      	itet	cc
   11662:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11664:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11668:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1166a:	bd10      	pop	{r4, pc}
   1166c:	20021628 	.word	0x20021628
   11670:	200382a8 	.word	0x200382a8

00011674 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11674:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11676:	4604      	mov	r4, r0
   11678:	b958      	cbnz	r0, 11692 <__retarget_lock_init_recursive+0x1e>
   1167a:	4911      	ldr	r1, [pc, #68]	; (116c0 <__retarget_lock_init_recursive+0x4c>)
   1167c:	f240 137b 	movw	r3, #379	; 0x17b
   11680:	4a10      	ldr	r2, [pc, #64]	; (116c4 <__retarget_lock_init_recursive+0x50>)
   11682:	4811      	ldr	r0, [pc, #68]	; (116c8 <__retarget_lock_init_recursive+0x54>)
   11684:	f015 f94d 	bl	26922 <assert_print>
   11688:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   1168c:	480d      	ldr	r0, [pc, #52]	; (116c4 <__retarget_lock_init_recursive+0x50>)
   1168e:	f015 f941 	bl	26914 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   11692:	2014      	movs	r0, #20
   11694:	f013 f952 	bl	2493c <malloc>
   11698:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   1169a:	b960      	cbnz	r0, 116b6 <__retarget_lock_init_recursive+0x42>
   1169c:	490b      	ldr	r1, [pc, #44]	; (116cc <__retarget_lock_init_recursive+0x58>)
   1169e:	f240 1383 	movw	r3, #387	; 0x183
   116a2:	4a08      	ldr	r2, [pc, #32]	; (116c4 <__retarget_lock_init_recursive+0x50>)
   116a4:	4808      	ldr	r0, [pc, #32]	; (116c8 <__retarget_lock_init_recursive+0x54>)
   116a6:	f015 f93c 	bl	26922 <assert_print>
   116aa:	4809      	ldr	r0, [pc, #36]	; (116d0 <__retarget_lock_init_recursive+0x5c>)
   116ac:	f015 f939 	bl	26922 <assert_print>
   116b0:	f240 1183 	movw	r1, #387	; 0x183
   116b4:	e7ea      	b.n	1168c <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   116b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   116ba:	f019 bf40 	b.w	2b53e <z_impl_k_mutex_init>
   116be:	bf00      	nop
   116c0:	0002f7ea 	.word	0x0002f7ea
   116c4:	0002f6e5 	.word	0x0002f6e5
   116c8:	0002d881 	.word	0x0002d881
   116cc:	0002f7e9 	.word	0x0002f7e9
   116d0:	0002f825 	.word	0x0002f825

000116d4 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   116d4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   116d6:	b958      	cbnz	r0, 116f0 <__retarget_lock_acquire_recursive+0x1c>
   116d8:	4909      	ldr	r1, [pc, #36]	; (11700 <__retarget_lock_acquire_recursive+0x2c>)
   116da:	480a      	ldr	r0, [pc, #40]	; (11704 <__retarget_lock_acquire_recursive+0x30>)
   116dc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   116e0:	4a09      	ldr	r2, [pc, #36]	; (11708 <__retarget_lock_acquire_recursive+0x34>)
   116e2:	f015 f91e 	bl	26922 <assert_print>
   116e6:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   116ea:	4807      	ldr	r0, [pc, #28]	; (11708 <__retarget_lock_acquire_recursive+0x34>)
   116ec:	f015 f912 	bl	26914 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   116f0:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   116f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   116f8:	f04f 33ff 	mov.w	r3, #4294967295
   116fc:	f00f be86 	b.w	2140c <z_impl_k_mutex_lock>
   11700:	0002f7ea 	.word	0x0002f7ea
   11704:	0002d881 	.word	0x0002d881
   11708:	0002f6e5 	.word	0x0002f6e5

0001170c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   1170c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1170e:	b958      	cbnz	r0, 11728 <__retarget_lock_release_recursive+0x1c>
   11710:	4907      	ldr	r1, [pc, #28]	; (11730 <__retarget_lock_release_recursive+0x24>)
   11712:	4808      	ldr	r0, [pc, #32]	; (11734 <__retarget_lock_release_recursive+0x28>)
   11714:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   11718:	4a07      	ldr	r2, [pc, #28]	; (11738 <__retarget_lock_release_recursive+0x2c>)
   1171a:	f015 f902 	bl	26922 <assert_print>
   1171e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   11722:	4805      	ldr	r0, [pc, #20]	; (11738 <__retarget_lock_release_recursive+0x2c>)
   11724:	f015 f8f6 	bl	26914 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   11728:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1172c:	f00f bf3e 	b.w	215ac <z_impl_k_mutex_unlock>
   11730:	0002f7ea 	.word	0x0002f7ea
   11734:	0002d881 	.word	0x0002d881
   11738:	0002f6e5 	.word	0x0002f6e5

0001173c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   1173c:	b508      	push	{r3, lr}
   1173e:	211d      	movs	r1, #29
   11740:	4804      	ldr	r0, [pc, #16]	; (11754 <__chk_fail+0x18>)
   11742:	f7ff ff63 	bl	1160c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11746:	4040      	eors	r0, r0
   11748:	f380 8811 	msr	BASEPRI, r0
   1174c:	f04f 0003 	mov.w	r0, #3
   11750:	df02      	svc	2
	CODE_UNREACHABLE;
   11752:	bf00      	nop
   11754:	0002f848 	.word	0x0002f848

00011758 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11758:	2000      	movs	r0, #0
   1175a:	4b02      	ldr	r3, [pc, #8]	; (11764 <remoteproc_mgr_boot+0xc>)
   1175c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11760:	4770      	bx	lr
   11762:	bf00      	nop
   11764:	40005000 	.word	0x40005000

00011768 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11768:	4b0e      	ldr	r3, [pc, #56]	; (117a4 <bt_hex+0x3c>)
   1176a:	2940      	cmp	r1, #64	; 0x40
   1176c:	bf28      	it	cs
   1176e:	2140      	movcs	r1, #64	; 0x40
{
   11770:	b570      	push	{r4, r5, r6, lr}
   11772:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   11774:	4c0c      	ldr	r4, [pc, #48]	; (117a8 <bt_hex+0x40>)
   11776:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   11778:	42b0      	cmp	r0, r6
   1177a:	f103 0302 	add.w	r3, r3, #2
   1177e:	d104      	bne.n	1178a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11780:	2300      	movs	r3, #0
   11782:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11786:	4807      	ldr	r0, [pc, #28]	; (117a4 <bt_hex+0x3c>)
   11788:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   1178a:	7802      	ldrb	r2, [r0, #0]
   1178c:	0912      	lsrs	r2, r2, #4
   1178e:	5ca2      	ldrb	r2, [r4, r2]
   11790:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11794:	f810 2b01 	ldrb.w	r2, [r0], #1
   11798:	f002 020f 	and.w	r2, r2, #15
   1179c:	5ca2      	ldrb	r2, [r4, r2]
   1179e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   117a2:	e7e9      	b.n	11778 <bt_hex+0x10>
   117a4:	20022406 	.word	0x20022406
   117a8:	0002f8a8 	.word	0x0002f8a8

000117ac <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   117ac:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   117ae:	7803      	ldrb	r3, [r0, #0]
   117b0:	b08b      	sub	sp, #44	; 0x2c
   117b2:	4604      	mov	r4, r0
   117b4:	ad07      	add	r5, sp, #28
   117b6:	2b03      	cmp	r3, #3
   117b8:	d821      	bhi.n	117fe <bt_addr_le_str+0x52>
   117ba:	e8df f003 	tbb	[pc, r3]
   117be:	1a02      	.short	0x1a02
   117c0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   117c2:	4912      	ldr	r1, [pc, #72]	; (1180c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   117c4:	4628      	mov	r0, r5
   117c6:	f01a fa13 	bl	2bbf0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   117ca:	9505      	str	r5, [sp, #20]
   117cc:	7863      	ldrb	r3, [r4, #1]
   117ce:	211e      	movs	r1, #30
   117d0:	9304      	str	r3, [sp, #16]
   117d2:	78a3      	ldrb	r3, [r4, #2]
   117d4:	4a0e      	ldr	r2, [pc, #56]	; (11810 <bt_addr_le_str+0x64>)
   117d6:	9303      	str	r3, [sp, #12]
   117d8:	78e3      	ldrb	r3, [r4, #3]
   117da:	480e      	ldr	r0, [pc, #56]	; (11814 <bt_addr_le_str+0x68>)
   117dc:	9302      	str	r3, [sp, #8]
   117de:	7923      	ldrb	r3, [r4, #4]
   117e0:	9301      	str	r3, [sp, #4]
   117e2:	7963      	ldrb	r3, [r4, #5]
   117e4:	9300      	str	r3, [sp, #0]
   117e6:	79a3      	ldrb	r3, [r4, #6]
   117e8:	f014 fee6 	bl	265b8 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   117ec:	4809      	ldr	r0, [pc, #36]	; (11814 <bt_addr_le_str+0x68>)
   117ee:	b00b      	add	sp, #44	; 0x2c
   117f0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   117f2:	4909      	ldr	r1, [pc, #36]	; (11818 <bt_addr_le_str+0x6c>)
   117f4:	e7e6      	b.n	117c4 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   117f6:	4909      	ldr	r1, [pc, #36]	; (1181c <bt_addr_le_str+0x70>)
   117f8:	e7e4      	b.n	117c4 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   117fa:	4909      	ldr	r1, [pc, #36]	; (11820 <bt_addr_le_str+0x74>)
   117fc:	e7e2      	b.n	117c4 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   117fe:	210a      	movs	r1, #10
   11800:	4628      	mov	r0, r5
   11802:	4a08      	ldr	r2, [pc, #32]	; (11824 <bt_addr_le_str+0x78>)
   11804:	f014 fed8 	bl	265b8 <snprintk>
		break;
   11808:	e7df      	b.n	117ca <bt_addr_le_str+0x1e>
   1180a:	bf00      	nop
   1180c:	0002d92a 	.word	0x0002d92a
   11810:	0002d94c 	.word	0x0002d94c
   11814:	200223e8 	.word	0x200223e8
   11818:	0002d931 	.word	0x0002d931
   1181c:	0002d938 	.word	0x0002d938
   11820:	0002d942 	.word	0x0002d942
   11824:	00031500 	.word	0x00031500

00011828 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   11828:	b590      	push	{r4, r7, lr}
   1182a:	b087      	sub	sp, #28
	int err;
	LOG_INF("Saving ID");
   1182c:	466c      	mov	r4, sp
{
   1182e:	af00      	add	r7, sp, #0
	LOG_INF("Saving ID");
   11830:	4b12      	ldr	r3, [pc, #72]	; (1187c <save_id+0x54>)
   11832:	617b      	str	r3, [r7, #20]
   11834:	2302      	movs	r3, #2
   11836:	613b      	str	r3, [r7, #16]
   11838:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1183c:	4810      	ldr	r0, [pc, #64]	; (11880 <save_id+0x58>)
   1183e:	f107 0210 	add.w	r2, r7, #16
   11842:	2300      	movs	r3, #0
   11844:	f7fc fea4 	bl	e590 <z_impl_z_log_msg_static_create>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   11848:	490e      	ldr	r1, [pc, #56]	; (11884 <save_id+0x5c>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   1184a:	480f      	ldr	r0, [pc, #60]	; (11888 <save_id+0x60>)
   1184c:	79ca      	ldrb	r2, [r1, #7]
   1184e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   11852:	f7fe f937 	bl	fac4 <settings_save_one>
	if (err) {
   11856:	b170      	cbz	r0, 11876 <save_id+0x4e>
		LOG_ERR("Failed to save ID (err %d)", err);
   11858:	b088      	sub	sp, #32
   1185a:	466a      	mov	r2, sp
   1185c:	4b0b      	ldr	r3, [pc, #44]	; (1188c <save_id+0x64>)
   1185e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11862:	2303      	movs	r3, #3
   11864:	f842 3f10 	str.w	r3, [r2, #16]!
   11868:	2300      	movs	r3, #0
   1186a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1186e:	4804      	ldr	r0, [pc, #16]	; (11880 <save_id+0x58>)
   11870:	f7fc fe8e 	bl	e590 <z_impl_z_log_msg_static_create>
   11874:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   11876:	371c      	adds	r7, #28
   11878:	46bd      	mov	sp, r7
   1187a:	bd90      	pop	{r4, r7, pc}
   1187c:	0002f8c0 	.word	0x0002f8c0
   11880:	0002c84c 	.word	0x0002c84c
   11884:	20008000 	.word	0x20008000
   11888:	0002f8ca 	.word	0x0002f8ca
   1188c:	0002f8d0 	.word	0x0002f8d0

00011890 <set_setting>:
{
   11890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11894:	4604      	mov	r4, r0
   11896:	4617      	mov	r7, r2
   11898:	4698      	mov	r8, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1189a:	4e29      	ldr	r6, [pc, #164]	; (11940 <set_setting+0xb0>)
   1189c:	b088      	sub	sp, #32
   1189e:	e8d6 3faf 	lda	r3, [r6]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   118a2:	07d9      	lsls	r1, r3, #31
   118a4:	d529      	bpl.n	118fa <set_setting+0x6a>
	if (!name) {
   118a6:	b968      	cbnz	r0, 118c4 <set_setting+0x34>
		LOG_ERR("Insufficient number of arguments");
   118a8:	4b26      	ldr	r3, [pc, #152]	; (11944 <set_setting+0xb4>)
   118aa:	9307      	str	r3, [sp, #28]
   118ac:	2302      	movs	r3, #2
   118ae:	9306      	str	r3, [sp, #24]
   118b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   118b4:	4603      	mov	r3, r0
   118b6:	aa06      	add	r2, sp, #24
   118b8:	4823      	ldr	r0, [pc, #140]	; (11948 <set_setting+0xb8>)
   118ba:	f7fc fe69 	bl	e590 <z_impl_z_log_msg_static_create>
		return -ENOENT;
   118be:	f06f 0001 	mvn.w	r0, #1
   118c2:	e01b      	b.n	118fc <set_setting+0x6c>
	len = settings_name_next(name, &next);
   118c4:	a901      	add	r1, sp, #4
   118c6:	f015 fe4c 	bl	27562 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   118ca:	4920      	ldr	r1, [pc, #128]	; (1194c <set_setting+0xbc>)
	len = settings_name_next(name, &next);
   118cc:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   118ce:	4620      	mov	r0, r4
   118d0:	f01a f996 	bl	2bc00 <strncmp>
   118d4:	4603      	mov	r3, r0
   118d6:	2800      	cmp	r0, #0
   118d8:	d1f1      	bne.n	118be <set_setting+0x2e>
   118da:	e8d6 2faf 	lda	r2, [r6]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   118de:	f3c2 05c0 	ubfx	r5, r2, #3, #1
   118e2:	0712      	lsls	r2, r2, #28
   118e4:	d50d      	bpl.n	11902 <set_setting+0x72>
			LOG_WRN("Ignoring identities stored in flash");
   118e6:	4a1a      	ldr	r2, [pc, #104]	; (11950 <set_setting+0xc0>)
   118e8:	9207      	str	r2, [sp, #28]
   118ea:	2202      	movs	r2, #2
   118ec:	9206      	str	r2, [sp, #24]
   118ee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   118f2:	4815      	ldr	r0, [pc, #84]	; (11948 <set_setting+0xb8>)
   118f4:	aa06      	add	r2, sp, #24
   118f6:	f7fc fe4b 	bl	e590 <z_impl_z_log_msg_static_create>
		return 0;
   118fa:	2000      	movs	r0, #0
}
   118fc:	b008      	add	sp, #32
   118fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   11902:	f1a6 04cc 	sub.w	r4, r6, #204	; 0xcc
   11906:	2207      	movs	r2, #7
   11908:	4621      	mov	r1, r4
   1190a:	4640      	mov	r0, r8
   1190c:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   1190e:	2806      	cmp	r0, #6
   11910:	d810      	bhi.n	11934 <set_setting+0xa4>
				LOG_ERR("Invalid length ID address in storage");
   11912:	4b10      	ldr	r3, [pc, #64]	; (11954 <set_setting+0xc4>)
   11914:	9307      	str	r3, [sp, #28]
   11916:	2302      	movs	r3, #2
   11918:	9306      	str	r3, [sp, #24]
   1191a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1191e:	462b      	mov	r3, r5
   11920:	4809      	ldr	r0, [pc, #36]	; (11948 <set_setting+0xb8>)
   11922:	aa06      	add	r2, sp, #24
   11924:	f7fc fe34 	bl	e590 <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
   11928:	f846 5ccc 	str.w	r5, [r6, #-204]
			bt_dev.id_count = 0U;
   1192c:	71e5      	strb	r5, [r4, #7]
			(void)memset(bt_dev.id_addr, 0,
   1192e:	f8c4 5003 	str.w	r5, [r4, #3]
			bt_dev.id_count = 0U;
   11932:	e7e2      	b.n	118fa <set_setting+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   11934:	2307      	movs	r3, #7
   11936:	fbb0 f0f3 	udiv	r0, r0, r3
   1193a:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   1193c:	e7dd      	b.n	118fa <set_setting+0x6a>
   1193e:	bf00      	nop
   11940:	200080cc 	.word	0x200080cc
   11944:	0002f8eb 	.word	0x0002f8eb
   11948:	0002c84c 	.word	0x0002c84c
   1194c:	0002d93f 	.word	0x0002d93f
   11950:	0002f90c 	.word	0x0002f90c
   11954:	0002f930 	.word	0x0002f930

00011958 <bt_settings_encode_key>:
{
   11958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1195c:	b088      	sub	sp, #32
   1195e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   11962:	799c      	ldrb	r4, [r3, #6]
   11964:	795d      	ldrb	r5, [r3, #5]
   11966:	791e      	ldrb	r6, [r3, #4]
   11968:	78df      	ldrb	r7, [r3, #3]
   1196a:	f893 c002 	ldrb.w	ip, [r3, #2]
   1196e:	f893 e001 	ldrb.w	lr, [r3, #1]
   11972:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   11974:	f1b8 0f00 	cmp.w	r8, #0
   11978:	d00e      	beq.n	11998 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   1197a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1197e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   11982:	4613      	mov	r3, r2
   11984:	e9cd 6702 	strd	r6, r7, [sp, #8]
   11988:	e9cd 4500 	strd	r4, r5, [sp]
   1198c:	4a08      	ldr	r2, [pc, #32]	; (119b0 <bt_settings_encode_key+0x58>)
   1198e:	f014 fe13 	bl	265b8 <snprintk>
}
   11992:	b008      	add	sp, #32
   11994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   11998:	e9cd e305 	strd	lr, r3, [sp, #20]
   1199c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   119a0:	4613      	mov	r3, r2
   119a2:	e9cd 5601 	strd	r5, r6, [sp, #4]
   119a6:	4a03      	ldr	r2, [pc, #12]	; (119b4 <bt_settings_encode_key+0x5c>)
   119a8:	9400      	str	r4, [sp, #0]
   119aa:	f014 fe05 	bl	265b8 <snprintk>
}
   119ae:	e7f0      	b.n	11992 <bt_settings_encode_key+0x3a>
   119b0:	0002f955 	.word	0x0002f955
   119b4:	0002f979 	.word	0x0002f979

000119b8 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   119b8:	4801      	ldr	r0, [pc, #4]	; (119c0 <bt_settings_save_id+0x8>)
   119ba:	f010 baf7 	b.w	21fac <k_work_submit>
   119be:	bf00      	nop
   119c0:	20008604 	.word	0x20008604

000119c4 <commit_settings>:
}

static int commit_settings(void)
{
   119c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119c8:	4d1d      	ldr	r5, [pc, #116]	; (11a40 <commit_settings+0x7c>)
   119ca:	b086      	sub	sp, #24
   119cc:	e8d5 3faf 	lda	r3, [r5]
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   119d0:	f013 0f01 	tst.w	r3, #1
   119d4:	462f      	mov	r7, r5
   119d6:	d031      	beq.n	11a3c <commit_settings+0x78>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   119d8:	f815 6cc5 	ldrb.w	r6, [r5, #-197]
   119dc:	f1a5 08cc 	sub.w	r8, r5, #204	; 0xcc
   119e0:	b9d6      	cbnz	r6, 11a18 <commit_settings+0x54>
		err = bt_setup_public_id_addr();
   119e2:	f001 ffc5 	bl	13970 <bt_setup_public_id_addr>
		if (err) {
   119e6:	4604      	mov	r4, r0
   119e8:	b170      	cbz	r0, 11a08 <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   119ea:	4b16      	ldr	r3, [pc, #88]	; (11a44 <commit_settings+0x80>)
   119ec:	9305      	str	r3, [sp, #20]
   119ee:	2302      	movs	r3, #2
   119f0:	9304      	str	r3, [sp, #16]
   119f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   119f6:	4633      	mov	r3, r6
   119f8:	4813      	ldr	r0, [pc, #76]	; (11a48 <commit_settings+0x84>)
   119fa:	aa04      	add	r2, sp, #16
   119fc:	f7fc fdc8 	bl	e590 <z_impl_z_log_msg_static_create>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   11a00:	4620      	mov	r0, r4
   11a02:	b006      	add	sp, #24
   11a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
   11a08:	f898 6007 	ldrb.w	r6, [r8, #7]
   11a0c:	b926      	cbnz	r6, 11a18 <commit_settings+0x54>
		err = bt_setup_random_id_addr();
   11a0e:	f002 f813 	bl	13a38 <bt_setup_random_id_addr>
		if (err) {
   11a12:	4604      	mov	r4, r0
   11a14:	2800      	cmp	r0, #0
   11a16:	d1e8      	bne.n	119ea <commit_settings+0x26>
   11a18:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a1c:	075a      	lsls	r2, r3, #29
   11a1e:	d401      	bmi.n	11a24 <commit_settings+0x60>
		bt_finalize_init();
   11a20:	f001 fbae 	bl	13180 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11a24:	e8d7 3fef 	ldaex	r3, [r7]
   11a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   11a2c:	e8c7 2fe1 	stlex	r1, r2, [r7]
   11a30:	2900      	cmp	r1, #0
   11a32:	d1f7      	bne.n	11a24 <commit_settings+0x60>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   11a34:	03db      	lsls	r3, r3, #15
   11a36:	d501      	bpl.n	11a3c <commit_settings+0x78>
		bt_settings_save_id();
   11a38:	f7ff ffbe 	bl	119b8 <bt_settings_save_id>
		return 0;
   11a3c:	2400      	movs	r4, #0
   11a3e:	e7df      	b.n	11a00 <commit_settings+0x3c>
   11a40:	200080cc 	.word	0x200080cc
   11a44:	0002f99a 	.word	0x0002f99a
   11a48:	0002c84c 	.word	0x0002c84c

00011a4c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   11a4c:	b5b0      	push	{r4, r5, r7, lr}
   11a4e:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   11a50:	f7fe f9ca 	bl	fde8 <settings_subsys_init>
	if (err) {
   11a54:	4604      	mov	r4, r0
   11a56:	b178      	cbz	r0, 11a78 <bt_settings_init+0x2c>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   11a58:	466d      	mov	r5, sp
   11a5a:	b088      	sub	sp, #32
   11a5c:	466a      	mov	r2, sp
   11a5e:	4b08      	ldr	r3, [pc, #32]	; (11a80 <bt_settings_init+0x34>)
   11a60:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11a64:	2303      	movs	r3, #3
   11a66:	f842 3f10 	str.w	r3, [r2, #16]!
   11a6a:	2300      	movs	r3, #0
   11a6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a70:	4804      	ldr	r0, [pc, #16]	; (11a84 <bt_settings_init+0x38>)
   11a72:	f7fc fd8d 	bl	e590 <z_impl_z_log_msg_static_create>
   11a76:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   11a78:	4620      	mov	r0, r4
   11a7a:	46bd      	mov	sp, r7
   11a7c:	bdb0      	pop	{r4, r5, r7, pc}
   11a7e:	bf00      	nop
   11a80:	0002f9be 	.word	0x0002f9be
   11a84:	0002c84c 	.word	0x0002c84c

00011a88 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   11a88:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11a8a:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   11a8c:	4d09      	ldr	r5, [pc, #36]	; (11ab4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11a8e:	4b0a      	ldr	r3, [pc, #40]	; (11ab8 <long_wq_init+0x30>)
{
   11a90:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   11a92:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11a94:	9302      	str	r3, [sp, #8]
   11a96:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   11a98:	f010 fa8e 	bl	21fb8 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   11a9c:	ab02      	add	r3, sp, #8
   11a9e:	4628      	mov	r0, r5
   11aa0:	9300      	str	r3, [sp, #0]
   11aa2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   11aa6:	230a      	movs	r3, #10
   11aa8:	4904      	ldr	r1, [pc, #16]	; (11abc <long_wq_init+0x34>)
   11aaa:	f010 fa9f 	bl	21fec <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   11aae:	4620      	mov	r0, r4
   11ab0:	b005      	add	sp, #20
   11ab2:	bd30      	pop	{r4, r5, pc}
   11ab4:	20009b78 	.word	0x20009b78
   11ab8:	0002f9f2 	.word	0x0002f9f2
   11abc:	20032350 	.word	0x20032350

00011ac0 <bt_long_wq_schedule>:
{
   11ac0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   11ac2:	4801      	ldr	r0, [pc, #4]	; (11ac8 <bt_long_wq_schedule+0x8>)
   11ac4:	f010 bbb4 	b.w	22230 <k_work_schedule_for_queue>
   11ac8:	20009b78 	.word	0x20009b78

00011acc <bt_long_wq_reschedule>:
{
   11acc:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   11ace:	4801      	ldr	r0, [pc, #4]	; (11ad4 <bt_long_wq_reschedule+0x8>)
   11ad0:	f010 bc2a 	b.w	22328 <k_work_reschedule_for_queue>
   11ad4:	20009b78 	.word	0x20009b78

00011ad8 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11ad8:	7803      	ldrb	r3, [r0, #0]
{
   11ada:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   11adc:	2b01      	cmp	r3, #1
   11ade:	d013      	beq.n	11b08 <uuid_to_uuid128+0x30>
   11ae0:	2b02      	cmp	r3, #2
   11ae2:	d027      	beq.n	11b34 <uuid_to_uuid128+0x5c>
   11ae4:	b97b      	cbnz	r3, 11b06 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11ae6:	460a      	mov	r2, r1
   11ae8:	4b18      	ldr	r3, [pc, #96]	; (11b4c <uuid_to_uuid128+0x74>)
   11aea:	f103 0410 	add.w	r4, r3, #16
   11aee:	f853 5b04 	ldr.w	r5, [r3], #4
   11af2:	42a3      	cmp	r3, r4
   11af4:	f842 5b04 	str.w	r5, [r2], #4
   11af8:	d1f9      	bne.n	11aee <uuid_to_uuid128+0x16>
   11afa:	781b      	ldrb	r3, [r3, #0]
   11afc:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   11afe:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   11b00:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   11b02:	0a1b      	lsrs	r3, r3, #8
   11b04:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11b06:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11b08:	460a      	mov	r2, r1
   11b0a:	4b10      	ldr	r3, [pc, #64]	; (11b4c <uuid_to_uuid128+0x74>)
   11b0c:	f103 0410 	add.w	r4, r3, #16
   11b10:	f853 5b04 	ldr.w	r5, [r3], #4
   11b14:	42a3      	cmp	r3, r4
   11b16:	f842 5b04 	str.w	r5, [r2], #4
   11b1a:	d1f9      	bne.n	11b10 <uuid_to_uuid128+0x38>
   11b1c:	781b      	ldrb	r3, [r3, #0]
   11b1e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   11b20:	6843      	ldr	r3, [r0, #4]
   11b22:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11b26:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   11b28:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11b2a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   11b2c:	0a1b      	lsrs	r3, r3, #8
   11b2e:	738a      	strb	r2, [r1, #14]
   11b30:	740b      	strb	r3, [r1, #16]
}
   11b32:	e7e8      	b.n	11b06 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11b34:	f100 0310 	add.w	r3, r0, #16
   11b38:	f850 2b04 	ldr.w	r2, [r0], #4
   11b3c:	4298      	cmp	r0, r3
   11b3e:	f841 2b04 	str.w	r2, [r1], #4
   11b42:	d1f9      	bne.n	11b38 <uuid_to_uuid128+0x60>
   11b44:	7803      	ldrb	r3, [r0, #0]
   11b46:	700b      	strb	r3, [r1, #0]
   11b48:	e7dd      	b.n	11b06 <uuid_to_uuid128+0x2e>
   11b4a:	bf00      	nop
   11b4c:	0002f9fb 	.word	0x0002f9fb

00011b50 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11b50:	b538      	push	{r3, r4, r5, lr}
   11b52:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11b54:	2d01      	cmp	r5, #1
{
   11b56:	4610      	mov	r0, r2
   11b58:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11b5a:	d010      	beq.n	11b7e <bt_buf_get_rx+0x2e>
   11b5c:	2d03      	cmp	r5, #3
   11b5e:	d01a      	beq.n	11b96 <bt_buf_get_rx+0x46>
   11b60:	2d05      	cmp	r5, #5
   11b62:	d018      	beq.n	11b96 <bt_buf_get_rx+0x46>
   11b64:	490e      	ldr	r1, [pc, #56]	; (11ba0 <bt_buf_get_rx+0x50>)
   11b66:	233d      	movs	r3, #61	; 0x3d
   11b68:	4a0e      	ldr	r2, [pc, #56]	; (11ba4 <bt_buf_get_rx+0x54>)
   11b6a:	480f      	ldr	r0, [pc, #60]	; (11ba8 <bt_buf_get_rx+0x58>)
   11b6c:	f014 fed9 	bl	26922 <assert_print>
   11b70:	480e      	ldr	r0, [pc, #56]	; (11bac <bt_buf_get_rx+0x5c>)
   11b72:	f014 fed6 	bl	26922 <assert_print>
   11b76:	213d      	movs	r1, #61	; 0x3d
   11b78:	480a      	ldr	r0, [pc, #40]	; (11ba4 <bt_buf_get_rx+0x54>)
   11b7a:	f014 fecb 	bl	26914 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11b7e:	480c      	ldr	r0, [pc, #48]	; (11bb0 <bt_buf_get_rx+0x60>)
   11b80:	f018 f986 	bl	29e90 <net_buf_alloc_fixed>
   11b84:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11b86:	b120      	cbz	r0, 11b92 <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   11b88:	2101      	movs	r1, #1
   11b8a:	300c      	adds	r0, #12
   11b8c:	f008 ff30 	bl	1a9f0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11b90:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11b92:	4620      	mov	r0, r4
   11b94:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11b96:	4602      	mov	r2, r0
   11b98:	460b      	mov	r3, r1
   11b9a:	4806      	ldr	r0, [pc, #24]	; (11bb4 <bt_buf_get_rx+0x64>)
   11b9c:	e7f0      	b.n	11b80 <bt_buf_get_rx+0x30>
   11b9e:	bf00      	nop
   11ba0:	0002fa3b 	.word	0x0002fa3b
   11ba4:	0002fa0c 	.word	0x0002fa0c
   11ba8:	0002d881 	.word	0x0002d881
   11bac:	0002fa80 	.word	0x0002fa80
   11bb0:	20008e80 	.word	0x20008e80
   11bb4:	20008de4 	.word	0x20008de4

00011bb8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11bb8:	b510      	push	{r4, lr}
   11bba:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11bbc:	490a      	ldr	r1, [pc, #40]	; (11be8 <bt_buf_get_cmd_complete+0x30>)
{
   11bbe:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11bc0:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   11bc4:	b920      	cbnz	r0, 11bd0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11bca:	2001      	movs	r0, #1
   11bcc:	f7ff bfc0 	b.w	11b50 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11bd0:	f009 f864 	bl	1ac9c <net_buf_ref>
   11bd4:	2101      	movs	r1, #1
		buf->len = 0U;
   11bd6:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   11bd8:	4604      	mov	r4, r0
   11bda:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   11bdc:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   11bde:	300c      	adds	r0, #12
   11be0:	f008 ff06 	bl	1a9f0 <net_buf_simple_reserve>
}
   11be4:	4620      	mov	r0, r4
   11be6:	bd10      	pop	{r4, pc}
   11be8:	20008000 	.word	0x20008000

00011bec <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11bec:	b570      	push	{r4, r5, r6, lr}
   11bee:	4604      	mov	r4, r0
	switch (evt) {
   11bf0:	2c0f      	cmp	r4, #15
{
   11bf2:	460d      	mov	r5, r1
   11bf4:	4610      	mov	r0, r2
   11bf6:	4619      	mov	r1, r3
	switch (evt) {
   11bf8:	d805      	bhi.n	11c06 <bt_buf_get_evt+0x1a>
   11bfa:	2c0d      	cmp	r4, #13
   11bfc:	d90d      	bls.n	11c1a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11c02:	f7ff bfd9 	b.w	11bb8 <bt_buf_get_cmd_complete>
	switch (evt) {
   11c06:	2c13      	cmp	r4, #19
   11c08:	d107      	bne.n	11c1a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   11c0a:	480c      	ldr	r0, [pc, #48]	; (11c3c <bt_buf_get_evt+0x50>)
   11c0c:	f018 f940 	bl	29e90 <net_buf_alloc_fixed>
			if (buf) {
   11c10:	4604      	mov	r4, r0
   11c12:	b938      	cbnz	r0, 11c24 <bt_buf_get_evt+0x38>
{
   11c14:	2400      	movs	r4, #0
}
   11c16:	4620      	mov	r0, r4
   11c18:	bd70      	pop	{r4, r5, r6, pc}
   11c1a:	4602      	mov	r2, r0
   11c1c:	460b      	mov	r3, r1
		if (discardable) {
   11c1e:	b145      	cbz	r5, 11c32 <bt_buf_get_evt+0x46>
   11c20:	4807      	ldr	r0, [pc, #28]	; (11c40 <bt_buf_get_evt+0x54>)
   11c22:	e7f3      	b.n	11c0c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11c24:	2101      	movs	r1, #1
   11c26:	300c      	adds	r0, #12
   11c28:	f008 fee2 	bl	1a9f0 <net_buf_simple_reserve>
   11c2c:	2301      	movs	r3, #1
   11c2e:	7623      	strb	r3, [r4, #24]
}
   11c30:	e7f1      	b.n	11c16 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11c32:	2001      	movs	r0, #1
}
   11c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11c38:	f7ff bf8a 	b.w	11b50 <bt_buf_get_rx>
   11c3c:	20008f1c 	.word	0x20008f1c
   11c40:	20008e4c 	.word	0x20008e4c

00011c44 <hci_disconn_complete_prio>:
{
   11c44:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11c46:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11c48:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   11c4c:	781b      	ldrb	r3, [r3, #0]
   11c4e:	b963      	cbnz	r3, 11c6a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   11c50:	4620      	mov	r0, r4
   11c52:	f002 ffa7 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   11c56:	4605      	mov	r5, r0
   11c58:	b940      	cbnz	r0, 11c6c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11c5a:	4b08      	ldr	r3, [pc, #32]	; (11c7c <hci_disconn_complete_prio+0x38>)
   11c5c:	881a      	ldrh	r2, [r3, #0]
   11c5e:	b922      	cbnz	r2, 11c6a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11c60:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11c64:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11c68:	8018      	strh	r0, [r3, #0]
}
   11c6a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11c6c:	2101      	movs	r1, #1
   11c6e:	f002 ffa1 	bl	14bb4 <bt_conn_set_state>
	bt_conn_unref(conn);
   11c72:	4628      	mov	r0, r5
}
   11c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11c78:	f002 bf64 	b.w	14b44 <bt_conn_unref>
   11c7c:	20021be2 	.word	0x20021be2

00011c80 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11c80:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11c82:	4c08      	ldr	r4, [pc, #32]	; (11ca4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11c84:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11c86:	2205      	movs	r2, #5
   11c88:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11c8c:	f003 fa80 	bl	15190 <bt_conn_lookup_state_le>
		if (!conn) {
   11c90:	b938      	cbnz	r0, 11ca2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11c92:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11c96:	2204      	movs	r2, #4
}
   11c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11c9c:	4902      	ldr	r1, [pc, #8]	; (11ca8 <find_pending_connect.part.0+0x28>)
   11c9e:	f003 ba77 	b.w	15190 <bt_conn_lookup_state_le>
}
   11ca2:	bd10      	pop	{r4, pc}
   11ca4:	20008000 	.word	0x20008000
   11ca8:	0002f88e 	.word	0x0002f88e

00011cac <hci_data_buf_overflow>:
{
   11cac:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11cae:	68c3      	ldr	r3, [r0, #12]
{
   11cb0:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11cb2:	b088      	sub	sp, #32
   11cb4:	466a      	mov	r2, sp
   11cb6:	781b      	ldrb	r3, [r3, #0]
   11cb8:	4906      	ldr	r1, [pc, #24]	; (11cd4 <hci_data_buf_overflow+0x28>)
   11cba:	4807      	ldr	r0, [pc, #28]	; (11cd8 <hci_data_buf_overflow+0x2c>)
   11cbc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11cc0:	2303      	movs	r3, #3
   11cc2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11cc6:	f842 3f10 	str.w	r3, [r2, #16]!
   11cca:	f016 fab0 	bl	2822e <z_log_msg_static_create.constprop.0>
}
   11cce:	46bd      	mov	sp, r7
   11cd0:	bd80      	pop	{r7, pc}
   11cd2:	bf00      	nop
   11cd4:	0002faa0 	.word	0x0002faa0
   11cd8:	0002c80c 	.word	0x0002c80c

00011cdc <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   11cdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   11cde:	4b06      	ldr	r3, [pc, #24]	; (11cf8 <le_conn_param_neg_reply.part.0+0x1c>)
   11ce0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11ce4:	9305      	str	r3, [sp, #20]
   11ce6:	2302      	movs	r3, #2
   11ce8:	4804      	ldr	r0, [pc, #16]	; (11cfc <le_conn_param_neg_reply.part.0+0x20>)
   11cea:	aa04      	add	r2, sp, #16
   11cec:	9304      	str	r3, [sp, #16]
   11cee:	f016 fa9e 	bl	2822e <z_log_msg_static_create.constprop.0>
}
   11cf2:	b007      	add	sp, #28
   11cf4:	f85d fb04 	ldr.w	pc, [sp], #4
   11cf8:	0002fac8 	.word	0x0002fac8
   11cfc:	0002c80c 	.word	0x0002c80c

00011d00 <rx_queue_put>:
{
   11d00:	b598      	push	{r3, r4, r7, lr}
   11d02:	4601      	mov	r1, r0
   11d04:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   11d06:	480d      	ldr	r0, [pc, #52]	; (11d3c <rx_queue_put+0x3c>)
   11d08:	f008 fe98 	bl	1aa3c <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   11d0c:	490c      	ldr	r1, [pc, #48]	; (11d40 <rx_queue_put+0x40>)
   11d0e:	480d      	ldr	r0, [pc, #52]	; (11d44 <rx_queue_put+0x44>)
   11d10:	f019 fcad 	bl	2b66e <k_work_submit_to_queue>
	if (err < 0) {
   11d14:	2800      	cmp	r0, #0
   11d16:	da0e      	bge.n	11d36 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   11d18:	466c      	mov	r4, sp
   11d1a:	b088      	sub	sp, #32
   11d1c:	466a      	mov	r2, sp
   11d1e:	4b0a      	ldr	r3, [pc, #40]	; (11d48 <rx_queue_put+0x48>)
   11d20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11d24:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11d28:	2303      	movs	r3, #3
   11d2a:	4808      	ldr	r0, [pc, #32]	; (11d4c <rx_queue_put+0x4c>)
   11d2c:	f842 3f10 	str.w	r3, [r2, #16]!
   11d30:	f016 fa7d 	bl	2822e <z_log_msg_static_create.constprop.0>
   11d34:	46a5      	mov	sp, r4
}
   11d36:	46bd      	mov	sp, r7
   11d38:	bd98      	pop	{r3, r4, r7, pc}
   11d3a:	bf00      	nop
   11d3c:	2000813c 	.word	0x2000813c
   11d40:	20008650 	.word	0x20008650
   11d44:	20009ca8 	.word	0x20009ca8
   11d48:	0002fae2 	.word	0x0002fae2
   11d4c:	0002c80c 	.word	0x0002c80c

00011d50 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   11d50:	460b      	mov	r3, r1
   11d52:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   11d54:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   11d56:	af00      	add	r7, sp, #0
   11d58:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   11d5a:	4629      	mov	r1, r5
   11d5c:	68d8      	ldr	r0, [r3, #12]
   11d5e:	f7ff fd03 	bl	11768 <bt_hex>
   11d62:	b08a      	sub	sp, #40	; 0x28
   11d64:	466a      	mov	r2, sp
   11d66:	4b09      	ldr	r3, [pc, #36]	; (11d8c <handle_event.part.0+0x3c>)
   11d68:	e9c2 5007 	strd	r5, r0, [r2, #28]
   11d6c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11d70:	f240 4302 	movw	r3, #1026	; 0x402
   11d74:	8493      	strh	r3, [r2, #36]	; 0x24
   11d76:	4b06      	ldr	r3, [pc, #24]	; (11d90 <handle_event.part.0+0x40>)
   11d78:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   11d7c:	4805      	ldr	r0, [pc, #20]	; (11d94 <handle_event.part.0+0x44>)
   11d7e:	f842 3f10 	str.w	r3, [r2, #16]!
   11d82:	f016 fa54 	bl	2822e <z_log_msg_static_create.constprop.0>
}
   11d86:	46bd      	mov	sp, r7
   11d88:	bdb0      	pop	{r4, r5, r7, pc}
   11d8a:	bf00      	nop
   11d8c:	0002faff 	.word	0x0002faff
   11d90:	01000005 	.word	0x01000005
   11d94:	0002c80c 	.word	0x0002c80c

00011d98 <hci_hardware_error>:
{
   11d98:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   11d9a:	2101      	movs	r1, #1
   11d9c:	af00      	add	r7, sp, #0
   11d9e:	300c      	adds	r0, #12
   11da0:	f009 f83c 	bl	1ae1c <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   11da4:	b088      	sub	sp, #32
   11da6:	466a      	mov	r2, sp
   11da8:	7803      	ldrb	r3, [r0, #0]
   11daa:	4906      	ldr	r1, [pc, #24]	; (11dc4 <hci_hardware_error+0x2c>)
   11dac:	4806      	ldr	r0, [pc, #24]	; (11dc8 <hci_hardware_error+0x30>)
   11dae:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11db2:	2303      	movs	r3, #3
   11db4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11db8:	f842 3f10 	str.w	r3, [r2, #16]!
   11dbc:	f016 fa37 	bl	2822e <z_log_msg_static_create.constprop.0>
}
   11dc0:	46bd      	mov	sp, r7
   11dc2:	bd80      	pop	{r7, pc}
   11dc4:	0002fb21 	.word	0x0002fb21
   11dc8:	0002c80c 	.word	0x0002c80c

00011dcc <le_data_len_change>:
{
   11dcc:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11dce:	68c3      	ldr	r3, [r0, #12]
{
   11dd0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11dd2:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   11dd4:	4620      	mov	r0, r4
   11dd6:	f002 fee5 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   11dda:	b980      	cbnz	r0, 11dfe <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11ddc:	466d      	mov	r5, sp
   11dde:	b088      	sub	sp, #32
   11de0:	466a      	mov	r2, sp
   11de2:	4b08      	ldr	r3, [pc, #32]	; (11e04 <le_data_len_change+0x38>)
   11de4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11de8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11dec:	2303      	movs	r3, #3
   11dee:	4806      	ldr	r0, [pc, #24]	; (11e08 <le_data_len_change+0x3c>)
   11df0:	f842 3f10 	str.w	r3, [r2, #16]!
   11df4:	f016 fa1b 	bl	2822e <z_log_msg_static_create.constprop.0>
   11df8:	46ad      	mov	sp, r5
}
   11dfa:	46bd      	mov	sp, r7
   11dfc:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   11dfe:	f002 fea1 	bl	14b44 <bt_conn_unref>
   11e02:	e7fa      	b.n	11dfa <le_data_len_change+0x2e>
   11e04:	0002fb43 	.word	0x0002fb43
   11e08:	0002c80c 	.word	0x0002c80c

00011e0c <le_phy_update_complete>:
{
   11e0c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11e0e:	68c3      	ldr	r3, [r0, #12]
{
   11e10:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11e12:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   11e16:	4620      	mov	r0, r4
   11e18:	f002 fec4 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   11e1c:	b980      	cbnz	r0, 11e40 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11e1e:	466d      	mov	r5, sp
   11e20:	b088      	sub	sp, #32
   11e22:	466a      	mov	r2, sp
   11e24:	4b08      	ldr	r3, [pc, #32]	; (11e48 <le_phy_update_complete+0x3c>)
   11e26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11e2a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11e2e:	2303      	movs	r3, #3
   11e30:	4806      	ldr	r0, [pc, #24]	; (11e4c <le_phy_update_complete+0x40>)
   11e32:	f842 3f10 	str.w	r3, [r2, #16]!
   11e36:	f016 f9fa 	bl	2822e <z_log_msg_static_create.constprop.0>
   11e3a:	46ad      	mov	sp, r5
}
   11e3c:	46bd      	mov	sp, r7
   11e3e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   11e40:	f002 fe80 	bl	14b44 <bt_conn_unref>
   11e44:	e7fa      	b.n	11e3c <le_phy_update_complete+0x30>
   11e46:	bf00      	nop
   11e48:	0002fb43 	.word	0x0002fb43
   11e4c:	0002c80c 	.word	0x0002c80c

00011e50 <hci_disconn_complete>:
{
   11e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11e54:	68c5      	ldr	r5, [r0, #12]
{
   11e56:	af00      	add	r7, sp, #0
	if (evt->status) {
   11e58:	782e      	ldrb	r6, [r5, #0]
   11e5a:	b9ae      	cbnz	r6, 11e88 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11e5c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   11e60:	4640      	mov	r0, r8
   11e62:	f002 fe9f 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   11e66:	4604      	mov	r4, r0
   11e68:	b988      	cbnz	r0, 11e8e <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   11e6a:	466c      	mov	r4, sp
   11e6c:	b088      	sub	sp, #32
   11e6e:	466a      	mov	r2, sp
   11e70:	4b0b      	ldr	r3, [pc, #44]	; (11ea0 <hci_disconn_complete+0x50>)
   11e72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11e76:	e9c2 3805 	strd	r3, r8, [r2, #20]
   11e7a:	2303      	movs	r3, #3
   11e7c:	4809      	ldr	r0, [pc, #36]	; (11ea4 <hci_disconn_complete+0x54>)
   11e7e:	f842 3f10 	str.w	r3, [r2, #16]!
   11e82:	f016 f9d4 	bl	2822e <z_log_msg_static_create.constprop.0>
   11e86:	46a5      	mov	sp, r4
}
   11e88:	46bd      	mov	sp, r7
   11e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   11e8e:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11e90:	4631      	mov	r1, r6
	conn->err = evt->reason;
   11e92:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11e94:	f002 fe8e 	bl	14bb4 <bt_conn_set_state>
		bt_conn_unref(conn);
   11e98:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   11e9a:	f002 fe53 	bl	14b44 <bt_conn_unref>
   11e9e:	e7f3      	b.n	11e88 <hci_disconn_complete+0x38>
   11ea0:	0002fb67 	.word	0x0002fb67
   11ea4:	0002c80c 	.word	0x0002c80c

00011ea8 <handle_event>:
{
   11ea8:	b5b0      	push	{r4, r5, r7, lr}
   11eaa:	4604      	mov	r4, r0
   11eac:	af00      	add	r7, sp, #0
   11eae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   11eb2:	4293      	cmp	r3, r2
   11eb4:	d103      	bne.n	11ebe <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   11eb6:	4620      	mov	r0, r4
   11eb8:	f7ff ff4a 	bl	11d50 <handle_event.part.0>
}
   11ebc:	e018      	b.n	11ef0 <handle_event+0x48>
		if (handler->event != event) {
   11ebe:	4610      	mov	r0, r2
   11ec0:	f810 5b08 	ldrb.w	r5, [r0], #8
   11ec4:	42a5      	cmp	r5, r4
   11ec6:	d119      	bne.n	11efc <handle_event+0x54>
		if (buf->len < handler->min_len) {
   11ec8:	8a0b      	ldrh	r3, [r1, #16]
   11eca:	7850      	ldrb	r0, [r2, #1]
   11ecc:	4298      	cmp	r0, r3
   11ece:	d911      	bls.n	11ef4 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   11ed0:	466d      	mov	r5, sp
   11ed2:	b088      	sub	sp, #32
   11ed4:	466a      	mov	r2, sp
   11ed6:	490a      	ldr	r1, [pc, #40]	; (11f00 <handle_event+0x58>)
   11ed8:	61d4      	str	r4, [r2, #28]
   11eda:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11ede:	2304      	movs	r3, #4
   11ee0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11ee4:	4807      	ldr	r0, [pc, #28]	; (11f04 <handle_event+0x5c>)
   11ee6:	f842 3f10 	str.w	r3, [r2, #16]!
   11eea:	f016 f9a0 	bl	2822e <z_log_msg_static_create.constprop.0>
   11eee:	46ad      	mov	sp, r5
}
   11ef0:	46bd      	mov	sp, r7
   11ef2:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   11ef4:	4608      	mov	r0, r1
   11ef6:	6853      	ldr	r3, [r2, #4]
   11ef8:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   11efa:	e7f9      	b.n	11ef0 <handle_event+0x48>
   11efc:	4602      	mov	r2, r0
   11efe:	e7d8      	b.n	11eb2 <handle_event+0xa>
   11f00:	0002fb8d 	.word	0x0002fb8d
   11f04:	0002c80c 	.word	0x0002c80c

00011f08 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   11f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   11f0a:	4855      	ldr	r0, [pc, #340]	; (12060 <rx_work_handler+0x158>)
{
   11f0c:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   11f0e:	f008 fdff 	bl	1ab10 <net_buf_slist_get>
	if (!buf) {
   11f12:	4604      	mov	r4, r0
   11f14:	2800      	cmp	r0, #0
   11f16:	d06a      	beq.n	11fee <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11f18:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   11f1a:	2b01      	cmp	r3, #1
   11f1c:	d069      	beq.n	11ff2 <rx_work_handler+0xea>
   11f1e:	2b03      	cmp	r3, #3
   11f20:	f040 8099 	bne.w	12056 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11f24:	8a03      	ldrh	r3, [r0, #16]
   11f26:	2b03      	cmp	r3, #3
   11f28:	d80c      	bhi.n	11f44 <rx_work_handler+0x3c>
   11f2a:	f240 13ed 	movw	r3, #493	; 0x1ed
   11f2e:	4a4d      	ldr	r2, [pc, #308]	; (12064 <rx_work_handler+0x15c>)
   11f30:	494d      	ldr	r1, [pc, #308]	; (12068 <rx_work_handler+0x160>)
   11f32:	484e      	ldr	r0, [pc, #312]	; (1206c <rx_work_handler+0x164>)
   11f34:	f014 fcf5 	bl	26922 <assert_print>
   11f38:	4040      	eors	r0, r0
   11f3a:	f380 8811 	msr	BASEPRI, r0
   11f3e:	f04f 0003 	mov.w	r0, #3
   11f42:	df02      	svc	2
   11f44:	2104      	movs	r1, #4
   11f46:	f104 000c 	add.w	r0, r4, #12
   11f4a:	f008 ff67 	bl	1ae1c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11f4e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   11f50:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   11f52:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   11f54:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   11f56:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   11f5a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   11f5c:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11f5e:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   11f60:	d010      	beq.n	11f84 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   11f62:	466d      	mov	r5, sp
   11f64:	b088      	sub	sp, #32
   11f66:	466a      	mov	r2, sp
   11f68:	4841      	ldr	r0, [pc, #260]	; (12070 <rx_work_handler+0x168>)
   11f6a:	61d3      	str	r3, [r2, #28]
   11f6c:	2304      	movs	r3, #4
   11f6e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11f72:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11f76:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   11f7a:	483e      	ldr	r0, [pc, #248]	; (12074 <rx_work_handler+0x16c>)
   11f7c:	f016 f957 	bl	2822e <z_log_msg_static_create.constprop.0>
   11f80:	46ad      	mov	sp, r5
   11f82:	e064      	b.n	1204e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   11f84:	f002 fe0e 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   11f88:	4605      	mov	r5, r0
   11f8a:	b960      	cbnz	r0, 11fa6 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   11f8c:	466d      	mov	r5, sp
   11f8e:	b088      	sub	sp, #32
   11f90:	8b63      	ldrh	r3, [r4, #26]
   11f92:	466a      	mov	r2, sp
   11f94:	4938      	ldr	r1, [pc, #224]	; (12078 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   11f96:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   11f9a:	2303      	movs	r3, #3
   11f9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11fa0:	f842 3f10 	str.w	r3, [r2, #16]!
   11fa4:	e7e9      	b.n	11f7a <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   11fa6:	f002 fef9 	bl	14d9c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   11faa:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   11fac:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   11fae:	0b32      	lsrs	r2, r6, #12
   11fb0:	4628      	mov	r0, r5
   11fb2:	f002 fc63 	bl	1487c <bt_conn_recv>
	bt_conn_unref(conn);
   11fb6:	4628      	mov	r0, r5
   11fb8:	f002 fdc4 	bl	14b44 <bt_conn_unref>
	return list->head;
   11fbc:	4b2f      	ldr	r3, [pc, #188]	; (1207c <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   11fbe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   11fc2:	b1a3      	cbz	r3, 11fee <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   11fc4:	492e      	ldr	r1, [pc, #184]	; (12080 <rx_work_handler+0x178>)
   11fc6:	482f      	ldr	r0, [pc, #188]	; (12084 <rx_work_handler+0x17c>)
   11fc8:	f019 fb51 	bl	2b66e <k_work_submit_to_queue>
#endif
		if (err < 0) {
   11fcc:	2800      	cmp	r0, #0
   11fce:	da0e      	bge.n	11fee <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   11fd0:	466c      	mov	r4, sp
   11fd2:	b088      	sub	sp, #32
   11fd4:	466a      	mov	r2, sp
   11fd6:	4b2c      	ldr	r3, [pc, #176]	; (12088 <rx_work_handler+0x180>)
   11fd8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11fdc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11fe0:	2303      	movs	r3, #3
   11fe2:	4824      	ldr	r0, [pc, #144]	; (12074 <rx_work_handler+0x16c>)
   11fe4:	f842 3f10 	str.w	r3, [r2, #16]!
   11fe8:	f016 f921 	bl	2822e <z_log_msg_static_create.constprop.0>
   11fec:	46a5      	mov	sp, r4
		}
	}
}
   11fee:	46bd      	mov	sp, r7
   11ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11ff2:	8a03      	ldrh	r3, [r0, #16]
   11ff4:	2b01      	cmp	r3, #1
   11ff6:	d80c      	bhi.n	12012 <rx_work_handler+0x10a>
   11ff8:	f640 136d 	movw	r3, #2413	; 0x96d
   11ffc:	4a19      	ldr	r2, [pc, #100]	; (12064 <rx_work_handler+0x15c>)
   11ffe:	491a      	ldr	r1, [pc, #104]	; (12068 <rx_work_handler+0x160>)
   12000:	481a      	ldr	r0, [pc, #104]	; (1206c <rx_work_handler+0x164>)
   12002:	f014 fc8e 	bl	26922 <assert_print>
   12006:	4040      	eors	r0, r0
   12008:	f380 8811 	msr	BASEPRI, r0
   1200c:	f04f 0003 	mov.w	r0, #3
   12010:	df02      	svc	2
   12012:	2102      	movs	r1, #2
   12014:	f104 000c 	add.w	r0, r4, #12
   12018:	f008 ff00 	bl	1ae1c <net_buf_simple_pull_mem>
   1201c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1201e:	7800      	ldrb	r0, [r0, #0]
   12020:	f016 f8c3 	bl	281aa <bt_hci_evt_get_flags>
   12024:	0783      	lsls	r3, r0, #30
   12026:	d40c      	bmi.n	12042 <rx_work_handler+0x13a>
   12028:	f640 1371 	movw	r3, #2417	; 0x971
   1202c:	4a0d      	ldr	r2, [pc, #52]	; (12064 <rx_work_handler+0x15c>)
   1202e:	4917      	ldr	r1, [pc, #92]	; (1208c <rx_work_handler+0x184>)
   12030:	480e      	ldr	r0, [pc, #56]	; (1206c <rx_work_handler+0x164>)
   12032:	f014 fc76 	bl	26922 <assert_print>
   12036:	4040      	eors	r0, r0
   12038:	f380 8811 	msr	BASEPRI, r0
   1203c:	f04f 0003 	mov.w	r0, #3
   12040:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12042:	2306      	movs	r3, #6
   12044:	4621      	mov	r1, r4
   12046:	4a12      	ldr	r2, [pc, #72]	; (12090 <rx_work_handler+0x188>)
   12048:	7828      	ldrb	r0, [r5, #0]
   1204a:	f7ff ff2d 	bl	11ea8 <handle_event>
		net_buf_unref(buf);
   1204e:	4620      	mov	r0, r4
   12050:	f008 fde0 	bl	1ac14 <net_buf_unref>
		break;
   12054:	e7b2      	b.n	11fbc <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12056:	466d      	mov	r5, sp
   12058:	b088      	sub	sp, #32
   1205a:	466a      	mov	r2, sp
   1205c:	490d      	ldr	r1, [pc, #52]	; (12094 <rx_work_handler+0x18c>)
   1205e:	e79a      	b.n	11f96 <rx_work_handler+0x8e>
   12060:	2000813c 	.word	0x2000813c
   12064:	0002fbaf 	.word	0x0002fbaf
   12068:	0002fbe3 	.word	0x0002fbe3
   1206c:	0002d881 	.word	0x0002d881
   12070:	0002fbfc 	.word	0x0002fbfc
   12074:	0002c80c 	.word	0x0002c80c
   12078:	0002fc20 	.word	0x0002fc20
   1207c:	20008000 	.word	0x20008000
   12080:	20008650 	.word	0x20008650
   12084:	20009ca8 	.word	0x20009ca8
   12088:	0002fae2 	.word	0x0002fae2
   1208c:	0002fc42 	.word	0x0002fc42
   12090:	0002d1a8 	.word	0x0002d1a8
   12094:	0002fc70 	.word	0x0002fc70

00012098 <hci_le_meta_event>:
{
   12098:	b510      	push	{r4, lr}
   1209a:	2101      	movs	r1, #1
   1209c:	4604      	mov	r4, r0
   1209e:	300c      	adds	r0, #12
   120a0:	f008 febc 	bl	1ae1c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   120a4:	4621      	mov	r1, r4
}
   120a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   120aa:	230a      	movs	r3, #10
   120ac:	4a01      	ldr	r2, [pc, #4]	; (120b4 <hci_le_meta_event+0x1c>)
   120ae:	7800      	ldrb	r0, [r0, #0]
   120b0:	f7ff befa 	b.w	11ea8 <handle_event>
   120b4:	0002d1d8 	.word	0x0002d1d8

000120b8 <le_remote_feat_complete>:
{
   120b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   120ba:	68c5      	ldr	r5, [r0, #12]
{
   120bc:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120be:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   120c2:	4630      	mov	r0, r6
   120c4:	f002 fd6e 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   120c8:	4604      	mov	r4, r0
   120ca:	b980      	cbnz	r0, 120ee <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   120cc:	466c      	mov	r4, sp
   120ce:	b088      	sub	sp, #32
   120d0:	466a      	mov	r2, sp
   120d2:	4b10      	ldr	r3, [pc, #64]	; (12114 <le_remote_feat_complete+0x5c>)
   120d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120d8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   120dc:	2303      	movs	r3, #3
   120de:	480e      	ldr	r0, [pc, #56]	; (12118 <le_remote_feat_complete+0x60>)
   120e0:	f842 3f10 	str.w	r3, [r2, #16]!
   120e4:	f016 f8a3 	bl	2822e <z_log_msg_static_create.constprop.0>
   120e8:	46a5      	mov	sp, r4
}
   120ea:	46bd      	mov	sp, r7
   120ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   120ee:	782b      	ldrb	r3, [r5, #0]
   120f0:	b93b      	cbnz	r3, 12102 <le_remote_feat_complete+0x4a>
   120f2:	f8d5 3003 	ldr.w	r3, [r5, #3]
   120f6:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   120fa:	f8d5 3007 	ldr.w	r3, [r5, #7]
   120fe:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   12106:	1d20      	adds	r0, r4, #4
   12108:	f016 f87a 	bl	28200 <atomic_or>
	bt_conn_unref(conn);
   1210c:	4620      	mov	r0, r4
   1210e:	f002 fd19 	bl	14b44 <bt_conn_unref>
   12112:	e7ea      	b.n	120ea <le_remote_feat_complete+0x32>
   12114:	0002fb43 	.word	0x0002fb43
   12118:	0002c80c 	.word	0x0002c80c

0001211c <hci_cmd_done>:
{
   1211c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12120:	4606      	mov	r6, r0
   12122:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12124:	7a90      	ldrb	r0, [r2, #10]
{
   12126:	4688      	mov	r8, r1
   12128:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1212a:	f008 fb39 	bl	1a7a0 <net_buf_pool_get>
   1212e:	4d41      	ldr	r5, [pc, #260]	; (12234 <hci_cmd_done+0x118>)
   12130:	4285      	cmp	r5, r0
   12132:	d018      	beq.n	12166 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   12134:	7aa4      	ldrb	r4, [r4, #10]
   12136:	46e8      	mov	r8, sp
   12138:	4620      	mov	r0, r4
   1213a:	f008 fb31 	bl	1a7a0 <net_buf_pool_get>
   1213e:	b08a      	sub	sp, #40	; 0x28
   12140:	466a      	mov	r2, sp
   12142:	4b3d      	ldr	r3, [pc, #244]	; (12238 <hci_cmd_done+0x11c>)
   12144:	e9c2 4007 	strd	r4, r0, [r2, #28]
   12148:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1214c:	2306      	movs	r3, #6
   1214e:	6255      	str	r5, [r2, #36]	; 0x24
   12150:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   12154:	4839      	ldr	r0, [pc, #228]	; (1223c <hci_cmd_done+0x120>)
   12156:	f842 3f10 	str.w	r3, [r2, #16]!
   1215a:	f016 f868 	bl	2822e <z_log_msg_static_create.constprop.0>
   1215e:	46c5      	mov	sp, r8
}
   12160:	46bd      	mov	sp, r7
   12162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   12166:	4620      	mov	r0, r4
   12168:	f008 fb22 	bl	1a7b0 <net_buf_id>
   1216c:	f04f 090c 	mov.w	r9, #12
   12170:	4d33      	ldr	r5, [pc, #204]	; (12240 <hci_cmd_done+0x124>)
   12172:	fb09 5000 	mla	r0, r9, r0, r5
   12176:	8843      	ldrh	r3, [r0, #2]
   12178:	42b3      	cmp	r3, r6
   1217a:	d016      	beq.n	121aa <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1217c:	4620      	mov	r0, r4
   1217e:	f008 fb17 	bl	1a7b0 <net_buf_id>
   12182:	fb09 5000 	mla	r0, r9, r0, r5
   12186:	466c      	mov	r4, sp
   12188:	b088      	sub	sp, #32
   1218a:	466a      	mov	r2, sp
   1218c:	8843      	ldrh	r3, [r0, #2]
   1218e:	61d3      	str	r3, [r2, #28]
   12190:	2304      	movs	r3, #4
   12192:	492c      	ldr	r1, [pc, #176]	; (12244 <hci_cmd_done+0x128>)
   12194:	4829      	ldr	r0, [pc, #164]	; (1223c <hci_cmd_done+0x120>)
   12196:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1219a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1219e:	f842 3f10 	str.w	r3, [r2, #16]!
   121a2:	f016 f844 	bl	2822e <z_log_msg_static_create.constprop.0>
   121a6:	46a5      	mov	sp, r4
		return;
   121a8:	e7da      	b.n	12160 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   121aa:	4e27      	ldr	r6, [pc, #156]	; (12248 <hci_cmd_done+0x12c>)
   121ac:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   121b0:	b120      	cbz	r0, 121bc <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   121b2:	f008 fd2f 	bl	1ac14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   121b6:	2300      	movs	r3, #0
   121b8:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   121bc:	4620      	mov	r0, r4
   121be:	f008 faf7 	bl	1a7b0 <net_buf_id>
   121c2:	260c      	movs	r6, #12
   121c4:	fb06 5000 	mla	r0, r6, r0, r5
   121c8:	6843      	ldr	r3, [r0, #4]
   121ca:	b1ab      	cbz	r3, 121f8 <hci_cmd_done+0xdc>
   121cc:	f1b8 0f00 	cmp.w	r8, #0
   121d0:	d112      	bne.n	121f8 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   121d2:	4620      	mov	r0, r4
   121d4:	f008 faec 	bl	1a7b0 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   121d8:	2101      	movs	r1, #1
   121da:	fb06 5000 	mla	r0, r6, r0, r5
   121de:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   121e0:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   121e4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   121e6:	f003 061f 	and.w	r6, r3, #31
   121ea:	40b1      	lsls	r1, r6
	if (val) {
   121ec:	095b      	lsrs	r3, r3, #5
   121ee:	b1da      	cbz	r2, 12228 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   121f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   121f4:	f016 f804 	bl	28200 <atomic_or>
	if (cmd(buf)->sync) {
   121f8:	4620      	mov	r0, r4
   121fa:	f008 fad9 	bl	1a7b0 <net_buf_id>
   121fe:	260c      	movs	r6, #12
   12200:	fb06 5000 	mla	r0, r6, r0, r5
   12204:	6883      	ldr	r3, [r0, #8]
   12206:	2b00      	cmp	r3, #0
   12208:	d0aa      	beq.n	12160 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   1220a:	4620      	mov	r0, r4
   1220c:	f008 fad0 	bl	1a7b0 <net_buf_id>
   12210:	4370      	muls	r0, r6
   12212:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   12216:	4620      	mov	r0, r4
   12218:	f008 faca 	bl	1a7b0 <net_buf_id>
   1221c:	fb06 5500 	mla	r5, r6, r0, r5
   12220:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   12222:	f00f fb55 	bl	218d0 <z_impl_k_sem_give>
}
   12226:	e79b      	b.n	12160 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12228:	43c9      	mvns	r1, r1
   1222a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1222e:	f016 f801 	bl	28234 <atomic_and.isra.0>
   12232:	e7e1      	b.n	121f8 <hci_cmd_done+0xdc>
   12234:	20008ee8 	.word	0x20008ee8
   12238:	0002fc84 	.word	0x0002fc84
   1223c:	0002c80c 	.word	0x0002c80c
   12240:	2002162c 	.word	0x2002162c
   12244:	0002fcb9 	.word	0x0002fcb9
   12248:	20008000 	.word	0x20008000

0001224c <hci_cmd_status>:
{
   1224c:	b538      	push	{r3, r4, r5, lr}
   1224e:	2104      	movs	r1, #4
   12250:	4604      	mov	r4, r0
   12252:	300c      	adds	r0, #12
   12254:	f008 fde2 	bl	1ae1c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12258:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1225a:	7801      	ldrb	r1, [r0, #0]
   1225c:	4622      	mov	r2, r4
   1225e:	8840      	ldrh	r0, [r0, #2]
   12260:	f7ff ff5c 	bl	1211c <hci_cmd_done>
	if (ncmd) {
   12264:	b125      	cbz	r5, 12270 <hci_cmd_status+0x24>
}
   12266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1226a:	4802      	ldr	r0, [pc, #8]	; (12274 <hci_cmd_status+0x28>)
   1226c:	f00f bb30 	b.w	218d0 <z_impl_k_sem_give>
   12270:	bd38      	pop	{r3, r4, r5, pc}
   12272:	bf00      	nop
   12274:	20008120 	.word	0x20008120

00012278 <hci_cmd_complete>:
{
   12278:	b538      	push	{r3, r4, r5, lr}
   1227a:	2103      	movs	r1, #3
   1227c:	4604      	mov	r4, r0
   1227e:	300c      	adds	r0, #12
   12280:	f008 fdcc 	bl	1ae1c <net_buf_simple_pull_mem>
	status = buf->data[0];
   12284:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   12286:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12288:	4622      	mov	r2, r4
   1228a:	7819      	ldrb	r1, [r3, #0]
   1228c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   12290:	f7ff ff44 	bl	1211c <hci_cmd_done>
	if (ncmd) {
   12294:	b125      	cbz	r5, 122a0 <hci_cmd_complete+0x28>
}
   12296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1229a:	4802      	ldr	r0, [pc, #8]	; (122a4 <hci_cmd_complete+0x2c>)
   1229c:	f00f bb18 	b.w	218d0 <z_impl_k_sem_give>
   122a0:	bd38      	pop	{r3, r4, r5, pc}
   122a2:	bf00      	nop
   122a4:	20008120 	.word	0x20008120

000122a8 <hci_num_completed_packets>:
{
   122a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   122ac:	2500      	movs	r5, #0
{
   122ae:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
   122b0:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   122b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   122b6:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 123b4 <hci_num_completed_packets+0x10c>
{
   122ba:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
   122bc:	f898 3000 	ldrb.w	r3, [r8]
   122c0:	429d      	cmp	r5, r3
   122c2:	db03      	blt.n	122cc <hci_num_completed_packets+0x24>
}
   122c4:	371c      	adds	r7, #28
   122c6:	46bd      	mov	sp, r7
   122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   122cc:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   122d0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   122d4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   122d8:	4658      	mov	r0, fp
   122da:	f002 fc63 	bl	14ba4 <bt_conn_lookup_handle>
		if (!conn) {
   122de:	4604      	mov	r4, r0
   122e0:	b1d8      	cbz	r0, 1231a <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   122e2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   122e6:	2e00      	cmp	r6, #0
   122e8:	d039      	beq.n	1235e <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   122ea:	f04f 0320 	mov.w	r3, #32
   122ee:	f3ef 8211 	mrs	r2, BASEPRI
   122f2:	f383 8812 	msr	BASEPRI_MAX, r3
   122f6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   122fa:	69e3      	ldr	r3, [r4, #28]
   122fc:	b1f3      	cbz	r3, 1233c <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   122fe:	3b01      	subs	r3, #1
   12300:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   12302:	f382 8811 	msr	BASEPRI, r2
   12306:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1230a:	4620      	mov	r0, r4
   1230c:	f002 fa3a 	bl	14784 <bt_conn_get_pkts>
   12310:	3e01      	subs	r6, #1
   12312:	f00f fadd 	bl	218d0 <z_impl_k_sem_give>
   12316:	b2b6      	uxth	r6, r6
   12318:	e7e5      	b.n	122e6 <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   1231a:	466c      	mov	r4, sp
   1231c:	b088      	sub	sp, #32
   1231e:	466a      	mov	r2, sp
   12320:	4b25      	ldr	r3, [pc, #148]	; (123b8 <hci_num_completed_packets+0x110>)
   12322:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12326:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   1232a:	2303      	movs	r3, #3
   1232c:	4823      	ldr	r0, [pc, #140]	; (123bc <hci_num_completed_packets+0x114>)
   1232e:	f842 3f10 	str.w	r3, [r2, #16]!
   12332:	f015 ff7c 	bl	2822e <z_log_msg_static_create.constprop.0>
   12336:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   12338:	3501      	adds	r5, #1
   1233a:	e7bf      	b.n	122bc <hci_num_completed_packets+0x14>
   1233c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1233e:	b993      	cbnz	r3, 12366 <hci_num_completed_packets+0xbe>
   12340:	f382 8811 	msr	BASEPRI, r2
   12344:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   12348:	2302      	movs	r3, #2
   1234a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1234e:	481b      	ldr	r0, [pc, #108]	; (123bc <hci_num_completed_packets+0x114>)
   12350:	f8c7 a014 	str.w	sl, [r7, #20]
   12354:	613b      	str	r3, [r7, #16]
   12356:	f107 0210 	add.w	r2, r7, #16
   1235a:	f015 ff68 	bl	2822e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1235e:	4620      	mov	r0, r4
   12360:	f002 fbf0 	bl	14b44 <bt_conn_unref>
   12364:	e7e8      	b.n	12338 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12366:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   12368:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1236a:	428b      	cmp	r3, r1
	list->head = node;
   1236c:	6160      	str	r0, [r4, #20]
	list->tail = node;
   1236e:	bf08      	it	eq
   12370:	61a0      	streq	r0, [r4, #24]
   12372:	f382 8811 	msr	BASEPRI, r2
   12376:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1237a:	f04f 0220 	mov.w	r2, #32
   1237e:	f3ef 8111 	mrs	r1, BASEPRI
   12382:	f382 8812 	msr	BASEPRI_MAX, r2
   12386:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1238a:	68da      	ldr	r2, [r3, #12]
   1238c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   1238e:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   12392:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   12396:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   12398:	b94a      	cbnz	r2, 123ae <hci_num_completed_packets+0x106>
	list->head = node;
   1239a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1239e:	f381 8811 	msr	BASEPRI, r1
   123a2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   123a6:	4658      	mov	r0, fp
   123a8:	f00f fe00 	bl	21fac <k_work_submit>
   123ac:	e7ad      	b.n	1230a <hci_num_completed_packets+0x62>
	parent->next = child;
   123ae:	6013      	str	r3, [r2, #0]
	list->tail = node;
   123b0:	6263      	str	r3, [r4, #36]	; 0x24
}
   123b2:	e7f4      	b.n	1239e <hci_num_completed_packets+0xf6>
   123b4:	0002fd08 	.word	0x0002fd08
   123b8:	0002fcec 	.word	0x0002fcec
   123bc:	0002c80c 	.word	0x0002c80c

000123c0 <le_conn_update_complete>:
{
   123c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   123c2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   123c4:	68c5      	ldr	r5, [r0, #12]
{
   123c6:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   123c8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   123cc:	4630      	mov	r0, r6
   123ce:	f002 fbe9 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   123d2:	4604      	mov	r4, r0
   123d4:	b988      	cbnz	r0, 123fa <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   123d6:	466c      	mov	r4, sp
   123d8:	b088      	sub	sp, #32
   123da:	466a      	mov	r2, sp
   123dc:	4b2b      	ldr	r3, [pc, #172]	; (1248c <le_conn_update_complete+0xcc>)
   123de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   123e2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   123e6:	2303      	movs	r3, #3
   123e8:	4829      	ldr	r0, [pc, #164]	; (12490 <le_conn_update_complete+0xd0>)
   123ea:	f842 3f10 	str.w	r3, [r2, #16]!
   123ee:	f015 ff1e 	bl	2822e <z_log_msg_static_create.constprop.0>
   123f2:	46a5      	mov	sp, r4
}
   123f4:	370c      	adds	r7, #12
   123f6:	46bd      	mov	sp, r7
   123f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   123fa:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   123fc:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   123fe:	2b1a      	cmp	r3, #26
   12400:	d117      	bne.n	12432 <le_conn_update_complete+0x72>
   12402:	78c3      	ldrb	r3, [r0, #3]
   12404:	2b01      	cmp	r3, #1
   12406:	d128      	bne.n	1245a <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12408:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1240c:	4630      	mov	r0, r6
   1240e:	f015 fef7 	bl	28200 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   12412:	0542      	lsls	r2, r0, #21
   12414:	d40d      	bmi.n	12432 <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
   12416:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   1241a:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
   1241c:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   1241e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   12422:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   12424:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   12426:	f003 f9eb 	bl	15800 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   1242a:	4620      	mov	r0, r4
   1242c:	f002 fb8a 	bl	14b44 <bt_conn_unref>
   12430:	e7e0      	b.n	123f4 <le_conn_update_complete+0x34>
		if (!evt->status) {
   12432:	782b      	ldrb	r3, [r5, #0]
   12434:	b98b      	cbnz	r3, 1245a <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   12436:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1243a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   1243e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   12442:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12446:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1244a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1244e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   12452:	4630      	mov	r0, r6
   12454:	f015 feee 	bl	28234 <atomic_and.isra.0>
}
   12458:	e014      	b.n	12484 <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1245a:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   1245e:	05db      	lsls	r3, r3, #23
   12460:	d5f5      	bpl.n	1244e <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   12462:	782b      	ldrb	r3, [r5, #0]
   12464:	2b20      	cmp	r3, #32
   12466:	d1f2      	bne.n	1244e <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
   12468:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1246c:	2b00      	cmp	r3, #0
   1246e:	d0ee      	beq.n	1244e <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
   12470:	3b01      	subs	r3, #1
   12472:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   12476:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1247a:	2300      	movs	r3, #0
   1247c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   12480:	f00f ff4c 	bl	2231c <k_work_schedule>
		notify_le_param_updated(conn);
   12484:	4620      	mov	r0, r4
   12486:	f002 fced 	bl	14e64 <notify_le_param_updated>
   1248a:	e7ce      	b.n	1242a <le_conn_update_complete+0x6a>
   1248c:	0002fb43 	.word	0x0002fb43
   12490:	0002c80c 	.word	0x0002c80c

00012494 <bt_hci_cmd_state_set_init>:
{
   12494:	b510      	push	{r4, lr}
	state->bit = bit;
   12496:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1249a:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   1249e:	460c      	mov	r4, r1
	state->val = val;
   124a0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   124a2:	f008 f985 	bl	1a7b0 <net_buf_id>
   124a6:	220c      	movs	r2, #12
   124a8:	4b02      	ldr	r3, [pc, #8]	; (124b4 <bt_hci_cmd_state_set_init+0x20>)
   124aa:	fb02 3300 	mla	r3, r2, r0, r3
   124ae:	605c      	str	r4, [r3, #4]
}
   124b0:	bd10      	pop	{r4, pc}
   124b2:	bf00      	nop
   124b4:	2002162c 	.word	0x2002162c

000124b8 <bt_hci_cmd_create>:
{
   124b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   124bc:	f04f 32ff 	mov.w	r2, #4294967295
   124c0:	4606      	mov	r6, r0
   124c2:	f04f 33ff 	mov.w	r3, #4294967295
   124c6:	481e      	ldr	r0, [pc, #120]	; (12540 <bt_hci_cmd_create+0x88>)
   124c8:	460f      	mov	r7, r1
   124ca:	f017 fce1 	bl	29e90 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   124ce:	4604      	mov	r4, r0
   124d0:	b958      	cbnz	r0, 124ea <bt_hci_cmd_create+0x32>
   124d2:	491c      	ldr	r1, [pc, #112]	; (12544 <bt_hci_cmd_create+0x8c>)
   124d4:	481c      	ldr	r0, [pc, #112]	; (12548 <bt_hci_cmd_create+0x90>)
   124d6:	f240 1301 	movw	r3, #257	; 0x101
   124da:	4a1c      	ldr	r2, [pc, #112]	; (1254c <bt_hci_cmd_create+0x94>)
   124dc:	f014 fa21 	bl	26922 <assert_print>
   124e0:	f240 1101 	movw	r1, #257	; 0x101
   124e4:	4819      	ldr	r0, [pc, #100]	; (1254c <bt_hci_cmd_create+0x94>)
   124e6:	f014 fa15 	bl	26914 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   124ea:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   124ee:	f100 0a0c 	add.w	sl, r0, #12
   124f2:	2101      	movs	r1, #1
   124f4:	4650      	mov	r0, sl
   124f6:	f008 fa7b 	bl	1a9f0 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   124fa:	4620      	mov	r0, r4
   124fc:	f884 8018 	strb.w	r8, [r4, #24]
   12500:	f008 f956 	bl	1a7b0 <net_buf_id>
   12504:	f04f 090c 	mov.w	r9, #12
   12508:	4d11      	ldr	r5, [pc, #68]	; (12550 <bt_hci_cmd_create+0x98>)
   1250a:	fb09 5000 	mla	r0, r9, r0, r5
   1250e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   12510:	4620      	mov	r0, r4
   12512:	f008 f94d 	bl	1a7b0 <net_buf_id>
   12516:	fb09 5000 	mla	r0, r9, r0, r5
   1251a:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1251e:	4620      	mov	r0, r4
   12520:	f008 f946 	bl	1a7b0 <net_buf_id>
   12524:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12528:	2103      	movs	r1, #3
   1252a:	4650      	mov	r0, sl
   1252c:	f8c5 8004 	str.w	r8, [r5, #4]
   12530:	f008 fc92 	bl	1ae58 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   12534:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   12536:	7087      	strb	r7, [r0, #2]
}
   12538:	4620      	mov	r0, r4
   1253a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1253e:	bf00      	nop
   12540:	20008ee8 	.word	0x20008ee8
   12544:	00031910 	.word	0x00031910
   12548:	0002d881 	.word	0x0002d881
   1254c:	0002fbaf 	.word	0x0002fbaf
   12550:	2002162c 	.word	0x2002162c

00012554 <bt_hci_cmd_send_sync>:
{
   12554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12558:	b087      	sub	sp, #28
   1255a:	4680      	mov	r8, r0
   1255c:	4615      	mov	r5, r2
	if (!buf) {
   1255e:	460c      	mov	r4, r1
{
   12560:	af00      	add	r7, sp, #0
	if (!buf) {
   12562:	b921      	cbnz	r1, 1256e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   12564:	f7ff ffa8 	bl	124b8 <bt_hci_cmd_create>
		if (!buf) {
   12568:	4604      	mov	r4, r0
   1256a:	2800      	cmp	r0, #0
   1256c:	d05a      	beq.n	12624 <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1256e:	2201      	movs	r2, #1
   12570:	2100      	movs	r1, #0
   12572:	4638      	mov	r0, r7
   12574:	f019 f818 	bl	2b5a8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12578:	4620      	mov	r0, r4
   1257a:	f008 f919 	bl	1a7b0 <net_buf_id>
   1257e:	230c      	movs	r3, #12
   12580:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1262c <bt_hci_cmd_send_sync+0xd8>
   12584:	fb03 9000 	mla	r0, r3, r0, r9
   12588:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1258a:	4620      	mov	r0, r4
   1258c:	f008 fb86 	bl	1ac9c <net_buf_ref>
   12590:	4601      	mov	r1, r0
   12592:	4827      	ldr	r0, [pc, #156]	; (12630 <bt_hci_cmd_send_sync+0xdc>)
   12594:	f008 fb18 	bl	1abc8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   12598:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1259c:	2300      	movs	r3, #0
   1259e:	4638      	mov	r0, r7
   125a0:	f00f f9da 	bl	21958 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   125a4:	4606      	mov	r6, r0
   125a6:	b180      	cbz	r0, 125ca <bt_hci_cmd_send_sync+0x76>
   125a8:	f240 1349 	movw	r3, #329	; 0x149
   125ac:	4a21      	ldr	r2, [pc, #132]	; (12634 <bt_hci_cmd_send_sync+0xe0>)
   125ae:	4922      	ldr	r1, [pc, #136]	; (12638 <bt_hci_cmd_send_sync+0xe4>)
   125b0:	4822      	ldr	r0, [pc, #136]	; (1263c <bt_hci_cmd_send_sync+0xe8>)
   125b2:	f014 f9b6 	bl	26922 <assert_print>
   125b6:	4631      	mov	r1, r6
   125b8:	4821      	ldr	r0, [pc, #132]	; (12640 <bt_hci_cmd_send_sync+0xec>)
   125ba:	f014 f9b2 	bl	26922 <assert_print>
   125be:	4040      	eors	r0, r0
   125c0:	f380 8811 	msr	BASEPRI, r0
   125c4:	f04f 0003 	mov.w	r0, #3
   125c8:	df02      	svc	2
	status = cmd(buf)->status;
   125ca:	4620      	mov	r0, r4
   125cc:	f008 f8f0 	bl	1a7b0 <net_buf_id>
   125d0:	230c      	movs	r3, #12
   125d2:	4358      	muls	r0, r3
   125d4:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   125d8:	b1e6      	cbz	r6, 12614 <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   125da:	466d      	mov	r5, sp
   125dc:	b088      	sub	sp, #32
   125de:	466a      	mov	r2, sp
   125e0:	4b18      	ldr	r3, [pc, #96]	; (12644 <bt_hci_cmd_send_sync+0xf0>)
   125e2:	61d6      	str	r6, [r2, #28]
   125e4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   125e8:	2304      	movs	r3, #4
   125ea:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   125ee:	4816      	ldr	r0, [pc, #88]	; (12648 <bt_hci_cmd_send_sync+0xf4>)
   125f0:	f842 3f10 	str.w	r3, [r2, #16]!
   125f4:	f015 fe1b 	bl	2822e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   125f8:	4620      	mov	r0, r4
   125fa:	46ad      	mov	sp, r5
   125fc:	f008 fb0a 	bl	1ac14 <net_buf_unref>
			return -ECONNREFUSED;
   12600:	2e09      	cmp	r6, #9
   12602:	bf14      	ite	ne
   12604:	f06f 0004 	mvnne.w	r0, #4
   12608:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   1260c:	371c      	adds	r7, #28
   1260e:	46bd      	mov	sp, r7
   12610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   12614:	b115      	cbz	r5, 1261c <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   12616:	602c      	str	r4, [r5, #0]
	return 0;
   12618:	2000      	movs	r0, #0
   1261a:	e7f7      	b.n	1260c <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   1261c:	4620      	mov	r0, r4
   1261e:	f008 faf9 	bl	1ac14 <net_buf_unref>
   12622:	e7f9      	b.n	12618 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   12624:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12628:	e7f0      	b.n	1260c <bt_hci_cmd_send_sync+0xb8>
   1262a:	bf00      	nop
   1262c:	2002162c 	.word	0x2002162c
   12630:	20008144 	.word	0x20008144
   12634:	0002fbaf 	.word	0x0002fbaf
   12638:	0002e79f 	.word	0x0002e79f
   1263c:	0002d881 	.word	0x0002d881
   12640:	0002fd1f 	.word	0x0002fd1f
   12644:	0002fd3f 	.word	0x0002fd3f
   12648:	0002c80c 	.word	0x0002c80c

0001264c <hci_le_read_max_data_len>:
{
   1264c:	b570      	push	{r4, r5, r6, lr}
   1264e:	b088      	sub	sp, #32
   12650:	4606      	mov	r6, r0
   12652:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   12654:	f242 002f 	movw	r0, #8239	; 0x202f
   12658:	2100      	movs	r1, #0
   1265a:	aa01      	add	r2, sp, #4
   1265c:	f7ff ff7a 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   12660:	4604      	mov	r4, r0
   12662:	b160      	cbz	r0, 1267e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   12664:	4b0b      	ldr	r3, [pc, #44]	; (12694 <hci_le_read_max_data_len+0x48>)
   12666:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1266a:	9307      	str	r3, [sp, #28]
   1266c:	2302      	movs	r3, #2
   1266e:	480a      	ldr	r0, [pc, #40]	; (12698 <hci_le_read_max_data_len+0x4c>)
   12670:	aa06      	add	r2, sp, #24
   12672:	9306      	str	r3, [sp, #24]
   12674:	f015 fddb 	bl	2822e <z_log_msg_static_create.constprop.0>
}
   12678:	4620      	mov	r0, r4
   1267a:	b008      	add	sp, #32
   1267c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1267e:	9801      	ldr	r0, [sp, #4]
   12680:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   12682:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12686:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   12688:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1268c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1268e:	f008 fac1 	bl	1ac14 <net_buf_unref>
	return 0;
   12692:	e7f1      	b.n	12678 <hci_le_read_max_data_len+0x2c>
   12694:	0002fd5b 	.word	0x0002fd5b
   12698:	0002c80c 	.word	0x0002c80c

0001269c <bt_hci_le_rand>:
{
   1269c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1269e:	4b14      	ldr	r3, [pc, #80]	; (126f0 <bt_hci_le_rand+0x54>)
{
   126a0:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   126a2:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   126a6:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   126a8:	2b00      	cmp	r3, #0
   126aa:	da1d      	bge.n	126e8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   126ac:	b914      	cbnz	r4, 126b4 <bt_hci_le_rand+0x18>
	return 0;
   126ae:	4620      	mov	r0, r4
}
   126b0:	b003      	add	sp, #12
   126b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   126b4:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   126b6:	f04f 0100 	mov.w	r1, #0
   126ba:	f242 0018 	movw	r0, #8216	; 0x2018
   126be:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   126c0:	4626      	mov	r6, r4
   126c2:	bf28      	it	cs
   126c4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   126c6:	f7ff ff45 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
   126ca:	2800      	cmp	r0, #0
   126cc:	d1f0      	bne.n	126b0 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   126ce:	9f01      	ldr	r7, [sp, #4]
   126d0:	4632      	mov	r2, r6
   126d2:	68f9      	ldr	r1, [r7, #12]
   126d4:	4628      	mov	r0, r5
   126d6:	3101      	adds	r1, #1
   126d8:	f019 f928 	bl	2b92c <memcpy>
		net_buf_unref(rsp);
   126dc:	4638      	mov	r0, r7
   126de:	f008 fa99 	bl	1ac14 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   126e2:	4435      	add	r5, r6
		len -= count;
   126e4:	1ba4      	subs	r4, r4, r6
   126e6:	e7e1      	b.n	126ac <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   126e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   126ec:	e7e0      	b.n	126b0 <bt_hci_le_rand+0x14>
   126ee:	bf00      	nop
   126f0:	20008000 	.word	0x20008000

000126f4 <bt_hci_le_enh_conn_complete>:
{
   126f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126f8:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   126fa:	f8b0 9001 	ldrh.w	r9, [r0, #1]
   126fe:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   12700:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   12704:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   12708:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   1270a:	4aa9      	ldr	r2, [pc, #676]	; (129b0 <bt_hci_le_enh_conn_complete+0x2bc>)
   1270c:	b29b      	uxth	r3, r3
   1270e:	8811      	ldrh	r1, [r2, #0]
{
   12710:	af02      	add	r7, sp, #8
		if (disconnected_handles[i] == handle) {
   12712:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   12714:	bf04      	itt	eq
   12716:	8016      	strheq	r6, [r2, #0]
			return true;
   12718:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   1271a:	f000 ff99 	bl	13650 <bt_id_pending_keys_update>
	if (evt->status) {
   1271e:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12720:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   12724:	b3a4      	cbz	r4, 12790 <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12726:	2c3c      	cmp	r4, #60	; 0x3c
   12728:	d122      	bne.n	12770 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1272a:	f001 fafb 	bl	13d24 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1272e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12732:	3010      	adds	r0, #16
   12734:	f015 fd7e 	bl	28234 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12738:	2000      	movs	r0, #0
   1273a:	f7ff faa1 	bl	11c80 <find_pending_connect.part.0>
		if (!conn) {
   1273e:	4605      	mov	r5, r0
   12740:	b970      	cbnz	r0, 12760 <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   12742:	4b9c      	ldr	r3, [pc, #624]	; (129b4 <bt_hci_le_enh_conn_complete+0x2c0>)
   12744:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12748:	627b      	str	r3, [r7, #36]	; 0x24
   1274a:	2302      	movs	r3, #2
   1274c:	489a      	ldr	r0, [pc, #616]	; (129b8 <bt_hci_le_enh_conn_complete+0x2c4>)
   1274e:	623b      	str	r3, [r7, #32]
   12750:	f107 0220 	add.w	r2, r7, #32
   12754:	f015 fd6b 	bl	2822e <z_log_msg_static_create.constprop.0>
}
   12758:	372c      	adds	r7, #44	; 0x2c
   1275a:	46bd      	mov	sp, r7
   1275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12760:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12762:	2100      	movs	r1, #0
   12764:	f002 fa26 	bl	14bb4 <bt_conn_set_state>
		bt_conn_unref(conn);
   12768:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   1276a:	f002 f9eb 	bl	14b44 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1276e:	e7f3      	b.n	12758 <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   12770:	466d      	mov	r5, sp
   12772:	b088      	sub	sp, #32
   12774:	aa02      	add	r2, sp, #8
   12776:	4b91      	ldr	r3, [pc, #580]	; (129bc <bt_hci_le_enh_conn_complete+0x2c8>)
   12778:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1277c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12780:	2303      	movs	r3, #3
   12782:	488d      	ldr	r0, [pc, #564]	; (129b8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12784:	f842 3f10 	str.w	r3, [r2, #16]!
   12788:	f015 fd51 	bl	2822e <z_log_msg_static_create.constprop.0>
   1278c:	46ad      	mov	sp, r5
		return;
   1278e:	e7e3      	b.n	12758 <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12790:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12792:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12796:	3b02      	subs	r3, #2
   12798:	2b01      	cmp	r3, #1
   1279a:	d82c      	bhi.n	127f6 <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1279c:	4651      	mov	r1, sl
   1279e:	f107 0010 	add.w	r0, r7, #16
   127a2:	f015 fd3d 	bl	28220 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   127a6:	7c3b      	ldrb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   127a8:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   127ac:	3b02      	subs	r3, #2
   127ae:	743b      	strb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   127b0:	f107 0009 	add.w	r0, r7, #9
   127b4:	f015 fd2f 	bl	28216 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   127b8:	2301      	movs	r3, #1
   127ba:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   127bc:	78eb      	ldrb	r3, [r5, #3]
   127be:	2b01      	cmp	r3, #1
   127c0:	d02e      	beq.n	12820 <bt_hci_le_enh_conn_complete+0x12c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   127c2:	4650      	mov	r0, sl
   127c4:	f7fe fff2 	bl	117ac <bt_addr_le_str>
   127c8:	466c      	mov	r4, sp
   127ca:	b088      	sub	sp, #32
   127cc:	aa02      	add	r2, sp, #8
   127ce:	4b7c      	ldr	r3, [pc, #496]	; (129c0 <bt_hci_le_enh_conn_complete+0x2cc>)
   127d0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   127d4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   127d8:	f44f 7300 	mov.w	r3, #512	; 0x200
   127dc:	8393      	strh	r3, [r2, #28]
   127de:	4b79      	ldr	r3, [pc, #484]	; (129c4 <bt_hci_le_enh_conn_complete+0x2d0>)
   127e0:	4875      	ldr	r0, [pc, #468]	; (129b8 <bt_hci_le_enh_conn_complete+0x2c4>)
   127e2:	f842 3f10 	str.w	r3, [r2, #16]!
   127e6:	f015 fd22 	bl	2822e <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   127ea:	211f      	movs	r1, #31
   127ec:	46a5      	mov	sp, r4
   127ee:	4640      	mov	r0, r8
   127f0:	f015 fd38 	bl	28264 <bt_hci_disconnect>
		return;
   127f4:	e7b0      	b.n	12758 <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   127f6:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   127f8:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   127fa:	2b01      	cmp	r3, #1
   127fc:	bf04      	itt	eq
   127fe:	4b72      	ldreq	r3, [pc, #456]	; (129c8 <bt_hci_le_enh_conn_complete+0x2d4>)
   12800:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12804:	4620      	mov	r0, r4
   12806:	f015 fe72 	bl	284ee <bt_lookup_id_addr>
   1280a:	4601      	mov	r1, r0
   1280c:	f107 0010 	add.w	r0, r7, #16
   12810:	f015 fd06 	bl	28220 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12814:	4651      	mov	r1, sl
   12816:	f107 0008 	add.w	r0, r7, #8
   1281a:	f015 fd01 	bl	28220 <bt_addr_le_copy>
   1281e:	e7cd      	b.n	127bc <bt_hci_le_enh_conn_complete+0xc8>
   12820:	f107 0010 	add.w	r0, r7, #16
   12824:	f7ff fa2c 	bl	11c80 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12828:	78eb      	ldrb	r3, [r5, #3]
   1282a:	4604      	mov	r4, r0
   1282c:	2b01      	cmp	r3, #1
   1282e:	d10a      	bne.n	12846 <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12830:	f001 fa78 	bl	13d24 <bt_le_adv_lookup_legacy>
   12834:	4683      	mov	fp, r0
   12836:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1283a:	3010      	adds	r0, #16
   1283c:	f015 fcfa 	bl	28234 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   12840:	4658      	mov	r0, fp
   12842:	f015 ff75 	bl	28730 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   12846:	2c00      	cmp	r4, #0
   12848:	d0bb      	beq.n	127c2 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   1284a:	4620      	mov	r0, r4
	conn->err = 0U;
   1284c:	2200      	movs	r2, #0
	conn->handle = handle;
   1284e:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12852:	f107 0110 	add.w	r1, r7, #16
   12856:	f015 fce3 	bl	28220 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1285a:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1285e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12862:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   12866:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1286a:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1286e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12872:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   12874:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12876:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   12878:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1287a:	d116      	bne.n	128aa <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   1287c:	f107 0108 	add.w	r1, r7, #8
   12880:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12884:	f015 fccc 	bl	28220 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12888:	f001 fa4c 	bl	13d24 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1288c:	7a21      	ldrb	r1, [r4, #8]
   1288e:	4a4e      	ldr	r2, [pc, #312]	; (129c8 <bt_hci_le_enh_conn_complete+0x2d4>)
   12890:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   12894:	4411      	add	r1, r2
   12896:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   1289a:	f015 fcc1 	bl	28220 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1289e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   128a2:	065d      	lsls	r5, r3, #25
   128a4:	d501      	bpl.n	128aa <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   128a6:	f001 fc03 	bl	140b0 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   128aa:	2107      	movs	r1, #7
   128ac:	4620      	mov	r0, r4
   128ae:	f002 f981 	bl	14bb4 <bt_conn_set_state>
	if (is_disconnected) {
   128b2:	b11e      	cbz	r6, 128bc <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   128b4:	2101      	movs	r1, #1
   128b6:	4620      	mov	r0, r4
   128b8:	f002 f97c 	bl	14bb4 <bt_conn_set_state>
	bt_conn_connected(conn);
   128bc:	4620      	mov	r0, r4
   128be:	f015 ffbd 	bl	2883c <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   128c2:	7b63      	ldrb	r3, [r4, #13]
   128c4:	2b07      	cmp	r3, #7
   128c6:	d16e      	bne.n	129a6 <bt_hci_le_enh_conn_complete+0x2b2>
   128c8:	1d23      	adds	r3, r4, #4
   128ca:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   128ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   128d2:	4d3d      	ldr	r5, [pc, #244]	; (129c8 <bt_hci_le_enh_conn_complete+0x2d4>)
   128d4:	d129      	bne.n	1292a <bt_hci_le_enh_conn_complete+0x236>
   128d6:	78e3      	ldrb	r3, [r4, #3]
   128d8:	b11b      	cbz	r3, 128e2 <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   128da:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   128de:	0718      	lsls	r0, r3, #28
   128e0:	d523      	bpl.n	1292a <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   128e2:	2102      	movs	r1, #2
   128e4:	f242 0016 	movw	r0, #8214	; 0x2016
   128e8:	f7ff fde6 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   128ec:	4606      	mov	r6, r0
   128ee:	2800      	cmp	r0, #0
   128f0:	d05b      	beq.n	129aa <bt_hci_le_enh_conn_complete+0x2b6>
   128f2:	2102      	movs	r1, #2
   128f4:	300c      	adds	r0, #12
   128f6:	f008 faaf 	bl	1ae58 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   128fa:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   128fc:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   128fe:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12900:	4631      	mov	r1, r6
   12902:	f242 0016 	movw	r0, #8214	; 0x2016
   12906:	f7ff fe25 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
   1290a:	b170      	cbz	r0, 1292a <bt_hci_le_enh_conn_complete+0x236>
			LOG_ERR("Failed read remote features (%d)", err);
   1290c:	466e      	mov	r6, sp
   1290e:	b088      	sub	sp, #32
   12910:	aa02      	add	r2, sp, #8
   12912:	4b2e      	ldr	r3, [pc, #184]	; (129cc <bt_hci_le_enh_conn_complete+0x2d8>)
   12914:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12918:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1291c:	2303      	movs	r3, #3
   1291e:	4826      	ldr	r0, [pc, #152]	; (129b8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12920:	f842 3f10 	str.w	r3, [r2, #16]!
   12924:	f015 fc83 	bl	2822e <z_log_msg_static_create.constprop.0>
   12928:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1292a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   1292e:	07d9      	lsls	r1, r3, #31
   12930:	d516      	bpl.n	12960 <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12932:	2100      	movs	r1, #0
   12934:	2302      	movs	r3, #2
   12936:	4620      	mov	r0, r4
   12938:	461a      	mov	r2, r3
   1293a:	9100      	str	r1, [sp, #0]
   1293c:	f015 fccb 	bl	282d6 <bt_le_set_phy>
		if (err) {
   12940:	b170      	cbz	r0, 12960 <bt_hci_le_enh_conn_complete+0x26c>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   12942:	466e      	mov	r6, sp
   12944:	b088      	sub	sp, #32
   12946:	aa02      	add	r2, sp, #8
   12948:	4b21      	ldr	r3, [pc, #132]	; (129d0 <bt_hci_le_enh_conn_complete+0x2dc>)
   1294a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1294e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12952:	2303      	movs	r3, #3
   12954:	4818      	ldr	r0, [pc, #96]	; (129b8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12956:	f842 3f10 	str.w	r3, [r2, #16]!
   1295a:	f015 fc68 	bl	2822e <z_log_msg_static_create.constprop.0>
   1295e:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12960:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12964:	069a      	lsls	r2, r3, #26
   12966:	d51e      	bpl.n	129a6 <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12968:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   1296c:	689b      	ldr	r3, [r3, #8]
   1296e:	079b      	lsls	r3, r3, #30
   12970:	d519      	bpl.n	129a6 <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12972:	1db9      	adds	r1, r7, #6
   12974:	1d38      	adds	r0, r7, #4
   12976:	f7ff fe69 	bl	1264c <hci_le_read_max_data_len>
			if (!err) {
   1297a:	b9a0      	cbnz	r0, 129a6 <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
   1297c:	4620      	mov	r0, r4
   1297e:	88fa      	ldrh	r2, [r7, #6]
   12980:	88b9      	ldrh	r1, [r7, #4]
   12982:	f015 fc8a 	bl	2829a <bt_le_set_data_len>
				if (err) {
   12986:	b170      	cbz	r0, 129a6 <bt_hci_le_enh_conn_complete+0x2b2>
					LOG_ERR("Failed to set data len (%d)", err);
   12988:	466d      	mov	r5, sp
   1298a:	b088      	sub	sp, #32
   1298c:	aa02      	add	r2, sp, #8
   1298e:	4b11      	ldr	r3, [pc, #68]	; (129d4 <bt_hci_le_enh_conn_complete+0x2e0>)
   12990:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12994:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12998:	2303      	movs	r3, #3
   1299a:	4807      	ldr	r0, [pc, #28]	; (129b8 <bt_hci_le_enh_conn_complete+0x2c4>)
   1299c:	f842 3f10 	str.w	r3, [r2, #16]!
   129a0:	f015 fc45 	bl	2822e <z_log_msg_static_create.constprop.0>
   129a4:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   129a6:	4620      	mov	r0, r4
   129a8:	e6df      	b.n	1276a <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   129aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   129ae:	e7ad      	b.n	1290c <bt_hci_le_enh_conn_complete+0x218>
   129b0:	20021be2 	.word	0x20021be2
   129b4:	0002fd7b 	.word	0x0002fd7b
   129b8:	0002c80c 	.word	0x0002c80c
   129bc:	0002fd9c 	.word	0x0002fd9c
   129c0:	0002fdb5 	.word	0x0002fdb5
   129c4:	01000003 	.word	0x01000003
   129c8:	20008000 	.word	0x20008000
   129cc:	0002fdd1 	.word	0x0002fdd1
   129d0:	0002fdf2 	.word	0x0002fdf2
   129d4:	0002fe09 	.word	0x0002fe09

000129d8 <le_legacy_conn_complete>:
{
   129d8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   129da:	68c1      	ldr	r1, [r0, #12]
{
   129dc:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   129de:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   129e0:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   129e2:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   129e6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   129ea:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   129ec:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   129f0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   129f4:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   129f8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   129fc:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   12a00:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12a04:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   12a08:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12a0c:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   12a10:	7b4b      	ldrb	r3, [r1, #13]
   12a12:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12a16:	f015 fc03 	bl	28220 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   12a1a:	4907      	ldr	r1, [pc, #28]	; (12a38 <le_legacy_conn_complete+0x60>)
   12a1c:	f10d 000b 	add.w	r0, sp, #11
   12a20:	f015 fbf9 	bl	28216 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12a24:	f10d 0011 	add.w	r0, sp, #17
   12a28:	f015 fbf5 	bl	28216 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   12a2c:	4668      	mov	r0, sp
   12a2e:	f7ff fe61 	bl	126f4 <bt_hci_le_enh_conn_complete>
}
   12a32:	b009      	add	sp, #36	; 0x24
   12a34:	f85d fb04 	ldr.w	pc, [sp], #4
   12a38:	0002f8a2 	.word	0x0002f8a2

00012a3c <bt_security_err_get>:
	switch (hci_err) {
   12a3c:	2829      	cmp	r0, #41	; 0x29
   12a3e:	bf9a      	itte	ls
   12a40:	4b01      	ldrls	r3, [pc, #4]	; (12a48 <bt_security_err_get+0xc>)
   12a42:	5c18      	ldrbls	r0, [r3, r0]
{
   12a44:	2009      	movhi	r0, #9
}
   12a46:	4770      	bx	lr
   12a48:	000300be 	.word	0x000300be

00012a4c <hci_encrypt_key_refresh_complete>:
{
   12a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a4e:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   12a50:	68c3      	ldr	r3, [r0, #12]
{
   12a52:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   12a54:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   12a58:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12a5a:	4630      	mov	r0, r6
   12a5c:	f002 f8a2 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   12a60:	4604      	mov	r4, r0
   12a62:	b988      	cbnz	r0, 12a88 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12a64:	466c      	mov	r4, sp
   12a66:	b088      	sub	sp, #32
   12a68:	466a      	mov	r2, sp
   12a6a:	4b1f      	ldr	r3, [pc, #124]	; (12ae8 <hci_encrypt_key_refresh_complete+0x9c>)
   12a6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12a70:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12a74:	2303      	movs	r3, #3
   12a76:	481d      	ldr	r0, [pc, #116]	; (12aec <hci_encrypt_key_refresh_complete+0xa0>)
   12a78:	f842 3f10 	str.w	r3, [r2, #16]!
   12a7c:	f015 fbd7 	bl	2822e <z_log_msg_static_create.constprop.0>
   12a80:	46a5      	mov	sp, r4
}
   12a82:	371c      	adds	r7, #28
   12a84:	46bd      	mov	sp, r7
   12a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12a88:	b15d      	cbz	r5, 12aa2 <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12a8a:	4628      	mov	r0, r5
   12a8c:	f7ff ffd6 	bl	12a3c <bt_security_err_get>
   12a90:	4629      	mov	r1, r5
   12a92:	4602      	mov	r2, r0
   12a94:	4620      	mov	r0, r4
   12a96:	f002 fad5 	bl	15044 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12a9a:	4620      	mov	r0, r4
   12a9c:	f002 f852 	bl	14b44 <bt_conn_unref>
   12aa0:	e7ef      	b.n	12a82 <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   12aa2:	7883      	ldrb	r3, [r0, #2]
   12aa4:	2b01      	cmp	r3, #1
   12aa6:	d1f0      	bne.n	12a8a <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   12aa8:	f007 fa32 	bl	19f10 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12aac:	4620      	mov	r0, r4
   12aae:	f015 fb8e 	bl	281ce <update_sec_level>
   12ab2:	2800      	cmp	r0, #0
   12ab4:	d1e9      	bne.n	12a8a <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12ab6:	2005      	movs	r0, #5
   12ab8:	f7ff ffc0 	bl	12a3c <bt_security_err_get>
   12abc:	2105      	movs	r1, #5
   12abe:	4602      	mov	r2, r0
   12ac0:	4620      	mov	r0, r4
   12ac2:	f002 fabf 	bl	15044 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12ac6:	4b0a      	ldr	r3, [pc, #40]	; (12af0 <hci_encrypt_key_refresh_complete+0xa4>)
   12ac8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12acc:	617b      	str	r3, [r7, #20]
   12ace:	2302      	movs	r3, #2
   12ad0:	4806      	ldr	r0, [pc, #24]	; (12aec <hci_encrypt_key_refresh_complete+0xa0>)
   12ad2:	613b      	str	r3, [r7, #16]
   12ad4:	f107 0210 	add.w	r2, r7, #16
   12ad8:	f015 fba9 	bl	2822e <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12adc:	2105      	movs	r1, #5
   12ade:	4620      	mov	r0, r4
   12ae0:	f015 feb5 	bl	2884e <bt_conn_disconnect>
   12ae4:	e7d9      	b.n	12a9a <hci_encrypt_key_refresh_complete+0x4e>
   12ae6:	bf00      	nop
   12ae8:	0002fb67 	.word	0x0002fb67
   12aec:	0002c80c 	.word	0x0002c80c
   12af0:	0002fe25 	.word	0x0002fe25

00012af4 <hci_encrypt_change>:
{
   12af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12af8:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   12afa:	68c6      	ldr	r6, [r0, #12]
{
   12afc:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12afe:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   12b02:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   12b04:	4640      	mov	r0, r8
   12b06:	f002 f84d 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   12b0a:	4604      	mov	r4, r0
   12b0c:	b990      	cbnz	r0, 12b34 <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12b0e:	466c      	mov	r4, sp
   12b10:	b088      	sub	sp, #32
   12b12:	466a      	mov	r2, sp
   12b14:	4b23      	ldr	r3, [pc, #140]	; (12ba4 <hci_encrypt_change+0xb0>)
   12b16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12b1a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   12b1e:	2303      	movs	r3, #3
   12b20:	4821      	ldr	r0, [pc, #132]	; (12ba8 <hci_encrypt_change+0xb4>)
   12b22:	f842 3f10 	str.w	r3, [r2, #16]!
   12b26:	f015 fb82 	bl	2822e <z_log_msg_static_create.constprop.0>
   12b2a:	46a5      	mov	sp, r4
}
   12b2c:	3718      	adds	r7, #24
   12b2e:	46bd      	mov	sp, r7
   12b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   12b34:	b15d      	cbz	r5, 12b4e <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   12b36:	4628      	mov	r0, r5
   12b38:	f7ff ff80 	bl	12a3c <bt_security_err_get>
   12b3c:	4629      	mov	r1, r5
   12b3e:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12b40:	4620      	mov	r0, r4
   12b42:	f002 fa7f 	bl	15044 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12b46:	4620      	mov	r0, r4
   12b48:	f001 fffc 	bl	14b44 <bt_conn_unref>
   12b4c:	e7ee      	b.n	12b2c <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   12b4e:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   12b50:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   12b52:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   12b54:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   12b56:	d005      	beq.n	12b64 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12b58:	2000      	movs	r0, #0
   12b5a:	f7ff ff6f 	bl	12a3c <bt_security_err_get>
   12b5e:	2100      	movs	r1, #0
   12b60:	4602      	mov	r2, r0
   12b62:	e7ed      	b.n	12b40 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   12b64:	b10b      	cbz	r3, 12b6a <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   12b66:	f007 f9d3 	bl	19f10 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12b6a:	4620      	mov	r0, r4
   12b6c:	f015 fb2f 	bl	281ce <update_sec_level>
   12b70:	2800      	cmp	r0, #0
   12b72:	d1f1      	bne.n	12b58 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12b74:	2005      	movs	r0, #5
   12b76:	f7ff ff61 	bl	12a3c <bt_security_err_get>
   12b7a:	2105      	movs	r1, #5
   12b7c:	4602      	mov	r2, r0
   12b7e:	4620      	mov	r0, r4
   12b80:	f002 fa60 	bl	15044 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12b84:	4b09      	ldr	r3, [pc, #36]	; (12bac <hci_encrypt_change+0xb8>)
   12b86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12b8a:	617b      	str	r3, [r7, #20]
   12b8c:	2302      	movs	r3, #2
   12b8e:	4806      	ldr	r0, [pc, #24]	; (12ba8 <hci_encrypt_change+0xb4>)
   12b90:	613b      	str	r3, [r7, #16]
   12b92:	f107 0210 	add.w	r2, r7, #16
   12b96:	f015 fb4a 	bl	2822e <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12b9a:	2105      	movs	r1, #5
   12b9c:	4620      	mov	r0, r4
   12b9e:	f015 fe56 	bl	2884e <bt_conn_disconnect>
   12ba2:	e7d0      	b.n	12b46 <hci_encrypt_change+0x52>
   12ba4:	0002fb67 	.word	0x0002fb67
   12ba8:	0002c80c 	.word	0x0002c80c
   12bac:	0002fe25 	.word	0x0002fe25

00012bb0 <bt_send>:
	return bt_dev.drv->send(buf);
   12bb0:	4b02      	ldr	r3, [pc, #8]	; (12bbc <bt_send+0xc>)
   12bb2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   12bb6:	695b      	ldr	r3, [r3, #20]
   12bb8:	4718      	bx	r3
   12bba:	bf00      	nop
   12bbc:	20008000 	.word	0x20008000

00012bc0 <bt_hci_cmd_send>:
{
   12bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bc2:	4605      	mov	r5, r0
	if (!buf) {
   12bc4:	460c      	mov	r4, r1
{
   12bc6:	af00      	add	r7, sp, #0
	if (!buf) {
   12bc8:	b919      	cbnz	r1, 12bd2 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   12bca:	f7ff fc75 	bl	124b8 <bt_hci_cmd_create>
		if (!buf) {
   12bce:	4604      	mov	r4, r0
   12bd0:	b318      	cbz	r0, 12c1a <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12bd2:	f640 4335 	movw	r3, #3125	; 0xc35
   12bd6:	429d      	cmp	r5, r3
   12bd8:	d119      	bne.n	12c0e <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   12bda:	4620      	mov	r0, r4
   12bdc:	f7ff ffe8 	bl	12bb0 <bt_send>
		if (err) {
   12be0:	4605      	mov	r5, r0
   12be2:	b188      	cbz	r0, 12c08 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   12be4:	466e      	mov	r6, sp
   12be6:	b088      	sub	sp, #32
   12be8:	466a      	mov	r2, sp
   12bea:	4b0d      	ldr	r3, [pc, #52]	; (12c20 <bt_hci_cmd_send+0x60>)
   12bec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12bf0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12bf4:	2303      	movs	r3, #3
   12bf6:	480b      	ldr	r0, [pc, #44]	; (12c24 <bt_hci_cmd_send+0x64>)
   12bf8:	f842 3f10 	str.w	r3, [r2, #16]!
   12bfc:	f015 fb17 	bl	2822e <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   12c00:	4620      	mov	r0, r4
   12c02:	46b5      	mov	sp, r6
   12c04:	f008 f806 	bl	1ac14 <net_buf_unref>
}
   12c08:	4628      	mov	r0, r5
   12c0a:	46bd      	mov	sp, r7
   12c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12c0e:	4621      	mov	r1, r4
   12c10:	4805      	ldr	r0, [pc, #20]	; (12c28 <bt_hci_cmd_send+0x68>)
   12c12:	f007 ffd9 	bl	1abc8 <net_buf_put>
	return 0;
   12c16:	2500      	movs	r5, #0
   12c18:	e7f6      	b.n	12c08 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   12c1a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12c1e:	e7f3      	b.n	12c08 <bt_hci_cmd_send+0x48>
   12c20:	0002fe4b 	.word	0x0002fe4b
   12c24:	0002c80c 	.word	0x0002c80c
   12c28:	20008144 	.word	0x20008144

00012c2c <bt_hci_host_num_completed_packets>:
{
   12c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c30:	b086      	sub	sp, #24
   12c32:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   12c34:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   12c36:	7e46      	ldrb	r6, [r0, #25]
{
   12c38:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12c3a:	7a80      	ldrb	r0, [r0, #10]
   12c3c:	f007 fdb0 	bl	1a7a0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   12c40:	4621      	mov	r1, r4
   12c42:	f018 fca7 	bl	2b594 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   12c46:	4b2d      	ldr	r3, [pc, #180]	; (12cfc <bt_hci_host_num_completed_packets+0xd0>)
   12c48:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   12c4c:	069b      	lsls	r3, r3, #26
   12c4e:	d513      	bpl.n	12c78 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
   12c50:	4630      	mov	r0, r6
   12c52:	f002 fc63 	bl	1551c <bt_conn_lookup_index>
	if (!conn) {
   12c56:	4604      	mov	r4, r0
   12c58:	b990      	cbnz	r0, 12c80 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   12c5a:	466c      	mov	r4, sp
   12c5c:	b088      	sub	sp, #32
   12c5e:	466a      	mov	r2, sp
   12c60:	4b27      	ldr	r3, [pc, #156]	; (12d00 <bt_hci_host_num_completed_packets+0xd4>)
   12c62:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12c66:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12c6a:	2303      	movs	r3, #3
   12c6c:	4825      	ldr	r0, [pc, #148]	; (12d04 <bt_hci_host_num_completed_packets+0xd8>)
   12c6e:	f842 3f10 	str.w	r3, [r2, #16]!
   12c72:	f015 fadc 	bl	2822e <z_log_msg_static_create.constprop.0>
   12c76:	46a5      	mov	sp, r4
}
   12c78:	3718      	adds	r7, #24
   12c7a:	46bd      	mov	sp, r7
   12c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   12c80:	7b43      	ldrb	r3, [r0, #13]
   12c82:	3b07      	subs	r3, #7
   12c84:	2b01      	cmp	r3, #1
   12c86:	d90e      	bls.n	12ca6 <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
   12c88:	4b1f      	ldr	r3, [pc, #124]	; (12d08 <bt_hci_host_num_completed_packets+0xdc>)
   12c8a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12c8e:	617b      	str	r3, [r7, #20]
   12c90:	2302      	movs	r3, #2
   12c92:	481c      	ldr	r0, [pc, #112]	; (12d04 <bt_hci_host_num_completed_packets+0xd8>)
   12c94:	613b      	str	r3, [r7, #16]
   12c96:	f107 0210 	add.w	r2, r7, #16
   12c9a:	f015 fac8 	bl	2822e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   12c9e:	4620      	mov	r0, r4
   12ca0:	f001 ff50 	bl	14b44 <bt_conn_unref>
		return;
   12ca4:	e7e8      	b.n	12c78 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
   12ca6:	f001 ff4d 	bl	14b44 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   12caa:	2105      	movs	r1, #5
   12cac:	f640 4035 	movw	r0, #3125	; 0xc35
   12cb0:	f7ff fc02 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   12cb4:	4604      	mov	r4, r0
   12cb6:	b958      	cbnz	r0, 12cd0 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
   12cb8:	4b14      	ldr	r3, [pc, #80]	; (12d0c <bt_hci_host_num_completed_packets+0xe0>)
   12cba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12cbe:	617b      	str	r3, [r7, #20]
   12cc0:	2302      	movs	r3, #2
   12cc2:	4810      	ldr	r0, [pc, #64]	; (12d04 <bt_hci_host_num_completed_packets+0xd8>)
   12cc4:	613b      	str	r3, [r7, #16]
   12cc6:	f107 0210 	add.w	r2, r7, #16
   12cca:	f015 fab0 	bl	2822e <z_log_msg_static_create.constprop.0>
		return;
   12cce:	e7d3      	b.n	12c78 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
   12cd0:	f100 080c 	add.w	r8, r0, #12
   12cd4:	2101      	movs	r1, #1
   12cd6:	4640      	mov	r0, r8
   12cd8:	f008 f8be 	bl	1ae58 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   12cdc:	2601      	movs	r6, #1
   12cde:	2104      	movs	r1, #4
   12ce0:	7006      	strb	r6, [r0, #0]
   12ce2:	4640      	mov	r0, r8
   12ce4:	f008 f8b8 	bl	1ae58 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   12ce8:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   12cea:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   12cec:	7086      	strb	r6, [r0, #2]
   12cee:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   12cf0:	4621      	mov	r1, r4
   12cf2:	f640 4035 	movw	r0, #3125	; 0xc35
   12cf6:	f7ff ff63 	bl	12bc0 <bt_hci_cmd_send>
   12cfa:	e7bd      	b.n	12c78 <bt_hci_host_num_completed_packets+0x4c>
   12cfc:	20008000 	.word	0x20008000
   12d00:	0002fe6d 	.word	0x0002fe6d
   12d04:	0002c80c 	.word	0x0002c80c
   12d08:	0002fe96 	.word	0x0002fe96
   12d0c:	0002fec2 	.word	0x0002fec2

00012d10 <le_ltk_request>:
{
   12d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d14:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   12d16:	68c4      	ldr	r4, [r0, #12]
{
   12d18:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
   12d1a:	8826      	ldrh	r6, [r4, #0]
   12d1c:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
   12d20:	4640      	mov	r0, r8
   12d22:	f001 ff3f 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   12d26:	4605      	mov	r5, r0
   12d28:	b990      	cbnz	r0, 12d50 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12d2a:	466c      	mov	r4, sp
   12d2c:	b088      	sub	sp, #32
   12d2e:	aa02      	add	r2, sp, #8
   12d30:	4b2c      	ldr	r3, [pc, #176]	; (12de4 <le_ltk_request+0xd4>)
   12d32:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d36:	e9c2 3805 	strd	r3, r8, [r2, #20]
   12d3a:	2303      	movs	r3, #3
   12d3c:	482a      	ldr	r0, [pc, #168]	; (12de8 <le_ltk_request+0xd8>)
   12d3e:	f842 3f10 	str.w	r3, [r2, #16]!
   12d42:	f015 fa74 	bl	2822e <z_log_msg_static_create.constprop.0>
   12d46:	46a5      	mov	sp, r4
}
   12d48:	3728      	adds	r7, #40	; 0x28
   12d4a:	46bd      	mov	sp, r7
   12d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   12d50:	f8d4 2002 	ldr.w	r2, [r4, #2]
   12d54:	f8d4 3006 	ldr.w	r3, [r4, #6]
   12d58:	9701      	str	r7, [sp, #4]
   12d5a:	8961      	ldrh	r1, [r4, #10]
   12d5c:	9100      	str	r1, [sp, #0]
   12d5e:	f016 feee 	bl	29b3e <bt_smp_request_ltk>
   12d62:	b370      	cbz	r0, 12dc2 <le_ltk_request+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   12d64:	2112      	movs	r1, #18
   12d66:	f242 001a 	movw	r0, #8218	; 0x201a
   12d6a:	f7ff fba5 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   12d6e:	4604      	mov	r4, r0
   12d70:	b970      	cbnz	r0, 12d90 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   12d72:	4b1e      	ldr	r3, [pc, #120]	; (12dec <le_ltk_request+0xdc>)
   12d74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12d78:	627b      	str	r3, [r7, #36]	; 0x24
   12d7a:	2302      	movs	r3, #2
   12d7c:	481a      	ldr	r0, [pc, #104]	; (12de8 <le_ltk_request+0xd8>)
   12d7e:	623b      	str	r3, [r7, #32]
   12d80:	f107 0220 	add.w	r2, r7, #32
   12d84:	f015 fa53 	bl	2822e <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   12d88:	4628      	mov	r0, r5
   12d8a:	f001 fedb 	bl	14b44 <bt_conn_unref>
   12d8e:	e7db      	b.n	12d48 <le_ltk_request+0x38>
   12d90:	2112      	movs	r1, #18
   12d92:	300c      	adds	r0, #12
   12d94:	f008 f860 	bl	1ae58 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   12d98:	4603      	mov	r3, r0
   12d9a:	463a      	mov	r2, r7
   12d9c:	f823 6b02 	strh.w	r6, [r3], #2
   12da0:	f107 0c10 	add.w	ip, r7, #16
   12da4:	4616      	mov	r6, r2
   12da6:	ce03      	ldmia	r6!, {r0, r1}
   12da8:	4566      	cmp	r6, ip
   12daa:	6018      	str	r0, [r3, #0]
   12dac:	6059      	str	r1, [r3, #4]
   12dae:	4632      	mov	r2, r6
   12db0:	f103 0308 	add.w	r3, r3, #8
   12db4:	d1f6      	bne.n	12da4 <le_ltk_request+0x94>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   12db6:	4621      	mov	r1, r4
   12db8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   12dbc:	f7ff ff00 	bl	12bc0 <bt_hci_cmd_send>
   12dc0:	e7e2      	b.n	12d88 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   12dc2:	2102      	movs	r1, #2
   12dc4:	f242 001b 	movw	r0, #8219	; 0x201b
   12dc8:	f7ff fb76 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   12dcc:	4604      	mov	r4, r0
   12dce:	2800      	cmp	r0, #0
   12dd0:	d0cf      	beq.n	12d72 <le_ltk_request+0x62>
   12dd2:	2102      	movs	r1, #2
   12dd4:	300c      	adds	r0, #12
   12dd6:	f008 f83f 	bl	1ae58 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   12dda:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   12ddc:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   12dde:	f242 001b 	movw	r0, #8219	; 0x201b
   12de2:	e7eb      	b.n	12dbc <le_ltk_request+0xac>
   12de4:	0002fb43 	.word	0x0002fb43
   12de8:	0002c80c 	.word	0x0002c80c
   12dec:	0002fee5 	.word	0x0002fee5

00012df0 <le_conn_param_req>:
{
   12df0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12df2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   12df4:	68c3      	ldr	r3, [r0, #12]
{
   12df6:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12df8:	78d9      	ldrb	r1, [r3, #3]
   12dfa:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   12dfc:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12dfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12e02:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12e04:	7959      	ldrb	r1, [r3, #5]
   12e06:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   12e08:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12e0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12e0e:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   12e10:	799a      	ldrb	r2, [r3, #6]
   12e12:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   12e14:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   12e16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12e1a:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12e1c:	7a1a      	ldrb	r2, [r3, #8]
   12e1e:	7a5b      	ldrb	r3, [r3, #9]
   12e20:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   12e24:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   12e26:	f001 febd 	bl	14ba4 <bt_conn_lookup_handle>
	if (!conn) {
   12e2a:	4605      	mov	r5, r0
   12e2c:	b9a8      	cbnz	r0, 12e5a <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12e2e:	466d      	mov	r5, sp
   12e30:	b088      	sub	sp, #32
   12e32:	466a      	mov	r2, sp
   12e34:	4b1e      	ldr	r3, [pc, #120]	; (12eb0 <le_conn_param_req+0xc0>)
   12e36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e3a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12e3e:	2303      	movs	r3, #3
   12e40:	481c      	ldr	r0, [pc, #112]	; (12eb4 <le_conn_param_req+0xc4>)
   12e42:	f842 3f10 	str.w	r3, [r2, #16]!
   12e46:	f015 f9f2 	bl	2822e <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   12e4a:	2102      	movs	r1, #2
   12e4c:	46ad      	mov	sp, r5
   12e4e:	4620      	mov	r0, r4
   12e50:	f015 fa8d 	bl	2836e <le_conn_param_neg_reply>
}
   12e54:	370c      	adds	r7, #12
   12e56:	46bd      	mov	sp, r7
   12e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   12e5a:	4639      	mov	r1, r7
   12e5c:	f002 f85a 	bl	14f14 <le_param_req>
   12e60:	b938      	cbnz	r0, 12e72 <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   12e62:	211e      	movs	r1, #30
   12e64:	4620      	mov	r0, r4
   12e66:	f015 fa82 	bl	2836e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   12e6a:	4628      	mov	r0, r5
   12e6c:	f001 fe6a 	bl	14b44 <bt_conn_unref>
   12e70:	e7f0      	b.n	12e54 <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   12e72:	210e      	movs	r1, #14
   12e74:	f242 0020 	movw	r0, #8224	; 0x2020
   12e78:	f7ff fb1e 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   12e7c:	4604      	mov	r4, r0
   12e7e:	2800      	cmp	r0, #0
   12e80:	d0f3      	beq.n	12e6a <le_conn_param_req+0x7a>
   12e82:	210e      	movs	r1, #14
   12e84:	300c      	adds	r0, #12
   12e86:	f007 ffe7 	bl	1ae58 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   12e8a:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   12e8c:	8006      	strh	r6, [r0, #0]
   12e8e:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   12e92:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   12e94:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   12e96:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   12e98:	887b      	ldrh	r3, [r7, #2]
   12e9a:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   12e9c:	88bb      	ldrh	r3, [r7, #4]
   12e9e:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   12ea0:	88fb      	ldrh	r3, [r7, #6]
   12ea2:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   12ea4:	f242 0020 	movw	r0, #8224	; 0x2020
   12ea8:	f7ff fe8a 	bl	12bc0 <bt_hci_cmd_send>
   12eac:	e7dd      	b.n	12e6a <le_conn_param_req+0x7a>
   12eae:	bf00      	nop
   12eb0:	0002fb43 	.word	0x0002fb43
   12eb4:	0002c80c 	.word	0x0002c80c

00012eb8 <hci_tx_thread>:
{
   12eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   12ebc:	f8df 8154 	ldr.w	r8, [pc, #340]	; 13014 <hci_tx_thread+0x15c>
{
   12ec0:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
   12ec2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 13018 <hci_tx_thread+0x160>
{
   12ec6:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   12ec8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12ecc:	4853      	ldr	r0, [pc, #332]	; (1301c <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12ece:	f36f 3394 	bfc	r3, #14, #7
   12ed2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12ed6:	f001 fdd5 	bl	14a84 <bt_conn_prepare_events>
   12eda:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   12edc:	f04f 32ff 	mov.w	r2, #4294967295
   12ee0:	f04f 33ff 	mov.w	r3, #4294967295
   12ee4:	4629      	mov	r1, r5
   12ee6:	484b      	ldr	r0, [pc, #300]	; (13014 <hci_tx_thread+0x15c>)
   12ee8:	f011 fb64 	bl	245b4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   12eec:	b160      	cbz	r0, 12f08 <hci_tx_thread+0x50>
   12eee:	f640 13e6 	movw	r3, #2534	; 0x9e6
   12ef2:	464a      	mov	r2, r9
   12ef4:	494a      	ldr	r1, [pc, #296]	; (13020 <hci_tx_thread+0x168>)
   12ef6:	484b      	ldr	r0, [pc, #300]	; (13024 <hci_tx_thread+0x16c>)
   12ef8:	f013 fd13 	bl	26922 <assert_print>
   12efc:	4040      	eors	r0, r0
   12efe:	f380 8811 	msr	BASEPRI, r0
   12f02:	f04f 0003 	mov.w	r0, #3
   12f06:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   12f08:	f04f 0a03 	mov.w	sl, #3
{
   12f0c:	4e41      	ldr	r6, [pc, #260]	; (13014 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
   12f0e:	b915      	cbnz	r5, 12f16 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   12f10:	f010 fa98 	bl	23444 <z_impl_k_yield>
	while (1) {
   12f14:	e7d8      	b.n	12ec8 <hci_tx_thread+0x10>
		switch (ev->state) {
   12f16:	68f3      	ldr	r3, [r6, #12]
   12f18:	f3c3 3386 	ubfx	r3, r3, #14, #7
   12f1c:	2b01      	cmp	r3, #1
   12f1e:	d960      	bls.n	12fe2 <hci_tx_thread+0x12a>
   12f20:	2b04      	cmp	r3, #4
   12f22:	d168      	bne.n	12ff6 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12f24:	7b33      	ldrb	r3, [r6, #12]
   12f26:	2b00      	cmp	r3, #0
   12f28:	d15e      	bne.n	12fe8 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12f2a:	2200      	movs	r2, #0
   12f2c:	2300      	movs	r3, #0
   12f2e:	483e      	ldr	r0, [pc, #248]	; (13028 <hci_tx_thread+0x170>)
   12f30:	f016 ffb3 	bl	29e9a <net_buf_get>
	BT_ASSERT(buf);
   12f34:	4604      	mov	r4, r0
   12f36:	b960      	cbnz	r0, 12f52 <hci_tx_thread+0x9a>
   12f38:	f44f 6318 	mov.w	r3, #2432	; 0x980
   12f3c:	464a      	mov	r2, r9
   12f3e:	493b      	ldr	r1, [pc, #236]	; (1302c <hci_tx_thread+0x174>)
   12f40:	4838      	ldr	r0, [pc, #224]	; (13024 <hci_tx_thread+0x16c>)
   12f42:	f013 fcee 	bl	26922 <assert_print>
   12f46:	4040      	eors	r0, r0
   12f48:	f380 8811 	msr	BASEPRI, r0
   12f4c:	f04f 0003 	mov.w	r0, #3
   12f50:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   12f52:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 13030 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   12f56:	f04f 33ff 	mov.w	r3, #4294967295
   12f5a:	f04f 32ff 	mov.w	r2, #4294967295
   12f5e:	4835      	ldr	r0, [pc, #212]	; (13034 <hci_tx_thread+0x17c>)
   12f60:	f00e fcfa 	bl	21958 <z_impl_k_sem_take>
   12f64:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   12f68:	b18b      	cbz	r3, 12f8e <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   12f6a:	4b33      	ldr	r3, [pc, #204]	; (13038 <hci_tx_thread+0x180>)
   12f6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12f70:	617b      	str	r3, [r7, #20]
   12f72:	2302      	movs	r3, #2
   12f74:	4831      	ldr	r0, [pc, #196]	; (1303c <hci_tx_thread+0x184>)
   12f76:	613b      	str	r3, [r7, #16]
   12f78:	f107 0210 	add.w	r2, r7, #16
   12f7c:	f015 f957 	bl	2822e <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   12f80:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   12f84:	f007 fe46 	bl	1ac14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12f88:	2300      	movs	r3, #0
   12f8a:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   12f8e:	4620      	mov	r0, r4
   12f90:	f007 fe84 	bl	1ac9c <net_buf_ref>
   12f94:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   12f98:	4620      	mov	r0, r4
   12f9a:	f7ff fe09 	bl	12bb0 <bt_send>
	if (err) {
   12f9e:	b300      	cbz	r0, 12fe2 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   12fa0:	46eb      	mov	fp, sp
   12fa2:	b088      	sub	sp, #32
   12fa4:	466a      	mov	r2, sp
   12fa6:	4b26      	ldr	r3, [pc, #152]	; (13040 <hci_tx_thread+0x188>)
   12fa8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12fac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12fb0:	2303      	movs	r3, #3
   12fb2:	4822      	ldr	r0, [pc, #136]	; (1303c <hci_tx_thread+0x184>)
   12fb4:	f842 3f10 	str.w	r3, [r2, #16]!
   12fb8:	f015 f939 	bl	2822e <z_log_msg_static_create.constprop.0>
   12fbc:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   12fbe:	481d      	ldr	r0, [pc, #116]	; (13034 <hci_tx_thread+0x17c>)
   12fc0:	f00e fc86 	bl	218d0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12fc4:	4620      	mov	r0, r4
   12fc6:	f007 fbf3 	bl	1a7b0 <net_buf_id>
   12fca:	220c      	movs	r2, #12
   12fcc:	4b1d      	ldr	r3, [pc, #116]	; (13044 <hci_tx_thread+0x18c>)
   12fce:	211f      	movs	r1, #31
   12fd0:	fb02 3000 	mla	r0, r2, r0, r3
   12fd4:	4622      	mov	r2, r4
   12fd6:	8840      	ldrh	r0, [r0, #2]
   12fd8:	f7ff f8a0 	bl	1211c <hci_cmd_done>
		net_buf_unref(buf);
   12fdc:	4620      	mov	r0, r4
   12fde:	f007 fe19 	bl	1ac14 <net_buf_unref>
	for (; count; ev++, count--) {
   12fe2:	3614      	adds	r6, #20
   12fe4:	3d01      	subs	r5, #1
   12fe6:	e792      	b.n	12f0e <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12fe8:	2b01      	cmp	r3, #1
   12fea:	d1fa      	bne.n	12fe2 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   12fec:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   12fee:	3838      	subs	r0, #56	; 0x38
   12ff0:	f002 f9fe 	bl	153f0 <bt_conn_process_tx>
   12ff4:	e7f5      	b.n	12fe2 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   12ff6:	466c      	mov	r4, sp
   12ff8:	b088      	sub	sp, #32
   12ffa:	466a      	mov	r2, sp
   12ffc:	4912      	ldr	r1, [pc, #72]	; (13048 <hci_tx_thread+0x190>)
   12ffe:	480f      	ldr	r0, [pc, #60]	; (1303c <hci_tx_thread+0x184>)
		switch (ev->state) {
   13000:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   13004:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13008:	f842 af10 	str.w	sl, [r2, #16]!
   1300c:	f015 f90f 	bl	2822e <z_log_msg_static_create.constprop.0>
   13010:	46a5      	mov	sp, r4
   13012:	e7e6      	b.n	12fe2 <hci_tx_thread+0x12a>
   13014:	20008614 	.word	0x20008614
   13018:	0002fbaf 	.word	0x0002fbaf
   1301c:	20008628 	.word	0x20008628
   13020:	0002e79f 	.word	0x0002e79f
   13024:	0002d881 	.word	0x0002d881
   13028:	20008144 	.word	0x20008144
   1302c:	00031910 	.word	0x00031910
   13030:	20008000 	.word	0x20008000
   13034:	20008120 	.word	0x20008120
   13038:	0002fefc 	.word	0x0002fefc
   1303c:	0002c80c 	.word	0x0002c80c
   13040:	0002fe4b 	.word	0x0002fe4b
   13044:	2002162c 	.word	0x2002162c
   13048:	0002ff17 	.word	0x0002ff17

0001304c <hci_event_prio>:
{
   1304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13050:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   13052:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   13056:	4630      	mov	r0, r6
   13058:	f016 ff30 	bl	29ebc <net_buf_simple_headroom>
	state->len = buf->len;
   1305c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   13060:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13062:	f1b8 0f01 	cmp.w	r8, #1
   13066:	d80c      	bhi.n	13082 <hci_event_prio+0x36>
   13068:	f640 537b 	movw	r3, #3451	; 0xd7b
   1306c:	4a1b      	ldr	r2, [pc, #108]	; (130dc <hci_event_prio+0x90>)
   1306e:	491c      	ldr	r1, [pc, #112]	; (130e0 <hci_event_prio+0x94>)
   13070:	481c      	ldr	r0, [pc, #112]	; (130e4 <hci_event_prio+0x98>)
   13072:	f013 fc56 	bl	26922 <assert_print>
   13076:	4040      	eors	r0, r0
   13078:	f380 8811 	msr	BASEPRI, r0
   1307c:	f04f 0003 	mov.w	r0, #3
   13080:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13082:	4630      	mov	r0, r6
   13084:	2102      	movs	r1, #2
   13086:	f007 fec9 	bl	1ae1c <net_buf_simple_pull_mem>
   1308a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1308c:	7800      	ldrb	r0, [r0, #0]
   1308e:	f015 f88c 	bl	281aa <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13092:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13094:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13096:	d40c      	bmi.n	130b2 <hci_event_prio+0x66>
   13098:	f640 537f 	movw	r3, #3455	; 0xd7f
   1309c:	4a0f      	ldr	r2, [pc, #60]	; (130dc <hci_event_prio+0x90>)
   1309e:	4912      	ldr	r1, [pc, #72]	; (130e8 <hci_event_prio+0x9c>)
   130a0:	4810      	ldr	r0, [pc, #64]	; (130e4 <hci_event_prio+0x98>)
   130a2:	f013 fc3e 	bl	26922 <assert_print>
   130a6:	4040      	eors	r0, r0
   130a8:	f380 8811 	msr	BASEPRI, r0
   130ac:	f04f 0003 	mov.w	r0, #3
   130b0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   130b2:	2305      	movs	r3, #5
   130b4:	4621      	mov	r1, r4
   130b6:	4a0d      	ldr	r2, [pc, #52]	; (130ec <hci_event_prio+0xa0>)
   130b8:	7838      	ldrb	r0, [r7, #0]
   130ba:	f7fe fef5 	bl	11ea8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   130be:	07b3      	lsls	r3, r6, #30
   130c0:	d507      	bpl.n	130d2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   130c2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   130c4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   130c8:	fa13 f585 	uxtah	r5, r3, r5
   130cc:	60e5      	str	r5, [r4, #12]
}
   130ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   130d2:	4620      	mov	r0, r4
}
   130d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   130d8:	f007 bd9c 	b.w	1ac14 <net_buf_unref>
   130dc:	0002fbaf 	.word	0x0002fbaf
   130e0:	0002fbe3 	.word	0x0002fbe3
   130e4:	0002d881 	.word	0x0002d881
   130e8:	0002ff38 	.word	0x0002ff38
   130ec:	0002d180 	.word	0x0002d180

000130f0 <bt_recv>:
{
   130f0:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   130f2:	7e03      	ldrb	r3, [r0, #24]
   130f4:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   130f6:	2b01      	cmp	r3, #1
{
   130f8:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   130fa:	d006      	beq.n	1310a <bt_recv+0x1a>
   130fc:	2b03      	cmp	r3, #3
   130fe:	d112      	bne.n	13126 <bt_recv+0x36>
			rx_queue_put(buf);
   13100:	f7fe fdfe 	bl	11d00 <rx_queue_put>
		return 0;
   13104:	2000      	movs	r0, #0
}
   13106:	46bd      	mov	sp, r7
   13108:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1310a:	68c3      	ldr	r3, [r0, #12]
   1310c:	7818      	ldrb	r0, [r3, #0]
   1310e:	f015 f84c 	bl	281aa <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13112:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13114:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13116:	d502      	bpl.n	1311e <bt_recv+0x2e>
			hci_event_prio(buf);
   13118:	4620      	mov	r0, r4
   1311a:	f7ff ff97 	bl	1304c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1311e:	07ab      	lsls	r3, r5, #30
   13120:	d5f0      	bpl.n	13104 <bt_recv+0x14>
			rx_queue_put(buf);
   13122:	4620      	mov	r0, r4
   13124:	e7ec      	b.n	13100 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13126:	466d      	mov	r5, sp
   13128:	b088      	sub	sp, #32
   1312a:	466a      	mov	r2, sp
   1312c:	4908      	ldr	r1, [pc, #32]	; (13150 <bt_recv+0x60>)
   1312e:	4809      	ldr	r0, [pc, #36]	; (13154 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   13130:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13134:	2303      	movs	r3, #3
   13136:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1313a:	f842 3f10 	str.w	r3, [r2, #16]!
   1313e:	f015 f876 	bl	2822e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   13142:	4620      	mov	r0, r4
   13144:	46ad      	mov	sp, r5
   13146:	f007 fd65 	bl	1ac14 <net_buf_unref>
		return -EINVAL;
   1314a:	f06f 0015 	mvn.w	r0, #21
   1314e:	e7da      	b.n	13106 <bt_recv+0x16>
   13150:	0002ff51 	.word	0x0002ff51
   13154:	0002c80c 	.word	0x0002c80c

00013158 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13158:	4a08      	ldr	r2, [pc, #32]	; (1317c <bt_hci_driver_register+0x24>)
{
   1315a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1315c:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   13160:	b930      	cbnz	r0, 13170 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   13162:	68d9      	ldr	r1, [r3, #12]
   13164:	b139      	cbz	r1, 13176 <bt_hci_driver_register+0x1e>
   13166:	6959      	ldr	r1, [r3, #20]
   13168:	b129      	cbz	r1, 13176 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1316a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   1316e:	4770      	bx	lr
		return -EALREADY;
   13170:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13174:	4770      	bx	lr
		return -EINVAL;
   13176:	f06f 0015 	mvn.w	r0, #21
}
   1317a:	4770      	bx	lr
   1317c:	20008000 	.word	0x20008000

00013180 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13180:	2104      	movs	r1, #4
   13182:	4801      	ldr	r0, [pc, #4]	; (13188 <bt_finalize_init+0x8>)
   13184:	f015 b83c 	b.w	28200 <atomic_or>
   13188:	200080cc 	.word	0x200080cc

0001318c <bt_init.part.0>:
static int bt_init(void)
   1318c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (!bt_dev.id_count) {
   1318e:	480c      	ldr	r0, [pc, #48]	; (131c0 <bt_init.part.0+0x34>)
   13190:	79c3      	ldrb	r3, [r0, #7]
   13192:	b96b      	cbnz	r3, 131b0 <bt_init.part.0+0x24>
			LOG_INF("No ID address. App must call settings_load()");
   13194:	4b0b      	ldr	r3, [pc, #44]	; (131c4 <bt_init.part.0+0x38>)
   13196:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1319a:	9305      	str	r3, [sp, #20]
   1319c:	2302      	movs	r3, #2
   1319e:	480a      	ldr	r0, [pc, #40]	; (131c8 <bt_init.part.0+0x3c>)
   131a0:	aa04      	add	r2, sp, #16
   131a2:	9304      	str	r3, [sp, #16]
   131a4:	f015 f843 	bl	2822e <z_log_msg_static_create.constprop.0>
}
   131a8:	2000      	movs	r0, #0
   131aa:	b007      	add	sp, #28
   131ac:	f85d fb04 	ldr.w	pc, [sp], #4
   131b0:	2108      	movs	r1, #8
   131b2:	30cc      	adds	r0, #204	; 0xcc
   131b4:	f015 f824 	bl	28200 <atomic_or>
	bt_finalize_init();
   131b8:	f7ff ffe2 	bl	13180 <bt_finalize_init>
	return 0;
   131bc:	e7f4      	b.n	131a8 <bt_init.part.0+0x1c>
   131be:	bf00      	nop
   131c0:	20008000 	.word	0x20008000
   131c4:	0002ff65 	.word	0x0002ff65
   131c8:	0002c80c 	.word	0x0002c80c

000131cc <init_work>:
{
   131cc:	b510      	push	{r4, lr}
	err = bt_init();
   131ce:	f7f6 f95f 	bl	9490 <bt_init>
	if (ready_cb) {
   131d2:	4b03      	ldr	r3, [pc, #12]	; (131e0 <init_work+0x14>)
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	b113      	cbz	r3, 131de <init_work+0x12>
}
   131d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   131dc:	4718      	bx	r3
}
   131de:	bd10      	pop	{r4, pc}
   131e0:	200216a4 	.word	0x200216a4

000131e4 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   131e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   131e6:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
   131e8:	4d3d      	ldr	r5, [pc, #244]	; (132e0 <bt_enable+0xfc>)
{
   131ea:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   131ec:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   131f0:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   131f2:	b983      	cbnz	r3, 13216 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   131f4:	4b3b      	ldr	r3, [pc, #236]	; (132e4 <bt_enable+0x100>)
		return -ENODEV;
   131f6:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   131fa:	617b      	str	r3, [r7, #20]
   131fc:	2302      	movs	r3, #2
   131fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13202:	4839      	ldr	r0, [pc, #228]	; (132e8 <bt_enable+0x104>)
   13204:	613b      	str	r3, [r7, #16]
   13206:	f107 0210 	add.w	r2, r7, #16
   1320a:	f015 f810 	bl	2822e <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1320e:	4620      	mov	r0, r4
   13210:	371c      	adds	r7, #28
   13212:	46bd      	mov	sp, r7
   13214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13216:	f06f 0102 	mvn.w	r1, #2
   1321a:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   1321e:	f015 f809 	bl	28234 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13222:	2101      	movs	r1, #1
   13224:	f014 ffec 	bl	28200 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13228:	07c3      	lsls	r3, r0, #31
   1322a:	d456      	bmi.n	132da <bt_enable+0xf6>
		err = bt_settings_init();
   1322c:	f7fe fc0e 	bl	11a4c <bt_settings_init>
		if (err) {
   13230:	4604      	mov	r4, r0
   13232:	2800      	cmp	r0, #0
   13234:	d1eb      	bne.n	1320e <bt_enable+0x2a>
	ready_cb = cb;
   13236:	4b2d      	ldr	r3, [pc, #180]	; (132ec <bt_enable+0x108>)
   13238:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1323a:	2201      	movs	r2, #1
   1323c:	f505 7090 	add.w	r0, r5, #288	; 0x120
   13240:	4611      	mov	r1, r2
   13242:	f018 f9b1 	bl	2b5a8 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   13246:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   1324a:	f018 f98b 	bl	2b564 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1324e:	2200      	movs	r2, #0
   13250:	2300      	movs	r3, #0
   13252:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13256:	f06f 0308 	mvn.w	r3, #8
   1325a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1325e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13262:	e9cd 4400 	strd	r4, r4, [sp]
   13266:	4b22      	ldr	r3, [pc, #136]	; (132f0 <bt_enable+0x10c>)
   13268:	4922      	ldr	r1, [pc, #136]	; (132f4 <bt_enable+0x110>)
   1326a:	9404      	str	r4, [sp, #16]
   1326c:	4822      	ldr	r0, [pc, #136]	; (132f8 <bt_enable+0x114>)
   1326e:	f00d ffad 	bl	211cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13272:	4922      	ldr	r1, [pc, #136]	; (132fc <bt_enable+0x118>)
   13274:	4820      	ldr	r0, [pc, #128]	; (132f8 <bt_enable+0x114>)
   13276:	f018 f94c 	bl	2b512 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1327a:	4821      	ldr	r0, [pc, #132]	; (13300 <bt_enable+0x11c>)
   1327c:	f00e fe9c 	bl	21fb8 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   13280:	f06f 0307 	mvn.w	r3, #7
   13284:	f640 0298 	movw	r2, #2200	; 0x898
   13288:	491e      	ldr	r1, [pc, #120]	; (13304 <bt_enable+0x120>)
   1328a:	481d      	ldr	r0, [pc, #116]	; (13300 <bt_enable+0x11c>)
   1328c:	9400      	str	r4, [sp, #0]
   1328e:	f00e fead 	bl	21fec <k_work_queue_start>
   13292:	491d      	ldr	r1, [pc, #116]	; (13308 <bt_enable+0x124>)
   13294:	481a      	ldr	r0, [pc, #104]	; (13300 <bt_enable+0x11c>)
   13296:	f018 f93c 	bl	2b512 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1329a:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   1329e:	68db      	ldr	r3, [r3, #12]
   132a0:	4798      	blx	r3
	if (err) {
   132a2:	4604      	mov	r4, r0
   132a4:	b178      	cbz	r0, 132c6 <bt_enable+0xe2>
		LOG_ERR("HCI driver open failed (%d)", err);
   132a6:	466d      	mov	r5, sp
   132a8:	b088      	sub	sp, #32
   132aa:	462a      	mov	r2, r5
   132ac:	4b17      	ldr	r3, [pc, #92]	; (1330c <bt_enable+0x128>)
   132ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   132b2:	e9c5 3005 	strd	r3, r0, [r5, #20]
   132b6:	2303      	movs	r3, #3
   132b8:	480b      	ldr	r0, [pc, #44]	; (132e8 <bt_enable+0x104>)
   132ba:	f842 3f10 	str.w	r3, [r2, #16]!
   132be:	f014 ffb6 	bl	2822e <z_log_msg_static_create.constprop.0>
   132c2:	46ad      	mov	sp, r5
		return err;
   132c4:	e7a3      	b.n	1320e <bt_enable+0x2a>
	if (!cb) {
   132c6:	b91e      	cbnz	r6, 132d0 <bt_enable+0xec>
		return bt_init();
   132c8:	f7f6 f8e2 	bl	9490 <bt_init>
   132cc:	4604      	mov	r4, r0
   132ce:	e79e      	b.n	1320e <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   132d0:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   132d4:	f00e fe6a 	bl	21fac <k_work_submit>
	return 0;
   132d8:	e799      	b.n	1320e <bt_enable+0x2a>
		return -EALREADY;
   132da:	f06f 0477 	mvn.w	r4, #119	; 0x77
   132de:	e796      	b.n	1320e <bt_enable+0x2a>
   132e0:	20008000 	.word	0x20008000
   132e4:	0003007d 	.word	0x0003007d
   132e8:	0002c80c 	.word	0x0002c80c
   132ec:	200216a4 	.word	0x200216a4
   132f0:	00012eb9 	.word	0x00012eb9
   132f4:	20032868 	.word	0x20032868
   132f8:	20009c20 	.word	0x20009c20
   132fc:	00030096 	.word	0x00030096
   13300:	20009ca8 	.word	0x20009ca8
   13304:	20032c68 	.word	0x20032c68
   13308:	0003009c 	.word	0x0003009c
   1330c:	000300a2 	.word	0x000300a2

00013310 <bt_is_ready>:
   13310:	4b02      	ldr	r3, [pc, #8]	; (1331c <bt_is_ready+0xc>)
   13312:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   13316:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1331a:	4770      	bx	lr
   1331c:	200080cc 	.word	0x200080cc

00013320 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13320:	4800      	ldr	r0, [pc, #0]	; (13324 <bt_get_name+0x4>)
   13322:	4770      	bx	lr
   13324:	0002e0e8 	.word	0x0002e0e8

00013328 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1332a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1332c:	2500      	movs	r5, #0
   1332e:	4f09      	ldr	r7, [pc, #36]	; (13354 <id_find+0x2c>)
   13330:	79fb      	ldrb	r3, [r7, #7]
   13332:	b2ec      	uxtb	r4, r5
   13334:	42a3      	cmp	r3, r4
   13336:	d802      	bhi.n	1333e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13338:	f06f 0001 	mvn.w	r0, #1
   1333c:	e009      	b.n	13352 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1333e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   13342:	4630      	mov	r0, r6
   13344:	4439      	add	r1, r7
   13346:	f015 f839 	bl	283bc <bt_addr_le_eq>
   1334a:	3501      	adds	r5, #1
   1334c:	2800      	cmp	r0, #0
   1334e:	d0ef      	beq.n	13330 <id_find+0x8>
   13350:	4620      	mov	r0, r4
}
   13352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13354:	20008000 	.word	0x20008000

00013358 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13358:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1335a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1335c:	460d      	mov	r5, r1
   1335e:	b1a9      	cbz	r1, 1338c <id_create.constprop.0+0x34>
   13360:	4628      	mov	r0, r5
   13362:	4915      	ldr	r1, [pc, #84]	; (133b8 <id_create.constprop.0+0x60>)
   13364:	f015 f82a 	bl	283bc <bt_addr_le_eq>
   13368:	b980      	cbnz	r0, 1338c <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1336a:	4629      	mov	r1, r5
   1336c:	4813      	ldr	r0, [pc, #76]	; (133bc <id_create.constprop.0+0x64>)
   1336e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13372:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13374:	f015 f832 	bl	283dc <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13378:	4811      	ldr	r0, [pc, #68]	; (133c0 <id_create.constprop.0+0x68>)
   1337a:	f015 f827 	bl	283cc <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1337e:	0743      	lsls	r3, r0, #29
   13380:	d501      	bpl.n	13386 <id_create.constprop.0+0x2e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   13382:	f7fe fb19 	bl	119b8 <bt_settings_save_id>
	}

	return 0;
   13386:	2000      	movs	r0, #0
}
   13388:	b003      	add	sp, #12
   1338a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1338c:	4668      	mov	r0, sp
   1338e:	f014 fefe 	bl	2818e <bt_addr_le_create_static>
			if (err) {
   13392:	2800      	cmp	r0, #0
   13394:	d1f8      	bne.n	13388 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   13396:	4668      	mov	r0, sp
   13398:	f7ff ffc6 	bl	13328 <id_find>
   1339c:	2800      	cmp	r0, #0
   1339e:	daf5      	bge.n	1338c <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   133a0:	4b06      	ldr	r3, [pc, #24]	; (133bc <id_create.constprop.0+0x64>)
   133a2:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   133a6:	4669      	mov	r1, sp
   133a8:	4418      	add	r0, r3
   133aa:	f015 f817 	bl	283dc <bt_addr_le_copy>
		if (addr) {
   133ae:	2d00      	cmp	r5, #0
   133b0:	d0e2      	beq.n	13378 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   133b2:	4601      	mov	r1, r0
   133b4:	4628      	mov	r0, r5
   133b6:	e7dd      	b.n	13374 <id_create.constprop.0+0x1c>
   133b8:	0002f895 	.word	0x0002f895
   133bc:	20008000 	.word	0x20008000
   133c0:	200080cc 	.word	0x200080cc

000133c4 <set_random_address>:
{
   133c4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   133c6:	2206      	movs	r2, #6
   133c8:	4911      	ldr	r1, [pc, #68]	; (13410 <set_random_address+0x4c>)
   133ca:	4605      	mov	r5, r0
   133cc:	f018 fa9e 	bl	2b90c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   133d0:	b1c8      	cbz	r0, 13406 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   133d2:	2106      	movs	r1, #6
   133d4:	f242 0005 	movw	r0, #8197	; 0x2005
   133d8:	f7ff f86e 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   133dc:	4604      	mov	r4, r0
   133de:	b1a0      	cbz	r0, 1340a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   133e0:	2206      	movs	r2, #6
   133e2:	4629      	mov	r1, r5
   133e4:	300c      	adds	r0, #12
   133e6:	f016 fd75 	bl	29ed4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   133ea:	2200      	movs	r2, #0
   133ec:	4621      	mov	r1, r4
   133ee:	f242 0005 	movw	r0, #8197	; 0x2005
   133f2:	f7ff f8af 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   133f6:	b938      	cbnz	r0, 13408 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   133f8:	4805      	ldr	r0, [pc, #20]	; (13410 <set_random_address+0x4c>)
   133fa:	4629      	mov	r1, r5
   133fc:	f014 ffe9 	bl	283d2 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13400:	2301      	movs	r3, #1
   13402:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   13406:	2000      	movs	r0, #0
}
   13408:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1340a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1340e:	e7fb      	b.n	13408 <set_random_address+0x44>
   13410:	20008061 	.word	0x20008061

00013414 <find_rl_conflict>:
{
   13414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13418:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   1341a:	460c      	mov	r4, r1
{
   1341c:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   1341e:	b959      	cbnz	r1, 13438 <find_rl_conflict+0x24>
   13420:	492b      	ldr	r1, [pc, #172]	; (134d0 <find_rl_conflict+0xbc>)
   13422:	f44f 7357 	mov.w	r3, #860	; 0x35c
   13426:	4a2b      	ldr	r2, [pc, #172]	; (134d4 <find_rl_conflict+0xc0>)
   13428:	482b      	ldr	r0, [pc, #172]	; (134d8 <find_rl_conflict+0xc4>)
   1342a:	f013 fa7a 	bl	26922 <assert_print>
   1342e:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   13432:	4828      	ldr	r0, [pc, #160]	; (134d4 <find_rl_conflict+0xc0>)
   13434:	f013 fa6e 	bl	26914 <assert_post_action>
   13438:	6808      	ldr	r0, [r1, #0]
   1343a:	b948      	cbnz	r0, 13450 <find_rl_conflict+0x3c>
   1343c:	4927      	ldr	r1, [pc, #156]	; (134dc <find_rl_conflict+0xc8>)
   1343e:	f240 335d 	movw	r3, #861	; 0x35d
   13442:	4a24      	ldr	r2, [pc, #144]	; (134d4 <find_rl_conflict+0xc0>)
   13444:	4824      	ldr	r0, [pc, #144]	; (134d8 <find_rl_conflict+0xc4>)
   13446:	f013 fa6c 	bl	26922 <assert_print>
   1344a:	f240 315d 	movw	r1, #861	; 0x35d
   1344e:	e7f0      	b.n	13432 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   13450:	b94d      	cbnz	r5, 13466 <find_rl_conflict+0x52>
   13452:	4923      	ldr	r1, [pc, #140]	; (134e0 <find_rl_conflict+0xcc>)
   13454:	f240 335e 	movw	r3, #862	; 0x35e
   13458:	4a1e      	ldr	r2, [pc, #120]	; (134d4 <find_rl_conflict+0xc0>)
   1345a:	481f      	ldr	r0, [pc, #124]	; (134d8 <find_rl_conflict+0xc4>)
   1345c:	f013 fa61 	bl	26922 <assert_print>
   13460:	f240 315e 	movw	r1, #862	; 0x35e
   13464:	e7e5      	b.n	13432 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   13466:	7a03      	ldrb	r3, [r0, #8]
   13468:	075a      	lsls	r2, r3, #29
   1346a:	d509      	bpl.n	13480 <find_rl_conflict+0x6c>
   1346c:	491d      	ldr	r1, [pc, #116]	; (134e4 <find_rl_conflict+0xd0>)
   1346e:	f44f 7358 	mov.w	r3, #864	; 0x360
   13472:	4a18      	ldr	r2, [pc, #96]	; (134d4 <find_rl_conflict+0xc0>)
   13474:	4818      	ldr	r0, [pc, #96]	; (134d8 <find_rl_conflict+0xc4>)
   13476:	f013 fa54 	bl	26922 <assert_print>
   1347a:	f44f 7158 	mov.w	r1, #864	; 0x360
   1347e:	e7d8      	b.n	13432 <find_rl_conflict+0x1e>
	if (conflict->found) {
   13480:	684f      	ldr	r7, [r1, #4]
   13482:	b9f7      	cbnz	r7, 134c2 <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   13484:	7a2b      	ldrb	r3, [r5, #8]
   13486:	075b      	lsls	r3, r3, #29
   13488:	d51b      	bpl.n	134c2 <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1348a:	1c69      	adds	r1, r5, #1
   1348c:	3001      	adds	r0, #1
   1348e:	f014 ff95 	bl	283bc <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   13492:	f8d4 8000 	ldr.w	r8, [r4]
   13496:	2216      	movs	r2, #22
   13498:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1349a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1349c:	4668      	mov	r0, sp
   1349e:	f018 fa7f 	bl	2b9a0 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   134a2:	2210      	movs	r2, #16
   134a4:	4669      	mov	r1, sp
   134a6:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   134aa:	f018 fa2f 	bl	2b90c <memcmp>
   134ae:	b158      	cbz	r0, 134c8 <find_rl_conflict+0xb4>
   134b0:	6820      	ldr	r0, [r4, #0]
   134b2:	2210      	movs	r2, #16
   134b4:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   134b8:	302a      	adds	r0, #42	; 0x2a
   134ba:	f018 fa27 	bl	2b90c <memcmp>
   134be:	b918      	cbnz	r0, 134c8 <find_rl_conflict+0xb4>
		conflict->found = resident;
   134c0:	6065      	str	r5, [r4, #4]
}
   134c2:	b006      	add	sp, #24
   134c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   134c8:	2e00      	cmp	r6, #0
   134ca:	d1f9      	bne.n	134c0 <find_rl_conflict+0xac>
   134cc:	e7f9      	b.n	134c2 <find_rl_conflict+0xae>
   134ce:	bf00      	nop
   134d0:	00030122 	.word	0x00030122
   134d4:	000300f4 	.word	0x000300f4
   134d8:	0002d881 	.word	0x0002d881
   134dc:	0003013a 	.word	0x0003013a
   134e0:	0003015d 	.word	0x0003015d
   134e4:	00030175 	.word	0x00030175

000134e8 <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   134e8:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   134ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   134ec:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
   134ee:	4604      	mov	r4, r0
   134f0:	b087      	sub	sp, #28
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   134f2:	4608      	mov	r0, r1
   134f4:	f001 fe4c 	bl	15190 <bt_conn_lookup_state_le>
	if (conn) {
   134f8:	4606      	mov	r6, r0
   134fa:	b188      	cbz	r0, 13520 <bt_id_add.part.0+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   134fc:	4b49      	ldr	r3, [pc, #292]	; (13624 <bt_id_add.part.0+0x13c>)
   134fe:	e8d3 1fef 	ldaex	r1, [r3]
   13502:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   13506:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1350a:	2a00      	cmp	r2, #0
   1350c:	d1f7      	bne.n	134fe <bt_id_add.part.0+0x16>
	keys->state |= flag;
   1350e:	7a23      	ldrb	r3, [r4, #8]
   13510:	f043 0301 	orr.w	r3, r3, #1
   13514:	7223      	strb	r3, [r4, #8]
}
   13516:	b007      	add	sp, #28
   13518:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1351c:	f001 bb12 	b.w	14b44 <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   13520:	4d41      	ldr	r5, [pc, #260]	; (13628 <bt_id_add.part.0+0x140>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13522:	4601      	mov	r1, r0
   13524:	4841      	ldr	r0, [pc, #260]	; (1362c <bt_id_add.part.0+0x144>)
   13526:	f000 fbf7 	bl	13d18 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1352a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1352e:	b173      	cbz	r3, 1354e <bt_id_add.part.0+0x66>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13530:	4630      	mov	r0, r6
   13532:	f014 ff99 	bl	28468 <addr_res_enable>
		if (err) {
   13536:	b150      	cbz	r0, 1354e <bt_id_add.part.0+0x66>
			LOG_WRN("Failed to disable address resolution");
   13538:	4b3d      	ldr	r3, [pc, #244]	; (13630 <bt_id_add.part.0+0x148>)
		LOG_WRN("Set privacy mode command is not supported");
   1353a:	9305      	str	r3, [sp, #20]
   1353c:	2302      	movs	r3, #2
   1353e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13542:	9304      	str	r3, [sp, #16]
   13544:	aa04      	add	r2, sp, #16
		LOG_ERR("Failed to set privacy mode");
   13546:	483b      	ldr	r0, [pc, #236]	; (13634 <bt_id_add.part.0+0x14c>)
   13548:	f014 ff8b 	bl	28462 <z_log_msg_static_create.constprop.0>
		goto done;
   1354c:	e026      	b.n	1359c <bt_id_add.part.0+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1354e:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   13552:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   13556:	429a      	cmp	r2, r3
   13558:	d12a      	bne.n	135b0 <bt_id_add.part.0+0xc8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1355a:	2602      	movs	r6, #2
   1355c:	4b36      	ldr	r3, [pc, #216]	; (13638 <bt_id_add.part.0+0x150>)
   1355e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13562:	4834      	ldr	r0, [pc, #208]	; (13634 <bt_id_add.part.0+0x14c>)
   13564:	aa04      	add	r2, sp, #16
   13566:	9305      	str	r3, [sp, #20]
   13568:	9604      	str	r6, [sp, #16]
   1356a:	f014 ff7a 	bl	28462 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1356e:	2200      	movs	r2, #0
   13570:	f242 0029 	movw	r0, #8233	; 0x2029
   13574:	4611      	mov	r1, r2
   13576:	f7fe ffed 	bl	12554 <bt_hci_cmd_send_sync>
		if (err) {
   1357a:	b130      	cbz	r0, 1358a <bt_id_add.part.0+0xa2>
			LOG_ERR("Failed to clear resolution list");
   1357c:	4b2f      	ldr	r3, [pc, #188]	; (1363c <bt_id_add.part.0+0x154>)
   1357e:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   13582:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13586:	aa04      	add	r2, sp, #16
   13588:	e7dd      	b.n	13546 <bt_id_add.part.0+0x5e>
		bt_dev.le.rl_entries++;
   1358a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1358e:	3301      	adds	r3, #1
   13590:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13594:	7a23      	ldrb	r3, [r4, #8]
   13596:	f043 0304 	orr.w	r3, r3, #4
   1359a:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1359c:	2001      	movs	r0, #1
   1359e:	f014 ff63 	bl	28468 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   135a2:	2100      	movs	r1, #0
   135a4:	4826      	ldr	r0, [pc, #152]	; (13640 <bt_id_add.part.0+0x158>)
}
   135a6:	b007      	add	sp, #28
   135a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   135ac:	f000 bbb4 	b.w	13d18 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   135b0:	4622      	mov	r2, r4
   135b2:	1c67      	adds	r7, r4, #1
   135b4:	4639      	mov	r1, r7
   135b6:	f812 0b2a 	ldrb.w	r0, [r2], #42
   135ba:	f014 ff16 	bl	283ea <hci_id_add>
	if (err) {
   135be:	4606      	mov	r6, r0
   135c0:	b120      	cbz	r0, 135cc <bt_id_add.part.0+0xe4>
		LOG_ERR("Failed to add IRK to controller");
   135c2:	4b20      	ldr	r3, [pc, #128]	; (13644 <bt_id_add.part.0+0x15c>)
		LOG_ERR("Failed to set privacy mode");
   135c4:	9305      	str	r3, [sp, #20]
   135c6:	2302      	movs	r3, #2
   135c8:	9304      	str	r3, [sp, #16]
   135ca:	e7da      	b.n	13582 <bt_id_add.part.0+0x9a>
	bt_dev.le.rl_entries++;
   135cc:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   135d0:	3301      	adds	r3, #1
   135d2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   135d6:	7a23      	ldrb	r3, [r4, #8]
   135d8:	f043 0304 	orr.w	r3, r3, #4
   135dc:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   135de:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   135e2:	075b      	lsls	r3, r3, #29
   135e4:	d401      	bmi.n	135ea <bt_id_add.part.0+0x102>
		LOG_WRN("Set privacy mode command is not supported");
   135e6:	4b18      	ldr	r3, [pc, #96]	; (13648 <bt_id_add.part.0+0x160>)
   135e8:	e7a7      	b.n	1353a <bt_id_add.part.0+0x52>
	bt_addr_le_copy(&cp.id_addr, addr);
   135ea:	4639      	mov	r1, r7
   135ec:	4668      	mov	r0, sp
   135ee:	f014 fef5 	bl	283dc <bt_addr_le_copy>
	cp.mode = mode;
   135f2:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   135f4:	2108      	movs	r1, #8
   135f6:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   135fa:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   135fe:	f7fe ff5b 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   13602:	4604      	mov	r4, r0
   13604:	b160      	cbz	r0, 13620 <bt_id_add.part.0+0x138>
   13606:	2208      	movs	r2, #8
   13608:	4669      	mov	r1, sp
   1360a:	300c      	adds	r0, #12
   1360c:	f016 fc62 	bl	29ed4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   13610:	4632      	mov	r2, r6
   13612:	4621      	mov	r1, r4
   13614:	f242 004e 	movw	r0, #8270	; 0x204e
   13618:	f7fe ff9c 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   1361c:	2800      	cmp	r0, #0
   1361e:	d0bd      	beq.n	1359c <bt_id_add.part.0+0xb4>
		LOG_ERR("Failed to set privacy mode");
   13620:	4b0a      	ldr	r3, [pc, #40]	; (1364c <bt_id_add.part.0+0x164>)
   13622:	e7cf      	b.n	135c4 <bt_id_add.part.0+0xdc>
   13624:	200080cc 	.word	0x200080cc
   13628:	20008000 	.word	0x20008000
   1362c:	000284bf 	.word	0x000284bf
   13630:	000301aa 	.word	0x000301aa
   13634:	0002c824 	.word	0x0002c824
   13638:	000301cf 	.word	0x000301cf
   1363c:	00030200 	.word	0x00030200
   13640:	00028499 	.word	0x00028499
   13644:	00030220 	.word	0x00030220
   13648:	00030240 	.word	0x00030240
   1364c:	0003026a 	.word	0x0003026a

00013650 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13650:	4b08      	ldr	r3, [pc, #32]	; (13674 <bt_id_pending_keys_update+0x24>)
   13652:	e8d3 2fef 	ldaex	r2, [r3]
   13656:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1365a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1365e:	2800      	cmp	r0, #0
   13660:	d1f7      	bne.n	13652 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   13662:	0413      	lsls	r3, r2, #16
   13664:	d504      	bpl.n	13670 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   13666:	2200      	movs	r2, #0
   13668:	2002      	movs	r0, #2
   1366a:	4903      	ldr	r1, [pc, #12]	; (13678 <bt_id_pending_keys_update+0x28>)
   1366c:	f006 bd5a 	b.w	1a124 <bt_keys_foreach_type>
}
   13670:	4770      	bx	lr
   13672:	bf00      	nop
   13674:	200080cc 	.word	0x200080cc
   13678:	0002854d 	.word	0x0002854d

0001367c <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   1367c:	2300      	movs	r3, #0
{
   1367e:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13680:	4905      	ldr	r1, [pc, #20]	; (13698 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   13682:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13686:	466a      	mov	r2, sp
   13688:	2002      	movs	r0, #2
   1368a:	f006 fd4b 	bl	1a124 <bt_keys_foreach_type>
}
   1368e:	9801      	ldr	r0, [sp, #4]
   13690:	b003      	add	sp, #12
   13692:	f85d fb04 	ldr.w	pc, [sp], #4
   13696:	bf00      	nop
   13698:	00013415 	.word	0x00013415

0001369c <bt_id_add>:
	CHECKIF(keys == NULL) {
   1369c:	4603      	mov	r3, r0
{
   1369e:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   136a0:	b170      	cbz	r0, 136c0 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   136a2:	490a      	ldr	r1, [pc, #40]	; (136cc <bt_id_add+0x30>)
   136a4:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   136a8:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
   136ac:	b10c      	cbz	r4, 136b2 <bt_id_add+0x16>
   136ae:	4294      	cmp	r4, r2
   136b0:	d208      	bcs.n	136c4 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   136b2:	3201      	adds	r2, #1
   136b4:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   136b8:	7a1a      	ldrb	r2, [r3, #8]
   136ba:	f042 0204 	orr.w	r2, r2, #4
   136be:	721a      	strb	r2, [r3, #8]
}
   136c0:	bc10      	pop	{r4}
   136c2:	4770      	bx	lr
   136c4:	bc10      	pop	{r4}
   136c6:	f7ff bf0f 	b.w	134e8 <bt_id_add.part.0>
   136ca:	bf00      	nop
   136cc:	20008000 	.word	0x20008000

000136d0 <bt_id_del>:
{
   136d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   136d4:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   136d6:	4605      	mov	r5, r0
{
   136d8:	af00      	add	r7, sp, #0
	CHECKIF(keys == NULL) {
   136da:	b398      	cbz	r0, 13744 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   136dc:	4c4e      	ldr	r4, [pc, #312]	; (13818 <bt_id_del+0x148>)
   136de:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   136e2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   136e6:	b1ca      	cbz	r2, 1371c <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   136e8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   136ea:	4293      	cmp	r3, r2
   136ec:	dc23      	bgt.n	13736 <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   136ee:	2100      	movs	r1, #0
   136f0:	2206      	movs	r2, #6
   136f2:	4608      	mov	r0, r1
   136f4:	f001 fd4c 	bl	15190 <bt_conn_lookup_state_le>
	if (conn) {
   136f8:	4606      	mov	r6, r0
   136fa:	b338      	cbz	r0, 1374c <bt_id_del+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   136fc:	34cc      	adds	r4, #204	; 0xcc
   136fe:	e8d4 3fef 	ldaex	r3, [r4]
   13702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13706:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1370a:	2a00      	cmp	r2, #0
   1370c:	d1f7      	bne.n	136fe <bt_id_del+0x2e>
	keys->state |= flag;
   1370e:	7a2b      	ldrb	r3, [r5, #8]
   13710:	f043 0302 	orr.w	r3, r3, #2
   13714:	722b      	strb	r3, [r5, #8]
		bt_conn_unref(conn);
   13716:	f001 fa15 	bl	14b44 <bt_conn_unref>
		return;
   1371a:	e013      	b.n	13744 <bt_id_del+0x74>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   1371c:	b95b      	cbnz	r3, 13736 <bt_id_del+0x66>
   1371e:	493f      	ldr	r1, [pc, #252]	; (1381c <bt_id_del+0x14c>)
   13720:	483f      	ldr	r0, [pc, #252]	; (13820 <bt_id_del+0x150>)
   13722:	f240 4323 	movw	r3, #1059	; 0x423
   13726:	4a3f      	ldr	r2, [pc, #252]	; (13824 <bt_id_del+0x154>)
   13728:	f013 f8fb 	bl	26922 <assert_print>
   1372c:	f240 4123 	movw	r1, #1059	; 0x423
   13730:	483c      	ldr	r0, [pc, #240]	; (13824 <bt_id_del+0x154>)
   13732:	f013 f8ef 	bl	26914 <assert_post_action>
			bt_dev.le.rl_entries--;
   13736:	3b01      	subs	r3, #1
   13738:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1373c:	7a2b      	ldrb	r3, [r5, #8]
   1373e:	f023 0304 	bic.w	r3, r3, #4
   13742:	722b      	strb	r3, [r5, #8]
}
   13744:	371c      	adds	r7, #28
   13746:	46bd      	mov	sp, r7
   13748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1374c:	4601      	mov	r1, r0
   1374e:	4836      	ldr	r0, [pc, #216]	; (13828 <bt_id_del+0x158>)
   13750:	f000 fae2 	bl	13d18 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13754:	4630      	mov	r0, r6
   13756:	f014 fe87 	bl	28468 <addr_res_enable>
	if (err) {
   1375a:	4606      	mov	r6, r0
   1375c:	b1d0      	cbz	r0, 13794 <bt_id_del+0xc4>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   1375e:	466d      	mov	r5, sp
   13760:	b088      	sub	sp, #32
   13762:	466b      	mov	r3, sp
   13764:	4a31      	ldr	r2, [pc, #196]	; (1382c <bt_id_del+0x15c>)
   13766:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1376a:	e9c3 2005 	strd	r2, r0, [r3, #20]
   1376e:	461a      	mov	r2, r3
   13770:	2303      	movs	r3, #3
   13772:	482f      	ldr	r0, [pc, #188]	; (13830 <bt_id_del+0x160>)
   13774:	f842 3f10 	str.w	r3, [r2, #16]!
   13778:	f014 fe73 	bl	28462 <z_log_msg_static_create.constprop.0>
   1377c:	46ad      	mov	sp, r5
	if (bt_dev.le.rl_entries) {
   1377e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13782:	b113      	cbz	r3, 1378a <bt_id_del+0xba>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13784:	2001      	movs	r0, #1
   13786:	f014 fe6f 	bl	28468 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1378a:	2100      	movs	r1, #0
   1378c:	4829      	ldr	r0, [pc, #164]	; (13834 <bt_id_del+0x164>)
   1378e:	f000 fac3 	bl	13d18 <bt_le_ext_adv_foreach>
   13792:	e7d7      	b.n	13744 <bt_id_del+0x74>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13794:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13798:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1379c:	429a      	cmp	r2, r3
   1379e:	d20c      	bcs.n	137ba <bt_id_del+0xea>
		bt_dev.le.rl_entries--;
   137a0:	3b01      	subs	r3, #1
   137a2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   137a6:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   137a8:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   137aa:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   137ae:	2002      	movs	r0, #2
   137b0:	4921      	ldr	r1, [pc, #132]	; (13838 <bt_id_del+0x168>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   137b2:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   137b4:	f006 fcb6 	bl	1a124 <bt_keys_foreach_type>
		goto done;
   137b8:	e7e1      	b.n	1377e <bt_id_del+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   137ba:	2107      	movs	r1, #7
   137bc:	f242 0028 	movw	r0, #8232	; 0x2028
   137c0:	f7fe fe7a 	bl	124b8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   137c4:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
   137c8:	4680      	mov	r8, r0
   137ca:	b958      	cbnz	r0, 137e4 <bt_id_del+0x114>
		LOG_ERR("Failed to remove IRK from controller");
   137cc:	4b1b      	ldr	r3, [pc, #108]	; (1383c <bt_id_del+0x16c>)
   137ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   137d2:	617b      	str	r3, [r7, #20]
   137d4:	2302      	movs	r3, #2
   137d6:	4816      	ldr	r0, [pc, #88]	; (13830 <bt_id_del+0x160>)
   137d8:	613b      	str	r3, [r7, #16]
   137da:	f107 0210 	add.w	r2, r7, #16
   137de:	f014 fe40 	bl	28462 <z_log_msg_static_create.constprop.0>
		goto done;
   137e2:	e7cc      	b.n	1377e <bt_id_del+0xae>
	return net_buf_simple_add(&buf->b, len);
   137e4:	2107      	movs	r1, #7
   137e6:	300c      	adds	r0, #12
   137e8:	f007 fb36 	bl	1ae58 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   137ec:	4649      	mov	r1, r9
   137ee:	f014 fdf5 	bl	283dc <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   137f2:	4632      	mov	r2, r6
   137f4:	4641      	mov	r1, r8
   137f6:	f242 0028 	movw	r0, #8232	; 0x2028
   137fa:	f7fe feab 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   137fe:	2800      	cmp	r0, #0
   13800:	d1e4      	bne.n	137cc <bt_id_del+0xfc>
	bt_dev.le.rl_entries--;
   13802:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13806:	3b01      	subs	r3, #1
   13808:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1380c:	7a2b      	ldrb	r3, [r5, #8]
   1380e:	f023 0304 	bic.w	r3, r3, #4
   13812:	722b      	strb	r3, [r5, #8]
   13814:	e7b3      	b.n	1377e <bt_id_del+0xae>
   13816:	bf00      	nop
   13818:	20008000 	.word	0x20008000
   1381c:	00030285 	.word	0x00030285
   13820:	0002d881 	.word	0x0002d881
   13824:	000300f4 	.word	0x000300f4
   13828:	000284bf 	.word	0x000284bf
   1382c:	0003029e 	.word	0x0003029e
   13830:	0002c824 	.word	0x0002c824
   13834:	00028499 	.word	0x00028499
   13838:	0002844d 	.word	0x0002844d
   1383c:	000302cb 	.word	0x000302cb

00013840 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13840:	b570      	push	{r4, r5, r6, lr}
   13842:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13844:	4604      	mov	r4, r0
{
   13846:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13848:	b920      	cbnz	r0, 13854 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1384a:	b31d      	cbz	r5, 13894 <bt_id_create+0x54>
			return -EINVAL;
   1384c:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   13850:	b006      	add	sp, #24
   13852:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13854:	4920      	ldr	r1, [pc, #128]	; (138d8 <bt_id_create+0x98>)
   13856:	f014 fdb1 	bl	283bc <bt_addr_le_eq>
   1385a:	2800      	cmp	r0, #0
   1385c:	d1f5      	bne.n	1384a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1385e:	7823      	ldrb	r3, [r4, #0]
   13860:	2b01      	cmp	r3, #1
   13862:	d104      	bne.n	1386e <bt_id_create+0x2e>
   13864:	79a3      	ldrb	r3, [r4, #6]
   13866:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1386a:	2bc0      	cmp	r3, #192	; 0xc0
   1386c:	d00a      	beq.n	13884 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   1386e:	4b1b      	ldr	r3, [pc, #108]	; (138dc <bt_id_create+0x9c>)
   13870:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13874:	9305      	str	r3, [sp, #20]
   13876:	2302      	movs	r3, #2
   13878:	4819      	ldr	r0, [pc, #100]	; (138e0 <bt_id_create+0xa0>)
   1387a:	aa04      	add	r2, sp, #16
   1387c:	9304      	str	r3, [sp, #16]
   1387e:	f014 fdf0 	bl	28462 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13882:	e7e3      	b.n	1384c <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   13884:	4620      	mov	r0, r4
   13886:	f7ff fd4f 	bl	13328 <id_find>
   1388a:	2800      	cmp	r0, #0
   1388c:	dbdd      	blt.n	1384a <bt_id_create+0xa>
			return -EALREADY;
   1388e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13892:	e7dd      	b.n	13850 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13894:	4d13      	ldr	r5, [pc, #76]	; (138e4 <bt_id_create+0xa4>)
   13896:	79eb      	ldrb	r3, [r5, #7]
   13898:	2b01      	cmp	r3, #1
   1389a:	d01a      	beq.n	138d2 <bt_id_create+0x92>
   1389c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   138a0:	f014 fd94 	bl	283cc <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   138a4:	07c3      	lsls	r3, r0, #31
   138a6:	d50b      	bpl.n	138c0 <bt_id_create+0x80>
	new_id = bt_dev.id_count;
   138a8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   138aa:	4621      	mov	r1, r4
   138ac:	4630      	mov	r0, r6
   138ae:	f7ff fd53 	bl	13358 <id_create.constprop.0>
	if (err) {
   138b2:	2800      	cmp	r0, #0
   138b4:	d1cc      	bne.n	13850 <bt_id_create+0x10>
		bt_dev.id_count++;
   138b6:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   138b8:	4630      	mov	r0, r6
		bt_dev.id_count++;
   138ba:	3301      	adds	r3, #1
   138bc:	71eb      	strb	r3, [r5, #7]
	return new_id;
   138be:	e7c7      	b.n	13850 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   138c0:	2c00      	cmp	r4, #0
   138c2:	d0c3      	beq.n	1384c <bt_id_create+0xc>
   138c4:	4620      	mov	r0, r4
   138c6:	4904      	ldr	r1, [pc, #16]	; (138d8 <bt_id_create+0x98>)
   138c8:	f014 fd78 	bl	283bc <bt_addr_le_eq>
   138cc:	2800      	cmp	r0, #0
   138ce:	d0eb      	beq.n	138a8 <bt_id_create+0x68>
   138d0:	e7bc      	b.n	1384c <bt_id_create+0xc>
		return -ENOMEM;
   138d2:	f06f 000b 	mvn.w	r0, #11
   138d6:	e7bb      	b.n	13850 <bt_id_create+0x10>
   138d8:	0002f895 	.word	0x0002f895
   138dc:	000302f0 	.word	0x000302f0
   138e0:	0002c824 	.word	0x0002c824
   138e4:	20008000 	.word	0x20008000

000138e8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   138e8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   138ea:	4604      	mov	r4, r0
{
   138ec:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   138ee:	b960      	cbnz	r0, 1390a <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   138f0:	4b1a      	ldr	r3, [pc, #104]	; (1395c <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   138f2:	9307      	str	r3, [sp, #28]
   138f4:	2302      	movs	r3, #2
   138f6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   138fa:	4819      	ldr	r0, [pc, #100]	; (13960 <bt_id_read_public_addr+0x78>)
   138fc:	aa06      	add	r2, sp, #24
   138fe:	9306      	str	r3, [sp, #24]
   13900:	f014 fdaf 	bl	28462 <z_log_msg_static_create.constprop.0>
		return 0U;
   13904:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13906:	b008      	add	sp, #32
   13908:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1390a:	2100      	movs	r1, #0
   1390c:	f241 0009 	movw	r0, #4105	; 0x1009
   13910:	aa01      	add	r2, sp, #4
   13912:	f7fe fe1f 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   13916:	4606      	mov	r6, r0
   13918:	b108      	cbz	r0, 1391e <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   1391a:	4b12      	ldr	r3, [pc, #72]	; (13964 <bt_id_read_public_addr+0x7c>)
   1391c:	e7e9      	b.n	138f2 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   1391e:	9b01      	ldr	r3, [sp, #4]
   13920:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13922:	68dd      	ldr	r5, [r3, #12]
   13924:	4910      	ldr	r1, [pc, #64]	; (13968 <bt_id_read_public_addr+0x80>)
   13926:	3501      	adds	r5, #1
   13928:	4628      	mov	r0, r5
   1392a:	f017 ffef 	bl	2b90c <memcmp>
   1392e:	b918      	cbnz	r0, 13938 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   13930:	9801      	ldr	r0, [sp, #4]
   13932:	f007 f96f 	bl	1ac14 <net_buf_unref>
		return 0U;
   13936:	e7e5      	b.n	13904 <bt_id_read_public_addr+0x1c>
   13938:	2206      	movs	r2, #6
   1393a:	4628      	mov	r0, r5
   1393c:	490b      	ldr	r1, [pc, #44]	; (1396c <bt_id_read_public_addr+0x84>)
   1393e:	f017 ffe5 	bl	2b90c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13942:	2800      	cmp	r0, #0
   13944:	d0f4      	beq.n	13930 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   13946:	4629      	mov	r1, r5
   13948:	1c60      	adds	r0, r4, #1
   1394a:	f014 fd42 	bl	283d2 <bt_addr_copy>
	net_buf_unref(rsp);
   1394e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13950:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13952:	f007 f95f 	bl	1ac14 <net_buf_unref>
	return 1U;
   13956:	2001      	movs	r0, #1
   13958:	e7d5      	b.n	13906 <bt_id_read_public_addr+0x1e>
   1395a:	bf00      	nop
   1395c:	0003031e 	.word	0x0003031e
   13960:	0002c824 	.word	0x0002c824
   13964:	00030337 	.word	0x00030337
   13968:	0002f8a2 	.word	0x0002f8a2
   1396c:	0002f89c 	.word	0x0002f89c

00013970 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13970:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13972:	4668      	mov	r0, sp
   13974:	f7ff ffb8 	bl	138e8 <bt_id_read_public_addr>
   13978:	4b04      	ldr	r3, [pc, #16]	; (1398c <bt_setup_public_id_addr+0x1c>)
   1397a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1397c:	b118      	cbz	r0, 13986 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1397e:	4669      	mov	r1, sp
   13980:	2000      	movs	r0, #0
   13982:	f7ff fce9 	bl	13358 <id_create.constprop.0>
}
   13986:	b003      	add	sp, #12
   13988:	f85d fb04 	ldr.w	pc, [sp], #4
   1398c:	20008000 	.word	0x20008000

00013990 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13990:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13992:	4b24      	ldr	r3, [pc, #144]	; (13a24 <bt_read_static_addr+0x94>)
{
   13994:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13996:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   1399a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1399c:	07db      	lsls	r3, r3, #31
{
   1399e:	b089      	sub	sp, #36	; 0x24
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   139a0:	d40d      	bmi.n	139be <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   139a2:	4b21      	ldr	r3, [pc, #132]	; (13a28 <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   139a4:	9307      	str	r3, [sp, #28]
		return 0;
   139a6:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   139a8:	2302      	movs	r3, #2
   139aa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   139ae:	481f      	ldr	r0, [pc, #124]	; (13a2c <bt_read_static_addr+0x9c>)
   139b0:	aa06      	add	r2, sp, #24
   139b2:	9306      	str	r3, [sp, #24]
   139b4:	f014 fd55 	bl	28462 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   139b8:	4620      	mov	r0, r4
   139ba:	b009      	add	sp, #36	; 0x24
   139bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   139be:	2100      	movs	r1, #0
   139c0:	f64f 4009 	movw	r0, #64521	; 0xfc09
   139c4:	aa01      	add	r2, sp, #4
   139c6:	f7fe fdc5 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   139ca:	4603      	mov	r3, r0
   139cc:	b108      	cbz	r0, 139d2 <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   139ce:	4b18      	ldr	r3, [pc, #96]	; (13a30 <bt_read_static_addr+0xa0>)
   139d0:	e7e8      	b.n	139a4 <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   139d2:	9801      	ldr	r0, [sp, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   139d4:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   139d6:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   139d8:	7854      	ldrb	r4, [r2, #1]
   139da:	3202      	adds	r2, #2
   139dc:	42b4      	cmp	r4, r6
   139de:	bf28      	it	cs
   139e0:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   139e2:	429c      	cmp	r4, r3
   139e4:	dc0e      	bgt.n	13a04 <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   139e6:	f007 f915 	bl	1ac14 <net_buf_unref>
	if (!cnt) {
   139ea:	2c00      	cmp	r4, #0
   139ec:	d1e4      	bne.n	139b8 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   139ee:	4b11      	ldr	r3, [pc, #68]	; (13a34 <bt_read_static_addr+0xa4>)
   139f0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   139f4:	9307      	str	r3, [sp, #28]
   139f6:	2302      	movs	r3, #2
   139f8:	480c      	ldr	r0, [pc, #48]	; (13a2c <bt_read_static_addr+0x9c>)
   139fa:	aa06      	add	r2, sp, #24
   139fc:	9306      	str	r3, [sp, #24]
   139fe:	f014 fd30 	bl	28462 <z_log_msg_static_create.constprop.0>
   13a02:	e7d9      	b.n	139b8 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13a04:	4611      	mov	r1, r2
   13a06:	fb07 5603 	mla	r6, r7, r3, r5
   13a0a:	f102 0c14 	add.w	ip, r2, #20
   13a0e:	f851 eb04 	ldr.w	lr, [r1], #4
   13a12:	4561      	cmp	r1, ip
   13a14:	f846 eb04 	str.w	lr, [r6], #4
   13a18:	d1f9      	bne.n	13a0e <bt_read_static_addr+0x7e>
   13a1a:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   13a1c:	3301      	adds	r3, #1
   13a1e:	8031      	strh	r1, [r6, #0]
   13a20:	3216      	adds	r2, #22
   13a22:	e7de      	b.n	139e2 <bt_read_static_addr+0x52>
   13a24:	20008000 	.word	0x20008000
   13a28:	00030355 	.word	0x00030355
   13a2c:	0002c824 	.word	0x0002c824
   13a30:	00030381 	.word	0x00030381
   13a34:	000303a1 	.word	0x000303a1

00013a38 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13a38:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13a3a:	4d15      	ldr	r5, [pc, #84]	; (13a90 <bt_setup_random_id_addr+0x58>)
{
   13a3c:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13a3e:	79ec      	ldrb	r4, [r5, #7]
   13a40:	b92c      	cbnz	r4, 13a4e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13a42:	2101      	movs	r1, #1
   13a44:	a802      	add	r0, sp, #8
   13a46:	f7ff ffa3 	bl	13990 <bt_read_static_addr>
   13a4a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13a4c:	b9c0      	cbnz	r0, 13a80 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13a4e:	2100      	movs	r1, #0
   13a50:	4608      	mov	r0, r1
}
   13a52:	b008      	add	sp, #32
   13a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13a58:	f7ff bef2 	b.w	13840 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13a5c:	ab02      	add	r3, sp, #8
   13a5e:	fb06 3102 	mla	r1, r6, r2, r3
   13a62:	f10d 0001 	add.w	r0, sp, #1
   13a66:	f014 fcb4 	bl	283d2 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13a6a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13a6c:	4669      	mov	r1, sp
   13a6e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13a70:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13a74:	f7ff fc70 	bl	13358 <id_create.constprop.0>
				if (err) {
   13a78:	3401      	adds	r4, #1
   13a7a:	b110      	cbz	r0, 13a82 <bt_setup_random_id_addr+0x4a>
}
   13a7c:	b008      	add	sp, #32
   13a7e:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13a80:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13a82:	79eb      	ldrb	r3, [r5, #7]
   13a84:	b2e2      	uxtb	r2, r4
   13a86:	4293      	cmp	r3, r2
   13a88:	d8e8      	bhi.n	13a5c <bt_setup_random_id_addr+0x24>
			return 0;
   13a8a:	2000      	movs	r0, #0
   13a8c:	e7f6      	b.n	13a7c <bt_setup_random_id_addr+0x44>
   13a8e:	bf00      	nop
   13a90:	20008000 	.word	0x20008000

00013a94 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a98:	4690      	mov	r8, r2
   13a9a:	460e      	mov	r6, r1
   13a9c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   13a9e:	4602      	mov	r2, r0
   13aa0:	2800      	cmp	r0, #0
   13aa2:	d04b      	beq.n	13b3c <bt_id_set_adv_own_addr+0xa8>
   13aa4:	2b00      	cmp	r3, #0
   13aa6:	d049      	beq.n	13b3c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13aa8:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   13aaa:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13aac:	d531      	bpl.n	13b12 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13aae:	4f25      	ldr	r7, [pc, #148]	; (13b44 <bt_id_set_adv_own_addr+0xb0>)
   13ab0:	f1b8 0f00 	cmp.w	r8, #0
   13ab4:	d013      	beq.n	13ade <bt_id_set_adv_own_addr+0x4a>
   13ab6:	0688      	lsls	r0, r1, #26
   13ab8:	d40a      	bmi.n	13ad0 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13aba:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13abe:	5cfb      	ldrb	r3, [r7, r3]
   13ac0:	2b01      	cmp	r3, #1
   13ac2:	d015      	beq.n	13af0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13ac4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13ac6:	06b2      	lsls	r2, r6, #26
   13ac8:	d50f      	bpl.n	13aea <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13aca:	f043 0302 	orr.w	r3, r3, #2
   13ace:	e00b      	b.n	13ae8 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13ad0:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   13ad4:	0659      	lsls	r1, r3, #25
   13ad6:	d4f0      	bmi.n	13aba <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   13ad8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13adc:	e006      	b.n	13aec <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13ade:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13ae2:	5cfb      	ldrb	r3, [r7, r3]
   13ae4:	2b01      	cmp	r3, #1
   13ae6:	d003      	beq.n	13af0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   13ae8:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13aea:	2000      	movs	r0, #0
}
   13aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13af0:	2107      	movs	r1, #7
   13af2:	fb01 7104 	mla	r1, r1, r4, r7
   13af6:	4610      	mov	r0, r2
   13af8:	3101      	adds	r1, #1
   13afa:	f014 fd04 	bl	28506 <bt_id_set_adv_random_addr>
				if (err) {
   13afe:	2800      	cmp	r0, #0
   13b00:	d1f4      	bne.n	13aec <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   13b02:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13b06:	5d3b      	ldrb	r3, [r7, r4]
   13b08:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13b0a:	f1b8 0f00 	cmp.w	r8, #0
   13b0e:	d0ec      	beq.n	13aea <bt_id_set_adv_own_addr+0x56>
   13b10:	e7d9      	b.n	13ac6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13b12:	074b      	lsls	r3, r1, #29
   13b14:	d50e      	bpl.n	13b34 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13b16:	4e0b      	ldr	r6, [pc, #44]	; (13b44 <bt_id_set_adv_own_addr+0xb0>)
   13b18:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13b1c:	5df3      	ldrb	r3, [r6, r7]
   13b1e:	2b01      	cmp	r3, #1
   13b20:	d1e2      	bne.n	13ae8 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13b22:	2107      	movs	r1, #7
   13b24:	fb11 3104 	smlabb	r1, r1, r4, r3
   13b28:	4431      	add	r1, r6
   13b2a:	f014 fcec 	bl	28506 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   13b2e:	5df3      	ldrb	r3, [r6, r7]
   13b30:	702b      	strb	r3, [r5, #0]
		if (err) {
   13b32:	e7db      	b.n	13aec <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   13b34:	f014 fcef 	bl	28516 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13b38:	2301      	movs	r3, #1
   13b3a:	e7f9      	b.n	13b30 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   13b3c:	f06f 0015 	mvn.w	r0, #21
   13b40:	e7d4      	b.n	13aec <bt_id_set_adv_own_addr+0x58>
   13b42:	bf00      	nop
   13b44:	20008000 	.word	0x20008000

00013b48 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b4c:	460c      	mov	r4, r1
   13b4e:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13b50:	2120      	movs	r1, #32
{
   13b52:	4692      	mov	sl, r2
   13b54:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13b56:	f7fe fcaf 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   13b5a:	4605      	mov	r5, r0
   13b5c:	2800      	cmp	r0, #0
   13b5e:	d05b      	beq.n	13c18 <hci_set_ad+0xd0>
   13b60:	2120      	movs	r1, #32
   13b62:	300c      	adds	r0, #12
   13b64:	f007 f978 	bl	1ae58 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13b68:	2220      	movs	r2, #32
   13b6a:	4681      	mov	r9, r0
   13b6c:	2100      	movs	r1, #0
   13b6e:	f017 ff17 	bl	2b9a0 <memset>
	uint8_t set_data_len = 0;
   13b72:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   13b74:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   13b78:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   13b7c:	2300      	movs	r3, #0
   13b7e:	f8d4 8000 	ldr.w	r8, [r4]
   13b82:	6862      	ldr	r2, [r4, #4]
   13b84:	4293      	cmp	r3, r2
   13b86:	d30c      	bcc.n	13ba2 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   13b88:	3408      	adds	r4, #8
   13b8a:	45a2      	cmp	sl, r4
   13b8c:	d1f6      	bne.n	13b7c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13b8e:	2200      	movs	r2, #0
   13b90:	4629      	mov	r1, r5
   13b92:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   13b94:	f889 6000 	strb.w	r6, [r9]
}
   13b98:	b009      	add	sp, #36	; 0x24
   13b9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13b9e:	f7fe bcd9 	b.w	12554 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   13ba2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   13ba6:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   13ba8:	1811      	adds	r1, r2, r0
   13baa:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   13bac:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   13bb0:	d91b      	bls.n	13bea <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13bb2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   13bb6:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13bba:	d101      	bne.n	13bc0 <hci_set_ad+0x78>
   13bbc:	2a00      	cmp	r2, #0
   13bbe:	dc12      	bgt.n	13be6 <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   13bc0:	4b17      	ldr	r3, [pc, #92]	; (13c20 <hci_set_ad+0xd8>)
   13bc2:	9307      	str	r3, [sp, #28]
   13bc4:	2302      	movs	r3, #2
   13bc6:	9306      	str	r3, [sp, #24]
   13bc8:	2300      	movs	r3, #0
   13bca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13bce:	4815      	ldr	r0, [pc, #84]	; (13c24 <hci_set_ad+0xdc>)
   13bd0:	aa06      	add	r2, sp, #24
   13bd2:	f7fa fcdd 	bl	e590 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   13bd6:	4628      	mov	r0, r5
   13bd8:	f007 f81c 	bl	1ac14 <net_buf_unref>
					return -EINVAL;
   13bdc:	f06f 0015 	mvn.w	r0, #21
}
   13be0:	b009      	add	sp, #36	; 0x24
   13be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13be6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13bea:	b2d7      	uxtb	r7, r2
   13bec:	1c79      	adds	r1, r7, #1
   13bee:	f80b 1006 	strb.w	r1, [fp, r6]
   13bf2:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   13bf4:	b2c9      	uxtb	r1, r1
   13bf6:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13bfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13bfe:	fa5b f080 	uxtab	r0, fp, r0
   13c02:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   13c04:	3702      	adds	r7, #2
   13c06:	f017 fe91 	bl	2b92c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13c0a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   13c0c:	4437      	add	r7, r6
   13c0e:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   13c10:	3301      	adds	r3, #1
   13c12:	f108 0808 	add.w	r8, r8, #8
   13c16:	e7b4      	b.n	13b82 <hci_set_ad+0x3a>
		return -ENOBUFS;
   13c18:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13c1c:	e7e0      	b.n	13be0 <hci_set_ad+0x98>
   13c1e:	bf00      	nop
   13c20:	000303d0 	.word	0x000303d0
   13c24:	0002c7dc 	.word	0x0002c7dc

00013c28 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13c28:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13c2a:	4605      	mov	r5, r0
   13c2c:	4b16      	ldr	r3, [pc, #88]	; (13c88 <le_adv_start_add_conn+0x60>)
   13c2e:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   13c32:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   13c34:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13c38:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   13c3a:	2207      	movs	r2, #7
   13c3c:	4628      	mov	r0, r5
   13c3e:	4913      	ldr	r1, [pc, #76]	; (13c8c <le_adv_start_add_conn+0x64>)
   13c40:	f017 fe64 	bl	2b90c <memcmp>
   13c44:	4603      	mov	r3, r0
   13c46:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13c48:	b96b      	cbnz	r3, 13c66 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13c4a:	4911      	ldr	r1, [pc, #68]	; (13c90 <le_adv_start_add_conn+0x68>)
   13c4c:	f001 fa38 	bl	150c0 <bt_conn_add_le>
		if (!conn) {
   13c50:	4604      	mov	r4, r0
   13c52:	b910      	cbnz	r0, 13c5a <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   13c54:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   13c58:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   13c5a:	2104      	movs	r1, #4
   13c5c:	f000 ffaa 	bl	14bb4 <bt_conn_set_state>
		return 0;
   13c60:	2000      	movs	r0, #0
		*out_conn = conn;
   13c62:	6034      	str	r4, [r6, #0]
   13c64:	e7f8      	b.n	13c58 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   13c66:	4629      	mov	r1, r5
   13c68:	f001 fa62 	bl	15130 <bt_conn_exists_le>
   13c6c:	b940      	cbnz	r0, 13c80 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   13c6e:	7820      	ldrb	r0, [r4, #0]
   13c70:	4629      	mov	r1, r5
   13c72:	f001 fa25 	bl	150c0 <bt_conn_add_le>
	if (!conn) {
   13c76:	4604      	mov	r4, r0
   13c78:	2800      	cmp	r0, #0
   13c7a:	d0eb      	beq.n	13c54 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   13c7c:	2105      	movs	r1, #5
   13c7e:	e7ed      	b.n	13c5c <le_adv_start_add_conn+0x34>
		return -EINVAL;
   13c80:	f06f 0015 	mvn.w	r0, #21
   13c84:	e7e8      	b.n	13c58 <le_adv_start_add_conn+0x30>
   13c86:	bf00      	nop
   13c88:	20008000 	.word	0x20008000
   13c8c:	0002f895 	.word	0x0002f895
   13c90:	0002f88e 	.word	0x0002f88e

00013c94 <valid_adv_param>:
{
   13c94:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13c96:	6843      	ldr	r3, [r0, #4]
{
   13c98:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13c9a:	0558      	lsls	r0, r3, #21
   13c9c:	d501      	bpl.n	13ca2 <valid_adv_param+0xe>
		return false;
   13c9e:	2000      	movs	r0, #0
}
   13ca0:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13ca2:	6922      	ldr	r2, [r4, #16]
   13ca4:	b10a      	cbz	r2, 13caa <valid_adv_param+0x16>
   13ca6:	07d9      	lsls	r1, r3, #31
   13ca8:	d5f9      	bpl.n	13c9e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13caa:	4d19      	ldr	r5, [pc, #100]	; (13d10 <valid_adv_param+0x7c>)
   13cac:	7820      	ldrb	r0, [r4, #0]
   13cae:	79eb      	ldrb	r3, [r5, #7]
   13cb0:	4283      	cmp	r3, r0
   13cb2:	d9f4      	bls.n	13c9e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   13cb4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13cb8:	2207      	movs	r2, #7
   13cba:	4916      	ldr	r1, [pc, #88]	; (13d14 <valid_adv_param+0x80>)
   13cbc:	4428      	add	r0, r5
   13cbe:	f017 fe25 	bl	2b90c <memcmp>
	if (param->id >= bt_dev.id_count ||
   13cc2:	2800      	cmp	r0, #0
   13cc4:	d0eb      	beq.n	13c9e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13cc6:	6860      	ldr	r0, [r4, #4]
   13cc8:	07c2      	lsls	r2, r0, #31
   13cca:	d406      	bmi.n	13cda <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   13ccc:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   13cd0:	2b08      	cmp	r3, #8
   13cd2:	d802      	bhi.n	13cda <valid_adv_param+0x46>
   13cd4:	68a3      	ldr	r3, [r4, #8]
   13cd6:	2b9f      	cmp	r3, #159	; 0x9f
   13cd8:	d9e1      	bls.n	13c9e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   13cda:	f010 0f30 	tst.w	r0, #48	; 0x30
   13cde:	d002      	beq.n	13ce6 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   13ce0:	6923      	ldr	r3, [r4, #16]
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	d0db      	beq.n	13c9e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   13ce6:	06c3      	lsls	r3, r0, #27
   13ce8:	d401      	bmi.n	13cee <valid_adv_param+0x5a>
   13cea:	6923      	ldr	r3, [r4, #16]
   13cec:	b943      	cbnz	r3, 13d00 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   13cee:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13cf2:	429a      	cmp	r2, r3
   13cf4:	d8d3      	bhi.n	13c9e <valid_adv_param+0xa>
   13cf6:	2a1f      	cmp	r2, #31
   13cf8:	d9d1      	bls.n	13c9e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   13cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13cfe:	d8ce      	bhi.n	13c9e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   13d00:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   13d04:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   13d08:	bf18      	it	ne
   13d0a:	2001      	movne	r0, #1
   13d0c:	e7c8      	b.n	13ca0 <valid_adv_param+0xc>
   13d0e:	bf00      	nop
   13d10:	20008000 	.word	0x20008000
   13d14:	0002f895 	.word	0x0002f895

00013d18 <bt_le_ext_adv_foreach>:
{
   13d18:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   13d1a:	4801      	ldr	r0, [pc, #4]	; (13d20 <bt_le_ext_adv_foreach+0x8>)
   13d1c:	4718      	bx	r3
   13d1e:	bf00      	nop
   13d20:	20008018 	.word	0x20008018

00013d24 <bt_le_adv_lookup_legacy>:
}
   13d24:	4800      	ldr	r0, [pc, #0]	; (13d28 <bt_le_adv_lookup_legacy+0x4>)
   13d26:	4770      	bx	lr
   13d28:	20008018 	.word	0x20008018

00013d2c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   13d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d30:	b093      	sub	sp, #76	; 0x4c
   13d32:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   13d34:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   13d36:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   13d3a:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   13d3c:	ebba 0403 	subs.w	r4, sl, r3
   13d40:	4890      	ldr	r0, [pc, #576]	; (13f84 <bt_le_adv_start_legacy+0x258>)
   13d42:	bf18      	it	ne
   13d44:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   13d46:	9307      	str	r3, [sp, #28]
   13d48:	f014 fc21 	bl	2858e <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13d4c:	0747      	lsls	r7, r0, #29
{
   13d4e:	460d      	mov	r5, r1
   13d50:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13d52:	f140 810d 	bpl.w	13f70 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   13d56:	4608      	mov	r0, r1
   13d58:	f7ff ff9c 	bl	13c94 <valid_adv_param>
   13d5c:	b928      	cbnz	r0, 13d6a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   13d5e:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   13d62:	4620      	mov	r0, r4
   13d64:	b013      	add	sp, #76	; 0x4c
   13d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   13d6a:	4628      	mov	r0, r5
   13d6c:	f014 fbea 	bl	28544 <bt_id_adv_random_addr_check>
   13d70:	4681      	mov	r9, r0
   13d72:	2800      	cmp	r0, #0
   13d74:	d0f3      	beq.n	13d5e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   13d76:	f106 0810 	add.w	r8, r6, #16
   13d7a:	4640      	mov	r0, r8
   13d7c:	f014 fc07 	bl	2858e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13d80:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   13d84:	0600      	lsls	r0, r0, #24
   13d86:	f100 80f6 	bmi.w	13f76 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   13d8a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   13d8e:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   13d92:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   13d94:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   13d96:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   13d9a:	68eb      	ldr	r3, [r5, #12]
   13d9c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   13da0:	f014 fbe6 	bl	28570 <get_adv_channel_map>
	if (adv->id != param->id) {
   13da4:	7832      	ldrb	r2, [r6, #0]
   13da6:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   13da8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   13dac:	429a      	cmp	r2, r3
   13dae:	d004      	beq.n	13dba <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13db0:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   13db4:	4873      	ldr	r0, [pc, #460]	; (13f84 <bt_le_adv_start_legacy+0x258>)
   13db6:	f014 fbed 	bl	28594 <atomic_and>
	adv->id = param->id;
   13dba:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   13dbc:	4a72      	ldr	r2, [pc, #456]	; (13f88 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   13dbe:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   13dc0:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   13dc4:	4630      	mov	r0, r6
   13dc6:	4622      	mov	r2, r4
   13dc8:	6869      	ldr	r1, [r5, #4]
   13dca:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   13dce:	f7ff fe61 	bl	13a94 <bt_id_set_adv_own_addr>
	if (err) {
   13dd2:	4604      	mov	r4, r0
   13dd4:	2800      	cmp	r0, #0
   13dd6:	d1c4      	bne.n	13d62 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   13dd8:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   13ddc:	f1ba 0f00 	cmp.w	sl, #0
   13de0:	d013      	beq.n	13e0a <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   13de2:	6929      	ldr	r1, [r5, #16]
   13de4:	f014 fbe1 	bl	285aa <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   13de8:	4628      	mov	r0, r5
   13dea:	f014 fc6a 	bl	286c2 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13dee:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   13df0:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13df2:	07d9      	lsls	r1, r3, #31
   13df4:	d416      	bmi.n	13e24 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   13df6:	059b      	lsls	r3, r3, #22
   13df8:	d403      	bmi.n	13e02 <bt_le_adv_start_legacy+0xd6>
   13dfa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13dfc:	b90b      	cbnz	r3, 13e02 <bt_le_adv_start_legacy+0xd6>
   13dfe:	2f02      	cmp	r7, #2
   13e00:	d159      	bne.n	13eb6 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   13e02:	2302      	movs	r3, #2
   13e04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   13e08:	e019      	b.n	13e3e <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   13e0a:	4960      	ldr	r1, [pc, #384]	; (13f8c <bt_le_adv_start_legacy+0x260>)
   13e0c:	f014 fbcd 	bl	285aa <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   13e10:	4628      	mov	r0, r5
   13e12:	f014 fc56 	bl	286c2 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13e16:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   13e18:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13e1a:	07da      	lsls	r2, r3, #31
   13e1c:	d5eb      	bpl.n	13df6 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   13e1e:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   13e22:	e00c      	b.n	13e3e <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   13e24:	f013 0f10 	tst.w	r3, #16
   13e28:	bf0c      	ite	eq
   13e2a:	2301      	moveq	r3, #1
   13e2c:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   13e2e:	6929      	ldr	r1, [r5, #16]
   13e30:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   13e34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   13e38:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   13e3a:	f014 fbb6 	bl	285aa <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   13e3e:	210f      	movs	r1, #15
   13e40:	f242 0006 	movw	r0, #8198	; 0x2006
   13e44:	f7fe fb38 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   13e48:	4604      	mov	r4, r0
   13e4a:	2800      	cmp	r0, #0
   13e4c:	f000 8096 	beq.w	13f7c <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13e50:	220f      	movs	r2, #15
   13e52:	a908      	add	r1, sp, #32
   13e54:	300c      	adds	r0, #12
   13e56:	f016 f83d 	bl	29ed4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   13e5a:	4621      	mov	r1, r4
   13e5c:	2200      	movs	r2, #0
   13e5e:	f242 0006 	movw	r0, #8198	; 0x2006
   13e62:	f7fe fb77 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   13e66:	4604      	mov	r4, r0
   13e68:	2800      	cmp	r0, #0
   13e6a:	f47f af7a 	bne.w	13d62 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   13e6e:	f1ba 0f00 	cmp.w	sl, #0
   13e72:	d026      	beq.n	13ec2 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13e74:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13e76:	07dc      	lsls	r4, r3, #31
   13e78:	d431      	bmi.n	13ede <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   13e7a:	2101      	movs	r1, #1
   13e7c:	4630      	mov	r0, r6
   13e7e:	f014 fc30 	bl	286e2 <bt_le_adv_set_enable_legacy>
	if (err) {
   13e82:	4604      	mov	r4, r0
   13e84:	2800      	cmp	r0, #0
   13e86:	d06b      	beq.n	13f60 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   13e88:	4b41      	ldr	r3, [pc, #260]	; (13f90 <bt_le_adv_start_legacy+0x264>)
   13e8a:	9311      	str	r3, [sp, #68]	; 0x44
   13e8c:	2302      	movs	r3, #2
   13e8e:	9310      	str	r3, [sp, #64]	; 0x40
   13e90:	2300      	movs	r3, #0
   13e92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13e96:	483f      	ldr	r0, [pc, #252]	; (13f94 <bt_le_adv_start_legacy+0x268>)
   13e98:	aa10      	add	r2, sp, #64	; 0x40
   13e9a:	f7fa fb79 	bl	e590 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13e9e:	9d07      	ldr	r5, [sp, #28]
   13ea0:	2d00      	cmp	r5, #0
   13ea2:	f43f af5e 	beq.w	13d62 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13ea6:	4628      	mov	r0, r5
   13ea8:	2100      	movs	r1, #0
   13eaa:	f000 fe83 	bl	14bb4 <bt_conn_set_state>
			bt_conn_unref(conn);
   13eae:	4628      	mov	r0, r5
   13eb0:	f000 fe48 	bl	14b44 <bt_conn_unref>
   13eb4:	e755      	b.n	13d62 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   13eb6:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   13eb8:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   13ebc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   13ec0:	e7bd      	b.n	13e3e <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   13ec2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13ec4:	4659      	mov	r1, fp
   13ec6:	9300      	str	r3, [sp, #0]
   13ec8:	4630      	mov	r0, r6
   13eca:	e9cd 9701 	strd	r9, r7, [sp, #4]
   13ece:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   13ed0:	9a05      	ldr	r2, [sp, #20]
   13ed2:	f014 fb84 	bl	285de <le_adv_update.constprop.0>
		if (err) {
   13ed6:	4604      	mov	r4, r0
   13ed8:	2800      	cmp	r0, #0
   13eda:	d0cb      	beq.n	13e74 <bt_le_adv_start_legacy+0x148>
   13edc:	e741      	b.n	13d62 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   13ede:	4630      	mov	r0, r6
   13ee0:	a907      	add	r1, sp, #28
   13ee2:	f7ff fea1 	bl	13c28 <le_adv_start_add_conn>
		if (err) {
   13ee6:	4604      	mov	r4, r0
   13ee8:	2800      	cmp	r0, #0
   13eea:	d0c6      	beq.n	13e7a <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   13eec:	f110 0f0c 	cmn.w	r0, #12
   13ef0:	f47f af37 	bne.w	13d62 <bt_le_adv_start_legacy+0x36>
   13ef4:	f1ba 0f00 	cmp.w	sl, #0
   13ef8:	f47f af33 	bne.w	13d62 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   13efc:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   13efe:	0798      	lsls	r0, r3, #30
   13f00:	f53f af2f 	bmi.w	13d62 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   13f04:	686c      	ldr	r4, [r5, #4]
   13f06:	f084 0402 	eor.w	r4, r4, #2
   13f0a:	f3c4 0440 	ubfx	r4, r4, #1, #1
   13f0e:	f004 0201 	and.w	r2, r4, #1
   13f12:	210e      	movs	r1, #14
   13f14:	4640      	mov	r0, r8
   13f16:	f014 fb4f 	bl	285b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   13f1a:	1e7b      	subs	r3, r7, #1
   13f1c:	425a      	negs	r2, r3
   13f1e:	415a      	adcs	r2, r3
   13f20:	2108      	movs	r1, #8
   13f22:	4640      	mov	r0, r8
   13f24:	f014 fb48 	bl	285b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   13f28:	1eb9      	subs	r1, r7, #2
   13f2a:	424a      	negs	r2, r1
   13f2c:	414a      	adcs	r2, r1
   13f2e:	4640      	mov	r0, r8
   13f30:	2109      	movs	r1, #9
   13f32:	f014 fb41 	bl	285b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   13f36:	686a      	ldr	r2, [r5, #4]
   13f38:	210a      	movs	r1, #10
   13f3a:	4640      	mov	r0, r8
   13f3c:	f002 0201 	and.w	r2, r2, #1
   13f40:	f014 fb3a 	bl	285b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   13f44:	464a      	mov	r2, r9
   13f46:	210b      	movs	r1, #11
   13f48:	4640      	mov	r0, r8
   13f4a:	f014 fb35 	bl	285b8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   13f4e:	686a      	ldr	r2, [r5, #4]
   13f50:	210d      	movs	r1, #13
   13f52:	4640      	mov	r0, r8
   13f54:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13f58:	f014 fb2e 	bl	285b8 <atomic_set_bit_to>
	return 0;
   13f5c:	2400      	movs	r4, #0
   13f5e:	e700      	b.n	13d62 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13f60:	9807      	ldr	r0, [sp, #28]
   13f62:	b108      	cbz	r0, 13f68 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   13f64:	f000 fdee 	bl	14b44 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   13f68:	f1ba 0f00 	cmp.w	sl, #0
   13f6c:	d1cf      	bne.n	13f0e <bt_le_adv_start_legacy+0x1e2>
   13f6e:	e7c9      	b.n	13f04 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   13f70:	f06f 040a 	mvn.w	r4, #10
   13f74:	e6f5      	b.n	13d62 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   13f76:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13f7a:	e6f2      	b.n	13d62 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   13f7c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13f80:	e6ef      	b.n	13d62 <bt_le_adv_start_legacy+0x36>
   13f82:	bf00      	nop
   13f84:	200080cc 	.word	0x200080cc
   13f88:	20008000 	.word	0x20008000
   13f8c:	0002f895 	.word	0x0002f895
   13f90:	000303e9 	.word	0x000303e9
   13f94:	0002c7dc 	.word	0x0002c7dc

00013f98 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   13f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13f9a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13f9c:	9a06      	ldr	r2, [sp, #24]
{
   13f9e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13fa0:	e9cd 3200 	strd	r3, r2, [sp]
   13fa4:	462b      	mov	r3, r5
   13fa6:	460a      	mov	r2, r1
   13fa8:	4601      	mov	r1, r0
   13faa:	4811      	ldr	r0, [pc, #68]	; (13ff0 <bt_le_adv_start+0x58>)
   13fac:	f7ff febe 	bl	13d2c <bt_le_adv_start_legacy>
   13fb0:	4621      	mov	r1, r4
   13fb2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   13fb4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   13fb6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   13fba:	429d      	cmp	r5, r3
   13fbc:	d102      	bne.n	13fc4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   13fbe:	4630      	mov	r0, r6
   13fc0:	b002      	add	sp, #8
   13fc2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   13fc4:	880a      	ldrh	r2, [r1, #0]
   13fc6:	4282      	cmp	r2, r0
   13fc8:	d104      	bne.n	13fd4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   13fca:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   13fcc:	b112      	cbz	r2, 13fd4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   13fce:	7812      	ldrb	r2, [r2, #0]
   13fd0:	07d2      	lsls	r2, r2, #31
   13fd2:	d402      	bmi.n	13fda <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   13fd4:	3301      	adds	r3, #1
   13fd6:	3108      	adds	r1, #8
   13fd8:	e7ef      	b.n	13fba <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   13fda:	4906      	ldr	r1, [pc, #24]	; (13ff4 <bt_le_adv_start+0x5c>)
   13fdc:	4806      	ldr	r0, [pc, #24]	; (13ff8 <bt_le_adv_start+0x60>)
   13fde:	f00e f8fb 	bl	221d8 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   13fe2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   13fe6:	2300      	movs	r3, #0
   13fe8:	4803      	ldr	r0, [pc, #12]	; (13ff8 <bt_le_adv_start+0x60>)
   13fea:	f00e fa11 	bl	22410 <k_work_reschedule>
   13fee:	e7e6      	b.n	13fbe <bt_le_adv_start+0x26>
   13ff0:	20008018 	.word	0x20008018
   13ff4:	00014081 	.word	0x00014081
   13ff8:	20008030 	.word	0x20008030

00013ffc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   13ffc:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   13ffe:	481a      	ldr	r0, [pc, #104]	; (14068 <bt_le_adv_stop+0x6c>)
   14000:	f014 fb96 	bl	28730 <bt_le_lim_adv_cancel_timeout>
   14004:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   14008:	4818      	ldr	r0, [pc, #96]	; (1406c <bt_le_adv_stop+0x70>)
   1400a:	f014 fac3 	bl	28594 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1400e:	4817      	ldr	r0, [pc, #92]	; (1406c <bt_le_adv_stop+0x70>)
   14010:	f014 fabd 	bl	2858e <atomic_get>
   14014:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14016:	061a      	lsls	r2, r3, #24
   14018:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   1401c:	d523      	bpl.n	14066 <bt_le_adv_stop+0x6a>
   1401e:	4813      	ldr	r0, [pc, #76]	; (1406c <bt_le_adv_stop+0x70>)
   14020:	f014 fab5 	bl	2858e <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14024:	0543      	lsls	r3, r0, #21
   14026:	d514      	bpl.n	14052 <bt_le_adv_stop+0x56>
   14028:	2207      	movs	r2, #7
   1402a:	4911      	ldr	r1, [pc, #68]	; (14070 <bt_le_adv_stop+0x74>)
   1402c:	4811      	ldr	r0, [pc, #68]	; (14074 <bt_le_adv_stop+0x78>)
   1402e:	f017 fc6d 	bl	2b90c <memcmp>
   14032:	4b11      	ldr	r3, [pc, #68]	; (14078 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14034:	b998      	cbnz	r0, 1405e <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   14036:	2204      	movs	r2, #4
   14038:	4910      	ldr	r1, [pc, #64]	; (1407c <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1403a:	7e18      	ldrb	r0, [r3, #24]
   1403c:	f001 f8a8 	bl	15190 <bt_conn_lookup_state_le>
   14040:	4604      	mov	r4, r0
	if (conn) {
   14042:	b130      	cbz	r0, 14052 <bt_le_adv_stop+0x56>
		conn->err = status;
   14044:	2100      	movs	r1, #0
   14046:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14048:	f000 fdb4 	bl	14bb4 <bt_conn_set_state>
		bt_conn_unref(conn);
   1404c:	4620      	mov	r0, r4
   1404e:	f000 fd79 	bl	14b44 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   14052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   14056:	2100      	movs	r1, #0
   14058:	4803      	ldr	r0, [pc, #12]	; (14068 <bt_le_adv_stop+0x6c>)
   1405a:	f014 bb42 	b.w	286e2 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1405e:	2205      	movs	r2, #5
   14060:	f103 0121 	add.w	r1, r3, #33	; 0x21
   14064:	e7e9      	b.n	1403a <bt_le_adv_stop+0x3e>
}
   14066:	bd10      	pop	{r4, pc}
   14068:	20008018 	.word	0x20008018
   1406c:	20008028 	.word	0x20008028
   14070:	0002f895 	.word	0x0002f895
   14074:	20008021 	.word	0x20008021
   14078:	20008000 	.word	0x20008000
   1407c:	0002f88e 	.word	0x0002f88e

00014080 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   14080:	b580      	push	{r7, lr}
   14082:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   14084:	f7ff ffba 	bl	13ffc <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   14088:	b088      	sub	sp, #32
   1408a:	466a      	mov	r2, sp
   1408c:	4b06      	ldr	r3, [pc, #24]	; (140a8 <adv_timeout+0x28>)
   1408e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14092:	2303      	movs	r3, #3
   14094:	f842 3f10 	str.w	r3, [r2, #16]!
   14098:	2300      	movs	r3, #0
   1409a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1409e:	4803      	ldr	r0, [pc, #12]	; (140ac <adv_timeout+0x2c>)
   140a0:	f7fa fa76 	bl	e590 <z_impl_z_log_msg_static_create>
}
   140a4:	46bd      	mov	sp, r7
   140a6:	bd80      	pop	{r7, pc}
   140a8:	00030404 	.word	0x00030404
   140ac:	0002c7dc 	.word	0x0002c7dc

000140b0 <bt_le_adv_resume>:
{
   140b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   140b2:	4c1e      	ldr	r4, [pc, #120]	; (1412c <bt_le_adv_resume+0x7c>)
   140b4:	4620      	mov	r0, r4
   140b6:	f014 fa6a 	bl	2858e <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   140ba:	0440      	lsls	r0, r0, #17
   140bc:	d534      	bpl.n	14128 <bt_le_adv_resume+0x78>
   140be:	4620      	mov	r0, r4
   140c0:	f014 fa65 	bl	2858e <atomic_get>
   140c4:	0601      	lsls	r1, r0, #24
   140c6:	d42f      	bmi.n	14128 <bt_le_adv_resume+0x78>
   140c8:	4620      	mov	r0, r4
   140ca:	f014 fa60 	bl	2858e <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   140ce:	0542      	lsls	r2, r0, #21
   140d0:	d52a      	bpl.n	14128 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   140d2:	a901      	add	r1, sp, #4
   140d4:	f1a4 0010 	sub.w	r0, r4, #16
   140d8:	f7ff fda6 	bl	13c28 <le_adv_start_add_conn>
	if (err) {
   140dc:	4605      	mov	r5, r0
   140de:	bb18      	cbnz	r0, 14128 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   140e0:	2101      	movs	r1, #1
   140e2:	f1a4 0010 	sub.w	r0, r4, #16
   140e6:	f014 fafc 	bl	286e2 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   140ea:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   140ec:	b928      	cbnz	r0, 140fa <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   140ee:	4630      	mov	r0, r6
}
   140f0:	b002      	add	sp, #8
   140f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   140f6:	f000 bd25 	b.w	14b44 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   140fa:	4629      	mov	r1, r5
   140fc:	4630      	mov	r0, r6
   140fe:	f000 fd59 	bl	14bb4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14102:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   14106:	4620      	mov	r0, r4
   14108:	f014 fa44 	bl	28594 <atomic_and>
   1410c:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1410e:	4630      	mov	r0, r6
   14110:	f000 fd18 	bl	14b44 <bt_conn_unref>
	if (persist_paused) {
   14114:	046b      	lsls	r3, r5, #17
   14116:	d507      	bpl.n	14128 <bt_le_adv_resume+0x78>
   14118:	e8d4 3fef 	ldaex	r3, [r4]
   1411c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   14120:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14124:	2a00      	cmp	r2, #0
   14126:	d1f7      	bne.n	14118 <bt_le_adv_resume+0x68>
}
   14128:	b002      	add	sp, #8
   1412a:	bd70      	pop	{r4, r5, r6, pc}
   1412c:	20008028 	.word	0x20008028

00014130 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14130:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   14132:	b508      	push	{r3, lr}
   14134:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14138:	d910      	bls.n	1415c <sys_memcpy_swap.constprop.0+0x2c>
   1413a:	4298      	cmp	r0, r3
   1413c:	d213      	bcs.n	14166 <sys_memcpy_swap.constprop.0+0x36>
   1413e:	490e      	ldr	r1, [pc, #56]	; (14178 <sys_memcpy_swap.constprop.0+0x48>)
   14140:	f240 2315 	movw	r3, #533	; 0x215
   14144:	4a0d      	ldr	r2, [pc, #52]	; (1417c <sys_memcpy_swap.constprop.0+0x4c>)
   14146:	480e      	ldr	r0, [pc, #56]	; (14180 <sys_memcpy_swap.constprop.0+0x50>)
   14148:	f012 fbeb 	bl	26922 <assert_print>
   1414c:	480d      	ldr	r0, [pc, #52]	; (14184 <sys_memcpy_swap.constprop.0+0x54>)
   1414e:	f012 fbe8 	bl	26922 <assert_print>
   14152:	f240 2115 	movw	r1, #533	; 0x215
   14156:	4809      	ldr	r0, [pc, #36]	; (1417c <sys_memcpy_swap.constprop.0+0x4c>)
   14158:	f012 fbdc 	bl	26914 <assert_post_action>
   1415c:	d0ef      	beq.n	1413e <sys_memcpy_swap.constprop.0+0xe>
   1415e:	f100 0210 	add.w	r2, r0, #16
   14162:	4291      	cmp	r1, r2
   14164:	e7ea      	b.n	1413c <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   14166:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   14168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1416c:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   1416e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   14172:	d1f9      	bne.n	14168 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   14174:	bd08      	pop	{r3, pc}
   14176:	bf00      	nop
   14178:	0003045c 	.word	0x0003045c
   1417c:	0003042a 	.word	0x0003042a
   14180:	0002d881 	.word	0x0002d881
   14184:	000304b3 	.word	0x000304b3

00014188 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   14188:	b530      	push	{r4, r5, lr}
   1418a:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1418c:	2120      	movs	r1, #32
   1418e:	a80a      	add	r0, sp, #40	; 0x28
   14190:	f7fe fa84 	bl	1269c <bt_hci_le_rand>
	if (ret) {
   14194:	4604      	mov	r4, r0
   14196:	bb18      	cbnz	r0, 141e0 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   14198:	f017 faaf 	bl	2b6fa <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1419c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   141a0:	fba0 2305 	umull	r2, r3, r0, r5
   141a4:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   141a8:	2308      	movs	r3, #8
   141aa:	0bd2      	lsrs	r2, r2, #15
   141ac:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   141b0:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   141b2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   141b6:	9300      	str	r3, [sp, #0]
   141b8:	2220      	movs	r2, #32
   141ba:	480b      	ldr	r0, [pc, #44]	; (141e8 <prng_reseed.constprop.0+0x60>)
   141bc:	446b      	add	r3, sp
   141be:	a90a      	add	r1, sp, #40	; 0x28
   141c0:	f013 fe89 	bl	27ed6 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   141c4:	b960      	cbnz	r0, 141e0 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
   141c6:	4b09      	ldr	r3, [pc, #36]	; (141ec <prng_reseed.constprop.0+0x64>)
   141c8:	9309      	str	r3, [sp, #36]	; 0x24
   141ca:	2302      	movs	r3, #2
   141cc:	9308      	str	r3, [sp, #32]
   141ce:	4623      	mov	r3, r4
   141d0:	f06f 0404 	mvn.w	r4, #4
   141d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   141d8:	4805      	ldr	r0, [pc, #20]	; (141f0 <prng_reseed.constprop.0+0x68>)
   141da:	aa08      	add	r2, sp, #32
   141dc:	f7fa f9d8 	bl	e590 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   141e0:	4620      	mov	r0, r4
   141e2:	b013      	add	sp, #76	; 0x4c
   141e4:	bd30      	pop	{r4, r5, pc}
   141e6:	bf00      	nop
   141e8:	20009d50 	.word	0x20009d50
   141ec:	000304e5 	.word	0x000304e5
   141f0:	0002c81c 	.word	0x0002c81c

000141f4 <prng_init>:

int prng_init(void)
{
   141f4:	b510      	push	{r4, lr}
   141f6:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   141f8:	2108      	movs	r1, #8
   141fa:	4668      	mov	r0, sp
   141fc:	f7fe fa4e 	bl	1269c <bt_hci_le_rand>
	if (ret) {
   14200:	4604      	mov	r4, r0
   14202:	b990      	cbnz	r0, 1422a <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   14204:	2208      	movs	r2, #8
   14206:	4669      	mov	r1, sp
   14208:	480b      	ldr	r0, [pc, #44]	; (14238 <prng_init+0x44>)
   1420a:	f013 fe44 	bl	27e96 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1420e:	b978      	cbnz	r0, 14230 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
   14210:	4b0a      	ldr	r3, [pc, #40]	; (1423c <prng_init+0x48>)
   14212:	9307      	str	r3, [sp, #28]
   14214:	2302      	movs	r3, #2
   14216:	9306      	str	r3, [sp, #24]
   14218:	4623      	mov	r3, r4
		return -EIO;
   1421a:	f06f 0404 	mvn.w	r4, #4
   1421e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14222:	4807      	ldr	r0, [pc, #28]	; (14240 <prng_init+0x4c>)
   14224:	aa06      	add	r2, sp, #24
   14226:	f7fa f9b3 	bl	e590 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1422a:	4620      	mov	r0, r4
   1422c:	b008      	add	sp, #32
   1422e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   14230:	f7ff ffaa 	bl	14188 <prng_reseed.constprop.0>
   14234:	4604      	mov	r4, r0
   14236:	e7f8      	b.n	1422a <prng_init+0x36>
   14238:	20009d50 	.word	0x20009d50
   1423c:	000304fc 	.word	0x000304fc
   14240:	0002c81c 	.word	0x0002c81c

00014244 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   14244:	b538      	push	{r3, r4, r5, lr}
   14246:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   14248:	4604      	mov	r4, r0
   1424a:	b198      	cbz	r0, 14274 <bt_rand+0x30>
   1424c:	b191      	cbz	r1, 14274 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1424e:	4a0b      	ldr	r2, [pc, #44]	; (1427c <bt_rand+0x38>)
   14250:	f013 fe5a 	bl	27f08 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   14254:	1c43      	adds	r3, r0, #1
   14256:	d107      	bne.n	14268 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   14258:	f7ff ff96 	bl	14188 <prng_reseed.constprop.0>
		if (ret) {
   1425c:	b948      	cbnz	r0, 14272 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1425e:	4629      	mov	r1, r5
   14260:	4620      	mov	r0, r4
   14262:	4a06      	ldr	r2, [pc, #24]	; (1427c <bt_rand+0x38>)
   14264:	f013 fe50 	bl	27f08 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   14268:	2801      	cmp	r0, #1
   1426a:	bf0c      	ite	eq
   1426c:	2000      	moveq	r0, #0
   1426e:	f06f 0004 	mvnne.w	r0, #4
}
   14272:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14274:	f06f 0015 	mvn.w	r0, #21
   14278:	e7fb      	b.n	14272 <bt_rand+0x2e>
   1427a:	bf00      	nop
   1427c:	20009d50 	.word	0x20009d50

00014280 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14280:	2240      	movs	r2, #64	; 0x40
{
   14282:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14284:	4903      	ldr	r1, [pc, #12]	; (14294 <bt_pub_key_is_debug+0x14>)
   14286:	f017 fb41 	bl	2b90c <memcmp>
}
   1428a:	fab0 f080 	clz	r0, r0
   1428e:	0940      	lsrs	r0, r0, #5
   14290:	bd08      	pop	{r3, pc}
   14292:	bf00      	nop
   14294:	000305ac 	.word	0x000305ac

00014298 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   14298:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1429a:	4b3d      	ldr	r3, [pc, #244]	; (14390 <bt_pub_key_gen+0xf8>)
{
   1429c:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1429e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   142a2:	f003 0306 	and.w	r3, r3, #6
   142a6:	2b06      	cmp	r3, #6
   142a8:	d00f      	beq.n	142ca <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   142aa:	4b3a      	ldr	r3, [pc, #232]	; (14394 <bt_pub_key_gen+0xfc>)
   142ac:	9305      	str	r3, [sp, #20]
   142ae:	2302      	movs	r3, #2
   142b0:	9304      	str	r3, [sp, #16]
		return -ENOTSUP;
   142b2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   142b6:	2300      	movs	r3, #0
   142b8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   142bc:	4836      	ldr	r0, [pc, #216]	; (14398 <bt_pub_key_gen+0x100>)
   142be:	aa04      	add	r2, sp, #16
   142c0:	f7fa f966 	bl	e590 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   142c4:	4628      	mov	r0, r5
   142c6:	b007      	add	sp, #28
   142c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   142ca:	2800      	cmp	r0, #0
   142cc:	d05d      	beq.n	1438a <bt_pub_key_gen+0xf2>
	return list->head;
   142ce:	4e33      	ldr	r6, [pc, #204]	; (1439c <bt_pub_key_gen+0x104>)
   142d0:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   142d2:	b1a2      	cbz	r2, 142fe <bt_pub_key_gen+0x66>
   142d4:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   142d6:	4283      	cmp	r3, r0
   142d8:	d10d      	bne.n	142f6 <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   142da:	4b31      	ldr	r3, [pc, #196]	; (143a0 <bt_pub_key_gen+0x108>)
   142dc:	9305      	str	r3, [sp, #20]
   142de:	2302      	movs	r3, #2
   142e0:	9304      	str	r3, [sp, #16]
   142e2:	2300      	movs	r3, #0
   142e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   142e8:	482b      	ldr	r0, [pc, #172]	; (14398 <bt_pub_key_gen+0x100>)
   142ea:	aa04      	add	r2, sp, #16
   142ec:	f7fa f950 	bl	e590 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   142f0:	f06f 0577 	mvn.w	r5, #119	; 0x77
   142f4:	e7e6      	b.n	142c4 <bt_pub_key_gen+0x2c>
	return node->next;
   142f6:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   142f8:	b10b      	cbz	r3, 142fe <bt_pub_key_gen+0x66>
   142fa:	3b04      	subs	r3, #4
   142fc:	e7eb      	b.n	142d6 <bt_pub_key_gen+0x3e>
	parent->next = child;
   142fe:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   14300:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   14302:	1d03      	adds	r3, r0, #4
	list->head = node;
   14304:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   14306:	b902      	cbnz	r2, 1430a <bt_pub_key_gen+0x72>
	list->tail = node;
   14308:	6073      	str	r3, [r6, #4]
   1430a:	4c26      	ldr	r4, [pc, #152]	; (143a4 <bt_pub_key_gen+0x10c>)
   1430c:	e8d4 7fef 	ldaex	r7, [r4]
   14310:	f047 0320 	orr.w	r3, r7, #32
   14314:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14318:	2a00      	cmp	r2, #0
   1431a:	d1f7      	bne.n	1430c <bt_pub_key_gen+0x74>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1431c:	f017 0720 	ands.w	r7, r7, #32
   14320:	d001      	beq.n	14326 <bt_pub_key_gen+0x8e>
	return 0;
   14322:	2500      	movs	r5, #0
   14324:	e7ce      	b.n	142c4 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14326:	e8d4 3fef 	ldaex	r3, [r4]
   1432a:	f023 0310 	bic.w	r3, r3, #16
   1432e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14332:	2a00      	cmp	r2, #0
   14334:	d1f7      	bne.n	14326 <bt_pub_key_gen+0x8e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   14336:	463a      	mov	r2, r7
   14338:	4639      	mov	r1, r7
   1433a:	f242 0025 	movw	r0, #8229	; 0x2025
   1433e:	f7fe f909 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   14342:	4605      	mov	r5, r0
   14344:	2800      	cmp	r0, #0
   14346:	d0ec      	beq.n	14322 <bt_pub_key_gen+0x8a>
		LOG_ERR("Sending LE P256 Public Key command failed");
   14348:	4b17      	ldr	r3, [pc, #92]	; (143a8 <bt_pub_key_gen+0x110>)
   1434a:	9305      	str	r3, [sp, #20]
   1434c:	2302      	movs	r3, #2
   1434e:	9304      	str	r3, [sp, #16]
   14350:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14354:	463b      	mov	r3, r7
   14356:	4810      	ldr	r0, [pc, #64]	; (14398 <bt_pub_key_gen+0x100>)
   14358:	aa04      	add	r2, sp, #16
   1435a:	f7fa f919 	bl	e590 <z_impl_z_log_msg_static_create>
   1435e:	e8d4 3fef 	ldaex	r3, [r4]
   14362:	f023 0320 	bic.w	r3, r3, #32
   14366:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1436a:	2a00      	cmp	r2, #0
   1436c:	d1f7      	bne.n	1435e <bt_pub_key_gen+0xc6>
	return list->head;
   1436e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14370:	b13c      	cbz	r4, 14382 <bt_pub_key_gen+0xea>
			if (cb->func) {
   14372:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14376:	3c04      	subs	r4, #4
			if (cb->func) {
   14378:	b10b      	cbz	r3, 1437e <bt_pub_key_gen+0xe6>
				cb->func(NULL);
   1437a:	2000      	movs	r0, #0
   1437c:	4798      	blx	r3
	return node->next;
   1437e:	6864      	ldr	r4, [r4, #4]
   14380:	e7f6      	b.n	14370 <bt_pub_key_gen+0xd8>
	list->head = NULL;
   14382:	2300      	movs	r3, #0
	list->tail = NULL;
   14384:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   14388:	e79c      	b.n	142c4 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   1438a:	f06f 0515 	mvn.w	r5, #21
   1438e:	e799      	b.n	142c4 <bt_pub_key_gen+0x2c>
   14390:	20008000 	.word	0x20008000
   14394:	00030525 	.word	0x00030525
   14398:	0002c7fc 	.word	0x0002c7fc
   1439c:	200216ac 	.word	0x200216ac
   143a0:	00030544 	.word	0x00030544
   143a4:	200080cc 	.word	0x200080cc
   143a8:	00030560 	.word	0x00030560

000143ac <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   143ac:	4b04      	ldr	r3, [pc, #16]	; (143c0 <bt_pub_key_get+0x14>)
   143ae:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   143b2:	f013 0f10 	tst.w	r3, #16
}
   143b6:	4803      	ldr	r0, [pc, #12]	; (143c4 <bt_pub_key_get+0x18>)
   143b8:	bf08      	it	eq
   143ba:	2000      	moveq	r0, #0
   143bc:	4770      	bx	lr
   143be:	bf00      	nop
   143c0:	200080cc 	.word	0x200080cc
   143c4:	20022487 	.word	0x20022487

000143c8 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   143c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   143ca:	4e27      	ldr	r6, [pc, #156]	; (14468 <bt_dh_key_gen+0xa0>)
{
   143cc:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   143ce:	6833      	ldr	r3, [r6, #0]
{
   143d0:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
   143d2:	428b      	cmp	r3, r1
   143d4:	d041      	beq.n	1445a <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   143d6:	b123      	cbz	r3, 143e2 <bt_dh_key_gen+0x1a>
		return -EBUSY;
   143d8:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   143dc:	4620      	mov	r0, r4
   143de:	46bd      	mov	sp, r7
   143e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143e2:	4b22      	ldr	r3, [pc, #136]	; (1446c <bt_dh_key_gen+0xa4>)
   143e4:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   143e8:	0692      	lsls	r2, r2, #26
   143ea:	d4f5      	bmi.n	143d8 <bt_dh_key_gen+0x10>
   143ec:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   143f0:	06db      	lsls	r3, r3, #27
   143f2:	d535      	bpl.n	14460 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
   143f4:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   143f6:	f242 0026 	movw	r0, #8230	; 0x2026
   143fa:	2140      	movs	r1, #64	; 0x40
   143fc:	f7fe f85c 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   14400:	4605      	mov	r5, r0
   14402:	b338      	cbz	r0, 14454 <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
   14404:	2140      	movs	r1, #64	; 0x40
   14406:	300c      	adds	r0, #12
   14408:	f006 fd26 	bl	1ae58 <net_buf_simple_add>
   1440c:	4623      	mov	r3, r4
   1440e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14412:	f853 1b04 	ldr.w	r1, [r3], #4
   14416:	4293      	cmp	r3, r2
   14418:	f840 1b04 	str.w	r1, [r0], #4
   1441c:	d1f9      	bne.n	14412 <bt_dh_key_gen+0x4a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1441e:	2200      	movs	r2, #0
   14420:	4629      	mov	r1, r5
   14422:	f242 0026 	movw	r0, #8230	; 0x2026
   14426:	f7fe f895 	bl	12554 <bt_hci_cmd_send_sync>
	if (err) {
   1442a:	4604      	mov	r4, r0
   1442c:	2800      	cmp	r0, #0
   1442e:	d0d5      	beq.n	143dc <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   14430:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   14432:	466d      	mov	r5, sp
   14434:	b088      	sub	sp, #32
   14436:	466a      	mov	r2, sp
		dh_key_cb = NULL;
   14438:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1443a:	490d      	ldr	r1, [pc, #52]	; (14470 <bt_dh_key_gen+0xa8>)
   1443c:	e9c2 1405 	strd	r1, r4, [r2, #20]
   14440:	2103      	movs	r1, #3
   14442:	f842 1f10 	str.w	r1, [r2, #16]!
   14446:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1444a:	480a      	ldr	r0, [pc, #40]	; (14474 <bt_dh_key_gen+0xac>)
   1444c:	f7fa f8a0 	bl	e590 <z_impl_z_log_msg_static_create>
   14450:	46ad      	mov	sp, r5
		return err;
   14452:	e7c3      	b.n	143dc <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   14454:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14458:	e7ea      	b.n	14430 <bt_dh_key_gen+0x68>
		return -EALREADY;
   1445a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1445e:	e7bd      	b.n	143dc <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   14460:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   14464:	e7ba      	b.n	143dc <bt_dh_key_gen+0x14>
   14466:	bf00      	nop
   14468:	200216a8 	.word	0x200216a8
   1446c:	200080cc 	.word	0x200080cc
   14470:	0003058a 	.word	0x0003058a
   14474:	0002c7fc 	.word	0x0002c7fc

00014478 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   14478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1447a:	4b19      	ldr	r3, [pc, #100]	; (144e0 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1447c:	68c5      	ldr	r5, [r0, #12]
   1447e:	e8d3 2fef 	ldaex	r2, [r3]
   14482:	f022 0220 	bic.w	r2, r2, #32
   14486:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1448a:	2900      	cmp	r1, #0
   1448c:	d1f7      	bne.n	1447e <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1448e:	782a      	ldrb	r2, [r5, #0]
   14490:	b98a      	cbnz	r2, 144b6 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   14492:	4914      	ldr	r1, [pc, #80]	; (144e4 <bt_hci_evt_le_pkey_complete+0x6c>)
   14494:	1c6a      	adds	r2, r5, #1
   14496:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1449a:	f852 4b04 	ldr.w	r4, [r2], #4
   1449e:	4282      	cmp	r2, r0
   144a0:	f841 4b04 	str.w	r4, [r1], #4
   144a4:	d1f9      	bne.n	1449a <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   144a6:	e8d3 1fef 	ldaex	r1, [r3]
   144aa:	f041 0110 	orr.w	r1, r1, #16
   144ae:	e8c3 1fe2 	stlex	r2, r1, [r3]
   144b2:	2a00      	cmp	r2, #0
   144b4:	d1f7      	bne.n	144a6 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   144b6:	4e0c      	ldr	r6, [pc, #48]	; (144e8 <bt_hci_evt_le_pkey_complete+0x70>)
   144b8:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   144ba:	b16c      	cbz	r4, 144d8 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   144bc:	4f09      	ldr	r7, [pc, #36]	; (144e4 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   144be:	3c04      	subs	r4, #4
		if (cb->func) {
   144c0:	6823      	ldr	r3, [r4, #0]
   144c2:	b12b      	cbz	r3, 144d0 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   144c4:	782a      	ldrb	r2, [r5, #0]
   144c6:	2a00      	cmp	r2, #0
   144c8:	bf0c      	ite	eq
   144ca:	4638      	moveq	r0, r7
   144cc:	2000      	movne	r0, #0
   144ce:	4798      	blx	r3
	return node->next;
   144d0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   144d2:	b10c      	cbz	r4, 144d8 <bt_hci_evt_le_pkey_complete+0x60>
   144d4:	3c04      	subs	r4, #4
   144d6:	e7f3      	b.n	144c0 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   144d8:	2300      	movs	r3, #0
	list->tail = NULL;
   144da:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   144de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144e0:	200080cc 	.word	0x200080cc
   144e4:	20022487 	.word	0x20022487
   144e8:	200216ac 	.word	0x200216ac

000144ec <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   144ec:	4905      	ldr	r1, [pc, #20]	; (14504 <bt_hci_evt_le_dhkey_complete+0x18>)
   144ee:	680b      	ldr	r3, [r1, #0]
   144f0:	b133      	cbz	r3, 14500 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   144f2:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   144f4:	2000      	movs	r0, #0
   144f6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   144f8:	7811      	ldrb	r1, [r2, #0]
   144fa:	b901      	cbnz	r1, 144fe <bt_hci_evt_le_dhkey_complete+0x12>
   144fc:	1c50      	adds	r0, r2, #1
   144fe:	4718      	bx	r3
	}
}
   14500:	4770      	bx	lr
   14502:	bf00      	nop
   14504:	200216a8 	.word	0x200216a8

00014508 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   14508:	b570      	push	{r4, r5, r6, lr}
   1450a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1450c:	4b12      	ldr	r3, [pc, #72]	; (14558 <notify_connected+0x50>)
   1450e:	681d      	ldr	r5, [r3, #0]
   14510:	b995      	cbnz	r5, 14538 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14512:	4d12      	ldr	r5, [pc, #72]	; (1455c <notify_connected+0x54>)
   14514:	4e12      	ldr	r6, [pc, #72]	; (14560 <notify_connected+0x58>)
   14516:	42b5      	cmp	r5, r6
   14518:	d91c      	bls.n	14554 <notify_connected+0x4c>
   1451a:	4912      	ldr	r1, [pc, #72]	; (14564 <notify_connected+0x5c>)
   1451c:	f240 535b 	movw	r3, #1371	; 0x55b
   14520:	4a11      	ldr	r2, [pc, #68]	; (14568 <notify_connected+0x60>)
   14522:	4812      	ldr	r0, [pc, #72]	; (1456c <notify_connected+0x64>)
   14524:	f012 f9fd 	bl	26922 <assert_print>
   14528:	4811      	ldr	r0, [pc, #68]	; (14570 <notify_connected+0x68>)
   1452a:	f012 f9fa 	bl	26922 <assert_print>
   1452e:	f240 515b 	movw	r1, #1371	; 0x55b
   14532:	480d      	ldr	r0, [pc, #52]	; (14568 <notify_connected+0x60>)
   14534:	f012 f9ee 	bl	26914 <assert_post_action>
		if (cb->connected) {
   14538:	682b      	ldr	r3, [r5, #0]
   1453a:	b113      	cbz	r3, 14542 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   1453c:	4620      	mov	r0, r4
   1453e:	7b21      	ldrb	r1, [r4, #12]
   14540:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14542:	69ad      	ldr	r5, [r5, #24]
   14544:	e7e4      	b.n	14510 <notify_connected+0x8>
		if (cb->connected) {
   14546:	682b      	ldr	r3, [r5, #0]
   14548:	b113      	cbz	r3, 14550 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1454a:	4620      	mov	r0, r4
   1454c:	7b21      	ldrb	r1, [r4, #12]
   1454e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14550:	351c      	adds	r5, #28
   14552:	e7e0      	b.n	14516 <notify_connected+0xe>
   14554:	d3f7      	bcc.n	14546 <notify_connected+0x3e>
		}
	}
}
   14556:	bd70      	pop	{r4, r5, r6, pc}
   14558:	200216d4 	.word	0x200216d4
   1455c:	0002c778 	.word	0x0002c778
   14560:	0002c794 	.word	0x0002c794
   14564:	00030623 	.word	0x00030623
   14568:	000305f3 	.word	0x000305f3
   1456c:	0002d881 	.word	0x0002d881
   14570:	0002e9b9 	.word	0x0002e9b9

00014574 <tx_notify>:
{
   14574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14578:	4604      	mov	r4, r0
	tx->cb = NULL;
   1457a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   1457e:	4f14      	ldr	r7, [pc, #80]	; (145d0 <tx_notify+0x5c>)
	__asm__ volatile(
   14580:	f04f 0220 	mov.w	r2, #32
   14584:	f3ef 8311 	mrs	r3, BASEPRI
   14588:	f382 8812 	msr	BASEPRI_MAX, r2
   1458c:	f3bf 8f6f 	isb	sy
	return list->head;
   14590:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   14592:	b929      	cbnz	r1, 145a0 <tx_notify+0x2c>
	__asm__ volatile(
   14594:	f383 8811 	msr	BASEPRI, r3
   14598:	f3bf 8f6f 	isb	sy
}
   1459c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   145a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   145a2:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   145a4:	4281      	cmp	r1, r0
	list->tail = node;
   145a6:	bf08      	it	eq
   145a8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   145aa:	6222      	str	r2, [r4, #32]
   145ac:	f383 8811 	msr	BASEPRI, r3
   145b0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   145b4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   145b8:	4638      	mov	r0, r7
	tx->user_data = NULL;
   145ba:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   145be:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   145c2:	f016 ffdc 	bl	2b57e <k_queue_append>
		cb(conn, user_data, 0);
   145c6:	2200      	movs	r2, #0
   145c8:	4631      	mov	r1, r6
   145ca:	4620      	mov	r0, r4
   145cc:	47a8      	blx	r5
	while (1) {
   145ce:	e7d7      	b.n	14580 <tx_notify+0xc>
   145d0:	20008dc8 	.word	0x20008dc8

000145d4 <conn_tx_destroy>:
{
   145d4:	b570      	push	{r4, r5, r6, lr}
   145d6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   145d8:	b949      	cbnz	r1, 145ee <conn_tx_destroy+0x1a>
   145da:	490d      	ldr	r1, [pc, #52]	; (14610 <conn_tx_destroy+0x3c>)
   145dc:	480d      	ldr	r0, [pc, #52]	; (14614 <conn_tx_destroy+0x40>)
   145de:	2339      	movs	r3, #57	; 0x39
   145e0:	4a0d      	ldr	r2, [pc, #52]	; (14618 <conn_tx_destroy+0x44>)
   145e2:	f012 f99e 	bl	26922 <assert_print>
   145e6:	2139      	movs	r1, #57	; 0x39
   145e8:	480b      	ldr	r0, [pc, #44]	; (14618 <conn_tx_destroy+0x44>)
   145ea:	f012 f993 	bl	26914 <assert_post_action>
	tx->cb = NULL;
   145ee:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   145f0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   145f4:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   145f6:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   145fa:	4808      	ldr	r0, [pc, #32]	; (1461c <conn_tx_destroy+0x48>)
   145fc:	f016 ffbf 	bl	2b57e <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   14600:	4631      	mov	r1, r6
   14602:	4620      	mov	r0, r4
   14604:	462b      	mov	r3, r5
}
   14606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1460a:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1460e:	4718      	bx	r3
   14610:	0003063e 	.word	0x0003063e
   14614:	0002d881 	.word	0x0002d881
   14618:	000305f3 	.word	0x000305f3
   1461c:	20008dc8 	.word	0x20008dc8

00014620 <send_frag>:
{
   14620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14624:	4604      	mov	r4, r0
   14626:	460e      	mov	r6, r1
   14628:	4692      	mov	sl, r2
   1462a:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1462c:	698d      	ldr	r5, [r1, #24]
{
   1462e:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   14630:	f04f 33ff 	mov.w	r3, #4294967295
   14634:	f04f 32ff 	mov.w	r2, #4294967295
   14638:	484c      	ldr	r0, [pc, #304]	; (1476c <send_frag+0x14c>)
   1463a:	f00d f98d 	bl	21958 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1463e:	7b63      	ldrb	r3, [r4, #13]
   14640:	2b07      	cmp	r3, #7
   14642:	f040 8086 	bne.w	14752 <send_frag+0x132>
	__asm__ volatile(
   14646:	f04f 0320 	mov.w	r3, #32
   1464a:	f3ef 8211 	mrs	r2, BASEPRI
   1464e:	f383 8812 	msr	BASEPRI_MAX, r3
   14652:	f3bf 8f6f 	isb	sy
	if (tx) {
   14656:	2d00      	cmp	r5, #0
   14658:	d04e      	beq.n	146f8 <send_frag+0xd8>
	parent->next = child;
   1465a:	2300      	movs	r3, #0
   1465c:	602b      	str	r3, [r5, #0]
	return list->tail;
   1465e:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   14660:	2b00      	cmp	r3, #0
   14662:	d146      	bne.n	146f2 <send_frag+0xd2>
	list->head = node;
   14664:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14668:	f382 8811 	msr	BASEPRI, r2
   1466c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14670:	2104      	movs	r1, #4
   14672:	f106 000c 	add.w	r0, r6, #12
   14676:	f006 fb93 	bl	1ada0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1467a:	8823      	ldrh	r3, [r4, #0]
   1467c:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   14680:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   14684:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14688:	8a33      	ldrh	r3, [r6, #16]
   1468a:	3b04      	subs	r3, #4
   1468c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1468e:	2302      	movs	r3, #2
	return bt_send(buf);
   14690:	4630      	mov	r0, r6
   14692:	7633      	strb	r3, [r6, #24]
   14694:	f7fe fa8c 	bl	12bb0 <bt_send>
	if (err) {
   14698:	2800      	cmp	r0, #0
   1469a:	d064      	beq.n	14766 <send_frag+0x146>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1469c:	46ea      	mov	sl, sp
   1469e:	b088      	sub	sp, #32
   146a0:	466a      	mov	r2, sp
   146a2:	4b33      	ldr	r3, [pc, #204]	; (14770 <send_frag+0x150>)
   146a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   146a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   146ac:	2303      	movs	r3, #3
   146ae:	4831      	ldr	r0, [pc, #196]	; (14774 <send_frag+0x154>)
   146b0:	f842 3f10 	str.w	r3, [r2, #16]!
   146b4:	f014 f891 	bl	287da <z_log_msg_static_create.constprop.0>
   146b8:	46d5      	mov	sp, sl
	__asm__ volatile(
   146ba:	f04f 0320 	mov.w	r3, #32
   146be:	f3ef 8a11 	mrs	sl, BASEPRI
   146c2:	f383 8812 	msr	BASEPRI_MAX, r3
   146c6:	f3bf 8f6f 	isb	sy
		if (tx) {
   146ca:	b315      	cbz	r5, 14712 <send_frag+0xf2>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   146cc:	4629      	mov	r1, r5
   146ce:	f104 0014 	add.w	r0, r4, #20
   146d2:	f014 f85c 	bl	2878e <sys_slist_find_and_remove>
	__asm__ volatile(
   146d6:	f38a 8811 	msr	BASEPRI, sl
   146da:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   146de:	4823      	ldr	r0, [pc, #140]	; (1476c <send_frag+0x14c>)
   146e0:	f00d f8f6 	bl	218d0 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   146e4:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   146e6:	4629      	mov	r1, r5
   146e8:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   146ea:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   146ec:	f7ff ff72 	bl	145d4 <conn_tx_destroy>
   146f0:	e028      	b.n	14744 <send_frag+0x124>
	parent->next = child;
   146f2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   146f4:	61a5      	str	r5, [r4, #24]
}
   146f6:	e7b7      	b.n	14668 <send_frag+0x48>
	return list->tail;
   146f8:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   146fa:	b133      	cbz	r3, 1470a <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
   146fc:	f103 080c 	add.w	r8, r3, #12
   14700:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14702:	3301      	adds	r3, #1
   14704:	f8c8 3000 	str.w	r3, [r8]
   14708:	e7ae      	b.n	14668 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   1470a:	69e3      	ldr	r3, [r4, #28]
   1470c:	f104 081c 	add.w	r8, r4, #28
   14710:	e7f7      	b.n	14702 <send_frag+0xe2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   14712:	f8d8 3000 	ldr.w	r3, [r8]
   14716:	b95b      	cbnz	r3, 14730 <send_frag+0x110>
   14718:	4917      	ldr	r1, [pc, #92]	; (14778 <send_frag+0x158>)
   1471a:	4818      	ldr	r0, [pc, #96]	; (1477c <send_frag+0x15c>)
   1471c:	f240 2327 	movw	r3, #551	; 0x227
   14720:	4a17      	ldr	r2, [pc, #92]	; (14780 <send_frag+0x160>)
   14722:	f012 f8fe 	bl	26922 <assert_print>
   14726:	f240 2127 	movw	r1, #551	; 0x227
   1472a:	4815      	ldr	r0, [pc, #84]	; (14780 <send_frag+0x160>)
   1472c:	f012 f8f2 	bl	26914 <assert_post_action>
			(*pending_no_cb)--;
   14730:	3b01      	subs	r3, #1
   14732:	f8c8 3000 	str.w	r3, [r8]
   14736:	f38a 8811 	msr	BASEPRI, sl
   1473a:	f3bf 8f6f 	isb	sy
   1473e:	480b      	ldr	r0, [pc, #44]	; (1476c <send_frag+0x14c>)
   14740:	f00d f8c6 	bl	218d0 <z_impl_k_sem_give>
	if (always_consume) {
   14744:	f1b9 0f00 	cmp.w	r9, #0
   14748:	d109      	bne.n	1475e <send_frag+0x13e>
	return false;
   1474a:	2000      	movs	r0, #0
}
   1474c:	46bd      	mov	sp, r7
   1474e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14752:	4806      	ldr	r0, [pc, #24]	; (1476c <send_frag+0x14c>)
   14754:	f00d f8bc 	bl	218d0 <z_impl_k_sem_give>
	if (tx) {
   14758:	2d00      	cmp	r5, #0
   1475a:	d1c3      	bne.n	146e4 <send_frag+0xc4>
   1475c:	e7f2      	b.n	14744 <send_frag+0x124>
		net_buf_unref(buf);
   1475e:	4630      	mov	r0, r6
   14760:	f006 fa58 	bl	1ac14 <net_buf_unref>
   14764:	e7f1      	b.n	1474a <send_frag+0x12a>
	return true;
   14766:	2001      	movs	r0, #1
   14768:	e7f0      	b.n	1474c <send_frag+0x12c>
   1476a:	bf00      	nop
   1476c:	20008100 	.word	0x20008100
   14770:	0002fe4b 	.word	0x0002fe4b
   14774:	0002c7ec 	.word	0x0002c7ec
   14778:	00030641 	.word	0x00030641
   1477c:	0002d881 	.word	0x0002d881
   14780:	000305f3 	.word	0x000305f3

00014784 <bt_conn_get_pkts>:
}
   14784:	4800      	ldr	r0, [pc, #0]	; (14788 <bt_conn_get_pkts+0x4>)
   14786:	4770      	bx	lr
   14788:	20008100 	.word	0x20008100

0001478c <bt_conn_new>:
{
   1478c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1478e:	2200      	movs	r2, #0
   14790:	4604      	mov	r4, r0
   14792:	428a      	cmp	r2, r1
   14794:	d102      	bne.n	1479c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14796:	2400      	movs	r4, #0
}
   14798:	4620      	mov	r0, r4
   1479a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1479c:	2001      	movs	r0, #1
   1479e:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   147a2:	e8d3 5fef 	ldaex	r5, [r3]
   147a6:	2d00      	cmp	r5, #0
   147a8:	d104      	bne.n	147b4 <bt_conn_new+0x28>
   147aa:	e8c3 0fec 	stlex	ip, r0, [r3]
   147ae:	f1bc 0f00 	cmp.w	ip, #0
   147b2:	d1f6      	bne.n	147a2 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   147b4:	d002      	beq.n	147bc <bt_conn_new+0x30>
   147b6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   147b8:	4402      	add	r2, r0
   147ba:	e7ea      	b.n	14792 <bt_conn_new+0x6>
	if (!conn) {
   147bc:	2c00      	cmp	r4, #0
   147be:	d0ea      	beq.n	14796 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   147c0:	22c4      	movs	r2, #196	; 0xc4
   147c2:	2100      	movs	r1, #0
   147c4:	4620      	mov	r0, r4
   147c6:	f017 f8eb 	bl	2b9a0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   147ca:	f104 0060 	add.w	r0, r4, #96	; 0x60
   147ce:	4904      	ldr	r1, [pc, #16]	; (147e0 <bt_conn_new+0x54>)
   147d0:	f00d fd02 	bl	221d8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   147d4:	4903      	ldr	r1, [pc, #12]	; (147e4 <bt_conn_new+0x58>)
   147d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   147da:	f00d fb21 	bl	21e20 <k_work_init>
	return conn;
   147de:	e7db      	b.n	14798 <bt_conn_new+0xc>
   147e0:	0001523d 	.word	0x0001523d
   147e4:	000287e1 	.word	0x000287e1

000147e8 <conn_cleanup>:
{
   147e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147ec:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   147ee:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   147f0:	f104 0638 	add.w	r6, r4, #56	; 0x38
   147f4:	2300      	movs	r3, #0
   147f6:	2200      	movs	r2, #0
   147f8:	4630      	mov	r0, r6
   147fa:	f015 fb4e 	bl	29e9a <net_buf_get>
   147fe:	4603      	mov	r3, r0
   14800:	b980      	cbnz	r0, 14824 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14802:	6963      	ldr	r3, [r4, #20]
   14804:	b1cb      	cbz	r3, 1483a <conn_cleanup+0x52>
   14806:	4918      	ldr	r1, [pc, #96]	; (14868 <conn_cleanup+0x80>)
   14808:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   1480c:	4a17      	ldr	r2, [pc, #92]	; (1486c <conn_cleanup+0x84>)
   1480e:	4818      	ldr	r0, [pc, #96]	; (14870 <conn_cleanup+0x88>)
   14810:	f012 f887 	bl	26922 <assert_print>
   14814:	4817      	ldr	r0, [pc, #92]	; (14874 <conn_cleanup+0x8c>)
   14816:	f012 f884 	bl	26922 <assert_print>
   1481a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1481e:	4813      	ldr	r0, [pc, #76]	; (1486c <conn_cleanup+0x84>)
   14820:	f012 f878 	bl	26914 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14824:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   14826:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   14828:	f006 f9f4 	bl	1ac14 <net_buf_unref>
		if (tx) {
   1482c:	2d00      	cmp	r5, #0
   1482e:	d0e1      	beq.n	147f4 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   14830:	4629      	mov	r1, r5
   14832:	4620      	mov	r0, r4
   14834:	f7ff fece 	bl	145d4 <conn_tx_destroy>
   14838:	e7da      	b.n	147f0 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1483a:	69e3      	ldr	r3, [r4, #28]
   1483c:	b14b      	cbz	r3, 14852 <conn_cleanup+0x6a>
   1483e:	490e      	ldr	r1, [pc, #56]	; (14878 <conn_cleanup+0x90>)
   14840:	f240 23b5 	movw	r3, #693	; 0x2b5
   14844:	4a09      	ldr	r2, [pc, #36]	; (1486c <conn_cleanup+0x84>)
   14846:	480a      	ldr	r0, [pc, #40]	; (14870 <conn_cleanup+0x88>)
   14848:	f012 f86b 	bl	26922 <assert_print>
   1484c:	f240 21b5 	movw	r1, #693	; 0x2b5
   14850:	e7e5      	b.n	1481e <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   14852:	4620      	mov	r0, r4
   14854:	f013 ffc7 	bl	287e6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14858:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1485c:	2200      	movs	r2, #0
}
   1485e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14862:	2300      	movs	r3, #0
   14864:	f00d bdd4 	b.w	22410 <k_work_reschedule>
   14868:	00030654 	.word	0x00030654
   1486c:	000305f3 	.word	0x000305f3
   14870:	0002d881 	.word	0x0002d881
   14874:	0003067a 	.word	0x0003067a
   14878:	0003068f 	.word	0x0003068f

0001487c <bt_conn_recv>:
{
   1487c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14880:	4616      	mov	r6, r2
   14882:	b086      	sub	sp, #24
   14884:	af00      	add	r7, sp, #0
   14886:	4604      	mov	r4, r0
   14888:	460d      	mov	r5, r1
	tx_notify(conn);
   1488a:	f7ff fe73 	bl	14574 <tx_notify>
	switch (flags) {
   1488e:	2e01      	cmp	r6, #1
   14890:	d030      	beq.n	148f4 <bt_conn_recv+0x78>
   14892:	2e02      	cmp	r6, #2
   14894:	d16a      	bne.n	1496c <bt_conn_recv+0xf0>
		if (conn->rx) {
   14896:	6923      	ldr	r3, [r4, #16]
   14898:	b163      	cbz	r3, 148b4 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   1489a:	4b40      	ldr	r3, [pc, #256]	; (1499c <bt_conn_recv+0x120>)
   1489c:	4840      	ldr	r0, [pc, #256]	; (149a0 <bt_conn_recv+0x124>)
   1489e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   148a2:	e9c7 6304 	strd	r6, r3, [r7, #16]
   148a6:	f107 0210 	add.w	r2, r7, #16
   148aa:	f013 ff96 	bl	287da <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   148ae:	4620      	mov	r0, r4
   148b0:	f013 ff99 	bl	287e6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   148b4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   148b6:	6921      	ldr	r1, [r4, #16]
   148b8:	8a08      	ldrh	r0, [r1, #16]
   148ba:	2801      	cmp	r0, #1
   148bc:	d930      	bls.n	14920 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   148be:	68cb      	ldr	r3, [r1, #12]
   148c0:	881b      	ldrh	r3, [r3, #0]
   148c2:	3304      	adds	r3, #4
   148c4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   148c6:	4298      	cmp	r0, r3
   148c8:	d32a      	bcc.n	14920 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   148ca:	d95f      	bls.n	1498c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   148cc:	466d      	mov	r5, sp
   148ce:	b088      	sub	sp, #32
   148d0:	466a      	mov	r2, sp
   148d2:	61d3      	str	r3, [r2, #28]
   148d4:	2304      	movs	r3, #4
   148d6:	4933      	ldr	r1, [pc, #204]	; (149a4 <bt_conn_recv+0x128>)
   148d8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   148dc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   148e0:	482f      	ldr	r0, [pc, #188]	; (149a0 <bt_conn_recv+0x124>)
   148e2:	f842 3f10 	str.w	r3, [r2, #16]!
   148e6:	f013 ff78 	bl	287da <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   148ea:	4620      	mov	r0, r4
   148ec:	46ad      	mov	sp, r5
   148ee:	f013 ff7a 	bl	287e6 <bt_conn_reset_rx_state>
		return;
   148f2:	e015      	b.n	14920 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   148f4:	6920      	ldr	r0, [r4, #16]
   148f6:	b970      	cbnz	r0, 14916 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   148f8:	4b2b      	ldr	r3, [pc, #172]	; (149a8 <bt_conn_recv+0x12c>)
   148fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   148fe:	617b      	str	r3, [r7, #20]
   14900:	2302      	movs	r3, #2
   14902:	4827      	ldr	r0, [pc, #156]	; (149a0 <bt_conn_recv+0x124>)
   14904:	613b      	str	r3, [r7, #16]
   14906:	f107 0210 	add.w	r2, r7, #16
   1490a:	f013 ff66 	bl	287da <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1490e:	4620      	mov	r0, r4
   14910:	f013 ff69 	bl	287e6 <bt_conn_reset_rx_state>
   14914:	e001      	b.n	1491a <bt_conn_recv+0x9e>
		if (!buf->len) {
   14916:	8a2e      	ldrh	r6, [r5, #16]
   14918:	b936      	cbnz	r6, 14928 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1491a:	4628      	mov	r0, r5
   1491c:	f006 f97a 	bl	1ac14 <net_buf_unref>
}
   14920:	3718      	adds	r7, #24
   14922:	46bd      	mov	sp, r7
   14924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14928:	300c      	adds	r0, #12
   1492a:	f015 facb 	bl	29ec4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1492e:	4286      	cmp	r6, r0
   14930:	d912      	bls.n	14958 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14932:	4b1e      	ldr	r3, [pc, #120]	; (149ac <bt_conn_recv+0x130>)
   14934:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14938:	617b      	str	r3, [r7, #20]
   1493a:	2302      	movs	r3, #2
   1493c:	4818      	ldr	r0, [pc, #96]	; (149a0 <bt_conn_recv+0x124>)
   1493e:	613b      	str	r3, [r7, #16]
   14940:	f107 0210 	add.w	r2, r7, #16
   14944:	f013 ff49 	bl	287da <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14948:	2200      	movs	r2, #0
   1494a:	4620      	mov	r0, r4
   1494c:	6921      	ldr	r1, [r4, #16]
   1494e:	f000 ff19 	bl	15784 <bt_l2cap_recv>
			conn->rx = NULL;
   14952:	2300      	movs	r3, #0
   14954:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   14956:	e7e0      	b.n	1491a <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14958:	6920      	ldr	r0, [r4, #16]
   1495a:	8a2a      	ldrh	r2, [r5, #16]
   1495c:	68e9      	ldr	r1, [r5, #12]
   1495e:	300c      	adds	r0, #12
   14960:	f015 fab8 	bl	29ed4 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14964:	4628      	mov	r0, r5
   14966:	f006 f955 	bl	1ac14 <net_buf_unref>
		break;
   1496a:	e7a4      	b.n	148b6 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1496c:	46e8      	mov	r8, sp
   1496e:	b088      	sub	sp, #32
   14970:	466a      	mov	r2, sp
   14972:	4b0f      	ldr	r3, [pc, #60]	; (149b0 <bt_conn_recv+0x134>)
   14974:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   14978:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1497c:	2303      	movs	r3, #3
   1497e:	4808      	ldr	r0, [pc, #32]	; (149a0 <bt_conn_recv+0x124>)
   14980:	f842 3f10 	str.w	r3, [r2, #16]!
   14984:	f013 ff29 	bl	287da <z_log_msg_static_create.constprop.0>
   14988:	46c5      	mov	sp, r8
   1498a:	e7c0      	b.n	1490e <bt_conn_recv+0x92>
	conn->rx = NULL;
   1498c:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   1498e:	2201      	movs	r2, #1
   14990:	4620      	mov	r0, r4
	conn->rx = NULL;
   14992:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   14994:	f000 fef6 	bl	15784 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   14998:	e7c2      	b.n	14920 <bt_conn_recv+0xa4>
   1499a:	bf00      	nop
   1499c:	000306a8 	.word	0x000306a8
   149a0:	0002c7ec 	.word	0x0002c7ec
   149a4:	00030728 	.word	0x00030728
   149a8:	000306c5 	.word	0x000306c5
   149ac:	000306e3 	.word	0x000306e3
   149b0:	0003070a 	.word	0x0003070a

000149b4 <bt_conn_send_cb>:
{
   149b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149b8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   149ba:	7b43      	ldrb	r3, [r0, #13]
{
   149bc:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   149be:	2b07      	cmp	r3, #7
{
   149c0:	460f      	mov	r7, r1
   149c2:	4616      	mov	r6, r2
   149c4:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   149c6:	d00c      	beq.n	149e2 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   149c8:	4b28      	ldr	r3, [pc, #160]	; (14a6c <bt_conn_send_cb+0xb8>)
   149ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   149ce:	9305      	str	r3, [sp, #20]
   149d0:	2302      	movs	r3, #2
   149d2:	4827      	ldr	r0, [pc, #156]	; (14a70 <bt_conn_send_cb+0xbc>)
   149d4:	aa04      	add	r2, sp, #16
   149d6:	9304      	str	r3, [sp, #16]
   149d8:	f013 feff 	bl	287da <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   149dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   149e0:	e01d      	b.n	14a1e <bt_conn_send_cb+0x6a>
	if (cb) {
   149e2:	2a00      	cmp	r2, #0
   149e4:	d040      	beq.n	14a68 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   149e6:	f00e fe9b 	bl	23720 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   149ea:	4b22      	ldr	r3, [pc, #136]	; (14a74 <bt_conn_send_cb+0xc0>)
   149ec:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   149ee:	4822      	ldr	r0, [pc, #136]	; (14a78 <bt_conn_send_cb+0xc4>)
   149f0:	bf07      	ittee	eq
   149f2:	2200      	moveq	r2, #0
   149f4:	2300      	moveq	r3, #0
   149f6:	f04f 32ff 	movne.w	r2, #4294967295
   149fa:	f04f 33ff 	movne.w	r3, #4294967295
   149fe:	f00c fefd 	bl	217fc <z_impl_k_queue_get>
   14a02:	4604      	mov	r4, r0
		if (!tx) {
   14a04:	b970      	cbnz	r0, 14a24 <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   14a06:	4b1d      	ldr	r3, [pc, #116]	; (14a7c <bt_conn_send_cb+0xc8>)
   14a08:	4819      	ldr	r0, [pc, #100]	; (14a70 <bt_conn_send_cb+0xbc>)
   14a0a:	9305      	str	r3, [sp, #20]
   14a0c:	2302      	movs	r3, #2
   14a0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14a12:	aa04      	add	r2, sp, #16
   14a14:	9304      	str	r3, [sp, #16]
   14a16:	f013 fee0 	bl	287da <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   14a1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14a1e:	b006      	add	sp, #24
   14a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14a24:	7b6b      	ldrb	r3, [r5, #13]
   14a26:	2b07      	cmp	r3, #7
   14a28:	d012      	beq.n	14a50 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   14a2a:	4b15      	ldr	r3, [pc, #84]	; (14a80 <bt_conn_send_cb+0xcc>)
   14a2c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14a30:	9305      	str	r3, [sp, #20]
   14a32:	2302      	movs	r3, #2
   14a34:	480e      	ldr	r0, [pc, #56]	; (14a70 <bt_conn_send_cb+0xbc>)
   14a36:	aa04      	add	r2, sp, #16
   14a38:	9304      	str	r3, [sp, #16]
   14a3a:	f013 fece 	bl	287da <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   14a3e:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   14a40:	4621      	mov	r1, r4
	tx->user_data = NULL;
   14a42:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   14a46:	480c      	ldr	r0, [pc, #48]	; (14a78 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   14a48:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14a4a:	f016 fd98 	bl	2b57e <k_queue_append>
}
   14a4e:	e7c5      	b.n	149dc <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   14a50:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14a52:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14a56:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   14a58:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14a5c:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
   14a5e:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   14a60:	f006 f8b2 	bl	1abc8 <net_buf_put>
	return 0;
   14a64:	2000      	movs	r0, #0
   14a66:	e7da      	b.n	14a1e <bt_conn_send_cb+0x6a>
   14a68:	4614      	mov	r4, r2
   14a6a:	e7f5      	b.n	14a58 <bt_conn_send_cb+0xa4>
   14a6c:	00030743 	.word	0x00030743
   14a70:	0002c7ec 	.word	0x0002c7ec
   14a74:	2000a350 	.word	0x2000a350
   14a78:	20008dc8 	.word	0x20008dc8
   14a7c:	00030752 	.word	0x00030752
   14a80:	00030770 	.word	0x00030770

00014a84 <bt_conn_prepare_events>:
{
   14a84:	b570      	push	{r4, r5, r6, lr}
   14a86:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   14a88:	4817      	ldr	r0, [pc, #92]	; (14ae8 <bt_conn_prepare_events+0x64>)
   14a8a:	f016 ff20 	bl	2b8ce <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14a8e:	2200      	movs	r2, #0
   14a90:	2101      	movs	r1, #1
   14a92:	4620      	mov	r0, r4
   14a94:	4b14      	ldr	r3, [pc, #80]	; (14ae8 <bt_conn_prepare_events+0x64>)
   14a96:	f00f fd4b 	bl	24530 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14a9a:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a9e:	4b13      	ldr	r3, [pc, #76]	; (14aec <bt_conn_prepare_events+0x68>)
   14aa0:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   14aa4:	b90a      	cbnz	r2, 14aaa <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14aa6:	2001      	movs	r0, #1
}
   14aa8:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14aaa:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   14aae:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   14ab2:	b953      	cbnz	r3, 14aca <bt_conn_prepare_events+0x46>
   14ab4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14ab8:	1d28      	adds	r0, r5, #4
   14aba:	f013 fe83 	bl	287c4 <atomic_and>
   14abe:	0643      	lsls	r3, r0, #25
   14ac0:	d503      	bpl.n	14aca <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   14ac2:	4628      	mov	r0, r5
   14ac4:	f7ff fe90 	bl	147e8 <conn_cleanup>
		return -ENOTCONN;
   14ac8:	e7ed      	b.n	14aa6 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   14aca:	7b6b      	ldrb	r3, [r5, #13]
   14acc:	2b07      	cmp	r3, #7
   14ace:	d1ea      	bne.n	14aa6 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   14ad0:	4630      	mov	r0, r6
   14ad2:	4b07      	ldr	r3, [pc, #28]	; (14af0 <bt_conn_prepare_events+0x6c>)
   14ad4:	2200      	movs	r2, #0
   14ad6:	2104      	movs	r1, #4
   14ad8:	f00f fd2a 	bl	24530 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14adc:	2301      	movs	r3, #1
			ev_count++;
   14ade:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14ae0:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   14ae4:	e7e0      	b.n	14aa8 <bt_conn_prepare_events+0x24>
   14ae6:	bf00      	nop
   14ae8:	20008660 	.word	0x20008660
   14aec:	20009f4c 	.word	0x20009f4c
   14af0:	20009ec0 	.word	0x20009ec0

00014af4 <bt_conn_ref>:
{
   14af4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   14af6:	b180      	cbz	r0, 14b1a <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   14af8:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   14afc:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   14b00:	b1bb      	cbz	r3, 14b32 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   14b02:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14b04:	e8d2 4fef 	ldaex	r4, [r2]
   14b08:	429c      	cmp	r4, r3
   14b0a:	d104      	bne.n	14b16 <bt_conn_ref+0x22>
   14b0c:	e8c2 1fec 	stlex	ip, r1, [r2]
   14b10:	f1bc 0f00 	cmp.w	ip, #0
   14b14:	d1f6      	bne.n	14b04 <bt_conn_ref+0x10>
   14b16:	d1f1      	bne.n	14afc <bt_conn_ref+0x8>
}
   14b18:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   14b1a:	4907      	ldr	r1, [pc, #28]	; (14b38 <bt_conn_ref+0x44>)
   14b1c:	4807      	ldr	r0, [pc, #28]	; (14b3c <bt_conn_ref+0x48>)
   14b1e:	f240 437c 	movw	r3, #1148	; 0x47c
   14b22:	4a07      	ldr	r2, [pc, #28]	; (14b40 <bt_conn_ref+0x4c>)
   14b24:	f011 fefd 	bl	26922 <assert_print>
   14b28:	f240 417c 	movw	r1, #1148	; 0x47c
   14b2c:	4804      	ldr	r0, [pc, #16]	; (14b40 <bt_conn_ref+0x4c>)
   14b2e:	f011 fef1 	bl	26914 <assert_post_action>
			return NULL;
   14b32:	4618      	mov	r0, r3
   14b34:	e7f0      	b.n	14b18 <bt_conn_ref+0x24>
   14b36:	bf00      	nop
   14b38:	0002febd 	.word	0x0002febd
   14b3c:	0002d881 	.word	0x0002d881
   14b40:	000305f3 	.word	0x000305f3

00014b44 <bt_conn_unref>:
{
   14b44:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   14b46:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14b4a:	e8d3 2fef 	ldaex	r2, [r3]
   14b4e:	1e51      	subs	r1, r2, #1
   14b50:	e8c3 1fe4 	stlex	r4, r1, [r3]
   14b54:	2c00      	cmp	r4, #0
   14b56:	d1f8      	bne.n	14b4a <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   14b58:	2a00      	cmp	r2, #0
   14b5a:	dc0e      	bgt.n	14b7a <bt_conn_unref+0x36>
   14b5c:	490d      	ldr	r1, [pc, #52]	; (14b94 <bt_conn_unref+0x50>)
   14b5e:	f44f 6393 	mov.w	r3, #1176	; 0x498
   14b62:	4a0d      	ldr	r2, [pc, #52]	; (14b98 <bt_conn_unref+0x54>)
   14b64:	480d      	ldr	r0, [pc, #52]	; (14b9c <bt_conn_unref+0x58>)
   14b66:	f011 fedc 	bl	26922 <assert_print>
   14b6a:	480d      	ldr	r0, [pc, #52]	; (14ba0 <bt_conn_unref+0x5c>)
   14b6c:	f011 fed9 	bl	26922 <assert_print>
   14b70:	f44f 6193 	mov.w	r1, #1176	; 0x498
   14b74:	4808      	ldr	r0, [pc, #32]	; (14b98 <bt_conn_unref+0x54>)
   14b76:	f011 fecd 	bl	26914 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   14b7a:	f240 1201 	movw	r2, #257	; 0x101
   14b7e:	8841      	ldrh	r1, [r0, #2]
   14b80:	4291      	cmp	r1, r2
   14b82:	d106      	bne.n	14b92 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14b84:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   14b88:	b91b      	cbnz	r3, 14b92 <bt_conn_unref+0x4e>
}
   14b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   14b8e:	f7ff ba8f 	b.w	140b0 <bt_le_adv_resume>
}
   14b92:	bd10      	pop	{r4, pc}
   14b94:	00030796 	.word	0x00030796
   14b98:	000305f3 	.word	0x000305f3
   14b9c:	0002d881 	.word	0x0002d881
   14ba0:	0003079e 	.word	0x0003079e

00014ba4 <bt_conn_lookup_handle>:
{
   14ba4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14ba6:	2101      	movs	r1, #1
   14ba8:	4801      	ldr	r0, [pc, #4]	; (14bb0 <bt_conn_lookup_handle+0xc>)
   14baa:	f013 be25 	b.w	287f8 <conn_lookup_handle>
   14bae:	bf00      	nop
   14bb0:	20009e88 	.word	0x20009e88

00014bb4 <bt_conn_set_state>:
{
   14bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   14bb6:	7b46      	ldrb	r6, [r0, #13]
{
   14bb8:	4604      	mov	r4, r0
	if (conn->state == state) {
   14bba:	428e      	cmp	r6, r1
{
   14bbc:	460d      	mov	r5, r1
   14bbe:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   14bc0:	d119      	bne.n	14bf6 <bt_conn_set_state+0x42>
	switch (state) {
   14bc2:	2e08      	cmp	r6, #8
   14bc4:	bf98      	it	ls
   14bc6:	4b6c      	ldrls	r3, [pc, #432]	; (14d78 <bt_conn_set_state+0x1c4>)
		LOG_WRN("no transition %s", state2str(state));
   14bc8:	466c      	mov	r4, sp
   14bca:	b088      	sub	sp, #32
   14bcc:	bf94      	ite	ls
   14bce:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   14bd2:	4b6a      	ldrhi	r3, [pc, #424]	; (14d7c <bt_conn_set_state+0x1c8>)
		LOG_WRN("no transition %s", state2str(state));
   14bd4:	466a      	mov	r2, sp
   14bd6:	496a      	ldr	r1, [pc, #424]	; (14d80 <bt_conn_set_state+0x1cc>)
   14bd8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
   14be0:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   14be4:	8393      	strh	r3, [r2, #28]
   14be6:	4b67      	ldr	r3, [pc, #412]	; (14d84 <bt_conn_set_state+0x1d0>)
   14be8:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
   14bec:	4866      	ldr	r0, [pc, #408]	; (14d88 <bt_conn_set_state+0x1d4>)
   14bee:	f013 fdf4 	bl	287da <z_log_msg_static_create.constprop.0>
   14bf2:	46a5      	mov	sp, r4
   14bf4:	e043      	b.n	14c7e <bt_conn_set_state+0xca>
	conn->state = state;
   14bf6:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14bf8:	b926      	cbnz	r6, 14c04 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14bfa:	7883      	ldrb	r3, [r0, #2]
   14bfc:	2b08      	cmp	r3, #8
   14bfe:	d001      	beq.n	14c04 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   14c00:	f7ff ff78 	bl	14af4 <bt_conn_ref>
	switch (conn->state) {
   14c04:	7b63      	ldrb	r3, [r4, #13]
   14c06:	2b08      	cmp	r3, #8
   14c08:	f200 80b0 	bhi.w	14d6c <bt_conn_set_state+0x1b8>
   14c0c:	e8df f003 	tbb	[pc, r3]
   14c10:	37370539 	.word	0x37370539
   14c14:	1c373737 	.word	0x1c373737
   14c18:	37          	.byte	0x37
   14c19:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   14c1a:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   14c1c:	4d5b      	ldr	r5, [pc, #364]	; (14d8c <bt_conn_set_state+0x1d8>)
	__asm__ volatile(
   14c1e:	f04f 0220 	mov.w	r2, #32
   14c22:	f3ef 8311 	mrs	r3, BASEPRI
   14c26:	f382 8812 	msr	BASEPRI_MAX, r2
   14c2a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14c2e:	69e2      	ldr	r2, [r4, #28]
   14c30:	2a00      	cmp	r2, #0
   14c32:	d077      	beq.n	14d24 <bt_conn_set_state+0x170>
			conn->pending_no_cb--;
   14c34:	3a01      	subs	r2, #1
   14c36:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   14c38:	f383 8811 	msr	BASEPRI, r3
   14c3c:	f3bf 8f6f 	isb	sy
   14c40:	4628      	mov	r0, r5
   14c42:	f00c fe45 	bl	218d0 <z_impl_k_sem_give>
}
   14c46:	e7ea      	b.n	14c1e <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14c48:	78a3      	ldrb	r3, [r4, #2]
   14c4a:	2b04      	cmp	r3, #4
   14c4c:	d017      	beq.n	14c7e <bt_conn_set_state+0xca>
	z_impl_k_queue_init(queue);
   14c4e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14c52:	f016 fc87 	bl	2b564 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   14c56:	2100      	movs	r1, #0
   14c58:	484d      	ldr	r0, [pc, #308]	; (14d90 <bt_conn_set_state+0x1dc>)
   14c5a:	f00f fd87 	bl	2476c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14c5e:	2300      	movs	r3, #0
	list->tail = NULL;
   14c60:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14c64:	78e3      	ldrb	r3, [r4, #3]
   14c66:	2b01      	cmp	r3, #1
   14c68:	d109      	bne.n	14c7e <bt_conn_set_state+0xca>
			conn->le.conn_param_retry_countdown =
   14c6a:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   14c6c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   14c70:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   14c74:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14c78:	2300      	movs	r3, #0
   14c7a:	f00d fb4f 	bl	2231c <k_work_schedule>
}
   14c7e:	46bd      	mov	sp, r7
   14c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   14c82:	78a3      	ldrb	r3, [r4, #2]
   14c84:	2b04      	cmp	r3, #4
   14c86:	d103      	bne.n	14c90 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   14c88:	4620      	mov	r0, r4
   14c8a:	f7ff ff5b 	bl	14b44 <bt_conn_unref>
			break;
   14c8e:	e7f6      	b.n	14c7e <bt_conn_set_state+0xca>
		switch (old_state) {
   14c90:	2e08      	cmp	r6, #8
   14c92:	d8f4      	bhi.n	14c7e <bt_conn_set_state+0xca>
   14c94:	a301      	add	r3, pc, #4	; (adr r3, 14c9c <bt_conn_set_state+0xe8>)
   14c96:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   14c9a:	bf00      	nop
   14c9c:	00014d0d 	.word	0x00014d0d
   14ca0:	00014cc1 	.word	0x00014cc1
   14ca4:	00014cff 	.word	0x00014cff
   14ca8:	00014c89 	.word	0x00014c89
   14cac:	00014c89 	.word	0x00014c89
   14cb0:	00014cff 	.word	0x00014cff
   14cb4:	00014cff 	.word	0x00014cff
   14cb8:	00014c7f 	.word	0x00014c7f
   14cbc:	00014d0d 	.word	0x00014d0d
			tx_notify(conn);
   14cc0:	4620      	mov	r0, r4
   14cc2:	f7ff fc57 	bl	14574 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14cc6:	78a3      	ldrb	r3, [r4, #2]
   14cc8:	2b01      	cmp	r3, #1
   14cca:	d10a      	bne.n	14ce2 <bt_conn_set_state+0x12e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   14ccc:	f104 0560 	add.w	r5, r4, #96	; 0x60
   14cd0:	4628      	mov	r0, r5
   14cd2:	f016 fcdd 	bl	2b690 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14cd6:	f010 0f0c 	tst.w	r0, #12
   14cda:	d002      	beq.n	14ce2 <bt_conn_set_state+0x12e>
				k_work_cancel_delayable(&conn->deferred_work);
   14cdc:	4628      	mov	r0, r5
   14cde:	f00d fb9d 	bl	2241c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14ce2:	3404      	adds	r4, #4
   14ce4:	e8d4 3fef 	ldaex	r3, [r4]
   14ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14cec:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14cf0:	2a00      	cmp	r2, #0
   14cf2:	d1f7      	bne.n	14ce4 <bt_conn_set_state+0x130>
   14cf4:	2100      	movs	r1, #0
   14cf6:	4826      	ldr	r0, [pc, #152]	; (14d90 <bt_conn_set_state+0x1dc>)
   14cf8:	f00f fd38 	bl	2476c <z_impl_k_poll_signal_raise>
   14cfc:	e7bf      	b.n	14c7e <bt_conn_set_state+0xca>
			if (conn->err) {
   14cfe:	7b23      	ldrb	r3, [r4, #12]
   14d00:	2b00      	cmp	r3, #0
   14d02:	d0c1      	beq.n	14c88 <bt_conn_set_state+0xd4>
				notify_connected(conn);
   14d04:	4620      	mov	r0, r4
   14d06:	f7ff fbff 	bl	14508 <notify_connected>
   14d0a:	e7bd      	b.n	14c88 <bt_conn_set_state+0xd4>
			LOG_WRN("Invalid (%u) old state", state);
   14d0c:	466c      	mov	r4, sp
   14d0e:	b088      	sub	sp, #32
   14d10:	466a      	mov	r2, sp
   14d12:	4b20      	ldr	r3, [pc, #128]	; (14d94 <bt_conn_set_state+0x1e0>)
		LOG_WRN("no valid (%u) state was set", state);
   14d14:	e9c2 3505 	strd	r3, r5, [r2, #20]
   14d18:	2303      	movs	r3, #3
   14d1a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14d1e:	f842 3f10 	str.w	r3, [r2, #16]!
   14d22:	e763      	b.n	14bec <bt_conn_set_state+0x38>
	return list->head;
   14d24:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14d26:	b921      	cbnz	r1, 14d32 <bt_conn_set_state+0x17e>
   14d28:	f383 8811 	msr	BASEPRI, r3
   14d2c:	f3bf 8f6f 	isb	sy
		if (!node) {
   14d30:	e7a5      	b.n	14c7e <bt_conn_set_state+0xca>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14d32:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   14d34:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14d36:	4281      	cmp	r1, r0
	list->tail = node;
   14d38:	bf08      	it	eq
   14d3a:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   14d3c:	6162      	str	r2, [r4, #20]
   14d3e:	f383 8811 	msr	BASEPRI, r3
   14d42:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14d46:	f04f 0220 	mov.w	r2, #32
   14d4a:	f3ef 8311 	mrs	r3, BASEPRI
   14d4e:	f382 8812 	msr	BASEPRI_MAX, r2
   14d52:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14d56:	68ca      	ldr	r2, [r1, #12]
   14d58:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14d5a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   14d5c:	f383 8811 	msr	BASEPRI, r3
   14d60:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   14d64:	4620      	mov	r0, r4
   14d66:	f7ff fc35 	bl	145d4 <conn_tx_destroy>
   14d6a:	e769      	b.n	14c40 <bt_conn_set_state+0x8c>
		LOG_WRN("no valid (%u) state was set", state);
   14d6c:	466c      	mov	r4, sp
   14d6e:	b088      	sub	sp, #32
   14d70:	466a      	mov	r2, sp
   14d72:	4b09      	ldr	r3, [pc, #36]	; (14d98 <bt_conn_set_state+0x1e4>)
   14d74:	e7ce      	b.n	14d14 <bt_conn_set_state+0x160>
   14d76:	bf00      	nop
   14d78:	0002d238 	.word	0x0002d238
   14d7c:	000307bc 	.word	0x000307bc
   14d80:	000307c6 	.word	0x000307c6
   14d84:	01000003 	.word	0x01000003
   14d88:	0002c7ec 	.word	0x0002c7ec
   14d8c:	20008100 	.word	0x20008100
   14d90:	20008660 	.word	0x20008660
   14d94:	000307d7 	.word	0x000307d7
   14d98:	000307ee 	.word	0x000307ee

00014d9c <bt_conn_index>:
		index = conn - acl_conns;
   14d9c:	4a0c      	ldr	r2, [pc, #48]	; (14dd0 <bt_conn_index+0x34>)
{
   14d9e:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   14da0:	490c      	ldr	r1, [pc, #48]	; (14dd4 <bt_conn_index+0x38>)
   14da2:	1a83      	subs	r3, r0, r2
   14da4:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14da6:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   14da8:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14dac:	d00e      	beq.n	14dcc <bt_conn_index+0x30>
   14dae:	490a      	ldr	r1, [pc, #40]	; (14dd8 <bt_conn_index+0x3c>)
   14db0:	f240 43b6 	movw	r3, #1206	; 0x4b6
   14db4:	4a09      	ldr	r2, [pc, #36]	; (14ddc <bt_conn_index+0x40>)
   14db6:	480a      	ldr	r0, [pc, #40]	; (14de0 <bt_conn_index+0x44>)
   14db8:	f011 fdb3 	bl	26922 <assert_print>
   14dbc:	4809      	ldr	r0, [pc, #36]	; (14de4 <bt_conn_index+0x48>)
   14dbe:	f011 fdb0 	bl	26922 <assert_print>
   14dc2:	f240 41b6 	movw	r1, #1206	; 0x4b6
   14dc6:	4805      	ldr	r0, [pc, #20]	; (14ddc <bt_conn_index+0x40>)
   14dc8:	f011 fda4 	bl	26914 <assert_post_action>
}
   14dcc:	b2d8      	uxtb	r0, r3
   14dce:	bd08      	pop	{r3, pc}
   14dd0:	20009e88 	.word	0x20009e88
   14dd4:	c28f5c29 	.word	0xc28f5c29
   14dd8:	0003080a 	.word	0x0003080a
   14ddc:	000305f3 	.word	0x000305f3
   14de0:	0002d881 	.word	0x0002d881
   14de4:	000308d3 	.word	0x000308d3

00014de8 <bt_conn_create_pdu_timeout>:
{
   14de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dea:	b087      	sub	sp, #28
   14dec:	4604      	mov	r4, r0
   14dee:	460d      	mov	r5, r1
   14df0:	4617      	mov	r7, r2
   14df2:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   14df4:	f016 fb87 	bl	2b506 <k_is_in_isr>
   14df8:	b158      	cbz	r0, 14e12 <bt_conn_create_pdu_timeout+0x2a>
   14dfa:	4914      	ldr	r1, [pc, #80]	; (14e4c <bt_conn_create_pdu_timeout+0x64>)
   14dfc:	4814      	ldr	r0, [pc, #80]	; (14e50 <bt_conn_create_pdu_timeout+0x68>)
   14dfe:	f240 43d2 	movw	r3, #1234	; 0x4d2
   14e02:	4a14      	ldr	r2, [pc, #80]	; (14e54 <bt_conn_create_pdu_timeout+0x6c>)
   14e04:	f011 fd8d 	bl	26922 <assert_print>
   14e08:	f240 41d2 	movw	r1, #1234	; 0x4d2
   14e0c:	4811      	ldr	r0, [pc, #68]	; (14e54 <bt_conn_create_pdu_timeout+0x6c>)
   14e0e:	f011 fd81 	bl	26914 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   14e12:	4911      	ldr	r1, [pc, #68]	; (14e58 <bt_conn_create_pdu_timeout+0x70>)
   14e14:	463a      	mov	r2, r7
   14e16:	2c00      	cmp	r4, #0
   14e18:	bf14      	ite	ne
   14e1a:	4620      	movne	r0, r4
   14e1c:	4608      	moveq	r0, r1
   14e1e:	4633      	mov	r3, r6
   14e20:	f015 f836 	bl	29e90 <net_buf_alloc_fixed>
	if (!buf) {
   14e24:	4604      	mov	r4, r0
   14e26:	b960      	cbnz	r0, 14e42 <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   14e28:	4b0c      	ldr	r3, [pc, #48]	; (14e5c <bt_conn_create_pdu_timeout+0x74>)
   14e2a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14e2e:	9305      	str	r3, [sp, #20]
   14e30:	2302      	movs	r3, #2
   14e32:	480b      	ldr	r0, [pc, #44]	; (14e60 <bt_conn_create_pdu_timeout+0x78>)
   14e34:	aa04      	add	r2, sp, #16
   14e36:	9304      	str	r3, [sp, #16]
   14e38:	f013 fccf 	bl	287da <z_log_msg_static_create.constprop.0>
}
   14e3c:	4620      	mov	r0, r4
   14e3e:	b007      	add	sp, #28
   14e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   14e42:	1d69      	adds	r1, r5, #5
   14e44:	300c      	adds	r0, #12
   14e46:	f005 fdd3 	bl	1a9f0 <net_buf_simple_reserve>
	return buf;
   14e4a:	e7f7      	b.n	14e3c <bt_conn_create_pdu_timeout+0x54>
   14e4c:	000308ed 	.word	0x000308ed
   14e50:	0002d881 	.word	0x0002d881
   14e54:	000305f3 	.word	0x000305f3
   14e58:	20008e18 	.word	0x20008e18
   14e5c:	000308fc 	.word	0x000308fc
   14e60:	0002c7ec 	.word	0x0002c7ec

00014e64 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   14e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e66:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14e68:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e6a:	e8d0 3faf 	lda	r3, [r0]
   14e6e:	059b      	lsls	r3, r3, #22
   14e70:	d511      	bpl.n	14e96 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   14e72:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14e76:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   14e7a:	429a      	cmp	r2, r3
   14e7c:	d80b      	bhi.n	14e96 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   14e7e:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   14e82:	429a      	cmp	r2, r3
   14e84:	d307      	bcc.n	14e96 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14e86:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   14e8a:	429a      	cmp	r2, r3
   14e8c:	d103      	bne.n	14e96 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14e8e:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14e92:	f013 fc97 	bl	287c4 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14e96:	4b18      	ldr	r3, [pc, #96]	; (14ef8 <notify_le_param_updated+0x94>)
   14e98:	681d      	ldr	r5, [r3, #0]
   14e9a:	b995      	cbnz	r5, 14ec2 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e9c:	4d17      	ldr	r5, [pc, #92]	; (14efc <notify_le_param_updated+0x98>)
   14e9e:	4f18      	ldr	r7, [pc, #96]	; (14f00 <notify_le_param_updated+0x9c>)
   14ea0:	42bd      	cmp	r5, r7
   14ea2:	d926      	bls.n	14ef2 <notify_le_param_updated+0x8e>
   14ea4:	4917      	ldr	r1, [pc, #92]	; (14f04 <notify_le_param_updated+0xa0>)
   14ea6:	f240 53a5 	movw	r3, #1445	; 0x5a5
   14eaa:	4a17      	ldr	r2, [pc, #92]	; (14f08 <notify_le_param_updated+0xa4>)
   14eac:	4817      	ldr	r0, [pc, #92]	; (14f0c <notify_le_param_updated+0xa8>)
   14eae:	f011 fd38 	bl	26922 <assert_print>
   14eb2:	4817      	ldr	r0, [pc, #92]	; (14f10 <notify_le_param_updated+0xac>)
   14eb4:	f011 fd35 	bl	26922 <assert_print>
   14eb8:	f240 51a5 	movw	r1, #1445	; 0x5a5
   14ebc:	4812      	ldr	r0, [pc, #72]	; (14f08 <notify_le_param_updated+0xa4>)
   14ebe:	f011 fd29 	bl	26914 <assert_post_action>
		if (cb->le_param_updated) {
   14ec2:	68ee      	ldr	r6, [r5, #12]
   14ec4:	b13e      	cbz	r6, 14ed6 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   14ec6:	4620      	mov	r0, r4
   14ec8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   14ecc:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   14ed0:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   14ed4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   14ed6:	69ad      	ldr	r5, [r5, #24]
   14ed8:	e7df      	b.n	14e9a <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   14eda:	68ee      	ldr	r6, [r5, #12]
   14edc:	b13e      	cbz	r6, 14eee <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   14ede:	4620      	mov	r0, r4
   14ee0:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   14ee4:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   14ee8:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   14eec:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14eee:	351c      	adds	r5, #28
   14ef0:	e7d6      	b.n	14ea0 <notify_le_param_updated+0x3c>
   14ef2:	d3f2      	bcc.n	14eda <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   14ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ef6:	bf00      	nop
   14ef8:	200216d4 	.word	0x200216d4
   14efc:	0002c778 	.word	0x0002c778
   14f00:	0002c794 	.word	0x0002c794
   14f04:	00030623 	.word	0x00030623
   14f08:	000305f3 	.word	0x000305f3
   14f0c:	0002d881 	.word	0x0002d881
   14f10:	0002e9b9 	.word	0x0002e9b9

00014f14 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   14f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f18:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14f1a:	4608      	mov	r0, r1
{
   14f1c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   14f1e:	f013 fa05 	bl	2832c <bt_le_conn_params_valid>
   14f22:	4605      	mov	r5, r0
   14f24:	b918      	cbnz	r0, 14f2e <le_param_req+0x1a>
		return false;
   14f26:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   14f28:	4628      	mov	r0, r5
   14f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   14f2e:	4b1b      	ldr	r3, [pc, #108]	; (14f9c <le_param_req+0x88>)
   14f30:	681e      	ldr	r6, [r3, #0]
   14f32:	b99e      	cbnz	r6, 14f5c <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f34:	4e1a      	ldr	r6, [pc, #104]	; (14fa0 <le_param_req+0x8c>)
   14f36:	f8df 806c 	ldr.w	r8, [pc, #108]	; 14fa4 <le_param_req+0x90>
   14f3a:	4546      	cmp	r6, r8
   14f3c:	d927      	bls.n	14f8e <le_param_req+0x7a>
   14f3e:	491a      	ldr	r1, [pc, #104]	; (14fa8 <le_param_req+0x94>)
   14f40:	f240 53ed 	movw	r3, #1517	; 0x5ed
   14f44:	4a19      	ldr	r2, [pc, #100]	; (14fac <le_param_req+0x98>)
   14f46:	481a      	ldr	r0, [pc, #104]	; (14fb0 <le_param_req+0x9c>)
   14f48:	f011 fceb 	bl	26922 <assert_print>
   14f4c:	4819      	ldr	r0, [pc, #100]	; (14fb4 <le_param_req+0xa0>)
   14f4e:	f011 fce8 	bl	26922 <assert_print>
   14f52:	f240 51ed 	movw	r1, #1517	; 0x5ed
   14f56:	4815      	ldr	r0, [pc, #84]	; (14fac <le_param_req+0x98>)
   14f58:	f011 fcdc 	bl	26914 <assert_post_action>
		if (!cb->le_param_req) {
   14f5c:	68b3      	ldr	r3, [r6, #8]
   14f5e:	b90b      	cbnz	r3, 14f64 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   14f60:	69b6      	ldr	r6, [r6, #24]
   14f62:	e7e6      	b.n	14f32 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   14f64:	4621      	mov	r1, r4
   14f66:	4638      	mov	r0, r7
   14f68:	4798      	blx	r3
   14f6a:	2800      	cmp	r0, #0
   14f6c:	d0db      	beq.n	14f26 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14f6e:	4620      	mov	r0, r4
   14f70:	f013 f9dc 	bl	2832c <bt_le_conn_params_valid>
   14f74:	2800      	cmp	r0, #0
   14f76:	d1f3      	bne.n	14f60 <le_param_req+0x4c>
   14f78:	e7d5      	b.n	14f26 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   14f7a:	4621      	mov	r1, r4
   14f7c:	4638      	mov	r0, r7
   14f7e:	4798      	blx	r3
   14f80:	2800      	cmp	r0, #0
   14f82:	d0d0      	beq.n	14f26 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14f84:	4620      	mov	r0, r4
   14f86:	f013 f9d1 	bl	2832c <bt_le_conn_params_valid>
   14f8a:	b920      	cbnz	r0, 14f96 <le_param_req+0x82>
   14f8c:	e7cb      	b.n	14f26 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f8e:	d2cb      	bcs.n	14f28 <le_param_req+0x14>
		if (!cb->le_param_req) {
   14f90:	68b3      	ldr	r3, [r6, #8]
   14f92:	2b00      	cmp	r3, #0
   14f94:	d1f1      	bne.n	14f7a <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f96:	361c      	adds	r6, #28
   14f98:	e7cf      	b.n	14f3a <le_param_req+0x26>
   14f9a:	bf00      	nop
   14f9c:	200216d4 	.word	0x200216d4
   14fa0:	0002c778 	.word	0x0002c778
   14fa4:	0002c794 	.word	0x0002c794
   14fa8:	00030623 	.word	0x00030623
   14fac:	000305f3 	.word	0x000305f3
   14fb0:	0002d881 	.word	0x0002d881
   14fb4:	0002e9b9 	.word	0x0002e9b9

00014fb8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   14fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14fbc:	78c3      	ldrb	r3, [r0, #3]
{
   14fbe:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14fc0:	b9db      	cbnz	r3, 14ffa <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   14fc2:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14fc6:	4b18      	ldr	r3, [pc, #96]	; (15028 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14fc8:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   14fcc:	681d      	ldr	r5, [r3, #0]
   14fce:	b9bd      	cbnz	r5, 15000 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14fd0:	4d16      	ldr	r5, [pc, #88]	; (1502c <bt_conn_identity_resolved+0x74>)
   14fd2:	4f17      	ldr	r7, [pc, #92]	; (15030 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14fd4:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14fd8:	42bd      	cmp	r5, r7
   14fda:	d921      	bls.n	15020 <bt_conn_identity_resolved+0x68>
   14fdc:	4915      	ldr	r1, [pc, #84]	; (15034 <bt_conn_identity_resolved+0x7c>)
   14fde:	f240 73bc 	movw	r3, #1980	; 0x7bc
   14fe2:	4a15      	ldr	r2, [pc, #84]	; (15038 <bt_conn_identity_resolved+0x80>)
   14fe4:	4815      	ldr	r0, [pc, #84]	; (1503c <bt_conn_identity_resolved+0x84>)
   14fe6:	f011 fc9c 	bl	26922 <assert_print>
   14fea:	4815      	ldr	r0, [pc, #84]	; (15040 <bt_conn_identity_resolved+0x88>)
   14fec:	f011 fc99 	bl	26922 <assert_print>
   14ff0:	f240 71bc 	movw	r1, #1980	; 0x7bc
   14ff4:	4810      	ldr	r0, [pc, #64]	; (15038 <bt_conn_identity_resolved+0x80>)
   14ff6:	f011 fc8d 	bl	26914 <assert_post_action>
		rpa = &conn->le.init_addr;
   14ffa:	f100 0697 	add.w	r6, r0, #151	; 0x97
   14ffe:	e7e2      	b.n	14fc6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   15000:	692b      	ldr	r3, [r5, #16]
   15002:	b11b      	cbz	r3, 1500c <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15004:	463a      	mov	r2, r7
   15006:	4631      	mov	r1, r6
   15008:	4620      	mov	r0, r4
   1500a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1500c:	69ad      	ldr	r5, [r5, #24]
   1500e:	e7de      	b.n	14fce <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   15010:	692b      	ldr	r3, [r5, #16]
   15012:	b11b      	cbz	r3, 1501c <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15014:	4642      	mov	r2, r8
   15016:	4631      	mov	r1, r6
   15018:	4620      	mov	r0, r4
   1501a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1501c:	351c      	adds	r5, #28
   1501e:	e7db      	b.n	14fd8 <bt_conn_identity_resolved+0x20>
   15020:	d3f6      	bcc.n	15010 <bt_conn_identity_resolved+0x58>
		}
	}
}
   15022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15026:	bf00      	nop
   15028:	200216d4 	.word	0x200216d4
   1502c:	0002c778 	.word	0x0002c778
   15030:	0002c794 	.word	0x0002c794
   15034:	00030623 	.word	0x00030623
   15038:	000305f3 	.word	0x000305f3
   1503c:	0002d881 	.word	0x0002d881
   15040:	0002e9b9 	.word	0x0002e9b9

00015044 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   15044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   15046:	7a43      	ldrb	r3, [r0, #9]
{
   15048:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1504a:	7283      	strb	r3, [r0, #10]
{
   1504c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1504e:	f013 fce3 	bl	28a18 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15052:	4b14      	ldr	r3, [pc, #80]	; (150a4 <bt_conn_security_changed+0x60>)
   15054:	681d      	ldr	r5, [r3, #0]
   15056:	b995      	cbnz	r5, 1507e <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15058:	4d13      	ldr	r5, [pc, #76]	; (150a8 <bt_conn_security_changed+0x64>)
   1505a:	4f14      	ldr	r7, [pc, #80]	; (150ac <bt_conn_security_changed+0x68>)
   1505c:	42bd      	cmp	r5, r7
   1505e:	d91e      	bls.n	1509e <bt_conn_security_changed+0x5a>
   15060:	4913      	ldr	r1, [pc, #76]	; (150b0 <bt_conn_security_changed+0x6c>)
   15062:	f640 0328 	movw	r3, #2088	; 0x828
   15066:	4a13      	ldr	r2, [pc, #76]	; (150b4 <bt_conn_security_changed+0x70>)
   15068:	4813      	ldr	r0, [pc, #76]	; (150b8 <bt_conn_security_changed+0x74>)
   1506a:	f011 fc5a 	bl	26922 <assert_print>
   1506e:	4813      	ldr	r0, [pc, #76]	; (150bc <bt_conn_security_changed+0x78>)
   15070:	f011 fc57 	bl	26922 <assert_print>
   15074:	f640 0128 	movw	r1, #2088	; 0x828
   15078:	480e      	ldr	r0, [pc, #56]	; (150b4 <bt_conn_security_changed+0x70>)
   1507a:	f011 fc4b 	bl	26914 <assert_post_action>
		if (cb->security_changed) {
   1507e:	696b      	ldr	r3, [r5, #20]
   15080:	b11b      	cbz	r3, 1508a <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   15082:	4632      	mov	r2, r6
   15084:	4620      	mov	r0, r4
   15086:	7a61      	ldrb	r1, [r4, #9]
   15088:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1508a:	69ad      	ldr	r5, [r5, #24]
   1508c:	e7e3      	b.n	15056 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1508e:	696b      	ldr	r3, [r5, #20]
   15090:	b11b      	cbz	r3, 1509a <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   15092:	4632      	mov	r2, r6
   15094:	4620      	mov	r0, r4
   15096:	7a61      	ldrb	r1, [r4, #9]
   15098:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1509a:	351c      	adds	r5, #28
   1509c:	e7de      	b.n	1505c <bt_conn_security_changed+0x18>
   1509e:	d3f6      	bcc.n	1508e <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   150a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   150a2:	bf00      	nop
   150a4:	200216d4 	.word	0x200216d4
   150a8:	0002c778 	.word	0x0002c778
   150ac:	0002c794 	.word	0x0002c794
   150b0:	00030623 	.word	0x00030623
   150b4:	000305f3 	.word	0x000305f3
   150b8:	0002d881 	.word	0x0002d881
   150bc:	0002e9b9 	.word	0x0002e9b9

000150c0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   150c0:	b538      	push	{r3, r4, r5, lr}
   150c2:	4605      	mov	r5, r0
   150c4:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   150c6:	480b      	ldr	r0, [pc, #44]	; (150f4 <bt_conn_add_le+0x34>)
   150c8:	2101      	movs	r1, #1
   150ca:	f7ff fb5f 	bl	1478c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   150ce:	b180      	cbz	r0, 150f2 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   150d0:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   150d2:	6823      	ldr	r3, [r4, #0]
   150d4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   150d8:	88a3      	ldrh	r3, [r4, #4]
   150da:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   150de:	79a3      	ldrb	r3, [r4, #6]
   150e0:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   150e4:	2301      	movs	r3, #1
   150e6:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   150e8:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   150ea:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   150ec:	4b02      	ldr	r3, [pc, #8]	; (150f8 <bt_conn_add_le+0x38>)
   150ee:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   150f2:	bd38      	pop	{r3, r4, r5, pc}
   150f4:	20009e88 	.word	0x20009e88
   150f8:	00280018 	.word	0x00280018

000150fc <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   150fc:	b570      	push	{r4, r5, r6, lr}
   150fe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15100:	480a      	ldr	r0, [pc, #40]	; (1512c <bt_conn_lookup_addr_le+0x30>)
{
   15102:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15104:	f7ff fcf6 	bl	14af4 <bt_conn_ref>
   15108:	4604      	mov	r4, r0

		if (!conn) {
   1510a:	b120      	cbz	r0, 15116 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1510c:	7883      	ldrb	r3, [r0, #2]
   1510e:	2b01      	cmp	r3, #1
   15110:	d004      	beq.n	1511c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   15112:	f7ff fd17 	bl	14b44 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15116:	2400      	movs	r4, #0
}
   15118:	4620      	mov	r0, r4
   1511a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1511c:	4632      	mov	r2, r6
   1511e:	4629      	mov	r1, r5
   15120:	f013 fbe3 	bl	288ea <bt_conn_is_peer_addr_le>
   15124:	2800      	cmp	r0, #0
   15126:	d1f7      	bne.n	15118 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   15128:	4620      	mov	r0, r4
   1512a:	e7f2      	b.n	15112 <bt_conn_lookup_addr_le+0x16>
   1512c:	20009e88 	.word	0x20009e88

00015130 <bt_conn_exists_le>:
{
   15130:	b5b0      	push	{r4, r5, r7, lr}
   15132:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   15134:	f7ff ffe2 	bl	150fc <bt_conn_lookup_addr_le>
	if (conn) {
   15138:	4604      	mov	r4, r0
   1513a:	b1e8      	cbz	r0, 15178 <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1513c:	7b43      	ldrb	r3, [r0, #13]
   1513e:	466d      	mov	r5, sp
   15140:	2b08      	cmp	r3, #8
   15142:	bf98      	it	ls
   15144:	4a0d      	ldrls	r2, [pc, #52]	; (1517c <bt_conn_exists_le+0x4c>)
   15146:	b088      	sub	sp, #32
   15148:	bf94      	ite	ls
   1514a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1514e:	4b0c      	ldrhi	r3, [pc, #48]	; (15180 <bt_conn_exists_le+0x50>)
   15150:	466a      	mov	r2, sp
   15152:	490c      	ldr	r1, [pc, #48]	; (15184 <bt_conn_exists_le+0x54>)
   15154:	480c      	ldr	r0, [pc, #48]	; (15188 <bt_conn_exists_le+0x58>)
   15156:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1515a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1515e:	8393      	strh	r3, [r2, #28]
   15160:	4b0a      	ldr	r3, [pc, #40]	; (1518c <bt_conn_exists_le+0x5c>)
   15162:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   15166:	f842 3f10 	str.w	r3, [r2, #16]!
   1516a:	f013 fb36 	bl	287da <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1516e:	4620      	mov	r0, r4
   15170:	46ad      	mov	sp, r5
   15172:	f7ff fce7 	bl	14b44 <bt_conn_unref>
		return true;
   15176:	2001      	movs	r0, #1
}
   15178:	46bd      	mov	sp, r7
   1517a:	bdb0      	pop	{r4, r5, r7, pc}
   1517c:	0002d238 	.word	0x0002d238
   15180:	000307bc 	.word	0x000307bc
   15184:	00030925 	.word	0x00030925
   15188:	0002c7ec 	.word	0x0002c7ec
   1518c:	01000003 	.word	0x01000003

00015190 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15192:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15194:	480e      	ldr	r0, [pc, #56]	; (151d0 <bt_conn_lookup_state_le+0x40>)
{
   15196:	460e      	mov	r6, r1
   15198:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1519a:	f7ff fcab 	bl	14af4 <bt_conn_ref>

		if (!conn) {
   1519e:	4604      	mov	r4, r0
   151a0:	b120      	cbz	r0, 151ac <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   151a2:	7883      	ldrb	r3, [r0, #2]
   151a4:	2b01      	cmp	r3, #1
   151a6:	d003      	beq.n	151b0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   151a8:	f7ff fccc 	bl	14b44 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   151ac:	2400      	movs	r4, #0
   151ae:	e00d      	b.n	151cc <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   151b0:	b136      	cbz	r6, 151c0 <bt_conn_lookup_state_le+0x30>
   151b2:	4632      	mov	r2, r6
   151b4:	4629      	mov	r1, r5
   151b6:	f013 fb98 	bl	288ea <bt_conn_is_peer_addr_le>
   151ba:	b908      	cbnz	r0, 151c0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   151bc:	4620      	mov	r0, r4
   151be:	e7f3      	b.n	151a8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   151c0:	7b63      	ldrb	r3, [r4, #13]
   151c2:	42bb      	cmp	r3, r7
   151c4:	d1fa      	bne.n	151bc <bt_conn_lookup_state_le+0x2c>
   151c6:	7a23      	ldrb	r3, [r4, #8]
   151c8:	42ab      	cmp	r3, r5
   151ca:	d1f7      	bne.n	151bc <bt_conn_lookup_state_le+0x2c>
}
   151cc:	4620      	mov	r0, r4
   151ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151d0:	20009e88 	.word	0x20009e88

000151d4 <send_conn_le_param_update>:
{
   151d4:	b538      	push	{r3, r4, r5, lr}
   151d6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   151d8:	4608      	mov	r0, r1
{
   151da:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   151dc:	f013 f8a6 	bl	2832c <bt_le_conn_params_valid>
   151e0:	b338      	cbz	r0, 15232 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   151e2:	4b15      	ldr	r3, [pc, #84]	; (15238 <send_conn_le_param_update+0x64>)
   151e4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   151e8:	0799      	lsls	r1, r3, #30
   151ea:	d407      	bmi.n	151fc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   151ec:	78e3      	ldrb	r3, [r4, #3]
   151ee:	b173      	cbz	r3, 1520e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   151f0:	4629      	mov	r1, r5
   151f2:	4620      	mov	r0, r4
}
   151f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   151f8:	f000 bb02 	b.w	15800 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   151fc:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   15200:	079a      	lsls	r2, r3, #30
   15202:	d5f3      	bpl.n	151ec <send_conn_le_param_update+0x18>
   15204:	1d23      	adds	r3, r4, #4
   15206:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1520a:	055b      	lsls	r3, r3, #21
   1520c:	d4ee      	bmi.n	151ec <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1520e:	4629      	mov	r1, r5
   15210:	4620      	mov	r0, r4
   15212:	f013 fb8c 	bl	2892e <bt_conn_le_conn_update>
		if (rc == 0) {
   15216:	b958      	cbnz	r0, 15230 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   15218:	882b      	ldrh	r3, [r5, #0]
   1521a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1521e:	886b      	ldrh	r3, [r5, #2]
   15220:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   15224:	88ab      	ldrh	r3, [r5, #4]
   15226:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1522a:	88eb      	ldrh	r3, [r5, #6]
   1522c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   15230:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15232:	f06f 0015 	mvn.w	r0, #21
   15236:	e7fb      	b.n	15230 <send_conn_le_param_update+0x5c>
   15238:	20008000 	.word	0x20008000

0001523c <deferred_work>:
{
   1523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15240:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   15242:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   15246:	4604      	mov	r4, r0
   15248:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1524a:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1524e:	bb8b      	cbnz	r3, 152b4 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   15250:	4630      	mov	r0, r6
   15252:	f013 fbc9 	bl	289e8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15256:	4b3d      	ldr	r3, [pc, #244]	; (1534c <deferred_work+0x110>)
   15258:	681d      	ldr	r5, [r3, #0]
   1525a:	b99d      	cbnz	r5, 15284 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1525c:	4d3c      	ldr	r5, [pc, #240]	; (15350 <deferred_work+0x114>)
   1525e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 15354 <deferred_work+0x118>
   15262:	4545      	cmp	r5, r8
   15264:	d91e      	bls.n	152a4 <deferred_work+0x68>
   15266:	493c      	ldr	r1, [pc, #240]	; (15358 <deferred_work+0x11c>)
   15268:	f240 536c 	movw	r3, #1388	; 0x56c
   1526c:	4a3b      	ldr	r2, [pc, #236]	; (1535c <deferred_work+0x120>)
   1526e:	483c      	ldr	r0, [pc, #240]	; (15360 <deferred_work+0x124>)
   15270:	f011 fb57 	bl	26922 <assert_print>
   15274:	483b      	ldr	r0, [pc, #236]	; (15364 <deferred_work+0x128>)
   15276:	f011 fb54 	bl	26922 <assert_print>
   1527a:	f240 516c 	movw	r1, #1388	; 0x56c
   1527e:	4837      	ldr	r0, [pc, #220]	; (1535c <deferred_work+0x120>)
   15280:	f011 fb48 	bl	26914 <assert_post_action>
		if (cb->disconnected) {
   15284:	686b      	ldr	r3, [r5, #4]
   15286:	b11b      	cbz	r3, 15290 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   15288:	4630      	mov	r0, r6
   1528a:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1528e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15290:	69ad      	ldr	r5, [r5, #24]
   15292:	e7e2      	b.n	1525a <deferred_work+0x1e>
		if (cb->disconnected) {
   15294:	686b      	ldr	r3, [r5, #4]
   15296:	b11b      	cbz	r3, 152a0 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   15298:	4630      	mov	r0, r6
   1529a:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1529e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152a0:	351c      	adds	r5, #28
   152a2:	e7de      	b.n	15262 <deferred_work+0x26>
   152a4:	d3f6      	bcc.n	15294 <deferred_work+0x58>
		bt_conn_unref(conn);
   152a6:	4630      	mov	r0, r6
   152a8:	f7ff fc4c 	bl	14b44 <bt_conn_unref>
}
   152ac:	3708      	adds	r7, #8
   152ae:	46bd      	mov	sp, r7
   152b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   152b4:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   152b8:	2b01      	cmp	r3, #1
   152ba:	d1f7      	bne.n	152ac <deferred_work+0x70>
	if (atomic_test_and_clear_bit(conn->flags,
   152bc:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   152c0:	f46f 7100 	mvn.w	r1, #512	; 0x200
   152c4:	4628      	mov	r0, r5
   152c6:	f013 fa7d 	bl	287c4 <atomic_and>
   152ca:	0581      	lsls	r1, r0, #22
   152cc:	d526      	bpl.n	1531c <deferred_work+0xe0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   152ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   152d0:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   152d2:	603b      	str	r3, [r7, #0]
   152d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   152d6:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   152d8:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   152da:	f7ff ff7b 	bl	151d4 <send_conn_le_param_update>
		if (!err) {
   152de:	b968      	cbnz	r0, 152fc <deferred_work+0xc0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   152e0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   152e4:	4628      	mov	r0, r5
   152e6:	f013 fa6d 	bl	287c4 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   152ea:	e8d5 3fef 	ldaex	r3, [r5]
   152ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   152f2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   152f6:	2a00      	cmp	r2, #0
   152f8:	d0d8      	beq.n	152ac <deferred_work+0x70>
   152fa:	e7f6      	b.n	152ea <deferred_work+0xae>
			LOG_WRN("Send LE param update failed (err %d)", err);
   152fc:	466c      	mov	r4, sp
   152fe:	b088      	sub	sp, #32
   15300:	466a      	mov	r2, sp
   15302:	4b19      	ldr	r3, [pc, #100]	; (15368 <deferred_work+0x12c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   15304:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15308:	2303      	movs	r3, #3
   1530a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1530e:	4817      	ldr	r0, [pc, #92]	; (1536c <deferred_work+0x130>)
   15310:	f842 3f10 	str.w	r3, [r2, #16]!
   15314:	f013 fa61 	bl	287da <z_log_msg_static_create.constprop.0>
   15318:	46a5      	mov	sp, r4
   1531a:	e7e6      	b.n	152ea <deferred_work+0xae>
		param = BT_LE_CONN_PARAM(
   1531c:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   15320:	4a13      	ldr	r2, [pc, #76]	; (15370 <deferred_work+0x134>)
		err = send_conn_le_param_update(conn, param);
   15322:	4639      	mov	r1, r7
   15324:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(
   15326:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   1532a:	f7ff ff53 	bl	151d4 <send_conn_le_param_update>
		if (!err) {
   1532e:	b940      	cbnz	r0, 15342 <deferred_work+0x106>
   15330:	e8d5 3fef 	ldaex	r3, [r5]
   15334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15338:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1533c:	2a00      	cmp	r2, #0
   1533e:	d0d4      	beq.n	152ea <deferred_work+0xae>
   15340:	e7f6      	b.n	15330 <deferred_work+0xf4>
			LOG_WRN("Send auto LE param update failed (err %d)",
   15342:	466c      	mov	r4, sp
   15344:	b088      	sub	sp, #32
   15346:	466a      	mov	r2, sp
   15348:	4b0a      	ldr	r3, [pc, #40]	; (15374 <deferred_work+0x138>)
   1534a:	e7db      	b.n	15304 <deferred_work+0xc8>
   1534c:	200216d4 	.word	0x200216d4
   15350:	0002c778 	.word	0x0002c778
   15354:	0002c794 	.word	0x0002c794
   15358:	00030623 	.word	0x00030623
   1535c:	000305f3 	.word	0x000305f3
   15360:	0002d881 	.word	0x0002d881
   15364:	0002e9b9 	.word	0x0002e9b9
   15368:	00030948 	.word	0x00030948
   1536c:	0002c7ec 	.word	0x0002c7ec
   15370:	00280018 	.word	0x00280018
   15374:	0003096d 	.word	0x0003096d

00015378 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15378:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1537a:	4801      	ldr	r0, [pc, #4]	; (15380 <bt_conn_create_frag_timeout+0x8>)
   1537c:	f7ff bd34 	b.w	14de8 <bt_conn_create_pdu_timeout>
   15380:	20008eb4 	.word	0x20008eb4

00015384 <create_frag>:
{
   15384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15388:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1538a:	f04f 33ff 	mov.w	r3, #4294967295
   1538e:	f04f 32ff 	mov.w	r2, #4294967295
   15392:	2000      	movs	r0, #0
{
   15394:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   15396:	f7ff ffef 	bl	15378 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1539a:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   1539c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1539e:	2b07      	cmp	r3, #7
   153a0:	f04f 0600 	mov.w	r6, #0
   153a4:	d005      	beq.n	153b2 <create_frag+0x2e>
		net_buf_unref(frag);
   153a6:	f005 fc35 	bl	1ac14 <net_buf_unref>
		return NULL;
   153aa:	4635      	mov	r5, r6
}
   153ac:	4628      	mov	r0, r5
   153ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   153b2:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   153b4:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   153b8:	4e0c      	ldr	r6, [pc, #48]	; (153ec <create_frag+0x68>)
   153ba:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   153bc:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   153c0:	f014 fd80 	bl	29ec4 <net_buf_simple_tailroom>
   153c4:	4580      	cmp	r8, r0
   153c6:	d20c      	bcs.n	153e2 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   153c8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   153cc:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   153d0:	4632      	mov	r2, r6
   153d2:	4638      	mov	r0, r7
   153d4:	f014 fd7e 	bl	29ed4 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   153d8:	4631      	mov	r1, r6
   153da:	4620      	mov	r0, r4
   153dc:	f005 fd00 	bl	1ade0 <net_buf_simple_pull>
   153e0:	e7e4      	b.n	153ac <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   153e2:	4638      	mov	r0, r7
   153e4:	f014 fd6e 	bl	29ec4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   153e8:	b286      	uxth	r6, r0
   153ea:	e7ef      	b.n	153cc <create_frag+0x48>
   153ec:	20008000 	.word	0x20008000

000153f0 <bt_conn_process_tx>:
{
   153f0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   153f2:	7b43      	ldrb	r3, [r0, #13]
{
   153f4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   153f6:	b95b      	cbnz	r3, 15410 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   153f8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   153fc:	3004      	adds	r0, #4
   153fe:	f013 f9e1 	bl	287c4 <atomic_and>
   15402:	0643      	lsls	r3, r0, #25
   15404:	d504      	bpl.n	15410 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   15406:	4620      	mov	r0, r4
}
   15408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1540c:	f7ff b9ec 	b.w	147e8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15410:	2200      	movs	r2, #0
   15412:	2300      	movs	r3, #0
   15414:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15418:	f014 fd3f 	bl	29e9a <net_buf_get>
	BT_ASSERT(buf);
   1541c:	4605      	mov	r5, r0
   1541e:	b960      	cbnz	r0, 1543a <bt_conn_process_tx+0x4a>
   15420:	f240 331a 	movw	r3, #794	; 0x31a
   15424:	4a22      	ldr	r2, [pc, #136]	; (154b0 <bt_conn_process_tx+0xc0>)
   15426:	4923      	ldr	r1, [pc, #140]	; (154b4 <bt_conn_process_tx+0xc4>)
   15428:	4823      	ldr	r0, [pc, #140]	; (154b8 <bt_conn_process_tx+0xc8>)
   1542a:	f011 fa7a 	bl	26922 <assert_print>
   1542e:	4040      	eors	r0, r0
   15430:	f380 8811 	msr	BASEPRI, r0
   15434:	f04f 0003 	mov.w	r0, #3
   15438:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1543a:	4e20      	ldr	r6, [pc, #128]	; (154bc <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1543c:	8a2a      	ldrh	r2, [r5, #16]
   1543e:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15442:	429a      	cmp	r2, r3
   15444:	d807      	bhi.n	15456 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15446:	2300      	movs	r3, #0
   15448:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1544a:	4629      	mov	r1, r5
   1544c:	4620      	mov	r0, r4
   1544e:	f7ff f8e7 	bl	14620 <send_frag>
	if (!send_buf(conn, buf)) {
   15452:	b968      	cbnz	r0, 15470 <bt_conn_process_tx+0x80>
   15454:	e005      	b.n	15462 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   15456:	4629      	mov	r1, r5
   15458:	4620      	mov	r0, r4
   1545a:	f7ff ff93 	bl	15384 <create_frag>
	if (!frag) {
   1545e:	4601      	mov	r1, r0
   15460:	b938      	cbnz	r0, 15472 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   15462:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   15464:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   15466:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   15468:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1546a:	f005 fbd3 	bl	1ac14 <net_buf_unref>
		if (tx) {
   1546e:	b9ce      	cbnz	r6, 154a4 <bt_conn_process_tx+0xb4>
}
   15470:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15472:	2301      	movs	r3, #1
   15474:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15476:	4620      	mov	r0, r4
   15478:	f7ff f8d2 	bl	14620 <send_frag>
   1547c:	2800      	cmp	r0, #0
   1547e:	d0f0      	beq.n	15462 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   15480:	8a2a      	ldrh	r2, [r5, #16]
   15482:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15486:	429a      	cmp	r2, r3
   15488:	d802      	bhi.n	15490 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   1548a:	2300      	movs	r3, #0
   1548c:	2203      	movs	r2, #3
   1548e:	e7dc      	b.n	1544a <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   15490:	4629      	mov	r1, r5
   15492:	4620      	mov	r0, r4
   15494:	f7ff ff76 	bl	15384 <create_frag>
		if (!frag) {
   15498:	4601      	mov	r1, r0
   1549a:	2800      	cmp	r0, #0
   1549c:	d0e1      	beq.n	15462 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1549e:	2301      	movs	r3, #1
   154a0:	461a      	mov	r2, r3
   154a2:	e7e8      	b.n	15476 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   154a4:	4631      	mov	r1, r6
   154a6:	4620      	mov	r0, r4
}
   154a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   154ac:	f7ff b892 	b.w	145d4 <conn_tx_destroy>
   154b0:	000305f3 	.word	0x000305f3
   154b4:	00031910 	.word	0x00031910
   154b8:	0002d881 	.word	0x0002d881
   154bc:	20008000 	.word	0x20008000

000154c0 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   154c0:	4b0b      	ldr	r3, [pc, #44]	; (154f0 <bt_conn_auth_cb_register+0x30>)
   154c2:	b158      	cbz	r0, 154dc <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   154c4:	681a      	ldr	r2, [r3, #0]
   154c6:	b962      	cbnz	r2, 154e2 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   154c8:	6902      	ldr	r2, [r0, #16]
   154ca:	b93a      	cbnz	r2, 154dc <bt_conn_auth_cb_register+0x1c>
   154cc:	6802      	ldr	r2, [r0, #0]
   154ce:	b95a      	cbnz	r2, 154e8 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   154d0:	6842      	ldr	r2, [r0, #4]
   154d2:	b94a      	cbnz	r2, 154e8 <bt_conn_auth_cb_register+0x28>
   154d4:	6882      	ldr	r2, [r0, #8]
   154d6:	b93a      	cbnz	r2, 154e8 <bt_conn_auth_cb_register+0x28>
   154d8:	6942      	ldr	r2, [r0, #20]
   154da:	b92a      	cbnz	r2, 154e8 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   154dc:	6018      	str	r0, [r3, #0]
		return 0;
   154de:	2000      	movs	r0, #0
   154e0:	4770      	bx	lr
		return -EALREADY;
   154e2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   154e6:	4770      	bx	lr
		return -EINVAL;
   154e8:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   154ec:	4770      	bx	lr
   154ee:	bf00      	nop
   154f0:	200216e0 	.word	0x200216e0

000154f4 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   154f4:	b168      	cbz	r0, 15512 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   154f6:	2300      	movs	r3, #0
   154f8:	60c3      	str	r3, [r0, #12]
	return list->tail;
   154fa:	4b07      	ldr	r3, [pc, #28]	; (15518 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   154fc:	f100 020c 	add.w	r2, r0, #12
   15500:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   15502:	b919      	cbnz	r1, 1550c <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   15504:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   15508:	2000      	movs	r0, #0
   1550a:	4770      	bx	lr
	parent->next = child;
   1550c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1550e:	605a      	str	r2, [r3, #4]
}
   15510:	e7fa      	b.n	15508 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   15512:	f06f 0015 	mvn.w	r0, #21
}
   15516:	4770      	bx	lr
   15518:	200216d8 	.word	0x200216d8

0001551c <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1551c:	b910      	cbnz	r0, 15524 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1551e:	4802      	ldr	r0, [pc, #8]	; (15528 <bt_conn_lookup_index+0xc>)
   15520:	f7ff bae8 	b.w	14af4 <bt_conn_ref>
}
   15524:	2000      	movs	r0, #0
   15526:	4770      	bx	lr
   15528:	20009e88 	.word	0x20009e88

0001552c <bt_conn_init>:

int bt_conn_init(void)
{
   1552c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1552e:	480a      	ldr	r0, [pc, #40]	; (15558 <bt_conn_init+0x2c>)
   15530:	f016 f818 	bl	2b564 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15534:	4909      	ldr	r1, [pc, #36]	; (1555c <bt_conn_init+0x30>)
   15536:	4808      	ldr	r0, [pc, #32]	; (15558 <bt_conn_init+0x2c>)
   15538:	f016 f821 	bl	2b57e <k_queue_append>
   1553c:	4908      	ldr	r1, [pc, #32]	; (15560 <bt_conn_init+0x34>)
   1553e:	4806      	ldr	r0, [pc, #24]	; (15558 <bt_conn_init+0x2c>)
   15540:	f016 f81d 	bl	2b57e <k_queue_append>
	}

	bt_att_init();
   15544:	f001 f932 	bl	167ac <bt_att_init>

	err = bt_smp_init();
   15548:	f004 fd80 	bl	1a04c <bt_smp_init>
	if (err) {
   1554c:	4604      	mov	r4, r0
   1554e:	b908      	cbnz	r0, 15554 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   15550:	f013 faad 	bl	28aae <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15554:	4620      	mov	r0, r4
   15556:	bd10      	pop	{r4, pc}
   15558:	20008dc8 	.word	0x20008dc8
   1555c:	200216b4 	.word	0x200216b4
   15560:	200216c4 	.word	0x200216c4

00015564 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15564:	b580      	push	{r7, lr}
   15566:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   15568:	b088      	sub	sp, #32
   1556a:	466a      	mov	r2, sp
   1556c:	4b06      	ldr	r3, [pc, #24]	; (15588 <l2cap_create_le_sig_pdu.part.0+0x24>)
   1556e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15572:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15576:	2303      	movs	r3, #3
   15578:	4804      	ldr	r0, [pc, #16]	; (1558c <l2cap_create_le_sig_pdu.part.0+0x28>)
   1557a:	f842 3f10 	str.w	r3, [r2, #16]!
   1557e:	f013 f9ff 	bl	28980 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   15582:	2000      	movs	r0, #0
   15584:	46bd      	mov	sp, r7
   15586:	bd80      	pop	{r7, pc}
   15588:	00030a10 	.word	0x00030a10
   1558c:	0002c834 	.word	0x0002c834

00015590 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   15590:	b580      	push	{r7, lr}
   15592:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   15594:	b088      	sub	sp, #32
   15596:	466a      	mov	r2, sp
   15598:	4b07      	ldr	r3, [pc, #28]	; (155b8 <l2cap_accept.part.0+0x28>)
   1559a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1559e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   155a2:	2303      	movs	r3, #3
   155a4:	4805      	ldr	r0, [pc, #20]	; (155bc <l2cap_accept.part.0+0x2c>)
   155a6:	f842 3f10 	str.w	r3, [r2, #16]!
   155aa:	f013 f9e9 	bl	28980 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   155ae:	f06f 000b 	mvn.w	r0, #11
   155b2:	46bd      	mov	sp, r7
   155b4:	bd80      	pop	{r7, pc}
   155b6:	bf00      	nop
   155b8:	00030a38 	.word	0x00030a38
   155bc:	0002c834 	.word	0x0002c834

000155c0 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   155c0:	4b04      	ldr	r3, [pc, #16]	; (155d4 <l2cap_accept+0x14>)
   155c2:	681a      	ldr	r2, [r3, #0]
   155c4:	b10a      	cbz	r2, 155ca <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   155c6:	f7ff bfe3 	b.w	15590 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   155ca:	4803      	ldr	r0, [pc, #12]	; (155d8 <l2cap_accept+0x18>)
   155cc:	6058      	str	r0, [r3, #4]
}
   155ce:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   155d0:	600b      	str	r3, [r1, #0]
}
   155d2:	4770      	bx	lr
   155d4:	200216e4 	.word	0x200216e4
   155d8:	0002d27c 	.word	0x0002d27c

000155dc <bt_l2cap_connected>:
{
   155dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   155de:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   155e0:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   155e2:	4d27      	ldr	r5, [pc, #156]	; (15680 <bt_l2cap_connected+0xa4>)
   155e4:	4f27      	ldr	r7, [pc, #156]	; (15684 <bt_l2cap_connected+0xa8>)
   155e6:	42bd      	cmp	r5, r7
   155e8:	d946      	bls.n	15678 <bt_l2cap_connected+0x9c>
   155ea:	4927      	ldr	r1, [pc, #156]	; (15688 <bt_l2cap_connected+0xac>)
   155ec:	f240 1381 	movw	r3, #385	; 0x181
   155f0:	4a26      	ldr	r2, [pc, #152]	; (1568c <bt_l2cap_connected+0xb0>)
   155f2:	4827      	ldr	r0, [pc, #156]	; (15690 <bt_l2cap_connected+0xb4>)
   155f4:	f011 f995 	bl	26922 <assert_print>
   155f8:	4826      	ldr	r0, [pc, #152]	; (15694 <bt_l2cap_connected+0xb8>)
   155fa:	f011 f992 	bl	26922 <assert_print>
   155fe:	f240 1181 	movw	r1, #385	; 0x181
   15602:	4822      	ldr	r0, [pc, #136]	; (1568c <bt_l2cap_connected+0xb0>)
   15604:	f011 f986 	bl	26914 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   15608:	4620      	mov	r0, r4
   1560a:	686b      	ldr	r3, [r5, #4]
   1560c:	a901      	add	r1, sp, #4
   1560e:	4798      	blx	r3
   15610:	2800      	cmp	r0, #0
   15612:	db2c      	blt.n	1566e <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15614:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15616:	882a      	ldrh	r2, [r5, #0]
   15618:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1561a:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1561c:	68a8      	ldr	r0, [r5, #8]
   1561e:	f103 0210 	add.w	r2, r3, #16
   15622:	e8d2 1fef 	ldaex	r1, [r2]
   15626:	e8c2 6fec 	stlex	ip, r6, [r2]
   1562a:	f1bc 0f00 	cmp.w	ip, #0
   1562e:	d1f8      	bne.n	15622 <bt_l2cap_connected+0x46>
	parent->next = child;
   15630:	609e      	str	r6, [r3, #8]
	return list->tail;
   15632:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   15634:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15638:	b9d9      	cbnz	r1, 15672 <bt_l2cap_connected+0x96>
	list->head = node;
   1563a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1563e:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   15640:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15642:	9801      	ldr	r0, [sp, #4]
   15644:	6843      	ldr	r3, [r0, #4]
   15646:	681b      	ldr	r3, [r3, #0]
   15648:	b103      	cbz	r3, 1564c <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   1564a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1564c:	9b01      	ldr	r3, [sp, #4]
   1564e:	3310      	adds	r3, #16
   15650:	e8d3 1fef 	ldaex	r1, [r3]
   15654:	f041 0101 	orr.w	r1, r1, #1
   15658:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1565c:	2a00      	cmp	r2, #0
   1565e:	d1f7      	bne.n	15650 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   15660:	9801      	ldr	r0, [sp, #4]
   15662:	6843      	ldr	r3, [r0, #4]
   15664:	69db      	ldr	r3, [r3, #28]
   15666:	b113      	cbz	r3, 1566e <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   15668:	f100 0110 	add.w	r1, r0, #16
   1566c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1566e:	350c      	adds	r5, #12
   15670:	e7b9      	b.n	155e6 <bt_l2cap_connected+0xa>
	parent->next = child;
   15672:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15674:	65a2      	str	r2, [r4, #88]	; 0x58
}
   15676:	e7e2      	b.n	1563e <bt_l2cap_connected+0x62>
   15678:	d3c6      	bcc.n	15608 <bt_l2cap_connected+0x2c>
}
   1567a:	b003      	add	sp, #12
   1567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1567e:	bf00      	nop
   15680:	0002c754 	.word	0x0002c754
   15684:	0002c778 	.word	0x0002c778
   15688:	00030a90 	.word	0x00030a90
   1568c:	00030a5f 	.word	0x00030a5f
   15690:	0002d881 	.word	0x0002d881
   15694:	0002e9b9 	.word	0x0002e9b9

00015698 <l2cap_recv>:
{
   15698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1569a:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   1569c:	8a0b      	ldrh	r3, [r1, #16]
{
   1569e:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   156a0:	2b03      	cmp	r3, #3
{
   156a2:	460d      	mov	r5, r1
   156a4:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   156a6:	d80b      	bhi.n	156c0 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   156a8:	4b30      	ldr	r3, [pc, #192]	; (1576c <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   156aa:	617b      	str	r3, [r7, #20]
   156ac:	2302      	movs	r3, #2
   156ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   156b2:	482f      	ldr	r0, [pc, #188]	; (15770 <l2cap_recv+0xd8>)
   156b4:	613b      	str	r3, [r7, #16]
   156b6:	f107 0210 	add.w	r2, r7, #16
   156ba:	f013 f961 	bl	28980 <z_log_msg_static_create.constprop.0>
		return 0;
   156be:	e019      	b.n	156f4 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   156c0:	2104      	movs	r1, #4
   156c2:	f105 000c 	add.w	r0, r5, #12
   156c6:	f005 fba9 	bl	1ae1c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   156ca:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   156cc:	8843      	ldrh	r3, [r0, #2]
   156ce:	4604      	mov	r4, r0
	if (buf->len != len) {
   156d0:	4299      	cmp	r1, r3
   156d2:	d013      	beq.n	156fc <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   156d4:	466c      	mov	r4, sp
   156d6:	b088      	sub	sp, #32
   156d8:	aa02      	add	r2, sp, #8
   156da:	61d3      	str	r3, [r2, #28]
   156dc:	2304      	movs	r3, #4
   156de:	4825      	ldr	r0, [pc, #148]	; (15774 <l2cap_recv+0xdc>)
   156e0:	e9c2 0105 	strd	r0, r1, [r2, #20]
   156e4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   156e8:	4821      	ldr	r0, [pc, #132]	; (15770 <l2cap_recv+0xd8>)
   156ea:	f842 3f10 	str.w	r3, [r2, #16]!
   156ee:	f013 f947 	bl	28980 <z_log_msg_static_create.constprop.0>
   156f2:	46a5      	mov	sp, r4
}
   156f4:	2000      	movs	r0, #0
   156f6:	371c      	adds	r7, #28
   156f8:	46bd      	mov	sp, r7
   156fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   156fc:	7843      	ldrb	r3, [r0, #1]
   156fe:	b90b      	cbnz	r3, 15704 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15700:	4b1d      	ldr	r3, [pc, #116]	; (15778 <l2cap_recv+0xe0>)
   15702:	e7d2      	b.n	156aa <l2cap_recv+0x12>
	switch (hdr->code) {
   15704:	7803      	ldrb	r3, [r0, #0]
   15706:	2b01      	cmp	r3, #1
   15708:	d0f4      	beq.n	156f4 <l2cap_recv+0x5c>
   1570a:	2b13      	cmp	r3, #19
   1570c:	d103      	bne.n	15716 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   1570e:	2901      	cmp	r1, #1
   15710:	d8f0      	bhi.n	156f4 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   15712:	4b1a      	ldr	r3, [pc, #104]	; (1577c <l2cap_recv+0xe4>)
   15714:	e7c9      	b.n	156aa <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15716:	466d      	mov	r5, sp
   15718:	b088      	sub	sp, #32
   1571a:	aa02      	add	r2, sp, #8
   1571c:	4918      	ldr	r1, [pc, #96]	; (15780 <l2cap_recv+0xe8>)
   1571e:	4814      	ldr	r0, [pc, #80]	; (15770 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   15720:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15724:	2303      	movs	r3, #3
   15726:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1572a:	f842 3f10 	str.w	r3, [r2, #16]!
   1572e:	f013 f927 	bl	28980 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15732:	2202      	movs	r2, #2
   15734:	46ad      	mov	sp, r5
   15736:	7861      	ldrb	r1, [r4, #1]
   15738:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1573a:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1573c:	f013 f923 	bl	28986 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15740:	4604      	mov	r4, r0
   15742:	2800      	cmp	r0, #0
   15744:	d0d6      	beq.n	156f4 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   15746:	2102      	movs	r1, #2
   15748:	300c      	adds	r0, #12
   1574a:	f005 fb85 	bl	1ae58 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1574e:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15750:	4622      	mov	r2, r4
   15752:	7003      	strb	r3, [r0, #0]
   15754:	7043      	strb	r3, [r0, #1]
   15756:	2105      	movs	r1, #5
   15758:	4628      	mov	r0, r5
   1575a:	9300      	str	r3, [sp, #0]
   1575c:	f013 f97c 	bl	28a58 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   15760:	2800      	cmp	r0, #0
   15762:	d0c7      	beq.n	156f4 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   15764:	4620      	mov	r0, r4
   15766:	f005 fa55 	bl	1ac14 <net_buf_unref>
   1576a:	e7c3      	b.n	156f4 <l2cap_recv+0x5c>
   1576c:	00030ab7 	.word	0x00030ab7
   15770:	0002c834 	.word	0x0002c834
   15774:	00030ad5 	.word	0x00030ad5
   15778:	00030af6 	.word	0x00030af6
   1577c:	00030b17 	.word	0x00030b17
   15780:	00030b33 	.word	0x00030b33

00015784 <bt_l2cap_recv>:
{
   15784:	b5b0      	push	{r4, r5, r7, lr}
   15786:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15788:	8a0b      	ldrh	r3, [r1, #16]
{
   1578a:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1578c:	2b03      	cmp	r3, #3
{
   1578e:	460c      	mov	r4, r1
   15790:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   15792:	d810      	bhi.n	157b6 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   15794:	4b17      	ldr	r3, [pc, #92]	; (157f4 <bt_l2cap_recv+0x70>)
   15796:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1579a:	617b      	str	r3, [r7, #20]
   1579c:	2302      	movs	r3, #2
   1579e:	4816      	ldr	r0, [pc, #88]	; (157f8 <bt_l2cap_recv+0x74>)
   157a0:	613b      	str	r3, [r7, #16]
   157a2:	f107 0210 	add.w	r2, r7, #16
   157a6:	f013 f8eb 	bl	28980 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   157aa:	4620      	mov	r0, r4
   157ac:	f005 fa32 	bl	1ac14 <net_buf_unref>
}
   157b0:	3718      	adds	r7, #24
   157b2:	46bd      	mov	sp, r7
   157b4:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   157b6:	2104      	movs	r1, #4
   157b8:	f104 000c 	add.w	r0, r4, #12
   157bc:	f005 fb2e 	bl	1ae1c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   157c0:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   157c2:	4628      	mov	r0, r5
   157c4:	f013 f96a 	bl	28a9c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   157c8:	b978      	cbnz	r0, 157ea <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   157ca:	466d      	mov	r5, sp
   157cc:	b088      	sub	sp, #32
   157ce:	466a      	mov	r2, sp
   157d0:	4b0a      	ldr	r3, [pc, #40]	; (157fc <bt_l2cap_recv+0x78>)
   157d2:	4809      	ldr	r0, [pc, #36]	; (157f8 <bt_l2cap_recv+0x74>)
   157d4:	e9c2 3105 	strd	r3, r1, [r2, #20]
   157d8:	2303      	movs	r3, #3
   157da:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   157de:	f842 3f10 	str.w	r3, [r2, #16]!
   157e2:	f013 f8cd 	bl	28980 <z_log_msg_static_create.constprop.0>
   157e6:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   157e8:	e7df      	b.n	157aa <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   157ea:	6843      	ldr	r3, [r0, #4]
   157ec:	4621      	mov	r1, r4
   157ee:	695b      	ldr	r3, [r3, #20]
   157f0:	4798      	blx	r3
   157f2:	e7da      	b.n	157aa <bt_l2cap_recv+0x26>
   157f4:	00030b5b 	.word	0x00030b5b
   157f8:	0002c834 	.word	0x0002c834
   157fc:	00030b78 	.word	0x00030b78

00015800 <bt_l2cap_update_conn_param>:
{
   15800:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15802:	4b17      	ldr	r3, [pc, #92]	; (15860 <bt_l2cap_update_conn_param+0x60>)
{
   15804:	460e      	mov	r6, r1
	ident++;
   15806:	7819      	ldrb	r1, [r3, #0]
{
   15808:	4605      	mov	r5, r0
	ident++;
   1580a:	3101      	adds	r1, #1
   1580c:	b2c9      	uxtb	r1, r1
   1580e:	2901      	cmp	r1, #1
   15810:	bf38      	it	cc
   15812:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15814:	2208      	movs	r2, #8
   15816:	2012      	movs	r0, #18
	ident++;
   15818:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1581a:	f013 f8b4 	bl	28986 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1581e:	4604      	mov	r4, r0
   15820:	b1d0      	cbz	r0, 15858 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   15822:	2108      	movs	r1, #8
   15824:	300c      	adds	r0, #12
   15826:	f005 fb17 	bl	1ae58 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1582a:	8833      	ldrh	r3, [r6, #0]
   1582c:	4622      	mov	r2, r4
   1582e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15830:	8873      	ldrh	r3, [r6, #2]
   15832:	2105      	movs	r1, #5
   15834:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15836:	88b3      	ldrh	r3, [r6, #4]
   15838:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1583a:	88f3      	ldrh	r3, [r6, #6]
   1583c:	80c3      	strh	r3, [r0, #6]
   1583e:	2300      	movs	r3, #0
   15840:	4628      	mov	r0, r5
   15842:	9300      	str	r3, [sp, #0]
   15844:	f013 f908 	bl	28a58 <bt_l2cap_send_cb>
	if (err) {
   15848:	4605      	mov	r5, r0
   1584a:	b110      	cbz	r0, 15852 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   1584c:	4620      	mov	r0, r4
   1584e:	f005 f9e1 	bl	1ac14 <net_buf_unref>
}
   15852:	4628      	mov	r0, r5
   15854:	b002      	add	sp, #8
   15856:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15858:	f06f 050b 	mvn.w	r5, #11
   1585c:	e7f9      	b.n	15852 <bt_l2cap_update_conn_param+0x52>
   1585e:	bf00      	nop
   15860:	200224c7 	.word	0x200224c7

00015864 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15864:	2823      	cmp	r0, #35	; 0x23
   15866:	d81f      	bhi.n	158a8 <att_op_get_type+0x44>
   15868:	281a      	cmp	r0, #26
   1586a:	d804      	bhi.n	15876 <att_op_get_type+0x12>
   1586c:	1e43      	subs	r3, r0, #1
   1586e:	2b18      	cmp	r3, #24
   15870:	d90e      	bls.n	15890 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15872:	2006      	movs	r0, #6
   15874:	4770      	bx	lr
	switch (op) {
   15876:	f1a0 031b 	sub.w	r3, r0, #27
   1587a:	2b08      	cmp	r3, #8
   1587c:	d81e      	bhi.n	158bc <att_op_get_type+0x58>
   1587e:	e8df f003 	tbb	[pc, r3]
   15882:	1d05      	.short	0x1d05
   15884:	191d231b 	.word	0x191d231b
   15888:	1d25      	.short	0x1d25
   1588a:	05          	.byte	0x05
   1588b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1588c:	2003      	movs	r0, #3
   1588e:	4770      	bx	lr
   15890:	2301      	movs	r3, #1
	switch (op) {
   15892:	4a0f      	ldr	r2, [pc, #60]	; (158d0 <att_op_get_type+0x6c>)
   15894:	4083      	lsls	r3, r0
   15896:	401a      	ands	r2, r3
   15898:	b9c2      	cbnz	r2, 158cc <att_op_get_type+0x68>
   1589a:	4a0e      	ldr	r2, [pc, #56]	; (158d4 <att_op_get_type+0x70>)
   1589c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1589e:	2a00      	cmp	r2, #0
   158a0:	bf14      	ite	ne
   158a2:	2001      	movne	r0, #1
   158a4:	2006      	moveq	r0, #6
   158a6:	4770      	bx	lr
	switch (op) {
   158a8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   158ac:	2b52      	cmp	r3, #82	; 0x52
   158ae:	d105      	bne.n	158bc <att_op_get_type+0x58>
		return ATT_COMMAND;
   158b0:	2000      	movs	r0, #0
}
   158b2:	4770      	bx	lr
		return ATT_REQUEST;
   158b4:	2001      	movs	r0, #1
   158b6:	4770      	bx	lr
		return ATT_INDICATION;
   158b8:	2005      	movs	r0, #5
   158ba:	4770      	bx	lr
		return ATT_COMMAND;
   158bc:	f010 0f40 	tst.w	r0, #64	; 0x40
   158c0:	bf0c      	ite	eq
   158c2:	2006      	moveq	r0, #6
   158c4:	2000      	movne	r0, #0
   158c6:	4770      	bx	lr
	switch (op) {
   158c8:	2004      	movs	r0, #4
   158ca:	4770      	bx	lr
		return ATT_RESPONSE;
   158cc:	2002      	movs	r0, #2
   158ce:	4770      	bx	lr
   158d0:	028aaaaa 	.word	0x028aaaaa
   158d4:	01455554 	.word	0x01455554

000158d8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   158d8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   158da:	3804      	subs	r0, #4
   158dc:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   158de:	a901      	add	r1, sp, #4
   158e0:	4802      	ldr	r0, [pc, #8]	; (158ec <bt_att_released+0x14>)
   158e2:	f00b fbbd 	bl	21060 <k_mem_slab_free>
}
   158e6:	b003      	add	sp, #12
   158e8:	f85d fb04 	ldr.w	pc, [sp], #4
   158ec:	20008be4 	.word	0x20008be4

000158f0 <tx_meta_data_free>:
{
   158f0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   158f2:	4604      	mov	r4, r0
   158f4:	b948      	cbnz	r0, 1590a <tx_meta_data_free+0x1a>
   158f6:	490a      	ldr	r1, [pc, #40]	; (15920 <tx_meta_data_free+0x30>)
   158f8:	480a      	ldr	r0, [pc, #40]	; (15924 <tx_meta_data_free+0x34>)
   158fa:	23a6      	movs	r3, #166	; 0xa6
   158fc:	4a0a      	ldr	r2, [pc, #40]	; (15928 <tx_meta_data_free+0x38>)
   158fe:	f011 f810 	bl	26922 <assert_print>
   15902:	21a6      	movs	r1, #166	; 0xa6
   15904:	4808      	ldr	r0, [pc, #32]	; (15928 <tx_meta_data_free+0x38>)
   15906:	f011 f805 	bl	26914 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   1590a:	2100      	movs	r1, #0
   1590c:	2214      	movs	r2, #20
   1590e:	f016 f847 	bl	2b9a0 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   15912:	4621      	mov	r1, r4
}
   15914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   15918:	4804      	ldr	r0, [pc, #16]	; (1592c <tx_meta_data_free+0x3c>)
   1591a:	f015 be30 	b.w	2b57e <k_queue_append>
   1591e:	bf00      	nop
   15920:	00030705 	.word	0x00030705
   15924:	0002d881 	.word	0x0002d881
   15928:	00030bad 	.word	0x00030bad
   1592c:	20008dac 	.word	0x20008dac

00015930 <find_type_cb>:
{
   15930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15934:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   15936:	f8d2 a000 	ldr.w	sl, [r2]
{
   1593a:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   1593c:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15940:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   15942:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15944:	f642 0301 	movw	r3, #10241	; 0x2801
{
   15948:	4680      	mov	r8, r0
   1594a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1594c:	6800      	ldr	r0, [r0, #0]
   1594e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15952:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15954:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   15958:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1595a:	f012 fbca 	bl	280f2 <bt_uuid_cmp>
   1595e:	2800      	cmp	r0, #0
   15960:	d070      	beq.n	15a44 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15962:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15966:	f8d8 0000 	ldr.w	r0, [r8]
   1596a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1596e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15970:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   15974:	f012 fbbd 	bl	280f2 <bt_uuid_cmp>
   15978:	b138      	cbz	r0, 1598a <find_type_cb+0x5a>
		if (data->group &&
   1597a:	68a3      	ldr	r3, [r4, #8]
   1597c:	b11b      	cbz	r3, 15986 <find_type_cb+0x56>
   1597e:	885a      	ldrh	r2, [r3, #2]
   15980:	42b2      	cmp	r2, r6
   15982:	d200      	bcs.n	15986 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   15984:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15986:	2001      	movs	r0, #1
   15988:	e009      	b.n	1599e <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1598a:	6861      	ldr	r1, [r4, #4]
   1598c:	4608      	mov	r0, r1
   1598e:	f013 f899 	bl	28ac4 <net_buf_frags_len>
   15992:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15996:	1a1b      	subs	r3, r3, r0
   15998:	2b03      	cmp	r3, #3
   1599a:	d804      	bhi.n	159a6 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   1599c:	2000      	movs	r0, #0
}
   1599e:	3744      	adds	r7, #68	; 0x44
   159a0:	46bd      	mov	sp, r7
   159a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   159a6:	4608      	mov	r0, r1
   159a8:	f005 f990 	bl	1accc <net_buf_frag_last>
   159ac:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   159ae:	6860      	ldr	r0, [r4, #4]
   159b0:	f013 f888 	bl	28ac4 <net_buf_frags_len>
   159b4:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   159b8:	f105 090c 	add.w	r9, r5, #12
   159bc:	ebab 0b00 	sub.w	fp, fp, r0
   159c0:	4648      	mov	r0, r9
   159c2:	f014 fa7f 	bl	29ec4 <net_buf_simple_tailroom>
   159c6:	4558      	cmp	r0, fp
   159c8:	d93f      	bls.n	15a4a <find_type_cb+0x11a>
   159ca:	6860      	ldr	r0, [r4, #4]
   159cc:	f013 f87a 	bl	28ac4 <net_buf_frags_len>
   159d0:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   159d4:	1a18      	subs	r0, r3, r0
	if (!len) {
   159d6:	b970      	cbnz	r0, 159f6 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   159d8:	6863      	ldr	r3, [r4, #4]
   159da:	7a98      	ldrb	r0, [r3, #10]
   159dc:	f004 fee0 	bl	1a7a0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   159e0:	2200      	movs	r2, #0
   159e2:	2300      	movs	r3, #0
   159e4:	f014 fa54 	bl	29e90 <net_buf_alloc_fixed>
		if (!frag) {
   159e8:	4605      	mov	r5, r0
   159ea:	2800      	cmp	r0, #0
   159ec:	d0d6      	beq.n	1599c <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   159ee:	4601      	mov	r1, r0
   159f0:	6860      	ldr	r0, [r4, #4]
   159f2:	f005 f9b1 	bl	1ad58 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   159f6:	2300      	movs	r3, #0
   159f8:	9300      	str	r3, [sp, #0]
   159fa:	4641      	mov	r1, r8
   159fc:	f8d8 a004 	ldr.w	sl, [r8, #4]
   15a00:	2310      	movs	r3, #16
   15a02:	6878      	ldr	r0, [r7, #4]
   15a04:	f107 0208 	add.w	r2, r7, #8
   15a08:	47d0      	blx	sl
	if (read < 0) {
   15a0a:	f1b0 0800 	subs.w	r8, r0, #0
   15a0e:	db19      	blt.n	15a44 <find_type_cb+0x114>
	if (read != data->value_len) {
   15a10:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15a12:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   15a14:	4542      	cmp	r2, r8
   15a16:	d03f      	beq.n	15a98 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15a18:	4601      	mov	r1, r0
   15a1a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15a1e:	f012 fb96 	bl	2814e <bt_uuid_create>
   15a22:	b9b0      	cbnz	r0, 15a52 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   15a24:	466d      	mov	r5, sp
   15a26:	b088      	sub	sp, #32
   15a28:	7c23      	ldrb	r3, [r4, #16]
   15a2a:	aa02      	add	r2, sp, #8
   15a2c:	491d      	ldr	r1, [pc, #116]	; (15aa4 <find_type_cb+0x174>)
   15a2e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   15a32:	2303      	movs	r3, #3
   15a34:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15a38:	481b      	ldr	r0, [pc, #108]	; (15aa8 <find_type_cb+0x178>)
   15a3a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a3e:	f013 f930 	bl	28ca2 <z_log_msg_static_create.constprop.0>
   15a42:	46ad      	mov	sp, r5
	data->group = NULL;
   15a44:	2300      	movs	r3, #0
   15a46:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   15a48:	e79d      	b.n	15986 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   15a4a:	4648      	mov	r0, r9
   15a4c:	f014 fa3a 	bl	29ec4 <net_buf_simple_tailroom>
   15a50:	e7c1      	b.n	159d6 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   15a52:	fa5f f288 	uxtb.w	r2, r8
   15a56:	f107 0108 	add.w	r1, r7, #8
   15a5a:	f107 0018 	add.w	r0, r7, #24
   15a5e:	f012 fb76 	bl	2814e <bt_uuid_create>
   15a62:	b930      	cbnz	r0, 15a72 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   15a64:	466d      	mov	r5, sp
   15a66:	b088      	sub	sp, #32
   15a68:	aa02      	add	r2, sp, #8
   15a6a:	4b10      	ldr	r3, [pc, #64]	; (15aac <find_type_cb+0x17c>)
   15a6c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15a70:	e7df      	b.n	15a32 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15a72:	f107 0118 	add.w	r1, r7, #24
   15a76:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15a7a:	f012 fb3a 	bl	280f2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15a7e:	2800      	cmp	r0, #0
   15a80:	d1e0      	bne.n	15a44 <find_type_cb+0x114>
	data->err = 0x00;
   15a82:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   15a84:	2104      	movs	r1, #4
   15a86:	7463      	strb	r3, [r4, #17]
   15a88:	f105 000c 	add.w	r0, r5, #12
   15a8c:	f005 f9e4 	bl	1ae58 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15a90:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15a92:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15a94:	68a3      	ldr	r3, [r4, #8]
   15a96:	e775      	b.n	15984 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   15a98:	f107 0108 	add.w	r1, r7, #8
   15a9c:	f015 ff36 	bl	2b90c <memcmp>
   15aa0:	e7ed      	b.n	15a7e <find_type_cb+0x14e>
   15aa2:	bf00      	nop
   15aa4:	00030bdc 	.word	0x00030bdc
   15aa8:	0002c7e4 	.word	0x0002c7e4
   15aac:	00030bfb 	.word	0x00030bfb

00015ab0 <chan_send>:
{
   15ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15ab4:	4606      	mov	r6, r0
   15ab6:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   15ab8:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   15abc:	68cb      	ldr	r3, [r1, #12]
{
   15abe:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15ac0:	2102      	movs	r1, #2
   15ac2:	3098      	adds	r0, #152	; 0x98
   15ac4:	f013 f818 	bl	28af8 <atomic_test_bit>
   15ac8:	2800      	cmp	r0, #0
   15aca:	d053      	beq.n	15b74 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15acc:	781b      	ldrb	r3, [r3, #0]
   15ace:	2bd2      	cmp	r3, #210	; 0xd2
   15ad0:	d11a      	bne.n	15b08 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   15ad2:	6833      	ldr	r3, [r6, #0]
   15ad4:	4621      	mov	r1, r4
   15ad6:	6818      	ldr	r0, [r3, #0]
   15ad8:	f014 f8bb 	bl	29c52 <bt_smp_sign>
		if (err) {
   15adc:	4605      	mov	r5, r0
   15ade:	b198      	cbz	r0, 15b08 <chan_send+0x58>
			LOG_ERR("Error signing data");
   15ae0:	4b26      	ldr	r3, [pc, #152]	; (15b7c <chan_send+0xcc>)
   15ae2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15ae6:	9307      	str	r3, [sp, #28]
   15ae8:	2302      	movs	r3, #2
   15aea:	4825      	ldr	r0, [pc, #148]	; (15b80 <chan_send+0xd0>)
   15aec:	aa06      	add	r2, sp, #24
   15aee:	9306      	str	r3, [sp, #24]
   15af0:	f013 f8d7 	bl	28ca2 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   15af4:	69a0      	ldr	r0, [r4, #24]
   15af6:	f7ff fefb 	bl	158f0 <tx_meta_data_free>
			net_buf_unref(buf);
   15afa:	4620      	mov	r0, r4
   15afc:	f005 f88a 	bl	1ac14 <net_buf_unref>
}
   15b00:	4628      	mov	r0, r5
   15b02:	b009      	add	sp, #36	; 0x24
   15b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15b08:	f104 000c 	add.w	r0, r4, #12
   15b0c:	f014 f9d6 	bl	29ebc <net_buf_simple_headroom>
	state->len = buf->len;
   15b10:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   15b14:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15b18:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   15b1a:	4607      	mov	r7, r0
   15b1c:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   15b1e:	68e3      	ldr	r3, [r4, #12]
   15b20:	7818      	ldrb	r0, [r3, #0]
   15b22:	f7ff fe9f 	bl	15864 <att_op_get_type>
   15b26:	2805      	cmp	r0, #5
   15b28:	4605      	mov	r5, r0
	switch (op_type) {
   15b2a:	d813      	bhi.n	15b54 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15b2c:	4b15      	ldr	r3, [pc, #84]	; (15b84 <chan_send+0xd4>)
   15b2e:	4622      	mov	r2, r4
   15b30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15b34:	2104      	movs	r1, #4
   15b36:	4630      	mov	r0, r6
   15b38:	f8cd 9000 	str.w	r9, [sp]
   15b3c:	f012 ff8c 	bl	28a58 <bt_l2cap_send_cb>
	if (err) {
   15b40:	4605      	mov	r5, r0
   15b42:	2800      	cmp	r0, #0
   15b44:	d0dc      	beq.n	15b00 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   15b46:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15b48:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15b4c:	fa13 f787 	uxtah	r7, r3, r7
   15b50:	60e7      	str	r7, [r4, #12]
}
   15b52:	e7d5      	b.n	15b00 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   15b54:	f240 2357 	movw	r3, #599	; 0x257
   15b58:	4a0b      	ldr	r2, [pc, #44]	; (15b88 <chan_send+0xd8>)
   15b5a:	490c      	ldr	r1, [pc, #48]	; (15b8c <chan_send+0xdc>)
   15b5c:	480c      	ldr	r0, [pc, #48]	; (15b90 <chan_send+0xe0>)
   15b5e:	f010 fee0 	bl	26922 <assert_print>
   15b62:	4629      	mov	r1, r5
   15b64:	480b      	ldr	r0, [pc, #44]	; (15b94 <chan_send+0xe4>)
   15b66:	f010 fedc 	bl	26922 <assert_print>
   15b6a:	f240 2157 	movw	r1, #599	; 0x257
   15b6e:	4806      	ldr	r0, [pc, #24]	; (15b88 <chan_send+0xd8>)
   15b70:	f010 fed0 	bl	26914 <assert_post_action>
		return -EINVAL;
   15b74:	f06f 0515 	mvn.w	r5, #21
   15b78:	e7c2      	b.n	15b00 <chan_send+0x50>
   15b7a:	bf00      	nop
   15b7c:	00030c1a 	.word	0x00030c1a
   15b80:	0002c7e4 	.word	0x0002c7e4
   15b84:	0002d2a4 	.word	0x0002d2a4
   15b88:	00030bad 	.word	0x00030bad
   15b8c:	000334e0 	.word	0x000334e0
   15b90:	0002d881 	.word	0x0002d881
   15b94:	00030c2d 	.word	0x00030c2d

00015b98 <bt_att_chan_req_send>:
{
   15b98:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   15b9a:	b958      	cbnz	r0, 15bb4 <bt_att_chan_req_send+0x1c>
   15b9c:	4919      	ldr	r1, [pc, #100]	; (15c04 <bt_att_chan_req_send+0x6c>)
   15b9e:	f44f 7346 	mov.w	r3, #792	; 0x318
   15ba2:	4a19      	ldr	r2, [pc, #100]	; (15c08 <bt_att_chan_req_send+0x70>)
   15ba4:	4819      	ldr	r0, [pc, #100]	; (15c0c <bt_att_chan_req_send+0x74>)
   15ba6:	f010 febc 	bl	26922 <assert_print>
   15baa:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   15bae:	4816      	ldr	r0, [pc, #88]	; (15c08 <bt_att_chan_req_send+0x70>)
   15bb0:	f010 feb0 	bl	26914 <assert_post_action>
   15bb4:	b949      	cbnz	r1, 15bca <bt_att_chan_req_send+0x32>
   15bb6:	4916      	ldr	r1, [pc, #88]	; (15c10 <bt_att_chan_req_send+0x78>)
   15bb8:	f240 3319 	movw	r3, #793	; 0x319
   15bbc:	4a12      	ldr	r2, [pc, #72]	; (15c08 <bt_att_chan_req_send+0x70>)
   15bbe:	4813      	ldr	r0, [pc, #76]	; (15c0c <bt_att_chan_req_send+0x74>)
   15bc0:	f010 feaf 	bl	26922 <assert_print>
   15bc4:	f240 3119 	movw	r1, #793	; 0x319
   15bc8:	e7f1      	b.n	15bae <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   15bca:	684a      	ldr	r2, [r1, #4]
   15bcc:	b94a      	cbnz	r2, 15be2 <bt_att_chan_req_send+0x4a>
   15bce:	4911      	ldr	r1, [pc, #68]	; (15c14 <bt_att_chan_req_send+0x7c>)
   15bd0:	f240 331a 	movw	r3, #794	; 0x31a
   15bd4:	4a0c      	ldr	r2, [pc, #48]	; (15c08 <bt_att_chan_req_send+0x70>)
   15bd6:	480d      	ldr	r0, [pc, #52]	; (15c0c <bt_att_chan_req_send+0x74>)
   15bd8:	f010 fea3 	bl	26922 <assert_print>
   15bdc:	f240 311a 	movw	r1, #794	; 0x31a
   15be0:	e7e5      	b.n	15bae <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   15be2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15be6:	b14b      	cbz	r3, 15bfc <bt_att_chan_req_send+0x64>
   15be8:	490b      	ldr	r1, [pc, #44]	; (15c18 <bt_att_chan_req_send+0x80>)
   15bea:	f240 331b 	movw	r3, #795	; 0x31b
   15bee:	4a06      	ldr	r2, [pc, #24]	; (15c08 <bt_att_chan_req_send+0x70>)
   15bf0:	4806      	ldr	r0, [pc, #24]	; (15c0c <bt_att_chan_req_send+0x74>)
   15bf2:	f010 fe96 	bl	26922 <assert_print>
   15bf6:	f240 311b 	movw	r1, #795	; 0x31b
   15bfa:	e7d8      	b.n	15bae <bt_att_chan_req_send+0x16>
}
   15bfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   15c00:	f013 b852 	b.w	28ca8 <chan_req_send>
   15c04:	00030c46 	.word	0x00030c46
   15c08:	00030bad 	.word	0x00030bad
   15c0c:	0002d881 	.word	0x0002d881
   15c10:	00030c5c 	.word	0x00030c5c
   15c14:	00030c4b 	.word	0x00030c4b
   15c18:	00030c55 	.word	0x00030c55

00015c1c <att_get>:
{
   15c1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15c1e:	7b43      	ldrb	r3, [r0, #13]
   15c20:	2b07      	cmp	r3, #7
   15c22:	d00d      	beq.n	15c40 <att_get+0x24>
		LOG_WRN("Not connected");
   15c24:	4b18      	ldr	r3, [pc, #96]	; (15c88 <att_get+0x6c>)
   15c26:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15c2a:	9305      	str	r3, [sp, #20]
   15c2c:	2302      	movs	r3, #2
   15c2e:	aa04      	add	r2, sp, #16
   15c30:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
   15c32:	4816      	ldr	r0, [pc, #88]	; (15c8c <att_get+0x70>)
   15c34:	f013 f835 	bl	28ca2 <z_log_msg_static_create.constprop.0>
		return NULL;
   15c38:	2000      	movs	r0, #0
}
   15c3a:	b007      	add	sp, #28
   15c3c:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   15c40:	2104      	movs	r1, #4
   15c42:	f012 ff2b 	bl	28a9c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15c46:	4603      	mov	r3, r0
   15c48:	b938      	cbnz	r0, 15c5a <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   15c4a:	4b11      	ldr	r3, [pc, #68]	; (15c90 <att_get+0x74>)
   15c4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15c50:	9305      	str	r3, [sp, #20]
   15c52:	2302      	movs	r3, #2
   15c54:	aa04      	add	r2, sp, #16
   15c56:	9304      	str	r3, [sp, #16]
   15c58:	e7eb      	b.n	15c32 <att_get+0x16>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   15c5a:	2102      	movs	r1, #2
   15c5c:	3094      	adds	r0, #148	; 0x94
   15c5e:	f012 ff4b 	bl	28af8 <atomic_test_bit>
   15c62:	b970      	cbnz	r0, 15c82 <att_get+0x66>
   15c64:	490b      	ldr	r1, [pc, #44]	; (15c94 <att_get+0x78>)
   15c66:	f640 332a 	movw	r3, #2858	; 0xb2a
   15c6a:	4a0b      	ldr	r2, [pc, #44]	; (15c98 <att_get+0x7c>)
   15c6c:	480b      	ldr	r0, [pc, #44]	; (15c9c <att_get+0x80>)
   15c6e:	f010 fe58 	bl	26922 <assert_print>
   15c72:	480b      	ldr	r0, [pc, #44]	; (15ca0 <att_get+0x84>)
   15c74:	f010 fe55 	bl	26922 <assert_print>
   15c78:	f640 312a 	movw	r1, #2858	; 0xb2a
   15c7c:	4806      	ldr	r0, [pc, #24]	; (15c98 <att_get+0x7c>)
   15c7e:	f010 fe49 	bl	26914 <assert_post_action>
	return att_chan->att;
   15c82:	f853 0c04 	ldr.w	r0, [r3, #-4]
   15c86:	e7d8      	b.n	15c3a <att_get+0x1e>
   15c88:	00030c60 	.word	0x00030c60
   15c8c:	0002c7e4 	.word	0x0002c7e4
   15c90:	00030c6e 	.word	0x00030c6e
   15c94:	00030c89 	.word	0x00030c89
   15c98:	00030bad 	.word	0x00030bad
   15c9c:	0002d881 	.word	0x0002d881
   15ca0:	00030cb9 	.word	0x00030cb9

00015ca4 <bt_att_connected>:
{
   15ca4:	b510      	push	{r4, lr}
   15ca6:	4604      	mov	r4, r0
   15ca8:	f100 0394 	add.w	r3, r0, #148	; 0x94
   15cac:	e8d3 1fef 	ldaex	r1, [r3]
   15cb0:	f041 0104 	orr.w	r1, r1, #4
   15cb4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15cb8:	2a00      	cmp	r2, #0
   15cba:	d1f7      	bne.n	15cac <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15cbc:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   15cbe:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15cc0:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15cc2:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   15cc4:	f012 ff5a 	bl	28b7c <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15cc8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   15ccc:	4903      	ldr	r1, [pc, #12]	; (15cdc <bt_att_connected+0x38>)
   15cce:	f00c fa83 	bl	221d8 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   15cd2:	6820      	ldr	r0, [r4, #0]
}
   15cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   15cd8:	f002 bb54 	b.w	18384 <bt_gatt_connected>
   15cdc:	000169ad 	.word	0x000169ad

00015ce0 <read_group_cb>:
{
   15ce0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15ce4:	f04f 0800 	mov.w	r8, #0
   15ce8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   15cec:	4605      	mov	r5, r0
   15cee:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15cf0:	6800      	ldr	r0, [r0, #0]
   15cf2:	a902      	add	r1, sp, #8
{
   15cf4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   15cf6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15cf8:	f88d 8008 	strb.w	r8, [sp, #8]
   15cfc:	f8ad 300a 	strh.w	r3, [sp, #10]
   15d00:	f012 f9f7 	bl	280f2 <bt_uuid_cmp>
   15d04:	b1a0      	cbz	r0, 15d30 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15d06:	f642 0301 	movw	r3, #10241	; 0x2801
   15d0a:	6828      	ldr	r0, [r5, #0]
   15d0c:	a903      	add	r1, sp, #12
   15d0e:	f88d 800c 	strb.w	r8, [sp, #12]
   15d12:	f8ad 300e 	strh.w	r3, [sp, #14]
   15d16:	f012 f9ec 	bl	280f2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15d1a:	b148      	cbz	r0, 15d30 <read_group_cb+0x50>
		if (data->group &&
   15d1c:	6923      	ldr	r3, [r4, #16]
   15d1e:	b11b      	cbz	r3, 15d28 <read_group_cb+0x48>
   15d20:	885a      	ldrh	r2, [r3, #2]
   15d22:	42b2      	cmp	r2, r6
   15d24:	d200      	bcs.n	15d28 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   15d26:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15d28:	2001      	movs	r0, #1
}
   15d2a:	b004      	add	sp, #16
   15d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15d30:	6861      	ldr	r1, [r4, #4]
   15d32:	6828      	ldr	r0, [r5, #0]
   15d34:	f012 f9dd 	bl	280f2 <bt_uuid_cmp>
   15d38:	b110      	cbz	r0, 15d40 <read_group_cb+0x60>
		data->group = NULL;
   15d3a:	2300      	movs	r3, #0
   15d3c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   15d3e:	e7f3      	b.n	15d28 <read_group_cb+0x48>
	if (data->rsp->len &&
   15d40:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15d42:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   15d44:	781a      	ldrb	r2, [r3, #0]
   15d46:	b132      	cbz	r2, 15d56 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15d48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   15d4a:	8a01      	ldrh	r1, [r0, #16]
   15d4c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15d4e:	4293      	cmp	r3, r2
   15d50:	da01      	bge.n	15d56 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   15d52:	2000      	movs	r0, #0
   15d54:	e7e9      	b.n	15d2a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   15d56:	2104      	movs	r1, #4
   15d58:	300c      	adds	r0, #12
   15d5a:	f005 f87d 	bl	1ae58 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   15d5e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15d60:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15d62:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15d64:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   15d66:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15d68:	4b07      	ldr	r3, [pc, #28]	; (15d88 <read_group_cb+0xa8>)
   15d6a:	9401      	str	r4, [sp, #4]
   15d6c:	9300      	str	r3, [sp, #0]
   15d6e:	4638      	mov	r0, r7
   15d70:	2300      	movs	r3, #0
   15d72:	68a2      	ldr	r2, [r4, #8]
   15d74:	f012 ffd9 	bl	28d2a <att_chan_read>
	if (read < 0) {
   15d78:	2800      	cmp	r0, #0
   15d7a:	dbea      	blt.n	15d52 <read_group_cb+0x72>
	if (!data->group) {
   15d7c:	6920      	ldr	r0, [r4, #16]
   15d7e:	3800      	subs	r0, #0
   15d80:	bf18      	it	ne
   15d82:	2001      	movne	r0, #1
   15d84:	e7d1      	b.n	15d2a <read_group_cb+0x4a>
   15d86:	bf00      	nop
   15d88:	00028be3 	.word	0x00028be3

00015d8c <read_type_cb>:
{
   15d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15d90:	6817      	ldr	r7, [r2, #0]
{
   15d92:	4605      	mov	r5, r0
   15d94:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15d96:	6800      	ldr	r0, [r0, #0]
   15d98:	6851      	ldr	r1, [r2, #4]
{
   15d9a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   15d9c:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15d9e:	f012 f9a8 	bl	280f2 <bt_uuid_cmp>
   15da2:	4681      	mov	r9, r0
   15da4:	2800      	cmp	r0, #0
   15da6:	d13c      	bne.n	15e22 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15da8:	4630      	mov	r0, r6
   15daa:	2295      	movs	r2, #149	; 0x95
   15dac:	4629      	mov	r1, r5
   15dae:	f013 fc80 	bl	296b2 <bt_gatt_check_perm>
   15db2:	4606      	mov	r6, r0
   15db4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   15db6:	b140      	cbz	r0, 15dca <read_type_cb+0x3e>
		if (data->rsp->len) {
   15db8:	68e3      	ldr	r3, [r4, #12]
   15dba:	781b      	ldrb	r3, [r3, #0]
   15dbc:	b10b      	cbz	r3, 15dc2 <read_type_cb+0x36>
			data->err = 0x00;
   15dbe:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   15dc2:	2000      	movs	r0, #0
}
   15dc4:	b003      	add	sp, #12
   15dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15dca:	68a0      	ldr	r0, [r4, #8]
   15dcc:	f004 ff7e 	bl	1accc <net_buf_frag_last>
   15dd0:	2102      	movs	r1, #2
   15dd2:	300c      	adds	r0, #12
   15dd4:	f005 f840 	bl	1ae58 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15dd8:	4b13      	ldr	r3, [pc, #76]	; (15e28 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15dda:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   15ddc:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15de0:	9300      	str	r3, [sp, #0]
   15de2:	9401      	str	r4, [sp, #4]
   15de4:	4633      	mov	r3, r6
   15de6:	4629      	mov	r1, r5
   15de8:	4638      	mov	r0, r7
   15dea:	68a2      	ldr	r2, [r4, #8]
   15dec:	f012 ff9d 	bl	28d2a <att_chan_read>
	if (read < 0) {
   15df0:	2800      	cmp	r0, #0
   15df2:	da07      	bge.n	15e04 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   15df4:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   15df8:	bf32      	itee	cc
   15dfa:	200e      	movcc	r0, #14
		return -err;
   15dfc:	4240      	negcs	r0, r0
   15dfe:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   15e00:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15e02:	e7de      	b.n	15dc2 <read_type_cb+0x36>
	if (!data->item) {
   15e04:	6923      	ldr	r3, [r4, #16]
   15e06:	2b00      	cmp	r3, #0
   15e08:	d0db      	beq.n	15dc2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15e0a:	68a0      	ldr	r0, [r4, #8]
   15e0c:	f012 fe5a 	bl	28ac4 <net_buf_frags_len>
   15e10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   15e12:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15e14:	68e3      	ldr	r3, [r4, #12]
   15e16:	781b      	ldrb	r3, [r3, #0]
   15e18:	4298      	cmp	r0, r3
   15e1a:	bf94      	ite	ls
   15e1c:	2000      	movls	r0, #0
   15e1e:	2001      	movhi	r0, #1
   15e20:	e7d0      	b.n	15dc4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15e22:	2001      	movs	r0, #1
   15e24:	e7ce      	b.n	15dc4 <read_type_cb+0x38>
   15e26:	bf00      	nop
   15e28:	00028ad5 	.word	0x00028ad5

00015e2c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e30:	b082      	sub	sp, #8
   15e32:	af00      	add	r7, sp, #0
   15e34:	4604      	mov	r4, r0
   15e36:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15e38:	2200      	movs	r2, #0
   15e3a:	2300      	movs	r3, #0
   15e3c:	4639      	mov	r1, r7
   15e3e:	483a      	ldr	r0, [pc, #232]	; (15f28 <bt_att_accept+0xfc>)
   15e40:	f00b f8a4 	bl	20f8c <k_mem_slab_alloc>
   15e44:	4605      	mov	r5, r0
   15e46:	b1a8      	cbz	r0, 15e74 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   15e48:	466d      	mov	r5, sp
   15e4a:	b088      	sub	sp, #32
   15e4c:	466a      	mov	r2, sp
   15e4e:	4b37      	ldr	r3, [pc, #220]	; (15f2c <bt_att_accept+0x100>)
   15e50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15e54:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15e58:	2303      	movs	r3, #3
   15e5a:	4835      	ldr	r0, [pc, #212]	; (15f30 <bt_att_accept+0x104>)
   15e5c:	f842 3f10 	str.w	r3, [r2, #16]!
   15e60:	f012 ff1f 	bl	28ca2 <z_log_msg_static_create.constprop.0>
   15e64:	46ad      	mov	sp, r5
		return -ENOMEM;
   15e66:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   15e6a:	4628      	mov	r0, r5
   15e6c:	3708      	adds	r7, #8
   15e6e:	46bd      	mov	sp, r7
   15e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   15e74:	f00d fc54 	bl	23720 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   15e78:	4b2e      	ldr	r3, [pc, #184]	; (15f34 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   15e7a:	f8d7 8000 	ldr.w	r8, [r7]
   15e7e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   15e80:	6018      	str	r0, [r3, #0]
   15e82:	222c      	movs	r2, #44	; 0x2c
   15e84:	f108 0004 	add.w	r0, r8, #4
   15e88:	f015 fd8a 	bl	2b9a0 <memset>
	att->conn = conn;
   15e8c:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   15e90:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15e92:	2200      	movs	r2, #0
	list->tail = NULL;
   15e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
   15e98:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   15e9c:	2300      	movs	r3, #0
   15e9e:	4826      	ldr	r0, [pc, #152]	; (15f38 <bt_att_accept+0x10c>)
   15ea0:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15ea2:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15ea4:	f00b f872 	bl	20f8c <k_mem_slab_alloc>
   15ea8:	4605      	mov	r5, r0
   15eaa:	b180      	cbz	r0, 15ece <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   15eac:	6823      	ldr	r3, [r4, #0]
   15eae:	466c      	mov	r4, sp
   15eb0:	b088      	sub	sp, #32
   15eb2:	466a      	mov	r2, sp
   15eb4:	4921      	ldr	r1, [pc, #132]	; (15f3c <bt_att_accept+0x110>)
   15eb6:	481e      	ldr	r0, [pc, #120]	; (15f30 <bt_att_accept+0x104>)
   15eb8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15ebc:	2303      	movs	r3, #3
   15ebe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15ec2:	f842 3f10 	str.w	r3, [r2, #16]!
   15ec6:	f012 feec 	bl	28ca2 <z_log_msg_static_create.constprop.0>
   15eca:	46a5      	mov	sp, r4
	if (!chan) {
   15ecc:	e7cb      	b.n	15e66 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   15ece:	687b      	ldr	r3, [r7, #4]
   15ed0:	4601      	mov	r1, r0
   15ed2:	22f8      	movs	r2, #248	; 0xf8
   15ed4:	4618      	mov	r0, r3
   15ed6:	f015 fd63 	bl	2b9a0 <memset>
	chan->chan.chan.ops = &ops;
   15eda:	4a19      	ldr	r2, [pc, #100]	; (15f40 <bt_att_accept+0x114>)
   15edc:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   15ede:	30a0      	adds	r0, #160	; 0xa0
   15ee0:	f015 fb40 	bl	2b564 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15ee4:	687b      	ldr	r3, [r7, #4]
   15ee6:	3398      	adds	r3, #152	; 0x98
   15ee8:	e8d3 2fef 	ldaex	r2, [r3]
   15eec:	e8c3 5fe1 	stlex	r1, r5, [r3]
   15ef0:	2900      	cmp	r1, #0
   15ef2:	d1f9      	bne.n	15ee8 <bt_att_accept+0xbc>
	chan->att = att;
   15ef4:	687b      	ldr	r3, [r7, #4]
   15ef6:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   15ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   15efa:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   15efe:	b91b      	cbnz	r3, 15f08 <bt_att_accept+0xdc>
   15f00:	f104 000c 	add.w	r0, r4, #12
   15f04:	f015 fb2e 	bl	2b564 <z_impl_k_queue_init>
	return list->head;
   15f08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15f0a:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   15f0e:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   15f12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   15f14:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   15f16:	b902      	cbnz	r2, 15f1a <bt_att_accept+0xee>
	list->tail = node;
   15f18:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   15f1a:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   15f1c:	2b00      	cmp	r3, #0
   15f1e:	d0a2      	beq.n	15e66 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   15f20:	3304      	adds	r3, #4
   15f22:	6033      	str	r3, [r6, #0]
	return 0;
   15f24:	e7a1      	b.n	15e6a <bt_att_accept+0x3e>
   15f26:	bf00      	nop
   15f28:	20008bc4 	.word	0x20008bc4
   15f2c:	00030cd5 	.word	0x00030cd5
   15f30:	0002c7e4 	.word	0x0002c7e4
   15f34:	200217a0 	.word	0x200217a0
   15f38:	20008be4 	.word	0x20008be4
   15f3c:	00030cfa 	.word	0x00030cfa
   15f40:	20008670 	.word	0x20008670

00015f44 <bt_att_chan_create_pdu>:
{
   15f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15f48:	b086      	sub	sp, #24
   15f4a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   15f4c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   15f4e:	1c53      	adds	r3, r2, #1
   15f50:	428b      	cmp	r3, r1
{
   15f52:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   15f54:	d915      	bls.n	15f82 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   15f56:	466c      	mov	r4, sp
   15f58:	b088      	sub	sp, #32
   15f5a:	466a      	mov	r2, sp
   15f5c:	4829      	ldr	r0, [pc, #164]	; (16004 <bt_att_chan_create_pdu+0xc0>)
   15f5e:	61d3      	str	r3, [r2, #28]
   15f60:	2304      	movs	r3, #4
   15f62:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15f66:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15f6a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   15f6e:	4826      	ldr	r0, [pc, #152]	; (16008 <bt_att_chan_create_pdu+0xc4>)
   15f70:	f012 fe97 	bl	28ca2 <z_log_msg_static_create.constprop.0>
   15f74:	46a5      	mov	sp, r4
		return NULL;
   15f76:	2400      	movs	r4, #0
}
   15f78:	4620      	mov	r0, r4
   15f7a:	3718      	adds	r7, #24
   15f7c:	46bd      	mov	sp, r7
   15f7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   15f82:	4628      	mov	r0, r5
   15f84:	f7ff fc6e 	bl	15864 <att_op_get_type>
   15f88:	2802      	cmp	r0, #2
   15f8a:	d019      	beq.n	15fc0 <bt_att_chan_create_pdu+0x7c>
   15f8c:	2804      	cmp	r0, #4
   15f8e:	d017      	beq.n	15fc0 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   15f90:	f04f 38ff 	mov.w	r8, #4294967295
   15f94:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   15f98:	2100      	movs	r1, #0
   15f9a:	4642      	mov	r2, r8
   15f9c:	464b      	mov	r3, r9
   15f9e:	4608      	mov	r0, r1
   15fa0:	f012 fd57 	bl	28a52 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   15fa4:	4604      	mov	r4, r0
   15fa6:	b980      	cbnz	r0, 15fca <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   15fa8:	466c      	mov	r4, sp
   15faa:	b088      	sub	sp, #32
   15fac:	466a      	mov	r2, sp
   15fae:	4b17      	ldr	r3, [pc, #92]	; (1600c <bt_att_chan_create_pdu+0xc8>)
   15fb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15fb4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15fb8:	2303      	movs	r3, #3
   15fba:	f842 3f10 	str.w	r3, [r2, #16]!
   15fbe:	e7d6      	b.n	15f6e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   15fc0:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   15fc4:	f04f 0900 	mov.w	r9, #0
   15fc8:	e7e6      	b.n	15f98 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   15fca:	4811      	ldr	r0, [pc, #68]	; (16010 <bt_att_chan_create_pdu+0xcc>)
   15fcc:	4642      	mov	r2, r8
   15fce:	464b      	mov	r3, r9
   15fd0:	f00b fc14 	bl	217fc <z_impl_k_queue_get>
	if (!data) {
   15fd4:	b970      	cbnz	r0, 15ff4 <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   15fd6:	4b0f      	ldr	r3, [pc, #60]	; (16014 <bt_att_chan_create_pdu+0xd0>)
   15fd8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15fdc:	617b      	str	r3, [r7, #20]
   15fde:	2302      	movs	r3, #2
   15fe0:	4809      	ldr	r0, [pc, #36]	; (16008 <bt_att_chan_create_pdu+0xc4>)
   15fe2:	613b      	str	r3, [r7, #16]
   15fe4:	f107 0210 	add.w	r2, r7, #16
   15fe8:	f012 fe5b 	bl	28ca2 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   15fec:	4620      	mov	r0, r4
   15fee:	f004 fe11 	bl	1ac14 <net_buf_unref>
		return NULL;
   15ff2:	e7c0      	b.n	15f76 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   15ff4:	61a0      	str	r0, [r4, #24]
   15ff6:	2101      	movs	r1, #1
   15ff8:	f104 000c 	add.w	r0, r4, #12
   15ffc:	f004 ff2c 	bl	1ae58 <net_buf_simple_add>
	hdr->code = op;
   16000:	7005      	strb	r5, [r0, #0]
	return buf;
   16002:	e7b9      	b.n	15f78 <bt_att_chan_create_pdu+0x34>
   16004:	00030d1f 	.word	0x00030d1f
   16008:	0002c7e4 	.word	0x0002c7e4
   1600c:	00030a10 	.word	0x00030a10
   16010:	20008dac 	.word	0x20008dac
   16014:	00030d44 	.word	0x00030d44

00016018 <bt_att_recv>:
{
   16018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1601c:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1601e:	8a0b      	ldrh	r3, [r1, #16]
{
   16020:	4682      	mov	sl, r0
   16022:	460c      	mov	r4, r1
   16024:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   16026:	b97b      	cbnz	r3, 16048 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   16028:	4b4c      	ldr	r3, [pc, #304]	; (1615c <bt_att_recv+0x144>)
   1602a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1602e:	617b      	str	r3, [r7, #20]
   16030:	2302      	movs	r3, #2
   16032:	f107 0210 	add.w	r2, r7, #16
   16036:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   16038:	4849      	ldr	r0, [pc, #292]	; (16160 <bt_att_recv+0x148>)
   1603a:	f012 fe32 	bl	28ca2 <z_log_msg_static_create.constprop.0>
}
   1603e:	2000      	movs	r0, #0
   16040:	371c      	adds	r7, #28
   16042:	46bd      	mov	sp, r7
   16044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16048:	2101      	movs	r1, #1
   1604a:	f104 000c 	add.w	r0, r4, #12
   1604e:	f004 fee5 	bl	1ae1c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16052:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   16056:	4605      	mov	r5, r0
   16058:	2b00      	cmp	r3, #0
   1605a:	d0f0      	beq.n	1603e <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1605c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1605e:	7801      	ldrb	r1, [r0, #0]
   16060:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16164 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16064:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   16068:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1606c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   16070:	4288      	cmp	r0, r1
   16072:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   16076:	d114      	bne.n	160a2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   16078:	f892 9002 	ldrb.w	r9, [r2, #2]
   1607c:	f1b9 0f01 	cmp.w	r9, #1
   16080:	d131      	bne.n	160e6 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16082:	2100      	movs	r1, #0
   16084:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   16088:	f012 fef5 	bl	28e76 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1608c:	2800      	cmp	r0, #0
   1608e:	d035      	beq.n	160fc <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   16090:	4b35      	ldr	r3, [pc, #212]	; (16168 <bt_att_recv+0x150>)
   16092:	617b      	str	r3, [r7, #20]
   16094:	2302      	movs	r3, #2
   16096:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1609a:	613b      	str	r3, [r7, #16]
   1609c:	f107 0210 	add.w	r2, r7, #16
   160a0:	e7ca      	b.n	16038 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   160a2:	3301      	adds	r3, #1
   160a4:	2b0e      	cmp	r3, #14
   160a6:	d1df      	bne.n	16068 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   160a8:	466c      	mov	r4, sp
   160aa:	b088      	sub	sp, #32
   160ac:	466a      	mov	r2, sp
   160ae:	4b2f      	ldr	r3, [pc, #188]	; (1616c <bt_att_recv+0x154>)
   160b0:	482b      	ldr	r0, [pc, #172]	; (16160 <bt_att_recv+0x148>)
   160b2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   160b6:	2303      	movs	r3, #3
   160b8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   160bc:	f842 3f10 	str.w	r3, [r2, #16]!
   160c0:	f012 fdef 	bl	28ca2 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   160c4:	7829      	ldrb	r1, [r5, #0]
   160c6:	46a5      	mov	sp, r4
   160c8:	4608      	mov	r0, r1
   160ca:	f7ff fbcb 	bl	15864 <att_op_get_type>
   160ce:	2800      	cmp	r0, #0
   160d0:	d0b5      	beq.n	1603e <bt_att_recv+0x26>
   160d2:	2805      	cmp	r0, #5
   160d4:	d0b3      	beq.n	1603e <bt_att_recv+0x26>
	if (!req) {
   160d6:	2900      	cmp	r1, #0
   160d8:	d0b1      	beq.n	1603e <bt_att_recv+0x26>
   160da:	2306      	movs	r3, #6
   160dc:	2200      	movs	r2, #0
   160de:	4630      	mov	r0, r6
   160e0:	f013 f82d 	bl	2913e <send_err_rsp.part.0>
   160e4:	e7ab      	b.n	1603e <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   160e6:	f1b9 0f05 	cmp.w	r9, #5
   160ea:	d107      	bne.n	160fc <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   160ec:	2101      	movs	r1, #1
   160ee:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   160f2:	f012 fec0 	bl	28e76 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   160f6:	b108      	cbz	r0, 160fc <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   160f8:	4b1d      	ldr	r3, [pc, #116]	; (16170 <bt_att_recv+0x158>)
   160fa:	e7ca      	b.n	16092 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   160fc:	44d8      	add	r8, fp
   160fe:	8a23      	ldrh	r3, [r4, #16]
   16100:	f898 2001 	ldrb.w	r2, [r8, #1]
   16104:	429a      	cmp	r2, r3
   16106:	d916      	bls.n	16136 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   16108:	46e9      	mov	r9, sp
   1610a:	b088      	sub	sp, #32
   1610c:	466a      	mov	r2, sp
   1610e:	7829      	ldrb	r1, [r5, #0]
   16110:	2404      	movs	r4, #4
   16112:	4818      	ldr	r0, [pc, #96]	; (16174 <bt_att_recv+0x15c>)
   16114:	61d1      	str	r1, [r2, #28]
   16116:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1611a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1611e:	4810      	ldr	r0, [pc, #64]	; (16160 <bt_att_recv+0x148>)
   16120:	f842 4f10 	str.w	r4, [r2, #16]!
   16124:	f012 fdbd 	bl	28ca2 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   16128:	f898 3002 	ldrb.w	r3, [r8, #2]
   1612c:	46cd      	mov	sp, r9
   1612e:	2b01      	cmp	r3, #1
   16130:	d185      	bne.n	1603e <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   16132:	4623      	mov	r3, r4
   16134:	e00c      	b.n	16150 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   16136:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1613a:	4621      	mov	r1, r4
   1613c:	4630      	mov	r0, r6
   1613e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16140:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   16144:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   16146:	f47f af7a 	bne.w	1603e <bt_att_recv+0x26>
   1614a:	2800      	cmp	r0, #0
   1614c:	f43f af77 	beq.w	1603e <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16150:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   16152:	2900      	cmp	r1, #0
   16154:	f43f af73 	beq.w	1603e <bt_att_recv+0x26>
   16158:	e7c0      	b.n	160dc <bt_att_recv+0xc4>
   1615a:	bf00      	nop
   1615c:	00030d63 	.word	0x00030d63
   16160:	0002c7e4 	.word	0x0002c7e4
   16164:	0002d2bc 	.word	0x0002d2bc
   16168:	00030d98 	.word	0x00030d98
   1616c:	00030d7e 	.word	0x00030d7e
   16170:	00030db4 	.word	0x00030db4
   16174:	00030dd3 	.word	0x00030dd3

00016178 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1617a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1617c:	6803      	ldr	r3, [r0, #0]
   1617e:	460d      	mov	r5, r1
   16180:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16182:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16184:	bf18      	it	ne
   16186:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16188:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1618a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1618c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1618e:	f013 fac4 	bl	2971a <bt_gatt_change_aware>
   16192:	b948      	cbnz	r0, 161a8 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16194:	2105      	movs	r1, #5
   16196:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1619a:	f012 fe6c 	bl	28e76 <atomic_test_and_set_bit>
   1619e:	2800      	cmp	r0, #0
   161a0:	d048      	beq.n	16234 <att_write_rsp.constprop.0+0xbc>
			return 0;
   161a2:	2000      	movs	r0, #0
}
   161a4:	b007      	add	sp, #28
   161a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   161a8:	2e00      	cmp	r6, #0
   161aa:	d045      	beq.n	16238 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   161ac:	2218      	movs	r2, #24
   161ae:	2100      	movs	r1, #0
   161b0:	4668      	mov	r0, sp
   161b2:	f015 fbf5 	bl	2b9a0 <memset>
	if (rsp) {
   161b6:	bb67      	cbnz	r7, 16212 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   161b8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   161ba:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   161bc:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   161be:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   161c0:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   161c2:	2300      	movs	r3, #0
   161c4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   161c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   161ca:	4a1c      	ldr	r2, [pc, #112]	; (1623c <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   161cc:	9303      	str	r3, [sp, #12]
	data.len = len;
   161ce:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   161d2:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   161d6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   161da:	2301      	movs	r3, #1
   161dc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   161e0:	466b      	mov	r3, sp
   161e2:	f012 fcc0 	bl	28b66 <bt_gatt_foreach_attr>
	if (data.err) {
   161e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   161ea:	b1e3      	cbz	r3, 16226 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   161ec:	2f00      	cmp	r7, #0
   161ee:	d0d8      	beq.n	161a2 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   161f0:	9b01      	ldr	r3, [sp, #4]
   161f2:	6998      	ldr	r0, [r3, #24]
   161f4:	f7ff fb7c 	bl	158f0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   161f8:	9801      	ldr	r0, [sp, #4]
   161fa:	f004 fd0b 	bl	1ac14 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   161fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   16202:	2d00      	cmp	r5, #0
   16204:	d0cd      	beq.n	161a2 <att_write_rsp.constprop.0+0x2a>
   16206:	4632      	mov	r2, r6
   16208:	4629      	mov	r1, r5
   1620a:	4620      	mov	r0, r4
   1620c:	f012 ff97 	bl	2913e <send_err_rsp.part.0>
   16210:	e7c7      	b.n	161a2 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16212:	2200      	movs	r2, #0
   16214:	4639      	mov	r1, r7
   16216:	4620      	mov	r0, r4
   16218:	f7ff fe94 	bl	15f44 <bt_att_chan_create_pdu>
   1621c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1621e:	2800      	cmp	r0, #0
   16220:	d1ca      	bne.n	161b8 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   16222:	200e      	movs	r0, #14
   16224:	e7be      	b.n	161a4 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   16226:	9901      	ldr	r1, [sp, #4]
   16228:	2900      	cmp	r1, #0
   1622a:	d0ba      	beq.n	161a2 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1622c:	4620      	mov	r0, r4
   1622e:	f012 fd6e 	bl	28d0e <bt_att_chan_send_rsp>
   16232:	e7b6      	b.n	161a2 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16234:	2012      	movs	r0, #18
   16236:	e7b5      	b.n	161a4 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16238:	2001      	movs	r0, #1
   1623a:	e7b3      	b.n	161a4 <att_write_rsp.constprop.0+0x2c>
   1623c:	00028b05 	.word	0x00028b05

00016240 <bt_att_create_pdu>:
{
   16240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16242:	af00      	add	r7, sp, #0
   16244:	460e      	mov	r6, r1
   16246:	4615      	mov	r5, r2
	att = att_get(conn);
   16248:	f7ff fce8 	bl	15c1c <att_get>
	if (!att) {
   1624c:	b1e0      	cbz	r0, 16288 <bt_att_create_pdu+0x48>
	return list->head;
   1624e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16250:	4618      	mov	r0, r3
   16252:	b11b      	cbz	r3, 1625c <bt_att_create_pdu+0x1c>
	return node->next;
   16254:	f850 39f0 	ldr.w	r3, [r0], #-240
   16258:	b103      	cbz	r3, 1625c <bt_att_create_pdu+0x1c>
   1625a:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1625c:	1c6c      	adds	r4, r5, #1
   1625e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16260:	b118      	cbz	r0, 1626a <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16262:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16264:	42a1      	cmp	r1, r4
   16266:	d219      	bcs.n	1629c <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16268:	b983      	cbnz	r3, 1628c <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1626a:	466d      	mov	r5, sp
   1626c:	b088      	sub	sp, #32
   1626e:	466a      	mov	r2, sp
   16270:	4b0e      	ldr	r3, [pc, #56]	; (162ac <bt_att_create_pdu+0x6c>)
   16272:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16276:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1627a:	2303      	movs	r3, #3
   1627c:	480c      	ldr	r0, [pc, #48]	; (162b0 <bt_att_create_pdu+0x70>)
   1627e:	f842 3f10 	str.w	r3, [r2, #16]!
   16282:	f012 fd0e 	bl	28ca2 <z_log_msg_static_create.constprop.0>
   16286:	46ad      	mov	sp, r5
		return NULL;
   16288:	2000      	movs	r0, #0
   1628a:	e00b      	b.n	162a4 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1628c:	4618      	mov	r0, r3
   1628e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   16292:	b14b      	cbz	r3, 162a8 <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16294:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16296:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16298:	428a      	cmp	r2, r1
   1629a:	d8f7      	bhi.n	1628c <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   1629c:	462a      	mov	r2, r5
   1629e:	4631      	mov	r1, r6
   162a0:	f7ff fe50 	bl	15f44 <bt_att_chan_create_pdu>
}
   162a4:	46bd      	mov	sp, r7
   162a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   162a8:	4614      	mov	r4, r2
   162aa:	e7da      	b.n	16262 <bt_att_create_pdu+0x22>
   162ac:	00030df2 	.word	0x00030df2
   162b0:	0002c7e4 	.word	0x0002c7e4

000162b4 <att_read_group_req>:
{
   162b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   162b8:	8a0e      	ldrh	r6, [r1, #16]
{
   162ba:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   162bc:	3e04      	subs	r6, #4
   162be:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   162c0:	2e02      	cmp	r6, #2
{
   162c2:	4608      	mov	r0, r1
   162c4:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   162c6:	d001      	beq.n	162cc <att_read_group_req+0x18>
   162c8:	2e10      	cmp	r6, #16
   162ca:	d16a      	bne.n	163a2 <att_read_group_req+0xee>
   162cc:	2104      	movs	r1, #4
   162ce:	300c      	adds	r0, #12
   162d0:	f004 fda4 	bl	1ae1c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   162d4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   162d8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   162da:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   162dc:	1d01      	adds	r1, r0, #4
   162de:	4632      	mov	r2, r6
   162e0:	4640      	mov	r0, r8
   162e2:	f011 ff34 	bl	2814e <bt_uuid_create>
   162e6:	2800      	cmp	r0, #0
   162e8:	d05d      	beq.n	163a6 <att_read_group_req+0xf2>
	if (!start || !end) {
   162ea:	2d00      	cmp	r5, #0
   162ec:	d03a      	beq.n	16364 <att_read_group_req+0xb0>
   162ee:	2600      	movs	r6, #0
   162f0:	2f00      	cmp	r7, #0
   162f2:	d036      	beq.n	16362 <att_read_group_req+0xae>
	if (start > end) {
   162f4:	42bd      	cmp	r5, r7
   162f6:	d835      	bhi.n	16364 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   162f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   162fc:	4640      	mov	r0, r8
   162fe:	a901      	add	r1, sp, #4
   16300:	f88d 6004 	strb.w	r6, [sp, #4]
   16304:	f8ad 3006 	strh.w	r3, [sp, #6]
   16308:	f011 fef3 	bl	280f2 <bt_uuid_cmp>
   1630c:	bb70      	cbnz	r0, 1636c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1630e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16310:	2214      	movs	r2, #20
   16312:	2100      	movs	r1, #0
   16314:	a807      	add	r0, sp, #28
   16316:	f015 fb43 	bl	2b9a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1631a:	2201      	movs	r2, #1
   1631c:	2111      	movs	r1, #17
   1631e:	4630      	mov	r0, r6
   16320:	f7ff ff8e 	bl	16240 <bt_att_create_pdu>
   16324:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16326:	2800      	cmp	r0, #0
   16328:	d03d      	beq.n	163a6 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1632a:	2101      	movs	r1, #1
   1632c:	300c      	adds	r0, #12
	data.uuid = uuid;
   1632e:	e9cd 4807 	strd	r4, r8, [sp, #28]
   16332:	f004 fd91 	bl	1ae58 <net_buf_simple_add>
	data.rsp->len = 0U;
   16336:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16338:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1633a:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1633c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1633e:	4a1b      	ldr	r2, [pc, #108]	; (163ac <att_read_group_req+0xf8>)
	data.group = NULL;
   16340:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16342:	4628      	mov	r0, r5
   16344:	ab07      	add	r3, sp, #28
   16346:	f012 fc0e 	bl	28b66 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1634a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1634c:	781b      	ldrb	r3, [r3, #0]
   1634e:	bb1b      	cbnz	r3, 16398 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16350:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16352:	6998      	ldr	r0, [r3, #24]
   16354:	f7ff facc 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16358:	9809      	ldr	r0, [sp, #36]	; 0x24
   1635a:	f004 fc5b 	bl	1ac14 <net_buf_unref>
	if (!req) {
   1635e:	230a      	movs	r3, #10
   16360:	e001      	b.n	16366 <att_read_group_req+0xb2>
			*err = 0U;
   16362:	463d      	mov	r5, r7
	if (!req) {
   16364:	2301      	movs	r3, #1
   16366:	462a      	mov	r2, r5
   16368:	2110      	movs	r1, #16
   1636a:	e00e      	b.n	1638a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1636c:	f642 0301 	movw	r3, #10241	; 0x2801
   16370:	4640      	mov	r0, r8
   16372:	a907      	add	r1, sp, #28
   16374:	f88d 601c 	strb.w	r6, [sp, #28]
   16378:	f8ad 301e 	strh.w	r3, [sp, #30]
   1637c:	f011 feb9 	bl	280f2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16380:	2800      	cmp	r0, #0
   16382:	d0c4      	beq.n	1630e <att_read_group_req+0x5a>
	if (!req) {
   16384:	2310      	movs	r3, #16
   16386:	462a      	mov	r2, r5
   16388:	4619      	mov	r1, r3
   1638a:	4620      	mov	r0, r4
   1638c:	f012 fed7 	bl	2913e <send_err_rsp.part.0>
		return 0;
   16390:	2000      	movs	r0, #0
}
   16392:	b00c      	add	sp, #48	; 0x30
   16394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   16398:	4620      	mov	r0, r4
   1639a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1639c:	f012 fcb7 	bl	28d0e <bt_att_chan_send_rsp>
	return 0;
   163a0:	e7f6      	b.n	16390 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   163a2:	2004      	movs	r0, #4
   163a4:	e7f5      	b.n	16392 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   163a6:	200e      	movs	r0, #14
   163a8:	e7f3      	b.n	16392 <att_read_group_req+0xde>
   163aa:	bf00      	nop
   163ac:	00015ce1 	.word	0x00015ce1

000163b0 <att_read_mult_vl_req>:
{
   163b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   163b4:	6846      	ldr	r6, [r0, #4]
{
   163b6:	4604      	mov	r4, r0
   163b8:	460d      	mov	r5, r1
   163ba:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   163bc:	2101      	movs	r1, #1
   163be:	4630      	mov	r0, r6
   163c0:	f013 f9ab 	bl	2971a <bt_gatt_change_aware>
   163c4:	b950      	cbnz	r0, 163dc <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   163c6:	2105      	movs	r1, #5
   163c8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   163cc:	f012 fd53 	bl	28e76 <atomic_test_and_set_bit>
   163d0:	2800      	cmp	r0, #0
   163d2:	d13b      	bne.n	1644c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   163d4:	2012      	movs	r0, #18
}
   163d6:	b005      	add	sp, #20
   163d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   163dc:	2210      	movs	r2, #16
   163de:	2100      	movs	r1, #0
   163e0:	4668      	mov	r0, sp
   163e2:	f015 fadd 	bl	2b9a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   163e6:	2200      	movs	r2, #0
   163e8:	2121      	movs	r1, #33	; 0x21
   163ea:	4630      	mov	r0, r6
   163ec:	f7ff ff28 	bl	16240 <bt_att_create_pdu>
   163f0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   163f2:	b368      	cbz	r0, 16450 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   163f4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   163f8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16454 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   163fc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   163fe:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   16402:	8a2b      	ldrh	r3, [r5, #16]
   16404:	2b01      	cmp	r3, #1
   16406:	d804      	bhi.n	16412 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16408:	4620      	mov	r0, r4
   1640a:	9902      	ldr	r1, [sp, #8]
   1640c:	f012 fc7f 	bl	28d0e <bt_att_chan_send_rsp>
	return 0;
   16410:	e01c      	b.n	1644c <att_read_mult_vl_req+0x9c>
   16412:	4638      	mov	r0, r7
   16414:	f013 fd4a 	bl	29eac <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16418:	466b      	mov	r3, sp
   1641a:	464a      	mov	r2, r9
   1641c:	4601      	mov	r1, r0
   1641e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16420:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16424:	f012 fb9f 	bl	28b66 <bt_gatt_foreach_attr>
		if (data.err) {
   16428:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1642c:	2b00      	cmp	r3, #0
   1642e:	d0e8      	beq.n	16402 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16430:	9b02      	ldr	r3, [sp, #8]
   16432:	6998      	ldr	r0, [r3, #24]
   16434:	f7ff fa5c 	bl	158f0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16438:	9802      	ldr	r0, [sp, #8]
   1643a:	f004 fbeb 	bl	1ac14 <net_buf_unref>
	if (!req) {
   1643e:	4632      	mov	r2, r6
   16440:	2120      	movs	r1, #32
   16442:	4620      	mov	r0, r4
   16444:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16448:	f012 fe79 	bl	2913e <send_err_rsp.part.0>
			return 0;
   1644c:	2000      	movs	r0, #0
   1644e:	e7c2      	b.n	163d6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16450:	200e      	movs	r0, #14
   16452:	e7c0      	b.n	163d6 <att_read_mult_vl_req+0x26>
   16454:	00028edf 	.word	0x00028edf

00016458 <att_read_mult_req>:
{
   16458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1645c:	6846      	ldr	r6, [r0, #4]
{
   1645e:	4604      	mov	r4, r0
   16460:	460d      	mov	r5, r1
   16462:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16464:	2101      	movs	r1, #1
   16466:	4630      	mov	r0, r6
   16468:	f013 f957 	bl	2971a <bt_gatt_change_aware>
   1646c:	b950      	cbnz	r0, 16484 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1646e:	2105      	movs	r1, #5
   16470:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16474:	f012 fcff 	bl	28e76 <atomic_test_and_set_bit>
   16478:	2800      	cmp	r0, #0
   1647a:	d13b      	bne.n	164f4 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1647c:	2012      	movs	r0, #18
}
   1647e:	b005      	add	sp, #20
   16480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16484:	2210      	movs	r2, #16
   16486:	2100      	movs	r1, #0
   16488:	4668      	mov	r0, sp
   1648a:	f015 fa89 	bl	2b9a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1648e:	2200      	movs	r2, #0
   16490:	210f      	movs	r1, #15
   16492:	4630      	mov	r0, r6
   16494:	f7ff fed4 	bl	16240 <bt_att_create_pdu>
   16498:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1649a:	b368      	cbz	r0, 164f8 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1649c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   164a0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 164fc <att_read_mult_req+0xa4>
	data.chan = chan;
   164a4:	9400      	str	r4, [sp, #0]
   164a6:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   164aa:	8a2b      	ldrh	r3, [r5, #16]
   164ac:	2b01      	cmp	r3, #1
   164ae:	d804      	bhi.n	164ba <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   164b0:	4620      	mov	r0, r4
   164b2:	9902      	ldr	r1, [sp, #8]
   164b4:	f012 fc2b 	bl	28d0e <bt_att_chan_send_rsp>
	return 0;
   164b8:	e01c      	b.n	164f4 <att_read_mult_req+0x9c>
   164ba:	4638      	mov	r0, r7
   164bc:	f013 fcf6 	bl	29eac <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   164c0:	466b      	mov	r3, sp
   164c2:	464a      	mov	r2, r9
   164c4:	4601      	mov	r1, r0
   164c6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   164c8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   164cc:	f012 fb4b 	bl	28b66 <bt_gatt_foreach_attr>
		if (data.err) {
   164d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   164d4:	2b00      	cmp	r3, #0
   164d6:	d0e8      	beq.n	164aa <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   164d8:	9b02      	ldr	r3, [sp, #8]
   164da:	6998      	ldr	r0, [r3, #24]
   164dc:	f7ff fa08 	bl	158f0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   164e0:	9802      	ldr	r0, [sp, #8]
   164e2:	f004 fb97 	bl	1ac14 <net_buf_unref>
	if (!req) {
   164e6:	4632      	mov	r2, r6
   164e8:	210e      	movs	r1, #14
   164ea:	4620      	mov	r0, r4
   164ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   164f0:	f012 fe25 	bl	2913e <send_err_rsp.part.0>
			return 0;
   164f4:	2000      	movs	r0, #0
   164f6:	e7c2      	b.n	1647e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   164f8:	200e      	movs	r0, #14
   164fa:	e7c0      	b.n	1647e <att_read_mult_req+0x26>
   164fc:	00028e99 	.word	0x00028e99

00016500 <att_read_rsp>:
{
   16500:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16504:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   16508:	4604      	mov	r4, r0
   1650a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1650c:	4640      	mov	r0, r8
   1650e:	2101      	movs	r1, #1
{
   16510:	4617      	mov	r7, r2
   16512:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16514:	f013 f901 	bl	2971a <bt_gatt_change_aware>
   16518:	b948      	cbnz	r0, 1652e <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1651a:	2105      	movs	r1, #5
   1651c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16520:	f012 fca9 	bl	28e76 <atomic_test_and_set_bit>
   16524:	bb78      	cbnz	r0, 16586 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16526:	2012      	movs	r0, #18
}
   16528:	b004      	add	sp, #16
   1652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1652e:	b38d      	cbz	r5, 16594 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   16530:	2210      	movs	r2, #16
   16532:	2100      	movs	r1, #0
   16534:	4668      	mov	r0, sp
   16536:	f015 fa33 	bl	2b9a0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1653a:	2200      	movs	r2, #0
   1653c:	4639      	mov	r1, r7
   1653e:	4640      	mov	r0, r8
   16540:	f7ff fe7e 	bl	16240 <bt_att_create_pdu>
   16544:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16546:	b338      	cbz	r0, 16598 <att_read_rsp+0x98>
	data.offset = offset;
   16548:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1654c:	4629      	mov	r1, r5
	data.offset = offset;
   1654e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16552:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16554:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16556:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1655a:	4a10      	ldr	r2, [pc, #64]	; (1659c <att_read_rsp+0x9c>)
   1655c:	466b      	mov	r3, sp
	data.chan = chan;
   1655e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16560:	f012 fb01 	bl	28b66 <bt_gatt_foreach_attr>
	if (data.err) {
   16564:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16568:	b17b      	cbz	r3, 1658a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1656a:	9b02      	ldr	r3, [sp, #8]
   1656c:	6998      	ldr	r0, [r3, #24]
   1656e:	f7ff f9bf 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16572:	9802      	ldr	r0, [sp, #8]
   16574:	f004 fb4e 	bl	1ac14 <net_buf_unref>
	if (!req) {
   16578:	462a      	mov	r2, r5
   1657a:	4631      	mov	r1, r6
   1657c:	4620      	mov	r0, r4
   1657e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16582:	f012 fddc 	bl	2913e <send_err_rsp.part.0>
			return 0;
   16586:	2000      	movs	r0, #0
   16588:	e7ce      	b.n	16528 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1658a:	4620      	mov	r0, r4
   1658c:	9902      	ldr	r1, [sp, #8]
   1658e:	f012 fbbe 	bl	28d0e <bt_att_chan_send_rsp>
	return 0;
   16592:	e7f8      	b.n	16586 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   16594:	2001      	movs	r0, #1
   16596:	e7c7      	b.n	16528 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   16598:	200e      	movs	r0, #14
   1659a:	e7c5      	b.n	16528 <att_read_rsp+0x28>
   1659c:	00028e99 	.word	0x00028e99

000165a0 <att_read_type_req>:
{
   165a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   165a4:	8a0d      	ldrh	r5, [r1, #16]
{
   165a6:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   165a8:	3d04      	subs	r5, #4
   165aa:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   165ac:	2d02      	cmp	r5, #2
{
   165ae:	4608      	mov	r0, r1
   165b0:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   165b2:	d001      	beq.n	165b8 <att_read_type_req+0x18>
   165b4:	2d10      	cmp	r5, #16
   165b6:	d150      	bne.n	1665a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   165b8:	2104      	movs	r1, #4
   165ba:	300c      	adds	r0, #12
   165bc:	f004 fc2e 	bl	1ae1c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   165c0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   165c4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   165c6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   165c8:	1d01      	adds	r1, r0, #4
   165ca:	462a      	mov	r2, r5
   165cc:	4640      	mov	r0, r8
   165ce:	f011 fdbe 	bl	2814e <bt_uuid_create>
   165d2:	b188      	cbz	r0, 165f8 <att_read_type_req+0x58>
	if (!start || !end) {
   165d4:	b19e      	cbz	r6, 165fe <att_read_type_req+0x5e>
   165d6:	b18f      	cbz	r7, 165fc <att_read_type_req+0x5c>
	if (start > end) {
   165d8:	42b7      	cmp	r7, r6
   165da:	d310      	bcc.n	165fe <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   165dc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   165de:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   165e0:	2100      	movs	r1, #0
   165e2:	eb0d 0002 	add.w	r0, sp, r2
   165e6:	f015 f9db 	bl	2b9a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   165ea:	2201      	movs	r2, #1
   165ec:	2109      	movs	r1, #9
   165ee:	4628      	mov	r0, r5
   165f0:	f7ff fe26 	bl	16240 <bt_att_create_pdu>
   165f4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   165f6:	b960      	cbnz	r0, 16612 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   165f8:	200e      	movs	r0, #14
   165fa:	e007      	b.n	1660c <att_read_type_req+0x6c>
			*err = 0U;
   165fc:	463e      	mov	r6, r7
	if (!req) {
   165fe:	2301      	movs	r3, #1
   16600:	4632      	mov	r2, r6
   16602:	2108      	movs	r1, #8
   16604:	4620      	mov	r0, r4
   16606:	f012 fd9a 	bl	2913e <send_err_rsp.part.0>
		return 0;
   1660a:	2000      	movs	r0, #0
}
   1660c:	b00c      	add	sp, #48	; 0x30
   1660e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   16612:	2101      	movs	r1, #1
   16614:	300c      	adds	r0, #12
	data.uuid = uuid;
   16616:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1661a:	f004 fc1d 	bl	1ae58 <net_buf_simple_add>
	data.rsp->len = 0U;
   1661e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16620:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   16622:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16624:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16626:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16628:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1662c:	4630      	mov	r0, r6
   1662e:	ab06      	add	r3, sp, #24
   16630:	4a0b      	ldr	r2, [pc, #44]	; (16660 <att_read_type_req+0xc0>)
   16632:	f012 fa98 	bl	28b66 <bt_gatt_foreach_attr>
	if (data.err) {
   16636:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1663a:	b14b      	cbz	r3, 16650 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1663c:	9b08      	ldr	r3, [sp, #32]
   1663e:	6998      	ldr	r0, [r3, #24]
   16640:	f7ff f956 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16644:	9808      	ldr	r0, [sp, #32]
   16646:	f004 fae5 	bl	1ac14 <net_buf_unref>
	if (!req) {
   1664a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1664e:	e7d7      	b.n	16600 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16650:	4620      	mov	r0, r4
   16652:	9908      	ldr	r1, [sp, #32]
   16654:	f012 fb5b 	bl	28d0e <bt_att_chan_send_rsp>
	return 0;
   16658:	e7d7      	b.n	1660a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1665a:	2004      	movs	r0, #4
   1665c:	e7d6      	b.n	1660c <att_read_type_req+0x6c>
   1665e:	bf00      	nop
   16660:	00015d8d 	.word	0x00015d8d

00016664 <att_find_type_req>:
{
   16664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16668:	460f      	mov	r7, r1
   1666a:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1666c:	2106      	movs	r1, #6
   1666e:	b086      	sub	sp, #24
   16670:	f107 000c 	add.w	r0, r7, #12
   16674:	f004 fbd2 	bl	1ae1c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16678:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1667a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1667e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   16680:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   16684:	b1c5      	cbz	r5, 166b8 <att_find_type_req+0x54>
   16686:	2300      	movs	r3, #0
   16688:	f1b8 0f00 	cmp.w	r8, #0
   1668c:	d013      	beq.n	166b6 <att_find_type_req+0x52>
	if (start > end) {
   1668e:	4545      	cmp	r5, r8
   16690:	d812      	bhi.n	166b8 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16692:	f88d 3000 	strb.w	r3, [sp]
   16696:	f88d 3004 	strb.w	r3, [sp, #4]
   1669a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1669e:	4668      	mov	r0, sp
   166a0:	a901      	add	r1, sp, #4
   166a2:	f8ad 2002 	strh.w	r2, [sp, #2]
   166a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   166aa:	f011 fd22 	bl	280f2 <bt_uuid_cmp>
   166ae:	4606      	mov	r6, r0
   166b0:	b160      	cbz	r0, 166cc <att_find_type_req+0x68>
	if (!req) {
   166b2:	230a      	movs	r3, #10
   166b4:	e001      	b.n	166ba <att_find_type_req+0x56>
			*err = 0U;
   166b6:	4645      	mov	r5, r8
	if (!req) {
   166b8:	2301      	movs	r3, #1
   166ba:	462a      	mov	r2, r5
   166bc:	2106      	movs	r1, #6
   166be:	4620      	mov	r0, r4
   166c0:	f012 fd3d 	bl	2913e <send_err_rsp.part.0>
		return 0;
   166c4:	2000      	movs	r0, #0
}
   166c6:	b006      	add	sp, #24
   166c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   166cc:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   166d0:	4601      	mov	r1, r0
   166d2:	2214      	movs	r2, #20
   166d4:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   166d6:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   166d8:	f015 f962 	bl	2b9a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   166dc:	4632      	mov	r2, r6
   166de:	2107      	movs	r1, #7
   166e0:	4650      	mov	r0, sl
   166e2:	f7ff fdad 	bl	16240 <bt_att_create_pdu>
   166e6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   166e8:	b1f8      	cbz	r0, 1672a <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   166ea:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   166ec:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   166ee:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   166f2:	4628      	mov	r0, r5
   166f4:	ab01      	add	r3, sp, #4
   166f6:	4a0e      	ldr	r2, [pc, #56]	; (16730 <att_find_type_req+0xcc>)
	data.value = value;
   166f8:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   166fc:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   166fe:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16702:	f012 fa30 	bl	28b66 <bt_gatt_foreach_attr>
	if (data.err) {
   16706:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1670a:	b14b      	cbz	r3, 16720 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1670c:	9b02      	ldr	r3, [sp, #8]
   1670e:	6998      	ldr	r0, [r3, #24]
   16710:	f7ff f8ee 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16714:	9802      	ldr	r0, [sp, #8]
   16716:	f004 fa7d 	bl	1ac14 <net_buf_unref>
	if (!req) {
   1671a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1671e:	e7cc      	b.n	166ba <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   16720:	4620      	mov	r0, r4
   16722:	9902      	ldr	r1, [sp, #8]
   16724:	f012 faf3 	bl	28d0e <bt_att_chan_send_rsp>
	return 0;
   16728:	e7cc      	b.n	166c4 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1672a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1672c:	e7cb      	b.n	166c6 <att_find_type_req+0x62>
   1672e:	bf00      	nop
   16730:	00015931 	.word	0x00015931

00016734 <att_find_info_req>:
{
   16734:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16736:	68cb      	ldr	r3, [r1, #12]
{
   16738:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1673a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1673c:	885e      	ldrh	r6, [r3, #2]
{
   1673e:	b085      	sub	sp, #20
	if (!start || !end) {
   16740:	b195      	cbz	r5, 16768 <att_find_info_req+0x34>
   16742:	b186      	cbz	r6, 16766 <att_find_info_req+0x32>
	if (start > end) {
   16744:	42b5      	cmp	r5, r6
   16746:	d80f      	bhi.n	16768 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16748:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1674a:	2210      	movs	r2, #16
   1674c:	2100      	movs	r1, #0
   1674e:	4668      	mov	r0, sp
   16750:	f015 f926 	bl	2b9a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16754:	2200      	movs	r2, #0
   16756:	2105      	movs	r1, #5
   16758:	4638      	mov	r0, r7
   1675a:	f7ff fd71 	bl	16240 <bt_att_create_pdu>
   1675e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16760:	b958      	cbnz	r0, 1677a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16762:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16764:	e007      	b.n	16776 <att_find_info_req+0x42>
			*err = 0U;
   16766:	4635      	mov	r5, r6
	if (!req) {
   16768:	2301      	movs	r3, #1
   1676a:	462a      	mov	r2, r5
   1676c:	2104      	movs	r1, #4
   1676e:	4620      	mov	r0, r4
   16770:	f012 fce5 	bl	2913e <send_err_rsp.part.0>
		return 0;
   16774:	2000      	movs	r0, #0
}
   16776:	b005      	add	sp, #20
   16778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1677a:	466b      	mov	r3, sp
   1677c:	4631      	mov	r1, r6
   1677e:	4628      	mov	r0, r5
   16780:	4a09      	ldr	r2, [pc, #36]	; (167a8 <att_find_info_req+0x74>)
	data.chan = chan;
   16782:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16784:	f012 f9ef 	bl	28b66 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16788:	9b02      	ldr	r3, [sp, #8]
   1678a:	b943      	cbnz	r3, 1679e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1678c:	9b01      	ldr	r3, [sp, #4]
   1678e:	6998      	ldr	r0, [r3, #24]
   16790:	f7ff f8ae 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16794:	9801      	ldr	r0, [sp, #4]
   16796:	f004 fa3d 	bl	1ac14 <net_buf_unref>
	if (!req) {
   1679a:	230a      	movs	r3, #10
   1679c:	e7e5      	b.n	1676a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1679e:	4620      	mov	r0, r4
   167a0:	9901      	ldr	r1, [sp, #4]
   167a2:	f012 fab4 	bl	28d0e <bt_att_chan_send_rsp>
	return 0;
   167a6:	e7e5      	b.n	16774 <att_find_info_req+0x40>
   167a8:	00028c03 	.word	0x00028c03

000167ac <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   167ac:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   167ae:	4c09      	ldr	r4, [pc, #36]	; (167d4 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   167b0:	4d09      	ldr	r5, [pc, #36]	; (167d8 <bt_att_init+0x2c>)
   167b2:	4620      	mov	r0, r4
   167b4:	f014 fed6 	bl	2b564 <z_impl_k_queue_init>
   167b8:	4629      	mov	r1, r5
   167ba:	4620      	mov	r0, r4
   167bc:	f014 fedf 	bl	2b57e <k_queue_append>
   167c0:	4620      	mov	r0, r4
   167c2:	f105 0114 	add.w	r1, r5, #20
   167c6:	f014 feda 	bl	2b57e <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   167ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   167ce:	f000 bec5 	b.w	1755c <bt_gatt_init>
   167d2:	bf00      	nop
   167d4:	20008dac 	.word	0x20008dac
   167d8:	20021778 	.word	0x20021778

000167dc <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   167dc:	2300      	movs	r3, #0
{
   167de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   167e0:	4605      	mov	r5, r0
   167e2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   167e4:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   167e6:	f00c ff9b 	bl	23720 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   167ea:	4b0c      	ldr	r3, [pc, #48]	; (1681c <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   167ec:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   167ee:	681b      	ldr	r3, [r3, #0]
   167f0:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   167f2:	bf04      	itt	eq
   167f4:	2500      	moveq	r5, #0
   167f6:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   167f8:	462a      	mov	r2, r5
   167fa:	4623      	mov	r3, r4
   167fc:	4808      	ldr	r0, [pc, #32]	; (16820 <bt_att_req_alloc+0x44>)
   167fe:	f00a fbc5 	bl	20f8c <k_mem_slab_alloc>
   16802:	4601      	mov	r1, r0
   16804:	b940      	cbnz	r0, 16818 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16806:	9b01      	ldr	r3, [sp, #4]
   16808:	221c      	movs	r2, #28
   1680a:	4618      	mov	r0, r3
   1680c:	f015 f8c8 	bl	2b9a0 <memset>
   16810:	4603      	mov	r3, r0

	return req;
}
   16812:	4618      	mov	r0, r3
   16814:	b003      	add	sp, #12
   16816:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16818:	2300      	movs	r3, #0
   1681a:	e7fa      	b.n	16812 <bt_att_req_alloc+0x36>
   1681c:	200217a0 	.word	0x200217a0
   16820:	20008c04 	.word	0x20008c04

00016824 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16824:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   16826:	6883      	ldr	r3, [r0, #8]
{
   16828:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1682a:	b14b      	cbz	r3, 16840 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1682c:	6998      	ldr	r0, [r3, #24]
   1682e:	f7ff f85f 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(req->buf);
   16832:	9b01      	ldr	r3, [sp, #4]
   16834:	6898      	ldr	r0, [r3, #8]
   16836:	f004 f9ed 	bl	1ac14 <net_buf_unref>
		req->buf = NULL;
   1683a:	2200      	movs	r2, #0
   1683c:	9b01      	ldr	r3, [sp, #4]
   1683e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16840:	4803      	ldr	r0, [pc, #12]	; (16850 <bt_att_req_free+0x2c>)
   16842:	a901      	add	r1, sp, #4
   16844:	f00a fc0c 	bl	21060 <k_mem_slab_free>
}
   16848:	b003      	add	sp, #12
   1684a:	f85d fb04 	ldr.w	pc, [sp], #4
   1684e:	bf00      	nop
   16850:	20008c04 	.word	0x20008c04

00016854 <att_handle_rsp>:
{
   16854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16858:	4604      	mov	r4, r0
   1685a:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   1685c:	30c0      	adds	r0, #192	; 0xc0
{
   1685e:	460e      	mov	r6, r1
   16860:	4617      	mov	r7, r2
   16862:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16864:	f00b fdda 	bl	2241c <k_work_cancel_delayable>
	if (!chan->req) {
   16868:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1686c:	b980      	cbnz	r0, 16890 <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   1686e:	4b1a      	ldr	r3, [pc, #104]	; (168d8 <att_handle_rsp+0x84>)
   16870:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16874:	9307      	str	r3, [sp, #28]
   16876:	2302      	movs	r3, #2
   16878:	4818      	ldr	r0, [pc, #96]	; (168dc <att_handle_rsp+0x88>)
   1687a:	aa06      	add	r2, sp, #24
   1687c:	9306      	str	r3, [sp, #24]
   1687e:	f012 fa10 	bl	28ca2 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   16882:	6820      	ldr	r0, [r4, #0]
   16884:	f012 fb93 	bl	28fae <att_req_send_process>
}
   16888:	2000      	movs	r0, #0
   1688a:	b008      	add	sp, #32
   1688c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   16890:	4b13      	ldr	r3, [pc, #76]	; (168e0 <att_handle_rsp+0x8c>)
   16892:	f04f 0800 	mov.w	r8, #0
   16896:	4298      	cmp	r0, r3
   16898:	d102      	bne.n	168a0 <att_handle_rsp+0x4c>
		chan->req = NULL;
   1689a:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   1689e:	e7f0      	b.n	16882 <att_handle_rsp+0x2e>
	func = chan->req->func;
   168a0:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   168a4:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   168a8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   168ac:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   168b0:	f7ff ffb8 	bl	16824 <bt_att_req_free>
	att_req_send_process(chan->att);
   168b4:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   168b6:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   168ba:	f012 fb78 	bl	28fae <att_req_send_process>
	if (func) {
   168be:	f1b9 0f00 	cmp.w	r9, #0
   168c2:	d0e1      	beq.n	16888 <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   168c4:	6820      	ldr	r0, [r4, #0]
   168c6:	f8cd a000 	str.w	sl, [sp]
   168ca:	463b      	mov	r3, r7
   168cc:	4632      	mov	r2, r6
   168ce:	4629      	mov	r1, r5
   168d0:	6800      	ldr	r0, [r0, #0]
   168d2:	47c8      	blx	r9
   168d4:	e7d8      	b.n	16888 <att_handle_rsp+0x34>
   168d6:	bf00      	nop
   168d8:	00030e0d 	.word	0x00030e0d
   168dc:	0002c7e4 	.word	0x0002c7e4
   168e0:	200217a4 	.word	0x200217a4

000168e4 <bt_att_disconnected>:
{
   168e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   168e8:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   168ec:	4604      	mov	r4, r0
	if (!att_chan->att) {
   168ee:	2e00      	cmp	r6, #0
   168f0:	d056      	beq.n	169a0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   168f2:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   168f6:	f106 0028 	add.w	r0, r6, #40	; 0x28
   168fa:	f012 faa1 	bl	28e40 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   168fe:	1f27      	subs	r7, r4, #4
   16900:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   16904:	2200      	movs	r2, #0
   16906:	2300      	movs	r3, #0
   16908:	4640      	mov	r0, r8
   1690a:	f013 fac6 	bl	29e9a <net_buf_get>
   1690e:	4605      	mov	r5, r0
   16910:	bb28      	cbnz	r0, 1695e <bt_att_disconnected+0x7a>
	if (chan->req) {
   16912:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16916:	b12b      	cbz	r3, 16924 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16918:	4602      	mov	r2, r0
   1691a:	4601      	mov	r1, r0
   1691c:	230e      	movs	r3, #14
   1691e:	4638      	mov	r0, r7
   16920:	f7ff ff98 	bl	16854 <att_handle_rsp>
	chan->att = NULL;
   16924:	2300      	movs	r3, #0
   16926:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1692a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1692c:	2b00      	cmp	r3, #0
   1692e:	d137      	bne.n	169a0 <bt_att_disconnected+0xbc>
	att_reset(att);
   16930:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16932:	9803      	ldr	r0, [sp, #12]
   16934:	2200      	movs	r2, #0
   16936:	2300      	movs	r3, #0
   16938:	300c      	adds	r0, #12
   1693a:	f013 faae 	bl	29e9a <net_buf_get>
   1693e:	4605      	mov	r5, r0
   16940:	b9a0      	cbnz	r0, 1696c <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   16942:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16944:	6845      	ldr	r5, [r0, #4]
   16946:	b9c5      	cbnz	r5, 1697a <bt_att_disconnected+0x96>
	att->conn = NULL;
   16948:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1694a:	a903      	add	r1, sp, #12
   1694c:	4816      	ldr	r0, [pc, #88]	; (169a8 <bt_att_disconnected+0xc4>)
   1694e:	f00a fb87 	bl	21060 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16952:	6820      	ldr	r0, [r4, #0]
}
   16954:	b004      	add	sp, #16
   16956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1695a:	f001 bdd7 	b.w	1850c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1695e:	69a8      	ldr	r0, [r5, #24]
   16960:	f7fe ffc6 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(buf);
   16964:	4628      	mov	r0, r5
   16966:	f004 f955 	bl	1ac14 <net_buf_unref>
   1696a:	e7cb      	b.n	16904 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1696c:	69a8      	ldr	r0, [r5, #24]
   1696e:	f7fe ffbf 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(buf);
   16972:	4628      	mov	r0, r5
   16974:	f004 f94e 	bl	1ac14 <net_buf_unref>
   16978:	e7db      	b.n	16932 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1697a:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1697c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1697e:	4295      	cmp	r5, r2
	list->head = node;
   16980:	6043      	str	r3, [r0, #4]
	list->tail = node;
   16982:	bf08      	it	eq
   16984:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   16986:	686e      	ldr	r6, [r5, #4]
   16988:	b136      	cbz	r6, 16998 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1698a:	69ab      	ldr	r3, [r5, #24]
   1698c:	210e      	movs	r1, #14
   1698e:	9300      	str	r3, [sp, #0]
   16990:	2300      	movs	r3, #0
   16992:	6800      	ldr	r0, [r0, #0]
   16994:	461a      	mov	r2, r3
   16996:	47b0      	blx	r6
		bt_att_req_free(req);
   16998:	4628      	mov	r0, r5
   1699a:	f7ff ff43 	bl	16824 <bt_att_req_free>
   1699e:	e7d0      	b.n	16942 <bt_att_disconnected+0x5e>
}
   169a0:	b004      	add	sp, #16
   169a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   169a6:	bf00      	nop
   169a8:	20008bc4 	.word	0x20008bc4

000169ac <att_timeout>:
{
   169ac:	b510      	push	{r4, lr}
   169ae:	4604      	mov	r4, r0
   169b0:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   169b2:	4b08      	ldr	r3, [pc, #32]	; (169d4 <att_timeout+0x28>)
   169b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   169b8:	9305      	str	r3, [sp, #20]
   169ba:	2302      	movs	r3, #2
   169bc:	4806      	ldr	r0, [pc, #24]	; (169d8 <att_timeout+0x2c>)
   169be:	aa04      	add	r2, sp, #16
   169c0:	9304      	str	r3, [sp, #16]
   169c2:	f012 f96e 	bl	28ca2 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   169c6:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   169ca:	b006      	add	sp, #24
   169cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   169d0:	f7ff bf88 	b.w	168e4 <bt_att_disconnected>
   169d4:	00030e24 	.word	0x00030e24
   169d8:	0002c7e4 	.word	0x0002c7e4

000169dc <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   169dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169de:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   169e0:	b958      	cbnz	r0, 169fa <bt_att_send+0x1e>
   169e2:	4929      	ldr	r1, [pc, #164]	; (16a88 <bt_att_send+0xac>)
   169e4:	f640 63a4 	movw	r3, #3748	; 0xea4
   169e8:	4a28      	ldr	r2, [pc, #160]	; (16a8c <bt_att_send+0xb0>)
   169ea:	4829      	ldr	r0, [pc, #164]	; (16a90 <bt_att_send+0xb4>)
   169ec:	f00f ff99 	bl	26922 <assert_print>
   169f0:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   169f4:	4825      	ldr	r0, [pc, #148]	; (16a8c <bt_att_send+0xb0>)
   169f6:	f00f ff8d 	bl	26914 <assert_post_action>
   169fa:	b949      	cbnz	r1, 16a10 <bt_att_send+0x34>
   169fc:	4925      	ldr	r1, [pc, #148]	; (16a94 <bt_att_send+0xb8>)
   169fe:	f640 63a5 	movw	r3, #3749	; 0xea5
   16a02:	4a22      	ldr	r2, [pc, #136]	; (16a8c <bt_att_send+0xb0>)
   16a04:	4822      	ldr	r0, [pc, #136]	; (16a90 <bt_att_send+0xb4>)
   16a06:	f00f ff8c 	bl	26922 <assert_print>
   16a0a:	f640 61a5 	movw	r1, #3749	; 0xea5
   16a0e:	e7f1      	b.n	169f4 <bt_att_send+0x18>

	att = att_get(conn);
   16a10:	f7ff f904 	bl	15c1c <att_get>
	if (!att) {
   16a14:	4605      	mov	r5, r0
   16a16:	b940      	cbnz	r0, 16a2a <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16a18:	69a0      	ldr	r0, [r4, #24]
   16a1a:	f7fe ff69 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(buf);
   16a1e:	4620      	mov	r0, r4
   16a20:	f004 f8f8 	bl	1ac14 <net_buf_unref>
		return -ENOTCONN;
   16a24:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   16a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   16a2a:	f100 060c 	add.w	r6, r0, #12
   16a2e:	4621      	mov	r1, r4
   16a30:	4630      	mov	r0, r6
   16a32:	f004 f8c9 	bl	1abc8 <net_buf_put>
	return list->head;
   16a36:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16a38:	b14d      	cbz	r5, 16a4e <bt_att_send+0x72>
	return node->next;
   16a3a:	f855 49f0 	ldr.w	r4, [r5], #-240
   16a3e:	b104      	cbz	r4, 16a42 <bt_att_send+0x66>
   16a40:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   16a42:	4631      	mov	r1, r6
   16a44:	4628      	mov	r0, r5
   16a46:	f012 f949 	bl	28cdc <process_queue>
		if (!err) {
   16a4a:	4603      	mov	r3, r0
   16a4c:	b980      	cbnz	r0, 16a70 <bt_att_send+0x94>
	return 0;
   16a4e:	2000      	movs	r0, #0
   16a50:	e7ea      	b.n	16a28 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16a52:	2103      	movs	r1, #3
   16a54:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16a58:	f012 f84e 	bl	28af8 <atomic_test_bit>
   16a5c:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   16a5e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16a62:	f012 f849 	bl	28af8 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   16a66:	4287      	cmp	r7, r0
   16a68:	f06f 0301 	mvn.w	r3, #1
   16a6c:	d107      	bne.n	16a7e <bt_att_send+0xa2>
   16a6e:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16a70:	2c00      	cmp	r4, #0
   16a72:	d0ec      	beq.n	16a4e <bt_att_send+0x72>
   16a74:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   16a78:	b922      	cbnz	r2, 16a84 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   16a7a:	3302      	adds	r3, #2
   16a7c:	d0e9      	beq.n	16a52 <bt_att_send+0x76>
{
   16a7e:	4625      	mov	r5, r4
   16a80:	4614      	mov	r4, r2
   16a82:	e7de      	b.n	16a42 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16a84:	3af0      	subs	r2, #240	; 0xf0
   16a86:	e7f8      	b.n	16a7a <bt_att_send+0x9e>
   16a88:	0002febd 	.word	0x0002febd
   16a8c:	00030bad 	.word	0x00030bad
   16a90:	0002d881 	.word	0x0002d881
   16a94:	00031910 	.word	0x00031910

00016a98 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   16a98:	b510      	push	{r4, lr}
   16a9a:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   16a9c:	b958      	cbnz	r0, 16ab6 <bt_att_req_send+0x1e>
   16a9e:	4915      	ldr	r1, [pc, #84]	; (16af4 <bt_att_req_send+0x5c>)
   16aa0:	f640 63ba 	movw	r3, #3770	; 0xeba
   16aa4:	4a14      	ldr	r2, [pc, #80]	; (16af8 <bt_att_req_send+0x60>)
   16aa6:	4815      	ldr	r0, [pc, #84]	; (16afc <bt_att_req_send+0x64>)
   16aa8:	f00f ff3b 	bl	26922 <assert_print>
   16aac:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   16ab0:	4811      	ldr	r0, [pc, #68]	; (16af8 <bt_att_req_send+0x60>)
   16ab2:	f00f ff2f 	bl	26914 <assert_post_action>
   16ab6:	b949      	cbnz	r1, 16acc <bt_att_req_send+0x34>
   16ab8:	4911      	ldr	r1, [pc, #68]	; (16b00 <bt_att_req_send+0x68>)
   16aba:	f640 63bb 	movw	r3, #3771	; 0xebb
   16abe:	4a0e      	ldr	r2, [pc, #56]	; (16af8 <bt_att_req_send+0x60>)
   16ac0:	480e      	ldr	r0, [pc, #56]	; (16afc <bt_att_req_send+0x64>)
   16ac2:	f00f ff2e 	bl	26922 <assert_print>
   16ac6:	f640 61bb 	movw	r1, #3771	; 0xebb
   16aca:	e7f1      	b.n	16ab0 <bt_att_req_send+0x18>

	att = att_get(conn);
   16acc:	f7ff f8a6 	bl	15c1c <att_get>
	if (!att) {
   16ad0:	b160      	cbz	r0, 16aec <bt_att_req_send+0x54>
	parent->next = child;
   16ad2:	2300      	movs	r3, #0
   16ad4:	6023      	str	r3, [r4, #0]
	return list->tail;
   16ad6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   16ad8:	b92b      	cbnz	r3, 16ae6 <bt_att_req_send+0x4e>
	list->head = node;
   16ada:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   16ade:	f012 fa66 	bl	28fae <att_req_send_process>

	return 0;
   16ae2:	2000      	movs	r0, #0
}
   16ae4:	bd10      	pop	{r4, pc}
	parent->next = child;
   16ae6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16ae8:	6084      	str	r4, [r0, #8]
}
   16aea:	e7f8      	b.n	16ade <bt_att_req_send+0x46>
		return -ENOTCONN;
   16aec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16af0:	e7f8      	b.n	16ae4 <bt_att_req_send+0x4c>
   16af2:	bf00      	nop
   16af4:	0002febd 	.word	0x0002febd
   16af8:	00030bad 	.word	0x00030bad
   16afc:	0002d881 	.word	0x0002d881
   16b00:	00030c5c 	.word	0x00030c5c

00016b04 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16b04:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16b06:	4606      	mov	r6, r0
   16b08:	4d13      	ldr	r5, [pc, #76]	; (16b58 <find_cf_cfg+0x54>)
   16b0a:	b140      	cbz	r0, 16b1e <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16b0c:	462a      	mov	r2, r5
   16b0e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16b12:	1e6c      	subs	r4, r5, #1
   16b14:	f011 fee9 	bl	288ea <bt_conn_is_peer_addr_le>
   16b18:	b198      	cbz	r0, 16b42 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16b1a:	4620      	mov	r0, r4
   16b1c:	e00c      	b.n	16b38 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16b1e:	4628      	mov	r0, r5
   16b20:	490e      	ldr	r1, [pc, #56]	; (16b5c <find_cf_cfg+0x58>)
   16b22:	f012 fc82 	bl	2942a <bt_addr_le_eq>
   16b26:	b940      	cbnz	r0, 16b3a <find_cf_cfg+0x36>
   16b28:	490c      	ldr	r1, [pc, #48]	; (16b5c <find_cf_cfg+0x58>)
   16b2a:	f105 0010 	add.w	r0, r5, #16
   16b2e:	f012 fc7c 	bl	2942a <bt_addr_le_eq>
   16b32:	b120      	cbz	r0, 16b3e <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16b34:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   16b38:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16b3a:	1e68      	subs	r0, r5, #1
   16b3c:	e7fc      	b.n	16b38 <find_cf_cfg+0x34>
	return NULL;
   16b3e:	2000      	movs	r0, #0
   16b40:	e7fa      	b.n	16b38 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16b42:	4630      	mov	r0, r6
   16b44:	7c21      	ldrb	r1, [r4, #16]
   16b46:	f104 0211 	add.w	r2, r4, #17
   16b4a:	f011 fece 	bl	288ea <bt_conn_is_peer_addr_le>
   16b4e:	2800      	cmp	r0, #0
   16b50:	d0f5      	beq.n	16b3e <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16b52:	f104 0010 	add.w	r0, r4, #16
   16b56:	e7ef      	b.n	16b38 <find_cf_cfg+0x34>
   16b58:	200217d9 	.word	0x200217d9
   16b5c:	0002f895 	.word	0x0002f895

00016b60 <find_sc_cfg>:
{
   16b60:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16b62:	4c0e      	ldr	r4, [pc, #56]	; (16b9c <find_sc_cfg+0x3c>)
{
   16b64:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   16b66:	7823      	ldrb	r3, [r4, #0]
{
   16b68:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16b6a:	4283      	cmp	r3, r0
   16b6c:	d00c      	beq.n	16b88 <find_sc_cfg+0x28>
   16b6e:	7b23      	ldrb	r3, [r4, #12]
   16b70:	42ab      	cmp	r3, r5
   16b72:	d110      	bne.n	16b96 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16b74:	4631      	mov	r1, r6
   16b76:	480a      	ldr	r0, [pc, #40]	; (16ba0 <find_sc_cfg+0x40>)
   16b78:	f012 fc57 	bl	2942a <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16b7c:	b158      	cbz	r0, 16b96 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16b7e:	2301      	movs	r3, #1
			return &sc_cfg[i];
   16b80:	220c      	movs	r2, #12
   16b82:	fb02 4003 	mla	r0, r2, r3, r4
   16b86:	e007      	b.n	16b98 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16b88:	1c60      	adds	r0, r4, #1
   16b8a:	f012 fc4e 	bl	2942a <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16b8e:	2800      	cmp	r0, #0
   16b90:	d0ed      	beq.n	16b6e <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16b92:	2300      	movs	r3, #0
   16b94:	e7f4      	b.n	16b80 <find_sc_cfg+0x20>
	return NULL;
   16b96:	2000      	movs	r0, #0
}
   16b98:	bd70      	pop	{r4, r5, r6, pc}
   16b9a:	bf00      	nop
   16b9c:	20021be4 	.word	0x20021be4
   16ba0:	20021bf1 	.word	0x20021bf1

00016ba4 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   16ba4:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   16ba6:	1c4a      	adds	r2, r1, #1
{
   16ba8:	460c      	mov	r4, r1
		if (conn) {
   16baa:	b138      	cbz	r0, 16bbc <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   16bac:	7809      	ldrb	r1, [r1, #0]
   16bae:	f011 fe9c 	bl	288ea <bt_conn_is_peer_addr_le>
   16bb2:	b108      	cbz	r0, 16bb8 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   16bb4:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   16bb6:	bd10      	pop	{r4, pc}
	return NULL;
   16bb8:	2000      	movs	r0, #0
   16bba:	e7fc      	b.n	16bb6 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16bbc:	4610      	mov	r0, r2
   16bbe:	4902      	ldr	r1, [pc, #8]	; (16bc8 <find_ccc_cfg+0x24>)
   16bc0:	f012 fc33 	bl	2942a <bt_addr_le_eq>
   16bc4:	e7f5      	b.n	16bb2 <find_ccc_cfg+0xe>
   16bc6:	bf00      	nop
   16bc8:	0002f895 	.word	0x0002f895

00016bcc <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   16bcc:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   16bce:	4c0e      	ldr	r4, [pc, #56]	; (16c08 <find_cf_cfg_by_addr+0x3c>)
{
   16bd0:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
   16bd2:	7823      	ldrb	r3, [r4, #0]
{
   16bd4:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   16bd6:	4283      	cmp	r3, r0
   16bd8:	d00b      	beq.n	16bf2 <find_cf_cfg_by_addr+0x26>
   16bda:	7c23      	ldrb	r3, [r4, #16]
   16bdc:	42b3      	cmp	r3, r6
   16bde:	d110      	bne.n	16c02 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16be0:	4628      	mov	r0, r5
   16be2:	490a      	ldr	r1, [pc, #40]	; (16c0c <find_cf_cfg_by_addr+0x40>)
   16be4:	f012 fc21 	bl	2942a <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16be8:	b158      	cbz	r0, 16c02 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16bea:	2301      	movs	r3, #1
				return &cf_cfg[i];
   16bec:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   16bf0:	e008      	b.n	16c04 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16bf2:	4628      	mov	r0, r5
   16bf4:	1c61      	adds	r1, r4, #1
   16bf6:	f012 fc18 	bl	2942a <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16bfa:	2800      	cmp	r0, #0
   16bfc:	d0ed      	beq.n	16bda <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16bfe:	2300      	movs	r3, #0
   16c00:	e7f4      	b.n	16bec <find_cf_cfg_by_addr+0x20>
			}
		}
	}

	return NULL;
   16c02:	2000      	movs	r0, #0
}
   16c04:	bd70      	pop	{r4, r5, r6, pc}
   16c06:	bf00      	nop
   16c08:	200217d8 	.word	0x200217d8
   16c0c:	200217e9 	.word	0x200217e9

00016c10 <ccc_load>:
{
   16c10:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16c12:	4b20      	ldr	r3, [pc, #128]	; (16c94 <ccc_load+0x84>)
{
   16c14:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16c16:	6882      	ldr	r2, [r0, #8]
   16c18:	429a      	cmp	r2, r3
   16c1a:	d10f      	bne.n	16c3c <ccc_load+0x2c>
	if (!load->entry) {
   16c1c:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   16c1e:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   16c20:	b975      	cbnz	r5, 16c40 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   16c22:	7922      	ldrb	r2, [r4, #4]
   16c24:	4630      	mov	r0, r6
   16c26:	6821      	ldr	r1, [r4, #0]
   16c28:	f012 fc07 	bl	2943a <ccc_find_cfg>
	if (!cfg) {
   16c2c:	4602      	mov	r2, r0
   16c2e:	b128      	cbz	r0, 16c3c <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16c30:	4919      	ldr	r1, [pc, #100]	; (16c98 <ccc_load+0x88>)
   16c32:	3001      	adds	r0, #1
   16c34:	f012 fc27 	bl	29486 <bt_addr_le_copy>
	cfg->id = 0U;
   16c38:	7015      	strb	r5, [r2, #0]
	cfg->value = 0U;
   16c3a:	8115      	strh	r5, [r2, #8]
		return BT_GATT_ITER_CONTINUE;
   16c3c:	2001      	movs	r0, #1
}
   16c3e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   16c40:	68e0      	ldr	r0, [r4, #12]
   16c42:	2800      	cmp	r0, #0
   16c44:	d0fb      	beq.n	16c3e <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   16c46:	882b      	ldrh	r3, [r5, #0]
   16c48:	428b      	cmp	r3, r1
   16c4a:	d00a      	beq.n	16c62 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   16c4c:	d2f6      	bcs.n	16c3c <ccc_load+0x2c>
	load->count--;
   16c4e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   16c50:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   16c52:	3801      	subs	r0, #1
	load->entry++;
   16c54:	3304      	adds	r3, #4
	load->count--;
   16c56:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16c58:	3800      	subs	r0, #0
   16c5a:	bf18      	it	ne
   16c5c:	2001      	movne	r0, #1
	load->entry++;
   16c5e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16c60:	e7ed      	b.n	16c3e <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   16c62:	7922      	ldrb	r2, [r4, #4]
   16c64:	4630      	mov	r0, r6
   16c66:	6821      	ldr	r1, [r4, #0]
   16c68:	f012 fbe7 	bl	2943a <ccc_find_cfg>
	if (!cfg) {
   16c6c:	4602      	mov	r2, r0
   16c6e:	b960      	cbnz	r0, 16c8a <ccc_load+0x7a>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   16c70:	4630      	mov	r0, r6
   16c72:	4909      	ldr	r1, [pc, #36]	; (16c98 <ccc_load+0x88>)
   16c74:	f012 fbe1 	bl	2943a <ccc_find_cfg>
		if (!cfg) {
   16c78:	4602      	mov	r2, r0
   16c7a:	2800      	cmp	r0, #0
   16c7c:	d0e7      	beq.n	16c4e <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   16c7e:	6821      	ldr	r1, [r4, #0]
   16c80:	3001      	adds	r0, #1
   16c82:	f012 fc00 	bl	29486 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   16c86:	7923      	ldrb	r3, [r4, #4]
   16c88:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   16c8a:	68a3      	ldr	r3, [r4, #8]
   16c8c:	885b      	ldrh	r3, [r3, #2]
   16c8e:	8113      	strh	r3, [r2, #8]
   16c90:	e7dd      	b.n	16c4e <ccc_load+0x3e>
   16c92:	bf00      	nop
   16c94:	000173cd 	.word	0x000173cd
   16c98:	0002f895 	.word	0x0002f895

00016c9c <read_ppcp>:
{
   16c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16c9e:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16ca0:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   16ca4:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16ca6:	4a06      	ldr	r2, [pc, #24]	; (16cc0 <read_ppcp+0x24>)
   16ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   16cac:	2308      	movs	r3, #8
   16cae:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   16cb2:	9300      	str	r3, [sp, #0]
   16cb4:	446b      	add	r3, sp
   16cb6:	f012 fbf2 	bl	2949e <bt_gatt_attr_read.constprop.0>
}
   16cba:	b005      	add	sp, #20
   16cbc:	f85d fb04 	ldr.w	pc, [sp], #4
   16cc0:	00280018 	.word	0x00280018

00016cc4 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   16cc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Invalid key");
   16cc6:	4b07      	ldr	r3, [pc, #28]	; (16ce4 <ccc_set_direct.part.0+0x20>)
   16cc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16ccc:	9305      	str	r3, [sp, #20]
   16cce:	2302      	movs	r3, #2
   16cd0:	4805      	ldr	r0, [pc, #20]	; (16ce8 <ccc_set_direct.part.0+0x24>)
   16cd2:	aa04      	add	r2, sp, #16
   16cd4:	9304      	str	r3, [sp, #16]
   16cd6:	f012 fc6a 	bl	295ae <z_log_msg_static_create.constprop.0>
}
   16cda:	f06f 0015 	mvn.w	r0, #21
   16cde:	b007      	add	sp, #28
   16ce0:	f85d fb04 	ldr.w	pc, [sp], #4
   16ce4:	00030e37 	.word	0x00030e37
   16ce8:	0002c804 	.word	0x0002c804

00016cec <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   16cec:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16cee:	2108      	movs	r1, #8
   16cf0:	af00      	add	r7, sp, #0
   16cf2:	480f      	ldr	r0, [pc, #60]	; (16d30 <db_hash_commit+0x44>)
   16cf4:	f012 fbb1 	bl	2945a <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   16cf8:	2200      	movs	r2, #0
   16cfa:	2300      	movs	r3, #0
   16cfc:	480d      	ldr	r0, [pc, #52]	; (16d34 <db_hash_commit+0x48>)
   16cfe:	f7fa fee5 	bl	11acc <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   16d02:	1e04      	subs	r4, r0, #0
   16d04:	da11      	bge.n	16d2a <db_hash_commit+0x3e>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   16d06:	466d      	mov	r5, sp
   16d08:	b088      	sub	sp, #32
   16d0a:	466a      	mov	r2, sp
   16d0c:	4b0a      	ldr	r3, [pc, #40]	; (16d38 <db_hash_commit+0x4c>)
   16d0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d12:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16d16:	2303      	movs	r3, #3
   16d18:	4808      	ldr	r0, [pc, #32]	; (16d3c <db_hash_commit+0x50>)
   16d1a:	f842 3f10 	str.w	r3, [r2, #16]!
   16d1e:	f012 fc46 	bl	295ae <z_log_msg_static_create.constprop.0>
   16d22:	46ad      	mov	sp, r5
	}

	return err;
}
   16d24:	4620      	mov	r0, r4
   16d26:	46bd      	mov	sp, r7
   16d28:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   16d2a:	2400      	movs	r4, #0
	return err;
   16d2c:	e7fa      	b.n	16d24 <db_hash_commit+0x38>
   16d2e:	bf00      	nop
   16d30:	2000a050 	.word	0x2000a050
   16d34:	20009fa8 	.word	0x20009fa8
   16d38:	00030e43 	.word	0x00030e43
   16d3c:	0002c804 	.word	0x0002c804

00016d40 <sc_set>:
{
   16d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16d44:	b08b      	sub	sp, #44	; 0x2c
   16d46:	460e      	mov	r6, r1
   16d48:	4690      	mov	r8, r2
   16d4a:	4699      	mov	r9, r3
	if (!name) {
   16d4c:	4604      	mov	r4, r0
{
   16d4e:	af00      	add	r7, sp, #0
	if (!name) {
   16d50:	b988      	cbnz	r0, 16d76 <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   16d52:	4b43      	ldr	r3, [pc, #268]	; (16e60 <sc_set+0x120>)
   16d54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16d58:	627b      	str	r3, [r7, #36]	; 0x24
   16d5a:	2302      	movs	r3, #2
   16d5c:	4841      	ldr	r0, [pc, #260]	; (16e64 <sc_set+0x124>)
   16d5e:	623b      	str	r3, [r7, #32]
   16d60:	f107 0220 	add.w	r2, r7, #32
   16d64:	f012 fc23 	bl	295ae <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   16d68:	f06f 0515 	mvn.w	r5, #21
}
   16d6c:	4628      	mov	r0, r5
   16d6e:	372c      	adds	r7, #44	; 0x2c
   16d70:	46bd      	mov	sp, r7
   16d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   16d76:	f107 0108 	add.w	r1, r7, #8
   16d7a:	f011 f996 	bl	280aa <bt_settings_decode_key>
	if (err) {
   16d7e:	4605      	mov	r5, r0
   16d80:	b190      	cbz	r0, 16da8 <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   16d82:	466d      	mov	r5, sp
   16d84:	b088      	sub	sp, #32
   16d86:	466a      	mov	r2, sp
   16d88:	4b37      	ldr	r3, [pc, #220]	; (16e68 <sc_set+0x128>)
   16d8a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   16d8e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16d92:	f44f 7300 	mov.w	r3, #512	; 0x200
   16d96:	8393      	strh	r3, [r2, #28]
   16d98:	4b34      	ldr	r3, [pc, #208]	; (16e6c <sc_set+0x12c>)
   16d9a:	4832      	ldr	r0, [pc, #200]	; (16e64 <sc_set+0x124>)
   16d9c:	f842 3f10 	str.w	r3, [r2, #16]!
   16da0:	f012 fc05 	bl	295ae <z_log_msg_static_create.constprop.0>
   16da4:	46ad      	mov	sp, r5
		return -EINVAL;
   16da6:	e7df      	b.n	16d68 <sc_set+0x28>
	settings_name_next(name, &next);
   16da8:	4620      	mov	r0, r4
   16daa:	1d39      	adds	r1, r7, #4
   16dac:	f010 fbd9 	bl	27562 <settings_name_next>
	if (!next) {
   16db0:	6878      	ldr	r0, [r7, #4]
   16db2:	b1a0      	cbz	r0, 16dde <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   16db4:	220a      	movs	r2, #10
   16db6:	4629      	mov	r1, r5
   16db8:	f00e fa6a 	bl	25290 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   16dbc:	b178      	cbz	r0, 16dde <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   16dbe:	466c      	mov	r4, sp
   16dc0:	b088      	sub	sp, #32
   16dc2:	466a      	mov	r2, sp
   16dc4:	4b2a      	ldr	r3, [pc, #168]	; (16e70 <sc_set+0x130>)
   16dc6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16dca:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16dce:	2303      	movs	r3, #3
   16dd0:	4824      	ldr	r0, [pc, #144]	; (16e64 <sc_set+0x124>)
   16dd2:	f842 3f10 	str.w	r3, [r2, #16]!
   16dd6:	f012 fbea 	bl	295ae <z_log_msg_static_create.constprop.0>
   16dda:	46a5      	mov	sp, r4
			return -EINVAL;
   16ddc:	e7c4      	b.n	16d68 <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   16dde:	2000      	movs	r0, #0
   16de0:	f107 0108 	add.w	r1, r7, #8
   16de4:	f7ff febc 	bl	16b60 <find_sc_cfg>
	if (!cfg && len_rd) {
   16de8:	4604      	mov	r4, r0
   16dea:	bb98      	cbnz	r0, 16e54 <sc_set+0x114>
   16dec:	2e00      	cmp	r6, #0
   16dee:	d0bd      	beq.n	16d6c <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   16df0:	4920      	ldr	r1, [pc, #128]	; (16e74 <sc_set+0x134>)
   16df2:	f7ff feb5 	bl	16b60 <find_sc_cfg>
		if (!cfg) {
   16df6:	4604      	mov	r4, r0
   16df8:	b968      	cbnz	r0, 16e16 <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   16dfa:	4b1f      	ldr	r3, [pc, #124]	; (16e78 <sc_set+0x138>)
   16dfc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16e00:	627b      	str	r3, [r7, #36]	; 0x24
   16e02:	2302      	movs	r3, #2
   16e04:	4817      	ldr	r0, [pc, #92]	; (16e64 <sc_set+0x124>)
   16e06:	623b      	str	r3, [r7, #32]
   16e08:	f107 0220 	add.w	r2, r7, #32
   16e0c:	f012 fbcf 	bl	295ae <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   16e10:	f06f 050b 	mvn.w	r5, #11
   16e14:	e7aa      	b.n	16d6c <sc_set+0x2c>
		cfg->id = id;
   16e16:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   16e18:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   16e1c:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   16e20:	f012 fb31 	bl	29486 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   16e24:	f104 0108 	add.w	r1, r4, #8
   16e28:	2204      	movs	r2, #4
   16e2a:	4648      	mov	r0, r9
   16e2c:	47c0      	blx	r8
		if (len < 0) {
   16e2e:	1e04      	subs	r4, r0, #0
   16e30:	da9c      	bge.n	16d6c <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   16e32:	466d      	mov	r5, sp
   16e34:	b088      	sub	sp, #32
   16e36:	466a      	mov	r2, sp
   16e38:	4b10      	ldr	r3, [pc, #64]	; (16e7c <sc_set+0x13c>)
   16e3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16e3e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16e42:	2303      	movs	r3, #3
   16e44:	4807      	ldr	r0, [pc, #28]	; (16e64 <sc_set+0x124>)
   16e46:	f842 3f10 	str.w	r3, [r2, #16]!
   16e4a:	f012 fbb0 	bl	295ae <z_log_msg_static_create.constprop.0>
   16e4e:	46ad      	mov	sp, r5
			return len;
   16e50:	4625      	mov	r5, r4
   16e52:	e78b      	b.n	16d6c <sc_set+0x2c>
	if (len_rd) {
   16e54:	2e00      	cmp	r6, #0
   16e56:	d1e5      	bne.n	16e24 <sc_set+0xe4>
   16e58:	6006      	str	r6, [r0, #0]
   16e5a:	6046      	str	r6, [r0, #4]
   16e5c:	6086      	str	r6, [r0, #8]
   16e5e:	e785      	b.n	16d6c <sc_set+0x2c>
   16e60:	0002f8eb 	.word	0x0002f8eb
   16e64:	0002c804 	.word	0x0002c804
   16e68:	00030e77 	.word	0x00030e77
   16e6c:	01000003 	.word	0x01000003
   16e70:	00030e93 	.word	0x00030e93
   16e74:	0002f895 	.word	0x0002f895
   16e78:	00030eae 	.word	0x00030eae
   16e7c:	00030ed0 	.word	0x00030ed0

00016e80 <bt_gatt_clear_sc>:
{
   16e80:	b5b0      	push	{r4, r5, r7, lr}
   16e82:	b08c      	sub	sp, #48	; 0x30
   16e84:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   16e86:	f7ff fe6b 	bl	16b60 <find_sc_cfg>
	if (!cfg) {
   16e8a:	4604      	mov	r4, r0
   16e8c:	b320      	cbz	r0, 16ed8 <bt_gatt_clear_sc+0x58>
		if (cfg->id) {
   16e8e:	4605      	mov	r5, r0
   16e90:	f815 2b01 	ldrb.w	r2, [r5], #1
   16e94:	b322      	cbz	r2, 16ee0 <bt_gatt_clear_sc+0x60>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   16e96:	2104      	movs	r1, #4
   16e98:	4638      	mov	r0, r7
   16e9a:	f00f faf2 	bl	26482 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   16e9e:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   16ea0:	1d38      	adds	r0, r7, #4
   16ea2:	462b      	mov	r3, r5
   16ea4:	2124      	movs	r1, #36	; 0x24
   16ea6:	4a0f      	ldr	r2, [pc, #60]	; (16ee4 <bt_gatt_clear_sc+0x64>)
   16ea8:	f7fa fd56 	bl	11958 <bt_settings_encode_key>
		err = settings_delete(key);
   16eac:	1d38      	adds	r0, r7, #4
   16eae:	f010 fb30 	bl	27512 <settings_delete>
		if (err) {
   16eb2:	b170      	cbz	r0, 16ed2 <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   16eb4:	466d      	mov	r5, sp
   16eb6:	b088      	sub	sp, #32
   16eb8:	aa02      	add	r2, sp, #8
   16eba:	4b0b      	ldr	r3, [pc, #44]	; (16ee8 <bt_gatt_clear_sc+0x68>)
   16ebc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16ec0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16ec4:	2303      	movs	r3, #3
   16ec6:	4809      	ldr	r0, [pc, #36]	; (16eec <bt_gatt_clear_sc+0x6c>)
   16ec8:	f842 3f10 	str.w	r3, [r2, #16]!
   16ecc:	f012 fb6f 	bl	295ae <z_log_msg_static_create.constprop.0>
   16ed0:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   16ed2:	4620      	mov	r0, r4
   16ed4:	f012 fade 	bl	29494 <clear_sc_cfg>
}
   16ed8:	2000      	movs	r0, #0
   16eda:	3728      	adds	r7, #40	; 0x28
   16edc:	46bd      	mov	sp, r7
   16ede:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   16ee0:	9200      	str	r2, [sp, #0]
   16ee2:	e7dd      	b.n	16ea0 <bt_gatt_clear_sc+0x20>
   16ee4:	00031281 	.word	0x00031281
   16ee8:	00030ef1 	.word	0x00030ef1
   16eec:	0002c804 	.word	0x0002c804

00016ef0 <sc_clear>:
{
   16ef0:	b5b0      	push	{r4, r5, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16ef2:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   16ef6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16ef8:	4629      	mov	r1, r5
   16efa:	7a00      	ldrb	r0, [r0, #8]
{
   16efc:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16efe:	f011 fa54 	bl	283aa <bt_addr_le_is_bonded>
   16f02:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   16f04:	4629      	mov	r1, r5
   16f06:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16f08:	b19b      	cbz	r3, 16f32 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   16f0a:	f7ff ffb9 	bl	16e80 <bt_gatt_clear_sc>
		if (err) {
   16f0e:	b170      	cbz	r0, 16f2e <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   16f10:	466c      	mov	r4, sp
   16f12:	b088      	sub	sp, #32
   16f14:	466a      	mov	r2, sp
   16f16:	4b0a      	ldr	r3, [pc, #40]	; (16f40 <sc_clear+0x50>)
   16f18:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16f1c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16f20:	2303      	movs	r3, #3
   16f22:	4808      	ldr	r0, [pc, #32]	; (16f44 <sc_clear+0x54>)
   16f24:	f842 3f10 	str.w	r3, [r2, #16]!
   16f28:	f012 fb41 	bl	295ae <z_log_msg_static_create.constprop.0>
   16f2c:	46a5      	mov	sp, r4
}
   16f2e:	46bd      	mov	sp, r7
   16f30:	bdb0      	pop	{r4, r5, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16f32:	f7ff fe15 	bl	16b60 <find_sc_cfg>
		if (cfg) {
   16f36:	2800      	cmp	r0, #0
   16f38:	d0f9      	beq.n	16f2e <sc_clear+0x3e>
			clear_sc_cfg(cfg);
   16f3a:	f012 faab 	bl	29494 <clear_sc_cfg>
}
   16f3e:	e7f6      	b.n	16f2e <sc_clear+0x3e>
   16f40:	00030f0e 	.word	0x00030f0e
   16f44:	0002c804 	.word	0x0002c804

00016f48 <sc_store>:
{
   16f48:	b5b0      	push	{r4, r5, r7, lr}
   16f4a:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   16f4c:	4605      	mov	r5, r0
   16f4e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   16f52:	4604      	mov	r4, r0
   16f54:	af02      	add	r7, sp, #8
	if (cfg->id) {
   16f56:	b31a      	cbz	r2, 16fa0 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   16f58:	2104      	movs	r1, #4
   16f5a:	4638      	mov	r0, r7
   16f5c:	f00f fa91 	bl	26482 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   16f60:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   16f62:	2124      	movs	r1, #36	; 0x24
   16f64:	4a0f      	ldr	r2, [pc, #60]	; (16fa4 <sc_store+0x5c>)
   16f66:	1d38      	adds	r0, r7, #4
   16f68:	462b      	mov	r3, r5
   16f6a:	f7fa fcf5 	bl	11958 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   16f6e:	2204      	movs	r2, #4
   16f70:	f104 0108 	add.w	r1, r4, #8
   16f74:	18b8      	adds	r0, r7, r2
   16f76:	f7f8 fda5 	bl	fac4 <settings_save_one>
	if (err) {
   16f7a:	b170      	cbz	r0, 16f9a <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   16f7c:	466c      	mov	r4, sp
   16f7e:	b088      	sub	sp, #32
   16f80:	aa02      	add	r2, sp, #8
   16f82:	4b09      	ldr	r3, [pc, #36]	; (16fa8 <sc_store+0x60>)
   16f84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16f88:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16f8c:	2303      	movs	r3, #3
   16f8e:	4807      	ldr	r0, [pc, #28]	; (16fac <sc_store+0x64>)
   16f90:	f842 3f10 	str.w	r3, [r2, #16]!
   16f94:	f012 fb0b 	bl	295ae <z_log_msg_static_create.constprop.0>
   16f98:	46a5      	mov	sp, r4
}
   16f9a:	3728      	adds	r7, #40	; 0x28
   16f9c:	46bd      	mov	sp, r7
   16f9e:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   16fa0:	9200      	str	r2, [sp, #0]
   16fa2:	e7de      	b.n	16f62 <sc_store+0x1a>
   16fa4:	00031281 	.word	0x00031281
   16fa8:	00030f24 	.word	0x00030f24
   16fac:	0002c804 	.word	0x0002c804

00016fb0 <sc_save>:
{
   16fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fb4:	b086      	sub	sp, #24
   16fb6:	4680      	mov	r8, r0
   16fb8:	460f      	mov	r7, r1
   16fba:	4616      	mov	r6, r2
   16fbc:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   16fbe:	f7ff fdcf 	bl	16b60 <find_sc_cfg>
	if (!cfg) {
   16fc2:	4604      	mov	r4, r0
   16fc4:	b9b0      	cbnz	r0, 16ff4 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   16fc6:	4919      	ldr	r1, [pc, #100]	; (1702c <sc_save+0x7c>)
   16fc8:	f7ff fdca 	bl	16b60 <find_sc_cfg>
		if (!cfg) {
   16fcc:	4604      	mov	r4, r0
   16fce:	b960      	cbnz	r0, 16fea <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   16fd0:	4b17      	ldr	r3, [pc, #92]	; (17030 <sc_save+0x80>)
   16fd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16fd6:	9305      	str	r3, [sp, #20]
   16fd8:	2302      	movs	r3, #2
   16fda:	4816      	ldr	r0, [pc, #88]	; (17034 <sc_save+0x84>)
   16fdc:	aa04      	add	r2, sp, #16
   16fde:	9304      	str	r3, [sp, #16]
   16fe0:	f012 fae5 	bl	295ae <z_log_msg_static_create.constprop.0>
}
   16fe4:	b006      	add	sp, #24
   16fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   16fea:	4639      	mov	r1, r7
		cfg->id = id;
   16fec:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   16ff0:	f012 fa49 	bl	29486 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   16ff4:	8922      	ldrh	r2, [r4, #8]
   16ff6:	8963      	ldrh	r3, [r4, #10]
   16ff8:	b97a      	cbnz	r2, 1701a <sc_save+0x6a>
   16ffa:	b983      	cbnz	r3, 1701e <sc_save+0x6e>
		cfg->data.start = start;
   16ffc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   16ffe:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   17000:	4621      	mov	r1, r4
   17002:	f811 0b01 	ldrb.w	r0, [r1], #1
   17006:	f011 f9d0 	bl	283aa <bt_addr_le_is_bonded>
   1700a:	2800      	cmp	r0, #0
   1700c:	d0ea      	beq.n	16fe4 <sc_save+0x34>
		sc_store(cfg);
   1700e:	4620      	mov	r0, r4
}
   17010:	b006      	add	sp, #24
   17012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   17016:	f7ff bf97 	b.w	16f48 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1701a:	4296      	cmp	r6, r2
   1701c:	d302      	bcc.n	17024 <sc_save+0x74>
   1701e:	429d      	cmp	r5, r3
   17020:	d8ed      	bhi.n	16ffe <sc_save+0x4e>
   17022:	e7df      	b.n	16fe4 <sc_save+0x34>
	if (*end < new_end) {
   17024:	429d      	cmp	r5, r3
		*start = new_start;
   17026:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   17028:	d9ea      	bls.n	17000 <sc_save+0x50>
   1702a:	e7e8      	b.n	16ffe <sc_save+0x4e>
   1702c:	0002f895 	.word	0x0002f895
   17030:	00030f40 	.word	0x00030f40
   17034:	0002c804 	.word	0x0002c804

00017038 <cf_write>:
{
   17038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1703c:	b086      	sub	sp, #24
   1703e:	461f      	mov	r7, r3
   17040:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   17044:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   17046:	2b01      	cmp	r3, #1
{
   17048:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1704a:	d83c      	bhi.n	170c6 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1704c:	443b      	add	r3, r7
   1704e:	2b01      	cmp	r3, #1
   17050:	463d      	mov	r5, r7
   17052:	dc3b      	bgt.n	170cc <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   17054:	f7ff fd56 	bl	16b04 <find_cf_cfg>
	if (!cfg) {
   17058:	4604      	mov	r4, r0
   1705a:	b998      	cbnz	r0, 17084 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1705c:	f7ff fd52 	bl	16b04 <find_cf_cfg>
	if (!cfg) {
   17060:	4604      	mov	r4, r0
   17062:	b978      	cbnz	r0, 17084 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   17064:	4b1c      	ldr	r3, [pc, #112]	; (170d8 <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17066:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1706a:	9305      	str	r3, [sp, #20]
   1706c:	2302      	movs	r3, #2
   1706e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17072:	481a      	ldr	r0, [pc, #104]	; (170dc <cf_write+0xa4>)
   17074:	aa04      	add	r2, sp, #16
   17076:	9304      	str	r3, [sp, #16]
   17078:	f012 fa99 	bl	295ae <z_log_msg_static_create.constprop.0>
}
   1707c:	4628      	mov	r0, r5
   1707e:	b006      	add	sp, #24
   17080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17084:	b197      	cbz	r7, 170ac <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   17086:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17088:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1708a:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1708e:	fa21 f003 	lsr.w	r0, r1, r3
   17092:	07c7      	lsls	r7, r0, #31
   17094:	d503      	bpl.n	1709e <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   17096:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1709a:	07c0      	lsls	r0, r0, #31
   1709c:	d519      	bpl.n	170d2 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1709e:	3301      	adds	r3, #1
   170a0:	2b03      	cmp	r3, #3
   170a2:	d1f4      	bne.n	1708e <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   170a4:	f002 0207 	and.w	r2, r2, #7
   170a8:	4311      	orrs	r1, r2
   170aa:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   170ac:	f106 0190 	add.w	r1, r6, #144	; 0x90
   170b0:	1c60      	adds	r0, r4, #1
   170b2:	f012 f9e8 	bl	29486 <bt_addr_le_copy>
	cfg->id = conn->id;
   170b6:	4620      	mov	r0, r4
   170b8:	7a33      	ldrb	r3, [r6, #8]
   170ba:	2101      	movs	r1, #1
   170bc:	f800 3b0c 	strb.w	r3, [r0], #12
   170c0:	f012 f9cb 	bl	2945a <atomic_or>
}
   170c4:	e7da      	b.n	1707c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   170c6:	f06f 0506 	mvn.w	r5, #6
   170ca:	e7d7      	b.n	1707c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   170cc:	f06f 050c 	mvn.w	r5, #12
   170d0:	e7d4      	b.n	1707c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   170d2:	f06f 0512 	mvn.w	r5, #18
   170d6:	e7d1      	b.n	1707c <cf_write+0x44>
   170d8:	00030f5f 	.word	0x00030f5f
   170dc:	0002c804 	.word	0x0002c804

000170e0 <db_hash_store>:
{
   170e0:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   170e2:	2210      	movs	r2, #16
{
   170e4:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   170e6:	490b      	ldr	r1, [pc, #44]	; (17114 <db_hash_store+0x34>)
   170e8:	480b      	ldr	r0, [pc, #44]	; (17118 <db_hash_store+0x38>)
   170ea:	f7f8 fceb 	bl	fac4 <settings_save_one>
	if (err) {
   170ee:	b170      	cbz	r0, 1710e <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   170f0:	466c      	mov	r4, sp
   170f2:	b088      	sub	sp, #32
   170f4:	466a      	mov	r2, sp
   170f6:	4b09      	ldr	r3, [pc, #36]	; (1711c <db_hash_store+0x3c>)
   170f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17100:	2303      	movs	r3, #3
   17102:	4807      	ldr	r0, [pc, #28]	; (17120 <db_hash_store+0x40>)
   17104:	f842 3f10 	str.w	r3, [r2, #16]!
   17108:	f012 fa51 	bl	295ae <z_log_msg_static_create.constprop.0>
   1710c:	46a5      	mov	sp, r4
}
   1710e:	46bd      	mov	sp, r7
   17110:	bd98      	pop	{r3, r4, r7, pc}
   17112:	bf00      	nop
   17114:	20009f88 	.word	0x20009f88
   17118:	00030f8b 	.word	0x00030f8b
   1711c:	00030f93 	.word	0x00030f93
   17120:	0002c804 	.word	0x0002c804

00017124 <db_hash_set>:
{
   17124:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17126:	4618      	mov	r0, r3
{
   17128:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1712a:	490d      	ldr	r1, [pc, #52]	; (17160 <db_hash_set+0x3c>)
   1712c:	2210      	movs	r2, #16
{
   1712e:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17130:	47a0      	blx	r4
	if (len < 0) {
   17132:	1e04      	subs	r4, r0, #0
   17134:	da11      	bge.n	1715a <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   17136:	466d      	mov	r5, sp
   17138:	b088      	sub	sp, #32
   1713a:	466a      	mov	r2, sp
   1713c:	4b09      	ldr	r3, [pc, #36]	; (17164 <db_hash_set+0x40>)
   1713e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17142:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17146:	2303      	movs	r3, #3
   17148:	4807      	ldr	r0, [pc, #28]	; (17168 <db_hash_set+0x44>)
   1714a:	f842 3f10 	str.w	r3, [r2, #16]!
   1714e:	f012 fa2e 	bl	295ae <z_log_msg_static_create.constprop.0>
   17152:	46ad      	mov	sp, r5
}
   17154:	4620      	mov	r0, r4
   17156:	46bd      	mov	sp, r7
   17158:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1715a:	2400      	movs	r4, #0
   1715c:	e7fa      	b.n	17154 <db_hash_set+0x30>
   1715e:	bf00      	nop
   17160:	20009f98 	.word	0x20009f98
   17164:	00030ed0 	.word	0x00030ed0
   17168:	0002c804 	.word	0x0002c804

0001716c <clear_cf_cfg>:
{
   1716c:	4602      	mov	r2, r0
   1716e:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17170:	4907      	ldr	r1, [pc, #28]	; (17190 <clear_cf_cfg+0x24>)
   17172:	3001      	adds	r0, #1
   17174:	f012 f987 	bl	29486 <bt_addr_le_copy>
   17178:	2300      	movs	r3, #0
   1717a:	320c      	adds	r2, #12
   1717c:	f802 3c04 	strb.w	r3, [r2, #-4]
   17180:	e8d2 1fef 	ldaex	r1, [r2]
   17184:	e8c2 3fe0 	stlex	r0, r3, [r2]
   17188:	2800      	cmp	r0, #0
   1718a:	d1f9      	bne.n	17180 <clear_cf_cfg+0x14>
}
   1718c:	bd08      	pop	{r3, pc}
   1718e:	bf00      	nop
   17190:	0002f895 	.word	0x0002f895

00017194 <cf_set>:
{
   17194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17198:	b08b      	sub	sp, #44	; 0x2c
   1719a:	4689      	mov	r9, r1
   1719c:	4616      	mov	r6, r2
   1719e:	4698      	mov	r8, r3
	if (!name) {
   171a0:	4604      	mov	r4, r0
{
   171a2:	af00      	add	r7, sp, #0
	if (!name) {
   171a4:	b988      	cbnz	r0, 171ca <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   171a6:	4b42      	ldr	r3, [pc, #264]	; (172b0 <cf_set+0x11c>)
   171a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   171ac:	627b      	str	r3, [r7, #36]	; 0x24
   171ae:	2302      	movs	r3, #2
   171b0:	4840      	ldr	r0, [pc, #256]	; (172b4 <cf_set+0x120>)
   171b2:	623b      	str	r3, [r7, #32]
   171b4:	f107 0220 	add.w	r2, r7, #32
   171b8:	f012 f9f9 	bl	295ae <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   171bc:	f06f 0515 	mvn.w	r5, #21
}
   171c0:	4628      	mov	r0, r5
   171c2:	372c      	adds	r7, #44	; 0x2c
   171c4:	46bd      	mov	sp, r7
   171c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   171ca:	f107 0108 	add.w	r1, r7, #8
   171ce:	f010 ff6c 	bl	280aa <bt_settings_decode_key>
	if (err) {
   171d2:	4605      	mov	r5, r0
   171d4:	b190      	cbz	r0, 171fc <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   171d6:	466d      	mov	r5, sp
   171d8:	b088      	sub	sp, #32
   171da:	466a      	mov	r2, sp
   171dc:	4b36      	ldr	r3, [pc, #216]	; (172b8 <cf_set+0x124>)
   171de:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   171e2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   171e6:	f44f 7300 	mov.w	r3, #512	; 0x200
   171ea:	8393      	strh	r3, [r2, #28]
   171ec:	4b33      	ldr	r3, [pc, #204]	; (172bc <cf_set+0x128>)
   171ee:	4831      	ldr	r0, [pc, #196]	; (172b4 <cf_set+0x120>)
   171f0:	f842 3f10 	str.w	r3, [r2, #16]!
   171f4:	f012 f9db 	bl	295ae <z_log_msg_static_create.constprop.0>
   171f8:	46ad      	mov	sp, r5
		return -EINVAL;
   171fa:	e7df      	b.n	171bc <cf_set+0x28>
	settings_name_next(name, &next);
   171fc:	4620      	mov	r0, r4
   171fe:	1d39      	adds	r1, r7, #4
   17200:	f010 f9af 	bl	27562 <settings_name_next>
	if (!next) {
   17204:	6878      	ldr	r0, [r7, #4]
   17206:	b1a0      	cbz	r0, 17232 <cf_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   17208:	220a      	movs	r2, #10
   1720a:	4629      	mov	r1, r5
   1720c:	f00e f840 	bl	25290 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   17210:	b178      	cbz	r0, 17232 <cf_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   17212:	466c      	mov	r4, sp
   17214:	b088      	sub	sp, #32
   17216:	466a      	mov	r2, sp
   17218:	4b29      	ldr	r3, [pc, #164]	; (172c0 <cf_set+0x12c>)
   1721a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1721e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17222:	2303      	movs	r3, #3
   17224:	4823      	ldr	r0, [pc, #140]	; (172b4 <cf_set+0x120>)
   17226:	f842 3f10 	str.w	r3, [r2, #16]!
   1722a:	f012 f9c0 	bl	295ae <z_log_msg_static_create.constprop.0>
   1722e:	46a5      	mov	sp, r4
			return -EINVAL;
   17230:	e7c4      	b.n	171bc <cf_set+0x28>
	cfg = find_cf_cfg_by_addr(id, &addr);
   17232:	2000      	movs	r0, #0
   17234:	f107 0108 	add.w	r1, r7, #8
   17238:	f7ff fcc8 	bl	16bcc <find_cf_cfg_by_addr>
	if (!cfg) {
   1723c:	4604      	mov	r4, r0
   1723e:	b9c0      	cbnz	r0, 17272 <cf_set+0xde>
		cfg = find_cf_cfg(NULL);
   17240:	f7ff fc60 	bl	16b04 <find_cf_cfg>
		if (!cfg) {
   17244:	4604      	mov	r4, r0
   17246:	b968      	cbnz	r0, 17264 <cf_set+0xd0>
			LOG_ERR("Unable to restore CF: no cfg left");
   17248:	4b1e      	ldr	r3, [pc, #120]	; (172c4 <cf_set+0x130>)
   1724a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1724e:	627b      	str	r3, [r7, #36]	; 0x24
   17250:	2302      	movs	r3, #2
   17252:	4818      	ldr	r0, [pc, #96]	; (172b4 <cf_set+0x120>)
   17254:	623b      	str	r3, [r7, #32]
   17256:	f107 0220 	add.w	r2, r7, #32
   1725a:	f012 f9a8 	bl	295ae <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1725e:	f06f 050b 	mvn.w	r5, #11
   17262:	e7ad      	b.n	171c0 <cf_set+0x2c>
		cfg->id = id;
   17264:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   17266:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   1726a:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1726e:	f012 f90a 	bl	29486 <bt_addr_le_copy>
	if (len_rd) {
   17272:	f1b9 0f00 	cmp.w	r9, #0
   17276:	d017      	beq.n	172a8 <cf_set+0x114>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   17278:	f104 0108 	add.w	r1, r4, #8
   1727c:	2201      	movs	r2, #1
   1727e:	4640      	mov	r0, r8
   17280:	47b0      	blx	r6
		if (len < 0) {
   17282:	1e04      	subs	r4, r0, #0
   17284:	da9c      	bge.n	171c0 <cf_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   17286:	466d      	mov	r5, sp
   17288:	b088      	sub	sp, #32
   1728a:	466a      	mov	r2, sp
   1728c:	4b0e      	ldr	r3, [pc, #56]	; (172c8 <cf_set+0x134>)
   1728e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17292:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17296:	2303      	movs	r3, #3
   17298:	4806      	ldr	r0, [pc, #24]	; (172b4 <cf_set+0x120>)
   1729a:	f842 3f10 	str.w	r3, [r2, #16]!
   1729e:	f012 f986 	bl	295ae <z_log_msg_static_create.constprop.0>
   172a2:	46ad      	mov	sp, r5
			return len;
   172a4:	4625      	mov	r5, r4
   172a6:	e78b      	b.n	171c0 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   172a8:	4620      	mov	r0, r4
   172aa:	f7ff ff5f 	bl	1716c <clear_cf_cfg>
   172ae:	e787      	b.n	171c0 <cf_set+0x2c>
   172b0:	0002f8eb 	.word	0x0002f8eb
   172b4:	0002c804 	.word	0x0002c804
   172b8:	00030e77 	.word	0x00030e77
   172bc:	01000003 	.word	0x01000003
   172c0:	00030e93 	.word	0x00030e93
   172c4:	00030fb9 	.word	0x00030fb9
   172c8:	00030ed0 	.word	0x00030ed0

000172cc <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   172cc:	b508      	push	{r3, lr}
   172ce:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   172d0:	6881      	ldr	r1, [r0, #8]
   172d2:	4a07      	ldr	r2, [pc, #28]	; (172f0 <remove_peer_from_attr+0x24>)
   172d4:	4291      	cmp	r1, r2
   172d6:	d109      	bne.n	172ec <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   172d8:	791a      	ldrb	r2, [r3, #4]
   172da:	6819      	ldr	r1, [r3, #0]
   172dc:	68c0      	ldr	r0, [r0, #12]
   172de:	f012 f8ac 	bl	2943a <ccc_find_cfg>
	if (cfg) {
   172e2:	b118      	cbz	r0, 172ec <remove_peer_from_attr+0x20>
   172e4:	2300      	movs	r3, #0
   172e6:	6003      	str	r3, [r0, #0]
   172e8:	6043      	str	r3, [r0, #4]
   172ea:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   172ec:	2001      	movs	r0, #1
   172ee:	bd08      	pop	{r3, pc}
   172f0:	000173cd 	.word	0x000173cd

000172f4 <ccc_save>:
{
   172f4:	b538      	push	{r3, r4, r5, lr}
   172f6:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   172f8:	4b0b      	ldr	r3, [pc, #44]	; (17328 <ccc_save+0x34>)
   172fa:	6882      	ldr	r2, [r0, #8]
{
   172fc:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   172fe:	429a      	cmp	r2, r3
   17300:	d10f      	bne.n	17322 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   17302:	7922      	ldrb	r2, [r4, #4]
   17304:	6821      	ldr	r1, [r4, #0]
   17306:	68c0      	ldr	r0, [r0, #12]
   17308:	f012 f897 	bl	2943a <ccc_find_cfg>
	if (!cfg) {
   1730c:	b148      	cbz	r0, 17322 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1730e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   17312:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   17316:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   17318:	8901      	ldrh	r1, [r0, #8]
	save->count++;
   1731a:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
   1731c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1731e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   17322:	2001      	movs	r0, #1
   17324:	bd38      	pop	{r3, r4, r5, pc}
   17326:	bf00      	nop
   17328:	000173cd 	.word	0x000173cd

0001732c <disconnected_cb>:
{
   1732c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17330:	4b23      	ldr	r3, [pc, #140]	; (173c0 <disconnected_cb+0x94>)
{
   17332:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17334:	6882      	ldr	r2, [r0, #8]
{
   17336:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17338:	429a      	cmp	r2, r3
   1733a:	d102      	bne.n	17342 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1733c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1733e:	8963      	ldrh	r3, [r4, #10]
   17340:	bb33      	cbnz	r3, 17390 <disconnected_cb+0x64>
}
   17342:	2001      	movs	r0, #1
   17344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   17348:	f7fd fbfc 	bl	14b44 <bt_conn_unref>
		ccc->value = 0U;
   1734c:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1734e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   17350:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17352:	2b00      	cmp	r3, #0
   17354:	d0f5      	beq.n	17342 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   17356:	4638      	mov	r0, r7
   17358:	4798      	blx	r3
   1735a:	e7f2      	b.n	17342 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1735c:	f105 0890 	add.w	r8, r5, #144	; 0x90
   17360:	4641      	mov	r1, r8
   17362:	7a28      	ldrb	r0, [r5, #8]
   17364:	f011 f821 	bl	283aa <bt_addr_le_is_bonded>
   17368:	b968      	cbnz	r0, 17386 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1736a:	4b16      	ldr	r3, [pc, #88]	; (173c4 <disconnected_cb+0x98>)
   1736c:	429c      	cmp	r4, r3
   1736e:	d102      	bne.n	17376 <disconnected_cb+0x4a>
					sc_clear(conn);
   17370:	4628      	mov	r0, r5
   17372:	f7ff fdbd 	bl	16ef0 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17376:	4630      	mov	r0, r6
   17378:	4913      	ldr	r1, [pc, #76]	; (173c8 <disconnected_cb+0x9c>)
   1737a:	f012 f884 	bl	29486 <bt_addr_le_copy>
	cfg->id = 0U;
   1737e:	2300      	movs	r3, #0
   17380:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   17382:	8123      	strh	r3, [r4, #8]
}
   17384:	e7e2      	b.n	1734c <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17386:	4641      	mov	r1, r8
   17388:	4630      	mov	r0, r6
   1738a:	f012 f87c 	bl	29486 <bt_addr_le_copy>
   1738e:	e7dd      	b.n	1734c <disconnected_cb+0x20>
		if (!cfg->value) {
   17390:	8923      	ldrh	r3, [r4, #8]
   17392:	2b00      	cmp	r3, #0
   17394:	d0da      	beq.n	1734c <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17396:	4626      	mov	r6, r4
   17398:	f816 1b01 	ldrb.w	r1, [r6], #1
   1739c:	4628      	mov	r0, r5
   1739e:	4632      	mov	r2, r6
   173a0:	f011 faa3 	bl	288ea <bt_conn_is_peer_addr_le>
   173a4:	2800      	cmp	r0, #0
   173a6:	d1d9      	bne.n	1735c <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   173a8:	4631      	mov	r1, r6
   173aa:	7820      	ldrb	r0, [r4, #0]
   173ac:	f7fd fea6 	bl	150fc <bt_conn_lookup_addr_le>
			if (tmp) {
   173b0:	2800      	cmp	r0, #0
   173b2:	d0cb      	beq.n	1734c <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   173b4:	7b43      	ldrb	r3, [r0, #13]
   173b6:	2b07      	cmp	r3, #7
   173b8:	d1c6      	bne.n	17348 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   173ba:	f7fd fbc3 	bl	14b44 <bt_conn_unref>
	if (!value_used) {
   173be:	e7c0      	b.n	17342 <disconnected_cb+0x16>
   173c0:	000173cd 	.word	0x000173cd
   173c4:	200086b0 	.word	0x200086b0
   173c8:	0002f895 	.word	0x0002f895

000173cc <bt_gatt_attr_write_ccc>:
{
   173cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173d0:	b086      	sub	sp, #24
   173d2:	461f      	mov	r7, r3
   173d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   173d8:	4605      	mov	r5, r0
   173da:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   173dc:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   173e0:	2b00      	cmp	r3, #0
   173e2:	d16d      	bne.n	174c0 <bt_gatt_attr_write_ccc+0xf4>
	if (!len || len > sizeof(uint16_t)) {
   173e4:	1e7b      	subs	r3, r7, #1
   173e6:	2b01      	cmp	r3, #1
   173e8:	d86d      	bhi.n	174c6 <bt_gatt_attr_write_ccc+0xfa>
	if (len < sizeof(uint16_t)) {
   173ea:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   173ec:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   173ee:	7816      	ldrb	r6, [r2, #0]
   173f0:	bf18      	it	ne
   173f2:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   173f4:	f7ff fbd6 	bl	16ba4 <find_ccc_cfg>
	if (!cfg) {
   173f8:	4604      	mov	r4, r0
   173fa:	b9e8      	cbnz	r0, 17438 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
   173fc:	b91e      	cbnz	r6, 17406 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   173fe:	4638      	mov	r0, r7
}
   17400:	b006      	add	sp, #24
   17402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   17406:	4649      	mov	r1, r9
   17408:	f7ff fbcc 	bl	16ba4 <find_ccc_cfg>
		if (!cfg) {
   1740c:	4604      	mov	r4, r0
   1740e:	b960      	cbnz	r0, 1742a <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   17410:	4b2e      	ldr	r3, [pc, #184]	; (174cc <bt_gatt_attr_write_ccc+0x100>)
   17412:	482f      	ldr	r0, [pc, #188]	; (174d0 <bt_gatt_attr_write_ccc+0x104>)
   17414:	9305      	str	r3, [sp, #20]
   17416:	2302      	movs	r3, #2
   17418:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1741c:	aa04      	add	r2, sp, #16
   1741e:	9304      	str	r3, [sp, #16]
   17420:	f012 f8c5 	bl	295ae <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17424:	f06f 0010 	mvn.w	r0, #16
   17428:	e7ea      	b.n	17400 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1742a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1742e:	3001      	adds	r0, #1
   17430:	f012 f829 	bl	29486 <bt_addr_le_copy>
		cfg->id = conn->id;
   17434:	7a2b      	ldrb	r3, [r5, #8]
   17436:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17438:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1743c:	bba3      	cbnz	r3, 174a8 <bt_gatt_attr_write_ccc+0xdc>
	value_changed = cfg->value != value;
   1743e:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   17442:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   17444:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   17448:	42b3      	cmp	r3, r6
   1744a:	d003      	beq.n	17454 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   1744c:	4649      	mov	r1, r9
   1744e:	4640      	mov	r0, r8
   17450:	f011 ff75 	bl	2933e <gatt_ccc_changed>
	if (value_changed) {
   17454:	45b2      	cmp	sl, r6
   17456:	d01e      	beq.n	17496 <bt_gatt_attr_write_ccc+0xca>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   17458:	4628      	mov	r0, r5
   1745a:	f7fd fc9f 	bl	14d9c <bt_conn_index>
   1745e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 174d4 <bt_gatt_attr_write_ccc+0x108>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17462:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   17466:	429d      	cmp	r5, r3
   17468:	d015      	beq.n	17496 <bt_gatt_attr_write_ccc+0xca>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1746a:	7a28      	ldrb	r0, [r5, #8]
   1746c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17470:	f010 ff9b 	bl	283aa <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17474:	b178      	cbz	r0, 17496 <bt_gatt_attr_write_ccc+0xca>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   17476:	4628      	mov	r0, r5
   17478:	f7fd fc90 	bl	14d9c <bt_conn_index>
   1747c:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1747e:	4628      	mov	r0, r5
   17480:	f7fd fb38 	bl	14af4 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   17484:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   17488:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1748c:	2300      	movs	r3, #0
   1748e:	f108 0008 	add.w	r0, r8, #8
   17492:	f00a ffbd 	bl	22410 <k_work_reschedule>
	if (!value) {
   17496:	2e00      	cmp	r6, #0
   17498:	d1b1      	bne.n	173fe <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1749a:	490f      	ldr	r1, [pc, #60]	; (174d8 <bt_gatt_attr_write_ccc+0x10c>)
   1749c:	1c60      	adds	r0, r4, #1
   1749e:	f011 fff2 	bl	29486 <bt_addr_le_copy>
	cfg->id = 0U;
   174a2:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   174a4:	8126      	strh	r6, [r4, #8]
}
   174a6:	e7aa      	b.n	173fe <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   174a8:	4632      	mov	r2, r6
   174aa:	4641      	mov	r1, r8
   174ac:	4628      	mov	r0, r5
   174ae:	4798      	blx	r3
		if (write < 0) {
   174b0:	2800      	cmp	r0, #0
   174b2:	dba5      	blt.n	17400 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   174b4:	3801      	subs	r0, #1
   174b6:	2801      	cmp	r0, #1
   174b8:	d9c1      	bls.n	1743e <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   174ba:	f06f 000d 	mvn.w	r0, #13
   174be:	e79f      	b.n	17400 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   174c0:	f06f 0006 	mvn.w	r0, #6
   174c4:	e79c      	b.n	17400 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   174c6:	f06f 000c 	mvn.w	r0, #12
   174ca:	e799      	b.n	17400 <bt_gatt_attr_write_ccc+0x34>
   174cc:	00030fdb 	.word	0x00030fdb
   174d0:	0002c804 	.word	0x0002c804
   174d4:	20009f50 	.word	0x20009f50
   174d8:	0002f895 	.word	0x0002f895

000174dc <sc_commit>:
{
   174dc:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   174de:	f06f 0102 	mvn.w	r1, #2
   174e2:	4808      	ldr	r0, [pc, #32]	; (17504 <sc_commit+0x28>)
   174e4:	f011 ffc4 	bl	29470 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   174e8:	4806      	ldr	r0, [pc, #24]	; (17504 <sc_commit+0x28>)
   174ea:	f011 ffb3 	bl	29454 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   174ee:	07c3      	lsls	r3, r0, #31
   174f0:	d505      	bpl.n	174fe <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   174f2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   174f6:	2300      	movs	r3, #0
   174f8:	4803      	ldr	r0, [pc, #12]	; (17508 <sc_commit+0x2c>)
   174fa:	f00a ff89 	bl	22410 <k_work_reschedule>
}
   174fe:	2000      	movs	r0, #0
   17500:	bd08      	pop	{r3, pc}
   17502:	bf00      	nop
   17504:	2000a050 	.word	0x2000a050
   17508:	2000a020 	.word	0x2000a020

0001750c <sc_indicate_rsp>:
{
   1750c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1750e:	f06f 0102 	mvn.w	r1, #2
   17512:	4604      	mov	r4, r0
   17514:	480f      	ldr	r0, [pc, #60]	; (17554 <sc_indicate_rsp+0x48>)
   17516:	f011 ffab 	bl	29470 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1751a:	480e      	ldr	r0, [pc, #56]	; (17554 <sc_indicate_rsp+0x48>)
   1751c:	f011 ff9a 	bl	29454 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17520:	07c2      	lsls	r2, r0, #31
   17522:	d504      	bpl.n	1752e <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   17524:	2200      	movs	r2, #0
   17526:	2300      	movs	r3, #0
   17528:	480b      	ldr	r0, [pc, #44]	; (17558 <sc_indicate_rsp+0x4c>)
   1752a:	f00a ff71 	bl	22410 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1752e:	4620      	mov	r0, r4
   17530:	f011 fed8 	bl	292e4 <bt_att_fixed_chan_only>
   17534:	b160      	cbz	r0, 17550 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   17536:	4620      	mov	r0, r4
   17538:	f7ff fae4 	bl	16b04 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1753c:	b140      	cbz	r0, 17550 <sc_indicate_rsp+0x44>
   1753e:	7a03      	ldrb	r3, [r0, #8]
   17540:	07db      	lsls	r3, r3, #31
   17542:	d505      	bpl.n	17550 <sc_indicate_rsp+0x44>
}
   17544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17548:	2101      	movs	r1, #1
   1754a:	300c      	adds	r0, #12
   1754c:	f011 bf85 	b.w	2945a <atomic_or>
   17550:	bd10      	pop	{r4, pc}
   17552:	bf00      	nop
   17554:	2000a050 	.word	0x2000a050
   17558:	2000a020 	.word	0x2000a020

0001755c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1755c:	2201      	movs	r2, #1
{
   1755e:	b510      	push	{r4, lr}
   17560:	4b28      	ldr	r3, [pc, #160]	; (17604 <bt_gatt_init+0xa8>)
   17562:	e8d3 1fef 	ldaex	r1, [r3]
   17566:	2900      	cmp	r1, #0
   17568:	d103      	bne.n	17572 <bt_gatt_init+0x16>
   1756a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1756e:	2800      	cmp	r0, #0
   17570:	d1f7      	bne.n	17562 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   17572:	d146      	bne.n	17602 <bt_gatt_init+0xa6>
   17574:	4b24      	ldr	r3, [pc, #144]	; (17608 <bt_gatt_init+0xac>)
   17576:	e8d3 1fef 	ldaex	r1, [r3]
   1757a:	2900      	cmp	r1, #0
   1757c:	d103      	bne.n	17586 <bt_gatt_init+0x2a>
   1757e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17582:	2800      	cmp	r0, #0
   17584:	d1f7      	bne.n	17576 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   17586:	d120      	bne.n	175ca <bt_gatt_init+0x6e>
   17588:	2000      	movs	r0, #0
   1758a:	4920      	ldr	r1, [pc, #128]	; (1760c <bt_gatt_init+0xb0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1758c:	4a20      	ldr	r2, [pc, #128]	; (17610 <bt_gatt_init+0xb4>)
   1758e:	880b      	ldrh	r3, [r1, #0]
   17590:	4c20      	ldr	r4, [pc, #128]	; (17614 <bt_gatt_init+0xb8>)
   17592:	42a2      	cmp	r2, r4
   17594:	d916      	bls.n	175c4 <bt_gatt_init+0x68>
   17596:	b100      	cbz	r0, 1759a <bt_gatt_init+0x3e>
   17598:	800b      	strh	r3, [r1, #0]
   1759a:	491f      	ldr	r1, [pc, #124]	; (17618 <bt_gatt_init+0xbc>)
   1759c:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   175a0:	4a1e      	ldr	r2, [pc, #120]	; (1761c <bt_gatt_init+0xc0>)
   175a2:	481f      	ldr	r0, [pc, #124]	; (17620 <bt_gatt_init+0xc4>)
   175a4:	f00f f9bd 	bl	26922 <assert_print>
   175a8:	481e      	ldr	r0, [pc, #120]	; (17624 <bt_gatt_init+0xc8>)
   175aa:	f00f f9ba 	bl	26922 <assert_print>
   175ae:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   175b2:	481a      	ldr	r0, [pc, #104]	; (1761c <bt_gatt_init+0xc0>)
   175b4:	f00f f9ae 	bl	26914 <assert_post_action>
		last_static_handle += svc->attr_count;
   175b8:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   175ba:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   175bc:	4403      	add	r3, r0
   175be:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   175c0:	2001      	movs	r0, #1
   175c2:	e7e6      	b.n	17592 <bt_gatt_init+0x36>
   175c4:	d3f8      	bcc.n	175b8 <bt_gatt_init+0x5c>
   175c6:	b100      	cbz	r0, 175ca <bt_gatt_init+0x6e>
   175c8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   175ca:	2200      	movs	r2, #0
   175cc:	4b16      	ldr	r3, [pc, #88]	; (17628 <bt_gatt_init+0xcc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   175ce:	4917      	ldr	r1, [pc, #92]	; (1762c <bt_gatt_init+0xd0>)
   175d0:	4817      	ldr	r0, [pc, #92]	; (17630 <bt_gatt_init+0xd4>)
	list->tail = NULL;
   175d2:	e9c3 2200 	strd	r2, r2, [r3]
   175d6:	f00a fdff 	bl	221d8 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   175da:	f44f 72a4 	mov.w	r2, #328	; 0x148
   175de:	2300      	movs	r3, #0
   175e0:	4813      	ldr	r0, [pc, #76]	; (17630 <bt_gatt_init+0xd4>)
   175e2:	f7fa fa6d 	bl	11ac0 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   175e6:	4913      	ldr	r1, [pc, #76]	; (17634 <bt_gatt_init+0xd8>)
   175e8:	4813      	ldr	r0, [pc, #76]	; (17638 <bt_gatt_init+0xdc>)
   175ea:	f00a fdf5 	bl	221d8 <k_work_init_delayable>
   175ee:	2102      	movs	r1, #2
   175f0:	4812      	ldr	r0, [pc, #72]	; (1763c <bt_gatt_init+0xe0>)
   175f2:	f011 ff32 	bl	2945a <atomic_or>
}
   175f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   175fa:	4911      	ldr	r1, [pc, #68]	; (17640 <bt_gatt_init+0xe4>)
   175fc:	4811      	ldr	r0, [pc, #68]	; (17644 <bt_gatt_init+0xe8>)
   175fe:	f00a bdeb 	b.w	221d8 <k_work_init_delayable>
}
   17602:	bd10      	pop	{r4, pc}
   17604:	200217fc 	.word	0x200217fc
   17608:	200217f8 	.word	0x200217f8
   1760c:	20021bfc 	.word	0x20021bfc
   17610:	0002c794 	.word	0x0002c794
   17614:	0002c7ac 	.word	0x0002c7ac
   17618:	0003102c 	.word	0x0003102c
   1761c:	00030ff5 	.word	0x00030ff5
   17620:	0002d881 	.word	0x0002d881
   17624:	0002e9b9 	.word	0x0002e9b9
   17628:	20021800 	.word	0x20021800
   1762c:	000178b5 	.word	0x000178b5
   17630:	20009fa8 	.word	0x20009fa8
   17634:	00017e99 	.word	0x00017e99
   17638:	2000a020 	.word	0x2000a020
   1763c:	2000a050 	.word	0x2000a050
   17640:	00029783 	.word	0x00029783
   17644:	20009f58 	.word	0x20009f58

00017648 <bt_gatt_attr_get_handle>:
	if (!attr) {
   17648:	4603      	mov	r3, r0
{
   1764a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1764e:	b398      	cbz	r0, 176b8 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   17650:	8a00      	ldrh	r0, [r0, #16]
   17652:	bb88      	cbnz	r0, 176b8 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   17654:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17656:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1765a:	4919      	ldr	r1, [pc, #100]	; (176c0 <bt_gatt_attr_get_handle+0x78>)
   1765c:	f8df e064 	ldr.w	lr, [pc, #100]	; 176c4 <bt_gatt_attr_get_handle+0x7c>
   17660:	4571      	cmp	r1, lr
   17662:	d928      	bls.n	176b6 <bt_gatt_attr_get_handle+0x6e>
   17664:	4918      	ldr	r1, [pc, #96]	; (176c8 <bt_gatt_attr_get_handle+0x80>)
   17666:	f240 635d 	movw	r3, #1629	; 0x65d
   1766a:	4a18      	ldr	r2, [pc, #96]	; (176cc <bt_gatt_attr_get_handle+0x84>)
   1766c:	4818      	ldr	r0, [pc, #96]	; (176d0 <bt_gatt_attr_get_handle+0x88>)
   1766e:	f00f f958 	bl	26922 <assert_print>
   17672:	4818      	ldr	r0, [pc, #96]	; (176d4 <bt_gatt_attr_get_handle+0x8c>)
   17674:	f00f f955 	bl	26922 <assert_print>
   17678:	f240 615d 	movw	r1, #1629	; 0x65d
   1767c:	4813      	ldr	r0, [pc, #76]	; (176cc <bt_gatt_attr_get_handle+0x84>)
   1767e:	f00f f949 	bl	26914 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17682:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   17686:	42bb      	cmp	r3, r7
   17688:	d304      	bcc.n	17694 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1768a:	fb0c 7206 	mla	r2, ip, r6, r7
   1768e:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17690:	4293      	cmp	r3, r2
   17692:	d90e      	bls.n	176b2 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   17694:	4434      	add	r4, r6
   17696:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17698:	4614      	mov	r4, r2
   1769a:	3108      	adds	r1, #8
   1769c:	e7e0      	b.n	17660 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1769e:	fb0c 7805 	mla	r8, ip, r5, r7
   176a2:	4543      	cmp	r3, r8
   176a4:	d00a      	beq.n	176bc <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   176a6:	3501      	adds	r5, #1
   176a8:	1962      	adds	r2, r4, r5
   176aa:	42b5      	cmp	r5, r6
   176ac:	b292      	uxth	r2, r2
   176ae:	d1f6      	bne.n	1769e <bt_gatt_attr_get_handle+0x56>
   176b0:	e7f2      	b.n	17698 <bt_gatt_attr_get_handle+0x50>
   176b2:	2500      	movs	r5, #0
   176b4:	e7f8      	b.n	176a8 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   176b6:	d3e4      	bcc.n	17682 <bt_gatt_attr_get_handle+0x3a>
}
   176b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176bc:	4610      	mov	r0, r2
   176be:	e7fb      	b.n	176b8 <bt_gatt_attr_get_handle+0x70>
   176c0:	0002c794 	.word	0x0002c794
   176c4:	0002c7ac 	.word	0x0002c7ac
   176c8:	00031025 	.word	0x00031025
   176cc:	00030ff5 	.word	0x00030ff5
   176d0:	0002d881 	.word	0x0002d881
   176d4:	0002e9b9 	.word	0x0002e9b9

000176d8 <bt_gatt_foreach_attr_type>:
{
   176d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176dc:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   176de:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   176e2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   176e6:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   176e8:	2d00      	cmp	r5, #0
   176ea:	bf08      	it	eq
   176ec:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   176ee:	4b2b      	ldr	r3, [pc, #172]	; (1779c <bt_gatt_foreach_attr_type+0xc4>)
{
   176f0:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   176f2:	881b      	ldrh	r3, [r3, #0]
{
   176f4:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   176f6:	4283      	cmp	r3, r0
   176f8:	d232      	bcs.n	17760 <bt_gatt_foreach_attr_type+0x88>
}
   176fa:	b003      	add	sp, #12
   176fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17700:	4640      	mov	r0, r8
   17702:	5889      	ldr	r1, [r1, r2]
   17704:	9301      	str	r3, [sp, #4]
   17706:	f010 fcf4 	bl	280f2 <bt_uuid_cmp>
   1770a:	9b01      	ldr	r3, [sp, #4]
   1770c:	b190      	cbz	r0, 17734 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1770e:	3401      	adds	r4, #1
   17710:	f10a 0a01 	add.w	sl, sl, #1
   17714:	b2a4      	uxth	r4, r4
   17716:	6873      	ldr	r3, [r6, #4]
   17718:	4553      	cmp	r3, sl
   1771a:	d92c      	bls.n	17776 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   1771c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1771e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   17720:	429c      	cmp	r4, r3
   17722:	d8ea      	bhi.n	176fa <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17724:	42bc      	cmp	r4, r7
   17726:	d3f2      	bcc.n	1770e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17728:	fb0b f20a 	mul.w	r2, fp, sl
   1772c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1772e:	f1b8 0f00 	cmp.w	r8, #0
   17732:	d1e5      	bne.n	17700 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   17734:	f1b9 0f00 	cmp.w	r9, #0
   17738:	d10b      	bne.n	17752 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1773a:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1773c:	4618      	mov	r0, r3
	*num_matches -= 1;
   1773e:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17740:	4621      	mov	r1, r4
   17742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17746:	4798      	blx	r3
	if (!*num_matches) {
   17748:	2d00      	cmp	r5, #0
   1774a:	d0d6      	beq.n	176fa <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1774c:	2800      	cmp	r0, #0
   1774e:	d1de      	bne.n	1770e <bt_gatt_foreach_attr_type+0x36>
   17750:	e7d3      	b.n	176fa <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17752:	68da      	ldr	r2, [r3, #12]
   17754:	4591      	cmp	r9, r2
   17756:	d1da      	bne.n	1770e <bt_gatt_foreach_attr_type+0x36>
   17758:	e7ef      	b.n	1773a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1775a:	f04f 0a00 	mov.w	sl, #0
   1775e:	e7da      	b.n	17716 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   17760:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17762:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17766:	4e0e      	ldr	r6, [pc, #56]	; (177a0 <bt_gatt_foreach_attr_type+0xc8>)
   17768:	e006      	b.n	17778 <bt_gatt_foreach_attr_type+0xa0>
   1776a:	d2c6      	bcs.n	176fa <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1776c:	6873      	ldr	r3, [r6, #4]
   1776e:	4423      	add	r3, r4
   17770:	42bb      	cmp	r3, r7
   17772:	d2f2      	bcs.n	1775a <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   17774:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17776:	3608      	adds	r6, #8
   17778:	4b0a      	ldr	r3, [pc, #40]	; (177a4 <bt_gatt_foreach_attr_type+0xcc>)
   1777a:	429e      	cmp	r6, r3
   1777c:	d9f5      	bls.n	1776a <bt_gatt_foreach_attr_type+0x92>
   1777e:	490a      	ldr	r1, [pc, #40]	; (177a8 <bt_gatt_foreach_attr_type+0xd0>)
   17780:	f240 7321 	movw	r3, #1825	; 0x721
   17784:	4a09      	ldr	r2, [pc, #36]	; (177ac <bt_gatt_foreach_attr_type+0xd4>)
   17786:	480a      	ldr	r0, [pc, #40]	; (177b0 <bt_gatt_foreach_attr_type+0xd8>)
   17788:	f00f f8cb 	bl	26922 <assert_print>
   1778c:	4809      	ldr	r0, [pc, #36]	; (177b4 <bt_gatt_foreach_attr_type+0xdc>)
   1778e:	f00f f8c8 	bl	26922 <assert_print>
   17792:	f240 7121 	movw	r1, #1825	; 0x721
   17796:	4805      	ldr	r0, [pc, #20]	; (177ac <bt_gatt_foreach_attr_type+0xd4>)
   17798:	f00f f8bc 	bl	26914 <assert_post_action>
   1779c:	20021bfc 	.word	0x20021bfc
   177a0:	0002c794 	.word	0x0002c794
   177a4:	0002c7ac 	.word	0x0002c7ac
   177a8:	00031025 	.word	0x00031025
   177ac:	00030ff5 	.word	0x00030ff5
   177b0:	0002d881 	.word	0x0002d881
   177b4:	0002e9b9 	.word	0x0002e9b9

000177b8 <db_hash_gen>:
{
   177b8:	b530      	push	{r4, r5, lr}
	uint8_t key[16] = {};
   177ba:	2400      	movs	r4, #0
{
   177bc:	b0cf      	sub	sp, #316	; 0x13c
   177be:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   177c0:	4669      	mov	r1, sp
   177c2:	aa22      	add	r2, sp, #136	; 0x88
   177c4:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   177c6:	e9cd 4400 	strd	r4, r4, [sp]
   177ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   177ce:	f010 f8f7 	bl	279c0 <tc_cmac_setup>
   177d2:	b958      	cbnz	r0, 177ec <db_hash_gen+0x34>
		LOG_ERR("Unable to setup AES CMAC");
   177d4:	4b16      	ldr	r3, [pc, #88]	; (17830 <db_hash_gen+0x78>)
		LOG_ERR("Unable to calculate hash");
   177d6:	9309      	str	r3, [sp, #36]	; 0x24
   177d8:	2302      	movs	r3, #2
   177da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   177de:	4815      	ldr	r0, [pc, #84]	; (17834 <db_hash_gen+0x7c>)
   177e0:	aa08      	add	r2, sp, #32
   177e2:	9308      	str	r3, [sp, #32]
   177e4:	f011 fee3 	bl	295ae <z_log_msg_static_create.constprop.0>
}
   177e8:	b04f      	add	sp, #316	; 0x13c
   177ea:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   177ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   177f0:	2001      	movs	r0, #1
   177f2:	4a11      	ldr	r2, [pc, #68]	; (17838 <db_hash_gen+0x80>)
   177f4:	ab0a      	add	r3, sp, #40	; 0x28
   177f6:	f011 ff51 	bl	2969c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   177fa:	4810      	ldr	r0, [pc, #64]	; (1783c <db_hash_gen+0x84>)
   177fc:	a90a      	add	r1, sp, #40	; 0x28
   177fe:	f010 f974 	bl	27aea <tc_cmac_final>
   17802:	b908      	cbnz	r0, 17808 <db_hash_gen+0x50>
		LOG_ERR("Unable to calculate hash");
   17804:	4b0e      	ldr	r3, [pc, #56]	; (17840 <db_hash_gen+0x88>)
   17806:	e7e6      	b.n	177d6 <db_hash_gen+0x1e>
   17808:	4b0c      	ldr	r3, [pc, #48]	; (1783c <db_hash_gen+0x84>)
   1780a:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1780e:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17810:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   17814:	3401      	adds	r4, #1
   17816:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17818:	f803 0b01 	strb.w	r0, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1781c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1781e:	d1f6      	bne.n	1780e <db_hash_gen+0x56>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   17820:	b10d      	cbz	r5, 17826 <db_hash_gen+0x6e>
		db_hash_store();
   17822:	f7ff fc5d 	bl	170e0 <db_hash_store>
   17826:	2104      	movs	r1, #4
   17828:	4806      	ldr	r0, [pc, #24]	; (17844 <db_hash_gen+0x8c>)
   1782a:	f011 fe16 	bl	2945a <atomic_or>
   1782e:	e7db      	b.n	177e8 <db_hash_gen+0x30>
   17830:	00031054 	.word	0x00031054
   17834:	0002c804 	.word	0x0002c804
   17838:	00029385 	.word	0x00029385
   1783c:	20009f88 	.word	0x20009f88
   17840:	0003106d 	.word	0x0003106d
   17844:	2000a050 	.word	0x2000a050

00017848 <db_hash_read>:
{
   17848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1784c:	4916      	ldr	r1, [pc, #88]	; (178a8 <db_hash_read+0x60>)
{
   1784e:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17850:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17854:	4615      	mov	r5, r2
   17856:	461e      	mov	r6, r3
   17858:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1785c:	f00a fe38 	bl	224d0 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17860:	4812      	ldr	r0, [pc, #72]	; (178ac <db_hash_read+0x64>)
   17862:	f011 fdf7 	bl	29454 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17866:	0741      	lsls	r1, r0, #29
   17868:	d402      	bmi.n	17870 <db_hash_read+0x28>
		db_hash_gen(true);
   1786a:	2001      	movs	r0, #1
   1786c:	f7ff ffa4 	bl	177b8 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   17870:	4620      	mov	r0, r4
   17872:	f7ff f947 	bl	16b04 <find_cf_cfg>
	if (cfg &&
   17876:	b168      	cbz	r0, 17894 <db_hash_read+0x4c>
   17878:	7a03      	ldrb	r3, [r0, #8]
   1787a:	07da      	lsls	r2, r3, #31
   1787c:	d50a      	bpl.n	17894 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1787e:	f100 040c 	add.w	r4, r0, #12
   17882:	4620      	mov	r0, r4
   17884:	f011 fde6 	bl	29454 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   17888:	07c3      	lsls	r3, r0, #31
   1788a:	d403      	bmi.n	17894 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1788c:	2102      	movs	r1, #2
   1788e:	4620      	mov	r0, r4
   17890:	f011 fde3 	bl	2945a <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17894:	2310      	movs	r3, #16
   17896:	463a      	mov	r2, r7
   17898:	9306      	str	r3, [sp, #24]
   1789a:	4631      	mov	r1, r6
   1789c:	4628      	mov	r0, r5
}
   1789e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   178a2:	4b03      	ldr	r3, [pc, #12]	; (178b0 <db_hash_read+0x68>)
   178a4:	f011 bdfb 	b.w	2949e <bt_gatt_attr_read.constprop.0>
   178a8:	20009fd8 	.word	0x20009fd8
   178ac:	2000a050 	.word	0x2000a050
   178b0:	20009f88 	.word	0x20009f88

000178b4 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178b4:	f06f 0108 	mvn.w	r1, #8
{
   178b8:	b508      	push	{r3, lr}
   178ba:	4826      	ldr	r0, [pc, #152]	; (17954 <db_hash_process+0xa0>)
   178bc:	f011 fdd8 	bl	29470 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   178c0:	0701      	lsls	r1, r0, #28
   178c2:	d542      	bpl.n	1794a <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   178c4:	4823      	ldr	r0, [pc, #140]	; (17954 <db_hash_process+0xa0>)
   178c6:	f011 fdc5 	bl	29454 <atomic_get>
   178ca:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   178cc:	075a      	lsls	r2, r3, #29
   178ce:	f3c0 0080 	ubfx	r0, r0, #2, #1
   178d2:	d401      	bmi.n	178d8 <db_hash_process+0x24>
			db_hash_gen(false);
   178d4:	f7ff ff70 	bl	177b8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   178d8:	2210      	movs	r2, #16
   178da:	491f      	ldr	r1, [pc, #124]	; (17958 <db_hash_process+0xa4>)
   178dc:	1888      	adds	r0, r1, r2
   178de:	f014 f815 	bl	2b90c <memcmp>
   178e2:	b948      	cbnz	r0, 178f8 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   178e4:	481d      	ldr	r0, [pc, #116]	; (1795c <db_hash_process+0xa8>)
   178e6:	f00a fd99 	bl	2241c <k_work_cancel_delayable>
}
   178ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178ee:	f06f 0101 	mvn.w	r1, #1
   178f2:	4818      	ldr	r0, [pc, #96]	; (17954 <db_hash_process+0xa0>)
   178f4:	f011 bdbc 	b.w	29470 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   178f8:	2101      	movs	r1, #1
   178fa:	4816      	ldr	r0, [pc, #88]	; (17954 <db_hash_process+0xa0>)
   178fc:	f011 fdad 	bl	2945a <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17900:	f010 0f01 	tst.w	r0, #1
   17904:	4b16      	ldr	r3, [pc, #88]	; (17960 <db_hash_process+0xac>)
   17906:	d110      	bne.n	1792a <db_hash_process+0x76>
		gatt_sc.start = start;
   17908:	4a16      	ldr	r2, [pc, #88]	; (17964 <db_hash_process+0xb0>)
   1790a:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1790c:	4811      	ldr	r0, [pc, #68]	; (17954 <db_hash_process+0xa0>)
   1790e:	f011 fda1 	bl	29454 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   17912:	0783      	lsls	r3, r0, #30
   17914:	d405      	bmi.n	17922 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   17916:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1791a:	2300      	movs	r3, #0
   1791c:	480f      	ldr	r0, [pc, #60]	; (1795c <db_hash_process+0xa8>)
   1791e:	f00a fd77 	bl	22410 <k_work_reschedule>
}
   17922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   17926:	f7ff bbdb 	b.w	170e0 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1792a:	8b1a      	ldrh	r2, [r3, #24]
   1792c:	8b58      	ldrh	r0, [r3, #26]
   1792e:	2a01      	cmp	r2, #1
   17930:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17934:	d805      	bhi.n	17942 <db_hash_process+0x8e>
   17936:	4290      	cmp	r0, r2
   17938:	d0f3      	beq.n	17922 <db_hash_process+0x6e>
		*end = new_end;
   1793a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1793e:	835a      	strh	r2, [r3, #26]
   17940:	e7e4      	b.n	1790c <db_hash_process+0x58>
	if (*end < new_end) {
   17942:	4290      	cmp	r0, r2
		*start = new_start;
   17944:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   17946:	d0e1      	beq.n	1790c <db_hash_process+0x58>
   17948:	e7f7      	b.n	1793a <db_hash_process+0x86>
	db_hash_gen(true);
   1794a:	2001      	movs	r0, #1
}
   1794c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   17950:	f7ff bf32 	b.w	177b8 <db_hash_gen>
   17954:	2000a050 	.word	0x2000a050
   17958:	20009f88 	.word	0x20009f88
   1795c:	2000a020 	.word	0x2000a020
   17960:	2000a000 	.word	0x2000a000
   17964:	ffff0001 	.word	0xffff0001

00017968 <ccc_set_direct>:
{
   17968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1796c:	b0b8      	sub	sp, #224	; 0xe0
   1796e:	af00      	add	r7, sp, #0
   17970:	460c      	mov	r4, r1
   17972:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17974:	493f      	ldr	r1, [pc, #252]	; (17a74 <ccc_set_direct+0x10c>)
   17976:	463a      	mov	r2, r7
   17978:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
{
   1797c:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1797e:	f00f fdcc 	bl	2751a <settings_name_steq>
   17982:	b938      	cbnz	r0, 17994 <ccc_set_direct+0x2c>
   17984:	f7ff f99e 	bl	16cc4 <ccc_set_direct.part.0>
   17988:	4605      	mov	r5, r0
}
   1798a:	4628      	mov	r0, r5
   1798c:	37e0      	adds	r7, #224	; 0xe0
   1798e:	46bd      	mov	sp, r7
   17990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   17994:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   17996:	1d39      	adds	r1, r7, #4
   17998:	4630      	mov	r0, r6
   1799a:	f00f fde2 	bl	27562 <settings_name_next>
		if (!name) {
   1799e:	b96e      	cbnz	r6, 179bc <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   179a0:	4b35      	ldr	r3, [pc, #212]	; (17a78 <ccc_set_direct+0x110>)
   179a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   179a6:	637b      	str	r3, [r7, #52]	; 0x34
   179a8:	2302      	movs	r3, #2
   179aa:	4834      	ldr	r0, [pc, #208]	; (17a7c <ccc_set_direct+0x114>)
   179ac:	633b      	str	r3, [r7, #48]	; 0x30
   179ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
   179b2:	f011 fdfc 	bl	295ae <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   179b6:	f06f 0415 	mvn.w	r4, #21
   179ba:	e049      	b.n	17a50 <ccc_set_direct+0xe8>
		} else if (!next) {
   179bc:	6878      	ldr	r0, [r7, #4]
   179be:	b9c0      	cbnz	r0, 179f2 <ccc_set_direct+0x8a>
			load.addr_with_id.id = BT_ID_DEFAULT;
   179c0:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   179c2:	f107 0a08 	add.w	sl, r7, #8
   179c6:	4651      	mov	r1, sl
   179c8:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   179ca:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   179cc:	f010 fb6d 	bl	280aa <bt_settings_decode_key>
		if (err) {
   179d0:	4605      	mov	r5, r0
   179d2:	b320      	cbz	r0, 17a1e <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   179d4:	466c      	mov	r4, sp
   179d6:	b088      	sub	sp, #32
   179d8:	466a      	mov	r2, sp
   179da:	4b29      	ldr	r3, [pc, #164]	; (17a80 <ccc_set_direct+0x118>)
   179dc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   179e0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   179e4:	f44f 7300 	mov.w	r3, #512	; 0x200
   179e8:	8393      	strh	r3, [r2, #28]
   179ea:	4b26      	ldr	r3, [pc, #152]	; (17a84 <ccc_set_direct+0x11c>)
   179ec:	f842 3f10 	str.w	r3, [r2, #16]!
   179f0:	e010      	b.n	17a14 <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   179f2:	220a      	movs	r2, #10
   179f4:	2100      	movs	r1, #0
   179f6:	f00d fc4b 	bl	25290 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   179fa:	2800      	cmp	r0, #0
   179fc:	d0e0      	beq.n	179c0 <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   179fe:	466c      	mov	r4, sp
   17a00:	b088      	sub	sp, #32
   17a02:	466a      	mov	r2, sp
   17a04:	4b20      	ldr	r3, [pc, #128]	; (17a88 <ccc_set_direct+0x120>)
   17a06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17a0a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17a0e:	2303      	movs	r3, #3
   17a10:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Unable to decode address %s", name);
   17a14:	4819      	ldr	r0, [pc, #100]	; (17a7c <ccc_set_direct+0x114>)
   17a16:	f011 fdca 	bl	295ae <z_log_msg_static_create.constprop.0>
   17a1a:	46a5      	mov	sp, r4
			return -EINVAL;
   17a1c:	e7cb      	b.n	179b6 <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   17a1e:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   17a22:	b32c      	cbz	r4, 17a70 <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   17a24:	22c0      	movs	r2, #192	; 0xc0
   17a26:	4648      	mov	r0, r9
   17a28:	f107 0120 	add.w	r1, r7, #32
   17a2c:	47c0      	blx	r8
			if (len < 0) {
   17a2e:	1e04      	subs	r4, r0, #0
   17a30:	da10      	bge.n	17a54 <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   17a32:	466d      	mov	r5, sp
   17a34:	b088      	sub	sp, #32
   17a36:	466a      	mov	r2, sp
   17a38:	4b14      	ldr	r3, [pc, #80]	; (17a8c <ccc_set_direct+0x124>)
   17a3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17a3e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17a42:	2303      	movs	r3, #3
   17a44:	480d      	ldr	r0, [pc, #52]	; (17a7c <ccc_set_direct+0x114>)
   17a46:	f842 3f10 	str.w	r3, [r2, #16]!
   17a4a:	f011 fdb0 	bl	295ae <z_log_msg_static_create.constprop.0>
   17a4e:	46ad      	mov	sp, r5
			return -EINVAL;
   17a50:	4625      	mov	r5, r4
   17a52:	e79a      	b.n	1798a <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   17a54:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   17a56:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   17a5a:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   17a5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17a62:	2001      	movs	r0, #1
   17a64:	4a0a      	ldr	r2, [pc, #40]	; (17a90 <ccc_set_direct+0x128>)
   17a66:	f107 0310 	add.w	r3, r7, #16
   17a6a:	f011 fe17 	bl	2969c <bt_gatt_foreach_attr>
	return 0;
   17a6e:	e78c      	b.n	1798a <ccc_set_direct+0x22>
   17a70:	4623      	mov	r3, r4
   17a72:	e7f2      	b.n	17a5a <ccc_set_direct+0xf2>
   17a74:	00031086 	.word	0x00031086
   17a78:	0002f8eb 	.word	0x0002f8eb
   17a7c:	0002c804 	.word	0x0002c804
   17a80:	00030e77 	.word	0x00030e77
   17a84:	01000003 	.word	0x01000003
   17a88:	00030e93 	.word	0x00030e93
   17a8c:	00030ed0 	.word	0x00030ed0
   17a90:	00016c11 	.word	0x00016c11

00017a94 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   17a94:	2300      	movs	r3, #0
{
   17a96:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   17a98:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   17a9a:	f7ff fdd5 	bl	17648 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   17a9e:	1c41      	adds	r1, r0, #1
   17aa0:	b289      	uxth	r1, r1
   17aa2:	4608      	mov	r0, r1
   17aa4:	4a03      	ldr	r2, [pc, #12]	; (17ab4 <bt_gatt_attr_next+0x20>)
   17aa6:	ab01      	add	r3, sp, #4
   17aa8:	f011 fdf8 	bl	2969c <bt_gatt_foreach_attr>
}
   17aac:	9801      	ldr	r0, [sp, #4]
   17aae:	b003      	add	sp, #12
   17ab0:	f85d fb04 	ldr.w	pc, [sp], #4
   17ab4:	00029339 	.word	0x00029339

00017ab8 <bt_gatt_is_subscribed>:
{
   17ab8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17abc:	460c      	mov	r4, r1
   17abe:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   17ac0:	4605      	mov	r5, r0
   17ac2:	b970      	cbnz	r0, 17ae2 <bt_gatt_is_subscribed+0x2a>
   17ac4:	495b      	ldr	r1, [pc, #364]	; (17c34 <bt_gatt_is_subscribed+0x17c>)
   17ac6:	f640 434d 	movw	r3, #3149	; 0xc4d
   17aca:	4a5b      	ldr	r2, [pc, #364]	; (17c38 <bt_gatt_is_subscribed+0x180>)
   17acc:	485b      	ldr	r0, [pc, #364]	; (17c3c <bt_gatt_is_subscribed+0x184>)
   17ace:	f00e ff28 	bl	26922 <assert_print>
   17ad2:	485b      	ldr	r0, [pc, #364]	; (17c40 <bt_gatt_is_subscribed+0x188>)
   17ad4:	f00e ff25 	bl	26922 <assert_print>
   17ad8:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   17adc:	4856      	ldr	r0, [pc, #344]	; (17c38 <bt_gatt_is_subscribed+0x180>)
   17ade:	f00e ff19 	bl	26914 <assert_post_action>
   17ae2:	b961      	cbnz	r1, 17afe <bt_gatt_is_subscribed+0x46>
   17ae4:	4957      	ldr	r1, [pc, #348]	; (17c44 <bt_gatt_is_subscribed+0x18c>)
   17ae6:	f640 434e 	movw	r3, #3150	; 0xc4e
   17aea:	4a53      	ldr	r2, [pc, #332]	; (17c38 <bt_gatt_is_subscribed+0x180>)
   17aec:	4853      	ldr	r0, [pc, #332]	; (17c3c <bt_gatt_is_subscribed+0x184>)
   17aee:	f00e ff18 	bl	26922 <assert_print>
   17af2:	4853      	ldr	r0, [pc, #332]	; (17c40 <bt_gatt_is_subscribed+0x188>)
   17af4:	f00e ff15 	bl	26922 <assert_print>
   17af8:	f640 414e 	movw	r1, #3150	; 0xc4e
   17afc:	e7ee      	b.n	17adc <bt_gatt_is_subscribed+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   17afe:	7b43      	ldrb	r3, [r0, #13]
   17b00:	2b07      	cmp	r3, #7
   17b02:	d110      	bne.n	17b26 <bt_gatt_is_subscribed+0x6e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   17b04:	2300      	movs	r3, #0
   17b06:	f88d 300c 	strb.w	r3, [sp, #12]
   17b0a:	f642 0303 	movw	r3, #10243	; 0x2803
   17b0e:	6820      	ldr	r0, [r4, #0]
   17b10:	a903      	add	r1, sp, #12
   17b12:	f8ad 300e 	strh.w	r3, [sp, #14]
   17b16:	f010 faec 	bl	280f2 <bt_uuid_cmp>
   17b1a:	b9d0      	cbnz	r0, 17b52 <bt_gatt_is_subscribed+0x9a>
		if (!(chrc->properties &
   17b1c:	68e3      	ldr	r3, [r4, #12]
   17b1e:	799b      	ldrb	r3, [r3, #6]
   17b20:	f013 0f30 	tst.w	r3, #48	; 0x30
   17b24:	d103      	bne.n	17b2e <bt_gatt_is_subscribed+0x76>
		return false;
   17b26:	2000      	movs	r0, #0
}
   17b28:	b004      	add	sp, #16
   17b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   17b2e:	4620      	mov	r0, r4
   17b30:	f7ff ffb0 	bl	17a94 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17b34:	4604      	mov	r4, r0
   17b36:	b960      	cbnz	r0, 17b52 <bt_gatt_is_subscribed+0x9a>
   17b38:	4942      	ldr	r1, [pc, #264]	; (17c44 <bt_gatt_is_subscribed+0x18c>)
   17b3a:	f640 435f 	movw	r3, #3167	; 0xc5f
   17b3e:	4a3e      	ldr	r2, [pc, #248]	; (17c38 <bt_gatt_is_subscribed+0x180>)
   17b40:	483e      	ldr	r0, [pc, #248]	; (17c3c <bt_gatt_is_subscribed+0x184>)
   17b42:	f00e feee 	bl	26922 <assert_print>
   17b46:	4840      	ldr	r0, [pc, #256]	; (17c48 <bt_gatt_is_subscribed+0x190>)
   17b48:	f00e feeb 	bl	26922 <assert_print>
   17b4c:	f640 415f 	movw	r1, #3167	; 0xc5f
   17b50:	e7c4      	b.n	17adc <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17b52:	2300      	movs	r3, #0
   17b54:	6820      	ldr	r0, [r4, #0]
   17b56:	f88d 300c 	strb.w	r3, [sp, #12]
   17b5a:	f642 1302 	movw	r3, #10498	; 0x2902
   17b5e:	a903      	add	r1, sp, #12
   17b60:	f8ad 300e 	strh.w	r3, [sp, #14]
   17b64:	f010 fac5 	bl	280f2 <bt_uuid_cmp>
   17b68:	b188      	cbz	r0, 17b8e <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   17b6a:	4620      	mov	r0, r4
   17b6c:	f7ff ff92 	bl	17a94 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17b70:	4604      	mov	r4, r0
   17b72:	b960      	cbnz	r0, 17b8e <bt_gatt_is_subscribed+0xd6>
   17b74:	4933      	ldr	r1, [pc, #204]	; (17c44 <bt_gatt_is_subscribed+0x18c>)
   17b76:	f640 4365 	movw	r3, #3173	; 0xc65
   17b7a:	4a2f      	ldr	r2, [pc, #188]	; (17c38 <bt_gatt_is_subscribed+0x180>)
   17b7c:	482f      	ldr	r0, [pc, #188]	; (17c3c <bt_gatt_is_subscribed+0x184>)
   17b7e:	f00e fed0 	bl	26922 <assert_print>
   17b82:	4831      	ldr	r0, [pc, #196]	; (17c48 <bt_gatt_is_subscribed+0x190>)
   17b84:	f00e fecd 	bl	26922 <assert_print>
   17b88:	f640 4165 	movw	r1, #3173	; 0xc65
   17b8c:	e7a6      	b.n	17adc <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17b8e:	2600      	movs	r6, #0
   17b90:	f642 1802 	movw	r8, #10498	; 0x2902
   17b94:	6820      	ldr	r0, [r4, #0]
   17b96:	4669      	mov	r1, sp
   17b98:	f88d 6000 	strb.w	r6, [sp]
   17b9c:	f8ad 8002 	strh.w	r8, [sp, #2]
   17ba0:	f010 faa7 	bl	280f2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17ba4:	b9d8      	cbnz	r0, 17bde <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17ba6:	2300      	movs	r3, #0
   17ba8:	6820      	ldr	r0, [r4, #0]
   17baa:	f88d 300c 	strb.w	r3, [sp, #12]
   17bae:	f642 1302 	movw	r3, #10498	; 0x2902
   17bb2:	a903      	add	r1, sp, #12
   17bb4:	f8ad 300e 	strh.w	r3, [sp, #14]
   17bb8:	f010 fa9b 	bl	280f2 <bt_uuid_cmp>
   17bbc:	2800      	cmp	r0, #0
   17bbe:	d1b2      	bne.n	17b26 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   17bc0:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   17bc2:	4628      	mov	r0, r5
   17bc4:	4622      	mov	r2, r4
   17bc6:	f812 1b01 	ldrb.w	r1, [r2], #1
   17bca:	f010 fe8e 	bl	288ea <bt_conn_is_peer_addr_le>
   17bce:	2800      	cmp	r0, #0
   17bd0:	d0a9      	beq.n	17b26 <bt_gatt_is_subscribed+0x6e>
   17bd2:	8923      	ldrh	r3, [r4, #8]
   17bd4:	421f      	tst	r7, r3
   17bd6:	bf14      	ite	ne
   17bd8:	2001      	movne	r0, #1
   17bda:	2000      	moveq	r0, #0
   17bdc:	e7a4      	b.n	17b28 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17bde:	f642 0303 	movw	r3, #10243	; 0x2803
   17be2:	6820      	ldr	r0, [r4, #0]
   17be4:	a901      	add	r1, sp, #4
   17be6:	f88d 6004 	strb.w	r6, [sp, #4]
   17bea:	f8ad 3006 	strh.w	r3, [sp, #6]
   17bee:	f010 fa80 	bl	280f2 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17bf2:	2800      	cmp	r0, #0
   17bf4:	d0d7      	beq.n	17ba6 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17bf6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17bfa:	6820      	ldr	r0, [r4, #0]
   17bfc:	a902      	add	r1, sp, #8
   17bfe:	f88d 6008 	strb.w	r6, [sp, #8]
   17c02:	f8ad 300a 	strh.w	r3, [sp, #10]
   17c06:	f010 fa74 	bl	280f2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17c0a:	2800      	cmp	r0, #0
   17c0c:	d0cb      	beq.n	17ba6 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17c0e:	f642 0301 	movw	r3, #10241	; 0x2801
   17c12:	6820      	ldr	r0, [r4, #0]
   17c14:	a903      	add	r1, sp, #12
   17c16:	f88d 600c 	strb.w	r6, [sp, #12]
   17c1a:	f8ad 300e 	strh.w	r3, [sp, #14]
   17c1e:	f010 fa68 	bl	280f2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17c22:	2800      	cmp	r0, #0
   17c24:	d0bf      	beq.n	17ba6 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   17c26:	4620      	mov	r0, r4
   17c28:	f7ff ff34 	bl	17a94 <bt_gatt_attr_next>
		if (!attr) {
   17c2c:	4604      	mov	r4, r0
   17c2e:	2800      	cmp	r0, #0
   17c30:	d1b0      	bne.n	17b94 <bt_gatt_is_subscribed+0xdc>
   17c32:	e778      	b.n	17b26 <bt_gatt_is_subscribed+0x6e>
   17c34:	0002febd 	.word	0x0002febd
   17c38:	00030ff5 	.word	0x00030ff5
   17c3c:	0002d881 	.word	0x0002d881
   17c40:	0003108d 	.word	0x0003108d
   17c44:	000310a2 	.word	0x000310a2
   17c48:	000310a7 	.word	0x000310a7

00017c4c <gatt_indicate>:
{
   17c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c50:	4615      	mov	r5, r2
   17c52:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17c54:	2294      	movs	r2, #148	; 0x94
   17c56:	6869      	ldr	r1, [r5, #4]
{
   17c58:	b086      	sub	sp, #24
   17c5a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17c5c:	f011 fd29 	bl	296b2 <bt_gatt_check_perm>
   17c60:	4680      	mov	r8, r0
   17c62:	b178      	cbz	r0, 17c84 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   17c64:	4b36      	ldr	r3, [pc, #216]	; (17d40 <gatt_indicate+0xf4>)
		return -EPERM;
   17c66:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   17c6a:	9305      	str	r3, [sp, #20]
   17c6c:	2302      	movs	r3, #2
   17c6e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17c72:	4834      	ldr	r0, [pc, #208]	; (17d44 <gatt_indicate+0xf8>)
   17c74:	aa04      	add	r2, sp, #16
   17c76:	9304      	str	r3, [sp, #16]
   17c78:	f011 fc99 	bl	295ae <z_log_msg_static_create.constprop.0>
}
   17c7c:	4628      	mov	r0, r5
   17c7e:	b006      	add	sp, #24
   17c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   17c84:	2202      	movs	r2, #2
   17c86:	4630      	mov	r0, r6
   17c88:	6869      	ldr	r1, [r5, #4]
   17c8a:	f7ff ff15 	bl	17ab8 <bt_gatt_is_subscribed>
   17c8e:	b960      	cbnz	r0, 17caa <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   17c90:	4b2d      	ldr	r3, [pc, #180]	; (17d48 <gatt_indicate+0xfc>)
   17c92:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17c96:	9305      	str	r3, [sp, #20]
   17c98:	2302      	movs	r3, #2
   17c9a:	482a      	ldr	r0, [pc, #168]	; (17d44 <gatt_indicate+0xf8>)
   17c9c:	aa04      	add	r2, sp, #16
   17c9e:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   17ca0:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   17ca4:	f011 fc83 	bl	295ae <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17ca8:	e7e8      	b.n	17c7c <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17caa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17cae:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17cb0:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17cb2:	f7fe fd93 	bl	167dc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17cb6:	3702      	adds	r7, #2
	if (!req) {
   17cb8:	4604      	mov	r4, r0
   17cba:	b1d0      	cbz	r0, 17cf2 <gatt_indicate+0xa6>
	req->att_op = op;
   17cbc:	211d      	movs	r1, #29
	req->func = func;
   17cbe:	4b23      	ldr	r3, [pc, #140]	; (17d4c <gatt_indicate+0x100>)
	req->len = len;
   17cc0:	6147      	str	r7, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17cc2:	463a      	mov	r2, r7
	req->att_op = op;
   17cc4:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   17cc6:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   17cca:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17ccc:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17cce:	4630      	mov	r0, r6
   17cd0:	f7fe fab6 	bl	16240 <bt_att_create_pdu>
	if (!buf) {
   17cd4:	4607      	mov	r7, r0
   17cd6:	b978      	cbnz	r0, 17cf8 <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   17cd8:	4b1d      	ldr	r3, [pc, #116]	; (17d50 <gatt_indicate+0x104>)
   17cda:	481a      	ldr	r0, [pc, #104]	; (17d44 <gatt_indicate+0xf8>)
   17cdc:	9305      	str	r3, [sp, #20]
   17cde:	2302      	movs	r3, #2
   17ce0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17ce4:	aa04      	add	r2, sp, #16
   17ce6:	9304      	str	r3, [sp, #16]
   17ce8:	f011 fc61 	bl	295ae <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   17cec:	4620      	mov	r0, r4
   17cee:	f7fe fd99 	bl	16824 <bt_att_req_free>
		return -ENOMEM;
   17cf2:	f06f 050b 	mvn.w	r5, #11
   17cf6:	e7c1      	b.n	17c7c <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   17cf8:	2301      	movs	r3, #1
   17cfa:	4642      	mov	r2, r8
   17cfc:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   17cfe:	f107 0a0c 	add.w	sl, r7, #12
   17d02:	f011 fb12 	bl	2932a <bt_att_set_tx_meta_data>
   17d06:	2102      	movs	r1, #2
   17d08:	4650      	mov	r0, sl
   17d0a:	f003 f8a5 	bl	1ae58 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   17d0e:	4680      	mov	r8, r0
   17d10:	f828 9b02 	strh.w	r9, [r8], #2
   17d14:	8aa9      	ldrh	r1, [r5, #20]
   17d16:	4650      	mov	r0, sl
   17d18:	f003 f89e 	bl	1ae58 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17d1c:	8aaa      	ldrh	r2, [r5, #20]
   17d1e:	6929      	ldr	r1, [r5, #16]
   17d20:	4640      	mov	r0, r8
   17d22:	f013 fe03 	bl	2b92c <memcpy>
	err = bt_att_req_send(conn, req);
   17d26:	4621      	mov	r1, r4
   17d28:	4630      	mov	r0, r6
	req->buf = buf;
   17d2a:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   17d2c:	f7fe feb4 	bl	16a98 <bt_att_req_send>
	if (err) {
   17d30:	4605      	mov	r5, r0
   17d32:	2800      	cmp	r0, #0
   17d34:	d0a2      	beq.n	17c7c <gatt_indicate+0x30>
		bt_att_req_free(req);
   17d36:	4620      	mov	r0, r4
   17d38:	f7fe fd74 	bl	16824 <bt_att_req_free>
   17d3c:	e79e      	b.n	17c7c <gatt_indicate+0x30>
   17d3e:	bf00      	nop
   17d40:	000310bd 	.word	0x000310bd
   17d44:	0002c804 	.word	0x0002c804
   17d48:	000310d3 	.word	0x000310d3
   17d4c:	00029353 	.word	0x00029353
   17d50:	000310fe 	.word	0x000310fe

00017d54 <bt_gatt_indicate>:
{
   17d54:	b530      	push	{r4, r5, lr}
   17d56:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   17d58:	460c      	mov	r4, r1
{
   17d5a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   17d5c:	b971      	cbnz	r1, 17d7c <bt_gatt_indicate+0x28>
   17d5e:	4946      	ldr	r1, [pc, #280]	; (17e78 <bt_gatt_indicate+0x124>)
   17d60:	f640 330d 	movw	r3, #2829	; 0xb0d
   17d64:	4a45      	ldr	r2, [pc, #276]	; (17e7c <bt_gatt_indicate+0x128>)
   17d66:	4846      	ldr	r0, [pc, #280]	; (17e80 <bt_gatt_indicate+0x12c>)
   17d68:	f00e fddb 	bl	26922 <assert_print>
   17d6c:	4845      	ldr	r0, [pc, #276]	; (17e84 <bt_gatt_indicate+0x130>)
   17d6e:	f00e fdd8 	bl	26922 <assert_print>
   17d72:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   17d76:	4841      	ldr	r0, [pc, #260]	; (17e7c <bt_gatt_indicate+0x128>)
   17d78:	f00e fdcc 	bl	26914 <assert_post_action>
   17d7c:	684b      	ldr	r3, [r1, #4]
   17d7e:	b973      	cbnz	r3, 17d9e <bt_gatt_indicate+0x4a>
   17d80:	680b      	ldr	r3, [r1, #0]
   17d82:	b963      	cbnz	r3, 17d9e <bt_gatt_indicate+0x4a>
   17d84:	4940      	ldr	r1, [pc, #256]	; (17e88 <bt_gatt_indicate+0x134>)
   17d86:	f640 330e 	movw	r3, #2830	; 0xb0e
   17d8a:	4a3c      	ldr	r2, [pc, #240]	; (17e7c <bt_gatt_indicate+0x128>)
   17d8c:	483c      	ldr	r0, [pc, #240]	; (17e80 <bt_gatt_indicate+0x12c>)
   17d8e:	f00e fdc8 	bl	26922 <assert_print>
   17d92:	483c      	ldr	r0, [pc, #240]	; (17e84 <bt_gatt_indicate+0x130>)
   17d94:	f00e fdc5 	bl	26922 <assert_print>
   17d98:	f640 310e 	movw	r1, #2830	; 0xb0e
   17d9c:	e7eb      	b.n	17d76 <bt_gatt_indicate+0x22>
   17d9e:	483b      	ldr	r0, [pc, #236]	; (17e8c <bt_gatt_indicate+0x138>)
   17da0:	f011 fb58 	bl	29454 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17da4:	0742      	lsls	r2, r0, #29
   17da6:	d561      	bpl.n	17e6c <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17da8:	b115      	cbz	r5, 17db0 <bt_gatt_indicate+0x5c>
   17daa:	7b6b      	ldrb	r3, [r5, #13]
   17dac:	2b07      	cmp	r3, #7
   17dae:	d160      	bne.n	17e72 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   17db0:	6860      	ldr	r0, [r4, #4]
   17db2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17db4:	f7ff fc48 	bl	17648 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17db8:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17dba:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17dbe:	b33a      	cbz	r2, 17e10 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17dc0:	a905      	add	r1, sp, #20
   17dc2:	9102      	str	r1, [sp, #8]
   17dc4:	4932      	ldr	r1, [pc, #200]	; (17e90 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   17dc6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17dc8:	9101      	str	r1, [sp, #4]
   17dca:	2101      	movs	r1, #1
   17dcc:	9100      	str	r1, [sp, #0]
   17dce:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17dd2:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17dd4:	f7ff fc80 	bl	176d8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17dd8:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17dda:	b91b      	cbnz	r3, 17de4 <bt_gatt_indicate+0x90>
			return -ENOENT;
   17ddc:	f06f 0001 	mvn.w	r0, #1
}
   17de0:	b00b      	add	sp, #44	; 0x2c
   17de2:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17de4:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17de6:	9b05      	ldr	r3, [sp, #20]
   17de8:	a904      	add	r1, sp, #16
   17dea:	6818      	ldr	r0, [r3, #0]
   17dec:	2300      	movs	r3, #0
   17dee:	f88d 3010 	strb.w	r3, [sp, #16]
   17df2:	f642 0303 	movw	r3, #10243	; 0x2803
   17df6:	f8ad 3012 	strh.w	r3, [sp, #18]
   17dfa:	f010 f97a 	bl	280f2 <bt_uuid_cmp>
   17dfe:	b970      	cbnz	r0, 17e1e <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17e00:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17e02:	68c3      	ldr	r3, [r0, #12]
   17e04:	799b      	ldrb	r3, [r3, #6]
   17e06:	069b      	lsls	r3, r3, #26
   17e08:	d405      	bmi.n	17e16 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   17e0a:	f06f 0015 	mvn.w	r0, #21
   17e0e:	e7e7      	b.n	17de0 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   17e10:	2800      	cmp	r0, #0
   17e12:	d1e8      	bne.n	17de6 <bt_gatt_indicate+0x92>
   17e14:	e7e2      	b.n	17ddc <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17e16:	f011 fbfa 	bl	2960e <bt_gatt_attr_value_handle>
   17e1a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   17e1e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17e22:	b13d      	cbz	r5, 17e34 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   17e24:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   17e26:	4601      	mov	r1, r0
   17e28:	4622      	mov	r2, r4
   17e2a:	4628      	mov	r0, r5
		params->_ref = 1;
   17e2c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   17e2e:	f7ff ff0d 	bl	17c4c <gatt_indicate>
   17e32:	e7d5      	b.n	17de0 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   17e34:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17e38:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17e3a:	2302      	movs	r3, #2
   17e3c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17e40:	f642 1302 	movw	r3, #10498	; 0x2902
   17e44:	f8ad 3012 	strh.w	r3, [sp, #18]
   17e48:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   17e4a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17e4c:	9302      	str	r3, [sp, #8]
   17e4e:	4b11      	ldr	r3, [pc, #68]	; (17e94 <bt_gatt_indicate+0x140>)
   17e50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17e54:	9301      	str	r3, [sp, #4]
   17e56:	2301      	movs	r3, #1
   17e58:	aa04      	add	r2, sp, #16
   17e5a:	9300      	str	r3, [sp, #0]
   17e5c:	462b      	mov	r3, r5
	data.ind_params = params;
   17e5e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17e60:	f88d 5010 	strb.w	r5, [sp, #16]
   17e64:	f7ff fc38 	bl	176d8 <bt_gatt_foreach_attr_type>
	return data.err;
   17e68:	9807      	ldr	r0, [sp, #28]
   17e6a:	e7b9      	b.n	17de0 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   17e6c:	f06f 000a 	mvn.w	r0, #10
   17e70:	e7b6      	b.n	17de0 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   17e72:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17e76:	e7b3      	b.n	17de0 <bt_gatt_indicate+0x8c>
   17e78:	00031125 	.word	0x00031125
   17e7c:	00030ff5 	.word	0x00030ff5
   17e80:	0002d881 	.word	0x0002d881
   17e84:	0003112c 	.word	0x0003112c
   17e88:	00031142 	.word	0x00031142
   17e8c:	200080cc 	.word	0x200080cc
   17e90:	00029379 	.word	0x00029379
   17e94:	00018259 	.word	0x00018259

00017e98 <sc_process>:
{
   17e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   17e9a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   17e9e:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   17ea0:	f1a0 0720 	sub.w	r7, r0, #32
   17ea4:	4628      	mov	r0, r5
   17ea6:	f011 fad5 	bl	29454 <atomic_get>
   17eaa:	0783      	lsls	r3, r0, #30
   17eac:	f3c0 0640 	ubfx	r6, r0, #1, #1
   17eb0:	d50e      	bpl.n	17ed0 <sc_process+0x38>
   17eb2:	4919      	ldr	r1, [pc, #100]	; (17f18 <sc_process+0x80>)
   17eb4:	f240 439a 	movw	r3, #1178	; 0x49a
   17eb8:	4a18      	ldr	r2, [pc, #96]	; (17f1c <sc_process+0x84>)
   17eba:	4819      	ldr	r0, [pc, #100]	; (17f20 <sc_process+0x88>)
   17ebc:	f00e fd31 	bl	26922 <assert_print>
   17ec0:	4818      	ldr	r0, [pc, #96]	; (17f24 <sc_process+0x8c>)
   17ec2:	f00e fd2e 	bl	26922 <assert_print>
   17ec6:	f240 419a 	movw	r1, #1178	; 0x49a
   17eca:	4814      	ldr	r0, [pc, #80]	; (17f1c <sc_process+0x84>)
   17ecc:	f00e fd22 	bl	26914 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17ed0:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17ed4:	f06f 0101 	mvn.w	r1, #1
   17ed8:	4628      	mov	r0, r5
   17eda:	9301      	str	r3, [sp, #4]
   17edc:	f011 fac8 	bl	29470 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17ee0:	4b11      	ldr	r3, [pc, #68]	; (17f28 <sc_process+0x90>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17ee2:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17ee4:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   17ee8:	4b10      	ldr	r3, [pc, #64]	; (17f2c <sc_process+0x94>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17eea:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   17eec:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   17ef0:	ab01      	add	r3, sp, #4
   17ef2:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   17ef6:	2304      	movs	r3, #4
	sc->start = 0U;
   17ef8:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   17efc:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   17f00:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17f04:	f7ff ff26 	bl	17d54 <bt_gatt_indicate>
   17f08:	b918      	cbnz	r0, 17f12 <sc_process+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17f0a:	2102      	movs	r1, #2
   17f0c:	4628      	mov	r0, r5
   17f0e:	f011 faa4 	bl	2945a <atomic_or>
}
   17f12:	b003      	add	sp, #12
   17f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f16:	bf00      	nop
   17f18:	0003115f 	.word	0x0003115f
   17f1c:	00030ff5 	.word	0x00030ff5
   17f20:	0002d881 	.word	0x0002d881
   17f24:	00031190 	.word	0x00031190
   17f28:	0002d354 	.word	0x0002d354
   17f2c:	0001750d 	.word	0x0001750d

00017f30 <update_ccc>:
{
   17f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17f34:	b089      	sub	sp, #36	; 0x24
   17f36:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   17f38:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f3a:	4b3b      	ldr	r3, [pc, #236]	; (18028 <update_ccc+0xf8>)
   17f3c:	6882      	ldr	r2, [r0, #8]
{
   17f3e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f40:	429a      	cmp	r2, r3
{
   17f42:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f44:	d11f      	bne.n	17f86 <update_ccc+0x56>
	ccc = attr->user_data;
   17f46:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   17f48:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17f4a:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   17f4c:	b1db      	cbz	r3, 17f86 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17f4e:	4620      	mov	r0, r4
   17f50:	7831      	ldrb	r1, [r6, #0]
   17f52:	f010 fcca 	bl	288ea <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17f56:	b1b0      	cbz	r0, 17f86 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17f58:	f44f 7295 	mov.w	r2, #298	; 0x12a
   17f5c:	4629      	mov	r1, r5
   17f5e:	4620      	mov	r0, r4
   17f60:	f011 fba7 	bl	296b2 <bt_gatt_check_perm>
		if (err) {
   17f64:	b330      	cbz	r0, 17fb4 <update_ccc+0x84>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17f66:	2803      	cmp	r0, #3
   17f68:	d112      	bne.n	17f90 <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   17f6a:	466c      	mov	r4, sp
   17f6c:	b088      	sub	sp, #32
   17f6e:	466a      	mov	r2, sp
   17f70:	4b2e      	ldr	r3, [pc, #184]	; (1802c <update_ccc+0xfc>)
   17f72:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17f76:	e9c2 3505 	strd	r3, r5, [r2, #20]
   17f7a:	f842 0f10 	str.w	r0, [r2, #16]!
   17f7e:	482c      	ldr	r0, [pc, #176]	; (18030 <update_ccc+0x100>)
   17f80:	f011 fb15 	bl	295ae <z_log_msg_static_create.constprop.0>
   17f84:	46a5      	mov	sp, r4
}
   17f86:	2001      	movs	r0, #1
   17f88:	3724      	adds	r7, #36	; 0x24
   17f8a:	46bd      	mov	sp, r7
   17f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sec = BT_SECURITY_L2;
   17f90:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   17f92:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   17f94:	bf0c      	ite	eq
   17f96:	f04f 0903 	moveq.w	r9, #3
   17f9a:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   17f9e:	f010 fca2 	bl	288e6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   17fa2:	4581      	cmp	r9, r0
   17fa4:	d906      	bls.n	17fb4 <update_ccc+0x84>
				if (data->sec < sec) {
   17fa6:	f898 3004 	ldrb.w	r3, [r8, #4]
   17faa:	454b      	cmp	r3, r9
   17fac:	d2eb      	bcs.n	17f86 <update_ccc+0x56>
					data->sec = sec;
   17fae:	f888 9004 	strb.w	r9, [r8, #4]
   17fb2:	e7e8      	b.n	17f86 <update_ccc+0x56>
		gatt_ccc_changed(attr, ccc);
   17fb4:	4631      	mov	r1, r6
   17fb6:	4628      	mov	r0, r5
   17fb8:	f011 f9c1 	bl	2933e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17fbc:	4b1d      	ldr	r3, [pc, #116]	; (18034 <update_ccc+0x104>)
   17fbe:	429e      	cmp	r6, r3
   17fc0:	d1e1      	bne.n	17f86 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17fc2:	7a20      	ldrb	r0, [r4, #8]
   17fc4:	f104 0190 	add.w	r1, r4, #144	; 0x90
   17fc8:	f7fe fdca 	bl	16b60 <find_sc_cfg>
	if (!cfg) {
   17fcc:	2800      	cmp	r0, #0
   17fce:	d0da      	beq.n	17f86 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   17fd0:	8902      	ldrh	r2, [r0, #8]
   17fd2:	8943      	ldrh	r3, [r0, #10]
   17fd4:	ea52 0103 	orrs.w	r1, r2, r3
   17fd8:	d0d5      	beq.n	17f86 <update_ccc+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17fda:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17fdc:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   17fde:	4620      	mov	r0, r4
   17fe0:	f7fc fedc 	bl	14d9c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17fe4:	2318      	movs	r3, #24
   17fe6:	4914      	ldr	r1, [pc, #80]	; (18038 <update_ccc+0x108>)
   17fe8:	4a14      	ldr	r2, [pc, #80]	; (1803c <update_ccc+0x10c>)
   17fea:	fb03 1300 	mla	r3, r3, r0, r1
   17fee:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17ff0:	4a13      	ldr	r2, [pc, #76]	; (18040 <update_ccc+0x110>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17ff2:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   17ff4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17ff6:	1d3a      	adds	r2, r7, #4
   17ff8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17ffa:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17ffc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18000:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   18004:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18006:	4620      	mov	r0, r4
   18008:	f7ff fea4 	bl	17d54 <bt_gatt_indicate>
   1800c:	2800      	cmp	r0, #0
   1800e:	d0ba      	beq.n	17f86 <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   18010:	4b0c      	ldr	r3, [pc, #48]	; (18044 <update_ccc+0x114>)
   18012:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18016:	61fb      	str	r3, [r7, #28]
   18018:	2302      	movs	r3, #2
   1801a:	4805      	ldr	r0, [pc, #20]	; (18030 <update_ccc+0x100>)
   1801c:	61bb      	str	r3, [r7, #24]
   1801e:	f107 0218 	add.w	r2, r7, #24
   18022:	f011 fac4 	bl	295ae <z_log_msg_static_create.constprop.0>
   18026:	e7ae      	b.n	17f86 <update_ccc+0x56>
   18028:	000173cd 	.word	0x000173cd
   1802c:	000311ab 	.word	0x000311ab
   18030:	0002c804 	.word	0x0002c804
   18034:	200086b0 	.word	0x200086b0
   18038:	200217c0 	.word	0x200217c0
   1803c:	0002d354 	.word	0x0002d354
   18040:	000295d3 	.word	0x000295d3
   18044:	000311bf 	.word	0x000311bf

00018048 <gatt_notify>:
{
   18048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1804c:	4614      	mov	r4, r2
   1804e:	4688      	mov	r8, r1
   18050:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18052:	2294      	movs	r2, #148	; 0x94
   18054:	6861      	ldr	r1, [r4, #4]
{
   18056:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18058:	f011 fb2b 	bl	296b2 <bt_gatt_check_perm>
   1805c:	b170      	cbz	r0, 1807c <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1805e:	4b2b      	ldr	r3, [pc, #172]	; (1810c <gatt_notify+0xc4>)
   18060:	482b      	ldr	r0, [pc, #172]	; (18110 <gatt_notify+0xc8>)
   18062:	9305      	str	r3, [sp, #20]
   18064:	2302      	movs	r3, #2
   18066:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1806a:	aa04      	add	r2, sp, #16
   1806c:	9304      	str	r3, [sp, #16]
   1806e:	f011 fa9e 	bl	295ae <z_log_msg_static_create.constprop.0>
		return -EPERM;
   18072:	f04f 30ff 	mov.w	r0, #4294967295
}
   18076:	b007      	add	sp, #28
   18078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1807c:	2201      	movs	r2, #1
   1807e:	4630      	mov	r0, r6
   18080:	6861      	ldr	r1, [r4, #4]
   18082:	f7ff fd19 	bl	17ab8 <bt_gatt_is_subscribed>
   18086:	b960      	cbnz	r0, 180a2 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   18088:	4b22      	ldr	r3, [pc, #136]	; (18114 <gatt_notify+0xcc>)
   1808a:	4821      	ldr	r0, [pc, #132]	; (18110 <gatt_notify+0xc8>)
   1808c:	9305      	str	r3, [sp, #20]
   1808e:	2302      	movs	r3, #2
   18090:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18094:	aa04      	add	r2, sp, #16
   18096:	9304      	str	r3, [sp, #16]
   18098:	f011 fa89 	bl	295ae <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1809c:	f06f 0015 	mvn.w	r0, #21
   180a0:	e7e9      	b.n	18076 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   180a2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   180a4:	211b      	movs	r1, #27
   180a6:	4630      	mov	r0, r6
   180a8:	3202      	adds	r2, #2
   180aa:	f7fe f8c9 	bl	16240 <bt_att_create_pdu>
	if (!buf) {
   180ae:	4605      	mov	r5, r0
   180b0:	b960      	cbnz	r0, 180cc <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   180b2:	4b19      	ldr	r3, [pc, #100]	; (18118 <gatt_notify+0xd0>)
   180b4:	4816      	ldr	r0, [pc, #88]	; (18110 <gatt_notify+0xc8>)
   180b6:	9305      	str	r3, [sp, #20]
   180b8:	2302      	movs	r3, #2
   180ba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   180be:	aa04      	add	r2, sp, #16
   180c0:	9304      	str	r3, [sp, #16]
   180c2:	f011 fa74 	bl	295ae <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   180c6:	f06f 000b 	mvn.w	r0, #11
   180ca:	e7d4      	b.n	18076 <gatt_notify+0x2e>
   180cc:	f100 090c 	add.w	r9, r0, #12
   180d0:	2102      	movs	r1, #2
   180d2:	4648      	mov	r0, r9
   180d4:	f002 fec0 	bl	1ae58 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   180d8:	4607      	mov	r7, r0
   180da:	f827 8b02 	strh.w	r8, [r7], #2
   180de:	89a1      	ldrh	r1, [r4, #12]
   180e0:	4648      	mov	r0, r9
   180e2:	f002 feb9 	bl	1ae58 <net_buf_simple_add>
   180e6:	89a2      	ldrh	r2, [r4, #12]
   180e8:	68a1      	ldr	r1, [r4, #8]
   180ea:	4638      	mov	r0, r7
   180ec:	f013 fc1e 	bl	2b92c <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   180f0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   180f4:	4628      	mov	r0, r5
   180f6:	2301      	movs	r3, #1
   180f8:	f011 f917 	bl	2932a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   180fc:	4629      	mov	r1, r5
   180fe:	4630      	mov	r0, r6
}
   18100:	b007      	add	sp, #28
   18102:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   18106:	f7fe bc69 	b.w	169dc <bt_att_send>
   1810a:	bf00      	nop
   1810c:	000310bd 	.word	0x000310bd
   18110:	0002c804 	.word	0x0002c804
   18114:	000310d3 	.word	0x000310d3
   18118:	000311dc 	.word	0x000311dc

0001811c <bt_gatt_notify_cb>:
{
   1811c:	b530      	push	{r4, r5, lr}
   1811e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   18120:	460c      	mov	r4, r1
{
   18122:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   18124:	b971      	cbnz	r1, 18144 <bt_gatt_notify_cb+0x28>
   18126:	4944      	ldr	r1, [pc, #272]	; (18238 <bt_gatt_notify_cb+0x11c>)
   18128:	f640 232d 	movw	r3, #2605	; 0xa2d
   1812c:	4a43      	ldr	r2, [pc, #268]	; (1823c <bt_gatt_notify_cb+0x120>)
   1812e:	4844      	ldr	r0, [pc, #272]	; (18240 <bt_gatt_notify_cb+0x124>)
   18130:	f00e fbf7 	bl	26922 <assert_print>
   18134:	4843      	ldr	r0, [pc, #268]	; (18244 <bt_gatt_notify_cb+0x128>)
   18136:	f00e fbf4 	bl	26922 <assert_print>
   1813a:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1813e:	483f      	ldr	r0, [pc, #252]	; (1823c <bt_gatt_notify_cb+0x120>)
   18140:	f00e fbe8 	bl	26914 <assert_post_action>
   18144:	684b      	ldr	r3, [r1, #4]
   18146:	b973      	cbnz	r3, 18166 <bt_gatt_notify_cb+0x4a>
   18148:	680b      	ldr	r3, [r1, #0]
   1814a:	b963      	cbnz	r3, 18166 <bt_gatt_notify_cb+0x4a>
   1814c:	493e      	ldr	r1, [pc, #248]	; (18248 <bt_gatt_notify_cb+0x12c>)
   1814e:	f640 232e 	movw	r3, #2606	; 0xa2e
   18152:	4a3a      	ldr	r2, [pc, #232]	; (1823c <bt_gatt_notify_cb+0x120>)
   18154:	483a      	ldr	r0, [pc, #232]	; (18240 <bt_gatt_notify_cb+0x124>)
   18156:	f00e fbe4 	bl	26922 <assert_print>
   1815a:	483a      	ldr	r0, [pc, #232]	; (18244 <bt_gatt_notify_cb+0x128>)
   1815c:	f00e fbe1 	bl	26922 <assert_print>
   18160:	f640 212e 	movw	r1, #2606	; 0xa2e
   18164:	e7eb      	b.n	1813e <bt_gatt_notify_cb+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18166:	4839      	ldr	r0, [pc, #228]	; (1824c <bt_gatt_notify_cb+0x130>)
   18168:	f011 f974 	bl	29454 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1816c:	0742      	lsls	r2, r0, #29
   1816e:	d55d      	bpl.n	1822c <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18170:	b115      	cbz	r5, 18178 <bt_gatt_notify_cb+0x5c>
   18172:	7b6b      	ldrb	r3, [r5, #13]
   18174:	2b07      	cmp	r3, #7
   18176:	d15c      	bne.n	18232 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   18178:	6860      	ldr	r0, [r4, #4]
   1817a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1817c:	f7ff fa64 	bl	17648 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   18180:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18182:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   18186:	b33a      	cbz	r2, 181d8 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18188:	a905      	add	r1, sp, #20
   1818a:	9102      	str	r1, [sp, #8]
   1818c:	4930      	ldr	r1, [pc, #192]	; (18250 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   1818e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18190:	9101      	str	r1, [sp, #4]
   18192:	2101      	movs	r1, #1
   18194:	9100      	str	r1, [sp, #0]
   18196:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1819a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1819c:	f7ff fa9c 	bl	176d8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   181a0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   181a2:	b91b      	cbnz	r3, 181ac <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   181a4:	f06f 0001 	mvn.w	r0, #1
}
   181a8:	b00b      	add	sp, #44	; 0x2c
   181aa:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   181ac:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   181ae:	9b05      	ldr	r3, [sp, #20]
   181b0:	a904      	add	r1, sp, #16
   181b2:	6818      	ldr	r0, [r3, #0]
   181b4:	2300      	movs	r3, #0
   181b6:	f88d 3010 	strb.w	r3, [sp, #16]
   181ba:	f642 0303 	movw	r3, #10243	; 0x2803
   181be:	f8ad 3012 	strh.w	r3, [sp, #18]
   181c2:	f00f ff96 	bl	280f2 <bt_uuid_cmp>
   181c6:	b970      	cbnz	r0, 181e6 <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   181c8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   181ca:	68c3      	ldr	r3, [r0, #12]
   181cc:	799b      	ldrb	r3, [r3, #6]
   181ce:	06db      	lsls	r3, r3, #27
   181d0:	d405      	bmi.n	181de <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   181d2:	f06f 0015 	mvn.w	r0, #21
   181d6:	e7e7      	b.n	181a8 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   181d8:	2800      	cmp	r0, #0
   181da:	d1e8      	bne.n	181ae <bt_gatt_notify_cb+0x92>
   181dc:	e7e2      	b.n	181a4 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   181de:	f011 fa16 	bl	2960e <bt_gatt_attr_value_handle>
   181e2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   181e6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   181ea:	b12d      	cbz	r5, 181f8 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   181ec:	4601      	mov	r1, r0
   181ee:	4622      	mov	r2, r4
   181f0:	4628      	mov	r0, r5
   181f2:	f7ff ff29 	bl	18048 <gatt_notify>
   181f6:	e7d7      	b.n	181a8 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   181f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   181fc:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   18200:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   18202:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18204:	f8ad 2012 	strh.w	r2, [sp, #18]
   18208:	aa05      	add	r2, sp, #20
   1820a:	9202      	str	r2, [sp, #8]
   1820c:	4a11      	ldr	r2, [pc, #68]	; (18254 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   1820e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18212:	e9cd 3200 	strd	r3, r2, [sp]
   18216:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1821a:	462b      	mov	r3, r5
   1821c:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1821e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18220:	f88d 5010 	strb.w	r5, [sp, #16]
   18224:	f7ff fa58 	bl	176d8 <bt_gatt_foreach_attr_type>
	return data.err;
   18228:	9807      	ldr	r0, [sp, #28]
   1822a:	e7bd      	b.n	181a8 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   1822c:	f06f 000a 	mvn.w	r0, #10
   18230:	e7ba      	b.n	181a8 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   18232:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18236:	e7b7      	b.n	181a8 <bt_gatt_notify_cb+0x8c>
   18238:	00031125 	.word	0x00031125
   1823c:	00030ff5 	.word	0x00030ff5
   18240:	0002d881 	.word	0x0002d881
   18244:	0003112c 	.word	0x0003112c
   18248:	00031142 	.word	0x00031142
   1824c:	200080cc 	.word	0x200080cc
   18250:	00029379 	.word	0x00029379
   18254:	00018259 	.word	0x00018259

00018258 <notify_cb>:
{
   18258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1825c:	4b43      	ldr	r3, [pc, #268]	; (1836c <notify_cb+0x114>)
{
   1825e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18260:	6882      	ldr	r2, [r0, #8]
{
   18262:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18264:	429a      	cmp	r2, r3
{
   18266:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   18268:	d004      	beq.n	18274 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1826a:	2701      	movs	r7, #1
}
   1826c:	4638      	mov	r0, r7
   1826e:	b007      	add	sp, #28
   18270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   18274:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18276:	4b3e      	ldr	r3, [pc, #248]	; (18370 <notify_cb+0x118>)
   18278:	429e      	cmp	r6, r3
   1827a:	d010      	beq.n	1829e <notify_cb+0x46>
		if (cfg->value != data->type) {
   1827c:	8932      	ldrh	r2, [r6, #8]
   1827e:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18280:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   18282:	429a      	cmp	r2, r3
   18284:	d1f1      	bne.n	1826a <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18286:	7830      	ldrb	r0, [r6, #0]
   18288:	f7fc ff38 	bl	150fc <bt_conn_lookup_addr_le>
		if (!conn) {
   1828c:	4604      	mov	r4, r0
   1828e:	2800      	cmp	r0, #0
   18290:	d0eb      	beq.n	1826a <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   18292:	7b43      	ldrb	r3, [r0, #13]
   18294:	2b07      	cmp	r3, #7
   18296:	d026      	beq.n	182e6 <notify_cb+0x8e>
			bt_conn_unref(conn);
   18298:	f7fc fc54 	bl	14b44 <bt_conn_unref>
			continue;
   1829c:	e7e5      	b.n	1826a <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1829e:	f04f 0800 	mov.w	r8, #0
   182a2:	4c34      	ldr	r4, [pc, #208]	; (18374 <notify_cb+0x11c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   182a4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 18378 <notify_cb+0x120>
   182a8:	4649      	mov	r1, r9
   182aa:	4620      	mov	r0, r4
   182ac:	f011 f8bd 	bl	2942a <bt_addr_le_eq>
   182b0:	b978      	cbnz	r0, 182d2 <notify_cb+0x7a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   182b2:	2207      	movs	r2, #7
   182b4:	4621      	mov	r1, r4
   182b6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   182ba:	f7fc ff69 	bl	15190 <bt_conn_lookup_state_le>
			if (!conn) {
   182be:	b978      	cbnz	r0, 182e0 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   182c0:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   182c2:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   182c4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   182c6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   182ca:	8853      	ldrh	r3, [r2, #2]
   182cc:	8812      	ldrh	r2, [r2, #0]
   182ce:	f7fe fe6f 	bl	16fb0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   182d2:	340c      	adds	r4, #12
   182d4:	f1b8 0f00 	cmp.w	r8, #0
   182d8:	d1d0      	bne.n	1827c <notify_cb+0x24>
   182da:	f04f 0801 	mov.w	r8, #1
   182de:	e7e3      	b.n	182a8 <notify_cb+0x50>
			bt_conn_unref(conn);
   182e0:	f7fc fc30 	bl	14b44 <bt_conn_unref>
   182e4:	e7f5      	b.n	182d2 <notify_cb+0x7a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   182e6:	6973      	ldr	r3, [r6, #20]
   182e8:	b123      	cbz	r3, 182f4 <notify_cb+0x9c>
   182ea:	4639      	mov	r1, r7
   182ec:	4798      	blx	r3
   182ee:	b908      	cbnz	r0, 182f4 <notify_cb+0x9c>
			bt_conn_unref(conn);
   182f0:	4620      	mov	r0, r4
   182f2:	e7d1      	b.n	18298 <notify_cb+0x40>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   182f4:	4639      	mov	r1, r7
   182f6:	2294      	movs	r2, #148	; 0x94
   182f8:	4620      	mov	r0, r4
   182fa:	f011 f9da 	bl	296b2 <bt_gatt_check_perm>
   182fe:	4607      	mov	r7, r0
   18300:	b150      	cbz	r0, 18318 <notify_cb+0xc0>
			LOG_WRN("Link is not encrypted");
   18302:	4b1e      	ldr	r3, [pc, #120]	; (1837c <notify_cb+0x124>)
   18304:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18308:	9305      	str	r3, [sp, #20]
   1830a:	2302      	movs	r3, #2
   1830c:	481c      	ldr	r0, [pc, #112]	; (18380 <notify_cb+0x128>)
   1830e:	aa04      	add	r2, sp, #16
   18310:	9304      	str	r3, [sp, #16]
   18312:	f011 f94c 	bl	295ae <z_log_msg_static_create.constprop.0>
   18316:	e7eb      	b.n	182f0 <notify_cb+0x98>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   18318:	89ab      	ldrh	r3, [r5, #12]
   1831a:	2b02      	cmp	r3, #2
   1831c:	d114      	bne.n	18348 <notify_cb+0xf0>
   1831e:	8933      	ldrh	r3, [r6, #8]
   18320:	079a      	lsls	r2, r3, #30
   18322:	d405      	bmi.n	18330 <notify_cb+0xd8>
		bt_conn_unref(conn);
   18324:	4620      	mov	r0, r4
   18326:	f7fc fc0d 	bl	14b44 <bt_conn_unref>
		data->err = 0;
   1832a:	2300      	movs	r3, #0
   1832c:	60ab      	str	r3, [r5, #8]
   1832e:	e79c      	b.n	1826a <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   18330:	4620      	mov	r0, r4
   18332:	692a      	ldr	r2, [r5, #16]
   18334:	88a9      	ldrh	r1, [r5, #4]
   18336:	f7ff fc89 	bl	17c4c <gatt_indicate>
			if (err == 0) {
   1833a:	4606      	mov	r6, r0
   1833c:	b978      	cbnz	r0, 1835e <notify_cb+0x106>
				data->ind_params->_ref++;
   1833e:	692a      	ldr	r2, [r5, #16]
   18340:	7d93      	ldrb	r3, [r2, #22]
   18342:	3301      	adds	r3, #1
   18344:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18346:	e7ed      	b.n	18324 <notify_cb+0xcc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   18348:	2b01      	cmp	r3, #1
   1834a:	d1eb      	bne.n	18324 <notify_cb+0xcc>
   1834c:	8933      	ldrh	r3, [r6, #8]
   1834e:	07db      	lsls	r3, r3, #31
   18350:	d5e8      	bpl.n	18324 <notify_cb+0xcc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18352:	4620      	mov	r0, r4
   18354:	692a      	ldr	r2, [r5, #16]
   18356:	88a9      	ldrh	r1, [r5, #4]
   18358:	f7ff fe76 	bl	18048 <gatt_notify>
   1835c:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1835e:	4620      	mov	r0, r4
   18360:	f7fc fbf0 	bl	14b44 <bt_conn_unref>
		if (err < 0) {
   18364:	2e00      	cmp	r6, #0
   18366:	db81      	blt.n	1826c <notify_cb+0x14>
   18368:	e7df      	b.n	1832a <notify_cb+0xd2>
   1836a:	bf00      	nop
   1836c:	000173cd 	.word	0x000173cd
   18370:	200086b0 	.word	0x200086b0
   18374:	20021be5 	.word	0x20021be5
   18378:	0002f895 	.word	0x0002f895
   1837c:	000310bd 	.word	0x000310bd
   18380:	0002c804 	.word	0x0002c804

00018384 <bt_gatt_connected>:
{
   18384:	b5b0      	push	{r4, r5, r7, lr}
   18386:	b08e      	sub	sp, #56	; 0x38
	data.sec = BT_SECURITY_L1;
   18388:	2301      	movs	r3, #1
{
   1838a:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1838c:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   18390:	4604      	mov	r4, r0
	data.conn = conn;
   18392:	6078      	str	r0, [r7, #4]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18394:	4629      	mov	r1, r5
   18396:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   18398:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1839a:	f010 f806 	bl	283aa <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1839e:	b198      	cbz	r0, 183c8 <bt_gatt_connected+0x44>
		if (conn->id) {
   183a0:	7a22      	ldrb	r2, [r4, #8]
   183a2:	b3a2      	cbz	r2, 1840e <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   183a4:	2104      	movs	r1, #4
   183a6:	4638      	mov	r0, r7
   183a8:	f00e f86b 	bl	26482 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   183ac:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   183ae:	2124      	movs	r1, #36	; 0x24
   183b0:	4a18      	ldr	r2, [pc, #96]	; (18414 <bt_gatt_connected+0x90>)
   183b2:	f107 000c 	add.w	r0, r7, #12
   183b6:	462b      	mov	r3, r5
   183b8:	f7f9 face 	bl	11958 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   183bc:	f107 020c 	add.w	r2, r7, #12
   183c0:	4610      	mov	r0, r2
   183c2:	4915      	ldr	r1, [pc, #84]	; (18418 <bt_gatt_connected+0x94>)
   183c4:	f7f7 fbde 	bl	fb84 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   183c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   183cc:	2001      	movs	r0, #1
   183ce:	4a13      	ldr	r2, [pc, #76]	; (1841c <bt_gatt_connected+0x98>)
   183d0:	1d3b      	adds	r3, r7, #4
   183d2:	f011 f963 	bl	2969c <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   183d6:	4620      	mov	r0, r4
   183d8:	f010 fa85 	bl	288e6 <bt_conn_get_security>
   183dc:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   183de:	4288      	cmp	r0, r1
   183e0:	d212      	bcs.n	18408 <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   183e2:	4620      	mov	r0, r4
   183e4:	f010 fa53 	bl	2888e <bt_conn_set_security>
		if (err) {
   183e8:	b170      	cbz	r0, 18408 <bt_gatt_connected+0x84>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   183ea:	466c      	mov	r4, sp
   183ec:	b088      	sub	sp, #32
   183ee:	aa02      	add	r2, sp, #8
   183f0:	4b0b      	ldr	r3, [pc, #44]	; (18420 <bt_gatt_connected+0x9c>)
   183f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   183f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   183fa:	2303      	movs	r3, #3
   183fc:	4809      	ldr	r0, [pc, #36]	; (18424 <bt_gatt_connected+0xa0>)
   183fe:	f842 3f10 	str.w	r3, [r2, #16]!
   18402:	f011 f8d4 	bl	295ae <z_log_msg_static_create.constprop.0>
   18406:	46a5      	mov	sp, r4
}
   18408:	3730      	adds	r7, #48	; 0x30
   1840a:	46bd      	mov	sp, r7
   1840c:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1840e:	9200      	str	r2, [sp, #0]
   18410:	e7cd      	b.n	183ae <bt_gatt_connected+0x2a>
   18412:	bf00      	nop
   18414:	00031089 	.word	0x00031089
   18418:	00017969 	.word	0x00017969
   1841c:	00017f31 	.word	0x00017f31
   18420:	00031205 	.word	0x00031205
   18424:	0002c804 	.word	0x0002c804

00018428 <bt_gatt_att_max_mtu_changed>:
{
   18428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1842a:	4605      	mov	r5, r0
   1842c:	460e      	mov	r6, r1
   1842e:	4617      	mov	r7, r2
	return list->head;
   18430:	4b06      	ldr	r3, [pc, #24]	; (1844c <bt_gatt_att_max_mtu_changed+0x24>)
   18432:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18434:	b14c      	cbz	r4, 1844a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   18436:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1843a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1843c:	b11b      	cbz	r3, 18446 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1843e:	463a      	mov	r2, r7
   18440:	4631      	mov	r1, r6
   18442:	4628      	mov	r0, r5
   18444:	4798      	blx	r3
	return node->next;
   18446:	6864      	ldr	r4, [r4, #4]
   18448:	e7f4      	b.n	18434 <bt_gatt_att_max_mtu_changed+0xc>
}
   1844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1844c:	20021800 	.word	0x20021800

00018450 <bt_gatt_encrypt_change>:
{
   18450:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   18452:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   18454:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18456:	466b      	mov	r3, sp
   18458:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1845c:	4a03      	ldr	r2, [pc, #12]	; (1846c <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1845e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18462:	f011 f91b 	bl	2969c <bt_gatt_foreach_attr>
}
   18466:	b003      	add	sp, #12
   18468:	f85d fb04 	ldr.w	pc, [sp], #4
   1846c:	00017f31 	.word	0x00017f31

00018470 <bt_gatt_store_ccc>:
	save.count = 0;
   18470:	2300      	movs	r3, #0
{
   18472:	b5f0      	push	{r4, r5, r6, r7, lr}
   18474:	4604      	mov	r4, r0
   18476:	b0c1      	sub	sp, #260	; 0x104
   18478:	af02      	add	r7, sp, #8
   1847a:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1847c:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1847e:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   18482:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   18486:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1848a:	2001      	movs	r0, #1
   1848c:	4a1b      	ldr	r2, [pc, #108]	; (184fc <bt_gatt_store_ccc+0x8c>)
   1848e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   18492:	f011 f903 	bl	2969c <bt_gatt_foreach_attr>
	if (id) {
   18496:	b364      	cbz	r4, 184f2 <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   18498:	1d3e      	adds	r6, r7, #4
   1849a:	4622      	mov	r2, r4
   1849c:	2104      	movs	r1, #4
   1849e:	4630      	mov	r0, r6
   184a0:	f00d ffef 	bl	26482 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   184a4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   184a6:	4a16      	ldr	r2, [pc, #88]	; (18500 <bt_gatt_store_ccc+0x90>)
   184a8:	462b      	mov	r3, r5
   184aa:	2124      	movs	r1, #36	; 0x24
   184ac:	f107 0008 	add.w	r0, r7, #8
   184b0:	f7f9 fa52 	bl	11958 <bt_settings_encode_key>
	if (save.count) {
   184b4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   184b8:	b1ea      	cbz	r2, 184f6 <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   184ba:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   184bc:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   184c0:	f107 0008 	add.w	r0, r7, #8
   184c4:	f7f7 fafe 	bl	fac4 <settings_save_one>
	if (err) {
   184c8:	4604      	mov	r4, r0
   184ca:	b170      	cbz	r0, 184ea <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   184cc:	466d      	mov	r5, sp
   184ce:	b088      	sub	sp, #32
   184d0:	aa02      	add	r2, sp, #8
   184d2:	4b0c      	ldr	r3, [pc, #48]	; (18504 <bt_gatt_store_ccc+0x94>)
   184d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   184d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   184dc:	2303      	movs	r3, #3
   184de:	480a      	ldr	r0, [pc, #40]	; (18508 <bt_gatt_store_ccc+0x98>)
   184e0:	f842 3f10 	str.w	r3, [r2, #16]!
   184e4:	f011 f863 	bl	295ae <z_log_msg_static_create.constprop.0>
   184e8:	46ad      	mov	sp, r5
}
   184ea:	4620      	mov	r0, r4
   184ec:	37fc      	adds	r7, #252	; 0xfc
   184ee:	46bd      	mov	sp, r7
   184f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   184f2:	9400      	str	r4, [sp, #0]
   184f4:	e7d7      	b.n	184a6 <bt_gatt_store_ccc+0x36>
		str = NULL;
   184f6:	4611      	mov	r1, r2
   184f8:	e7e2      	b.n	184c0 <bt_gatt_store_ccc+0x50>
   184fa:	bf00      	nop
   184fc:	000172f5 	.word	0x000172f5
   18500:	00031089 	.word	0x00031089
   18504:	00031231 	.word	0x00031231
   18508:	0002c804 	.word	0x0002c804

0001850c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18510:	4604      	mov	r4, r0
   18512:	b08c      	sub	sp, #48	; 0x30
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18514:	4603      	mov	r3, r0
   18516:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1851a:	2001      	movs	r0, #1
   1851c:	4a3d      	ldr	r2, [pc, #244]	; (18614 <bt_gatt_disconnected+0x108>)
{
   1851e:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18520:	f011 f8bc 	bl	2969c <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   18524:	4620      	mov	r0, r4
   18526:	f7fc fc39 	bl	14d9c <bt_conn_index>
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1852a:	4e3b      	ldr	r6, [pc, #236]	; (18618 <bt_gatt_disconnected+0x10c>)
	uint8_t index = bt_conn_index(conn);
   1852c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1852e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   18532:	b120      	cbz	r0, 1853e <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   18534:	f7fc fb06 	bl	14b44 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   18538:	2300      	movs	r3, #0
   1853a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1853e:	4837      	ldr	r0, [pc, #220]	; (1861c <bt_gatt_disconnected+0x110>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18540:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   18544:	f009 ff6a 	bl	2241c <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18548:	4629      	mov	r1, r5
   1854a:	7a20      	ldrb	r0, [r4, #8]
   1854c:	f00f ff2d 	bl	283aa <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18550:	2800      	cmp	r0, #0
   18552:	d038      	beq.n	185c6 <bt_gatt_disconnected+0xba>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   18554:	4629      	mov	r1, r5
   18556:	7a20      	ldrb	r0, [r4, #8]
   18558:	f7ff ff8a 	bl	18470 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1855c:	4620      	mov	r0, r4
   1855e:	f7fe fad1 	bl	16b04 <find_cf_cfg>
	if (!cfg) {
   18562:	4606      	mov	r6, r0
   18564:	2800      	cmp	r0, #0
   18566:	d04e      	beq.n	18606 <bt_gatt_disconnected+0xfa>
		if (conn->id) {
   18568:	7a22      	ldrb	r2, [r4, #8]
		len = 0;
   1856a:	f04f 0801 	mov.w	r8, #1
		str = (char *)cfg->data;
   1856e:	3608      	adds	r6, #8
		if (conn->id) {
   18570:	b162      	cbz	r2, 1858c <bt_gatt_disconnected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   18572:	2104      	movs	r1, #4
   18574:	4638      	mov	r0, r7
   18576:	f00d ff84 	bl	26482 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1857a:	462b      	mov	r3, r5
   1857c:	2124      	movs	r1, #36	; 0x24
   1857e:	4a28      	ldr	r2, [pc, #160]	; (18620 <bt_gatt_disconnected+0x114>)
   18580:	9700      	str	r7, [sp, #0]
   18582:	1d38      	adds	r0, r7, #4
   18584:	f7f9 f9e8 	bl	11958 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   18588:	7a23      	ldrb	r3, [r4, #8]
   1858a:	b93b      	cbnz	r3, 1859c <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1858c:	2300      	movs	r3, #0
   1858e:	2124      	movs	r1, #36	; 0x24
   18590:	9300      	str	r3, [sp, #0]
   18592:	4a23      	ldr	r2, [pc, #140]	; (18620 <bt_gatt_disconnected+0x114>)
   18594:	462b      	mov	r3, r5
   18596:	1d38      	adds	r0, r7, #4
   18598:	f7f9 f9de 	bl	11958 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1859c:	4642      	mov	r2, r8
   1859e:	4631      	mov	r1, r6
   185a0:	1d38      	adds	r0, r7, #4
   185a2:	f7f7 fa8f 	bl	fac4 <settings_save_one>
	if (err) {
   185a6:	b170      	cbz	r0, 185c6 <bt_gatt_disconnected+0xba>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   185a8:	466e      	mov	r6, sp
   185aa:	b088      	sub	sp, #32
   185ac:	aa02      	add	r2, sp, #8
   185ae:	4b1d      	ldr	r3, [pc, #116]	; (18624 <bt_gatt_disconnected+0x118>)
   185b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   185b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   185b8:	2303      	movs	r3, #3
   185ba:	481b      	ldr	r0, [pc, #108]	; (18628 <bt_gatt_disconnected+0x11c>)
   185bc:	f842 3f10 	str.w	r3, [r2, #16]!
   185c0:	f010 fff5 	bl	295ae <z_log_msg_static_create.constprop.0>
   185c4:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   185c6:	4629      	mov	r1, r5
   185c8:	7a20      	ldrb	r0, [r4, #8]
   185ca:	f00f feee 	bl	283aa <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   185ce:	b148      	cbz	r0, 185e4 <bt_gatt_disconnected+0xd8>
		struct addr_with_id addr_with_id = {
   185d0:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   185d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   185d6:	723b      	strb	r3, [r7, #8]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   185d8:	2001      	movs	r0, #1
   185da:	4a14      	ldr	r2, [pc, #80]	; (1862c <bt_gatt_disconnected+0x120>)
		struct addr_with_id addr_with_id = {
   185dc:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   185de:	1d3b      	adds	r3, r7, #4
   185e0:	f011 f85c 	bl	2969c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   185e4:	4620      	mov	r0, r4
   185e6:	f7fe fa8d 	bl	16b04 <find_cf_cfg>
	if (!cfg) {
   185ea:	4606      	mov	r6, r0
   185ec:	b138      	cbz	r0, 185fe <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   185ee:	4629      	mov	r1, r5
   185f0:	7a20      	ldrb	r0, [r4, #8]
   185f2:	f00f feda 	bl	283aa <bt_addr_le_is_bonded>
   185f6:	b940      	cbnz	r0, 1860a <bt_gatt_disconnected+0xfe>
		clear_cf_cfg(cfg);
   185f8:	4630      	mov	r0, r6
   185fa:	f7fe fdb7 	bl	1716c <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   185fe:	3728      	adds	r7, #40	; 0x28
   18600:	46bd      	mov	sp, r7
   18602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   18606:	4680      	mov	r8, r0
   18608:	e7c0      	b.n	1858c <bt_gatt_disconnected+0x80>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1860a:	4629      	mov	r1, r5
   1860c:	1c70      	adds	r0, r6, #1
   1860e:	f010 ff3a 	bl	29486 <bt_addr_le_copy>
}
   18612:	e7f4      	b.n	185fe <bt_gatt_disconnected+0xf2>
   18614:	0001732d 	.word	0x0001732d
   18618:	20009f50 	.word	0x20009f50
   1861c:	20009f58 	.word	0x20009f58
   18620:	0003127b 	.word	0x0003127b
   18624:	0003124f 	.word	0x0003124f
   18628:	0002c804 	.word	0x0002c804
   1862c:	000172cd 	.word	0x000172cd

00018630 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   18630:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   18632:	4b05      	ldr	r3, [pc, #20]	; (18648 <smp_find+0x18>)
{
   18634:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   18636:	4618      	mov	r0, r3
   18638:	f011 f8bc 	bl	297b4 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1863c:	3b04      	subs	r3, #4
   1863e:	2800      	cmp	r0, #0
}
   18640:	bf14      	ite	ne
   18642:	4618      	movne	r0, r3
   18644:	2000      	moveq	r0, #0
   18646:	bd08      	pop	{r3, pc}
   18648:	2000a05c 	.word	0x2000a05c

0001864c <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1864c:	4b08      	ldr	r3, [pc, #32]	; (18670 <latch_auth_cb+0x24>)
   1864e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18652:	681a      	ldr	r2, [r3, #0]
   18654:	4b07      	ldr	r3, [pc, #28]	; (18674 <latch_auth_cb+0x28>)
   18656:	e8d0 1fef 	ldaex	r1, [r0]
   1865a:	4299      	cmp	r1, r3
   1865c:	d104      	bne.n	18668 <latch_auth_cb+0x1c>
   1865e:	e8c0 2fec 	stlex	ip, r2, [r0]
   18662:	f1bc 0f00 	cmp.w	ip, #0
   18666:	d1f6      	bne.n	18656 <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18668:	e8d0 0faf 	lda	r0, [r0]
}
   1866c:	4770      	bx	lr
   1866e:	bf00      	nop
   18670:	200216e0 	.word	0x200216e0
   18674:	2000a058 	.word	0x2000a058

00018678 <get_io_capa>:
{
   18678:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1867a:	f7ff ffe7 	bl	1864c <latch_auth_cb>
	if (!smp_auth_cb) {
   1867e:	4603      	mov	r3, r0
   18680:	b1c8      	cbz	r0, 186b6 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   18682:	e9d0 1200 	ldrd	r1, r2, [r0]
   18686:	b921      	cbnz	r1, 18692 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   18688:	2a00      	cmp	r2, #0
   1868a:	bf0c      	ite	eq
   1868c:	2003      	moveq	r0, #3
   1868e:	2002      	movne	r0, #2
   18690:	e010      	b.n	186b4 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   18692:	b132      	cbz	r2, 186a2 <get_io_capa+0x2a>
   18694:	6883      	ldr	r3, [r0, #8]
   18696:	b913      	cbnz	r3, 1869e <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   18698:	4b09      	ldr	r3, [pc, #36]	; (186c0 <get_io_capa+0x48>)
   1869a:	781b      	ldrb	r3, [r3, #0]
   1869c:	b933      	cbnz	r3, 186ac <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1869e:	2004      	movs	r0, #4
   186a0:	e008      	b.n	186b4 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   186a2:	4907      	ldr	r1, [pc, #28]	; (186c0 <get_io_capa+0x48>)
   186a4:	7808      	ldrb	r0, [r1, #0]
   186a6:	b128      	cbz	r0, 186b4 <get_io_capa+0x3c>
   186a8:	689b      	ldr	r3, [r3, #8]
   186aa:	b933      	cbnz	r3, 186ba <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   186ac:	3a00      	subs	r2, #0
   186ae:	bf18      	it	ne
   186b0:	2201      	movne	r2, #1
   186b2:	0050      	lsls	r0, r2, #1
}
   186b4:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   186b6:	2003      	movs	r0, #3
   186b8:	e7fc      	b.n	186b4 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   186ba:	2001      	movs	r0, #1
   186bc:	e7fa      	b.n	186b4 <get_io_capa+0x3c>
   186be:	bf00      	nop
   186c0:	200224c8 	.word	0x200224c8

000186c4 <get_auth>:
{
   186c4:	b510      	push	{r4, lr}
	if (sc_supported) {
   186c6:	4b0c      	ldr	r3, [pc, #48]	; (186f8 <get_auth+0x34>)
   186c8:	781b      	ldrb	r3, [r3, #0]
   186ca:	b17b      	cbz	r3, 186ec <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   186cc:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   186d0:	f7ff ffd2 	bl	18678 <get_io_capa>
	if (bondable) {
   186d4:	4b09      	ldr	r3, [pc, #36]	; (186fc <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   186d6:	2803      	cmp	r0, #3
	if (bondable) {
   186d8:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   186da:	bf0c      	ite	eq
   186dc:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   186e0:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   186e4:	b12b      	cbz	r3, 186f2 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   186e6:	f044 0001 	orr.w	r0, r4, #1
}
   186ea:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   186ec:	f001 0407 	and.w	r4, r1, #7
   186f0:	e7ee      	b.n	186d0 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   186f2:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   186f6:	e7f8      	b.n	186ea <get_auth+0x26>
   186f8:	200224c8 	.word	0x200224c8
   186fc:	20008b62 	.word	0x20008b62

00018700 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   18700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   18702:	4b06      	ldr	r3, [pc, #24]	; (1871c <bt_smp_pkey_ready.part.0+0x1c>)
   18704:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18708:	9305      	str	r3, [sp, #20]
   1870a:	2302      	movs	r3, #2
   1870c:	4804      	ldr	r0, [pc, #16]	; (18720 <bt_smp_pkey_ready.part.0+0x20>)
   1870e:	aa04      	add	r2, sp, #16
   18710:	9304      	str	r3, [sp, #16]
   18712:	f011 f8a7 	bl	29864 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   18716:	b007      	add	sp, #28
   18718:	f85d fb04 	ldr.w	pc, [sp], #4
   1871c:	0003128c 	.word	0x0003128c
   18720:	0002c854 	.word	0x0002c854

00018724 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18724:	b580      	push	{r7, lr}
   18726:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   18728:	b088      	sub	sp, #32
   1872a:	466a      	mov	r2, sp
   1872c:	4b07      	ldr	r3, [pc, #28]	; (1874c <bt_smp_accept.part.0+0x28>)
   1872e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18732:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18736:	2303      	movs	r3, #3
   18738:	4805      	ldr	r0, [pc, #20]	; (18750 <bt_smp_accept.part.0+0x2c>)
   1873a:	f842 3f10 	str.w	r3, [r2, #16]!
   1873e:	f011 f891 	bl	29864 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   18742:	f06f 000b 	mvn.w	r0, #11
   18746:	46bd      	mov	sp, r7
   18748:	bd80      	pop	{r7, pc}
   1874a:	bf00      	nop
   1874c:	000312a5 	.word	0x000312a5
   18750:	0002c854 	.word	0x0002c854

00018754 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   18754:	4b05      	ldr	r3, [pc, #20]	; (1876c <bt_smp_accept+0x18>)
   18756:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1875a:	b10a      	cbz	r2, 18760 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1875c:	f7ff bfe2 	b.w	18724 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   18760:	4803      	ldr	r0, [pc, #12]	; (18770 <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   18762:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   18764:	6058      	str	r0, [r3, #4]
}
   18766:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   18768:	600b      	str	r3, [r1, #0]
}
   1876a:	4770      	bx	lr
   1876c:	2000a058 	.word	0x2000a058
   18770:	0002d458 	.word	0x0002d458

00018774 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   18774:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   18776:	4b07      	ldr	r3, [pc, #28]	; (18794 <smp_chan_get.part.0+0x20>)
   18778:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1877c:	9305      	str	r3, [sp, #20]
   1877e:	2302      	movs	r3, #2
   18780:	4805      	ldr	r0, [pc, #20]	; (18798 <smp_chan_get.part.0+0x24>)
   18782:	aa04      	add	r2, sp, #16
   18784:	9304      	str	r3, [sp, #16]
   18786:	f011 f86d 	bl	29864 <z_log_msg_static_create.constprop.0>
}
   1878a:	2000      	movs	r0, #0
   1878c:	b007      	add	sp, #28
   1878e:	f85d fb04 	ldr.w	pc, [sp], #4
   18792:	bf00      	nop
   18794:	000312ca 	.word	0x000312ca
   18798:	0002c854 	.word	0x0002c854

0001879c <smp_init>:
{
   1879c:	b538      	push	{r3, r4, r5, lr}
   1879e:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   187a0:	22ec      	movs	r2, #236	; 0xec
   187a2:	2100      	movs	r1, #0
   187a4:	f013 f8fc 	bl	2b9a0 <memset>
	if (bt_rand(smp->prnd, 16)) {
   187a8:	2110      	movs	r1, #16
   187aa:	f105 0027 	add.w	r0, r5, #39	; 0x27
   187ae:	f7fb fd49 	bl	14244 <bt_rand>
   187b2:	4604      	mov	r4, r0
   187b4:	b948      	cbnz	r0, 187ca <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   187b6:	2105      	movs	r1, #5
   187b8:	4628      	mov	r0, r5
   187ba:	f011 f861 	bl	29880 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   187be:	f7fb fdf5 	bl	143ac <bt_pub_key_get>
   187c2:	4b03      	ldr	r3, [pc, #12]	; (187d0 <smp_init+0x34>)
   187c4:	6018      	str	r0, [r3, #0]
}
   187c6:	4620      	mov	r0, r4
   187c8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   187ca:	2408      	movs	r4, #8
   187cc:	e7fb      	b.n	187c6 <smp_init+0x2a>
   187ce:	bf00      	nop
   187d0:	20021808 	.word	0x20021808

000187d4 <smp_dhkey_generate>:
{
   187d4:	b530      	push	{r4, r5, lr}
   187d6:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   187d8:	1d05      	adds	r5, r0, #4
   187da:	2108      	movs	r1, #8
   187dc:	4628      	mov	r0, r5
{
   187de:	b087      	sub	sp, #28
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   187e0:	f011 f84e 	bl	29880 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   187e4:	490b      	ldr	r1, [pc, #44]	; (18814 <smp_dhkey_generate+0x40>)
   187e6:	f104 0057 	add.w	r0, r4, #87	; 0x57
   187ea:	f7fb fded 	bl	143c8 <bt_dh_key_gen>
	if (err) {
   187ee:	b170      	cbz	r0, 1880e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   187f0:	2108      	movs	r1, #8
   187f2:	4628      	mov	r0, r5
   187f4:	f011 f805 	bl	29802 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   187f8:	4b07      	ldr	r3, [pc, #28]	; (18818 <smp_dhkey_generate+0x44>)
   187fa:	4808      	ldr	r0, [pc, #32]	; (1881c <smp_dhkey_generate+0x48>)
   187fc:	9305      	str	r3, [sp, #20]
   187fe:	2302      	movs	r3, #2
   18800:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18804:	aa04      	add	r2, sp, #16
   18806:	9304      	str	r3, [sp, #16]
   18808:	f011 f82c 	bl	29864 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1880c:	2008      	movs	r0, #8
}
   1880e:	b007      	add	sp, #28
   18810:	bd30      	pop	{r4, r5, pc}
   18812:	bf00      	nop
   18814:	00029c59 	.word	0x00029c59
   18818:	000312e5 	.word	0x000312e5
   1881c:	0002c854 	.word	0x0002c854

00018820 <smp_ident_info>:
{
   18820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18822:	4605      	mov	r5, r0
   18824:	460b      	mov	r3, r1
   18826:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18828:	210d      	movs	r1, #13
   1882a:	3004      	adds	r0, #4
   1882c:	f010 ffc2 	bl	297b4 <atomic_test_bit>
   18830:	b368      	cbz	r0, 1888e <smp_ident_info+0x6e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   18832:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18834:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   18838:	2002      	movs	r0, #2
   1883a:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1883e:	4632      	mov	r2, r6
   18840:	7a19      	ldrb	r1, [r3, #8]
   18842:	f001 fd5b 	bl	1a2fc <bt_keys_get_type>
		if (!keys) {
   18846:	b9b8      	cbnz	r0, 18878 <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18848:	4630      	mov	r0, r6
   1884a:	f7f8 ffaf 	bl	117ac <bt_addr_le_str>
   1884e:	466c      	mov	r4, sp
   18850:	b088      	sub	sp, #32
   18852:	466a      	mov	r2, sp
   18854:	4b11      	ldr	r3, [pc, #68]	; (1889c <smp_ident_info+0x7c>)
   18856:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1885a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1885e:	f44f 7300 	mov.w	r3, #512	; 0x200
   18862:	8393      	strh	r3, [r2, #28]
   18864:	4b0e      	ldr	r3, [pc, #56]	; (188a0 <smp_ident_info+0x80>)
   18866:	480f      	ldr	r0, [pc, #60]	; (188a4 <smp_ident_info+0x84>)
   18868:	f842 3f10 	str.w	r3, [r2, #16]!
   1886c:	f010 fffa 	bl	29864 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18870:	2008      	movs	r0, #8
   18872:	46a5      	mov	sp, r4
}
   18874:	46bd      	mov	sp, r7
   18876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18878:	4622      	mov	r2, r4
   1887a:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   1887e:	f104 0110 	add.w	r1, r4, #16
   18882:	f852 0b04 	ldr.w	r0, [r2], #4
   18886:	428a      	cmp	r2, r1
   18888:	f843 0b04 	str.w	r0, [r3], #4
   1888c:	d1f9      	bne.n	18882 <smp_ident_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1888e:	4628      	mov	r0, r5
   18890:	2109      	movs	r1, #9
   18892:	f010 fff5 	bl	29880 <atomic_set_bit>
	return 0;
   18896:	2000      	movs	r0, #0
   18898:	e7ec      	b.n	18874 <smp_ident_info+0x54>
   1889a:	bf00      	nop
   1889c:	000312fe 	.word	0x000312fe
   188a0:	01000003 	.word	0x01000003
   188a4:	0002c854 	.word	0x0002c854

000188a8 <smp_encrypt_info>:
{
   188a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188aa:	4605      	mov	r5, r0
   188ac:	460b      	mov	r3, r1
   188ae:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   188b0:	210d      	movs	r1, #13
   188b2:	3004      	adds	r0, #4
   188b4:	f010 ff7e 	bl	297b4 <atomic_test_bit>
   188b8:	b368      	cbz	r0, 18916 <smp_encrypt_info+0x6e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   188ba:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   188bc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   188c0:	2004      	movs	r0, #4
   188c2:	f103 0690 	add.w	r6, r3, #144	; 0x90
   188c6:	4632      	mov	r2, r6
   188c8:	7a19      	ldrb	r1, [r3, #8]
   188ca:	f001 fd17 	bl	1a2fc <bt_keys_get_type>
		if (!keys) {
   188ce:	b9b8      	cbnz	r0, 18900 <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   188d0:	4630      	mov	r0, r6
   188d2:	f7f8 ff6b 	bl	117ac <bt_addr_le_str>
   188d6:	466c      	mov	r4, sp
   188d8:	b088      	sub	sp, #32
   188da:	466a      	mov	r2, sp
   188dc:	4b11      	ldr	r3, [pc, #68]	; (18924 <smp_encrypt_info+0x7c>)
   188de:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   188e2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   188e6:	f44f 7300 	mov.w	r3, #512	; 0x200
   188ea:	8393      	strh	r3, [r2, #28]
   188ec:	4b0e      	ldr	r3, [pc, #56]	; (18928 <smp_encrypt_info+0x80>)
   188ee:	480f      	ldr	r0, [pc, #60]	; (1892c <smp_encrypt_info+0x84>)
   188f0:	f842 3f10 	str.w	r3, [r2, #16]!
   188f4:	f010 ffb6 	bl	29864 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   188f8:	2008      	movs	r0, #8
   188fa:	46a5      	mov	sp, r4
}
   188fc:	46bd      	mov	sp, r7
   188fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18900:	4622      	mov	r2, r4
   18902:	f100 031a 	add.w	r3, r0, #26
   18906:	f104 0110 	add.w	r1, r4, #16
   1890a:	f852 0b04 	ldr.w	r0, [r2], #4
   1890e:	428a      	cmp	r2, r1
   18910:	f843 0b04 	str.w	r0, [r3], #4
   18914:	d1f9      	bne.n	1890a <smp_encrypt_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   18916:	4628      	mov	r0, r5
   18918:	2107      	movs	r1, #7
   1891a:	f010 ffb1 	bl	29880 <atomic_set_bit>
	return 0;
   1891e:	2000      	movs	r0, #0
   18920:	e7ec      	b.n	188fc <smp_encrypt_info+0x54>
   18922:	bf00      	nop
   18924:	000312fe 	.word	0x000312fe
   18928:	01000003 	.word	0x01000003
   1892c:	0002c854 	.word	0x0002c854

00018930 <smp_send_pairing_confirm>:
{
   18930:	b5f0      	push	{r4, r5, r6, r7, lr}
   18932:	b083      	sub	sp, #12
	switch (smp->method) {
   18934:	7a04      	ldrb	r4, [r0, #8]
{
   18936:	4605      	mov	r5, r0
	switch (smp->method) {
   18938:	2c02      	cmp	r4, #2
{
   1893a:	af02      	add	r7, sp, #8
	switch (smp->method) {
   1893c:	d823      	bhi.n	18986 <smp_send_pairing_confirm+0x56>
   1893e:	b144      	cbz	r4, 18952 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18940:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   18944:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   18948:	40dc      	lsrs	r4, r3
   1894a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1894e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   18952:	2103      	movs	r1, #3
   18954:	4628      	mov	r0, r5
   18956:	f010 ffa3 	bl	298a0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1895a:	4606      	mov	r6, r0
   1895c:	b320      	cbz	r0, 189a8 <smp_send_pairing_confirm+0x78>
   1895e:	2110      	movs	r1, #16
   18960:	300c      	adds	r0, #12
   18962:	f002 fa79 	bl	1ae58 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18966:	9000      	str	r0, [sp, #0]
   18968:	4818      	ldr	r0, [pc, #96]	; (189cc <smp_send_pairing_confirm+0x9c>)
   1896a:	4623      	mov	r3, r4
   1896c:	6800      	ldr	r0, [r0, #0]
   1896e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   18972:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18976:	f011 fa15 	bl	29da4 <bt_crypto_f4>
   1897a:	4604      	mov	r4, r0
   1897c:	b1d0      	cbz	r0, 189b4 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   1897e:	4630      	mov	r0, r6
   18980:	f002 f948 	bl	1ac14 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   18984:	e010      	b.n	189a8 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   18986:	2c03      	cmp	r4, #3
   18988:	d012      	beq.n	189b0 <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1898a:	466d      	mov	r5, sp
   1898c:	b088      	sub	sp, #32
   1898e:	aa02      	add	r2, sp, #8
   18990:	4b0f      	ldr	r3, [pc, #60]	; (189d0 <smp_send_pairing_confirm+0xa0>)
   18992:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (smp->method) {
   18996:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1899a:	2303      	movs	r3, #3
   1899c:	480d      	ldr	r0, [pc, #52]	; (189d4 <smp_send_pairing_confirm+0xa4>)
   1899e:	f842 3f10 	str.w	r3, [r2, #16]!
   189a2:	f010 ff5f 	bl	29864 <z_log_msg_static_create.constprop.0>
   189a6:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   189a8:	2008      	movs	r0, #8
}
   189aa:	3704      	adds	r7, #4
   189ac:	46bd      	mov	sp, r7
   189ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   189b0:	2400      	movs	r4, #0
   189b2:	e7ce      	b.n	18952 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   189b4:	4602      	mov	r2, r0
   189b6:	4631      	mov	r1, r6
   189b8:	4628      	mov	r0, r5
   189ba:	f010 ff36 	bl	2982a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   189be:	1d28      	adds	r0, r5, #4
   189c0:	4621      	mov	r1, r4
   189c2:	f010 ff1e 	bl	29802 <atomic_clear_bit>
	return 0;
   189c6:	4620      	mov	r0, r4
   189c8:	e7ef      	b.n	189aa <smp_send_pairing_confirm+0x7a>
   189ca:	bf00      	nop
   189cc:	20021808 	.word	0x20021808
   189d0:	00031318 	.word	0x00031318
   189d4:	0002c854 	.word	0x0002c854

000189d8 <smp_public_key_periph>:
{
   189d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189dc:	b086      	sub	sp, #24
   189de:	4604      	mov	r4, r0
   189e0:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   189e2:	f7ff fe33 	bl	1864c <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   189e6:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   189e8:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   189ea:	210e      	movs	r1, #14
   189ec:	4628      	mov	r0, r5
   189ee:	f010 fee1 	bl	297b4 <atomic_test_bit>
   189f2:	b9a0      	cbnz	r0, 18a1e <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   189f4:	4b54      	ldr	r3, [pc, #336]	; (18b48 <smp_public_key_periph+0x170>)
   189f6:	2220      	movs	r2, #32
   189f8:	6819      	ldr	r1, [r3, #0]
   189fa:	f104 0057 	add.w	r0, r4, #87	; 0x57
   189fe:	f012 ff85 	bl	2b90c <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18a02:	b960      	cbnz	r0, 18a1e <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   18a04:	4b51      	ldr	r3, [pc, #324]	; (18b4c <smp_public_key_periph+0x174>)
   18a06:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18a0a:	617b      	str	r3, [r7, #20]
   18a0c:	2302      	movs	r3, #2
   18a0e:	4850      	ldr	r0, [pc, #320]	; (18b50 <smp_public_key_periph+0x178>)
   18a10:	613b      	str	r3, [r7, #16]
   18a12:	f107 0210 	add.w	r2, r7, #16
   18a16:	f010 ff25 	bl	29864 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18a1a:	2008      	movs	r0, #8
   18a1c:	e034      	b.n	18a88 <smp_public_key_periph+0xb0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   18a1e:	210c      	movs	r1, #12
   18a20:	4620      	mov	r0, r4
   18a22:	f010 ff3d 	bl	298a0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18a26:	4680      	mov	r8, r0
   18a28:	2800      	cmp	r0, #0
   18a2a:	d0f6      	beq.n	18a1a <smp_public_key_periph+0x42>
   18a2c:	2140      	movs	r1, #64	; 0x40
   18a2e:	300c      	adds	r0, #12
   18a30:	f002 fa12 	bl	1ae58 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18a34:	4b44      	ldr	r3, [pc, #272]	; (18b48 <smp_public_key_periph+0x170>)
   18a36:	4602      	mov	r2, r0
   18a38:	681b      	ldr	r3, [r3, #0]
   18a3a:	4601      	mov	r1, r0
   18a3c:	f103 0020 	add.w	r0, r3, #32
   18a40:	f853 cb04 	ldr.w	ip, [r3], #4
   18a44:	4283      	cmp	r3, r0
   18a46:	f841 cb04 	str.w	ip, [r1], #4
   18a4a:	d1f9      	bne.n	18a40 <smp_public_key_periph+0x68>
   18a4c:	3220      	adds	r2, #32
   18a4e:	f103 0120 	add.w	r1, r3, #32
   18a52:	f853 0b04 	ldr.w	r0, [r3], #4
   18a56:	428b      	cmp	r3, r1
   18a58:	f842 0b04 	str.w	r0, [r2], #4
   18a5c:	d1f9      	bne.n	18a52 <smp_public_key_periph+0x7a>
	smp_send(smp, req_buf, NULL, NULL);
   18a5e:	2200      	movs	r2, #0
   18a60:	4641      	mov	r1, r8
   18a62:	4620      	mov	r0, r4
   18a64:	f010 fee1 	bl	2982a <smp_send.constprop.0>
	switch (smp->method) {
   18a68:	7a23      	ldrb	r3, [r4, #8]
   18a6a:	2b05      	cmp	r3, #5
   18a6c:	d85a      	bhi.n	18b24 <smp_public_key_periph+0x14c>
   18a6e:	e8df f003 	tbb	[pc, r3]
   18a72:	3b03      	.short	0x3b03
   18a74:	5659030f 	.word	0x5659030f
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18a78:	2104      	movs	r1, #4
   18a7a:	4620      	mov	r0, r4
   18a7c:	f010 ff00 	bl	29880 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   18a80:	f7ff ff56 	bl	18930 <smp_send_pairing_confirm>
		if (err) {
   18a84:	2800      	cmp	r0, #0
   18a86:	d03e      	beq.n	18b06 <smp_public_key_periph+0x12e>
}
   18a88:	3718      	adds	r7, #24
   18a8a:	46bd      	mov	sp, r7
   18a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18a90:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   18a92:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18a96:	f7ff fdd9 	bl	1864c <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18a9a:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18a9c:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18a9e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   18aa2:	f7fb fbcf 	bl	14244 <bt_rand>
   18aa6:	2800      	cmp	r0, #0
   18aa8:	d1b7      	bne.n	18a1a <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   18aaa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18aae:	4a29      	ldr	r2, [pc, #164]	; (18b54 <smp_public_key_periph+0x17c>)
	smp->passkey_round = 0U;
   18ab0:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   18ab4:	fbb3 f1f2 	udiv	r1, r3, r2
   18ab8:	fb02 3311 	mls	r3, r2, r1, r3
   18abc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   18ac0:	b156      	cbz	r6, 18ad8 <smp_public_key_periph+0x100>
   18ac2:	6833      	ldr	r3, [r6, #0]
   18ac4:	b143      	cbz	r3, 18ad8 <smp_public_key_periph+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18ac6:	210b      	movs	r1, #11
   18ac8:	4628      	mov	r0, r5
   18aca:	f010 fed9 	bl	29880 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   18ace:	4640      	mov	r0, r8
   18ad0:	6833      	ldr	r3, [r6, #0]
   18ad2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   18ad6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18ad8:	2103      	movs	r1, #3
   18ada:	4620      	mov	r0, r4
   18adc:	f010 fed0 	bl	29880 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18ae0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18ae2:	f010 fecd 	bl	29880 <atomic_set_bit>
		break;
   18ae6:	e00e      	b.n	18b06 <smp_public_key_periph+0x12e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18ae8:	4620      	mov	r0, r4
   18aea:	2103      	movs	r1, #3
   18aec:	f010 fec8 	bl	29880 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18af0:	210e      	movs	r1, #14
   18af2:	f010 fec5 	bl	29880 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18af6:	4628      	mov	r0, r5
   18af8:	210a      	movs	r1, #10
   18afa:	f010 fec1 	bl	29880 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   18afe:	6873      	ldr	r3, [r6, #4]
   18b00:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18b04:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   18b06:	4628      	mov	r0, r5
   18b08:	2107      	movs	r1, #7
   18b0a:	f010 feb9 	bl	29880 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18b0e:	2008      	movs	r0, #8
   18b10:	f7ff fd8e 	bl	18630 <smp_find>
   18b14:	b9b0      	cbnz	r0, 18b44 <smp_public_key_periph+0x16c>
		return smp_dhkey_generate(smp);
   18b16:	4620      	mov	r0, r4
   18b18:	f7ff fe5c 	bl	187d4 <smp_dhkey_generate>
   18b1c:	e7b4      	b.n	18a88 <smp_public_key_periph+0xb0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18b1e:	2104      	movs	r1, #4
   18b20:	4620      	mov	r0, r4
   18b22:	e7de      	b.n	18ae2 <smp_public_key_periph+0x10a>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18b24:	466c      	mov	r4, sp
   18b26:	b088      	sub	sp, #32
   18b28:	466a      	mov	r2, sp
   18b2a:	490b      	ldr	r1, [pc, #44]	; (18b58 <smp_public_key_periph+0x180>)
   18b2c:	4808      	ldr	r0, [pc, #32]	; (18b50 <smp_public_key_periph+0x178>)
	switch (smp->method) {
   18b2e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18b32:	2303      	movs	r3, #3
   18b34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18b38:	f842 3f10 	str.w	r3, [r2, #16]!
   18b3c:	f010 fe92 	bl	29864 <z_log_msg_static_create.constprop.0>
   18b40:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   18b42:	e76a      	b.n	18a1a <smp_public_key_periph+0x42>
	return 0;
   18b44:	2000      	movs	r0, #0
   18b46:	e79f      	b.n	18a88 <smp_public_key_periph+0xb0>
   18b48:	20021808 	.word	0x20021808
   18b4c:	00031334 	.word	0x00031334
   18b50:	0002c854 	.word	0x0002c854
   18b54:	000f4240 	.word	0x000f4240
   18b58:	00031318 	.word	0x00031318

00018b5c <smp_public_key>:
{
   18b5c:	b530      	push	{r4, r5, lr}
   18b5e:	4604      	mov	r4, r0
   18b60:	460d      	mov	r5, r1
   18b62:	b087      	sub	sp, #28
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18b64:	f7ff fd72 	bl	1864c <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18b68:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18b6c:	4602      	mov	r2, r0
   18b6e:	68eb      	ldr	r3, [r5, #12]
   18b70:	f103 0120 	add.w	r1, r3, #32
   18b74:	f853 5b04 	ldr.w	r5, [r3], #4
   18b78:	428b      	cmp	r3, r1
   18b7a:	f842 5b04 	str.w	r5, [r2], #4
   18b7e:	d1f9      	bne.n	18b74 <smp_public_key+0x18>
   18b80:	f104 0277 	add.w	r2, r4, #119	; 0x77
   18b84:	f103 0120 	add.w	r1, r3, #32
   18b88:	f853 5b04 	ldr.w	r5, [r3], #4
   18b8c:	428b      	cmp	r3, r1
   18b8e:	f842 5b04 	str.w	r5, [r2], #4
   18b92:	d1f9      	bne.n	18b88 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18b94:	f7fb fb74 	bl	14280 <bt_pub_key_is_debug>
   18b98:	b940      	cbnz	r0, 18bac <smp_public_key+0x50>
	if (!sc_public_key) {
   18b9a:	4b1c      	ldr	r3, [pc, #112]	; (18c0c <smp_public_key+0xb0>)
   18b9c:	681d      	ldr	r5, [r3, #0]
   18b9e:	bb75      	cbnz	r5, 18bfe <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   18ba0:	1d20      	adds	r0, r4, #4
   18ba2:	2106      	movs	r1, #6
   18ba4:	f010 fe6c 	bl	29880 <atomic_set_bit>
	return 0;
   18ba8:	4628      	mov	r0, r5
		return 0;
   18baa:	e026      	b.n	18bfa <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   18bac:	4b18      	ldr	r3, [pc, #96]	; (18c10 <smp_public_key+0xb4>)
   18bae:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   18bb2:	9305      	str	r3, [sp, #20]
   18bb4:	2302      	movs	r3, #2
   18bb6:	4817      	ldr	r0, [pc, #92]	; (18c14 <smp_public_key+0xb8>)
   18bb8:	aa04      	add	r2, sp, #16
   18bba:	9304      	str	r3, [sp, #16]
   18bbc:	f010 fe52 	bl	29864 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18bc0:	210e      	movs	r1, #14
   18bc2:	1d20      	adds	r0, r4, #4
   18bc4:	f010 fe5c 	bl	29880 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   18bc8:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   18bcc:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18bd0:	b933      	cbnz	r3, 18be0 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18bd2:	7a28      	ldrb	r0, [r5, #8]
   18bd4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   18bd8:	f001 fa8e 	bl	1a0f8 <bt_keys_get_addr>
   18bdc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   18be0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18be4:	2b00      	cmp	r3, #0
   18be6:	d0d8      	beq.n	18b9a <smp_public_key+0x3e>
   18be8:	89da      	ldrh	r2, [r3, #14]
   18bea:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18bee:	2a00      	cmp	r2, #0
   18bf0:	d0d3      	beq.n	18b9a <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18bf2:	7b5b      	ldrb	r3, [r3, #13]
   18bf4:	079b      	lsls	r3, r3, #30
   18bf6:	d4d0      	bmi.n	18b9a <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18bf8:	2003      	movs	r0, #3
}
   18bfa:	b007      	add	sp, #28
   18bfc:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   18bfe:	4620      	mov	r0, r4
}
   18c00:	b007      	add	sp, #28
   18c02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   18c06:	f7ff bee7 	b.w	189d8 <smp_public_key_periph>
   18c0a:	bf00      	nop
   18c0c:	20021808 	.word	0x20021808
   18c10:	0003134f 	.word	0x0003134f
   18c14:	0002c854 	.word	0x0002c854

00018c18 <smp_pairing_req>:
{
   18c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18c1c:	b087      	sub	sp, #28
   18c1e:	460d      	mov	r5, r1
   18c20:	af00      	add	r7, sp, #0
   18c22:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18c24:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18c28:	f7ff fd10 	bl	1864c <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   18c2c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18c30:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18c32:	f899 3003 	ldrb.w	r3, [r9, #3]
   18c36:	3b07      	subs	r3, #7
   18c38:	2b09      	cmp	r3, #9
   18c3a:	d904      	bls.n	18c46 <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   18c3c:	2006      	movs	r0, #6
}
   18c3e:	371c      	adds	r7, #28
   18c40:	46bd      	mov	sp, r7
   18c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   18c46:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   18c4a:	b15b      	cbz	r3, 18c64 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   18c4c:	1d25      	adds	r5, r4, #4
   18c4e:	210f      	movs	r1, #15
   18c50:	4628      	mov	r0, r5
   18c52:	f010 fdaf 	bl	297b4 <atomic_test_bit>
   18c56:	b980      	cbnz	r0, 18c7a <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   18c58:	4620      	mov	r0, r4
   18c5a:	f7ff fd9f 	bl	1879c <smp_init>
		if (ret) {
   18c5e:	b160      	cbz	r0, 18c7a <smp_pairing_req+0x62>
			return ret;
   18c60:	b2c0      	uxtb	r0, r0
   18c62:	e7ec      	b.n	18c3e <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18c64:	7a30      	ldrb	r0, [r6, #8]
   18c66:	f106 0190 	add.w	r1, r6, #144	; 0x90
   18c6a:	f001 fa45 	bl	1a0f8 <bt_keys_get_addr>
   18c6e:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   18c72:	2800      	cmp	r0, #0
   18c74:	d1ea      	bne.n	18c4c <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   18c76:	2008      	movs	r0, #8
   18c78:	e7e1      	b.n	18c3e <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   18c7a:	2301      	movs	r3, #1
   18c7c:	7263      	strb	r3, [r4, #9]
   18c7e:	f8d9 3000 	ldr.w	r3, [r9]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18c82:	4620      	mov	r0, r4
   18c84:	f8c4 300a 	str.w	r3, [r4, #10]
   18c88:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   18c8c:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   18c8e:	2302      	movs	r3, #2
   18c90:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18c92:	f899 1002 	ldrb.w	r1, [r9, #2]
   18c96:	f7ff fd15 	bl	186c4 <get_auth>
   18c9a:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   18c9c:	4620      	mov	r0, r4
   18c9e:	f7ff fceb 	bl	18678 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18ca2:	4bac      	ldr	r3, [pc, #688]	; (18f54 <smp_pairing_req+0x33c>)
	rsp->io_capability = get_io_capa(smp);
   18ca4:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18ca6:	781b      	ldrb	r3, [r3, #0]
   18ca8:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   18caa:	2310      	movs	r3, #16
   18cac:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   18cae:	f899 3004 	ldrb.w	r3, [r9, #4]
   18cb2:	f003 0303 	and.w	r3, r3, #3
   18cb6:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   18cb8:	f899 3005 	ldrb.w	r3, [r9, #5]
   18cbc:	f003 0301 	and.w	r3, r3, #1
   18cc0:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   18cc2:	7ce3      	ldrb	r3, [r4, #19]
   18cc4:	071b      	lsls	r3, r3, #28
   18cc6:	d50d      	bpl.n	18ce4 <smp_pairing_req+0xcc>
   18cc8:	f899 3002 	ldrb.w	r3, [r9, #2]
   18ccc:	0718      	lsls	r0, r3, #28
   18cce:	d509      	bpl.n	18ce4 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   18cd0:	2105      	movs	r1, #5
   18cd2:	4628      	mov	r0, r5
   18cd4:	f010 fdd4 	bl	29880 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   18cd8:	7d63      	ldrb	r3, [r4, #21]
   18cda:	f003 0302 	and.w	r3, r3, #2
   18cde:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   18ce0:	2300      	movs	r3, #0
   18ce2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   18ce4:	7ce3      	ldrb	r3, [r4, #19]
   18ce6:	0699      	lsls	r1, r3, #26
   18ce8:	d507      	bpl.n	18cfa <smp_pairing_req+0xe2>
   18cea:	f899 3002 	ldrb.w	r3, [r9, #2]
   18cee:	069a      	lsls	r2, r3, #26
   18cf0:	d503      	bpl.n	18cfa <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   18cf2:	2114      	movs	r1, #20
   18cf4:	4628      	mov	r0, r5
   18cf6:	f010 fdc3 	bl	29880 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   18cfa:	7da3      	ldrb	r3, [r4, #22]
   18cfc:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   18d00:	7d63      	ldrb	r3, [r4, #21]
   18d02:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   18d06:	7ce3      	ldrb	r3, [r4, #19]
   18d08:	07db      	lsls	r3, r3, #31
   18d0a:	d507      	bpl.n	18d1c <smp_pairing_req+0x104>
   18d0c:	f899 3002 	ldrb.w	r3, [r9, #2]
   18d10:	07d8      	lsls	r0, r3, #31
   18d12:	d503      	bpl.n	18d1c <smp_pairing_req+0x104>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   18d14:	210d      	movs	r1, #13
   18d16:	4628      	mov	r0, r5
   18d18:	f010 fdb2 	bl	29880 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   18d1c:	2103      	movs	r1, #3
   18d1e:	4628      	mov	r0, r5
   18d20:	f010 fdae 	bl	29880 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18d24:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   18d26:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18d2a:	f010 fd43 	bl	297b4 <atomic_test_bit>
   18d2e:	bb40      	cbnz	r0, 18d82 <smp_pairing_req+0x16a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   18d30:	f1b9 0f04 	cmp.w	r9, #4
   18d34:	d845      	bhi.n	18dc2 <smp_pairing_req+0x1aa>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   18d36:	7ae3      	ldrb	r3, [r4, #11]
   18d38:	7ca2      	ldrb	r2, [r4, #18]
   18d3a:	4013      	ands	r3, r2
   18d3c:	07d9      	lsls	r1, r3, #31
   18d3e:	d43e      	bmi.n	18dbe <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   18d40:	7b21      	ldrb	r1, [r4, #12]
   18d42:	7ce3      	ldrb	r3, [r4, #19]
   18d44:	4319      	orrs	r1, r3
   18d46:	f011 0104 	ands.w	r1, r1, #4
   18d4a:	d011      	beq.n	18d70 <smp_pairing_req+0x158>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   18d4c:	4620      	mov	r0, r4
   18d4e:	f7ff fc93 	bl	18678 <get_io_capa>
   18d52:	4b81      	ldr	r3, [pc, #516]	; (18f58 <smp_pairing_req+0x340>)
   18d54:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   18d58:	4499      	add	r9, r3
   18d5a:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   18d5e:	2904      	cmp	r1, #4
   18d60:	d106      	bne.n	18d70 <smp_pairing_req+0x158>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   18d62:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   18d66:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   18d68:	2b00      	cmp	r3, #0
   18d6a:	bf14      	ite	ne
   18d6c:	2101      	movne	r1, #1
   18d6e:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   18d70:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   18d72:	4620      	mov	r0, r4
   18d74:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   18d78:	f010 fd22 	bl	297c0 <update_keys_check>
   18d7c:	bb18      	cbnz	r0, 18dc6 <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18d7e:	2003      	movs	r0, #3
   18d80:	e75d      	b.n	18c3e <smp_pairing_req+0x26>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   18d82:	7b23      	ldrb	r3, [r4, #12]
   18d84:	7ce0      	ldrb	r0, [r4, #19]
   18d86:	ea03 0200 	and.w	r2, r3, r0
   18d8a:	0712      	lsls	r2, r2, #28
   18d8c:	d506      	bpl.n	18d9c <smp_pairing_req+0x184>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   18d8e:	7ae2      	ldrb	r2, [r4, #11]
   18d90:	f894 c012 	ldrb.w	ip, [r4, #18]
   18d94:	ea42 020c 	orr.w	r2, r2, ip
   18d98:	07d2      	lsls	r2, r2, #31
   18d9a:	d4e9      	bmi.n	18d70 <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   18d9c:	f1b9 0f04 	cmp.w	r9, #4
   18da0:	d80f      	bhi.n	18dc2 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   18da2:	ea43 0100 	orr.w	r1, r3, r0
   18da6:	f011 0104 	ands.w	r1, r1, #4
   18daa:	d0e1      	beq.n	18d70 <smp_pairing_req+0x158>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   18dac:	4620      	mov	r0, r4
   18dae:	f7ff fc63 	bl	18678 <get_io_capa>
   18db2:	4b6a      	ldr	r3, [pc, #424]	; (18f5c <smp_pairing_req+0x344>)
   18db4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   18db8:	444b      	add	r3, r9
   18dba:	5c19      	ldrb	r1, [r3, r0]
   18dbc:	e7d8      	b.n	18d70 <smp_pairing_req+0x158>
		return LEGACY_OOB;
   18dbe:	2106      	movs	r1, #6
   18dc0:	e7d6      	b.n	18d70 <smp_pairing_req+0x158>
		return JUST_WORKS;
   18dc2:	2100      	movs	r1, #0
   18dc4:	e7d4      	b.n	18d70 <smp_pairing_req+0x158>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   18dc6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   18dca:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   18dcc:	2b03      	cmp	r3, #3
   18dce:	d03e      	beq.n	18e4e <smp_pairing_req+0x236>
   18dd0:	d82c      	bhi.n	18e2c <smp_pairing_req+0x214>
   18dd2:	3b01      	subs	r3, #1
   18dd4:	2b01      	cmp	r3, #1
   18dd6:	f63f af4e 	bhi.w	18c76 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18dda:	2105      	movs	r1, #5
   18ddc:	4628      	mov	r0, r5
   18dde:	f010 fce9 	bl	297b4 <atomic_test_bit>
   18de2:	2800      	cmp	r0, #0
   18de4:	f040 80c4 	bne.w	18f70 <smp_pairing_req+0x358>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18de8:	4620      	mov	r0, r4
   18dea:	f7ff fc2f 	bl	1864c <latch_auth_cb>
   18dee:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18df0:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   18df2:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18df6:	f7ff fc29 	bl	1864c <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   18dfa:	f109 0190 	add.w	r1, r9, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18dfe:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   18e00:	f899 0008 	ldrb.w	r0, [r9, #8]
   18e04:	f001 fa3e 	bl	1a284 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   18e08:	7a23      	ldrb	r3, [r4, #8]
   18e0a:	b320      	cbz	r0, 18e56 <smp_pairing_req+0x23e>
   18e0c:	7b42      	ldrb	r2, [r0, #13]
   18e0e:	07d2      	lsls	r2, r2, #31
   18e10:	d521      	bpl.n	18e56 <smp_pairing_req+0x23e>
   18e12:	bb03      	cbnz	r3, 18e56 <smp_pairing_req+0x23e>
		LOG_ERR("JustWorks failed, authenticated keys present");
   18e14:	4b52      	ldr	r3, [pc, #328]	; (18f60 <smp_pairing_req+0x348>)
   18e16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18e1a:	617b      	str	r3, [r7, #20]
   18e1c:	2302      	movs	r3, #2
   18e1e:	4851      	ldr	r0, [pc, #324]	; (18f64 <smp_pairing_req+0x34c>)
   18e20:	613b      	str	r3, [r7, #16]
   18e22:	f107 0210 	add.w	r2, r7, #16
   18e26:	f010 fd1d 	bl	29864 <z_log_msg_static_create.constprop.0>
	if (ret) {
   18e2a:	e724      	b.n	18c76 <smp_pairing_req+0x5e>
	switch (sec) {
   18e2c:	2b04      	cmp	r3, #4
   18e2e:	f47f af22 	bne.w	18c76 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   18e32:	7d23      	ldrb	r3, [r4, #20]
   18e34:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   18e36:	4293      	cmp	r3, r2
   18e38:	bf28      	it	cs
   18e3a:	4613      	movcs	r3, r2
   18e3c:	2b10      	cmp	r3, #16
   18e3e:	f47f aefd 	bne.w	18c3c <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18e42:	2105      	movs	r1, #5
   18e44:	4628      	mov	r0, r5
   18e46:	f010 fcb5 	bl	297b4 <atomic_test_bit>
   18e4a:	2800      	cmp	r0, #0
   18e4c:	d097      	beq.n	18d7e <smp_pairing_req+0x166>
		if (smp->method == JUST_WORKS) {
   18e4e:	7a23      	ldrb	r3, [r4, #8]
   18e50:	2b00      	cmp	r3, #0
   18e52:	d1c2      	bne.n	18dda <smp_pairing_req+0x1c2>
   18e54:	e793      	b.n	18d7e <smp_pairing_req+0x166>
	switch (smp->method) {
   18e56:	2b06      	cmp	r3, #6
   18e58:	d85f      	bhi.n	18f1a <smp_pairing_req+0x302>
   18e5a:	e8df f003 	tbb	[pc, r3]
   18e5e:	5617      	.short	0x5617
   18e60:	5e5e5e2f 	.word	0x5e5e5e2f
   18e64:	04          	.byte	0x04
   18e65:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   18e66:	2e00      	cmp	r6, #0
   18e68:	d067      	beq.n	18f3a <smp_pairing_req+0x322>
   18e6a:	68f3      	ldr	r3, [r6, #12]
   18e6c:	2b00      	cmp	r3, #0
   18e6e:	d064      	beq.n	18f3a <smp_pairing_req+0x322>
			struct bt_conn_oob_info info = {
   18e70:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18e72:	210a      	movs	r1, #10
   18e74:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   18e76:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18e78:	f010 fd02 	bl	29880 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   18e7c:	4639      	mov	r1, r7
   18e7e:	68f3      	ldr	r3, [r6, #12]
   18e80:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18e84:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   18e86:	7a23      	ldrb	r3, [r4, #8]
   18e88:	2b00      	cmp	r3, #0
   18e8a:	d158      	bne.n	18f3e <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18e8c:	210f      	movs	r1, #15
   18e8e:	4628      	mov	r0, r5
   18e90:	f010 fc90 	bl	297b4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   18e94:	2800      	cmp	r0, #0
   18e96:	d152      	bne.n	18f3e <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18e98:	f1b8 0f00 	cmp.w	r8, #0
   18e9c:	d04f      	beq.n	18f3e <smp_pairing_req+0x326>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   18e9e:	f8d8 3014 	ldr.w	r3, [r8, #20]
   18ea2:	2b00      	cmp	r3, #0
   18ea4:	d04b      	beq.n	18f3e <smp_pairing_req+0x326>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18ea6:	4628      	mov	r0, r5
   18ea8:	210a      	movs	r1, #10
   18eaa:	f010 fce9 	bl	29880 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   18eae:	f8d8 3014 	ldr.w	r3, [r8, #20]
   18eb2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   18eb6:	4798      	blx	r3
		return 0;
   18eb8:	2000      	movs	r0, #0
   18eba:	e6c0      	b.n	18c3e <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   18ebc:	2104      	movs	r1, #4
   18ebe:	4638      	mov	r0, r7
   18ec0:	f7fb f9c0 	bl	14244 <bt_rand>
   18ec4:	2800      	cmp	r0, #0
   18ec6:	f47f aed6 	bne.w	18c76 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   18eca:	683b      	ldr	r3, [r7, #0]
   18ecc:	4a26      	ldr	r2, [pc, #152]	; (18f68 <smp_pairing_req+0x350>)
   18ece:	fbb3 f1f2 	udiv	r1, r3, r2
   18ed2:	fb02 3311 	mls	r3, r2, r1, r3
   18ed6:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   18ed8:	b14e      	cbz	r6, 18eee <smp_pairing_req+0x2d6>
   18eda:	6833      	ldr	r3, [r6, #0]
   18edc:	b13b      	cbz	r3, 18eee <smp_pairing_req+0x2d6>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18ede:	210b      	movs	r1, #11
   18ee0:	4628      	mov	r0, r5
   18ee2:	f010 fccd 	bl	29880 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   18ee6:	4648      	mov	r0, r9
   18ee8:	6833      	ldr	r3, [r6, #0]
   18eea:	6839      	ldr	r1, [r7, #0]
   18eec:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   18eee:	683b      	ldr	r3, [r7, #0]
	dst[1] = val >> 8;
   18ef0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   18ef4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   18ef8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   18efa:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   18efe:	0a1b      	lsrs	r3, r3, #8
   18f00:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   18f04:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   18f08:	e7bd      	b.n	18e86 <smp_pairing_req+0x26e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18f0a:	4628      	mov	r0, r5
   18f0c:	210a      	movs	r1, #10
   18f0e:	f010 fcb7 	bl	29880 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   18f12:	4648      	mov	r0, r9
   18f14:	6873      	ldr	r3, [r6, #4]
   18f16:	4798      	blx	r3
	if (ret) {
   18f18:	e7b5      	b.n	18e86 <smp_pairing_req+0x26e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18f1a:	466c      	mov	r4, sp
   18f1c:	b088      	sub	sp, #32
   18f1e:	466a      	mov	r2, sp
   18f20:	4912      	ldr	r1, [pc, #72]	; (18f6c <smp_pairing_req+0x354>)
   18f22:	4810      	ldr	r0, [pc, #64]	; (18f64 <smp_pairing_req+0x34c>)
	switch (smp->method) {
   18f24:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18f28:	2303      	movs	r3, #3
   18f2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18f2e:	f842 3f10 	str.w	r3, [r2, #16]!
   18f32:	f010 fc97 	bl	29864 <z_log_msg_static_create.constprop.0>
   18f36:	46a5      	mov	sp, r4
	if (ret) {
   18f38:	e69d      	b.n	18c76 <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18f3a:	2002      	movs	r0, #2
   18f3c:	e67f      	b.n	18c3e <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18f3e:	2103      	movs	r1, #3
   18f40:	4620      	mov	r0, r4
   18f42:	f010 fc9d 	bl	29880 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18f46:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   18f48:	f010 fc9a 	bl	29880 <atomic_set_bit>
	return send_pairing_rsp(smp);
   18f4c:	f010 fcc7 	bl	298de <send_pairing_rsp>
   18f50:	e675      	b.n	18c3e <smp_pairing_req+0x26>
   18f52:	bf00      	nop
   18f54:	200224c9 	.word	0x200224c9
   18f58:	000316d7 	.word	0x000316d7
   18f5c:	000316be 	.word	0x000316be
   18f60:	00031370 	.word	0x00031370
   18f64:	0002c854 	.word	0x0002c854
   18f68:	000f4240 	.word	0x000f4240
   18f6c:	00031318 	.word	0x00031318
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   18f70:	7a23      	ldrb	r3, [r4, #8]
   18f72:	b993      	cbnz	r3, 18f9a <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18f74:	210f      	movs	r1, #15
   18f76:	4628      	mov	r0, r5
   18f78:	f010 fc1c 	bl	297b4 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   18f7c:	b968      	cbnz	r0, 18f9a <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18f7e:	f1b8 0f00 	cmp.w	r8, #0
   18f82:	d00a      	beq.n	18f9a <smp_pairing_req+0x382>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   18f84:	f8d8 3014 	ldr.w	r3, [r8, #20]
   18f88:	b13b      	cbz	r3, 18f9a <smp_pairing_req+0x382>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18f8a:	4628      	mov	r0, r5
   18f8c:	210a      	movs	r1, #10
   18f8e:	f010 fc77 	bl	29880 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   18f92:	4630      	mov	r0, r6
   18f94:	f8d8 3014 	ldr.w	r3, [r8, #20]
   18f98:	e78d      	b.n	18eb6 <smp_pairing_req+0x29e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   18f9a:	210c      	movs	r1, #12
   18f9c:	4620      	mov	r0, r4
   18f9e:	e7d3      	b.n	18f48 <smp_pairing_req+0x330>

00018fa0 <compute_and_check_and_send_periph_dhcheck>:
{
   18fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18fa4:	4604      	mov	r4, r0
   18fa6:	b096      	sub	sp, #88	; 0x58
   18fa8:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   18faa:	f107 0520 	add.w	r5, r7, #32
   18fae:	2210      	movs	r2, #16
   18fb0:	2100      	movs	r1, #0
   18fb2:	4628      	mov	r0, r5
   18fb4:	f012 fcf4 	bl	2b9a0 <memset>
	switch (smp->method) {
   18fb8:	7a23      	ldrb	r3, [r4, #8]
   18fba:	2b05      	cmp	r3, #5
   18fbc:	d83a      	bhi.n	19034 <compute_and_check_and_send_periph_dhcheck+0x94>
   18fbe:	e8df f003 	tbb	[pc, r3]
   18fc2:	0306      	.short	0x0306
   18fc4:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   18fc8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18fcc:	623b      	str	r3, [r7, #32]
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   18fce:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   18fd2:	f104 0247 	add.w	r2, r4, #71	; 0x47
   18fd6:	f104 08c7 	add.w	r8, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   18fda:	e9cd 8201 	strd	r8, r2, [sp, #4]
   18fde:	f104 0937 	add.w	r9, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   18fe2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   18fe6:	f104 0a27 	add.w	sl, r4, #39	; 0x27
   18fea:	9200      	str	r2, [sp, #0]
   18fec:	4649      	mov	r1, r9
   18fee:	4652      	mov	r2, sl
   18ff0:	3397      	adds	r3, #151	; 0x97
   18ff2:	f104 0097 	add.w	r0, r4, #151	; 0x97
   18ff6:	f001 fb2f 	bl	1a658 <bt_crypto_f5>
   18ffa:	b378      	cbz	r0, 1905c <compute_and_check_and_send_periph_dhcheck+0xbc>
		LOG_ERR("Calculate LTK failed");
   18ffc:	4b4c      	ldr	r3, [pc, #304]	; (19130 <compute_and_check_and_send_periph_dhcheck+0x190>)
   18ffe:	647b      	str	r3, [r7, #68]	; 0x44
   19000:	2302      	movs	r3, #2
   19002:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19006:	484b      	ldr	r0, [pc, #300]	; (19134 <compute_and_check_and_send_periph_dhcheck+0x194>)
   19008:	643b      	str	r3, [r7, #64]	; 0x40
   1900a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1900e:	f010 fc29 	bl	29864 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   19012:	e01e      	b.n	19052 <compute_and_check_and_send_periph_dhcheck+0xb2>
		if (smp->oobd_remote) {
   19014:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   19018:	2b00      	cmp	r3, #0
   1901a:	d0d8      	beq.n	18fce <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1901c:	462e      	mov	r6, r5
   1901e:	f103 0c10 	add.w	ip, r3, #16
   19022:	4632      	mov	r2, r6
   19024:	6818      	ldr	r0, [r3, #0]
   19026:	6859      	ldr	r1, [r3, #4]
   19028:	3308      	adds	r3, #8
   1902a:	c203      	stmia	r2!, {r0, r1}
   1902c:	4563      	cmp	r3, ip
   1902e:	4616      	mov	r6, r2
   19030:	d1f7      	bne.n	19022 <compute_and_check_and_send_periph_dhcheck+0x82>
   19032:	e7cc      	b.n	18fce <compute_and_check_and_send_periph_dhcheck+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19034:	466c      	mov	r4, sp
   19036:	b088      	sub	sp, #32
   19038:	aa04      	add	r2, sp, #16
   1903a:	493f      	ldr	r1, [pc, #252]	; (19138 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1903c:	483d      	ldr	r0, [pc, #244]	; (19134 <compute_and_check_and_send_periph_dhcheck+0x194>)
	switch (smp->method) {
   1903e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19042:	2303      	movs	r3, #3
   19044:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19048:	f842 3f10 	str.w	r3, [r2, #16]!
   1904c:	f010 fc0a 	bl	29864 <z_log_msg_static_create.constprop.0>
   19050:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   19052:	2008      	movs	r0, #8
}
   19054:	3748      	adds	r7, #72	; 0x48
   19056:	46bd      	mov	sp, r7
   19058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1905c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   19060:	f107 0610 	add.w	r6, r7, #16
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   19064:	f103 0297 	add.w	r2, r3, #151	; 0x97
   19068:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1906a:	9301      	str	r3, [sp, #4]
   1906c:	f104 0311 	add.w	r3, r4, #17
   19070:	9202      	str	r2, [sp, #8]
   19072:	9300      	str	r3, [sp, #0]
   19074:	464a      	mov	r2, r9
   19076:	462b      	mov	r3, r5
   19078:	4651      	mov	r1, sl
   1907a:	4640      	mov	r0, r8
   1907c:	9603      	str	r6, [sp, #12]
   1907e:	f010 feb6 	bl	29dee <bt_crypto_f6>
   19082:	b108      	cbz	r0, 19088 <compute_and_check_and_send_periph_dhcheck+0xe8>
		LOG_ERR("Calculate local DHKey check failed");
   19084:	4b2d      	ldr	r3, [pc, #180]	; (1913c <compute_and_check_and_send_periph_dhcheck+0x19c>)
   19086:	e7ba      	b.n	18ffe <compute_and_check_and_send_periph_dhcheck+0x5e>
	if (smp->method == LE_SC_OOB) {
   19088:	7a23      	ldrb	r3, [r4, #8]
   1908a:	2b05      	cmp	r3, #5
   1908c:	d10e      	bne.n	190ac <compute_and_check_and_send_periph_dhcheck+0x10c>
		if (smp->oobd_local) {
   1908e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   19092:	b1f9      	cbz	r1, 190d4 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   19094:	460b      	mov	r3, r1
   19096:	46ac      	mov	ip, r5
   19098:	f101 0e10 	add.w	lr, r1, #16
   1909c:	4662      	mov	r2, ip
   1909e:	6818      	ldr	r0, [r3, #0]
   190a0:	6859      	ldr	r1, [r3, #4]
   190a2:	3308      	adds	r3, #8
   190a4:	c203      	stmia	r2!, {r0, r1}
   190a6:	4573      	cmp	r3, lr
   190a8:	4694      	mov	ip, r2
   190aa:	d1f7      	bne.n	1909c <compute_and_check_and_send_periph_dhcheck+0xfc>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   190ac:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   190b0:	4649      	mov	r1, r9
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   190b2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   190b6:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   190b8:	9301      	str	r3, [sp, #4]
   190ba:	f104 030a 	add.w	r3, r4, #10
   190be:	9202      	str	r2, [sp, #8]
   190c0:	9300      	str	r3, [sp, #0]
   190c2:	4652      	mov	r2, sl
   190c4:	462b      	mov	r3, r5
   190c6:	4640      	mov	r0, r8
   190c8:	9703      	str	r7, [sp, #12]
   190ca:	f010 fe90 	bl	29dee <bt_crypto_f6>
   190ce:	b130      	cbz	r0, 190de <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   190d0:	4b1b      	ldr	r3, [pc, #108]	; (19140 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   190d2:	e794      	b.n	18ffe <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
   190d4:	2210      	movs	r2, #16
   190d6:	4628      	mov	r0, r5
   190d8:	f012 fc62 	bl	2b9a0 <memset>
   190dc:	e7e6      	b.n	190ac <compute_and_check_and_send_periph_dhcheck+0x10c>
	if (memcmp(smp->e, re, 16)) {
   190de:	2210      	movs	r2, #16
   190e0:	4639      	mov	r1, r7
   190e2:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   190e6:	f012 fc11 	bl	2b90c <memcmp>
   190ea:	b9f8      	cbnz	r0, 1912c <compute_and_check_and_send_periph_dhcheck+0x18c>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   190ec:	210d      	movs	r1, #13
   190ee:	4620      	mov	r0, r4
   190f0:	f010 fbd6 	bl	298a0 <smp_create_pdu.constprop.0>
	if (!buf) {
   190f4:	4680      	mov	r8, r0
   190f6:	2800      	cmp	r0, #0
   190f8:	d0ab      	beq.n	19052 <compute_and_check_and_send_periph_dhcheck+0xb2>
   190fa:	2110      	movs	r1, #16
   190fc:	300c      	adds	r0, #12
   190fe:	f001 feab 	bl	1ae58 <net_buf_simple_add>
   19102:	4603      	mov	r3, r0
   19104:	4632      	mov	r2, r6
   19106:	ca03      	ldmia	r2!, {r0, r1}
   19108:	42aa      	cmp	r2, r5
   1910a:	6018      	str	r0, [r3, #0]
   1910c:	6059      	str	r1, [r3, #4]
   1910e:	4616      	mov	r6, r2
   19110:	f103 0308 	add.w	r3, r3, #8
   19114:	d1f6      	bne.n	19104 <compute_and_check_and_send_periph_dhcheck+0x164>
	smp_send(smp, buf, NULL, NULL);
   19116:	2200      	movs	r2, #0
   19118:	4641      	mov	r1, r8
   1911a:	4620      	mov	r0, r4
   1911c:	f010 fb85 	bl	2982a <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   19120:	1d20      	adds	r0, r4, #4
   19122:	2101      	movs	r1, #1
   19124:	f010 fbac 	bl	29880 <atomic_set_bit>
	return 0;
   19128:	2000      	movs	r0, #0
   1912a:	e793      	b.n	19054 <compute_and_check_and_send_periph_dhcheck+0xb4>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1912c:	200b      	movs	r0, #11
   1912e:	e791      	b.n	19054 <compute_and_check_and_send_periph_dhcheck+0xb4>
   19130:	0003139d 	.word	0x0003139d
   19134:	0002c854 	.word	0x0002c854
   19138:	00031318 	.word	0x00031318
   1913c:	000313b2 	.word	0x000313b2
   19140:	000313d5 	.word	0x000313d5

00019144 <bt_smp_connected>:
{
   19144:	b538      	push	{r3, r4, r5, lr}
   19146:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   19148:	4908      	ldr	r1, [pc, #32]	; (1916c <bt_smp_connected+0x28>)
   1914a:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1914e:	3094      	adds	r0, #148	; 0x94
   19150:	f009 f842 	bl	221d8 <k_work_init_delayable>
	smp_reset(smp);
   19154:	4628      	mov	r0, r5
   19156:	f010 fc3c 	bl	299d2 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1915a:	4b05      	ldr	r3, [pc, #20]	; (19170 <bt_smp_connected+0x2c>)
   1915c:	34c4      	adds	r4, #196	; 0xc4
   1915e:	e8d4 2fef 	ldaex	r2, [r4]
   19162:	e8c4 3fe1 	stlex	r1, r3, [r4]
   19166:	2900      	cmp	r1, #0
   19168:	d1f9      	bne.n	1915e <bt_smp_connected+0x1a>
}
   1916a:	bd38      	pop	{r3, r4, r5, pc}
   1916c:	00019e75 	.word	0x00019e75
   19170:	2000a058 	.word	0x2000a058

00019174 <smp_pairing_confirm>:
{
   19174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19176:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   19178:	68cd      	ldr	r5, [r1, #12]
{
   1917a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1917c:	210b      	movs	r1, #11
   1917e:	4630      	mov	r0, r6
{
   19180:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19182:	f010 fb3e 	bl	29802 <atomic_clear_bit>
   19186:	462b      	mov	r3, r5
   19188:	f104 0217 	add.w	r2, r4, #23
   1918c:	f105 0110 	add.w	r1, r5, #16
   19190:	f853 0b04 	ldr.w	r0, [r3], #4
   19194:	428b      	cmp	r3, r1
   19196:	f842 0b04 	str.w	r0, [r2], #4
   1919a:	d1f9      	bne.n	19190 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1919c:	2105      	movs	r1, #5
   1919e:	4630      	mov	r0, r6
   191a0:	f010 fb08 	bl	297b4 <atomic_test_bit>
   191a4:	b920      	cbnz	r0, 191b0 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   191a6:	4620      	mov	r0, r4
   191a8:	f010 fc89 	bl	29abe <legacy_pairing_confirm>
}
   191ac:	46bd      	mov	sp, r7
   191ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   191b0:	7a23      	ldrb	r3, [r4, #8]
   191b2:	2b01      	cmp	r3, #1
   191b4:	d008      	beq.n	191c8 <smp_pairing_confirm+0x54>
   191b6:	2b02      	cmp	r3, #2
   191b8:	d112      	bne.n	191e0 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   191ba:	2104      	movs	r1, #4
   191bc:	4620      	mov	r0, r4
   191be:	f010 fb5f 	bl	29880 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   191c2:	f7ff fbb5 	bl	18930 <smp_send_pairing_confirm>
   191c6:	e7f1      	b.n	191ac <smp_pairing_confirm+0x38>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   191c8:	210a      	movs	r1, #10
   191ca:	4630      	mov	r0, r6
   191cc:	f010 faf2 	bl	297b4 <atomic_test_bit>
   191d0:	2800      	cmp	r0, #0
   191d2:	d0f2      	beq.n	191ba <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   191d4:	4630      	mov	r0, r6
   191d6:	2100      	movs	r1, #0
   191d8:	f010 fb52 	bl	29880 <atomic_set_bit>
			return 0;
   191dc:	2000      	movs	r0, #0
   191de:	e7e5      	b.n	191ac <smp_pairing_confirm+0x38>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   191e0:	466c      	mov	r4, sp
   191e2:	b088      	sub	sp, #32
   191e4:	466a      	mov	r2, sp
   191e6:	4907      	ldr	r1, [pc, #28]	; (19204 <smp_pairing_confirm+0x90>)
   191e8:	4807      	ldr	r0, [pc, #28]	; (19208 <smp_pairing_confirm+0x94>)
	switch (smp->method) {
   191ea:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   191ee:	2303      	movs	r3, #3
   191f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   191f4:	f842 3f10 	str.w	r3, [r2, #16]!
   191f8:	f010 fb34 	bl	29864 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   191fc:	2008      	movs	r0, #8
   191fe:	46a5      	mov	sp, r4
   19200:	e7d4      	b.n	191ac <smp_pairing_confirm+0x38>
   19202:	bf00      	nop
   19204:	00031318 	.word	0x00031318
   19208:	0002c854 	.word	0x0002c854

0001920c <smp_pairing_random>:
{
   1920c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19210:	b08e      	sub	sp, #56	; 0x38
   19212:	4604      	mov	r4, r0
   19214:	af04      	add	r7, sp, #16
   19216:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19218:	f7ff fa18 	bl	1864c <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1921c:	f104 0837 	add.w	r8, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19220:	4605      	mov	r5, r0
   19222:	4642      	mov	r2, r8
   19224:	68f3      	ldr	r3, [r6, #12]
   19226:	f103 0110 	add.w	r1, r3, #16
   1922a:	f853 0b04 	ldr.w	r0, [r3], #4
   1922e:	428b      	cmp	r3, r1
   19230:	f842 0b04 	str.w	r0, [r2], #4
   19234:	d1f9      	bne.n	1922a <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19236:	1d26      	adds	r6, r4, #4
   19238:	2105      	movs	r1, #5
   1923a:	4630      	mov	r0, r6
   1923c:	f010 faba 	bl	297b4 <atomic_test_bit>
   19240:	2800      	cmp	r0, #0
   19242:	d150      	bne.n	192e6 <smp_pairing_random+0xda>
	struct bt_conn *conn = smp->chan.chan.conn;
   19244:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19248:	f104 0547 	add.w	r5, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1924c:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   19250:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19252:	9201      	str	r2, [sp, #4]
   19254:	9300      	str	r3, [sp, #0]
   19256:	4641      	mov	r1, r8
   19258:	4628      	mov	r0, r5
   1925a:	9702      	str	r7, [sp, #8]
   1925c:	f104 0310 	add.w	r3, r4, #16
   19260:	f104 0209 	add.w	r2, r4, #9
   19264:	f010 fbd0 	bl	29a08 <smp_c1>
	if (err) {
   19268:	bb18      	cbnz	r0, 192b2 <smp_pairing_random+0xa6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1926a:	2210      	movs	r2, #16
   1926c:	4639      	mov	r1, r7
   1926e:	f104 0017 	add.w	r0, r4, #23
   19272:	f012 fb4b 	bl	2b90c <memcmp>
   19276:	2800      	cmp	r0, #0
   19278:	d176      	bne.n	19368 <smp_pairing_random+0x15c>
	memcpy(out, r2, 8);
   1927a:	463b      	mov	r3, r7
   1927c:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   19280:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return bt_encrypt_le(k, out, out);
   19284:	463a      	mov	r2, r7
	memcpy(out, r2, 8);
   19286:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   19288:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1928c:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   19290:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   19292:	4639      	mov	r1, r7
   19294:	4628      	mov	r0, r5
   19296:	f00f fa4e 	bl	28736 <bt_encrypt_le>
		if (err) {
   1929a:	b178      	cbz	r0, 192bc <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   1929c:	4b63      	ldr	r3, [pc, #396]	; (1942c <smp_pairing_random+0x220>)
		LOG_ERR("Calculate confirm failed");
   1929e:	627b      	str	r3, [r7, #36]	; 0x24
   192a0:	2302      	movs	r3, #2
   192a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   192a6:	4862      	ldr	r0, [pc, #392]	; (19430 <smp_pairing_random+0x224>)
   192a8:	623b      	str	r3, [r7, #32]
   192aa:	f107 0220 	add.w	r2, r7, #32
   192ae:	f010 fad9 	bl	29864 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   192b2:	2008      	movs	r0, #8
}
   192b4:	3728      	adds	r7, #40	; 0x28
   192b6:	46bd      	mov	sp, r7
   192b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   192bc:	463b      	mov	r3, r7
   192be:	462a      	mov	r2, r5
   192c0:	f107 0c10 	add.w	ip, r7, #16
   192c4:	461d      	mov	r5, r3
   192c6:	cd03      	ldmia	r5!, {r0, r1}
   192c8:	4565      	cmp	r5, ip
   192ca:	6010      	str	r0, [r2, #0]
   192cc:	6051      	str	r1, [r2, #4]
   192ce:	462b      	mov	r3, r5
   192d0:	f102 0208 	add.w	r2, r2, #8
   192d4:	d1f6      	bne.n	192c4 <smp_pairing_random+0xb8>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   192d6:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   192d8:	4630      	mov	r0, r6
   192da:	f010 fad1 	bl	29880 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   192de:	4620      	mov	r0, r4
   192e0:	f010 fb17 	bl	29912 <smp_send_pairing_random>
   192e4:	e7e6      	b.n	192b4 <smp_pairing_random+0xa8>
	switch (smp->method) {
   192e6:	7a23      	ldrb	r3, [r4, #8]
   192e8:	2b05      	cmp	r3, #5
   192ea:	f200 808c 	bhi.w	19406 <smp_pairing_random+0x1fa>
   192ee:	e8df f003 	tbb	[pc, r3]
   192f2:	201a      	.short	0x201a
   192f4:	618a0320 	.word	0x618a0320
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   192f8:	f107 0310 	add.w	r3, r7, #16
   192fc:	494d      	ldr	r1, [pc, #308]	; (19434 <smp_pairing_random+0x228>)
   192fe:	9300      	str	r3, [sp, #0]
   19300:	4642      	mov	r2, r8
   19302:	6809      	ldr	r1, [r1, #0]
   19304:	f104 0327 	add.w	r3, r4, #39	; 0x27
   19308:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1930c:	f001 fa0c 	bl	1a728 <bt_crypto_g2>
   19310:	2800      	cmp	r0, #0
   19312:	d1ce      	bne.n	192b2 <smp_pairing_random+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19314:	210a      	movs	r1, #10
   19316:	4630      	mov	r0, r6
   19318:	f010 fab2 	bl	29880 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1931c:	68ab      	ldr	r3, [r5, #8]
   1931e:	6939      	ldr	r1, [r7, #16]
   19320:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   19324:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19326:	210d      	movs	r1, #13
   19328:	4620      	mov	r0, r4
   1932a:	f010 faa9 	bl	29880 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1932e:	2110      	movs	r1, #16
   19330:	e7d2      	b.n	192d8 <smp_pairing_random+0xcc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19332:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   19336:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1933a:	493e      	ldr	r1, [pc, #248]	; (19434 <smp_pairing_random+0x228>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1933c:	40d3      	lsrs	r3, r2
   1933e:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19342:	9700      	str	r7, [sp, #0]
   19344:	4642      	mov	r2, r8
   19346:	6809      	ldr	r1, [r1, #0]
   19348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1934c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19350:	f010 fd28 	bl	29da4 <bt_crypto_f4>
   19354:	b108      	cbz	r0, 1935a <smp_pairing_random+0x14e>
		LOG_ERR("Calculate confirm failed");
   19356:	4b38      	ldr	r3, [pc, #224]	; (19438 <smp_pairing_random+0x22c>)
   19358:	e7a1      	b.n	1929e <smp_pairing_random+0x92>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1935a:	2210      	movs	r2, #16
   1935c:	4639      	mov	r1, r7
   1935e:	f104 0017 	add.w	r0, r4, #23
   19362:	f012 fad3 	bl	2b90c <memcmp>
   19366:	b108      	cbz	r0, 1936c <smp_pairing_random+0x160>
		return BT_SMP_ERR_CONFIRM_FAILED;
   19368:	2004      	movs	r0, #4
   1936a:	e7a3      	b.n	192b4 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->allowed_cmds,
   1936c:	2103      	movs	r1, #3
   1936e:	4620      	mov	r0, r4
   19370:	f010 fa86 	bl	29880 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   19374:	f010 facd 	bl	29912 <smp_send_pairing_random>
		if (err) {
   19378:	2800      	cmp	r0, #0
   1937a:	d19b      	bne.n	192b4 <smp_pairing_random+0xa8>
		smp->passkey_round++;
   1937c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   19380:	3301      	adds	r3, #1
   19382:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   19384:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   19386:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1938a:	d109      	bne.n	193a0 <smp_pairing_random+0x194>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1938c:	210d      	movs	r1, #13
   1938e:	4620      	mov	r0, r4
   19390:	f010 fa76 	bl	29880 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19394:	2110      	movs	r1, #16
   19396:	4630      	mov	r0, r6
   19398:	f010 fa72 	bl	29880 <atomic_set_bit>
			return 0;
   1939c:	2000      	movs	r0, #0
   1939e:	e789      	b.n	192b4 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   193a0:	2110      	movs	r1, #16
   193a2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   193a6:	f7fa ff4d 	bl	14244 <bt_rand>
   193aa:	3800      	subs	r0, #0
   193ac:	bf18      	it	ne
   193ae:	2001      	movne	r0, #1
   193b0:	00c0      	lsls	r0, r0, #3
   193b2:	e77f      	b.n	192b4 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   193b4:	2110      	movs	r1, #16
   193b6:	f104 0027 	add.w	r0, r4, #39	; 0x27
   193ba:	f7fa ff43 	bl	14244 <bt_rand>
   193be:	2800      	cmp	r0, #0
   193c0:	f47f af77 	bne.w	192b2 <smp_pairing_random+0xa6>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   193c4:	b37d      	cbz	r5, 19426 <smp_pairing_random+0x21a>
   193c6:	68eb      	ldr	r3, [r5, #12]
   193c8:	b36b      	cbz	r3, 19426 <smp_pairing_random+0x21a>
			struct bt_conn_oob_info info = {
   193ca:	4b1c      	ldr	r3, [pc, #112]	; (1943c <smp_pairing_random+0x230>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   193cc:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   193ce:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   193d0:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   193d2:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   193d4:	7ca3      	ldrb	r3, [r4, #18]
   193d6:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   193da:	d412      	bmi.n	19402 <smp_pairing_random+0x1f6>
   193dc:	2b00      	cmp	r3, #0
   193de:	bf14      	ite	ne
   193e0:	2301      	movne	r3, #1
   193e2:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   193e4:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   193e6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   193e8:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
   193ea:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   193ee:	210c      	movs	r1, #12
   193f0:	f010 fa46 	bl	29880 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   193f4:	68eb      	ldr	r3, [r5, #12]
   193f6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   193fa:	f107 0110 	add.w	r1, r7, #16
   193fe:	4798      	blx	r3
			return 0;
   19400:	e7cc      	b.n	1939c <smp_pairing_random+0x190>
		if (rsp_oob_present) {
   19402:	005b      	lsls	r3, r3, #1
   19404:	e7ee      	b.n	193e4 <smp_pairing_random+0x1d8>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19406:	466c      	mov	r4, sp
   19408:	b088      	sub	sp, #32
   1940a:	aa04      	add	r2, sp, #16
   1940c:	490c      	ldr	r1, [pc, #48]	; (19440 <smp_pairing_random+0x234>)
   1940e:	4808      	ldr	r0, [pc, #32]	; (19430 <smp_pairing_random+0x224>)
	switch (smp->method) {
   19410:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19414:	2303      	movs	r3, #3
   19416:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1941a:	f842 3f10 	str.w	r3, [r2, #16]!
   1941e:	f010 fa21 	bl	29864 <z_log_msg_static_create.constprop.0>
   19422:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   19424:	e745      	b.n	192b2 <smp_pairing_random+0xa6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   19426:	2002      	movs	r0, #2
   19428:	e744      	b.n	192b4 <smp_pairing_random+0xa8>
   1942a:	bf00      	nop
   1942c:	000313f9 	.word	0x000313f9
   19430:	0002c854 	.word	0x0002c854
   19434:	20021808 	.word	0x20021808
   19438:	0003140e 	.word	0x0003140e
   1943c:	0002ca12 	.word	0x0002ca12
   19440:	00031318 	.word	0x00031318

00019444 <bt_smp_start_security>:
{
   19444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   19448:	78c6      	ldrb	r6, [r0, #3]
{
   1944a:	4604      	mov	r4, r0
	switch (conn->role) {
   1944c:	2e01      	cmp	r6, #1
   1944e:	d005      	beq.n	1945c <bt_smp_start_security+0x18>
		return -EINVAL;
   19450:	f06f 0415 	mvn.w	r4, #21
}
   19454:	4620      	mov	r0, r4
   19456:	b003      	add	sp, #12
   19458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1945c:	f010 fa05 	bl	2986a <smp_chan_get>
	if (!smp) {
   19460:	4605      	mov	r5, r0
   19462:	2800      	cmp	r0, #0
   19464:	f000 80ac 	beq.w	195c0 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19468:	1d07      	adds	r7, r0, #4
   1946a:	2104      	movs	r1, #4
   1946c:	4638      	mov	r0, r7
   1946e:	f010 f9a1 	bl	297b4 <atomic_test_bit>
   19472:	2800      	cmp	r0, #0
   19474:	f040 80a7 	bne.w	195c6 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19478:	2103      	movs	r1, #3
   1947a:	4638      	mov	r0, r7
   1947c:	f010 f99a 	bl	297b4 <atomic_test_bit>
   19480:	b110      	cbz	r0, 19488 <bt_smp_start_security+0x44>
		return -EBUSY;
   19482:	f06f 040f 	mvn.w	r4, #15
   19486:	e7e5      	b.n	19454 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19488:	4631      	mov	r1, r6
   1948a:	4638      	mov	r0, r7
   1948c:	f010 f992 	bl	297b4 <atomic_test_bit>
   19490:	2800      	cmp	r0, #0
   19492:	d1f6      	bne.n	19482 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19494:	4628      	mov	r0, r5
   19496:	f7ff f8d9 	bl	1864c <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1949a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1949e:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   194a0:	7a9b      	ldrb	r3, [r3, #10]
   194a2:	2b03      	cmp	r3, #3
   194a4:	d042      	beq.n	1952c <bt_smp_start_security+0xe8>
   194a6:	d832      	bhi.n	1950e <bt_smp_start_security+0xca>
   194a8:	3b01      	subs	r3, #1
   194aa:	2b01      	cmp	r3, #1
   194ac:	d948      	bls.n	19540 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   194ae:	210b      	movs	r1, #11
   194b0:	1d20      	adds	r0, r4, #4
   194b2:	f010 f97f 	bl	297b4 <atomic_test_bit>
   194b6:	2800      	cmp	r0, #0
   194b8:	d1ca      	bne.n	19450 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   194ba:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   194be:	b983      	cbnz	r3, 194e2 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   194c0:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   194c4:	4632      	mov	r2, r6
   194c6:	2020      	movs	r0, #32
   194c8:	7a21      	ldrb	r1, [r4, #8]
   194ca:	f000 fe55 	bl	1a178 <bt_keys_find>
   194ce:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   194d2:	b930      	cbnz	r0, 194e2 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   194d4:	4632      	mov	r2, r6
   194d6:	2004      	movs	r0, #4
   194d8:	7a21      	ldrb	r1, [r4, #8]
   194da:	f000 fe4d 	bl	1a178 <bt_keys_find>
   194de:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   194e2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   194e6:	2b00      	cmp	r3, #0
   194e8:	d0b2      	beq.n	19450 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   194ea:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   194ec:	f012 0f24 	tst.w	r2, #36	; 0x24
   194f0:	d0ae      	beq.n	19450 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   194f2:	7aa1      	ldrb	r1, [r4, #10]
   194f4:	2902      	cmp	r1, #2
   194f6:	d923      	bls.n	19540 <bt_smp_start_security+0xfc>
   194f8:	7b58      	ldrb	r0, [r3, #13]
   194fa:	07c0      	lsls	r0, r0, #31
   194fc:	d5a8      	bpl.n	19450 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   194fe:	2903      	cmp	r1, #3
   19500:	d01e      	beq.n	19540 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   19502:	0692      	lsls	r2, r2, #26
   19504:	d5a4      	bpl.n	19450 <bt_smp_start_security+0xc>
   19506:	7b1b      	ldrb	r3, [r3, #12]
   19508:	2b10      	cmp	r3, #16
   1950a:	d1a1      	bne.n	19450 <bt_smp_start_security+0xc>
   1950c:	e018      	b.n	19540 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1950e:	2b04      	cmp	r3, #4
   19510:	d1cd      	bne.n	194ae <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19512:	4628      	mov	r0, r5
   19514:	f7ff f8b0 	bl	18678 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19518:	2803      	cmp	r0, #3
   1951a:	d104      	bne.n	19526 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1951c:	2e00      	cmp	r6, #0
   1951e:	d0c6      	beq.n	194ae <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19520:	68f3      	ldr	r3, [r6, #12]
   19522:	2b00      	cmp	r3, #0
   19524:	d0c3      	beq.n	194ae <bt_smp_start_security+0x6a>
   19526:	4b29      	ldr	r3, [pc, #164]	; (195cc <bt_smp_start_security+0x188>)
   19528:	781b      	ldrb	r3, [r3, #0]
   1952a:	e007      	b.n	1953c <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1952c:	4628      	mov	r0, r5
   1952e:	f7ff f8a3 	bl	18678 <get_io_capa>
   19532:	2803      	cmp	r0, #3
   19534:	d104      	bne.n	19540 <bt_smp_start_security+0xfc>
   19536:	2e00      	cmp	r6, #0
   19538:	d0b9      	beq.n	194ae <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1953a:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1953c:	2b00      	cmp	r3, #0
   1953e:	d0b6      	beq.n	194ae <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   19540:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19544:	b13b      	cbz	r3, 19556 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   19546:	4628      	mov	r0, r5
   19548:	f7ff f928 	bl	1879c <smp_init>
   1954c:	4680      	mov	r8, r0
   1954e:	b170      	cbz	r0, 1956e <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   19550:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19554:	e77e      	b.n	19454 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19556:	7a20      	ldrb	r0, [r4, #8]
   19558:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1955c:	f000 fdcc 	bl	1a0f8 <bt_keys_get_addr>
   19560:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   19564:	2800      	cmp	r0, #0
   19566:	d1ee      	bne.n	19546 <bt_smp_start_security+0x102>
			return -ENOMEM;
   19568:	f06f 040b 	mvn.w	r4, #11
   1956c:	e772      	b.n	19454 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1956e:	210b      	movs	r1, #11
   19570:	4628      	mov	r0, r5
   19572:	f010 f995 	bl	298a0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   19576:	4606      	mov	r6, r0
   19578:	2800      	cmp	r0, #0
   1957a:	d0e9      	beq.n	19550 <bt_smp_start_security+0x10c>
   1957c:	2101      	movs	r1, #1
   1957e:	300c      	adds	r0, #12
   19580:	f001 fc6a 	bl	1ae58 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   19584:	2109      	movs	r1, #9
   19586:	4681      	mov	r9, r0
   19588:	4628      	mov	r0, r5
   1958a:	f7ff f89b 	bl	186c4 <get_auth>
   1958e:	4643      	mov	r3, r8
   19590:	f889 0000 	strb.w	r0, [r9]
   19594:	4632      	mov	r2, r6
   19596:	4620      	mov	r0, r4
   19598:	2106      	movs	r1, #6
   1959a:	f8cd 8000 	str.w	r8, [sp]
   1959e:	f00f fa5b 	bl	28a58 <bt_l2cap_send_cb>
	if (err) {
   195a2:	4604      	mov	r4, r0
   195a4:	b118      	cbz	r0, 195ae <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   195a6:	4630      	mov	r0, r6
   195a8:	f001 fb34 	bl	1ac14 <net_buf_unref>
		return err;
   195ac:	e752      	b.n	19454 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   195ae:	4638      	mov	r0, r7
   195b0:	210f      	movs	r1, #15
   195b2:	f010 f965 	bl	29880 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   195b6:	2101      	movs	r1, #1
   195b8:	4628      	mov	r0, r5
   195ba:	f010 f961 	bl	29880 <atomic_set_bit>
	return 0;
   195be:	e749      	b.n	19454 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   195c0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   195c4:	e746      	b.n	19454 <bt_smp_start_security+0x10>
		return -EIO;
   195c6:	f06f 0404 	mvn.w	r4, #4
   195ca:	e743      	b.n	19454 <bt_smp_start_security+0x10>
   195cc:	200224c8 	.word	0x200224c8

000195d0 <smp_pairing_complete>:
{
   195d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195d2:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   195d4:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   195d8:	1d04      	adds	r4, r0, #4
	if (!status) {
   195da:	bb61      	cbnz	r1, 19636 <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   195dc:	210d      	movs	r1, #13
   195de:	4620      	mov	r0, r4
   195e0:	f010 f8e8 	bl	297b4 <atomic_test_bit>
		if (bond_flag) {
   195e4:	4607      	mov	r7, r0
   195e6:	b118      	cbz	r0, 195f0 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   195e8:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   195ec:	f000 ffbe 	bl	1a56c <bt_keys_store>
	return list->head;
   195f0:	4b36      	ldr	r3, [pc, #216]	; (196cc <smp_pairing_complete+0xfc>)
   195f2:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   195f4:	b19b      	cbz	r3, 1961e <smp_pairing_complete+0x4e>
	return node->next;
   195f6:	681c      	ldr	r4, [r3, #0]
   195f8:	b104      	cbz	r4, 195fc <smp_pairing_complete+0x2c>
   195fa:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   195fc:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   19600:	b113      	cbz	r3, 19608 <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   19602:	4639      	mov	r1, r7
   19604:	4628      	mov	r0, r5
   19606:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   19608:	b14c      	cbz	r4, 1961e <smp_pairing_complete+0x4e>
   1960a:	4623      	mov	r3, r4
   1960c:	68e4      	ldr	r4, [r4, #12]
   1960e:	681b      	ldr	r3, [r3, #0]
   19610:	b11c      	cbz	r4, 1961a <smp_pairing_complete+0x4a>
   19612:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   19614:	2b00      	cmp	r3, #0
   19616:	d1f4      	bne.n	19602 <smp_pairing_complete+0x32>
   19618:	e7f7      	b.n	1960a <smp_pairing_complete+0x3a>
   1961a:	2b00      	cmp	r3, #0
   1961c:	d1f1      	bne.n	19602 <smp_pairing_complete+0x32>
	smp_reset(smp);
   1961e:	4630      	mov	r0, r6
   19620:	f010 f9d7 	bl	299d2 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   19624:	7a6a      	ldrb	r2, [r5, #9]
   19626:	7aab      	ldrb	r3, [r5, #10]
   19628:	429a      	cmp	r2, r3
   1962a:	d04d      	beq.n	196c8 <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1962c:	4628      	mov	r0, r5
}
   1962e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   19632:	f7ff bf07 	b.w	19444 <bt_smp_start_security>
	switch (smp_err) {
   19636:	3901      	subs	r1, #1
   19638:	b2c9      	uxtb	r1, r1
   1963a:	290e      	cmp	r1, #14
   1963c:	bf96      	itet	ls
   1963e:	4b24      	ldrls	r3, [pc, #144]	; (196d0 <smp_pairing_complete+0x100>)
	if (!status) {
   19640:	2709      	movhi	r7, #9
   19642:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   19644:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   19648:	b143      	cbz	r3, 1965c <smp_pairing_complete+0x8c>
   1964a:	7b1b      	ldrb	r3, [r3, #12]
   1964c:	bb33      	cbnz	r3, 1969c <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1964e:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   19652:	f000 fe77 	bl	1a344 <bt_keys_clear>
			conn->le.keys = NULL;
   19656:	2300      	movs	r3, #0
   19658:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1965c:	2102      	movs	r1, #2
   1965e:	4620      	mov	r0, r4
   19660:	f010 f8a8 	bl	297b4 <atomic_test_bit>
   19664:	b948      	cbnz	r0, 1967a <smp_pairing_complete+0xaa>
	switch (err) {
   19666:	2f07      	cmp	r7, #7
   19668:	bf94      	ite	ls
   1966a:	4b1a      	ldrls	r3, [pc, #104]	; (196d4 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1966c:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   1966e:	463a      	mov	r2, r7
   19670:	4628      	mov	r0, r5
   19672:	bf98      	it	ls
   19674:	5dd9      	ldrbls	r1, [r3, r7]
   19676:	f7fb fce5 	bl	15044 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1967a:	2103      	movs	r1, #3
   1967c:	4620      	mov	r0, r4
   1967e:	f010 f899 	bl	297b4 <atomic_test_bit>
   19682:	2800      	cmp	r0, #0
   19684:	d0cb      	beq.n	1961e <smp_pairing_complete+0x4e>
	return list->head;
   19686:	4b11      	ldr	r3, [pc, #68]	; (196cc <smp_pairing_complete+0xfc>)
   19688:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1968a:	2b00      	cmp	r3, #0
   1968c:	d0c7      	beq.n	1961e <smp_pairing_complete+0x4e>
	return node->next;
   1968e:	681c      	ldr	r4, [r3, #0]
   19690:	b104      	cbz	r4, 19694 <smp_pairing_complete+0xc4>
   19692:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   19694:	f853 3c08 	ldr.w	r3, [r3, #-8]
   19698:	b94b      	cbnz	r3, 196ae <smp_pairing_complete+0xde>
   1969a:	e00b      	b.n	196b4 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1969c:	2102      	movs	r1, #2
   1969e:	4620      	mov	r0, r4
   196a0:	f010 f888 	bl	297b4 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   196a4:	2800      	cmp	r0, #0
   196a6:	d1d2      	bne.n	1964e <smp_pairing_complete+0x7e>
   196a8:	e7d8      	b.n	1965c <smp_pairing_complete+0x8c>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   196aa:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   196ac:	b123      	cbz	r3, 196b8 <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   196ae:	4639      	mov	r1, r7
   196b0:	4628      	mov	r0, r5
   196b2:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   196b4:	2c00      	cmp	r4, #0
   196b6:	d0b2      	beq.n	1961e <smp_pairing_complete+0x4e>
   196b8:	4623      	mov	r3, r4
   196ba:	68e4      	ldr	r4, [r4, #12]
   196bc:	685b      	ldr	r3, [r3, #4]
   196be:	2c00      	cmp	r4, #0
   196c0:	d1f3      	bne.n	196aa <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   196c2:	2b00      	cmp	r3, #0
   196c4:	d1f3      	bne.n	196ae <smp_pairing_complete+0xde>
   196c6:	e7aa      	b.n	1961e <smp_pairing_complete+0x4e>
}
   196c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196ca:	bf00      	nop
   196cc:	200216d8 	.word	0x200216d8
   196d0:	000316af 	.word	0x000316af
   196d4:	0003169e 	.word	0x0003169e

000196d8 <smp_error>:
{
   196d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   196da:	1d03      	adds	r3, r0, #4
{
   196dc:	4606      	mov	r6, r0
   196de:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   196e0:	4618      	mov	r0, r3
   196e2:	2102      	movs	r1, #2
{
   196e4:	b089      	sub	sp, #36	; 0x24
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   196e6:	f010 f865 	bl	297b4 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   196ea:	4604      	mov	r4, r0
   196ec:	b120      	cbz	r0, 196f8 <smp_error+0x20>
   196ee:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   196f2:	fab4 f484 	clz	r4, r4
   196f6:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   196f8:	2103      	movs	r1, #3
   196fa:	4618      	mov	r0, r3
   196fc:	f010 f85a 	bl	297b4 <atomic_test_bit>
   19700:	b1b0      	cbz	r0, 19730 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   19702:	4639      	mov	r1, r7
   19704:	4630      	mov	r0, r6
   19706:	f7ff ff63 	bl	195d0 <smp_pairing_complete>
	if (remote_already_completed) {
   1970a:	b1f4      	cbz	r4, 1974a <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1970c:	4b1d      	ldr	r3, [pc, #116]	; (19784 <smp_error+0xac>)
   1970e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19712:	9307      	str	r3, [sp, #28]
   19714:	2302      	movs	r3, #2
   19716:	481c      	ldr	r0, [pc, #112]	; (19788 <smp_error+0xb0>)
   19718:	aa06      	add	r2, sp, #24
   1971a:	9306      	str	r3, [sp, #24]
   1971c:	f010 f8a2 	bl	29864 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   19720:	2105      	movs	r1, #5
   19722:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19726:	f00f f892 	bl	2884e <bt_conn_disconnect>
		return 0;
   1972a:	2000      	movs	r0, #0
}
   1972c:	b009      	add	sp, #36	; 0x24
   1972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19730:	2101      	movs	r1, #1
   19732:	4618      	mov	r0, r3
   19734:	f010 f83e 	bl	297b4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19738:	2800      	cmp	r0, #0
   1973a:	d1e2      	bne.n	19702 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1973c:	210f      	movs	r1, #15
   1973e:	4618      	mov	r0, r3
   19740:	f010 f838 	bl	297b4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19744:	2800      	cmp	r0, #0
   19746:	d1dc      	bne.n	19702 <smp_error+0x2a>
   19748:	e7df      	b.n	1970a <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1974a:	2105      	movs	r1, #5
   1974c:	4630      	mov	r0, r6
   1974e:	f010 f8a7 	bl	298a0 <smp_create_pdu.constprop.0>
	if (!buf) {
   19752:	4605      	mov	r5, r0
   19754:	b190      	cbz	r0, 1977c <smp_error+0xa4>
   19756:	2101      	movs	r1, #1
   19758:	300c      	adds	r0, #12
   1975a:	f001 fb7d 	bl	1ae58 <net_buf_simple_add>
	rsp->reason = reason;
   1975e:	7007      	strb	r7, [r0, #0]
   19760:	9400      	str	r4, [sp, #0]
   19762:	4623      	mov	r3, r4
   19764:	462a      	mov	r2, r5
   19766:	2106      	movs	r1, #6
   19768:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1976c:	f00f f974 	bl	28a58 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   19770:	2800      	cmp	r0, #0
   19772:	d0da      	beq.n	1972a <smp_error+0x52>
		net_buf_unref(buf);
   19774:	4628      	mov	r0, r5
   19776:	f001 fa4d 	bl	1ac14 <net_buf_unref>
   1977a:	e7d6      	b.n	1972a <smp_error+0x52>
		return -ENOBUFS;
   1977c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19780:	e7d4      	b.n	1972c <smp_error+0x54>
   19782:	bf00      	nop
   19784:	00031427 	.word	0x00031427
   19788:	0002c854 	.word	0x0002c854

0001978c <bt_smp_recv>:
{
   1978c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19790:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   19792:	8a0b      	ldrh	r3, [r1, #16]
{
   19794:	4680      	mov	r8, r0
   19796:	460d      	mov	r5, r1
   19798:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1979a:	b97b      	cbnz	r3, 197bc <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   1979c:	4b44      	ldr	r3, [pc, #272]	; (198b0 <bt_smp_recv+0x124>)
   1979e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   197a2:	617b      	str	r3, [r7, #20]
   197a4:	2302      	movs	r3, #2
   197a6:	4843      	ldr	r0, [pc, #268]	; (198b4 <bt_smp_recv+0x128>)
   197a8:	613b      	str	r3, [r7, #16]
   197aa:	f107 0210 	add.w	r2, r7, #16
   197ae:	f010 f859 	bl	29864 <z_log_msg_static_create.constprop.0>
}
   197b2:	2000      	movs	r0, #0
   197b4:	3718      	adds	r7, #24
   197b6:	46bd      	mov	sp, r7
   197b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   197bc:	2101      	movs	r1, #1
   197be:	f105 000c 	add.w	r0, r5, #12
   197c2:	f001 fb2b 	bl	1ae1c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   197c6:	2104      	movs	r1, #4
   197c8:	4606      	mov	r6, r0
   197ca:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   197ce:	f00f fff1 	bl	297b4 <atomic_test_bit>
   197d2:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   197d6:	7831      	ldrb	r1, [r6, #0]
   197d8:	b178      	cbz	r0, 197fa <bt_smp_recv+0x6e>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   197da:	466c      	mov	r4, sp
   197dc:	b088      	sub	sp, #32
   197de:	466a      	mov	r2, sp
   197e0:	4b35      	ldr	r3, [pc, #212]	; (198b8 <bt_smp_recv+0x12c>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   197e2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   197e6:	2303      	movs	r3, #3
   197e8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   197ec:	4831      	ldr	r0, [pc, #196]	; (198b4 <bt_smp_recv+0x128>)
   197ee:	f842 3f10 	str.w	r3, [r2, #16]!
   197f2:	f010 f837 	bl	29864 <z_log_msg_static_create.constprop.0>
   197f6:	46a5      	mov	sp, r4
		return 0;
   197f8:	e7db      	b.n	197b2 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   197fa:	290e      	cmp	r1, #14
   197fc:	d904      	bls.n	19808 <bt_smp_recv+0x7c>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   197fe:	466c      	mov	r4, sp
   19800:	b088      	sub	sp, #32
   19802:	466a      	mov	r2, sp
   19804:	4b2d      	ldr	r3, [pc, #180]	; (198bc <bt_smp_recv+0x130>)
   19806:	e7ec      	b.n	197e2 <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   19808:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 198c0 <bt_smp_recv+0x134>
   1980c:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   19810:	b99b      	cbnz	r3, 1983a <bt_smp_recv+0xae>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   19812:	466d      	mov	r5, sp
   19814:	b088      	sub	sp, #32
   19816:	466a      	mov	r2, sp
   19818:	4b2a      	ldr	r3, [pc, #168]	; (198c4 <bt_smp_recv+0x138>)
   1981a:	4826      	ldr	r0, [pc, #152]	; (198b4 <bt_smp_recv+0x128>)
   1981c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19820:	2303      	movs	r3, #3
   19822:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19826:	f842 3f10 	str.w	r3, [r2, #16]!
   1982a:	f010 f81b 	bl	29864 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1982e:	2107      	movs	r1, #7
   19830:	46ad      	mov	sp, r5
		smp_error(smp, err);
   19832:	4620      	mov	r0, r4
   19834:	f7ff ff50 	bl	196d8 <smp_error>
   19838:	e7bb      	b.n	197b2 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1983a:	4620      	mov	r0, r4
   1983c:	f010 f8b7 	bl	299ae <atomic_test_and_clear_bit>
   19840:	7833      	ldrb	r3, [r6, #0]
   19842:	b998      	cbnz	r0, 1986c <bt_smp_recv+0xe0>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   19844:	466d      	mov	r5, sp
   19846:	b088      	sub	sp, #32
   19848:	466a      	mov	r2, sp
   1984a:	491f      	ldr	r1, [pc, #124]	; (198c8 <bt_smp_recv+0x13c>)
   1984c:	4819      	ldr	r0, [pc, #100]	; (198b4 <bt_smp_recv+0x128>)
   1984e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19852:	2303      	movs	r3, #3
   19854:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19858:	f842 3f10 	str.w	r3, [r2, #16]!
   1985c:	f010 f802 	bl	29864 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   19860:	7833      	ldrb	r3, [r6, #0]
   19862:	46ad      	mov	sp, r5
   19864:	2b05      	cmp	r3, #5
   19866:	d0a4      	beq.n	197b2 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19868:	2108      	movs	r1, #8
   1986a:	e7e2      	b.n	19832 <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   1986c:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   19870:	8a29      	ldrh	r1, [r5, #16]
   19872:	7912      	ldrb	r2, [r2, #4]
   19874:	428a      	cmp	r2, r1
   19876:	d011      	beq.n	1989c <bt_smp_recv+0x110>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19878:	466d      	mov	r5, sp
   1987a:	b088      	sub	sp, #32
   1987c:	466a      	mov	r2, sp
   1987e:	61d3      	str	r3, [r2, #28]
   19880:	2304      	movs	r3, #4
   19882:	4812      	ldr	r0, [pc, #72]	; (198cc <bt_smp_recv+0x140>)
   19884:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19888:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1988c:	4809      	ldr	r0, [pc, #36]	; (198b4 <bt_smp_recv+0x128>)
   1988e:	f842 3f10 	str.w	r3, [r2, #16]!
   19892:	f00f ffe7 	bl	29864 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   19896:	210a      	movs	r1, #10
   19898:	46ad      	mov	sp, r5
   1989a:	e7ca      	b.n	19832 <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   1989c:	4629      	mov	r1, r5
   1989e:	4620      	mov	r0, r4
   198a0:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   198a4:	4798      	blx	r3
	if (err) {
   198a6:	4601      	mov	r1, r0
   198a8:	2800      	cmp	r0, #0
   198aa:	d082      	beq.n	197b2 <bt_smp_recv+0x26>
   198ac:	e7c1      	b.n	19832 <bt_smp_recv+0xa6>
   198ae:	bf00      	nop
   198b0:	0003147f 	.word	0x0003147f
   198b4:	0002c854 	.word	0x0002c854
   198b8:	0003149a 	.word	0x0003149a
   198bc:	000314cb 	.word	0x000314cb
   198c0:	0002d480 	.word	0x0002d480
   198c4:	000314ed 	.word	0x000314ed
   198c8:	00031507 	.word	0x00031507
   198cc:	00030dd3 	.word	0x00030dd3

000198d0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   198d0:	4b0c      	ldr	r3, [pc, #48]	; (19904 <bt_smp_pkey_ready+0x34>)
{
   198d2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   198d4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   198d6:	b918      	cbnz	r0, 198e0 <bt_smp_pkey_ready+0x10>
}
   198d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   198dc:	f7fe bf10 	b.w	18700 <bt_smp_pkey_ready.part.0>
	z_impl_k_sem_give(sem);
   198e0:	4809      	ldr	r0, [pc, #36]	; (19908 <bt_smp_pkey_ready+0x38>)
   198e2:	f007 fff5 	bl	218d0 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198e6:	4b09      	ldr	r3, [pc, #36]	; (1990c <bt_smp_pkey_ready+0x3c>)
		err = smp_public_key_periph(smp);
   198e8:	1f1c      	subs	r4, r3, #4
   198ea:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   198ee:	065b      	lsls	r3, r3, #25
   198f0:	d507      	bpl.n	19902 <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   198f2:	4620      	mov	r0, r4
   198f4:	f7ff f870 	bl	189d8 <smp_public_key_periph>
		if (err) {
   198f8:	4601      	mov	r1, r0
   198fa:	b110      	cbz	r0, 19902 <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   198fc:	4620      	mov	r0, r4
   198fe:	f7ff feeb 	bl	196d8 <smp_error>
}
   19902:	bd10      	pop	{r4, pc}
   19904:	20021808 	.word	0x20021808
   19908:	20008d44 	.word	0x20008d44
   1990c:	2000a05c 	.word	0x2000a05c

00019910 <smp_ident_addr_info>:
{
   19910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19914:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19916:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1991a:	f8d1 800c 	ldr.w	r8, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1991e:	f023 0302 	bic.w	r3, r3, #2
   19922:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   19926:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1992a:	f898 3000 	ldrb.w	r3, [r8]
{
   1992e:	4604      	mov	r4, r0
   19930:	af00      	add	r7, sp, #0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19932:	f106 0990 	add.w	r9, r6, #144	; 0x90
   19936:	b3ab      	cbz	r3, 199a4 <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   19938:	f898 3006 	ldrb.w	r3, [r8, #6]
   1993c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19940:	2bc0      	cmp	r3, #192	; 0xc0
   19942:	d02f      	beq.n	199a4 <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   19944:	4640      	mov	r0, r8
   19946:	f7f7 ff31 	bl	117ac <bt_addr_le_str>
   1994a:	466e      	mov	r6, sp
   1994c:	b088      	sub	sp, #32
   1994e:	466c      	mov	r4, sp
   19950:	f44f 7a00 	mov.w	sl, #512	; 0x200
   19954:	4625      	mov	r5, r4
   19956:	4b65      	ldr	r3, [pc, #404]	; (19aec <smp_ident_addr_info+0x1dc>)
   19958:	f8df 8194 	ldr.w	r8, [pc, #404]	; 19af0 <smp_ident_addr_info+0x1e0>
   1995c:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19960:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19964:	f845 8f10 	str.w	r8, [r5, #16]!
   19968:	462a      	mov	r2, r5
   1996a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1996e:	4861      	ldr	r0, [pc, #388]	; (19af4 <smp_ident_addr_info+0x1e4>)
   19970:	f00f ff78 	bl	29864 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19974:	4648      	mov	r0, r9
   19976:	46b5      	mov	sp, r6
   19978:	f7f7 ff18 	bl	117ac <bt_addr_le_str>
   1997c:	46a5      	mov	sp, r4
   1997e:	4b5e      	ldr	r3, [pc, #376]	; (19af8 <smp_ident_addr_info+0x1e8>)
   19980:	462a      	mov	r2, r5
   19982:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19986:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1998a:	485a      	ldr	r0, [pc, #360]	; (19af4 <smp_ident_addr_info+0x1e4>)
   1998c:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19990:	f8c4 8010 	str.w	r8, [r4, #16]
   19994:	f00f ff66 	bl	29864 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   19998:	200a      	movs	r0, #10
   1999a:	46b5      	mov	sp, r6
}
   1999c:	3718      	adds	r7, #24
   1999e:	46bd      	mov	sp, r7
   199a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   199a4:	2207      	movs	r2, #7
   199a6:	4641      	mov	r1, r8
   199a8:	4648      	mov	r0, r9
   199aa:	f011 ffaf 	bl	2b90c <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   199ae:	b168      	cbz	r0, 199cc <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   199b0:	4641      	mov	r1, r8
   199b2:	7a30      	ldrb	r0, [r6, #8]
   199b4:	f000 fc66 	bl	1a284 <bt_keys_find_addr>
		if (keys) {
   199b8:	4605      	mov	r5, r0
   199ba:	b138      	cbz	r0, 199cc <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   199bc:	4601      	mov	r1, r0
   199be:	4620      	mov	r0, r4
   199c0:	f00f fefe 	bl	297c0 <update_keys_check>
   199c4:	b320      	cbz	r0, 19a10 <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   199c6:	4628      	mov	r0, r5
   199c8:	f000 fcbc 	bl	1a344 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   199cc:	210d      	movs	r1, #13
   199ce:	1d20      	adds	r0, r4, #4
   199d0:	f00f fef0 	bl	297b4 <atomic_test_bit>
   199d4:	2800      	cmp	r0, #0
   199d6:	d078      	beq.n	19aca <smp_ident_addr_info+0x1ba>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   199d8:	464a      	mov	r2, r9
   199da:	2002      	movs	r0, #2
   199dc:	7a31      	ldrb	r1, [r6, #8]
   199de:	f000 fc8d 	bl	1a2fc <bt_keys_get_type>
		if (!keys) {
   199e2:	4605      	mov	r5, r0
   199e4:	b9b0      	cbnz	r0, 19a14 <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   199e6:	4648      	mov	r0, r9
   199e8:	f7f7 fee0 	bl	117ac <bt_addr_le_str>
   199ec:	466c      	mov	r4, sp
   199ee:	b088      	sub	sp, #32
   199f0:	466a      	mov	r2, sp
   199f2:	4b42      	ldr	r3, [pc, #264]	; (19afc <smp_ident_addr_info+0x1ec>)
   199f4:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   199f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   199fc:	f44f 7300 	mov.w	r3, #512	; 0x200
   19a00:	8393      	strh	r3, [r2, #28]
   19a02:	4b3b      	ldr	r3, [pc, #236]	; (19af0 <smp_ident_addr_info+0x1e0>)
   19a04:	483b      	ldr	r0, [pc, #236]	; (19af4 <smp_ident_addr_info+0x1e4>)
   19a06:	f842 3f10 	str.w	r3, [r2, #16]!
   19a0a:	f00f ff2b 	bl	29864 <z_log_msg_static_create.constprop.0>
   19a0e:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   19a10:	2008      	movs	r0, #8
   19a12:	e7c3      	b.n	1999c <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19a14:	78f3      	ldrb	r3, [r6, #3]
   19a16:	bb9b      	cbnz	r3, 19a80 <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   19a18:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19a1c:	781a      	ldrb	r2, [r3, #0]
   19a1e:	2a01      	cmp	r2, #1
   19a20:	d11e      	bne.n	19a60 <smp_ident_addr_info+0x150>
		if (bt_addr_le_is_rpa(dst)) {
   19a22:	799a      	ldrb	r2, [r3, #6]
   19a24:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19a28:	2a40      	cmp	r2, #64	; 0x40
   19a2a:	d119      	bne.n	19a60 <smp_ident_addr_info+0x150>
   19a2c:	f8d3 2001 	ldr.w	r2, [r3, #1]
   19a30:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   19a34:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   19a38:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19a3a:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   19a3e:	b17b      	cbz	r3, 19a60 <smp_ident_addr_info+0x150>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   19a40:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   19a44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19a48:	2bc0      	cmp	r3, #192	; 0xc0
   19a4a:	d009      	beq.n	19a60 <smp_ident_addr_info+0x150>
				bt_addr_le_copy(&keys->addr, &req->addr);
   19a4c:	4641      	mov	r1, r8
   19a4e:	1c68      	adds	r0, r5, #1
   19a50:	f00f fee2 	bl	29818 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   19a54:	4648      	mov	r0, r9
   19a56:	f00f fedf 	bl	29818 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   19a5a:	4630      	mov	r0, r6
   19a5c:	f7fb faac 	bl	14fb8 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   19a60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19a64:	079a      	lsls	r2, r3, #30
   19a66:	d50e      	bpl.n	19a86 <smp_ident_addr_info+0x176>
   19a68:	4925      	ldr	r1, [pc, #148]	; (19b00 <smp_ident_addr_info+0x1f0>)
   19a6a:	f640 6363 	movw	r3, #3683	; 0xe63
   19a6e:	4a25      	ldr	r2, [pc, #148]	; (19b04 <smp_ident_addr_info+0x1f4>)
   19a70:	4825      	ldr	r0, [pc, #148]	; (19b08 <smp_ident_addr_info+0x1f8>)
   19a72:	f00c ff56 	bl	26922 <assert_print>
   19a76:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19a7a:	4822      	ldr	r0, [pc, #136]	; (19b04 <smp_ident_addr_info+0x1f4>)
   19a7c:	f00c ff4a 	bl	26914 <assert_post_action>
			dst = &conn->le.init_addr;
   19a80:	f106 0397 	add.w	r3, r6, #151	; 0x97
   19a84:	e7ca      	b.n	19a1c <smp_ident_addr_info+0x10c>
	conflict = bt_id_find_conflict(new_bond);
   19a86:	4628      	mov	r0, r5
   19a88:	f7f9 fdf8 	bl	1367c <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   19a8c:	b160      	cbz	r0, 19aa8 <smp_ident_addr_info+0x198>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   19a8e:	4b1f      	ldr	r3, [pc, #124]	; (19b0c <smp_ident_addr_info+0x1fc>)
   19a90:	4818      	ldr	r0, [pc, #96]	; (19af4 <smp_ident_addr_info+0x1e4>)
   19a92:	617b      	str	r3, [r7, #20]
   19a94:	2302      	movs	r3, #2
   19a96:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19a9a:	613b      	str	r3, [r7, #16]
   19a9c:	f107 0210 	add.w	r2, r7, #16
   19aa0:	f00f fee0 	bl	29864 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19aa4:	2003      	movs	r0, #3
   19aa6:	e779      	b.n	1999c <smp_ident_addr_info+0x8c>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19aa8:	4628      	mov	r0, r5
   19aaa:	f7f9 fde7 	bl	1367c <bt_id_find_conflict>
   19aae:	b148      	cbz	r0, 19ac4 <smp_ident_addr_info+0x1b4>
   19ab0:	4917      	ldr	r1, [pc, #92]	; (19b10 <smp_ident_addr_info+0x200>)
   19ab2:	f640 637f 	movw	r3, #3711	; 0xe7f
   19ab6:	4a13      	ldr	r2, [pc, #76]	; (19b04 <smp_ident_addr_info+0x1f4>)
   19ab8:	4813      	ldr	r0, [pc, #76]	; (19b08 <smp_ident_addr_info+0x1f8>)
   19aba:	f00c ff32 	bl	26922 <assert_print>
   19abe:	f640 617f 	movw	r1, #3711	; 0xe7f
   19ac2:	e7da      	b.n	19a7a <smp_ident_addr_info+0x16a>
	bt_id_add(new_bond);
   19ac4:	4628      	mov	r0, r5
   19ac6:	f7f9 fde9 	bl	1369c <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19aca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19ace:	075b      	lsls	r3, r3, #29
   19ad0:	d503      	bpl.n	19ada <smp_ident_addr_info+0x1ca>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19ad2:	210a      	movs	r1, #10
   19ad4:	4620      	mov	r0, r4
   19ad6:	f00f fed3 	bl	29880 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19ada:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19ade:	b109      	cbz	r1, 19ae4 <smp_ident_addr_info+0x1d4>
	return 0;
   19ae0:	2000      	movs	r0, #0
   19ae2:	e75b      	b.n	1999c <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   19ae4:	4620      	mov	r0, r4
   19ae6:	f7ff fd73 	bl	195d0 <smp_pairing_complete>
   19aea:	e7f9      	b.n	19ae0 <smp_ident_addr_info+0x1d0>
   19aec:	00031522 	.word	0x00031522
   19af0:	01000003 	.word	0x01000003
   19af4:	0002c854 	.word	0x0002c854
   19af8:	00031609 	.word	0x00031609
   19afc:	000312fe 	.word	0x000312fe
   19b00:	00031565 	.word	0x00031565
   19b04:	00031536 	.word	0x00031536
   19b08:	0002d881 	.word	0x0002d881
   19b0c:	00031580 	.word	0x00031580
   19b10:	000315bb 	.word	0x000315bb

00019b14 <smp_central_ident>:
{
   19b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b18:	460b      	mov	r3, r1
   19b1a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19b1c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   19b20:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19b22:	210d      	movs	r1, #13
   19b24:	3004      	adds	r0, #4
   19b26:	f00f fe45 	bl	297b4 <atomic_test_bit>
   19b2a:	b358      	cbz	r0, 19b84 <smp_central_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19b2c:	f108 0690 	add.w	r6, r8, #144	; 0x90
   19b30:	4632      	mov	r2, r6
   19b32:	2004      	movs	r0, #4
   19b34:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   19b38:	68dd      	ldr	r5, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19b3a:	f000 fbdf 	bl	1a2fc <bt_keys_get_type>
		if (!keys) {
   19b3e:	b9c0      	cbnz	r0, 19b72 <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19b40:	4630      	mov	r0, r6
   19b42:	f7f7 fe33 	bl	117ac <bt_addr_le_str>
   19b46:	466c      	mov	r4, sp
   19b48:	b088      	sub	sp, #32
   19b4a:	466a      	mov	r2, sp
   19b4c:	4b1a      	ldr	r3, [pc, #104]	; (19bb8 <smp_central_ident+0xa4>)
   19b4e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19b52:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19b56:	f44f 7300 	mov.w	r3, #512	; 0x200
   19b5a:	8393      	strh	r3, [r2, #28]
   19b5c:	4b17      	ldr	r3, [pc, #92]	; (19bbc <smp_central_ident+0xa8>)
   19b5e:	4818      	ldr	r0, [pc, #96]	; (19bc0 <smp_central_ident+0xac>)
   19b60:	f842 3f10 	str.w	r3, [r2, #16]!
   19b64:	f00f fe7e 	bl	29864 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   19b68:	2008      	movs	r0, #8
   19b6a:	46a5      	mov	sp, r4
}
   19b6c:	46bd      	mov	sp, r7
   19b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19b72:	462a      	mov	r2, r5
   19b74:	f832 3b02 	ldrh.w	r3, [r2], #2
   19b78:	8303      	strh	r3, [r0, #24]
   19b7a:	f8d5 3002 	ldr.w	r3, [r5, #2]
   19b7e:	6103      	str	r3, [r0, #16]
   19b80:	6853      	ldr	r3, [r2, #4]
   19b82:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   19b84:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19b88:	f023 0201 	bic.w	r2, r3, #1
   19b8c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19b90:	079a      	lsls	r2, r3, #30
   19b92:	d508      	bpl.n	19ba6 <smp_central_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19b94:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19b96:	4620      	mov	r0, r4
   19b98:	f00f fe72 	bl	29880 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19b9c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19ba0:	b129      	cbz	r1, 19bae <smp_central_ident+0x9a>
	return 0;
   19ba2:	2000      	movs	r0, #0
   19ba4:	e7e2      	b.n	19b6c <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19ba6:	075b      	lsls	r3, r3, #29
   19ba8:	d5f8      	bpl.n	19b9c <smp_central_ident+0x88>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19baa:	210a      	movs	r1, #10
   19bac:	e7f3      	b.n	19b96 <smp_central_ident+0x82>
		smp_pairing_complete(smp, 0);
   19bae:	4620      	mov	r0, r4
   19bb0:	f7ff fd0e 	bl	195d0 <smp_pairing_complete>
   19bb4:	e7f5      	b.n	19ba2 <smp_central_ident+0x8e>
   19bb6:	bf00      	nop
   19bb8:	000312fe 	.word	0x000312fe
   19bbc:	01000003 	.word	0x01000003
   19bc0:	0002c854 	.word	0x0002c854

00019bc4 <smp_pairing_failed>:
{
   19bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19bc8:	460e      	mov	r6, r1
   19bca:	af00      	add	r7, sp, #0
   19bcc:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19bce:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19bd2:	f7fe fd3b 	bl	1864c <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   19bd6:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19bd8:	46e9      	mov	r9, sp
   19bda:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19bdc:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19bde:	466a      	mov	r2, sp
   19be0:	7833      	ldrb	r3, [r6, #0]
   19be2:	4914      	ldr	r1, [pc, #80]	; (19c34 <smp_pairing_failed+0x70>)
   19be4:	4814      	ldr	r0, [pc, #80]	; (19c38 <smp_pairing_failed+0x74>)
   19be6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19bea:	2303      	movs	r3, #3
   19bec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19bf0:	f842 3f10 	str.w	r3, [r2, #16]!
   19bf4:	f00f fe36 	bl	29864 <z_log_msg_static_create.constprop.0>
   19bf8:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19bfa:	f104 0904 	add.w	r9, r4, #4
   19bfe:	210a      	movs	r1, #10
   19c00:	4648      	mov	r0, r9
   19c02:	f00f fed4 	bl	299ae <atomic_test_and_clear_bit>
   19c06:	b140      	cbz	r0, 19c1a <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19c08:	b975      	cbnz	r5, 19c28 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   19c0a:	4620      	mov	r0, r4
   19c0c:	7831      	ldrb	r1, [r6, #0]
   19c0e:	f7ff fcdf 	bl	195d0 <smp_pairing_complete>
}
   19c12:	2000      	movs	r0, #0
   19c14:	46bd      	mov	sp, r7
   19c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   19c1a:	210b      	movs	r1, #11
   19c1c:	4648      	mov	r0, r9
   19c1e:	f00f fec6 	bl	299ae <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19c22:	2800      	cmp	r0, #0
   19c24:	d1f0      	bne.n	19c08 <smp_pairing_failed+0x44>
   19c26:	e7f0      	b.n	19c0a <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19c28:	692b      	ldr	r3, [r5, #16]
   19c2a:	2b00      	cmp	r3, #0
   19c2c:	d0ed      	beq.n	19c0a <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   19c2e:	4640      	mov	r0, r8
   19c30:	4798      	blx	r3
   19c32:	e7ea      	b.n	19c0a <smp_pairing_failed+0x46>
   19c34:	000315da 	.word	0x000315da
   19c38:	0002c854 	.word	0x0002c854

00019c3c <bt_smp_encrypt_change>:
{
   19c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c40:	b08f      	sub	sp, #60	; 0x3c
	struct bt_conn *conn = chan->conn;
   19c42:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19c44:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   19c48:	4604      	mov	r4, r0
   19c4a:	4688      	mov	r8, r1
   19c4c:	af00      	add	r7, sp, #0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19c4e:	2101      	movs	r1, #1
   19c50:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   19c52:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19c56:	f00f feaa 	bl	299ae <atomic_test_and_clear_bit>
   19c5a:	b338      	cbz	r0, 19cac <bt_smp_encrypt_change+0x70>
	if (hci_status) {
   19c5c:	f1b8 0f00 	cmp.w	r8, #0
   19c60:	d019      	beq.n	19c96 <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19c62:	2103      	movs	r1, #3
   19c64:	4630      	mov	r0, r6
   19c66:	f00f fda5 	bl	297b4 <atomic_test_bit>
   19c6a:	b1f8      	cbz	r0, 19cac <bt_smp_encrypt_change+0x70>
			uint8_t smp_err = smp_err_get(
   19c6c:	4640      	mov	r0, r8
   19c6e:	f7f8 fee5 	bl	12a3c <bt_security_err_get>
	switch (auth_err) {
   19c72:	3801      	subs	r0, #1
   19c74:	b2c0      	uxtb	r0, r0
   19c76:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   19c78:	bf8c      	ite	hi
   19c7a:	2400      	movhi	r4, #0
   19c7c:	4b75      	ldrls	r3, [pc, #468]	; (19e54 <bt_smp_encrypt_change+0x218>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19c7e:	f04f 0102 	mov.w	r1, #2
   19c82:	bf98      	it	ls
   19c84:	5c1c      	ldrbls	r4, [r3, r0]
   19c86:	4630      	mov	r0, r6
   19c88:	f00f fdfa 	bl	29880 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   19c8c:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   19c8e:	4628      	mov	r0, r5
   19c90:	f7ff fc9e 	bl	195d0 <smp_pairing_complete>
   19c94:	e00a      	b.n	19cac <bt_smp_encrypt_change+0x70>
	if (!conn->encrypt) {
   19c96:	f899 300b 	ldrb.w	r3, [r9, #11]
   19c9a:	b13b      	cbz	r3, 19cac <bt_smp_encrypt_change+0x70>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19c9c:	2103      	movs	r1, #3
   19c9e:	4630      	mov	r0, r6
   19ca0:	f00f fd88 	bl	297b4 <atomic_test_bit>
   19ca4:	b930      	cbnz	r0, 19cb4 <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   19ca6:	4628      	mov	r0, r5
   19ca8:	f00f fe93 	bl	299d2 <smp_reset>
}
   19cac:	373c      	adds	r7, #60	; 0x3c
   19cae:	46bd      	mov	sp, r7
   19cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19cb4:	2105      	movs	r1, #5
   19cb6:	4630      	mov	r0, r6
   19cb8:	f00f fd7c 	bl	297b4 <atomic_test_bit>
   19cbc:	b1b8      	cbz	r0, 19cee <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   19cbe:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19cc2:	071a      	lsls	r2, r3, #28
   19cc4:	d507      	bpl.n	19cd6 <bt_smp_encrypt_change+0x9a>
   19cc6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19cca:	071b      	lsls	r3, r3, #28
   19ccc:	d503      	bpl.n	19cd6 <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   19cce:	2111      	movs	r1, #17
   19cd0:	4630      	mov	r0, r6
   19cd2:	f00f fdd5 	bl	29880 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   19cd6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19cda:	f023 0308 	bic.w	r3, r3, #8
   19cde:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   19ce2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19ce6:	f023 0308 	bic.w	r3, r3, #8
   19cea:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   19cee:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19cf2:	07d8      	lsls	r0, r3, #31
   19cf4:	d522      	bpl.n	19d3c <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   19cf6:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19cf8:	4628      	mov	r0, r5
   19cfa:	f00f fdc1 	bl	29880 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19cfe:	2102      	movs	r1, #2
   19d00:	4630      	mov	r0, r6
   19d02:	f00f fdbd 	bl	29880 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   19d06:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   19d08:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   19d0c:	b9f2      	cbnz	r2, 19d4c <bt_smp_encrypt_change+0x110>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   19d0e:	f103 0090 	add.w	r0, r3, #144	; 0x90
   19d12:	f7f7 fd4b 	bl	117ac <bt_addr_le_str>
   19d16:	466c      	mov	r4, sp
   19d18:	b088      	sub	sp, #32
   19d1a:	466a      	mov	r2, sp
   19d1c:	4b4e      	ldr	r3, [pc, #312]	; (19e58 <bt_smp_encrypt_change+0x21c>)
   19d1e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19d22:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19d26:	f44f 7300 	mov.w	r3, #512	; 0x200
   19d2a:	8393      	strh	r3, [r2, #28]
   19d2c:	4b4b      	ldr	r3, [pc, #300]	; (19e5c <bt_smp_encrypt_change+0x220>)
   19d2e:	484c      	ldr	r0, [pc, #304]	; (19e60 <bt_smp_encrypt_change+0x224>)
   19d30:	f842 3f10 	str.w	r3, [r2, #16]!
   19d34:	f00f fd96 	bl	29864 <z_log_msg_static_create.constprop.0>
   19d38:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   19d3a:	e7b7      	b.n	19cac <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19d3c:	0799      	lsls	r1, r3, #30
   19d3e:	d501      	bpl.n	19d44 <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19d40:	2108      	movs	r1, #8
   19d42:	e7d9      	b.n	19cf8 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19d44:	075a      	lsls	r2, r3, #29
   19d46:	d5da      	bpl.n	19cfe <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19d48:	210a      	movs	r1, #10
   19d4a:	e7d5      	b.n	19cf8 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19d4c:	2105      	movs	r1, #5
   19d4e:	f00f fd31 	bl	297b4 <atomic_test_bit>
   19d52:	b9c0      	cbnz	r0, 19d86 <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   19d54:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19d58:	07db      	lsls	r3, r3, #31
   19d5a:	d514      	bpl.n	19d86 <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   19d5c:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   19d5e:	211a      	movs	r1, #26
   19d60:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
   19d64:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   19d68:	f7fa fa6c 	bl	14244 <bt_rand>
   19d6c:	4682      	mov	sl, r0
   19d6e:	b178      	cbz	r0, 19d90 <bt_smp_encrypt_change+0x154>
			LOG_ERR("Unable to get random bytes");
   19d70:	4b3c      	ldr	r3, [pc, #240]	; (19e64 <bt_smp_encrypt_change+0x228>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   19d72:	617b      	str	r3, [r7, #20]
   19d74:	2302      	movs	r3, #2
   19d76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19d7a:	4839      	ldr	r0, [pc, #228]	; (19e60 <bt_smp_encrypt_change+0x224>)
   19d7c:	613b      	str	r3, [r7, #16]
   19d7e:	f107 0210 	add.w	r2, r7, #16
   19d82:	f00f fd6f 	bl	29864 <z_log_msg_static_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   19d86:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   19d8a:	2900      	cmp	r1, #0
   19d8c:	d18e      	bne.n	19cac <bt_smp_encrypt_change+0x70>
   19d8e:	e77e      	b.n	19c8e <bt_smp_encrypt_change+0x52>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   19d90:	2106      	movs	r1, #6
   19d92:	4628      	mov	r0, r5
   19d94:	f00f fd84 	bl	298a0 <smp_create_pdu.constprop.0>
		if (!buf) {
   19d98:	4681      	mov	r9, r0
   19d9a:	b908      	cbnz	r0, 19da0 <bt_smp_encrypt_change+0x164>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   19d9c:	4b32      	ldr	r3, [pc, #200]	; (19e68 <bt_smp_encrypt_change+0x22c>)
   19d9e:	e7e8      	b.n	19d72 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   19da0:	2110      	movs	r1, #16
   19da2:	300c      	adds	r0, #12
   19da4:	f001 f858 	bl	1ae58 <net_buf_simple_add>
   19da8:	f898 200c 	ldrb.w	r2, [r8, #12]
   19dac:	f107 011c 	add.w	r1, r7, #28
   19db0:	4683      	mov	fp, r0
   19db2:	f011 fdbb 	bl	2b92c <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   19db6:	f898 000c 	ldrb.w	r0, [r8, #12]
   19dba:	280f      	cmp	r0, #15
   19dbc:	d805      	bhi.n	19dca <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   19dbe:	f1c0 0210 	rsb	r2, r0, #16
   19dc2:	4651      	mov	r1, sl
   19dc4:	4458      	add	r0, fp
   19dc6:	f011 fdeb 	bl	2b9a0 <memset>
		smp_send(smp, buf, NULL, NULL);
   19dca:	4649      	mov	r1, r9
   19dcc:	2200      	movs	r2, #0
   19dce:	4628      	mov	r0, r5
   19dd0:	f00f fd2b 	bl	2982a <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   19dd4:	2107      	movs	r1, #7
   19dd6:	4628      	mov	r0, r5
   19dd8:	f00f fd62 	bl	298a0 <smp_create_pdu.constprop.0>
		if (!buf) {
   19ddc:	4681      	mov	r9, r0
   19dde:	b908      	cbnz	r0, 19de4 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   19de0:	4b22      	ldr	r3, [pc, #136]	; (19e6c <bt_smp_encrypt_change+0x230>)
   19de2:	e7c6      	b.n	19d72 <bt_smp_encrypt_change+0x136>
   19de4:	210a      	movs	r1, #10
   19de6:	300c      	adds	r0, #12
   19de8:	f001 f836 	bl	1ae58 <net_buf_simple_add>
   19dec:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19dee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   19df2:	ca03      	ldmia	r2!, {r0, r1}
   19df4:	f8c3 0002 	str.w	r0, [r3, #2]
   19df8:	f8c3 1006 	str.w	r1, [r3, #6]
   19dfc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
		smp_send(smp, buf, smp_ident_sent, NULL);
   19dfe:	4649      	mov	r1, r9
   19e00:	4628      	mov	r0, r5
   19e02:	801a      	strh	r2, [r3, #0]
   19e04:	4a1a      	ldr	r2, [pc, #104]	; (19e70 <bt_smp_encrypt_change+0x234>)
   19e06:	f00f fd10 	bl	2982a <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19e0a:	4630      	mov	r0, r6
   19e0c:	210d      	movs	r1, #13
   19e0e:	f00f fcd1 	bl	297b4 <atomic_test_bit>
   19e12:	f107 062c 	add.w	r6, r7, #44	; 0x2c
   19e16:	2800      	cmp	r0, #0
   19e18:	d0b5      	beq.n	19d86 <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   19e1a:	2101      	movs	r1, #1
   19e1c:	4640      	mov	r0, r8
   19e1e:	f000 fa55 	bl	1a2cc <bt_keys_add_type>
   19e22:	f107 031c 	add.w	r3, r7, #28
   19e26:	f108 0c4a 	add.w	ip, r8, #74	; 0x4a
   19e2a:	461a      	mov	r2, r3
   19e2c:	ca03      	ldmia	r2!, {r0, r1}
   19e2e:	42b2      	cmp	r2, r6
   19e30:	f8cc 0000 	str.w	r0, [ip]
   19e34:	f8cc 1004 	str.w	r1, [ip, #4]
   19e38:	4613      	mov	r3, r2
   19e3a:	f10c 0c08 	add.w	ip, ip, #8
   19e3e:	d1f4      	bne.n	19e2a <bt_smp_encrypt_change+0x1ee>
   19e40:	4633      	mov	r3, r6
   19e42:	cb03      	ldmia	r3!, {r0, r1}
   19e44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   19e46:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   19e4a:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   19e4e:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   19e52:	e798      	b.n	19d86 <bt_smp_encrypt_change+0x14a>
   19e54:	000316a6 	.word	0x000316a6
   19e58:	000315fc 	.word	0x000315fc
   19e5c:	01000003 	.word	0x01000003
   19e60:	0002c854 	.word	0x0002c854
   19e64:	00031611 	.word	0x00031611
   19e68:	0003162c 	.word	0x0003162c
   19e6c:	00031653 	.word	0x00031653
   19e70:	00019eb1 	.word	0x00019eb1

00019e74 <smp_timeout>:
{
   19e74:	b510      	push	{r4, lr}
   19e76:	4604      	mov	r4, r0
   19e78:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   19e7a:	4b0b      	ldr	r3, [pc, #44]	; (19ea8 <smp_timeout+0x34>)
   19e7c:	aa04      	add	r2, sp, #16
   19e7e:	9305      	str	r3, [sp, #20]
   19e80:	2302      	movs	r3, #2
   19e82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19e86:	4809      	ldr	r0, [pc, #36]	; (19eac <smp_timeout+0x38>)
   19e88:	9304      	str	r3, [sp, #16]
   19e8a:	f00f fceb 	bl	29864 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   19e8e:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   19e92:	2108      	movs	r1, #8
   19e94:	f7ff fb9c 	bl	195d0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   19e98:	2104      	movs	r1, #4
   19e9a:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   19e9e:	b006      	add	sp, #24
   19ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   19ea4:	f00f bcec 	b.w	29880 <atomic_set_bit>
   19ea8:	0003167b 	.word	0x0003167b
   19eac:	0002c854 	.word	0x0002c854

00019eb0 <smp_ident_sent>:
{
   19eb0:	b508      	push	{r3, lr}
	if (!err) {
   19eb2:	bb1a      	cbnz	r2, 19efc <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   19eb4:	7883      	ldrb	r3, [r0, #2]
   19eb6:	2b01      	cmp	r3, #1
   19eb8:	d120      	bne.n	19efc <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   19eba:	2106      	movs	r1, #6
   19ebc:	f00e fde5 	bl	28a8a <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   19ec0:	b970      	cbnz	r0, 19ee0 <smp_ident_sent+0x30>
   19ec2:	490f      	ldr	r1, [pc, #60]	; (19f00 <smp_ident_sent+0x50>)
   19ec4:	f240 2365 	movw	r3, #613	; 0x265
   19ec8:	4a0e      	ldr	r2, [pc, #56]	; (19f04 <smp_ident_sent+0x54>)
   19eca:	480f      	ldr	r0, [pc, #60]	; (19f08 <smp_ident_sent+0x58>)
   19ecc:	f00c fd29 	bl	26922 <assert_print>
   19ed0:	480e      	ldr	r0, [pc, #56]	; (19f0c <smp_ident_sent+0x5c>)
   19ed2:	f00c fd26 	bl	26922 <assert_print>
   19ed6:	f240 2165 	movw	r1, #613	; 0x265
   19eda:	480a      	ldr	r0, [pc, #40]	; (19f04 <smp_ident_sent+0x54>)
   19edc:	f00c fd1a 	bl	26914 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   19ee0:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   19ee4:	f023 0301 	bic.w	r3, r3, #1
   19ee8:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   19eec:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   19ef0:	b921      	cbnz	r1, 19efc <smp_ident_sent+0x4c>
}
   19ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   19ef6:	38ec      	subs	r0, #236	; 0xec
   19ef8:	f7ff bb6a 	b.w	195d0 <smp_pairing_complete>
}
   19efc:	bd08      	pop	{r3, pc}
   19efe:	bf00      	nop
   19f00:	00030c46 	.word	0x00030c46
   19f04:	00031536 	.word	0x00031536
   19f08:	0002d881 	.word	0x0002d881
   19f0c:	00031687 	.word	0x00031687

00019f10 <bt_smp_update_keys>:
{
   19f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f14:	af00      	add	r7, sp, #0
   19f16:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   19f18:	f00f fca7 	bl	2986a <smp_chan_get>
	if (!smp) {
   19f1c:	4605      	mov	r5, r0
   19f1e:	b360      	cbz	r0, 19f7a <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19f20:	1d06      	adds	r6, r0, #4
   19f22:	2103      	movs	r1, #3
   19f24:	4630      	mov	r0, r6
   19f26:	f00f fc45 	bl	297b4 <atomic_test_bit>
   19f2a:	b330      	cbz	r0, 19f7a <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   19f2c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   19f30:	b108      	cbz	r0, 19f36 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   19f32:	f000 fa07 	bl	1a344 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19f36:	f104 0890 	add.w	r8, r4, #144	; 0x90
   19f3a:	4641      	mov	r1, r8
   19f3c:	7a20      	ldrb	r0, [r4, #8]
   19f3e:	f000 f8db 	bl	1a0f8 <bt_keys_get_addr>
   19f42:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   19f46:	b9d8      	cbnz	r0, 19f80 <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19f48:	4640      	mov	r0, r8
   19f4a:	f7f7 fc2f 	bl	117ac <bt_addr_le_str>
   19f4e:	466c      	mov	r4, sp
   19f50:	b088      	sub	sp, #32
   19f52:	466a      	mov	r2, sp
   19f54:	4b3a      	ldr	r3, [pc, #232]	; (1a040 <bt_smp_update_keys+0x130>)
   19f56:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19f5a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
   19f62:	8393      	strh	r3, [r2, #28]
   19f64:	4b37      	ldr	r3, [pc, #220]	; (1a044 <bt_smp_update_keys+0x134>)
   19f66:	4838      	ldr	r0, [pc, #224]	; (1a048 <bt_smp_update_keys+0x138>)
   19f68:	f842 3f10 	str.w	r3, [r2, #16]!
   19f6c:	f00f fc7a 	bl	29864 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19f70:	2108      	movs	r1, #8
   19f72:	46a5      	mov	sp, r4
   19f74:	4628      	mov	r0, r5
   19f76:	f7ff fbaf 	bl	196d8 <smp_error>
}
   19f7a:	46bd      	mov	sp, r7
   19f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   19f80:	210e      	movs	r1, #14
   19f82:	4630      	mov	r0, r6
   19f84:	f00f fc16 	bl	297b4 <atomic_test_bit>
   19f88:	b128      	cbz	r0, 19f96 <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   19f8a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   19f8e:	7b53      	ldrb	r3, [r2, #13]
   19f90:	f043 0302 	orr.w	r3, r3, #2
   19f94:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   19f96:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   19f98:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   19f9c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   19f9e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   19fa0:	d83a      	bhi.n	1a018 <bt_smp_update_keys+0x108>
   19fa2:	2a00      	cmp	r2, #0
   19fa4:	d03f      	beq.n	1a026 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   19fa6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   19faa:	7b53      	ldrb	r3, [r2, #13]
   19fac:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   19fb0:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   19fb2:	7d2b      	ldrb	r3, [r5, #20]
   19fb4:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   19fb6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   19fba:	428b      	cmp	r3, r1
   19fbc:	bf28      	it	cs
   19fbe:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19fc0:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   19fc2:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19fc4:	2105      	movs	r1, #5
   19fc6:	f00f fbf5 	bl	297b4 <atomic_test_bit>
   19fca:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   19fce:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19fd0:	b390      	cbz	r0, 1a038 <bt_smp_update_keys+0x128>
		conn->le.keys->flags |= BT_KEYS_SC;
   19fd2:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19fd6:	210d      	movs	r1, #13
   19fd8:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   19fda:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19fdc:	f00f fbea 	bl	297b4 <atomic_test_bit>
   19fe0:	2800      	cmp	r0, #0
   19fe2:	d0ca      	beq.n	19f7a <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   19fe4:	2120      	movs	r1, #32
   19fe6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   19fea:	f000 f96f 	bl	1a2cc <bt_keys_add_type>
   19fee:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19ff2:	f105 0247 	add.w	r2, r5, #71	; 0x47
   19ff6:	331a      	adds	r3, #26
   19ff8:	3557      	adds	r5, #87	; 0x57
   19ffa:	f852 1b04 	ldr.w	r1, [r2], #4
   19ffe:	42aa      	cmp	r2, r5
   1a000:	f843 1b04 	str.w	r1, [r3], #4
   1a004:	d1f9      	bne.n	19ffa <bt_smp_update_keys+0xea>
__ssp_bos_icheck3(memset, void *, int)
   1a006:	2300      	movs	r3, #0
   1a008:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a00c:	6113      	str	r3, [r2, #16]
   1a00e:	6153      	str	r3, [r2, #20]
   1a010:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a014:	8313      	strh	r3, [r2, #24]
   1a016:	e7b0      	b.n	19f7a <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   1a018:	3a05      	subs	r2, #5
   1a01a:	2a01      	cmp	r2, #1
   1a01c:	d803      	bhi.n	1a026 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a01e:	f043 0320 	orr.w	r3, r3, #32
   1a022:	734b      	strb	r3, [r1, #13]
   1a024:	e7bf      	b.n	19fa6 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1a026:	f023 0320 	bic.w	r3, r3, #32
   1a02a:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a02c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a030:	7b53      	ldrb	r3, [r2, #13]
   1a032:	f023 0301 	bic.w	r3, r3, #1
   1a036:	e7bb      	b.n	19fb0 <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1a038:	f022 0210 	bic.w	r2, r2, #16
   1a03c:	735a      	strb	r2, [r3, #13]
   1a03e:	e79c      	b.n	19f7a <bt_smp_update_keys+0x6a>
   1a040:	000312fe 	.word	0x000312fe
   1a044:	01000003 	.word	0x01000003
   1a048:	0002c854 	.word	0x0002c854

0001a04c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1a04c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a04e:	4b07      	ldr	r3, [pc, #28]	; (1a06c <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1a050:	4807      	ldr	r0, [pc, #28]	; (1a070 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a052:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1a056:	f003 0306 	and.w	r3, r3, #6
   1a05a:	1f9a      	subs	r2, r3, #6
   1a05c:	4253      	negs	r3, r2
   1a05e:	4153      	adcs	r3, r2
   1a060:	4a04      	ldr	r2, [pc, #16]	; (1a074 <bt_smp_init+0x28>)
   1a062:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1a064:	f7fa f918 	bl	14298 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1a068:	2000      	movs	r0, #0
   1a06a:	bd08      	pop	{r3, pc}
   1a06c:	20008000 	.word	0x20008000
   1a070:	200086e0 	.word	0x200086e0
   1a074:	200224c8 	.word	0x200224c8

0001a078 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1a078:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a07a:	b958      	cbnz	r0, 1a094 <id_add+0x1c>
   1a07c:	4907      	ldr	r1, [pc, #28]	; (1a09c <id_add+0x24>)
   1a07e:	4808      	ldr	r0, [pc, #32]	; (1a0a0 <id_add+0x28>)
   1a080:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1a084:	4a07      	ldr	r2, [pc, #28]	; (1a0a4 <id_add+0x2c>)
   1a086:	f00c fc4c 	bl	26922 <assert_print>
   1a08a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1a08e:	4805      	ldr	r0, [pc, #20]	; (1a0a4 <id_add+0x2c>)
   1a090:	f00c fc40 	bl	26914 <assert_post_action>

	bt_id_add(keys);
}
   1a094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1a098:	f7f9 bb00 	b.w	1369c <bt_id_add>
   1a09c:	00031727 	.word	0x00031727
   1a0a0:	0002d881 	.word	0x0002d881
   1a0a4:	000316f7 	.word	0x000316f7

0001a0a8 <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a0a8:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a0aa:	4c10      	ldr	r4, [pc, #64]	; (1a0ec <bt_keys_get_addr.part.0+0x44>)
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a0ac:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a0ae:	f814 3b01 	ldrb.w	r3, [r4], #1
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a0b2:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a0b4:	4283      	cmp	r3, r0
   1a0b6:	d007      	beq.n	1a0c8 <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1a0b8:	2207      	movs	r2, #7
   1a0ba:	490d      	ldr	r1, [pc, #52]	; (1a0f0 <bt_keys_get_addr.part.0+0x48>)
   1a0bc:	480d      	ldr	r0, [pc, #52]	; (1a0f4 <bt_keys_get_addr.part.0+0x4c>)
   1a0be:	f011 fc25 	bl	2b90c <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1a0c2:	b148      	cbz	r0, 1a0d8 <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1a0c4:	2000      	movs	r0, #0
}
   1a0c6:	bd70      	pop	{r4, r5, r6, pc}
   1a0c8:	2207      	movs	r2, #7
   1a0ca:	4620      	mov	r0, r4
   1a0cc:	f011 fc1e 	bl	2b90c <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a0d0:	2800      	cmp	r0, #0
   1a0d2:	d1f1      	bne.n	1a0b8 <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1a0d4:	4805      	ldr	r0, [pc, #20]	; (1a0ec <bt_keys_get_addr.part.0+0x44>)
   1a0d6:	e7f6      	b.n	1a0c6 <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1a0d8:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1a0dc:	682b      	ldr	r3, [r5, #0]
   1a0de:	6023      	str	r3, [r4, #0]
   1a0e0:	88ab      	ldrh	r3, [r5, #4]
   1a0e2:	80a3      	strh	r3, [r4, #4]
   1a0e4:	79ab      	ldrb	r3, [r5, #6]
   1a0e6:	71a3      	strb	r3, [r4, #6]
		return keys;
   1a0e8:	e7f4      	b.n	1a0d4 <bt_keys_get_addr.part.0+0x2c>
   1a0ea:	bf00      	nop
   1a0ec:	2002180c 	.word	0x2002180c
   1a0f0:	0002f895 	.word	0x0002f895
   1a0f4:	2002180d 	.word	0x2002180d

0001a0f8 <bt_keys_get_addr>:
{
   1a0f8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a0fa:	b949      	cbnz	r1, 1a110 <bt_keys_get_addr+0x18>
   1a0fc:	4906      	ldr	r1, [pc, #24]	; (1a118 <bt_keys_get_addr+0x20>)
   1a0fe:	4807      	ldr	r0, [pc, #28]	; (1a11c <bt_keys_get_addr+0x24>)
   1a100:	2359      	movs	r3, #89	; 0x59
   1a102:	4a07      	ldr	r2, [pc, #28]	; (1a120 <bt_keys_get_addr+0x28>)
   1a104:	f00c fc0d 	bl	26922 <assert_print>
   1a108:	2159      	movs	r1, #89	; 0x59
   1a10a:	4805      	ldr	r0, [pc, #20]	; (1a120 <bt_keys_get_addr+0x28>)
   1a10c:	f00c fc02 	bl	26914 <assert_post_action>
}
   1a110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a114:	f7ff bfc8 	b.w	1a0a8 <bt_keys_get_addr.part.0>
   1a118:	0003173b 	.word	0x0003173b
   1a11c:	0002d881 	.word	0x0002d881
   1a120:	000316f7 	.word	0x000316f7

0001a124 <bt_keys_foreach_type>:
{
   1a124:	460b      	mov	r3, r1
   1a126:	b510      	push	{r4, lr}
   1a128:	4611      	mov	r1, r2
   1a12a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1a12c:	b963      	cbnz	r3, 1a148 <bt_keys_foreach_type+0x24>
   1a12e:	4909      	ldr	r1, [pc, #36]	; (1a154 <bt_keys_foreach_type+0x30>)
   1a130:	4809      	ldr	r0, [pc, #36]	; (1a158 <bt_keys_foreach_type+0x34>)
   1a132:	23b3      	movs	r3, #179	; 0xb3
   1a134:	4a09      	ldr	r2, [pc, #36]	; (1a15c <bt_keys_foreach_type+0x38>)
   1a136:	f00c fbf4 	bl	26922 <assert_print>
   1a13a:	21b3      	movs	r1, #179	; 0xb3
   1a13c:	4807      	ldr	r0, [pc, #28]	; (1a15c <bt_keys_foreach_type+0x38>)
   1a13e:	f00c fbe9 	bl	26914 <assert_post_action>
}
   1a142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1a146:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1a148:	4805      	ldr	r0, [pc, #20]	; (1a160 <bt_keys_foreach_type+0x3c>)
   1a14a:	89c2      	ldrh	r2, [r0, #14]
   1a14c:	4222      	tst	r2, r4
   1a14e:	d1f8      	bne.n	1a142 <bt_keys_foreach_type+0x1e>
}
   1a150:	bd10      	pop	{r4, pc}
   1a152:	bf00      	nop
   1a154:	0003174f 	.word	0x0003174f
   1a158:	0002d881 	.word	0x0002d881
   1a15c:	000316f7 	.word	0x000316f7
   1a160:	2002180c 	.word	0x2002180c

0001a164 <keys_commit>:

static int keys_commit(void)
{
   1a164:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1a166:	2200      	movs	r2, #0
   1a168:	2002      	movs	r0, #2
   1a16a:	4902      	ldr	r1, [pc, #8]	; (1a174 <keys_commit+0x10>)
   1a16c:	f7ff ffda 	bl	1a124 <bt_keys_foreach_type>
	}

	return 0;
}
   1a170:	2000      	movs	r0, #0
   1a172:	bd08      	pop	{r3, pc}
   1a174:	0001a079 	.word	0x0001a079

0001a178 <bt_keys_find>:
{
   1a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a17a:	4605      	mov	r5, r0
   1a17c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a17e:	4614      	mov	r4, r2
   1a180:	b9aa      	cbnz	r2, 1a1ae <bt_keys_find+0x36>
   1a182:	490f      	ldr	r1, [pc, #60]	; (1a1c0 <bt_keys_find+0x48>)
   1a184:	480f      	ldr	r0, [pc, #60]	; (1a1c4 <bt_keys_find+0x4c>)
   1a186:	23c0      	movs	r3, #192	; 0xc0
   1a188:	4a0f      	ldr	r2, [pc, #60]	; (1a1c8 <bt_keys_find+0x50>)
   1a18a:	f00c fbca 	bl	26922 <assert_print>
   1a18e:	21c0      	movs	r1, #192	; 0xc0
   1a190:	480d      	ldr	r0, [pc, #52]	; (1a1c8 <bt_keys_find+0x50>)
   1a192:	f00c fbbf 	bl	26914 <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a196:	b18a      	cbz	r2, 1a1bc <bt_keys_find+0x44>
   1a198:	428e      	cmp	r6, r1
   1a19a:	d10f      	bne.n	1a1bc <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   1a19c:	2207      	movs	r2, #7
   1a19e:	4621      	mov	r1, r4
   1a1a0:	480a      	ldr	r0, [pc, #40]	; (1a1cc <bt_keys_find+0x54>)
   1a1a2:	f011 fbb3 	bl	2b90c <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a1a6:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a1a8:	b918      	cbnz	r0, 1a1b2 <bt_keys_find+0x3a>
			return &key_pool[i];
   1a1aa:	4809      	ldr	r0, [pc, #36]	; (1a1d0 <bt_keys_find+0x58>)
   1a1ac:	e007      	b.n	1a1be <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a1ae:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a1b0:	4f07      	ldr	r7, [pc, #28]	; (1a1d0 <bt_keys_find+0x58>)
   1a1b2:	89fa      	ldrh	r2, [r7, #14]
   1a1b4:	7839      	ldrb	r1, [r7, #0]
   1a1b6:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a1b8:	2b00      	cmp	r3, #0
   1a1ba:	d0ec      	beq.n	1a196 <bt_keys_find+0x1e>
	return NULL;
   1a1bc:	2000      	movs	r0, #0
}
   1a1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a1c0:	0003173b 	.word	0x0003173b
   1a1c4:	0002d881 	.word	0x0002d881
   1a1c8:	000316f7 	.word	0x000316f7
   1a1cc:	2002180d 	.word	0x2002180d
   1a1d0:	2002180c 	.word	0x2002180c

0001a1d4 <bt_keys_find_irk>:
{
   1a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1d6:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1a1d8:	460c      	mov	r4, r1
   1a1da:	b949      	cbnz	r1, 1a1f0 <bt_keys_find_irk+0x1c>
   1a1dc:	4923      	ldr	r1, [pc, #140]	; (1a26c <bt_keys_find_irk+0x98>)
   1a1de:	4824      	ldr	r0, [pc, #144]	; (1a270 <bt_keys_find_irk+0x9c>)
   1a1e0:	23e9      	movs	r3, #233	; 0xe9
   1a1e2:	4a24      	ldr	r2, [pc, #144]	; (1a274 <bt_keys_find_irk+0xa0>)
   1a1e4:	f00c fb9d 	bl	26922 <assert_print>
   1a1e8:	21e9      	movs	r1, #233	; 0xe9
   1a1ea:	4822      	ldr	r0, [pc, #136]	; (1a274 <bt_keys_find_irk+0xa0>)
   1a1ec:	f00c fb92 	bl	26914 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1a1f0:	780b      	ldrb	r3, [r1, #0]
   1a1f2:	2b01      	cmp	r3, #1
   1a1f4:	d001      	beq.n	1a1fa <bt_keys_find_irk+0x26>
		return NULL;
   1a1f6:	2000      	movs	r0, #0
}
   1a1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1a1fa:	798b      	ldrb	r3, [r1, #6]
   1a1fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a200:	2b40      	cmp	r3, #64	; 0x40
   1a202:	d1f8      	bne.n	1a1f6 <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a204:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a206:	4d1c      	ldr	r5, [pc, #112]	; (1a278 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   1a208:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1a20c:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1a20e:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a210:	f002 0202 	and.w	r2, r2, #2
   1a214:	b1db      	cbz	r3, 1a24e <bt_keys_find_irk+0x7a>
   1a216:	2300      	movs	r3, #0
   1a218:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1a21a:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a21c:	f002 0202 	and.w	r2, r2, #2
   1a220:	2b00      	cmp	r3, #0
   1a222:	d1e8      	bne.n	1a1f6 <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a224:	2a00      	cmp	r2, #0
   1a226:	d0e6      	beq.n	1a1f6 <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   1a228:	42b1      	cmp	r1, r6
   1a22a:	d1e4      	bne.n	1a1f6 <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1a22c:	1c67      	adds	r7, r4, #1
   1a22e:	4639      	mov	r1, r7
   1a230:	4812      	ldr	r0, [pc, #72]	; (1a27c <bt_keys_find_irk+0xa8>)
   1a232:	f00d ff11 	bl	28058 <bt_rpa_irk_matches>
   1a236:	2301      	movs	r3, #1
   1a238:	2800      	cmp	r0, #0
   1a23a:	d0ed      	beq.n	1a218 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   1a23c:	f8d4 3001 	ldr.w	r3, [r4, #1]
   1a240:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   1a244:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   1a248:	4b0d      	ldr	r3, [pc, #52]	; (1a280 <bt_keys_find_irk+0xac>)
   1a24a:	809a      	strh	r2, [r3, #4]
}
   1a24c:	e00b      	b.n	1a266 <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a24e:	2a00      	cmp	r2, #0
   1a250:	d0e2      	beq.n	1a218 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   1a252:	42b0      	cmp	r0, r6
   1a254:	d1e0      	bne.n	1a218 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1a256:	2206      	movs	r2, #6
   1a258:	4639      	mov	r1, r7
   1a25a:	1c60      	adds	r0, r4, #1
   1a25c:	f011 fb56 	bl	2b90c <memcmp>
   1a260:	2301      	movs	r3, #1
   1a262:	2800      	cmp	r0, #0
   1a264:	d1d2      	bne.n	1a20c <bt_keys_find_irk+0x38>
			return &key_pool[i];
   1a266:	4804      	ldr	r0, [pc, #16]	; (1a278 <bt_keys_find_irk+0xa4>)
   1a268:	e7c6      	b.n	1a1f8 <bt_keys_find_irk+0x24>
   1a26a:	bf00      	nop
   1a26c:	0003173b 	.word	0x0003173b
   1a270:	0002d881 	.word	0x0002d881
   1a274:	000316f7 	.word	0x000316f7
   1a278:	2002180c 	.word	0x2002180c
   1a27c:	20021836 	.word	0x20021836
   1a280:	20021846 	.word	0x20021846

0001a284 <bt_keys_find_addr>:
{
   1a284:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a286:	b959      	cbnz	r1, 1a2a0 <bt_keys_find_addr+0x1c>
   1a288:	490c      	ldr	r1, [pc, #48]	; (1a2bc <bt_keys_find_addr+0x38>)
   1a28a:	480d      	ldr	r0, [pc, #52]	; (1a2c0 <bt_keys_find_addr+0x3c>)
   1a28c:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1a290:	4a0c      	ldr	r2, [pc, #48]	; (1a2c4 <bt_keys_find_addr+0x40>)
   1a292:	f00c fb46 	bl	26922 <assert_print>
   1a296:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1a29a:	480a      	ldr	r0, [pc, #40]	; (1a2c4 <bt_keys_find_addr+0x40>)
   1a29c:	f00c fb3a 	bl	26914 <assert_post_action>
		if (key_pool[i].id == id &&
   1a2a0:	4c09      	ldr	r4, [pc, #36]	; (1a2c8 <bt_keys_find_addr+0x44>)
   1a2a2:	7823      	ldrb	r3, [r4, #0]
   1a2a4:	4283      	cmp	r3, r0
   1a2a6:	d104      	bne.n	1a2b2 <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   1a2a8:	2207      	movs	r2, #7
   1a2aa:	1c60      	adds	r0, r4, #1
   1a2ac:	f011 fb2e 	bl	2b90c <memcmp>
   1a2b0:	b108      	cbz	r0, 1a2b6 <bt_keys_find_addr+0x32>
	return NULL;
   1a2b2:	2000      	movs	r0, #0
}
   1a2b4:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a2b6:	4620      	mov	r0, r4
   1a2b8:	e7fc      	b.n	1a2b4 <bt_keys_find_addr+0x30>
   1a2ba:	bf00      	nop
   1a2bc:	0003173b 	.word	0x0003173b
   1a2c0:	0002d881 	.word	0x0002d881
   1a2c4:	000316f7 	.word	0x000316f7
   1a2c8:	2002180c 	.word	0x2002180c

0001a2cc <bt_keys_add_type>:
{
   1a2cc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a2ce:	b958      	cbnz	r0, 1a2e8 <bt_keys_add_type+0x1c>
   1a2d0:	4907      	ldr	r1, [pc, #28]	; (1a2f0 <bt_keys_add_type+0x24>)
   1a2d2:	4808      	ldr	r0, [pc, #32]	; (1a2f4 <bt_keys_add_type+0x28>)
   1a2d4:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1a2d8:	4a07      	ldr	r2, [pc, #28]	; (1a2f8 <bt_keys_add_type+0x2c>)
   1a2da:	f00c fb22 	bl	26922 <assert_print>
   1a2de:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1a2e2:	4805      	ldr	r0, [pc, #20]	; (1a2f8 <bt_keys_add_type+0x2c>)
   1a2e4:	f00c fb16 	bl	26914 <assert_post_action>
	keys->keys |= type;
   1a2e8:	89c3      	ldrh	r3, [r0, #14]
   1a2ea:	4319      	orrs	r1, r3
   1a2ec:	81c1      	strh	r1, [r0, #14]
}
   1a2ee:	bd08      	pop	{r3, pc}
   1a2f0:	00031727 	.word	0x00031727
   1a2f4:	0002d881 	.word	0x0002d881
   1a2f8:	000316f7 	.word	0x000316f7

0001a2fc <bt_keys_get_type>:
{
   1a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2fe:	4606      	mov	r6, r0
   1a300:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a302:	4615      	mov	r5, r2
   1a304:	b94a      	cbnz	r2, 1a31a <bt_keys_get_type+0x1e>
   1a306:	490c      	ldr	r1, [pc, #48]	; (1a338 <bt_keys_get_type+0x3c>)
   1a308:	480c      	ldr	r0, [pc, #48]	; (1a33c <bt_keys_get_type+0x40>)
   1a30a:	23d2      	movs	r3, #210	; 0xd2
   1a30c:	4a0c      	ldr	r2, [pc, #48]	; (1a340 <bt_keys_get_type+0x44>)
   1a30e:	f00c fb08 	bl	26922 <assert_print>
   1a312:	21d2      	movs	r1, #210	; 0xd2
   1a314:	480a      	ldr	r0, [pc, #40]	; (1a340 <bt_keys_get_type+0x44>)
   1a316:	f00c fafd 	bl	26914 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1a31a:	f7ff ff2d 	bl	1a178 <bt_keys_find>
	if (keys) {
   1a31e:	4604      	mov	r4, r0
   1a320:	b940      	cbnz	r0, 1a334 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   1a322:	4629      	mov	r1, r5
   1a324:	4638      	mov	r0, r7
   1a326:	f7ff fee7 	bl	1a0f8 <bt_keys_get_addr>
	if (!keys) {
   1a32a:	4604      	mov	r4, r0
   1a32c:	b110      	cbz	r0, 1a334 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   1a32e:	4631      	mov	r1, r6
   1a330:	f7ff ffcc 	bl	1a2cc <bt_keys_add_type>
}
   1a334:	4620      	mov	r0, r4
   1a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a338:	0003173b 	.word	0x0003173b
   1a33c:	0002d881 	.word	0x0002d881
   1a340:	000316f7 	.word	0x000316f7

0001a344 <bt_keys_clear>:
{
   1a344:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a346:	4604      	mov	r4, r0
{
   1a348:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a34a:	b958      	cbnz	r0, 1a364 <bt_keys_clear+0x20>
   1a34c:	4916      	ldr	r1, [pc, #88]	; (1a3a8 <bt_keys_clear+0x64>)
   1a34e:	4817      	ldr	r0, [pc, #92]	; (1a3ac <bt_keys_clear+0x68>)
   1a350:	f240 1331 	movw	r3, #305	; 0x131
   1a354:	4a16      	ldr	r2, [pc, #88]	; (1a3b0 <bt_keys_clear+0x6c>)
   1a356:	f00c fae4 	bl	26922 <assert_print>
   1a35a:	f240 1131 	movw	r1, #305	; 0x131
   1a35e:	4814      	ldr	r0, [pc, #80]	; (1a3b0 <bt_keys_clear+0x6c>)
   1a360:	f00c fad8 	bl	26914 <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a364:	7a03      	ldrb	r3, [r0, #8]
   1a366:	075b      	lsls	r3, r3, #29
   1a368:	d501      	bpl.n	1a36e <bt_keys_clear+0x2a>
		bt_id_del(keys);
   1a36a:	f7f9 f9b1 	bl	136d0 <bt_id_del>
		if (keys->id) {
   1a36e:	4625      	mov	r5, r4
   1a370:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a374:	b1b2      	cbz	r2, 1a3a4 <bt_keys_clear+0x60>
			u8_to_dec(id, sizeof(id), keys->id);
   1a376:	ae02      	add	r6, sp, #8
   1a378:	2104      	movs	r1, #4
   1a37a:	4630      	mov	r0, r6
   1a37c:	f00c f881 	bl	26482 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a380:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a382:	462b      	mov	r3, r5
   1a384:	2124      	movs	r1, #36	; 0x24
   1a386:	4a0b      	ldr	r2, [pc, #44]	; (1a3b4 <bt_keys_clear+0x70>)
   1a388:	a803      	add	r0, sp, #12
   1a38a:	f7f7 fae5 	bl	11958 <bt_settings_encode_key>
		settings_delete(key);
   1a38e:	a803      	add	r0, sp, #12
   1a390:	f00d f8bf 	bl	27512 <settings_delete>
   1a394:	225c      	movs	r2, #92	; 0x5c
   1a396:	2100      	movs	r1, #0
   1a398:	4620      	mov	r0, r4
}
   1a39a:	b00c      	add	sp, #48	; 0x30
   1a39c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a3a0:	f011 bafe 	b.w	2b9a0 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a3a4:	9200      	str	r2, [sp, #0]
   1a3a6:	e7ec      	b.n	1a382 <bt_keys_clear+0x3e>
   1a3a8:	00031727 	.word	0x00031727
   1a3ac:	0002d881 	.word	0x0002d881
   1a3b0:	000316f7 	.word	0x000316f7
   1a3b4:	00031802 	.word	0x00031802

0001a3b8 <keys_set>:
{
   1a3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3ba:	b099      	sub	sp, #100	; 0x64
   1a3bc:	4614      	mov	r4, r2
	if (!name) {
   1a3be:	4606      	mov	r6, r0
{
   1a3c0:	af00      	add	r7, sp, #0
	if (!name) {
   1a3c2:	b988      	cbnz	r0, 1a3e8 <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   1a3c4:	4b60      	ldr	r3, [pc, #384]	; (1a548 <keys_set+0x190>)
   1a3c6:	627b      	str	r3, [r7, #36]	; 0x24
   1a3c8:	2302      	movs	r3, #2
   1a3ca:	623b      	str	r3, [r7, #32]
   1a3cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a3d0:	4603      	mov	r3, r0
   1a3d2:	f107 0220 	add.w	r2, r7, #32
   1a3d6:	485d      	ldr	r0, [pc, #372]	; (1a54c <keys_set+0x194>)
   1a3d8:	f7f4 f8da 	bl	e590 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1a3dc:	f06f 0515 	mvn.w	r5, #21
}
   1a3e0:	4628      	mov	r0, r5
   1a3e2:	3764      	adds	r7, #100	; 0x64
   1a3e4:	46bd      	mov	sp, r7
   1a3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1a3e8:	2250      	movs	r2, #80	; 0x50
   1a3ea:	4618      	mov	r0, r3
   1a3ec:	f107 0110 	add.w	r1, r7, #16
   1a3f0:	47a0      	blx	r4
	if (len < 0) {
   1a3f2:	1e04      	subs	r4, r0, #0
   1a3f4:	da10      	bge.n	1a418 <keys_set+0x60>
		LOG_ERR("Failed to read value (err %zd)", len);
   1a3f6:	466d      	mov	r5, sp
   1a3f8:	b088      	sub	sp, #32
   1a3fa:	466a      	mov	r2, sp
   1a3fc:	4b54      	ldr	r3, [pc, #336]	; (1a550 <keys_set+0x198>)
   1a3fe:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a402:	2303      	movs	r3, #3
   1a404:	f842 3f10 	str.w	r3, [r2, #16]!
   1a408:	2300      	movs	r3, #0
   1a40a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a40e:	484f      	ldr	r0, [pc, #316]	; (1a54c <keys_set+0x194>)
   1a410:	f7f4 f8be 	bl	e590 <z_impl_z_log_msg_static_create>
   1a414:	46ad      	mov	sp, r5
		return -EINVAL;
   1a416:	e7e1      	b.n	1a3dc <keys_set+0x24>
	err = bt_settings_decode_key(name, &addr);
   1a418:	4630      	mov	r0, r6
   1a41a:	f107 0108 	add.w	r1, r7, #8
   1a41e:	f00d fe44 	bl	280aa <bt_settings_decode_key>
	if (err) {
   1a422:	4605      	mov	r5, r0
   1a424:	b198      	cbz	r0, 1a44e <keys_set+0x96>
		LOG_ERR("Unable to decode address %s", name);
   1a426:	466c      	mov	r4, sp
   1a428:	b088      	sub	sp, #32
   1a42a:	466a      	mov	r2, sp
   1a42c:	4b49      	ldr	r3, [pc, #292]	; (1a554 <keys_set+0x19c>)
   1a42e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1a432:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a436:	8393      	strh	r3, [r2, #28]
   1a438:	4b47      	ldr	r3, [pc, #284]	; (1a558 <keys_set+0x1a0>)
   1a43a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a43e:	2300      	movs	r3, #0
   1a440:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a444:	4841      	ldr	r0, [pc, #260]	; (1a54c <keys_set+0x194>)
   1a446:	f7f4 f8a3 	bl	e590 <z_impl_z_log_msg_static_create>
   1a44a:	46a5      	mov	sp, r4
			return -EINVAL;
   1a44c:	e7c6      	b.n	1a3dc <keys_set+0x24>
	settings_name_next(name, &next);
   1a44e:	4630      	mov	r0, r6
   1a450:	1d39      	adds	r1, r7, #4
   1a452:	f00d f886 	bl	27562 <settings_name_next>
	if (!next) {
   1a456:	6878      	ldr	r0, [r7, #4]
   1a458:	b188      	cbz	r0, 1a47e <keys_set+0xc6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a45a:	220a      	movs	r2, #10
   1a45c:	4629      	mov	r1, r5
   1a45e:	f00a ff17 	bl	25290 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a462:	b160      	cbz	r0, 1a47e <keys_set+0xc6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1a464:	466c      	mov	r4, sp
   1a466:	b088      	sub	sp, #32
   1a468:	466a      	mov	r2, sp
   1a46a:	4b3c      	ldr	r3, [pc, #240]	; (1a55c <keys_set+0x1a4>)
   1a46c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a470:	2303      	movs	r3, #3
   1a472:	f842 3f10 	str.w	r3, [r2, #16]!
   1a476:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a47a:	462b      	mov	r3, r5
   1a47c:	e7e2      	b.n	1a444 <keys_set+0x8c>
	if (!len) {
   1a47e:	bb1c      	cbnz	r4, 1a4c8 <keys_set+0x110>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1a480:	4621      	mov	r1, r4
   1a482:	203f      	movs	r0, #63	; 0x3f
   1a484:	f107 0208 	add.w	r2, r7, #8
   1a488:	f7ff fe76 	bl	1a178 <bt_keys_find>
		if (keys) {
   1a48c:	b120      	cbz	r0, 1a498 <keys_set+0xe0>
   1a48e:	225c      	movs	r2, #92	; 0x5c
   1a490:	4621      	mov	r1, r4
   1a492:	f011 fa85 	bl	2b9a0 <memset>
   1a496:	e7a3      	b.n	1a3e0 <keys_set+0x28>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1a498:	f107 0008 	add.w	r0, r7, #8
   1a49c:	f7f7 f986 	bl	117ac <bt_addr_le_str>
   1a4a0:	466e      	mov	r6, sp
   1a4a2:	b088      	sub	sp, #32
   1a4a4:	466a      	mov	r2, sp
   1a4a6:	4b2e      	ldr	r3, [pc, #184]	; (1a560 <keys_set+0x1a8>)
   1a4a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a4ac:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a4b0:	8393      	strh	r3, [r2, #28]
   1a4b2:	4b29      	ldr	r3, [pc, #164]	; (1a558 <keys_set+0x1a0>)
   1a4b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1a4b8:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1a4bc:	4623      	mov	r3, r4
   1a4be:	4823      	ldr	r0, [pc, #140]	; (1a54c <keys_set+0x194>)
   1a4c0:	f7f4 f866 	bl	e590 <z_impl_z_log_msg_static_create>
   1a4c4:	46b5      	mov	sp, r6
   1a4c6:	e78b      	b.n	1a3e0 <keys_set+0x28>
	__ASSERT_NO_MSG(addr != NULL);
   1a4c8:	2000      	movs	r0, #0
   1a4ca:	f107 0108 	add.w	r1, r7, #8
   1a4ce:	f7ff fdeb 	bl	1a0a8 <bt_keys_get_addr.part.0>
	if (!keys) {
   1a4d2:	4606      	mov	r6, r0
   1a4d4:	b9c8      	cbnz	r0, 1a50a <keys_set+0x152>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1a4d6:	f107 0008 	add.w	r0, r7, #8
   1a4da:	f7f7 f967 	bl	117ac <bt_addr_le_str>
   1a4de:	466c      	mov	r4, sp
   1a4e0:	b088      	sub	sp, #32
   1a4e2:	466a      	mov	r2, sp
   1a4e4:	4b1f      	ldr	r3, [pc, #124]	; (1a564 <keys_set+0x1ac>)
   1a4e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a4ea:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a4ee:	8393      	strh	r3, [r2, #28]
   1a4f0:	4b19      	ldr	r3, [pc, #100]	; (1a558 <keys_set+0x1a0>)
   1a4f2:	f842 3f10 	str.w	r3, [r2, #16]!
   1a4f6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a4fa:	4633      	mov	r3, r6
   1a4fc:	4813      	ldr	r0, [pc, #76]	; (1a54c <keys_set+0x194>)
   1a4fe:	f7f4 f847 	bl	e590 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1a502:	f06f 050b 	mvn.w	r5, #11
   1a506:	46a5      	mov	sp, r4
   1a508:	e76a      	b.n	1a3e0 <keys_set+0x28>
	if (len != BT_KEYS_STORAGE_LEN) {
   1a50a:	2c50      	cmp	r4, #80	; 0x50
   1a50c:	d015      	beq.n	1a53a <keys_set+0x182>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1a50e:	466d      	mov	r5, sp
   1a510:	b088      	sub	sp, #32
   1a512:	466a      	mov	r2, sp
   1a514:	4b14      	ldr	r3, [pc, #80]	; (1a568 <keys_set+0x1b0>)
   1a516:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a51a:	2350      	movs	r3, #80	; 0x50
   1a51c:	61d3      	str	r3, [r2, #28]
   1a51e:	2304      	movs	r3, #4
   1a520:	f842 3f10 	str.w	r3, [r2, #16]!
   1a524:	2300      	movs	r3, #0
   1a526:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a52a:	4808      	ldr	r0, [pc, #32]	; (1a54c <keys_set+0x194>)
   1a52c:	f7f4 f830 	bl	e590 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1a530:	4630      	mov	r0, r6
   1a532:	46ad      	mov	sp, r5
   1a534:	f7ff ff06 	bl	1a344 <bt_keys_clear>
			return -EINVAL;
   1a538:	e750      	b.n	1a3dc <keys_set+0x24>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a53a:	4622      	mov	r2, r4
   1a53c:	f107 0110 	add.w	r1, r7, #16
   1a540:	300c      	adds	r0, #12
   1a542:	f011 f9f3 	bl	2b92c <memcpy>
   1a546:	e74b      	b.n	1a3e0 <keys_set+0x28>
   1a548:	0002f8eb 	.word	0x0002f8eb
   1a54c:	0002c82c 	.word	0x0002c82c
   1a550:	00031763 	.word	0x00031763
   1a554:	00030e77 	.word	0x00030e77
   1a558:	01000003 	.word	0x01000003
   1a55c:	00030e93 	.word	0x00030e93
   1a560:	00031782 	.word	0x00031782
   1a564:	000317a5 	.word	0x000317a5
   1a568:	000317c4 	.word	0x000317c4

0001a56c <bt_keys_store>:
{
   1a56c:	b5b0      	push	{r4, r5, r7, lr}
   1a56e:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a570:	4604      	mov	r4, r0
{
   1a572:	af02      	add	r7, sp, #8
	__ASSERT_NO_MSG(keys != NULL);
   1a574:	b958      	cbnz	r0, 1a58e <bt_keys_store+0x22>
   1a576:	491c      	ldr	r1, [pc, #112]	; (1a5e8 <bt_keys_store+0x7c>)
   1a578:	481c      	ldr	r0, [pc, #112]	; (1a5ec <bt_keys_store+0x80>)
   1a57a:	f240 1355 	movw	r3, #341	; 0x155
   1a57e:	4a1c      	ldr	r2, [pc, #112]	; (1a5f0 <bt_keys_store+0x84>)
   1a580:	f00c f9cf 	bl	26922 <assert_print>
   1a584:	f240 1155 	movw	r1, #341	; 0x155
   1a588:	4819      	ldr	r0, [pc, #100]	; (1a5f0 <bt_keys_store+0x84>)
   1a58a:	f00c f9c3 	bl	26914 <assert_post_action>
	if (keys->id) {
   1a58e:	4605      	mov	r5, r0
   1a590:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a594:	b332      	cbz	r2, 1a5e4 <bt_keys_store+0x78>
		u8_to_dec(id, sizeof(id), keys->id);
   1a596:	2104      	movs	r1, #4
   1a598:	4638      	mov	r0, r7
   1a59a:	f00b ff72 	bl	26482 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a59e:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a5a0:	462b      	mov	r3, r5
   1a5a2:	2124      	movs	r1, #36	; 0x24
   1a5a4:	4a13      	ldr	r2, [pc, #76]	; (1a5f4 <bt_keys_store+0x88>)
   1a5a6:	1d38      	adds	r0, r7, #4
   1a5a8:	f7f7 f9d6 	bl	11958 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1a5ac:	f104 010c 	add.w	r1, r4, #12
   1a5b0:	2250      	movs	r2, #80	; 0x50
   1a5b2:	1d38      	adds	r0, r7, #4
   1a5b4:	f7f5 fa86 	bl	fac4 <settings_save_one>
	if (err) {
   1a5b8:	4604      	mov	r4, r0
   1a5ba:	b178      	cbz	r0, 1a5dc <bt_keys_store+0x70>
		LOG_ERR("Failed to save keys (err %d)", err);
   1a5bc:	466d      	mov	r5, sp
   1a5be:	b088      	sub	sp, #32
   1a5c0:	aa02      	add	r2, sp, #8
   1a5c2:	4b0d      	ldr	r3, [pc, #52]	; (1a5f8 <bt_keys_store+0x8c>)
   1a5c4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a5c8:	2303      	movs	r3, #3
   1a5ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1a5ce:	2300      	movs	r3, #0
   1a5d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a5d4:	4809      	ldr	r0, [pc, #36]	; (1a5fc <bt_keys_store+0x90>)
   1a5d6:	f7f3 ffdb 	bl	e590 <z_impl_z_log_msg_static_create>
   1a5da:	46ad      	mov	sp, r5
}
   1a5dc:	4620      	mov	r0, r4
   1a5de:	3728      	adds	r7, #40	; 0x28
   1a5e0:	46bd      	mov	sp, r7
   1a5e2:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a5e4:	9200      	str	r2, [sp, #0]
   1a5e6:	e7db      	b.n	1a5a0 <bt_keys_store+0x34>
   1a5e8:	00031727 	.word	0x00031727
   1a5ec:	0002d881 	.word	0x0002d881
   1a5f0:	000316f7 	.word	0x000316f7
   1a5f4:	00031802 	.word	0x00031802
   1a5f8:	000317e2 	.word	0x000317e2
   1a5fc:	0002c82c 	.word	0x0002c82c

0001a600 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a600:	4288      	cmp	r0, r1
{
   1a602:	b510      	push	{r4, lr}
   1a604:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a608:	d911      	bls.n	1a62e <sys_memcpy_swap+0x2e>
   1a60a:	188c      	adds	r4, r1, r2
   1a60c:	42a0      	cmp	r0, r4
   1a60e:	d211      	bcs.n	1a634 <sys_memcpy_swap+0x34>
   1a610:	490d      	ldr	r1, [pc, #52]	; (1a648 <sys_memcpy_swap+0x48>)
   1a612:	f240 2315 	movw	r3, #533	; 0x215
   1a616:	4a0d      	ldr	r2, [pc, #52]	; (1a64c <sys_memcpy_swap+0x4c>)
   1a618:	480d      	ldr	r0, [pc, #52]	; (1a650 <sys_memcpy_swap+0x50>)
   1a61a:	f00c f982 	bl	26922 <assert_print>
   1a61e:	480d      	ldr	r0, [pc, #52]	; (1a654 <sys_memcpy_swap+0x54>)
   1a620:	f00c f97f 	bl	26922 <assert_print>
   1a624:	f240 2115 	movw	r1, #533	; 0x215
   1a628:	4808      	ldr	r0, [pc, #32]	; (1a64c <sys_memcpy_swap+0x4c>)
   1a62a:	f00c f973 	bl	26914 <assert_post_action>
   1a62e:	d0ef      	beq.n	1a610 <sys_memcpy_swap+0x10>
   1a630:	4299      	cmp	r1, r3
   1a632:	e7ec      	b.n	1a60e <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1a634:	3a01      	subs	r2, #1
   1a636:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   1a638:	f811 2901 	ldrb.w	r2, [r1], #-1
   1a63c:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   1a640:	4283      	cmp	r3, r0
   1a642:	d1f9      	bne.n	1a638 <sys_memcpy_swap+0x38>
}
   1a644:	bd10      	pop	{r4, pc}
   1a646:	bf00      	nop
   1a648:	0003045c 	.word	0x0003045c
   1a64c:	0003042a 	.word	0x0003042a
   1a650:	0002d881 	.word	0x0002d881
   1a654:	000304b3 	.word	0x000304b3

0001a658 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1a658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a65c:	b09a      	sub	sp, #104	; 0x68
   1a65e:	4616      	mov	r6, r2
   1a660:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1a664:	aa0c      	add	r2, sp, #48	; 0x30
{
   1a666:	4684      	mov	ip, r0
   1a668:	468a      	mov	sl, r1
   1a66a:	4690      	mov	r8, r2
   1a66c:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   1a66e:	4b2c      	ldr	r3, [pc, #176]	; (1a720 <bt_crypto_f5+0xc8>)
   1a670:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1a674:	4614      	mov	r4, r2
   1a676:	6818      	ldr	r0, [r3, #0]
   1a678:	6859      	ldr	r1, [r3, #4]
   1a67a:	3308      	adds	r3, #8
   1a67c:	c403      	stmia	r4!, {r0, r1}
   1a67e:	4573      	cmp	r3, lr
   1a680:	4622      	mov	r2, r4
   1a682:	d1f7      	bne.n	1a674 <bt_crypto_f5+0x1c>
   1a684:	6818      	ldr	r0, [r3, #0]
   1a686:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1a688:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   1a68a:	6020      	str	r0, [r4, #0]
   1a68c:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   1a68e:	2220      	movs	r2, #32
   1a690:	a804      	add	r0, sp, #16
   1a692:	f7ff ffb5 	bl	1a600 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1a696:	466b      	mov	r3, sp
   1a698:	2220      	movs	r2, #32
   1a69a:	4822      	ldr	r0, [pc, #136]	; (1a724 <bt_crypto_f5+0xcc>)
   1a69c:	a904      	add	r1, sp, #16
   1a69e:	f00f fb63 	bl	29d68 <bt_crypto_aes_cmac>
	if (err) {
   1a6a2:	4604      	mov	r4, r0
   1a6a4:	bbc0      	cbnz	r0, 1a718 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1a6a6:	2210      	movs	r2, #16
   1a6a8:	4651      	mov	r1, sl
   1a6aa:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1a6ae:	f7ff ffa7 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1a6b2:	2210      	movs	r2, #16
   1a6b4:	4631      	mov	r1, r6
   1a6b6:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1a6ba:	f7ff ffa1 	bl	1a600 <sys_memcpy_swap>
	m[37] = a1->type;
   1a6be:	4629      	mov	r1, r5
   1a6c0:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a6c4:	2206      	movs	r2, #6
   1a6c6:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   1a6ca:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a6ce:	f7ff ff97 	bl	1a600 <sys_memcpy_swap>
	m[44] = a2->type;
   1a6d2:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a6d4:	2206      	movs	r2, #6
	m[44] = a2->type;
   1a6d6:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a6da:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   1a6de:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a6e2:	f7ff ff8d 	bl	1a600 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1a6e6:	464b      	mov	r3, r9
   1a6e8:	2235      	movs	r2, #53	; 0x35
   1a6ea:	4641      	mov	r1, r8
   1a6ec:	4668      	mov	r0, sp
   1a6ee:	f00f fb3b 	bl	29d68 <bt_crypto_aes_cmac>
	if (err) {
   1a6f2:	4604      	mov	r4, r0
   1a6f4:	b980      	cbnz	r0, 1a718 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1a6f6:	4648      	mov	r0, r9
   1a6f8:	f00f fb28 	bl	29d4c <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1a6fc:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1a6fe:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   1a700:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1a704:	4641      	mov	r1, r8
   1a706:	463b      	mov	r3, r7
   1a708:	4668      	mov	r0, sp
   1a70a:	f00f fb2d 	bl	29d68 <bt_crypto_aes_cmac>
	if (err) {
   1a70e:	4604      	mov	r4, r0
   1a710:	b910      	cbnz	r0, 1a718 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1a712:	4638      	mov	r0, r7
   1a714:	f00f fb1a 	bl	29d4c <sys_mem_swap.constprop.0>

	return 0;
}
   1a718:	4620      	mov	r0, r4
   1a71a:	b01a      	add	sp, #104	; 0x68
   1a71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a720:	0002ca14 	.word	0x0002ca14
   1a724:	0003180f 	.word	0x0003180f

0001a728 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1a728:	b570      	push	{r4, r5, r6, lr}
   1a72a:	460e      	mov	r6, r1
   1a72c:	461d      	mov	r5, r3
   1a72e:	4614      	mov	r4, r2
   1a730:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1a732:	4601      	mov	r1, r0
   1a734:	2220      	movs	r2, #32
   1a736:	a804      	add	r0, sp, #16
   1a738:	f7ff ff62 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1a73c:	2220      	movs	r2, #32
   1a73e:	4631      	mov	r1, r6
   1a740:	a80c      	add	r0, sp, #48	; 0x30
   1a742:	f7ff ff5d 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1a746:	2210      	movs	r2, #16
   1a748:	4629      	mov	r1, r5
   1a74a:	a814      	add	r0, sp, #80	; 0x50
   1a74c:	f7ff ff58 	bl	1a600 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1a750:	2210      	movs	r2, #16
   1a752:	4621      	mov	r1, r4
   1a754:	4668      	mov	r0, sp
   1a756:	f7ff ff53 	bl	1a600 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1a75a:	466b      	mov	r3, sp
   1a75c:	2250      	movs	r2, #80	; 0x50
   1a75e:	4618      	mov	r0, r3
   1a760:	a904      	add	r1, sp, #16
   1a762:	f00f fb01 	bl	29d68 <bt_crypto_aes_cmac>
	if (err) {
   1a766:	b940      	cbnz	r0, 1a77a <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1a768:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1a76a:	4a05      	ldr	r2, [pc, #20]	; (1a780 <bt_crypto_g2+0x58>)
   1a76c:	ba1b      	rev	r3, r3
   1a76e:	fbb3 f1f2 	udiv	r1, r3, r2
   1a772:	fb02 3311 	mls	r3, r2, r1, r3
   1a776:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1a778:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1a77a:	b018      	add	sp, #96	; 0x60
   1a77c:	bd70      	pop	{r4, r5, r6, pc}
   1a77e:	bf00      	nop
   1a780:	000f4240 	.word	0x000f4240

0001a784 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   1a784:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   1a786:	4804      	ldr	r0, [pc, #16]	; (1a798 <fs_init+0x14>)
   1a788:	f010 fed9 	bl	2b53e <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1a78c:	4b03      	ldr	r3, [pc, #12]	; (1a79c <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   1a78e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   1a790:	e9c3 3300 	strd	r3, r3, [r3]
   1a794:	bd08      	pop	{r3, pc}
   1a796:	bf00      	nop
   1a798:	20021868 	.word	0x20021868
   1a79c:	2002187c 	.word	0x2002187c

0001a7a0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1a7a0:	2234      	movs	r2, #52	; 0x34
   1a7a2:	4b02      	ldr	r3, [pc, #8]	; (1a7ac <net_buf_pool_get+0xc>)
   1a7a4:	fb02 3000 	mla	r0, r2, r0, r3
   1a7a8:	4770      	bx	lr
   1a7aa:	bf00      	nop
   1a7ac:	20008de4 	.word	0x20008de4

0001a7b0 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1a7b0:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a7b2:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1a7b4:	4b06      	ldr	r3, [pc, #24]	; (1a7d0 <net_buf_id+0x20>)
   1a7b6:	fb01 3302 	mla	r3, r1, r2, r3
   1a7ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a7bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1a7c0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a7c2:	331b      	adds	r3, #27
   1a7c4:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1a7c8:	fbb0 f0f3 	udiv	r0, r0, r3
   1a7cc:	4770      	bx	lr
   1a7ce:	bf00      	nop
   1a7d0:	20008de4 	.word	0x20008de4

0001a7d4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1a7d4:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a7d6:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a7d8:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a7da:	4b09      	ldr	r3, [pc, #36]	; (1a800 <fixed_data_alloc+0x2c>)
   1a7dc:	fb04 3302 	mla	r3, r4, r2, r3
   1a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   1a7e2:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a7e4:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1a7e6:	681a      	ldr	r2, [r3, #0]
   1a7e8:	4294      	cmp	r4, r2
   1a7ea:	bf94      	ite	ls
   1a7ec:	600c      	strls	r4, [r1, #0]
   1a7ee:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1a7f0:	e9d3 5400 	ldrd	r5, r4, [r3]
   1a7f4:	f7ff ffdc 	bl	1a7b0 <net_buf_id>
}
   1a7f8:	fb05 4000 	mla	r0, r5, r0, r4
   1a7fc:	bd38      	pop	{r3, r4, r5, pc}
   1a7fe:	bf00      	nop
   1a800:	20008de4 	.word	0x20008de4

0001a804 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a808:	b085      	sub	sp, #20
   1a80a:	9103      	str	r1, [sp, #12]
   1a80c:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a80e:	4619      	mov	r1, r3
   1a810:	4610      	mov	r0, r2
{
   1a812:	4692      	mov	sl, r2
   1a814:	4699      	mov	r9, r3
   1a816:	4690      	mov	r8, r2
   1a818:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a81a:	f010 ff74 	bl	2b706 <sys_clock_timeout_end_calc>
   1a81e:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1a822:	b945      	cbnz	r5, 1a836 <net_buf_alloc_len+0x32>
   1a824:	4966      	ldr	r1, [pc, #408]	; (1a9c0 <net_buf_alloc_len+0x1bc>)
   1a826:	23f4      	movs	r3, #244	; 0xf4
   1a828:	4a66      	ldr	r2, [pc, #408]	; (1a9c4 <net_buf_alloc_len+0x1c0>)
   1a82a:	4867      	ldr	r0, [pc, #412]	; (1a9c8 <net_buf_alloc_len+0x1c4>)
   1a82c:	f00c f879 	bl	26922 <assert_print>
   1a830:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1a832:	4864      	ldr	r0, [pc, #400]	; (1a9c4 <net_buf_alloc_len+0x1c0>)
   1a834:	e019      	b.n	1a86a <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1a836:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1a83a:	f04f 0320 	mov.w	r3, #32
   1a83e:	f3ef 8b11 	mrs	fp, BASEPRI
   1a842:	f383 8812 	msr	BASEPRI_MAX, r3
   1a846:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a84a:	4630      	mov	r0, r6
   1a84c:	f006 fd88 	bl	21360 <z_spin_lock_valid>
   1a850:	b968      	cbnz	r0, 1a86e <net_buf_alloc_len+0x6a>
   1a852:	2394      	movs	r3, #148	; 0x94
   1a854:	4a5d      	ldr	r2, [pc, #372]	; (1a9cc <net_buf_alloc_len+0x1c8>)
   1a856:	495e      	ldr	r1, [pc, #376]	; (1a9d0 <net_buf_alloc_len+0x1cc>)
   1a858:	485b      	ldr	r0, [pc, #364]	; (1a9c8 <net_buf_alloc_len+0x1c4>)
   1a85a:	f00c f862 	bl	26922 <assert_print>
   1a85e:	4631      	mov	r1, r6
   1a860:	485c      	ldr	r0, [pc, #368]	; (1a9d4 <net_buf_alloc_len+0x1d0>)
   1a862:	f00c f85e 	bl	26922 <assert_print>
   1a866:	2194      	movs	r1, #148	; 0x94
   1a868:	4858      	ldr	r0, [pc, #352]	; (1a9cc <net_buf_alloc_len+0x1c8>)
   1a86a:	f00c f853 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a86e:	4630      	mov	r0, r6
   1a870:	f006 fd92 	bl	21398 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1a874:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1a876:	2b00      	cmp	r3, #0
   1a878:	d070      	beq.n	1a95c <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1a87a:	8c2a      	ldrh	r2, [r5, #32]
   1a87c:	429a      	cmp	r2, r3
   1a87e:	d94d      	bls.n	1a91c <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1a880:	2200      	movs	r2, #0
   1a882:	2300      	movs	r3, #0
   1a884:	4628      	mov	r0, r5
   1a886:	f006 ffb9 	bl	217fc <z_impl_k_queue_get>
			if (buf) {
   1a88a:	4604      	mov	r4, r0
   1a88c:	2800      	cmp	r0, #0
   1a88e:	d045      	beq.n	1a91c <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a890:	4630      	mov	r0, r6
   1a892:	f006 fd73 	bl	2137c <z_spin_unlock_valid>
   1a896:	b958      	cbnz	r0, 1a8b0 <net_buf_alloc_len+0xac>
   1a898:	23c2      	movs	r3, #194	; 0xc2
   1a89a:	4a4c      	ldr	r2, [pc, #304]	; (1a9cc <net_buf_alloc_len+0x1c8>)
   1a89c:	494e      	ldr	r1, [pc, #312]	; (1a9d8 <net_buf_alloc_len+0x1d4>)
   1a89e:	484a      	ldr	r0, [pc, #296]	; (1a9c8 <net_buf_alloc_len+0x1c4>)
   1a8a0:	f00c f83f 	bl	26922 <assert_print>
   1a8a4:	4631      	mov	r1, r6
   1a8a6:	484d      	ldr	r0, [pc, #308]	; (1a9dc <net_buf_alloc_len+0x1d8>)
   1a8a8:	f00c f83b 	bl	26922 <assert_print>
   1a8ac:	21c2      	movs	r1, #194	; 0xc2
   1a8ae:	e7db      	b.n	1a868 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1a8b0:	f38b 8811 	msr	BASEPRI, fp
   1a8b4:	f3bf 8f6f 	isb	sy
	if (size) {
   1a8b8:	9d03      	ldr	r5, [sp, #12]
   1a8ba:	2d00      	cmp	r5, #0
   1a8bc:	d074      	beq.n	1a9a8 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a8be:	ea59 030a 	orrs.w	r3, r9, sl
   1a8c2:	d012      	beq.n	1a8ea <net_buf_alloc_len+0xe6>
   1a8c4:	f1b9 3fff 	cmp.w	r9, #4294967295
   1a8c8:	bf08      	it	eq
   1a8ca:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1a8ce:	d00c      	beq.n	1a8ea <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1a8d0:	f009 fb14 	bl	23efc <sys_clock_tick_get>
   1a8d4:	9b01      	ldr	r3, [sp, #4]
   1a8d6:	ebb3 0800 	subs.w	r8, r3, r0
   1a8da:	9b02      	ldr	r3, [sp, #8]
   1a8dc:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1a8e0:	2f00      	cmp	r7, #0
   1a8e2:	bfbc      	itt	lt
   1a8e4:	f04f 0800 	movlt.w	r8, #0
   1a8e8:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a8ea:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a8ee:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a8f0:	4e3b      	ldr	r6, [pc, #236]	; (1a9e0 <net_buf_alloc_len+0x1dc>)
   1a8f2:	4642      	mov	r2, r8
   1a8f4:	fb09 6303 	mla	r3, r9, r3, r6
   1a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	681b      	ldr	r3, [r3, #0]
   1a8fe:	a903      	add	r1, sp, #12
   1a900:	f8d3 a000 	ldr.w	sl, [r3]
   1a904:	463b      	mov	r3, r7
   1a906:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1a908:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1a90a:	2800      	cmp	r0, #0
   1a90c:	d13c      	bne.n	1a988 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1a90e:	7aa0      	ldrb	r0, [r4, #10]
   1a910:	4621      	mov	r1, r4
   1a912:	fb00 6009 	mla	r0, r0, r9, r6
   1a916:	f010 fe3d 	bl	2b594 <k_queue_prepend>
}
   1a91a:	e030      	b.n	1a97e <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1a91c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1a91e:	4630      	mov	r0, r6
   1a920:	1e63      	subs	r3, r4, #1
   1a922:	846b      	strh	r3, [r5, #34]	; 0x22
   1a924:	f006 fd2a 	bl	2137c <z_spin_unlock_valid>
   1a928:	2800      	cmp	r0, #0
   1a92a:	d0b5      	beq.n	1a898 <net_buf_alloc_len+0x94>
   1a92c:	f38b 8811 	msr	BASEPRI, fp
   1a930:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a934:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1a938:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a93a:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1a93c:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1a93e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a940:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1a944:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1a948:	4b25      	ldr	r3, [pc, #148]	; (1a9e0 <net_buf_alloc_len+0x1dc>)
   1a94a:	4a26      	ldr	r2, [pc, #152]	; (1a9e4 <net_buf_alloc_len+0x1e0>)
   1a94c:	1aeb      	subs	r3, r5, r3
   1a94e:	109b      	asrs	r3, r3, #2
   1a950:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1a952:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1a954:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1a958:	72e3      	strb	r3, [r4, #11]
		goto success;
   1a95a:	e7ad      	b.n	1a8b8 <net_buf_alloc_len+0xb4>
   1a95c:	4630      	mov	r0, r6
   1a95e:	f006 fd0d 	bl	2137c <z_spin_unlock_valid>
   1a962:	2800      	cmp	r0, #0
   1a964:	d098      	beq.n	1a898 <net_buf_alloc_len+0x94>
   1a966:	f38b 8811 	msr	BASEPRI, fp
   1a96a:	f3bf 8f6f 	isb	sy
   1a96e:	4652      	mov	r2, sl
   1a970:	464b      	mov	r3, r9
   1a972:	4628      	mov	r0, r5
   1a974:	f006 ff42 	bl	217fc <z_impl_k_queue_get>
	if (!buf) {
   1a978:	4604      	mov	r4, r0
   1a97a:	2800      	cmp	r0, #0
   1a97c:	d19c      	bne.n	1a8b8 <net_buf_alloc_len+0xb4>
		return NULL;
   1a97e:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1a980:	4620      	mov	r0, r4
   1a982:	b005      	add	sp, #20
   1a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1a988:	9b03      	ldr	r3, [sp, #12]
   1a98a:	429d      	cmp	r5, r3
   1a98c:	d90d      	bls.n	1a9aa <net_buf_alloc_len+0x1a6>
   1a98e:	4916      	ldr	r1, [pc, #88]	; (1a9e8 <net_buf_alloc_len+0x1e4>)
   1a990:	f240 1355 	movw	r3, #341	; 0x155
   1a994:	4a0b      	ldr	r2, [pc, #44]	; (1a9c4 <net_buf_alloc_len+0x1c0>)
   1a996:	480c      	ldr	r0, [pc, #48]	; (1a9c8 <net_buf_alloc_len+0x1c4>)
   1a998:	f00b ffc3 	bl	26922 <assert_print>
   1a99c:	4813      	ldr	r0, [pc, #76]	; (1a9ec <net_buf_alloc_len+0x1e8>)
   1a99e:	f00b ffc0 	bl	26922 <assert_print>
   1a9a2:	f240 1155 	movw	r1, #341	; 0x155
   1a9a6:	e744      	b.n	1a832 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1a9a8:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1a9aa:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1a9ac:	2201      	movs	r2, #1
	buf->frags = NULL;
   1a9ae:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1a9b0:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1a9b2:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1a9b4:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1a9b6:	6963      	ldr	r3, [r4, #20]
   1a9b8:	8262      	strh	r2, [r4, #18]
   1a9ba:	60e3      	str	r3, [r4, #12]
}
   1a9bc:	e7e0      	b.n	1a980 <net_buf_alloc_len+0x17c>
   1a9be:	bf00      	nop
   1a9c0:	0003187b 	.word	0x0003187b
   1a9c4:	0003182c 	.word	0x0003182c
   1a9c8:	0002d881 	.word	0x0002d881
   1a9cc:	0002e6ba 	.word	0x0002e6ba
   1a9d0:	0002e713 	.word	0x0002e713
   1a9d4:	0002e728 	.word	0x0002e728
   1a9d8:	0002e6e7 	.word	0x0002e6e7
   1a9dc:	0002e6fe 	.word	0x0002e6fe
   1a9e0:	20008de4 	.word	0x20008de4
   1a9e4:	c4ec4ec5 	.word	0xc4ec4ec5
   1a9e8:	00031880 	.word	0x00031880
   1a9ec:	00031891 	.word	0x00031891

0001a9f0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1a9f0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1a9f2:	b958      	cbnz	r0, 1aa0c <net_buf_simple_reserve+0x1c>
   1a9f4:	490d      	ldr	r1, [pc, #52]	; (1aa2c <net_buf_simple_reserve+0x3c>)
   1a9f6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1a9fa:	4a0d      	ldr	r2, [pc, #52]	; (1aa30 <net_buf_simple_reserve+0x40>)
   1a9fc:	480d      	ldr	r0, [pc, #52]	; (1aa34 <net_buf_simple_reserve+0x44>)
   1a9fe:	f00b ff90 	bl	26922 <assert_print>
   1aa02:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1aa06:	480a      	ldr	r0, [pc, #40]	; (1aa30 <net_buf_simple_reserve+0x40>)
   1aa08:	f00b ff84 	bl	26914 <assert_post_action>
   1aa0c:	8883      	ldrh	r3, [r0, #4]
   1aa0e:	b14b      	cbz	r3, 1aa24 <net_buf_simple_reserve+0x34>
   1aa10:	4909      	ldr	r1, [pc, #36]	; (1aa38 <net_buf_simple_reserve+0x48>)
   1aa12:	f240 13b9 	movw	r3, #441	; 0x1b9
   1aa16:	4a06      	ldr	r2, [pc, #24]	; (1aa30 <net_buf_simple_reserve+0x40>)
   1aa18:	4806      	ldr	r0, [pc, #24]	; (1aa34 <net_buf_simple_reserve+0x44>)
   1aa1a:	f00b ff82 	bl	26922 <assert_print>
   1aa1e:	f240 11b9 	movw	r1, #441	; 0x1b9
   1aa22:	e7f0      	b.n	1aa06 <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1aa24:	6883      	ldr	r3, [r0, #8]
   1aa26:	440b      	add	r3, r1
   1aa28:	6003      	str	r3, [r0, #0]
}
   1aa2a:	bd08      	pop	{r3, pc}
   1aa2c:	00031910 	.word	0x00031910
   1aa30:	0003182c 	.word	0x0003182c
   1aa34:	0002d881 	.word	0x0002d881
   1aa38:	00031894 	.word	0x00031894

0001aa3c <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1aa3c:	b570      	push	{r4, r5, r6, lr}
   1aa3e:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1aa40:	4605      	mov	r5, r0
   1aa42:	b958      	cbnz	r0, 1aa5c <net_buf_slist_put+0x20>
   1aa44:	4928      	ldr	r1, [pc, #160]	; (1aae8 <net_buf_slist_put+0xac>)
   1aa46:	f240 13c5 	movw	r3, #453	; 0x1c5
   1aa4a:	4a28      	ldr	r2, [pc, #160]	; (1aaec <net_buf_slist_put+0xb0>)
   1aa4c:	4828      	ldr	r0, [pc, #160]	; (1aaf0 <net_buf_slist_put+0xb4>)
   1aa4e:	f00b ff68 	bl	26922 <assert_print>
   1aa52:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1aa56:	4825      	ldr	r0, [pc, #148]	; (1aaec <net_buf_slist_put+0xb0>)
   1aa58:	f00b ff5c 	bl	26914 <assert_post_action>
   1aa5c:	b949      	cbnz	r1, 1aa72 <net_buf_slist_put+0x36>
   1aa5e:	4925      	ldr	r1, [pc, #148]	; (1aaf4 <net_buf_slist_put+0xb8>)
   1aa60:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1aa64:	4a21      	ldr	r2, [pc, #132]	; (1aaec <net_buf_slist_put+0xb0>)
   1aa66:	4822      	ldr	r0, [pc, #136]	; (1aaf0 <net_buf_slist_put+0xb4>)
   1aa68:	f00b ff5b 	bl	26922 <assert_print>
   1aa6c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1aa70:	e7f1      	b.n	1aa56 <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1aa72:	f04f 0320 	mov.w	r3, #32
   1aa76:	f3ef 8611 	mrs	r6, BASEPRI
   1aa7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aa82:	481d      	ldr	r0, [pc, #116]	; (1aaf8 <net_buf_slist_put+0xbc>)
   1aa84:	f006 fc6c 	bl	21360 <z_spin_lock_valid>
   1aa88:	b960      	cbnz	r0, 1aaa4 <net_buf_slist_put+0x68>
   1aa8a:	2394      	movs	r3, #148	; 0x94
   1aa8c:	4a1b      	ldr	r2, [pc, #108]	; (1aafc <net_buf_slist_put+0xc0>)
   1aa8e:	491c      	ldr	r1, [pc, #112]	; (1ab00 <net_buf_slist_put+0xc4>)
   1aa90:	4817      	ldr	r0, [pc, #92]	; (1aaf0 <net_buf_slist_put+0xb4>)
   1aa92:	f00b ff46 	bl	26922 <assert_print>
   1aa96:	4918      	ldr	r1, [pc, #96]	; (1aaf8 <net_buf_slist_put+0xbc>)
   1aa98:	481a      	ldr	r0, [pc, #104]	; (1ab04 <net_buf_slist_put+0xc8>)
   1aa9a:	f00b ff42 	bl	26922 <assert_print>
   1aa9e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aaa0:	4816      	ldr	r0, [pc, #88]	; (1aafc <net_buf_slist_put+0xc0>)
   1aaa2:	e7d9      	b.n	1aa58 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1aaa4:	4814      	ldr	r0, [pc, #80]	; (1aaf8 <net_buf_slist_put+0xbc>)
   1aaa6:	f006 fc77 	bl	21398 <z_spin_lock_set_owner>
	parent->next = child;
   1aaaa:	2300      	movs	r3, #0
   1aaac:	6023      	str	r3, [r4, #0]
	return list->tail;
   1aaae:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1aab0:	b98b      	cbnz	r3, 1aad6 <net_buf_slist_put+0x9a>
	list->head = node;
   1aab2:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aab6:	4810      	ldr	r0, [pc, #64]	; (1aaf8 <net_buf_slist_put+0xbc>)
   1aab8:	f006 fc60 	bl	2137c <z_spin_unlock_valid>
   1aabc:	b970      	cbnz	r0, 1aadc <net_buf_slist_put+0xa0>
   1aabe:	23c2      	movs	r3, #194	; 0xc2
   1aac0:	4a0e      	ldr	r2, [pc, #56]	; (1aafc <net_buf_slist_put+0xc0>)
   1aac2:	4911      	ldr	r1, [pc, #68]	; (1ab08 <net_buf_slist_put+0xcc>)
   1aac4:	480a      	ldr	r0, [pc, #40]	; (1aaf0 <net_buf_slist_put+0xb4>)
   1aac6:	f00b ff2c 	bl	26922 <assert_print>
   1aaca:	490b      	ldr	r1, [pc, #44]	; (1aaf8 <net_buf_slist_put+0xbc>)
   1aacc:	480f      	ldr	r0, [pc, #60]	; (1ab0c <net_buf_slist_put+0xd0>)
   1aace:	f00b ff28 	bl	26922 <assert_print>
   1aad2:	21c2      	movs	r1, #194	; 0xc2
   1aad4:	e7e4      	b.n	1aaa0 <net_buf_slist_put+0x64>
	parent->next = child;
   1aad6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1aad8:	606c      	str	r4, [r5, #4]
}
   1aada:	e7ec      	b.n	1aab6 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1aadc:	f386 8811 	msr	BASEPRI, r6
   1aae0:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1aae4:	bd70      	pop	{r4, r5, r6, pc}
   1aae6:	bf00      	nop
   1aae8:	0003021b 	.word	0x0003021b
   1aaec:	0003182c 	.word	0x0003182c
   1aaf0:	0002d881 	.word	0x0002d881
   1aaf4:	00031910 	.word	0x00031910
   1aaf8:	20021884 	.word	0x20021884
   1aafc:	0002e6ba 	.word	0x0002e6ba
   1ab00:	0002e713 	.word	0x0002e713
   1ab04:	0002e728 	.word	0x0002e728
   1ab08:	0002e6e7 	.word	0x0002e6e7
   1ab0c:	0002e6fe 	.word	0x0002e6fe

0001ab10 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1ab10:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ab12:	4604      	mov	r4, r0
   1ab14:	b958      	cbnz	r0, 1ab2e <net_buf_slist_get+0x1e>
   1ab16:	4923      	ldr	r1, [pc, #140]	; (1aba4 <net_buf_slist_get+0x94>)
   1ab18:	4823      	ldr	r0, [pc, #140]	; (1aba8 <net_buf_slist_get+0x98>)
   1ab1a:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1ab1e:	4a23      	ldr	r2, [pc, #140]	; (1abac <net_buf_slist_get+0x9c>)
   1ab20:	f00b feff 	bl	26922 <assert_print>
   1ab24:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1ab28:	4820      	ldr	r0, [pc, #128]	; (1abac <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ab2a:	f00b fef3 	bl	26914 <assert_post_action>
	__asm__ volatile(
   1ab2e:	f04f 0320 	mov.w	r3, #32
   1ab32:	f3ef 8611 	mrs	r6, BASEPRI
   1ab36:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab3a:	f3bf 8f6f 	isb	sy
   1ab3e:	481c      	ldr	r0, [pc, #112]	; (1abb0 <net_buf_slist_get+0xa0>)
   1ab40:	f006 fc0e 	bl	21360 <z_spin_lock_valid>
   1ab44:	b960      	cbnz	r0, 1ab60 <net_buf_slist_get+0x50>
   1ab46:	2394      	movs	r3, #148	; 0x94
   1ab48:	4a1a      	ldr	r2, [pc, #104]	; (1abb4 <net_buf_slist_get+0xa4>)
   1ab4a:	491b      	ldr	r1, [pc, #108]	; (1abb8 <net_buf_slist_get+0xa8>)
   1ab4c:	4816      	ldr	r0, [pc, #88]	; (1aba8 <net_buf_slist_get+0x98>)
   1ab4e:	f00b fee8 	bl	26922 <assert_print>
   1ab52:	4917      	ldr	r1, [pc, #92]	; (1abb0 <net_buf_slist_get+0xa0>)
   1ab54:	4819      	ldr	r0, [pc, #100]	; (1abbc <net_buf_slist_get+0xac>)
   1ab56:	f00b fee4 	bl	26922 <assert_print>
   1ab5a:	2194      	movs	r1, #148	; 0x94
   1ab5c:	4815      	ldr	r0, [pc, #84]	; (1abb4 <net_buf_slist_get+0xa4>)
   1ab5e:	e7e4      	b.n	1ab2a <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1ab60:	4813      	ldr	r0, [pc, #76]	; (1abb0 <net_buf_slist_get+0xa0>)
   1ab62:	f006 fc19 	bl	21398 <z_spin_lock_set_owner>
	return list->head;
   1ab66:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ab68:	b12d      	cbz	r5, 1ab76 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ab6a:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1ab6c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ab6e:	4295      	cmp	r5, r2
	list->head = node;
   1ab70:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1ab72:	bf08      	it	eq
   1ab74:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ab76:	480e      	ldr	r0, [pc, #56]	; (1abb0 <net_buf_slist_get+0xa0>)
   1ab78:	f006 fc00 	bl	2137c <z_spin_unlock_valid>
   1ab7c:	b958      	cbnz	r0, 1ab96 <net_buf_slist_get+0x86>
   1ab7e:	23c2      	movs	r3, #194	; 0xc2
   1ab80:	4a0c      	ldr	r2, [pc, #48]	; (1abb4 <net_buf_slist_get+0xa4>)
   1ab82:	490f      	ldr	r1, [pc, #60]	; (1abc0 <net_buf_slist_get+0xb0>)
   1ab84:	4808      	ldr	r0, [pc, #32]	; (1aba8 <net_buf_slist_get+0x98>)
   1ab86:	f00b fecc 	bl	26922 <assert_print>
   1ab8a:	4909      	ldr	r1, [pc, #36]	; (1abb0 <net_buf_slist_get+0xa0>)
   1ab8c:	480d      	ldr	r0, [pc, #52]	; (1abc4 <net_buf_slist_get+0xb4>)
   1ab8e:	f00b fec8 	bl	26922 <assert_print>
   1ab92:	21c2      	movs	r1, #194	; 0xc2
   1ab94:	e7e2      	b.n	1ab5c <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1ab96:	f386 8811 	msr	BASEPRI, r6
   1ab9a:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1ab9e:	4628      	mov	r0, r5
   1aba0:	bd70      	pop	{r4, r5, r6, pc}
   1aba2:	bf00      	nop
   1aba4:	0003021b 	.word	0x0003021b
   1aba8:	0002d881 	.word	0x0002d881
   1abac:	0003182c 	.word	0x0003182c
   1abb0:	20021884 	.word	0x20021884
   1abb4:	0002e6ba 	.word	0x0002e6ba
   1abb8:	0002e713 	.word	0x0002e713
   1abbc:	0002e728 	.word	0x0002e728
   1abc0:	0002e6e7 	.word	0x0002e6e7
   1abc4:	0002e6fe 	.word	0x0002e6fe

0001abc8 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1abc8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1abca:	b958      	cbnz	r0, 1abe4 <net_buf_put+0x1c>
   1abcc:	490d      	ldr	r1, [pc, #52]	; (1ac04 <net_buf_put+0x3c>)
   1abce:	f240 13df 	movw	r3, #479	; 0x1df
   1abd2:	4a0d      	ldr	r2, [pc, #52]	; (1ac08 <net_buf_put+0x40>)
   1abd4:	480d      	ldr	r0, [pc, #52]	; (1ac0c <net_buf_put+0x44>)
   1abd6:	f00b fea4 	bl	26922 <assert_print>
   1abda:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1abde:	480a      	ldr	r0, [pc, #40]	; (1ac08 <net_buf_put+0x40>)
   1abe0:	f00b fe98 	bl	26914 <assert_post_action>
   1abe4:	b949      	cbnz	r1, 1abfa <net_buf_put+0x32>
   1abe6:	490a      	ldr	r1, [pc, #40]	; (1ac10 <net_buf_put+0x48>)
   1abe8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1abec:	4a06      	ldr	r2, [pc, #24]	; (1ac08 <net_buf_put+0x40>)
   1abee:	4807      	ldr	r0, [pc, #28]	; (1ac0c <net_buf_put+0x44>)
   1abf0:	f00b fe97 	bl	26922 <assert_print>
   1abf4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1abf8:	e7f1      	b.n	1abde <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1abfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1abfe:	f010 bcbe 	b.w	2b57e <k_queue_append>
   1ac02:	bf00      	nop
   1ac04:	000318a3 	.word	0x000318a3
   1ac08:	0003182c 	.word	0x0003182c
   1ac0c:	0002d881 	.word	0x0002d881
   1ac10:	00031910 	.word	0x00031910

0001ac14 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ac14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1ac18:	4605      	mov	r5, r0
   1ac1a:	b328      	cbz	r0, 1ac68 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ac1c:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1ac1e:	f04f 0834 	mov.w	r8, #52	; 0x34
   1ac22:	4e1a      	ldr	r6, [pc, #104]	; (1ac8c <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1ac24:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1ac26:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1ac28:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1ac2a:	3b01      	subs	r3, #1
   1ac2c:	b2db      	uxtb	r3, r3
   1ac2e:	7223      	strb	r3, [r4, #8]
   1ac30:	b9c3      	cbnz	r3, 1ac64 <net_buf_unref+0x50>
		if (buf->__buf) {
   1ac32:	6961      	ldr	r1, [r4, #20]
   1ac34:	b159      	cbz	r1, 1ac4e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ac36:	7a63      	ldrb	r3, [r4, #9]
   1ac38:	07db      	lsls	r3, r3, #31
   1ac3a:	d407      	bmi.n	1ac4c <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ac3c:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1ac3e:	4620      	mov	r0, r4
   1ac40:	fb08 6303 	mla	r3, r8, r3, r6
   1ac44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ac46:	681b      	ldr	r3, [r3, #0]
   1ac48:	689b      	ldr	r3, [r3, #8]
   1ac4a:	4798      	blx	r3
			buf->__buf = NULL;
   1ac4c:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1ac4e:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1ac50:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1ac52:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1ac56:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1ac58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ac5a:	b18b      	cbz	r3, 1ac80 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1ac5c:	4620      	mov	r0, r4
   1ac5e:	4798      	blx	r3
	while (buf) {
   1ac60:	2d00      	cmp	r5, #0
   1ac62:	d1df      	bne.n	1ac24 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1ac68:	4909      	ldr	r1, [pc, #36]	; (1ac90 <net_buf_unref+0x7c>)
   1ac6a:	480a      	ldr	r0, [pc, #40]	; (1ac94 <net_buf_unref+0x80>)
   1ac6c:	f240 13eb 	movw	r3, #491	; 0x1eb
   1ac70:	4a09      	ldr	r2, [pc, #36]	; (1ac98 <net_buf_unref+0x84>)
   1ac72:	f00b fe56 	bl	26922 <assert_print>
   1ac76:	f240 11eb 	movw	r1, #491	; 0x1eb
   1ac7a:	4807      	ldr	r0, [pc, #28]	; (1ac98 <net_buf_unref+0x84>)
   1ac7c:	f00b fe4a 	bl	26914 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1ac80:	4621      	mov	r1, r4
   1ac82:	fb00 6008 	mla	r0, r0, r8, r6
   1ac86:	f010 fc85 	bl	2b594 <k_queue_prepend>
}
   1ac8a:	e7e9      	b.n	1ac60 <net_buf_unref+0x4c>
   1ac8c:	20008de4 	.word	0x20008de4
   1ac90:	00031910 	.word	0x00031910
   1ac94:	0002d881 	.word	0x0002d881
   1ac98:	0003182c 	.word	0x0003182c

0001ac9c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1ac9c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1ac9e:	b958      	cbnz	r0, 1acb8 <net_buf_ref+0x1c>
   1aca0:	4907      	ldr	r1, [pc, #28]	; (1acc0 <net_buf_ref+0x24>)
   1aca2:	4808      	ldr	r0, [pc, #32]	; (1acc4 <net_buf_ref+0x28>)
   1aca4:	f240 231a 	movw	r3, #538	; 0x21a
   1aca8:	4a07      	ldr	r2, [pc, #28]	; (1acc8 <net_buf_ref+0x2c>)
   1acaa:	f00b fe3a 	bl	26922 <assert_print>
   1acae:	f240 211a 	movw	r1, #538	; 0x21a
   1acb2:	4805      	ldr	r0, [pc, #20]	; (1acc8 <net_buf_ref+0x2c>)
   1acb4:	f00b fe2e 	bl	26914 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1acb8:	7a02      	ldrb	r2, [r0, #8]
   1acba:	3201      	adds	r2, #1
   1acbc:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1acbe:	bd08      	pop	{r3, pc}
   1acc0:	00031910 	.word	0x00031910
   1acc4:	0002d881 	.word	0x0002d881
   1acc8:	0003182c 	.word	0x0003182c

0001accc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1accc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1acce:	4603      	mov	r3, r0
   1acd0:	b958      	cbnz	r0, 1acea <net_buf_frag_last+0x1e>
   1acd2:	4908      	ldr	r1, [pc, #32]	; (1acf4 <net_buf_frag_last+0x28>)
   1acd4:	4808      	ldr	r0, [pc, #32]	; (1acf8 <net_buf_frag_last+0x2c>)
   1acd6:	f240 2357 	movw	r3, #599	; 0x257
   1acda:	4a08      	ldr	r2, [pc, #32]	; (1acfc <net_buf_frag_last+0x30>)
   1acdc:	f00b fe21 	bl	26922 <assert_print>
   1ace0:	f240 2157 	movw	r1, #599	; 0x257
   1ace4:	4805      	ldr	r0, [pc, #20]	; (1acfc <net_buf_frag_last+0x30>)
   1ace6:	f00b fe15 	bl	26914 <assert_post_action>

	while (buf->frags) {
   1acea:	4618      	mov	r0, r3
   1acec:	685b      	ldr	r3, [r3, #4]
   1acee:	2b00      	cmp	r3, #0
   1acf0:	d1fb      	bne.n	1acea <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1acf2:	bd08      	pop	{r3, pc}
   1acf4:	00031910 	.word	0x00031910
   1acf8:	0002d881 	.word	0x0002d881
   1acfc:	0003182c 	.word	0x0003182c

0001ad00 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1ad00:	b570      	push	{r4, r5, r6, lr}
   1ad02:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1ad04:	4604      	mov	r4, r0
   1ad06:	b958      	cbnz	r0, 1ad20 <net_buf_frag_insert+0x20>
   1ad08:	490f      	ldr	r1, [pc, #60]	; (1ad48 <net_buf_frag_insert+0x48>)
   1ad0a:	f240 2362 	movw	r3, #610	; 0x262
   1ad0e:	4a0f      	ldr	r2, [pc, #60]	; (1ad4c <net_buf_frag_insert+0x4c>)
   1ad10:	480f      	ldr	r0, [pc, #60]	; (1ad50 <net_buf_frag_insert+0x50>)
   1ad12:	f00b fe06 	bl	26922 <assert_print>
   1ad16:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1ad1a:	480c      	ldr	r0, [pc, #48]	; (1ad4c <net_buf_frag_insert+0x4c>)
   1ad1c:	f00b fdfa 	bl	26914 <assert_post_action>
   1ad20:	b949      	cbnz	r1, 1ad36 <net_buf_frag_insert+0x36>
   1ad22:	490c      	ldr	r1, [pc, #48]	; (1ad54 <net_buf_frag_insert+0x54>)
   1ad24:	f240 2363 	movw	r3, #611	; 0x263
   1ad28:	4a08      	ldr	r2, [pc, #32]	; (1ad4c <net_buf_frag_insert+0x4c>)
   1ad2a:	4809      	ldr	r0, [pc, #36]	; (1ad50 <net_buf_frag_insert+0x50>)
   1ad2c:	f00b fdf9 	bl	26922 <assert_print>
   1ad30:	f240 2163 	movw	r1, #611	; 0x263
   1ad34:	e7f1      	b.n	1ad1a <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1ad36:	6846      	ldr	r6, [r0, #4]
   1ad38:	b11e      	cbz	r6, 1ad42 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ad3a:	4608      	mov	r0, r1
   1ad3c:	f7ff ffc6 	bl	1accc <net_buf_frag_last>
   1ad40:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ad42:	6065      	str	r5, [r4, #4]
}
   1ad44:	bd70      	pop	{r4, r5, r6, pc}
   1ad46:	bf00      	nop
   1ad48:	000318a8 	.word	0x000318a8
   1ad4c:	0003182c 	.word	0x0003182c
   1ad50:	0002d881 	.word	0x0002d881
   1ad54:	000318af 	.word	0x000318af

0001ad58 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ad58:	b538      	push	{r3, r4, r5, lr}
   1ad5a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1ad5c:	460c      	mov	r4, r1
   1ad5e:	b959      	cbnz	r1, 1ad78 <net_buf_frag_add+0x20>
   1ad60:	490c      	ldr	r1, [pc, #48]	; (1ad94 <net_buf_frag_add+0x3c>)
   1ad62:	480d      	ldr	r0, [pc, #52]	; (1ad98 <net_buf_frag_add+0x40>)
   1ad64:	f240 236e 	movw	r3, #622	; 0x26e
   1ad68:	4a0c      	ldr	r2, [pc, #48]	; (1ad9c <net_buf_frag_add+0x44>)
   1ad6a:	f00b fdda 	bl	26922 <assert_print>
   1ad6e:	f240 216e 	movw	r1, #622	; 0x26e
   1ad72:	480a      	ldr	r0, [pc, #40]	; (1ad9c <net_buf_frag_add+0x44>)
   1ad74:	f00b fdce 	bl	26914 <assert_post_action>

	if (!head) {
   1ad78:	b920      	cbnz	r0, 1ad84 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1ad7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1ad7e:	4608      	mov	r0, r1
   1ad80:	f7ff bf8c 	b.w	1ac9c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1ad84:	f7ff ffa2 	bl	1accc <net_buf_frag_last>
   1ad88:	4621      	mov	r1, r4
   1ad8a:	f7ff ffb9 	bl	1ad00 <net_buf_frag_insert>
}
   1ad8e:	4628      	mov	r0, r5
   1ad90:	bd38      	pop	{r3, r4, r5, pc}
   1ad92:	bf00      	nop
   1ad94:	000318af 	.word	0x000318af
   1ad98:	0002d881 	.word	0x0002d881
   1ad9c:	0003182c 	.word	0x0003182c

0001ada0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1ada0:	b508      	push	{r3, lr}
   1ada2:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1ada4:	6800      	ldr	r0, [r0, #0]
   1ada6:	689a      	ldr	r2, [r3, #8]
   1ada8:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1adaa:	4291      	cmp	r1, r2
   1adac:	d90b      	bls.n	1adc6 <net_buf_simple_push+0x26>
   1adae:	4909      	ldr	r1, [pc, #36]	; (1add4 <net_buf_simple_push+0x34>)
   1adb0:	4809      	ldr	r0, [pc, #36]	; (1add8 <net_buf_simple_push+0x38>)
   1adb2:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1adb6:	4a09      	ldr	r2, [pc, #36]	; (1addc <net_buf_simple_push+0x3c>)
   1adb8:	f00b fdb3 	bl	26922 <assert_print>
   1adbc:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1adc0:	4806      	ldr	r0, [pc, #24]	; (1addc <net_buf_simple_push+0x3c>)
   1adc2:	f00b fda7 	bl	26914 <assert_post_action>
	buf->len += len;
   1adc6:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1adc8:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1adca:	4411      	add	r1, r2
	buf->data -= len;
   1adcc:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1adce:	8099      	strh	r1, [r3, #4]
}
   1add0:	bd08      	pop	{r3, pc}
   1add2:	bf00      	nop
   1add4:	000318c4 	.word	0x000318c4
   1add8:	0002d881 	.word	0x0002d881
   1addc:	0003182c 	.word	0x0003182c

0001ade0 <net_buf_simple_pull>:
{
   1ade0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1ade2:	8882      	ldrh	r2, [r0, #4]
{
   1ade4:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1ade6:	428a      	cmp	r2, r1
   1ade8:	d20b      	bcs.n	1ae02 <net_buf_simple_pull+0x22>
   1adea:	4909      	ldr	r1, [pc, #36]	; (1ae10 <net_buf_simple_pull+0x30>)
   1adec:	4809      	ldr	r0, [pc, #36]	; (1ae14 <net_buf_simple_pull+0x34>)
   1adee:	f240 4352 	movw	r3, #1106	; 0x452
   1adf2:	4a09      	ldr	r2, [pc, #36]	; (1ae18 <net_buf_simple_pull+0x38>)
   1adf4:	f00b fd95 	bl	26922 <assert_print>
   1adf8:	f240 4152 	movw	r1, #1106	; 0x452
   1adfc:	4806      	ldr	r0, [pc, #24]	; (1ae18 <net_buf_simple_pull+0x38>)
   1adfe:	f00b fd89 	bl	26914 <assert_post_action>
	buf->len -= len;
   1ae02:	1a52      	subs	r2, r2, r1
   1ae04:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1ae06:	6800      	ldr	r0, [r0, #0]
   1ae08:	4408      	add	r0, r1
   1ae0a:	6018      	str	r0, [r3, #0]
}
   1ae0c:	bd08      	pop	{r3, pc}
   1ae0e:	bf00      	nop
   1ae10:	000318b4 	.word	0x000318b4
   1ae14:	0002d881 	.word	0x0002d881
   1ae18:	0003182c 	.word	0x0003182c

0001ae1c <net_buf_simple_pull_mem>:
{
   1ae1c:	b508      	push	{r3, lr}
   1ae1e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1ae20:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1ae22:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1ae24:	428a      	cmp	r2, r1
   1ae26:	d20b      	bcs.n	1ae40 <net_buf_simple_pull_mem+0x24>
   1ae28:	4908      	ldr	r1, [pc, #32]	; (1ae4c <net_buf_simple_pull_mem+0x30>)
   1ae2a:	4809      	ldr	r0, [pc, #36]	; (1ae50 <net_buf_simple_pull_mem+0x34>)
   1ae2c:	f240 435e 	movw	r3, #1118	; 0x45e
   1ae30:	4a08      	ldr	r2, [pc, #32]	; (1ae54 <net_buf_simple_pull_mem+0x38>)
   1ae32:	f00b fd76 	bl	26922 <assert_print>
   1ae36:	f240 415e 	movw	r1, #1118	; 0x45e
   1ae3a:	4806      	ldr	r0, [pc, #24]	; (1ae54 <net_buf_simple_pull_mem+0x38>)
   1ae3c:	f00b fd6a 	bl	26914 <assert_post_action>
	buf->len -= len;
   1ae40:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1ae42:	4401      	add	r1, r0
	buf->len -= len;
   1ae44:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1ae46:	6019      	str	r1, [r3, #0]
}
   1ae48:	bd08      	pop	{r3, pc}
   1ae4a:	bf00      	nop
   1ae4c:	000318b4 	.word	0x000318b4
   1ae50:	0002d881 	.word	0x0002d881
   1ae54:	0003182c 	.word	0x0003182c

0001ae58 <net_buf_simple_add>:
{
   1ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1ae5a:	8885      	ldrh	r5, [r0, #4]
   1ae5c:	6803      	ldr	r3, [r0, #0]
   1ae5e:	460e      	mov	r6, r1
   1ae60:	4604      	mov	r4, r0
   1ae62:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1ae64:	f00f f82e 	bl	29ec4 <net_buf_simple_tailroom>
   1ae68:	42b0      	cmp	r0, r6
   1ae6a:	d20b      	bcs.n	1ae84 <net_buf_simple_add+0x2c>
   1ae6c:	4907      	ldr	r1, [pc, #28]	; (1ae8c <net_buf_simple_add+0x34>)
   1ae6e:	4808      	ldr	r0, [pc, #32]	; (1ae90 <net_buf_simple_add+0x38>)
   1ae70:	f240 3303 	movw	r3, #771	; 0x303
   1ae74:	4a07      	ldr	r2, [pc, #28]	; (1ae94 <net_buf_simple_add+0x3c>)
   1ae76:	f00b fd54 	bl	26922 <assert_print>
   1ae7a:	f240 3103 	movw	r1, #771	; 0x303
   1ae7e:	4805      	ldr	r0, [pc, #20]	; (1ae94 <net_buf_simple_add+0x3c>)
   1ae80:	f00b fd48 	bl	26914 <assert_post_action>
	buf->len += len;
   1ae84:	4435      	add	r5, r6
   1ae86:	80a5      	strh	r5, [r4, #4]
}
   1ae88:	4638      	mov	r0, r7
   1ae8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae8c:	000318e8 	.word	0x000318e8
   1ae90:	0002d881 	.word	0x0002d881
   1ae94:	0003182c 	.word	0x0003182c

0001ae98 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1ae98:	b508      	push	{r3, lr}
   1ae9a:	4804      	ldr	r0, [pc, #16]	; (1aeac <xoshiro128_initialize+0x14>)
   1ae9c:	f010 fb06 	bl	2b4ac <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1aea0:	2800      	cmp	r0, #0
}
   1aea2:	bf0c      	ite	eq
   1aea4:	f06f 0012 	mvneq.w	r0, #18
   1aea8:	2000      	movne	r0, #0
   1aeaa:	bd08      	pop	{r3, pc}
   1aeac:	0002c2c8 	.word	0x0002c2c8

0001aeb0 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   1aeb0:	2813      	cmp	r0, #19
   1aeb2:	d80e      	bhi.n	1aed2 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   1aeb4:	4a08      	ldr	r2, [pc, #32]	; (1aed8 <adc_gain_invert+0x28>)
   1aeb6:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1aeba:	b153      	cbz	r3, 1aed2 <adc_gain_invert+0x22>
   1aebc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   1aec0:	7852      	ldrb	r2, [r2, #1]
   1aec2:	b132      	cbz	r2, 1aed2 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   1aec4:	6808      	ldr	r0, [r1, #0]
   1aec6:	4343      	muls	r3, r0
   1aec8:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   1aecc:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1aece:	600b      	str	r3, [r1, #0]
			rv = 0;
   1aed0:	4770      	bx	lr
	int rv = -EINVAL;
   1aed2:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1aed6:	4770      	bx	lr
   1aed8:	00031914 	.word	0x00031914

0001aedc <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1aedc:	2201      	movs	r2, #1
   1aede:	4b05      	ldr	r3, [pc, #20]	; (1aef4 <adc_context_start_sampling+0x18>)
   1aee0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1aee4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1aee8:	b109      	cbz	r1, 1aeee <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aeea:	60da      	str	r2, [r3, #12]
}
   1aeec:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aeee:	601a      	str	r2, [r3, #0]
   1aef0:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1aef2:	4770      	bx	lr
   1aef4:	4000e000 	.word	0x4000e000

0001aef8 <adc_nrfx_channel_setup>:
{
   1aef8:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1aefa:	7908      	ldrb	r0, [r1, #4]
{
   1aefc:	b086      	sub	sp, #24
	uint8_t channel_id = channel_cfg->channel_id;
   1aefe:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1af02:	2c07      	cmp	r4, #7
   1af04:	d823      	bhi.n	1af4e <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->gain) {
   1af06:	780b      	ldrb	r3, [r1, #0]
   1af08:	2b0b      	cmp	r3, #11
   1af0a:	d815      	bhi.n	1af38 <adc_nrfx_channel_setup+0x40>
   1af0c:	e8df f003 	tbb	[pc, r3]
   1af10:	07070707 	.word	0x07070707
   1af14:	14140614 	.word	0x14140614
   1af18:	1214100e 	.word	0x1214100e
		config.gain = NRF_SAADC_GAIN1_2;
   1af1c:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   1af1e:	784a      	ldrb	r2, [r1, #1]
   1af20:	2a03      	cmp	r2, #3
   1af22:	d018      	beq.n	1af56 <adc_nrfx_channel_setup+0x5e>
   1af24:	2a04      	cmp	r2, #4
   1af26:	d028      	beq.n	1af7a <adc_nrfx_channel_setup+0x82>
		LOG_ERR("Selected ADC reference is not valid");
   1af28:	4b31      	ldr	r3, [pc, #196]	; (1aff0 <adc_nrfx_channel_setup+0xf8>)
   1af2a:	e006      	b.n	1af3a <adc_nrfx_channel_setup+0x42>
		config.gain = NRF_SAADC_GAIN1;
   1af2c:	2305      	movs	r3, #5
		break;
   1af2e:	e7f6      	b.n	1af1e <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   1af30:	2306      	movs	r3, #6
		break;
   1af32:	e7f4      	b.n	1af1e <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   1af34:	2307      	movs	r3, #7
		break;
   1af36:	e7f2      	b.n	1af1e <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   1af38:	4b2e      	ldr	r3, [pc, #184]	; (1aff4 <adc_nrfx_channel_setup+0xfc>)
   1af3a:	9305      	str	r3, [sp, #20]
   1af3c:	2302      	movs	r3, #2
   1af3e:	9304      	str	r3, [sp, #16]
   1af40:	2300      	movs	r3, #0
   1af42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1af46:	482c      	ldr	r0, [pc, #176]	; (1aff8 <adc_nrfx_channel_setup+0x100>)
   1af48:	aa04      	add	r2, sp, #16
   1af4a:	f7f3 fb21 	bl	e590 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1af4e:	f06f 0015 	mvn.w	r0, #21
}
   1af52:	b006      	add	sp, #24
   1af54:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   1af56:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1af58:	f244 060a 	movw	r6, #16394	; 0x400a
   1af5c:	884a      	ldrh	r2, [r1, #2]
   1af5e:	42b2      	cmp	r2, r6
   1af60:	d03f      	beq.n	1afe2 <adc_nrfx_channel_setup+0xea>
   1af62:	d80c      	bhi.n	1af7e <adc_nrfx_channel_setup+0x86>
   1af64:	f244 0603 	movw	r6, #16387	; 0x4003
   1af68:	42b2      	cmp	r2, r6
   1af6a:	d016      	beq.n	1af9a <adc_nrfx_channel_setup+0xa2>
   1af6c:	f244 0605 	movw	r6, #16389	; 0x4005
   1af70:	42b2      	cmp	r2, r6
   1af72:	d034      	beq.n	1afde <adc_nrfx_channel_setup+0xe6>
   1af74:	b3aa      	cbz	r2, 1afe2 <adc_nrfx_channel_setup+0xea>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1af76:	4b21      	ldr	r3, [pc, #132]	; (1affc <adc_nrfx_channel_setup+0x104>)
   1af78:	e7df      	b.n	1af3a <adc_nrfx_channel_setup+0x42>
	nrf_saadc_channel_config_t config = {
   1af7a:	2500      	movs	r5, #0
   1af7c:	e7ec      	b.n	1af58 <adc_nrfx_channel_setup+0x60>
	switch (channel_cfg->acquisition_time) {
   1af7e:	f244 0614 	movw	r6, #16404	; 0x4014
   1af82:	42b2      	cmp	r2, r6
   1af84:	d02f      	beq.n	1afe6 <adc_nrfx_channel_setup+0xee>
   1af86:	f244 0628 	movw	r6, #16424	; 0x4028
   1af8a:	42b2      	cmp	r2, r6
   1af8c:	d02d      	beq.n	1afea <adc_nrfx_channel_setup+0xf2>
   1af8e:	f244 060f 	movw	r6, #16399	; 0x400f
   1af92:	42b2      	cmp	r2, r6
   1af94:	d1ef      	bne.n	1af76 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1af96:	2203      	movs	r2, #3
   1af98:	e000      	b.n	1af9c <adc_nrfx_channel_setup+0xa4>
	nrf_saadc_channel_config_t config = {
   1af9a:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1af9c:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1afa0:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1afa2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   1afa6:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1afa8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1afac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1afb0:	0122      	lsls	r2, r4, #4
   1afb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1afb6:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1afba:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1afbe:	0123      	lsls	r3, r4, #4
   1afc0:	798a      	ldrb	r2, [r1, #6]
   1afc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1afc6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1afca:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1afce:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1afd2:	4b0b      	ldr	r3, [pc, #44]	; (1b000 <adc_nrfx_channel_setup+0x108>)
   1afd4:	794a      	ldrb	r2, [r1, #5]
   1afd6:	4423      	add	r3, r4
   1afd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1afdc:	e7b9      	b.n	1af52 <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
   1afde:	2201      	movs	r2, #1
   1afe0:	e7dc      	b.n	1af9c <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1afe2:	2202      	movs	r2, #2
   1afe4:	e7da      	b.n	1af9c <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1afe6:	2204      	movs	r2, #4
   1afe8:	e7d8      	b.n	1af9c <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1afea:	2205      	movs	r2, #5
   1afec:	e7d6      	b.n	1af9c <adc_nrfx_channel_setup+0xa4>
   1afee:	bf00      	nop
   1aff0:	0003195b 	.word	0x0003195b
   1aff4:	0003193c 	.word	0x0003193c
   1aff8:	0002c7d4 	.word	0x0002c7d4
   1affc:	0003197f 	.word	0x0003197f
   1b000:	20008168 	.word	0x20008168

0001b004 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b008:	b088      	sub	sp, #32
   1b00a:	460c      	mov	r4, r1
   1b00c:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   1b00e:	f04f 33ff 	mov.w	r3, #4294967295
   1b012:	f04f 32ff 	mov.w	r2, #4294967295
   1b016:	4876      	ldr	r0, [pc, #472]	; (1b1f0 <adc_nrfx_read+0x1ec>)
   1b018:	f006 fc9e 	bl	21958 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1b01c:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1b01e:	1e73      	subs	r3, r6, #1
   1b020:	2bfe      	cmp	r3, #254	; 0xfe
   1b022:	d90c      	bls.n	1b03e <adc_nrfx_read+0x3a>
		LOG_ERR("Invalid selection of channels");
   1b024:	4b73      	ldr	r3, [pc, #460]	; (1b1f4 <adc_nrfx_read+0x1f0>)
		LOG_ERR(
   1b026:	617b      	str	r3, [r7, #20]
   1b028:	2302      	movs	r3, #2
   1b02a:	613b      	str	r3, [r7, #16]
   1b02c:	2300      	movs	r3, #0
   1b02e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b032:	4871      	ldr	r0, [pc, #452]	; (1b1f8 <adc_nrfx_read+0x1f4>)
   1b034:	f107 0210 	add.w	r2, r7, #16
   1b038:	f7f3 faaa 	bl	e590 <z_impl_z_log_msg_static_create>
	if (error) {
   1b03c:	e01b      	b.n	1b076 <adc_nrfx_read+0x72>
   1b03e:	2100      	movs	r1, #0
	active_channels = 0U;
   1b040:	460a      	mov	r2, r1
    p_reg->CH[channel].PSELP = pselp;
   1b042:	4d6e      	ldr	r5, [pc, #440]	; (1b1fc <adc_nrfx_read+0x1f8>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b044:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 1b200 <adc_nrfx_read+0x1fc>
		if (selected_channels & BIT(channel_id)) {
   1b048:	fa26 f301 	lsr.w	r3, r6, r1
   1b04c:	f013 0301 	ands.w	r3, r3, #1
   1b050:	d040      	beq.n	1b0d4 <adc_nrfx_read+0xd0>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b052:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1b056:	b9c3      	cbnz	r3, 1b08a <adc_nrfx_read+0x86>
				LOG_ERR("Channel %u not configured",
   1b058:	466c      	mov	r4, sp
   1b05a:	b088      	sub	sp, #32
   1b05c:	aa02      	add	r2, sp, #8
   1b05e:	4869      	ldr	r0, [pc, #420]	; (1b204 <adc_nrfx_read+0x200>)
   1b060:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1b064:	2103      	movs	r1, #3
   1b066:	f842 1f10 	str.w	r1, [r2, #16]!
   1b06a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b06e:	4862      	ldr	r0, [pc, #392]	; (1b1f8 <adc_nrfx_read+0x1f4>)
   1b070:	f7f3 fa8e 	bl	e590 <z_impl_z_log_msg_static_create>
   1b074:	46a5      	mov	sp, r4
		return -EINVAL;
   1b076:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1b07a:	485d      	ldr	r0, [pc, #372]	; (1b1f0 <adc_nrfx_read+0x1ec>)
   1b07c:	f006 fc28 	bl	218d0 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1b080:	4620      	mov	r0, r4
   1b082:	3718      	adds	r7, #24
   1b084:	46bd      	mov	sp, r7
   1b086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1b08a:	f894 e011 	ldrb.w	lr, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1b08e:	eb05 1801 	add.w	r8, r5, r1, lsl #4
   1b092:	f1be 0e00 	subs.w	lr, lr, #0
   1b096:	bf18      	it	ne
   1b098:	f04f 0e01 	movne.w	lr, #1
   1b09c:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
			++active_channels;
   1b0a0:	3201      	adds	r2, #1
   1b0a2:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   1b0a6:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   1b0aa:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1b0ae:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1b0b2:	0100      	lsls	r0, r0, #4
   1b0b4:	502b      	str	r3, [r5, r0]
   1b0b6:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   1b0b8:	3101      	adds	r1, #1
   1b0ba:	2908      	cmp	r1, #8
   1b0bc:	d1c4      	bne.n	1b048 <adc_nrfx_read+0x44>
	error = set_resolution(sequence);
   1b0be:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   1b0c0:	f1a3 0108 	sub.w	r1, r3, #8
   1b0c4:	2906      	cmp	r1, #6
   1b0c6:	d816      	bhi.n	1b0f6 <adc_nrfx_read+0xf2>
   1b0c8:	e8df f001 	tbb	[pc, r1]
   1b0cc:	15221520 	.word	0x15221520
   1b0d0:	1509      	.short	0x1509
   1b0d2:	13          	.byte	0x13
   1b0d3:	00          	.byte	0x00
   1b0d4:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1b0d8:	0100      	lsls	r0, r0, #4
   1b0da:	502b      	str	r3, [r5, r0]
}
   1b0dc:	e7ec      	b.n	1b0b8 <adc_nrfx_read+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1b0de:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1b0e0:	4946      	ldr	r1, [pc, #280]	; (1b1fc <adc_nrfx_read+0x1f8>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1b0e2:	2a01      	cmp	r2, #1
   1b0e4:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1b0e8:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1b0ea:	d913      	bls.n	1b114 <adc_nrfx_read+0x110>
   1b0ec:	b1a3      	cbz	r3, 1b118 <adc_nrfx_read+0x114>
		LOG_ERR(
   1b0ee:	4b46      	ldr	r3, [pc, #280]	; (1b208 <adc_nrfx_read+0x204>)
   1b0f0:	e799      	b.n	1b026 <adc_nrfx_read+0x22>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1b0f2:	2303      	movs	r3, #3
		break;
   1b0f4:	e7f4      	b.n	1b0e0 <adc_nrfx_read+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   1b0f6:	466c      	mov	r4, sp
   1b0f8:	b088      	sub	sp, #32
   1b0fa:	aa02      	add	r2, sp, #8
   1b0fc:	4943      	ldr	r1, [pc, #268]	; (1b20c <adc_nrfx_read+0x208>)
	switch (sequence->oversampling) {
   1b0fe:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Oversampling value %d is not valid",
   1b102:	2303      	movs	r3, #3
   1b104:	f842 3f10 	str.w	r3, [r2, #16]!
   1b108:	2300      	movs	r3, #0
   1b10a:	e7ae      	b.n	1b06a <adc_nrfx_read+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1b10c:	2300      	movs	r3, #0
   1b10e:	e7e7      	b.n	1b0e0 <adc_nrfx_read+0xdc>
	switch (sequence->resolution) {
   1b110:	2301      	movs	r3, #1
   1b112:	e7e5      	b.n	1b0e0 <adc_nrfx_read+0xdc>
	switch (sequence->oversampling) {
   1b114:	2b08      	cmp	r3, #8
   1b116:	d81b      	bhi.n	1b150 <adc_nrfx_read+0x14c>
    p_reg->OVERSAMPLE = oversample;
   1b118:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   1b11c:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1b11e:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   1b120:	b9d9      	cbnz	r1, 1b15a <adc_nrfx_read+0x156>
	if (sequence->buffer_size < needed_buffer_size) {
   1b122:	68e1      	ldr	r1, [r4, #12]
   1b124:	4299      	cmp	r1, r3
   1b126:	d21c      	bcs.n	1b162 <adc_nrfx_read+0x15e>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1b128:	466c      	mov	r4, sp
   1b12a:	b088      	sub	sp, #32
   1b12c:	aa02      	add	r2, sp, #8
   1b12e:	61d3      	str	r3, [r2, #28]
   1b130:	2304      	movs	r3, #4
   1b132:	4837      	ldr	r0, [pc, #220]	; (1b210 <adc_nrfx_read+0x20c>)
   1b134:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1b138:	f842 3f10 	str.w	r3, [r2, #16]!
   1b13c:	2300      	movs	r3, #0
   1b13e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b142:	482d      	ldr	r0, [pc, #180]	; (1b1f8 <adc_nrfx_read+0x1f4>)
   1b144:	f7f3 fa24 	bl	e590 <z_impl_z_log_msg_static_create>
   1b148:	46a5      	mov	sp, r4
		return -ENOMEM;
   1b14a:	f06f 040b 	mvn.w	r4, #11
   1b14e:	e794      	b.n	1b07a <adc_nrfx_read+0x76>
		LOG_ERR("Oversampling value %d is not valid",
   1b150:	466c      	mov	r4, sp
   1b152:	b088      	sub	sp, #32
   1b154:	aa02      	add	r2, sp, #8
   1b156:	492f      	ldr	r1, [pc, #188]	; (1b214 <adc_nrfx_read+0x210>)
   1b158:	e7d1      	b.n	1b0fe <adc_nrfx_read+0xfa>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1b15a:	8989      	ldrh	r1, [r1, #12]
   1b15c:	fb01 3303 	mla	r3, r1, r3, r3
   1b160:	e7df      	b.n	1b122 <adc_nrfx_read+0x11e>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1b162:	46a4      	mov	ip, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1b164:	68a1      	ldr	r1, [r4, #8]
   1b166:	4b25      	ldr	r3, [pc, #148]	; (1b1fc <adc_nrfx_read+0x1f8>)
   1b168:	4d2b      	ldr	r5, [pc, #172]	; (1b218 <adc_nrfx_read+0x214>)
   1b16a:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
   1b16e:	f105 0674 	add.w	r6, r5, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   1b172:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   1b176:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b17a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1b17c:	f8dc 3000 	ldr.w	r3, [ip]
   1b180:	46ac      	mov	ip, r5
   1b182:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   1b184:	2600      	movs	r6, #0
   1b186:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   1b188:	6823      	ldr	r3, [r4, #0]
   1b18a:	b36b      	cbz	r3, 1b1e8 <adc_nrfx_read+0x1e4>
		ctx->options = *sequence->options;
   1b18c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1b18e:	f105 0488 	add.w	r4, r5, #136	; 0x88
   1b192:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1b196:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   1b198:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1b19c:	b320      	cbz	r0, 1b1e8 <adc_nrfx_read+0x1e4>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b19e:	e8dc 3fef 	ldaex	r3, [ip]
   1b1a2:	e8cc 6fe2 	stlex	r2, r6, [ip]
   1b1a6:	2a00      	cmp	r2, #0
   1b1a8:	d1f9      	bne.n	1b19e <adc_nrfx_read+0x19a>
   1b1aa:	491c      	ldr	r1, [pc, #112]	; (1b21c <adc_nrfx_read+0x218>)
   1b1ac:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1b1b0:	468c      	mov	ip, r1
   1b1b2:	4631      	mov	r1, r6
   1b1b4:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1b1b8:	2300      	movs	r3, #0
   1b1ba:	fbe0 c104 	umlal	ip, r1, r0, r4
   1b1be:	4a18      	ldr	r2, [pc, #96]	; (1b220 <adc_nrfx_read+0x21c>)
   1b1c0:	4660      	mov	r0, ip
   1b1c2:	f7ed ff1d 	bl	9000 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1b1c6:	2200      	movs	r2, #0
   1b1c8:	e9cd 0100 	strd	r0, r1, [sp]
   1b1cc:	2300      	movs	r3, #0
   1b1ce:	f105 0008 	add.w	r0, r5, #8
   1b1d2:	f008 ff8f 	bl	240f4 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1b1d6:	f04f 32ff 	mov.w	r2, #4294967295
   1b1da:	f04f 33ff 	mov.w	r3, #4294967295
   1b1de:	4811      	ldr	r0, [pc, #68]	; (1b224 <adc_nrfx_read+0x220>)
   1b1e0:	f006 fbba 	bl	21958 <z_impl_k_sem_take>
	return ctx->status;
   1b1e4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   1b1e6:	e748      	b.n	1b07a <adc_nrfx_read+0x76>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1b1e8:	480b      	ldr	r0, [pc, #44]	; (1b218 <adc_nrfx_read+0x214>)
   1b1ea:	f7ff fe77 	bl	1aedc <adc_context_start_sampling>
   1b1ee:	e7f2      	b.n	1b1d6 <adc_nrfx_read+0x1d2>
   1b1f0:	200081a8 	.word	0x200081a8
   1b1f4:	000319aa 	.word	0x000319aa
   1b1f8:	0002c7d4 	.word	0x0002c7d4
   1b1fc:	4000e000 	.word	0x4000e000
   1b200:	20008208 	.word	0x20008208
   1b204:	000319c8 	.word	0x000319c8
   1b208:	00031a07 	.word	0x00031a07
   1b20c:	000319e2 	.word	0x000319e2
   1b210:	00031a5c 	.word	0x00031a5c
   1b214:	00031a39 	.word	0x00031a39
   1b218:	20008168 	.word	0x20008168
   1b21c:	000f423f 	.word	0x000f423f
   1b220:	000f4240 	.word	0x000f4240
   1b224:	200081c0 	.word	0x200081c0

0001b228 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1b228:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b22a:	2400      	movs	r4, #0
   1b22c:	4b0d      	ldr	r3, [pc, #52]	; (1b264 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1b22e:	200e      	movs	r0, #14
   1b230:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1b234:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1b238:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1b23c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1b240:	2212      	movs	r2, #18
   1b242:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1b246:	f7f5 fa69 	bl	1071c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b24a:	4622      	mov	r2, r4
   1b24c:	2101      	movs	r1, #1
   1b24e:	200e      	movs	r0, #14
   1b250:	f7f5 fa94 	bl	1077c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1b254:	4804      	ldr	r0, [pc, #16]	; (1b268 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1b256:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b258:	b913      	cbnz	r3, 1b260 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1b25a:	3040      	adds	r0, #64	; 0x40
   1b25c:	f006 fb38 	bl	218d0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1b260:	2000      	movs	r0, #0
   1b262:	bd10      	pop	{r4, pc}
   1b264:	4000e000 	.word	0x4000e000
   1b268:	20008168 	.word	0x20008168

0001b26c <saadc_irq_handler>:
{
   1b26c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b26e:	4b2d      	ldr	r3, [pc, #180]	; (1b324 <saadc_irq_handler+0xb8>)
   1b270:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1b274:	2a00      	cmp	r2, #0
   1b276:	d048      	beq.n	1b30a <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b278:	2200      	movs	r2, #0
   1b27a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1b27e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b282:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1b284:	4c28      	ldr	r4, [pc, #160]	; (1b328 <saadc_irq_handler+0xbc>)
   1b286:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1b288:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1b28c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1b28e:	4625      	mov	r5, r4
   1b290:	b3b3      	cbz	r3, 1b300 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   1b292:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1b296:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1b29a:	b133      	cbz	r3, 1b2aa <saadc_irq_handler+0x3e>
			action = callback(dev,
   1b29c:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1b2a0:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1b2a2:	2801      	cmp	r0, #1
   1b2a4:	d014      	beq.n	1b2d0 <saadc_irq_handler+0x64>
   1b2a6:	2802      	cmp	r0, #2
   1b2a8:	d024      	beq.n	1b2f4 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1b2aa:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1b2ae:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1b2b2:	429a      	cmp	r2, r3
   1b2b4:	d91e      	bls.n	1b2f4 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1b2b6:	3301      	adds	r3, #1
   1b2b8:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1b2bc:	4b19      	ldr	r3, [pc, #100]	; (1b324 <saadc_irq_handler+0xb8>)
   1b2be:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1b2c2:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1b2c6:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1b2c8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1b2cc:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1b2d0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1b2d4:	b923      	cbnz	r3, 1b2e0 <saadc_irq_handler+0x74>
}
   1b2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1b2da:	4813      	ldr	r0, [pc, #76]	; (1b328 <saadc_irq_handler+0xbc>)
   1b2dc:	f7ff bdfe 	b.w	1aedc <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b2e0:	e8d5 3fef 	ldaex	r3, [r5]
   1b2e4:	1e5a      	subs	r2, r3, #1
   1b2e6:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1b2ea:	2900      	cmp	r1, #0
   1b2ec:	d1f8      	bne.n	1b2e0 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1b2ee:	2b01      	cmp	r3, #1
   1b2f0:	dcf1      	bgt.n	1b2d6 <saadc_irq_handler+0x6a>
   1b2f2:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1b2f4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1b2f8:	b113      	cbz	r3, 1b300 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   1b2fa:	480c      	ldr	r0, [pc, #48]	; (1b32c <saadc_irq_handler+0xc0>)
   1b2fc:	f010 fa31 	bl	2b762 <z_impl_k_timer_stop>
   1b300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1b304:	480a      	ldr	r0, [pc, #40]	; (1b330 <saadc_irq_handler+0xc4>)
   1b306:	f006 bae3 	b.w	218d0 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b30a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1b30e:	2900      	cmp	r1, #0
   1b310:	d0ef      	beq.n	1b2f2 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b312:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1b316:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b31a:	2201      	movs	r2, #1
   1b31c:	609a      	str	r2, [r3, #8]
   1b31e:	601a      	str	r2, [r3, #0]
   1b320:	605a      	str	r2, [r3, #4]
}
   1b322:	e7e6      	b.n	1b2f2 <saadc_irq_handler+0x86>
   1b324:	4000e000 	.word	0x4000e000
   1b328:	20008168 	.word	0x20008168
   1b32c:	20008170 	.word	0x20008170
   1b330:	200081c0 	.word	0x200081c0

0001b334 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1b334:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b336:	2340      	movs	r3, #64	; 0x40
{
   1b338:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1b33a:	490a      	ldr	r1, [pc, #40]	; (1b364 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b33c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1b33e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b340:	1149      	asrs	r1, r1, #5
{
   1b342:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b344:	4623      	mov	r3, r4
   1b346:	4a08      	ldr	r2, [pc, #32]	; (1b368 <onoff_start+0x34>)
   1b348:	4808      	ldr	r0, [pc, #32]	; (1b36c <onoff_start+0x38>)
   1b34a:	f00e fdfc 	bl	29f46 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1b34e:	1e01      	subs	r1, r0, #0
   1b350:	da05      	bge.n	1b35e <onoff_start+0x2a>
		notify(mgr, err);
   1b352:	4628      	mov	r0, r5
   1b354:	4623      	mov	r3, r4
	}
}
   1b356:	b003      	add	sp, #12
   1b358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1b35c:	4718      	bx	r3
}
   1b35e:	b003      	add	sp, #12
   1b360:	bd30      	pop	{r4, r5, pc}
   1b362:	bf00      	nop
   1b364:	2002189c 	.word	0x2002189c
   1b368:	00029fb5 	.word	0x00029fb5
   1b36c:	0002c268 	.word	0x0002c268

0001b370 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b370:	b2c9      	uxtb	r1, r1
   1b372:	2903      	cmp	r1, #3
{
   1b374:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b376:	d909      	bls.n	1b38c <get_status+0x1c>
   1b378:	4909      	ldr	r1, [pc, #36]	; (1b3a0 <get_status+0x30>)
   1b37a:	480a      	ldr	r0, [pc, #40]	; (1b3a4 <get_status+0x34>)
   1b37c:	237a      	movs	r3, #122	; 0x7a
   1b37e:	4a0a      	ldr	r2, [pc, #40]	; (1b3a8 <get_status+0x38>)
   1b380:	f00b facf 	bl	26922 <assert_print>
   1b384:	217a      	movs	r1, #122	; 0x7a
   1b386:	4808      	ldr	r0, [pc, #32]	; (1b3a8 <get_status+0x38>)
   1b388:	f00b fac4 	bl	26914 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1b38c:	220c      	movs	r2, #12
   1b38e:	6903      	ldr	r3, [r0, #16]
   1b390:	fb01 3302 	mla	r3, r1, r2, r3
   1b394:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   1b398:	f000 0007 	and.w	r0, r0, #7
   1b39c:	bd08      	pop	{r3, pc}
   1b39e:	bf00      	nop
   1b3a0:	00031ad6 	.word	0x00031ad6
   1b3a4:	0002d881 	.word	0x0002d881
   1b3a8:	00031a99 	.word	0x00031a99

0001b3ac <stop>:
{
   1b3ac:	b570      	push	{r4, r5, r6, lr}
   1b3ae:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b3b0:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   1b3b2:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b3b4:	d90b      	bls.n	1b3ce <stop+0x22>
   1b3b6:	491a      	ldr	r1, [pc, #104]	; (1b420 <stop+0x74>)
   1b3b8:	481a      	ldr	r0, [pc, #104]	; (1b424 <stop+0x78>)
   1b3ba:	f240 135d 	movw	r3, #349	; 0x15d
   1b3be:	4a1a      	ldr	r2, [pc, #104]	; (1b428 <stop+0x7c>)
   1b3c0:	f00b faaf 	bl	26922 <assert_print>
   1b3c4:	f240 115d 	movw	r1, #349	; 0x15d
   1b3c8:	4817      	ldr	r0, [pc, #92]	; (1b428 <stop+0x7c>)
   1b3ca:	f00b faa3 	bl	26914 <assert_post_action>
	__asm__ volatile(
   1b3ce:	f04f 0420 	mov.w	r4, #32
   1b3d2:	f3ef 8511 	mrs	r5, BASEPRI
   1b3d6:	f384 8812 	msr	BASEPRI_MAX, r4
   1b3da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b3de:	260c      	movs	r6, #12
   1b3e0:	fb06 3401 	mla	r4, r6, r1, r3
   1b3e4:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1b3e8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1b3ec:	d008      	beq.n	1b400 <stop+0x54>
   1b3ee:	42a2      	cmp	r2, r4
   1b3f0:	d006      	beq.n	1b400 <stop+0x54>
	__asm__ volatile(
   1b3f2:	f385 8811 	msr	BASEPRI, r5
   1b3f6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1b3fa:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b3fe:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1b400:	2201      	movs	r2, #1
   1b402:	4371      	muls	r1, r6
   1b404:	440b      	add	r3, r1
   1b406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1b40a:	f385 8811 	msr	BASEPRI, r5
   1b40e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1b412:	6843      	ldr	r3, [r0, #4]
   1b414:	440b      	add	r3, r1
   1b416:	685b      	ldr	r3, [r3, #4]
   1b418:	4798      	blx	r3
	return 0;
   1b41a:	2000      	movs	r0, #0
   1b41c:	e7ef      	b.n	1b3fe <stop+0x52>
   1b41e:	bf00      	nop
   1b420:	00031ad6 	.word	0x00031ad6
   1b424:	0002d881 	.word	0x0002d881
   1b428:	00031a99 	.word	0x00031a99

0001b42c <onoff_stop>:
{
   1b42c:	b570      	push	{r4, r5, r6, lr}
   1b42e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1b430:	4906      	ldr	r1, [pc, #24]	; (1b44c <onoff_stop+0x20>)
{
   1b432:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1b434:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1b436:	1149      	asrs	r1, r1, #5
   1b438:	2240      	movs	r2, #64	; 0x40
   1b43a:	4805      	ldr	r0, [pc, #20]	; (1b450 <onoff_stop+0x24>)
   1b43c:	f7ff ffb6 	bl	1b3ac <stop>
	notify(mgr, res);
   1b440:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1b442:	4601      	mov	r1, r0
	notify(mgr, res);
   1b444:	4620      	mov	r0, r4
}
   1b446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1b44a:	4718      	bx	r3
   1b44c:	2002189c 	.word	0x2002189c
   1b450:	0002c268 	.word	0x0002c268

0001b454 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b458:	2200      	movs	r2, #0
   1b45a:	2101      	movs	r1, #1
{
   1b45c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b45e:	2005      	movs	r0, #5
   1b460:	f7f5 f98c 	bl	1077c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1b464:	4811      	ldr	r0, [pc, #68]	; (1b4ac <clk_init+0x58>)
   1b466:	f003 f81b 	bl	1e4a0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1b46a:	4b11      	ldr	r3, [pc, #68]	; (1b4b0 <clk_init+0x5c>)
   1b46c:	4298      	cmp	r0, r3
   1b46e:	d119      	bne.n	1b4a4 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1b470:	f003 f83a 	bl	1e4e8 <nrfx_clock_enable>
   1b474:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1b476:	f04f 080c 	mov.w	r8, #12
   1b47a:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1b47c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1b4b4 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   1b480:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1b482:	4649      	mov	r1, r9
   1b484:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   1b488:	f00b fa06 	bl	26898 <onoff_manager_init>
		if (err < 0) {
   1b48c:	2800      	cmp	r0, #0
   1b48e:	db07      	blt.n	1b4a0 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1b490:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1b494:	3401      	adds	r4, #1
   1b496:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1b498:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1b49c:	d1f0      	bne.n	1b480 <clk_init+0x2c>
	}

	return 0;
   1b49e:	2000      	movs	r0, #0
}
   1b4a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1b4a4:	f06f 0004 	mvn.w	r0, #4
   1b4a8:	e7fa      	b.n	1b4a0 <clk_init+0x4c>
   1b4aa:	bf00      	nop
   1b4ac:	0001b4f1 	.word	0x0001b4f1
   1b4b0:	0bad0000 	.word	0x0bad0000
   1b4b4:	0002d510 	.word	0x0002d510

0001b4b8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1b4b8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1b4ba:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1b4bc:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1b4be:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1b4c0:	434b      	muls	r3, r1
   1b4c2:	4809      	ldr	r0, [pc, #36]	; (1b4e8 <clkstarted_handle.constprop.0+0x30>)
   1b4c4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1b4c6:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   1b4c8:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1b4cc:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1b4ce:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1b4d2:	f00e fd25 	bl	29f20 <set_on_state>
	if (callback) {
   1b4d6:	b12d      	cbz	r5, 1b4e4 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1b4d8:	4632      	mov	r2, r6
   1b4da:	462b      	mov	r3, r5
}
   1b4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1b4e0:	4802      	ldr	r0, [pc, #8]	; (1b4ec <clkstarted_handle.constprop.0+0x34>)
   1b4e2:	4718      	bx	r3
}
   1b4e4:	bd70      	pop	{r4, r5, r6, pc}
   1b4e6:	bf00      	nop
   1b4e8:	2002189c 	.word	0x2002189c
   1b4ec:	0002c268 	.word	0x0002c268

0001b4f0 <clock_event_handler>:
{
   1b4f0:	b508      	push	{r3, lr}
	switch (event) {
   1b4f2:	2805      	cmp	r0, #5
   1b4f4:	d820      	bhi.n	1b538 <clock_event_handler+0x48>
   1b4f6:	e8df f000 	tbb	[pc, r0]
   1b4fa:	1103      	.short	0x1103
   1b4fc:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1b500:	4b13      	ldr	r3, [pc, #76]	; (1b550 <clock_event_handler+0x60>)
   1b502:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1b506:	f010 0007 	ands.w	r0, r0, #7
   1b50a:	d11f      	bne.n	1b54c <clock_event_handler+0x5c>
}
   1b50c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1b510:	f7ff bfd2 	b.w	1b4b8 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1b514:	2002      	movs	r0, #2
   1b516:	e7f9      	b.n	1b50c <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   1b518:	2003      	movs	r0, #3
   1b51a:	e7f7      	b.n	1b50c <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1b51c:	2001      	movs	r0, #1
   1b51e:	e7f5      	b.n	1b50c <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   1b520:	490c      	ldr	r1, [pc, #48]	; (1b554 <clock_event_handler+0x64>)
   1b522:	f240 236e 	movw	r3, #622	; 0x26e
   1b526:	4a0c      	ldr	r2, [pc, #48]	; (1b558 <clock_event_handler+0x68>)
   1b528:	480c      	ldr	r0, [pc, #48]	; (1b55c <clock_event_handler+0x6c>)
   1b52a:	f00b f9fa 	bl	26922 <assert_print>
   1b52e:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1b532:	4809      	ldr	r0, [pc, #36]	; (1b558 <clock_event_handler+0x68>)
   1b534:	f00b f9ee 	bl	26914 <assert_post_action>
   1b538:	4906      	ldr	r1, [pc, #24]	; (1b554 <clock_event_handler+0x64>)
   1b53a:	f240 2372 	movw	r3, #626	; 0x272
   1b53e:	4a06      	ldr	r2, [pc, #24]	; (1b558 <clock_event_handler+0x68>)
   1b540:	4806      	ldr	r0, [pc, #24]	; (1b55c <clock_event_handler+0x6c>)
   1b542:	f00b f9ee 	bl	26922 <assert_print>
   1b546:	f240 2172 	movw	r1, #626	; 0x272
   1b54a:	e7f2      	b.n	1b532 <clock_event_handler+0x42>
}
   1b54c:	bd08      	pop	{r3, pc}
   1b54e:	bf00      	nop
   1b550:	2002189c 	.word	0x2002189c
   1b554:	000334e0 	.word	0x000334e0
   1b558:	00031a99 	.word	0x00031a99
   1b55c:	0002d881 	.word	0x0002d881

0001b560 <generic_hfclk_start>:
{
   1b560:	b508      	push	{r3, lr}
	__asm__ volatile(
   1b562:	f04f 0320 	mov.w	r3, #32
   1b566:	f3ef 8111 	mrs	r1, BASEPRI
   1b56a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b56e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1b572:	4a11      	ldr	r2, [pc, #68]	; (1b5b8 <generic_hfclk_start+0x58>)
   1b574:	6813      	ldr	r3, [r2, #0]
   1b576:	f043 0002 	orr.w	r0, r3, #2
   1b57a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1b57c:	07da      	lsls	r2, r3, #31
   1b57e:	d408      	bmi.n	1b592 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1b580:	f381 8811 	msr	BASEPRI, r1
   1b584:	f3bf 8f6f 	isb	sy
}
   1b588:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1b58c:	2001      	movs	r0, #1
   1b58e:	f002 bfd5 	b.w	1e53c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1b592:	4b0a      	ldr	r3, [pc, #40]	; (1b5bc <generic_hfclk_start+0x5c>)
   1b594:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1b598:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1b59c:	07d3      	lsls	r3, r2, #31
   1b59e:	d5ef      	bpl.n	1b580 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1b5a0:	4807      	ldr	r0, [pc, #28]	; (1b5c0 <generic_hfclk_start+0x60>)
   1b5a2:	f00e fcbd 	bl	29f20 <set_on_state>
   1b5a6:	f381 8811 	msr	BASEPRI, r1
   1b5aa:	f3bf 8f6f 	isb	sy
}
   1b5ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1b5b2:	2000      	movs	r0, #0
   1b5b4:	f7ff bf80 	b.w	1b4b8 <clkstarted_handle.constprop.0>
   1b5b8:	2002194c 	.word	0x2002194c
   1b5bc:	40005000 	.word	0x40005000
   1b5c0:	20021924 	.word	0x20021924

0001b5c4 <api_blocking_start>:
{
   1b5c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b5c6:	2200      	movs	r2, #0
   1b5c8:	2301      	movs	r3, #1
   1b5ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b5ce:	ab04      	add	r3, sp, #16
   1b5d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b5d4:	4a09      	ldr	r2, [pc, #36]	; (1b5fc <api_blocking_start+0x38>)
   1b5d6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b5d8:	f8cd d000 	str.w	sp, [sp]
   1b5dc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b5e0:	f00e fce1 	bl	29fa6 <api_start>
	if (err < 0) {
   1b5e4:	2800      	cmp	r0, #0
   1b5e6:	db05      	blt.n	1b5f4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1b5e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1b5ec:	2300      	movs	r3, #0
   1b5ee:	4668      	mov	r0, sp
   1b5f0:	f006 f9b2 	bl	21958 <z_impl_k_sem_take>
}
   1b5f4:	b007      	add	sp, #28
   1b5f6:	f85d fb04 	ldr.w	pc, [sp], #4
   1b5fa:	bf00      	nop
   1b5fc:	00029fe5 	.word	0x00029fe5

0001b600 <generic_hfclk_stop>:
{
   1b600:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b602:	f04f 0320 	mov.w	r3, #32
   1b606:	f3ef 8411 	mrs	r4, BASEPRI
   1b60a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b60e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1b612:	4a07      	ldr	r2, [pc, #28]	; (1b630 <generic_hfclk_stop+0x30>)
   1b614:	6813      	ldr	r3, [r2, #0]
   1b616:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1b61a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1b61c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1b61e:	d402      	bmi.n	1b626 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1b620:	2001      	movs	r0, #1
   1b622:	f003 f809 	bl	1e638 <nrfx_clock_stop>
	__asm__ volatile(
   1b626:	f384 8811 	msr	BASEPRI, r4
   1b62a:	f3bf 8f6f 	isb	sy
}
   1b62e:	bd10      	pop	{r4, pc}
   1b630:	2002194c 	.word	0x2002194c

0001b634 <z_nrf_clock_control_lf_on>:
{
   1b634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b638:	2201      	movs	r2, #1
   1b63a:	4606      	mov	r6, r0
   1b63c:	4941      	ldr	r1, [pc, #260]	; (1b744 <z_nrf_clock_control_lf_on+0x110>)
   1b63e:	e8d1 3fef 	ldaex	r3, [r1]
   1b642:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1b646:	2800      	cmp	r0, #0
   1b648:	d1f9      	bne.n	1b63e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1b64a:	b9a3      	cbnz	r3, 1b676 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1b64c:	493e      	ldr	r1, [pc, #248]	; (1b748 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1b64e:	483f      	ldr	r0, [pc, #252]	; (1b74c <z_nrf_clock_control_lf_on+0x118>)
   1b650:	604b      	str	r3, [r1, #4]
   1b652:	60cb      	str	r3, [r1, #12]
   1b654:	608a      	str	r2, [r1, #8]
   1b656:	f7f1 fb75 	bl	cd44 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1b65a:	2800      	cmp	r0, #0
   1b65c:	da0b      	bge.n	1b676 <z_nrf_clock_control_lf_on+0x42>
   1b65e:	493c      	ldr	r1, [pc, #240]	; (1b750 <z_nrf_clock_control_lf_on+0x11c>)
   1b660:	f44f 730c 	mov.w	r3, #560	; 0x230
   1b664:	4a3b      	ldr	r2, [pc, #236]	; (1b754 <z_nrf_clock_control_lf_on+0x120>)
   1b666:	483c      	ldr	r0, [pc, #240]	; (1b758 <z_nrf_clock_control_lf_on+0x124>)
   1b668:	f00b f95b 	bl	26922 <assert_print>
   1b66c:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1b670:	4838      	ldr	r0, [pc, #224]	; (1b754 <z_nrf_clock_control_lf_on+0x120>)
   1b672:	f00b f94f 	bl	26914 <assert_post_action>
	switch (start_mode) {
   1b676:	b35e      	cbz	r6, 1b6d0 <z_nrf_clock_control_lf_on+0x9c>
   1b678:	1e73      	subs	r3, r6, #1
   1b67a:	2b01      	cmp	r3, #1
   1b67c:	d858      	bhi.n	1b730 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1b67e:	2e01      	cmp	r6, #1
   1b680:	d106      	bne.n	1b690 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1b682:	4b36      	ldr	r3, [pc, #216]	; (1b75c <z_nrf_clock_control_lf_on+0x128>)
   1b684:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1b688:	f003 0303 	and.w	r3, r3, #3
   1b68c:	2b02      	cmp	r3, #2
   1b68e:	d01f      	beq.n	1b6d0 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b690:	f00f ff39 	bl	2b506 <k_is_in_isr>
   1b694:	4605      	mov	r5, r0
   1b696:	b9e8      	cbnz	r0, 1b6d4 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1b698:	4b31      	ldr	r3, [pc, #196]	; (1b760 <z_nrf_clock_control_lf_on+0x12c>)
   1b69a:	781b      	ldrb	r3, [r3, #0]
   1b69c:	b1d3      	cbz	r3, 1b6d4 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1b69e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1b6a0:	4607      	mov	r7, r0
   1b6a2:	4b2e      	ldr	r3, [pc, #184]	; (1b75c <z_nrf_clock_control_lf_on+0x128>)
   1b6a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1b6a8:	4c2c      	ldr	r4, [pc, #176]	; (1b75c <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b6aa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1b764 <z_nrf_clock_control_lf_on+0x130>
   1b6ae:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1b6b2:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1b6b6:	03d2      	lsls	r2, r2, #15
   1b6b8:	d516      	bpl.n	1b6e8 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1b6ba:	f003 0303 	and.w	r3, r3, #3
   1b6be:	2b02      	cmp	r3, #2
   1b6c0:	d001      	beq.n	1b6c6 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1b6c2:	2e01      	cmp	r6, #1
   1b6c4:	d110      	bne.n	1b6e8 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1b6c6:	b375      	cbz	r5, 1b726 <z_nrf_clock_control_lf_on+0xf2>
   1b6c8:	f387 8811 	msr	BASEPRI, r7
   1b6cc:	f3bf 8f6f 	isb	sy
}
   1b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b6d4:	f04f 0320 	mov.w	r3, #32
   1b6d8:	f3ef 8711 	mrs	r7, BASEPRI
   1b6dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1b6e0:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b6e4:	2501      	movs	r5, #1
   1b6e6:	e7df      	b.n	1b6a8 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1b6e8:	b1c5      	cbz	r5, 1b71c <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1b6ea:	4638      	mov	r0, r7
   1b6ec:	f7f4 ffa6 	bl	1063c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1b6f0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1b6f4:	b2db      	uxtb	r3, r3
   1b6f6:	2b01      	cmp	r3, #1
   1b6f8:	d1d9      	bne.n	1b6ae <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1b6fa:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1b6fe:	2a00      	cmp	r2, #0
   1b700:	d0d5      	beq.n	1b6ae <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b702:	2200      	movs	r2, #0
   1b704:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1b708:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1b70c:	2202      	movs	r2, #2
   1b70e:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1b712:	2220      	movs	r2, #32
   1b714:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b718:	60a3      	str	r3, [r4, #8]
}
   1b71a:	e7c8      	b.n	1b6ae <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1b71c:	2100      	movs	r1, #0
   1b71e:	2021      	movs	r0, #33	; 0x21
   1b720:	f007 ffca 	bl	236b8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b724:	e7e4      	b.n	1b6f0 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1b726:	2202      	movs	r2, #2
   1b728:	4b0c      	ldr	r3, [pc, #48]	; (1b75c <z_nrf_clock_control_lf_on+0x128>)
   1b72a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b72e:	e7cf      	b.n	1b6d0 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1b730:	490d      	ldr	r1, [pc, #52]	; (1b768 <z_nrf_clock_control_lf_on+0x134>)
   1b732:	f240 2342 	movw	r3, #578	; 0x242
   1b736:	4a07      	ldr	r2, [pc, #28]	; (1b754 <z_nrf_clock_control_lf_on+0x120>)
   1b738:	4807      	ldr	r0, [pc, #28]	; (1b758 <z_nrf_clock_control_lf_on+0x124>)
   1b73a:	f00b f8f2 	bl	26922 <assert_print>
   1b73e:	f240 2142 	movw	r1, #578	; 0x242
   1b742:	e795      	b.n	1b670 <z_nrf_clock_control_lf_on+0x3c>
   1b744:	20021898 	.word	0x20021898
   1b748:	20021888 	.word	0x20021888
   1b74c:	200218bc 	.word	0x200218bc
   1b750:	0002eb69 	.word	0x0002eb69
   1b754:	00031a99 	.word	0x00031a99
   1b758:	0002d881 	.word	0x0002d881
   1b75c:	40005000 	.word	0x40005000
   1b760:	200228ed 	.word	0x200228ed
   1b764:	e000e100 	.word	0xe000e100
   1b768:	000334e0 	.word	0x000334e0

0001b76c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1b76c:	b508      	push	{r3, lr}
   1b76e:	4807      	ldr	r0, [pc, #28]	; (1b78c <uart_console_init+0x20>)
   1b770:	f00f fe9c 	bl	2b4ac <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1b774:	b138      	cbz	r0, 1b786 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1b776:	4806      	ldr	r0, [pc, #24]	; (1b790 <uart_console_init+0x24>)
   1b778:	f7f5 ff2e 	bl	115d8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1b77c:	4804      	ldr	r0, [pc, #16]	; (1b790 <uart_console_init+0x24>)
   1b77e:	f7f0 ff5f 	bl	c640 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1b782:	2000      	movs	r0, #0
}
   1b784:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1b786:	f06f 0012 	mvn.w	r0, #18
   1b78a:	e7fb      	b.n	1b784 <uart_console_init+0x18>
   1b78c:	0002c2e0 	.word	0x0002c2e0
   1b790:	0001b795 	.word	0x0001b795

0001b794 <console_out>:
	if ('\n' == c) {
   1b794:	280a      	cmp	r0, #10
{
   1b796:	b538      	push	{r3, r4, r5, lr}
   1b798:	4604      	mov	r4, r0
   1b79a:	4d07      	ldr	r5, [pc, #28]	; (1b7b8 <console_out+0x24>)
	if ('\n' == c) {
   1b79c:	d104      	bne.n	1b7a8 <console_out+0x14>
	api->poll_out(dev, out_char);
   1b79e:	68ab      	ldr	r3, [r5, #8]
   1b7a0:	210d      	movs	r1, #13
   1b7a2:	4628      	mov	r0, r5
   1b7a4:	69db      	ldr	r3, [r3, #28]
   1b7a6:	4798      	blx	r3
   1b7a8:	68ab      	ldr	r3, [r5, #8]
   1b7aa:	4803      	ldr	r0, [pc, #12]	; (1b7b8 <console_out+0x24>)
   1b7ac:	69db      	ldr	r3, [r3, #28]
   1b7ae:	b2e1      	uxtb	r1, r4
   1b7b0:	4798      	blx	r3
}
   1b7b2:	4620      	mov	r0, r4
   1b7b4:	bd38      	pop	{r3, r4, r5, pc}
   1b7b6:	bf00      	nop
   1b7b8:	0002c2e0 	.word	0x0002c2e0

0001b7bc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1b7bc:	b510      	push	{r4, lr}
	return port->data;
   1b7be:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1b7c0:	b961      	cbnz	r1, 1b7dc <gpio_nrfx_manage_callback+0x20>
   1b7c2:	4920      	ldr	r1, [pc, #128]	; (1b844 <gpio_nrfx_manage_callback+0x88>)
   1b7c4:	232a      	movs	r3, #42	; 0x2a
   1b7c6:	4a20      	ldr	r2, [pc, #128]	; (1b848 <gpio_nrfx_manage_callback+0x8c>)
   1b7c8:	4820      	ldr	r0, [pc, #128]	; (1b84c <gpio_nrfx_manage_callback+0x90>)
   1b7ca:	f00b f8aa 	bl	26922 <assert_print>
   1b7ce:	4820      	ldr	r0, [pc, #128]	; (1b850 <gpio_nrfx_manage_callback+0x94>)
   1b7d0:	f00b f8a7 	bl	26922 <assert_print>
   1b7d4:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1b7d6:	481c      	ldr	r0, [pc, #112]	; (1b848 <gpio_nrfx_manage_callback+0x8c>)
   1b7d8:	f00b f89c 	bl	26914 <assert_post_action>
   1b7dc:	6848      	ldr	r0, [r1, #4]
   1b7de:	b950      	cbnz	r0, 1b7f6 <gpio_nrfx_manage_callback+0x3a>
   1b7e0:	491c      	ldr	r1, [pc, #112]	; (1b854 <gpio_nrfx_manage_callback+0x98>)
   1b7e2:	232b      	movs	r3, #43	; 0x2b
   1b7e4:	4a18      	ldr	r2, [pc, #96]	; (1b848 <gpio_nrfx_manage_callback+0x8c>)
   1b7e6:	4819      	ldr	r0, [pc, #100]	; (1b84c <gpio_nrfx_manage_callback+0x90>)
   1b7e8:	f00b f89b 	bl	26922 <assert_print>
   1b7ec:	481a      	ldr	r0, [pc, #104]	; (1b858 <gpio_nrfx_manage_callback+0x9c>)
   1b7ee:	f00b f898 	bl	26922 <assert_print>
   1b7f2:	212b      	movs	r1, #43	; 0x2b
   1b7f4:	e7ef      	b.n	1b7d6 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1b7f6:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1b7f8:	b1f8      	cbz	r0, 1b83a <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b7fa:	4288      	cmp	r0, r1
   1b7fc:	d119      	bne.n	1b832 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1b7fe:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1b800:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b802:	42a1      	cmp	r1, r4
	list->head = node;
   1b804:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b806:	d100      	bne.n	1b80a <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1b808:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1b80a:	2000      	movs	r0, #0
   1b80c:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1b80e:	b12a      	cbz	r2, 1b81c <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1b810:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b812:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b814:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1b816:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b818:	b902      	cbnz	r2, 1b81c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1b81a:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1b81c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b81e:	e010      	b.n	1b842 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b820:	4281      	cmp	r1, r0
   1b822:	d106      	bne.n	1b832 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1b824:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1b826:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b828:	6898      	ldr	r0, [r3, #8]
   1b82a:	4281      	cmp	r1, r0
   1b82c:	d1ed      	bne.n	1b80a <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1b82e:	609c      	str	r4, [r3, #8]
}
   1b830:	e7eb      	b.n	1b80a <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1b832:	4604      	mov	r4, r0
   1b834:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b836:	2800      	cmp	r0, #0
   1b838:	d1f2      	bne.n	1b820 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1b83a:	2a00      	cmp	r2, #0
   1b83c:	d1e8      	bne.n	1b810 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1b83e:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1b842:	bd10      	pop	{r4, pc}
   1b844:	0002df0d 	.word	0x0002df0d
   1b848:	00031b34 	.word	0x00031b34
   1b84c:	0002d881 	.word	0x0002d881
   1b850:	00031b70 	.word	0x00031b70
   1b854:	00031b7f 	.word	0x00031b7f
   1b858:	00031b91 	.word	0x00031b91

0001b85c <gpio_nrfx_pin_interrupt_configure>:
{
   1b85c:	b530      	push	{r4, r5, lr}
	return port->config;
   1b85e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b860:	f001 041f 	and.w	r4, r1, #31
   1b864:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1b866:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1b86a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b86c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1b870:	d105      	bne.n	1b87e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1b872:	4620      	mov	r0, r4
   1b874:	f003 fa2a 	bl	1eccc <nrfx_gpiote_trigger_disable>
		return 0;
   1b878:	2000      	movs	r0, #0
}
   1b87a:	b005      	add	sp, #20
   1b87c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b87e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b880:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b884:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b888:	d114      	bne.n	1b8b4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1b88a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b88e:	bf0c      	ite	eq
   1b890:	2304      	moveq	r3, #4
   1b892:	2305      	movne	r3, #5
   1b894:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b898:	2300      	movs	r3, #0
   1b89a:	4620      	mov	r0, r4
   1b89c:	4619      	mov	r1, r3
   1b89e:	aa02      	add	r2, sp, #8
   1b8a0:	f003 f81e 	bl	1e8e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b8a4:	4b2a      	ldr	r3, [pc, #168]	; (1b950 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1b8a6:	4298      	cmp	r0, r3
   1b8a8:	d14f      	bne.n	1b94a <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1b8aa:	2101      	movs	r1, #1
   1b8ac:	4620      	mov	r0, r4
   1b8ae:	f003 f9a3 	bl	1ebf8 <nrfx_gpiote_trigger_enable>
	return 0;
   1b8b2:	e7e1      	b.n	1b878 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b8b4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1b8b8:	d024      	beq.n	1b904 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1b8ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1b8be:	bf14      	ite	ne
   1b8c0:	2301      	movne	r3, #1
   1b8c2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b8c4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1b8c8:	6883      	ldr	r3, [r0, #8]
   1b8ca:	40cb      	lsrs	r3, r1
   1b8cc:	07d8      	lsls	r0, r3, #31
   1b8ce:	d4e3      	bmi.n	1b898 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1b8d0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1b8d4:	d1e0      	bne.n	1b898 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1b8d6:	0962      	lsrs	r2, r4, #5
   1b8d8:	f004 031f 	and.w	r3, r4, #31
   1b8dc:	d014      	beq.n	1b908 <gpio_nrfx_pin_interrupt_configure+0xac>
   1b8de:	2a01      	cmp	r2, #1
   1b8e0:	d104      	bne.n	1b8ec <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1b8e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b8e6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b8e8:	07d1      	lsls	r1, r2, #31
   1b8ea:	d414      	bmi.n	1b916 <gpio_nrfx_pin_interrupt_configure+0xba>
   1b8ec:	4919      	ldr	r1, [pc, #100]	; (1b954 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1b8ee:	481a      	ldr	r0, [pc, #104]	; (1b958 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1b8f0:	f240 2347 	movw	r3, #583	; 0x247
   1b8f4:	4a19      	ldr	r2, [pc, #100]	; (1b95c <gpio_nrfx_pin_interrupt_configure+0x100>)
   1b8f6:	f00b f814 	bl	26922 <assert_print>
   1b8fa:	f240 2147 	movw	r1, #583	; 0x247
   1b8fe:	4817      	ldr	r0, [pc, #92]	; (1b95c <gpio_nrfx_pin_interrupt_configure+0x100>)
   1b900:	f00b f808 	bl	26914 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b904:	2303      	movs	r3, #3
   1b906:	e7dd      	b.n	1b8c4 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1b908:	f04f 32ff 	mov.w	r2, #4294967295
   1b90c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b90e:	07d2      	lsls	r2, r2, #31
   1b910:	d5ec      	bpl.n	1b8ec <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1b912:	4a13      	ldr	r2, [pc, #76]	; (1b960 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1b914:	e000      	b.n	1b918 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1b916:	4a13      	ldr	r2, [pc, #76]	; (1b964 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b918:	3380      	adds	r3, #128	; 0x80
   1b91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1b91e:	07db      	lsls	r3, r3, #31
   1b920:	d4ba      	bmi.n	1b898 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b922:	f10d 0507 	add.w	r5, sp, #7
   1b926:	4629      	mov	r1, r5
   1b928:	4620      	mov	r0, r4
   1b92a:	f003 f8ff 	bl	1eb2c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1b92e:	4b0e      	ldr	r3, [pc, #56]	; (1b968 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1b930:	4298      	cmp	r0, r3
   1b932:	d001      	beq.n	1b938 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1b934:	9503      	str	r5, [sp, #12]
   1b936:	e7af      	b.n	1b898 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1b938:	4628      	mov	r0, r5
   1b93a:	f003 f957 	bl	1ebec <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1b93e:	4b04      	ldr	r3, [pc, #16]	; (1b950 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1b940:	4298      	cmp	r0, r3
   1b942:	d0f7      	beq.n	1b934 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1b944:	f06f 000b 	mvn.w	r0, #11
   1b948:	e797      	b.n	1b87a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1b94a:	f06f 0015 	mvn.w	r0, #21
   1b94e:	e794      	b.n	1b87a <gpio_nrfx_pin_interrupt_configure+0x1e>
   1b950:	0bad0000 	.word	0x0bad0000
   1b954:	00031bdb 	.word	0x00031bdb
   1b958:	0002d881 	.word	0x0002d881
   1b95c:	00031ba8 	.word	0x00031ba8
   1b960:	40842500 	.word	0x40842500
   1b964:	40842800 	.word	0x40842800
   1b968:	0bad0004 	.word	0x0bad0004

0001b96c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1b96c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1b96e:	f003 f92d 	bl	1ebcc <nrfx_gpiote_is_init>
   1b972:	4604      	mov	r4, r0
   1b974:	b968      	cbnz	r0, 1b992 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1b976:	f003 f901 	bl	1eb7c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1b97a:	4b08      	ldr	r3, [pc, #32]	; (1b99c <gpio_nrfx_init+0x30>)
   1b97c:	4298      	cmp	r0, r3
   1b97e:	d10a      	bne.n	1b996 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1b980:	4621      	mov	r1, r4
   1b982:	4807      	ldr	r0, [pc, #28]	; (1b9a0 <gpio_nrfx_init+0x34>)
   1b984:	f003 f8cc 	bl	1eb20 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1b988:	4622      	mov	r2, r4
   1b98a:	2105      	movs	r1, #5
   1b98c:	202f      	movs	r0, #47	; 0x2f
   1b98e:	f7f4 fef5 	bl	1077c <z_arm_irq_priority_set>
		return 0;
   1b992:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1b994:	bd10      	pop	{r4, pc}
		return -EIO;
   1b996:	f06f 0004 	mvn.w	r0, #4
   1b99a:	e7fb      	b.n	1b994 <gpio_nrfx_init+0x28>
   1b99c:	0bad0000 	.word	0x0bad0000
   1b9a0:	0001b9a5 	.word	0x0001b9a5

0001b9a4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b9a4:	0942      	lsrs	r2, r0, #5
{
   1b9a6:	4603      	mov	r3, r0
   1b9a8:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b9aa:	d002      	beq.n	1b9b2 <nrfx_gpio_handler+0xe>
   1b9ac:	2a01      	cmp	r2, #1
   1b9ae:	d01e      	beq.n	1b9ee <nrfx_gpio_handler+0x4a>
}
   1b9b0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b9b2:	4e14      	ldr	r6, [pc, #80]	; (1ba04 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1b9b4:	6932      	ldr	r2, [r6, #16]
   1b9b6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b9b8:	2900      	cmp	r1, #0
   1b9ba:	d0f9      	beq.n	1b9b0 <nrfx_gpio_handler+0xc>
   1b9bc:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1b9be:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1b9c2:	680c      	ldr	r4, [r1, #0]
   1b9c4:	409d      	lsls	r5, r3
   1b9c6:	2900      	cmp	r1, #0
   1b9c8:	d0f2      	beq.n	1b9b0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1b9ca:	688a      	ldr	r2, [r1, #8]
   1b9cc:	402a      	ands	r2, r5
   1b9ce:	d012      	beq.n	1b9f6 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1b9d0:	684b      	ldr	r3, [r1, #4]
   1b9d2:	b973      	cbnz	r3, 1b9f2 <nrfx_gpio_handler+0x4e>
   1b9d4:	490c      	ldr	r1, [pc, #48]	; (1ba08 <nrfx_gpio_handler+0x64>)
   1b9d6:	234d      	movs	r3, #77	; 0x4d
   1b9d8:	4a0c      	ldr	r2, [pc, #48]	; (1ba0c <nrfx_gpio_handler+0x68>)
   1b9da:	480d      	ldr	r0, [pc, #52]	; (1ba10 <nrfx_gpio_handler+0x6c>)
   1b9dc:	f00a ffa1 	bl	26922 <assert_print>
   1b9e0:	480c      	ldr	r0, [pc, #48]	; (1ba14 <nrfx_gpio_handler+0x70>)
   1b9e2:	f00a ff9e 	bl	26922 <assert_print>
   1b9e6:	214d      	movs	r1, #77	; 0x4d
   1b9e8:	4808      	ldr	r0, [pc, #32]	; (1ba0c <nrfx_gpio_handler+0x68>)
   1b9ea:	f00a ff93 	bl	26914 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b9ee:	4e0a      	ldr	r6, [pc, #40]	; (1ba18 <nrfx_gpio_handler+0x74>)
   1b9f0:	e7e0      	b.n	1b9b4 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1b9f2:	4630      	mov	r0, r6
   1b9f4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b9f6:	b11c      	cbz	r4, 1ba00 <nrfx_gpio_handler+0x5c>
   1b9f8:	6823      	ldr	r3, [r4, #0]
   1b9fa:	4621      	mov	r1, r4
   1b9fc:	461c      	mov	r4, r3
   1b9fe:	e7e2      	b.n	1b9c6 <nrfx_gpio_handler+0x22>
   1ba00:	4623      	mov	r3, r4
   1ba02:	e7fa      	b.n	1b9fa <nrfx_gpio_handler+0x56>
   1ba04:	0002c298 	.word	0x0002c298
   1ba08:	000328fc 	.word	0x000328fc
   1ba0c:	00031b34 	.word	0x00031b34
   1ba10:	0002d881 	.word	0x0002d881
   1ba14:	00031b91 	.word	0x00031b91
   1ba18:	0002c280 	.word	0x0002c280

0001ba1c <gpio_nrfx_pin_configure>:
{
   1ba1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1ba20:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ba24:	f001 051f 	and.w	r5, r1, #31
   1ba28:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1ba2c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ba2e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1ba32:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ba34:	4628      	mov	r0, r5
   1ba36:	f10d 0103 	add.w	r1, sp, #3
   1ba3a:	f003 f877 	bl	1eb2c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ba3e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ba42:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ba44:	d115      	bne.n	1ba72 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1ba46:	4628      	mov	r0, r5
   1ba48:	f003 f96a 	bl	1ed20 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1ba4c:	4b48      	ldr	r3, [pc, #288]	; (1bb70 <gpio_nrfx_pin_configure+0x154>)
   1ba4e:	429e      	cmp	r6, r3
   1ba50:	d170      	bne.n	1bb34 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1ba52:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ba56:	f003 f8c3 	bl	1ebe0 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1ba5a:	42b0      	cmp	r0, r6
   1ba5c:	d06a      	beq.n	1bb34 <gpio_nrfx_pin_configure+0x118>
   1ba5e:	4945      	ldr	r1, [pc, #276]	; (1bb74 <gpio_nrfx_pin_configure+0x158>)
   1ba60:	236a      	movs	r3, #106	; 0x6a
   1ba62:	4a45      	ldr	r2, [pc, #276]	; (1bb78 <gpio_nrfx_pin_configure+0x15c>)
   1ba64:	4845      	ldr	r0, [pc, #276]	; (1bb7c <gpio_nrfx_pin_configure+0x160>)
   1ba66:	f00a ff5c 	bl	26922 <assert_print>
   1ba6a:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1ba6c:	4842      	ldr	r0, [pc, #264]	; (1bb78 <gpio_nrfx_pin_configure+0x15c>)
   1ba6e:	f00a ff51 	bl	26914 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ba72:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ba74:	4628      	mov	r0, r5
   1ba76:	4619      	mov	r1, r3
   1ba78:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ba7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ba7e:	f002 ff2f 	bl	1e8e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1ba82:	4b3b      	ldr	r3, [pc, #236]	; (1bb70 <gpio_nrfx_pin_configure+0x154>)
   1ba84:	4298      	cmp	r0, r3
   1ba86:	d004      	beq.n	1ba92 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1ba88:	f06f 0015 	mvn.w	r0, #21
}
   1ba8c:	b004      	add	sp, #16
   1ba8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1ba92:	4286      	cmp	r6, r0
   1ba94:	d10d      	bne.n	1bab2 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1ba96:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ba9a:	f003 f8a1 	bl	1ebe0 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1ba9e:	42b0      	cmp	r0, r6
   1baa0:	d007      	beq.n	1bab2 <gpio_nrfx_pin_configure+0x96>
   1baa2:	4934      	ldr	r1, [pc, #208]	; (1bb74 <gpio_nrfx_pin_configure+0x158>)
   1baa4:	237c      	movs	r3, #124	; 0x7c
   1baa6:	4a34      	ldr	r2, [pc, #208]	; (1bb78 <gpio_nrfx_pin_configure+0x15c>)
   1baa8:	4834      	ldr	r0, [pc, #208]	; (1bb7c <gpio_nrfx_pin_configure+0x160>)
   1baaa:	f00a ff3a 	bl	26922 <assert_print>
   1baae:	217c      	movs	r1, #124	; 0x7c
   1bab0:	e7dc      	b.n	1ba6c <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1bab2:	03a6      	lsls	r6, r4, #14
   1bab4:	d54c      	bpl.n	1bb50 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bab6:	f240 3306 	movw	r3, #774	; 0x306
   1baba:	4023      	ands	r3, r4
   1babc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1bac0:	d019      	beq.n	1baf6 <gpio_nrfx_pin_configure+0xda>
   1bac2:	d80c      	bhi.n	1bade <gpio_nrfx_pin_configure+0xc2>
   1bac4:	2b06      	cmp	r3, #6
   1bac6:	d017      	beq.n	1baf8 <gpio_nrfx_pin_configure+0xdc>
   1bac8:	d804      	bhi.n	1bad4 <gpio_nrfx_pin_configure+0xb8>
   1baca:	b1ab      	cbz	r3, 1baf8 <gpio_nrfx_pin_configure+0xdc>
   1bacc:	2b02      	cmp	r3, #2
   1bace:	d1db      	bne.n	1ba88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1bad0:	2304      	movs	r3, #4
   1bad2:	e011      	b.n	1baf8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1bad8:	d1d6      	bne.n	1ba88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1bada:	2301      	movs	r3, #1
   1badc:	e00c      	b.n	1baf8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bade:	f240 2202 	movw	r2, #514	; 0x202
   1bae2:	4293      	cmp	r3, r2
   1bae4:	d028      	beq.n	1bb38 <gpio_nrfx_pin_configure+0x11c>
   1bae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1baea:	d027      	beq.n	1bb3c <gpio_nrfx_pin_configure+0x120>
   1baec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1baf0:	d1ca      	bne.n	1ba88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1baf2:	2302      	movs	r3, #2
   1baf4:	e000      	b.n	1baf8 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1baf6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1baf8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1bafc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1bb00:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1bb04:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1bb06:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1bb0a:	bf4c      	ite	mi
   1bb0c:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1bb0e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1bb12:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1bb14:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1bb18:	d512      	bpl.n	1bb40 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1bb1a:	2301      	movs	r3, #1
   1bb1c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1bb20:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1bb22:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1bb24:	2200      	movs	r2, #0
   1bb26:	4628      	mov	r0, r5
   1bb28:	a901      	add	r1, sp, #4
   1bb2a:	f002 ff81 	bl	1ea30 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1bb2e:	4b10      	ldr	r3, [pc, #64]	; (1bb70 <gpio_nrfx_pin_configure+0x154>)
   1bb30:	4298      	cmp	r0, r3
   1bb32:	d1a9      	bne.n	1ba88 <gpio_nrfx_pin_configure+0x6c>
   1bb34:	2000      	movs	r0, #0
   1bb36:	e7a9      	b.n	1ba8c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1bb38:	2305      	movs	r3, #5
   1bb3a:	e7dd      	b.n	1baf8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bb3c:	2303      	movs	r3, #3
   1bb3e:	e7db      	b.n	1baf8 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1bb40:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1bb42:	bf41      	itttt	mi
   1bb44:	2301      	movmi	r3, #1
   1bb46:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1bb4a:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1bb4c:	60d3      	strmi	r3, [r2, #12]
}
   1bb4e:	e7e9      	b.n	1bb24 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1bb50:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bb52:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1bb56:	bf4c      	ite	mi
   1bb58:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1bb5a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bb5e:	461a      	mov	r2, r3
   1bb60:	4628      	mov	r0, r5
   1bb62:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1bb64:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bb68:	f002 feba 	bl	1e8e0 <nrfx_gpiote_input_configure>
   1bb6c:	e7df      	b.n	1bb2e <gpio_nrfx_pin_configure+0x112>
   1bb6e:	bf00      	nop
   1bb70:	0bad0000 	.word	0x0bad0000
   1bb74:	0002e888 	.word	0x0002e888
   1bb78:	00031bfe 	.word	0x00031bfe
   1bb7c:	0002d881 	.word	0x0002d881

0001bb80 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1bb80:	4603      	mov	r3, r0
   1bb82:	b510      	push	{r4, lr}
   1bb84:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bb86:	7919      	ldrb	r1, [r3, #4]
   1bb88:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1bb8a:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bb8c:	fa03 f101 	lsl.w	r1, r3, r1
   1bb90:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1bb92:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bb94:	681b      	ldr	r3, [r3, #0]
   1bb96:	4219      	tst	r1, r3
   1bb98:	d10e      	bne.n	1bbb8 <gpio_pin_set_dt.isra.0+0x38>
   1bb9a:	490e      	ldr	r1, [pc, #56]	; (1bbd4 <gpio_pin_set_dt.isra.0+0x54>)
   1bb9c:	f240 533d 	movw	r3, #1341	; 0x53d
   1bba0:	4a0d      	ldr	r2, [pc, #52]	; (1bbd8 <gpio_pin_set_dt.isra.0+0x58>)
   1bba2:	480e      	ldr	r0, [pc, #56]	; (1bbdc <gpio_pin_set_dt.isra.0+0x5c>)
   1bba4:	f00a febd 	bl	26922 <assert_print>
   1bba8:	480d      	ldr	r0, [pc, #52]	; (1bbe0 <gpio_pin_set_dt.isra.0+0x60>)
   1bbaa:	f00a feba 	bl	26922 <assert_print>
   1bbae:	f240 513d 	movw	r1, #1341	; 0x53d
   1bbb2:	4809      	ldr	r0, [pc, #36]	; (1bbd8 <gpio_pin_set_dt.isra.0+0x58>)
   1bbb4:	f00a feae 	bl	26914 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1bbb8:	6823      	ldr	r3, [r4, #0]
   1bbba:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1bbbc:	bf18      	it	ne
   1bbbe:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1bbc2:	b122      	cbz	r2, 1bbce <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1bbc4:	6883      	ldr	r3, [r0, #8]
   1bbc6:	68db      	ldr	r3, [r3, #12]
}
   1bbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1bbcc:	4718      	bx	r3
   1bbce:	6883      	ldr	r3, [r0, #8]
   1bbd0:	691b      	ldr	r3, [r3, #16]
   1bbd2:	e7f9      	b.n	1bbc8 <gpio_pin_set_dt.isra.0+0x48>
   1bbd4:	0002d843 	.word	0x0002d843
   1bbd8:	0002d812 	.word	0x0002d812
   1bbdc:	0002d881 	.word	0x0002d881
   1bbe0:	0002d89e 	.word	0x0002d89e

0001bbe4 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1bbe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bbe8:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1bbea:	6844      	ldr	r4, [r0, #4]
{
   1bbec:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1bbee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1bbf0:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1bbf2:	2100      	movs	r1, #0
   1bbf4:	4630      	mov	r0, r6
   1bbf6:	1d3a      	adds	r2, r7, #4
   1bbf8:	f00e fd5c 	bl	2a6b4 <pinctrl_lookup_state>
	if (ret < 0) {
   1bbfc:	2800      	cmp	r0, #0
   1bbfe:	db32      	blt.n	1bc66 <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1bc00:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1bc02:	6832      	ldr	r2, [r6, #0]
   1bc04:	7919      	ldrb	r1, [r3, #4]
   1bc06:	6818      	ldr	r0, [r3, #0]
   1bc08:	f00e fd67 	bl	2a6da <pinctrl_configure_pins>
	if (err < 0) {
   1bc0c:	2800      	cmp	r0, #0
   1bc0e:	db2a      	blt.n	1bc66 <spi_nrfx_init+0x82>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bc10:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1bc12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bc14:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1bc16:	68ac      	ldr	r4, [r5, #8]
   1bc18:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1bc1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1bc20:	429c      	cmp	r4, r3
   1bc22:	d304      	bcc.n	1bc2e <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1bc24:	4628      	mov	r0, r5
   1bc26:	f00e fa44 	bl	2a0b2 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1bc2a:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1bc2c:	e01b      	b.n	1bc66 <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1bc2e:	6820      	ldr	r0, [r4, #0]
   1bc30:	f00f fc3c 	bl	2b4ac <z_device_is_ready>
   1bc34:	b9d8      	cbnz	r0, 1bc6e <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1bc36:	6823      	ldr	r3, [r4, #0]
   1bc38:	6819      	ldr	r1, [r3, #0]
   1bc3a:	7923      	ldrb	r3, [r4, #4]
   1bc3c:	466c      	mov	r4, sp
   1bc3e:	b08a      	sub	sp, #40	; 0x28
   1bc40:	466a      	mov	r2, sp
   1bc42:	61d3      	str	r3, [r2, #28]
   1bc44:	f44f 7300 	mov.w	r3, #512	; 0x200
   1bc48:	4833      	ldr	r0, [pc, #204]	; (1bd18 <spi_nrfx_init+0x134>)
   1bc4a:	8413      	strh	r3, [r2, #32]
   1bc4c:	4b33      	ldr	r3, [pc, #204]	; (1bd1c <spi_nrfx_init+0x138>)
   1bc4e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1bc52:	4833      	ldr	r0, [pc, #204]	; (1bd20 <spi_nrfx_init+0x13c>)
   1bc54:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1bc58:	f842 3f10 	str.w	r3, [r2, #16]!
   1bc5c:	f00e fa04 	bl	2a068 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1bc60:	f06f 0012 	mvn.w	r0, #18
   1bc64:	46a5      	mov	sp, r4
#endif
}
   1bc66:	370c      	adds	r7, #12
   1bc68:	46bd      	mov	sp, r7
   1bc6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1bc6e:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1bc70:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1bc72:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1bc74:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1bc78:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1bc7a:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1bc7e:	e9d0 c901 	ldrd	ip, r9, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1bc82:	d10e      	bne.n	1bca2 <spi_nrfx_init+0xbe>
   1bc84:	4927      	ldr	r1, [pc, #156]	; (1bd24 <spi_nrfx_init+0x140>)
   1bc86:	f240 23b7 	movw	r3, #695	; 0x2b7
   1bc8a:	4a27      	ldr	r2, [pc, #156]	; (1bd28 <spi_nrfx_init+0x144>)
   1bc8c:	4827      	ldr	r0, [pc, #156]	; (1bd2c <spi_nrfx_init+0x148>)
   1bc8e:	f00a fe48 	bl	26922 <assert_print>
   1bc92:	4827      	ldr	r0, [pc, #156]	; (1bd30 <spi_nrfx_init+0x14c>)
   1bc94:	f00a fe45 	bl	26922 <assert_print>
   1bc98:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1bc9c:	4822      	ldr	r0, [pc, #136]	; (1bd28 <spi_nrfx_init+0x144>)
   1bc9e:	f00a fe39 	bl	26914 <assert_post_action>
   1bca2:	f003 0206 	and.w	r2, r3, #6
   1bca6:	2a04      	cmp	r2, #4
   1bca8:	d109      	bne.n	1bcbe <spi_nrfx_init+0xda>
   1bcaa:	4922      	ldr	r1, [pc, #136]	; (1bd34 <spi_nrfx_init+0x150>)
   1bcac:	f240 23bf 	movw	r3, #703	; 0x2bf
   1bcb0:	4a1d      	ldr	r2, [pc, #116]	; (1bd28 <spi_nrfx_init+0x144>)
   1bcb2:	481e      	ldr	r0, [pc, #120]	; (1bd2c <spi_nrfx_init+0x148>)
   1bcb4:	f00a fe35 	bl	26922 <assert_print>
   1bcb8:	f240 21bf 	movw	r1, #703	; 0x2bf
   1bcbc:	e7ee      	b.n	1bc9c <spi_nrfx_init+0xb8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bcbe:	f8dc c000 	ldr.w	ip, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1bcc2:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bcc4:	fa06 fe01 	lsl.w	lr, r6, r1
	return gpio_pin_configure(spec->port,
   1bcc8:	bf54      	ite	pl
   1bcca:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1bcce:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bcd2:	ea1e 0f0c 	tst.w	lr, ip
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1bcd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1bcda:	d10c      	bne.n	1bcf6 <spi_nrfx_init+0x112>
   1bcdc:	4916      	ldr	r1, [pc, #88]	; (1bd38 <spi_nrfx_init+0x154>)
   1bcde:	f240 23d2 	movw	r3, #722	; 0x2d2
   1bce2:	4a11      	ldr	r2, [pc, #68]	; (1bd28 <spi_nrfx_init+0x144>)
   1bce4:	4811      	ldr	r0, [pc, #68]	; (1bd2c <spi_nrfx_init+0x148>)
   1bce6:	f00a fe1c 	bl	26922 <assert_print>
   1bcea:	4814      	ldr	r0, [pc, #80]	; (1bd3c <spi_nrfx_init+0x158>)
   1bcec:	f00a fe19 	bl	26922 <assert_print>
   1bcf0:	f240 21d2 	movw	r1, #722	; 0x2d2
   1bcf4:	e7d2      	b.n	1bc9c <spi_nrfx_init+0xb8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1bcf6:	f8d8 c000 	ldr.w	ip, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1bcfa:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1bcfc:	bf4c      	ite	mi
   1bcfe:	ea4c 030e 	orrmi.w	r3, ip, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1bd02:	ea2c 030e 	bicpl.w	r3, ip, lr
   1bd06:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
   1bd0a:	f8d9 3000 	ldr.w	r3, [r9]
   1bd0e:	4798      	blx	r3
		if (ret < 0) {
   1bd10:	2800      	cmp	r0, #0
   1bd12:	dba8      	blt.n	1bc66 <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1bd14:	3408      	adds	r4, #8
   1bd16:	e77f      	b.n	1bc18 <spi_nrfx_init+0x34>
   1bd18:	00031c42 	.word	0x00031c42
   1bd1c:	01000004 	.word	0x01000004
   1bd20:	0002c8fc 	.word	0x0002c8fc
   1bd24:	0002daef 	.word	0x0002daef
   1bd28:	0002d812 	.word	0x0002d812
   1bd2c:	0002d881 	.word	0x0002d881
   1bd30:	0002db28 	.word	0x0002db28
   1bd34:	0002dbec 	.word	0x0002dbec
   1bd38:	0002d843 	.word	0x0002d843
   1bd3c:	0002d89e 	.word	0x0002d89e

0001bd40 <transfer_next_chunk>:
{
   1bd40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1bd42:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1bd44:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1bd46:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1bd48:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1bd4a:	b98d      	cbnz	r5, 1bd70 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1bd4c:	2b00      	cmp	r3, #0
   1bd4e:	d137      	bne.n	1bdc0 <transfer_next_chunk+0x80>
	int error = 0;
   1bd50:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1bd52:	2200      	movs	r2, #0
   1bd54:	4620      	mov	r0, r4
   1bd56:	4611      	mov	r1, r2
   1bd58:	f00e f989 	bl	2a06e <_spi_context_cs_control>
	ctx->sync_status = status;
   1bd5c:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1bd5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1bd62:	f005 fdb5 	bl	218d0 <z_impl_k_sem_give>
	dev_data->busy = false;
   1bd66:	2300      	movs	r3, #0
   1bd68:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1bd6c:	b004      	add	sp, #16
   1bd6e:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1bd70:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1bd72:	bb0b      	cbnz	r3, 1bdb8 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1bd74:	bb39      	cbnz	r1, 1bdc6 <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1bd76:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bd7a:	42aa      	cmp	r2, r5
   1bd7c:	bf28      	it	cs
   1bd7e:	462a      	movcs	r2, r5
   1bd80:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1bd82:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1bd84:	9100      	str	r1, [sp, #0]
   1bd86:	b11b      	cbz	r3, 1bd90 <transfer_next_chunk+0x50>
   1bd88:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1bd8a:	2b00      	cmp	r3, #0
   1bd8c:	bf18      	it	ne
   1bd8e:	4613      	movne	r3, r2
   1bd90:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1bd92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1bd94:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1bd96:	b11b      	cbz	r3, 1bda0 <transfer_next_chunk+0x60>
   1bd98:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1bd9a:	2b00      	cmp	r3, #0
   1bd9c:	bf18      	it	ne
   1bd9e:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1bda0:	2200      	movs	r2, #0
   1bda2:	4669      	mov	r1, sp
   1bda4:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1bda6:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1bda8:	f003 ff5e 	bl	1fc68 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1bdac:	4b0d      	ldr	r3, [pc, #52]	; (1bde4 <transfer_next_chunk+0xa4>)
   1bdae:	4298      	cmp	r0, r3
   1bdb0:	d0dc      	beq.n	1bd6c <transfer_next_chunk+0x2c>
			error = -EIO;
   1bdb2:	f06f 0504 	mvn.w	r5, #4
   1bdb6:	e7cc      	b.n	1bd52 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1bdb8:	429d      	cmp	r5, r3
   1bdba:	bf28      	it	cs
   1bdbc:	461d      	movcs	r5, r3
   1bdbe:	e7d9      	b.n	1bd74 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1bdc0:	461d      	mov	r5, r3
   1bdc2:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1bdc4:	e7d7      	b.n	1bd76 <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1bdc6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1bdca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1bdce:	d0d2      	beq.n	1bd76 <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1bdd0:	2d08      	cmp	r5, #8
   1bdd2:	bf28      	it	cs
   1bdd4:	2508      	movcs	r5, #8
   1bdd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1bdd8:	462a      	mov	r2, r5
   1bdda:	f00f fda7 	bl	2b92c <memcpy>
			tx_buf = dev_data->buffer;
   1bdde:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1bde0:	e7c9      	b.n	1bd76 <transfer_next_chunk+0x36>
   1bde2:	bf00      	nop
   1bde4:	0bad0000 	.word	0x0bad0000

0001bde8 <event_handler>:
{
   1bde8:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1bdea:	7803      	ldrb	r3, [r0, #0]
{
   1bdec:	460c      	mov	r4, r1
   1bdee:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1bdf0:	2b00      	cmp	r3, #0
   1bdf2:	d154      	bne.n	1be9e <event_handler+0xb6>
	if (!ctx->tx_len) {
   1bdf4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1bdf6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1bdf8:	b15b      	cbz	r3, 1be12 <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1bdfa:	429a      	cmp	r2, r3
   1bdfc:	d91e      	bls.n	1be3c <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1bdfe:	4b29      	ldr	r3, [pc, #164]	; (1bea4 <event_handler+0xbc>)
   1be00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1be04:	9305      	str	r3, [sp, #20]
   1be06:	2302      	movs	r3, #2
   1be08:	4827      	ldr	r0, [pc, #156]	; (1bea8 <event_handler+0xc0>)
   1be0a:	aa04      	add	r2, sp, #16
   1be0c:	9304      	str	r3, [sp, #16]
   1be0e:	f00e f92b 	bl	2a068 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1be12:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1be14:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1be16:	b15b      	cbz	r3, 1be30 <event_handler+0x48>
	if (len > ctx->rx_len) {
   1be18:	429a      	cmp	r2, r3
   1be1a:	d927      	bls.n	1be6c <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1be1c:	4b21      	ldr	r3, [pc, #132]	; (1bea4 <event_handler+0xbc>)
   1be1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1be22:	9305      	str	r3, [sp, #20]
   1be24:	2302      	movs	r3, #2
   1be26:	4820      	ldr	r0, [pc, #128]	; (1bea8 <event_handler+0xc0>)
   1be28:	aa04      	add	r2, sp, #16
   1be2a:	9304      	str	r3, [sp, #16]
   1be2c:	f00e f91c 	bl	2a068 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1be30:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1be32:	b006      	add	sp, #24
   1be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1be38:	f7ff bf82 	b.w	1bd40 <transfer_next_chunk>
	ctx->tx_len -= len;
   1be3c:	1a9b      	subs	r3, r3, r2
   1be3e:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1be40:	b973      	cbnz	r3, 1be60 <event_handler+0x78>
		++ctx->current_tx;
   1be42:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1be44:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1be48:	3308      	adds	r3, #8
   1be4a:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1be4c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1be4e:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1be52:	3b01      	subs	r3, #1
   1be54:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1be56:	3148      	adds	r1, #72	; 0x48
   1be58:	f00e f8f3 	bl	2a042 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1be5c:	6560      	str	r0, [r4, #84]	; 0x54
   1be5e:	e7d8      	b.n	1be12 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1be60:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1be62:	2b00      	cmp	r3, #0
   1be64:	d0d5      	beq.n	1be12 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1be66:	4413      	add	r3, r2
   1be68:	654b      	str	r3, [r1, #84]	; 0x54
   1be6a:	e7d2      	b.n	1be12 <event_handler+0x2a>
	ctx->rx_len -= len;
   1be6c:	1a9b      	subs	r3, r3, r2
   1be6e:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1be70:	b97b      	cbnz	r3, 1be92 <event_handler+0xaa>
		++ctx->current_rx;
   1be72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1be74:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1be78:	3308      	adds	r3, #8
   1be7a:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1be7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1be7e:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1be82:	3b01      	subs	r3, #1
   1be84:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1be86:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1be8a:	f00e f8da 	bl	2a042 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1be8e:	65e0      	str	r0, [r4, #92]	; 0x5c
   1be90:	e7ce      	b.n	1be30 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1be92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1be94:	2b00      	cmp	r3, #0
   1be96:	d0cb      	beq.n	1be30 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1be98:	4413      	add	r3, r2
   1be9a:	65e3      	str	r3, [r4, #92]	; 0x5c
   1be9c:	e7c8      	b.n	1be30 <event_handler+0x48>
}
   1be9e:	b006      	add	sp, #24
   1bea0:	bd10      	pop	{r4, pc}
   1bea2:	bf00      	nop
   1bea4:	00031c66 	.word	0x00031c66
   1bea8:	0002c8fc 	.word	0x0002c8fc

0001beac <spi_nrfx_transceive>:
{
   1beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1beb0:	b08b      	sub	sp, #44	; 0x2c
   1beb2:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1beb4:	888b      	ldrh	r3, [r1, #4]
   1beb6:	af00      	add	r7, sp, #0
   1beb8:	049b      	lsls	r3, r3, #18
   1beba:	4680      	mov	r8, r0
   1bebc:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1bebe:	6904      	ldr	r4, [r0, #16]
{
   1bec0:	60ba      	str	r2, [r7, #8]
   1bec2:	d438      	bmi.n	1bf36 <spi_nrfx_transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   1bec4:	f04f 32ff 	mov.w	r2, #4294967295
   1bec8:	f04f 33ff 	mov.w	r3, #4294967295
   1becc:	f104 0010 	add.w	r0, r4, #16
   1bed0:	f005 fd42 	bl	21958 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1bed4:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1bed6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1beda:	f8d8 9010 	ldr.w	r9, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1bede:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1bee0:	60fb      	str	r3, [r7, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1bee2:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1bee6:	607b      	str	r3, [r7, #4]
   1bee8:	b123      	cbz	r3, 1bef4 <spi_nrfx_transceive+0x48>
   1beea:	f8d9 3000 	ldr.w	r3, [r9]
   1beee:	429e      	cmp	r6, r3
   1bef0:	f000 80e8 	beq.w	1c0c4 <spi_nrfx_transceive+0x218>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1bef4:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1bef8:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1befc:	d022      	beq.n	1bf44 <spi_nrfx_transceive+0x98>
		LOG_ERR("Half-duplex not supported");
   1befe:	4ba8      	ldr	r3, [pc, #672]	; (1c1a0 <spi_nrfx_transceive+0x2f4>)
		return -ENOTSUP;
   1bf00:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1bf04:	627b      	str	r3, [r7, #36]	; 0x24
   1bf06:	2302      	movs	r3, #2
   1bf08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bf0c:	48a5      	ldr	r0, [pc, #660]	; (1c1a4 <spi_nrfx_transceive+0x2f8>)
   1bf0e:	623b      	str	r3, [r7, #32]
   1bf10:	f107 0220 	add.w	r2, r7, #32
   1bf14:	f00e f8a8 	bl	2a068 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1bf18:	6823      	ldr	r3, [r4, #0]
   1bf1a:	889b      	ldrh	r3, [r3, #4]
   1bf1c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1bf20:	d104      	bne.n	1bf2c <spi_nrfx_transceive+0x80>
		ctx->owner = NULL;
   1bf22:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1bf24:	f104 0010 	add.w	r0, r4, #16
   1bf28:	f005 fcd2 	bl	218d0 <z_impl_k_sem_give>
}
   1bf2c:	4628      	mov	r0, r5
   1bf2e:	372c      	adds	r7, #44	; 0x2c
   1bf30:	46bd      	mov	sp, r7
   1bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1bf36:	69a3      	ldr	r3, [r4, #24]
   1bf38:	2b00      	cmp	r3, #0
   1bf3a:	d1c3      	bne.n	1bec4 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1bf3c:	6863      	ldr	r3, [r4, #4]
   1bf3e:	4299      	cmp	r1, r3
   1bf40:	d1c0      	bne.n	1bec4 <spi_nrfx_transceive+0x18>
   1bf42:	e7c8      	b.n	1bed6 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1bf44:	f01c 0f01 	tst.w	ip, #1
   1bf48:	d016      	beq.n	1bf78 <spi_nrfx_transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1bf4a:	466d      	mov	r5, sp
   1bf4c:	b088      	sub	sp, #32
   1bf4e:	f8d8 3000 	ldr.w	r3, [r8]
   1bf52:	466a      	mov	r2, sp
   1bf54:	4994      	ldr	r1, [pc, #592]	; (1c1a8 <spi_nrfx_transceive+0x2fc>)
   1bf56:	4893      	ldr	r0, [pc, #588]	; (1c1a4 <spi_nrfx_transceive+0x2f8>)
   1bf58:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1bf5c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1bf60:	8393      	strh	r3, [r2, #28]
   1bf62:	4b92      	ldr	r3, [pc, #584]	; (1c1ac <spi_nrfx_transceive+0x300>)
   1bf64:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1bf68:	f842 3f10 	str.w	r3, [r2, #16]!
   1bf6c:	f00e f87c 	bl	2a068 <z_log_msg_static_create.constprop.0>
   1bf70:	46ad      	mov	sp, r5
		return -EINVAL;
   1bf72:	f06f 0515 	mvn.w	r5, #21
   1bf76:	e7cf      	b.n	1bf18 <spi_nrfx_transceive+0x6c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1bf78:	f01c 0f08 	tst.w	ip, #8
   1bf7c:	d00b      	beq.n	1bf96 <spi_nrfx_transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
   1bf7e:	4b8c      	ldr	r3, [pc, #560]	; (1c1b0 <spi_nrfx_transceive+0x304>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1bf80:	627b      	str	r3, [r7, #36]	; 0x24
   1bf82:	2302      	movs	r3, #2
   1bf84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bf88:	4886      	ldr	r0, [pc, #536]	; (1c1a4 <spi_nrfx_transceive+0x2f8>)
   1bf8a:	623b      	str	r3, [r7, #32]
   1bf8c:	f107 0220 	add.w	r2, r7, #32
   1bf90:	f00e f86a 	bl	2a068 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1bf94:	e7ed      	b.n	1bf72 <spi_nrfx_transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1bf96:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1bf9a:	2b08      	cmp	r3, #8
   1bf9c:	d001      	beq.n	1bfa2 <spi_nrfx_transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1bf9e:	4b85      	ldr	r3, [pc, #532]	; (1c1b4 <spi_nrfx_transceive+0x308>)
   1bfa0:	e7ee      	b.n	1bf80 <spi_nrfx_transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
   1bfa2:	6833      	ldr	r3, [r6, #0]
   1bfa4:	603b      	str	r3, [r7, #0]
   1bfa6:	683a      	ldr	r2, [r7, #0]
   1bfa8:	4b83      	ldr	r3, [pc, #524]	; (1c1b8 <spi_nrfx_transceive+0x30c>)
   1bfaa:	429a      	cmp	r2, r3
   1bfac:	d801      	bhi.n	1bfb2 <spi_nrfx_transceive+0x106>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1bfae:	4b83      	ldr	r3, [pc, #524]	; (1c1bc <spi_nrfx_transceive+0x310>)
   1bfb0:	e7e6      	b.n	1bf80 <spi_nrfx_transceive+0xd4>
	if (max_freq > 16000000 &&
   1bfb2:	4b83      	ldr	r3, [pc, #524]	; (1c1c0 <spi_nrfx_transceive+0x314>)
   1bfb4:	429d      	cmp	r5, r3
   1bfb6:	d906      	bls.n	1bfc6 <spi_nrfx_transceive+0x11a>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1bfb8:	4a82      	ldr	r2, [pc, #520]	; (1c1c4 <spi_nrfx_transceive+0x318>)
   1bfba:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1bfbe:	f012 0f03 	tst.w	r2, #3
   1bfc2:	bf18      	it	ne
   1bfc4:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1bfc6:	68fb      	ldr	r3, [r7, #12]
   1bfc8:	f107 0e10 	add.w	lr, r7, #16
   1bfcc:	f103 0b0c 	add.w	fp, r3, #12
   1bfd0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1bfd4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1bfd8:	683b      	ldr	r3, [r7, #0]
	config = dev_config->def_config;
   1bfda:	e89b 0003 	ldmia.w	fp, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1bfde:	42ab      	cmp	r3, r5
   1bfe0:	bf28      	it	cs
   1bfe2:	462b      	movcs	r3, r5
   1bfe4:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1bfe6:	4b78      	ldr	r3, [pc, #480]	; (1c1c8 <spi_nrfx_transceive+0x31c>)
	config = dev_config->def_config;
   1bfe8:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   1bfec:	429d      	cmp	r5, r3
   1bfee:	d94b      	bls.n	1c088 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 500000) {
   1bff0:	4b76      	ldr	r3, [pc, #472]	; (1c1cc <spi_nrfx_transceive+0x320>)
   1bff2:	429d      	cmp	r5, r3
   1bff4:	d94b      	bls.n	1c08e <spi_nrfx_transceive+0x1e2>
	} else if (frequency < 1000000) {
   1bff6:	4b76      	ldr	r3, [pc, #472]	; (1c1d0 <spi_nrfx_transceive+0x324>)
   1bff8:	429d      	cmp	r5, r3
   1bffa:	d94b      	bls.n	1c094 <spi_nrfx_transceive+0x1e8>
	} else if (frequency < 2000000) {
   1bffc:	4b75      	ldr	r3, [pc, #468]	; (1c1d4 <spi_nrfx_transceive+0x328>)
   1bffe:	429d      	cmp	r5, r3
   1c000:	d94b      	bls.n	1c09a <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 4000000) {
   1c002:	4b75      	ldr	r3, [pc, #468]	; (1c1d8 <spi_nrfx_transceive+0x32c>)
   1c004:	429d      	cmp	r5, r3
   1c006:	d94b      	bls.n	1c0a0 <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 8000000) {
   1c008:	4b74      	ldr	r3, [pc, #464]	; (1c1dc <spi_nrfx_transceive+0x330>)
   1c00a:	429d      	cmp	r5, r3
   1c00c:	d34b      	bcc.n	1c0a6 <spi_nrfx_transceive+0x1fa>
	} else if (frequency < 16000000) {
   1c00e:	4b6c      	ldr	r3, [pc, #432]	; (1c1c0 <spi_nrfx_transceive+0x314>)
   1c010:	429d      	cmp	r5, r3
   1c012:	d34b      	bcc.n	1c0ac <spi_nrfx_transceive+0x200>
		return NRF_SPIM_FREQ_16M;
   1c014:	4b72      	ldr	r3, [pc, #456]	; (1c1e0 <spi_nrfx_transceive+0x334>)
   1c016:	429d      	cmp	r5, r3
   1c018:	bf2c      	ite	cs
   1c01a:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1c01e:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c022:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c026:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c028:	f00c 0304 	and.w	r3, ip, #4
   1c02c:	d041      	beq.n	1c0b2 <spi_nrfx_transceive+0x206>
			return NRF_SPIM_MODE_2;
   1c02e:	2b00      	cmp	r3, #0
   1c030:	bf14      	ite	ne
   1c032:	2303      	movne	r3, #3
   1c034:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1c036:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1c038:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1c03a:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1c03e:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1c042:	b12b      	cbz	r3, 1c050 <spi_nrfx_transceive+0x1a4>
		nrfx_spim_uninit(&dev_config->spim);
   1c044:	68f8      	ldr	r0, [r7, #12]
   1c046:	f003 fda5 	bl	1fb94 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1c04a:	2300      	movs	r3, #0
   1c04c:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1c050:	464b      	mov	r3, r9
   1c052:	4a64      	ldr	r2, [pc, #400]	; (1c1e4 <spi_nrfx_transceive+0x338>)
   1c054:	68f8      	ldr	r0, [r7, #12]
   1c056:	f107 0110 	add.w	r1, r7, #16
   1c05a:	f003 fc69 	bl	1f930 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1c05e:	4b62      	ldr	r3, [pc, #392]	; (1c1e8 <spi_nrfx_transceive+0x33c>)
   1c060:	4298      	cmp	r0, r3
   1c062:	d02a      	beq.n	1c0ba <spi_nrfx_transceive+0x20e>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1c064:	466d      	mov	r5, sp
   1c066:	b088      	sub	sp, #32
   1c068:	466a      	mov	r2, sp
   1c06a:	4b60      	ldr	r3, [pc, #384]	; (1c1ec <spi_nrfx_transceive+0x340>)
   1c06c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c070:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c074:	2303      	movs	r3, #3
   1c076:	484b      	ldr	r0, [pc, #300]	; (1c1a4 <spi_nrfx_transceive+0x2f8>)
   1c078:	f842 3f10 	str.w	r3, [r2, #16]!
   1c07c:	f00d fff4 	bl	2a068 <z_log_msg_static_create.constprop.0>
   1c080:	46ad      	mov	sp, r5
		return -EIO;
   1c082:	f06f 0504 	mvn.w	r5, #4
   1c086:	e747      	b.n	1bf18 <spi_nrfx_transceive+0x6c>
		return NRF_SPIM_FREQ_125K;
   1c088:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1c08c:	e7c9      	b.n	1c022 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_250K;
   1c08e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1c092:	e7c6      	b.n	1c022 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_500K;
   1c094:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1c098:	e7c3      	b.n	1c022 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_1M;
   1c09a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c09e:	e7c0      	b.n	1c022 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_2M;
   1c0a0:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1c0a4:	e7bd      	b.n	1c022 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_4M;
   1c0a6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1c0aa:	e7ba      	b.n	1c022 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_8M;
   1c0ac:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1c0b0:	e7b7      	b.n	1c022 <spi_nrfx_transceive+0x176>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1c0b2:	3b00      	subs	r3, #0
   1c0b4:	bf18      	it	ne
   1c0b6:	2301      	movne	r3, #1
   1c0b8:	e7bd      	b.n	1c036 <spi_nrfx_transceive+0x18a>
	dev_data->initialized = true;
   1c0ba:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1c0bc:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1c0c0:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1c0c4:	2301      	movs	r3, #1
   1c0c6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1c0ca:	68bb      	ldr	r3, [r7, #8]
   1c0cc:	2b00      	cmp	r3, #0
   1c0ce:	d154      	bne.n	1c17a <spi_nrfx_transceive+0x2ce>
   1c0d0:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1c0d2:	2300      	movs	r3, #0
   1c0d4:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1c0d6:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1c0da:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1c0de:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1c0e2:	f00d ffae 	bl	2a042 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1c0e6:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1c0e8:	f1ba 0f00 	cmp.w	sl, #0
   1c0ec:	d14d      	bne.n	1c18a <spi_nrfx_transceive+0x2de>
   1c0ee:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1c0f2:	2300      	movs	r3, #0
   1c0f4:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1c0f6:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1c0fa:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1c0fe:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1c102:	f00d ff9e 	bl	2a042 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1c106:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1c108:	2101      	movs	r1, #1
   1c10a:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1c10c:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1c10e:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1c110:	4620      	mov	r0, r4
   1c112:	f00d ffac 	bl	2a06e <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1c116:	4640      	mov	r0, r8
   1c118:	f7ff fe12 	bl	1bd40 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c11c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1c11e:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1c120:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c122:	429d      	cmp	r5, r3
   1c124:	bf38      	it	cc
   1c126:	461d      	movcc	r5, r3
   1c128:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1c12c:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1c12e:	f858 3b28 	ldr.w	r3, [r8], #40
   1c132:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1c136:	681b      	ldr	r3, [r3, #0]
   1c138:	4631      	mov	r1, r6
   1c13a:	fbb5 f5f3 	udiv	r5, r5, r3
   1c13e:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1c142:	35c8      	adds	r5, #200	; 0xc8
   1c144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c148:	2300      	movs	r3, #0
   1c14a:	fbe5 010c 	umlal	r0, r1, r5, ip
   1c14e:	f7ec ff57 	bl	9000 <__aeabi_uldivmod>
   1c152:	4602      	mov	r2, r0
   1c154:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1c156:	4640      	mov	r0, r8
   1c158:	f005 fbfe 	bl	21958 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1c15c:	b1e8      	cbz	r0, 1c19a <spi_nrfx_transceive+0x2ee>
		LOG_ERR("Timeout waiting for transfer complete");
   1c15e:	4b24      	ldr	r3, [pc, #144]	; (1c1f0 <spi_nrfx_transceive+0x344>)
   1c160:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c164:	627b      	str	r3, [r7, #36]	; 0x24
   1c166:	2302      	movs	r3, #2
   1c168:	480e      	ldr	r0, [pc, #56]	; (1c1a4 <spi_nrfx_transceive+0x2f8>)
   1c16a:	623b      	str	r3, [r7, #32]
   1c16c:	f107 0220 	add.w	r2, r7, #32
   1c170:	f00d ff7a 	bl	2a068 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1c174:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1c178:	e6ce      	b.n	1bf18 <spi_nrfx_transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1c17a:	68bb      	ldr	r3, [r7, #8]
   1c17c:	681b      	ldr	r3, [r3, #0]
   1c17e:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1c180:	2b00      	cmp	r3, #0
   1c182:	d0a6      	beq.n	1c0d2 <spi_nrfx_transceive+0x226>
   1c184:	68bb      	ldr	r3, [r7, #8]
   1c186:	685b      	ldr	r3, [r3, #4]
   1c188:	e7a4      	b.n	1c0d4 <spi_nrfx_transceive+0x228>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1c18a:	f8da 3000 	ldr.w	r3, [sl]
   1c18e:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1c190:	2b00      	cmp	r3, #0
   1c192:	d0ae      	beq.n	1c0f2 <spi_nrfx_transceive+0x246>
   1c194:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c198:	e7ac      	b.n	1c0f4 <spi_nrfx_transceive+0x248>
	status = ctx->sync_status;
   1c19a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1c19c:	e6bc      	b.n	1bf18 <spi_nrfx_transceive+0x6c>
   1c19e:	bf00      	nop
   1c1a0:	00031c84 	.word	0x00031c84
   1c1a4:	0002c8fc 	.word	0x0002c8fc
   1c1a8:	00031c9e 	.word	0x00031c9e
   1c1ac:	01000003 	.word	0x01000003
   1c1b0:	00031cc0 	.word	0x00031cc0
   1c1b4:	00031cdf 	.word	0x00031cdf
   1c1b8:	0001e847 	.word	0x0001e847
   1c1bc:	00031d0e 	.word	0x00031d0e
   1c1c0:	00f42400 	.word	0x00f42400
   1c1c4:	40005000 	.word	0x40005000
   1c1c8:	0003d08f 	.word	0x0003d08f
   1c1cc:	0007a11f 	.word	0x0007a11f
   1c1d0:	000f423f 	.word	0x000f423f
   1c1d4:	001e847f 	.word	0x001e847f
   1c1d8:	003d08ff 	.word	0x003d08ff
   1c1dc:	007a1200 	.word	0x007a1200
   1c1e0:	01e84800 	.word	0x01e84800
   1c1e4:	0001bde9 	.word	0x0001bde9
   1c1e8:	0bad0000 	.word	0x0bad0000
   1c1ec:	00031d3f 	.word	0x00031d3f
   1c1f0:	00031d66 	.word	0x00031d66

0001c1f4 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1c1f4:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1c1f8:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1c1fc:	280a      	cmp	r0, #10
   1c1fe:	bf9a      	itte	ls
   1c200:	4b02      	ldrls	r3, [pc, #8]	; (1c20c <qspi_get_zephyr_ret_code+0x18>)
   1c202:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1c206:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1c20a:	4770      	bx	lr
   1c20c:	0002d7fc 	.word	0x0002d7fc

0001c210 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1c210:	4b02      	ldr	r3, [pc, #8]	; (1c21c <qspi_nor_pages_layout+0xc>)
   1c212:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1c214:	2301      	movs	r3, #1
   1c216:	6013      	str	r3, [r2, #0]
}
   1c218:	4770      	bx	lr
   1c21a:	bf00      	nop
   1c21c:	0002d674 	.word	0x0002d674

0001c220 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1c220:	4800      	ldr	r0, [pc, #0]	; (1c224 <qspi_flash_get_parameters+0x4>)
   1c222:	4770      	bx	lr
   1c224:	0002d608 	.word	0x0002d608

0001c228 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1c228:	4b05      	ldr	r3, [pc, #20]	; (1c240 <qspi_wait_for_completion.isra.0+0x18>)
   1c22a:	4299      	cmp	r1, r3
   1c22c:	d106      	bne.n	1c23c <qspi_wait_for_completion.isra.0+0x14>
   1c22e:	f04f 32ff 	mov.w	r2, #4294967295
   1c232:	f04f 33ff 	mov.w	r3, #4294967295
   1c236:	3030      	adds	r0, #48	; 0x30
   1c238:	f005 bb8e 	b.w	21958 <z_impl_k_sem_take>
}
   1c23c:	4770      	bx	lr
   1c23e:	bf00      	nop
   1c240:	0bad0000 	.word	0x0bad0000

0001c244 <qspi_device_init>:
{
   1c244:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1c246:	6905      	ldr	r5, [r0, #16]
{
   1c248:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1c24a:	4e0f      	ldr	r6, [pc, #60]	; (1c288 <qspi_device_init+0x44>)
	qspi_lock(dev);
   1c24c:	4628      	mov	r0, r5
   1c24e:	f00d ff5a 	bl	2a106 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1c252:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1c256:	f00d ff4e 	bl	2a0f6 <k_sem_give>
	if (!qspi_initialized) {
   1c25a:	7833      	ldrb	r3, [r6, #0]
   1c25c:	b98b      	cbnz	r3, 1c282 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1c25e:	462a      	mov	r2, r5
   1c260:	490a      	ldr	r1, [pc, #40]	; (1c28c <qspi_device_init+0x48>)
   1c262:	6860      	ldr	r0, [r4, #4]
   1c264:	f003 f8e4 	bl	1f430 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1c268:	f7ff ffc4 	bl	1c1f4 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1c26c:	fab0 f380 	clz	r3, r0
   1c270:	4605      	mov	r5, r0
   1c272:	095b      	lsrs	r3, r3, #5
   1c274:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1c276:	6920      	ldr	r0, [r4, #16]
   1c278:	3018      	adds	r0, #24
   1c27a:	f00d ff3c 	bl	2a0f6 <k_sem_give>
}
   1c27e:	4628      	mov	r0, r5
   1c280:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1c282:	2500      	movs	r5, #0
   1c284:	e7f7      	b.n	1c276 <qspi_device_init+0x32>
   1c286:	bf00      	nop
   1c288:	200224d2 	.word	0x200224d2
   1c28c:	0002a0fb 	.word	0x0002a0fb

0001c290 <qspi_device_uninit>:
{
   1c290:	b538      	push	{r3, r4, r5, lr}
   1c292:	4604      	mov	r4, r0
	qspi_lock(dev);
   1c294:	6900      	ldr	r0, [r0, #16]
   1c296:	f00d ff36 	bl	2a106 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1c29a:	6925      	ldr	r5, [r4, #16]
   1c29c:	2200      	movs	r2, #0
   1c29e:	2300      	movs	r3, #0
   1c2a0:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1c2a4:	f005 fb58 	bl	21958 <z_impl_k_sem_take>
	if (last) {
   1c2a8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1c2aa:	b94b      	cbnz	r3, 1c2c0 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1c2ac:	4d0a      	ldr	r5, [pc, #40]	; (1c2d8 <qspi_device_uninit+0x48>)
   1c2ae:	f003 fa13 	bl	1f6d8 <nrfx_qspi_mem_busy_check>
   1c2b2:	42a8      	cmp	r0, r5
   1c2b4:	d10a      	bne.n	1c2cc <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1c2b6:	f003 fa31 	bl	1f71c <nrfx_qspi_uninit>
		qspi_initialized = false;
   1c2ba:	2200      	movs	r2, #0
   1c2bc:	4b07      	ldr	r3, [pc, #28]	; (1c2dc <qspi_device_uninit+0x4c>)
   1c2be:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1c2c0:	6920      	ldr	r0, [r4, #16]
}
   1c2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1c2c6:	3018      	adds	r0, #24
   1c2c8:	f00d bf15 	b.w	2a0f6 <k_sem_give>
	return z_impl_k_sleep(timeout);
   1c2cc:	2100      	movs	r1, #0
   1c2ce:	f240 6067 	movw	r0, #1639	; 0x667
   1c2d2:	f007 f9f1 	bl	236b8 <z_impl_k_sleep>
   1c2d6:	e7ea      	b.n	1c2ae <qspi_device_uninit+0x1e>
   1c2d8:	0bad0000 	.word	0x0bad0000
   1c2dc:	200224d2 	.word	0x200224d2

0001c2e0 <qspi_send_cmd>:
{
   1c2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2e2:	b083      	sub	sp, #12
	if (cmd->tx_buf) {
   1c2e4:	684c      	ldr	r4, [r1, #4]
{
   1c2e6:	4605      	mov	r5, r0
   1c2e8:	af00      	add	r7, sp, #0
	if (cmd->tx_buf) {
   1c2ea:	b174      	cbz	r4, 1c30a <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   1c2ec:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1c2f0:	6888      	ldr	r0, [r1, #8]
   1c2f2:	b310      	cbz	r0, 1c33a <qspi_send_cmd+0x5a>
		rx_len = cmd->rx_buf->len;
   1c2f4:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1c2f8:	b300      	cbz	r0, 1c33c <qspi_send_cmd+0x5c>
   1c2fa:	b1fb      	cbz	r3, 1c33c <qspi_send_cmd+0x5c>
		if (rx_len != tx_len) {
   1c2fc:	4298      	cmp	r0, r3
   1c2fe:	d006      	beq.n	1c30e <qspi_send_cmd+0x2e>
		return -EINVAL;
   1c300:	f06f 0015 	mvn.w	r0, #21
}
   1c304:	370c      	adds	r7, #12
   1c306:	46bd      	mov	sp, r7
   1c308:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1c30a:	4623      	mov	r3, r4
   1c30c:	e7f0      	b.n	1c2f0 <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   1c30e:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1c310:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1c312:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1c314:	d915      	bls.n	1c342 <qspi_send_cmd+0x62>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1c316:	466c      	mov	r4, sp
   1c318:	b088      	sub	sp, #32
   1c31a:	466a      	mov	r2, sp
   1c31c:	61d3      	str	r3, [r2, #28]
   1c31e:	2304      	movs	r3, #4
   1c320:	4814      	ldr	r0, [pc, #80]	; (1c374 <qspi_send_cmd+0x94>)
   1c322:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c326:	f842 3f10 	str.w	r3, [r2, #16]!
   1c32a:	2300      	movs	r3, #0
   1c32c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1c330:	4811      	ldr	r0, [pc, #68]	; (1c378 <qspi_send_cmd+0x98>)
   1c332:	f7f2 f92d 	bl	e590 <z_impl_z_log_msg_static_create>
   1c336:	46a5      	mov	sp, r4
		return -EINVAL;
   1c338:	e7e2      	b.n	1c300 <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   1c33a:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1c33c:	3301      	adds	r3, #1
   1c33e:	4403      	add	r3, r0
   1c340:	e7e6      	b.n	1c310 <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1c342:	707b      	strb	r3, [r7, #1]
   1c344:	f240 1301 	movw	r3, #257	; 0x101
   1c348:	807b      	strh	r3, [r7, #2]
   1c34a:	2300      	movs	r3, #0
	qspi_lock(dev);
   1c34c:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1c34e:	713b      	strb	r3, [r7, #4]
   1c350:	7039      	strb	r1, [r7, #0]
   1c352:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   1c354:	f00d fed7 	bl	2a106 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1c358:	4621      	mov	r1, r4
   1c35a:	4632      	mov	r2, r6
   1c35c:	4638      	mov	r0, r7
   1c35e:	f003 f959 	bl	1f614 <nrfx_qspi_cinstr_xfer>
   1c362:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1c364:	6928      	ldr	r0, [r5, #16]
   1c366:	3018      	adds	r0, #24
   1c368:	f00d fec5 	bl	2a0f6 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1c36c:	4620      	mov	r0, r4
   1c36e:	f7ff ff41 	bl	1c1f4 <qspi_get_zephyr_ret_code>
   1c372:	e7c7      	b.n	1c304 <qspi_send_cmd+0x24>
   1c374:	00031da3 	.word	0x00031da3
   1c378:	0002c8e4 	.word	0x0002c8e4

0001c37c <qspi_nor_init>:
{
   1c37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1c380:	2202      	movs	r2, #2
   1c382:	b086      	sub	sp, #24
   1c384:	4b6a      	ldr	r3, [pc, #424]	; (1c530 <qspi_nor_init+0x1b4>)
   1c386:	af00      	add	r7, sp, #0
   1c388:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c38c:	6843      	ldr	r3, [r0, #4]
{
   1c38e:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c390:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1c392:	2100      	movs	r1, #0
   1c394:	4630      	mov	r0, r6
   1c396:	f107 020c 	add.w	r2, r7, #12
   1c39a:	f00e f98b 	bl	2a6b4 <pinctrl_lookup_state>
	if (ret < 0) {
   1c39e:	1e04      	subs	r4, r0, #0
   1c3a0:	db3a      	blt.n	1c418 <qspi_nor_init+0x9c>
	return pinctrl_apply_state_direct(config, state);
   1c3a2:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c3a4:	6832      	ldr	r2, [r6, #0]
   1c3a6:	7919      	ldrb	r1, [r3, #4]
   1c3a8:	6818      	ldr	r0, [r3, #0]
   1c3aa:	f00e f996 	bl	2a6da <pinctrl_configure_pins>
	if (ret < 0) {
   1c3ae:	1e04      	subs	r4, r0, #0
   1c3b0:	db32      	blt.n	1c418 <qspi_nor_init+0x9c>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1c3b2:	2200      	movs	r2, #0
   1c3b4:	2101      	movs	r1, #1
   1c3b6:	202b      	movs	r0, #43	; 0x2b
   1c3b8:	f7f4 f9e0 	bl	1077c <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1c3bc:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1c3be:	692a      	ldr	r2, [r5, #16]
   1c3c0:	4630      	mov	r0, r6
   1c3c2:	495c      	ldr	r1, [pc, #368]	; (1c534 <qspi_nor_init+0x1b8>)
   1c3c4:	f003 f834 	bl	1f430 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1c3c8:	f7ff ff14 	bl	1c1f4 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1c3cc:	1e04      	subs	r4, r0, #0
   1c3ce:	db23      	blt.n	1c418 <qspi_nor_init+0x9c>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1c3d0:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1c3d2:	3b02      	subs	r3, #2
   1c3d4:	2b01      	cmp	r3, #1
   1c3d6:	d924      	bls.n	1c422 <qspi_nor_init+0xa6>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1c3d8:	f896 800a 	ldrb.w	r8, [r6, #10]
   1c3dc:	f1a8 0803 	sub.w	r8, r8, #3
   1c3e0:	f1b8 0f01 	cmp.w	r8, #1
   1c3e4:	bf8c      	ite	hi
   1c3e6:	f04f 0800 	movhi.w	r8, #0
   1c3ea:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1c3ee:	4628      	mov	r0, r5
   1c3f0:	f00d feab 	bl	2a14a <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1c3f4:	1e04      	subs	r4, r0, #0
   1c3f6:	da17      	bge.n	1c428 <qspi_nor_init+0xac>
			LOG_ERR("RDSR failed: %d", ret);
   1c3f8:	466d      	mov	r5, sp
   1c3fa:	b088      	sub	sp, #32
   1c3fc:	466a      	mov	r2, sp
   1c3fe:	4b4e      	ldr	r3, [pc, #312]	; (1c538 <qspi_nor_init+0x1bc>)
   1c400:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c404:	2303      	movs	r3, #3
   1c406:	f842 3f10 	str.w	r3, [r2, #16]!
   1c40a:	2300      	movs	r3, #0
   1c40c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c410:	484a      	ldr	r0, [pc, #296]	; (1c53c <qspi_nor_init+0x1c0>)
   1c412:	f7f2 f8bd 	bl	e590 <z_impl_z_log_msg_static_create>
   1c416:	46ad      	mov	sp, r5
}
   1c418:	4620      	mov	r0, r4
   1c41a:	3718      	adds	r7, #24
   1c41c:	46bd      	mov	sp, r7
   1c41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1c422:	f04f 0801 	mov.w	r8, #1
   1c426:	e7e2      	b.n	1c3ee <qspi_nor_init+0x72>
		uint8_t sr = (uint8_t)ret;
   1c428:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1c42a:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1c42e:	45a0      	cmp	r8, r4
   1c430:	f107 0604 	add.w	r6, r7, #4
   1c434:	d031      	beq.n	1c49a <qspi_nor_init+0x11e>
	uint8_t sr_array[2] = {0};
   1c436:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1c438:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1c43c:	803b      	strh	r3, [r7, #0]
		sr_array[0] = sr_val;
   1c43e:	703a      	strb	r2, [r7, #0]
	const struct qspi_buf sr_buf = {
   1c440:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1c442:	4628      	mov	r0, r5
	struct qspi_cmd cmd = {
   1c444:	e9c7 2302 	strd	r2, r3, [r7, #8]
	const struct qspi_buf sr_buf = {
   1c448:	607f      	str	r7, [r7, #4]
	struct qspi_cmd cmd = {
   1c44a:	617b      	str	r3, [r7, #20]
   1c44c:	733a      	strb	r2, [r7, #12]
   1c44e:	613e      	str	r6, [r7, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1c450:	f107 010c 	add.w	r1, r7, #12
   1c454:	f7ff ff44 	bl	1c2e0 <qspi_send_cmd>
	if (ret == 0) {
   1c458:	1e04      	subs	r4, r0, #0
   1c45a:	d017      	beq.n	1c48c <qspi_nor_init+0x110>
		if (ret < 0) {
   1c45c:	dadc      	bge.n	1c418 <qspi_nor_init+0x9c>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1c45e:	4a38      	ldr	r2, [pc, #224]	; (1c540 <qspi_nor_init+0x1c4>)
   1c460:	4b38      	ldr	r3, [pc, #224]	; (1c544 <qspi_nor_init+0x1c8>)
   1c462:	466d      	mov	r5, sp
   1c464:	b08a      	sub	sp, #40	; 0x28
   1c466:	f1b8 0f00 	cmp.w	r8, #0
   1c46a:	bf18      	it	ne
   1c46c:	4613      	movne	r3, r2
   1c46e:	466a      	mov	r2, sp
   1c470:	4935      	ldr	r1, [pc, #212]	; (1c548 <qspi_nor_init+0x1cc>)
   1c472:	61d4      	str	r4, [r2, #28]
   1c474:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c478:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c47c:	8413      	strh	r3, [r2, #32]
   1c47e:	4b33      	ldr	r3, [pc, #204]	; (1c54c <qspi_nor_init+0x1d0>)
   1c480:	f842 3f10 	str.w	r3, [r2, #16]!
   1c484:	2300      	movs	r3, #0
   1c486:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c48a:	e7c1      	b.n	1c410 <qspi_nor_init+0x94>
		ret = qspi_rdsr(dev, 1);
   1c48c:	4628      	mov	r0, r5
   1c48e:	f00d fe5c 	bl	2a14a <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1c492:	1e04      	subs	r4, r0, #0
   1c494:	dbe3      	blt.n	1c45e <qspi_nor_init+0xe2>
   1c496:	07e3      	lsls	r3, r4, #31
   1c498:	d4f8      	bmi.n	1c48c <qspi_nor_init+0x110>
	qspi_device_uninit(dev);
   1c49a:	4628      	mov	r0, r5
   1c49c:	f7ff fef8 	bl	1c290 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1c4a0:	2403      	movs	r4, #3
   1c4a2:	2300      	movs	r3, #0
   1c4a4:	e9c7 4302 	strd	r4, r3, [r7, #8]
   1c4a8:	613b      	str	r3, [r7, #16]
   1c4aa:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1c4ac:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1c4ae:	607f      	str	r7, [r7, #4]
	const struct qspi_cmd cmd = {
   1c4b0:	733b      	strb	r3, [r7, #12]
   1c4b2:	617e      	str	r6, [r7, #20]
	int ret = qspi_device_init(dev);
   1c4b4:	f7ff fec6 	bl	1c244 <qspi_device_init>
	if (ret == 0) {
   1c4b8:	4602      	mov	r2, r0
   1c4ba:	b128      	cbz	r0, 1c4c8 <qspi_nor_init+0x14c>
	qspi_device_uninit(dev);
   1c4bc:	4628      	mov	r0, r5
   1c4be:	f7ff fee7 	bl	1c290 <qspi_device_uninit>
		return -ENODEV;
   1c4c2:	f06f 0412 	mvn.w	r4, #18
   1c4c6:	e7a7      	b.n	1c418 <qspi_nor_init+0x9c>
		ret = qspi_send_cmd(dev, &cmd, false);
   1c4c8:	4628      	mov	r0, r5
   1c4ca:	f107 010c 	add.w	r1, r7, #12
   1c4ce:	f7ff ff07 	bl	1c2e0 <qspi_send_cmd>
   1c4d2:	4606      	mov	r6, r0
	qspi_device_uninit(dev);
   1c4d4:	4628      	mov	r0, r5
   1c4d6:	f7ff fedb 	bl	1c290 <qspi_device_uninit>
	if (ret != 0) {
   1c4da:	2e00      	cmp	r6, #0
   1c4dc:	d1f1      	bne.n	1c4c2 <qspi_nor_init+0x146>
	const struct qspi_nor_config *qnc = dev->config;
   1c4de:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1c4e0:	4622      	mov	r2, r4
   1c4e2:	4639      	mov	r1, r7
   1c4e4:	f105 001c 	add.w	r0, r5, #28
   1c4e8:	f00f fa10 	bl	2b90c <memcmp>
   1c4ec:	4604      	mov	r4, r0
   1c4ee:	2800      	cmp	r0, #0
   1c4f0:	d092      	beq.n	1c418 <qspi_nor_init+0x9c>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1c4f2:	466c      	mov	r4, sp
   1c4f4:	b08c      	sub	sp, #48	; 0x30
   1c4f6:	466a      	mov	r2, sp
   1c4f8:	f897 8000 	ldrb.w	r8, [r7]
   1c4fc:	f897 e001 	ldrb.w	lr, [r7, #1]
   1c500:	f897 c002 	ldrb.w	ip, [r7, #2]
   1c504:	7f28      	ldrb	r0, [r5, #28]
   1c506:	7f69      	ldrb	r1, [r5, #29]
   1c508:	7fab      	ldrb	r3, [r5, #30]
   1c50a:	62d3      	str	r3, [r2, #44]	; 0x2c
   1c50c:	2308      	movs	r3, #8
   1c50e:	4d10      	ldr	r5, [pc, #64]	; (1c550 <qspi_nor_init+0x1d4>)
   1c510:	e9c2 ec07 	strd	lr, ip, [r2, #28]
   1c514:	e9c2 5805 	strd	r5, r8, [r2, #20]
   1c518:	e9c2 0109 	strd	r0, r1, [r2, #36]	; 0x24
   1c51c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c520:	f244 0140 	movw	r1, #16448	; 0x4040
   1c524:	4633      	mov	r3, r6
   1c526:	4805      	ldr	r0, [pc, #20]	; (1c53c <qspi_nor_init+0x1c0>)
   1c528:	f7f2 f832 	bl	e590 <z_impl_z_log_msg_static_create>
   1c52c:	46a5      	mov	sp, r4
		return -ENODEV;
   1c52e:	e7c8      	b.n	1c4c2 <qspi_nor_init+0x146>
   1c530:	40005000 	.word	0x40005000
   1c534:	0002a0fb 	.word	0x0002a0fb
   1c538:	00031dcc 	.word	0x00031dcc
   1c53c:	0002c8e4 	.word	0x0002c8e4
   1c540:	00030806 	.word	0x00030806
   1c544:	00031dc6 	.word	0x00031dc6
   1c548:	00031ddc 	.word	0x00031ddc
   1c54c:	01000004 	.word	0x01000004
   1c550:	00031ded 	.word	0x00031ded

0001c554 <qspi_nor_erase.part.0>:
static int qspi_nor_erase(const struct device *dev, off_t addr, size_t size)
   1c554:	b580      	push	{r7, lr}
   1c556:	af00      	add	r7, sp, #0
		LOG_ERR("erase error: address or size "
   1c558:	b088      	sub	sp, #32
   1c55a:	466a      	mov	r2, sp
   1c55c:	4b08      	ldr	r3, [pc, #32]	; (1c580 <qspi_nor_erase.part.0+0x2c>)
   1c55e:	61d1      	str	r1, [r2, #28]
   1c560:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c564:	2304      	movs	r3, #4
   1c566:	f842 3f10 	str.w	r3, [r2, #16]!
   1c56a:	2300      	movs	r3, #0
   1c56c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c570:	4804      	ldr	r0, [pc, #16]	; (1c584 <qspi_nor_erase.part.0+0x30>)
   1c572:	f7f2 f80d 	bl	e590 <z_impl_z_log_msg_static_create>
}
   1c576:	f06f 0015 	mvn.w	r0, #21
   1c57a:	46bd      	mov	sp, r7
   1c57c:	bd80      	pop	{r7, pc}
   1c57e:	bf00      	nop
   1c580:	00031e1f 	.word	0x00031e1f
   1c584:	0002c8e4 	.word	0x0002c8e4

0001c588 <qspi_nor_erase>:
{
   1c588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1c58c:	1e0b      	subs	r3, r1, #0
{
   1c58e:	4606      	mov	r6, r0
   1c590:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1c592:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1c596:	af00      	add	r7, sp, #0
	if (addr < 0 ||
   1c598:	db05      	blt.n	1c5a6 <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   1c59a:	1899      	adds	r1, r3, r2
	if (addr < 0 ||
   1c59c:	f8da 2018 	ldr.w	r2, [sl, #24]
	    (addr + size) > params->size) {
   1c5a0:	4699      	mov	r9, r3
	if (addr < 0 ||
   1c5a2:	4291      	cmp	r1, r2
   1c5a4:	d908      	bls.n	1c5b8 <qspi_nor_erase+0x30>
   1c5a6:	4629      	mov	r1, r5
   1c5a8:	4618      	mov	r0, r3
   1c5aa:	f7ff ffd3 	bl	1c554 <qspi_nor_erase.part.0>
   1c5ae:	4604      	mov	r4, r0
}
   1c5b0:	4620      	mov	r0, r4
   1c5b2:	46bd      	mov	sp, r7
   1c5b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1c5b8:	f3c3 020b 	ubfx	r2, r3, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1c5bc:	2d00      	cmp	r5, #0
   1c5be:	f000 8081 	beq.w	1c6c4 <qspi_nor_erase+0x13c>
   1c5c2:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1c5c6:	4313      	orrs	r3, r2
   1c5c8:	d17c      	bne.n	1c6c4 <qspi_nor_erase+0x13c>
	rv = qspi_device_init(dev);
   1c5ca:	f7ff fe3b 	bl	1c244 <qspi_device_init>
	if (rv != 0) {
   1c5ce:	4604      	mov	r4, r0
   1c5d0:	bb60      	cbnz	r0, 1c62c <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   1c5d2:	6930      	ldr	r0, [r6, #16]
   1c5d4:	f00d fd9e 	bl	2a114 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1c5d8:	4621      	mov	r1, r4
   1c5da:	4630      	mov	r0, r6
   1c5dc:	f00d fda0 	bl	2a120 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1c5e0:	4604      	mov	r4, r0
   1c5e2:	bb00      	cbnz	r0, 1c626 <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   1c5e4:	6930      	ldr	r0, [r6, #16]
   1c5e6:	f00d fd8e 	bl	2a106 <qspi_lock.isra.0>
		if (size == params->size) {
   1c5ea:	f8da 3018 	ldr.w	r3, [sl, #24]
   1c5ee:	42ab      	cmp	r3, r5
   1c5f0:	d120      	bne.n	1c634 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   1c5f2:	f00e fa28 	bl	2aa46 <nrfx_qspi_chip_erase>
   1c5f6:	46ab      	mov	fp, r5
   1c5f8:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1c5fa:	4641      	mov	r1, r8
   1c5fc:	6930      	ldr	r0, [r6, #16]
   1c5fe:	f7ff fe13 	bl	1c228 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1c602:	4b32      	ldr	r3, [pc, #200]	; (1c6cc <qspi_nor_erase+0x144>)
   1c604:	4598      	cmp	r8, r3
   1c606:	d147      	bne.n	1c698 <qspi_nor_erase+0x110>
	while (size > 0) {
   1c608:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   1c60c:	44d9      	add	r9, fp
	while (size > 0) {
   1c60e:	d1ec      	bne.n	1c5ea <qspi_nor_erase+0x62>
	k_sem_give(&dev_data->sem);
   1c610:	6930      	ldr	r0, [r6, #16]
   1c612:	3018      	adds	r0, #24
   1c614:	f00d fd6f 	bl	2a0f6 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1c618:	2101      	movs	r1, #1
   1c61a:	4630      	mov	r0, r6
   1c61c:	f00d fd80 	bl	2a120 <qspi_nor_write_protection_set>
   1c620:	2c00      	cmp	r4, #0
   1c622:	bf08      	it	eq
   1c624:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1c626:	6930      	ldr	r0, [r6, #16]
   1c628:	f00d fd65 	bl	2a0f6 <k_sem_give>
	qspi_device_uninit(dev);
   1c62c:	4630      	mov	r0, r6
   1c62e:	f7ff fe2f 	bl	1c290 <qspi_device_uninit>
	return rv;
   1c632:	e7bd      	b.n	1c5b0 <qspi_nor_erase+0x28>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1c634:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1c638:	d30a      	bcc.n	1c650 <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1c63a:	fa1f f389 	uxth.w	r3, r9
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1c63e:	b953      	cbnz	r3, 1c656 <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1c640:	4649      	mov	r1, r9
   1c642:	2001      	movs	r0, #1
   1c644:	f003 f8cc 	bl	1f7e0 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1c648:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1c64c:	4680      	mov	r8, r0
			adj = QSPI_BLOCK_SIZE;
   1c64e:	e7d4      	b.n	1c5fa <qspi_nor_erase+0x72>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1c650:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1c654:	d309      	bcc.n	1c66a <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1c656:	f3c9 000b 	ubfx	r0, r9, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1c65a:	b930      	cbnz	r0, 1c66a <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1c65c:	4649      	mov	r1, r9
   1c65e:	f003 f8bf 	bl	1f7e0 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1c662:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1c666:	4680      	mov	r8, r0
			adj = QSPI_SECTOR_SIZE;
   1c668:	e7c7      	b.n	1c5fa <qspi_nor_erase+0x72>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1c66a:	466c      	mov	r4, sp
   1c66c:	b088      	sub	sp, #32
   1c66e:	466a      	mov	r2, sp
   1c670:	4b17      	ldr	r3, [pc, #92]	; (1c6d0 <qspi_nor_erase+0x148>)
   1c672:	61d5      	str	r5, [r2, #28]
   1c674:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1c678:	2304      	movs	r3, #4
   1c67a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c67e:	2300      	movs	r3, #0
   1c680:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c684:	4813      	ldr	r0, [pc, #76]	; (1c6d4 <qspi_nor_erase+0x14c>)
   1c686:	f7f1 ff83 	bl	e590 <z_impl_z_log_msg_static_create>
		qspi_wait_for_completion(dev, res);
   1c68a:	4913      	ldr	r1, [pc, #76]	; (1c6d8 <qspi_nor_erase+0x150>)
   1c68c:	46a5      	mov	sp, r4
   1c68e:	6930      	ldr	r0, [r6, #16]
   1c690:	f7ff fdca 	bl	1c228 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1c694:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1c6d8 <qspi_nor_erase+0x150>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1c698:	466c      	mov	r4, sp
   1c69a:	b088      	sub	sp, #32
   1c69c:	466a      	mov	r2, sp
   1c69e:	4b0f      	ldr	r3, [pc, #60]	; (1c6dc <qspi_nor_erase+0x154>)
   1c6a0:	61d5      	str	r5, [r2, #28]
   1c6a2:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1c6a6:	2304      	movs	r3, #4
   1c6a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c6ac:	2300      	movs	r3, #0
   1c6ae:	4809      	ldr	r0, [pc, #36]	; (1c6d4 <qspi_nor_erase+0x14c>)
   1c6b0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c6b4:	f7f1 ff6c 	bl	e590 <z_impl_z_log_msg_static_create>
			rv = qspi_get_zephyr_ret_code(res);
   1c6b8:	4640      	mov	r0, r8
   1c6ba:	46a5      	mov	sp, r4
   1c6bc:	f7ff fd9a 	bl	1c1f4 <qspi_get_zephyr_ret_code>
   1c6c0:	4604      	mov	r4, r0
			break;
   1c6c2:	e7a5      	b.n	1c610 <qspi_nor_erase+0x88>
		return -EINVAL;
   1c6c4:	f06f 0415 	mvn.w	r4, #21
   1c6c8:	e772      	b.n	1c5b0 <qspi_nor_erase+0x28>
   1c6ca:	bf00      	nop
   1c6cc:	0bad0000 	.word	0x0bad0000
   1c6d0:	00031e69 	.word	0x00031e69
   1c6d4:	0002c8e4 	.word	0x0002c8e4
   1c6d8:	0bad0004 	.word	0x0bad0004
   1c6dc:	00031e87 	.word	0x00031e87

0001c6e0 <qspi_nor_write>:
{
   1c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6e4:	b083      	sub	sp, #12
   1c6e6:	4605      	mov	r5, r0
   1c6e8:	4688      	mov	r8, r1
   1c6ea:	461e      	mov	r6, r3
	if (!src) {
   1c6ec:	4691      	mov	r9, r2
{
   1c6ee:	af00      	add	r7, sp, #0
	if (!src) {
   1c6f0:	b30a      	cbz	r2, 1c736 <qspi_nor_write+0x56>
	if ((size == 0)
   1c6f2:	b303      	cbz	r3, 1c736 <qspi_nor_write+0x56>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1c6f4:	2b04      	cmp	r3, #4
   1c6f6:	d901      	bls.n	1c6fc <qspi_nor_write+0x1c>
   1c6f8:	07b3      	lsls	r3, r6, #30
   1c6fa:	d11c      	bne.n	1c736 <qspi_nor_write+0x56>
	if ((addr % 4U) != 0) {
   1c6fc:	f018 0f03 	tst.w	r8, #3
   1c700:	d119      	bne.n	1c736 <qspi_nor_write+0x56>
	if (addr < 0 ||
   1c702:	f1b8 0f00 	cmp.w	r8, #0
	const struct qspi_nor_config *params = dev->config;
   1c706:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1c708:	db04      	blt.n	1c714 <qspi_nor_write+0x34>
   1c70a:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1c70c:	eb08 0306 	add.w	r3, r8, r6
	if (addr < 0 ||
   1c710:	4293      	cmp	r3, r2
   1c712:	d917      	bls.n	1c744 <qspi_nor_write+0x64>
		LOG_ERR("write error: address or size "
   1c714:	466c      	mov	r4, sp
   1c716:	b088      	sub	sp, #32
   1c718:	466a      	mov	r2, sp
   1c71a:	4b42      	ldr	r3, [pc, #264]	; (1c824 <qspi_nor_write+0x144>)
   1c71c:	61d6      	str	r6, [r2, #28]
   1c71e:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1c722:	2304      	movs	r3, #4
   1c724:	f842 3f10 	str.w	r3, [r2, #16]!
   1c728:	2300      	movs	r3, #0
   1c72a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c72e:	483e      	ldr	r0, [pc, #248]	; (1c828 <qspi_nor_write+0x148>)
   1c730:	f7f1 ff2e 	bl	e590 <z_impl_z_log_msg_static_create>
   1c734:	46a5      	mov	sp, r4
		return -EINVAL;
   1c736:	f06f 0415 	mvn.w	r4, #21
}
   1c73a:	4620      	mov	r0, r4
   1c73c:	370c      	adds	r7, #12
   1c73e:	46bd      	mov	sp, r7
   1c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1c744:	4628      	mov	r0, r5
   1c746:	f7ff fd7d 	bl	1c244 <qspi_device_init>
	if (rc != 0) {
   1c74a:	4604      	mov	r4, r0
   1c74c:	2800      	cmp	r0, #0
   1c74e:	d160      	bne.n	1c812 <qspi_nor_write+0x132>
	qspi_trans_lock(dev);
   1c750:	6928      	ldr	r0, [r5, #16]
   1c752:	f00d fcdf 	bl	2a114 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1c756:	4621      	mov	r1, r4
   1c758:	4628      	mov	r0, r5
   1c75a:	f00d fce1 	bl	2a120 <qspi_nor_write_protection_set>
   1c75e:	4604      	mov	r4, r0
	qspi_lock(dev);
   1c760:	6928      	ldr	r0, [r5, #16]
   1c762:	f00d fcd0 	bl	2a106 <qspi_lock.isra.0>
	if (!res) {
   1c766:	2c00      	cmp	r4, #0
   1c768:	d140      	bne.n	1c7ec <qspi_nor_write+0x10c>
		if (size < 4U) {
   1c76a:	2e03      	cmp	r6, #3
   1c76c:	d81c      	bhi.n	1c7a8 <qspi_nor_write+0xc8>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1c76e:	2104      	movs	r1, #4
   1c770:	4642      	mov	r2, r8
   1c772:	1878      	adds	r0, r7, r1
   1c774:	f00e f964 	bl	2aa40 <nrfx_qspi_read>
   1c778:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1c77a:	4601      	mov	r1, r0
   1c77c:	6928      	ldr	r0, [r5, #16]
   1c77e:	f7ff fd53 	bl	1c228 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1c782:	4b2a      	ldr	r3, [pc, #168]	; (1c82c <qspi_nor_write+0x14c>)
   1c784:	429c      	cmp	r4, r3
   1c786:	d131      	bne.n	1c7ec <qspi_nor_write+0x10c>
		memcpy(buf, sptr, slen);
   1c788:	4632      	mov	r2, r6
   1c78a:	4649      	mov	r1, r9
   1c78c:	1d38      	adds	r0, r7, #4
   1c78e:	f00f f8cd 	bl	2b92c <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1c792:	2104      	movs	r1, #4
   1c794:	4642      	mov	r2, r8
   1c796:	1878      	adds	r0, r7, r1
			res = nrfx_qspi_write(src, size, addr);
   1c798:	f00e f94f 	bl	2aa3a <nrfx_qspi_write>
   1c79c:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1c79e:	4601      	mov	r1, r0
   1c7a0:	6928      	ldr	r0, [r5, #16]
   1c7a2:	f7ff fd41 	bl	1c228 <qspi_wait_for_completion.isra.0>
   1c7a6:	e021      	b.n	1c7ec <qspi_nor_write+0x10c>
   1c7a8:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1c7ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c7b0:	d033      	beq.n	1c81a <qspi_nor_write+0x13a>
			if (res == NRFX_SUCCESS) {
   1c7b2:	f8df b078 	ldr.w	fp, [pc, #120]	; 1c82c <qspi_nor_write+0x14c>
			size_t len = MIN(slen, sizeof(buf));
   1c7b6:	2e04      	cmp	r6, #4
   1c7b8:	46b2      	mov	sl, r6
   1c7ba:	bf28      	it	cs
   1c7bc:	f04f 0a04 	movcs.w	sl, #4
			memcpy(buf, sp, len);
   1c7c0:	4649      	mov	r1, r9
   1c7c2:	4652      	mov	r2, sl
   1c7c4:	1d38      	adds	r0, r7, #4
   1c7c6:	f00f f8b1 	bl	2b92c <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1c7ca:	2104      	movs	r1, #4
   1c7cc:	4642      	mov	r2, r8
   1c7ce:	1878      	adds	r0, r7, r1
   1c7d0:	f00e f933 	bl	2aa3a <nrfx_qspi_write>
   1c7d4:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1c7d6:	4601      	mov	r1, r0
   1c7d8:	6928      	ldr	r0, [r5, #16]
   1c7da:	f7ff fd25 	bl	1c228 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1c7de:	455c      	cmp	r4, fp
   1c7e0:	d104      	bne.n	1c7ec <qspi_nor_write+0x10c>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1c7e2:	ebb6 060a 	subs.w	r6, r6, sl
				sp += len;
   1c7e6:	44d1      	add	r9, sl
				addr += len;
   1c7e8:	44d0      	add	r8, sl
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1c7ea:	d1e4      	bne.n	1c7b6 <qspi_nor_write+0xd6>
	k_sem_give(&dev_data->sem);
   1c7ec:	6928      	ldr	r0, [r5, #16]
   1c7ee:	3018      	adds	r0, #24
   1c7f0:	f00d fc81 	bl	2a0f6 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1c7f4:	2101      	movs	r1, #1
   1c7f6:	4628      	mov	r0, r5
   1c7f8:	f00d fc92 	bl	2a120 <qspi_nor_write_protection_set>
   1c7fc:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1c7fe:	6928      	ldr	r0, [r5, #16]
   1c800:	f00d fc79 	bl	2a0f6 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1c804:	2c00      	cmp	r4, #0
   1c806:	bf14      	ite	ne
   1c808:	4620      	movne	r0, r4
   1c80a:	4630      	moveq	r0, r6
   1c80c:	f7ff fcf2 	bl	1c1f4 <qspi_get_zephyr_ret_code>
   1c810:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1c812:	4628      	mov	r0, r5
   1c814:	f7ff fd3c 	bl	1c290 <qspi_device_uninit>
	return rc;
   1c818:	e78f      	b.n	1c73a <qspi_nor_write+0x5a>
			res = nrfx_qspi_write(src, size, addr);
   1c81a:	4642      	mov	r2, r8
   1c81c:	4631      	mov	r1, r6
   1c81e:	4648      	mov	r0, r9
   1c820:	e7ba      	b.n	1c798 <qspi_nor_write+0xb8>
   1c822:	bf00      	nop
   1c824:	00031ea5 	.word	0x00031ea5
   1c828:	0002c8e4 	.word	0x0002c8e4
   1c82c:	0bad0000 	.word	0x0bad0000

0001c830 <qspi_nor_read>:
{
   1c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c834:	b085      	sub	sp, #20
   1c836:	4681      	mov	r9, r0
   1c838:	460e      	mov	r6, r1
   1c83a:	461c      	mov	r4, r3
	if (!dest) {
   1c83c:	4690      	mov	r8, r2
{
   1c83e:	af00      	add	r7, sp, #0
	if (!dest) {
   1c840:	b1d2      	cbz	r2, 1c878 <qspi_nor_read+0x48>
	if (!size) {
   1c842:	2b00      	cmp	r3, #0
   1c844:	f000 80ac 	beq.w	1c9a0 <qspi_nor_read+0x170>
	if (addr < 0 ||
   1c848:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1c84a:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1c84c:	db03      	blt.n	1c856 <qspi_nor_read+0x26>
   1c84e:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1c850:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1c852:	4293      	cmp	r3, r2
   1c854:	d917      	bls.n	1c886 <qspi_nor_read+0x56>
		LOG_ERR("read error: address or size "
   1c856:	466d      	mov	r5, sp
   1c858:	b088      	sub	sp, #32
   1c85a:	466a      	mov	r2, sp
   1c85c:	4b51      	ldr	r3, [pc, #324]	; (1c9a4 <qspi_nor_read+0x174>)
   1c85e:	61d4      	str	r4, [r2, #28]
   1c860:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1c864:	2304      	movs	r3, #4
   1c866:	f842 3f10 	str.w	r3, [r2, #16]!
   1c86a:	2300      	movs	r3, #0
   1c86c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c870:	484d      	ldr	r0, [pc, #308]	; (1c9a8 <qspi_nor_read+0x178>)
   1c872:	f7f1 fe8d 	bl	e590 <z_impl_z_log_msg_static_create>
   1c876:	46ad      	mov	sp, r5
		return -EINVAL;
   1c878:	f06f 0515 	mvn.w	r5, #21
}
   1c87c:	4628      	mov	r0, r5
   1c87e:	3714      	adds	r7, #20
   1c880:	46bd      	mov	sp, r7
   1c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1c886:	f7ff fcdd 	bl	1c244 <qspi_device_init>
	if (rc != 0) {
   1c88a:	4605      	mov	r5, r0
   1c88c:	2800      	cmp	r0, #0
   1c88e:	f040 8081 	bne.w	1c994 <qspi_nor_read+0x164>
	qspi_lock(dev);
   1c892:	4275      	negs	r5, r6
   1c894:	f005 0503 	and.w	r5, r5, #3
   1c898:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c89c:	f00d fc33 	bl	2a106 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1c8a0:	42a5      	cmp	r5, r4
   1c8a2:	bf28      	it	cs
   1c8a4:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1c8a6:	f1d8 0200 	rsbs	r2, r8, #0
   1c8aa:	f002 0203 	and.w	r2, r2, #3
   1c8ae:	f008 0303 	and.w	r3, r8, #3
   1c8b2:	bf58      	it	pl
   1c8b4:	4253      	negpl	r3, r2
   1c8b6:	425b      	negs	r3, r3
   1c8b8:	f003 0303 	and.w	r3, r3, #3
   1c8bc:	42a3      	cmp	r3, r4
   1c8be:	bf28      	it	cs
   1c8c0:	4623      	movcs	r3, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1c8c2:	1b62      	subs	r2, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1c8c4:	1ae4      	subs	r4, r4, r3
   1c8c6:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1c8ca:	f022 0a03 	bic.w	sl, r2, #3
	if (flash_middle > dest_middle) {
   1c8ce:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1c8d0:	bfc8      	it	gt
   1c8d2:	46a2      	movgt	sl, r4
   1c8d4:	f002 0b03 	and.w	fp, r2, #3
   1c8d8:	bfc8      	it	gt
   1c8da:	eba2 0b04 	subgt.w	fp, r2, r4
	if (flash_middle != 0) {
   1c8de:	f1ba 0f00 	cmp.w	sl, #0
   1c8e2:	d01a      	beq.n	1c91a <qspi_nor_read+0xea>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1c8e4:	eb08 0203 	add.w	r2, r8, r3
   1c8e8:	e9c7 3200 	strd	r3, r2, [r7]
   1c8ec:	4651      	mov	r1, sl
   1c8ee:	1972      	adds	r2, r6, r5
   1c8f0:	6878      	ldr	r0, [r7, #4]
   1c8f2:	f00e f8a5 	bl	2aa40 <nrfx_qspi_read>
   1c8f6:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1c8f8:	4601      	mov	r1, r0
   1c8fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c8fe:	f7ff fc93 	bl	1c228 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1c902:	4a2a      	ldr	r2, [pc, #168]	; (1c9ac <qspi_nor_read+0x17c>)
   1c904:	4294      	cmp	r4, r2
   1c906:	d13c      	bne.n	1c982 <qspi_nor_read+0x152>
		if (flash_prefix != dest_prefix) {
   1c908:	683b      	ldr	r3, [r7, #0]
   1c90a:	429d      	cmp	r5, r3
   1c90c:	d005      	beq.n	1c91a <qspi_nor_read+0xea>
__ssp_bos_icheck3(memmove, void *, const void *)
   1c90e:	4652      	mov	r2, sl
   1c910:	6879      	ldr	r1, [r7, #4]
   1c912:	eb08 0005 	add.w	r0, r8, r5
   1c916:	f00f f829 	bl	2b96c <memmove>
	if (flash_prefix != 0) {
   1c91a:	b1c5      	cbz	r5, 1c94e <qspi_nor_read+0x11e>
				     (WORD_SIZE - flash_prefix));
   1c91c:	f1c5 0304 	rsb	r3, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1c920:	1af2      	subs	r2, r6, r3
   1c922:	2104      	movs	r1, #4
   1c924:	f107 0008 	add.w	r0, r7, #8
   1c928:	607b      	str	r3, [r7, #4]
   1c92a:	f00e f889 	bl	2aa40 <nrfx_qspi_read>
   1c92e:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1c930:	4601      	mov	r1, r0
   1c932:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c936:	f7ff fc77 	bl	1c228 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1c93a:	4a1c      	ldr	r2, [pc, #112]	; (1c9ac <qspi_nor_read+0x17c>)
   1c93c:	4294      	cmp	r4, r2
   1c93e:	d120      	bne.n	1c982 <qspi_nor_read+0x152>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c940:	687b      	ldr	r3, [r7, #4]
   1c942:	462a      	mov	r2, r5
   1c944:	3308      	adds	r3, #8
   1c946:	4640      	mov	r0, r8
   1c948:	19d9      	adds	r1, r3, r7
   1c94a:	f00e ffef 	bl	2b92c <memcpy>
	if (flash_suffix != 0) {
   1c94e:	f1bb 0f00 	cmp.w	fp, #0
   1c952:	d023      	beq.n	1c99c <qspi_nor_read+0x16c>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1c954:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1c956:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1c958:	4452      	add	r2, sl
   1c95a:	1878      	adds	r0, r7, r1
   1c95c:	f00e f870 	bl	2aa40 <nrfx_qspi_read>
   1c960:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1c962:	4601      	mov	r1, r0
   1c964:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c968:	f7ff fc5e 	bl	1c228 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1c96c:	4b0f      	ldr	r3, [pc, #60]	; (1c9ac <qspi_nor_read+0x17c>)
   1c96e:	429c      	cmp	r4, r3
   1c970:	d107      	bne.n	1c982 <qspi_nor_read+0x152>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1c972:	eb0a 0005 	add.w	r0, sl, r5
   1c976:	465a      	mov	r2, fp
   1c978:	f107 0108 	add.w	r1, r7, #8
   1c97c:	4440      	add	r0, r8
   1c97e:	f00e ffd5 	bl	2b92c <memcpy>
	k_sem_give(&dev_data->sem);
   1c982:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c986:	3018      	adds	r0, #24
   1c988:	f00d fbb5 	bl	2a0f6 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1c98c:	4620      	mov	r0, r4
   1c98e:	f7ff fc31 	bl	1c1f4 <qspi_get_zephyr_ret_code>
   1c992:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1c994:	4648      	mov	r0, r9
   1c996:	f7ff fc7b 	bl	1c290 <qspi_device_uninit>
	return rc;
   1c99a:	e76f      	b.n	1c87c <qspi_nor_read+0x4c>
	return res;
   1c99c:	4c03      	ldr	r4, [pc, #12]	; (1c9ac <qspi_nor_read+0x17c>)
   1c99e:	e7f0      	b.n	1c982 <qspi_nor_read+0x152>
		return 0;
   1c9a0:	461d      	mov	r5, r3
   1c9a2:	e76b      	b.n	1c87c <qspi_nor_read+0x4c>
   1c9a4:	00031eef 	.word	0x00031eef
   1c9a8:	0002c8e4 	.word	0x0002c8e4
   1c9ac:	0bad0000 	.word	0x0bad0000

0001c9b0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1c9b0:	4b02      	ldr	r3, [pc, #8]	; (1c9bc <flash_nrf_pages_layout+0xc>)
   1c9b2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1c9b4:	2301      	movs	r3, #1
   1c9b6:	6013      	str	r3, [r2, #0]
}
   1c9b8:	4770      	bx	lr
   1c9ba:	bf00      	nop
   1c9bc:	20021968 	.word	0x20021968

0001c9c0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1c9c0:	4800      	ldr	r0, [pc, #0]	; (1c9c4 <flash_nrf_get_parameters+0x4>)
   1c9c2:	4770      	bx	lr
   1c9c4:	0002d690 	.word	0x0002d690

0001c9c8 <flash_nrf_read>:
{
   1c9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9cc:	460d      	mov	r5, r1
   1c9ce:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1c9d0:	4619      	mov	r1, r3
   1c9d2:	4628      	mov	r0, r5
{
   1c9d4:	461e      	mov	r6, r3
   1c9d6:	4614      	mov	r4, r2
	if (is_regular_addr_valid(addr, len)) {
   1c9d8:	f00d fbd2 	bl	2a180 <is_regular_addr_valid>
   1c9dc:	4603      	mov	r3, r0
   1c9de:	b9a8      	cbnz	r0, 1ca0c <flash_nrf_read+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c9e0:	46e8      	mov	r8, sp
   1c9e2:	b088      	sub	sp, #32
   1c9e4:	466c      	mov	r4, sp
   1c9e6:	4a10      	ldr	r2, [pc, #64]	; (1ca28 <flash_nrf_read+0x60>)
   1c9e8:	2104      	movs	r1, #4
   1c9ea:	e9c4 2505 	strd	r2, r5, [r4, #20]
   1c9ee:	4622      	mov	r2, r4
   1c9f0:	61e6      	str	r6, [r4, #28]
   1c9f2:	f842 1f10 	str.w	r1, [r2, #16]!
   1c9f6:	480d      	ldr	r0, [pc, #52]	; (1ca2c <flash_nrf_read+0x64>)
   1c9f8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c9fc:	f7f1 fdc8 	bl	e590 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1ca00:	f06f 0015 	mvn.w	r0, #21
   1ca04:	46c5      	mov	sp, r8
}
   1ca06:	46bd      	mov	sp, r7
   1ca08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!len) {
   1ca0c:	b156      	cbz	r6, 1ca24 <flash_nrf_read+0x5c>
	if (addr < PM_APP_ADDRESS) {
   1ca0e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1ca12:	4632      	mov	r2, r6
   1ca14:	4629      	mov	r1, r5
   1ca16:	4620      	mov	r0, r4
	if (addr < PM_APP_ADDRESS) {
   1ca18:	da02      	bge.n	1ca20 <flash_nrf_read+0x58>
		return soc_secure_mem_read(data, (void *)addr, len);
   1ca1a:	f00a f884 	bl	26b26 <soc_secure_mem_read>
   1ca1e:	e7f2      	b.n	1ca06 <flash_nrf_read+0x3e>
   1ca20:	f00e ff84 	bl	2b92c <memcpy>
		return 0;
   1ca24:	2000      	movs	r0, #0
   1ca26:	e7ee      	b.n	1ca06 <flash_nrf_read+0x3e>
   1ca28:	00031f49 	.word	0x00031f49
   1ca2c:	0002c87c 	.word	0x0002c87c

0001ca30 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1ca30:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ca32:	2201      	movs	r2, #1
   1ca34:	4806      	ldr	r0, [pc, #24]	; (1ca50 <nrf_flash_init+0x20>)
   1ca36:	4611      	mov	r1, r2
   1ca38:	f00e fdb6 	bl	2b5a8 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1ca3c:	f00d fff7 	bl	2aa2e <nrfx_nvmc_flash_page_count_get>
   1ca40:	4c04      	ldr	r4, [pc, #16]	; (1ca54 <nrf_flash_init+0x24>)
   1ca42:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1ca44:	f00d fff0 	bl	2aa28 <nrfx_nvmc_flash_page_size_get>
   1ca48:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1ca4a:	2000      	movs	r0, #0
   1ca4c:	bd10      	pop	{r4, pc}
   1ca4e:	bf00      	nop
   1ca50:	20021970 	.word	0x20021970
   1ca54:	20021968 	.word	0x20021968

0001ca58 <flash_nrf_erase>:
{
   1ca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca5c:	af00      	add	r7, sp, #0
   1ca5e:	460e      	mov	r6, r1
   1ca60:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ca62:	f00d ffe1 	bl	2aa28 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1ca66:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ca68:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1ca6a:	4630      	mov	r0, r6
   1ca6c:	f00d fb88 	bl	2a180 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ca70:	46b0      	mov	r8, r6
	if (is_regular_addr_valid(addr, size)) {
   1ca72:	4603      	mov	r3, r0
   1ca74:	b3b8      	cbz	r0, 1cae6 <flash_nrf_erase+0x8e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ca76:	fbb6 f3f5 	udiv	r3, r6, r5
   1ca7a:	fb05 6313 	mls	r3, r5, r3, r6
   1ca7e:	b923      	cbnz	r3, 1ca8a <flash_nrf_erase+0x32>
   1ca80:	fbb4 f3f5 	udiv	r3, r4, r5
   1ca84:	fb05 4313 	mls	r3, r5, r3, r4
   1ca88:	b19b      	cbz	r3, 1cab2 <flash_nrf_erase+0x5a>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1ca8a:	466d      	mov	r5, sp
   1ca8c:	b088      	sub	sp, #32
   1ca8e:	466a      	mov	r2, sp
   1ca90:	4b1a      	ldr	r3, [pc, #104]	; (1cafc <flash_nrf_erase+0xa4>)
   1ca92:	61d4      	str	r4, [r2, #28]
   1ca94:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1ca98:	2304      	movs	r3, #4
   1ca9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ca9e:	2300      	movs	r3, #0
   1caa0:	4817      	ldr	r0, [pc, #92]	; (1cb00 <flash_nrf_erase+0xa8>)
   1caa2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1caa6:	f7f1 fd73 	bl	e590 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1caaa:	f06f 0015 	mvn.w	r0, #21
   1caae:	46ad      	mov	sp, r5
		return -EINVAL;
   1cab0:	e002      	b.n	1cab8 <flash_nrf_erase+0x60>
		if (!n_pages) {
   1cab2:	42ac      	cmp	r4, r5
   1cab4:	d203      	bcs.n	1cabe <flash_nrf_erase+0x66>
			return 0;
   1cab6:	2000      	movs	r0, #0
}
   1cab8:	46bd      	mov	sp, r7
   1caba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
   1cabe:	f04f 32ff 	mov.w	r2, #4294967295
   1cac2:	f04f 33ff 	mov.w	r3, #4294967295
   1cac6:	480f      	ldr	r0, [pc, #60]	; (1cb04 <flash_nrf_erase+0xac>)
   1cac8:	f004 ff46 	bl	21958 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1cacc:	f00d ffac 	bl	2aa28 <nrfx_nvmc_flash_page_size_get>
   1cad0:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1cad2:	4640      	mov	r0, r8
   1cad4:	f002 fafc 	bl	1f0d0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1cad8:	1b64      	subs	r4, r4, r5
   1cada:	44a8      	add	r8, r5
   1cadc:	d1f9      	bne.n	1cad2 <flash_nrf_erase+0x7a>
	z_impl_k_sem_give(sem);
   1cade:	4809      	ldr	r0, [pc, #36]	; (1cb04 <flash_nrf_erase+0xac>)
   1cae0:	f004 fef6 	bl	218d0 <z_impl_k_sem_give>
}
   1cae4:	e7e7      	b.n	1cab6 <flash_nrf_erase+0x5e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1cae6:	466d      	mov	r5, sp
   1cae8:	b088      	sub	sp, #32
   1caea:	466a      	mov	r2, sp
   1caec:	4906      	ldr	r1, [pc, #24]	; (1cb08 <flash_nrf_erase+0xb0>)
   1caee:	61d4      	str	r4, [r2, #28]
   1caf0:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1caf4:	2104      	movs	r1, #4
   1caf6:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1cafa:	e7d1      	b.n	1caa0 <flash_nrf_erase+0x48>
   1cafc:	00031f66 	.word	0x00031f66
   1cb00:	0002c87c 	.word	0x0002c87c
   1cb04:	20021970 	.word	0x20021970
   1cb08:	00031f49 	.word	0x00031f49

0001cb0c <flash_nrf_write>:
{
   1cb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb10:	460e      	mov	r6, r1
   1cb12:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1cb14:	4619      	mov	r1, r3
   1cb16:	4630      	mov	r0, r6
{
   1cb18:	461c      	mov	r4, r3
   1cb1a:	4690      	mov	r8, r2
	if (is_regular_addr_valid(addr, len)) {
   1cb1c:	f00d fb30 	bl	2a180 <is_regular_addr_valid>
   1cb20:	4603      	mov	r3, r0
   1cb22:	b9a0      	cbnz	r0, 1cb4e <flash_nrf_write+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1cb24:	466d      	mov	r5, sp
   1cb26:	b088      	sub	sp, #32
   1cb28:	466a      	mov	r2, sp
   1cb2a:	4920      	ldr	r1, [pc, #128]	; (1cbac <flash_nrf_write+0xa0>)
   1cb2c:	61d4      	str	r4, [r2, #28]
   1cb2e:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1cb32:	2104      	movs	r1, #4
   1cb34:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1cb38:	481d      	ldr	r0, [pc, #116]	; (1cbb0 <flash_nrf_write+0xa4>)
   1cb3a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cb3e:	f7f1 fd27 	bl	e590 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1cb42:	f06f 0015 	mvn.w	r0, #21
   1cb46:	46ad      	mov	sp, r5
}
   1cb48:	46bd      	mov	sp, r7
   1cb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1cb4e:	ea46 0504 	orr.w	r5, r6, r4
   1cb52:	f015 0503 	ands.w	r5, r5, #3
   1cb56:	d00b      	beq.n	1cb70 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1cb58:	466d      	mov	r5, sp
   1cb5a:	b088      	sub	sp, #32
   1cb5c:	466a      	mov	r2, sp
   1cb5e:	4b15      	ldr	r3, [pc, #84]	; (1cbb4 <flash_nrf_write+0xa8>)
   1cb60:	61d4      	str	r4, [r2, #28]
   1cb62:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1cb66:	2304      	movs	r3, #4
   1cb68:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb6c:	2300      	movs	r3, #0
   1cb6e:	e7e3      	b.n	1cb38 <flash_nrf_write+0x2c>
	if (!len) {
   1cb70:	b1a4      	cbz	r4, 1cb9c <flash_nrf_write+0x90>
	return z_impl_k_sem_take(sem, timeout);
   1cb72:	f04f 32ff 	mov.w	r2, #4294967295
   1cb76:	f04f 33ff 	mov.w	r3, #4294967295
   1cb7a:	480f      	ldr	r0, [pc, #60]	; (1cbb8 <flash_nrf_write+0xac>)
   1cb7c:	f004 feec 	bl	21958 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1cb80:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1cb84:	42a5      	cmp	r5, r4
   1cb86:	eb05 0006 	add.w	r0, r5, r6
   1cb8a:	d109      	bne.n	1cba0 <flash_nrf_write+0x94>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1cb8c:	4a0b      	ldr	r2, [pc, #44]	; (1cbbc <flash_nrf_write+0xb0>)
   1cb8e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1cb92:	07db      	lsls	r3, r3, #31
   1cb94:	d5fb      	bpl.n	1cb8e <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   1cb96:	4808      	ldr	r0, [pc, #32]	; (1cbb8 <flash_nrf_write+0xac>)
   1cb98:	f004 fe9a 	bl	218d0 <z_impl_k_sem_give>
	return ret;
   1cb9c:	2000      	movs	r0, #0
   1cb9e:	e7d3      	b.n	1cb48 <flash_nrf_write+0x3c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1cba0:	f858 1005 	ldr.w	r1, [r8, r5]
   1cba4:	f002 fac6 	bl	1f134 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1cba8:	3504      	adds	r5, #4
}
   1cbaa:	e7eb      	b.n	1cb84 <flash_nrf_write+0x78>
   1cbac:	00031f49 	.word	0x00031f49
   1cbb0:	0002c87c 	.word	0x0002c87c
   1cbb4:	00031f85 	.word	0x00031f85
   1cbb8:	20021970 	.word	0x20021970
   1cbbc:	40039000 	.word	0x40039000

0001cbc0 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1cbc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cbc2:	461d      	mov	r5, r3
	return config->uarte_regs;
   1cbc4:	6843      	ldr	r3, [r0, #4]
{
   1cbc6:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1cbc8:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1cbca:	f8d3 c000 	ldr.w	ip, [r3]
   1cbce:	f04f 0320 	mov.w	r3, #32
   1cbd2:	f3ef 8711 	mrs	r7, BASEPRI
   1cbd6:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbda:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1cbde:	68e3      	ldr	r3, [r4, #12]
   1cbe0:	68d8      	ldr	r0, [r3, #12]
   1cbe2:	b138      	cbz	r0, 1cbf4 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1cbe4:	f387 8811 	msr	BASEPRI, r7
   1cbe8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1cbec:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1cbf0:	b003      	add	sp, #12
   1cbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1cbf4:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1cbf6:	68e3      	ldr	r3, [r4, #12]
   1cbf8:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1cbfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1cbfe:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1cc02:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1cc06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1cc0a:	68e3      	ldr	r3, [r4, #12]
   1cc0c:	d111      	bne.n	1cc32 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1cc0e:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1cc10:	68e3      	ldr	r3, [r4, #12]
   1cc12:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1cc14:	4621      	mov	r1, r4
   1cc16:	4630      	mov	r0, r6
   1cc18:	f00d fc9a 	bl	2a550 <start_tx_locked>
   1cc1c:	f387 8811 	msr	BASEPRI, r7
   1cc20:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1cc24:	7ae3      	ldrb	r3, [r4, #11]
   1cc26:	2b01      	cmp	r3, #1
   1cc28:	d101      	bne.n	1cc2e <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1cc2a:	1c6b      	adds	r3, r5, #1
   1cc2c:	d106      	bne.n	1cc3c <uarte_nrfx_tx+0x7c>
	return 0;
   1cc2e:	2000      	movs	r0, #0
   1cc30:	e7de      	b.n	1cbf0 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1cc32:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1cc34:	4620      	mov	r0, r4
   1cc36:	f00d fc04 	bl	2a442 <setup_tx_cache>
   1cc3a:	e7eb      	b.n	1cc14 <uarte_nrfx_tx+0x54>
   1cc3c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1cc40:	2100      	movs	r1, #0
   1cc42:	480a      	ldr	r0, [pc, #40]	; (1cc6c <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1cc44:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1cc48:	2300      	movs	r3, #0
   1cc4a:	fbc5 0106 	smlal	r0, r1, r5, r6
   1cc4e:	4a08      	ldr	r2, [pc, #32]	; (1cc70 <uarte_nrfx_tx+0xb0>)
   1cc50:	f7ec f9d6 	bl	9000 <__aeabi_uldivmod>
   1cc54:	68e4      	ldr	r4, [r4, #12]
   1cc56:	4602      	mov	r2, r0
   1cc58:	460b      	mov	r3, r1
   1cc5a:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1cc5c:	2000      	movs	r0, #0
   1cc5e:	2100      	movs	r1, #0
   1cc60:	e9cd 0100 	strd	r0, r1, [sp]
   1cc64:	4620      	mov	r0, r4
   1cc66:	f007 fa45 	bl	240f4 <z_impl_k_timer_start>
   1cc6a:	e7e0      	b.n	1cc2e <uarte_nrfx_tx+0x6e>
   1cc6c:	000f423f 	.word	0x000f423f
   1cc70:	000f4240 	.word	0x000f4240

0001cc74 <uarte_nrfx_configure>:
{
   1cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1cc76:	794b      	ldrb	r3, [r1, #5]
   1cc78:	2b01      	cmp	r3, #1
   1cc7a:	d029      	beq.n	1ccd0 <uarte_nrfx_configure+0x5c>
   1cc7c:	2b03      	cmp	r3, #3
   1cc7e:	d124      	bne.n	1ccca <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1cc80:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1cc82:	798b      	ldrb	r3, [r1, #6]
   1cc84:	2b03      	cmp	r3, #3
   1cc86:	d120      	bne.n	1ccca <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1cc88:	79ce      	ldrb	r6, [r1, #7]
   1cc8a:	b10e      	cbz	r6, 1cc90 <uarte_nrfx_configure+0x1c>
   1cc8c:	2e01      	cmp	r6, #1
   1cc8e:	d11c      	bne.n	1ccca <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1cc90:	790a      	ldrb	r2, [r1, #4]
   1cc92:	2a01      	cmp	r2, #1
   1cc94:	d01e      	beq.n	1ccd4 <uarte_nrfx_configure+0x60>
   1cc96:	2a02      	cmp	r2, #2
   1cc98:	d020      	beq.n	1ccdc <uarte_nrfx_configure+0x68>
   1cc9a:	b9b2      	cbnz	r2, 1ccca <uarte_nrfx_configure+0x56>
   1cc9c:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1cc9e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1cca0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1cca2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1cca6:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1ccaa:	d06e      	beq.n	1cd8a <uarte_nrfx_configure+0x116>
   1ccac:	d833      	bhi.n	1cd16 <uarte_nrfx_configure+0xa2>
   1ccae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1ccb2:	d06d      	beq.n	1cd90 <uarte_nrfx_configure+0x11c>
   1ccb4:	d81c      	bhi.n	1ccf0 <uarte_nrfx_configure+0x7c>
   1ccb6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1ccba:	d06b      	beq.n	1cd94 <uarte_nrfx_configure+0x120>
   1ccbc:	d810      	bhi.n	1cce0 <uarte_nrfx_configure+0x6c>
   1ccbe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1ccc2:	d06a      	beq.n	1cd9a <uarte_nrfx_configure+0x126>
   1ccc4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1ccc8:	d06a      	beq.n	1cda0 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1ccca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ccce:	e05b      	b.n	1cd88 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1ccd0:	2700      	movs	r7, #0
   1ccd2:	e7d6      	b.n	1cc82 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1ccd4:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1ccd8:	220e      	movs	r2, #14
   1ccda:	e7e0      	b.n	1cc9e <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1ccdc:	2400      	movs	r4, #0
   1ccde:	e7fb      	b.n	1ccd8 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1cce0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1cce4:	d05f      	beq.n	1cda6 <uarte_nrfx_configure+0x132>
   1cce6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1ccea:	d1ee      	bne.n	1ccca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1ccec:	4b38      	ldr	r3, [pc, #224]	; (1cdd0 <uarte_nrfx_configure+0x15c>)
   1ccee:	e03c      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1ccf0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1ccf4:	d05a      	beq.n	1cdac <uarte_nrfx_configure+0x138>
   1ccf6:	d807      	bhi.n	1cd08 <uarte_nrfx_configure+0x94>
   1ccf8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1ccfc:	d058      	beq.n	1cdb0 <uarte_nrfx_configure+0x13c>
   1ccfe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1cd02:	d1e2      	bne.n	1ccca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1cd04:	4b33      	ldr	r3, [pc, #204]	; (1cdd4 <uarte_nrfx_configure+0x160>)
   1cd06:	e030      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1cd08:	f647 2512 	movw	r5, #31250	; 0x7a12
   1cd0c:	42ab      	cmp	r3, r5
   1cd0e:	d1dc      	bne.n	1ccca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1cd10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1cd14:	e029      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1cd16:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1cd1a:	d04b      	beq.n	1cdb4 <uarte_nrfx_configure+0x140>
   1cd1c:	d813      	bhi.n	1cd46 <uarte_nrfx_configure+0xd2>
   1cd1e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1cd22:	d04a      	beq.n	1cdba <uarte_nrfx_configure+0x146>
   1cd24:	d809      	bhi.n	1cd3a <uarte_nrfx_configure+0xc6>
   1cd26:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1cd2a:	42ab      	cmp	r3, r5
   1cd2c:	d047      	beq.n	1cdbe <uarte_nrfx_configure+0x14a>
   1cd2e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1cd32:	d1ca      	bne.n	1ccca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1cd34:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1cd38:	e017      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1cd3a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1cd3e:	d1c4      	bne.n	1ccca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1cd40:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1cd44:	e011      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1cd46:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1cd4a:	d03b      	beq.n	1cdc4 <uarte_nrfx_configure+0x150>
   1cd4c:	d808      	bhi.n	1cd60 <uarte_nrfx_configure+0xec>
   1cd4e:	4d22      	ldr	r5, [pc, #136]	; (1cdd8 <uarte_nrfx_configure+0x164>)
   1cd50:	42ab      	cmp	r3, r5
   1cd52:	d03a      	beq.n	1cdca <uarte_nrfx_configure+0x156>
   1cd54:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1cd58:	d1b7      	bne.n	1ccca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1cd5a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1cd5e:	e004      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1cd60:	4d1e      	ldr	r5, [pc, #120]	; (1cddc <uarte_nrfx_configure+0x168>)
   1cd62:	42ab      	cmp	r3, r5
   1cd64:	d1b1      	bne.n	1ccca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1cd66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1cd6a:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1cd6c:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1cd70:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1cd72:	433a      	orrs	r2, r7
   1cd74:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1cd76:	4334      	orrs	r4, r6
   1cd78:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1cd7a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1cd7e:	1d2b      	adds	r3, r5, #4
   1cd80:	c903      	ldmia	r1, {r0, r1}
   1cd82:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1cd86:	2000      	movs	r0, #0
}
   1cd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1cd8a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1cd8e:	e7ec      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1cd90:	4b13      	ldr	r3, [pc, #76]	; (1cde0 <uarte_nrfx_configure+0x16c>)
   1cd92:	e7ea      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1cd94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1cd98:	e7e7      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1cd9a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1cd9e:	e7e4      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1cda0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1cda4:	e7e1      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1cda6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1cdaa:	e7de      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1cdac:	4b0d      	ldr	r3, [pc, #52]	; (1cde4 <uarte_nrfx_configure+0x170>)
   1cdae:	e7dc      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1cdb0:	4b0d      	ldr	r3, [pc, #52]	; (1cde8 <uarte_nrfx_configure+0x174>)
   1cdb2:	e7da      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1cdb4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1cdb8:	e7d7      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1cdba:	4b0c      	ldr	r3, [pc, #48]	; (1cdec <uarte_nrfx_configure+0x178>)
   1cdbc:	e7d5      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1cdbe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1cdc2:	e7d2      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1cdc4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1cdc8:	e7cf      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1cdca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1cdce:	e7cc      	b.n	1cd6a <uarte_nrfx_configure+0xf6>
   1cdd0:	0013b000 	.word	0x0013b000
   1cdd4:	004ea000 	.word	0x004ea000
   1cdd8:	0003d090 	.word	0x0003d090
   1cddc:	000f4240 	.word	0x000f4240
   1cde0:	00275000 	.word	0x00275000
   1cde4:	0075c000 	.word	0x0075c000
   1cde8:	003af000 	.word	0x003af000
   1cdec:	013a9000 	.word	0x013a9000

0001cdf0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1cdf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cdf4:	4607      	mov	r7, r0
   1cdf6:	b087      	sub	sp, #28
   1cdf8:	2200      	movs	r2, #0
   1cdfa:	2101      	movs	r1, #1
   1cdfc:	2008      	movs	r0, #8
   1cdfe:	f7f3 fcbd 	bl	1077c <z_arm_irq_priority_set>
   1ce02:	2008      	movs	r0, #8
   1ce04:	f7f3 fc8a 	bl	1071c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1ce08:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   1ce0a:	f8d7 9004 	ldr.w	r9, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1ce0e:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1ce10:	f8d9 4000 	ldr.w	r4, [r9]
	ret = pinctrl_lookup_state(config, id, &state);
   1ce14:	466a      	mov	r2, sp
   1ce16:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1ce1a:	6037      	str	r7, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1ce1c:	f8d9 800c 	ldr.w	r8, [r9, #12]
   1ce20:	4640      	mov	r0, r8
   1ce22:	f00d fc47 	bl	2a6b4 <pinctrl_lookup_state>
	if (ret < 0) {
   1ce26:	1e05      	subs	r5, r0, #0
   1ce28:	db26      	blt.n	1ce78 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   1ce2a:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1ce2c:	f8d8 2000 	ldr.w	r2, [r8]
   1ce30:	7919      	ldrb	r1, [r3, #4]
   1ce32:	6818      	ldr	r0, [r3, #0]
   1ce34:	f00d fc51 	bl	2a6da <pinctrl_configure_pins>
	if (err < 0) {
   1ce38:	1e05      	subs	r5, r0, #0
   1ce3a:	db1d      	blt.n	1ce78 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1ce3c:	4638      	mov	r0, r7
   1ce3e:	1d31      	adds	r1, r6, #4
   1ce40:	f7ff ff18 	bl	1cc74 <uarte_nrfx_configure>
	if (err) {
   1ce44:	4605      	mov	r5, r0
   1ce46:	b9b8      	cbnz	r0, 1ce78 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1ce48:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1ce4c:	0799      	lsls	r1, r3, #30
   1ce4e:	d533      	bpl.n	1ceb8 <uarte_0_init+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1ce50:	f106 001c 	add.w	r0, r6, #28
   1ce54:	f001 fc62 	bl	1e71c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1ce58:	4b4f      	ldr	r3, [pc, #316]	; (1cf98 <uarte_0_init+0x1a8>)
   1ce5a:	4298      	cmp	r0, r3
   1ce5c:	d010      	beq.n	1ce80 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1ce5e:	4b4f      	ldr	r3, [pc, #316]	; (1cf9c <uarte_0_init+0x1ac>)
   1ce60:	9305      	str	r3, [sp, #20]
   1ce62:	2302      	movs	r3, #2
   1ce64:	9304      	str	r3, [sp, #16]
   1ce66:	462b      	mov	r3, r5
		return -EIO;
   1ce68:	f06f 0504 	mvn.w	r5, #4
   1ce6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ce70:	484b      	ldr	r0, [pc, #300]	; (1cfa0 <uarte_0_init+0x1b0>)
   1ce72:	aa04      	add	r2, sp, #16
   1ce74:	f7f1 fb8c 	bl	e590 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1ce78:	4628      	mov	r0, r5
   1ce7a:	b007      	add	sp, #28
   1ce7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ce80:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1ce82:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1ce86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ce8a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1ce8e:	d10b      	bne.n	1cea8 <uarte_0_init+0xb8>
   1ce90:	4944      	ldr	r1, [pc, #272]	; (1cfa4 <uarte_0_init+0x1b4>)
   1ce92:	4845      	ldr	r0, [pc, #276]	; (1cfa8 <uarte_0_init+0x1b8>)
   1ce94:	f240 234e 	movw	r3, #590	; 0x24e
   1ce98:	4a44      	ldr	r2, [pc, #272]	; (1cfac <uarte_0_init+0x1bc>)
   1ce9a:	f009 fd42 	bl	26922 <assert_print>
   1ce9e:	f240 214e 	movw	r1, #590	; 0x24e
   1cea2:	4842      	ldr	r0, [pc, #264]	; (1cfac <uarte_0_init+0x1bc>)
   1cea4:	f009 fd36 	bl	26914 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1cea8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1ceac:	2301      	movs	r3, #1
   1ceae:	7f32      	ldrb	r2, [r6, #28]
   1ceb0:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1ceb2:	4a3f      	ldr	r2, [pc, #252]	; (1cfb0 <uarte_0_init+0x1c0>)
   1ceb4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1ceb8:	68f3      	ldr	r3, [r6, #12]
   1ceba:	2b00      	cmp	r3, #0
   1cebc:	d059      	beq.n	1cf72 <uarte_0_init+0x182>
    p_reg->INTENSET = mask;
   1cebe:	2204      	movs	r2, #4
	return config->uarte_regs;
   1cec0:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1cec2:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1cec6:	681b      	ldr	r3, [r3, #0]
   1cec8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1cecc:	2201      	movs	r2, #1
   1cece:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1ced2:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1ced6:	4937      	ldr	r1, [pc, #220]	; (1cfb4 <uarte_0_init+0x1c4>)
   1ced8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cedc:	2108      	movs	r1, #8
   1cede:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cee2:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1cee6:	b1a1      	cbz	r1, 1cf12 <uarte_0_init+0x122>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cee8:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ceea:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1ceee:	b91a      	cbnz	r2, 1cef8 <uarte_0_init+0x108>
   1cef0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1cef4:	2a00      	cmp	r2, #0
   1cef6:	d0f8      	beq.n	1ceea <uarte_0_init+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cef8:	2200      	movs	r2, #0
   1cefa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1cefe:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1cf02:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1cf06:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1cf0a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1cf0e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1cf12:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1cf16:	2200      	movs	r2, #0
   1cf18:	4927      	ldr	r1, [pc, #156]	; (1cfb8 <uarte_0_init+0x1c8>)
   1cf1a:	3080      	adds	r0, #128	; 0x80
   1cf1c:	f00e fc15 	bl	2b74a <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1cf20:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1cf24:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1cf28:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1cf2c:	2200      	movs	r2, #0
   1cf2e:	4923      	ldr	r1, [pc, #140]	; (1cfbc <uarte_0_init+0x1cc>)
   1cf30:	3020      	adds	r0, #32
   1cf32:	f00e fc0a 	bl	2b74a <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1cf36:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1cf3a:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1cf3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1cf42:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1cf44:	bf5c      	itt	pl
   1cf46:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1cf4a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cf4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1cf52:	06db      	lsls	r3, r3, #27
   1cf54:	bf44      	itt	mi
   1cf56:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1cf5a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cf5e:	6973      	ldr	r3, [r6, #20]
   1cf60:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cf64:	2300      	movs	r3, #0
   1cf66:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf6a:	2301      	movs	r3, #1
   1cf6c:	60a3      	str	r3, [r4, #8]
   1cf6e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1cf70:	e782      	b.n	1ce78 <uarte_0_init+0x88>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cf72:	2308      	movs	r3, #8
   1cf74:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1cf78:	f899 3008 	ldrb.w	r3, [r9, #8]
   1cf7c:	2b00      	cmp	r3, #0
   1cf7e:	d1de      	bne.n	1cf3e <uarte_0_init+0x14e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cf80:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1cf84:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1cf88:	69b3      	ldr	r3, [r6, #24]
   1cf8a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1cf8e:	2301      	movs	r3, #1
   1cf90:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf94:	6023      	str	r3, [r4, #0]
}
   1cf96:	e7d2      	b.n	1cf3e <uarte_0_init+0x14e>
   1cf98:	0bad0000 	.word	0x0bad0000
   1cf9c:	00031fc4 	.word	0x00031fc4
   1cfa0:	0002c90c 	.word	0x0002c90c
   1cfa4:	0002e821 	.word	0x0002e821
   1cfa8:	0002d881 	.word	0x0002d881
   1cfac:	0002e7e9 	.word	0x0002e7e9
   1cfb0:	40017000 	.word	0x40017000
   1cfb4:	000a0210 	.word	0x000a0210
   1cfb8:	0002a587 	.word	0x0002a587
   1cfbc:	0002a657 	.word	0x0002a657

0001cfc0 <uarte_nrfx_poll_out>:
{
   1cfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfc4:	4604      	mov	r4, r0
   1cfc6:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1cfc8:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1cfca:	f00e fa9c 	bl	2b506 <k_is_in_isr>
   1cfce:	b9b0      	cbnz	r0, 1cffe <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1cfd0:	4b2a      	ldr	r3, [pc, #168]	; (1d07c <uarte_nrfx_poll_out+0xbc>)
   1cfd2:	781b      	ldrb	r3, [r3, #0]
   1cfd4:	b19b      	cbz	r3, 1cffe <uarte_nrfx_poll_out+0x3e>
{
   1cfd6:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1cfd8:	6860      	ldr	r0, [r4, #4]
   1cfda:	f00d faa9 	bl	2a530 <is_tx_ready.isra.0>
   1cfde:	2800      	cmp	r0, #0
   1cfe0:	d138      	bne.n	1d054 <uarte_nrfx_poll_out+0x94>
   1cfe2:	2001      	movs	r0, #1
   1cfe4:	f00d fca3 	bl	2a92e <nrfx_busy_wait>
   1cfe8:	3f01      	subs	r7, #1
   1cfea:	d1f5      	bne.n	1cfd8 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1cfec:	2100      	movs	r1, #0
   1cfee:	2021      	movs	r0, #33	; 0x21
   1cff0:	f006 fb62 	bl	236b8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1cff4:	e7ef      	b.n	1cfd6 <uarte_nrfx_poll_out+0x16>
   1cff6:	f381 8811 	msr	BASEPRI, r1
   1cffa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1cffe:	f04f 0320 	mov.w	r3, #32
   1d002:	f3ef 8111 	mrs	r1, BASEPRI
   1d006:	f383 8812 	msr	BASEPRI_MAX, r3
   1d00a:	f3bf 8f6f 	isb	sy
   1d00e:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1d012:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1d014:	4640      	mov	r0, r8
   1d016:	f00d fa8b 	bl	2a530 <is_tx_ready.isra.0>
   1d01a:	2800      	cmp	r0, #0
   1d01c:	d0eb      	beq.n	1cff6 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1d01e:	68eb      	ldr	r3, [r5, #12]
   1d020:	b15b      	cbz	r3, 1d03a <uarte_nrfx_poll_out+0x7a>
   1d022:	68da      	ldr	r2, [r3, #12]
   1d024:	b14a      	cbz	r2, 1d03a <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1d026:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1d02a:	2a00      	cmp	r2, #0
   1d02c:	da05      	bge.n	1d03a <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1d02e:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1d032:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1d036:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1d03a:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1d03c:	2201      	movs	r2, #1
	*data->char_out = c;
   1d03e:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1d040:	4620      	mov	r0, r4
   1d042:	6969      	ldr	r1, [r5, #20]
   1d044:	f00d f91d 	bl	2a282 <tx_start>
	__asm__ volatile(
   1d048:	f387 8811 	msr	BASEPRI, r7
   1d04c:	f3bf 8f6f 	isb	sy
}
   1d050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d054:	f04f 0320 	mov.w	r3, #32
   1d058:	f3ef 8111 	mrs	r1, BASEPRI
   1d05c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d060:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d064:	6860      	ldr	r0, [r4, #4]
   1d066:	460f      	mov	r7, r1
   1d068:	f00d fa62 	bl	2a530 <is_tx_ready.isra.0>
   1d06c:	2800      	cmp	r0, #0
   1d06e:	d1e4      	bne.n	1d03a <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1d070:	f381 8811 	msr	BASEPRI, r1
   1d074:	f3bf 8f6f 	isb	sy
}
   1d078:	e7b8      	b.n	1cfec <uarte_nrfx_poll_out+0x2c>
   1d07a:	bf00      	nop
   1d07c:	200228ed 	.word	0x200228ed

0001d080 <uarte_nrfx_rx_enable>:
{
   1d080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1d084:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1d088:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1d08a:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1d08e:	4605      	mov	r5, r0
   1d090:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1d092:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d094:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1d098:	b172      	cbz	r2, 1d0b8 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1d09a:	4944      	ldr	r1, [pc, #272]	; (1d1ac <uarte_nrfx_rx_enable+0x12c>)
   1d09c:	f240 337d 	movw	r3, #893	; 0x37d
   1d0a0:	4a43      	ldr	r2, [pc, #268]	; (1d1b0 <uarte_nrfx_rx_enable+0x130>)
   1d0a2:	4844      	ldr	r0, [pc, #272]	; (1d1b4 <uarte_nrfx_rx_enable+0x134>)
   1d0a4:	f009 fc3d 	bl	26922 <assert_print>
   1d0a8:	4843      	ldr	r0, [pc, #268]	; (1d1b8 <uarte_nrfx_rx_enable+0x138>)
   1d0aa:	f009 fc3a 	bl	26922 <assert_print>
   1d0ae:	f240 317d 	movw	r1, #893	; 0x37d
   1d0b2:	483f      	ldr	r0, [pc, #252]	; (1d1b0 <uarte_nrfx_rx_enable+0x130>)
   1d0b4:	f009 fc2e 	bl	26914 <assert_post_action>
	if (data->async->rx_enabled) {
   1d0b8:	68e2      	ldr	r2, [r4, #12]
   1d0ba:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1d0be:	2900      	cmp	r1, #0
   1d0c0:	d170      	bne.n	1d1a4 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1d0c2:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1d0c6:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1d0c8:	bfca      	itet	gt
   1d0ca:	2205      	movgt	r2, #5
   1d0cc:	235c      	movle	r3, #92	; 0x5c
   1d0ce:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1d0d2:	68e2      	ldr	r2, [r4, #12]
   1d0d4:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1d0d6:	68e3      	ldr	r3, [r4, #12]
   1d0d8:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1d0dc:	68e3      	ldr	r3, [r4, #12]
   1d0de:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1d0e0:	2300      	movs	r3, #0
   1d0e2:	68e2      	ldr	r2, [r4, #12]
   1d0e4:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1d0e6:	68e2      	ldr	r2, [r4, #12]
   1d0e8:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1d0ea:	68e2      	ldr	r2, [r4, #12]
   1d0ec:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d0ee:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d0f2:	06da      	lsls	r2, r3, #27
   1d0f4:	d523      	bpl.n	1d13e <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1d0f6:	68e1      	ldr	r1, [r4, #12]
   1d0f8:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1d0fc:	b1fe      	cbz	r6, 1d13e <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1d0fe:	42be      	cmp	r6, r7
   1d100:	bf28      	it	cs
   1d102:	463e      	movcs	r6, r7
   1d104:	4640      	mov	r0, r8
   1d106:	4632      	mov	r2, r6
   1d108:	31c4      	adds	r1, #196	; 0xc4
   1d10a:	f00e fc0f 	bl	2b92c <memcpy>
			if (!len) {
   1d10e:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1d110:	44b0      	add	r8, r6
			if (!len) {
   1d112:	d114      	bne.n	1d13e <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1d114:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1d116:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1d118:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1d11c:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1d11e:	1b9b      	subs	r3, r3, r6
   1d120:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1d124:	f00d f8dc 	bl	2a2e0 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1d128:	68e1      	ldr	r1, [r4, #12]
   1d12a:	4628      	mov	r0, r5
   1d12c:	3158      	adds	r1, #88	; 0x58
   1d12e:	f00d f8f0 	bl	2a312 <rx_buf_release>
				notify_rx_disable(dev);
   1d132:	4628      	mov	r0, r5
   1d134:	f00d f905 	bl	2a342 <notify_rx_disable>
	return 0;
   1d138:	2000      	movs	r0, #0
}
   1d13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d13e:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d140:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d144:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d148:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1d14c:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1d150:	2201      	movs	r2, #1
   1d152:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1d156:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1d15a:	68e3      	ldr	r3, [r4, #12]
   1d15c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d160:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d164:	06db      	lsls	r3, r3, #27
   1d166:	d519      	bpl.n	1d19c <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1d168:	f04f 0320 	mov.w	r3, #32
   1d16c:	f3ef 8111 	mrs	r1, BASEPRI
   1d170:	f383 8812 	msr	BASEPRI_MAX, r3
   1d174:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1d178:	692b      	ldr	r3, [r5, #16]
   1d17a:	68db      	ldr	r3, [r3, #12]
   1d17c:	b12b      	cbz	r3, 1d18a <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1d17e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1d182:	f042 0202 	orr.w	r2, r2, #2
   1d186:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d18a:	2208      	movs	r2, #8
	return config->uarte_regs;
   1d18c:	686b      	ldr	r3, [r5, #4]
   1d18e:	681b      	ldr	r3, [r3, #0]
   1d190:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1d194:	f381 8811 	msr	BASEPRI, r1
   1d198:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d19c:	2301      	movs	r3, #1
   1d19e:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1d1a2:	e7c9      	b.n	1d138 <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1d1a4:	f06f 000f 	mvn.w	r0, #15
   1d1a8:	e7c7      	b.n	1d13a <uarte_nrfx_rx_enable+0xba>
   1d1aa:	bf00      	nop
   1d1ac:	000334e0 	.word	0x000334e0
   1d1b0:	00031fe3 	.word	0x00031fe3
   1d1b4:	0002d881 	.word	0x0002d881
   1d1b8:	00032017 	.word	0x00032017

0001d1bc <uarte_nrfx_isr_async>:
{
   1d1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1d1c0:	6843      	ldr	r3, [r0, #4]
{
   1d1c2:	4604      	mov	r4, r0
	return config->uarte_regs;
   1d1c4:	681d      	ldr	r5, [r3, #0]
{
   1d1c6:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d1c8:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1d1cc:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1d1ce:	b169      	cbz	r1, 1d1ec <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d1d0:	2200      	movs	r2, #0
   1d1d2:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1d1d6:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1d1da:	68da      	ldr	r2, [r3, #12]
   1d1dc:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1d1e0:	3301      	adds	r3, #1
   1d1e2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1d1e6:	b008      	add	sp, #32
   1d1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d1ec:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d1f0:	b323      	cbz	r3, 1d23c <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d1f2:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1d1f6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1d1fa:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1d1fc:	2214      	movs	r2, #20
	return config->uarte_regs;
   1d1fe:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1d200:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d202:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d206:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1d20a:	f00e fbc9 	bl	2b9a0 <memset>
   1d20e:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d210:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1d212:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d216:	f100 8103 	bmi.w	1d420 <uarte_nrfx_isr_async+0x264>
   1d21a:	07b3      	lsls	r3, r6, #30
   1d21c:	f100 8102 	bmi.w	1d424 <uarte_nrfx_isr_async+0x268>
   1d220:	0777      	lsls	r7, r6, #29
   1d222:	f100 8101 	bmi.w	1d428 <uarte_nrfx_isr_async+0x26c>
   1d226:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1d22a:	4620      	mov	r0, r4
   1d22c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1d22e:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1d232:	f00d f84e 	bl	2a2d2 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1d236:	4620      	mov	r0, r4
   1d238:	f00d f8e1 	bl	2a3fe <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d23c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1d240:	b38b      	cbz	r3, 1d2a6 <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1d242:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1d246:	06d8      	lsls	r0, r3, #27
   1d248:	d52d      	bpl.n	1d2a6 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d24a:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1d24e:	2201      	movs	r2, #1
   1d250:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1d254:	6926      	ldr	r6, [r4, #16]
   1d256:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1d25a:	6863      	ldr	r3, [r4, #4]
   1d25c:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1d25e:	68f3      	ldr	r3, [r6, #12]
   1d260:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1d264:	68f0      	ldr	r0, [r6, #12]
   1d266:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1d268:	f00e fa7b 	bl	2b762 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1d26c:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1d26e:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1d272:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1d276:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1d27a:	68f2      	ldr	r2, [r6, #12]
   1d27c:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1d27e:	1a1b      	subs	r3, r3, r0
   1d280:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1d282:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1d284:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1d288:	4408      	add	r0, r1
	if (rx_len > 0) {
   1d28a:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1d28c:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1d28e:	dd02      	ble.n	1d296 <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1d290:	4620      	mov	r0, r4
   1d292:	f00d f825 	bl	2a2e0 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1d296:	68f1      	ldr	r1, [r6, #12]
   1d298:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1d29c:	2b00      	cmp	r3, #0
   1d29e:	f040 80c5 	bne.w	1d42c <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1d2a2:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d2a6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1d2aa:	b383      	cbz	r3, 1d30e <uarte_nrfx_isr_async+0x152>
   1d2ac:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d2b0:	bb6e      	cbnz	r6, 1d30e <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1d2b2:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d2b4:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1d2b8:	4631      	mov	r1, r6
   1d2ba:	a803      	add	r0, sp, #12
   1d2bc:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1d2c0:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1d2c2:	f00e fb6d 	bl	2b9a0 <memset>
   1d2c6:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1d2c8:	a903      	add	r1, sp, #12
   1d2ca:	4620      	mov	r0, r4
	struct uart_event evt = {
   1d2cc:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1d2d0:	f00c ffff 	bl	2a2d2 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1d2d4:	68fb      	ldr	r3, [r7, #12]
   1d2d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1d2d8:	1c51      	adds	r1, r2, #1
   1d2da:	d018      	beq.n	1d30e <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1d2dc:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1d2de:	68ff      	ldr	r7, [r7, #12]
   1d2e0:	498e      	ldr	r1, [pc, #568]	; (1d51c <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1d2e2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1d2e4:	468e      	mov	lr, r1
   1d2e6:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1d2ea:	4631      	mov	r1, r6
   1d2ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1d2f0:	fbcc e100 	smlal	lr, r1, ip, r0
   1d2f4:	2300      	movs	r3, #0
   1d2f6:	4670      	mov	r0, lr
   1d2f8:	4a89      	ldr	r2, [pc, #548]	; (1d520 <uarte_nrfx_isr_async+0x364>)
   1d2fa:	f7eb fe81 	bl	9000 <__aeabi_uldivmod>
   1d2fe:	4602      	mov	r2, r0
   1d300:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1d302:	e9cd 0100 	strd	r0, r1, [sp]
   1d306:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1d30a:	f006 fef3 	bl	240f4 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d30e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d312:	b333      	cbz	r3, 1d362 <uarte_nrfx_isr_async+0x1a6>
   1d314:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d318:	bb1e      	cbnz	r6, 1d362 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d31a:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1d31e:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1d320:	4620      	mov	r0, r4
   1d322:	68f9      	ldr	r1, [r7, #12]
   1d324:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1d328:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1d32a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1d32e:	f00c fff0 	bl	2a312 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1d332:	68f9      	ldr	r1, [r7, #12]
   1d334:	4620      	mov	r0, r4
   1d336:	3164      	adds	r1, #100	; 0x64
   1d338:	f00c ffeb 	bl	2a312 <rx_buf_release>
	if (data->async->rx_enabled) {
   1d33c:	68fb      	ldr	r3, [r7, #12]
   1d33e:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1d342:	2a00      	cmp	r2, #0
   1d344:	f000 80a3 	beq.w	1d48e <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1d348:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d34c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d350:	06d8      	lsls	r0, r3, #27
   1d352:	d503      	bpl.n	1d35c <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1d354:	2102      	movs	r1, #2
   1d356:	4620      	mov	r0, r4
   1d358:	f00d f8c0 	bl	2a4dc <async_uart_release>
	notify_rx_disable(dev);
   1d35c:	4620      	mov	r0, r4
   1d35e:	f00c fff0 	bl	2a342 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d362:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1d366:	b1db      	cbz	r3, 1d3a0 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1d368:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1d36c:	05d9      	lsls	r1, r3, #23
   1d36e:	d517      	bpl.n	1d3a0 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1d370:	6863      	ldr	r3, [r4, #4]
   1d372:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1d374:	f04f 0120 	mov.w	r1, #32
   1d378:	f3ef 8211 	mrs	r2, BASEPRI
   1d37c:	f381 8812 	msr	BASEPRI_MAX, r1
   1d380:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d384:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d388:	b131      	cbz	r1, 1d398 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d38a:	2100      	movs	r1, #0
   1d38c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d390:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d394:	2101      	movs	r1, #1
   1d396:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d398:	f382 8811 	msr	BASEPRI, r2
   1d39c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d3a0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1d3a4:	2b00      	cmp	r3, #0
   1d3a6:	f43f af1e 	beq.w	1d1e6 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1d3aa:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1d3ae:	025a      	lsls	r2, r3, #9
   1d3b0:	f57f af19 	bpl.w	1d1e6 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1d3b4:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d3b6:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d3b8:	e9d3 7300 	ldrd	r7, r3, [r3]
   1d3bc:	06db      	lsls	r3, r3, #27
   1d3be:	d46b      	bmi.n	1d498 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1d3c0:	68eb      	ldr	r3, [r5, #12]
   1d3c2:	689b      	ldr	r3, [r3, #8]
   1d3c4:	2b00      	cmp	r3, #0
   1d3c6:	f43f af0e 	beq.w	1d1e6 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1d3ca:	f04f 0320 	mov.w	r3, #32
   1d3ce:	f3ef 8211 	mrs	r2, BASEPRI
   1d3d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3d6:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1d3da:	68eb      	ldr	r3, [r5, #12]
   1d3dc:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1d3e0:	2900      	cmp	r1, #0
   1d3e2:	bfac      	ite	ge
   1d3e4:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1d3e8:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1d3ec:	f382 8811 	msr	BASEPRI, r2
   1d3f0:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1d3f4:	68eb      	ldr	r3, [r5, #12]
   1d3f6:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1d3fa:	2a00      	cmp	r2, #0
   1d3fc:	d059      	beq.n	1d4b2 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1d3fe:	f04f 0320 	mov.w	r3, #32
   1d402:	f3ef 8611 	mrs	r6, BASEPRI
   1d406:	f383 8812 	msr	BASEPRI_MAX, r3
   1d40a:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1d40e:	4629      	mov	r1, r5
   1d410:	4620      	mov	r0, r4
   1d412:	f00d f89d 	bl	2a550 <start_tx_locked>
	__asm__ volatile(
   1d416:	f386 8811 	msr	BASEPRI, r6
   1d41a:	f3bf 8f6f 	isb	sy
				return;
   1d41e:	e6e2      	b.n	1d1e6 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d420:	2601      	movs	r6, #1
   1d422:	e702      	b.n	1d22a <uarte_nrfx_isr_async+0x6e>
   1d424:	2602      	movs	r6, #2
   1d426:	e700      	b.n	1d22a <uarte_nrfx_isr_async+0x6e>
   1d428:	2604      	movs	r6, #4
   1d42a:	e6fe      	b.n	1d22a <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1d42c:	4620      	mov	r0, r4
   1d42e:	3158      	adds	r1, #88	; 0x58
   1d430:	f00c ff6f 	bl	2a312 <rx_buf_release>
	__asm__ volatile(
   1d434:	f04f 0320 	mov.w	r3, #32
   1d438:	f3ef 8111 	mrs	r1, BASEPRI
   1d43c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d440:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1d444:	68f3      	ldr	r3, [r6, #12]
   1d446:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1d448:	b1f2      	cbz	r2, 1d488 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1d44a:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1d44c:	68f3      	ldr	r3, [r6, #12]
   1d44e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1d450:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1d452:	2300      	movs	r3, #0
   1d454:	68f2      	ldr	r2, [r6, #12]
   1d456:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1d458:	68f2      	ldr	r2, [r6, #12]
   1d45a:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1d45c:	68f2      	ldr	r2, [r6, #12]
   1d45e:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d464:	b90b      	cbnz	r3, 1d46a <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d466:	2301      	movs	r3, #1
   1d468:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1d46a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1d46e:	f023 0320 	bic.w	r3, r3, #32
   1d472:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1d476:	f381 8811 	msr	BASEPRI, r1
   1d47a:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1d47e:	2200      	movs	r2, #0
   1d480:	68f3      	ldr	r3, [r6, #12]
   1d482:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1d486:	e70e      	b.n	1d2a6 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d488:	2301      	movs	r3, #1
   1d48a:	607b      	str	r3, [r7, #4]
}
   1d48c:	e7f3      	b.n	1d476 <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1d48e:	4611      	mov	r1, r2
   1d490:	6860      	ldr	r0, [r4, #4]
   1d492:	f00c ffee 	bl	2a472 <rx_flush.isra.0>
   1d496:	e759      	b.n	1d34c <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1d498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1d49c:	2101      	movs	r1, #1
   1d49e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1d4a2:	4620      	mov	r0, r4
   1d4a4:	f00d f81a 	bl	2a4dc <async_uart_release>
		if (!data->async->tx_size) {
   1d4a8:	68eb      	ldr	r3, [r5, #12]
   1d4aa:	68db      	ldr	r3, [r3, #12]
   1d4ac:	2b00      	cmp	r3, #0
   1d4ae:	d187      	bne.n	1d3c0 <uarte_nrfx_isr_async+0x204>
   1d4b0:	e699      	b.n	1d1e6 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1d4b2:	6899      	ldr	r1, [r3, #8]
   1d4b4:	691a      	ldr	r2, [r3, #16]
   1d4b6:	4291      	cmp	r1, r2
   1d4b8:	d00c      	beq.n	1d4d4 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1d4ba:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1d4bc:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1d4be:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1d4c0:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1d4c2:	d128      	bne.n	1d516 <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1d4c4:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1d4c6:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1d4c8:	f00c ffbb 	bl	2a442 <setup_tx_cache>
   1d4cc:	2800      	cmp	r0, #0
   1d4ce:	d196      	bne.n	1d3fe <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1d4d0:	68eb      	ldr	r3, [r5, #12]
   1d4d2:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1d4d4:	68e8      	ldr	r0, [r5, #12]
   1d4d6:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1d4d8:	f00e f943 	bl	2b762 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1d4dc:	2214      	movs	r2, #20
   1d4de:	2100      	movs	r1, #0
   1d4e0:	a803      	add	r0, sp, #12
   1d4e2:	f00e fa5d 	bl	2b9a0 <memset>
		.data.tx.buf = data->async->tx_buf,
   1d4e6:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1d4e8:	4620      	mov	r0, r4
	struct uart_event evt = {
   1d4ea:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1d4ec:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1d4ee:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1d4f2:	68db      	ldr	r3, [r3, #12]
   1d4f4:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1d4f6:	bf1c      	itt	ne
   1d4f8:	2301      	movne	r3, #1
   1d4fa:	f88d 300c 	strbne.w	r3, [sp, #12]
   1d4fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d502:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1d506:	2300      	movs	r3, #0
   1d508:	68ea      	ldr	r2, [r5, #12]
   1d50a:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1d50c:	68ea      	ldr	r2, [r5, #12]
   1d50e:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1d510:	f00c fedf 	bl	2a2d2 <user_callback>
   1d514:	e667      	b.n	1d1e6 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1d516:	4616      	mov	r6, r2
   1d518:	e7dc      	b.n	1d4d4 <uarte_nrfx_isr_async+0x318>
   1d51a:	bf00      	nop
   1d51c:	000f423f 	.word	0x000f423f
   1d520:	000f4240 	.word	0x000f4240

0001d524 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1d524:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1d526:	7e01      	ldrb	r1, [r0, #24]
   1d528:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1d52a:	2902      	cmp	r1, #2
{
   1d52c:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   1d52e:	d018      	beq.n	1d562 <bt_rpmsg_send+0x3e>
   1d530:	2904      	cmp	r1, #4
   1d532:	d015      	beq.n	1d560 <bt_rpmsg_send+0x3c>
   1d534:	b339      	cbz	r1, 1d586 <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1d536:	466d      	mov	r5, sp
   1d538:	b088      	sub	sp, #32
   1d53a:	466a      	mov	r2, sp
   1d53c:	4b13      	ldr	r3, [pc, #76]	; (1d58c <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   1d53e:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1d542:	2303      	movs	r3, #3
   1d544:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d548:	4811      	ldr	r0, [pc, #68]	; (1d590 <bt_rpmsg_send+0x6c>)
   1d54a:	f842 3f10 	str.w	r3, [r2, #16]!
   1d54e:	f00d f886 	bl	2a65e <z_log_msg_static_create.constprop.0>
   1d552:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   1d554:	4620      	mov	r0, r4
   1d556:	f7fd fb5d 	bl	1ac14 <net_buf_unref>
	return 0;
}
   1d55a:	2000      	movs	r0, #0
   1d55c:	46bd      	mov	sp, r7
   1d55e:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   1d560:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1d562:	f104 000c 	add.w	r0, r4, #12
   1d566:	f00c fc9a 	bl	29e9e <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1d56a:	8a22      	ldrh	r2, [r4, #16]
   1d56c:	68e1      	ldr	r1, [r4, #12]
   1d56e:	4809      	ldr	r0, [pc, #36]	; (1d594 <bt_rpmsg_send+0x70>)
   1d570:	f7f1 fed8 	bl	f324 <ipc_service_send>
	if (err < 0) {
   1d574:	2800      	cmp	r0, #0
   1d576:	daed      	bge.n	1d554 <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   1d578:	466d      	mov	r5, sp
   1d57a:	b088      	sub	sp, #32
   1d57c:	466a      	mov	r2, sp
   1d57e:	4b06      	ldr	r3, [pc, #24]	; (1d598 <bt_rpmsg_send+0x74>)
   1d580:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d584:	e7dd      	b.n	1d542 <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   1d586:	2101      	movs	r1, #1
   1d588:	e7eb      	b.n	1d562 <bt_rpmsg_send+0x3e>
   1d58a:	bf00      	nop
   1d58c:	0003204a 	.word	0x0003204a
   1d590:	0002c814 	.word	0x0002c814
   1d594:	20021988 	.word	0x20021988
   1d598:	0003205a 	.word	0x0003205a

0001d59c <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1d59c:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1d59e:	480c      	ldr	r0, [pc, #48]	; (1d5d0 <bt_rpmsg_init+0x34>)
{
   1d5a0:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   1d5a2:	f7f5 fdd9 	bl	13158 <bt_hci_driver_register>
	if (err < 0) {
   1d5a6:	1e04      	subs	r4, r0, #0
   1d5a8:	da0e      	bge.n	1d5c8 <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1d5aa:	466d      	mov	r5, sp
   1d5ac:	b088      	sub	sp, #32
   1d5ae:	466a      	mov	r2, sp
   1d5b0:	4b08      	ldr	r3, [pc, #32]	; (1d5d4 <bt_rpmsg_init+0x38>)
   1d5b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d5b6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d5ba:	2303      	movs	r3, #3
   1d5bc:	4806      	ldr	r0, [pc, #24]	; (1d5d8 <bt_rpmsg_init+0x3c>)
   1d5be:	f842 3f10 	str.w	r3, [r2, #16]!
   1d5c2:	f00d f84c 	bl	2a65e <z_log_msg_static_create.constprop.0>
   1d5c6:	46ad      	mov	sp, r5
	}

	return err;
}
   1d5c8:	4620      	mov	r0, r4
   1d5ca:	46bd      	mov	sp, r7
   1d5cc:	bdb0      	pop	{r4, r5, r7, pc}
   1d5ce:	bf00      	nop
   1d5d0:	0002d700 	.word	0x0002d700
   1d5d4:	00032072 	.word	0x00032072
   1d5d8:	0002c814 	.word	0x0002c814

0001d5dc <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1d5dc:	4801      	ldr	r0, [pc, #4]	; (1d5e4 <hci_ept_bound+0x8>)
   1d5de:	f004 b977 	b.w	218d0 <z_impl_k_sem_give>
   1d5e2:	bf00      	nop
   1d5e4:	20008cfc 	.word	0x20008cfc

0001d5e8 <bt_rpmsg_open>:
{
   1d5e8:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1d5ea:	481a      	ldr	r0, [pc, #104]	; (1d654 <bt_rpmsg_open+0x6c>)
{
   1d5ec:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   1d5ee:	f7f1 fe39 	bl	f264 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1d5f2:	4604      	mov	r4, r0
   1d5f4:	b1a0      	cbz	r0, 1d620 <bt_rpmsg_open+0x38>
   1d5f6:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1d5fa:	d011      	beq.n	1d620 <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1d5fc:	466d      	mov	r5, sp
   1d5fe:	b088      	sub	sp, #32
   1d600:	466a      	mov	r2, sp
   1d602:	4b15      	ldr	r3, [pc, #84]	; (1d658 <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   1d604:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d608:	2303      	movs	r3, #3
   1d60a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d60e:	4813      	ldr	r0, [pc, #76]	; (1d65c <bt_rpmsg_open+0x74>)
   1d610:	f842 3f10 	str.w	r3, [r2, #16]!
   1d614:	f00d f823 	bl	2a65e <z_log_msg_static_create.constprop.0>
   1d618:	46ad      	mov	sp, r5
}
   1d61a:	4620      	mov	r0, r4
   1d61c:	46bd      	mov	sp, r7
   1d61e:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1d620:	4a0f      	ldr	r2, [pc, #60]	; (1d660 <bt_rpmsg_open+0x78>)
   1d622:	4910      	ldr	r1, [pc, #64]	; (1d664 <bt_rpmsg_open+0x7c>)
   1d624:	480b      	ldr	r0, [pc, #44]	; (1d654 <bt_rpmsg_open+0x6c>)
   1d626:	f7f1 fe4b 	bl	f2c0 <ipc_service_register_endpoint>
	if (err) {
   1d62a:	4604      	mov	r4, r0
   1d62c:	b120      	cbz	r0, 1d638 <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   1d62e:	466d      	mov	r5, sp
   1d630:	b088      	sub	sp, #32
   1d632:	466a      	mov	r2, sp
   1d634:	4b0c      	ldr	r3, [pc, #48]	; (1d668 <bt_rpmsg_open+0x80>)
   1d636:	e7e5      	b.n	1d604 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   1d638:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1d63c:	2300      	movs	r3, #0
   1d63e:	480b      	ldr	r0, [pc, #44]	; (1d66c <bt_rpmsg_open+0x84>)
   1d640:	f004 f98a 	bl	21958 <z_impl_k_sem_take>
	if (err) {
   1d644:	4604      	mov	r4, r0
   1d646:	2800      	cmp	r0, #0
   1d648:	d0e7      	beq.n	1d61a <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   1d64a:	466d      	mov	r5, sp
   1d64c:	b088      	sub	sp, #32
   1d64e:	466a      	mov	r2, sp
   1d650:	4b07      	ldr	r3, [pc, #28]	; (1d670 <bt_rpmsg_open+0x88>)
   1d652:	e7d7      	b.n	1d604 <bt_rpmsg_open+0x1c>
   1d654:	0002c2f8 	.word	0x0002c2f8
   1d658:	0003209c 	.word	0x0003209c
   1d65c:	0002c814 	.word	0x0002c814
   1d660:	200087e0 	.word	0x200087e0
   1d664:	20021988 	.word	0x20021988
   1d668:	000320cc 	.word	0x000320cc
   1d66c:	20008cfc 	.word	0x20008cfc
   1d670:	000320f0 	.word	0x000320f0

0001d674 <hci_ept_recv>:
{
   1d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d678:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   1d67a:	f890 8000 	ldrb.w	r8, [r0]
{
   1d67e:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   1d680:	f1b8 0f04 	cmp.w	r8, #4
{
   1d684:	460c      	mov	r4, r1
   1d686:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   1d688:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1d68c:	d00d      	beq.n	1d6aa <hci_ept_recv+0x36>
   1d68e:	f1b8 0f05 	cmp.w	r8, #5
   1d692:	f000 80a8 	beq.w	1d7e6 <hci_ept_recv+0x172>
   1d696:	f1b8 0f02 	cmp.w	r8, #2
   1d69a:	f040 80cf 	bne.w	1d83c <hci_ept_recv+0x1c8>
	if (remaining < sizeof(hdr)) {
   1d69e:	2b03      	cmp	r3, #3
   1d6a0:	d86e      	bhi.n	1d780 <hci_ept_recv+0x10c>
		LOG_ERR("Not enough data for ACL header");
   1d6a2:	4b6e      	ldr	r3, [pc, #440]	; (1d85c <hci_ept_recv+0x1e8>)
		LOG_ERR("No available ACL buffers!");
   1d6a4:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1d6a8:	e005      	b.n	1d6b6 <hci_ept_recv+0x42>
	if (remaining < sizeof(hdr)) {
   1d6aa:	2b01      	cmp	r3, #1
   1d6ac:	d80e      	bhi.n	1d6cc <hci_ept_recv+0x58>
		LOG_ERR("Not enough data for event header");
   1d6ae:	4b6c      	ldr	r3, [pc, #432]	; (1d860 <hci_ept_recv+0x1ec>)
		LOG_ERR("Event payload length is not correct");
   1d6b0:	61fb      	str	r3, [r7, #28]
   1d6b2:	2302      	movs	r3, #2
   1d6b4:	61bb      	str	r3, [r7, #24]
   1d6b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d6ba:	486a      	ldr	r0, [pc, #424]	; (1d864 <hci_ept_recv+0x1f0>)
   1d6bc:	f107 0218 	add.w	r2, r7, #24
   1d6c0:	f00c ffcd 	bl	2a65e <z_log_msg_static_create.constprop.0>
}
   1d6c4:	3724      	adds	r7, #36	; 0x24
   1d6c6:	46bd      	mov	sp, r7
   1d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1d6cc:	7843      	ldrb	r3, [r0, #1]
   1d6ce:	2b3e      	cmp	r3, #62	; 0x3e
   1d6d0:	d13c      	bne.n	1d74c <hci_ept_recv+0xd8>
		switch (subevt_type) {
   1d6d2:	f890 a003 	ldrb.w	sl, [r0, #3]
   1d6d6:	f1aa 0302 	sub.w	r3, sl, #2
   1d6da:	f1d3 0a00 	rsbs	sl, r3, #0
   1d6de:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1d6e2:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1d6e6:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   1d6e8:	ebb4 2f13 	cmp.w	r4, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1d6ec:	80bb      	strh	r3, [r7, #4]
	if (remaining != hdr.len) {
   1d6ee:	d133      	bne.n	1d758 <hci_ept_recv+0xe4>
   1d6f0:	f1ba 0f00 	cmp.w	sl, #0
   1d6f4:	d02d      	beq.n	1d752 <hci_ept_recv+0xde>
   1d6f6:	f04f 0800 	mov.w	r8, #0
   1d6fa:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1d6fe:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1d702:	4642      	mov	r2, r8
   1d704:	464b      	mov	r3, r9
   1d706:	4651      	mov	r1, sl
   1d708:	7938      	ldrb	r0, [r7, #4]
   1d70a:	f7f4 fa6f 	bl	11bec <bt_buf_get_evt>
		if (!buf) {
   1d70e:	4605      	mov	r5, r0
   1d710:	b320      	cbz	r0, 1d75c <hci_ept_recv+0xe8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1d712:	f100 080c 	add.w	r8, r0, #12
   1d716:	2202      	movs	r2, #2
   1d718:	1d39      	adds	r1, r7, #4
   1d71a:	4640      	mov	r0, r8
   1d71c:	f00c fbda 	bl	29ed4 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1d720:	4640      	mov	r0, r8
   1d722:	f00c fbcf 	bl	29ec4 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1d726:	4284      	cmp	r4, r0
   1d728:	d926      	bls.n	1d778 <hci_ept_recv+0x104>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1d72a:	466e      	mov	r6, sp
   1d72c:	b088      	sub	sp, #32
   1d72e:	466a      	mov	r2, sp
   1d730:	4b4d      	ldr	r3, [pc, #308]	; (1d868 <hci_ept_recv+0x1f4>)
   1d732:	61d0      	str	r0, [r2, #28]
   1d734:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d738:	2304      	movs	r3, #4
   1d73a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d73e:	4849      	ldr	r0, [pc, #292]	; (1d864 <hci_ept_recv+0x1f0>)
   1d740:	f842 3f10 	str.w	r3, [r2, #16]!
   1d744:	f00c ff8b 	bl	2a65e <z_log_msg_static_create.constprop.0>
   1d748:	46b5      	mov	sp, r6
   1d74a:	e038      	b.n	1d7be <hci_ept_recv+0x14a>
			return false;
   1d74c:	f04f 0a00 	mov.w	sl, #0
   1d750:	e7c7      	b.n	1d6e2 <hci_ept_recv+0x6e>
   1d752:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1d756:	e7d0      	b.n	1d6fa <hci_ept_recv+0x86>
		LOG_ERR("Event payload length is not correct");
   1d758:	4b44      	ldr	r3, [pc, #272]	; (1d86c <hci_ept_recv+0x1f8>)
   1d75a:	e7a9      	b.n	1d6b0 <hci_ept_recv+0x3c>
			if (discardable) {
   1d75c:	f1ba 0f00 	cmp.w	sl, #0
   1d760:	d1b0      	bne.n	1d6c4 <hci_ept_recv+0x50>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1d762:	4b43      	ldr	r3, [pc, #268]	; (1d870 <hci_ept_recv+0x1fc>)
   1d764:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d768:	e9c7 b306 	strd	fp, r3, [r7, #24]
   1d76c:	483d      	ldr	r0, [pc, #244]	; (1d864 <hci_ept_recv+0x1f0>)
   1d76e:	f107 0218 	add.w	r2, r7, #24
   1d772:	f00c ff74 	bl	2a65e <z_log_msg_static_create.constprop.0>
	} while (!buf);
   1d776:	e7c4      	b.n	1d702 <hci_ept_recv+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1d778:	4622      	mov	r2, r4
   1d77a:	1cf1      	adds	r1, r6, #3
   1d77c:	4640      	mov	r0, r8
   1d77e:	e02c      	b.n	1d7da <hci_ept_recv+0x166>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1d780:	2200      	movs	r2, #0
   1d782:	2300      	movs	r3, #0
   1d784:	2003      	movs	r0, #3
   1d786:	f7f4 f9e3 	bl	11b50 <bt_buf_get_rx>
	if (buf) {
   1d78a:	4605      	mov	r5, r0
   1d78c:	b1d8      	cbz	r0, 1d7c6 <hci_ept_recv+0x152>
   1d78e:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1d790:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1d794:	f100 090c 	add.w	r9, r0, #12
   1d798:	607b      	str	r3, [r7, #4]
   1d79a:	4648      	mov	r0, r9
   1d79c:	18b9      	adds	r1, r7, r2
   1d79e:	f00c fb99 	bl	29ed4 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1d7a2:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1d7a4:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1d7a6:	429c      	cmp	r4, r3
   1d7a8:	d00f      	beq.n	1d7ca <hci_ept_recv+0x156>
		LOG_ERR("ACL payload length is not correct");
   1d7aa:	4b32      	ldr	r3, [pc, #200]	; (1d874 <hci_ept_recv+0x200>)
   1d7ac:	e9c7 8306 	strd	r8, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   1d7b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d7b4:	482b      	ldr	r0, [pc, #172]	; (1d864 <hci_ept_recv+0x1f0>)
   1d7b6:	f107 0218 	add.w	r2, r7, #24
   1d7ba:	f00c ff50 	bl	2a65e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1d7be:	4628      	mov	r0, r5
   1d7c0:	f7fd fa28 	bl	1ac14 <net_buf_unref>
	if (buf) {
   1d7c4:	e77e      	b.n	1d6c4 <hci_ept_recv+0x50>
		LOG_ERR("No available ACL buffers!");
   1d7c6:	4b2c      	ldr	r3, [pc, #176]	; (1d878 <hci_ept_recv+0x204>)
   1d7c8:	e76c      	b.n	1d6a4 <hci_ept_recv+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1d7ca:	4648      	mov	r0, r9
   1d7cc:	f00c fb7a 	bl	29ec4 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1d7d0:	4284      	cmp	r4, r0
   1d7d2:	d8aa      	bhi.n	1d72a <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1d7d4:	4622      	mov	r2, r4
   1d7d6:	4648      	mov	r0, r9
   1d7d8:	1d71      	adds	r1, r6, #5
   1d7da:	f00c fb7b 	bl	29ed4 <net_buf_simple_add_mem>
		bt_recv(buf);
   1d7de:	4628      	mov	r0, r5
   1d7e0:	f7f5 fc86 	bl	130f0 <bt_recv>
}
   1d7e4:	e76e      	b.n	1d6c4 <hci_ept_recv+0x50>
	if (remaining < sizeof(hdr)) {
   1d7e6:	2b03      	cmp	r3, #3
   1d7e8:	d801      	bhi.n	1d7ee <hci_ept_recv+0x17a>
		LOG_ERR("Not enough data for ISO header");
   1d7ea:	4b24      	ldr	r3, [pc, #144]	; (1d87c <hci_ept_recv+0x208>)
   1d7ec:	e760      	b.n	1d6b0 <hci_ept_recv+0x3c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1d7ee:	2200      	movs	r2, #0
   1d7f0:	2300      	movs	r3, #0
   1d7f2:	4640      	mov	r0, r8
   1d7f4:	f7f4 f9ac 	bl	11b50 <bt_buf_get_rx>
	if (buf) {
   1d7f8:	4605      	mov	r5, r0
   1d7fa:	b1a0      	cbz	r0, 1d826 <hci_ept_recv+0x1b2>
   1d7fc:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1d7fe:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1d802:	f100 080c 	add.w	r8, r0, #12
   1d806:	607b      	str	r3, [r7, #4]
   1d808:	4640      	mov	r0, r8
   1d80a:	18b9      	adds	r1, r7, r2
   1d80c:	f00c fb62 	bl	29ed4 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1d810:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1d812:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1d814:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1d818:	429c      	cmp	r4, r3
   1d81a:	d006      	beq.n	1d82a <hci_ept_recv+0x1b6>
		LOG_ERR("ISO payload length is not correct");
   1d81c:	4b18      	ldr	r3, [pc, #96]	; (1d880 <hci_ept_recv+0x20c>)
   1d81e:	61fb      	str	r3, [r7, #28]
   1d820:	2302      	movs	r3, #2
   1d822:	61bb      	str	r3, [r7, #24]
   1d824:	e7c4      	b.n	1d7b0 <hci_ept_recv+0x13c>
		LOG_ERR("No available ISO buffers!");
   1d826:	4b17      	ldr	r3, [pc, #92]	; (1d884 <hci_ept_recv+0x210>)
   1d828:	e742      	b.n	1d6b0 <hci_ept_recv+0x3c>
	return net_buf_simple_tailroom(&buf->b);
   1d82a:	4640      	mov	r0, r8
   1d82c:	f00c fb4a 	bl	29ec4 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1d830:	4284      	cmp	r4, r0
   1d832:	f63f af7a 	bhi.w	1d72a <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1d836:	4622      	mov	r2, r4
   1d838:	1d71      	adds	r1, r6, #5
   1d83a:	e79f      	b.n	1d77c <hci_ept_recv+0x108>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1d83c:	466c      	mov	r4, sp
   1d83e:	b088      	sub	sp, #32
   1d840:	466a      	mov	r2, sp
   1d842:	4b11      	ldr	r3, [pc, #68]	; (1d888 <hci_ept_recv+0x214>)
   1d844:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   1d848:	e9c2 3805 	strd	r3, r8, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1d84c:	2303      	movs	r3, #3
   1d84e:	4805      	ldr	r0, [pc, #20]	; (1d864 <hci_ept_recv+0x1f0>)
   1d850:	f842 3f10 	str.w	r3, [r2, #16]!
   1d854:	f00c ff03 	bl	2a65e <z_log_msg_static_create.constprop.0>
   1d858:	46a5      	mov	sp, r4
   1d85a:	e733      	b.n	1d6c4 <hci_ept_recv+0x50>
   1d85c:	000321ad 	.word	0x000321ad
   1d860:	00032110 	.word	0x00032110
   1d864:	0002c814 	.word	0x0002c814
   1d868:	0003218a 	.word	0x0003218a
   1d86c:	00032131 	.word	0x00032131
   1d870:	00032155 	.word	0x00032155
   1d874:	000321e6 	.word	0x000321e6
   1d878:	000321cc 	.word	0x000321cc
   1d87c:	00032208 	.word	0x00032208
   1d880:	00032241 	.word	0x00032241
   1d884:	00032227 	.word	0x00032227
   1d888:	00032263 	.word	0x00032263

0001d88c <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d88c:	2301      	movs	r3, #1
   1d88e:	4083      	lsls	r3, r0
{
   1d890:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d892:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d894:	4a0b      	ldr	r2, [pc, #44]	; (1d8c4 <compare_int_lock+0x38>)
   1d896:	e8d2 1fef 	ldaex	r1, [r2]
   1d89a:	ea01 0504 	and.w	r5, r1, r4
   1d89e:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1d8a2:	2e00      	cmp	r6, #0
   1d8a4:	d1f7      	bne.n	1d896 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d8a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d8aa:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d8ac:	4806      	ldr	r0, [pc, #24]	; (1d8c8 <compare_int_lock+0x3c>)
   1d8ae:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1d8b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d8b6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1d8ba:	420b      	tst	r3, r1
}
   1d8bc:	bf14      	ite	ne
   1d8be:	2001      	movne	r0, #1
   1d8c0:	2000      	moveq	r0, #0
   1d8c2:	bd70      	pop	{r4, r5, r6, pc}
   1d8c4:	20021998 	.word	0x20021998
   1d8c8:	40015000 	.word	0x40015000

0001d8cc <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d8ce:	491b      	ldr	r1, [pc, #108]	; (1d93c <sys_clock_timeout_handler+0x70>)
{
   1d8d0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1d8d2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d8d6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1d8d8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1d8dc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d8e0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1d8e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1d8e6:	d30f      	bcc.n	1d908 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1d8e8:	f006 fa68 	bl	23dbc <sys_clock_announce>
    return p_reg->CC[ch];
   1d8ec:	00a3      	lsls	r3, r4, #2
   1d8ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d8f2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1d8f6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1d8fa:	4295      	cmp	r5, r2
   1d8fc:	d11d      	bne.n	1d93a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1d8fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1d902:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1d906:	e012      	b.n	1d92e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1d908:	4b0d      	ldr	r3, [pc, #52]	; (1d940 <sys_clock_timeout_handler+0x74>)
   1d90a:	681b      	ldr	r3, [r3, #0]
   1d90c:	0a1a      	lsrs	r2, r3, #8
   1d90e:	061b      	lsls	r3, r3, #24
   1d910:	195e      	adds	r6, r3, r5
   1d912:	4b0c      	ldr	r3, [pc, #48]	; (1d944 <sys_clock_timeout_handler+0x78>)
   1d914:	f142 0700 	adc.w	r7, r2, #0
   1d918:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1d91c:	f006 fa4e 	bl	23dbc <sys_clock_announce>
    return p_reg->CC[ch];
   1d920:	4a09      	ldr	r2, [pc, #36]	; (1d948 <sys_clock_timeout_handler+0x7c>)
   1d922:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1d926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1d92a:	429d      	cmp	r5, r3
   1d92c:	d105      	bne.n	1d93a <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d92e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1d932:	4a05      	ldr	r2, [pc, #20]	; (1d948 <sys_clock_timeout_handler+0x7c>)
   1d934:	40a3      	lsls	r3, r4
   1d936:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1d93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d93c:	2000a230 	.word	0x2000a230
   1d940:	2002199c 	.word	0x2002199c
   1d944:	2000a238 	.word	0x2000a238
   1d948:	40015000 	.word	0x40015000

0001d94c <compare_int_unlock>:
	if (key) {
   1d94c:	b1d9      	cbz	r1, 1d986 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1d94e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d950:	4a0d      	ldr	r2, [pc, #52]	; (1d988 <compare_int_unlock+0x3c>)
   1d952:	4083      	lsls	r3, r0
   1d954:	e8d2 cfef 	ldaex	ip, [r2]
   1d958:	ea4c 0c03 	orr.w	ip, ip, r3
   1d95c:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1d960:	2900      	cmp	r1, #0
   1d962:	d1f7      	bne.n	1d954 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1d968:	4a08      	ldr	r2, [pc, #32]	; (1d98c <compare_int_unlock+0x40>)
   1d96a:	4083      	lsls	r3, r0
   1d96c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d970:	4b07      	ldr	r3, [pc, #28]	; (1d990 <compare_int_unlock+0x44>)
   1d972:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1d976:	40c3      	lsrs	r3, r0
   1d978:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d97a:	bf42      	ittt	mi
   1d97c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1d980:	4b04      	ldrmi	r3, [pc, #16]	; (1d994 <compare_int_unlock+0x48>)
   1d982:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1d986:	4770      	bx	lr
   1d988:	20021998 	.word	0x20021998
   1d98c:	40015000 	.word	0x40015000
   1d990:	20021990 	.word	0x20021990
   1d994:	e000e100 	.word	0xe000e100

0001d998 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1d998:	2801      	cmp	r0, #1
{
   1d99a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1d99c:	d909      	bls.n	1d9b2 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1d99e:	4907      	ldr	r1, [pc, #28]	; (1d9bc <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1d9a0:	4807      	ldr	r0, [pc, #28]	; (1d9c0 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1d9a2:	237c      	movs	r3, #124	; 0x7c
   1d9a4:	4a07      	ldr	r2, [pc, #28]	; (1d9c4 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1d9a6:	f008 ffbc 	bl	26922 <assert_print>
   1d9aa:	217c      	movs	r1, #124	; 0x7c
   1d9ac:	4805      	ldr	r0, [pc, #20]	; (1d9c4 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1d9ae:	f008 ffb1 	bl	26914 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1d9b2:	0083      	lsls	r3, r0, #2
}
   1d9b4:	4804      	ldr	r0, [pc, #16]	; (1d9c8 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1d9b6:	4418      	add	r0, r3
   1d9b8:	bd08      	pop	{r3, pc}
   1d9ba:	bf00      	nop
   1d9bc:	000322de 	.word	0x000322de
   1d9c0:	0002d881 	.word	0x0002d881
   1d9c4:	000322ad 	.word	0x000322ad
   1d9c8:	40015140 	.word	0x40015140

0001d9cc <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1d9cc:	2801      	cmp	r0, #1
{
   1d9ce:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1d9d0:	d909      	bls.n	1d9e6 <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1d9d2:	4907      	ldr	r1, [pc, #28]	; (1d9f0 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1d9d4:	4807      	ldr	r0, [pc, #28]	; (1d9f4 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1d9d6:	2383      	movs	r3, #131	; 0x83
   1d9d8:	4a07      	ldr	r2, [pc, #28]	; (1d9f8 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1d9da:	f008 ffa2 	bl	26922 <assert_print>
   1d9de:	2183      	movs	r1, #131	; 0x83
   1d9e0:	4805      	ldr	r0, [pc, #20]	; (1d9f8 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1d9e2:	f008 ff97 	bl	26914 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1d9e6:	2800      	cmp	r0, #0
}
   1d9e8:	4804      	ldr	r0, [pc, #16]	; (1d9fc <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1d9ea:	bf08      	it	eq
   1d9ec:	2000      	moveq	r0, #0
   1d9ee:	bd08      	pop	{r3, pc}
   1d9f0:	000322de 	.word	0x000322de
   1d9f4:	0002d881 	.word	0x0002d881
   1d9f8:	000322ad 	.word	0x000322ad
   1d9fc:	40015044 	.word	0x40015044

0001da00 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1da00:	2801      	cmp	r0, #1
{
   1da02:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1da04:	d909      	bls.n	1da1a <z_nrf_rtc_timer_compare_read+0x1a>
   1da06:	4908      	ldr	r1, [pc, #32]	; (1da28 <z_nrf_rtc_timer_compare_read+0x28>)
   1da08:	4808      	ldr	r0, [pc, #32]	; (1da2c <z_nrf_rtc_timer_compare_read+0x2c>)
   1da0a:	23b9      	movs	r3, #185	; 0xb9
   1da0c:	4a08      	ldr	r2, [pc, #32]	; (1da30 <z_nrf_rtc_timer_compare_read+0x30>)
   1da0e:	f008 ff88 	bl	26922 <assert_print>
   1da12:	21b9      	movs	r1, #185	; 0xb9
   1da14:	4806      	ldr	r0, [pc, #24]	; (1da30 <z_nrf_rtc_timer_compare_read+0x30>)
   1da16:	f008 ff7d 	bl	26914 <assert_post_action>
    return p_reg->CC[ch];
   1da1a:	4b06      	ldr	r3, [pc, #24]	; (1da34 <z_nrf_rtc_timer_compare_read+0x34>)
   1da1c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1da20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1da24:	bd08      	pop	{r3, pc}
   1da26:	bf00      	nop
   1da28:	000322de 	.word	0x000322de
   1da2c:	0002d881 	.word	0x0002d881
   1da30:	000322ad 	.word	0x000322ad
   1da34:	40015000 	.word	0x40015000

0001da38 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1da38:	4b0d      	ldr	r3, [pc, #52]	; (1da70 <z_nrf_rtc_timer_read+0x38>)
   1da3a:	6818      	ldr	r0, [r3, #0]
   1da3c:	0a01      	lsrs	r1, r0, #8
   1da3e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1da40:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1da44:	4b0b      	ldr	r3, [pc, #44]	; (1da74 <z_nrf_rtc_timer_read+0x3c>)
   1da46:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1da4a:	1818      	adds	r0, r3, r0
   1da4c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1da50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1da54:	d20a      	bcs.n	1da6c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1da56:	4b08      	ldr	r3, [pc, #32]	; (1da78 <z_nrf_rtc_timer_read+0x40>)
   1da58:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da5c:	4290      	cmp	r0, r2
   1da5e:	eb71 0303 	sbcs.w	r3, r1, r3
   1da62:	d203      	bcs.n	1da6c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1da64:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1da68:	f141 0100 	adc.w	r1, r1, #0
}
   1da6c:	4770      	bx	lr
   1da6e:	bf00      	nop
   1da70:	2002199c 	.word	0x2002199c
   1da74:	40015000 	.word	0x40015000
   1da78:	2000a238 	.word	0x2000a238

0001da7c <compare_set>:
{
   1da7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da80:	b085      	sub	sp, #20
   1da82:	4614      	mov	r4, r2
   1da84:	461d      	mov	r5, r3
   1da86:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1da88:	f7ff ff00 	bl	1d88c <compare_int_lock>
   1da8c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1da8e:	f7ff ffd3 	bl	1da38 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1da92:	42a0      	cmp	r0, r4
   1da94:	eb71 0305 	sbcs.w	r3, r1, r5
   1da98:	f080 8086 	bcs.w	1dba8 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1da9c:	4b49      	ldr	r3, [pc, #292]	; (1dbc4 <compare_set+0x148>)
   1da9e:	1a20      	subs	r0, r4, r0
   1daa0:	eb65 0101 	sbc.w	r1, r5, r1
   1daa4:	4298      	cmp	r0, r3
   1daa6:	f171 0100 	sbcs.w	r1, r1, #0
   1daaa:	f080 8088 	bcs.w	1dbbe <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1daae:	4b46      	ldr	r3, [pc, #280]	; (1dbc8 <compare_set+0x14c>)
   1dab0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1dab4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1dab8:	429d      	cmp	r5, r3
   1daba:	bf08      	it	eq
   1dabc:	4294      	cmpeq	r4, r2
   1dabe:	d05e      	beq.n	1db7e <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1dac4:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1dac8:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1daca:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1dace:	f06f 0101 	mvn.w	r1, #1
   1dad2:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1dad6:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1dada:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1dade:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dae2:	40bb      	lsls	r3, r7
   1dae4:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dae8:	fa1f f888 	uxth.w	r8, r8
   1daec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1daf0:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1daf2:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1daf6:	4b35      	ldr	r3, [pc, #212]	; (1dbcc <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1daf8:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1dafc:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1db00:	eba0 000a 	sub.w	r0, r0, sl
   1db04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1db08:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1db0c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1db0e:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1db12:	d107      	bne.n	1db24 <compare_set+0xa8>
   1db14:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1db16:	2013      	movs	r0, #19
   1db18:	f00d fdf1 	bl	2b6fe <z_impl_k_busy_wait>
   1db1c:	f06f 0101 	mvn.w	r1, #1
   1db20:	4b2a      	ldr	r3, [pc, #168]	; (1dbcc <compare_set+0x150>)
   1db22:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1db24:	eba1 000a 	sub.w	r0, r1, sl
   1db28:	4430      	add	r0, r6
   1db2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1db2e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1db32:	f04f 0000 	mov.w	r0, #0
   1db36:	f8c8 0000 	str.w	r0, [r8]
   1db3a:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1db3e:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1db40:	bf88      	it	hi
   1db42:	eb0a 060b 	addhi.w	r6, sl, fp
   1db46:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1db4a:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1db4e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1db52:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1db56:	bf88      	it	hi
   1db58:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1db5c:	4582      	cmp	sl, r0
   1db5e:	d006      	beq.n	1db6e <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1db60:	1a08      	subs	r0, r1, r0
   1db62:	4430      	add	r0, r6
   1db64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1db68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1db6c:	d81a      	bhi.n	1dba4 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1db6e:	1ab6      	subs	r6, r6, r2
   1db70:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1db74:	1936      	adds	r6, r6, r4
   1db76:	f145 0300 	adc.w	r3, r5, #0
   1db7a:	4634      	mov	r4, r6
   1db7c:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1db7e:	4912      	ldr	r1, [pc, #72]	; (1dbc8 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1db80:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1db82:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1db86:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1db8a:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1db8c:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1db8e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1db90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1db92:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1db94:	4638      	mov	r0, r7
   1db96:	9901      	ldr	r1, [sp, #4]
   1db98:	f7ff fed8 	bl	1d94c <compare_int_unlock>
}
   1db9c:	4620      	mov	r0, r4
   1db9e:	b005      	add	sp, #20
   1dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dba4:	4630      	mov	r0, r6
   1dba6:	e7a9      	b.n	1dafc <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1dba8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dbaa:	4a09      	ldr	r2, [pc, #36]	; (1dbd0 <compare_set+0x154>)
   1dbac:	40bb      	lsls	r3, r7
   1dbae:	e8d2 0fef 	ldaex	r0, [r2]
   1dbb2:	4318      	orrs	r0, r3
   1dbb4:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1dbb8:	2900      	cmp	r1, #0
   1dbba:	d0e0      	beq.n	1db7e <compare_set+0x102>
   1dbbc:	e7f7      	b.n	1dbae <compare_set+0x132>
			return -EINVAL;
   1dbbe:	f06f 0415 	mvn.w	r4, #21
   1dbc2:	e7e7      	b.n	1db94 <compare_set+0x118>
   1dbc4:	01000001 	.word	0x01000001
   1dbc8:	2000a210 	.word	0x2000a210
   1dbcc:	40015000 	.word	0x40015000
   1dbd0:	20021990 	.word	0x20021990

0001dbd4 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1dbd4:	2801      	cmp	r0, #1
{
   1dbd6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1dbd8:	d00b      	beq.n	1dbf2 <z_nrf_rtc_timer_set+0x1e>
   1dbda:	4908      	ldr	r1, [pc, #32]	; (1dbfc <z_nrf_rtc_timer_set+0x28>)
   1dbdc:	4808      	ldr	r0, [pc, #32]	; (1dc00 <z_nrf_rtc_timer_set+0x2c>)
   1dbde:	f240 1353 	movw	r3, #339	; 0x153
   1dbe2:	4a08      	ldr	r2, [pc, #32]	; (1dc04 <z_nrf_rtc_timer_set+0x30>)
   1dbe4:	f008 fe9d 	bl	26922 <assert_print>
   1dbe8:	f240 1153 	movw	r1, #339	; 0x153
   1dbec:	4805      	ldr	r0, [pc, #20]	; (1dc04 <z_nrf_rtc_timer_set+0x30>)
   1dbee:	f008 fe91 	bl	26914 <assert_post_action>
}
   1dbf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1dbf6:	f7ff bf41 	b.w	1da7c <compare_set>
   1dbfa:	bf00      	nop
   1dbfc:	000322fa 	.word	0x000322fa
   1dc00:	0002d881 	.word	0x0002d881
   1dc04:	000322ad 	.word	0x000322ad

0001dc08 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1dc08:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1dc0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1dc0e:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dc10:	f04f 30ff 	mov.w	r0, #4294967295
   1dc14:	f04f 31ff 	mov.w	r1, #4294967295
   1dc18:	4c19      	ldr	r4, [pc, #100]	; (1dc80 <sys_clock_driver_init+0x78>)
   1dc1a:	4b1a      	ldr	r3, [pc, #104]	; (1dc84 <sys_clock_driver_init+0x7c>)
   1dc1c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1dc20:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1dc24:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1dc28:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1dc2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1dc30:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dc32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1dc36:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1dc3a:	4b13      	ldr	r3, [pc, #76]	; (1dc88 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1dc3c:	2101      	movs	r1, #1
   1dc3e:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1dc42:	2015      	movs	r0, #21
   1dc44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1dc48:	462a      	mov	r2, r5
   1dc4a:	f7f2 fd97 	bl	1077c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1dc4e:	2015      	movs	r0, #21
   1dc50:	f7f2 fd64 	bl	1071c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1dc54:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1dc56:	2203      	movs	r2, #3
   1dc58:	60a3      	str	r3, [r4, #8]
   1dc5a:	6023      	str	r3, [r4, #0]
   1dc5c:	4b0b      	ldr	r3, [pc, #44]	; (1dc8c <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1dc5e:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1dc60:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1dc62:	4b0b      	ldr	r3, [pc, #44]	; (1dc90 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1dc64:	4a0b      	ldr	r2, [pc, #44]	; (1dc94 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1dc66:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1dc68:	4b0b      	ldr	r3, [pc, #44]	; (1dc98 <sys_clock_driver_init+0x90>)
   1dc6a:	9501      	str	r5, [sp, #4]
   1dc6c:	9300      	str	r3, [sp, #0]
   1dc6e:	2300      	movs	r3, #0
   1dc70:	f7ff ff04 	bl	1da7c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1dc74:	4630      	mov	r0, r6
   1dc76:	f7fd fcdd 	bl	1b634 <z_nrf_clock_control_lf_on>

	return 0;
}
   1dc7a:	4628      	mov	r0, r5
   1dc7c:	b002      	add	sp, #8
   1dc7e:	bd70      	pop	{r4, r5, r6, pc}
   1dc80:	40015000 	.word	0x40015000
   1dc84:	2000a210 	.word	0x2000a210
   1dc88:	e000e100 	.word	0xe000e100
   1dc8c:	20021998 	.word	0x20021998
   1dc90:	20021994 	.word	0x20021994
   1dc94:	007fffff 	.word	0x007fffff
   1dc98:	0001d8cd 	.word	0x0001d8cd

0001dc9c <rtc_nrf_isr>:
{
   1dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1dca0:	4b3f      	ldr	r3, [pc, #252]	; (1dda0 <rtc_nrf_isr+0x104>)
   1dca2:	b085      	sub	sp, #20
   1dca4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1dca8:	0792      	lsls	r2, r2, #30
   1dcaa:	d50b      	bpl.n	1dcc4 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dcac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1dcb0:	b142      	cbz	r2, 1dcc4 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dcb2:	2200      	movs	r2, #0
   1dcb4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1dcb8:	4a3a      	ldr	r2, [pc, #232]	; (1dda4 <rtc_nrf_isr+0x108>)
   1dcba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1dcbe:	6813      	ldr	r3, [r2, #0]
   1dcc0:	3301      	adds	r3, #1
   1dcc2:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1dcc4:	4d38      	ldr	r5, [pc, #224]	; (1dda8 <rtc_nrf_isr+0x10c>)
   1dcc6:	2400      	movs	r4, #0
   1dcc8:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1dcca:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1dcce:	4e34      	ldr	r6, [pc, #208]	; (1dda0 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1dcd0:	f04f 0320 	mov.w	r3, #32
   1dcd4:	f3ef 8211 	mrs	r2, BASEPRI
   1dcd8:	f383 8812 	msr	BASEPRI_MAX, r3
   1dcdc:	f3bf 8f6f 	isb	sy
   1dce0:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1dce4:	fa0b f904 	lsl.w	r9, fp, r4
   1dce8:	ea19 0f03 	tst.w	r9, r3
   1dcec:	d10a      	bne.n	1dd04 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1dcee:	f382 8811 	msr	BASEPRI, r2
   1dcf2:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1dcf6:	3510      	adds	r5, #16
   1dcf8:	b114      	cbz	r4, 1dd00 <rtc_nrf_isr+0x64>
}
   1dcfa:	b005      	add	sp, #20
   1dcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1dd00:	2401      	movs	r4, #1
   1dd02:	e7e5      	b.n	1dcd0 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1dd04:	2301      	movs	r3, #1
   1dd06:	40a3      	lsls	r3, r4
   1dd08:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dd0a:	4928      	ldr	r1, [pc, #160]	; (1ddac <rtc_nrf_isr+0x110>)
   1dd0c:	e8d1 0fef 	ldaex	r0, [r1]
   1dd10:	ea00 0c03 	and.w	ip, r0, r3
   1dd14:	e8c1 cfee 	stlex	lr, ip, [r1]
   1dd18:	f1be 0f00 	cmp.w	lr, #0
   1dd1c:	d1f6      	bne.n	1dd0c <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd1e:	4b24      	ldr	r3, [pc, #144]	; (1ddb0 <rtc_nrf_isr+0x114>)
   1dd20:	00a1      	lsls	r1, r4, #2
   1dd22:	b918      	cbnz	r0, 1dd2c <rtc_nrf_isr+0x90>
   1dd24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1dd28:	2800      	cmp	r0, #0
   1dd2a:	d0e0      	beq.n	1dcee <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dd2c:	f04f 0a00 	mov.w	sl, #0
   1dd30:	f841 a003 	str.w	sl, [r1, r3]
   1dd34:	58cb      	ldr	r3, [r1, r3]
   1dd36:	f382 8811 	msr	BASEPRI, r2
   1dd3a:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1dd3e:	f7ff fe7b 	bl	1da38 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1dd42:	f04f 0320 	mov.w	r3, #32
   1dd46:	f3ef 8c11 	mrs	ip, BASEPRI
   1dd4a:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd4e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1dd52:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1dd56:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1dd5a:	4290      	cmp	r0, r2
   1dd5c:	4199      	sbcs	r1, r3
   1dd5e:	d204      	bcs.n	1dd6a <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1dd60:	f38c 8811 	msr	BASEPRI, ip
   1dd64:	f3bf 8f6f 	isb	sy
		if (handler) {
   1dd68:	e7c5      	b.n	1dcf6 <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1dd6a:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dd6e:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1dd72:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dd74:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1dd78:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dd7c:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1dd80:	4907      	ldr	r1, [pc, #28]	; (1dda0 <rtc_nrf_isr+0x104>)
   1dd82:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1dd86:	f38c 8811 	msr	BASEPRI, ip
   1dd8a:	f3bf 8f6f 	isb	sy
		if (handler) {
   1dd8e:	f1b8 0f00 	cmp.w	r8, #0
   1dd92:	d0b0      	beq.n	1dcf6 <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1dd94:	9903      	ldr	r1, [sp, #12]
   1dd96:	4620      	mov	r0, r4
   1dd98:	9100      	str	r1, [sp, #0]
   1dd9a:	47c0      	blx	r8
   1dd9c:	e7ab      	b.n	1dcf6 <rtc_nrf_isr+0x5a>
   1dd9e:	bf00      	nop
   1dda0:	40015000 	.word	0x40015000
   1dda4:	2002199c 	.word	0x2002199c
   1dda8:	2000a210 	.word	0x2000a210
   1ddac:	20021990 	.word	0x20021990
   1ddb0:	40015140 	.word	0x40015140

0001ddb4 <z_nrf_rtc_timer_chan_alloc>:
{
   1ddb4:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1ddb6:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1ddb8:	4b0c      	ldr	r3, [pc, #48]	; (1ddec <z_nrf_rtc_timer_chan_alloc+0x38>)
   1ddba:	6818      	ldr	r0, [r3, #0]
   1ddbc:	b190      	cbz	r0, 1dde4 <z_nrf_rtc_timer_chan_alloc+0x30>
   1ddbe:	fab0 f080 	clz	r0, r0
   1ddc2:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1ddc6:	fa04 f100 	lsl.w	r1, r4, r0
   1ddca:	43c9      	mvns	r1, r1
   1ddcc:	e8d3 2fef 	ldaex	r2, [r3]
   1ddd0:	ea02 0501 	and.w	r5, r2, r1
   1ddd4:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1ddd8:	2e00      	cmp	r6, #0
   1ddda:	d1f7      	bne.n	1ddcc <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1dddc:	40c2      	lsrs	r2, r0
   1ddde:	07d2      	lsls	r2, r2, #31
   1dde0:	d5eb      	bpl.n	1ddba <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1dde2:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1dde4:	f06f 000b 	mvn.w	r0, #11
   1dde8:	e7fb      	b.n	1dde2 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1ddea:	bf00      	nop
   1ddec:	20021994 	.word	0x20021994

0001ddf0 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1ddf0:	2801      	cmp	r0, #1
{
   1ddf2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1ddf4:	d00b      	beq.n	1de0e <z_nrf_rtc_timer_chan_free+0x1e>
   1ddf6:	490b      	ldr	r1, [pc, #44]	; (1de24 <z_nrf_rtc_timer_chan_free+0x34>)
   1ddf8:	480b      	ldr	r0, [pc, #44]	; (1de28 <z_nrf_rtc_timer_chan_free+0x38>)
   1ddfa:	f240 2321 	movw	r3, #545	; 0x221
   1ddfe:	4a0b      	ldr	r2, [pc, #44]	; (1de2c <z_nrf_rtc_timer_chan_free+0x3c>)
   1de00:	f008 fd8f 	bl	26922 <assert_print>
   1de04:	f240 2121 	movw	r1, #545	; 0x221
   1de08:	4808      	ldr	r0, [pc, #32]	; (1de2c <z_nrf_rtc_timer_chan_free+0x3c>)
   1de0a:	f008 fd83 	bl	26914 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1de0e:	4b08      	ldr	r3, [pc, #32]	; (1de30 <z_nrf_rtc_timer_chan_free+0x40>)
   1de10:	e8d3 1fef 	ldaex	r1, [r3]
   1de14:	f041 0102 	orr.w	r1, r1, #2
   1de18:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1de1c:	2a00      	cmp	r2, #0
   1de1e:	d1f7      	bne.n	1de10 <z_nrf_rtc_timer_chan_free+0x20>
}
   1de20:	bd08      	pop	{r3, pc}
   1de22:	bf00      	nop
   1de24:	000322fa 	.word	0x000322fa
   1de28:	0002d881 	.word	0x0002d881
   1de2c:	000322ad 	.word	0x000322ad
   1de30:	20021994 	.word	0x20021994

0001de34 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1de34:	1c43      	adds	r3, r0, #1
{
   1de36:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1de38:	d020      	beq.n	1de7c <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1de3a:	2801      	cmp	r0, #1
   1de3c:	dd20      	ble.n	1de80 <sys_clock_set_timeout+0x4c>
   1de3e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1de42:	da1f      	bge.n	1de84 <sys_clock_set_timeout+0x50>
   1de44:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1de46:	f7ff fdf7 	bl	1da38 <z_nrf_rtc_timer_read>
   1de4a:	4b0f      	ldr	r3, [pc, #60]	; (1de88 <sys_clock_set_timeout+0x54>)
   1de4c:	e9d3 1300 	ldrd	r1, r3, [r3]
   1de50:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1de52:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1de56:	bf28      	it	cs
   1de58:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1de5a:	480c      	ldr	r0, [pc, #48]	; (1de8c <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1de5c:	3201      	adds	r2, #1
   1de5e:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1de60:	4282      	cmp	r2, r0
   1de62:	bf28      	it	cs
   1de64:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1de66:	2000      	movs	r0, #0
   1de68:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1de6a:	4909      	ldr	r1, [pc, #36]	; (1de90 <sys_clock_set_timeout+0x5c>)
   1de6c:	9001      	str	r0, [sp, #4]
   1de6e:	9100      	str	r1, [sp, #0]
   1de70:	f143 0300 	adc.w	r3, r3, #0
   1de74:	f7ff fe02 	bl	1da7c <compare_set>
}
   1de78:	b002      	add	sp, #8
   1de7a:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1de7c:	4803      	ldr	r0, [pc, #12]	; (1de8c <sys_clock_set_timeout+0x58>)
   1de7e:	e7e1      	b.n	1de44 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1de80:	2400      	movs	r4, #0
   1de82:	e7e0      	b.n	1de46 <sys_clock_set_timeout+0x12>
   1de84:	4c01      	ldr	r4, [pc, #4]	; (1de8c <sys_clock_set_timeout+0x58>)
   1de86:	e7de      	b.n	1de46 <sys_clock_set_timeout+0x12>
   1de88:	2000a230 	.word	0x2000a230
   1de8c:	007fffff 	.word	0x007fffff
   1de90:	0001d8cd 	.word	0x0001d8cd

0001de94 <sys_clock_elapsed>:
{
   1de94:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1de96:	f7ff fdcf 	bl	1da38 <z_nrf_rtc_timer_read>
   1de9a:	4b02      	ldr	r3, [pc, #8]	; (1dea4 <sys_clock_elapsed+0x10>)
   1de9c:	681b      	ldr	r3, [r3, #0]
}
   1de9e:	1ac0      	subs	r0, r0, r3
   1dea0:	bd08      	pop	{r3, pc}
   1dea2:	bf00      	nop
   1dea4:	2000a230 	.word	0x2000a230

0001dea8 <nrf_gpio_pin_port_decode>:
{
   1dea8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1deaa:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1deac:	095a      	lsrs	r2, r3, #5
   1deae:	d00d      	beq.n	1decc <nrf_gpio_pin_port_decode+0x24>
   1deb0:	2a01      	cmp	r2, #1
   1deb2:	d013      	beq.n	1dedc <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1deb4:	490e      	ldr	r1, [pc, #56]	; (1def0 <nrf_gpio_pin_port_decode+0x48>)
   1deb6:	480f      	ldr	r0, [pc, #60]	; (1def4 <nrf_gpio_pin_port_decode+0x4c>)
   1deb8:	f240 2347 	movw	r3, #583	; 0x247
   1debc:	4a0e      	ldr	r2, [pc, #56]	; (1def8 <nrf_gpio_pin_port_decode+0x50>)
   1debe:	f008 fd30 	bl	26922 <assert_print>
   1dec2:	f240 2147 	movw	r1, #583	; 0x247
   1dec6:	480c      	ldr	r0, [pc, #48]	; (1def8 <nrf_gpio_pin_port_decode+0x50>)
   1dec8:	f008 fd24 	bl	26914 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1decc:	f04f 32ff 	mov.w	r2, #4294967295
   1ded0:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ded4:	07d9      	lsls	r1, r3, #31
   1ded6:	d5ed      	bpl.n	1deb4 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1ded8:	4808      	ldr	r0, [pc, #32]	; (1defc <nrf_gpio_pin_port_decode+0x54>)
   1deda:	e008      	b.n	1deee <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1dedc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1dee0:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1dee4:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dee6:	07d2      	lsls	r2, r2, #31
   1dee8:	d5e4      	bpl.n	1deb4 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1deea:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1deec:	4804      	ldr	r0, [pc, #16]	; (1df00 <nrf_gpio_pin_port_decode+0x58>)
}
   1deee:	bd08      	pop	{r3, pc}
   1def0:	00031bdb 	.word	0x00031bdb
   1def4:	0002d881 	.word	0x0002d881
   1def8:	00031ba8 	.word	0x00031ba8
   1defc:	40842500 	.word	0x40842500
   1df00:	40842800 	.word	0x40842800

0001df04 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1df04:	b510      	push	{r4, lr}
   1df06:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1df08:	6902      	ldr	r2, [r0, #16]
{
   1df0a:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   1df0c:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1df10:	4925      	ldr	r1, [pc, #148]	; (1dfa8 <mbox_nrf_init+0xa4>)
   1df12:	2000      	movs	r0, #0
   1df14:	f001 f806 	bl	1ef24 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1df18:	2200      	movs	r2, #0
   1df1a:	2101      	movs	r1, #1
   1df1c:	202a      	movs	r0, #42	; 0x2a
   1df1e:	f7f2 fc2d 	bl	1077c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1df22:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1df24:	2284      	movs	r2, #132	; 0x84
   1df26:	2100      	movs	r1, #0
   1df28:	a807      	add	r0, sp, #28
   1df2a:	f00d fd39 	bl	2b9a0 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1df2e:	6863      	ldr	r3, [r4, #4]
   1df30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1df34:	d30a      	bcc.n	1df4c <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1df36:	4b1d      	ldr	r3, [pc, #116]	; (1dfac <mbox_nrf_init+0xa8>)
   1df38:	9305      	str	r3, [sp, #20]
   1df3a:	2302      	movs	r3, #2
   1df3c:	9304      	str	r3, [sp, #16]
   1df3e:	2300      	movs	r3, #0
   1df40:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1df44:	481a      	ldr	r0, [pc, #104]	; (1dfb0 <mbox_nrf_init+0xac>)
   1df46:	aa04      	add	r2, sp, #16
   1df48:	f7f0 fb22 	bl	e590 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1df4c:	6823      	ldr	r3, [r4, #0]
   1df4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1df52:	d30a      	bcc.n	1df6a <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1df54:	4b17      	ldr	r3, [pc, #92]	; (1dfb4 <mbox_nrf_init+0xb0>)
   1df56:	9305      	str	r3, [sp, #20]
   1df58:	2302      	movs	r3, #2
   1df5a:	9304      	str	r3, [sp, #16]
   1df5c:	2300      	movs	r3, #0
   1df5e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1df62:	4813      	ldr	r0, [pc, #76]	; (1dfb0 <mbox_nrf_init+0xac>)
   1df64:	aa04      	add	r2, sp, #16
   1df66:	f7f0 fb13 	bl	e590 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   1df6a:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1df6c:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1df6e:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1df70:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   1df72:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1df74:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1df76:	40d9      	lsrs	r1, r3
   1df78:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1df7a:	bf44      	itt	mi
   1df7c:	fa00 f103 	lslmi.w	r1, r0, r3
   1df80:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1df84:	6821      	ldr	r1, [r4, #0]
   1df86:	40d9      	lsrs	r1, r3
   1df88:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1df8a:	bf48      	it	mi
   1df8c:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1df90:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1df94:	bf48      	it	mi
   1df96:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1df98:	2b10      	cmp	r3, #16
   1df9a:	d1ea      	bne.n	1df72 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   1df9c:	a807      	add	r0, sp, #28
   1df9e:	f000 ffd9 	bl	1ef54 <nrfx_ipc_config_load>

	return 0;
}
   1dfa2:	2000      	movs	r0, #0
   1dfa4:	b028      	add	sp, #160	; 0xa0
   1dfa6:	bd10      	pop	{r4, pc}
   1dfa8:	0001e0ad 	.word	0x0001e0ad
   1dfac:	00032315 	.word	0x00032315
   1dfb0:	0002c8ac 	.word	0x0002c8ac
   1dfb4:	00032341 	.word	0x00032341

0001dfb8 <mbox_nrf_set_enabled>:
{
   1dfb8:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1dfba:	290f      	cmp	r1, #15
{
   1dfbc:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1dfbe:	6905      	ldr	r5, [r0, #16]
{
   1dfc0:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1dfc2:	d842      	bhi.n	1e04a <mbox_nrf_set_enabled+0x92>
   1dfc4:	6843      	ldr	r3, [r0, #4]
   1dfc6:	681b      	ldr	r3, [r3, #0]
   1dfc8:	40cb      	lsrs	r3, r1
   1dfca:	07db      	lsls	r3, r3, #31
   1dfcc:	d53d      	bpl.n	1e04a <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1dfce:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1dfd2:	40cb      	lsrs	r3, r1
   1dfd4:	f003 0301 	and.w	r3, r3, #1
   1dfd8:	b91a      	cbnz	r2, 1dfe2 <mbox_nrf_set_enabled+0x2a>
   1dfda:	bb13      	cbnz	r3, 1e022 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   1dfdc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1dfe0:	e031      	b.n	1e046 <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1dfe2:	2b00      	cmp	r3, #0
   1dfe4:	d1fa      	bne.n	1dfdc <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1dfe6:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1dfea:	b94b      	cbnz	r3, 1e000 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   1dfec:	4a18      	ldr	r2, [pc, #96]	; (1e050 <mbox_nrf_set_enabled+0x98>)
   1dfee:	9205      	str	r2, [sp, #20]
   1dff0:	2202      	movs	r2, #2
   1dff2:	9204      	str	r2, [sp, #16]
   1dff4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1dff8:	4816      	ldr	r0, [pc, #88]	; (1e054 <mbox_nrf_set_enabled+0x9c>)
   1dffa:	aa04      	add	r2, sp, #16
   1dffc:	f7f0 fac8 	bl	e590 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   1e000:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e004:	b913      	cbnz	r3, 1e00c <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   1e006:	202a      	movs	r0, #42	; 0x2a
   1e008:	f7f2 fb88 	bl	1071c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1e00c:	2201      	movs	r2, #1
   1e00e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e012:	40a2      	lsls	r2, r4
   1e014:	4313      	orrs	r3, r2
   1e016:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1e01a:	b2e0      	uxtb	r0, r4
   1e01c:	f000 ffdc 	bl	1efd8 <nrfx_ipc_receive_event_enable>
   1e020:	e00a      	b.n	1e038 <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   1e022:	b2c8      	uxtb	r0, r1
   1e024:	f000 fff6 	bl	1f014 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1e028:	2201      	movs	r2, #1
   1e02a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e02e:	40a2      	lsls	r2, r4
   1e030:	ea23 0302 	bic.w	r3, r3, r2
   1e034:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1e038:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e03c:	b913      	cbnz	r3, 1e044 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   1e03e:	202a      	movs	r0, #42	; 0x2a
   1e040:	f7f2 fb7a 	bl	10738 <arch_irq_disable>
	return 0;
   1e044:	2000      	movs	r0, #0
}
   1e046:	b007      	add	sp, #28
   1e048:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e04a:	f06f 0015 	mvn.w	r0, #21
   1e04e:	e7fa      	b.n	1e046 <mbox_nrf_set_enabled+0x8e>
   1e050:	0003236d 	.word	0x0003236d
   1e054:	0002c8ac 	.word	0x0002c8ac

0001e058 <mbox_nrf_send>:
{
   1e058:	b530      	push	{r4, r5, lr}
   1e05a:	4605      	mov	r5, r0
   1e05c:	460c      	mov	r4, r1
   1e05e:	b087      	sub	sp, #28
	if (msg) {
   1e060:	b152      	cbz	r2, 1e078 <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   1e062:	4b10      	ldr	r3, [pc, #64]	; (1e0a4 <mbox_nrf_send+0x4c>)
   1e064:	9305      	str	r3, [sp, #20]
   1e066:	2302      	movs	r3, #2
   1e068:	9304      	str	r3, [sp, #16]
   1e06a:	2300      	movs	r3, #0
   1e06c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e070:	480d      	ldr	r0, [pc, #52]	; (1e0a8 <mbox_nrf_send+0x50>)
   1e072:	aa04      	add	r2, sp, #16
   1e074:	f7f0 fa8c 	bl	e590 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1e078:	2c0f      	cmp	r4, #15
   1e07a:	d80f      	bhi.n	1e09c <mbox_nrf_send+0x44>
   1e07c:	686b      	ldr	r3, [r5, #4]
   1e07e:	685b      	ldr	r3, [r3, #4]
   1e080:	40e3      	lsrs	r3, r4
   1e082:	07db      	lsls	r3, r3, #31
   1e084:	d50a      	bpl.n	1e09c <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e086:	2301      	movs	r3, #1
	return 0;
   1e088:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1e08a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e08c:	b2e4      	uxtb	r4, r4
   1e08e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1e092:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1e096:	6023      	str	r3, [r4, #0]
}
   1e098:	b007      	add	sp, #28
   1e09a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e09c:	f06f 0015 	mvn.w	r0, #21
   1e0a0:	e7fa      	b.n	1e098 <mbox_nrf_send+0x40>
   1e0a2:	bf00      	nop
   1e0a4:	0003239d 	.word	0x0003239d
   1e0a8:	0002c8ac 	.word	0x0002c8ac

0001e0ac <mbox_dispatcher>:
{
   1e0ac:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1e0ae:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e0b2:	280f      	cmp	r0, #15
{
   1e0b4:	4604      	mov	r4, r0
   1e0b6:	460d      	mov	r5, r1
   1e0b8:	6873      	ldr	r3, [r6, #4]
   1e0ba:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e0bc:	d803      	bhi.n	1e0c6 <mbox_dispatcher+0x1a>
   1e0be:	681b      	ldr	r3, [r3, #0]
   1e0c0:	40c3      	lsrs	r3, r0
   1e0c2:	07db      	lsls	r3, r3, #31
   1e0c4:	d40a      	bmi.n	1e0dc <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   1e0c6:	4b15      	ldr	r3, [pc, #84]	; (1e11c <mbox_dispatcher+0x70>)
   1e0c8:	9305      	str	r3, [sp, #20]
   1e0ca:	2302      	movs	r3, #2
   1e0cc:	9304      	str	r3, [sp, #16]
   1e0ce:	2300      	movs	r3, #0
   1e0d0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e0d4:	4812      	ldr	r0, [pc, #72]	; (1e120 <mbox_dispatcher+0x74>)
   1e0d6:	aa04      	add	r2, sp, #16
   1e0d8:	f7f0 fa5a 	bl	e590 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   1e0dc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e0e0:	40e3      	lsrs	r3, r4
   1e0e2:	f013 0301 	ands.w	r3, r3, #1
   1e0e6:	d109      	bne.n	1e0fc <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   1e0e8:	4a0e      	ldr	r2, [pc, #56]	; (1e124 <mbox_dispatcher+0x78>)
   1e0ea:	9205      	str	r2, [sp, #20]
   1e0ec:	2202      	movs	r2, #2
   1e0ee:	9204      	str	r2, [sp, #16]
   1e0f0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e0f4:	480a      	ldr	r0, [pc, #40]	; (1e120 <mbox_dispatcher+0x74>)
   1e0f6:	aa04      	add	r2, sp, #16
   1e0f8:	f7f0 fa4a 	bl	e590 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   1e0fc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1e100:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1e104:	b145      	cbz	r5, 1e118 <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1e106:	2300      	movs	r3, #0
   1e108:	4621      	mov	r1, r4
   1e10a:	4630      	mov	r0, r6
   1e10c:	46ac      	mov	ip, r5
   1e10e:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1e110:	b006      	add	sp, #24
   1e112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1e116:	4760      	bx	ip
}
   1e118:	b006      	add	sp, #24
   1e11a:	bd70      	pop	{r4, r5, r6, pc}
   1e11c:	000323b8 	.word	0x000323b8
   1e120:	0002c8ac 	.word	0x0002c8ac
   1e124:	000323d4 	.word	0x000323d4

0001e128 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1e128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1e12a:	f7f0 f8cb 	bl	e2c4 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1e12e:	4b07      	ldr	r3, [pc, #28]	; (1e14c <k_sys_fatal_error_handler+0x24>)
   1e130:	9305      	str	r3, [sp, #20]
   1e132:	2302      	movs	r3, #2
   1e134:	9304      	str	r3, [sp, #16]
   1e136:	4806      	ldr	r0, [pc, #24]	; (1e150 <k_sys_fatal_error_handler+0x28>)
   1e138:	2300      	movs	r3, #0
   1e13a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e13e:	aa04      	add	r2, sp, #16
   1e140:	f7f0 fa26 	bl	e590 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1e144:	2000      	movs	r0, #0
   1e146:	f7f2 ffa7 	bl	11098 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1e14a:	bf00      	nop
   1e14c:	0003241e 	.word	0x0003241e
   1e150:	0002c874 	.word	0x0002c874

0001e154 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1e154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e158:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1e15a:	4b15      	ldr	r3, [pc, #84]	; (1e1b0 <tfm_ns_interface_dispatch+0x5c>)
   1e15c:	4604      	mov	r4, r0
   1e15e:	f893 8000 	ldrb.w	r8, [r3]
   1e162:	460d      	mov	r5, r1
   1e164:	4616      	mov	r6, r2
   1e166:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1e168:	f1b8 0f00 	cmp.w	r8, #0
   1e16c:	d115      	bne.n	1e19a <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1e16e:	4668      	mov	r0, sp
   1e170:	f009 ff27 	bl	27fc2 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1e174:	463a      	mov	r2, r7
   1e176:	4631      	mov	r1, r6
   1e178:	4628      	mov	r0, r5
   1e17a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1e17c:	47a0      	blx	r4
   1e17e:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1e180:	4668      	mov	r0, sp
   1e182:	f009 ff1f 	bl	27fc4 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1e186:	f1b8 0f00 	cmp.w	r8, #0
   1e18a:	d002      	beq.n	1e192 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1e18c:	4809      	ldr	r0, [pc, #36]	; (1e1b4 <tfm_ns_interface_dispatch+0x60>)
   1e18e:	f003 fa0d 	bl	215ac <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1e192:	4620      	mov	r0, r4
   1e194:	b022      	add	sp, #136	; 0x88
   1e196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1e19a:	f04f 32ff 	mov.w	r2, #4294967295
   1e19e:	f04f 33ff 	mov.w	r3, #4294967295
   1e1a2:	4804      	ldr	r0, [pc, #16]	; (1e1b4 <tfm_ns_interface_dispatch+0x60>)
   1e1a4:	f003 f932 	bl	2140c <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1e1a8:	2800      	cmp	r0, #0
   1e1aa:	d0e0      	beq.n	1e16e <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1e1ac:	241f      	movs	r4, #31
   1e1ae:	e7f0      	b.n	1e192 <tfm_ns_interface_dispatch+0x3e>
   1e1b0:	200228ed 	.word	0x200228ed
   1e1b4:	20008ca0 	.word	0x20008ca0

0001e1b8 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1e1b8:	b530      	push	{r4, r5, lr}
   1e1ba:	b095      	sub	sp, #84	; 0x54
   1e1bc:	4605      	mov	r5, r0
   1e1be:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1e1c0:	2230      	movs	r2, #48	; 0x30
   1e1c2:	2100      	movs	r1, #0
   1e1c4:	a808      	add	r0, sp, #32
   1e1c6:	f00d fbeb 	bl	2b9a0 <memset>
   1e1ca:	233f      	movs	r3, #63	; 0x3f
   1e1cc:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1e1ce:	ab07      	add	r3, sp, #28
   1e1d0:	9303      	str	r3, [sp, #12]
   1e1d2:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1e1d4:	9406      	str	r4, [sp, #24]
   1e1d6:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1e1da:	b154      	cbz	r4, 1e1f2 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1e1dc:	2301      	movs	r3, #1
   1e1de:	aa05      	add	r2, sp, #20
   1e1e0:	9200      	str	r2, [sp, #0]
   1e1e2:	2100      	movs	r1, #0
   1e1e4:	4804      	ldr	r0, [pc, #16]	; (1e1f8 <psa_generate_random+0x40>)
   1e1e6:	9301      	str	r3, [sp, #4]
   1e1e8:	aa03      	add	r2, sp, #12
   1e1ea:	f000 f807 	bl	1e1fc <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1e1ee:	b015      	add	sp, #84	; 0x54
   1e1f0:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1e1f2:	4620      	mov	r0, r4
   1e1f4:	e7fb      	b.n	1e1ee <psa_generate_random+0x36>
   1e1f6:	bf00      	nop
   1e1f8:	40000100 	.word	0x40000100

0001e1fc <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1e1fc:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1e1fe:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1e202:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1e206:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1e208:	d20d      	bcs.n	1e226 <psa_call+0x2a>
        (type < INT16_MIN) ||
   1e20a:	ea43 0504 	orr.w	r5, r3, r4
   1e20e:	2dff      	cmp	r5, #255	; 0xff
   1e210:	d809      	bhi.n	1e226 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1e212:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1e216:	4613      	mov	r3, r2
   1e218:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1e21c:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1e21e:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1e220:	4803      	ldr	r0, [pc, #12]	; (1e230 <psa_call+0x34>)
   1e222:	f7ff bf97 	b.w	1e154 <tfm_ns_interface_dispatch>
}
   1e226:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1e22a:	bc30      	pop	{r4, r5}
   1e22c:	4770      	bx	lr
   1e22e:	bf00      	nop
   1e230:	00007c21 	.word	0x00007c21

0001e234 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1e234:	2300      	movs	r3, #0
{
   1e236:	b507      	push	{r0, r1, r2, lr}
   1e238:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1e23a:	9300      	str	r3, [sp, #0]
   1e23c:	4601      	mov	r1, r0
   1e23e:	4803      	ldr	r0, [pc, #12]	; (1e24c <psa_connect+0x18>)
   1e240:	f7ff ff88 	bl	1e154 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1e244:	b003      	add	sp, #12
   1e246:	f85d fb04 	ldr.w	pc, [sp], #4
   1e24a:	bf00      	nop
   1e24c:	00007c19 	.word	0x00007c19

0001e250 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1e250:	2300      	movs	r3, #0
{
   1e252:	b507      	push	{r0, r1, r2, lr}
   1e254:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1e256:	461a      	mov	r2, r3
   1e258:	9300      	str	r3, [sp, #0]
   1e25a:	4803      	ldr	r0, [pc, #12]	; (1e268 <psa_close+0x18>)
   1e25c:	f7ff ff7a 	bl	1e154 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1e260:	b003      	add	sp, #12
   1e262:	f85d fb04 	ldr.w	pc, [sp], #4
   1e266:	bf00      	nop
   1e268:	00007c11 	.word	0x00007c11

0001e26c <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1e26c:	4b04      	ldr	r3, [pc, #16]	; (1e280 <SystemCoreClockUpdate+0x14>)
   1e26e:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1e272:	4b04      	ldr	r3, [pc, #16]	; (1e284 <SystemCoreClockUpdate+0x18>)
   1e274:	f002 0203 	and.w	r2, r2, #3
   1e278:	40d3      	lsrs	r3, r2
   1e27a:	4a03      	ldr	r2, [pc, #12]	; (1e288 <SystemCoreClockUpdate+0x1c>)
   1e27c:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1e27e:	4770      	bx	lr
   1e280:	40005000 	.word	0x40005000
   1e284:	07a12000 	.word	0x07a12000
   1e288:	20008800 	.word	0x20008800

0001e28c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1e28c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e28e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1e290:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1e292:	fab2 f382 	clz	r3, r2
   1e296:	f1c3 031f 	rsb	r3, r3, #31
   1e29a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e29c:	fa05 f403 	lsl.w	r4, r5, r3
   1e2a0:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e2a4:	e8d0 6fef 	ldaex	r6, [r0]
   1e2a8:	4296      	cmp	r6, r2
   1e2aa:	d104      	bne.n	1e2b6 <nrfx_flag32_alloc+0x2a>
   1e2ac:	e8c0 4fec 	stlex	ip, r4, [r0]
   1e2b0:	f1bc 0f00 	cmp.w	ip, #0
   1e2b4:	d1f6      	bne.n	1e2a4 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e2b6:	d1eb      	bne.n	1e290 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1e2b8:	4801      	ldr	r0, [pc, #4]	; (1e2c0 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1e2ba:	700b      	strb	r3, [r1, #0]
}
   1e2bc:	bd70      	pop	{r4, r5, r6, pc}
   1e2be:	bf00      	nop
   1e2c0:	0bad0000 	.word	0x0bad0000

0001e2c4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1e2c4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1e2c6:	6803      	ldr	r3, [r0, #0]
   1e2c8:	40cb      	lsrs	r3, r1
   1e2ca:	07db      	lsls	r3, r3, #31
   1e2cc:	d410      	bmi.n	1e2f0 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1e2ce:	2301      	movs	r3, #1
   1e2d0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1e2d2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1e2d4:	ea43 0102 	orr.w	r1, r3, r2
   1e2d8:	e8d0 4fef 	ldaex	r4, [r0]
   1e2dc:	4294      	cmp	r4, r2
   1e2de:	d104      	bne.n	1e2ea <nrfx_flag32_free+0x26>
   1e2e0:	e8c0 1fec 	stlex	ip, r1, [r0]
   1e2e4:	f1bc 0f00 	cmp.w	ip, #0
   1e2e8:	d1f6      	bne.n	1e2d8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e2ea:	d1f2      	bne.n	1e2d2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1e2ec:	4801      	ldr	r0, [pc, #4]	; (1e2f4 <nrfx_flag32_free+0x30>)
}
   1e2ee:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e2f0:	4801      	ldr	r0, [pc, #4]	; (1e2f8 <nrfx_flag32_free+0x34>)
   1e2f2:	e7fc      	b.n	1e2ee <nrfx_flag32_free+0x2a>
   1e2f4:	0bad0000 	.word	0x0bad0000
   1e2f8:	0bad0004 	.word	0x0bad0004

0001e2fc <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1e2fc:	2200      	movs	r2, #0
{
   1e2fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e300:	4b62      	ldr	r3, [pc, #392]	; (1e48c <clock_stop+0x190>)
    switch (domain)
   1e302:	2803      	cmp	r0, #3
   1e304:	d838      	bhi.n	1e378 <clock_stop+0x7c>
   1e306:	e8df f000 	tbb	[pc, r0]
   1e30a:	0d02      	.short	0x0d02
   1e30c:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1e30e:	2102      	movs	r1, #2
   1e310:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e314:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e318:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e31c:	2201      	movs	r2, #1
   1e31e:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1e320:	2400      	movs	r4, #0
   1e322:	e009      	b.n	1e338 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1e324:	2101      	movs	r1, #1
   1e326:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e32a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e32e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1e332:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e336:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1e338:	2301      	movs	r3, #1
   1e33a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1e33e:	2803      	cmp	r0, #3
   1e340:	f200 8093 	bhi.w	1e46a <clock_stop+0x16e>
   1e344:	e8df f000 	tbb	[pc, r0]
   1e348:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1e34c:	f44f 7100 	mov.w	r1, #512	; 0x200
   1e350:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e354:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1e358:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e35c:	2201      	movs	r2, #1
   1e35e:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1e360:	e7de      	b.n	1e320 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1e362:	f44f 7180 	mov.w	r1, #256	; 0x100
   1e366:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e36a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1e36e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e372:	2201      	movs	r2, #1
   1e374:	61da      	str	r2, [r3, #28]
   1e376:	e7d3      	b.n	1e320 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1e378:	4945      	ldr	r1, [pc, #276]	; (1e490 <clock_stop+0x194>)
   1e37a:	4846      	ldr	r0, [pc, #280]	; (1e494 <clock_stop+0x198>)
   1e37c:	23d8      	movs	r3, #216	; 0xd8
   1e37e:	4a46      	ldr	r2, [pc, #280]	; (1e498 <clock_stop+0x19c>)
   1e380:	f008 facf 	bl	26922 <assert_print>
   1e384:	21d8      	movs	r1, #216	; 0xd8
   1e386:	4844      	ldr	r0, [pc, #272]	; (1e498 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1e388:	f008 fac4 	bl	26914 <assert_post_action>
    switch (domain)
   1e38c:	f242 7510 	movw	r5, #10000	; 0x2710
   1e390:	4e3e      	ldr	r6, [pc, #248]	; (1e48c <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1e392:	b194      	cbz	r4, 1e3ba <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e394:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1e398:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1e39c:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e39e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1e3a2:	03d9      	lsls	r1, r3, #15
   1e3a4:	d507      	bpl.n	1e3b6 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1e3a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e3aa:	2801      	cmp	r0, #1
   1e3ac:	d103      	bne.n	1e3b6 <clock_stop+0xba>
   1e3ae:	f00c fabe 	bl	2a92e <nrfx_busy_wait>
   1e3b2:	3d01      	subs	r5, #1
   1e3b4:	d1ed      	bne.n	1e392 <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1e3b6:	b002      	add	sp, #8
   1e3b8:	bd70      	pop	{r4, r5, r6, pc}
   1e3ba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1e3be:	03da      	lsls	r2, r3, #15
   1e3c0:	d5f9      	bpl.n	1e3b6 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1e3c2:	2001      	movs	r0, #1
   1e3c4:	f00c fab3 	bl	2a92e <nrfx_busy_wait>
   1e3c8:	3d01      	subs	r5, #1
   1e3ca:	d1f6      	bne.n	1e3ba <clock_stop+0xbe>
   1e3cc:	e7f3      	b.n	1e3b6 <clock_stop+0xba>
    switch (domain)
   1e3ce:	f242 7510 	movw	r5, #10000	; 0x2710
   1e3d2:	4e2e      	ldr	r6, [pc, #184]	; (1e48c <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1e3d4:	b18c      	cbz	r4, 1e3fa <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1e3d6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e3da:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1e3de:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e3e0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e3e4:	03db      	lsls	r3, r3, #15
   1e3e6:	d5e6      	bpl.n	1e3b6 <clock_stop+0xba>
   1e3e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e3ec:	2801      	cmp	r0, #1
   1e3ee:	d1e2      	bne.n	1e3b6 <clock_stop+0xba>
   1e3f0:	f00c fa9d 	bl	2a92e <nrfx_busy_wait>
   1e3f4:	3d01      	subs	r5, #1
   1e3f6:	d1ed      	bne.n	1e3d4 <clock_stop+0xd8>
   1e3f8:	e7dd      	b.n	1e3b6 <clock_stop+0xba>
   1e3fa:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1e3fe:	03d8      	lsls	r0, r3, #15
   1e400:	d5d9      	bpl.n	1e3b6 <clock_stop+0xba>
   1e402:	2001      	movs	r0, #1
   1e404:	f00c fa93 	bl	2a92e <nrfx_busy_wait>
   1e408:	3d01      	subs	r5, #1
   1e40a:	d1f6      	bne.n	1e3fa <clock_stop+0xfe>
   1e40c:	e7d3      	b.n	1e3b6 <clock_stop+0xba>
    switch (domain)
   1e40e:	f242 7510 	movw	r5, #10000	; 0x2710
   1e412:	4e1e      	ldr	r6, [pc, #120]	; (1e48c <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1e414:	b18c      	cbz	r4, 1e43a <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1e416:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1e41a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1e41e:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1e420:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1e424:	03d9      	lsls	r1, r3, #15
   1e426:	d5c6      	bpl.n	1e3b6 <clock_stop+0xba>
   1e428:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e42c:	2801      	cmp	r0, #1
   1e42e:	d1c2      	bne.n	1e3b6 <clock_stop+0xba>
   1e430:	f00c fa7d 	bl	2a92e <nrfx_busy_wait>
   1e434:	3d01      	subs	r5, #1
   1e436:	d1ed      	bne.n	1e414 <clock_stop+0x118>
   1e438:	e7bd      	b.n	1e3b6 <clock_stop+0xba>
   1e43a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1e43e:	03da      	lsls	r2, r3, #15
   1e440:	d5b9      	bpl.n	1e3b6 <clock_stop+0xba>
   1e442:	2001      	movs	r0, #1
   1e444:	f00c fa73 	bl	2a92e <nrfx_busy_wait>
   1e448:	3d01      	subs	r5, #1
   1e44a:	d1f6      	bne.n	1e43a <clock_stop+0x13e>
   1e44c:	e7b3      	b.n	1e3b6 <clock_stop+0xba>
    switch (domain)
   1e44e:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1e452:	4e0e      	ldr	r6, [pc, #56]	; (1e48c <clock_stop+0x190>)
   1e454:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1e458:	03db      	lsls	r3, r3, #15
   1e45a:	d5ac      	bpl.n	1e3b6 <clock_stop+0xba>
   1e45c:	b984      	cbnz	r4, 1e480 <clock_stop+0x184>
   1e45e:	2001      	movs	r0, #1
   1e460:	f00c fa65 	bl	2a92e <nrfx_busy_wait>
   1e464:	3d01      	subs	r5, #1
   1e466:	d1f5      	bne.n	1e454 <clock_stop+0x158>
   1e468:	e7a5      	b.n	1e3b6 <clock_stop+0xba>
            NRFX_ASSERT(0);
   1e46a:	4909      	ldr	r1, [pc, #36]	; (1e490 <clock_stop+0x194>)
   1e46c:	4809      	ldr	r0, [pc, #36]	; (1e494 <clock_stop+0x198>)
   1e46e:	f240 3347 	movw	r3, #839	; 0x347
   1e472:	4a0a      	ldr	r2, [pc, #40]	; (1e49c <clock_stop+0x1a0>)
   1e474:	f008 fa55 	bl	26922 <assert_print>
   1e478:	f240 3147 	movw	r1, #839	; 0x347
   1e47c:	4807      	ldr	r0, [pc, #28]	; (1e49c <clock_stop+0x1a0>)
   1e47e:	e783      	b.n	1e388 <clock_stop+0x8c>
   1e480:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e484:	2801      	cmp	r0, #1
   1e486:	d0eb      	beq.n	1e460 <clock_stop+0x164>
   1e488:	e795      	b.n	1e3b6 <clock_stop+0xba>
   1e48a:	bf00      	nop
   1e48c:	40005000 	.word	0x40005000
   1e490:	000334e0 	.word	0x000334e0
   1e494:	0002d881 	.word	0x0002d881
   1e498:	0003243b 	.word	0x0003243b
   1e49c:	00032478 	.word	0x00032478

0001e4a0 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1e4a0:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1e4a2:	b958      	cbnz	r0, 1e4bc <nrfx_clock_init+0x1c>
   1e4a4:	490a      	ldr	r1, [pc, #40]	; (1e4d0 <nrfx_clock_init+0x30>)
   1e4a6:	480b      	ldr	r0, [pc, #44]	; (1e4d4 <nrfx_clock_init+0x34>)
   1e4a8:	f240 1315 	movw	r3, #277	; 0x115
   1e4ac:	4a0a      	ldr	r2, [pc, #40]	; (1e4d8 <nrfx_clock_init+0x38>)
   1e4ae:	f008 fa38 	bl	26922 <assert_print>
   1e4b2:	f240 1115 	movw	r1, #277	; 0x115
   1e4b6:	4808      	ldr	r0, [pc, #32]	; (1e4d8 <nrfx_clock_init+0x38>)
   1e4b8:	f008 fa2c 	bl	26914 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1e4bc:	4b07      	ldr	r3, [pc, #28]	; (1e4dc <nrfx_clock_init+0x3c>)
   1e4be:	791a      	ldrb	r2, [r3, #4]
   1e4c0:	b922      	cbnz	r2, 1e4cc <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1e4c2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1e4c4:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1e4c6:	4806      	ldr	r0, [pc, #24]	; (1e4e0 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1e4c8:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e4ca:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1e4cc:	4805      	ldr	r0, [pc, #20]	; (1e4e4 <nrfx_clock_init+0x44>)
    return err_code;
   1e4ce:	e7fc      	b.n	1e4ca <nrfx_clock_init+0x2a>
   1e4d0:	000324ac 	.word	0x000324ac
   1e4d4:	0002d881 	.word	0x0002d881
   1e4d8:	0003243b 	.word	0x0003243b
   1e4dc:	20021a28 	.word	0x20021a28
   1e4e0:	0bad0000 	.word	0x0bad0000
   1e4e4:	0bad000c 	.word	0x0bad000c

0001e4e8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1e4e8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1e4ea:	4b0f      	ldr	r3, [pc, #60]	; (1e528 <nrfx_clock_enable+0x40>)
   1e4ec:	791b      	ldrb	r3, [r3, #4]
   1e4ee:	b95b      	cbnz	r3, 1e508 <nrfx_clock_enable+0x20>
   1e4f0:	490e      	ldr	r1, [pc, #56]	; (1e52c <nrfx_clock_enable+0x44>)
   1e4f2:	480f      	ldr	r0, [pc, #60]	; (1e530 <nrfx_clock_enable+0x48>)
   1e4f4:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1e4f8:	4a0e      	ldr	r2, [pc, #56]	; (1e534 <nrfx_clock_enable+0x4c>)
   1e4fa:	f008 fa12 	bl	26922 <assert_print>
   1e4fe:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1e502:	480c      	ldr	r0, [pc, #48]	; (1e534 <nrfx_clock_enable+0x4c>)
   1e504:	f008 fa06 	bl	26914 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1e508:	2005      	movs	r0, #5
   1e50a:	f7f2 f929 	bl	10760 <arch_irq_is_enabled>
   1e50e:	b910      	cbnz	r0, 1e516 <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1e510:	2005      	movs	r0, #5
   1e512:	f7f2 f903 	bl	1071c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e516:	2201      	movs	r2, #1
   1e518:	4b07      	ldr	r3, [pc, #28]	; (1e538 <nrfx_clock_enable+0x50>)
   1e51a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1e51e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1e522:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1e526:	bd08      	pop	{r3, pc}
   1e528:	20021a28 	.word	0x20021a28
   1e52c:	000324ba 	.word	0x000324ba
   1e530:	0002d881 	.word	0x0002d881
   1e534:	0003243b 	.word	0x0003243b
   1e538:	40005000 	.word	0x40005000

0001e53c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1e53c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1e53e:	4b38      	ldr	r3, [pc, #224]	; (1e620 <nrfx_clock_start+0xe4>)
   1e540:	791b      	ldrb	r3, [r3, #4]
   1e542:	b95b      	cbnz	r3, 1e55c <nrfx_clock_start+0x20>
   1e544:	4937      	ldr	r1, [pc, #220]	; (1e624 <nrfx_clock_start+0xe8>)
   1e546:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1e54a:	4a37      	ldr	r2, [pc, #220]	; (1e628 <nrfx_clock_start+0xec>)
   1e54c:	4837      	ldr	r0, [pc, #220]	; (1e62c <nrfx_clock_start+0xf0>)
   1e54e:	f008 f9e8 	bl	26922 <assert_print>
   1e552:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1e556:	4834      	ldr	r0, [pc, #208]	; (1e628 <nrfx_clock_start+0xec>)
   1e558:	f008 f9dc 	bl	26914 <assert_post_action>
    switch (domain)
   1e55c:	4b34      	ldr	r3, [pc, #208]	; (1e630 <nrfx_clock_start+0xf4>)
   1e55e:	2803      	cmp	r0, #3
   1e560:	d853      	bhi.n	1e60a <nrfx_clock_start+0xce>
   1e562:	e8df f000 	tbb	[pc, r0]
   1e566:	3002      	.short	0x3002
   1e568:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e56a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e56e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1e572:	03c9      	lsls	r1, r1, #15
   1e574:	d511      	bpl.n	1e59a <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e576:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e57a:	2b02      	cmp	r3, #2
   1e57c:	d11c      	bne.n	1e5b8 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e57e:	4a2c      	ldr	r2, [pc, #176]	; (1e630 <nrfx_clock_start+0xf4>)
   1e580:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e584:	2300      	movs	r3, #0
   1e586:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1e58a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1e58e:	2302      	movs	r3, #2
   1e590:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e594:	2301      	movs	r3, #1
   1e596:	6093      	str	r3, [r2, #8]
}
   1e598:	e00d      	b.n	1e5b6 <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1e59a:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1e59e:	07d2      	lsls	r2, r2, #31
   1e5a0:	d50f      	bpl.n	1e5c2 <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e5a2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1e5a6:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e5aa:	3a01      	subs	r2, #1
   1e5ac:	2a01      	cmp	r2, #1
   1e5ae:	d805      	bhi.n	1e5bc <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1e5b0:	2202      	movs	r2, #2
   1e5b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1e5b6:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e5b8:	2b01      	cmp	r3, #1
   1e5ba:	d002      	beq.n	1e5c2 <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e5bc:	2000      	movs	r0, #0
   1e5be:	f7ff fe9d 	bl	1e2fc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1e5c2:	2301      	movs	r3, #1
   1e5c4:	e7db      	b.n	1e57e <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e5c6:	2200      	movs	r2, #0
   1e5c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e5cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e5d0:	2201      	movs	r2, #1
   1e5d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e5d6:	601a      	str	r2, [r3, #0]
}
   1e5d8:	e7ed      	b.n	1e5b6 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e5da:	2200      	movs	r2, #0
   1e5dc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1e5e0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1e5e4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e5e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e5ec:	2201      	movs	r2, #1
   1e5ee:	621a      	str	r2, [r3, #32]
}
   1e5f0:	e7e1      	b.n	1e5b6 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e5f2:	2200      	movs	r2, #0
   1e5f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1e5f8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1e5fc:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e600:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e604:	2201      	movs	r2, #1
   1e606:	619a      	str	r2, [r3, #24]
}
   1e608:	e7d5      	b.n	1e5b6 <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1e60a:	490a      	ldr	r1, [pc, #40]	; (1e634 <nrfx_clock_start+0xf8>)
   1e60c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1e610:	4a05      	ldr	r2, [pc, #20]	; (1e628 <nrfx_clock_start+0xec>)
   1e612:	4806      	ldr	r0, [pc, #24]	; (1e62c <nrfx_clock_start+0xf0>)
   1e614:	f008 f985 	bl	26922 <assert_print>
   1e618:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1e61c:	e79b      	b.n	1e556 <nrfx_clock_start+0x1a>
   1e61e:	bf00      	nop
   1e620:	20021a28 	.word	0x20021a28
   1e624:	000324ba 	.word	0x000324ba
   1e628:	0003243b 	.word	0x0003243b
   1e62c:	0002d881 	.word	0x0002d881
   1e630:	40005000 	.word	0x40005000
   1e634:	000334e0 	.word	0x000334e0

0001e638 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1e638:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1e63a:	4b09      	ldr	r3, [pc, #36]	; (1e660 <nrfx_clock_stop+0x28>)
   1e63c:	791b      	ldrb	r3, [r3, #4]
   1e63e:	b95b      	cbnz	r3, 1e658 <nrfx_clock_stop+0x20>
   1e640:	4908      	ldr	r1, [pc, #32]	; (1e664 <nrfx_clock_stop+0x2c>)
   1e642:	4809      	ldr	r0, [pc, #36]	; (1e668 <nrfx_clock_stop+0x30>)
   1e644:	f240 13ad 	movw	r3, #429	; 0x1ad
   1e648:	4a08      	ldr	r2, [pc, #32]	; (1e66c <nrfx_clock_stop+0x34>)
   1e64a:	f008 f96a 	bl	26922 <assert_print>
   1e64e:	f240 11ad 	movw	r1, #429	; 0x1ad
   1e652:	4806      	ldr	r0, [pc, #24]	; (1e66c <nrfx_clock_stop+0x34>)
   1e654:	f008 f95e 	bl	26914 <assert_post_action>
    clock_stop(domain);
}
   1e658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1e65c:	f7ff be4e 	b.w	1e2fc <clock_stop>
   1e660:	20021a28 	.word	0x20021a28
   1e664:	000324ba 	.word	0x000324ba
   1e668:	0002d881 	.word	0x0002d881
   1e66c:	0003243b 	.word	0x0003243b

0001e670 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1e670:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e672:	4b28      	ldr	r3, [pc, #160]	; (1e714 <nrfx_power_clock_irq_handler+0xa4>)
   1e674:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1e678:	b152      	cbz	r2, 1e690 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e67a:	2000      	movs	r0, #0
   1e67c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1e680:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1e684:	2201      	movs	r2, #1
   1e686:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1e68a:	4b23      	ldr	r3, [pc, #140]	; (1e718 <nrfx_power_clock_irq_handler+0xa8>)
   1e68c:	681b      	ldr	r3, [r3, #0]
   1e68e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e690:	4b20      	ldr	r3, [pc, #128]	; (1e714 <nrfx_power_clock_irq_handler+0xa4>)
   1e692:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1e696:	b18a      	cbz	r2, 1e6bc <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e698:	2200      	movs	r2, #0
   1e69a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e69e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e6a2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e6a6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1e6aa:	f002 0203 	and.w	r2, r2, #3
   1e6ae:	2a01      	cmp	r2, #1
   1e6b0:	f04f 0102 	mov.w	r1, #2
   1e6b4:	d126      	bne.n	1e704 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e6b6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e6ba:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e6bc:	4b15      	ldr	r3, [pc, #84]	; (1e714 <nrfx_power_clock_irq_handler+0xa4>)
   1e6be:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1e6c2:	b162      	cbz	r2, 1e6de <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6c4:	2200      	movs	r2, #0
   1e6c6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1e6ca:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1e6ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e6d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1e6d6:	4b10      	ldr	r3, [pc, #64]	; (1e718 <nrfx_power_clock_irq_handler+0xa8>)
   1e6d8:	2004      	movs	r0, #4
   1e6da:	681b      	ldr	r3, [r3, #0]
   1e6dc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e6de:	4b0d      	ldr	r3, [pc, #52]	; (1e714 <nrfx_power_clock_irq_handler+0xa4>)
   1e6e0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1e6e4:	b1aa      	cbz	r2, 1e712 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6e6:	2200      	movs	r2, #0
   1e6e8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1e6ec:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1e6f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e6f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1e6f8:	4b07      	ldr	r3, [pc, #28]	; (1e718 <nrfx_power_clock_irq_handler+0xa8>)
   1e6fa:	2005      	movs	r0, #5
    }
#endif
}
   1e6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1e700:	681b      	ldr	r3, [r3, #0]
   1e702:	4718      	bx	r3
   1e704:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e708:	4b03      	ldr	r3, [pc, #12]	; (1e718 <nrfx_power_clock_irq_handler+0xa8>)
   1e70a:	2001      	movs	r0, #1
   1e70c:	681b      	ldr	r3, [r3, #0]
   1e70e:	4798      	blx	r3
   1e710:	e7d4      	b.n	1e6bc <nrfx_power_clock_irq_handler+0x4c>
}
   1e712:	bd10      	pop	{r4, pc}
   1e714:	40005000 	.word	0x40005000
   1e718:	20021a28 	.word	0x20021a28

0001e71c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1e71c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1e71e:	4801      	ldr	r0, [pc, #4]	; (1e724 <nrfx_dppi_channel_alloc+0x8>)
   1e720:	f7ff bdb4 	b.w	1e28c <nrfx_flag32_alloc>
   1e724:	20008804 	.word	0x20008804

0001e728 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1e728:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1e72a:	4a04      	ldr	r2, [pc, #16]	; (1e73c <nrfx_dppi_channel_free+0x14>)
   1e72c:	4083      	lsls	r3, r0
{
   1e72e:	4601      	mov	r1, r0
   1e730:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1e734:	4802      	ldr	r0, [pc, #8]	; (1e740 <nrfx_dppi_channel_free+0x18>)
   1e736:	f7ff bdc5 	b.w	1e2c4 <nrfx_flag32_free>
   1e73a:	bf00      	nop
   1e73c:	40017000 	.word	0x40017000
   1e740:	20008804 	.word	0x20008804

0001e744 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1e744:	4b03      	ldr	r3, [pc, #12]	; (1e754 <pin_in_use_by_te+0x10>)
   1e746:	3008      	adds	r0, #8
   1e748:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e74c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1e750:	4770      	bx	lr
   1e752:	bf00      	nop
   1e754:	20008808 	.word	0x20008808

0001e758 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1e758:	4b04      	ldr	r3, [pc, #16]	; (1e76c <pin_has_trigger+0x14>)
   1e75a:	3008      	adds	r0, #8
   1e75c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e760:	f010 001c 	ands.w	r0, r0, #28
   1e764:	bf18      	it	ne
   1e766:	2001      	movne	r0, #1
   1e768:	4770      	bx	lr
   1e76a:	bf00      	nop
   1e76c:	20008808 	.word	0x20008808

0001e770 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e770:	4b03      	ldr	r3, [pc, #12]	; (1e780 <pin_is_output+0x10>)
   1e772:	3008      	adds	r0, #8
   1e774:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e778:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1e77c:	4770      	bx	lr
   1e77e:	bf00      	nop
   1e780:	20008808 	.word	0x20008808

0001e784 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1e784:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e786:	4c0d      	ldr	r4, [pc, #52]	; (1e7bc <call_handler+0x38>)
   1e788:	f100 0308 	add.w	r3, r0, #8
   1e78c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1e790:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e792:	05da      	lsls	r2, r3, #23
{
   1e794:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e796:	d507      	bpl.n	1e7a8 <call_handler+0x24>
   1e798:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1e79c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1e7a0:	6852      	ldr	r2, [r2, #4]
   1e7a2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1e7a6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1e7a8:	68a3      	ldr	r3, [r4, #8]
   1e7aa:	b12b      	cbz	r3, 1e7b8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e7ac:	4631      	mov	r1, r6
   1e7ae:	4628      	mov	r0, r5
   1e7b0:	68e2      	ldr	r2, [r4, #12]
    }
}
   1e7b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e7b6:	4718      	bx	r3
}
   1e7b8:	bd70      	pop	{r4, r5, r6, pc}
   1e7ba:	bf00      	nop
   1e7bc:	20008808 	.word	0x20008808

0001e7c0 <release_handler>:
{
   1e7c0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e7c2:	4a18      	ldr	r2, [pc, #96]	; (1e824 <release_handler+0x64>)
   1e7c4:	3008      	adds	r0, #8
   1e7c6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1e7ca:	05d9      	lsls	r1, r3, #23
   1e7cc:	d51d      	bpl.n	1e80a <release_handler+0x4a>
   1e7ce:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1e7d2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e7d6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e7da:	2000      	movs	r0, #0
   1e7dc:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1e7e0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1e7e4:	f413 7f80 	tst.w	r3, #256	; 0x100
   1e7e8:	d003      	beq.n	1e7f2 <release_handler+0x32>
   1e7ea:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1e7ee:	4299      	cmp	r1, r3
   1e7f0:	d00b      	beq.n	1e80a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e7f2:	3001      	adds	r0, #1
   1e7f4:	2830      	cmp	r0, #48	; 0x30
   1e7f6:	d1f3      	bne.n	1e7e0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1e7f8:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e7fa:	480b      	ldr	r0, [pc, #44]	; (1e828 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1e7fc:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e800:	f7ff fd60 	bl	1e2c4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1e804:	4b09      	ldr	r3, [pc, #36]	; (1e82c <release_handler+0x6c>)
   1e806:	4298      	cmp	r0, r3
   1e808:	d100      	bne.n	1e80c <release_handler+0x4c>
}
   1e80a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1e80c:	4908      	ldr	r1, [pc, #32]	; (1e830 <release_handler+0x70>)
   1e80e:	4809      	ldr	r0, [pc, #36]	; (1e834 <release_handler+0x74>)
   1e810:	f44f 7399 	mov.w	r3, #306	; 0x132
   1e814:	4a08      	ldr	r2, [pc, #32]	; (1e838 <release_handler+0x78>)
   1e816:	f008 f884 	bl	26922 <assert_print>
   1e81a:	f44f 7199 	mov.w	r1, #306	; 0x132
   1e81e:	4806      	ldr	r0, [pc, #24]	; (1e838 <release_handler+0x78>)
   1e820:	f008 f878 	bl	26914 <assert_post_action>
   1e824:	20008808 	.word	0x20008808
   1e828:	2000887c 	.word	0x2000887c
   1e82c:	0bad0000 	.word	0x0bad0000
   1e830:	0002e888 	.word	0x0002e888
   1e834:	0002d881 	.word	0x0002d881
   1e838:	000324ed 	.word	0x000324ed

0001e83c <pin_handler_trigger_uninit>:
{
   1e83c:	b538      	push	{r3, r4, r5, lr}
   1e83e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1e840:	f7ff ff80 	bl	1e744 <pin_in_use_by_te>
   1e844:	4c0b      	ldr	r4, [pc, #44]	; (1e874 <pin_handler_trigger_uninit+0x38>)
   1e846:	f102 0508 	add.w	r5, r2, #8
   1e84a:	b160      	cbz	r0, 1e866 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1e84c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e84e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1e852:	0b5b      	lsrs	r3, r3, #13
   1e854:	009b      	lsls	r3, r3, #2
   1e856:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e85a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1e85e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1e862:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1e866:	4610      	mov	r0, r2
   1e868:	f7ff ffaa 	bl	1e7c0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1e86c:	2300      	movs	r3, #0
   1e86e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1e872:	bd38      	pop	{r3, r4, r5, pc}
   1e874:	20008808 	.word	0x20008808

0001e878 <nrf_gpio_pin_port_decode>:
{
   1e878:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e87a:	6802      	ldr	r2, [r0, #0]
{
   1e87c:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e87e:	4610      	mov	r0, r2
   1e880:	f00c f857 	bl	2a932 <nrf_gpio_pin_present_check>
   1e884:	b958      	cbnz	r0, 1e89e <nrf_gpio_pin_port_decode+0x26>
   1e886:	4910      	ldr	r1, [pc, #64]	; (1e8c8 <nrf_gpio_pin_port_decode+0x50>)
   1e888:	f240 2347 	movw	r3, #583	; 0x247
   1e88c:	4a0f      	ldr	r2, [pc, #60]	; (1e8cc <nrf_gpio_pin_port_decode+0x54>)
   1e88e:	4810      	ldr	r0, [pc, #64]	; (1e8d0 <nrf_gpio_pin_port_decode+0x58>)
   1e890:	f008 f847 	bl	26922 <assert_print>
   1e894:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1e898:	480c      	ldr	r0, [pc, #48]	; (1e8cc <nrf_gpio_pin_port_decode+0x54>)
   1e89a:	f008 f83b 	bl	26914 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1e89e:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e8a2:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1e8a4:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e8a6:	d00b      	beq.n	1e8c0 <nrf_gpio_pin_port_decode+0x48>
   1e8a8:	2a01      	cmp	r2, #1
   1e8aa:	d00b      	beq.n	1e8c4 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1e8ac:	4909      	ldr	r1, [pc, #36]	; (1e8d4 <nrf_gpio_pin_port_decode+0x5c>)
   1e8ae:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1e8b2:	4a06      	ldr	r2, [pc, #24]	; (1e8cc <nrf_gpio_pin_port_decode+0x54>)
   1e8b4:	4806      	ldr	r0, [pc, #24]	; (1e8d0 <nrf_gpio_pin_port_decode+0x58>)
   1e8b6:	f008 f834 	bl	26922 <assert_print>
   1e8ba:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1e8be:	e7eb      	b.n	1e898 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1e8c0:	4805      	ldr	r0, [pc, #20]	; (1e8d8 <nrf_gpio_pin_port_decode+0x60>)
}
   1e8c2:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e8c4:	4805      	ldr	r0, [pc, #20]	; (1e8dc <nrf_gpio_pin_port_decode+0x64>)
   1e8c6:	e7fc      	b.n	1e8c2 <nrf_gpio_pin_port_decode+0x4a>
   1e8c8:	00031bdb 	.word	0x00031bdb
   1e8cc:	00031ba8 	.word	0x00031ba8
   1e8d0:	0002d881 	.word	0x0002d881
   1e8d4:	000334e0 	.word	0x000334e0
   1e8d8:	40842500 	.word	0x40842500
   1e8dc:	40842800 	.word	0x40842800

0001e8e0 <nrfx_gpiote_input_configure>:
{
   1e8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8e2:	4604      	mov	r4, r0
   1e8e4:	4617      	mov	r7, r2
   1e8e6:	461d      	mov	r5, r3
   1e8e8:	b085      	sub	sp, #20
    if (p_input_config)
   1e8ea:	b1d9      	cbz	r1, 1e924 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1e8ec:	f00c f832 	bl	2a954 <pin_is_task_output>
   1e8f0:	bb00      	cbnz	r0, 1e934 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1e8f2:	460b      	mov	r3, r1
   1e8f4:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1e8f8:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1e8fc:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1e900:	f10d 020f 	add.w	r2, sp, #15
   1e904:	f10d 010e 	add.w	r1, sp, #14
   1e908:	4620      	mov	r0, r4
   1e90a:	f00c f82e 	bl	2a96a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1e90e:	4a44      	ldr	r2, [pc, #272]	; (1ea20 <nrfx_gpiote_input_configure+0x140>)
   1e910:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1e914:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1e918:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1e91c:	f043 0301 	orr.w	r3, r3, #1
   1e920:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1e924:	b36f      	cbz	r7, 1e982 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1e926:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1e928:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1e92a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1e92c:	f7ff ff20 	bl	1e770 <pin_is_output>
   1e930:	b110      	cbz	r0, 1e938 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1e932:	b1da      	cbz	r2, 1e96c <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1e934:	483b      	ldr	r0, [pc, #236]	; (1ea24 <nrfx_gpiote_input_configure+0x144>)
   1e936:	e026      	b.n	1e986 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1e938:	4839      	ldr	r0, [pc, #228]	; (1ea20 <nrfx_gpiote_input_configure+0x140>)
   1e93a:	f104 0c08 	add.w	ip, r4, #8
   1e93e:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1e942:	f021 0120 	bic.w	r1, r1, #32
   1e946:	04c9      	lsls	r1, r1, #19
   1e948:	0cc9      	lsrs	r1, r1, #19
   1e94a:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1e94e:	b16a      	cbz	r2, 1e96c <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1e950:	2e03      	cmp	r6, #3
   1e952:	d8ef      	bhi.n	1e934 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1e954:	687b      	ldr	r3, [r7, #4]
   1e956:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1e958:	00ba      	lsls	r2, r7, #2
   1e95a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e95e:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1e962:	b996      	cbnz	r6, 1e98a <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1e964:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1e968:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1e96c:	4a2c      	ldr	r2, [pc, #176]	; (1ea20 <nrfx_gpiote_input_configure+0x140>)
   1e96e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1e972:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1e976:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1e97a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1e97e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1e982:	bb15      	cbnz	r5, 1e9ca <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1e984:	4828      	ldr	r0, [pc, #160]	; (1ea28 <nrfx_gpiote_input_configure+0x148>)
}
   1e986:	b005      	add	sp, #20
   1e988:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e98a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e98e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1e992:	f023 0303 	bic.w	r3, r3, #3
   1e996:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e99a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1e99e:	f041 0120 	orr.w	r1, r1, #32
   1e9a2:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1e9a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1e9aa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e9ae:	0223      	lsls	r3, r4, #8
   1e9b0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1e9b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1e9b8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1e9bc:	ea43 030e 	orr.w	r3, r3, lr
   1e9c0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1e9c4:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1e9c8:	e7d0      	b.n	1e96c <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1e9ca:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1e9cc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1e9d0:	f7ff fef6 	bl	1e7c0 <release_handler>
    if (!handler)
   1e9d4:	2e00      	cmp	r6, #0
   1e9d6:	d0d5      	beq.n	1e984 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e9d8:	4d11      	ldr	r5, [pc, #68]	; (1ea20 <nrfx_gpiote_input_configure+0x140>)
   1e9da:	e9d5 2300 	ldrd	r2, r3, [r5]
   1e9de:	4296      	cmp	r6, r2
   1e9e0:	d101      	bne.n	1e9e6 <nrfx_gpiote_input_configure+0x106>
   1e9e2:	429f      	cmp	r7, r3
   1e9e4:	d019      	beq.n	1ea1a <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1e9e6:	4811      	ldr	r0, [pc, #68]	; (1ea2c <nrfx_gpiote_input_configure+0x14c>)
   1e9e8:	f10d 010f 	add.w	r1, sp, #15
   1e9ec:	f7ff fc4e 	bl	1e28c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1e9f0:	4b0d      	ldr	r3, [pc, #52]	; (1ea28 <nrfx_gpiote_input_configure+0x148>)
   1e9f2:	4298      	cmp	r0, r3
   1e9f4:	d1c7      	bne.n	1e986 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1e9f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1e9fa:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e9fe:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1ea02:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ea04:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1ea08:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ea0c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1ea10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1ea14:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1ea18:	e7b4      	b.n	1e984 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ea1a:	2200      	movs	r2, #0
   1ea1c:	e7ed      	b.n	1e9fa <nrfx_gpiote_input_configure+0x11a>
   1ea1e:	bf00      	nop
   1ea20:	20008808 	.word	0x20008808
   1ea24:	0bad0004 	.word	0x0bad0004
   1ea28:	0bad0000 	.word	0x0bad0000
   1ea2c:	2000887c 	.word	0x2000887c

0001ea30 <nrfx_gpiote_output_configure>:
{
   1ea30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea32:	4604      	mov	r4, r0
   1ea34:	4615      	mov	r5, r2
   1ea36:	b085      	sub	sp, #20
    if (p_config)
   1ea38:	b321      	cbz	r1, 1ea84 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1ea3a:	f7ff fe99 	bl	1e770 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1ea3e:	b920      	cbnz	r0, 1ea4a <nrfx_gpiote_output_configure+0x1a>
   1ea40:	4620      	mov	r0, r4
   1ea42:	f7ff fe7f 	bl	1e744 <pin_in_use_by_te>
   1ea46:	2800      	cmp	r0, #0
   1ea48:	d161      	bne.n	1eb0e <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1ea4a:	4620      	mov	r0, r4
   1ea4c:	f7ff fe84 	bl	1e758 <pin_has_trigger>
   1ea50:	b110      	cbz	r0, 1ea58 <nrfx_gpiote_output_configure+0x28>
   1ea52:	784b      	ldrb	r3, [r1, #1]
   1ea54:	2b01      	cmp	r3, #1
   1ea56:	d05a      	beq.n	1eb0e <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ea58:	2301      	movs	r3, #1
   1ea5a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1ea5e:	2300      	movs	r3, #0
   1ea60:	1c4a      	adds	r2, r1, #1
   1ea62:	e9cd 1300 	strd	r1, r3, [sp]
   1ea66:	4620      	mov	r0, r4
   1ea68:	1c8b      	adds	r3, r1, #2
   1ea6a:	f10d 010f 	add.w	r1, sp, #15
   1ea6e:	f00b ff7c 	bl	2a96a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1ea72:	4a28      	ldr	r2, [pc, #160]	; (1eb14 <nrfx_gpiote_output_configure+0xe4>)
   1ea74:	f104 0108 	add.w	r1, r4, #8
   1ea78:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1ea7c:	f043 0303 	orr.w	r3, r3, #3
   1ea80:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1ea84:	b915      	cbnz	r5, 1ea8c <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1ea86:	4824      	ldr	r0, [pc, #144]	; (1eb18 <nrfx_gpiote_output_configure+0xe8>)
}
   1ea88:	b005      	add	sp, #20
   1ea8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1ea8c:	4620      	mov	r0, r4
   1ea8e:	f7ff fe6f 	bl	1e770 <pin_is_output>
        if (pin_is_input(pin))
   1ea92:	2800      	cmp	r0, #0
   1ea94:	d03b      	beq.n	1eb0e <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1ea96:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1ea9a:	2300      	movs	r3, #0
   1ea9c:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1ea9e:	4e1d      	ldr	r6, [pc, #116]	; (1eb14 <nrfx_gpiote_output_configure+0xe4>)
   1eaa0:	f104 0708 	add.w	r7, r4, #8
   1eaa4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1eaa8:	0089      	lsls	r1, r1, #2
   1eaaa:	f020 0020 	bic.w	r0, r0, #32
   1eaae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1eab2:	04c0      	lsls	r0, r0, #19
   1eab4:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1eab8:	0cc0      	lsrs	r0, r0, #19
   1eaba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1eabe:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1eac2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1eac6:	786a      	ldrb	r2, [r5, #1]
   1eac8:	2a00      	cmp	r2, #0
   1eaca:	d0dc      	beq.n	1ea86 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1eacc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1ead0:	78ad      	ldrb	r5, [r5, #2]
   1ead2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1ead6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1eada:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eade:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1eae2:	0223      	lsls	r3, r4, #8
   1eae4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1eae8:	0412      	lsls	r2, r2, #16
   1eaea:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eaee:	ea43 030e 	orr.w	r3, r3, lr
   1eaf2:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1eaf4:	052a      	lsls	r2, r5, #20
   1eaf6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1eafa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eafe:	4313      	orrs	r3, r2
   1eb00:	f040 0020 	orr.w	r0, r0, #32
   1eb04:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1eb08:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1eb0c:	e7bb      	b.n	1ea86 <nrfx_gpiote_output_configure+0x56>
{
   1eb0e:	4803      	ldr	r0, [pc, #12]	; (1eb1c <nrfx_gpiote_output_configure+0xec>)
   1eb10:	e7ba      	b.n	1ea88 <nrfx_gpiote_output_configure+0x58>
   1eb12:	bf00      	nop
   1eb14:	20008808 	.word	0x20008808
   1eb18:	0bad0000 	.word	0x0bad0000
   1eb1c:	0bad0004 	.word	0x0bad0004

0001eb20 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1eb20:	4b01      	ldr	r3, [pc, #4]	; (1eb28 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1eb22:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1eb26:	4770      	bx	lr
   1eb28:	20008808 	.word	0x20008808

0001eb2c <nrfx_gpiote_channel_get>:
{
   1eb2c:	4602      	mov	r2, r0
   1eb2e:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1eb30:	b959      	cbnz	r1, 1eb4a <nrfx_gpiote_channel_get+0x1e>
   1eb32:	490c      	ldr	r1, [pc, #48]	; (1eb64 <nrfx_gpiote_channel_get+0x38>)
   1eb34:	480c      	ldr	r0, [pc, #48]	; (1eb68 <nrfx_gpiote_channel_get+0x3c>)
   1eb36:	f240 2335 	movw	r3, #565	; 0x235
   1eb3a:	4a0c      	ldr	r2, [pc, #48]	; (1eb6c <nrfx_gpiote_channel_get+0x40>)
   1eb3c:	f007 fef1 	bl	26922 <assert_print>
   1eb40:	f240 2135 	movw	r1, #565	; 0x235
   1eb44:	4809      	ldr	r0, [pc, #36]	; (1eb6c <nrfx_gpiote_channel_get+0x40>)
   1eb46:	f007 fee5 	bl	26914 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1eb4a:	f7ff fdfb 	bl	1e744 <pin_in_use_by_te>
   1eb4e:	b138      	cbz	r0, 1eb60 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1eb50:	4b07      	ldr	r3, [pc, #28]	; (1eb70 <nrfx_gpiote_channel_get+0x44>)
   1eb52:	3208      	adds	r2, #8
   1eb54:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1eb58:	4806      	ldr	r0, [pc, #24]	; (1eb74 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1eb5a:	0b5b      	lsrs	r3, r3, #13
   1eb5c:	700b      	strb	r3, [r1, #0]
}
   1eb5e:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1eb60:	4805      	ldr	r0, [pc, #20]	; (1eb78 <nrfx_gpiote_channel_get+0x4c>)
   1eb62:	e7fc      	b.n	1eb5e <nrfx_gpiote_channel_get+0x32>
   1eb64:	0003252b 	.word	0x0003252b
   1eb68:	0002d881 	.word	0x0002d881
   1eb6c:	000324ed 	.word	0x000324ed
   1eb70:	20008808 	.word	0x20008808
   1eb74:	0bad0000 	.word	0x0bad0000
   1eb78:	0bad0004 	.word	0x0bad0004

0001eb7c <nrfx_gpiote_init>:
{
   1eb7c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1eb7e:	4c0f      	ldr	r4, [pc, #60]	; (1ebbc <nrfx_gpiote_init+0x40>)
   1eb80:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1eb84:	b9bd      	cbnz	r5, 1ebb6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1eb86:	2260      	movs	r2, #96	; 0x60
   1eb88:	4629      	mov	r1, r5
   1eb8a:	f104 0010 	add.w	r0, r4, #16
   1eb8e:	f00c ff07 	bl	2b9a0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1eb92:	202f      	movs	r0, #47	; 0x2f
   1eb94:	f7f1 fdc2 	bl	1071c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1eb98:	4b09      	ldr	r3, [pc, #36]	; (1ebc0 <nrfx_gpiote_init+0x44>)
    return err_code;
   1eb9a:	480a      	ldr	r0, [pc, #40]	; (1ebc4 <nrfx_gpiote_init+0x48>)
   1eb9c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1eba0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1eba4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1eba8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1ebac:	2301      	movs	r3, #1
   1ebae:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1ebb2:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ebb4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1ebb6:	4804      	ldr	r0, [pc, #16]	; (1ebc8 <nrfx_gpiote_init+0x4c>)
   1ebb8:	e7fc      	b.n	1ebb4 <nrfx_gpiote_init+0x38>
   1ebba:	bf00      	nop
   1ebbc:	20008808 	.word	0x20008808
   1ebc0:	4002f000 	.word	0x4002f000
   1ebc4:	0bad0000 	.word	0x0bad0000
   1ebc8:	0bad0005 	.word	0x0bad0005

0001ebcc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1ebcc:	4b03      	ldr	r3, [pc, #12]	; (1ebdc <nrfx_gpiote_is_init+0x10>)
   1ebce:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1ebd2:	3800      	subs	r0, #0
   1ebd4:	bf18      	it	ne
   1ebd6:	2001      	movne	r0, #1
   1ebd8:	4770      	bx	lr
   1ebda:	bf00      	nop
   1ebdc:	20008808 	.word	0x20008808

0001ebe0 <nrfx_gpiote_channel_free>:
{
   1ebe0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1ebe2:	4801      	ldr	r0, [pc, #4]	; (1ebe8 <nrfx_gpiote_channel_free+0x8>)
   1ebe4:	f7ff bb6e 	b.w	1e2c4 <nrfx_flag32_free>
   1ebe8:	20008878 	.word	0x20008878

0001ebec <nrfx_gpiote_channel_alloc>:
{
   1ebec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1ebee:	4801      	ldr	r0, [pc, #4]	; (1ebf4 <nrfx_gpiote_channel_alloc+0x8>)
   1ebf0:	f7ff bb4c 	b.w	1e28c <nrfx_flag32_alloc>
   1ebf4:	20008878 	.word	0x20008878

0001ebf8 <nrfx_gpiote_trigger_enable>:
{
   1ebf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ebfa:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1ebfc:	f7ff fdac 	bl	1e758 <pin_has_trigger>
   1ec00:	b958      	cbnz	r0, 1ec1a <nrfx_gpiote_trigger_enable+0x22>
   1ec02:	492b      	ldr	r1, [pc, #172]	; (1ecb0 <nrfx_gpiote_trigger_enable+0xb8>)
   1ec04:	f240 33df 	movw	r3, #991	; 0x3df
   1ec08:	4a2a      	ldr	r2, [pc, #168]	; (1ecb4 <nrfx_gpiote_trigger_enable+0xbc>)
   1ec0a:	482b      	ldr	r0, [pc, #172]	; (1ecb8 <nrfx_gpiote_trigger_enable+0xc0>)
   1ec0c:	f007 fe89 	bl	26922 <assert_print>
   1ec10:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1ec14:	4827      	ldr	r0, [pc, #156]	; (1ecb4 <nrfx_gpiote_trigger_enable+0xbc>)
   1ec16:	f007 fe7d 	bl	26914 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ec1a:	4620      	mov	r0, r4
   1ec1c:	f7ff fd92 	bl	1e744 <pin_in_use_by_te>
   1ec20:	4a26      	ldr	r2, [pc, #152]	; (1ecbc <nrfx_gpiote_trigger_enable+0xc4>)
   1ec22:	f104 0508 	add.w	r5, r4, #8
   1ec26:	b1e0      	cbz	r0, 1ec62 <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1ec28:	4620      	mov	r0, r4
   1ec2a:	f7ff fda1 	bl	1e770 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ec2e:	b9c0      	cbnz	r0, 1ec62 <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ec30:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1ec34:	4c22      	ldr	r4, [pc, #136]	; (1ecc0 <nrfx_gpiote_trigger_enable+0xc8>)
   1ec36:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1ec38:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ec3a:	50e0      	str	r0, [r4, r3]
   1ec3c:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ec3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ec42:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1ec46:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1ec4a:	f040 0001 	orr.w	r0, r0, #1
   1ec4e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1ec52:	b121      	cbz	r1, 1ec5e <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1ec54:	2301      	movs	r3, #1
   1ec56:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1ec58:	4a1a      	ldr	r2, [pc, #104]	; (1ecc4 <nrfx_gpiote_trigger_enable+0xcc>)
   1ec5a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1ec5e:	b003      	add	sp, #12
   1ec60:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1ec62:	b949      	cbnz	r1, 1ec78 <nrfx_gpiote_trigger_enable+0x80>
   1ec64:	4918      	ldr	r1, [pc, #96]	; (1ecc8 <nrfx_gpiote_trigger_enable+0xd0>)
   1ec66:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1ec6a:	4a12      	ldr	r2, [pc, #72]	; (1ecb4 <nrfx_gpiote_trigger_enable+0xbc>)
   1ec6c:	4812      	ldr	r0, [pc, #72]	; (1ecb8 <nrfx_gpiote_trigger_enable+0xc0>)
   1ec6e:	f007 fe58 	bl	26922 <assert_print>
   1ec72:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1ec76:	e7cd      	b.n	1ec14 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ec78:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1ec7c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1ec80:	2b04      	cmp	r3, #4
   1ec82:	d011      	beq.n	1eca8 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1ec84:	2b05      	cmp	r3, #5
   1ec86:	d011      	beq.n	1ecac <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ec88:	a801      	add	r0, sp, #4
   1ec8a:	9401      	str	r4, [sp, #4]
   1ec8c:	f7ff fdf4 	bl	1e878 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1ec90:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1ec92:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1ec94:	40d9      	lsrs	r1, r3
   1ec96:	f001 0101 	and.w	r1, r1, #1
   1ec9a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1ec9c:	4620      	mov	r0, r4
}
   1ec9e:	b003      	add	sp, #12
   1eca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1eca4:	f00b beae 	b.w	2aa04 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1eca8:	2103      	movs	r1, #3
   1ecaa:	e7f7      	b.n	1ec9c <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1ecac:	2102      	movs	r1, #2
   1ecae:	e7f5      	b.n	1ec9c <nrfx_gpiote_trigger_enable+0xa4>
   1ecb0:	00032535 	.word	0x00032535
   1ecb4:	000324ed 	.word	0x000324ed
   1ecb8:	0002d881 	.word	0x0002d881
   1ecbc:	20008808 	.word	0x20008808
   1ecc0:	4002f100 	.word	0x4002f100
   1ecc4:	4002f000 	.word	0x4002f000
   1ecc8:	0003254a 	.word	0x0003254a

0001eccc <nrfx_gpiote_trigger_disable>:
{
   1eccc:	b508      	push	{r3, lr}
   1ecce:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ecd0:	f7ff fd38 	bl	1e744 <pin_in_use_by_te>
   1ecd4:	b1c8      	cbz	r0, 1ed0a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1ecd6:	4610      	mov	r0, r2
   1ecd8:	f7ff fd4a 	bl	1e770 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ecdc:	b9a8      	cbnz	r0, 1ed0a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ecde:	4b0e      	ldr	r3, [pc, #56]	; (1ed18 <nrfx_gpiote_trigger_disable+0x4c>)
   1ece0:	3208      	adds	r2, #8
   1ece2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1ece6:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ece8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1ecea:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1ecec:	490b      	ldr	r1, [pc, #44]	; (1ed1c <nrfx_gpiote_trigger_disable+0x50>)
   1ecee:	009b      	lsls	r3, r3, #2
   1ecf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ecf4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1ecf8:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1ecfc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1ed00:	f022 0203 	bic.w	r2, r2, #3
   1ed04:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1ed08:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ed0a:	2100      	movs	r1, #0
}
   1ed0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ed10:	4610      	mov	r0, r2
   1ed12:	f00b be77 	b.w	2aa04 <nrf_gpio_cfg_sense_set>
   1ed16:	bf00      	nop
   1ed18:	20008808 	.word	0x20008808
   1ed1c:	4002f000 	.word	0x4002f000

0001ed20 <nrfx_gpiote_pin_uninit>:
{
   1ed20:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1ed22:	4b10      	ldr	r3, [pc, #64]	; (1ed64 <nrfx_gpiote_pin_uninit+0x44>)
   1ed24:	f100 0208 	add.w	r2, r0, #8
   1ed28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1ed2c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1ed2e:	07db      	lsls	r3, r3, #31
   1ed30:	d516      	bpl.n	1ed60 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1ed32:	f7ff ffcb 	bl	1eccc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1ed36:	4620      	mov	r0, r4
   1ed38:	f7ff fd80 	bl	1e83c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ed3c:	a801      	add	r0, sp, #4
   1ed3e:	9401      	str	r4, [sp, #4]
   1ed40:	f7ff fd9a 	bl	1e878 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1ed44:	9b01      	ldr	r3, [sp, #4]
   1ed46:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ed4a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1ed4e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1ed52:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1ed56:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1ed5a:	4803      	ldr	r0, [pc, #12]	; (1ed68 <nrfx_gpiote_pin_uninit+0x48>)
}
   1ed5c:	b002      	add	sp, #8
   1ed5e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ed60:	4802      	ldr	r0, [pc, #8]	; (1ed6c <nrfx_gpiote_pin_uninit+0x4c>)
   1ed62:	e7fb      	b.n	1ed5c <nrfx_gpiote_pin_uninit+0x3c>
   1ed64:	20008808 	.word	0x20008808
   1ed68:	0bad0000 	.word	0x0bad0000
   1ed6c:	0bad0004 	.word	0x0bad0004

0001ed70 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1ed70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1ed74:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1ed76:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ed78:	4634      	mov	r4, r6
{
   1ed7a:	4b64      	ldr	r3, [pc, #400]	; (1ef0c <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1ed7c:	4864      	ldr	r0, [pc, #400]	; (1ef10 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ed7e:	4965      	ldr	r1, [pc, #404]	; (1ef14 <nrfx_gpiote_irq_handler+0x1a4>)
{
   1ed80:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ed82:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1ed84:	b135      	cbz	r5, 1ed94 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1ed86:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1ed8a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ed8c:	bf1e      	ittt	ne
   1ed8e:	601c      	strne	r4, [r3, #0]
   1ed90:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1ed92:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ed94:	3304      	adds	r3, #4
   1ed96:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1ed98:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ed9c:	d1f1      	bne.n	1ed82 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ed9e:	f8df a170 	ldr.w	sl, [pc, #368]	; 1ef10 <nrfx_gpiote_irq_handler+0x1a0>
   1eda2:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1eda6:	2b00      	cmp	r3, #0
   1eda8:	f000 8093 	beq.w	1eed2 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1edac:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1ef18 <nrfx_gpiote_irq_handler+0x1a8>
   1edb0:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1edb4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1edb6:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1edba:	4b58      	ldr	r3, [pc, #352]	; (1ef1c <nrfx_gpiote_irq_handler+0x1ac>)
   1edbc:	6a1a      	ldr	r2, [r3, #32]
   1edbe:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1edc0:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1edc2:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1edc6:	f10d 0b10 	add.w	fp, sp, #16
   1edca:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1edce:	9300      	str	r3, [sp, #0]
   1edd0:	e04a      	b.n	1ee68 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1edd2:	fa94 f4a4 	rbit	r4, r4
   1edd6:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1edda:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1eddc:	4a50      	ldr	r2, [pc, #320]	; (1ef20 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1edde:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ede0:	f104 0308 	add.w	r3, r4, #8
   1ede4:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1ede8:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1edea:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1edec:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1edf0:	fa03 f101 	lsl.w	r1, r3, r1
   1edf4:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1edf8:	08ba      	lsrs	r2, r7, #2
   1edfa:	ea23 0301 	bic.w	r3, r3, r1
   1edfe:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ee02:	a803      	add	r0, sp, #12
   1ee04:	9201      	str	r2, [sp, #4]
   1ee06:	9403      	str	r4, [sp, #12]
   1ee08:	f7ff fd36 	bl	1e878 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ee0c:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1ee0e:	9a01      	ldr	r2, [sp, #4]
   1ee10:	3380      	adds	r3, #128	; 0x80
   1ee12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ee16:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1ee1a:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ee1c:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1ee1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1ee22:	d52b      	bpl.n	1ee7c <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1ee24:	4639      	mov	r1, r7
   1ee26:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ee28:	b2dd      	uxtb	r5, r3
   1ee2a:	f7ff fcab 	bl	1e784 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ee2e:	a803      	add	r0, sp, #12
   1ee30:	9403      	str	r4, [sp, #12]
   1ee32:	f7ff fd21 	bl	1e878 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ee36:	9b03      	ldr	r3, [sp, #12]
   1ee38:	3380      	adds	r3, #128	; 0x80
   1ee3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1ee3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1ee42:	429d      	cmp	r5, r3
   1ee44:	d107      	bne.n	1ee56 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ee46:	2100      	movs	r1, #0
   1ee48:	4620      	mov	r0, r4
   1ee4a:	f00b fddb 	bl	2aa04 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1ee4e:	4629      	mov	r1, r5
   1ee50:	4620      	mov	r0, r4
   1ee52:	f00b fdd7 	bl	2aa04 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ee56:	a803      	add	r0, sp, #12
   1ee58:	9403      	str	r4, [sp, #12]
   1ee5a:	f7ff fd0d 	bl	1e878 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1ee5e:	2201      	movs	r2, #1
   1ee60:	9b03      	ldr	r3, [sp, #12]
   1ee62:	fa02 f303 	lsl.w	r3, r2, r3
   1ee66:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1ee68:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1ee6c:	2c00      	cmp	r4, #0
   1ee6e:	d1b0      	bne.n	1edd2 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ee70:	f1b9 0f00 	cmp.w	r9, #0
   1ee74:	d11d      	bne.n	1eeb2 <nrfx_gpiote_irq_handler+0x142>
   1ee76:	f04f 0901 	mov.w	r9, #1
   1ee7a:	e7a6      	b.n	1edca <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1ee7c:	2b02      	cmp	r3, #2
   1ee7e:	d10c      	bne.n	1ee9a <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ee80:	2103      	movs	r1, #3
   1ee82:	4620      	mov	r0, r4
   1ee84:	f00b fdbe 	bl	2aa04 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1ee88:	f005 0305 	and.w	r3, r5, #5
   1ee8c:	2b01      	cmp	r3, #1
   1ee8e:	d1e2      	bne.n	1ee56 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1ee90:	4639      	mov	r1, r7
   1ee92:	4620      	mov	r0, r4
   1ee94:	f7ff fc76 	bl	1e784 <call_handler>
   1ee98:	e7dd      	b.n	1ee56 <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ee9a:	2102      	movs	r1, #2
   1ee9c:	4620      	mov	r0, r4
   1ee9e:	9301      	str	r3, [sp, #4]
   1eea0:	f00b fdb0 	bl	2aa04 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1eea4:	2d03      	cmp	r5, #3
   1eea6:	d0f3      	beq.n	1ee90 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1eea8:	9b01      	ldr	r3, [sp, #4]
   1eeaa:	2b03      	cmp	r3, #3
   1eeac:	d1d3      	bne.n	1ee56 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1eeae:	2d02      	cmp	r5, #2
   1eeb0:	e7ed      	b.n	1ee8e <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1eeb2:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1eeb6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1eeba:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1eebe:	4917      	ldr	r1, [pc, #92]	; (1ef1c <nrfx_gpiote_irq_handler+0x1ac>)
   1eec0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1eec2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1eec6:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1eec8:	4313      	orrs	r3, r2
   1eeca:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1eecc:	620a      	str	r2, [r1, #32]
   1eece:	f47f af78 	bne.w	1edc2 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1eed2:	2401      	movs	r4, #1
    while (mask)
   1eed4:	b916      	cbnz	r6, 1eedc <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1eed6:	b007      	add	sp, #28
   1eed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1eedc:	fa96 f3a6 	rbit	r3, r6
   1eee0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1eee4:	fa04 f203 	lsl.w	r2, r4, r3
   1eee8:	009b      	lsls	r3, r3, #2
   1eeea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eeee:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1eef2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1eef6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1eefa:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1eefe:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1ef02:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1ef06:	f7ff fc3d 	bl	1e784 <call_handler>
   1ef0a:	e7e3      	b.n	1eed4 <nrfx_gpiote_irq_handler+0x164>
   1ef0c:	4002f100 	.word	0x4002f100
   1ef10:	4002f000 	.word	0x4002f000
   1ef14:	4002f120 	.word	0x4002f120
   1ef18:	40842500 	.word	0x40842500
   1ef1c:	40842800 	.word	0x40842800
   1ef20:	20008808 	.word	0x20008808

0001ef24 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1ef24:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ef26:	4c08      	ldr	r4, [pc, #32]	; (1ef48 <nrfx_ipc_init+0x24>)
{
   1ef28:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ef2a:	7923      	ldrb	r3, [r4, #4]
{
   1ef2c:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ef2e:	b943      	cbnz	r3, 1ef42 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1ef30:	202a      	movs	r0, #42	; 0x2a
   1ef32:	f7f1 fbf3 	bl	1071c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1ef36:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1ef38:	4804      	ldr	r0, [pc, #16]	; (1ef4c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1ef3a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1ef3c:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1ef3e:	60a5      	str	r5, [r4, #8]
}
   1ef40:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1ef42:	4803      	ldr	r0, [pc, #12]	; (1ef50 <nrfx_ipc_init+0x2c>)
   1ef44:	e7fc      	b.n	1ef40 <nrfx_ipc_init+0x1c>
   1ef46:	bf00      	nop
   1ef48:	20021a30 	.word	0x20021a30
   1ef4c:	0bad0000 	.word	0x0bad0000
   1ef50:	0bad000c 	.word	0x0bad000c

0001ef54 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1ef54:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1ef56:	b948      	cbnz	r0, 1ef6c <nrfx_ipc_config_load+0x18>
   1ef58:	4919      	ldr	r1, [pc, #100]	; (1efc0 <nrfx_ipc_config_load+0x6c>)
   1ef5a:	2345      	movs	r3, #69	; 0x45
   1ef5c:	4a19      	ldr	r2, [pc, #100]	; (1efc4 <nrfx_ipc_config_load+0x70>)
   1ef5e:	481a      	ldr	r0, [pc, #104]	; (1efc8 <nrfx_ipc_config_load+0x74>)
   1ef60:	f007 fcdf 	bl	26922 <assert_print>
   1ef64:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1ef66:	4817      	ldr	r0, [pc, #92]	; (1efc4 <nrfx_ipc_config_load+0x70>)
   1ef68:	f007 fcd4 	bl	26914 <assert_post_action>
   1ef6c:	4b17      	ldr	r3, [pc, #92]	; (1efcc <nrfx_ipc_config_load+0x78>)
   1ef6e:	791b      	ldrb	r3, [r3, #4]
   1ef70:	2b01      	cmp	r3, #1
   1ef72:	d007      	beq.n	1ef84 <nrfx_ipc_config_load+0x30>
   1ef74:	4916      	ldr	r1, [pc, #88]	; (1efd0 <nrfx_ipc_config_load+0x7c>)
   1ef76:	2346      	movs	r3, #70	; 0x46
   1ef78:	4a12      	ldr	r2, [pc, #72]	; (1efc4 <nrfx_ipc_config_load+0x70>)
   1ef7a:	4813      	ldr	r0, [pc, #76]	; (1efc8 <nrfx_ipc_config_load+0x74>)
   1ef7c:	f007 fcd1 	bl	26922 <assert_print>
   1ef80:	2146      	movs	r1, #70	; 0x46
   1ef82:	e7f0      	b.n	1ef66 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1ef84:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1ef86:	4a13      	ldr	r2, [pc, #76]	; (1efd4 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1ef88:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1ef8c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1ef90:	3301      	adds	r3, #1
   1ef92:	2b10      	cmp	r3, #16
   1ef94:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1ef98:	d1f6      	bne.n	1ef88 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1ef9a:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1ef9c:	4a0d      	ldr	r2, [pc, #52]	; (1efd4 <nrfx_ipc_config_load+0x80>)
   1ef9e:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1efa2:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1efa6:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1efaa:	3301      	adds	r3, #1
   1efac:	2b10      	cmp	r3, #16
   1efae:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1efb2:	d1f6      	bne.n	1efa2 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1efb4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1efb8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1efbc:	bd38      	pop	{r3, r4, r5, pc}
   1efbe:	bf00      	nop
   1efc0:	0003259c 	.word	0x0003259c
   1efc4:	00032561 	.word	0x00032561
   1efc8:	0002d881 	.word	0x0002d881
   1efcc:	20021a30 	.word	0x20021a30
   1efd0:	000325a5 	.word	0x000325a5
   1efd4:	4002a000 	.word	0x4002a000

0001efd8 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1efd8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1efda:	4b09      	ldr	r3, [pc, #36]	; (1f000 <nrfx_ipc_receive_event_enable+0x28>)
   1efdc:	791b      	ldrb	r3, [r3, #4]
   1efde:	2b01      	cmp	r3, #1
   1efe0:	d009      	beq.n	1eff6 <nrfx_ipc_receive_event_enable+0x1e>
   1efe2:	4908      	ldr	r1, [pc, #32]	; (1f004 <nrfx_ipc_receive_event_enable+0x2c>)
   1efe4:	4808      	ldr	r0, [pc, #32]	; (1f008 <nrfx_ipc_receive_event_enable+0x30>)
   1efe6:	236b      	movs	r3, #107	; 0x6b
   1efe8:	4a08      	ldr	r2, [pc, #32]	; (1f00c <nrfx_ipc_receive_event_enable+0x34>)
   1efea:	f007 fc9a 	bl	26922 <assert_print>
   1efee:	216b      	movs	r1, #107	; 0x6b
   1eff0:	4806      	ldr	r0, [pc, #24]	; (1f00c <nrfx_ipc_receive_event_enable+0x34>)
   1eff2:	f007 fc8f 	bl	26914 <assert_post_action>
   1eff6:	4a06      	ldr	r2, [pc, #24]	; (1f010 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1eff8:	4083      	lsls	r3, r0
   1effa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1effe:	bd08      	pop	{r3, pc}
   1f000:	20021a30 	.word	0x20021a30
   1f004:	000325a5 	.word	0x000325a5
   1f008:	0002d881 	.word	0x0002d881
   1f00c:	00032561 	.word	0x00032561
   1f010:	4002a000 	.word	0x4002a000

0001f014 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1f014:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f016:	4b09      	ldr	r3, [pc, #36]	; (1f03c <nrfx_ipc_receive_event_disable+0x28>)
   1f018:	791b      	ldrb	r3, [r3, #4]
   1f01a:	2b01      	cmp	r3, #1
   1f01c:	d009      	beq.n	1f032 <nrfx_ipc_receive_event_disable+0x1e>
   1f01e:	4908      	ldr	r1, [pc, #32]	; (1f040 <nrfx_ipc_receive_event_disable+0x2c>)
   1f020:	4808      	ldr	r0, [pc, #32]	; (1f044 <nrfx_ipc_receive_event_disable+0x30>)
   1f022:	2371      	movs	r3, #113	; 0x71
   1f024:	4a08      	ldr	r2, [pc, #32]	; (1f048 <nrfx_ipc_receive_event_disable+0x34>)
   1f026:	f007 fc7c 	bl	26922 <assert_print>
   1f02a:	2171      	movs	r1, #113	; 0x71
   1f02c:	4806      	ldr	r0, [pc, #24]	; (1f048 <nrfx_ipc_receive_event_disable+0x34>)
   1f02e:	f007 fc71 	bl	26914 <assert_post_action>
    p_reg->INTENCLR = mask;
   1f032:	4a06      	ldr	r2, [pc, #24]	; (1f04c <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1f034:	4083      	lsls	r3, r0
   1f036:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1f03a:	bd08      	pop	{r3, pc}
   1f03c:	20021a30 	.word	0x20021a30
   1f040:	000325a5 	.word	0x000325a5
   1f044:	0002d881 	.word	0x0002d881
   1f048:	00032561 	.word	0x00032561
   1f04c:	4002a000 	.word	0x4002a000

0001f050 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1f050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1f052:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f054:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1f056:	4b12      	ldr	r3, [pc, #72]	; (1f0a0 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1f058:	4d12      	ldr	r5, [pc, #72]	; (1f0a4 <nrfx_ipc_irq_handler+0x54>)
   1f05a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1f05e:	b904      	cbnz	r4, 1f062 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1f060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1f062:	fa94 f0a4 	rbit	r0, r4
   1f066:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1f06a:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1f06e:	280f      	cmp	r0, #15
   1f070:	ea24 0403 	bic.w	r4, r4, r3
   1f074:	dd0b      	ble.n	1f08e <nrfx_ipc_irq_handler+0x3e>
   1f076:	490c      	ldr	r1, [pc, #48]	; (1f0a8 <nrfx_ipc_irq_handler+0x58>)
   1f078:	480c      	ldr	r0, [pc, #48]	; (1f0ac <nrfx_ipc_irq_handler+0x5c>)
   1f07a:	f240 13e7 	movw	r3, #487	; 0x1e7
   1f07e:	4a0c      	ldr	r2, [pc, #48]	; (1f0b0 <nrfx_ipc_irq_handler+0x60>)
   1f080:	f007 fc4f 	bl	26922 <assert_print>
   1f084:	f240 11e7 	movw	r1, #487	; 0x1e7
   1f088:	4809      	ldr	r0, [pc, #36]	; (1f0b0 <nrfx_ipc_irq_handler+0x60>)
   1f08a:	f007 fc43 	bl	26914 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f08e:	4b09      	ldr	r3, [pc, #36]	; (1f0b4 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1f090:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f092:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1f094:	682b      	ldr	r3, [r5, #0]
   1f096:	2b00      	cmp	r3, #0
   1f098:	d0e1      	beq.n	1f05e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1f09a:	68a9      	ldr	r1, [r5, #8]
   1f09c:	4798      	blx	r3
   1f09e:	e7de      	b.n	1f05e <nrfx_ipc_irq_handler+0xe>
   1f0a0:	4002a000 	.word	0x4002a000
   1f0a4:	20021a30 	.word	0x20021a30
   1f0a8:	0002e7de 	.word	0x0002e7de
   1f0ac:	0002d881 	.word	0x0002d881
   1f0b0:	0002e7ac 	.word	0x0002e7ac
   1f0b4:	4002a100 	.word	0x4002a100

0001f0b8 <nvmc_word_write>:
   1f0b8:	4a04      	ldr	r2, [pc, #16]	; (1f0cc <nvmc_word_write+0x14>)
   1f0ba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f0be:	07db      	lsls	r3, r3, #31
   1f0c0:	d5fb      	bpl.n	1f0ba <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1f0c2:	6001      	str	r1, [r0, #0]
   1f0c4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1f0c8:	4770      	bx	lr
   1f0ca:	bf00      	nop
   1f0cc:	40039000 	.word	0x40039000

0001f0d0 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f0d0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1f0d4:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f0d6:	d30b      	bcc.n	1f0f0 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1f0d8:	4910      	ldr	r1, [pc, #64]	; (1f11c <nrfx_nvmc_page_erase+0x4c>)
   1f0da:	4811      	ldr	r0, [pc, #68]	; (1f120 <nrfx_nvmc_page_erase+0x50>)
   1f0dc:	f44f 7383 	mov.w	r3, #262	; 0x106
   1f0e0:	4a10      	ldr	r2, [pc, #64]	; (1f124 <nrfx_nvmc_page_erase+0x54>)
   1f0e2:	f007 fc1e 	bl	26922 <assert_print>
   1f0e6:	f44f 7183 	mov.w	r1, #262	; 0x106
   1f0ea:	480e      	ldr	r0, [pc, #56]	; (1f124 <nrfx_nvmc_page_erase+0x54>)
   1f0ec:	f007 fc12 	bl	26914 <assert_post_action>
    return !(addr % flash_page_size_get());
   1f0f0:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1f0f4:	b97b      	cbnz	r3, 1f116 <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1f0f6:	2202      	movs	r2, #2
   1f0f8:	4b0b      	ldr	r3, [pc, #44]	; (1f128 <nrfx_nvmc_page_erase+0x58>)
   1f0fa:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1f0fe:	f04f 32ff 	mov.w	r2, #4294967295
   1f102:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f104:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f108:	07d2      	lsls	r2, r2, #31
   1f10a:	d5fb      	bpl.n	1f104 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1f10c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1f10e:	4807      	ldr	r0, [pc, #28]	; (1f12c <nrfx_nvmc_page_erase+0x5c>)
   1f110:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1f114:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1f116:	4806      	ldr	r0, [pc, #24]	; (1f130 <nrfx_nvmc_page_erase+0x60>)
   1f118:	e7fc      	b.n	1f114 <nrfx_nvmc_page_erase+0x44>
   1f11a:	bf00      	nop
   1f11c:	0003262e 	.word	0x0003262e
   1f120:	0002d881 	.word	0x0002d881
   1f124:	000325d2 	.word	0x000325d2
   1f128:	40039000 	.word	0x40039000
   1f12c:	0bad0000 	.word	0x0bad0000
   1f130:	0bad000a 	.word	0x0bad000a

0001f134 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f134:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1f138:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f13a:	d30b      	bcc.n	1f154 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1f13c:	4910      	ldr	r1, [pc, #64]	; (1f180 <nrfx_nvmc_word_write+0x4c>)
   1f13e:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1f142:	4a10      	ldr	r2, [pc, #64]	; (1f184 <nrfx_nvmc_word_write+0x50>)
   1f144:	4810      	ldr	r0, [pc, #64]	; (1f188 <nrfx_nvmc_word_write+0x54>)
   1f146:	f007 fbec 	bl	26922 <assert_print>
   1f14a:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1f14e:	480d      	ldr	r0, [pc, #52]	; (1f184 <nrfx_nvmc_word_write+0x50>)
   1f150:	f007 fbe0 	bl	26914 <assert_post_action>
   1f154:	f010 0403 	ands.w	r4, r0, #3
   1f158:	d009      	beq.n	1f16e <nrfx_nvmc_word_write+0x3a>
   1f15a:	490c      	ldr	r1, [pc, #48]	; (1f18c <nrfx_nvmc_word_write+0x58>)
   1f15c:	f240 1395 	movw	r3, #405	; 0x195
   1f160:	4a08      	ldr	r2, [pc, #32]	; (1f184 <nrfx_nvmc_word_write+0x50>)
   1f162:	4809      	ldr	r0, [pc, #36]	; (1f188 <nrfx_nvmc_word_write+0x54>)
   1f164:	f007 fbdd 	bl	26922 <assert_print>
   1f168:	f240 1195 	movw	r1, #405	; 0x195
   1f16c:	e7ef      	b.n	1f14e <nrfx_nvmc_word_write+0x1a>
   1f16e:	2301      	movs	r3, #1
   1f170:	4d07      	ldr	r5, [pc, #28]	; (1f190 <nrfx_nvmc_word_write+0x5c>)
   1f172:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1f176:	f7ff ff9f 	bl	1f0b8 <nvmc_word_write>
   1f17a:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1f17e:	bd38      	pop	{r3, r4, r5, pc}
   1f180:	00032648 	.word	0x00032648
   1f184:	000325d2 	.word	0x000325d2
   1f188:	0002d881 	.word	0x0002d881
   1f18c:	00032662 	.word	0x00032662
   1f190:	40039000 	.word	0x40039000

0001f194 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1f194:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1f196:	4d43      	ldr	r5, [pc, #268]	; (1f2a4 <qspi_xfer+0x110>)
   1f198:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1f19c:	b94c      	cbnz	r4, 1f1b2 <qspi_xfer+0x1e>
   1f19e:	4942      	ldr	r1, [pc, #264]	; (1f2a8 <qspi_xfer+0x114>)
   1f1a0:	2368      	movs	r3, #104	; 0x68
   1f1a2:	4a42      	ldr	r2, [pc, #264]	; (1f2ac <qspi_xfer+0x118>)
   1f1a4:	4842      	ldr	r0, [pc, #264]	; (1f2b0 <qspi_xfer+0x11c>)
   1f1a6:	f007 fbbc 	bl	26922 <assert_print>
   1f1aa:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1f1ac:	483f      	ldr	r0, [pc, #252]	; (1f2ac <qspi_xfer+0x118>)
   1f1ae:	f007 fbb1 	bl	26914 <assert_post_action>
   1f1b2:	b938      	cbnz	r0, 1f1c4 <qspi_xfer+0x30>
   1f1b4:	493f      	ldr	r1, [pc, #252]	; (1f2b4 <qspi_xfer+0x120>)
   1f1b6:	2369      	movs	r3, #105	; 0x69
   1f1b8:	4a3c      	ldr	r2, [pc, #240]	; (1f2ac <qspi_xfer+0x118>)
   1f1ba:	483d      	ldr	r0, [pc, #244]	; (1f2b0 <qspi_xfer+0x11c>)
   1f1bc:	f007 fbb1 	bl	26922 <assert_print>
   1f1c0:	2169      	movs	r1, #105	; 0x69
   1f1c2:	e7f3      	b.n	1f1ac <qspi_xfer+0x18>
   1f1c4:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1f1c8:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1f1cc:	d165      	bne.n	1f29a <qspi_xfer+0x106>
   1f1ce:	0786      	lsls	r6, r0, #30
   1f1d0:	d163      	bne.n	1f29a <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1f1d2:	2c01      	cmp	r4, #1
   1f1d4:	d001      	beq.n	1f1da <qspi_xfer+0x46>
   1f1d6:	429c      	cmp	r4, r3
   1f1d8:	d161      	bne.n	1f29e <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1f1da:	682c      	ldr	r4, [r5, #0]
   1f1dc:	bb04      	cbnz	r4, 1f220 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1f1de:	2b02      	cmp	r3, #2
   1f1e0:	4b35      	ldr	r3, [pc, #212]	; (1f2b8 <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1f1e2:	bf0b      	itete	eq
   1f1e4:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1f1e8:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1f1ec:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1f1f0:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1f1f4:	bf0b      	itete	eq
   1f1f6:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1f1fa:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1f1fe:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1f200:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f202:	2100      	movs	r1, #0
   1f204:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f208:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1f20c:	2201      	movs	r2, #1
   1f20e:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1f212:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f214:	4a28      	ldr	r2, [pc, #160]	; (1f2b8 <qspi_xfer+0x124>)
   1f216:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1f21a:	2b00      	cmp	r3, #0
   1f21c:	d0fb      	beq.n	1f216 <qspi_xfer+0x82>
   1f21e:	e00d      	b.n	1f23c <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1f220:	68ae      	ldr	r6, [r5, #8]
   1f222:	4c25      	ldr	r4, [pc, #148]	; (1f2b8 <qspi_xfer+0x124>)
   1f224:	b166      	cbz	r6, 1f240 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1f226:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1f228:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1f22a:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1f22c:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1f22e:	d12d      	bne.n	1f28c <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1f230:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1f234:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1f238:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1f23c:	481f      	ldr	r0, [pc, #124]	; (1f2bc <qspi_xfer+0x128>)
}
   1f23e:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1f240:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1f242:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1f246:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1f248:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1f24a:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1f24c:	bf0c      	ite	eq
   1f24e:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1f252:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f256:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1f25a:	bf0b      	itete	eq
   1f25c:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1f260:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1f264:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1f268:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1f26c:	bf08      	it	eq
   1f26e:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f270:	4911      	ldr	r1, [pc, #68]	; (1f2b8 <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1f272:	bf18      	it	ne
   1f274:	2304      	movne	r3, #4
   1f276:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1f27a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f27c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f280:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1f284:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f288:	601a      	str	r2, [r3, #0]
}
   1f28a:	e7d7      	b.n	1f23c <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1f28c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1f290:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1f294:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1f298:	e7d0      	b.n	1f23c <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1f29a:	4809      	ldr	r0, [pc, #36]	; (1f2c0 <qspi_xfer+0x12c>)
   1f29c:	e7cf      	b.n	1f23e <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1f29e:	4809      	ldr	r0, [pc, #36]	; (1f2c4 <qspi_xfer+0x130>)
   1f2a0:	e7cd      	b.n	1f23e <qspi_xfer+0xaa>
   1f2a2:	bf00      	nop
   1f2a4:	20021a3c 	.word	0x20021a3c
   1f2a8:	000326c7 	.word	0x000326c7
   1f2ac:	0003268b 	.word	0x0003268b
   1f2b0:	0002d881 	.word	0x0002d881
   1f2b4:	000326f3 	.word	0x000326f3
   1f2b8:	4002b000 	.word	0x4002b000
   1f2bc:	0bad0000 	.word	0x0bad0000
   1f2c0:	0bad000a 	.word	0x0bad000a
   1f2c4:	0bad000b 	.word	0x0bad000b

0001f2c8 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1f2c8:	b538      	push	{r3, r4, r5, lr}
   1f2ca:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f2cc:	4d06      	ldr	r5, [pc, #24]	; (1f2e8 <qspi_ready_wait+0x20>)
   1f2ce:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1f2d2:	b933      	cbnz	r3, 1f2e2 <qspi_ready_wait+0x1a>
   1f2d4:	200a      	movs	r0, #10
   1f2d6:	f00b fb2a 	bl	2a92e <nrfx_busy_wait>
   1f2da:	3c01      	subs	r4, #1
   1f2dc:	d1f7      	bne.n	1f2ce <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1f2de:	4803      	ldr	r0, [pc, #12]	; (1f2ec <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1f2e0:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1f2e2:	4803      	ldr	r0, [pc, #12]	; (1f2f0 <qspi_ready_wait+0x28>)
   1f2e4:	e7fc      	b.n	1f2e0 <qspi_ready_wait+0x18>
   1f2e6:	bf00      	nop
   1f2e8:	4002b000 	.word	0x4002b000
   1f2ec:	0bad0007 	.word	0x0bad0007
   1f2f0:	0bad0000 	.word	0x0bad0000

0001f2f4 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1f2f4:	4b08      	ldr	r3, [pc, #32]	; (1f318 <qspi_event_xfer_handle.constprop.0+0x24>)
   1f2f6:	689a      	ldr	r2, [r3, #8]
   1f2f8:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1f2fa:	691a      	ldr	r2, [r3, #16]
   1f2fc:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1f2fe:	699a      	ldr	r2, [r3, #24]
   1f300:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1f302:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1f304:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1f306:	b132      	cbz	r2, 1f316 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1f308:	695a      	ldr	r2, [r3, #20]
   1f30a:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1f30c:	69da      	ldr	r2, [r3, #28]
   1f30e:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1f310:	2200      	movs	r2, #0
   1f312:	60da      	str	r2, [r3, #12]
   1f314:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1f316:	4770      	bx	lr
   1f318:	20021a3c 	.word	0x20021a3c

0001f31c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1f31c:	b508      	push	{r3, lr}
    switch (port)
   1f31e:	0943      	lsrs	r3, r0, #5
   1f320:	d00d      	beq.n	1f33e <nrf_gpio_cfg.constprop.0+0x22>
   1f322:	2b01      	cmp	r3, #1
   1f324:	d01e      	beq.n	1f364 <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f326:	4914      	ldr	r1, [pc, #80]	; (1f378 <nrf_gpio_cfg.constprop.0+0x5c>)
   1f328:	4814      	ldr	r0, [pc, #80]	; (1f37c <nrf_gpio_cfg.constprop.0+0x60>)
   1f32a:	f240 2347 	movw	r3, #583	; 0x247
   1f32e:	4a14      	ldr	r2, [pc, #80]	; (1f380 <nrf_gpio_cfg.constprop.0+0x64>)
   1f330:	f007 faf7 	bl	26922 <assert_print>
   1f334:	f240 2147 	movw	r1, #583	; 0x247
   1f338:	4811      	ldr	r0, [pc, #68]	; (1f380 <nrf_gpio_cfg.constprop.0+0x64>)
   1f33a:	f007 faeb 	bl	26914 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1f33e:	f04f 33ff 	mov.w	r3, #4294967295
   1f342:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f344:	07da      	lsls	r2, r3, #31
   1f346:	d5ee      	bpl.n	1f326 <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1f348:	4a0e      	ldr	r2, [pc, #56]	; (1f384 <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f34a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1f34e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1f352:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1f356:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f35a:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f35e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1f362:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1f364:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1f368:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f36c:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f36e:	07db      	lsls	r3, r3, #31
   1f370:	d5d9      	bpl.n	1f326 <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1f372:	4a05      	ldr	r2, [pc, #20]	; (1f388 <nrf_gpio_cfg.constprop.0+0x6c>)
   1f374:	e7e9      	b.n	1f34a <nrf_gpio_cfg.constprop.0+0x2e>
   1f376:	bf00      	nop
   1f378:	00031bdb 	.word	0x00031bdb
   1f37c:	0002d881 	.word	0x0002d881
   1f380:	00031ba8 	.word	0x00031ba8
   1f384:	40842500 	.word	0x40842500
   1f388:	40842800 	.word	0x40842800

0001f38c <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1f38c:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1f38e:	4b0e      	ldr	r3, [pc, #56]	; (1f3c8 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1f390:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1f392:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1f396:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1f39a:	2807      	cmp	r0, #7
   1f39c:	d813      	bhi.n	1f3c6 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1f39e:	e8df f000 	tbb	[pc, r0]
   1f3a2:	0f11      	.short	0x0f11
   1f3a4:	080a0b0d 	.word	0x080a0b0d
   1f3a8:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1f3aa:	0e10      	lsrs	r0, r2, #24
   1f3ac:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1f3ae:	0c10      	lsrs	r0, r2, #16
   1f3b0:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1f3b2:	0a10      	lsrs	r0, r2, #8
   1f3b4:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1f3b6:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1f3b8:	0e1a      	lsrs	r2, r3, #24
   1f3ba:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1f3bc:	0c1a      	lsrs	r2, r3, #16
   1f3be:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1f3c0:	0a1a      	lsrs	r2, r3, #8
   1f3c2:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1f3c4:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1f3c6:	bd10      	pop	{r4, pc}
   1f3c8:	4002b000 	.word	0x4002b000

0001f3cc <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1f3cc:	3802      	subs	r0, #2
   1f3ce:	2807      	cmp	r0, #7
   1f3d0:	d81f      	bhi.n	1f412 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1f3d2:	e8df f000 	tbb	[pc, r0]
   1f3d6:	2729      	.short	0x2729
   1f3d8:	21231125 	.word	0x21231125
   1f3dc:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1f3de:	79cb      	ldrb	r3, [r1, #7]
   1f3e0:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1f3e2:	798a      	ldrb	r2, [r1, #6]
   1f3e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1f3e8:	794a      	ldrb	r2, [r1, #5]
   1f3ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1f3ee:	790a      	ldrb	r2, [r1, #4]
   1f3f0:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1f3f2:	4a0e      	ldr	r2, [pc, #56]	; (1f42c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1f3f4:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1f3f8:	78cb      	ldrb	r3, [r1, #3]
   1f3fa:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1f3fc:	788a      	ldrb	r2, [r1, #2]
   1f3fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1f402:	784a      	ldrb	r2, [r1, #1]
   1f404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1f408:	780a      	ldrb	r2, [r1, #0]
   1f40a:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1f40c:	4a07      	ldr	r2, [pc, #28]	; (1f42c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1f40e:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1f412:	4770      	bx	lr
    switch (length)
   1f414:	2300      	movs	r3, #0
   1f416:	e7e4      	b.n	1f3e2 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1f418:	2300      	movs	r3, #0
   1f41a:	e7e5      	b.n	1f3e8 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1f41c:	2300      	movs	r3, #0
   1f41e:	e7e6      	b.n	1f3ee <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1f420:	2300      	movs	r3, #0
   1f422:	e7eb      	b.n	1f3fc <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1f424:	2300      	movs	r3, #0
   1f426:	e7ec      	b.n	1f402 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1f428:	2300      	movs	r3, #0
   1f42a:	e7ed      	b.n	1f408 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1f42c:	4002b000 	.word	0x4002b000

0001f430 <nrfx_qspi_init>:
{
   1f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f432:	460d      	mov	r5, r1
   1f434:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1f436:	4604      	mov	r4, r0
   1f438:	b958      	cbnz	r0, 1f452 <nrfx_qspi_init+0x22>
   1f43a:	496e      	ldr	r1, [pc, #440]	; (1f5f4 <nrfx_qspi_init+0x1c4>)
   1f43c:	486e      	ldr	r0, [pc, #440]	; (1f5f8 <nrfx_qspi_init+0x1c8>)
   1f43e:	f44f 7388 	mov.w	r3, #272	; 0x110
   1f442:	4a6e      	ldr	r2, [pc, #440]	; (1f5fc <nrfx_qspi_init+0x1cc>)
   1f444:	f007 fa6d 	bl	26922 <assert_print>
   1f448:	f44f 7188 	mov.w	r1, #272	; 0x110
   1f44c:	486b      	ldr	r0, [pc, #428]	; (1f5fc <nrfx_qspi_init+0x1cc>)
   1f44e:	f007 fa61 	bl	26914 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1f452:	4f6b      	ldr	r7, [pc, #428]	; (1f600 <nrfx_qspi_init+0x1d0>)
   1f454:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1f458:	2b00      	cmp	r3, #0
   1f45a:	f040 80c6 	bne.w	1f5ea <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1f45e:	7cc2      	ldrb	r2, [r0, #19]
   1f460:	b112      	cbz	r2, 1f468 <nrfx_qspi_init+0x38>
   1f462:	7d03      	ldrb	r3, [r0, #20]
   1f464:	2b00      	cmp	r3, #0
   1f466:	d170      	bne.n	1f54a <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1f468:	7920      	ldrb	r0, [r4, #4]
   1f46a:	28ff      	cmp	r0, #255	; 0xff
   1f46c:	f000 80bf 	beq.w	1f5ee <nrfx_qspi_init+0x1be>
   1f470:	7963      	ldrb	r3, [r4, #5]
   1f472:	2bff      	cmp	r3, #255	; 0xff
   1f474:	f000 80bb 	beq.w	1f5ee <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1f478:	79a3      	ldrb	r3, [r4, #6]
   1f47a:	2bff      	cmp	r3, #255	; 0xff
   1f47c:	f000 80b7 	beq.w	1f5ee <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1f480:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1f482:	29ff      	cmp	r1, #255	; 0xff
   1f484:	f000 80b3 	beq.w	1f5ee <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1f488:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1f48a:	f8df c178 	ldr.w	ip, [pc, #376]	; 1f604 <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1f48e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1f492:	4563      	cmp	r3, ip
   1f494:	f040 80ab 	bne.w	1f5ee <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1f498:	290e      	cmp	r1, #14
   1f49a:	f040 80a8 	bne.w	1f5ee <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1f49e:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1f4a0:	2bff      	cmp	r3, #255	; 0xff
   1f4a2:	d002      	beq.n	1f4aa <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1f4a4:	2b0f      	cmp	r3, #15
   1f4a6:	f040 80a2 	bne.w	1f5ee <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1f4aa:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1f4ac:	2bff      	cmp	r3, #255	; 0xff
   1f4ae:	d002      	beq.n	1f4b6 <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1f4b0:	2b10      	cmp	r3, #16
   1f4b2:	f040 809c 	bne.w	1f5ee <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1f4b6:	b9d2      	cbnz	r2, 1f4ee <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1f4b8:	2103      	movs	r1, #3
   1f4ba:	f7ff ff2f 	bl	1f31c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1f4be:	2103      	movs	r1, #3
   1f4c0:	7960      	ldrb	r0, [r4, #5]
   1f4c2:	f7ff ff2b 	bl	1f31c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1f4c6:	2103      	movs	r1, #3
   1f4c8:	79a0      	ldrb	r0, [r4, #6]
   1f4ca:	f7ff ff27 	bl	1f31c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1f4ce:	79e0      	ldrb	r0, [r4, #7]
   1f4d0:	2103      	movs	r1, #3
   1f4d2:	f7ff ff23 	bl	1f31c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1f4d6:	7a20      	ldrb	r0, [r4, #8]
   1f4d8:	28ff      	cmp	r0, #255	; 0xff
   1f4da:	d002      	beq.n	1f4e2 <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1f4dc:	2103      	movs	r1, #3
   1f4de:	f7ff ff1d 	bl	1f31c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1f4e2:	7a60      	ldrb	r0, [r4, #9]
   1f4e4:	28ff      	cmp	r0, #255	; 0xff
   1f4e6:	d002      	beq.n	1f4ee <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1f4e8:	2103      	movs	r1, #3
   1f4ea:	f7ff ff17 	bl	1f31c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1f4ee:	7d23      	ldrb	r3, [r4, #20]
   1f4f0:	bb5b      	cbnz	r3, 1f54a <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1f4f2:	7923      	ldrb	r3, [r4, #4]
   1f4f4:	2bff      	cmp	r3, #255	; 0xff
   1f4f6:	bf14      	ite	ne
   1f4f8:	461a      	movne	r2, r3
   1f4fa:	f04f 32ff 	moveq.w	r2, #4294967295
   1f4fe:	4b42      	ldr	r3, [pc, #264]	; (1f608 <nrfx_qspi_init+0x1d8>)
   1f500:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1f504:	7962      	ldrb	r2, [r4, #5]
   1f506:	2aff      	cmp	r2, #255	; 0xff
   1f508:	bf08      	it	eq
   1f50a:	f04f 32ff 	moveq.w	r2, #4294967295
   1f50e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1f512:	79a2      	ldrb	r2, [r4, #6]
   1f514:	2aff      	cmp	r2, #255	; 0xff
   1f516:	bf08      	it	eq
   1f518:	f04f 32ff 	moveq.w	r2, #4294967295
   1f51c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1f520:	79e2      	ldrb	r2, [r4, #7]
   1f522:	2aff      	cmp	r2, #255	; 0xff
   1f524:	bf08      	it	eq
   1f526:	f04f 32ff 	moveq.w	r2, #4294967295
   1f52a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1f52e:	7a22      	ldrb	r2, [r4, #8]
   1f530:	2aff      	cmp	r2, #255	; 0xff
   1f532:	bf08      	it	eq
   1f534:	f04f 32ff 	moveq.w	r2, #4294967295
   1f538:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1f53c:	7a62      	ldrb	r2, [r4, #9]
   1f53e:	2aff      	cmp	r2, #255	; 0xff
   1f540:	bf08      	it	eq
   1f542:	f04f 32ff 	moveq.w	r2, #4294967295
   1f546:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1f54a:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1f54c:	4a2e      	ldr	r2, [pc, #184]	; (1f608 <nrfx_qspi_init+0x1d8>)
   1f54e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1f552:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1f554:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1f556:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1f558:	019b      	lsls	r3, r3, #6
   1f55a:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1f55e:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1f560:	7b61      	ldrb	r1, [r4, #13]
   1f562:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1f566:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1f56a:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1f56c:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1f570:	bbb1      	cbnz	r1, 1f5e0 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1f572:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1f576:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1f57a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1f57e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1f582:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1f586:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1f588:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1f58c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1f590:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1f592:	7be1      	ldrb	r1, [r4, #15]
   1f594:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1f598:	7c21      	ldrb	r1, [r4, #16]
   1f59a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1f59e:	7c61      	ldrb	r1, [r4, #17]
   1f5a0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1f5a4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1f5a8:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1f5aa:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1f5ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1f5b2:	2301      	movs	r3, #1
   1f5b4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1f5b8:	b115      	cbz	r5, 1f5c0 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1f5ba:	202b      	movs	r0, #43	; 0x2b
   1f5bc:	f7f1 f8ae 	bl	1071c <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1f5c0:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1f5c2:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1f5c4:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1f5c8:	4b0f      	ldr	r3, [pc, #60]	; (1f608 <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1f5ca:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1f5ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f5d2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5d6:	601a      	str	r2, [r3, #0]
}
   1f5d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1f5dc:	f7ff be74 	b.w	1f2c8 <qspi_ready_wait>
        regval &= ~(1 << 17);
   1f5e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1f5e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1f5e8:	e7c5      	b.n	1f576 <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1f5ea:	4808      	ldr	r0, [pc, #32]	; (1f60c <nrfx_qspi_init+0x1dc>)
}
   1f5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f5ee:	4808      	ldr	r0, [pc, #32]	; (1f610 <nrfx_qspi_init+0x1e0>)
   1f5f0:	e7fc      	b.n	1f5ec <nrfx_qspi_init+0x1bc>
   1f5f2:	bf00      	nop
   1f5f4:	0003259c 	.word	0x0003259c
   1f5f8:	0002d881 	.word	0x0002d881
   1f5fc:	0003268b 	.word	0x0003268b
   1f600:	20021a3c 	.word	0x20021a3c
   1f604:	000d1211 	.word	0x000d1211
   1f608:	4002b000 	.word	0x4002b000
   1f60c:	0bad0005 	.word	0x0bad0005
   1f610:	0bad0004 	.word	0x0bad0004

0001f614 <nrfx_qspi_cinstr_xfer>:
{
   1f614:	b570      	push	{r4, r5, r6, lr}
   1f616:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1f618:	4a26      	ldr	r2, [pc, #152]	; (1f6b4 <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1f61a:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1f61c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1f620:	b95a      	cbnz	r2, 1f63a <nrfx_qspi_cinstr_xfer+0x26>
   1f622:	4925      	ldr	r1, [pc, #148]	; (1f6b8 <nrfx_qspi_cinstr_xfer+0xa4>)
   1f624:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1f628:	4a24      	ldr	r2, [pc, #144]	; (1f6bc <nrfx_qspi_cinstr_xfer+0xa8>)
   1f62a:	4825      	ldr	r0, [pc, #148]	; (1f6c0 <nrfx_qspi_cinstr_xfer+0xac>)
   1f62c:	f007 f979 	bl	26922 <assert_print>
   1f630:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1f634:	4821      	ldr	r0, [pc, #132]	; (1f6bc <nrfx_qspi_cinstr_xfer+0xa8>)
   1f636:	f007 f96d 	bl	26914 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1f63a:	2a01      	cmp	r2, #1
   1f63c:	d137      	bne.n	1f6ae <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f63e:	2200      	movs	r2, #0
   1f640:	4e20      	ldr	r6, [pc, #128]	; (1f6c4 <nrfx_qspi_cinstr_xfer+0xb0>)
   1f642:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1f646:	b111      	cbz	r1, 1f64e <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1f648:	7840      	ldrb	r0, [r0, #1]
   1f64a:	f7ff febf 	bl	1f3cc <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1f64e:	2301      	movs	r3, #1
   1f650:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1f654:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1f656:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1f658:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1f65a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1f65e:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1f660:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1f662:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1f664:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1f668:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1f66a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1f66e:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1f670:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1f674:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1f678:	f7ff fe26 	bl	1f2c8 <qspi_ready_wait>
   1f67c:	4b12      	ldr	r3, [pc, #72]	; (1f6c8 <nrfx_qspi_cinstr_xfer+0xb4>)
   1f67e:	4298      	cmp	r0, r3
   1f680:	d10b      	bne.n	1f69a <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1f682:	792b      	ldrb	r3, [r5, #4]
   1f684:	b993      	cbnz	r3, 1f6ac <nrfx_qspi_cinstr_xfer+0x98>
   1f686:	4911      	ldr	r1, [pc, #68]	; (1f6cc <nrfx_qspi_cinstr_xfer+0xb8>)
   1f688:	f240 136b 	movw	r3, #363	; 0x16b
   1f68c:	4a0b      	ldr	r2, [pc, #44]	; (1f6bc <nrfx_qspi_cinstr_xfer+0xa8>)
   1f68e:	480c      	ldr	r0, [pc, #48]	; (1f6c0 <nrfx_qspi_cinstr_xfer+0xac>)
   1f690:	f007 f947 	bl	26922 <assert_print>
   1f694:	f240 116b 	movw	r1, #363	; 0x16b
   1f698:	e7cc      	b.n	1f634 <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f69a:	2300      	movs	r3, #0
   1f69c:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1f6a0:	b11c      	cbz	r4, 1f6aa <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1f6a2:	4621      	mov	r1, r4
   1f6a4:	7868      	ldrb	r0, [r5, #1]
   1f6a6:	f7ff fe71 	bl	1f38c <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1f6aa:	4809      	ldr	r0, [pc, #36]	; (1f6d0 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1f6ac:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1f6ae:	4809      	ldr	r0, [pc, #36]	; (1f6d4 <nrfx_qspi_cinstr_xfer+0xc0>)
   1f6b0:	e7fc      	b.n	1f6ac <nrfx_qspi_cinstr_xfer+0x98>
   1f6b2:	bf00      	nop
   1f6b4:	20021a3c 	.word	0x20021a3c
   1f6b8:	000326c7 	.word	0x000326c7
   1f6bc:	0003268b 	.word	0x0003268b
   1f6c0:	0002d881 	.word	0x0002d881
   1f6c4:	4002b000 	.word	0x4002b000
   1f6c8:	0bad0007 	.word	0x0bad0007
   1f6cc:	0003270b 	.word	0x0003270b
   1f6d0:	0bad0000 	.word	0x0bad0000
   1f6d4:	0bad000b 	.word	0x0bad000b

0001f6d8 <nrfx_qspi_mem_busy_check>:
{
   1f6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   1f6da:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   1f6dc:	4a0c      	ldr	r2, [pc, #48]	; (1f710 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1f6de:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   1f6e0:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1f6e2:	f10d 0207 	add.w	r2, sp, #7
   1f6e6:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   1f6e8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   1f6ec:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1f6f0:	f7ff ff90 	bl	1f614 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1f6f4:	4b07      	ldr	r3, [pc, #28]	; (1f714 <nrfx_qspi_mem_busy_check+0x3c>)
   1f6f6:	4298      	cmp	r0, r3
   1f6f8:	d106      	bne.n	1f708 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   1f6fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   1f6fe:	f013 0f01 	tst.w	r3, #1
   1f702:	4b05      	ldr	r3, [pc, #20]	; (1f718 <nrfx_qspi_mem_busy_check+0x40>)
   1f704:	bf18      	it	ne
   1f706:	4618      	movne	r0, r3
}
   1f708:	b005      	add	sp, #20
   1f70a:	f85d fb04 	ldr.w	pc, [sp], #4
   1f70e:	bf00      	nop
   1f710:	01000205 	.word	0x01000205
   1f714:	0bad0000 	.word	0x0bad0000
   1f718:	0bad000b 	.word	0x0bad000b

0001f71c <nrfx_qspi_uninit>:
{
   1f71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1f720:	4e29      	ldr	r6, [pc, #164]	; (1f7c8 <nrfx_qspi_uninit+0xac>)
   1f722:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1f726:	b95b      	cbnz	r3, 1f740 <nrfx_qspi_uninit+0x24>
   1f728:	4928      	ldr	r1, [pc, #160]	; (1f7cc <nrfx_qspi_uninit+0xb0>)
   1f72a:	4829      	ldr	r0, [pc, #164]	; (1f7d0 <nrfx_qspi_uninit+0xb4>)
   1f72c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1f730:	4a28      	ldr	r2, [pc, #160]	; (1f7d4 <nrfx_qspi_uninit+0xb8>)
   1f732:	f007 f8f6 	bl	26922 <assert_print>
   1f736:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1f73a:	4826      	ldr	r0, [pc, #152]	; (1f7d4 <nrfx_qspi_uninit+0xb8>)
   1f73c:	f007 f8ea 	bl	26914 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1f740:	202b      	movs	r0, #43	; 0x2b
   1f742:	f7f0 fff9 	bl	10738 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   1f746:	4b24      	ldr	r3, [pc, #144]	; (1f7d8 <nrfx_qspi_uninit+0xbc>)
   1f748:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   1f74c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1f750:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   1f754:	bf04      	itt	eq
   1f756:	4a21      	ldreq	r2, [pc, #132]	; (1f7dc <nrfx_qspi_uninit+0xc0>)
   1f758:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   1f75c:	2201      	movs	r2, #1
   1f75e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f762:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1f764:	2200      	movs	r2, #0
   1f766:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f76a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   1f76e:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   1f772:	bb22      	cbnz	r2, 1f7be <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   1f774:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   1f778:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   1f77c:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   1f77e:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   1f782:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   1f786:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   1f78a:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   1f78e:	f00b f951 	bl	2aa34 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   1f792:	fa5f f089 	uxtb.w	r0, r9
   1f796:	f00b f94d 	bl	2aa34 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   1f79a:	fa5f f088 	uxtb.w	r0, r8
   1f79e:	f00b f949 	bl	2aa34 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   1f7a2:	b2f8      	uxtb	r0, r7
   1f7a4:	f00b f946 	bl	2aa34 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1f7a8:	b2e8      	uxtb	r0, r5
   1f7aa:	28ff      	cmp	r0, #255	; 0xff
   1f7ac:	b2e4      	uxtb	r4, r4
   1f7ae:	d001      	beq.n	1f7b4 <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   1f7b0:	f00b f940 	bl	2aa34 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1f7b4:	2cff      	cmp	r4, #255	; 0xff
   1f7b6:	d002      	beq.n	1f7be <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   1f7b8:	4620      	mov	r0, r4
   1f7ba:	f00b f93b 	bl	2aa34 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1f7be:	2300      	movs	r3, #0
   1f7c0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1f7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f7c8:	20021a3c 	.word	0x20021a3c
   1f7cc:	000326c7 	.word	0x000326c7
   1f7d0:	0002d881 	.word	0x0002d881
   1f7d4:	0003268b 	.word	0x0003268b
   1f7d8:	4002b000 	.word	0x4002b000
   1f7dc:	00030100 	.word	0x00030100

0001f7e0 <nrfx_qspi_erase>:
{
   1f7e0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1f7e2:	4a1a      	ldr	r2, [pc, #104]	; (1f84c <nrfx_qspi_erase+0x6c>)
   1f7e4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1f7e8:	b95b      	cbnz	r3, 1f802 <nrfx_qspi_erase+0x22>
   1f7ea:	4919      	ldr	r1, [pc, #100]	; (1f850 <nrfx_qspi_erase+0x70>)
   1f7ec:	4819      	ldr	r0, [pc, #100]	; (1f854 <nrfx_qspi_erase+0x74>)
   1f7ee:	f44f 730a 	mov.w	r3, #552	; 0x228
   1f7f2:	4a19      	ldr	r2, [pc, #100]	; (1f858 <nrfx_qspi_erase+0x78>)
   1f7f4:	f007 f895 	bl	26922 <assert_print>
   1f7f8:	f44f 710a 	mov.w	r1, #552	; 0x228
   1f7fc:	4816      	ldr	r0, [pc, #88]	; (1f858 <nrfx_qspi_erase+0x78>)
   1f7fe:	f007 f889 	bl	26914 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   1f802:	078c      	lsls	r4, r1, #30
   1f804:	d11e      	bne.n	1f844 <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   1f806:	6814      	ldr	r4, [r2, #0]
   1f808:	b10c      	cbz	r4, 1f80e <nrfx_qspi_erase+0x2e>
   1f80a:	2b01      	cmp	r3, #1
   1f80c:	d11c      	bne.n	1f848 <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   1f80e:	2304      	movs	r3, #4
   1f810:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   1f814:	4b11      	ldr	r3, [pc, #68]	; (1f85c <nrfx_qspi_erase+0x7c>)
   1f816:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f81a:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   1f81c:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f820:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f824:	2101      	movs	r1, #1
   1f826:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   1f828:	6810      	ldr	r0, [r2, #0]
   1f82a:	b940      	cbnz	r0, 1f83e <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f82c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1f830:	2900      	cmp	r1, #0
   1f832:	d0fb      	beq.n	1f82c <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   1f834:	2301      	movs	r3, #1
   1f836:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   1f83a:	4809      	ldr	r0, [pc, #36]	; (1f860 <nrfx_qspi_erase+0x80>)
}
   1f83c:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   1f83e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   1f842:	e7fa      	b.n	1f83a <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   1f844:	4807      	ldr	r0, [pc, #28]	; (1f864 <nrfx_qspi_erase+0x84>)
   1f846:	e7f9      	b.n	1f83c <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   1f848:	4807      	ldr	r0, [pc, #28]	; (1f868 <nrfx_qspi_erase+0x88>)
   1f84a:	e7f7      	b.n	1f83c <nrfx_qspi_erase+0x5c>
   1f84c:	20021a3c 	.word	0x20021a3c
   1f850:	000326c7 	.word	0x000326c7
   1f854:	0002d881 	.word	0x0002d881
   1f858:	0003268b 	.word	0x0003268b
   1f85c:	4002b000 	.word	0x4002b000
   1f860:	0bad0000 	.word	0x0bad0000
   1f864:	0bad000a 	.word	0x0bad000a
   1f868:	0bad000b 	.word	0x0bad000b

0001f86c <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   1f86c:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f86e:	4b17      	ldr	r3, [pc, #92]	; (1f8cc <nrfx_qspi_irq_handler+0x60>)
   1f870:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1f874:	b1e2      	cbz	r2, 1f8b0 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f876:	2200      	movs	r2, #0
    switch (m_cb.state)
   1f878:	4c15      	ldr	r4, [pc, #84]	; (1f8d0 <nrfx_qspi_irq_handler+0x64>)
   1f87a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f87e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1f882:	2a03      	cmp	r2, #3
   1f884:	d015      	beq.n	1f8b2 <nrfx_qspi_irq_handler+0x46>
   1f886:	2a04      	cmp	r2, #4
   1f888:	d015      	beq.n	1f8b6 <nrfx_qspi_irq_handler+0x4a>
   1f88a:	2a02      	cmp	r2, #2
   1f88c:	d104      	bne.n	1f898 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   1f88e:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1f890:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   1f894:	f7ff fd2e 	bl	1f2f4 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   1f898:	68a3      	ldr	r3, [r4, #8]
   1f89a:	b913      	cbnz	r3, 1f8a2 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1f89c:	2301      	movs	r3, #1
   1f89e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1f8a2:	e9d4 3100 	ldrd	r3, r1, [r4]
   1f8a6:	2000      	movs	r0, #0
   1f8a8:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1f8aa:	2300      	movs	r3, #0
   1f8ac:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1f8b0:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1f8b2:	2302      	movs	r3, #2
   1f8b4:	e7ec      	b.n	1f890 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   1f8b6:	2203      	movs	r2, #3
   1f8b8:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1f8bc:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   1f8c0:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   1f8c2:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1f8c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1f8ca:	e7e5      	b.n	1f898 <nrfx_qspi_irq_handler+0x2c>
   1f8cc:	4002b000 	.word	0x4002b000
   1f8d0:	20021a3c 	.word	0x20021a3c

0001f8d4 <nrf_gpio_pin_port_decode>:
{
   1f8d4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f8d6:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1f8d8:	095a      	lsrs	r2, r3, #5
   1f8da:	d00d      	beq.n	1f8f8 <nrf_gpio_pin_port_decode+0x24>
   1f8dc:	2a01      	cmp	r2, #1
   1f8de:	d013      	beq.n	1f908 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f8e0:	490e      	ldr	r1, [pc, #56]	; (1f91c <nrf_gpio_pin_port_decode+0x48>)
   1f8e2:	480f      	ldr	r0, [pc, #60]	; (1f920 <nrf_gpio_pin_port_decode+0x4c>)
   1f8e4:	f240 2347 	movw	r3, #583	; 0x247
   1f8e8:	4a0e      	ldr	r2, [pc, #56]	; (1f924 <nrf_gpio_pin_port_decode+0x50>)
   1f8ea:	f007 f81a 	bl	26922 <assert_print>
   1f8ee:	f240 2147 	movw	r1, #583	; 0x247
   1f8f2:	480c      	ldr	r0, [pc, #48]	; (1f924 <nrf_gpio_pin_port_decode+0x50>)
   1f8f4:	f007 f80e 	bl	26914 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1f8f8:	f04f 32ff 	mov.w	r2, #4294967295
   1f8fc:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f900:	07d9      	lsls	r1, r3, #31
   1f902:	d5ed      	bpl.n	1f8e0 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1f904:	4808      	ldr	r0, [pc, #32]	; (1f928 <nrf_gpio_pin_port_decode+0x54>)
   1f906:	e008      	b.n	1f91a <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1f908:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1f90c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f910:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f912:	07d2      	lsls	r2, r2, #31
   1f914:	d5e4      	bpl.n	1f8e0 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1f916:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1f918:	4804      	ldr	r0, [pc, #16]	; (1f92c <nrf_gpio_pin_port_decode+0x58>)
}
   1f91a:	bd08      	pop	{r3, pc}
   1f91c:	00031bdb 	.word	0x00031bdb
   1f920:	0002d881 	.word	0x0002d881
   1f924:	00031ba8 	.word	0x00031ba8
   1f928:	40842500 	.word	0x40842500
   1f92c:	40842800 	.word	0x40842800

0001f930 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1f930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f934:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   1f936:	460c      	mov	r4, r1
   1f938:	b959      	cbnz	r1, 1f952 <nrfx_spim_init+0x22>
   1f93a:	498d      	ldr	r1, [pc, #564]	; (1fb70 <nrfx_spim_init+0x240>)
   1f93c:	488d      	ldr	r0, [pc, #564]	; (1fb74 <nrfx_spim_init+0x244>)
   1f93e:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1f942:	4a8d      	ldr	r2, [pc, #564]	; (1fb78 <nrfx_spim_init+0x248>)
   1f944:	f006 ffed 	bl	26922 <assert_print>
   1f948:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1f94c:	488a      	ldr	r0, [pc, #552]	; (1fb78 <nrfx_spim_init+0x248>)
   1f94e:	f006 ffe1 	bl	26914 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f952:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1f954:	4d89      	ldr	r5, [pc, #548]	; (1fb7c <nrfx_spim_init+0x24c>)
   1f956:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   1f95a:	7f09      	ldrb	r1, [r1, #28]
   1f95c:	2900      	cmp	r1, #0
   1f95e:	f040 8100 	bne.w	1fb62 <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1f962:	2f00      	cmp	r7, #0
   1f964:	f040 80ff 	bne.w	1fb66 <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1f968:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1f96c:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   1f96e:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1f970:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1f974:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1f976:	d027      	beq.n	1f9c8 <nrfx_spim_init+0x98>
   1f978:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   1f97c:	d124      	bne.n	1f9c8 <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1f97e:	b119      	cbz	r1, 1f988 <nrfx_spim_init+0x58>
   1f980:	7d20      	ldrb	r0, [r4, #20]
   1f982:	2800      	cmp	r0, #0
   1f984:	f040 80d5 	bne.w	1fb32 <nrfx_spim_init+0x202>
   1f988:	487d      	ldr	r0, [pc, #500]	; (1fb80 <nrfx_spim_init+0x250>)
   1f98a:	4581      	cmp	r9, r0
   1f98c:	d11c      	bne.n	1f9c8 <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1f98e:	7820      	ldrb	r0, [r4, #0]
   1f990:	28ff      	cmp	r0, #255	; 0xff
   1f992:	d002      	beq.n	1f99a <nrfx_spim_init+0x6a>
   1f994:	2808      	cmp	r0, #8
   1f996:	f040 80e8 	bne.w	1fb6a <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1f99a:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1f99c:	28ff      	cmp	r0, #255	; 0xff
   1f99e:	d002      	beq.n	1f9a6 <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1f9a0:	280b      	cmp	r0, #11
   1f9a2:	f040 80e2 	bne.w	1fb6a <nrfx_spim_init+0x23a>
   1f9a6:	2eff      	cmp	r6, #255	; 0xff
   1f9a8:	d002      	beq.n	1f9b0 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1f9aa:	2e0c      	cmp	r6, #12
   1f9ac:	f040 80dd 	bne.w	1fb6a <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1f9b0:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1f9b2:	28ff      	cmp	r0, #255	; 0xff
   1f9b4:	d002      	beq.n	1f9bc <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1f9b6:	2809      	cmp	r0, #9
   1f9b8:	f040 80d7 	bne.w	1fb6a <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1f9bc:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1f9be:	28ff      	cmp	r0, #255	; 0xff
   1f9c0:	d002      	beq.n	1f9c8 <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1f9c2:	280a      	cmp	r0, #10
   1f9c4:	f040 80d1 	bne.w	1fb6a <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1f9c8:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1f9cc:	7fab      	ldrb	r3, [r5, #30]
   1f9ce:	f361 0300 	bfi	r3, r1, #0, #1
   1f9d2:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1f9d4:	7922      	ldrb	r2, [r4, #4]
   1f9d6:	b2db      	uxtb	r3, r3
   1f9d8:	f362 0341 	bfi	r3, r2, #1, #1
   1f9dc:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   1f9de:	7c62      	ldrb	r2, [r4, #17]
   1f9e0:	b2db      	uxtb	r3, r3
   1f9e2:	f362 0382 	bfi	r3, r2, #2, #1
   1f9e6:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1f9e8:	78e3      	ldrb	r3, [r4, #3]
   1f9ea:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   1f9ec:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1f9ee:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   1f9f2:	2b00      	cmp	r3, #0
   1f9f4:	d142      	bne.n	1fa7c <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1f9f6:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1f9f8:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1f9fa:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   1f9fe:	7b23      	ldrb	r3, [r4, #12]
   1fa00:	bf08      	it	eq
   1fa02:	2703      	moveq	r7, #3
   1fa04:	2b01      	cmp	r3, #1
   1fa06:	f200 8096 	bhi.w	1fb36 <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1fa0a:	f00b f820 	bl	2aa4e <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1fa0e:	2300      	movs	r3, #0
   1fa10:	9700      	str	r7, [sp, #0]
   1fa12:	7820      	ldrb	r0, [r4, #0]
   1fa14:	461a      	mov	r2, r3
   1fa16:	2101      	movs	r1, #1
   1fa18:	f00b f841 	bl	2aa9e <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1fa1c:	7860      	ldrb	r0, [r4, #1]
   1fa1e:	28ff      	cmp	r0, #255	; 0xff
   1fa20:	d008      	beq.n	1fa34 <nrfx_spim_init+0x104>
   1fa22:	f00b f814 	bl	2aa4e <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1fa26:	2201      	movs	r2, #1
   1fa28:	9700      	str	r7, [sp, #0]
   1fa2a:	2300      	movs	r3, #0
   1fa2c:	4611      	mov	r1, r2
   1fa2e:	7860      	ldrb	r0, [r4, #1]
   1fa30:	f00b f835 	bl	2aa9e <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1fa34:	78a0      	ldrb	r0, [r4, #2]
   1fa36:	28ff      	cmp	r0, #255	; 0xff
   1fa38:	d005      	beq.n	1fa46 <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   1fa3a:	2200      	movs	r2, #0
   1fa3c:	9700      	str	r7, [sp, #0]
   1fa3e:	4611      	mov	r1, r2
   1fa40:	7ba3      	ldrb	r3, [r4, #14]
   1fa42:	f00b f82c 	bl	2aa9e <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1fa46:	78e0      	ldrb	r0, [r4, #3]
   1fa48:	28ff      	cmp	r0, #255	; 0xff
   1fa4a:	d00b      	beq.n	1fa64 <nrfx_spim_init+0x134>
    if (value == 0)
   1fa4c:	7923      	ldrb	r3, [r4, #4]
   1fa4e:	2b00      	cmp	r3, #0
   1fa50:	d074      	beq.n	1fb3c <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   1fa52:	f00a fffc 	bl	2aa4e <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1fa56:	2201      	movs	r2, #1
   1fa58:	9700      	str	r7, [sp, #0]
   1fa5a:	2300      	movs	r3, #0
   1fa5c:	4611      	mov	r1, r2
   1fa5e:	78e0      	ldrb	r0, [r4, #3]
   1fa60:	f00b f81d 	bl	2aa9e <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1fa64:	7be0      	ldrb	r0, [r4, #15]
   1fa66:	28ff      	cmp	r0, #255	; 0xff
   1fa68:	d008      	beq.n	1fa7c <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   1fa6a:	f00a fffc 	bl	2aa66 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1fa6e:	2201      	movs	r2, #1
   1fa70:	9700      	str	r7, [sp, #0]
   1fa72:	2300      	movs	r3, #0
   1fa74:	4611      	mov	r1, r2
   1fa76:	7be0      	ldrb	r0, [r4, #15]
   1fa78:	f00b f811 	bl	2aa9e <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1fa7c:	7d23      	ldrb	r3, [r4, #20]
   1fa7e:	bb6b      	cbnz	r3, 1fadc <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1fa80:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1fa82:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1fa84:	2bff      	cmp	r3, #255	; 0xff
   1fa86:	bf18      	it	ne
   1fa88:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1fa8a:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1fa8c:	bf08      	it	eq
   1fa8e:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1fa92:	2bff      	cmp	r3, #255	; 0xff
   1fa94:	bf08      	it	eq
   1fa96:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1fa9a:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1fa9e:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1faa2:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1faa6:	f898 3004 	ldrb.w	r3, [r8, #4]
   1faaa:	b9bb      	cbnz	r3, 1fadc <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1faac:	78e3      	ldrb	r3, [r4, #3]
   1faae:	2bff      	cmp	r3, #255	; 0xff
   1fab0:	d047      	beq.n	1fb42 <nrfx_spim_init+0x212>
   1fab2:	7c62      	ldrb	r2, [r4, #17]
   1fab4:	2a00      	cmp	r2, #0
   1fab6:	d044      	beq.n	1fb42 <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1fab8:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1faba:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1fabc:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1fac0:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1fac4:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1fac8:	f898 3004 	ldrb.w	r3, [r8, #4]
   1facc:	b933      	cbnz	r3, 1fadc <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1face:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1fad0:	2bff      	cmp	r3, #255	; 0xff
   1fad2:	bf08      	it	eq
   1fad4:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1fad8:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1fadc:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1fade:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1fae2:	68a3      	ldr	r3, [r4, #8]
   1fae4:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1fae8:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1faea:	7b22      	ldrb	r2, [r4, #12]
   1faec:	3b00      	subs	r3, #0
   1faee:	bf18      	it	ne
   1faf0:	2301      	movne	r3, #1
    switch (spi_mode)
   1faf2:	2a02      	cmp	r2, #2
   1faf4:	d02f      	beq.n	1fb56 <nrfx_spim_init+0x226>
   1faf6:	2a03      	cmp	r2, #3
   1faf8:	d030      	beq.n	1fb5c <nrfx_spim_init+0x22c>
   1fafa:	2a01      	cmp	r2, #1
   1fafc:	d101      	bne.n	1fb02 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1fafe:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1fb02:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1fb06:	79a3      	ldrb	r3, [r4, #6]
   1fb08:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1fb0c:	2307      	movs	r3, #7
   1fb0e:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1fb12:	682b      	ldr	r3, [r5, #0]
   1fb14:	b12b      	cbz	r3, 1fb22 <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1fb16:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1fb1a:	f340 3007 	sbfx	r0, r0, #12, #8
   1fb1e:	f7f0 fdfd 	bl	1071c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1fb22:	2300      	movs	r3, #0
   1fb24:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fb26:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1fb28:	4816      	ldr	r0, [pc, #88]	; (1fb84 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fb2a:	772b      	strb	r3, [r5, #28]
}
   1fb2c:	b003      	add	sp, #12
   1fb2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1fb32:	4601      	mov	r1, r0
   1fb34:	e748      	b.n	1f9c8 <nrfx_spim_init+0x98>
   1fb36:	f00a ff96 	bl	2aa66 <nrf_gpio_pin_set>
   1fb3a:	e768      	b.n	1fa0e <nrfx_spim_init+0xde>
   1fb3c:	f00a ff93 	bl	2aa66 <nrf_gpio_pin_set>
   1fb40:	e789      	b.n	1fa56 <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   1fb42:	f04f 33ff 	mov.w	r3, #4294967295
   1fb46:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1fb4a:	2300      	movs	r3, #0
   1fb4c:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1fb50:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   1fb54:	e7b8      	b.n	1fac8 <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1fb56:	f043 0304 	orr.w	r3, r3, #4
        break;
   1fb5a:	e7d2      	b.n	1fb02 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1fb5c:	f043 0306 	orr.w	r3, r3, #6
        break;
   1fb60:	e7cf      	b.n	1fb02 <nrfx_spim_init+0x1d2>
        return err_code;
   1fb62:	4809      	ldr	r0, [pc, #36]	; (1fb88 <nrfx_spim_init+0x258>)
   1fb64:	e7e2      	b.n	1fb2c <nrfx_spim_init+0x1fc>
        return err_code;
   1fb66:	4809      	ldr	r0, [pc, #36]	; (1fb8c <nrfx_spim_init+0x25c>)
   1fb68:	e7e0      	b.n	1fb2c <nrfx_spim_init+0x1fc>
            return err_code;
   1fb6a:	4809      	ldr	r0, [pc, #36]	; (1fb90 <nrfx_spim_init+0x260>)
   1fb6c:	e7de      	b.n	1fb2c <nrfx_spim_init+0x1fc>
   1fb6e:	bf00      	nop
   1fb70:	0003259c 	.word	0x0003259c
   1fb74:	0002d881 	.word	0x0002d881
   1fb78:	0003271d 	.word	0x0003271d
   1fb7c:	20021a70 	.word	0x20021a70
   1fb80:	4000a000 	.word	0x4000a000
   1fb84:	0bad0000 	.word	0x0bad0000
   1fb88:	0bad0005 	.word	0x0bad0005
   1fb8c:	0bad0003 	.word	0x0bad0003
   1fb90:	0bad0004 	.word	0x0bad0004

0001fb94 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1fb94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fb98:	4d2e      	ldr	r5, [pc, #184]	; (1fc54 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fb9a:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   1fb9e:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fba0:	ea4f 1648 	mov.w	r6, r8, lsl #5
   1fba4:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1fba8:	f898 301c 	ldrb.w	r3, [r8, #28]
   1fbac:	b95b      	cbnz	r3, 1fbc6 <nrfx_spim_uninit+0x32>
   1fbae:	492a      	ldr	r1, [pc, #168]	; (1fc58 <nrfx_spim_uninit+0xc4>)
   1fbb0:	482a      	ldr	r0, [pc, #168]	; (1fc5c <nrfx_spim_uninit+0xc8>)
   1fbb2:	f240 230f 	movw	r3, #527	; 0x20f
   1fbb6:	4a2a      	ldr	r2, [pc, #168]	; (1fc60 <nrfx_spim_uninit+0xcc>)
   1fbb8:	f006 feb3 	bl	26922 <assert_print>
   1fbbc:	f240 210f 	movw	r1, #527	; 0x20f
   1fbc0:	4827      	ldr	r0, [pc, #156]	; (1fc60 <nrfx_spim_uninit+0xcc>)
   1fbc2:	f006 fea7 	bl	26914 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1fbc6:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1fbc8:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1fbca:	b1cb      	cbz	r3, 1fc00 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1fbcc:	f344 3007 	sbfx	r0, r4, #12, #8
   1fbd0:	f7f0 fdb2 	bl	10738 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1fbd4:	4b23      	ldr	r3, [pc, #140]	; (1fc64 <nrfx_spim_uninit+0xd0>)
   1fbd6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1fbda:	f898 301d 	ldrb.w	r3, [r8, #29]
   1fbde:	b17b      	cbz	r3, 1fc00 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fbe0:	2301      	movs	r3, #1
   1fbe2:	f04f 0864 	mov.w	r8, #100	; 0x64
   1fbe6:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fbe8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1fbec:	b92b      	cbnz	r3, 1fbfa <nrfx_spim_uninit+0x66>
   1fbee:	2001      	movs	r0, #1
   1fbf0:	f00a fe9d 	bl	2a92e <nrfx_busy_wait>
   1fbf4:	f1b8 0801 	subs.w	r8, r8, #1
   1fbf8:	d1f6      	bne.n	1fbe8 <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1fbfa:	2200      	movs	r2, #0
   1fbfc:	19ab      	adds	r3, r5, r6
   1fbfe:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1fc00:	2300      	movs	r3, #0
   1fc02:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1fc06:	19ab      	adds	r3, r5, r6
   1fc08:	7f9b      	ldrb	r3, [r3, #30]
   1fc0a:	07db      	lsls	r3, r3, #31
   1fc0c:	d41b      	bmi.n	1fc46 <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   1fc0e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1fc12:	f00a ff63 	bl	2aadc <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1fc16:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1fc1a:	f00a ff5f 	bl	2aadc <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1fc1e:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1fc22:	f00a ff5b 	bl	2aadc <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1fc26:	793b      	ldrb	r3, [r7, #4]
   1fc28:	b91b      	cbnz	r3, 1fc32 <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   1fc2a:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1fc2e:	f00a ff55 	bl	2aadc <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1fc32:	19ab      	adds	r3, r5, r6
   1fc34:	7fd8      	ldrb	r0, [r3, #31]
   1fc36:	28ff      	cmp	r0, #255	; 0xff
   1fc38:	d005      	beq.n	1fc46 <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   1fc3a:	2300      	movs	r3, #0
   1fc3c:	2201      	movs	r2, #1
   1fc3e:	4619      	mov	r1, r3
   1fc40:	9300      	str	r3, [sp, #0]
   1fc42:	f00a ff2c 	bl	2aa9e <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1fc46:	2300      	movs	r3, #0
   1fc48:	4435      	add	r5, r6
   1fc4a:	772b      	strb	r3, [r5, #28]
}
   1fc4c:	b002      	add	sp, #8
   1fc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fc52:	bf00      	nop
   1fc54:	20021a70 	.word	0x20021a70
   1fc58:	00032759 	.word	0x00032759
   1fc5c:	0002d881 	.word	0x0002d881
   1fc60:	0003271d 	.word	0x0003271d
   1fc64:	00080152 	.word	0x00080152

0001fc68 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1fc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fc6c:	4e60      	ldr	r6, [pc, #384]	; (1fdf0 <nrfx_spim_xfer+0x188>)
   1fc6e:	7903      	ldrb	r3, [r0, #4]
{
   1fc70:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fc72:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fc76:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   1fc7a:	4607      	mov	r7, r0
   1fc7c:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fc7e:	b95a      	cbnz	r2, 1fc98 <nrfx_spim_xfer+0x30>
   1fc80:	495c      	ldr	r1, [pc, #368]	; (1fdf4 <nrfx_spim_xfer+0x18c>)
   1fc82:	f240 23de 	movw	r3, #734	; 0x2de
   1fc86:	4a5c      	ldr	r2, [pc, #368]	; (1fdf8 <nrfx_spim_xfer+0x190>)
   1fc88:	485c      	ldr	r0, [pc, #368]	; (1fdfc <nrfx_spim_xfer+0x194>)
   1fc8a:	f006 fe4a 	bl	26922 <assert_print>
   1fc8e:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   1fc92:	4859      	ldr	r0, [pc, #356]	; (1fdf8 <nrfx_spim_xfer+0x190>)
   1fc94:	f006 fe3e 	bl	26914 <assert_post_action>
   1fc98:	680a      	ldr	r2, [r1, #0]
   1fc9a:	b95a      	cbnz	r2, 1fcb4 <nrfx_spim_xfer+0x4c>
   1fc9c:	684a      	ldr	r2, [r1, #4]
   1fc9e:	b14a      	cbz	r2, 1fcb4 <nrfx_spim_xfer+0x4c>
   1fca0:	4957      	ldr	r1, [pc, #348]	; (1fe00 <nrfx_spim_xfer+0x198>)
   1fca2:	f240 23df 	movw	r3, #735	; 0x2df
   1fca6:	4a54      	ldr	r2, [pc, #336]	; (1fdf8 <nrfx_spim_xfer+0x190>)
   1fca8:	4854      	ldr	r0, [pc, #336]	; (1fdfc <nrfx_spim_xfer+0x194>)
   1fcaa:	f006 fe3a 	bl	26922 <assert_print>
   1fcae:	f240 21df 	movw	r1, #735	; 0x2df
   1fcb2:	e7ee      	b.n	1fc92 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   1fcb4:	68a2      	ldr	r2, [r4, #8]
   1fcb6:	b96a      	cbnz	r2, 1fcd4 <nrfx_spim_xfer+0x6c>
   1fcb8:	68e2      	ldr	r2, [r4, #12]
   1fcba:	2a00      	cmp	r2, #0
   1fcbc:	f000 8094 	beq.w	1fde8 <nrfx_spim_xfer+0x180>
   1fcc0:	4950      	ldr	r1, [pc, #320]	; (1fe04 <nrfx_spim_xfer+0x19c>)
   1fcc2:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   1fcc6:	4a4c      	ldr	r2, [pc, #304]	; (1fdf8 <nrfx_spim_xfer+0x190>)
   1fcc8:	484c      	ldr	r0, [pc, #304]	; (1fdfc <nrfx_spim_xfer+0x194>)
   1fcca:	f006 fe2a 	bl	26922 <assert_print>
   1fcce:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   1fcd2:	e7de      	b.n	1fc92 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1fcd4:	b93b      	cbnz	r3, 1fce6 <nrfx_spim_xfer+0x7e>
   1fcd6:	68e3      	ldr	r3, [r4, #12]
   1fcd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1fcdc:	d203      	bcs.n	1fce6 <nrfx_spim_xfer+0x7e>
   1fcde:	6863      	ldr	r3, [r4, #4]
   1fce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1fce4:	d309      	bcc.n	1fcfa <nrfx_spim_xfer+0x92>
   1fce6:	4948      	ldr	r1, [pc, #288]	; (1fe08 <nrfx_spim_xfer+0x1a0>)
   1fce8:	f240 23e1 	movw	r3, #737	; 0x2e1
   1fcec:	4a42      	ldr	r2, [pc, #264]	; (1fdf8 <nrfx_spim_xfer+0x190>)
   1fcee:	4843      	ldr	r0, [pc, #268]	; (1fdfc <nrfx_spim_xfer+0x194>)
   1fcf0:	f006 fe17 	bl	26922 <assert_print>
   1fcf4:	f240 21e1 	movw	r1, #737	; 0x2e1
   1fcf8:	e7cb      	b.n	1fc92 <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   1fcfa:	f015 0908 	ands.w	r9, r5, #8
   1fcfe:	d00f      	beq.n	1fd20 <nrfx_spim_xfer+0xb8>
   1fd00:	7fb3      	ldrb	r3, [r6, #30]
   1fd02:	075b      	lsls	r3, r3, #29
   1fd04:	d40c      	bmi.n	1fd20 <nrfx_spim_xfer+0xb8>
   1fd06:	7ff3      	ldrb	r3, [r6, #31]
   1fd08:	2bff      	cmp	r3, #255	; 0xff
   1fd0a:	d009      	beq.n	1fd20 <nrfx_spim_xfer+0xb8>
   1fd0c:	493f      	ldr	r1, [pc, #252]	; (1fe0c <nrfx_spim_xfer+0x1a4>)
   1fd0e:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   1fd12:	4a39      	ldr	r2, [pc, #228]	; (1fdf8 <nrfx_spim_xfer+0x190>)
   1fd14:	4839      	ldr	r0, [pc, #228]	; (1fdfc <nrfx_spim_xfer+0x194>)
   1fd16:	f006 fe04 	bl	26922 <assert_print>
   1fd1a:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   1fd1e:	e7b8      	b.n	1fc92 <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1fd20:	7f73      	ldrb	r3, [r6, #29]
   1fd22:	2b00      	cmp	r3, #0
   1fd24:	d15e      	bne.n	1fde4 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1fd26:	6833      	ldr	r3, [r6, #0]
   1fd28:	b123      	cbz	r3, 1fd34 <nrfx_spim_xfer+0xcc>
   1fd2a:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1fd2e:	bf04      	itt	eq
   1fd30:	2301      	moveq	r3, #1
   1fd32:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1fd34:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1fe10 <nrfx_spim_xfer+0x1a8>
   1fd38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1fd3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1fd40:	2101      	movs	r1, #1
   1fd42:	4640      	mov	r0, r8
   1fd44:	f00a fe9b 	bl	2aa7e <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1fd48:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1fd4a:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1fd4c:	b121      	cbz	r1, 1fd58 <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1fd4e:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   1fd52:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1fd56:	d106      	bne.n	1fd66 <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1fd58:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1fd5a:	b14a      	cbz	r2, 1fd70 <nrfx_spim_xfer+0x108>
   1fd5c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1fd60:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1fd64:	d004      	beq.n	1fd70 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   1fd66:	2300      	movs	r3, #0
        return err_code;
   1fd68:	482a      	ldr	r0, [pc, #168]	; (1fe14 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   1fd6a:	7773      	strb	r3, [r6, #29]
}
   1fd6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1fd70:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fd72:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fd76:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1fd7a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   1fd7e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1fd82:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fd86:	2200      	movs	r2, #0
   1fd88:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1fd8c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1fd90:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1fd94:	bf18      	it	ne
   1fd96:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1fd98:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1fd9c:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1fda0:	bf18      	it	ne
   1fda2:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1fda4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   1fda8:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1fdaa:	f1b9 0f00 	cmp.w	r9, #0
   1fdae:	d006      	beq.n	1fdbe <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   1fdb0:	b96a      	cbnz	r2, 1fdce <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   1fdb2:	2100      	movs	r1, #0
   1fdb4:	4640      	mov	r0, r8
   1fdb6:	f00a fe62 	bl	2aa7e <set_ss_pin_state>
    return err_code;
   1fdba:	4817      	ldr	r0, [pc, #92]	; (1fe18 <nrfx_spim_xfer+0x1b0>)
   1fdbc:	e7d6      	b.n	1fd6c <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fdbe:	2101      	movs	r1, #1
   1fdc0:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   1fdc2:	b922      	cbnz	r2, 1fdce <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fdc4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1fdc8:	2a00      	cmp	r2, #0
   1fdca:	d0fb      	beq.n	1fdc4 <nrfx_spim_xfer+0x15c>
   1fdcc:	e7f1      	b.n	1fdb2 <nrfx_spim_xfer+0x14a>
    if (!enable)
   1fdce:	f015 0f04 	tst.w	r5, #4
   1fdd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fdd6:	d002      	beq.n	1fdde <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   1fdd8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1fddc:	e7ed      	b.n	1fdba <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   1fdde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1fde2:	e7ea      	b.n	1fdba <nrfx_spim_xfer+0x152>
        return err_code;
   1fde4:	480d      	ldr	r0, [pc, #52]	; (1fe1c <nrfx_spim_xfer+0x1b4>)
   1fde6:	e7c1      	b.n	1fd6c <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1fde8:	2b00      	cmp	r3, #0
   1fdea:	f43f af78 	beq.w	1fcde <nrfx_spim_xfer+0x76>
   1fdee:	e77a      	b.n	1fce6 <nrfx_spim_xfer+0x7e>
   1fdf0:	20021a70 	.word	0x20021a70
   1fdf4:	00032759 	.word	0x00032759
   1fdf8:	0003271d 	.word	0x0003271d
   1fdfc:	0002d881 	.word	0x0002d881
   1fe00:	00032785 	.word	0x00032785
   1fe04:	000327cc 	.word	0x000327cc
   1fe08:	00032813 	.word	0x00032813
   1fe0c:	000328b7 	.word	0x000328b7
   1fe10:	20021a7c 	.word	0x20021a7c
   1fe14:	0bad000a 	.word	0x0bad000a
   1fe18:	0bad0000 	.word	0x0bad0000
   1fe1c:	0bad000b 	.word	0x0bad000b

0001fe20 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   1fe20:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe22:	4b13      	ldr	r3, [pc, #76]	; (1fe70 <nrfx_spim_4_irq_handler+0x50>)
   1fe24:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1fe28:	b302      	cbz	r2, 1fe6c <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fe2a:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   1fe2c:	4c11      	ldr	r4, [pc, #68]	; (1fe74 <nrfx_spim_4_irq_handler+0x54>)
   1fe2e:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   1fe32:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1fe36:	6823      	ldr	r3, [r4, #0]
   1fe38:	b95b      	cbnz	r3, 1fe52 <nrfx_spim_4_irq_handler+0x32>
   1fe3a:	490f      	ldr	r1, [pc, #60]	; (1fe78 <nrfx_spim_4_irq_handler+0x58>)
   1fe3c:	480f      	ldr	r0, [pc, #60]	; (1fe7c <nrfx_spim_4_irq_handler+0x5c>)
   1fe3e:	f240 333b 	movw	r3, #827	; 0x33b
   1fe42:	4a0f      	ldr	r2, [pc, #60]	; (1fe80 <nrfx_spim_4_irq_handler+0x60>)
   1fe44:	f006 fd6d 	bl	26922 <assert_print>
   1fe48:	f240 313b 	movw	r1, #827	; 0x33b
   1fe4c:	480c      	ldr	r0, [pc, #48]	; (1fe80 <nrfx_spim_4_irq_handler+0x60>)
   1fe4e:	f006 fd61 	bl	26914 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   1fe52:	4629      	mov	r1, r5
   1fe54:	4620      	mov	r0, r4
   1fe56:	f00a fe12 	bl	2aa7e <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1fe5a:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   1fe5e:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1fe60:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1fe62:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   1fe66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1fe6a:	4718      	bx	r3
}
   1fe6c:	bd70      	pop	{r4, r5, r6, pc}
   1fe6e:	bf00      	nop
   1fe70:	4000a000 	.word	0x4000a000
   1fe74:	20021a70 	.word	0x20021a70
   1fe78:	000328fa 	.word	0x000328fa
   1fe7c:	0002d881 	.word	0x0002d881
   1fe80:	0003271d 	.word	0x0003271d

0001fe84 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   1fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe88:	460e      	mov	r6, r1
   1fe8a:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1fe8c:	4d0c      	ldr	r5, [pc, #48]	; (1fec0 <metal_generic_dev_open+0x3c>)
   1fe8e:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1fe92:	42ac      	cmp	r4, r5
   1fe94:	d103      	bne.n	1fe9e <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1fe96:	f06f 0012 	mvn.w	r0, #18
   1fe9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1fe9e:	4631      	mov	r1, r6
   1fea0:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   1fea4:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1fea8:	f7e9 fa50 	bl	934c <strcmp>
   1feac:	b930      	cbnz	r0, 1febc <metal_generic_dev_open+0x38>
			*device = dev;
   1feae:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   1feb2:	4640      	mov	r0, r8
}
   1feb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1feb8:	f00a bf15 	b.w	2ace6 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1febc:	6824      	ldr	r4, [r4, #0]
   1febe:	e7e8      	b.n	1fe92 <metal_generic_dev_open+0xe>
   1fec0:	20021a90 	.word	0x20021a90

0001fec4 <metal_bus_unregister>:
{
   1fec4:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1fec6:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1feca:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1fecc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   1fece:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1fed2:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1fed4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1fed8:	6843      	ldr	r3, [r0, #4]
{
   1feda:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   1fedc:	b103      	cbz	r3, 1fee0 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   1fede:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   1fee0:	4b05      	ldr	r3, [pc, #20]	; (1fef8 <metal_bus_unregister+0x34>)
   1fee2:	781a      	ldrb	r2, [r3, #0]
   1fee4:	2a06      	cmp	r2, #6
   1fee6:	d905      	bls.n	1fef4 <metal_bus_unregister+0x30>
   1fee8:	685b      	ldr	r3, [r3, #4]
   1feea:	b11b      	cbz	r3, 1fef4 <metal_bus_unregister+0x30>
   1feec:	2007      	movs	r0, #7
   1feee:	6822      	ldr	r2, [r4, #0]
   1fef0:	4902      	ldr	r1, [pc, #8]	; (1fefc <metal_bus_unregister+0x38>)
   1fef2:	4798      	blx	r3
}
   1fef4:	2000      	movs	r0, #0
   1fef6:	bd10      	pop	{r4, pc}
   1fef8:	20021a90 	.word	0x20021a90
   1fefc:	0003291d 	.word	0x0003291d

0001ff00 <metal_bus_find>:
{
   1ff00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff04:	4607      	mov	r7, r0
   1ff06:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1ff08:	4e0b      	ldr	r6, [pc, #44]	; (1ff38 <metal_bus_find+0x38>)
   1ff0a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1ff0e:	42b4      	cmp	r4, r6
   1ff10:	d102      	bne.n	1ff18 <metal_bus_find+0x18>
	return -ENOENT;
   1ff12:	f06f 0001 	mvn.w	r0, #1
   1ff16:	e00a      	b.n	1ff2e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1ff18:	4639      	mov	r1, r7
   1ff1a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1ff1e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1ff22:	f7e9 fa13 	bl	934c <strcmp>
   1ff26:	b920      	cbnz	r0, 1ff32 <metal_bus_find+0x32>
   1ff28:	b11d      	cbz	r5, 1ff32 <metal_bus_find+0x32>
			*result = bus;
   1ff2a:	f8c5 8000 	str.w	r8, [r5]
}
   1ff2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1ff32:	6824      	ldr	r4, [r4, #0]
   1ff34:	e7eb      	b.n	1ff0e <metal_bus_find+0xe>
   1ff36:	bf00      	nop
   1ff38:	20021a90 	.word	0x20021a90

0001ff3c <metal_bus_register>:
{
   1ff3c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1ff3e:	4604      	mov	r4, r0
   1ff40:	b910      	cbnz	r0, 1ff48 <metal_bus_register+0xc>
		return -EINVAL;
   1ff42:	f06f 0015 	mvn.w	r0, #21
}
   1ff46:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1ff48:	6800      	ldr	r0, [r0, #0]
   1ff4a:	2800      	cmp	r0, #0
   1ff4c:	d0f9      	beq.n	1ff42 <metal_bus_register+0x6>
   1ff4e:	f7e9 fa07 	bl	9360 <strlen>
   1ff52:	2800      	cmp	r0, #0
   1ff54:	d0f5      	beq.n	1ff42 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1ff56:	2100      	movs	r1, #0
   1ff58:	6820      	ldr	r0, [r4, #0]
   1ff5a:	f7ff ffd1 	bl	1ff00 <metal_bus_find>
   1ff5e:	b1c8      	cbz	r0, 1ff94 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   1ff60:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   1ff64:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1ff68:	4b0c      	ldr	r3, [pc, #48]	; (1ff9c <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1ff6a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1ff6e:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1ff70:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   1ff74:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1ff76:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1ff78:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1ff7a:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1ff7c:	781a      	ldrb	r2, [r3, #0]
   1ff7e:	2a06      	cmp	r2, #6
   1ff80:	d901      	bls.n	1ff86 <metal_bus_register+0x4a>
   1ff82:	685b      	ldr	r3, [r3, #4]
   1ff84:	b90b      	cbnz	r3, 1ff8a <metal_bus_register+0x4e>
	return 0;
   1ff86:	2000      	movs	r0, #0
   1ff88:	e7dd      	b.n	1ff46 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1ff8a:	2007      	movs	r0, #7
   1ff8c:	6822      	ldr	r2, [r4, #0]
   1ff8e:	4904      	ldr	r1, [pc, #16]	; (1ffa0 <metal_bus_register+0x64>)
   1ff90:	4798      	blx	r3
   1ff92:	e7f8      	b.n	1ff86 <metal_bus_register+0x4a>
		return -EEXIST;
   1ff94:	f06f 0010 	mvn.w	r0, #16
   1ff98:	e7d5      	b.n	1ff46 <metal_bus_register+0xa>
   1ff9a:	bf00      	nop
   1ff9c:	20021a90 	.word	0x20021a90
   1ffa0:	0003291f 	.word	0x0003291f

0001ffa4 <metal_device_close>:
	metal_assert(device && device->bus);
   1ffa4:	4601      	mov	r1, r0
{
   1ffa6:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   1ffa8:	b108      	cbz	r0, 1ffae <metal_device_close+0xa>
   1ffaa:	6840      	ldr	r0, [r0, #4]
   1ffac:	b948      	cbnz	r0, 1ffc2 <metal_device_close+0x1e>
   1ffae:	4908      	ldr	r1, [pc, #32]	; (1ffd0 <metal_device_close+0x2c>)
   1ffb0:	4808      	ldr	r0, [pc, #32]	; (1ffd4 <metal_device_close+0x30>)
   1ffb2:	2351      	movs	r3, #81	; 0x51
   1ffb4:	4a08      	ldr	r2, [pc, #32]	; (1ffd8 <metal_device_close+0x34>)
   1ffb6:	f006 fcb4 	bl	26922 <assert_print>
   1ffba:	2151      	movs	r1, #81	; 0x51
   1ffbc:	4806      	ldr	r0, [pc, #24]	; (1ffd8 <metal_device_close+0x34>)
   1ffbe:	f006 fca9 	bl	26914 <assert_post_action>
	if (device->bus->ops.dev_close)
   1ffc2:	68c3      	ldr	r3, [r0, #12]
   1ffc4:	b113      	cbz	r3, 1ffcc <metal_device_close+0x28>
}
   1ffc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   1ffca:	4718      	bx	r3
}
   1ffcc:	bd10      	pop	{r4, pc}
   1ffce:	bf00      	nop
   1ffd0:	00032969 	.word	0x00032969
   1ffd4:	0002d881 	.word	0x0002d881
   1ffd8:	00032932 	.word	0x00032932

0001ffdc <metal_register_generic_device>:
{
   1ffdc:	b510      	push	{r4, lr}
   1ffde:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1ffe0:	6800      	ldr	r0, [r0, #0]
   1ffe2:	b910      	cbnz	r0, 1ffea <metal_register_generic_device+0xe>
		return -EINVAL;
   1ffe4:	f06f 0015 	mvn.w	r0, #21
}
   1ffe8:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1ffea:	f7e9 f9b9 	bl	9360 <strlen>
   1ffee:	2800      	cmp	r0, #0
   1fff0:	d0f8      	beq.n	1ffe4 <metal_register_generic_device+0x8>
   1fff2:	68a3      	ldr	r3, [r4, #8]
   1fff4:	2b01      	cmp	r3, #1
   1fff6:	d8f5      	bhi.n	1ffe4 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   1fff8:	4b06      	ldr	r3, [pc, #24]	; (20014 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1fffa:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1fffe:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   20000:	4b05      	ldr	r3, [pc, #20]	; (20018 <metal_register_generic_device+0x3c>)
   20002:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   20004:	f103 0018 	add.w	r0, r3, #24
   20008:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   2000a:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   2000c:	61d9      	str	r1, [r3, #28]
	return 0;
   2000e:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   20010:	6011      	str	r1, [r2, #0]
}
   20012:	e7e9      	b.n	1ffe8 <metal_register_generic_device+0xc>
   20014:	20008884 	.word	0x20008884
   20018:	20021a90 	.word	0x20021a90

0002001c <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   2001c:	4b0e      	ldr	r3, [pc, #56]	; (20058 <metal_init+0x3c>)
{
   2001e:	b510      	push	{r4, lr}
   20020:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   20022:	2220      	movs	r2, #32
   20024:	2100      	movs	r1, #0
   20026:	4618      	mov	r0, r3
   20028:	f00b fcba 	bl	2b9a0 <memset>

	_metal.common.log_handler   = params->log_handler;
   2002c:	6822      	ldr	r2, [r4, #0]
   2002e:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   20030:	4602      	mov	r2, r0
   20032:	7921      	ldrb	r1, [r4, #4]
   20034:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   20038:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   2003c:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   20040:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   20044:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   20048:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   2004c:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   2004e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   20052:	f000 b80f 	b.w	20074 <metal_sys_init>
   20056:	bf00      	nop
   20058:	20021a90 	.word	0x20021a90

0002005c <metal_finish>:

void metal_finish(void)
{
   2005c:	b508      	push	{r3, lr}
	metal_sys_finish();
   2005e:	f000 f811 	bl	20084 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   20062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   20066:	2220      	movs	r2, #32
   20068:	2100      	movs	r1, #0
   2006a:	4801      	ldr	r0, [pc, #4]	; (20070 <metal_finish+0x14>)
   2006c:	f00b bc98 	b.w	2b9a0 <memset>
   20070:	20021a90 	.word	0x20021a90

00020074 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   20074:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   20076:	4802      	ldr	r0, [pc, #8]	; (20080 <metal_sys_init+0xc>)
   20078:	f7ff ff60 	bl	1ff3c <metal_bus_register>
	return 0;
}
   2007c:	2000      	movs	r0, #0
   2007e:	bd08      	pop	{r3, pc}
   20080:	20008884 	.word	0x20008884

00020084 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   20084:	4801      	ldr	r0, [pc, #4]	; (2008c <metal_sys_finish+0x8>)
   20086:	f7ff bf1d 	b.w	1fec4 <metal_bus_unregister>
   2008a:	bf00      	nop
   2008c:	20008884 	.word	0x20008884

00020090 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   20090:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   20092:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   20094:	2b06      	cmp	r3, #6
{
   20096:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   20098:	bf88      	it	hi
   2009a:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   2009c:	4b09      	ldr	r3, [pc, #36]	; (200c4 <metal_zephyr_log_handler+0x34>)
{
   2009e:	ac05      	add	r4, sp, #20
   200a0:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   200a4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   200a8:	4807      	ldr	r0, [pc, #28]	; (200c8 <metal_zephyr_log_handler+0x38>)
   200aa:	f006 fa78 	bl	2659e <printk>

	va_start(args, format);
	vprintk(format, args);
   200ae:	4621      	mov	r1, r4
   200b0:	4628      	mov	r0, r5
	va_start(args, format);
   200b2:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   200b4:	f7ec faca 	bl	c64c <vprintk>
	va_end(args);
}
   200b8:	b002      	add	sp, #8
   200ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   200be:	b003      	add	sp, #12
   200c0:	4770      	bx	lr
   200c2:	bf00      	nop
   200c4:	0002d73c 	.word	0x0002d73c
   200c8:	0002da09 	.word	0x0002da09

000200cc <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   200cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200d0:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   200d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   200d4:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   200d6:	4293      	cmp	r3, r2
{
   200d8:	4617      	mov	r7, r2
   200da:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   200dc:	d341      	bcc.n	20162 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   200de:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   200e0:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   200e4:	42bd      	cmp	r5, r7
   200e6:	d103      	bne.n	200f0 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   200e8:	2000      	movs	r0, #0
}
   200ea:	b007      	add	sp, #28
   200ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   200f0:	fb0b f805 	mul.w	r8, fp, r5
   200f4:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   200f8:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   200fa:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   200fe:	1d23      	adds	r3, r4, #4
   20100:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   20102:	b9ca      	cbnz	r2, 20138 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   20104:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   20106:	6861      	ldr	r1, [r4, #4]
   20108:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   2010a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   2010e:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   20110:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   20112:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   20116:	1e5c      	subs	r4, r3, #1
   20118:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   2011c:	425b      	negs	r3, r3
   2011e:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   20122:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   20124:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   20128:	6884      	ldr	r4, [r0, #8]
   2012a:	3306      	adds	r3, #6
   2012c:	42a1      	cmp	r1, r4
   2012e:	bf28      	it	cs
   20130:	f04f 31ff 	movcs.w	r1, #4294967295
   20134:	f00a fda3 	bl	2ac7e <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   20138:	f859 3008 	ldr.w	r3, [r9, r8]
   2013c:	4630      	mov	r0, r6
   2013e:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   20140:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   20142:	b2a9      	uxth	r1, r5
   20144:	6a1b      	ldr	r3, [r3, #32]
   20146:	9301      	str	r3, [sp, #4]
   20148:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2014a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2014e:	9300      	str	r3, [sp, #0]
   20150:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   20154:	9b05      	ldr	r3, [sp, #20]
   20156:	f00a fe0b 	bl	2ad70 <virtqueue_create>
		if (ret)
   2015a:	2800      	cmp	r0, #0
   2015c:	d1c5      	bne.n	200ea <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   2015e:	3501      	adds	r5, #1
   20160:	e7c0      	b.n	200e4 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   20162:	4801      	ldr	r0, [pc, #4]	; (20168 <virtio_create_virtqueues+0x9c>)
   20164:	e7c1      	b.n	200ea <virtio_create_virtqueues+0x1e>
   20166:	bf00      	nop
   20168:	fffff440 	.word	0xfffff440

0002016c <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   2016c:	b510      	push	{r4, lr}
	if (vq) {
   2016e:	4604      	mov	r4, r0
   20170:	b190      	cbz	r0, 20198 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   20172:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   20174:	8943      	ldrh	r3, [r0, #10]
   20176:	429a      	cmp	r2, r3
   20178:	d009      	beq.n	2018e <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   2017a:	4b08      	ldr	r3, [pc, #32]	; (2019c <virtqueue_free+0x30>)
   2017c:	781a      	ldrb	r2, [r3, #0]
   2017e:	2a03      	cmp	r2, #3
   20180:	d905      	bls.n	2018e <virtqueue_free+0x22>
   20182:	685b      	ldr	r3, [r3, #4]
   20184:	b11b      	cbz	r3, 2018e <virtqueue_free+0x22>
   20186:	6842      	ldr	r2, [r0, #4]
   20188:	4905      	ldr	r1, [pc, #20]	; (201a0 <virtqueue_free+0x34>)
   2018a:	2004      	movs	r0, #4
   2018c:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   2018e:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   20190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20194:	f00b bba0 	b.w	2b8d8 <k_free>
   20198:	bd10      	pop	{r4, pc}
   2019a:	bf00      	nop
   2019c:	20021a90 	.word	0x20021a90
   201a0:	00032a17 	.word	0x00032a17

000201a4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   201a4:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   201a6:	8944      	ldrh	r4, [r0, #10]
   201a8:	428c      	cmp	r4, r1
   201aa:	d912      	bls.n	201d2 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   201ac:	6a03      	ldr	r3, [r0, #32]
   201ae:	3c01      	subs	r4, #1
   201b0:	885d      	ldrh	r5, [r3, #2]
   201b2:	402c      	ands	r4, r5
   201b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   201b8:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   201ba:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   201bc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   201c0:	6a02      	ldr	r2, [r0, #32]
   201c2:	8853      	ldrh	r3, [r2, #2]
   201c4:	3301      	adds	r3, #1
   201c6:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   201c8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   201ca:	3301      	adds	r3, #1
   201cc:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   201ce:	2000      	movs	r0, #0
}
   201d0:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   201d2:	4801      	ldr	r0, [pc, #4]	; (201d8 <virtqueue_add_consumed_buffer+0x34>)
   201d4:	e7fc      	b.n	201d0 <virtqueue_add_consumed_buffer+0x2c>
   201d6:	bf00      	nop
   201d8:	fffff441 	.word	0xfffff441

000201dc <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   201dc:	b470      	push	{r4, r5, r6}
   201de:	9e03      	ldr	r6, [sp, #12]
   201e0:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   201e2:	b158      	cbz	r0, 201fc <rpmsg_send_offchannel_raw+0x20>
   201e4:	6a00      	ldr	r0, [r0, #32]
   201e6:	b148      	cbz	r0, 201fc <rpmsg_send_offchannel_raw+0x20>
   201e8:	b143      	cbz	r3, 201fc <rpmsg_send_offchannel_raw+0x20>
   201ea:	3401      	adds	r4, #1
   201ec:	d006      	beq.n	201fc <rpmsg_send_offchannel_raw+0x20>
   201ee:	2e00      	cmp	r6, #0
   201f0:	db04      	blt.n	201fc <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   201f2:	6f84      	ldr	r4, [r0, #120]	; 0x78
   201f4:	b114      	cbz	r4, 201fc <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   201f6:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   201f8:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   201fa:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   201fc:	4801      	ldr	r0, [pc, #4]	; (20204 <rpmsg_send_offchannel_raw+0x28>)
}
   201fe:	bc70      	pop	{r4, r5, r6}
   20200:	4770      	bx	lr
   20202:	bf00      	nop
   20204:	fffff82d 	.word	0xfffff82d

00020208 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   20208:	b470      	push	{r4, r5, r6}
   2020a:	9e03      	ldr	r6, [sp, #12]
   2020c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   2020e:	b160      	cbz	r0, 2022a <rpmsg_send_offchannel_nocopy+0x22>
   20210:	6a00      	ldr	r0, [r0, #32]
   20212:	b150      	cbz	r0, 2022a <rpmsg_send_offchannel_nocopy+0x22>
   20214:	b14b      	cbz	r3, 2022a <rpmsg_send_offchannel_nocopy+0x22>
   20216:	3401      	adds	r4, #1
   20218:	d007      	beq.n	2022a <rpmsg_send_offchannel_nocopy+0x22>
   2021a:	2e00      	cmp	r6, #0
   2021c:	db05      	blt.n	2022a <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   2021e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   20222:	b114      	cbz	r4, 2022a <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   20224:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   20226:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   20228:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   2022a:	4801      	ldr	r0, [pc, #4]	; (20230 <rpmsg_send_offchannel_nocopy+0x28>)
}
   2022c:	bc70      	pop	{r4, r5, r6}
   2022e:	4770      	bx	lr
   20230:	fffff82d 	.word	0xfffff82d

00020234 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   20234:	b570      	push	{r4, r5, r6, lr}
   20236:	460c      	mov	r4, r1
   20238:	4611      	mov	r1, r2
   2023a:	4605      	mov	r5, r0
   2023c:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2023e:	4b0c      	ldr	r3, [pc, #48]	; (20270 <rpmsg_register_endpoint+0x3c>)
   20240:	2220      	movs	r2, #32
   20242:	2900      	cmp	r1, #0
   20244:	bf08      	it	eq
   20246:	4619      	moveq	r1, r3
   20248:	4620      	mov	r0, r4
   2024a:	f00b fceb 	bl	2bc24 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   2024e:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   20250:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   20252:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   20254:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   20256:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   20258:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   2025a:	9b06      	ldr	r3, [sp, #24]
   2025c:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   2025e:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   20260:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   20264:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   20268:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   2026a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2026c:	6013      	str	r3, [r2, #0]
}
   2026e:	bd70      	pop	{r4, r5, r6, pc}
   20270:	00031893 	.word	0x00031893

00020274 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   20274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   20278:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   2027c:	460d      	mov	r5, r1
   2027e:	4692      	mov	sl, r2
   20280:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   20282:	4606      	mov	r6, r0
   20284:	2800      	cmp	r0, #0
   20286:	d06c      	beq.n	20362 <rpmsg_create_ept+0xee>
   20288:	2900      	cmp	r1, #0
   2028a:	d06a      	beq.n	20362 <rpmsg_create_ept+0xee>
   2028c:	f1b9 0f00 	cmp.w	r9, #0
   20290:	d067      	beq.n	20362 <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   20292:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   20296:	4640      	mov	r0, r8
   20298:	f00a fed3 	bl	2b042 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   2029c:	1c78      	adds	r0, r7, #1
   2029e:	d140      	bne.n	20322 <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   202a0:	6cac      	ldr	r4, [r5, #72]	; 0x48
   202a2:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   202a6:	f014 0401 	ands.w	r4, r4, #1
   202aa:	d00b      	beq.n	202c4 <rpmsg_create_ept+0x50>
	for (bit = start;
   202ac:	2400      	movs	r4, #0
	     bit++)
   202ae:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   202b0:	2c80      	cmp	r4, #128	; 0x80
   202b2:	d054      	beq.n	2035e <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   202b4:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   202b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   202ba:	f004 011f 	and.w	r1, r4, #31
   202be:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   202c0:	07d1      	lsls	r1, r2, #31
   202c2:	d4f4      	bmi.n	202ae <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   202c4:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   202c6:	0960      	lsrs	r0, r4, #5
   202c8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   202cc:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   202d0:	f004 041f 	and.w	r4, r4, #31
   202d4:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   202d6:	430a      	orrs	r2, r1
   202d8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   202dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   202de:	4652      	mov	r2, sl
   202e0:	e9cd 9301 	strd	r9, r3, [sp, #4]
   202e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   202e6:	4631      	mov	r1, r6
   202e8:	9300      	str	r3, [sp, #0]
   202ea:	4628      	mov	r0, r5
   202ec:	463b      	mov	r3, r7
   202ee:	f7ff ffa1 	bl	20234 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   202f2:	4640      	mov	r0, r8
   202f4:	f001 faec 	bl	218d0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   202f8:	7834      	ldrb	r4, [r6, #0]
   202fa:	b174      	cbz	r4, 2031a <rpmsg_create_ept+0xa6>
   202fc:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   20300:	b15c      	cbz	r4, 2031a <rpmsg_create_ept+0xa6>
   20302:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   20304:	3301      	adds	r3, #1
   20306:	d12e      	bne.n	20366 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   20308:	2100      	movs	r1, #0
   2030a:	4630      	mov	r0, r6
   2030c:	f00a fec8 	bl	2b0a0 <rpmsg_send_ns_message>

	if (status)
   20310:	4604      	mov	r4, r0
   20312:	b110      	cbz	r0, 2031a <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   20314:	4630      	mov	r0, r6
   20316:	f00a fe9a 	bl	2b04e <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   2031a:	4620      	mov	r0, r4
   2031c:	b004      	add	sp, #16
   2031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   20322:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   20326:	d3d9      	bcc.n	202dc <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   20328:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   2032c:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   2032e:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   20332:	d80f      	bhi.n	20354 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   20334:	0958      	lsrs	r0, r3, #5
   20336:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   2033a:	f003 031f 	and.w	r3, r3, #31
   2033e:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   20342:	07d2      	lsls	r2, r2, #31
   20344:	d40b      	bmi.n	2035e <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   20346:	2201      	movs	r2, #1
   20348:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   2034c:	4323      	orrs	r3, r4
   2034e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   20352:	e7c3      	b.n	202dc <rpmsg_create_ept+0x68>
   20354:	4c05      	ldr	r4, [pc, #20]	; (2036c <rpmsg_create_ept+0xf8>)
   20356:	4640      	mov	r0, r8
   20358:	f001 faba 	bl	218d0 <z_impl_k_sem_give>
}
   2035c:	e7dd      	b.n	2031a <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   2035e:	4c04      	ldr	r4, [pc, #16]	; (20370 <rpmsg_create_ept+0xfc>)
   20360:	e7f9      	b.n	20356 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   20362:	4c02      	ldr	r4, [pc, #8]	; (2036c <rpmsg_create_ept+0xf8>)
   20364:	e7d9      	b.n	2031a <rpmsg_create_ept+0xa6>
   20366:	2400      	movs	r4, #0
   20368:	e7d7      	b.n	2031a <rpmsg_create_ept+0xa6>
   2036a:	bf00      	nop
   2036c:	fffff82d 	.word	0xfffff82d
   20370:	fffff829 	.word	0xfffff829

00020374 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   20374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   20378:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   2037c:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   20380:	2300      	movs	r3, #0
{
   20382:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   20384:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   20386:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   2038a:	2310      	movs	r3, #16
	rp_hdr.src = src;
   2038c:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   20390:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   20392:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   20394:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   20398:	f8ad 501c 	strh.w	r5, [sp, #28]
   2039c:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2039e:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   203a0:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   203a4:	42b1      	cmp	r1, r6
   203a6:	bf28      	it	cs
   203a8:	f04f 31ff 	movcs.w	r1, #4294967295
   203ac:	eb0d 0203 	add.w	r2, sp, r3
   203b0:	f00a fc2b 	bl	2ac0a <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   203b4:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   203b6:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   203b8:	d00b      	beq.n	203d2 <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   203ba:	4924      	ldr	r1, [pc, #144]	; (2044c <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   203bc:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   203c0:	4a23      	ldr	r2, [pc, #140]	; (20450 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   203c2:	4824      	ldr	r0, [pc, #144]	; (20454 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   203c4:	f006 faad 	bl	26922 <assert_print>
   203c8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   203cc:	4820      	ldr	r0, [pc, #128]	; (20450 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   203ce:	f006 faa1 	bl	26914 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   203d2:	f104 0658 	add.w	r6, r4, #88	; 0x58
   203d6:	4630      	mov	r0, r6
   203d8:	f00a fef2 	bl	2b1c0 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   203dc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   203e0:	699b      	ldr	r3, [r3, #24]
   203e2:	b9d3      	cbnz	r3, 2041a <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   203e4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   203e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   203ec:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   203f0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   203f2:	b9cb      	cbnz	r3, 20428 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   203f4:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   203f8:	f8cd 8000 	str.w	r8, [sp]
   203fc:	2201      	movs	r2, #1
   203fe:	a902      	add	r1, sp, #8
   20400:	f00a fce3 	bl	2adca <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   20404:	b1b0      	cbz	r0, 20434 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   20406:	4914      	ldr	r1, [pc, #80]	; (20458 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   20408:	f240 13b9 	movw	r3, #441	; 0x1b9
   2040c:	4a10      	ldr	r2, [pc, #64]	; (20450 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   2040e:	4811      	ldr	r0, [pc, #68]	; (20454 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   20410:	f006 fa87 	bl	26922 <assert_print>
   20414:	f240 11b9 	movw	r1, #441	; 0x1b9
   20418:	e7d8      	b.n	203cc <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   2041a:	4639      	mov	r1, r7
   2041c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   20420:	f00a fd69 	bl	2aef6 <virtqueue_get_buffer_length>
   20424:	4602      	mov	r2, r0
   20426:	e7df      	b.n	203e8 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   20428:	2b01      	cmp	r3, #1
   2042a:	d103      	bne.n	20434 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   2042c:	4639      	mov	r1, r7
   2042e:	f7ff feb9 	bl	201a4 <virtqueue_add_consumed_buffer>
   20432:	e7e7      	b.n	20404 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   20434:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   20438:	f00a fdb4 	bl	2afa4 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   2043c:	4630      	mov	r0, r6
   2043e:	f00a febd 	bl	2b1bc <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   20442:	4628      	mov	r0, r5
   20444:	b008      	add	sp, #32
   20446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2044a:	bf00      	nop
   2044c:	00032a7c 	.word	0x00032a7c
   20450:	00032a39 	.word	0x00032a39
   20454:	0002d881 	.word	0x0002d881
   20458:	00032a95 	.word	0x00032a95

0002045c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   2045c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   20460:	6803      	ldr	r3, [r0, #0]
   20462:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   20464:	f107 0658 	add.w	r6, r7, #88	; 0x58
   20468:	4630      	mov	r0, r6
   2046a:	f00a fea9 	bl	2b1c0 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   2046e:	4638      	mov	r0, r7
   20470:	f10d 020a 	add.w	r2, sp, #10
   20474:	a903      	add	r1, sp, #12
   20476:	f00a ff16 	bl	2b2a6 <rpmsg_virtio_get_rx_buffer>
   2047a:	4604      	mov	r4, r0
   2047c:	4630      	mov	r0, r6
   2047e:	f00a fe9d 	bl	2b1bc <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   20482:	2c00      	cmp	r4, #0
   20484:	d04f      	beq.n	20526 <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   20486:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2048a:	4630      	mov	r0, r6
   2048c:	60a3      	str	r3, [r4, #8]
   2048e:	f00a fe97 	bl	2b1c0 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   20492:	f04f 33ff 	mov.w	r3, #4294967295
   20496:	2100      	movs	r1, #0
   20498:	4638      	mov	r0, r7
   2049a:	6862      	ldr	r2, [r4, #4]
   2049c:	f00a fe34 	bl	2b108 <rpmsg_get_endpoint>
   204a0:	4605      	mov	r5, r0
   204a2:	4630      	mov	r0, r6
   204a4:	f00a fe8a 	bl	2b1bc <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   204a8:	b1ed      	cbz	r5, 204e6 <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   204aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   204ac:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   204ae:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   204b0:	bf08      	it	eq
   204b2:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   204b4:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   204b6:	bf08      	it	eq
   204b8:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   204ba:	6823      	ldr	r3, [r4, #0]
   204bc:	89a2      	ldrh	r2, [r4, #12]
   204be:	9100      	str	r1, [sp, #0]
   204c0:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   204c4:	f104 0110 	add.w	r1, r4, #16
   204c8:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   204ca:	2800      	cmp	r0, #0
   204cc:	da0b      	bge.n	204e6 <rpmsg_virtio_rx_callback+0x8a>
   204ce:	4917      	ldr	r1, [pc, #92]	; (2052c <rpmsg_virtio_rx_callback+0xd0>)
   204d0:	4817      	ldr	r0, [pc, #92]	; (20530 <rpmsg_virtio_rx_callback+0xd4>)
   204d2:	f240 2343 	movw	r3, #579	; 0x243
   204d6:	4a17      	ldr	r2, [pc, #92]	; (20534 <rpmsg_virtio_rx_callback+0xd8>)
   204d8:	f006 fa23 	bl	26922 <assert_print>
   204dc:	f240 2143 	movw	r1, #579	; 0x243
   204e0:	4814      	ldr	r0, [pc, #80]	; (20534 <rpmsg_virtio_rx_callback+0xd8>)
   204e2:	f006 fa17 	bl	26914 <assert_post_action>
   204e6:	4630      	mov	r0, r6
   204e8:	f00a fe6a 	bl	2b1c0 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   204ec:	68a3      	ldr	r3, [r4, #8]
   204ee:	2b00      	cmp	r3, #0
   204f0:	db06      	blt.n	20500 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   204f2:	4621      	mov	r1, r4
   204f4:	4638      	mov	r0, r7
   204f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   204fa:	9a03      	ldr	r2, [sp, #12]
   204fc:	f00a feea 	bl	2b2d4 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   20500:	4638      	mov	r0, r7
   20502:	f10d 020a 	add.w	r2, sp, #10
   20506:	a903      	add	r1, sp, #12
   20508:	f00a fecd 	bl	2b2a6 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   2050c:	4604      	mov	r4, r0
   2050e:	b118      	cbz	r0, 20518 <rpmsg_virtio_rx_callback+0xbc>
   20510:	4630      	mov	r0, r6
   20512:	f00a fe53 	bl	2b1bc <k_sem_give>
	while (rp_hdr) {
   20516:	e7b6      	b.n	20486 <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   20518:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   2051c:	f00a fd42 	bl	2afa4 <virtqueue_kick>
   20520:	4630      	mov	r0, r6
   20522:	f00a fe4b 	bl	2b1bc <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   20526:	b004      	add	sp, #16
   20528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2052c:	00032aa1 	.word	0x00032aa1
   20530:	0002d881 	.word	0x0002d881
   20534:	00032a39 	.word	0x00032a39

00020538 <rpmsg_virtio_send_offchannel_raw>:
{
   20538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2053c:	b085      	sub	sp, #20
   2053e:	460f      	mov	r7, r1
   20540:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   20542:	a903      	add	r1, sp, #12
   20544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   20546:	4606      	mov	r6, r0
   20548:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   2054a:	f00a ff0e 	bl	2b36a <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   2054e:	4604      	mov	r4, r0
   20550:	b350      	cbz	r0, 205a8 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   20552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20554:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   20556:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   2055a:	429d      	cmp	r5, r3
   2055c:	bfa8      	it	ge
   2055e:	461d      	movge	r5, r3
   20560:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   20562:	f8d0 c008 	ldr.w	ip, [r0, #8]
   20566:	1a61      	subs	r1, r4, r1
   20568:	4561      	cmp	r1, ip
   2056a:	bf28      	it	cs
   2056c:	f04f 31ff 	movcs.w	r1, #4294967295
   20570:	462b      	mov	r3, r5
   20572:	464a      	mov	r2, r9
   20574:	f00a fb49 	bl	2ac0a <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   20578:	4285      	cmp	r5, r0
   2057a:	d00b      	beq.n	20594 <rpmsg_virtio_send_offchannel_raw+0x5c>
   2057c:	490b      	ldr	r1, [pc, #44]	; (205ac <rpmsg_virtio_send_offchannel_raw+0x74>)
   2057e:	480c      	ldr	r0, [pc, #48]	; (205b0 <rpmsg_virtio_send_offchannel_raw+0x78>)
   20580:	f240 2303 	movw	r3, #515	; 0x203
   20584:	4a0b      	ldr	r2, [pc, #44]	; (205b4 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   20586:	f006 f9cc 	bl	26922 <assert_print>
   2058a:	f240 2103 	movw	r1, #515	; 0x203
   2058e:	4809      	ldr	r0, [pc, #36]	; (205b4 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   20590:	f006 f9c0 	bl	26914 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   20594:	4623      	mov	r3, r4
   20596:	4642      	mov	r2, r8
   20598:	4639      	mov	r1, r7
   2059a:	4630      	mov	r0, r6
   2059c:	9500      	str	r5, [sp, #0]
   2059e:	f7ff fee9 	bl	20374 <rpmsg_virtio_send_offchannel_nocopy>
}
   205a2:	b005      	add	sp, #20
   205a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   205a8:	4803      	ldr	r0, [pc, #12]	; (205b8 <rpmsg_virtio_send_offchannel_raw+0x80>)
   205aa:	e7fa      	b.n	205a2 <rpmsg_virtio_send_offchannel_raw+0x6a>
   205ac:	00032aad 	.word	0x00032aad
   205b0:	0002d881 	.word	0x0002d881
   205b4:	00032a39 	.word	0x00032a39
   205b8:	fffff82e 	.word	0xfffff82e

000205bc <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   205bc:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   205be:	4604      	mov	r4, r0
   205c0:	b1e0      	cbz	r0, 205fc <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   205c2:	f100 0558 	add.w	r5, r0, #88	; 0x58
   205c6:	4628      	mov	r0, r5
   205c8:	f00a fdfa 	bl	2b1c0 <__metal_mutex_acquire>
   205cc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   205d0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   205d2:	b953      	cbnz	r3, 205ea <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   205d4:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   205d8:	3c10      	subs	r4, #16
	if (length <= 0) {
   205da:	2c00      	cmp	r4, #0
   205dc:	dc00      	bgt.n	205e0 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   205de:	4c08      	ldr	r4, [pc, #32]	; (20600 <rpmsg_virtio_get_buffer_size+0x44>)
   205e0:	4628      	mov	r0, r5
   205e2:	f00a fdeb 	bl	2b1bc <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   205e6:	4620      	mov	r0, r4
   205e8:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   205ea:	2b01      	cmp	r3, #1
   205ec:	d1f7      	bne.n	205de <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   205ee:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   205f2:	f00a fd0e 	bl	2b012 <virtqueue_get_desc_size>
   205f6:	f1a0 0410 	sub.w	r4, r0, #16
   205fa:	e7ee      	b.n	205da <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   205fc:	4c01      	ldr	r4, [pc, #4]	; (20604 <rpmsg_virtio_get_buffer_size+0x48>)
   205fe:	e7f2      	b.n	205e6 <rpmsg_virtio_get_buffer_size+0x2a>
   20600:	fffff82e 	.word	0xfffff82e
   20604:	fffff82d 	.word	0xfffff82d

00020608 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   20608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2060c:	b08a      	sub	sp, #40	; 0x28
   2060e:	460d      	mov	r5, r1
   20610:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   20614:	4690      	mov	r8, r2
   20616:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   20618:	4604      	mov	r4, r0
   2061a:	b920      	cbnz	r0, 20626 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   2061c:	4f81      	ldr	r7, [pc, #516]	; (20824 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   2061e:	4638      	mov	r0, r7
   20620:	b00a      	add	sp, #40	; 0x28
   20622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   20626:	2900      	cmp	r1, #0
   20628:	d0f8      	beq.n	2061c <rpmsg_init_vdev_with_config+0x14>
   2062a:	2b00      	cmp	r3, #0
   2062c:	d0f6      	beq.n	2061c <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   2062e:	2294      	movs	r2, #148	; 0x94
   20630:	2100      	movs	r1, #0
   20632:	f00b f9b5 	bl	2b9a0 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20636:	2201      	movs	r2, #1
   20638:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2063c:	4611      	mov	r1, r2
   2063e:	f00a ffb3 	bl	2b5a8 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   20642:	4b79      	ldr	r3, [pc, #484]	; (20828 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   20644:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   20648:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   2064c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   2064e:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   20650:	4b76      	ldr	r3, [pc, #472]	; (2082c <rpmsg_init_vdev_with_config+0x224>)
   20652:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   20654:	4b76      	ldr	r3, [pc, #472]	; (20830 <rpmsg_init_vdev_with_config+0x228>)
   20656:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   2065a:	4b76      	ldr	r3, [pc, #472]	; (20834 <rpmsg_init_vdev_with_config+0x22c>)
   2065c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   20660:	4b75      	ldr	r3, [pc, #468]	; (20838 <rpmsg_init_vdev_with_config+0x230>)
   20662:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   20666:	4b75      	ldr	r3, [pc, #468]	; (2083c <rpmsg_init_vdev_with_config+0x234>)
   20668:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   2066c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   20670:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   20674:	f1b8 0f00 	cmp.w	r8, #0
   20678:	d16e      	bne.n	20758 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   2067a:	2f00      	cmp	r7, #0
   2067c:	d0ce      	beq.n	2061c <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   2067e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   20682:	f104 0394 	add.w	r3, r4, #148	; 0x94
   20686:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   2068a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   2068e:	6a03      	ldr	r3, [r0, #32]
   20690:	689b      	ldr	r3, [r3, #8]
   20692:	4798      	blx	r3
   20694:	2300      	movs	r3, #0
   20696:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   20698:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   2069c:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   2069e:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   206a2:	f1b8 0f00 	cmp.w	r8, #0
   206a6:	d16d      	bne.n	20784 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   206a8:	7a3b      	ldrb	r3, [r7, #8]
   206aa:	2b00      	cmp	r3, #0
   206ac:	d068      	beq.n	20780 <rpmsg_init_vdev_with_config+0x178>
   206ae:	f109 030c 	add.w	r3, r9, #12
   206b2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   206b6:	f1b9 0f00 	cmp.w	r9, #0
   206ba:	d0af      	beq.n	2061c <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   206bc:	f8d9 2008 	ldr.w	r2, [r9, #8]
   206c0:	2a00      	cmp	r2, #0
   206c2:	f000 80ad 	beq.w	20820 <rpmsg_init_vdev_with_config+0x218>
   206c6:	689b      	ldr	r3, [r3, #8]
   206c8:	2b00      	cmp	r3, #0
   206ca:	f000 80a9 	beq.w	20820 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   206ce:	4b5c      	ldr	r3, [pc, #368]	; (20840 <rpmsg_init_vdev_with_config+0x238>)
   206d0:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   206d2:	4b5c      	ldr	r3, [pc, #368]	; (20844 <rpmsg_init_vdev_with_config+0x23c>)
   206d4:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   206d6:	4b5c      	ldr	r3, [pc, #368]	; (20848 <rpmsg_init_vdev_with_config+0x240>)
   206d8:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   206da:	4b5c      	ldr	r3, [pc, #368]	; (2084c <rpmsg_init_vdev_with_config+0x244>)
   206dc:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   206de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   206e0:	681b      	ldr	r3, [r3, #0]
   206e2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   206e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   206e8:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   206ea:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   206ee:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   206f2:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   206f6:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   206f8:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   206fc:	9300      	str	r3, [sp, #0]
   206fe:	2202      	movs	r2, #2
   20700:	2100      	movs	r1, #0
   20702:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   20706:	ab04      	add	r3, sp, #16
   20708:	f7ff fce0 	bl	200cc <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   2070c:	4607      	mov	r7, r0
   2070e:	2800      	cmp	r0, #0
   20710:	d185      	bne.n	2061e <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   20712:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   20716:	f00a fc17 	bl	2af48 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   2071a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2071c:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   2071e:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   20720:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20722:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   20724:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   20726:	f1b8 0f00 	cmp.w	r8, #0
   2072a:	d161      	bne.n	207f0 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   2072c:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   2072e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   20732:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   20734:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   20738:	895b      	ldrh	r3, [r3, #10]
   2073a:	4553      	cmp	r3, sl
   2073c:	d834      	bhi.n	207a8 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   2073e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   20742:	e9c4 4400 	strd	r4, r4, [r4]
   20746:	2b00      	cmp	r3, #0
   20748:	d159      	bne.n	207fe <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   2074a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   2074e:	2104      	movs	r1, #4
   20750:	6a03      	ldr	r3, [r0, #32]
   20752:	685b      	ldr	r3, [r3, #4]
   20754:	4798      	blx	r3
}
   20756:	e762      	b.n	2061e <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   20758:	f1b8 0f01 	cmp.w	r8, #1
   2075c:	d195      	bne.n	2068a <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   2075e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   20762:	6a03      	ldr	r3, [r0, #32]
   20764:	681b      	ldr	r3, [r3, #0]
   20766:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   20768:	0642      	lsls	r2, r0, #25
   2076a:	d506      	bpl.n	2077a <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   2076c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   20770:	2100      	movs	r1, #0
   20772:	6a03      	ldr	r3, [r0, #32]
   20774:	685b      	ldr	r3, [r3, #4]
   20776:	4798      	blx	r3
}
   20778:	e7f1      	b.n	2075e <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   2077a:	0743      	lsls	r3, r0, #29
   2077c:	d5ef      	bpl.n	2075e <rpmsg_init_vdev_with_config+0x156>
   2077e:	e784      	b.n	2068a <rpmsg_init_vdev_with_config+0x82>
   20780:	464b      	mov	r3, r9
   20782:	e796      	b.n	206b2 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   20784:	f1b8 0f01 	cmp.w	r8, #1
   20788:	d1b1      	bne.n	206ee <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   2078a:	4b2e      	ldr	r3, [pc, #184]	; (20844 <rpmsg_init_vdev_with_config+0x23c>)
   2078c:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   2078e:	4b2c      	ldr	r3, [pc, #176]	; (20840 <rpmsg_init_vdev_with_config+0x238>)
   20790:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   20792:	4b2e      	ldr	r3, [pc, #184]	; (2084c <rpmsg_init_vdev_with_config+0x244>)
   20794:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   20796:	4b2c      	ldr	r3, [pc, #176]	; (20848 <rpmsg_init_vdev_with_config+0x240>)
   20798:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   2079a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2079c:	699b      	ldr	r3, [r3, #24]
   2079e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   207a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   207a4:	681b      	ldr	r3, [r3, #0]
   207a6:	e7a0      	b.n	206ea <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   207a8:	4648      	mov	r0, r9
   207aa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   207ae:	f00a fdcd 	bl	2b34c <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   207b2:	4605      	mov	r5, r0
   207b4:	b1c8      	cbz	r0, 207ea <rpmsg_init_vdev_with_config+0x1e2>
   207b6:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   207b8:	9008      	str	r0, [sp, #32]
   207ba:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   207bc:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   207be:	2200      	movs	r2, #0
   207c0:	4281      	cmp	r1, r0
   207c2:	bf28      	it	cs
   207c4:	f04f 31ff 	movcs.w	r1, #4294967295
   207c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   207cc:	4630      	mov	r0, r6
   207ce:	f00a fa56 	bl	2ac7e <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   207d2:	9500      	str	r5, [sp, #0]
   207d4:	2301      	movs	r3, #1
   207d6:	2200      	movs	r2, #0
   207d8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   207dc:	a908      	add	r1, sp, #32
   207de:	f00a faf4 	bl	2adca <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   207e2:	b918      	cbnz	r0, 207ec <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   207e4:	f10a 0a01 	add.w	sl, sl, #1
   207e8:	e7a4      	b.n	20734 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   207ea:	4819      	ldr	r0, [pc, #100]	; (20850 <rpmsg_init_vdev_with_config+0x248>)
   207ec:	4607      	mov	r7, r0
   207ee:	e716      	b.n	2061e <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   207f0:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   207f4:	e9c4 4400 	strd	r4, r4, [r4]
   207f8:	2b00      	cmp	r3, #0
   207fa:	f43f af10 	beq.w	2061e <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   207fe:	2300      	movs	r3, #0
   20800:	9302      	str	r3, [sp, #8]
   20802:	4b14      	ldr	r3, [pc, #80]	; (20854 <rpmsg_init_vdev_with_config+0x24c>)
   20804:	4620      	mov	r0, r4
   20806:	9301      	str	r3, [sp, #4]
   20808:	2335      	movs	r3, #53	; 0x35
   2080a:	4a13      	ldr	r2, [pc, #76]	; (20858 <rpmsg_init_vdev_with_config+0x250>)
   2080c:	9300      	str	r3, [sp, #0]
   2080e:	f104 0108 	add.w	r1, r4, #8
   20812:	f7ff fd0f 	bl	20234 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   20816:	f1b8 0f00 	cmp.w	r8, #0
   2081a:	f47f af00 	bne.w	2061e <rpmsg_init_vdev_with_config+0x16>
   2081e:	e794      	b.n	2074a <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   20820:	4f0b      	ldr	r7, [pc, #44]	; (20850 <rpmsg_init_vdev_with_config+0x248>)
   20822:	e6fc      	b.n	2061e <rpmsg_init_vdev_with_config+0x16>
   20824:	fffff82d 	.word	0xfffff82d
   20828:	00020539 	.word	0x00020539
   2082c:	0002b1ad 	.word	0x0002b1ad
   20830:	0002b30d 	.word	0x0002b30d
   20834:	0002b36b 	.word	0x0002b36b
   20838:	00020375 	.word	0x00020375
   2083c:	0002b1cd 	.word	0x0002b1cd
   20840:	00032abb 	.word	0x00032abb
   20844:	00032ac1 	.word	0x00032ac1
   20848:	0002045d 	.word	0x0002045d
   2084c:	0002b1bb 	.word	0x0002b1bb
   20850:	fffff82e 	.word	0xfffff82e
   20854:	0002b20f 	.word	0x0002b20f
   20858:	00032ac7 	.word	0x00032ac7

0002085c <rpmsg_init_vdev>:
{
   2085c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2085e:	4605      	mov	r5, r0
   20860:	460e      	mov	r6, r1
   20862:	4617      	mov	r7, r2
   20864:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   20866:	4a07      	ldr	r2, [pc, #28]	; (20884 <rpmsg_init_vdev+0x28>)
   20868:	ac03      	add	r4, sp, #12
   2086a:	ca07      	ldmia	r2, {r0, r1, r2}
   2086c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   20870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20872:	4631      	mov	r1, r6
   20874:	9200      	str	r2, [sp, #0]
   20876:	4628      	mov	r0, r5
   20878:	463a      	mov	r2, r7
   2087a:	9401      	str	r4, [sp, #4]
   2087c:	f7ff fec4 	bl	20608 <rpmsg_init_vdev_with_config>
}
   20880:	b007      	add	sp, #28
   20882:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20884:	0002c9e8 	.word	0x0002c9e8

00020888 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20888:	2203      	movs	r2, #3
   2088a:	4b11      	ldr	r3, [pc, #68]	; (208d0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   2088c:	4911      	ldr	r1, [pc, #68]	; (208d4 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2088e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   20890:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20892:	4a11      	ldr	r2, [pc, #68]	; (208d8 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   20894:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20896:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   20898:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2089c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   2089e:	2200      	movs	r2, #0
   208a0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   208a2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   208a4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   208a6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   208a8:	490c      	ldr	r1, [pc, #48]	; (208dc <_DoInit+0x54>)
   208aa:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   208ac:	2110      	movs	r1, #16
   208ae:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   208b0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   208b2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   208b4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   208b6:	4a0a      	ldr	r2, [pc, #40]	; (208e0 <_DoInit+0x58>)
   208b8:	6812      	ldr	r2, [r2, #0]
   208ba:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   208be:	4a09      	ldr	r2, [pc, #36]	; (208e4 <_DoInit+0x5c>)
   208c0:	6810      	ldr	r0, [r2, #0]
   208c2:	8892      	ldrh	r2, [r2, #4]
   208c4:	6018      	str	r0, [r3, #0]
   208c6:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   208c8:	2220      	movs	r2, #32
   208ca:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   208cc:	4770      	bx	lr
   208ce:	bf00      	nop
   208d0:	20021ab0 	.word	0x20021ab0
   208d4:	00032aca 	.word	0x00032aca
   208d8:	200224ed 	.word	0x200224ed
   208dc:	200224dd 	.word	0x200224dd
   208e0:	00032ad3 	.word	0x00032ad3
   208e4:	00032ad7 	.word	0x00032ad7

000208e8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   208e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   208ec:	f04f 0b18 	mov.w	fp, #24
   208f0:	4f20      	ldr	r7, [pc, #128]	; (20974 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   208f2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   208f4:	fb0b 7200 	mla	r2, fp, r0, r7
   208f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   208fa:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   208fc:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   208fe:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20900:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20902:	d831      	bhi.n	20968 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   20904:	f8d2 a020 	ldr.w	sl, [r2, #32]
   20908:	ebaa 0905 	sub.w	r9, sl, r5
   2090c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   20910:	4294      	cmp	r4, r2
   20912:	d811      	bhi.n	20938 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20914:	2318      	movs	r3, #24
   20916:	fb06 3303 	mla	r3, r6, r3, r3
   2091a:	443b      	add	r3, r7
   2091c:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2091e:	4622      	mov	r2, r4
   20920:	4641      	mov	r1, r8
   20922:	4428      	add	r0, r5
   20924:	f00b f802 	bl	2b92c <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   20928:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2092a:	2318      	movs	r3, #24
      return 1;
   2092c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2092e:	fb03 7306 	mla	r3, r3, r6, r7
   20932:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   20934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   20938:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2093a:	429c      	cmp	r4, r3
   2093c:	d818      	bhi.n	20970 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2093e:	fb00 bb0b 	mla	fp, r0, fp, fp
   20942:	44bb      	add	fp, r7
   20944:	f8db 0004 	ldr.w	r0, [fp, #4]
   20948:	464a      	mov	r2, r9
   2094a:	4428      	add	r0, r5
   2094c:	442c      	add	r4, r5
   2094e:	f00a ffed 	bl	2b92c <memcpy>
      if (NumBytes) {
   20952:	ebb4 040a 	subs.w	r4, r4, sl
   20956:	d0e8      	beq.n	2092a <SEGGER_RTT_WriteSkipNoLock+0x42>
   20958:	4622      	mov	r2, r4
   2095a:	f8db 0004 	ldr.w	r0, [fp, #4]
   2095e:	eb08 0109 	add.w	r1, r8, r9
   20962:	f00a ffe3 	bl	2b92c <memcpy>
      return 1;
   20966:	e7e0      	b.n	2092a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   20968:	3b01      	subs	r3, #1
   2096a:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2096c:	42a3      	cmp	r3, r4
   2096e:	d2d1      	bcs.n	20914 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   20970:	2000      	movs	r0, #0
   20972:	e7df      	b.n	20934 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   20974:	20021ab0 	.word	0x20021ab0

00020978 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   20978:	2218      	movs	r2, #24
   2097a:	4b03      	ldr	r3, [pc, #12]	; (20988 <SEGGER_RTT_HasDataUp+0x10>)
   2097c:	fb02 3300 	mla	r3, r2, r0, r3
   20980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   20982:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   20984:	1a80      	subs	r0, r0, r2
   20986:	4770      	bx	lr
   20988:	20021ab0 	.word	0x20021ab0

0002098c <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2098c:	f04f 32ff 	mov.w	r2, #4294967295
   20990:	f04f 33ff 	mov.w	r3, #4294967295
   20994:	4801      	ldr	r0, [pc, #4]	; (2099c <zephyr_rtt_mutex_lock+0x10>)
   20996:	f000 bd39 	b.w	2140c <z_impl_k_mutex_lock>
   2099a:	bf00      	nop
   2099c:	20008c78 	.word	0x20008c78

000209a0 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   209a0:	4801      	ldr	r0, [pc, #4]	; (209a8 <zephyr_rtt_mutex_unlock+0x8>)
   209a2:	f000 be03 	b.w	215ac <z_impl_k_mutex_unlock>
   209a6:	bf00      	nop
   209a8:	20008c78 	.word	0x20008c78

000209ac <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
   209ac:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   209ae:	4605      	mov	r5, r0
   209b0:	b910      	cbnz	r0, 209b8 <z_impl_device_get_binding+0xc>
		return NULL;
   209b2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   209b4:	4620      	mov	r0, r4
   209b6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   209b8:	7803      	ldrb	r3, [r0, #0]
   209ba:	2b00      	cmp	r3, #0
   209bc:	d0f9      	beq.n	209b2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   209be:	4c0e      	ldr	r4, [pc, #56]	; (209f8 <z_impl_device_get_binding+0x4c>)
   209c0:	4e0e      	ldr	r6, [pc, #56]	; (209fc <z_impl_device_get_binding+0x50>)
   209c2:	42b4      	cmp	r4, r6
   209c4:	d108      	bne.n	209d8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   209c6:	4c0c      	ldr	r4, [pc, #48]	; (209f8 <z_impl_device_get_binding+0x4c>)
   209c8:	42b4      	cmp	r4, r6
   209ca:	d0f2      	beq.n	209b2 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   209cc:	4620      	mov	r0, r4
   209ce:	f00a fd6d 	bl	2b4ac <z_device_is_ready>
   209d2:	b950      	cbnz	r0, 209ea <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   209d4:	3418      	adds	r4, #24
   209d6:	e7f7      	b.n	209c8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   209d8:	4620      	mov	r0, r4
   209da:	f00a fd67 	bl	2b4ac <z_device_is_ready>
   209de:	b110      	cbz	r0, 209e6 <z_impl_device_get_binding+0x3a>
   209e0:	6823      	ldr	r3, [r4, #0]
   209e2:	42ab      	cmp	r3, r5
   209e4:	d0e6      	beq.n	209b4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   209e6:	3418      	adds	r4, #24
   209e8:	e7eb      	b.n	209c2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   209ea:	4628      	mov	r0, r5
   209ec:	6821      	ldr	r1, [r4, #0]
   209ee:	f7e8 fcad 	bl	934c <strcmp>
   209f2:	2800      	cmp	r0, #0
   209f4:	d1ee      	bne.n	209d4 <z_impl_device_get_binding+0x28>
   209f6:	e7dd      	b.n	209b4 <z_impl_device_get_binding+0x8>
   209f8:	0002c268 	.word	0x0002c268
   209fc:	0002c388 	.word	0x0002c388

00020a00 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20a04:	b086      	sub	sp, #24
   20a06:	4604      	mov	r4, r0
   20a08:	460e      	mov	r6, r1
   20a0a:	af00      	add	r7, sp, #0
	__asm__ volatile(
   20a0c:	f04f 0320 	mov.w	r3, #32
   20a10:	f3ef 8811 	mrs	r8, BASEPRI
   20a14:	f383 8812 	msr	BASEPRI_MAX, r3
   20a18:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   20a1c:	f002 fe80 	bl	23720 <z_impl_z_current_get>
   20a20:	2c04      	cmp	r4, #4
   20a22:	bf98      	it	ls
   20a24:	4b34      	ldrls	r3, [pc, #208]	; (20af8 <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20a26:	46e9      	mov	r9, sp
   20a28:	b08a      	sub	sp, #40	; 0x28
   20a2a:	4605      	mov	r5, r0
   20a2c:	466a      	mov	r2, sp
   20a2e:	bf94      	ite	ls
   20a30:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   20a34:	4b31      	ldrhi	r3, [pc, #196]	; (20afc <z_fatal_error+0xfc>)
   20a36:	61d3      	str	r3, [r2, #28]
   20a38:	f240 3301 	movw	r3, #769	; 0x301
   20a3c:	f04f 0a00 	mov.w	sl, #0
   20a40:	8493      	strh	r3, [r2, #36]	; 0x24
   20a42:	492f      	ldr	r1, [pc, #188]	; (20b00 <z_fatal_error+0x100>)
   20a44:	4b2f      	ldr	r3, [pc, #188]	; (20b04 <z_fatal_error+0x104>)
   20a46:	e9c2 1405 	strd	r1, r4, [r2, #20]
   20a4a:	f8c2 a020 	str.w	sl, [r2, #32]
   20a4e:	f842 3f10 	str.w	r3, [r2, #16]!
   20a52:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   20a56:	4653      	mov	r3, sl
   20a58:	482b      	ldr	r0, [pc, #172]	; (20b08 <z_fatal_error+0x108>)
   20a5a:	f7ed fd99 	bl	e590 <z_impl_z_log_msg_static_create>
   20a5e:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20a60:	b17e      	cbz	r6, 20a82 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   20a62:	69f3      	ldr	r3, [r6, #28]
   20a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20a68:	b15b      	cbz	r3, 20a82 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   20a6a:	4b28      	ldr	r3, [pc, #160]	; (20b0c <z_fatal_error+0x10c>)
   20a6c:	617b      	str	r3, [r7, #20]
   20a6e:	2302      	movs	r3, #2
   20a70:	613b      	str	r3, [r7, #16]
   20a72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20a76:	4653      	mov	r3, sl
   20a78:	4823      	ldr	r0, [pc, #140]	; (20b08 <z_fatal_error+0x108>)
   20a7a:	f107 0210 	add.w	r2, r7, #16
   20a7e:	f7ed fd87 	bl	e590 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20a82:	b12d      	cbz	r5, 20a90 <z_fatal_error+0x90>
   20a84:	4628      	mov	r0, r5
   20a86:	f00a fd47 	bl	2b518 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   20a8a:	b108      	cbz	r0, 20a90 <z_fatal_error+0x90>
   20a8c:	7803      	ldrb	r3, [r0, #0]
   20a8e:	b903      	cbnz	r3, 20a92 <z_fatal_error+0x92>
		thread_name = "unknown";
   20a90:	481f      	ldr	r0, [pc, #124]	; (20b10 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   20a92:	46e9      	mov	r9, sp
   20a94:	b08a      	sub	sp, #40	; 0x28
   20a96:	466a      	mov	r2, sp
   20a98:	4b1e      	ldr	r3, [pc, #120]	; (20b14 <z_fatal_error+0x114>)
   20a9a:	61d0      	str	r0, [r2, #28]
   20a9c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   20aa0:	f240 3301 	movw	r3, #769	; 0x301
   20aa4:	8413      	strh	r3, [r2, #32]
   20aa6:	4b1c      	ldr	r3, [pc, #112]	; (20b18 <z_fatal_error+0x118>)
   20aa8:	f842 3f10 	str.w	r3, [r2, #16]!
   20aac:	2300      	movs	r3, #0
   20aae:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   20ab2:	4815      	ldr	r0, [pc, #84]	; (20b08 <z_fatal_error+0x108>)
   20ab4:	f7ed fd6c 	bl	e590 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   20ab8:	4631      	mov	r1, r6
   20aba:	46cd      	mov	sp, r9
   20abc:	4620      	mov	r0, r4
   20abe:	f7fd fb33 	bl	1e128 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   20ac2:	2c04      	cmp	r4, #4
   20ac4:	d10c      	bne.n	20ae0 <z_fatal_error+0xe0>
   20ac6:	4915      	ldr	r1, [pc, #84]	; (20b1c <z_fatal_error+0x11c>)
   20ac8:	2393      	movs	r3, #147	; 0x93
   20aca:	4a15      	ldr	r2, [pc, #84]	; (20b20 <z_fatal_error+0x120>)
   20acc:	4815      	ldr	r0, [pc, #84]	; (20b24 <z_fatal_error+0x124>)
   20ace:	f005 ff28 	bl	26922 <assert_print>
   20ad2:	4815      	ldr	r0, [pc, #84]	; (20b28 <z_fatal_error+0x128>)
   20ad4:	f005 ff25 	bl	26922 <assert_print>
   20ad8:	2193      	movs	r1, #147	; 0x93
   20ada:	4811      	ldr	r0, [pc, #68]	; (20b20 <z_fatal_error+0x120>)
   20adc:	f005 ff1a 	bl	26914 <assert_post_action>
	__asm__ volatile(
   20ae0:	f388 8811 	msr	BASEPRI, r8
   20ae4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20ae8:	4628      	mov	r0, r5
   20aea:	f7f0 fb1f 	bl	1112c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   20aee:	3718      	adds	r7, #24
   20af0:	46bd      	mov	sp, r7
   20af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20af6:	bf00      	nop
   20af8:	0002d760 	.word	0x0002d760
   20afc:	00032ade 	.word	0x00032ade
   20b00:	00032af4 	.word	0x00032af4
   20b04:	01000005 	.word	0x01000005
   20b08:	0002c8cc 	.word	0x0002c8cc
   20b0c:	00032b1c 	.word	0x00032b1c
   20b10:	00032aec 	.word	0x00032aec
   20b14:	00032b3d 	.word	0x00032b3d
   20b18:	01000004 	.word	0x01000004
   20b1c:	00032b77 	.word	0x00032b77
   20b20:	00032b55 	.word	0x00032b55
   20b24:	0002d881 	.word	0x0002d881
   20b28:	00032b94 	.word	0x00032b94

00020b2c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20b2c:	4b0f      	ldr	r3, [pc, #60]	; (20b6c <z_sys_init_run_level+0x40>)
{
   20b2e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20b30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20b34:	3001      	adds	r0, #1
   20b36:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   20b3a:	42a6      	cmp	r6, r4
   20b3c:	d800      	bhi.n	20b40 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   20b3e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   20b40:	e9d4 3500 	ldrd	r3, r5, [r4]
   20b44:	4628      	mov	r0, r5
   20b46:	4798      	blx	r3
		if (dev != NULL) {
   20b48:	b16d      	cbz	r5, 20b66 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   20b4a:	b138      	cbz	r0, 20b5c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   20b4c:	2800      	cmp	r0, #0
   20b4e:	bfb8      	it	lt
   20b50:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   20b52:	28ff      	cmp	r0, #255	; 0xff
   20b54:	bfa8      	it	ge
   20b56:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   20b58:	68eb      	ldr	r3, [r5, #12]
   20b5a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   20b5c:	68ea      	ldr	r2, [r5, #12]
   20b5e:	7853      	ldrb	r3, [r2, #1]
   20b60:	f043 0301 	orr.w	r3, r3, #1
   20b64:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20b66:	3408      	adds	r4, #8
   20b68:	e7e7      	b.n	20b3a <z_sys_init_run_level+0xe>
   20b6a:	bf00      	nop
   20b6c:	0002d774 	.word	0x0002d774

00020b70 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   20b70:	2201      	movs	r2, #1
{
   20b72:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   20b74:	4b09      	ldr	r3, [pc, #36]	; (20b9c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   20b76:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   20b78:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   20b7a:	f7ff ffd7 	bl	20b2c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   20b7e:	f003 fed7 	bl	24930 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   20b82:	2004      	movs	r0, #4
   20b84:	f7ff ffd2 	bl	20b2c <z_sys_init_run_level>

	z_init_static_threads();
   20b88:	f000 fb66 	bl	21258 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   20b8c:	f7ea fd4c 	bl	b628 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20b90:	4a03      	ldr	r2, [pc, #12]	; (20ba0 <bg_thread_main+0x30>)
   20b92:	7b13      	ldrb	r3, [r2, #12]
   20b94:	f023 0301 	bic.w	r3, r3, #1
   20b98:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20b9a:	bd08      	pop	{r3, pc}
   20b9c:	200228ed 	.word	0x200228ed
   20ba0:	2000a2c8 	.word	0x2000a2c8

00020ba4 <z_bss_zero>:
{
   20ba4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   20ba6:	4803      	ldr	r0, [pc, #12]	; (20bb4 <z_bss_zero+0x10>)
   20ba8:	4a03      	ldr	r2, [pc, #12]	; (20bb8 <z_bss_zero+0x14>)
   20baa:	2100      	movs	r1, #0
   20bac:	1a12      	subs	r2, r2, r0
   20bae:	f00a fc88 	bl	2b4c2 <z_early_memset>
}
   20bb2:	bd08      	pop	{r3, pc}
   20bb4:	20008f50 	.word	0x20008f50
   20bb8:	200228f0 	.word	0x200228f0

00020bbc <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   20bbc:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   20bbe:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   20bc0:	4e13      	ldr	r6, [pc, #76]	; (20c10 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   20bc2:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   20bc4:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   20bc8:	2300      	movs	r3, #0
{
   20bca:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   20bcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   20bd0:	220f      	movs	r2, #15
   20bd2:	9301      	str	r3, [sp, #4]
   20bd4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20bd8:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   20bda:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20bde:	4d0d      	ldr	r5, [pc, #52]	; (20c14 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   20be0:	490d      	ldr	r1, [pc, #52]	; (20c18 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20be2:	fb03 5500 	mla	r5, r3, r0, r5
{
   20be6:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   20be8:	fb02 1100 	mla	r1, r2, r0, r1
   20bec:	4b0b      	ldr	r3, [pc, #44]	; (20c1c <z_init_cpu+0x60>)
   20bee:	4630      	mov	r0, r6
   20bf0:	9500      	str	r5, [sp, #0]
   20bf2:	f000 fa97 	bl	21124 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20bf6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   20bf8:	752c      	strb	r4, [r5, #20]
   20bfa:	f023 0304 	bic.w	r3, r3, #4
   20bfe:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   20c00:	4b07      	ldr	r3, [pc, #28]	; (20c20 <z_init_cpu+0x64>)
   20c02:	3401      	adds	r4, #1
   20c04:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   20c08:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   20c0a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   20c0c:	b006      	add	sp, #24
   20c0e:	bd70      	pop	{r4, r5, r6, pc}
   20c10:	2000a240 	.word	0x2000a240
   20c14:	20021b58 	.word	0x20021b58
   20c18:	20033df8 	.word	0x20033df8
   20c1c:	000213a9 	.word	0x000213a9
   20c20:	200335f8 	.word	0x200335f8

00020c24 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   20c24:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   20c26:	2000      	movs	r0, #0
{
   20c28:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   20c2a:	f7ff ff7f 	bl	20b2c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   20c2e:	4b2f      	ldr	r3, [pc, #188]	; (20cec <z_cstart+0xc8>)
	uint32_t msp =
   20c30:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   20c34:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   20c38:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20c3c:	2400      	movs	r4, #0
   20c3e:	23e0      	movs	r3, #224	; 0xe0
   20c40:	4d2b      	ldr	r5, [pc, #172]	; (20cf0 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   20c42:	4e2c      	ldr	r6, [pc, #176]	; (20cf4 <z_cstart+0xd0>)
   20c44:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20c48:	77ec      	strb	r4, [r5, #31]
   20c4a:	762c      	strb	r4, [r5, #24]
   20c4c:	766c      	strb	r4, [r5, #25]
   20c4e:	76ac      	strb	r4, [r5, #26]
   20c50:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20c54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20c56:	4f28      	ldr	r7, [pc, #160]	; (20cf8 <z_cstart+0xd4>)
   20c58:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20c5c:	626b      	str	r3, [r5, #36]	; 0x24
   20c5e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20c62:	f7f0 f9c7 	bl	10ff4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20c66:	f7ef fcd5 	bl	10614 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20c6a:	f04f 33ff 	mov.w	r3, #4294967295
   20c6e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20c70:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   20c72:	f7f0 fc3b 	bl	114ec <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   20c76:	f7f0 fa6f 	bl	11158 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   20c7a:	f7ed fa7f 	bl	e17c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20c7e:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   20c82:	ad06      	add	r5, sp, #24
   20c84:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   20c86:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   20c8a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   20c8e:	f003 fe31 	bl	248f4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   20c92:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20c94:	f00a fc09 	bl	2b4aa <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   20c98:	2001      	movs	r0, #1
   20c9a:	f7ff ff47 	bl	20b2c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   20c9e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   20ca0:	4d16      	ldr	r5, [pc, #88]	; (20cfc <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   20ca2:	f7ff ff43 	bl	20b2c <z_sys_init_run_level>
	z_sched_init();
   20ca6:	f002 fbc1 	bl	2342c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20caa:	4b15      	ldr	r3, [pc, #84]	; (20d00 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   20cac:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20cae:	9305      	str	r3, [sp, #20]
   20cb0:	2301      	movs	r3, #1
   20cb2:	4914      	ldr	r1, [pc, #80]	; (20d04 <z_cstart+0xe0>)
   20cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20cb8:	e9cd 4303 	strd	r4, r3, [sp, #12]
   20cbc:	4628      	mov	r0, r5
   20cbe:	463b      	mov	r3, r7
   20cc0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20cc4:	9400      	str	r4, [sp, #0]
   20cc6:	f000 fa2d 	bl	21124 <z_setup_new_thread>
   20cca:	4606      	mov	r6, r0
   20ccc:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   20cce:	4628      	mov	r0, r5
   20cd0:	f022 0204 	bic.w	r2, r2, #4
   20cd4:	736a      	strb	r2, [r5, #13]
   20cd6:	f001 fd81 	bl	227dc <z_ready_thread>
	z_init_cpu(0);
   20cda:	4620      	mov	r0, r4
   20cdc:	f7ff ff6e 	bl	20bbc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20ce0:	463a      	mov	r2, r7
   20ce2:	4631      	mov	r1, r6
   20ce4:	4628      	mov	r0, r5
   20ce6:	f7ef fe15 	bl	10914 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20cea:	bf00      	nop
   20cec:	200335f8 	.word	0x200335f8
   20cf0:	e000ed00 	.word	0xe000ed00
   20cf4:	20021b58 	.word	0x20021b58
   20cf8:	00020b71 	.word	0x00020b71
   20cfc:	2000a2c8 	.word	0x2000a2c8
   20d00:	00032c13 	.word	0x00032c13
   20d04:	20033f38 	.word	0x20033f38

00020d08 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   20d08:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20d0a:	4c0d      	ldr	r4, [pc, #52]	; (20d40 <statics_init+0x38>)
   20d0c:	4d0d      	ldr	r5, [pc, #52]	; (20d44 <statics_init+0x3c>)
   20d0e:	42ac      	cmp	r4, r5
   20d10:	d913      	bls.n	20d3a <statics_init+0x32>
   20d12:	490d      	ldr	r1, [pc, #52]	; (20d48 <statics_init+0x40>)
   20d14:	2318      	movs	r3, #24
   20d16:	4a0d      	ldr	r2, [pc, #52]	; (20d4c <statics_init+0x44>)
   20d18:	480d      	ldr	r0, [pc, #52]	; (20d50 <statics_init+0x48>)
   20d1a:	f005 fe02 	bl	26922 <assert_print>
   20d1e:	480d      	ldr	r0, [pc, #52]	; (20d54 <statics_init+0x4c>)
   20d20:	f005 fdff 	bl	26922 <assert_print>
   20d24:	2118      	movs	r1, #24
   20d26:	4809      	ldr	r0, [pc, #36]	; (20d4c <statics_init+0x44>)
   20d28:	f005 fdf4 	bl	26914 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20d2c:	4620      	mov	r0, r4
   20d2e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20d32:	f00a fbca 	bl	2b4ca <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20d36:	3418      	adds	r4, #24
   20d38:	e7e9      	b.n	20d0e <statics_init+0x6>
   20d3a:	d3f7      	bcc.n	20d2c <statics_init+0x24>
		}
	}
	return 0;
}
   20d3c:	2000      	movs	r0, #0
   20d3e:	bd38      	pop	{r3, r4, r5, pc}
   20d40:	20008c24 	.word	0x20008c24
   20d44:	20008c3c 	.word	0x20008c3c
   20d48:	00032c3d 	.word	0x00032c3d
   20d4c:	00032c1b 	.word	0x00032c1b
   20d50:	0002d881 	.word	0x0002d881
   20d54:	0002e9b9 	.word	0x0002e9b9

00020d58 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d5c:	b085      	sub	sp, #20
   20d5e:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   20d62:	4680      	mov	r8, r0
   20d64:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20d66:	4648      	mov	r0, r9
   20d68:	4659      	mov	r1, fp
{
   20d6a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20d6c:	f00a fccb 	bl	2b706 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20d70:	f1bb 3fff 	cmp.w	fp, #4294967295
   20d74:	bf08      	it	eq
   20d76:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20d7a:	4606      	mov	r6, r0
   20d7c:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20d7e:	bf04      	itt	eq
   20d80:	f04f 36ff 	moveq.w	r6, #4294967295
   20d84:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20d88:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   20d8c:	f04f 0320 	mov.w	r3, #32
   20d90:	f3ef 8511 	mrs	r5, BASEPRI
   20d94:	f383 8812 	msr	BASEPRI_MAX, r3
   20d98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d9c:	4620      	mov	r0, r4
   20d9e:	f000 fadf 	bl	21360 <z_spin_lock_valid>
   20da2:	b960      	cbnz	r0, 20dbe <k_heap_aligned_alloc+0x66>
   20da4:	2394      	movs	r3, #148	; 0x94
   20da6:	4a33      	ldr	r2, [pc, #204]	; (20e74 <k_heap_aligned_alloc+0x11c>)
   20da8:	4933      	ldr	r1, [pc, #204]	; (20e78 <k_heap_aligned_alloc+0x120>)
   20daa:	4834      	ldr	r0, [pc, #208]	; (20e7c <k_heap_aligned_alloc+0x124>)
   20dac:	f005 fdb9 	bl	26922 <assert_print>
   20db0:	4621      	mov	r1, r4
   20db2:	4833      	ldr	r0, [pc, #204]	; (20e80 <k_heap_aligned_alloc+0x128>)
   20db4:	f005 fdb5 	bl	26922 <assert_print>
   20db8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dba:	482e      	ldr	r0, [pc, #184]	; (20e74 <k_heap_aligned_alloc+0x11c>)
   20dbc:	e031      	b.n	20e22 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   20dbe:	4620      	mov	r0, r4
   20dc0:	f000 faea 	bl	21398 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20dc4:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20dc8:	b113      	cbz	r3, 20dd0 <k_heap_aligned_alloc+0x78>
   20dca:	ea5b 0909 	orrs.w	r9, fp, r9
   20dce:	d11d      	bne.n	20e0c <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20dd0:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20dd4:	4652      	mov	r2, sl
   20dd6:	4640      	mov	r0, r8
   20dd8:	9903      	ldr	r1, [sp, #12]
   20dda:	f7eb fca1 	bl	c720 <sys_heap_aligned_alloc>
   20dde:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   20de0:	f003 f88c 	bl	23efc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20de4:	f1b9 0f00 	cmp.w	r9, #0
   20de8:	d01d      	beq.n	20e26 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dea:	4620      	mov	r0, r4
   20dec:	f000 fac6 	bl	2137c <z_spin_unlock_valid>
   20df0:	2800      	cmp	r0, #0
   20df2:	d137      	bne.n	20e64 <k_heap_aligned_alloc+0x10c>
   20df4:	23c2      	movs	r3, #194	; 0xc2
   20df6:	4a1f      	ldr	r2, [pc, #124]	; (20e74 <k_heap_aligned_alloc+0x11c>)
   20df8:	4922      	ldr	r1, [pc, #136]	; (20e84 <k_heap_aligned_alloc+0x12c>)
   20dfa:	4820      	ldr	r0, [pc, #128]	; (20e7c <k_heap_aligned_alloc+0x124>)
   20dfc:	f005 fd91 	bl	26922 <assert_print>
   20e00:	4621      	mov	r1, r4
   20e02:	4821      	ldr	r0, [pc, #132]	; (20e88 <k_heap_aligned_alloc+0x130>)
   20e04:	f005 fd8d 	bl	26922 <assert_print>
   20e08:	21c2      	movs	r1, #194	; 0xc2
   20e0a:	e7d6      	b.n	20dba <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20e0c:	491f      	ldr	r1, [pc, #124]	; (20e8c <k_heap_aligned_alloc+0x134>)
   20e0e:	234c      	movs	r3, #76	; 0x4c
   20e10:	4a1f      	ldr	r2, [pc, #124]	; (20e90 <k_heap_aligned_alloc+0x138>)
   20e12:	481a      	ldr	r0, [pc, #104]	; (20e7c <k_heap_aligned_alloc+0x124>)
   20e14:	f005 fd85 	bl	26922 <assert_print>
   20e18:	481e      	ldr	r0, [pc, #120]	; (20e94 <k_heap_aligned_alloc+0x13c>)
   20e1a:	f005 fd82 	bl	26922 <assert_print>
   20e1e:	214c      	movs	r1, #76	; 0x4c
   20e20:	481b      	ldr	r0, [pc, #108]	; (20e90 <k_heap_aligned_alloc+0x138>)
   20e22:	f005 fd77 	bl	26914 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   20e26:	1a30      	subs	r0, r6, r0
   20e28:	eb67 0101 	sbc.w	r1, r7, r1
   20e2c:	2801      	cmp	r0, #1
   20e2e:	f171 0300 	sbcs.w	r3, r1, #0
   20e32:	dbda      	blt.n	20dea <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20e34:	e9cd 0100 	strd	r0, r1, [sp]
   20e38:	465a      	mov	r2, fp
   20e3a:	4629      	mov	r1, r5
   20e3c:	4620      	mov	r0, r4
   20e3e:	f002 f827 	bl	22e90 <z_pend_curr>
   20e42:	f04f 0320 	mov.w	r3, #32
   20e46:	f3ef 8511 	mrs	r5, BASEPRI
   20e4a:	f383 8812 	msr	BASEPRI_MAX, r3
   20e4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e52:	4620      	mov	r0, r4
   20e54:	f000 fa84 	bl	21360 <z_spin_lock_valid>
   20e58:	2800      	cmp	r0, #0
   20e5a:	d0a3      	beq.n	20da4 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   20e5c:	4620      	mov	r0, r4
   20e5e:	f000 fa9b 	bl	21398 <z_spin_lock_set_owner>
	return k;
   20e62:	e7b7      	b.n	20dd4 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   20e64:	f385 8811 	msr	BASEPRI, r5
   20e68:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20e6c:	4648      	mov	r0, r9
   20e6e:	b005      	add	sp, #20
   20e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e74:	0002e6ba 	.word	0x0002e6ba
   20e78:	0002e713 	.word	0x0002e713
   20e7c:	0002d881 	.word	0x0002d881
   20e80:	0002e728 	.word	0x0002e728
   20e84:	0002e6e7 	.word	0x0002e6e7
   20e88:	0002e6fe 	.word	0x0002e6fe
   20e8c:	00032c53 	.word	0x00032c53
   20e90:	00032c1b 	.word	0x00032c1b
   20e94:	00031891 	.word	0x00031891

00020e98 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e9a:	4605      	mov	r5, r0
   20e9c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20e9e:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   20ea2:	f04f 0320 	mov.w	r3, #32
   20ea6:	f3ef 8711 	mrs	r7, BASEPRI
   20eaa:	f383 8812 	msr	BASEPRI_MAX, r3
   20eae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20eb2:	4620      	mov	r0, r4
   20eb4:	f000 fa54 	bl	21360 <z_spin_lock_valid>
   20eb8:	b968      	cbnz	r0, 20ed6 <k_heap_free+0x3e>
   20eba:	2394      	movs	r3, #148	; 0x94
   20ebc:	4a19      	ldr	r2, [pc, #100]	; (20f24 <k_heap_free+0x8c>)
   20ebe:	491a      	ldr	r1, [pc, #104]	; (20f28 <k_heap_free+0x90>)
   20ec0:	481a      	ldr	r0, [pc, #104]	; (20f2c <k_heap_free+0x94>)
   20ec2:	f005 fd2e 	bl	26922 <assert_print>
   20ec6:	4621      	mov	r1, r4
   20ec8:	4819      	ldr	r0, [pc, #100]	; (20f30 <k_heap_free+0x98>)
   20eca:	f005 fd2a 	bl	26922 <assert_print>
   20ece:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ed0:	4814      	ldr	r0, [pc, #80]	; (20f24 <k_heap_free+0x8c>)
   20ed2:	f005 fd1f 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ed6:	4620      	mov	r0, r4
   20ed8:	f000 fa5e 	bl	21398 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   20edc:	4628      	mov	r0, r5
   20ede:	4631      	mov	r1, r6
   20ee0:	f7eb fbd8 	bl	c694 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20ee4:	f105 000c 	add.w	r0, r5, #12
   20ee8:	f00a fbf3 	bl	2b6d2 <z_unpend_all>
   20eec:	b128      	cbz	r0, 20efa <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   20eee:	4639      	mov	r1, r7
   20ef0:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20ef2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   20ef6:	f001 bcfd 	b.w	228f4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20efa:	4620      	mov	r0, r4
   20efc:	f000 fa3e 	bl	2137c <z_spin_unlock_valid>
   20f00:	b958      	cbnz	r0, 20f1a <k_heap_free+0x82>
   20f02:	23c2      	movs	r3, #194	; 0xc2
   20f04:	4a07      	ldr	r2, [pc, #28]	; (20f24 <k_heap_free+0x8c>)
   20f06:	490b      	ldr	r1, [pc, #44]	; (20f34 <k_heap_free+0x9c>)
   20f08:	4808      	ldr	r0, [pc, #32]	; (20f2c <k_heap_free+0x94>)
   20f0a:	f005 fd0a 	bl	26922 <assert_print>
   20f0e:	4621      	mov	r1, r4
   20f10:	4809      	ldr	r0, [pc, #36]	; (20f38 <k_heap_free+0xa0>)
   20f12:	f005 fd06 	bl	26922 <assert_print>
   20f16:	21c2      	movs	r1, #194	; 0xc2
   20f18:	e7da      	b.n	20ed0 <k_heap_free+0x38>
	__asm__ volatile(
   20f1a:	f387 8811 	msr	BASEPRI, r7
   20f1e:	f3bf 8f6f 	isb	sy
}
   20f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20f24:	0002e6ba 	.word	0x0002e6ba
   20f28:	0002e713 	.word	0x0002e713
   20f2c:	0002d881 	.word	0x0002d881
   20f30:	0002e728 	.word	0x0002e728
   20f34:	0002e6e7 	.word	0x0002e6e7
   20f38:	0002e6fe 	.word	0x0002e6fe

00020f3c <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   20f3c:	2000      	movs	r0, #0
{
   20f3e:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20f40:	4c0c      	ldr	r4, [pc, #48]	; (20f74 <init_mem_slab_module+0x38>)
   20f42:	4d0d      	ldr	r5, [pc, #52]	; (20f78 <init_mem_slab_module+0x3c>)
   20f44:	42ac      	cmp	r4, r5
   20f46:	d913      	bls.n	20f70 <init_mem_slab_module+0x34>
   20f48:	490c      	ldr	r1, [pc, #48]	; (20f7c <init_mem_slab_module+0x40>)
   20f4a:	233d      	movs	r3, #61	; 0x3d
   20f4c:	4a0c      	ldr	r2, [pc, #48]	; (20f80 <init_mem_slab_module+0x44>)
   20f4e:	480d      	ldr	r0, [pc, #52]	; (20f84 <init_mem_slab_module+0x48>)
   20f50:	f005 fce7 	bl	26922 <assert_print>
   20f54:	480c      	ldr	r0, [pc, #48]	; (20f88 <init_mem_slab_module+0x4c>)
   20f56:	f005 fce4 	bl	26922 <assert_print>
   20f5a:	213d      	movs	r1, #61	; 0x3d
   20f5c:	4808      	ldr	r0, [pc, #32]	; (20f80 <init_mem_slab_module+0x44>)
   20f5e:	f005 fcd9 	bl	26914 <assert_post_action>
		rc = create_free_list(slab);
   20f62:	4620      	mov	r0, r4
   20f64:	f00a fab9 	bl	2b4da <create_free_list>
		if (rc < 0) {
   20f68:	2800      	cmp	r0, #0
   20f6a:	db02      	blt.n	20f72 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20f6c:	3420      	adds	r4, #32
   20f6e:	e7e9      	b.n	20f44 <init_mem_slab_module+0x8>
   20f70:	d3f7      	bcc.n	20f62 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   20f72:	bd38      	pop	{r3, r4, r5, pc}
   20f74:	20008bc4 	.word	0x20008bc4
   20f78:	20008c24 	.word	0x20008c24
   20f7c:	00032cbe 	.word	0x00032cbe
   20f80:	00032c99 	.word	0x00032c99
   20f84:	0002d881 	.word	0x0002d881
   20f88:	0002e9b9 	.word	0x0002e9b9

00020f8c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20f90:	4604      	mov	r4, r0
   20f92:	460e      	mov	r6, r1
   20f94:	4690      	mov	r8, r2
   20f96:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20f98:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20f9c:	f04f 0320 	mov.w	r3, #32
   20fa0:	f3ef 8911 	mrs	r9, BASEPRI
   20fa4:	f383 8812 	msr	BASEPRI_MAX, r3
   20fa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20fac:	4628      	mov	r0, r5
   20fae:	f000 f9d7 	bl	21360 <z_spin_lock_valid>
   20fb2:	b968      	cbnz	r0, 20fd0 <k_mem_slab_alloc+0x44>
   20fb4:	2394      	movs	r3, #148	; 0x94
   20fb6:	4a23      	ldr	r2, [pc, #140]	; (21044 <k_mem_slab_alloc+0xb8>)
   20fb8:	4923      	ldr	r1, [pc, #140]	; (21048 <k_mem_slab_alloc+0xbc>)
   20fba:	4824      	ldr	r0, [pc, #144]	; (2104c <k_mem_slab_alloc+0xc0>)
   20fbc:	f005 fcb1 	bl	26922 <assert_print>
   20fc0:	4629      	mov	r1, r5
   20fc2:	4823      	ldr	r0, [pc, #140]	; (21050 <k_mem_slab_alloc+0xc4>)
   20fc4:	f005 fcad 	bl	26922 <assert_print>
   20fc8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fca:	481e      	ldr	r0, [pc, #120]	; (21044 <k_mem_slab_alloc+0xb8>)
   20fcc:	f005 fca2 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   20fd0:	4628      	mov	r0, r5
   20fd2:	f000 f9e1 	bl	21398 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20fd6:	69a3      	ldr	r3, [r4, #24]
   20fd8:	b1b3      	cbz	r3, 21008 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   20fda:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   20fdc:	681b      	ldr	r3, [r3, #0]
   20fde:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   20fe0:	69e3      	ldr	r3, [r4, #28]
   20fe2:	3301      	adds	r3, #1
   20fe4:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20fe6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fe8:	4628      	mov	r0, r5
   20fea:	f000 f9c7 	bl	2137c <z_spin_unlock_valid>
   20fee:	bb18      	cbnz	r0, 21038 <k_mem_slab_alloc+0xac>
   20ff0:	23c2      	movs	r3, #194	; 0xc2
   20ff2:	4a14      	ldr	r2, [pc, #80]	; (21044 <k_mem_slab_alloc+0xb8>)
   20ff4:	4917      	ldr	r1, [pc, #92]	; (21054 <k_mem_slab_alloc+0xc8>)
   20ff6:	4815      	ldr	r0, [pc, #84]	; (2104c <k_mem_slab_alloc+0xc0>)
   20ff8:	f005 fc93 	bl	26922 <assert_print>
   20ffc:	4629      	mov	r1, r5
   20ffe:	4816      	ldr	r0, [pc, #88]	; (21058 <k_mem_slab_alloc+0xcc>)
   21000:	f005 fc8f 	bl	26922 <assert_print>
   21004:	21c2      	movs	r1, #194	; 0xc2
   21006:	e7e0      	b.n	20fca <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21008:	ea58 0207 	orrs.w	r2, r8, r7
   2100c:	d103      	bne.n	21016 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   2100e:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   21012:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   21014:	e7e8      	b.n	20fe8 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21016:	4622      	mov	r2, r4
   21018:	4649      	mov	r1, r9
   2101a:	4628      	mov	r0, r5
   2101c:	e9cd 8700 	strd	r8, r7, [sp]
   21020:	f001 ff36 	bl	22e90 <z_pend_curr>
		if (result == 0) {
   21024:	4604      	mov	r4, r0
   21026:	b918      	cbnz	r0, 21030 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   21028:	4b0c      	ldr	r3, [pc, #48]	; (2105c <k_mem_slab_alloc+0xd0>)
   2102a:	689b      	ldr	r3, [r3, #8]
   2102c:	695b      	ldr	r3, [r3, #20]
   2102e:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   21030:	4620      	mov	r0, r4
   21032:	b003      	add	sp, #12
   21034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   21038:	f389 8811 	msr	BASEPRI, r9
   2103c:	f3bf 8f6f 	isb	sy
	return result;
   21040:	e7f6      	b.n	21030 <k_mem_slab_alloc+0xa4>
   21042:	bf00      	nop
   21044:	0002e6ba 	.word	0x0002e6ba
   21048:	0002e713 	.word	0x0002e713
   2104c:	0002d881 	.word	0x0002d881
   21050:	0002e728 	.word	0x0002e728
   21054:	0002e6e7 	.word	0x0002e6e7
   21058:	0002e6fe 	.word	0x0002e6fe
   2105c:	20021b58 	.word	0x20021b58

00021060 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21064:	4604      	mov	r4, r0
   21066:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21068:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2106c:	f04f 0320 	mov.w	r3, #32
   21070:	f3ef 8711 	mrs	r7, BASEPRI
   21074:	f383 8812 	msr	BASEPRI_MAX, r3
   21078:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2107c:	4628      	mov	r0, r5
   2107e:	f000 f96f 	bl	21360 <z_spin_lock_valid>
   21082:	b968      	cbnz	r0, 210a0 <k_mem_slab_free+0x40>
   21084:	2394      	movs	r3, #148	; 0x94
   21086:	4a21      	ldr	r2, [pc, #132]	; (2110c <k_mem_slab_free+0xac>)
   21088:	4921      	ldr	r1, [pc, #132]	; (21110 <k_mem_slab_free+0xb0>)
   2108a:	4822      	ldr	r0, [pc, #136]	; (21114 <k_mem_slab_free+0xb4>)
   2108c:	f005 fc49 	bl	26922 <assert_print>
   21090:	4629      	mov	r1, r5
   21092:	4821      	ldr	r0, [pc, #132]	; (21118 <k_mem_slab_free+0xb8>)
   21094:	f005 fc45 	bl	26922 <assert_print>
   21098:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2109a:	481c      	ldr	r0, [pc, #112]	; (2110c <k_mem_slab_free+0xac>)
   2109c:	f005 fc3a 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   210a0:	4628      	mov	r0, r5
   210a2:	f000 f979 	bl	21398 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   210a6:	f8d4 8018 	ldr.w	r8, [r4, #24]
   210aa:	f1b8 0f00 	cmp.w	r8, #0
   210ae:	d10f      	bne.n	210d0 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   210b0:	4620      	mov	r0, r4
   210b2:	f002 f96b 	bl	2338c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   210b6:	b158      	cbz	r0, 210d0 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   210b8:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   210ba:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   210be:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   210c0:	f001 fb8c 	bl	227dc <z_ready_thread>
			z_reschedule(&slab->lock, key);
   210c4:	4639      	mov	r1, r7
   210c6:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   210c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   210cc:	f001 bc12 	b.w	228f4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   210d0:	6833      	ldr	r3, [r6, #0]
   210d2:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210d4:	4628      	mov	r0, r5
   210d6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   210d8:	6833      	ldr	r3, [r6, #0]
   210da:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   210dc:	69e3      	ldr	r3, [r4, #28]
   210de:	3b01      	subs	r3, #1
   210e0:	61e3      	str	r3, [r4, #28]
   210e2:	f000 f94b 	bl	2137c <z_spin_unlock_valid>
   210e6:	b958      	cbnz	r0, 21100 <k_mem_slab_free+0xa0>
   210e8:	23c2      	movs	r3, #194	; 0xc2
   210ea:	4a08      	ldr	r2, [pc, #32]	; (2110c <k_mem_slab_free+0xac>)
   210ec:	490b      	ldr	r1, [pc, #44]	; (2111c <k_mem_slab_free+0xbc>)
   210ee:	4809      	ldr	r0, [pc, #36]	; (21114 <k_mem_slab_free+0xb4>)
   210f0:	f005 fc17 	bl	26922 <assert_print>
   210f4:	4629      	mov	r1, r5
   210f6:	480a      	ldr	r0, [pc, #40]	; (21120 <k_mem_slab_free+0xc0>)
   210f8:	f005 fc13 	bl	26922 <assert_print>
   210fc:	21c2      	movs	r1, #194	; 0xc2
   210fe:	e7cc      	b.n	2109a <k_mem_slab_free+0x3a>
	__asm__ volatile(
   21100:	f387 8811 	msr	BASEPRI, r7
   21104:	f3bf 8f6f 	isb	sy
}
   21108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2110c:	0002e6ba 	.word	0x0002e6ba
   21110:	0002e713 	.word	0x0002e713
   21114:	0002d881 	.word	0x0002d881
   21118:	0002e728 	.word	0x0002e728
   2111c:	0002e6e7 	.word	0x0002e6e7
   21120:	0002e6fe 	.word	0x0002e6fe

00021124 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21124:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   21126:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   21128:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   2112a:	2e0f      	cmp	r6, #15
   2112c:	d12a      	bne.n	21184 <z_setup_new_thread+0x60>
   2112e:	4821      	ldr	r0, [pc, #132]	; (211b4 <z_setup_new_thread+0x90>)
   21130:	4283      	cmp	r3, r0
   21132:	d12b      	bne.n	2118c <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21134:	f104 0058 	add.w	r0, r4, #88	; 0x58
   21138:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2113c:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   2113e:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   21140:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   21142:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21144:	3207      	adds	r2, #7
   21146:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   2114a:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   2114e:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   21150:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   21154:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   21156:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   2115a:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   2115c:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   2115e:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21160:	9202      	str	r2, [sp, #8]
   21162:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21164:	4620      	mov	r0, r4
   21166:	9201      	str	r2, [sp, #4]
   21168:	9a08      	ldr	r2, [sp, #32]
   2116a:	9200      	str	r2, [sp, #0]
   2116c:	4632      	mov	r2, r6
   2116e:	f7ef fbb1 	bl	108d4 <arch_new_thread>
	if (!_current) {
   21172:	4b11      	ldr	r3, [pc, #68]	; (211b8 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   21174:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   21176:	689b      	ldr	r3, [r3, #8]
   21178:	b103      	cbz	r3, 2117c <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   2117a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   2117c:	4630      	mov	r0, r6
   2117e:	6763      	str	r3, [r4, #116]	; 0x74
   21180:	b004      	add	sp, #16
   21182:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   21184:	f106 0010 	add.w	r0, r6, #16
   21188:	281e      	cmp	r0, #30
   2118a:	d9d3      	bls.n	21134 <z_setup_new_thread+0x10>
   2118c:	f44f 7306 	mov.w	r3, #536	; 0x218
   21190:	4a0a      	ldr	r2, [pc, #40]	; (211bc <z_setup_new_thread+0x98>)
   21192:	490b      	ldr	r1, [pc, #44]	; (211c0 <z_setup_new_thread+0x9c>)
   21194:	480b      	ldr	r0, [pc, #44]	; (211c4 <z_setup_new_thread+0xa0>)
   21196:	f005 fbc4 	bl	26922 <assert_print>
   2119a:	4631      	mov	r1, r6
   2119c:	480a      	ldr	r0, [pc, #40]	; (211c8 <z_setup_new_thread+0xa4>)
   2119e:	f06f 030f 	mvn.w	r3, #15
   211a2:	220e      	movs	r2, #14
   211a4:	f005 fbbd 	bl	26922 <assert_print>
   211a8:	f44f 7106 	mov.w	r1, #536	; 0x218
   211ac:	4803      	ldr	r0, [pc, #12]	; (211bc <z_setup_new_thread+0x98>)
   211ae:	f005 fbb1 	bl	26914 <assert_post_action>
   211b2:	bf00      	nop
   211b4:	000213a9 	.word	0x000213a9
   211b8:	20021b58 	.word	0x20021b58
   211bc:	00032cdb 	.word	0x00032cdb
   211c0:	00032cfe 	.word	0x00032cfe
   211c4:	0002d881 	.word	0x0002d881
   211c8:	00032d7e 	.word	0x00032d7e

000211cc <z_impl_k_thread_create>:
{
   211cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   211ce:	b087      	sub	sp, #28
   211d0:	4604      	mov	r4, r0
   211d2:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   211d6:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   211da:	b175      	cbz	r5, 211fa <z_impl_k_thread_create+0x2e>
   211dc:	4919      	ldr	r1, [pc, #100]	; (21244 <z_impl_k_thread_create+0x78>)
   211de:	f240 2387 	movw	r3, #647	; 0x287
   211e2:	4a19      	ldr	r2, [pc, #100]	; (21248 <z_impl_k_thread_create+0x7c>)
   211e4:	4819      	ldr	r0, [pc, #100]	; (2124c <z_impl_k_thread_create+0x80>)
   211e6:	f005 fb9c 	bl	26922 <assert_print>
   211ea:	4819      	ldr	r0, [pc, #100]	; (21250 <z_impl_k_thread_create+0x84>)
   211ec:	f005 fb99 	bl	26922 <assert_print>
   211f0:	f240 2187 	movw	r1, #647	; 0x287
   211f4:	4814      	ldr	r0, [pc, #80]	; (21248 <z_impl_k_thread_create+0x7c>)
   211f6:	f005 fb8d 	bl	26914 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   211fa:	9505      	str	r5, [sp, #20]
   211fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   211fe:	9504      	str	r5, [sp, #16]
   21200:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   21202:	9503      	str	r5, [sp, #12]
   21204:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   21206:	9502      	str	r5, [sp, #8]
   21208:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2120a:	9501      	str	r5, [sp, #4]
   2120c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2120e:	9500      	str	r5, [sp, #0]
   21210:	f7ff ff88 	bl	21124 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   21214:	f1b6 3fff 	cmp.w	r6, #4294967295
   21218:	bf08      	it	eq
   2121a:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   2121e:	d005      	beq.n	2122c <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21220:	ea56 0307 	orrs.w	r3, r6, r7
   21224:	d105      	bne.n	21232 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   21226:	4620      	mov	r0, r4
   21228:	f001 fba6 	bl	22978 <z_sched_start>
}
   2122c:	4620      	mov	r0, r4
   2122e:	b007      	add	sp, #28
   21230:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21232:	463a      	mov	r2, r7
   21234:	4633      	mov	r3, r6
   21236:	4907      	ldr	r1, [pc, #28]	; (21254 <z_impl_k_thread_create+0x88>)
   21238:	f104 0018 	add.w	r0, r4, #24
   2123c:	f002 fc16 	bl	23a6c <z_add_timeout>
   21240:	e7f4      	b.n	2122c <z_impl_k_thread_create+0x60>
   21242:	bf00      	nop
   21244:	00032daf 	.word	0x00032daf
   21248:	00032cdb 	.word	0x00032cdb
   2124c:	0002d881 	.word	0x0002d881
   21250:	00032dc1 	.word	0x00032dc1
   21254:	00023245 	.word	0x00023245

00021258 <z_init_static_threads>:
{
   21258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2125c:	4c39      	ldr	r4, [pc, #228]	; (21344 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2125e:	4d3a      	ldr	r5, [pc, #232]	; (21348 <z_init_static_threads+0xf0>)
{
   21260:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   21262:	42ac      	cmp	r4, r5
   21264:	4626      	mov	r6, r4
   21266:	d92a      	bls.n	212be <z_init_static_threads+0x66>
   21268:	4938      	ldr	r1, [pc, #224]	; (2134c <z_init_static_threads+0xf4>)
   2126a:	f240 23ee 	movw	r3, #750	; 0x2ee
   2126e:	4a38      	ldr	r2, [pc, #224]	; (21350 <z_init_static_threads+0xf8>)
   21270:	4838      	ldr	r0, [pc, #224]	; (21354 <z_init_static_threads+0xfc>)
   21272:	f005 fb56 	bl	26922 <assert_print>
   21276:	4838      	ldr	r0, [pc, #224]	; (21358 <z_init_static_threads+0x100>)
   21278:	f005 fb53 	bl	26922 <assert_print>
   2127c:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   21280:	4833      	ldr	r0, [pc, #204]	; (21350 <z_init_static_threads+0xf8>)
   21282:	f005 fb47 	bl	26914 <assert_post_action>
		z_setup_new_thread(
   21286:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2128a:	9305      	str	r3, [sp, #20]
   2128c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   21290:	9304      	str	r3, [sp, #16]
   21292:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21296:	9303      	str	r3, [sp, #12]
   21298:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2129c:	9302      	str	r3, [sp, #8]
   2129e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   212a2:	9301      	str	r3, [sp, #4]
   212a4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   212a8:	9300      	str	r3, [sp, #0]
   212aa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   212ae:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   212b2:	f7ff ff37 	bl	21124 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   212b6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   212ba:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   212bc:	e7d1      	b.n	21262 <z_init_static_threads+0xa>
   212be:	42ae      	cmp	r6, r5
   212c0:	f104 0430 	add.w	r4, r4, #48	; 0x30
   212c4:	d3df      	bcc.n	21286 <z_init_static_threads+0x2e>
	k_sched_lock();
   212c6:	f001 fba9 	bl	22a1c <k_sched_lock>
   212ca:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   212ce:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   212d2:	4c1c      	ldr	r4, [pc, #112]	; (21344 <z_init_static_threads+0xec>)
   212d4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2135c <z_init_static_threads+0x104>
   212d8:	42ac      	cmp	r4, r5
   212da:	d92c      	bls.n	21336 <z_init_static_threads+0xde>
   212dc:	491b      	ldr	r1, [pc, #108]	; (2134c <z_init_static_threads+0xf4>)
   212de:	f240 330d 	movw	r3, #781	; 0x30d
   212e2:	4a1b      	ldr	r2, [pc, #108]	; (21350 <z_init_static_threads+0xf8>)
   212e4:	481b      	ldr	r0, [pc, #108]	; (21354 <z_init_static_threads+0xfc>)
   212e6:	f005 fb1c 	bl	26922 <assert_print>
   212ea:	481b      	ldr	r0, [pc, #108]	; (21358 <z_init_static_threads+0x100>)
   212ec:	f005 fb19 	bl	26922 <assert_print>
   212f0:	f240 310d 	movw	r1, #781	; 0x30d
   212f4:	e7c4      	b.n	21280 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   212f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212f8:	1c5a      	adds	r2, r3, #1
   212fa:	d00d      	beq.n	21318 <z_init_static_threads+0xc0>
   212fc:	2100      	movs	r1, #0
   212fe:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   21300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   21304:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21308:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2130c:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21310:	d104      	bne.n	2131c <z_init_static_threads+0xc4>
	z_sched_start(thread);
   21312:	4640      	mov	r0, r8
   21314:	f001 fb30 	bl	22978 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   21318:	3430      	adds	r4, #48	; 0x30
   2131a:	e7dd      	b.n	212d8 <z_init_static_threads+0x80>
   2131c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21320:	2300      	movs	r3, #0
   21322:	f7e7 fe6d 	bl	9000 <__aeabi_uldivmod>
   21326:	4602      	mov	r2, r0
   21328:	460b      	mov	r3, r1
   2132a:	f108 0018 	add.w	r0, r8, #24
   2132e:	4649      	mov	r1, r9
   21330:	f002 fb9c 	bl	23a6c <z_add_timeout>
   21334:	e7f0      	b.n	21318 <z_init_static_threads+0xc0>
   21336:	d3de      	bcc.n	212f6 <z_init_static_threads+0x9e>
}
   21338:	b007      	add	sp, #28
   2133a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2133e:	f001 bbd9 	b.w	22af4 <k_sched_unlock>
   21342:	bf00      	nop
   21344:	0002c5b0 	.word	0x0002c5b0
   21348:	0002c700 	.word	0x0002c700
   2134c:	00032de6 	.word	0x00032de6
   21350:	00032cdb 	.word	0x00032cdb
   21354:	0002d881 	.word	0x0002d881
   21358:	0002e9b9 	.word	0x0002e9b9
   2135c:	00023245 	.word	0x00023245

00021360 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   21360:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   21362:	b138      	cbz	r0, 21374 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   21364:	4b04      	ldr	r3, [pc, #16]	; (21378 <z_spin_lock_valid+0x18>)
   21366:	f000 0003 	and.w	r0, r0, #3
   2136a:	7d1b      	ldrb	r3, [r3, #20]
   2136c:	1ac0      	subs	r0, r0, r3
   2136e:	bf18      	it	ne
   21370:	2001      	movne	r0, #1
   21372:	4770      	bx	lr
			return false;
		}
	}
	return true;
   21374:	2001      	movs	r0, #1
}
   21376:	4770      	bx	lr
   21378:	20021b58 	.word	0x20021b58

0002137c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2137c:	4a05      	ldr	r2, [pc, #20]	; (21394 <z_spin_unlock_valid+0x18>)
{
   2137e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21380:	7d11      	ldrb	r1, [r2, #20]
   21382:	6892      	ldr	r2, [r2, #8]
   21384:	430a      	orrs	r2, r1
   21386:	6801      	ldr	r1, [r0, #0]
   21388:	2000      	movs	r0, #0
   2138a:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   2138c:	bf04      	itt	eq
   2138e:	6018      	streq	r0, [r3, #0]
	return true;
   21390:	2001      	moveq	r0, #1
}
   21392:	4770      	bx	lr
   21394:	20021b58 	.word	0x20021b58

00021398 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   21398:	4b02      	ldr	r3, [pc, #8]	; (213a4 <z_spin_lock_set_owner+0xc>)
   2139a:	7d1a      	ldrb	r2, [r3, #20]
   2139c:	689b      	ldr	r3, [r3, #8]
   2139e:	4313      	orrs	r3, r2
   213a0:	6003      	str	r3, [r0, #0]
}
   213a2:	4770      	bx	lr
   213a4:	20021b58 	.word	0x20021b58

000213a8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   213a8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   213aa:	4c13      	ldr	r4, [pc, #76]	; (213f8 <idle+0x50>)
   213ac:	68a3      	ldr	r3, [r4, #8]
   213ae:	f993 300e 	ldrsb.w	r3, [r3, #14]
   213b2:	2b00      	cmp	r3, #0
   213b4:	db10      	blt.n	213d8 <idle+0x30>
   213b6:	4d11      	ldr	r5, [pc, #68]	; (213fc <idle+0x54>)
	__asm__ volatile(
   213b8:	f04f 0220 	mov.w	r2, #32
   213bc:	f3ef 8311 	mrs	r3, BASEPRI
   213c0:	f382 8812 	msr	BASEPRI_MAX, r2
   213c4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   213c8:	f002 fc62 	bl	23c90 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   213cc:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   213ce:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   213d0:	b963      	cbnz	r3, 213ec <idle+0x44>
	arch_cpu_idle();
   213d2:	f7ef f925 	bl	10620 <arch_cpu_idle>
}
   213d6:	e7ef      	b.n	213b8 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   213d8:	4909      	ldr	r1, [pc, #36]	; (21400 <idle+0x58>)
   213da:	480a      	ldr	r0, [pc, #40]	; (21404 <idle+0x5c>)
   213dc:	2327      	movs	r3, #39	; 0x27
   213de:	4a0a      	ldr	r2, [pc, #40]	; (21408 <idle+0x60>)
   213e0:	f005 fa9f 	bl	26922 <assert_print>
   213e4:	2127      	movs	r1, #39	; 0x27
   213e6:	4808      	ldr	r0, [pc, #32]	; (21408 <idle+0x60>)
   213e8:	f005 fa94 	bl	26914 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   213ec:	f7ee fe50 	bl	10090 <pm_system_suspend>
   213f0:	2800      	cmp	r0, #0
   213f2:	d1e1      	bne.n	213b8 <idle+0x10>
   213f4:	e7ed      	b.n	213d2 <idle+0x2a>
   213f6:	bf00      	nop
   213f8:	20021b58 	.word	0x20021b58
   213fc:	200228ed 	.word	0x200228ed
   21400:	00032e34 	.word	0x00032e34
   21404:	0002d881 	.word	0x0002d881
   21408:	00032e13 	.word	0x00032e13

0002140c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2140c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21410:	4604      	mov	r4, r0
   21412:	4617      	mov	r7, r2
   21414:	461e      	mov	r6, r3
   21416:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2141a:	b165      	cbz	r5, 21436 <z_impl_k_mutex_lock+0x2a>
   2141c:	4958      	ldr	r1, [pc, #352]	; (21580 <z_impl_k_mutex_lock+0x174>)
   2141e:	2365      	movs	r3, #101	; 0x65
   21420:	4a58      	ldr	r2, [pc, #352]	; (21584 <z_impl_k_mutex_lock+0x178>)
   21422:	4859      	ldr	r0, [pc, #356]	; (21588 <z_impl_k_mutex_lock+0x17c>)
   21424:	f005 fa7d 	bl	26922 <assert_print>
   21428:	4858      	ldr	r0, [pc, #352]	; (2158c <z_impl_k_mutex_lock+0x180>)
   2142a:	f005 fa7a 	bl	26922 <assert_print>
   2142e:	2165      	movs	r1, #101	; 0x65
   21430:	4854      	ldr	r0, [pc, #336]	; (21584 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21432:	f005 fa6f 	bl	26914 <assert_post_action>
   21436:	f04f 0320 	mov.w	r3, #32
   2143a:	f3ef 8811 	mrs	r8, BASEPRI
   2143e:	f383 8812 	msr	BASEPRI_MAX, r3
   21442:	f3bf 8f6f 	isb	sy
   21446:	4852      	ldr	r0, [pc, #328]	; (21590 <z_impl_k_mutex_lock+0x184>)
   21448:	f7ff ff8a 	bl	21360 <z_spin_lock_valid>
   2144c:	b960      	cbnz	r0, 21468 <z_impl_k_mutex_lock+0x5c>
   2144e:	2394      	movs	r3, #148	; 0x94
   21450:	4a50      	ldr	r2, [pc, #320]	; (21594 <z_impl_k_mutex_lock+0x188>)
   21452:	4951      	ldr	r1, [pc, #324]	; (21598 <z_impl_k_mutex_lock+0x18c>)
   21454:	484c      	ldr	r0, [pc, #304]	; (21588 <z_impl_k_mutex_lock+0x17c>)
   21456:	f005 fa64 	bl	26922 <assert_print>
   2145a:	494d      	ldr	r1, [pc, #308]	; (21590 <z_impl_k_mutex_lock+0x184>)
   2145c:	484f      	ldr	r0, [pc, #316]	; (2159c <z_impl_k_mutex_lock+0x190>)
   2145e:	f005 fa60 	bl	26922 <assert_print>
   21462:	2194      	movs	r1, #148	; 0x94
   21464:	484b      	ldr	r0, [pc, #300]	; (21594 <z_impl_k_mutex_lock+0x188>)
   21466:	e7e4      	b.n	21432 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   21468:	4849      	ldr	r0, [pc, #292]	; (21590 <z_impl_k_mutex_lock+0x184>)
   2146a:	f7ff ff95 	bl	21398 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2146e:	68e3      	ldr	r3, [r4, #12]
   21470:	4a4b      	ldr	r2, [pc, #300]	; (215a0 <z_impl_k_mutex_lock+0x194>)
   21472:	b19b      	cbz	r3, 2149c <z_impl_k_mutex_lock+0x90>
   21474:	68a0      	ldr	r0, [r4, #8]
   21476:	6891      	ldr	r1, [r2, #8]
   21478:	4288      	cmp	r0, r1
   2147a:	d027      	beq.n	214cc <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2147c:	ea57 0306 	orrs.w	r3, r7, r6
   21480:	d12c      	bne.n	214dc <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21482:	4843      	ldr	r0, [pc, #268]	; (21590 <z_impl_k_mutex_lock+0x184>)
   21484:	f7ff ff7a 	bl	2137c <z_spin_unlock_valid>
   21488:	b1a0      	cbz	r0, 214b4 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   2148a:	f388 8811 	msr	BASEPRI, r8
   2148e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   21492:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   21496:	b002      	add	sp, #8
   21498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2149c:	6891      	ldr	r1, [r2, #8]
   2149e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   214a2:	3301      	adds	r3, #1
   214a4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   214a6:	6893      	ldr	r3, [r2, #8]
   214a8:	4839      	ldr	r0, [pc, #228]	; (21590 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   214aa:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   214ac:	60a3      	str	r3, [r4, #8]
   214ae:	f7ff ff65 	bl	2137c <z_spin_unlock_valid>
   214b2:	b968      	cbnz	r0, 214d0 <z_impl_k_mutex_lock+0xc4>
   214b4:	23c2      	movs	r3, #194	; 0xc2
   214b6:	4a37      	ldr	r2, [pc, #220]	; (21594 <z_impl_k_mutex_lock+0x188>)
   214b8:	493a      	ldr	r1, [pc, #232]	; (215a4 <z_impl_k_mutex_lock+0x198>)
   214ba:	4833      	ldr	r0, [pc, #204]	; (21588 <z_impl_k_mutex_lock+0x17c>)
   214bc:	f005 fa31 	bl	26922 <assert_print>
   214c0:	4933      	ldr	r1, [pc, #204]	; (21590 <z_impl_k_mutex_lock+0x184>)
   214c2:	4839      	ldr	r0, [pc, #228]	; (215a8 <z_impl_k_mutex_lock+0x19c>)
   214c4:	f005 fa2d 	bl	26922 <assert_print>
   214c8:	21c2      	movs	r1, #194	; 0xc2
   214ca:	e7cb      	b.n	21464 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   214cc:	6921      	ldr	r1, [r4, #16]
   214ce:	e7e8      	b.n	214a2 <z_impl_k_mutex_lock+0x96>
   214d0:	f388 8811 	msr	BASEPRI, r8
   214d4:	f3bf 8f6f 	isb	sy
		return 0;
   214d8:	2000      	movs	r0, #0
   214da:	e7dc      	b.n	21496 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   214dc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   214e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   214e4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   214e8:	4299      	cmp	r1, r3
   214ea:	bfa8      	it	ge
   214ec:	4619      	movge	r1, r3
   214ee:	4291      	cmp	r1, r2
   214f0:	bfb8      	it	lt
   214f2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   214f4:	428b      	cmp	r3, r1
   214f6:	dd02      	ble.n	214fe <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   214f8:	f00a f819 	bl	2b52e <adjust_owner_prio.isra.0>
   214fc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   214fe:	4622      	mov	r2, r4
   21500:	4641      	mov	r1, r8
   21502:	e9cd 7600 	strd	r7, r6, [sp]
   21506:	4822      	ldr	r0, [pc, #136]	; (21590 <z_impl_k_mutex_lock+0x184>)
   21508:	f001 fcc2 	bl	22e90 <z_pend_curr>
	if (got_mutex == 0) {
   2150c:	2800      	cmp	r0, #0
   2150e:	d0e3      	beq.n	214d8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   21510:	f04f 0320 	mov.w	r3, #32
   21514:	f3ef 8611 	mrs	r6, BASEPRI
   21518:	f383 8812 	msr	BASEPRI_MAX, r3
   2151c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21520:	481b      	ldr	r0, [pc, #108]	; (21590 <z_impl_k_mutex_lock+0x184>)
   21522:	f7ff ff1d 	bl	21360 <z_spin_lock_valid>
   21526:	2800      	cmp	r0, #0
   21528:	d091      	beq.n	2144e <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   2152a:	4819      	ldr	r0, [pc, #100]	; (21590 <z_impl_k_mutex_lock+0x184>)
   2152c:	f7ff ff34 	bl	21398 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   21530:	68a0      	ldr	r0, [r4, #8]
   21532:	b1c0      	cbz	r0, 21566 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   21534:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   21536:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21538:	429c      	cmp	r4, r3
   2153a:	d00a      	beq.n	21552 <z_impl_k_mutex_lock+0x146>
   2153c:	b14b      	cbz	r3, 21552 <z_impl_k_mutex_lock+0x146>
   2153e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   21542:	4299      	cmp	r1, r3
   21544:	bfa8      	it	ge
   21546:	4619      	movge	r1, r3
   21548:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2154c:	4299      	cmp	r1, r3
   2154e:	bfb8      	it	lt
   21550:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   21552:	f009 ffec 	bl	2b52e <adjust_owner_prio.isra.0>
   21556:	b130      	cbz	r0, 21566 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   21558:	4631      	mov	r1, r6
   2155a:	480d      	ldr	r0, [pc, #52]	; (21590 <z_impl_k_mutex_lock+0x184>)
   2155c:	f001 f9ca 	bl	228f4 <z_reschedule>
	return -EAGAIN;
   21560:	f06f 000a 	mvn.w	r0, #10
   21564:	e797      	b.n	21496 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   21566:	2d00      	cmp	r5, #0
   21568:	d1f6      	bne.n	21558 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2156a:	4809      	ldr	r0, [pc, #36]	; (21590 <z_impl_k_mutex_lock+0x184>)
   2156c:	f7ff ff06 	bl	2137c <z_spin_unlock_valid>
   21570:	2800      	cmp	r0, #0
   21572:	d09f      	beq.n	214b4 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   21574:	f386 8811 	msr	BASEPRI, r6
   21578:	f3bf 8f6f 	isb	sy
   2157c:	e7f0      	b.n	21560 <z_impl_k_mutex_lock+0x154>
   2157e:	bf00      	nop
   21580:	00032daf 	.word	0x00032daf
   21584:	00032e5c 	.word	0x00032e5c
   21588:	0002d881 	.word	0x0002d881
   2158c:	00032e7e 	.word	0x00032e7e
   21590:	20021b80 	.word	0x20021b80
   21594:	0002e6ba 	.word	0x0002e6ba
   21598:	0002e713 	.word	0x0002e713
   2159c:	0002e728 	.word	0x0002e728
   215a0:	20021b58 	.word	0x20021b58
   215a4:	0002e6e7 	.word	0x0002e6e7
   215a8:	0002e6fe 	.word	0x0002e6fe

000215ac <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   215ac:	b570      	push	{r4, r5, r6, lr}
   215ae:	4604      	mov	r4, r0
   215b0:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   215b4:	b166      	cbz	r6, 215d0 <z_impl_k_mutex_unlock+0x24>
   215b6:	4938      	ldr	r1, [pc, #224]	; (21698 <z_impl_k_mutex_unlock+0xec>)
   215b8:	23cd      	movs	r3, #205	; 0xcd
   215ba:	4a38      	ldr	r2, [pc, #224]	; (2169c <z_impl_k_mutex_unlock+0xf0>)
   215bc:	4838      	ldr	r0, [pc, #224]	; (216a0 <z_impl_k_mutex_unlock+0xf4>)
   215be:	f005 f9b0 	bl	26922 <assert_print>
   215c2:	4838      	ldr	r0, [pc, #224]	; (216a4 <z_impl_k_mutex_unlock+0xf8>)
   215c4:	f005 f9ad 	bl	26922 <assert_print>
   215c8:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   215ca:	4834      	ldr	r0, [pc, #208]	; (2169c <z_impl_k_mutex_unlock+0xf0>)
   215cc:	f005 f9a2 	bl	26914 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   215d0:	6883      	ldr	r3, [r0, #8]
   215d2:	2b00      	cmp	r3, #0
   215d4:	d059      	beq.n	2168a <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   215d6:	4a34      	ldr	r2, [pc, #208]	; (216a8 <z_impl_k_mutex_unlock+0xfc>)
   215d8:	6892      	ldr	r2, [r2, #8]
   215da:	4293      	cmp	r3, r2
   215dc:	d158      	bne.n	21690 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   215de:	68c3      	ldr	r3, [r0, #12]
   215e0:	b93b      	cbnz	r3, 215f2 <z_impl_k_mutex_unlock+0x46>
   215e2:	4932      	ldr	r1, [pc, #200]	; (216ac <z_impl_k_mutex_unlock+0x100>)
   215e4:	23e5      	movs	r3, #229	; 0xe5
   215e6:	4a2d      	ldr	r2, [pc, #180]	; (2169c <z_impl_k_mutex_unlock+0xf0>)
   215e8:	482d      	ldr	r0, [pc, #180]	; (216a0 <z_impl_k_mutex_unlock+0xf4>)
   215ea:	f005 f99a 	bl	26922 <assert_print>
   215ee:	21e5      	movs	r1, #229	; 0xe5
   215f0:	e7eb      	b.n	215ca <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   215f2:	2b01      	cmp	r3, #1
   215f4:	d003      	beq.n	215fe <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   215f6:	3b01      	subs	r3, #1
   215f8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   215fa:	2000      	movs	r0, #0
}
   215fc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   215fe:	f04f 0320 	mov.w	r3, #32
   21602:	f3ef 8511 	mrs	r5, BASEPRI
   21606:	f383 8812 	msr	BASEPRI_MAX, r3
   2160a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2160e:	4828      	ldr	r0, [pc, #160]	; (216b0 <z_impl_k_mutex_unlock+0x104>)
   21610:	f7ff fea6 	bl	21360 <z_spin_lock_valid>
   21614:	b960      	cbnz	r0, 21630 <z_impl_k_mutex_unlock+0x84>
   21616:	2394      	movs	r3, #148	; 0x94
   21618:	4a26      	ldr	r2, [pc, #152]	; (216b4 <z_impl_k_mutex_unlock+0x108>)
   2161a:	4927      	ldr	r1, [pc, #156]	; (216b8 <z_impl_k_mutex_unlock+0x10c>)
   2161c:	4820      	ldr	r0, [pc, #128]	; (216a0 <z_impl_k_mutex_unlock+0xf4>)
   2161e:	f005 f980 	bl	26922 <assert_print>
   21622:	4923      	ldr	r1, [pc, #140]	; (216b0 <z_impl_k_mutex_unlock+0x104>)
   21624:	4825      	ldr	r0, [pc, #148]	; (216bc <z_impl_k_mutex_unlock+0x110>)
   21626:	f005 f97c 	bl	26922 <assert_print>
   2162a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2162c:	4821      	ldr	r0, [pc, #132]	; (216b4 <z_impl_k_mutex_unlock+0x108>)
   2162e:	e7cd      	b.n	215cc <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   21630:	481f      	ldr	r0, [pc, #124]	; (216b0 <z_impl_k_mutex_unlock+0x104>)
   21632:	f7ff feb1 	bl	21398 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   21636:	6921      	ldr	r1, [r4, #16]
   21638:	68a0      	ldr	r0, [r4, #8]
   2163a:	f009 ff78 	bl	2b52e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2163e:	4620      	mov	r0, r4
   21640:	f001 fea4 	bl	2338c <z_unpend_first_thread>
	mutex->owner = new_owner;
   21644:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   21646:	b150      	cbz	r0, 2165e <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   21648:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2164c:	6122      	str	r2, [r4, #16]
   2164e:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   21650:	f001 f8c4 	bl	227dc <z_ready_thread>
		z_reschedule(&lock, key);
   21654:	4629      	mov	r1, r5
   21656:	4816      	ldr	r0, [pc, #88]	; (216b0 <z_impl_k_mutex_unlock+0x104>)
   21658:	f001 f94c 	bl	228f4 <z_reschedule>
   2165c:	e7cd      	b.n	215fa <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   2165e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21660:	4813      	ldr	r0, [pc, #76]	; (216b0 <z_impl_k_mutex_unlock+0x104>)
   21662:	f7ff fe8b 	bl	2137c <z_spin_unlock_valid>
   21666:	b958      	cbnz	r0, 21680 <z_impl_k_mutex_unlock+0xd4>
   21668:	23c2      	movs	r3, #194	; 0xc2
   2166a:	4a12      	ldr	r2, [pc, #72]	; (216b4 <z_impl_k_mutex_unlock+0x108>)
   2166c:	4914      	ldr	r1, [pc, #80]	; (216c0 <z_impl_k_mutex_unlock+0x114>)
   2166e:	480c      	ldr	r0, [pc, #48]	; (216a0 <z_impl_k_mutex_unlock+0xf4>)
   21670:	f005 f957 	bl	26922 <assert_print>
   21674:	490e      	ldr	r1, [pc, #56]	; (216b0 <z_impl_k_mutex_unlock+0x104>)
   21676:	4813      	ldr	r0, [pc, #76]	; (216c4 <z_impl_k_mutex_unlock+0x118>)
   21678:	f005 f953 	bl	26922 <assert_print>
   2167c:	21c2      	movs	r1, #194	; 0xc2
   2167e:	e7d5      	b.n	2162c <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   21680:	f385 8811 	msr	BASEPRI, r5
   21684:	f3bf 8f6f 	isb	sy
   21688:	e7b7      	b.n	215fa <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   2168a:	f06f 0015 	mvn.w	r0, #21
   2168e:	e7b5      	b.n	215fc <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   21690:	f04f 30ff 	mov.w	r0, #4294967295
   21694:	e7b2      	b.n	215fc <z_impl_k_mutex_unlock+0x50>
   21696:	bf00      	nop
   21698:	00032daf 	.word	0x00032daf
   2169c:	00032e5c 	.word	0x00032e5c
   216a0:	0002d881 	.word	0x0002d881
   216a4:	00032e7e 	.word	0x00032e7e
   216a8:	20021b58 	.word	0x20021b58
   216ac:	00032ea3 	.word	0x00032ea3
   216b0:	20021b80 	.word	0x20021b80
   216b4:	0002e6ba 	.word	0x0002e6ba
   216b8:	0002e713 	.word	0x0002e713
   216bc:	0002e728 	.word	0x0002e728
   216c0:	0002e6e7 	.word	0x0002e6e7
   216c4:	0002e6fe 	.word	0x0002e6fe

000216c8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   216c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   216cc:	4604      	mov	r4, r0
   216ce:	460e      	mov	r6, r1
   216d0:	4690      	mov	r8, r2
   216d2:	4699      	mov	r9, r3
   216d4:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   216d8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   216dc:	f04f 0320 	mov.w	r3, #32
   216e0:	f3ef 8711 	mrs	r7, BASEPRI
   216e4:	f383 8812 	msr	BASEPRI_MAX, r3
   216e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216ec:	4628      	mov	r0, r5
   216ee:	f7ff fe37 	bl	21360 <z_spin_lock_valid>
   216f2:	b968      	cbnz	r0, 21710 <queue_insert+0x48>
   216f4:	2394      	movs	r3, #148	; 0x94
   216f6:	4a3b      	ldr	r2, [pc, #236]	; (217e4 <queue_insert+0x11c>)
   216f8:	493b      	ldr	r1, [pc, #236]	; (217e8 <queue_insert+0x120>)
   216fa:	483c      	ldr	r0, [pc, #240]	; (217ec <queue_insert+0x124>)
   216fc:	f005 f911 	bl	26922 <assert_print>
   21700:	4629      	mov	r1, r5
   21702:	483b      	ldr	r0, [pc, #236]	; (217f0 <queue_insert+0x128>)
   21704:	f005 f90d 	bl	26922 <assert_print>
   21708:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2170a:	4836      	ldr	r0, [pc, #216]	; (217e4 <queue_insert+0x11c>)
   2170c:	f005 f902 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   21710:	4628      	mov	r0, r5
   21712:	f7ff fe41 	bl	21398 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   21716:	f1ba 0f00 	cmp.w	sl, #0
   2171a:	d000      	beq.n	2171e <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2171c:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2171e:	f104 000c 	add.w	r0, r4, #12
   21722:	f001 fe33 	bl	2338c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   21726:	b158      	cbz	r0, 21740 <queue_insert+0x78>
   21728:	2300      	movs	r3, #0
   2172a:	f8c0 8014 	str.w	r8, [r0, #20]
   2172e:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   21730:	f001 f854 	bl	227dc <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   21734:	4628      	mov	r0, r5
   21736:	4639      	mov	r1, r7
   21738:	f001 f8dc 	bl	228f4 <z_reschedule>
		return 0;
   2173c:	2000      	movs	r0, #0
   2173e:	e01c      	b.n	2177a <queue_insert+0xb2>
	if (alloc) {
   21740:	f1b9 0f00 	cmp.w	r9, #0
   21744:	d02b      	beq.n	2179e <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   21746:	2108      	movs	r1, #8
   21748:	f003 f8da 	bl	24900 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2174c:	b9b8      	cbnz	r0, 2177e <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2174e:	4628      	mov	r0, r5
   21750:	f7ff fe14 	bl	2137c <z_spin_unlock_valid>
   21754:	b958      	cbnz	r0, 2176e <queue_insert+0xa6>
   21756:	23c2      	movs	r3, #194	; 0xc2
   21758:	4a22      	ldr	r2, [pc, #136]	; (217e4 <queue_insert+0x11c>)
   2175a:	4926      	ldr	r1, [pc, #152]	; (217f4 <queue_insert+0x12c>)
   2175c:	4823      	ldr	r0, [pc, #140]	; (217ec <queue_insert+0x124>)
   2175e:	f005 f8e0 	bl	26922 <assert_print>
   21762:	4629      	mov	r1, r5
   21764:	4824      	ldr	r0, [pc, #144]	; (217f8 <queue_insert+0x130>)
   21766:	f005 f8dc 	bl	26922 <assert_print>
   2176a:	21c2      	movs	r1, #194	; 0xc2
   2176c:	e7cd      	b.n	2170a <queue_insert+0x42>
	__asm__ volatile(
   2176e:	f387 8811 	msr	BASEPRI, r7
   21772:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   21776:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   2177a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2177e:	2201      	movs	r2, #1
		anode->data = data;
   21780:	f8c0 8004 	str.w	r8, [r0, #4]
   21784:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21786:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21788:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2178c:	b95e      	cbnz	r6, 217a6 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2178e:	6822      	ldr	r2, [r4, #0]
   21790:	430a      	orrs	r2, r1
   21792:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21794:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   21796:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21798:	b96a      	cbnz	r2, 217b6 <queue_insert+0xee>
	list->tail = node;
   2179a:	6060      	str	r0, [r4, #4]
}
   2179c:	e00b      	b.n	217b6 <queue_insert+0xee>
}
   2179e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   217a0:	f8c8 9000 	str.w	r9, [r8]
}
   217a4:	e7ef      	b.n	21786 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   217a6:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   217a8:	2a03      	cmp	r2, #3
   217aa:	d810      	bhi.n	217ce <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   217ac:	6001      	str	r1, [r0, #0]
	return list->tail;
   217ae:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   217b0:	b939      	cbnz	r1, 217c2 <queue_insert+0xfa>
	list->head = node;
   217b2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   217b6:	2104      	movs	r1, #4
   217b8:	f104 0014 	add.w	r0, r4, #20
   217bc:	f00a f879 	bl	2b8b2 <z_handle_obj_poll_events>
   217c0:	e7b8      	b.n	21734 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   217c2:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   217c4:	f002 0203 	and.w	r2, r2, #3
   217c8:	4302      	orrs	r2, r0
   217ca:	600a      	str	r2, [r1, #0]
   217cc:	e7e5      	b.n	2179a <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   217ce:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   217d2:	430a      	orrs	r2, r1
   217d4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   217d6:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   217d8:	f002 0203 	and.w	r2, r2, #3
   217dc:	ea40 0302 	orr.w	r3, r0, r2
   217e0:	6033      	str	r3, [r6, #0]
}
   217e2:	e7e8      	b.n	217b6 <queue_insert+0xee>
   217e4:	0002e6ba 	.word	0x0002e6ba
   217e8:	0002e713 	.word	0x0002e713
   217ec:	0002d881 	.word	0x0002d881
   217f0:	0002e728 	.word	0x0002e728
   217f4:	0002e6e7 	.word	0x0002e6e7
   217f8:	0002e6fe 	.word	0x0002e6fe

000217fc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   217fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21800:	4606      	mov	r6, r0
   21802:	4691      	mov	r9, r2
   21804:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21806:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2180a:	f04f 0320 	mov.w	r3, #32
   2180e:	f3ef 8811 	mrs	r8, BASEPRI
   21812:	f383 8812 	msr	BASEPRI_MAX, r3
   21816:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2181a:	4628      	mov	r0, r5
   2181c:	f7ff fda0 	bl	21360 <z_spin_lock_valid>
   21820:	b968      	cbnz	r0, 2183e <z_impl_k_queue_get+0x42>
   21822:	2394      	movs	r3, #148	; 0x94
   21824:	4a23      	ldr	r2, [pc, #140]	; (218b4 <z_impl_k_queue_get+0xb8>)
   21826:	4924      	ldr	r1, [pc, #144]	; (218b8 <z_impl_k_queue_get+0xbc>)
   21828:	4824      	ldr	r0, [pc, #144]	; (218bc <z_impl_k_queue_get+0xc0>)
   2182a:	f005 f87a 	bl	26922 <assert_print>
   2182e:	4629      	mov	r1, r5
   21830:	4823      	ldr	r0, [pc, #140]	; (218c0 <z_impl_k_queue_get+0xc4>)
   21832:	f005 f876 	bl	26922 <assert_print>
   21836:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21838:	481e      	ldr	r0, [pc, #120]	; (218b4 <z_impl_k_queue_get+0xb8>)
   2183a:	f005 f86b 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   2183e:	4628      	mov	r0, r5
   21840:	f7ff fdaa 	bl	21398 <z_spin_lock_set_owner>
	return list->head;
   21844:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   21846:	b1ec      	cbz	r4, 21884 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21848:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2184a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2184c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21850:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   21852:	4620      	mov	r0, r4
   21854:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   21858:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2185a:	bf08      	it	eq
   2185c:	6073      	streq	r3, [r6, #4]
   2185e:	f009 fe75 	bl	2b54c <z_queue_node_peek>
   21862:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21864:	4628      	mov	r0, r5
   21866:	f7ff fd89 	bl	2137c <z_spin_unlock_valid>
   2186a:	b9d8      	cbnz	r0, 218a4 <z_impl_k_queue_get+0xa8>
   2186c:	23c2      	movs	r3, #194	; 0xc2
   2186e:	4a11      	ldr	r2, [pc, #68]	; (218b4 <z_impl_k_queue_get+0xb8>)
   21870:	4914      	ldr	r1, [pc, #80]	; (218c4 <z_impl_k_queue_get+0xc8>)
   21872:	4812      	ldr	r0, [pc, #72]	; (218bc <z_impl_k_queue_get+0xc0>)
   21874:	f005 f855 	bl	26922 <assert_print>
   21878:	4629      	mov	r1, r5
   2187a:	4813      	ldr	r0, [pc, #76]	; (218c8 <z_impl_k_queue_get+0xcc>)
   2187c:	f005 f851 	bl	26922 <assert_print>
   21880:	21c2      	movs	r1, #194	; 0xc2
   21882:	e7d9      	b.n	21838 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21884:	ea59 0307 	orrs.w	r3, r9, r7
   21888:	d0ec      	beq.n	21864 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2188a:	4641      	mov	r1, r8
   2188c:	4628      	mov	r0, r5
   2188e:	e9cd 9700 	strd	r9, r7, [sp]
   21892:	f106 020c 	add.w	r2, r6, #12
   21896:	f001 fafb 	bl	22e90 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   2189a:	b938      	cbnz	r0, 218ac <z_impl_k_queue_get+0xb0>
   2189c:	4b0b      	ldr	r3, [pc, #44]	; (218cc <z_impl_k_queue_get+0xd0>)
   2189e:	689b      	ldr	r3, [r3, #8]
   218a0:	695c      	ldr	r4, [r3, #20]
   218a2:	e003      	b.n	218ac <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   218a4:	f388 8811 	msr	BASEPRI, r8
   218a8:	f3bf 8f6f 	isb	sy
}
   218ac:	4620      	mov	r0, r4
   218ae:	b003      	add	sp, #12
   218b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   218b4:	0002e6ba 	.word	0x0002e6ba
   218b8:	0002e713 	.word	0x0002e713
   218bc:	0002d881 	.word	0x0002d881
   218c0:	0002e728 	.word	0x0002e728
   218c4:	0002e6e7 	.word	0x0002e6e7
   218c8:	0002e6fe 	.word	0x0002e6fe
   218cc:	20021b58 	.word	0x20021b58

000218d0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   218d0:	b538      	push	{r3, r4, r5, lr}
   218d2:	4604      	mov	r4, r0
	__asm__ volatile(
   218d4:	f04f 0320 	mov.w	r3, #32
   218d8:	f3ef 8511 	mrs	r5, BASEPRI
   218dc:	f383 8812 	msr	BASEPRI_MAX, r3
   218e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218e4:	4817      	ldr	r0, [pc, #92]	; (21944 <z_impl_k_sem_give+0x74>)
   218e6:	f7ff fd3b 	bl	21360 <z_spin_lock_valid>
   218ea:	b968      	cbnz	r0, 21908 <z_impl_k_sem_give+0x38>
   218ec:	2394      	movs	r3, #148	; 0x94
   218ee:	4a16      	ldr	r2, [pc, #88]	; (21948 <z_impl_k_sem_give+0x78>)
   218f0:	4916      	ldr	r1, [pc, #88]	; (2194c <z_impl_k_sem_give+0x7c>)
   218f2:	4817      	ldr	r0, [pc, #92]	; (21950 <z_impl_k_sem_give+0x80>)
   218f4:	f005 f815 	bl	26922 <assert_print>
   218f8:	4912      	ldr	r1, [pc, #72]	; (21944 <z_impl_k_sem_give+0x74>)
   218fa:	4816      	ldr	r0, [pc, #88]	; (21954 <z_impl_k_sem_give+0x84>)
   218fc:	f005 f811 	bl	26922 <assert_print>
   21900:	2194      	movs	r1, #148	; 0x94
   21902:	4811      	ldr	r0, [pc, #68]	; (21948 <z_impl_k_sem_give+0x78>)
   21904:	f005 f806 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   21908:	480e      	ldr	r0, [pc, #56]	; (21944 <z_impl_k_sem_give+0x74>)
   2190a:	f7ff fd45 	bl	21398 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2190e:	4620      	mov	r0, r4
   21910:	f001 fd3c 	bl	2338c <z_unpend_first_thread>

	if (thread != NULL) {
   21914:	b148      	cbz	r0, 2192a <z_impl_k_sem_give+0x5a>
   21916:	2200      	movs	r2, #0
   21918:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2191a:	f000 ff5f 	bl	227dc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2191e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21924:	4807      	ldr	r0, [pc, #28]	; (21944 <z_impl_k_sem_give+0x74>)
   21926:	f000 bfe5 	b.w	228f4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2192a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2192e:	429a      	cmp	r2, r3
   21930:	bf18      	it	ne
   21932:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21934:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21936:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21938:	f104 0010 	add.w	r0, r4, #16
   2193c:	f009 ffb9 	bl	2b8b2 <z_handle_obj_poll_events>
}
   21940:	e7ed      	b.n	2191e <z_impl_k_sem_give+0x4e>
   21942:	bf00      	nop
   21944:	20021b84 	.word	0x20021b84
   21948:	0002e6ba 	.word	0x0002e6ba
   2194c:	0002e713 	.word	0x0002e713
   21950:	0002d881 	.word	0x0002d881
   21954:	0002e728 	.word	0x0002e728

00021958 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2195a:	4604      	mov	r4, r0
   2195c:	4616      	mov	r6, r2
   2195e:	461d      	mov	r5, r3
   21960:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   21964:	b17b      	cbz	r3, 21986 <z_impl_k_sem_take+0x2e>
   21966:	ea52 0305 	orrs.w	r3, r2, r5
   2196a:	d00c      	beq.n	21986 <z_impl_k_sem_take+0x2e>
   2196c:	492d      	ldr	r1, [pc, #180]	; (21a24 <z_impl_k_sem_take+0xcc>)
   2196e:	2379      	movs	r3, #121	; 0x79
   21970:	4a2d      	ldr	r2, [pc, #180]	; (21a28 <z_impl_k_sem_take+0xd0>)
   21972:	482e      	ldr	r0, [pc, #184]	; (21a2c <z_impl_k_sem_take+0xd4>)
   21974:	f004 ffd5 	bl	26922 <assert_print>
   21978:	482d      	ldr	r0, [pc, #180]	; (21a30 <z_impl_k_sem_take+0xd8>)
   2197a:	f004 ffd2 	bl	26922 <assert_print>
   2197e:	2179      	movs	r1, #121	; 0x79
   21980:	4829      	ldr	r0, [pc, #164]	; (21a28 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21982:	f004 ffc7 	bl	26914 <assert_post_action>
   21986:	f04f 0320 	mov.w	r3, #32
   2198a:	f3ef 8711 	mrs	r7, BASEPRI
   2198e:	f383 8812 	msr	BASEPRI_MAX, r3
   21992:	f3bf 8f6f 	isb	sy
   21996:	4827      	ldr	r0, [pc, #156]	; (21a34 <z_impl_k_sem_take+0xdc>)
   21998:	f7ff fce2 	bl	21360 <z_spin_lock_valid>
   2199c:	b960      	cbnz	r0, 219b8 <z_impl_k_sem_take+0x60>
   2199e:	2394      	movs	r3, #148	; 0x94
   219a0:	4a25      	ldr	r2, [pc, #148]	; (21a38 <z_impl_k_sem_take+0xe0>)
   219a2:	4926      	ldr	r1, [pc, #152]	; (21a3c <z_impl_k_sem_take+0xe4>)
   219a4:	4821      	ldr	r0, [pc, #132]	; (21a2c <z_impl_k_sem_take+0xd4>)
   219a6:	f004 ffbc 	bl	26922 <assert_print>
   219aa:	4922      	ldr	r1, [pc, #136]	; (21a34 <z_impl_k_sem_take+0xdc>)
   219ac:	4824      	ldr	r0, [pc, #144]	; (21a40 <z_impl_k_sem_take+0xe8>)
   219ae:	f004 ffb8 	bl	26922 <assert_print>
   219b2:	2194      	movs	r1, #148	; 0x94
   219b4:	4820      	ldr	r0, [pc, #128]	; (21a38 <z_impl_k_sem_take+0xe0>)
   219b6:	e7e4      	b.n	21982 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   219b8:	481e      	ldr	r0, [pc, #120]	; (21a34 <z_impl_k_sem_take+0xdc>)
   219ba:	f7ff fced 	bl	21398 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   219be:	68a3      	ldr	r3, [r4, #8]
   219c0:	b1c3      	cbz	r3, 219f4 <z_impl_k_sem_take+0x9c>
		sem->count--;
   219c2:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219c4:	481b      	ldr	r0, [pc, #108]	; (21a34 <z_impl_k_sem_take+0xdc>)
   219c6:	60a3      	str	r3, [r4, #8]
   219c8:	f7ff fcd8 	bl	2137c <z_spin_unlock_valid>
   219cc:	b958      	cbnz	r0, 219e6 <z_impl_k_sem_take+0x8e>
   219ce:	23c2      	movs	r3, #194	; 0xc2
   219d0:	4a19      	ldr	r2, [pc, #100]	; (21a38 <z_impl_k_sem_take+0xe0>)
   219d2:	491c      	ldr	r1, [pc, #112]	; (21a44 <z_impl_k_sem_take+0xec>)
   219d4:	4815      	ldr	r0, [pc, #84]	; (21a2c <z_impl_k_sem_take+0xd4>)
   219d6:	f004 ffa4 	bl	26922 <assert_print>
   219da:	4916      	ldr	r1, [pc, #88]	; (21a34 <z_impl_k_sem_take+0xdc>)
   219dc:	481a      	ldr	r0, [pc, #104]	; (21a48 <z_impl_k_sem_take+0xf0>)
   219de:	f004 ffa0 	bl	26922 <assert_print>
   219e2:	21c2      	movs	r1, #194	; 0xc2
   219e4:	e7e6      	b.n	219b4 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   219e6:	f387 8811 	msr	BASEPRI, r7
   219ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   219ee:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   219f0:	b003      	add	sp, #12
   219f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   219f4:	ea56 0305 	orrs.w	r3, r6, r5
   219f8:	d10b      	bne.n	21a12 <z_impl_k_sem_take+0xba>
   219fa:	480e      	ldr	r0, [pc, #56]	; (21a34 <z_impl_k_sem_take+0xdc>)
   219fc:	f7ff fcbe 	bl	2137c <z_spin_unlock_valid>
   21a00:	2800      	cmp	r0, #0
   21a02:	d0e4      	beq.n	219ce <z_impl_k_sem_take+0x76>
   21a04:	f387 8811 	msr	BASEPRI, r7
   21a08:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21a0c:	f06f 000f 	mvn.w	r0, #15
   21a10:	e7ee      	b.n	219f0 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21a12:	4622      	mov	r2, r4
   21a14:	4639      	mov	r1, r7
   21a16:	e9cd 6500 	strd	r6, r5, [sp]
   21a1a:	4806      	ldr	r0, [pc, #24]	; (21a34 <z_impl_k_sem_take+0xdc>)
   21a1c:	f001 fa38 	bl	22e90 <z_pend_curr>
	return ret;
   21a20:	e7e6      	b.n	219f0 <z_impl_k_sem_take+0x98>
   21a22:	bf00      	nop
   21a24:	00032eda 	.word	0x00032eda
   21a28:	00032eba 	.word	0x00032eba
   21a2c:	0002d881 	.word	0x0002d881
   21a30:	00031891 	.word	0x00031891
   21a34:	20021b84 	.word	0x20021b84
   21a38:	0002e6ba 	.word	0x0002e6ba
   21a3c:	0002e713 	.word	0x0002e713
   21a40:	0002e728 	.word	0x0002e728
   21a44:	0002e6e7 	.word	0x0002e6e7
   21a48:	0002e6fe 	.word	0x0002e6fe

00021a4c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21a4e:	2400      	movs	r4, #0
   21a50:	4b08      	ldr	r3, [pc, #32]	; (21a74 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   21a56:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   21a58:	ab02      	add	r3, sp, #8
   21a5a:	9300      	str	r3, [sp, #0]
   21a5c:	4906      	ldr	r1, [pc, #24]	; (21a78 <k_sys_work_q_init+0x2c>)
   21a5e:	f04f 33ff 	mov.w	r3, #4294967295
   21a62:	4806      	ldr	r0, [pc, #24]	; (21a7c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   21a64:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21a68:	f000 fac0 	bl	21fec <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21a6c:	4620      	mov	r0, r4
   21a6e:	b004      	add	sp, #16
   21a70:	bd10      	pop	{r4, pc}
   21a72:	bf00      	nop
   21a74:	00032f28 	.word	0x00032f28
   21a78:	20034338 	.word	0x20034338
   21a7c:	2000a350 	.word	0x2000a350

00021a80 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a84:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a86:	4e6e      	ldr	r6, [pc, #440]	; (21c40 <work_queue_main+0x1c0>)
	return list->head;
   21a88:	4f6e      	ldr	r7, [pc, #440]	; (21c44 <work_queue_main+0x1c4>)
   21a8a:	b085      	sub	sp, #20
	__asm__ volatile(
   21a8c:	f04f 0320 	mov.w	r3, #32
   21a90:	f3ef 8811 	mrs	r8, BASEPRI
   21a94:	f383 8812 	msr	BASEPRI_MAX, r3
   21a98:	f3bf 8f6f 	isb	sy
   21a9c:	4630      	mov	r0, r6
   21a9e:	f7ff fc5f 	bl	21360 <z_spin_lock_valid>
   21aa2:	b968      	cbnz	r0, 21ac0 <work_queue_main+0x40>
   21aa4:	2394      	movs	r3, #148	; 0x94
   21aa6:	4a68      	ldr	r2, [pc, #416]	; (21c48 <work_queue_main+0x1c8>)
   21aa8:	4968      	ldr	r1, [pc, #416]	; (21c4c <work_queue_main+0x1cc>)
   21aaa:	4869      	ldr	r0, [pc, #420]	; (21c50 <work_queue_main+0x1d0>)
   21aac:	f004 ff39 	bl	26922 <assert_print>
   21ab0:	4963      	ldr	r1, [pc, #396]	; (21c40 <work_queue_main+0x1c0>)
   21ab2:	4868      	ldr	r0, [pc, #416]	; (21c54 <work_queue_main+0x1d4>)
   21ab4:	f004 ff35 	bl	26922 <assert_print>
   21ab8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21aba:	4863      	ldr	r0, [pc, #396]	; (21c48 <work_queue_main+0x1c8>)
   21abc:	f004 ff2a 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ac0:	4630      	mov	r0, r6
   21ac2:	f7ff fc69 	bl	21398 <z_spin_lock_set_owner>
   21ac6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   21aca:	b9ad      	cbnz	r5, 21af8 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   21acc:	2102      	movs	r1, #2
   21ace:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   21ad2:	f009 fd79 	bl	2b5c8 <flag_test_and_clear>
   21ad6:	2800      	cmp	r0, #0
   21ad8:	d135      	bne.n	21b46 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21ada:	2300      	movs	r3, #0
   21adc:	f04f 32ff 	mov.w	r2, #4294967295
   21ae0:	9302      	str	r3, [sp, #8]
   21ae2:	f04f 33ff 	mov.w	r3, #4294967295
   21ae6:	4641      	mov	r1, r8
   21ae8:	e9cd 2300 	strd	r2, r3, [sp]
   21aec:	4630      	mov	r0, r6
   21aee:	f104 0290 	add.w	r2, r4, #144	; 0x90
   21af2:	f001 ff41 	bl	23978 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   21af6:	e7c9      	b.n	21a8c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21af8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   21afc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21afe:	4295      	cmp	r5, r2
	list->tail = node;
   21b00:	bf08      	it	eq
   21b02:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   21b06:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   21b0a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b0e:	4630      	mov	r0, r6
   21b10:	f043 0302 	orr.w	r3, r3, #2
   21b14:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   21b18:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   21b1a:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   21b1e:	f023 0304 	bic.w	r3, r3, #4
   21b22:	f043 0301 	orr.w	r3, r3, #1
   21b26:	60eb      	str	r3, [r5, #12]
   21b28:	f7ff fc28 	bl	2137c <z_spin_unlock_valid>
   21b2c:	b9a8      	cbnz	r0, 21b5a <work_queue_main+0xda>
   21b2e:	23c2      	movs	r3, #194	; 0xc2
   21b30:	4a45      	ldr	r2, [pc, #276]	; (21c48 <work_queue_main+0x1c8>)
   21b32:	4949      	ldr	r1, [pc, #292]	; (21c58 <work_queue_main+0x1d8>)
   21b34:	4846      	ldr	r0, [pc, #280]	; (21c50 <work_queue_main+0x1d0>)
   21b36:	f004 fef4 	bl	26922 <assert_print>
   21b3a:	4941      	ldr	r1, [pc, #260]	; (21c40 <work_queue_main+0x1c0>)
   21b3c:	4847      	ldr	r0, [pc, #284]	; (21c5c <work_queue_main+0x1dc>)
   21b3e:	f004 fef0 	bl	26922 <assert_print>
   21b42:	21c2      	movs	r1, #194	; 0xc2
   21b44:	e7b9      	b.n	21aba <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21b46:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21b4a:	2200      	movs	r2, #0
   21b4c:	2101      	movs	r1, #1
   21b4e:	4628      	mov	r0, r5
   21b50:	f001 feb4 	bl	238bc <z_sched_wake>
   21b54:	2800      	cmp	r0, #0
   21b56:	d1f8      	bne.n	21b4a <work_queue_main+0xca>
   21b58:	e7bf      	b.n	21ada <work_queue_main+0x5a>
	__asm__ volatile(
   21b5a:	f388 8811 	msr	BASEPRI, r8
   21b5e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   21b62:	f1b9 0f00 	cmp.w	r9, #0
   21b66:	d10a      	bne.n	21b7e <work_queue_main+0xfe>
   21b68:	493d      	ldr	r1, [pc, #244]	; (21c60 <work_queue_main+0x1e0>)
   21b6a:	4839      	ldr	r0, [pc, #228]	; (21c50 <work_queue_main+0x1d0>)
   21b6c:	f240 239b 	movw	r3, #667	; 0x29b
   21b70:	4a3c      	ldr	r2, [pc, #240]	; (21c64 <work_queue_main+0x1e4>)
   21b72:	f004 fed6 	bl	26922 <assert_print>
   21b76:	f240 219b 	movw	r1, #667	; 0x29b
   21b7a:	483a      	ldr	r0, [pc, #232]	; (21c64 <work_queue_main+0x1e4>)
   21b7c:	e79e      	b.n	21abc <work_queue_main+0x3c>
		handler(work);
   21b7e:	4628      	mov	r0, r5
   21b80:	47c8      	blx	r9
	__asm__ volatile(
   21b82:	f04f 0320 	mov.w	r3, #32
   21b86:	f3ef 8a11 	mrs	sl, BASEPRI
   21b8a:	f383 8812 	msr	BASEPRI_MAX, r3
   21b8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b92:	4630      	mov	r0, r6
   21b94:	f7ff fbe4 	bl	21360 <z_spin_lock_valid>
   21b98:	2800      	cmp	r0, #0
   21b9a:	d083      	beq.n	21aa4 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   21b9c:	4630      	mov	r0, r6
   21b9e:	f7ff fbfb 	bl	21398 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   21ba2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21ba4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   21ba6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21baa:	d417      	bmi.n	21bdc <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   21bac:	60ea      	str	r2, [r5, #12]
   21bae:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21bb2:	4630      	mov	r0, r6
   21bb4:	f023 0302 	bic.w	r3, r3, #2
   21bb8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   21bbc:	f3c3 2500 	ubfx	r5, r3, #8, #1
   21bc0:	f7ff fbdc 	bl	2137c <z_spin_unlock_valid>
   21bc4:	2800      	cmp	r0, #0
   21bc6:	d0b2      	beq.n	21b2e <work_queue_main+0xae>
	__asm__ volatile(
   21bc8:	f38a 8811 	msr	BASEPRI, sl
   21bcc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   21bd0:	2d00      	cmp	r5, #0
   21bd2:	f47f af5b 	bne.w	21a8c <work_queue_main+0xc>
	z_impl_k_yield();
   21bd6:	f001 fc35 	bl	23444 <z_impl_k_yield>
}
   21bda:	e757      	b.n	21a8c <work_queue_main+0xc>
	return list->head;
   21bdc:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   21bde:	f023 0303 	bic.w	r3, r3, #3
   21be2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21be4:	2800      	cmp	r0, #0
   21be6:	d0e2      	beq.n	21bae <work_queue_main+0x12e>
	return node->next;
   21be8:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   21bec:	46c3      	mov	fp, r8
	return node->next;
   21bee:	f8d0 9000 	ldr.w	r9, [r0]
   21bf2:	2800      	cmp	r0, #0
   21bf4:	d0db      	beq.n	21bae <work_queue_main+0x12e>
		if (wc->work == work) {
   21bf6:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   21bf8:	4602      	mov	r2, r0
		if (wc->work == work) {
   21bfa:	429d      	cmp	r5, r3
   21bfc:	d10d      	bne.n	21c1a <work_queue_main+0x19a>
   21bfe:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21c00:	f1b8 0f00 	cmp.w	r8, #0
   21c04:	d112      	bne.n	21c2c <work_queue_main+0x1ac>
   21c06:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   21c08:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   21c0a:	4283      	cmp	r3, r0
   21c0c:	d100      	bne.n	21c10 <work_queue_main+0x190>
	list->tail = node;
   21c0e:	607a      	str	r2, [r7, #4]
	parent->next = child;
   21c10:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   21c14:	f7ff fe5c 	bl	218d0 <z_impl_k_sem_give>
}
   21c18:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21c1a:	f1b9 0f00 	cmp.w	r9, #0
   21c1e:	d00d      	beq.n	21c3c <work_queue_main+0x1bc>
	return node->next;
   21c20:	f8d9 3000 	ldr.w	r3, [r9]
   21c24:	4648      	mov	r0, r9
   21c26:	4690      	mov	r8, r2
   21c28:	4699      	mov	r9, r3
   21c2a:	e7e2      	b.n	21bf2 <work_queue_main+0x172>
	parent->next = child;
   21c2c:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   21c30:	687b      	ldr	r3, [r7, #4]
   21c32:	4283      	cmp	r3, r0
	list->tail = node;
   21c34:	bf08      	it	eq
   21c36:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   21c3a:	e7e9      	b.n	21c10 <work_queue_main+0x190>
   21c3c:	464b      	mov	r3, r9
   21c3e:	e7f1      	b.n	21c24 <work_queue_main+0x1a4>
   21c40:	20021b90 	.word	0x20021b90
   21c44:	20021b88 	.word	0x20021b88
   21c48:	0002e6ba 	.word	0x0002e6ba
   21c4c:	0002e713 	.word	0x0002e713
   21c50:	0002d881 	.word	0x0002d881
   21c54:	0002e728 	.word	0x0002e728
   21c58:	0002e6e7 	.word	0x0002e6e7
   21c5c:	0002e6fe 	.word	0x0002e6fe
   21c60:	00032f52 	.word	0x00032f52
   21c64:	00032f31 	.word	0x00032f31

00021c68 <cancel_sync_locked>:
{
   21c68:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21c6a:	68c3      	ldr	r3, [r0, #12]
{
   21c6c:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   21c6e:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   21c72:	079b      	lsls	r3, r3, #30
{
   21c74:	460c      	mov	r4, r1
	if (ret) {
   21c76:	d50d      	bpl.n	21c94 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21c78:	2201      	movs	r2, #1
   21c7a:	2100      	movs	r1, #0
   21c7c:	f104 0008 	add.w	r0, r4, #8
   21c80:	f009 fc92 	bl	2b5a8 <z_impl_k_sem_init>
	parent->next = child;
   21c84:	2300      	movs	r3, #0
   21c86:	6023      	str	r3, [r4, #0]
	return list->tail;
   21c88:	4b05      	ldr	r3, [pc, #20]	; (21ca0 <cancel_sync_locked+0x38>)
	canceler->work = work;
   21c8a:	6065      	str	r5, [r4, #4]
   21c8c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   21c8e:	b91a      	cbnz	r2, 21c98 <cancel_sync_locked+0x30>
	list->head = node;
   21c90:	e9c3 4400 	strd	r4, r4, [r3]
}
   21c94:	4630      	mov	r0, r6
   21c96:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21c98:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21c9a:	605c      	str	r4, [r3, #4]
}
   21c9c:	e7fa      	b.n	21c94 <cancel_sync_locked+0x2c>
   21c9e:	bf00      	nop
   21ca0:	20021b88 	.word	0x20021b88

00021ca4 <submit_to_queue_locked>:
{
   21ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   21ca6:	68c3      	ldr	r3, [r0, #12]
{
   21ca8:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21caa:	079a      	lsls	r2, r3, #30
{
   21cac:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21cae:	f3c3 0640 	ubfx	r6, r3, #1, #1
   21cb2:	d439      	bmi.n	21d28 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   21cb4:	075b      	lsls	r3, r3, #29
   21cb6:	d425      	bmi.n	21d04 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   21cb8:	680b      	ldr	r3, [r1, #0]
   21cba:	b90b      	cbnz	r3, 21cc0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   21cbc:	6883      	ldr	r3, [r0, #8]
   21cbe:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   21cc0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   21cc2:	07dd      	lsls	r5, r3, #31
   21cc4:	d521      	bpl.n	21d0a <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   21cc6:	68a3      	ldr	r3, [r4, #8]
   21cc8:	b95b      	cbnz	r3, 21ce2 <submit_to_queue_locked+0x3e>
   21cca:	4928      	ldr	r1, [pc, #160]	; (21d6c <submit_to_queue_locked+0xc8>)
   21ccc:	4828      	ldr	r0, [pc, #160]	; (21d70 <submit_to_queue_locked+0xcc>)
   21cce:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   21cd2:	4a28      	ldr	r2, [pc, #160]	; (21d74 <submit_to_queue_locked+0xd0>)
   21cd4:	f004 fe25 	bl	26922 <assert_print>
   21cd8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   21cdc:	4825      	ldr	r0, [pc, #148]	; (21d74 <submit_to_queue_locked+0xd0>)
   21cde:	f004 fe19 	bl	26914 <assert_post_action>
			ret = 2;
   21ce2:	2602      	movs	r6, #2
			*queuep = work->queue;
   21ce4:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   21ce6:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   21ce8:	2d00      	cmp	r5, #0
   21cea:	d03c      	beq.n	21d66 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21cec:	4b22      	ldr	r3, [pc, #136]	; (21d78 <submit_to_queue_locked+0xd4>)
   21cee:	689b      	ldr	r3, [r3, #8]
   21cf0:	42ab      	cmp	r3, r5
   21cf2:	d00c      	beq.n	21d0e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   21cf4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21cf8:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21cfa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21cfe:	d416      	bmi.n	21d2e <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   21d00:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   21d04:	2300      	movs	r3, #0
   21d06:	603b      	str	r3, [r7, #0]
	return ret;
   21d08:	e027      	b.n	21d5a <submit_to_queue_locked+0xb6>
		ret = 1;
   21d0a:	2601      	movs	r6, #1
   21d0c:	e7eb      	b.n	21ce6 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21d0e:	f009 fbfa 	bl	2b506 <k_is_in_isr>
   21d12:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   21d16:	2800      	cmp	r0, #0
   21d18:	d1ee      	bne.n	21cf8 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21d1a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21d1c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21d20:	d5ee      	bpl.n	21d00 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   21d22:	b152      	cbz	r2, 21d3a <submit_to_queue_locked+0x96>
   21d24:	075b      	lsls	r3, r3, #29
   21d26:	d408      	bmi.n	21d3a <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   21d28:	f06f 060f 	mvn.w	r6, #15
   21d2c:	e7ea      	b.n	21d04 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   21d2e:	2a00      	cmp	r2, #0
   21d30:	d1fa      	bne.n	21d28 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   21d32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   21d36:	2b00      	cmp	r3, #0
   21d38:	d1f6      	bne.n	21d28 <submit_to_queue_locked+0x84>
	parent->next = child;
   21d3a:	2300      	movs	r3, #0
   21d3c:	6023      	str	r3, [r4, #0]
	return list->tail;
   21d3e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   21d42:	b963      	cbnz	r3, 21d5e <submit_to_queue_locked+0xba>
	list->head = node;
   21d44:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   21d48:	4628      	mov	r0, r5
   21d4a:	f009 fc56 	bl	2b5fa <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   21d4e:	68e3      	ldr	r3, [r4, #12]
   21d50:	f043 0304 	orr.w	r3, r3, #4
   21d54:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21d56:	683b      	ldr	r3, [r7, #0]
   21d58:	60a3      	str	r3, [r4, #8]
}
   21d5a:	4630      	mov	r0, r6
   21d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   21d5e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21d60:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   21d64:	e7f0      	b.n	21d48 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   21d66:	f06f 0615 	mvn.w	r6, #21
   21d6a:	e7cb      	b.n	21d04 <submit_to_queue_locked+0x60>
   21d6c:	00032f69 	.word	0x00032f69
   21d70:	0002d881 	.word	0x0002d881
   21d74:	00032f31 	.word	0x00032f31
   21d78:	20021b58 	.word	0x20021b58

00021d7c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   21d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21d7e:	4604      	mov	r4, r0
	__asm__ volatile(
   21d80:	f04f 0320 	mov.w	r3, #32
   21d84:	f3ef 8511 	mrs	r5, BASEPRI
   21d88:	f383 8812 	msr	BASEPRI_MAX, r3
   21d8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d90:	481c      	ldr	r0, [pc, #112]	; (21e04 <work_timeout+0x88>)
   21d92:	f7ff fae5 	bl	21360 <z_spin_lock_valid>
   21d96:	b968      	cbnz	r0, 21db4 <work_timeout+0x38>
   21d98:	2394      	movs	r3, #148	; 0x94
   21d9a:	4a1b      	ldr	r2, [pc, #108]	; (21e08 <work_timeout+0x8c>)
   21d9c:	491b      	ldr	r1, [pc, #108]	; (21e0c <work_timeout+0x90>)
   21d9e:	481c      	ldr	r0, [pc, #112]	; (21e10 <work_timeout+0x94>)
   21da0:	f004 fdbf 	bl	26922 <assert_print>
   21da4:	4917      	ldr	r1, [pc, #92]	; (21e04 <work_timeout+0x88>)
   21da6:	481b      	ldr	r0, [pc, #108]	; (21e14 <work_timeout+0x98>)
   21da8:	f004 fdbb 	bl	26922 <assert_print>
   21dac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dae:	4816      	ldr	r0, [pc, #88]	; (21e08 <work_timeout+0x8c>)
   21db0:	f004 fdb0 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   21db4:	4813      	ldr	r0, [pc, #76]	; (21e04 <work_timeout+0x88>)
   21db6:	f7ff faef 	bl	21398 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   21dba:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21dbc:	2103      	movs	r1, #3
   21dbe:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   21dc0:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21dc2:	f1a4 0610 	sub.w	r6, r4, #16
   21dc6:	f009 fbff 	bl	2b5c8 <flag_test_and_clear>
   21dca:	b128      	cbz	r0, 21dd8 <work_timeout+0x5c>
		queue = dw->queue;
   21dcc:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   21dce:	4630      	mov	r0, r6
   21dd0:	a901      	add	r1, sp, #4
		queue = dw->queue;
   21dd2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   21dd4:	f7ff ff66 	bl	21ca4 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dd8:	480a      	ldr	r0, [pc, #40]	; (21e04 <work_timeout+0x88>)
   21dda:	f7ff facf 	bl	2137c <z_spin_unlock_valid>
   21dde:	b958      	cbnz	r0, 21df8 <work_timeout+0x7c>
   21de0:	23c2      	movs	r3, #194	; 0xc2
   21de2:	4a09      	ldr	r2, [pc, #36]	; (21e08 <work_timeout+0x8c>)
   21de4:	490c      	ldr	r1, [pc, #48]	; (21e18 <work_timeout+0x9c>)
   21de6:	480a      	ldr	r0, [pc, #40]	; (21e10 <work_timeout+0x94>)
   21de8:	f004 fd9b 	bl	26922 <assert_print>
   21dec:	4905      	ldr	r1, [pc, #20]	; (21e04 <work_timeout+0x88>)
   21dee:	480b      	ldr	r0, [pc, #44]	; (21e1c <work_timeout+0xa0>)
   21df0:	f004 fd97 	bl	26922 <assert_print>
   21df4:	21c2      	movs	r1, #194	; 0xc2
   21df6:	e7da      	b.n	21dae <work_timeout+0x32>
	__asm__ volatile(
   21df8:	f385 8811 	msr	BASEPRI, r5
   21dfc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   21e00:	b002      	add	sp, #8
   21e02:	bd70      	pop	{r4, r5, r6, pc}
   21e04:	20021b90 	.word	0x20021b90
   21e08:	0002e6ba 	.word	0x0002e6ba
   21e0c:	0002e713 	.word	0x0002e713
   21e10:	0002d881 	.word	0x0002d881
   21e14:	0002e728 	.word	0x0002e728
   21e18:	0002e6e7 	.word	0x0002e6e7
   21e1c:	0002e6fe 	.word	0x0002e6fe

00021e20 <k_work_init>:
{
   21e20:	b538      	push	{r3, r4, r5, lr}
   21e22:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   21e24:	4604      	mov	r4, r0
   21e26:	b948      	cbnz	r0, 21e3c <k_work_init+0x1c>
   21e28:	490c      	ldr	r1, [pc, #48]	; (21e5c <k_work_init+0x3c>)
   21e2a:	2389      	movs	r3, #137	; 0x89
   21e2c:	4a0c      	ldr	r2, [pc, #48]	; (21e60 <k_work_init+0x40>)
   21e2e:	480d      	ldr	r0, [pc, #52]	; (21e64 <k_work_init+0x44>)
   21e30:	f004 fd77 	bl	26922 <assert_print>
   21e34:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   21e36:	480a      	ldr	r0, [pc, #40]	; (21e60 <k_work_init+0x40>)
   21e38:	f004 fd6c 	bl	26914 <assert_post_action>
   21e3c:	b939      	cbnz	r1, 21e4e <k_work_init+0x2e>
   21e3e:	490a      	ldr	r1, [pc, #40]	; (21e68 <k_work_init+0x48>)
   21e40:	238a      	movs	r3, #138	; 0x8a
   21e42:	4a07      	ldr	r2, [pc, #28]	; (21e60 <k_work_init+0x40>)
   21e44:	4807      	ldr	r0, [pc, #28]	; (21e64 <k_work_init+0x44>)
   21e46:	f004 fd6c 	bl	26922 <assert_print>
   21e4a:	218a      	movs	r1, #138	; 0x8a
   21e4c:	e7f3      	b.n	21e36 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21e4e:	2210      	movs	r2, #16
   21e50:	2100      	movs	r1, #0
   21e52:	f009 fda5 	bl	2b9a0 <memset>
   21e56:	6065      	str	r5, [r4, #4]
}
   21e58:	bd38      	pop	{r3, r4, r5, pc}
   21e5a:	bf00      	nop
   21e5c:	00033008 	.word	0x00033008
   21e60:	00032f31 	.word	0x00032f31
   21e64:	0002d881 	.word	0x0002d881
   21e68:	00032f52 	.word	0x00032f52

00021e6c <k_work_busy_get>:
{
   21e6c:	b538      	push	{r3, r4, r5, lr}
   21e6e:	4604      	mov	r4, r0
	__asm__ volatile(
   21e70:	f04f 0320 	mov.w	r3, #32
   21e74:	f3ef 8511 	mrs	r5, BASEPRI
   21e78:	f383 8812 	msr	BASEPRI_MAX, r3
   21e7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e80:	4816      	ldr	r0, [pc, #88]	; (21edc <k_work_busy_get+0x70>)
   21e82:	f7ff fa6d 	bl	21360 <z_spin_lock_valid>
   21e86:	b968      	cbnz	r0, 21ea4 <k_work_busy_get+0x38>
   21e88:	2394      	movs	r3, #148	; 0x94
   21e8a:	4a15      	ldr	r2, [pc, #84]	; (21ee0 <k_work_busy_get+0x74>)
   21e8c:	4915      	ldr	r1, [pc, #84]	; (21ee4 <k_work_busy_get+0x78>)
   21e8e:	4816      	ldr	r0, [pc, #88]	; (21ee8 <k_work_busy_get+0x7c>)
   21e90:	f004 fd47 	bl	26922 <assert_print>
   21e94:	4911      	ldr	r1, [pc, #68]	; (21edc <k_work_busy_get+0x70>)
   21e96:	4815      	ldr	r0, [pc, #84]	; (21eec <k_work_busy_get+0x80>)
   21e98:	f004 fd43 	bl	26922 <assert_print>
   21e9c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e9e:	4810      	ldr	r0, [pc, #64]	; (21ee0 <k_work_busy_get+0x74>)
   21ea0:	f004 fd38 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ea4:	480d      	ldr	r0, [pc, #52]	; (21edc <k_work_busy_get+0x70>)
   21ea6:	f7ff fa77 	bl	21398 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   21eaa:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eac:	480b      	ldr	r0, [pc, #44]	; (21edc <k_work_busy_get+0x70>)
   21eae:	f004 040f 	and.w	r4, r4, #15
   21eb2:	f7ff fa63 	bl	2137c <z_spin_unlock_valid>
   21eb6:	b958      	cbnz	r0, 21ed0 <k_work_busy_get+0x64>
   21eb8:	23c2      	movs	r3, #194	; 0xc2
   21eba:	4a09      	ldr	r2, [pc, #36]	; (21ee0 <k_work_busy_get+0x74>)
   21ebc:	490c      	ldr	r1, [pc, #48]	; (21ef0 <k_work_busy_get+0x84>)
   21ebe:	480a      	ldr	r0, [pc, #40]	; (21ee8 <k_work_busy_get+0x7c>)
   21ec0:	f004 fd2f 	bl	26922 <assert_print>
   21ec4:	4905      	ldr	r1, [pc, #20]	; (21edc <k_work_busy_get+0x70>)
   21ec6:	480b      	ldr	r0, [pc, #44]	; (21ef4 <k_work_busy_get+0x88>)
   21ec8:	f004 fd2b 	bl	26922 <assert_print>
   21ecc:	21c2      	movs	r1, #194	; 0xc2
   21ece:	e7e6      	b.n	21e9e <k_work_busy_get+0x32>
	__asm__ volatile(
   21ed0:	f385 8811 	msr	BASEPRI, r5
   21ed4:	f3bf 8f6f 	isb	sy
}
   21ed8:	4620      	mov	r0, r4
   21eda:	bd38      	pop	{r3, r4, r5, pc}
   21edc:	20021b90 	.word	0x20021b90
   21ee0:	0002e6ba 	.word	0x0002e6ba
   21ee4:	0002e713 	.word	0x0002e713
   21ee8:	0002d881 	.word	0x0002d881
   21eec:	0002e728 	.word	0x0002e728
   21ef0:	0002e6e7 	.word	0x0002e6e7
   21ef4:	0002e6fe 	.word	0x0002e6fe

00021ef8 <z_work_submit_to_queue>:
{
   21ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   21efa:	460c      	mov	r4, r1
{
   21efc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   21efe:	b959      	cbnz	r1, 21f18 <z_work_submit_to_queue+0x20>
   21f00:	4921      	ldr	r1, [pc, #132]	; (21f88 <z_work_submit_to_queue+0x90>)
   21f02:	4822      	ldr	r0, [pc, #136]	; (21f8c <z_work_submit_to_queue+0x94>)
   21f04:	f44f 73ba 	mov.w	r3, #372	; 0x174
   21f08:	4a21      	ldr	r2, [pc, #132]	; (21f90 <z_work_submit_to_queue+0x98>)
   21f0a:	f004 fd0a 	bl	26922 <assert_print>
   21f0e:	f44f 71ba 	mov.w	r1, #372	; 0x174
   21f12:	481f      	ldr	r0, [pc, #124]	; (21f90 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f14:	f004 fcfe 	bl	26914 <assert_post_action>
	__asm__ volatile(
   21f18:	f04f 0320 	mov.w	r3, #32
   21f1c:	f3ef 8511 	mrs	r5, BASEPRI
   21f20:	f383 8812 	msr	BASEPRI_MAX, r3
   21f24:	f3bf 8f6f 	isb	sy
   21f28:	481a      	ldr	r0, [pc, #104]	; (21f94 <z_work_submit_to_queue+0x9c>)
   21f2a:	f7ff fa19 	bl	21360 <z_spin_lock_valid>
   21f2e:	b960      	cbnz	r0, 21f4a <z_work_submit_to_queue+0x52>
   21f30:	2394      	movs	r3, #148	; 0x94
   21f32:	4a19      	ldr	r2, [pc, #100]	; (21f98 <z_work_submit_to_queue+0xa0>)
   21f34:	4919      	ldr	r1, [pc, #100]	; (21f9c <z_work_submit_to_queue+0xa4>)
   21f36:	4815      	ldr	r0, [pc, #84]	; (21f8c <z_work_submit_to_queue+0x94>)
   21f38:	f004 fcf3 	bl	26922 <assert_print>
   21f3c:	4915      	ldr	r1, [pc, #84]	; (21f94 <z_work_submit_to_queue+0x9c>)
   21f3e:	4818      	ldr	r0, [pc, #96]	; (21fa0 <z_work_submit_to_queue+0xa8>)
   21f40:	f004 fcef 	bl	26922 <assert_print>
   21f44:	2194      	movs	r1, #148	; 0x94
   21f46:	4814      	ldr	r0, [pc, #80]	; (21f98 <z_work_submit_to_queue+0xa0>)
   21f48:	e7e4      	b.n	21f14 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   21f4a:	4812      	ldr	r0, [pc, #72]	; (21f94 <z_work_submit_to_queue+0x9c>)
   21f4c:	f7ff fa24 	bl	21398 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   21f50:	4620      	mov	r0, r4
   21f52:	a901      	add	r1, sp, #4
   21f54:	f7ff fea6 	bl	21ca4 <submit_to_queue_locked>
   21f58:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f5a:	480e      	ldr	r0, [pc, #56]	; (21f94 <z_work_submit_to_queue+0x9c>)
   21f5c:	f7ff fa0e 	bl	2137c <z_spin_unlock_valid>
   21f60:	b958      	cbnz	r0, 21f7a <z_work_submit_to_queue+0x82>
   21f62:	23c2      	movs	r3, #194	; 0xc2
   21f64:	4a0c      	ldr	r2, [pc, #48]	; (21f98 <z_work_submit_to_queue+0xa0>)
   21f66:	490f      	ldr	r1, [pc, #60]	; (21fa4 <z_work_submit_to_queue+0xac>)
   21f68:	4808      	ldr	r0, [pc, #32]	; (21f8c <z_work_submit_to_queue+0x94>)
   21f6a:	f004 fcda 	bl	26922 <assert_print>
   21f6e:	4909      	ldr	r1, [pc, #36]	; (21f94 <z_work_submit_to_queue+0x9c>)
   21f70:	480d      	ldr	r0, [pc, #52]	; (21fa8 <z_work_submit_to_queue+0xb0>)
   21f72:	f004 fcd6 	bl	26922 <assert_print>
   21f76:	21c2      	movs	r1, #194	; 0xc2
   21f78:	e7e5      	b.n	21f46 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   21f7a:	f385 8811 	msr	BASEPRI, r5
   21f7e:	f3bf 8f6f 	isb	sy
}
   21f82:	4620      	mov	r0, r4
   21f84:	b003      	add	sp, #12
   21f86:	bd30      	pop	{r4, r5, pc}
   21f88:	00033008 	.word	0x00033008
   21f8c:	0002d881 	.word	0x0002d881
   21f90:	00032f31 	.word	0x00032f31
   21f94:	20021b90 	.word	0x20021b90
   21f98:	0002e6ba 	.word	0x0002e6ba
   21f9c:	0002e713 	.word	0x0002e713
   21fa0:	0002e728 	.word	0x0002e728
   21fa4:	0002e6e7 	.word	0x0002e6e7
   21fa8:	0002e6fe 	.word	0x0002e6fe

00021fac <k_work_submit>:
{
   21fac:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   21fae:	4801      	ldr	r0, [pc, #4]	; (21fb4 <k_work_submit+0x8>)
   21fb0:	f009 bb5d 	b.w	2b66e <k_work_submit_to_queue>
   21fb4:	2000a350 	.word	0x2000a350

00021fb8 <k_work_queue_init>:
{
   21fb8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   21fba:	b958      	cbnz	r0, 21fd4 <k_work_queue_init+0x1c>
   21fbc:	4908      	ldr	r1, [pc, #32]	; (21fe0 <k_work_queue_init+0x28>)
   21fbe:	4809      	ldr	r0, [pc, #36]	; (21fe4 <k_work_queue_init+0x2c>)
   21fc0:	f240 23b9 	movw	r3, #697	; 0x2b9
   21fc4:	4a08      	ldr	r2, [pc, #32]	; (21fe8 <k_work_queue_init+0x30>)
   21fc6:	f004 fcac 	bl	26922 <assert_print>
   21fca:	f240 21b9 	movw	r1, #697	; 0x2b9
   21fce:	4806      	ldr	r0, [pc, #24]	; (21fe8 <k_work_queue_init+0x30>)
   21fd0:	f004 fca0 	bl	26914 <assert_post_action>
	*queue = (struct k_work_q) {
   21fd4:	22a8      	movs	r2, #168	; 0xa8
   21fd6:	2100      	movs	r1, #0
   21fd8:	f009 fce2 	bl	2b9a0 <memset>
}
   21fdc:	bd08      	pop	{r3, pc}
   21fde:	bf00      	nop
   21fe0:	00032f6f 	.word	0x00032f6f
   21fe4:	0002d881 	.word	0x0002d881
   21fe8:	00032f31 	.word	0x00032f31

00021fec <k_work_queue_start>:
{
   21fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   21fee:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   21ff0:	4604      	mov	r4, r0
{
   21ff2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   21ff4:	b958      	cbnz	r0, 2200e <k_work_queue_start+0x22>
   21ff6:	492b      	ldr	r1, [pc, #172]	; (220a4 <k_work_queue_start+0xb8>)
   21ff8:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   21ffc:	4a2a      	ldr	r2, [pc, #168]	; (220a8 <k_work_queue_start+0xbc>)
   21ffe:	482b      	ldr	r0, [pc, #172]	; (220ac <k_work_queue_start+0xc0>)
   22000:	f004 fc8f 	bl	26922 <assert_print>
   22004:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   22008:	4827      	ldr	r0, [pc, #156]	; (220a8 <k_work_queue_start+0xbc>)
   2200a:	f004 fc83 	bl	26914 <assert_post_action>
   2200e:	b949      	cbnz	r1, 22024 <k_work_queue_start+0x38>
   22010:	4927      	ldr	r1, [pc, #156]	; (220b0 <k_work_queue_start+0xc4>)
   22012:	f240 23c9 	movw	r3, #713	; 0x2c9
   22016:	4a24      	ldr	r2, [pc, #144]	; (220a8 <k_work_queue_start+0xbc>)
   22018:	4824      	ldr	r0, [pc, #144]	; (220ac <k_work_queue_start+0xc0>)
   2201a:	f004 fc82 	bl	26922 <assert_print>
   2201e:	f240 21c9 	movw	r1, #713	; 0x2c9
   22022:	e7f1      	b.n	22008 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   22024:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   22028:	f010 0001 	ands.w	r0, r0, #1
   2202c:	d009      	beq.n	22042 <k_work_queue_start+0x56>
   2202e:	4921      	ldr	r1, [pc, #132]	; (220b4 <k_work_queue_start+0xc8>)
   22030:	f240 23ca 	movw	r3, #714	; 0x2ca
   22034:	4a1c      	ldr	r2, [pc, #112]	; (220a8 <k_work_queue_start+0xbc>)
   22036:	481d      	ldr	r0, [pc, #116]	; (220ac <k_work_queue_start+0xc0>)
   22038:	f004 fc73 	bl	26922 <assert_print>
   2203c:	f240 21ca 	movw	r1, #714	; 0x2ca
   22040:	e7e2      	b.n	22008 <k_work_queue_start+0x1c>
	list->tail = NULL;
   22042:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   22046:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   2204a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   2204e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   22052:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   22056:	b31d      	cbz	r5, 220a0 <k_work_queue_start+0xb4>
   22058:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2205a:	2800      	cmp	r0, #0
   2205c:	f240 1001 	movw	r0, #257	; 0x101
   22060:	bf08      	it	eq
   22062:	2001      	moveq	r0, #1
	*flagp = flags;
   22064:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22068:	2000      	movs	r0, #0
   2206a:	f04f 36ff 	mov.w	r6, #4294967295
   2206e:	f04f 37ff 	mov.w	r7, #4294967295
   22072:	e9cd 3003 	strd	r3, r0, [sp, #12]
   22076:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2207a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2207e:	4620      	mov	r0, r4
   22080:	4b0d      	ldr	r3, [pc, #52]	; (220b8 <k_work_queue_start+0xcc>)
   22082:	9400      	str	r4, [sp, #0]
   22084:	f7ff f8a2 	bl	211cc <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   22088:	b125      	cbz	r5, 22094 <k_work_queue_start+0xa8>
   2208a:	6829      	ldr	r1, [r5, #0]
   2208c:	b111      	cbz	r1, 22094 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   2208e:	4620      	mov	r0, r4
   22090:	f009 fa3f 	bl	2b512 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22094:	4620      	mov	r0, r4
}
   22096:	b009      	add	sp, #36	; 0x24
   22098:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2209c:	f009 ba3e 	b.w	2b51c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   220a0:	2001      	movs	r0, #1
   220a2:	e7df      	b.n	22064 <k_work_queue_start+0x78>
   220a4:	00032fc7 	.word	0x00032fc7
   220a8:	00032f31 	.word	0x00032f31
   220ac:	0002d881 	.word	0x0002d881
   220b0:	00032fcd 	.word	0x00032fcd
   220b4:	00032fd3 	.word	0x00032fd3
   220b8:	00021a81 	.word	0x00021a81

000220bc <k_work_queue_drain>:
{
   220bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   220be:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   220c0:	4604      	mov	r4, r0
   220c2:	b958      	cbnz	r0, 220dc <k_work_queue_drain+0x20>
   220c4:	493a      	ldr	r1, [pc, #232]	; (221b0 <k_work_queue_drain+0xf4>)
   220c6:	f240 23ed 	movw	r3, #749	; 0x2ed
   220ca:	4a3a      	ldr	r2, [pc, #232]	; (221b4 <k_work_queue_drain+0xf8>)
   220cc:	483a      	ldr	r0, [pc, #232]	; (221b8 <k_work_queue_drain+0xfc>)
   220ce:	f004 fc28 	bl	26922 <assert_print>
   220d2:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   220d6:	4837      	ldr	r0, [pc, #220]	; (221b4 <k_work_queue_drain+0xf8>)
   220d8:	f004 fc1c 	bl	26914 <assert_post_action>
   220dc:	f009 fa13 	bl	2b506 <k_is_in_isr>
   220e0:	b148      	cbz	r0, 220f6 <k_work_queue_drain+0x3a>
   220e2:	4936      	ldr	r1, [pc, #216]	; (221bc <k_work_queue_drain+0x100>)
   220e4:	f240 23ee 	movw	r3, #750	; 0x2ee
   220e8:	4a32      	ldr	r2, [pc, #200]	; (221b4 <k_work_queue_drain+0xf8>)
   220ea:	4833      	ldr	r0, [pc, #204]	; (221b8 <k_work_queue_drain+0xfc>)
   220ec:	f004 fc19 	bl	26922 <assert_print>
   220f0:	f240 21ee 	movw	r1, #750	; 0x2ee
   220f4:	e7ef      	b.n	220d6 <k_work_queue_drain+0x1a>
	__asm__ volatile(
   220f6:	f04f 0320 	mov.w	r3, #32
   220fa:	f3ef 8611 	mrs	r6, BASEPRI
   220fe:	f383 8812 	msr	BASEPRI_MAX, r3
   22102:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22106:	482e      	ldr	r0, [pc, #184]	; (221c0 <k_work_queue_drain+0x104>)
   22108:	f7ff f92a 	bl	21360 <z_spin_lock_valid>
   2210c:	b960      	cbnz	r0, 22128 <k_work_queue_drain+0x6c>
   2210e:	2394      	movs	r3, #148	; 0x94
   22110:	4a2c      	ldr	r2, [pc, #176]	; (221c4 <k_work_queue_drain+0x108>)
   22112:	492d      	ldr	r1, [pc, #180]	; (221c8 <k_work_queue_drain+0x10c>)
   22114:	4828      	ldr	r0, [pc, #160]	; (221b8 <k_work_queue_drain+0xfc>)
   22116:	f004 fc04 	bl	26922 <assert_print>
   2211a:	4929      	ldr	r1, [pc, #164]	; (221c0 <k_work_queue_drain+0x104>)
   2211c:	482b      	ldr	r0, [pc, #172]	; (221cc <k_work_queue_drain+0x110>)
   2211e:	f004 fc00 	bl	26922 <assert_print>
   22122:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22124:	4827      	ldr	r0, [pc, #156]	; (221c4 <k_work_queue_drain+0x108>)
   22126:	e7d7      	b.n	220d8 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   22128:	4825      	ldr	r0, [pc, #148]	; (221c0 <k_work_queue_drain+0x104>)
   2212a:	f7ff f935 	bl	21398 <z_spin_lock_set_owner>
	return *flagp;
   2212e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   22132:	f013 0f06 	tst.w	r3, #6
   22136:	d11d      	bne.n	22174 <k_work_queue_drain+0xb8>
	    || plug
   22138:	b1b5      	cbz	r5, 22168 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   2213a:	f043 030c 	orr.w	r3, r3, #12
   2213e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   22142:	4620      	mov	r0, r4
   22144:	f009 fa59 	bl	2b5fa <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   22148:	2300      	movs	r3, #0
   2214a:	f04f 32ff 	mov.w	r2, #4294967295
   2214e:	9302      	str	r3, [sp, #8]
   22150:	f04f 33ff 	mov.w	r3, #4294967295
   22154:	4631      	mov	r1, r6
   22156:	e9cd 2300 	strd	r2, r3, [sp]
   2215a:	4819      	ldr	r0, [pc, #100]	; (221c0 <k_work_queue_drain+0x104>)
   2215c:	f104 0298 	add.w	r2, r4, #152	; 0x98
   22160:	f001 fc0a 	bl	23978 <z_sched_wait>
}
   22164:	b004      	add	sp, #16
   22166:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   22168:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   2216c:	b14d      	cbz	r5, 22182 <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   2216e:	f043 0304 	orr.w	r3, r3, #4
   22172:	e7e4      	b.n	2213e <k_work_queue_drain+0x82>
   22174:	f043 0204 	orr.w	r2, r3, #4
   22178:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   2217c:	2d00      	cmp	r5, #0
   2217e:	d0e0      	beq.n	22142 <k_work_queue_drain+0x86>
   22180:	e7db      	b.n	2213a <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22182:	480f      	ldr	r0, [pc, #60]	; (221c0 <k_work_queue_drain+0x104>)
   22184:	f7ff f8fa 	bl	2137c <z_spin_unlock_valid>
   22188:	b958      	cbnz	r0, 221a2 <k_work_queue_drain+0xe6>
   2218a:	23c2      	movs	r3, #194	; 0xc2
   2218c:	4a0d      	ldr	r2, [pc, #52]	; (221c4 <k_work_queue_drain+0x108>)
   2218e:	4910      	ldr	r1, [pc, #64]	; (221d0 <k_work_queue_drain+0x114>)
   22190:	4809      	ldr	r0, [pc, #36]	; (221b8 <k_work_queue_drain+0xfc>)
   22192:	f004 fbc6 	bl	26922 <assert_print>
   22196:	490a      	ldr	r1, [pc, #40]	; (221c0 <k_work_queue_drain+0x104>)
   22198:	480e      	ldr	r0, [pc, #56]	; (221d4 <k_work_queue_drain+0x118>)
   2219a:	f004 fbc2 	bl	26922 <assert_print>
   2219e:	21c2      	movs	r1, #194	; 0xc2
   221a0:	e7c0      	b.n	22124 <k_work_queue_drain+0x68>
	__asm__ volatile(
   221a2:	f386 8811 	msr	BASEPRI, r6
   221a6:	f3bf 8f6f 	isb	sy
	int ret = 0;
   221aa:	4628      	mov	r0, r5
	return ret;
   221ac:	e7da      	b.n	22164 <k_work_queue_drain+0xa8>
   221ae:	bf00      	nop
   221b0:	00032fc7 	.word	0x00032fc7
   221b4:	00032f31 	.word	0x00032f31
   221b8:	0002d881 	.word	0x0002d881
   221bc:	000308ed 	.word	0x000308ed
   221c0:	20021b90 	.word	0x20021b90
   221c4:	0002e6ba 	.word	0x0002e6ba
   221c8:	0002e713 	.word	0x0002e713
   221cc:	0002e728 	.word	0x0002e728
   221d0:	0002e6e7 	.word	0x0002e6e7
   221d4:	0002e6fe 	.word	0x0002e6fe

000221d8 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   221d8:	b538      	push	{r3, r4, r5, lr}
   221da:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   221dc:	4604      	mov	r4, r0
   221de:	b958      	cbnz	r0, 221f8 <k_work_init_delayable+0x20>
   221e0:	490f      	ldr	r1, [pc, #60]	; (22220 <k_work_init_delayable+0x48>)
   221e2:	f44f 7350 	mov.w	r3, #832	; 0x340
   221e6:	4a0f      	ldr	r2, [pc, #60]	; (22224 <k_work_init_delayable+0x4c>)
   221e8:	480f      	ldr	r0, [pc, #60]	; (22228 <k_work_init_delayable+0x50>)
   221ea:	f004 fb9a 	bl	26922 <assert_print>
   221ee:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   221f2:	480c      	ldr	r0, [pc, #48]	; (22224 <k_work_init_delayable+0x4c>)
   221f4:	f004 fb8e 	bl	26914 <assert_post_action>
   221f8:	b949      	cbnz	r1, 2220e <k_work_init_delayable+0x36>
   221fa:	490c      	ldr	r1, [pc, #48]	; (2222c <k_work_init_delayable+0x54>)
   221fc:	f240 3341 	movw	r3, #833	; 0x341
   22200:	4a08      	ldr	r2, [pc, #32]	; (22224 <k_work_init_delayable+0x4c>)
   22202:	4809      	ldr	r0, [pc, #36]	; (22228 <k_work_init_delayable+0x50>)
   22204:	f004 fb8d 	bl	26922 <assert_print>
   22208:	f240 3141 	movw	r1, #833	; 0x341
   2220c:	e7f1      	b.n	221f2 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   2220e:	2230      	movs	r2, #48	; 0x30
   22210:	2100      	movs	r1, #0
   22212:	f009 fbc5 	bl	2b9a0 <memset>
   22216:	f44f 7380 	mov.w	r3, #256	; 0x100
   2221a:	6065      	str	r5, [r4, #4]
   2221c:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   2221e:	bd38      	pop	{r3, r4, r5, pc}
   22220:	00033007 	.word	0x00033007
   22224:	00032f31 	.word	0x00032f31
   22228:	0002d881 	.word	0x0002d881
   2222c:	00032f52 	.word	0x00032f52

00022230 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   22230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22232:	4616      	mov	r6, r2
   22234:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   22236:	460c      	mov	r4, r1
{
   22238:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2223a:	b959      	cbnz	r1, 22254 <k_work_schedule_for_queue+0x24>
   2223c:	492d      	ldr	r1, [pc, #180]	; (222f4 <k_work_schedule_for_queue+0xc4>)
   2223e:	482e      	ldr	r0, [pc, #184]	; (222f8 <k_work_schedule_for_queue+0xc8>)
   22240:	f240 33b7 	movw	r3, #951	; 0x3b7
   22244:	4a2d      	ldr	r2, [pc, #180]	; (222fc <k_work_schedule_for_queue+0xcc>)
   22246:	f004 fb6c 	bl	26922 <assert_print>
   2224a:	f240 31b7 	movw	r1, #951	; 0x3b7
   2224e:	482b      	ldr	r0, [pc, #172]	; (222fc <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22250:	f004 fb60 	bl	26914 <assert_post_action>
	__asm__ volatile(
   22254:	f04f 0320 	mov.w	r3, #32
   22258:	f3ef 8711 	mrs	r7, BASEPRI
   2225c:	f383 8812 	msr	BASEPRI_MAX, r3
   22260:	f3bf 8f6f 	isb	sy
   22264:	4826      	ldr	r0, [pc, #152]	; (22300 <k_work_schedule_for_queue+0xd0>)
   22266:	f7ff f87b 	bl	21360 <z_spin_lock_valid>
   2226a:	b960      	cbnz	r0, 22286 <k_work_schedule_for_queue+0x56>
   2226c:	2394      	movs	r3, #148	; 0x94
   2226e:	4a25      	ldr	r2, [pc, #148]	; (22304 <k_work_schedule_for_queue+0xd4>)
   22270:	4925      	ldr	r1, [pc, #148]	; (22308 <k_work_schedule_for_queue+0xd8>)
   22272:	4821      	ldr	r0, [pc, #132]	; (222f8 <k_work_schedule_for_queue+0xc8>)
   22274:	f004 fb55 	bl	26922 <assert_print>
   22278:	4921      	ldr	r1, [pc, #132]	; (22300 <k_work_schedule_for_queue+0xd0>)
   2227a:	4824      	ldr	r0, [pc, #144]	; (2230c <k_work_schedule_for_queue+0xdc>)
   2227c:	f004 fb51 	bl	26922 <assert_print>
   22280:	2194      	movs	r1, #148	; 0x94
   22282:	4820      	ldr	r0, [pc, #128]	; (22304 <k_work_schedule_for_queue+0xd4>)
   22284:	e7e4      	b.n	22250 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   22286:	481e      	ldr	r0, [pc, #120]	; (22300 <k_work_schedule_for_queue+0xd0>)
   22288:	f7ff f886 	bl	21398 <z_spin_lock_set_owner>
	return *flagp;
   2228c:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2228e:	f013 0f0e 	tst.w	r3, #14
   22292:	d125      	bne.n	222e0 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22294:	ea55 0206 	orrs.w	r2, r5, r6
   22298:	d114      	bne.n	222c4 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   2229a:	4620      	mov	r0, r4
   2229c:	a901      	add	r1, sp, #4
   2229e:	f7ff fd01 	bl	21ca4 <submit_to_queue_locked>
   222a2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222a4:	4816      	ldr	r0, [pc, #88]	; (22300 <k_work_schedule_for_queue+0xd0>)
   222a6:	f7ff f869 	bl	2137c <z_spin_unlock_valid>
   222aa:	b9d8      	cbnz	r0, 222e4 <k_work_schedule_for_queue+0xb4>
   222ac:	23c2      	movs	r3, #194	; 0xc2
   222ae:	4a15      	ldr	r2, [pc, #84]	; (22304 <k_work_schedule_for_queue+0xd4>)
   222b0:	4917      	ldr	r1, [pc, #92]	; (22310 <k_work_schedule_for_queue+0xe0>)
   222b2:	4811      	ldr	r0, [pc, #68]	; (222f8 <k_work_schedule_for_queue+0xc8>)
   222b4:	f004 fb35 	bl	26922 <assert_print>
   222b8:	4911      	ldr	r1, [pc, #68]	; (22300 <k_work_schedule_for_queue+0xd0>)
   222ba:	4816      	ldr	r0, [pc, #88]	; (22314 <k_work_schedule_for_queue+0xe4>)
   222bc:	f004 fb31 	bl	26922 <assert_print>
   222c0:	21c2      	movs	r1, #194	; 0xc2
   222c2:	e7de      	b.n	22282 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   222c4:	f043 0308 	orr.w	r3, r3, #8
   222c8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   222ca:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   222cc:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   222d0:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   222d2:	4632      	mov	r2, r6
   222d4:	462b      	mov	r3, r5
   222d6:	4910      	ldr	r1, [pc, #64]	; (22318 <k_work_schedule_for_queue+0xe8>)
   222d8:	f001 fbc8 	bl	23a6c <z_add_timeout>
	return ret;
   222dc:	2401      	movs	r4, #1
   222de:	e7e1      	b.n	222a4 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   222e0:	2400      	movs	r4, #0
   222e2:	e7df      	b.n	222a4 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   222e4:	f387 8811 	msr	BASEPRI, r7
   222e8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   222ec:	4620      	mov	r0, r4
   222ee:	b003      	add	sp, #12
   222f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   222f2:	bf00      	nop
   222f4:	00033007 	.word	0x00033007
   222f8:	0002d881 	.word	0x0002d881
   222fc:	00032f31 	.word	0x00032f31
   22300:	20021b90 	.word	0x20021b90
   22304:	0002e6ba 	.word	0x0002e6ba
   22308:	0002e713 	.word	0x0002e713
   2230c:	0002e728 	.word	0x0002e728
   22310:	0002e6e7 	.word	0x0002e6e7
   22314:	0002e6fe 	.word	0x0002e6fe
   22318:	00021d7d 	.word	0x00021d7d

0002231c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2231c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2231e:	4801      	ldr	r0, [pc, #4]	; (22324 <k_work_schedule+0x8>)
   22320:	f7ff bf86 	b.w	22230 <k_work_schedule_for_queue>
   22324:	2000a350 	.word	0x2000a350

00022328 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   22328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2232a:	4616      	mov	r6, r2
   2232c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2232e:	460c      	mov	r4, r1
{
   22330:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   22332:	b959      	cbnz	r1, 2234c <k_work_reschedule_for_queue+0x24>
   22334:	492c      	ldr	r1, [pc, #176]	; (223e8 <k_work_reschedule_for_queue+0xc0>)
   22336:	482d      	ldr	r0, [pc, #180]	; (223ec <k_work_reschedule_for_queue+0xc4>)
   22338:	f240 33db 	movw	r3, #987	; 0x3db
   2233c:	4a2c      	ldr	r2, [pc, #176]	; (223f0 <k_work_reschedule_for_queue+0xc8>)
   2233e:	f004 faf0 	bl	26922 <assert_print>
   22342:	f240 31db 	movw	r1, #987	; 0x3db
   22346:	482a      	ldr	r0, [pc, #168]	; (223f0 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22348:	f004 fae4 	bl	26914 <assert_post_action>
	__asm__ volatile(
   2234c:	f04f 0320 	mov.w	r3, #32
   22350:	f3ef 8711 	mrs	r7, BASEPRI
   22354:	f383 8812 	msr	BASEPRI_MAX, r3
   22358:	f3bf 8f6f 	isb	sy
   2235c:	4825      	ldr	r0, [pc, #148]	; (223f4 <k_work_reschedule_for_queue+0xcc>)
   2235e:	f7fe ffff 	bl	21360 <z_spin_lock_valid>
   22362:	b960      	cbnz	r0, 2237e <k_work_reschedule_for_queue+0x56>
   22364:	2394      	movs	r3, #148	; 0x94
   22366:	4a24      	ldr	r2, [pc, #144]	; (223f8 <k_work_reschedule_for_queue+0xd0>)
   22368:	4924      	ldr	r1, [pc, #144]	; (223fc <k_work_reschedule_for_queue+0xd4>)
   2236a:	4820      	ldr	r0, [pc, #128]	; (223ec <k_work_reschedule_for_queue+0xc4>)
   2236c:	f004 fad9 	bl	26922 <assert_print>
   22370:	4920      	ldr	r1, [pc, #128]	; (223f4 <k_work_reschedule_for_queue+0xcc>)
   22372:	4823      	ldr	r0, [pc, #140]	; (22400 <k_work_reschedule_for_queue+0xd8>)
   22374:	f004 fad5 	bl	26922 <assert_print>
   22378:	2194      	movs	r1, #148	; 0x94
   2237a:	481f      	ldr	r0, [pc, #124]	; (223f8 <k_work_reschedule_for_queue+0xd0>)
   2237c:	e7e4      	b.n	22348 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2237e:	481d      	ldr	r0, [pc, #116]	; (223f4 <k_work_reschedule_for_queue+0xcc>)
   22380:	f7ff f80a 	bl	21398 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   22384:	4620      	mov	r0, r4
   22386:	f009 f92a 	bl	2b5de <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2238a:	ea55 0306 	orrs.w	r3, r5, r6
   2238e:	d114      	bne.n	223ba <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   22390:	4620      	mov	r0, r4
   22392:	a901      	add	r1, sp, #4
   22394:	f7ff fc86 	bl	21ca4 <submit_to_queue_locked>
   22398:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2239a:	4816      	ldr	r0, [pc, #88]	; (223f4 <k_work_reschedule_for_queue+0xcc>)
   2239c:	f7fe ffee 	bl	2137c <z_spin_unlock_valid>
   223a0:	b9d0      	cbnz	r0, 223d8 <k_work_reschedule_for_queue+0xb0>
   223a2:	23c2      	movs	r3, #194	; 0xc2
   223a4:	4a14      	ldr	r2, [pc, #80]	; (223f8 <k_work_reschedule_for_queue+0xd0>)
   223a6:	4917      	ldr	r1, [pc, #92]	; (22404 <k_work_reschedule_for_queue+0xdc>)
   223a8:	4810      	ldr	r0, [pc, #64]	; (223ec <k_work_reschedule_for_queue+0xc4>)
   223aa:	f004 faba 	bl	26922 <assert_print>
   223ae:	4911      	ldr	r1, [pc, #68]	; (223f4 <k_work_reschedule_for_queue+0xcc>)
   223b0:	4815      	ldr	r0, [pc, #84]	; (22408 <k_work_reschedule_for_queue+0xe0>)
   223b2:	f004 fab6 	bl	26922 <assert_print>
   223b6:	21c2      	movs	r1, #194	; 0xc2
   223b8:	e7df      	b.n	2237a <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   223ba:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   223bc:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   223c0:	f043 0308 	orr.w	r3, r3, #8
   223c4:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   223c6:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   223c8:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   223ca:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   223cc:	490f      	ldr	r1, [pc, #60]	; (2240c <k_work_reschedule_for_queue+0xe4>)
   223ce:	462b      	mov	r3, r5
   223d0:	f001 fb4c 	bl	23a6c <z_add_timeout>
	return ret;
   223d4:	2401      	movs	r4, #1
   223d6:	e7e0      	b.n	2239a <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   223d8:	f387 8811 	msr	BASEPRI, r7
   223dc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   223e0:	4620      	mov	r0, r4
   223e2:	b003      	add	sp, #12
   223e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   223e6:	bf00      	nop
   223e8:	00033007 	.word	0x00033007
   223ec:	0002d881 	.word	0x0002d881
   223f0:	00032f31 	.word	0x00032f31
   223f4:	20021b90 	.word	0x20021b90
   223f8:	0002e6ba 	.word	0x0002e6ba
   223fc:	0002e713 	.word	0x0002e713
   22400:	0002e728 	.word	0x0002e728
   22404:	0002e6e7 	.word	0x0002e6e7
   22408:	0002e6fe 	.word	0x0002e6fe
   2240c:	00021d7d 	.word	0x00021d7d

00022410 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   22410:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   22412:	4801      	ldr	r0, [pc, #4]	; (22418 <k_work_reschedule+0x8>)
   22414:	f7ff bf88 	b.w	22328 <k_work_reschedule_for_queue>
   22418:	2000a350 	.word	0x2000a350

0002241c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2241c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2241e:	4604      	mov	r4, r0
   22420:	b958      	cbnz	r0, 2243a <k_work_cancel_delayable+0x1e>
   22422:	4922      	ldr	r1, [pc, #136]	; (224ac <k_work_cancel_delayable+0x90>)
   22424:	4822      	ldr	r0, [pc, #136]	; (224b0 <k_work_cancel_delayable+0x94>)
   22426:	f240 33fd 	movw	r3, #1021	; 0x3fd
   2242a:	4a22      	ldr	r2, [pc, #136]	; (224b4 <k_work_cancel_delayable+0x98>)
   2242c:	f004 fa79 	bl	26922 <assert_print>
   22430:	f240 31fd 	movw	r1, #1021	; 0x3fd
   22434:	481f      	ldr	r0, [pc, #124]	; (224b4 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22436:	f004 fa6d 	bl	26914 <assert_post_action>
	__asm__ volatile(
   2243a:	f04f 0320 	mov.w	r3, #32
   2243e:	f3ef 8511 	mrs	r5, BASEPRI
   22442:	f383 8812 	msr	BASEPRI_MAX, r3
   22446:	f3bf 8f6f 	isb	sy
   2244a:	481b      	ldr	r0, [pc, #108]	; (224b8 <k_work_cancel_delayable+0x9c>)
   2244c:	f7fe ff88 	bl	21360 <z_spin_lock_valid>
   22450:	b960      	cbnz	r0, 2246c <k_work_cancel_delayable+0x50>
   22452:	2394      	movs	r3, #148	; 0x94
   22454:	4a19      	ldr	r2, [pc, #100]	; (224bc <k_work_cancel_delayable+0xa0>)
   22456:	491a      	ldr	r1, [pc, #104]	; (224c0 <k_work_cancel_delayable+0xa4>)
   22458:	4815      	ldr	r0, [pc, #84]	; (224b0 <k_work_cancel_delayable+0x94>)
   2245a:	f004 fa62 	bl	26922 <assert_print>
   2245e:	4916      	ldr	r1, [pc, #88]	; (224b8 <k_work_cancel_delayable+0x9c>)
   22460:	4818      	ldr	r0, [pc, #96]	; (224c4 <k_work_cancel_delayable+0xa8>)
   22462:	f004 fa5e 	bl	26922 <assert_print>
   22466:	2194      	movs	r1, #148	; 0x94
   22468:	4814      	ldr	r0, [pc, #80]	; (224bc <k_work_cancel_delayable+0xa0>)
   2246a:	e7e4      	b.n	22436 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   2246c:	4812      	ldr	r0, [pc, #72]	; (224b8 <k_work_cancel_delayable+0x9c>)
   2246e:	f7fe ff93 	bl	21398 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   22472:	4620      	mov	r0, r4
   22474:	f009 f8b3 	bl	2b5de <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22478:	4620      	mov	r0, r4
   2247a:	f009 f8c5 	bl	2b608 <cancel_async_locked>
   2247e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22480:	480d      	ldr	r0, [pc, #52]	; (224b8 <k_work_cancel_delayable+0x9c>)
   22482:	f7fe ff7b 	bl	2137c <z_spin_unlock_valid>
   22486:	b958      	cbnz	r0, 224a0 <k_work_cancel_delayable+0x84>
   22488:	23c2      	movs	r3, #194	; 0xc2
   2248a:	4a0c      	ldr	r2, [pc, #48]	; (224bc <k_work_cancel_delayable+0xa0>)
   2248c:	490e      	ldr	r1, [pc, #56]	; (224c8 <k_work_cancel_delayable+0xac>)
   2248e:	4808      	ldr	r0, [pc, #32]	; (224b0 <k_work_cancel_delayable+0x94>)
   22490:	f004 fa47 	bl	26922 <assert_print>
   22494:	4908      	ldr	r1, [pc, #32]	; (224b8 <k_work_cancel_delayable+0x9c>)
   22496:	480d      	ldr	r0, [pc, #52]	; (224cc <k_work_cancel_delayable+0xb0>)
   22498:	f004 fa43 	bl	26922 <assert_print>
   2249c:	21c2      	movs	r1, #194	; 0xc2
   2249e:	e7e3      	b.n	22468 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   224a0:	f385 8811 	msr	BASEPRI, r5
   224a4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   224a8:	4620      	mov	r0, r4
   224aa:	bd38      	pop	{r3, r4, r5, pc}
   224ac:	00033007 	.word	0x00033007
   224b0:	0002d881 	.word	0x0002d881
   224b4:	00032f31 	.word	0x00032f31
   224b8:	20021b90 	.word	0x20021b90
   224bc:	0002e6ba 	.word	0x0002e6ba
   224c0:	0002e713 	.word	0x0002e713
   224c4:	0002e728 	.word	0x0002e728
   224c8:	0002e6e7 	.word	0x0002e6e7
   224cc:	0002e6fe 	.word	0x0002e6fe

000224d0 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   224d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   224d4:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   224d6:	4605      	mov	r5, r0
   224d8:	b958      	cbnz	r0, 224f2 <k_work_cancel_delayable_sync+0x22>
   224da:	493a      	ldr	r1, [pc, #232]	; (225c4 <k_work_cancel_delayable_sync+0xf4>)
   224dc:	f240 430e 	movw	r3, #1038	; 0x40e
   224e0:	4a39      	ldr	r2, [pc, #228]	; (225c8 <k_work_cancel_delayable_sync+0xf8>)
   224e2:	483a      	ldr	r0, [pc, #232]	; (225cc <k_work_cancel_delayable_sync+0xfc>)
   224e4:	f004 fa1d 	bl	26922 <assert_print>
   224e8:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   224ec:	4836      	ldr	r0, [pc, #216]	; (225c8 <k_work_cancel_delayable_sync+0xf8>)
   224ee:	f004 fa11 	bl	26914 <assert_post_action>
   224f2:	b949      	cbnz	r1, 22508 <k_work_cancel_delayable_sync+0x38>
   224f4:	4936      	ldr	r1, [pc, #216]	; (225d0 <k_work_cancel_delayable_sync+0x100>)
   224f6:	f240 430f 	movw	r3, #1039	; 0x40f
   224fa:	4a33      	ldr	r2, [pc, #204]	; (225c8 <k_work_cancel_delayable_sync+0xf8>)
   224fc:	4833      	ldr	r0, [pc, #204]	; (225cc <k_work_cancel_delayable_sync+0xfc>)
   224fe:	f004 fa10 	bl	26922 <assert_print>
   22502:	f240 410f 	movw	r1, #1039	; 0x40f
   22506:	e7f1      	b.n	224ec <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   22508:	f008 fffd 	bl	2b506 <k_is_in_isr>
   2250c:	4604      	mov	r4, r0
   2250e:	b148      	cbz	r0, 22524 <k_work_cancel_delayable_sync+0x54>
   22510:	4930      	ldr	r1, [pc, #192]	; (225d4 <k_work_cancel_delayable_sync+0x104>)
   22512:	f44f 6382 	mov.w	r3, #1040	; 0x410
   22516:	4a2c      	ldr	r2, [pc, #176]	; (225c8 <k_work_cancel_delayable_sync+0xf8>)
   22518:	482c      	ldr	r0, [pc, #176]	; (225cc <k_work_cancel_delayable_sync+0xfc>)
   2251a:	f004 fa02 	bl	26922 <assert_print>
   2251e:	f44f 6182 	mov.w	r1, #1040	; 0x410
   22522:	e7e3      	b.n	224ec <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   22524:	f04f 0320 	mov.w	r3, #32
   22528:	f3ef 8811 	mrs	r8, BASEPRI
   2252c:	f383 8812 	msr	BASEPRI_MAX, r3
   22530:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22534:	4828      	ldr	r0, [pc, #160]	; (225d8 <k_work_cancel_delayable_sync+0x108>)
   22536:	f7fe ff13 	bl	21360 <z_spin_lock_valid>
   2253a:	b960      	cbnz	r0, 22556 <k_work_cancel_delayable_sync+0x86>
   2253c:	2394      	movs	r3, #148	; 0x94
   2253e:	4a27      	ldr	r2, [pc, #156]	; (225dc <k_work_cancel_delayable_sync+0x10c>)
   22540:	4927      	ldr	r1, [pc, #156]	; (225e0 <k_work_cancel_delayable_sync+0x110>)
   22542:	4822      	ldr	r0, [pc, #136]	; (225cc <k_work_cancel_delayable_sync+0xfc>)
   22544:	f004 f9ed 	bl	26922 <assert_print>
   22548:	4923      	ldr	r1, [pc, #140]	; (225d8 <k_work_cancel_delayable_sync+0x108>)
   2254a:	4826      	ldr	r0, [pc, #152]	; (225e4 <k_work_cancel_delayable_sync+0x114>)
   2254c:	f004 f9e9 	bl	26922 <assert_print>
   22550:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22552:	4822      	ldr	r0, [pc, #136]	; (225dc <k_work_cancel_delayable_sync+0x10c>)
   22554:	e7cb      	b.n	224ee <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   22556:	4820      	ldr	r0, [pc, #128]	; (225d8 <k_work_cancel_delayable_sync+0x108>)
   22558:	f7fe ff1e 	bl	21398 <z_spin_lock_set_owner>
	return *flagp;
   2255c:	68eb      	ldr	r3, [r5, #12]
   2255e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   22562:	2b00      	cmp	r3, #0
   22564:	bf14      	ite	ne
   22566:	2701      	movne	r7, #1
   22568:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2256a:	d00a      	beq.n	22582 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   2256c:	4628      	mov	r0, r5
   2256e:	f009 f836 	bl	2b5de <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22572:	4628      	mov	r0, r5
   22574:	f009 f848 	bl	2b608 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   22578:	4631      	mov	r1, r6
   2257a:	4628      	mov	r0, r5
   2257c:	f7ff fb74 	bl	21c68 <cancel_sync_locked>
   22580:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22582:	4815      	ldr	r0, [pc, #84]	; (225d8 <k_work_cancel_delayable_sync+0x108>)
   22584:	f7fe fefa 	bl	2137c <z_spin_unlock_valid>
   22588:	b958      	cbnz	r0, 225a2 <k_work_cancel_delayable_sync+0xd2>
   2258a:	23c2      	movs	r3, #194	; 0xc2
   2258c:	4a13      	ldr	r2, [pc, #76]	; (225dc <k_work_cancel_delayable_sync+0x10c>)
   2258e:	4916      	ldr	r1, [pc, #88]	; (225e8 <k_work_cancel_delayable_sync+0x118>)
   22590:	480e      	ldr	r0, [pc, #56]	; (225cc <k_work_cancel_delayable_sync+0xfc>)
   22592:	f004 f9c6 	bl	26922 <assert_print>
   22596:	4910      	ldr	r1, [pc, #64]	; (225d8 <k_work_cancel_delayable_sync+0x108>)
   22598:	4814      	ldr	r0, [pc, #80]	; (225ec <k_work_cancel_delayable_sync+0x11c>)
   2259a:	f004 f9c2 	bl	26922 <assert_print>
   2259e:	21c2      	movs	r1, #194	; 0xc2
   225a0:	e7d7      	b.n	22552 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   225a2:	f388 8811 	msr	BASEPRI, r8
   225a6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   225aa:	b13c      	cbz	r4, 225bc <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   225ac:	f04f 32ff 	mov.w	r2, #4294967295
   225b0:	f04f 33ff 	mov.w	r3, #4294967295
   225b4:	f106 0008 	add.w	r0, r6, #8
   225b8:	f7ff f9ce 	bl	21958 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   225bc:	4638      	mov	r0, r7
   225be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   225c2:	bf00      	nop
   225c4:	00033007 	.word	0x00033007
   225c8:	00032f31 	.word	0x00032f31
   225cc:	0002d881 	.word	0x0002d881
   225d0:	00032fb3 	.word	0x00032fb3
   225d4:	000308ed 	.word	0x000308ed
   225d8:	20021b90 	.word	0x20021b90
   225dc:	0002e6ba 	.word	0x0002e6ba
   225e0:	0002e713 	.word	0x0002e713
   225e4:	0002e728 	.word	0x0002e728
   225e8:	0002e6e7 	.word	0x0002e6e7
   225ec:	0002e6fe 	.word	0x0002e6fe

000225f0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   225f0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   225f2:	4d07      	ldr	r5, [pc, #28]	; (22610 <z_reset_time_slice+0x20>)
   225f4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   225f6:	b154      	cbz	r4, 2260e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   225f8:	f7fb fc4c 	bl	1de94 <sys_clock_elapsed>
   225fc:	4b05      	ldr	r3, [pc, #20]	; (22614 <z_reset_time_slice+0x24>)
   225fe:	4404      	add	r4, r0
   22600:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   22602:	6828      	ldr	r0, [r5, #0]
   22604:	2100      	movs	r1, #0
	}
}
   22606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2260a:	f001 bb87 	b.w	23d1c <z_set_timeout_expiry>
}
   2260e:	bd38      	pop	{r3, r4, r5, pc}
   22610:	20021b9c 	.word	0x20021b9c
   22614:	20021b58 	.word	0x20021b58

00022618 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   22618:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2261a:	4d14      	ldr	r5, [pc, #80]	; (2266c <update_cache+0x54>)
   2261c:	462b      	mov	r3, r5
   2261e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22622:	429c      	cmp	r4, r3
   22624:	d000      	beq.n	22628 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   22626:	b904      	cbnz	r4, 2262a <update_cache+0x12>
   22628:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   2262a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2262c:	b9a8      	cbnz	r0, 2265a <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   2262e:	b963      	cbnz	r3, 2264a <update_cache+0x32>
   22630:	490f      	ldr	r1, [pc, #60]	; (22670 <update_cache+0x58>)
   22632:	2389      	movs	r3, #137	; 0x89
   22634:	4a0f      	ldr	r2, [pc, #60]	; (22674 <update_cache+0x5c>)
   22636:	4810      	ldr	r0, [pc, #64]	; (22678 <update_cache+0x60>)
   22638:	f004 f973 	bl	26922 <assert_print>
   2263c:	480f      	ldr	r0, [pc, #60]	; (2267c <update_cache+0x64>)
   2263e:	f004 f970 	bl	26922 <assert_print>
   22642:	2189      	movs	r1, #137	; 0x89
   22644:	480b      	ldr	r0, [pc, #44]	; (22674 <update_cache+0x5c>)
   22646:	f004 f965 	bl	26914 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2264a:	7b5a      	ldrb	r2, [r3, #13]
   2264c:	06d2      	lsls	r2, r2, #27
   2264e:	d104      	bne.n	2265a <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22650:	69a2      	ldr	r2, [r4, #24]
   22652:	b912      	cbnz	r2, 2265a <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   22654:	89da      	ldrh	r2, [r3, #14]
   22656:	2a7f      	cmp	r2, #127	; 0x7f
   22658:	d805      	bhi.n	22666 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2265a:	429c      	cmp	r4, r3
   2265c:	d002      	beq.n	22664 <update_cache+0x4c>
			z_reset_time_slice(thread);
   2265e:	4620      	mov	r0, r4
   22660:	f7ff ffc6 	bl	225f0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   22664:	4623      	mov	r3, r4
   22666:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   22668:	bd38      	pop	{r3, r4, r5, pc}
   2266a:	bf00      	nop
   2266c:	20021b58 	.word	0x20021b58
   22670:	0003303e 	.word	0x0003303e
   22674:	0003301c 	.word	0x0003301c
   22678:	0002d881 	.word	0x0002d881
   2267c:	00031891 	.word	0x00031891

00022680 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   22680:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22682:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   22686:	7b42      	ldrb	r2, [r0, #13]
   22688:	2b00      	cmp	r3, #0
   2268a:	db38      	blt.n	226fe <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2268c:	06d3      	lsls	r3, r2, #27
   2268e:	d136      	bne.n	226fe <ready_thread+0x7e>
	return node->next != NULL;
   22690:	6983      	ldr	r3, [r0, #24]
   22692:	2b00      	cmp	r3, #0
   22694:	d133      	bne.n	226fe <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   22696:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2269a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2269c:	4a18      	ldr	r2, [pc, #96]	; (22700 <ready_thread+0x80>)
   2269e:	4290      	cmp	r0, r2
   226a0:	d109      	bne.n	226b6 <ready_thread+0x36>
   226a2:	4918      	ldr	r1, [pc, #96]	; (22704 <ready_thread+0x84>)
   226a4:	4818      	ldr	r0, [pc, #96]	; (22708 <ready_thread+0x88>)
   226a6:	23ba      	movs	r3, #186	; 0xba
   226a8:	4a18      	ldr	r2, [pc, #96]	; (2270c <ready_thread+0x8c>)
   226aa:	f004 f93a 	bl	26922 <assert_print>
   226ae:	21ba      	movs	r1, #186	; 0xba
   226b0:	4816      	ldr	r0, [pc, #88]	; (2270c <ready_thread+0x8c>)
   226b2:	f004 f92f 	bl	26914 <assert_post_action>
	return list->head == list;
   226b6:	4916      	ldr	r1, [pc, #88]	; (22710 <ready_thread+0x90>)
   226b8:	460a      	mov	r2, r1
   226ba:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   226be:	4294      	cmp	r4, r2
   226c0:	bf18      	it	ne
   226c2:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   226c4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   226c6:	b923      	cbnz	r3, 226d2 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   226c8:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   226cc:	6020      	str	r0, [r4, #0]
	list->tail = node;
   226ce:	6248      	str	r0, [r1, #36]	; 0x24
}
   226d0:	e00c      	b.n	226ec <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   226d2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   226d6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   226da:	42b5      	cmp	r5, r6
   226dc:	d00b      	beq.n	226f6 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   226de:	42ae      	cmp	r6, r5
   226e0:	dd09      	ble.n	226f6 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   226e2:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   226e4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   226e8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   226ea:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   226ec:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   226ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   226f2:	f7ff bf91 	b.w	22618 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   226f6:	42a3      	cmp	r3, r4
   226f8:	d0e6      	beq.n	226c8 <ready_thread+0x48>
   226fa:	681b      	ldr	r3, [r3, #0]
   226fc:	e7e3      	b.n	226c6 <ready_thread+0x46>
}
   226fe:	bd70      	pop	{r4, r5, r6, pc}
   22700:	2000a240 	.word	0x2000a240
   22704:	00033065 	.word	0x00033065
   22708:	0002d881 	.word	0x0002d881
   2270c:	0003301c 	.word	0x0003301c
   22710:	20021b58 	.word	0x20021b58

00022714 <k_sched_time_slice_set>:
{
   22714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22716:	4604      	mov	r4, r0
   22718:	460d      	mov	r5, r1
	__asm__ volatile(
   2271a:	f04f 0320 	mov.w	r3, #32
   2271e:	f3ef 8711 	mrs	r7, BASEPRI
   22722:	f383 8812 	msr	BASEPRI_MAX, r3
   22726:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2272a:	4822      	ldr	r0, [pc, #136]	; (227b4 <k_sched_time_slice_set+0xa0>)
   2272c:	f7fe fe18 	bl	21360 <z_spin_lock_valid>
   22730:	b968      	cbnz	r0, 2274e <k_sched_time_slice_set+0x3a>
   22732:	2394      	movs	r3, #148	; 0x94
   22734:	4a20      	ldr	r2, [pc, #128]	; (227b8 <k_sched_time_slice_set+0xa4>)
   22736:	4921      	ldr	r1, [pc, #132]	; (227bc <k_sched_time_slice_set+0xa8>)
   22738:	4821      	ldr	r0, [pc, #132]	; (227c0 <k_sched_time_slice_set+0xac>)
   2273a:	f004 f8f2 	bl	26922 <assert_print>
   2273e:	491d      	ldr	r1, [pc, #116]	; (227b4 <k_sched_time_slice_set+0xa0>)
   22740:	4820      	ldr	r0, [pc, #128]	; (227c4 <k_sched_time_slice_set+0xb0>)
   22742:	f004 f8ee 	bl	26922 <assert_print>
   22746:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22748:	481b      	ldr	r0, [pc, #108]	; (227b8 <k_sched_time_slice_set+0xa4>)
   2274a:	f004 f8e3 	bl	26914 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2274e:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   22750:	4818      	ldr	r0, [pc, #96]	; (227b4 <k_sched_time_slice_set+0xa0>)
   22752:	f7fe fe21 	bl	21398 <z_spin_lock_set_owner>
   22756:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2275a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2275e:	4631      	mov	r1, r6
   22760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22764:	2300      	movs	r3, #0
   22766:	fbe4 010c 	umlal	r0, r1, r4, ip
   2276a:	f7e6 fc49 	bl	9000 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2276e:	42b4      	cmp	r4, r6
   22770:	dd02      	ble.n	22778 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   22772:	2802      	cmp	r0, #2
   22774:	bfb8      	it	lt
   22776:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   22778:	4a13      	ldr	r2, [pc, #76]	; (227c8 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   2277a:	4b14      	ldr	r3, [pc, #80]	; (227cc <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2277c:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   2277e:	4a14      	ldr	r2, [pc, #80]	; (227d0 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   22780:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   22782:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   22784:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   22786:	f7ff ff33 	bl	225f0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2278a:	480a      	ldr	r0, [pc, #40]	; (227b4 <k_sched_time_slice_set+0xa0>)
   2278c:	f7fe fdf6 	bl	2137c <z_spin_unlock_valid>
   22790:	b958      	cbnz	r0, 227aa <k_sched_time_slice_set+0x96>
   22792:	23c2      	movs	r3, #194	; 0xc2
   22794:	4a08      	ldr	r2, [pc, #32]	; (227b8 <k_sched_time_slice_set+0xa4>)
   22796:	490f      	ldr	r1, [pc, #60]	; (227d4 <k_sched_time_slice_set+0xc0>)
   22798:	4809      	ldr	r0, [pc, #36]	; (227c0 <k_sched_time_slice_set+0xac>)
   2279a:	f004 f8c2 	bl	26922 <assert_print>
   2279e:	4905      	ldr	r1, [pc, #20]	; (227b4 <k_sched_time_slice_set+0xa0>)
   227a0:	480d      	ldr	r0, [pc, #52]	; (227d8 <k_sched_time_slice_set+0xc4>)
   227a2:	f004 f8be 	bl	26922 <assert_print>
   227a6:	21c2      	movs	r1, #194	; 0xc2
   227a8:	e7ce      	b.n	22748 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   227aa:	f387 8811 	msr	BASEPRI, r7
   227ae:	f3bf 8f6f 	isb	sy
}
   227b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   227b4:	20021ba0 	.word	0x20021ba0
   227b8:	0002e6ba 	.word	0x0002e6ba
   227bc:	0002e713 	.word	0x0002e713
   227c0:	0002d881 	.word	0x0002d881
   227c4:	0002e728 	.word	0x0002e728
   227c8:	20021b9c 	.word	0x20021b9c
   227cc:	20021b58 	.word	0x20021b58
   227d0:	20021b98 	.word	0x20021b98
   227d4:	0002e6e7 	.word	0x0002e6e7
   227d8:	0002e6fe 	.word	0x0002e6fe

000227dc <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   227dc:	b538      	push	{r3, r4, r5, lr}
   227de:	4604      	mov	r4, r0
	__asm__ volatile(
   227e0:	f04f 0320 	mov.w	r3, #32
   227e4:	f3ef 8511 	mrs	r5, BASEPRI
   227e8:	f383 8812 	msr	BASEPRI_MAX, r3
   227ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227f0:	4816      	ldr	r0, [pc, #88]	; (2284c <z_ready_thread+0x70>)
   227f2:	f7fe fdb5 	bl	21360 <z_spin_lock_valid>
   227f6:	b968      	cbnz	r0, 22814 <z_ready_thread+0x38>
   227f8:	2394      	movs	r3, #148	; 0x94
   227fa:	4a15      	ldr	r2, [pc, #84]	; (22850 <z_ready_thread+0x74>)
   227fc:	4915      	ldr	r1, [pc, #84]	; (22854 <z_ready_thread+0x78>)
   227fe:	4816      	ldr	r0, [pc, #88]	; (22858 <z_ready_thread+0x7c>)
   22800:	f004 f88f 	bl	26922 <assert_print>
   22804:	4911      	ldr	r1, [pc, #68]	; (2284c <z_ready_thread+0x70>)
   22806:	4815      	ldr	r0, [pc, #84]	; (2285c <z_ready_thread+0x80>)
   22808:	f004 f88b 	bl	26922 <assert_print>
   2280c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2280e:	4810      	ldr	r0, [pc, #64]	; (22850 <z_ready_thread+0x74>)
   22810:	f004 f880 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   22814:	480d      	ldr	r0, [pc, #52]	; (2284c <z_ready_thread+0x70>)
   22816:	f7fe fdbf 	bl	21398 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   2281a:	4620      	mov	r0, r4
   2281c:	f7ff ff30 	bl	22680 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22820:	480a      	ldr	r0, [pc, #40]	; (2284c <z_ready_thread+0x70>)
   22822:	f7fe fdab 	bl	2137c <z_spin_unlock_valid>
   22826:	b958      	cbnz	r0, 22840 <z_ready_thread+0x64>
   22828:	23c2      	movs	r3, #194	; 0xc2
   2282a:	4a09      	ldr	r2, [pc, #36]	; (22850 <z_ready_thread+0x74>)
   2282c:	490c      	ldr	r1, [pc, #48]	; (22860 <z_ready_thread+0x84>)
   2282e:	480a      	ldr	r0, [pc, #40]	; (22858 <z_ready_thread+0x7c>)
   22830:	f004 f877 	bl	26922 <assert_print>
   22834:	4905      	ldr	r1, [pc, #20]	; (2284c <z_ready_thread+0x70>)
   22836:	480b      	ldr	r0, [pc, #44]	; (22864 <z_ready_thread+0x88>)
   22838:	f004 f873 	bl	26922 <assert_print>
   2283c:	21c2      	movs	r1, #194	; 0xc2
   2283e:	e7e6      	b.n	2280e <z_ready_thread+0x32>
	__asm__ volatile(
   22840:	f385 8811 	msr	BASEPRI, r5
   22844:	f3bf 8f6f 	isb	sy
		}
	}
}
   22848:	bd38      	pop	{r3, r4, r5, pc}
   2284a:	bf00      	nop
   2284c:	20021ba0 	.word	0x20021ba0
   22850:	0002e6ba 	.word	0x0002e6ba
   22854:	0002e713 	.word	0x0002e713
   22858:	0002d881 	.word	0x0002d881
   2285c:	0002e728 	.word	0x0002e728
   22860:	0002e6e7 	.word	0x0002e6e7
   22864:	0002e6fe 	.word	0x0002e6fe

00022868 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   22868:	b538      	push	{r3, r4, r5, lr}
   2286a:	4604      	mov	r4, r0
	__asm__ volatile(
   2286c:	f04f 0320 	mov.w	r3, #32
   22870:	f3ef 8511 	mrs	r5, BASEPRI
   22874:	f383 8812 	msr	BASEPRI_MAX, r3
   22878:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2287c:	4816      	ldr	r0, [pc, #88]	; (228d8 <z_unpend_thread_no_timeout+0x70>)
   2287e:	f7fe fd6f 	bl	21360 <z_spin_lock_valid>
   22882:	b968      	cbnz	r0, 228a0 <z_unpend_thread_no_timeout+0x38>
   22884:	2394      	movs	r3, #148	; 0x94
   22886:	4a15      	ldr	r2, [pc, #84]	; (228dc <z_unpend_thread_no_timeout+0x74>)
   22888:	4915      	ldr	r1, [pc, #84]	; (228e0 <z_unpend_thread_no_timeout+0x78>)
   2288a:	4816      	ldr	r0, [pc, #88]	; (228e4 <z_unpend_thread_no_timeout+0x7c>)
   2288c:	f004 f849 	bl	26922 <assert_print>
   22890:	4911      	ldr	r1, [pc, #68]	; (228d8 <z_unpend_thread_no_timeout+0x70>)
   22892:	4815      	ldr	r0, [pc, #84]	; (228e8 <z_unpend_thread_no_timeout+0x80>)
   22894:	f004 f845 	bl	26922 <assert_print>
   22898:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2289a:	4810      	ldr	r0, [pc, #64]	; (228dc <z_unpend_thread_no_timeout+0x74>)
   2289c:	f004 f83a 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   228a0:	480d      	ldr	r0, [pc, #52]	; (228d8 <z_unpend_thread_no_timeout+0x70>)
   228a2:	f7fe fd79 	bl	21398 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   228a6:	4620      	mov	r0, r4
   228a8:	f000 fc62 	bl	23170 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228ac:	480a      	ldr	r0, [pc, #40]	; (228d8 <z_unpend_thread_no_timeout+0x70>)
   228ae:	f7fe fd65 	bl	2137c <z_spin_unlock_valid>
   228b2:	b958      	cbnz	r0, 228cc <z_unpend_thread_no_timeout+0x64>
   228b4:	23c2      	movs	r3, #194	; 0xc2
   228b6:	4a09      	ldr	r2, [pc, #36]	; (228dc <z_unpend_thread_no_timeout+0x74>)
   228b8:	490c      	ldr	r1, [pc, #48]	; (228ec <z_unpend_thread_no_timeout+0x84>)
   228ba:	480a      	ldr	r0, [pc, #40]	; (228e4 <z_unpend_thread_no_timeout+0x7c>)
   228bc:	f004 f831 	bl	26922 <assert_print>
   228c0:	4905      	ldr	r1, [pc, #20]	; (228d8 <z_unpend_thread_no_timeout+0x70>)
   228c2:	480b      	ldr	r0, [pc, #44]	; (228f0 <z_unpend_thread_no_timeout+0x88>)
   228c4:	f004 f82d 	bl	26922 <assert_print>
   228c8:	21c2      	movs	r1, #194	; 0xc2
   228ca:	e7e6      	b.n	2289a <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   228cc:	f385 8811 	msr	BASEPRI, r5
   228d0:	f3bf 8f6f 	isb	sy
	}
}
   228d4:	bd38      	pop	{r3, r4, r5, pc}
   228d6:	bf00      	nop
   228d8:	20021ba0 	.word	0x20021ba0
   228dc:	0002e6ba 	.word	0x0002e6ba
   228e0:	0002e713 	.word	0x0002e713
   228e4:	0002d881 	.word	0x0002d881
   228e8:	0002e728 	.word	0x0002e728
   228ec:	0002e6e7 	.word	0x0002e6e7
   228f0:	0002e6fe 	.word	0x0002e6fe

000228f4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   228f4:	b570      	push	{r4, r5, r6, lr}
   228f6:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   228f8:	460d      	mov	r5, r1
   228fa:	b9e9      	cbnz	r1, 22938 <z_reschedule+0x44>
   228fc:	f3ef 8605 	mrs	r6, IPSR
   22900:	b9d6      	cbnz	r6, 22938 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   22902:	4b18      	ldr	r3, [pc, #96]	; (22964 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   22904:	69da      	ldr	r2, [r3, #28]
   22906:	689b      	ldr	r3, [r3, #8]
   22908:	429a      	cmp	r2, r3
   2290a:	d015      	beq.n	22938 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2290c:	f7fe fd36 	bl	2137c <z_spin_unlock_valid>
   22910:	b968      	cbnz	r0, 2292e <z_reschedule+0x3a>
   22912:	23e1      	movs	r3, #225	; 0xe1
   22914:	4a14      	ldr	r2, [pc, #80]	; (22968 <z_reschedule+0x74>)
   22916:	4915      	ldr	r1, [pc, #84]	; (2296c <z_reschedule+0x78>)
   22918:	4815      	ldr	r0, [pc, #84]	; (22970 <z_reschedule+0x7c>)
   2291a:	f004 f802 	bl	26922 <assert_print>
   2291e:	4621      	mov	r1, r4
   22920:	4814      	ldr	r0, [pc, #80]	; (22974 <z_reschedule+0x80>)
   22922:	f003 fffe 	bl	26922 <assert_print>
   22926:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22928:	480f      	ldr	r0, [pc, #60]	; (22968 <z_reschedule+0x74>)
   2292a:	f003 fff3 	bl	26914 <assert_post_action>
	ret = arch_swap(key);
   2292e:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   22930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22934:	f7ed bf74 	b.w	10820 <arch_swap>
   22938:	4620      	mov	r0, r4
   2293a:	f7fe fd1f 	bl	2137c <z_spin_unlock_valid>
   2293e:	b958      	cbnz	r0, 22958 <z_reschedule+0x64>
   22940:	23c2      	movs	r3, #194	; 0xc2
   22942:	4a09      	ldr	r2, [pc, #36]	; (22968 <z_reschedule+0x74>)
   22944:	4909      	ldr	r1, [pc, #36]	; (2296c <z_reschedule+0x78>)
   22946:	480a      	ldr	r0, [pc, #40]	; (22970 <z_reschedule+0x7c>)
   22948:	f003 ffeb 	bl	26922 <assert_print>
   2294c:	4621      	mov	r1, r4
   2294e:	4809      	ldr	r0, [pc, #36]	; (22974 <z_reschedule+0x80>)
   22950:	f003 ffe7 	bl	26922 <assert_print>
   22954:	21c2      	movs	r1, #194	; 0xc2
   22956:	e7e7      	b.n	22928 <z_reschedule+0x34>
   22958:	f385 8811 	msr	BASEPRI, r5
   2295c:	f3bf 8f6f 	isb	sy
   22960:	bd70      	pop	{r4, r5, r6, pc}
   22962:	bf00      	nop
   22964:	20021b58 	.word	0x20021b58
   22968:	0002e6ba 	.word	0x0002e6ba
   2296c:	0002e6e7 	.word	0x0002e6e7
   22970:	0002d881 	.word	0x0002d881
   22974:	0002e6fe 	.word	0x0002e6fe

00022978 <z_sched_start>:
{
   22978:	b538      	push	{r3, r4, r5, lr}
   2297a:	4604      	mov	r4, r0
	__asm__ volatile(
   2297c:	f04f 0320 	mov.w	r3, #32
   22980:	f3ef 8511 	mrs	r5, BASEPRI
   22984:	f383 8812 	msr	BASEPRI_MAX, r3
   22988:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2298c:	481c      	ldr	r0, [pc, #112]	; (22a00 <z_sched_start+0x88>)
   2298e:	f7fe fce7 	bl	21360 <z_spin_lock_valid>
   22992:	b968      	cbnz	r0, 229b0 <z_sched_start+0x38>
   22994:	2394      	movs	r3, #148	; 0x94
   22996:	4a1b      	ldr	r2, [pc, #108]	; (22a04 <z_sched_start+0x8c>)
   22998:	491b      	ldr	r1, [pc, #108]	; (22a08 <z_sched_start+0x90>)
   2299a:	481c      	ldr	r0, [pc, #112]	; (22a0c <z_sched_start+0x94>)
   2299c:	f003 ffc1 	bl	26922 <assert_print>
   229a0:	4917      	ldr	r1, [pc, #92]	; (22a00 <z_sched_start+0x88>)
   229a2:	481b      	ldr	r0, [pc, #108]	; (22a10 <z_sched_start+0x98>)
   229a4:	f003 ffbd 	bl	26922 <assert_print>
   229a8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229aa:	4816      	ldr	r0, [pc, #88]	; (22a04 <z_sched_start+0x8c>)
   229ac:	f003 ffb2 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   229b0:	4813      	ldr	r0, [pc, #76]	; (22a00 <z_sched_start+0x88>)
   229b2:	f7fe fcf1 	bl	21398 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   229b6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   229b8:	075a      	lsls	r2, r3, #29
   229ba:	d414      	bmi.n	229e6 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229bc:	4810      	ldr	r0, [pc, #64]	; (22a00 <z_sched_start+0x88>)
   229be:	f7fe fcdd 	bl	2137c <z_spin_unlock_valid>
   229c2:	b958      	cbnz	r0, 229dc <z_sched_start+0x64>
   229c4:	23c2      	movs	r3, #194	; 0xc2
   229c6:	4a0f      	ldr	r2, [pc, #60]	; (22a04 <z_sched_start+0x8c>)
   229c8:	4912      	ldr	r1, [pc, #72]	; (22a14 <z_sched_start+0x9c>)
   229ca:	4810      	ldr	r0, [pc, #64]	; (22a0c <z_sched_start+0x94>)
   229cc:	f003 ffa9 	bl	26922 <assert_print>
   229d0:	490b      	ldr	r1, [pc, #44]	; (22a00 <z_sched_start+0x88>)
   229d2:	4811      	ldr	r0, [pc, #68]	; (22a18 <z_sched_start+0xa0>)
   229d4:	f003 ffa5 	bl	26922 <assert_print>
   229d8:	21c2      	movs	r1, #194	; 0xc2
   229da:	e7e6      	b.n	229aa <z_sched_start+0x32>
	__asm__ volatile(
   229dc:	f385 8811 	msr	BASEPRI, r5
   229e0:	f3bf 8f6f 	isb	sy
}
   229e4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   229e6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   229ea:	4620      	mov	r0, r4
   229ec:	7363      	strb	r3, [r4, #13]
   229ee:	f7ff fe47 	bl	22680 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   229f2:	4629      	mov	r1, r5
}
   229f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   229f8:	4801      	ldr	r0, [pc, #4]	; (22a00 <z_sched_start+0x88>)
   229fa:	f7ff bf7b 	b.w	228f4 <z_reschedule>
   229fe:	bf00      	nop
   22a00:	20021ba0 	.word	0x20021ba0
   22a04:	0002e6ba 	.word	0x0002e6ba
   22a08:	0002e713 	.word	0x0002e713
   22a0c:	0002d881 	.word	0x0002d881
   22a10:	0002e728 	.word	0x0002e728
   22a14:	0002e6e7 	.word	0x0002e6e7
   22a18:	0002e6fe 	.word	0x0002e6fe

00022a1c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   22a1c:	b510      	push	{r4, lr}
	__asm__ volatile(
   22a1e:	f04f 0320 	mov.w	r3, #32
   22a22:	f3ef 8411 	mrs	r4, BASEPRI
   22a26:	f383 8812 	msr	BASEPRI_MAX, r3
   22a2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a2e:	4825      	ldr	r0, [pc, #148]	; (22ac4 <k_sched_lock+0xa8>)
   22a30:	f7fe fc96 	bl	21360 <z_spin_lock_valid>
   22a34:	b960      	cbnz	r0, 22a50 <k_sched_lock+0x34>
   22a36:	2394      	movs	r3, #148	; 0x94
   22a38:	4a23      	ldr	r2, [pc, #140]	; (22ac8 <k_sched_lock+0xac>)
   22a3a:	4924      	ldr	r1, [pc, #144]	; (22acc <k_sched_lock+0xb0>)
   22a3c:	4824      	ldr	r0, [pc, #144]	; (22ad0 <k_sched_lock+0xb4>)
   22a3e:	f003 ff70 	bl	26922 <assert_print>
   22a42:	4920      	ldr	r1, [pc, #128]	; (22ac4 <k_sched_lock+0xa8>)
   22a44:	4823      	ldr	r0, [pc, #140]	; (22ad4 <k_sched_lock+0xb8>)
   22a46:	f003 ff6c 	bl	26922 <assert_print>
   22a4a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a4c:	481e      	ldr	r0, [pc, #120]	; (22ac8 <k_sched_lock+0xac>)
   22a4e:	e010      	b.n	22a72 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   22a50:	481c      	ldr	r0, [pc, #112]	; (22ac4 <k_sched_lock+0xa8>)
   22a52:	f7fe fca1 	bl	21398 <z_spin_lock_set_owner>
   22a56:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   22a5a:	b163      	cbz	r3, 22a76 <k_sched_lock+0x5a>
   22a5c:	491e      	ldr	r1, [pc, #120]	; (22ad8 <k_sched_lock+0xbc>)
   22a5e:	23fd      	movs	r3, #253	; 0xfd
   22a60:	4a1e      	ldr	r2, [pc, #120]	; (22adc <k_sched_lock+0xc0>)
   22a62:	481b      	ldr	r0, [pc, #108]	; (22ad0 <k_sched_lock+0xb4>)
   22a64:	f003 ff5d 	bl	26922 <assert_print>
   22a68:	481d      	ldr	r0, [pc, #116]	; (22ae0 <k_sched_lock+0xc4>)
   22a6a:	f003 ff5a 	bl	26922 <assert_print>
   22a6e:	21fd      	movs	r1, #253	; 0xfd
   22a70:	481a      	ldr	r0, [pc, #104]	; (22adc <k_sched_lock+0xc0>)
   22a72:	f003 ff4f 	bl	26914 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   22a76:	4b1b      	ldr	r3, [pc, #108]	; (22ae4 <k_sched_lock+0xc8>)
   22a78:	689a      	ldr	r2, [r3, #8]
   22a7a:	7bd3      	ldrb	r3, [r2, #15]
   22a7c:	2b01      	cmp	r3, #1
   22a7e:	d10a      	bne.n	22a96 <k_sched_lock+0x7a>
   22a80:	4919      	ldr	r1, [pc, #100]	; (22ae8 <k_sched_lock+0xcc>)
   22a82:	23fe      	movs	r3, #254	; 0xfe
   22a84:	4a15      	ldr	r2, [pc, #84]	; (22adc <k_sched_lock+0xc0>)
   22a86:	4812      	ldr	r0, [pc, #72]	; (22ad0 <k_sched_lock+0xb4>)
   22a88:	f003 ff4b 	bl	26922 <assert_print>
   22a8c:	4814      	ldr	r0, [pc, #80]	; (22ae0 <k_sched_lock+0xc4>)
   22a8e:	f003 ff48 	bl	26922 <assert_print>
   22a92:	21fe      	movs	r1, #254	; 0xfe
   22a94:	e7ec      	b.n	22a70 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   22a96:	3b01      	subs	r3, #1
   22a98:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a9a:	480a      	ldr	r0, [pc, #40]	; (22ac4 <k_sched_lock+0xa8>)
   22a9c:	f7fe fc6e 	bl	2137c <z_spin_unlock_valid>
   22aa0:	b958      	cbnz	r0, 22aba <k_sched_lock+0x9e>
   22aa2:	23c2      	movs	r3, #194	; 0xc2
   22aa4:	4a08      	ldr	r2, [pc, #32]	; (22ac8 <k_sched_lock+0xac>)
   22aa6:	4911      	ldr	r1, [pc, #68]	; (22aec <k_sched_lock+0xd0>)
   22aa8:	4809      	ldr	r0, [pc, #36]	; (22ad0 <k_sched_lock+0xb4>)
   22aaa:	f003 ff3a 	bl	26922 <assert_print>
   22aae:	4905      	ldr	r1, [pc, #20]	; (22ac4 <k_sched_lock+0xa8>)
   22ab0:	480f      	ldr	r0, [pc, #60]	; (22af0 <k_sched_lock+0xd4>)
   22ab2:	f003 ff36 	bl	26922 <assert_print>
   22ab6:	21c2      	movs	r1, #194	; 0xc2
   22ab8:	e7c8      	b.n	22a4c <k_sched_lock+0x30>
	__asm__ volatile(
   22aba:	f384 8811 	msr	BASEPRI, r4
   22abe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   22ac2:	bd10      	pop	{r4, pc}
   22ac4:	20021ba0 	.word	0x20021ba0
   22ac8:	0002e6ba 	.word	0x0002e6ba
   22acc:	0002e713 	.word	0x0002e713
   22ad0:	0002d881 	.word	0x0002d881
   22ad4:	0002e728 	.word	0x0002e728
   22ad8:	00032daf 	.word	0x00032daf
   22adc:	00033086 	.word	0x00033086
   22ae0:	00031891 	.word	0x00031891
   22ae4:	20021b58 	.word	0x20021b58
   22ae8:	000330b1 	.word	0x000330b1
   22aec:	0002e6e7 	.word	0x0002e6e7
   22af0:	0002e6fe 	.word	0x0002e6fe

00022af4 <k_sched_unlock>:

void k_sched_unlock(void)
{
   22af4:	b510      	push	{r4, lr}
	__asm__ volatile(
   22af6:	f04f 0320 	mov.w	r3, #32
   22afa:	f3ef 8411 	mrs	r4, BASEPRI
   22afe:	f383 8812 	msr	BASEPRI_MAX, r3
   22b02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b06:	4829      	ldr	r0, [pc, #164]	; (22bac <k_sched_unlock+0xb8>)
   22b08:	f7fe fc2a 	bl	21360 <z_spin_lock_valid>
   22b0c:	b960      	cbnz	r0, 22b28 <k_sched_unlock+0x34>
   22b0e:	2394      	movs	r3, #148	; 0x94
   22b10:	4a27      	ldr	r2, [pc, #156]	; (22bb0 <k_sched_unlock+0xbc>)
   22b12:	4928      	ldr	r1, [pc, #160]	; (22bb4 <k_sched_unlock+0xc0>)
   22b14:	4828      	ldr	r0, [pc, #160]	; (22bb8 <k_sched_unlock+0xc4>)
   22b16:	f003 ff04 	bl	26922 <assert_print>
   22b1a:	4924      	ldr	r1, [pc, #144]	; (22bac <k_sched_unlock+0xb8>)
   22b1c:	4827      	ldr	r0, [pc, #156]	; (22bbc <k_sched_unlock+0xc8>)
   22b1e:	f003 ff00 	bl	26922 <assert_print>
   22b22:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b24:	4822      	ldr	r0, [pc, #136]	; (22bb0 <k_sched_unlock+0xbc>)
   22b26:	e013      	b.n	22b50 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   22b28:	4820      	ldr	r0, [pc, #128]	; (22bac <k_sched_unlock+0xb8>)
   22b2a:	f7fe fc35 	bl	21398 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   22b2e:	4b24      	ldr	r3, [pc, #144]	; (22bc0 <k_sched_unlock+0xcc>)
   22b30:	689a      	ldr	r2, [r3, #8]
   22b32:	7bd3      	ldrb	r3, [r2, #15]
   22b34:	b973      	cbnz	r3, 22b54 <k_sched_unlock+0x60>
   22b36:	4923      	ldr	r1, [pc, #140]	; (22bc4 <k_sched_unlock+0xd0>)
   22b38:	f240 33e7 	movw	r3, #999	; 0x3e7
   22b3c:	4a22      	ldr	r2, [pc, #136]	; (22bc8 <k_sched_unlock+0xd4>)
   22b3e:	481e      	ldr	r0, [pc, #120]	; (22bb8 <k_sched_unlock+0xc4>)
   22b40:	f003 feef 	bl	26922 <assert_print>
   22b44:	4821      	ldr	r0, [pc, #132]	; (22bcc <k_sched_unlock+0xd8>)
   22b46:	f003 feec 	bl	26922 <assert_print>
   22b4a:	f240 31e7 	movw	r1, #999	; 0x3e7
   22b4e:	481e      	ldr	r0, [pc, #120]	; (22bc8 <k_sched_unlock+0xd4>)
   22b50:	f003 fee0 	bl	26914 <assert_post_action>
   22b54:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   22b58:	b160      	cbz	r0, 22b74 <k_sched_unlock+0x80>
   22b5a:	491d      	ldr	r1, [pc, #116]	; (22bd0 <k_sched_unlock+0xdc>)
   22b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22b60:	4a19      	ldr	r2, [pc, #100]	; (22bc8 <k_sched_unlock+0xd4>)
   22b62:	4815      	ldr	r0, [pc, #84]	; (22bb8 <k_sched_unlock+0xc4>)
   22b64:	f003 fedd 	bl	26922 <assert_print>
   22b68:	4818      	ldr	r0, [pc, #96]	; (22bcc <k_sched_unlock+0xd8>)
   22b6a:	f003 feda 	bl	26922 <assert_print>
   22b6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   22b72:	e7ec      	b.n	22b4e <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   22b74:	3301      	adds	r3, #1
   22b76:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22b78:	f7ff fd4e 	bl	22618 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b7c:	480b      	ldr	r0, [pc, #44]	; (22bac <k_sched_unlock+0xb8>)
   22b7e:	f7fe fbfd 	bl	2137c <z_spin_unlock_valid>
   22b82:	b958      	cbnz	r0, 22b9c <k_sched_unlock+0xa8>
   22b84:	23c2      	movs	r3, #194	; 0xc2
   22b86:	4a0a      	ldr	r2, [pc, #40]	; (22bb0 <k_sched_unlock+0xbc>)
   22b88:	4912      	ldr	r1, [pc, #72]	; (22bd4 <k_sched_unlock+0xe0>)
   22b8a:	480b      	ldr	r0, [pc, #44]	; (22bb8 <k_sched_unlock+0xc4>)
   22b8c:	f003 fec9 	bl	26922 <assert_print>
   22b90:	4906      	ldr	r1, [pc, #24]	; (22bac <k_sched_unlock+0xb8>)
   22b92:	4811      	ldr	r0, [pc, #68]	; (22bd8 <k_sched_unlock+0xe4>)
   22b94:	f003 fec5 	bl	26922 <assert_print>
   22b98:	21c2      	movs	r1, #194	; 0xc2
   22b9a:	e7c3      	b.n	22b24 <k_sched_unlock+0x30>
	__asm__ volatile(
   22b9c:	f384 8811 	msr	BASEPRI, r4
   22ba0:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   22ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   22ba8:	f008 bd89 	b.w	2b6be <z_reschedule_unlocked>
   22bac:	20021ba0 	.word	0x20021ba0
   22bb0:	0002e6ba 	.word	0x0002e6ba
   22bb4:	0002e713 	.word	0x0002e713
   22bb8:	0002d881 	.word	0x0002d881
   22bbc:	0002e728 	.word	0x0002e728
   22bc0:	20021b58 	.word	0x20021b58
   22bc4:	000330e2 	.word	0x000330e2
   22bc8:	0003301c 	.word	0x0003301c
   22bcc:	00031891 	.word	0x00031891
   22bd0:	00032daf 	.word	0x00032daf
   22bd4:	0002e6e7 	.word	0x0002e6e7
   22bd8:	0002e6fe 	.word	0x0002e6fe

00022bdc <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   22bdc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22bde:	4b0b      	ldr	r3, [pc, #44]	; (22c0c <z_priq_dumb_remove+0x30>)
   22be0:	4299      	cmp	r1, r3
   22be2:	d10b      	bne.n	22bfc <z_priq_dumb_remove+0x20>
   22be4:	490a      	ldr	r1, [pc, #40]	; (22c10 <z_priq_dumb_remove+0x34>)
   22be6:	480b      	ldr	r0, [pc, #44]	; (22c14 <z_priq_dumb_remove+0x38>)
   22be8:	f240 4373 	movw	r3, #1139	; 0x473
   22bec:	4a0a      	ldr	r2, [pc, #40]	; (22c18 <z_priq_dumb_remove+0x3c>)
   22bee:	f003 fe98 	bl	26922 <assert_print>
   22bf2:	f240 4173 	movw	r1, #1139	; 0x473
   22bf6:	4808      	ldr	r0, [pc, #32]	; (22c18 <z_priq_dumb_remove+0x3c>)
   22bf8:	f003 fe8c 	bl	26914 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   22bfc:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   22c00:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22c02:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22c04:	2300      	movs	r3, #0
	node->prev = NULL;
   22c06:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   22c0a:	bd08      	pop	{r3, pc}
   22c0c:	2000a240 	.word	0x2000a240
   22c10:	00033065 	.word	0x00033065
   22c14:	0002d881 	.word	0x0002d881
   22c18:	0003301c 	.word	0x0003301c

00022c1c <move_thread_to_end_of_prio_q>:
{
   22c1c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   22c1e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   22c22:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22c24:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   22c26:	7b43      	ldrb	r3, [r0, #13]
   22c28:	da06      	bge.n	22c38 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   22c2e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22c30:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22c32:	481d      	ldr	r0, [pc, #116]	; (22ca8 <move_thread_to_end_of_prio_q+0x8c>)
   22c34:	f7ff ffd2 	bl	22bdc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22c38:	7b63      	ldrb	r3, [r4, #13]
   22c3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22c3e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22c40:	4b1a      	ldr	r3, [pc, #104]	; (22cac <move_thread_to_end_of_prio_q+0x90>)
   22c42:	429c      	cmp	r4, r3
   22c44:	d109      	bne.n	22c5a <move_thread_to_end_of_prio_q+0x3e>
   22c46:	491a      	ldr	r1, [pc, #104]	; (22cb0 <move_thread_to_end_of_prio_q+0x94>)
   22c48:	481a      	ldr	r0, [pc, #104]	; (22cb4 <move_thread_to_end_of_prio_q+0x98>)
   22c4a:	23ba      	movs	r3, #186	; 0xba
   22c4c:	4a1a      	ldr	r2, [pc, #104]	; (22cb8 <move_thread_to_end_of_prio_q+0x9c>)
   22c4e:	f003 fe68 	bl	26922 <assert_print>
   22c52:	21ba      	movs	r1, #186	; 0xba
   22c54:	4818      	ldr	r0, [pc, #96]	; (22cb8 <move_thread_to_end_of_prio_q+0x9c>)
   22c56:	f003 fe5d 	bl	26914 <assert_post_action>
	return list->head == list;
   22c5a:	4a18      	ldr	r2, [pc, #96]	; (22cbc <move_thread_to_end_of_prio_q+0xa0>)
   22c5c:	4611      	mov	r1, r2
   22c5e:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   22c62:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c64:	428b      	cmp	r3, r1
   22c66:	bf08      	it	eq
   22c68:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22c6a:	b923      	cbnz	r3, 22c76 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   22c6c:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   22c70:	6004      	str	r4, [r0, #0]
	list->tail = node;
   22c72:	6254      	str	r4, [r2, #36]	; 0x24
}
   22c74:	e00c      	b.n	22c90 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   22c76:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22c7a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   22c7e:	42b5      	cmp	r5, r6
   22c80:	d00e      	beq.n	22ca0 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22c82:	42ae      	cmp	r6, r5
   22c84:	dd0c      	ble.n	22ca0 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   22c86:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22c88:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   22c8c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22c8e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   22c90:	6890      	ldr	r0, [r2, #8]
   22c92:	1b03      	subs	r3, r0, r4
   22c94:	4258      	negs	r0, r3
   22c96:	4158      	adcs	r0, r3
}
   22c98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   22c9c:	f7ff bcbc 	b.w	22618 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22ca0:	4298      	cmp	r0, r3
   22ca2:	d0e3      	beq.n	22c6c <move_thread_to_end_of_prio_q+0x50>
   22ca4:	681b      	ldr	r3, [r3, #0]
   22ca6:	e7e0      	b.n	22c6a <move_thread_to_end_of_prio_q+0x4e>
   22ca8:	20021b78 	.word	0x20021b78
   22cac:	2000a240 	.word	0x2000a240
   22cb0:	00033065 	.word	0x00033065
   22cb4:	0002d881 	.word	0x0002d881
   22cb8:	0003301c 	.word	0x0003301c
   22cbc:	20021b58 	.word	0x20021b58

00022cc0 <z_time_slice>:
{
   22cc0:	b570      	push	{r4, r5, r6, lr}
   22cc2:	4605      	mov	r5, r0
	__asm__ volatile(
   22cc4:	f04f 0320 	mov.w	r3, #32
   22cc8:	f3ef 8611 	mrs	r6, BASEPRI
   22ccc:	f383 8812 	msr	BASEPRI_MAX, r3
   22cd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cd4:	4829      	ldr	r0, [pc, #164]	; (22d7c <z_time_slice+0xbc>)
   22cd6:	f7fe fb43 	bl	21360 <z_spin_lock_valid>
   22cda:	b968      	cbnz	r0, 22cf8 <z_time_slice+0x38>
   22cdc:	2394      	movs	r3, #148	; 0x94
   22cde:	4a28      	ldr	r2, [pc, #160]	; (22d80 <z_time_slice+0xc0>)
   22ce0:	4928      	ldr	r1, [pc, #160]	; (22d84 <z_time_slice+0xc4>)
   22ce2:	4829      	ldr	r0, [pc, #164]	; (22d88 <z_time_slice+0xc8>)
   22ce4:	f003 fe1d 	bl	26922 <assert_print>
   22ce8:	4924      	ldr	r1, [pc, #144]	; (22d7c <z_time_slice+0xbc>)
   22cea:	4828      	ldr	r0, [pc, #160]	; (22d8c <z_time_slice+0xcc>)
   22cec:	f003 fe19 	bl	26922 <assert_print>
   22cf0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cf2:	4823      	ldr	r0, [pc, #140]	; (22d80 <z_time_slice+0xc0>)
   22cf4:	f003 fe0e 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   22cf8:	4820      	ldr	r0, [pc, #128]	; (22d7c <z_time_slice+0xbc>)
   22cfa:	f7fe fb4d 	bl	21398 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   22cfe:	4b24      	ldr	r3, [pc, #144]	; (22d90 <z_time_slice+0xd0>)
   22d00:	4a24      	ldr	r2, [pc, #144]	; (22d94 <z_time_slice+0xd4>)
   22d02:	689c      	ldr	r4, [r3, #8]
   22d04:	6811      	ldr	r1, [r2, #0]
   22d06:	428c      	cmp	r4, r1
   22d08:	d112      	bne.n	22d30 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   22d0a:	4620      	mov	r0, r4
   22d0c:	f7ff fc70 	bl	225f0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d10:	481a      	ldr	r0, [pc, #104]	; (22d7c <z_time_slice+0xbc>)
   22d12:	f7fe fb33 	bl	2137c <z_spin_unlock_valid>
   22d16:	bb58      	cbnz	r0, 22d70 <z_time_slice+0xb0>
   22d18:	23c2      	movs	r3, #194	; 0xc2
   22d1a:	4a19      	ldr	r2, [pc, #100]	; (22d80 <z_time_slice+0xc0>)
   22d1c:	491e      	ldr	r1, [pc, #120]	; (22d98 <z_time_slice+0xd8>)
   22d1e:	481a      	ldr	r0, [pc, #104]	; (22d88 <z_time_slice+0xc8>)
   22d20:	f003 fdff 	bl	26922 <assert_print>
   22d24:	4915      	ldr	r1, [pc, #84]	; (22d7c <z_time_slice+0xbc>)
   22d26:	481d      	ldr	r0, [pc, #116]	; (22d9c <z_time_slice+0xdc>)
   22d28:	f003 fdfb 	bl	26922 <assert_print>
   22d2c:	21c2      	movs	r1, #194	; 0xc2
   22d2e:	e7e0      	b.n	22cf2 <z_time_slice+0x32>
	pending_current = NULL;
   22d30:	2100      	movs	r1, #0
   22d32:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   22d34:	4a1a      	ldr	r2, [pc, #104]	; (22da0 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   22d36:	6812      	ldr	r2, [r2, #0]
   22d38:	b1c2      	cbz	r2, 22d6c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   22d3a:	89e2      	ldrh	r2, [r4, #14]
   22d3c:	2a7f      	cmp	r2, #127	; 0x7f
   22d3e:	d815      	bhi.n	22d6c <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   22d40:	7b62      	ldrb	r2, [r4, #13]
   22d42:	06d2      	lsls	r2, r2, #27
   22d44:	d112      	bne.n	22d6c <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   22d46:	4a17      	ldr	r2, [pc, #92]	; (22da4 <z_time_slice+0xe4>)
   22d48:	f994 100e 	ldrsb.w	r1, [r4, #14]
   22d4c:	6812      	ldr	r2, [r2, #0]
   22d4e:	4291      	cmp	r1, r2
   22d50:	db0c      	blt.n	22d6c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   22d52:	4a15      	ldr	r2, [pc, #84]	; (22da8 <z_time_slice+0xe8>)
   22d54:	4294      	cmp	r4, r2
   22d56:	d009      	beq.n	22d6c <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   22d58:	691a      	ldr	r2, [r3, #16]
   22d5a:	42aa      	cmp	r2, r5
   22d5c:	dc03      	bgt.n	22d66 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   22d5e:	4620      	mov	r0, r4
   22d60:	f7ff ff5c 	bl	22c1c <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   22d64:	e7d1      	b.n	22d0a <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   22d66:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   22d68:	611a      	str	r2, [r3, #16]
   22d6a:	e7d1      	b.n	22d10 <z_time_slice+0x50>
   22d6c:	2200      	movs	r2, #0
   22d6e:	e7fb      	b.n	22d68 <z_time_slice+0xa8>
	__asm__ volatile(
   22d70:	f386 8811 	msr	BASEPRI, r6
   22d74:	f3bf 8f6f 	isb	sy
}
   22d78:	bd70      	pop	{r4, r5, r6, pc}
   22d7a:	bf00      	nop
   22d7c:	20021ba0 	.word	0x20021ba0
   22d80:	0002e6ba 	.word	0x0002e6ba
   22d84:	0002e713 	.word	0x0002e713
   22d88:	0002d881 	.word	0x0002d881
   22d8c:	0002e728 	.word	0x0002e728
   22d90:	20021b58 	.word	0x20021b58
   22d94:	20021b94 	.word	0x20021b94
   22d98:	0002e6e7 	.word	0x0002e6e7
   22d9c:	0002e6fe 	.word	0x0002e6fe
   22da0:	20021b9c 	.word	0x20021b9c
   22da4:	20021b98 	.word	0x20021b98
   22da8:	2000a240 	.word	0x2000a240

00022dac <unready_thread>:
{
   22dac:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   22dae:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   22db2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22db4:	2a00      	cmp	r2, #0
   22db6:	7b43      	ldrb	r3, [r0, #13]
   22db8:	da06      	bge.n	22dc8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   22dbe:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22dc0:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22dc2:	4806      	ldr	r0, [pc, #24]	; (22ddc <unready_thread+0x30>)
   22dc4:	f7ff ff0a 	bl	22bdc <z_priq_dumb_remove>
	update_cache(thread == _current);
   22dc8:	4b05      	ldr	r3, [pc, #20]	; (22de0 <unready_thread+0x34>)
   22dca:	6898      	ldr	r0, [r3, #8]
   22dcc:	1b03      	subs	r3, r0, r4
   22dce:	4258      	negs	r0, r3
   22dd0:	4158      	adcs	r0, r3
}
   22dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   22dd6:	f7ff bc1f 	b.w	22618 <update_cache>
   22dda:	bf00      	nop
   22ddc:	20021b78 	.word	0x20021b78
   22de0:	20021b58 	.word	0x20021b58

00022de4 <add_to_waitq_locked>:
{
   22de4:	b538      	push	{r3, r4, r5, lr}
   22de6:	4604      	mov	r4, r0
   22de8:	460d      	mov	r5, r1
	unready_thread(thread);
   22dea:	f7ff ffdf 	bl	22dac <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22dee:	7b63      	ldrb	r3, [r4, #13]
   22df0:	f043 0302 	orr.w	r3, r3, #2
   22df4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22df6:	b34d      	cbz	r5, 22e4c <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22df8:	4b15      	ldr	r3, [pc, #84]	; (22e50 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   22dfa:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22dfc:	429c      	cmp	r4, r3
   22dfe:	d109      	bne.n	22e14 <add_to_waitq_locked+0x30>
   22e00:	4914      	ldr	r1, [pc, #80]	; (22e54 <add_to_waitq_locked+0x70>)
   22e02:	4815      	ldr	r0, [pc, #84]	; (22e58 <add_to_waitq_locked+0x74>)
   22e04:	23ba      	movs	r3, #186	; 0xba
   22e06:	4a15      	ldr	r2, [pc, #84]	; (22e5c <add_to_waitq_locked+0x78>)
   22e08:	f003 fd8b 	bl	26922 <assert_print>
   22e0c:	21ba      	movs	r1, #186	; 0xba
   22e0e:	4813      	ldr	r0, [pc, #76]	; (22e5c <add_to_waitq_locked+0x78>)
   22e10:	f003 fd80 	bl	26914 <assert_post_action>
	return list->head == list;
   22e14:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e16:	429d      	cmp	r5, r3
   22e18:	d109      	bne.n	22e2e <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   22e1a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22e1c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22e20:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22e22:	606c      	str	r4, [r5, #4]
}
   22e24:	e012      	b.n	22e4c <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   22e26:	686a      	ldr	r2, [r5, #4]
   22e28:	4293      	cmp	r3, r2
   22e2a:	d0f6      	beq.n	22e1a <add_to_waitq_locked+0x36>
   22e2c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22e2e:	2b00      	cmp	r3, #0
   22e30:	d0f3      	beq.n	22e1a <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   22e32:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22e36:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   22e3a:	428a      	cmp	r2, r1
   22e3c:	d0f3      	beq.n	22e26 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22e3e:	4291      	cmp	r1, r2
   22e40:	ddf1      	ble.n	22e26 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   22e42:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22e44:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22e48:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22e4a:	605c      	str	r4, [r3, #4]
}
   22e4c:	bd38      	pop	{r3, r4, r5, pc}
   22e4e:	bf00      	nop
   22e50:	2000a240 	.word	0x2000a240
   22e54:	00033065 	.word	0x00033065
   22e58:	0002d881 	.word	0x0002d881
   22e5c:	0003301c 	.word	0x0003301c

00022e60 <pend_locked>:
{
   22e60:	b570      	push	{r4, r5, r6, lr}
   22e62:	4615      	mov	r5, r2
   22e64:	461c      	mov	r4, r3
   22e66:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   22e68:	f7ff ffbc 	bl	22de4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e6c:	f1b4 3fff 	cmp.w	r4, #4294967295
   22e70:	bf08      	it	eq
   22e72:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   22e76:	d008      	beq.n	22e8a <pend_locked+0x2a>
   22e78:	462a      	mov	r2, r5
   22e7a:	4623      	mov	r3, r4
   22e7c:	f106 0018 	add.w	r0, r6, #24
   22e80:	4902      	ldr	r1, [pc, #8]	; (22e8c <pend_locked+0x2c>)
}
   22e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22e86:	f000 bdf1 	b.w	23a6c <z_add_timeout>
   22e8a:	bd70      	pop	{r4, r5, r6, pc}
   22e8c:	00023245 	.word	0x00023245

00022e90 <z_pend_curr>:
{
   22e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e94:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   22e98:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 22f50 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   22e9c:	4c2d      	ldr	r4, [pc, #180]	; (22f54 <z_pend_curr+0xc4>)
{
   22e9e:	4617      	mov	r7, r2
	pending_current = _current;
   22ea0:	4b2d      	ldr	r3, [pc, #180]	; (22f58 <z_pend_curr+0xc8>)
   22ea2:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   22ea6:	42a0      	cmp	r0, r4
{
   22ea8:	4605      	mov	r5, r0
   22eaa:	460e      	mov	r6, r1
	pending_current = _current;
   22eac:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   22eae:	d10b      	bne.n	22ec8 <z_pend_curr+0x38>
   22eb0:	492a      	ldr	r1, [pc, #168]	; (22f5c <z_pend_curr+0xcc>)
   22eb2:	482b      	ldr	r0, [pc, #172]	; (22f60 <z_pend_curr+0xd0>)
   22eb4:	f240 334e 	movw	r3, #846	; 0x34e
   22eb8:	4a2a      	ldr	r2, [pc, #168]	; (22f64 <z_pend_curr+0xd4>)
   22eba:	f003 fd32 	bl	26922 <assert_print>
   22ebe:	f240 314e 	movw	r1, #846	; 0x34e
   22ec2:	4828      	ldr	r0, [pc, #160]	; (22f64 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ec4:	f003 fd26 	bl	26914 <assert_post_action>
	__asm__ volatile(
   22ec8:	f04f 0220 	mov.w	r2, #32
   22ecc:	f3ef 8311 	mrs	r3, BASEPRI
   22ed0:	f382 8812 	msr	BASEPRI_MAX, r2
   22ed4:	f3bf 8f6f 	isb	sy
   22ed8:	4620      	mov	r0, r4
   22eda:	f7fe fa41 	bl	21360 <z_spin_lock_valid>
   22ede:	b960      	cbnz	r0, 22efa <z_pend_curr+0x6a>
   22ee0:	2394      	movs	r3, #148	; 0x94
   22ee2:	4a21      	ldr	r2, [pc, #132]	; (22f68 <z_pend_curr+0xd8>)
   22ee4:	4921      	ldr	r1, [pc, #132]	; (22f6c <z_pend_curr+0xdc>)
   22ee6:	481e      	ldr	r0, [pc, #120]	; (22f60 <z_pend_curr+0xd0>)
   22ee8:	f003 fd1b 	bl	26922 <assert_print>
   22eec:	4621      	mov	r1, r4
   22eee:	4820      	ldr	r0, [pc, #128]	; (22f70 <z_pend_curr+0xe0>)
   22ef0:	f003 fd17 	bl	26922 <assert_print>
   22ef4:	2194      	movs	r1, #148	; 0x94
   22ef6:	481c      	ldr	r0, [pc, #112]	; (22f68 <z_pend_curr+0xd8>)
   22ef8:	e7e4      	b.n	22ec4 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   22efa:	4620      	mov	r0, r4
   22efc:	f7fe fa4c 	bl	21398 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   22f00:	f8da 0008 	ldr.w	r0, [sl, #8]
   22f04:	4642      	mov	r2, r8
   22f06:	464b      	mov	r3, r9
   22f08:	4639      	mov	r1, r7
   22f0a:	f7ff ffa9 	bl	22e60 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f0e:	4628      	mov	r0, r5
   22f10:	f7fe fa34 	bl	2137c <z_spin_unlock_valid>
   22f14:	b958      	cbnz	r0, 22f2e <z_pend_curr+0x9e>
   22f16:	4917      	ldr	r1, [pc, #92]	; (22f74 <z_pend_curr+0xe4>)
   22f18:	23e1      	movs	r3, #225	; 0xe1
   22f1a:	4a13      	ldr	r2, [pc, #76]	; (22f68 <z_pend_curr+0xd8>)
   22f1c:	4810      	ldr	r0, [pc, #64]	; (22f60 <z_pend_curr+0xd0>)
   22f1e:	f003 fd00 	bl	26922 <assert_print>
   22f22:	4629      	mov	r1, r5
   22f24:	4814      	ldr	r0, [pc, #80]	; (22f78 <z_pend_curr+0xe8>)
   22f26:	f003 fcfc 	bl	26922 <assert_print>
   22f2a:	21e1      	movs	r1, #225	; 0xe1
   22f2c:	e7e3      	b.n	22ef6 <z_pend_curr+0x66>
   22f2e:	4620      	mov	r0, r4
   22f30:	f7fe fa24 	bl	2137c <z_spin_unlock_valid>
   22f34:	b938      	cbnz	r0, 22f46 <z_pend_curr+0xb6>
   22f36:	490f      	ldr	r1, [pc, #60]	; (22f74 <z_pend_curr+0xe4>)
   22f38:	23e1      	movs	r3, #225	; 0xe1
   22f3a:	4a0b      	ldr	r2, [pc, #44]	; (22f68 <z_pend_curr+0xd8>)
   22f3c:	4808      	ldr	r0, [pc, #32]	; (22f60 <z_pend_curr+0xd0>)
   22f3e:	f003 fcf0 	bl	26922 <assert_print>
   22f42:	4621      	mov	r1, r4
   22f44:	e7ee      	b.n	22f24 <z_pend_curr+0x94>
   22f46:	4630      	mov	r0, r6
}
   22f48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f4c:	f7ed bc68 	b.w	10820 <arch_swap>
   22f50:	20021b58 	.word	0x20021b58
   22f54:	20021ba0 	.word	0x20021ba0
   22f58:	20021b94 	.word	0x20021b94
   22f5c:	00033113 	.word	0x00033113
   22f60:	0002d881 	.word	0x0002d881
   22f64:	0003301c 	.word	0x0003301c
   22f68:	0002e6ba 	.word	0x0002e6ba
   22f6c:	0002e713 	.word	0x0002e713
   22f70:	0002e728 	.word	0x0002e728
   22f74:	0002e6e7 	.word	0x0002e6e7
   22f78:	0002e6fe 	.word	0x0002e6fe

00022f7c <z_set_prio>:
{
   22f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22f80:	4604      	mov	r4, r0
   22f82:	460e      	mov	r6, r1
   22f84:	f04f 0320 	mov.w	r3, #32
   22f88:	f3ef 8911 	mrs	r9, BASEPRI
   22f8c:	f383 8812 	msr	BASEPRI_MAX, r3
   22f90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f94:	4837      	ldr	r0, [pc, #220]	; (23074 <z_set_prio+0xf8>)
   22f96:	f7fe f9e3 	bl	21360 <z_spin_lock_valid>
   22f9a:	4607      	mov	r7, r0
   22f9c:	b960      	cbnz	r0, 22fb8 <z_set_prio+0x3c>
   22f9e:	2394      	movs	r3, #148	; 0x94
   22fa0:	4a35      	ldr	r2, [pc, #212]	; (23078 <z_set_prio+0xfc>)
   22fa2:	4936      	ldr	r1, [pc, #216]	; (2307c <z_set_prio+0x100>)
   22fa4:	4836      	ldr	r0, [pc, #216]	; (23080 <z_set_prio+0x104>)
   22fa6:	f003 fcbc 	bl	26922 <assert_print>
   22faa:	4932      	ldr	r1, [pc, #200]	; (23074 <z_set_prio+0xf8>)
   22fac:	4835      	ldr	r0, [pc, #212]	; (23084 <z_set_prio+0x108>)
   22fae:	f003 fcb8 	bl	26922 <assert_print>
   22fb2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fb4:	4830      	ldr	r0, [pc, #192]	; (23078 <z_set_prio+0xfc>)
   22fb6:	e021      	b.n	22ffc <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   22fb8:	482e      	ldr	r0, [pc, #184]	; (23074 <z_set_prio+0xf8>)
   22fba:	f7fe f9ed 	bl	21398 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   22fbe:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   22fc0:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22fc2:	06da      	lsls	r2, r3, #27
   22fc4:	d11c      	bne.n	23000 <z_set_prio+0x84>
	return node->next != NULL;
   22fc6:	69a5      	ldr	r5, [r4, #24]
   22fc8:	b9d5      	cbnz	r5, 23000 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   22fca:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23088 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22fd2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22fd4:	4621      	mov	r1, r4
   22fd6:	4640      	mov	r0, r8
   22fd8:	f7ff fe00 	bl	22bdc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22fdc:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   22fde:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   22fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22fe4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22fe6:	4b29      	ldr	r3, [pc, #164]	; (2308c <z_set_prio+0x110>)
   22fe8:	429c      	cmp	r4, r3
   22fea:	d11b      	bne.n	23024 <z_set_prio+0xa8>
   22fec:	4928      	ldr	r1, [pc, #160]	; (23090 <z_set_prio+0x114>)
   22fee:	4824      	ldr	r0, [pc, #144]	; (23080 <z_set_prio+0x104>)
   22ff0:	23ba      	movs	r3, #186	; 0xba
   22ff2:	4a28      	ldr	r2, [pc, #160]	; (23094 <z_set_prio+0x118>)
   22ff4:	f003 fc95 	bl	26922 <assert_print>
   22ff8:	21ba      	movs	r1, #186	; 0xba
   22ffa:	4826      	ldr	r0, [pc, #152]	; (23094 <z_set_prio+0x118>)
   22ffc:	f003 fc8a 	bl	26914 <assert_post_action>
   23000:	2700      	movs	r7, #0
			thread->base.prio = prio;
   23002:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23004:	481b      	ldr	r0, [pc, #108]	; (23074 <z_set_prio+0xf8>)
   23006:	f7fe f9b9 	bl	2137c <z_spin_unlock_valid>
   2300a:	bb58      	cbnz	r0, 23064 <z_set_prio+0xe8>
   2300c:	23c2      	movs	r3, #194	; 0xc2
   2300e:	4a1a      	ldr	r2, [pc, #104]	; (23078 <z_set_prio+0xfc>)
   23010:	4921      	ldr	r1, [pc, #132]	; (23098 <z_set_prio+0x11c>)
   23012:	481b      	ldr	r0, [pc, #108]	; (23080 <z_set_prio+0x104>)
   23014:	f003 fc85 	bl	26922 <assert_print>
   23018:	4916      	ldr	r1, [pc, #88]	; (23074 <z_set_prio+0xf8>)
   2301a:	4820      	ldr	r0, [pc, #128]	; (2309c <z_set_prio+0x120>)
   2301c:	f003 fc81 	bl	26922 <assert_print>
   23020:	21c2      	movs	r1, #194	; 0xc2
   23022:	e7c7      	b.n	22fb4 <z_set_prio+0x38>
	return list->head == list;
   23024:	4643      	mov	r3, r8
   23026:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2302a:	4542      	cmp	r2, r8
   2302c:	bf18      	it	ne
   2302e:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   23030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23032:	b925      	cbnz	r5, 2303e <z_set_prio+0xc2>
	node->prev = tail;
   23034:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   23038:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2303a:	625c      	str	r4, [r3, #36]	; 0x24
}
   2303c:	e00a      	b.n	23054 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   2303e:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   23042:	428e      	cmp	r6, r1
   23044:	d00a      	beq.n	2305c <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23046:	42b1      	cmp	r1, r6
   23048:	dd08      	ble.n	2305c <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   2304a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2304c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   23050:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   23052:	606c      	str	r4, [r5, #4]
			update_cache(1);
   23054:	2001      	movs	r0, #1
   23056:	f7ff fadf 	bl	22618 <update_cache>
   2305a:	e7d3      	b.n	23004 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   2305c:	42aa      	cmp	r2, r5
   2305e:	d0e9      	beq.n	23034 <z_set_prio+0xb8>
   23060:	682d      	ldr	r5, [r5, #0]
   23062:	e7e6      	b.n	23032 <z_set_prio+0xb6>
	__asm__ volatile(
   23064:	f389 8811 	msr	BASEPRI, r9
   23068:	f3bf 8f6f 	isb	sy
}
   2306c:	4638      	mov	r0, r7
   2306e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23072:	bf00      	nop
   23074:	20021ba0 	.word	0x20021ba0
   23078:	0002e6ba 	.word	0x0002e6ba
   2307c:	0002e713 	.word	0x0002e713
   23080:	0002d881 	.word	0x0002d881
   23084:	0002e728 	.word	0x0002e728
   23088:	20021b78 	.word	0x20021b78
   2308c:	2000a240 	.word	0x2000a240
   23090:	00033065 	.word	0x00033065
   23094:	0003301c 	.word	0x0003301c
   23098:	0002e6e7 	.word	0x0002e6e7
   2309c:	0002e6fe 	.word	0x0002e6fe

000230a0 <z_impl_k_thread_suspend>:
{
   230a0:	b570      	push	{r4, r5, r6, lr}
   230a2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   230a4:	3018      	adds	r0, #24
   230a6:	f000 fda7 	bl	23bf8 <z_abort_timeout>
	__asm__ volatile(
   230aa:	f04f 0320 	mov.w	r3, #32
   230ae:	f3ef 8611 	mrs	r6, BASEPRI
   230b2:	f383 8812 	msr	BASEPRI_MAX, r3
   230b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230ba:	4824      	ldr	r0, [pc, #144]	; (2314c <z_impl_k_thread_suspend+0xac>)
   230bc:	f7fe f950 	bl	21360 <z_spin_lock_valid>
   230c0:	b968      	cbnz	r0, 230de <z_impl_k_thread_suspend+0x3e>
   230c2:	2394      	movs	r3, #148	; 0x94
   230c4:	4a22      	ldr	r2, [pc, #136]	; (23150 <z_impl_k_thread_suspend+0xb0>)
   230c6:	4923      	ldr	r1, [pc, #140]	; (23154 <z_impl_k_thread_suspend+0xb4>)
   230c8:	4823      	ldr	r0, [pc, #140]	; (23158 <z_impl_k_thread_suspend+0xb8>)
   230ca:	f003 fc2a 	bl	26922 <assert_print>
   230ce:	491f      	ldr	r1, [pc, #124]	; (2314c <z_impl_k_thread_suspend+0xac>)
   230d0:	4822      	ldr	r0, [pc, #136]	; (2315c <z_impl_k_thread_suspend+0xbc>)
   230d2:	f003 fc26 	bl	26922 <assert_print>
   230d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230d8:	481d      	ldr	r0, [pc, #116]	; (23150 <z_impl_k_thread_suspend+0xb0>)
   230da:	f003 fc1b 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   230de:	481b      	ldr	r0, [pc, #108]	; (2314c <z_impl_k_thread_suspend+0xac>)
   230e0:	f7fe f95a 	bl	21398 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   230e4:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   230e8:	7b63      	ldrb	r3, [r4, #13]
   230ea:	2a00      	cmp	r2, #0
   230ec:	da06      	bge.n	230fc <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   230ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   230f2:	4621      	mov	r1, r4
   230f4:	481a      	ldr	r0, [pc, #104]	; (23160 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   230f6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   230f8:	f7ff fd70 	bl	22bdc <z_priq_dumb_remove>
		update_cache(thread == _current);
   230fc:	4d19      	ldr	r5, [pc, #100]	; (23164 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   230fe:	7b63      	ldrb	r3, [r4, #13]
   23100:	68a8      	ldr	r0, [r5, #8]
   23102:	f043 0310 	orr.w	r3, r3, #16
   23106:	7363      	strb	r3, [r4, #13]
   23108:	1b03      	subs	r3, r0, r4
   2310a:	4258      	negs	r0, r3
   2310c:	4158      	adcs	r0, r3
   2310e:	f7ff fa83 	bl	22618 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23112:	480e      	ldr	r0, [pc, #56]	; (2314c <z_impl_k_thread_suspend+0xac>)
   23114:	f7fe f932 	bl	2137c <z_spin_unlock_valid>
   23118:	b958      	cbnz	r0, 23132 <z_impl_k_thread_suspend+0x92>
   2311a:	23c2      	movs	r3, #194	; 0xc2
   2311c:	4a0c      	ldr	r2, [pc, #48]	; (23150 <z_impl_k_thread_suspend+0xb0>)
   2311e:	4912      	ldr	r1, [pc, #72]	; (23168 <z_impl_k_thread_suspend+0xc8>)
   23120:	480d      	ldr	r0, [pc, #52]	; (23158 <z_impl_k_thread_suspend+0xb8>)
   23122:	f003 fbfe 	bl	26922 <assert_print>
   23126:	4909      	ldr	r1, [pc, #36]	; (2314c <z_impl_k_thread_suspend+0xac>)
   23128:	4810      	ldr	r0, [pc, #64]	; (2316c <z_impl_k_thread_suspend+0xcc>)
   2312a:	f003 fbfa 	bl	26922 <assert_print>
   2312e:	21c2      	movs	r1, #194	; 0xc2
   23130:	e7d2      	b.n	230d8 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   23132:	f386 8811 	msr	BASEPRI, r6
   23136:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2313a:	68ab      	ldr	r3, [r5, #8]
   2313c:	42a3      	cmp	r3, r4
   2313e:	d103      	bne.n	23148 <z_impl_k_thread_suspend+0xa8>
}
   23140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23144:	f008 babb 	b.w	2b6be <z_reschedule_unlocked>
}
   23148:	bd70      	pop	{r4, r5, r6, pc}
   2314a:	bf00      	nop
   2314c:	20021ba0 	.word	0x20021ba0
   23150:	0002e6ba 	.word	0x0002e6ba
   23154:	0002e713 	.word	0x0002e713
   23158:	0002d881 	.word	0x0002d881
   2315c:	0002e728 	.word	0x0002e728
   23160:	20021b78 	.word	0x20021b78
   23164:	20021b58 	.word	0x20021b58
   23168:	0002e6e7 	.word	0x0002e6e7
   2316c:	0002e6fe 	.word	0x0002e6fe

00023170 <unpend_thread_no_timeout>:
{
   23170:	b510      	push	{r4, lr}
   23172:	4604      	mov	r4, r0
   23174:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   23176:	b958      	cbnz	r0, 23190 <unpend_thread_no_timeout+0x20>
   23178:	490a      	ldr	r1, [pc, #40]	; (231a4 <unpend_thread_no_timeout+0x34>)
   2317a:	480b      	ldr	r0, [pc, #44]	; (231a8 <unpend_thread_no_timeout+0x38>)
   2317c:	f240 23d6 	movw	r3, #726	; 0x2d6
   23180:	4a0a      	ldr	r2, [pc, #40]	; (231ac <unpend_thread_no_timeout+0x3c>)
   23182:	f003 fbce 	bl	26922 <assert_print>
   23186:	f240 21d6 	movw	r1, #726	; 0x2d6
   2318a:	4808      	ldr	r0, [pc, #32]	; (231ac <unpend_thread_no_timeout+0x3c>)
   2318c:	f003 fbc2 	bl	26914 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   23190:	4621      	mov	r1, r4
   23192:	f7ff fd23 	bl	22bdc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23196:	7b63      	ldrb	r3, [r4, #13]
   23198:	f023 0302 	bic.w	r3, r3, #2
   2319c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2319e:	2300      	movs	r3, #0
   231a0:	60a3      	str	r3, [r4, #8]
}
   231a2:	bd10      	pop	{r4, pc}
   231a4:	0003314a 	.word	0x0003314a
   231a8:	0002d881 	.word	0x0002d881
   231ac:	0003301c 	.word	0x0003301c

000231b0 <z_unpend_thread>:
{
   231b0:	b538      	push	{r3, r4, r5, lr}
   231b2:	4604      	mov	r4, r0
	__asm__ volatile(
   231b4:	f04f 0320 	mov.w	r3, #32
   231b8:	f3ef 8511 	mrs	r5, BASEPRI
   231bc:	f383 8812 	msr	BASEPRI_MAX, r3
   231c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231c4:	4818      	ldr	r0, [pc, #96]	; (23228 <z_unpend_thread+0x78>)
   231c6:	f7fe f8cb 	bl	21360 <z_spin_lock_valid>
   231ca:	b968      	cbnz	r0, 231e8 <z_unpend_thread+0x38>
   231cc:	2394      	movs	r3, #148	; 0x94
   231ce:	4a17      	ldr	r2, [pc, #92]	; (2322c <z_unpend_thread+0x7c>)
   231d0:	4917      	ldr	r1, [pc, #92]	; (23230 <z_unpend_thread+0x80>)
   231d2:	4818      	ldr	r0, [pc, #96]	; (23234 <z_unpend_thread+0x84>)
   231d4:	f003 fba5 	bl	26922 <assert_print>
   231d8:	4913      	ldr	r1, [pc, #76]	; (23228 <z_unpend_thread+0x78>)
   231da:	4817      	ldr	r0, [pc, #92]	; (23238 <z_unpend_thread+0x88>)
   231dc:	f003 fba1 	bl	26922 <assert_print>
   231e0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231e2:	4812      	ldr	r0, [pc, #72]	; (2322c <z_unpend_thread+0x7c>)
   231e4:	f003 fb96 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   231e8:	480f      	ldr	r0, [pc, #60]	; (23228 <z_unpend_thread+0x78>)
   231ea:	f7fe f8d5 	bl	21398 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   231ee:	4620      	mov	r0, r4
   231f0:	f7ff ffbe 	bl	23170 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231f4:	480c      	ldr	r0, [pc, #48]	; (23228 <z_unpend_thread+0x78>)
   231f6:	f7fe f8c1 	bl	2137c <z_spin_unlock_valid>
   231fa:	b958      	cbnz	r0, 23214 <z_unpend_thread+0x64>
   231fc:	23c2      	movs	r3, #194	; 0xc2
   231fe:	4a0b      	ldr	r2, [pc, #44]	; (2322c <z_unpend_thread+0x7c>)
   23200:	490e      	ldr	r1, [pc, #56]	; (2323c <z_unpend_thread+0x8c>)
   23202:	480c      	ldr	r0, [pc, #48]	; (23234 <z_unpend_thread+0x84>)
   23204:	f003 fb8d 	bl	26922 <assert_print>
   23208:	4907      	ldr	r1, [pc, #28]	; (23228 <z_unpend_thread+0x78>)
   2320a:	480d      	ldr	r0, [pc, #52]	; (23240 <z_unpend_thread+0x90>)
   2320c:	f003 fb89 	bl	26922 <assert_print>
   23210:	21c2      	movs	r1, #194	; 0xc2
   23212:	e7e6      	b.n	231e2 <z_unpend_thread+0x32>
	__asm__ volatile(
   23214:	f385 8811 	msr	BASEPRI, r5
   23218:	f3bf 8f6f 	isb	sy
   2321c:	f104 0018 	add.w	r0, r4, #24
}
   23220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23224:	f000 bce8 	b.w	23bf8 <z_abort_timeout>
   23228:	20021ba0 	.word	0x20021ba0
   2322c:	0002e6ba 	.word	0x0002e6ba
   23230:	0002e713 	.word	0x0002e713
   23234:	0002d881 	.word	0x0002d881
   23238:	0002e728 	.word	0x0002e728
   2323c:	0002e6e7 	.word	0x0002e6e7
   23240:	0002e6fe 	.word	0x0002e6fe

00023244 <z_thread_timeout>:
{
   23244:	b570      	push	{r4, r5, r6, lr}
   23246:	4604      	mov	r4, r0
	__asm__ volatile(
   23248:	f04f 0320 	mov.w	r3, #32
   2324c:	f3ef 8611 	mrs	r6, BASEPRI
   23250:	f383 8812 	msr	BASEPRI_MAX, r3
   23254:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23258:	481f      	ldr	r0, [pc, #124]	; (232d8 <z_thread_timeout+0x94>)
   2325a:	f7fe f881 	bl	21360 <z_spin_lock_valid>
   2325e:	b968      	cbnz	r0, 2327c <z_thread_timeout+0x38>
   23260:	2394      	movs	r3, #148	; 0x94
   23262:	4a1e      	ldr	r2, [pc, #120]	; (232dc <z_thread_timeout+0x98>)
   23264:	491e      	ldr	r1, [pc, #120]	; (232e0 <z_thread_timeout+0x9c>)
   23266:	481f      	ldr	r0, [pc, #124]	; (232e4 <z_thread_timeout+0xa0>)
   23268:	f003 fb5b 	bl	26922 <assert_print>
   2326c:	491a      	ldr	r1, [pc, #104]	; (232d8 <z_thread_timeout+0x94>)
   2326e:	481e      	ldr	r0, [pc, #120]	; (232e8 <z_thread_timeout+0xa4>)
   23270:	f003 fb57 	bl	26922 <assert_print>
   23274:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23276:	4819      	ldr	r0, [pc, #100]	; (232dc <z_thread_timeout+0x98>)
   23278:	f003 fb4c 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   2327c:	4816      	ldr	r0, [pc, #88]	; (232d8 <z_thread_timeout+0x94>)
   2327e:	f7fe f88b 	bl	21398 <z_spin_lock_set_owner>
		if (!killed) {
   23282:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23286:	f013 0f28 	tst.w	r3, #40	; 0x28
   2328a:	d110      	bne.n	232ae <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   2328c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   23290:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   23294:	b113      	cbz	r3, 2329c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   23296:	4628      	mov	r0, r5
   23298:	f7ff ff6a 	bl	23170 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2329c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   232a0:	4628      	mov	r0, r5
   232a2:	f023 0314 	bic.w	r3, r3, #20
   232a6:	f804 3c0b 	strb.w	r3, [r4, #-11]
   232aa:	f7ff f9e9 	bl	22680 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232ae:	480a      	ldr	r0, [pc, #40]	; (232d8 <z_thread_timeout+0x94>)
   232b0:	f7fe f864 	bl	2137c <z_spin_unlock_valid>
   232b4:	b958      	cbnz	r0, 232ce <z_thread_timeout+0x8a>
   232b6:	23c2      	movs	r3, #194	; 0xc2
   232b8:	4a08      	ldr	r2, [pc, #32]	; (232dc <z_thread_timeout+0x98>)
   232ba:	490c      	ldr	r1, [pc, #48]	; (232ec <z_thread_timeout+0xa8>)
   232bc:	4809      	ldr	r0, [pc, #36]	; (232e4 <z_thread_timeout+0xa0>)
   232be:	f003 fb30 	bl	26922 <assert_print>
   232c2:	4905      	ldr	r1, [pc, #20]	; (232d8 <z_thread_timeout+0x94>)
   232c4:	480a      	ldr	r0, [pc, #40]	; (232f0 <z_thread_timeout+0xac>)
   232c6:	f003 fb2c 	bl	26922 <assert_print>
   232ca:	21c2      	movs	r1, #194	; 0xc2
   232cc:	e7d3      	b.n	23276 <z_thread_timeout+0x32>
	__asm__ volatile(
   232ce:	f386 8811 	msr	BASEPRI, r6
   232d2:	f3bf 8f6f 	isb	sy
}
   232d6:	bd70      	pop	{r4, r5, r6, pc}
   232d8:	20021ba0 	.word	0x20021ba0
   232dc:	0002e6ba 	.word	0x0002e6ba
   232e0:	0002e713 	.word	0x0002e713
   232e4:	0002d881 	.word	0x0002d881
   232e8:	0002e728 	.word	0x0002e728
   232ec:	0002e6e7 	.word	0x0002e6e7
   232f0:	0002e6fe 	.word	0x0002e6fe

000232f4 <z_unpend1_no_timeout>:
{
   232f4:	b570      	push	{r4, r5, r6, lr}
   232f6:	4605      	mov	r5, r0
	__asm__ volatile(
   232f8:	f04f 0320 	mov.w	r3, #32
   232fc:	f3ef 8611 	mrs	r6, BASEPRI
   23300:	f383 8812 	msr	BASEPRI_MAX, r3
   23304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23308:	4819      	ldr	r0, [pc, #100]	; (23370 <z_unpend1_no_timeout+0x7c>)
   2330a:	f7fe f829 	bl	21360 <z_spin_lock_valid>
   2330e:	b968      	cbnz	r0, 2332c <z_unpend1_no_timeout+0x38>
   23310:	2394      	movs	r3, #148	; 0x94
   23312:	4a18      	ldr	r2, [pc, #96]	; (23374 <z_unpend1_no_timeout+0x80>)
   23314:	4918      	ldr	r1, [pc, #96]	; (23378 <z_unpend1_no_timeout+0x84>)
   23316:	4819      	ldr	r0, [pc, #100]	; (2337c <z_unpend1_no_timeout+0x88>)
   23318:	f003 fb03 	bl	26922 <assert_print>
   2331c:	4914      	ldr	r1, [pc, #80]	; (23370 <z_unpend1_no_timeout+0x7c>)
   2331e:	4818      	ldr	r0, [pc, #96]	; (23380 <z_unpend1_no_timeout+0x8c>)
   23320:	f003 faff 	bl	26922 <assert_print>
   23324:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23326:	4813      	ldr	r0, [pc, #76]	; (23374 <z_unpend1_no_timeout+0x80>)
   23328:	f003 faf4 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   2332c:	4810      	ldr	r0, [pc, #64]	; (23370 <z_unpend1_no_timeout+0x7c>)
   2332e:	f7fe f833 	bl	21398 <z_spin_lock_set_owner>
	return list->head == list;
   23332:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23334:	42a5      	cmp	r5, r4
   23336:	d013      	beq.n	23360 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   23338:	b114      	cbz	r4, 23340 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2333a:	4620      	mov	r0, r4
   2333c:	f7ff ff18 	bl	23170 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23340:	480b      	ldr	r0, [pc, #44]	; (23370 <z_unpend1_no_timeout+0x7c>)
   23342:	f7fe f81b 	bl	2137c <z_spin_unlock_valid>
   23346:	b968      	cbnz	r0, 23364 <z_unpend1_no_timeout+0x70>
   23348:	23c2      	movs	r3, #194	; 0xc2
   2334a:	4a0a      	ldr	r2, [pc, #40]	; (23374 <z_unpend1_no_timeout+0x80>)
   2334c:	490d      	ldr	r1, [pc, #52]	; (23384 <z_unpend1_no_timeout+0x90>)
   2334e:	480b      	ldr	r0, [pc, #44]	; (2337c <z_unpend1_no_timeout+0x88>)
   23350:	f003 fae7 	bl	26922 <assert_print>
   23354:	4906      	ldr	r1, [pc, #24]	; (23370 <z_unpend1_no_timeout+0x7c>)
   23356:	480c      	ldr	r0, [pc, #48]	; (23388 <z_unpend1_no_timeout+0x94>)
   23358:	f003 fae3 	bl	26922 <assert_print>
   2335c:	21c2      	movs	r1, #194	; 0xc2
   2335e:	e7e2      	b.n	23326 <z_unpend1_no_timeout+0x32>
   23360:	2400      	movs	r4, #0
   23362:	e7ed      	b.n	23340 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   23364:	f386 8811 	msr	BASEPRI, r6
   23368:	f3bf 8f6f 	isb	sy
}
   2336c:	4620      	mov	r0, r4
   2336e:	bd70      	pop	{r4, r5, r6, pc}
   23370:	20021ba0 	.word	0x20021ba0
   23374:	0002e6ba 	.word	0x0002e6ba
   23378:	0002e713 	.word	0x0002e713
   2337c:	0002d881 	.word	0x0002d881
   23380:	0002e728 	.word	0x0002e728
   23384:	0002e6e7 	.word	0x0002e6e7
   23388:	0002e6fe 	.word	0x0002e6fe

0002338c <z_unpend_first_thread>:
{
   2338c:	b570      	push	{r4, r5, r6, lr}
   2338e:	4605      	mov	r5, r0
	__asm__ volatile(
   23390:	f04f 0320 	mov.w	r3, #32
   23394:	f3ef 8611 	mrs	r6, BASEPRI
   23398:	f383 8812 	msr	BASEPRI_MAX, r3
   2339c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233a0:	481b      	ldr	r0, [pc, #108]	; (23410 <z_unpend_first_thread+0x84>)
   233a2:	f7fd ffdd 	bl	21360 <z_spin_lock_valid>
   233a6:	b968      	cbnz	r0, 233c4 <z_unpend_first_thread+0x38>
   233a8:	2394      	movs	r3, #148	; 0x94
   233aa:	4a1a      	ldr	r2, [pc, #104]	; (23414 <z_unpend_first_thread+0x88>)
   233ac:	491a      	ldr	r1, [pc, #104]	; (23418 <z_unpend_first_thread+0x8c>)
   233ae:	481b      	ldr	r0, [pc, #108]	; (2341c <z_unpend_first_thread+0x90>)
   233b0:	f003 fab7 	bl	26922 <assert_print>
   233b4:	4916      	ldr	r1, [pc, #88]	; (23410 <z_unpend_first_thread+0x84>)
   233b6:	481a      	ldr	r0, [pc, #104]	; (23420 <z_unpend_first_thread+0x94>)
   233b8:	f003 fab3 	bl	26922 <assert_print>
   233bc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233be:	4815      	ldr	r0, [pc, #84]	; (23414 <z_unpend_first_thread+0x88>)
   233c0:	f003 faa8 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   233c4:	4812      	ldr	r0, [pc, #72]	; (23410 <z_unpend_first_thread+0x84>)
   233c6:	f7fd ffe7 	bl	21398 <z_spin_lock_set_owner>
	return list->head == list;
   233ca:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   233cc:	42a5      	cmp	r5, r4
   233ce:	d017      	beq.n	23400 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   233d0:	b134      	cbz	r4, 233e0 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   233d2:	4620      	mov	r0, r4
   233d4:	f7ff fecc 	bl	23170 <unpend_thread_no_timeout>
   233d8:	f104 0018 	add.w	r0, r4, #24
   233dc:	f000 fc0c 	bl	23bf8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233e0:	480b      	ldr	r0, [pc, #44]	; (23410 <z_unpend_first_thread+0x84>)
   233e2:	f7fd ffcb 	bl	2137c <z_spin_unlock_valid>
   233e6:	b968      	cbnz	r0, 23404 <z_unpend_first_thread+0x78>
   233e8:	23c2      	movs	r3, #194	; 0xc2
   233ea:	4a0a      	ldr	r2, [pc, #40]	; (23414 <z_unpend_first_thread+0x88>)
   233ec:	490d      	ldr	r1, [pc, #52]	; (23424 <z_unpend_first_thread+0x98>)
   233ee:	480b      	ldr	r0, [pc, #44]	; (2341c <z_unpend_first_thread+0x90>)
   233f0:	f003 fa97 	bl	26922 <assert_print>
   233f4:	4906      	ldr	r1, [pc, #24]	; (23410 <z_unpend_first_thread+0x84>)
   233f6:	480c      	ldr	r0, [pc, #48]	; (23428 <z_unpend_first_thread+0x9c>)
   233f8:	f003 fa93 	bl	26922 <assert_print>
   233fc:	21c2      	movs	r1, #194	; 0xc2
   233fe:	e7de      	b.n	233be <z_unpend_first_thread+0x32>
   23400:	2400      	movs	r4, #0
   23402:	e7ed      	b.n	233e0 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   23404:	f386 8811 	msr	BASEPRI, r6
   23408:	f3bf 8f6f 	isb	sy
}
   2340c:	4620      	mov	r0, r4
   2340e:	bd70      	pop	{r4, r5, r6, pc}
   23410:	20021ba0 	.word	0x20021ba0
   23414:	0002e6ba 	.word	0x0002e6ba
   23418:	0002e713 	.word	0x0002e713
   2341c:	0002d881 	.word	0x0002d881
   23420:	0002e728 	.word	0x0002e728
   23424:	0002e6e7 	.word	0x0002e6e7
   23428:	0002e6fe 	.word	0x0002e6fe

0002342c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2342c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2342e:	4b04      	ldr	r3, [pc, #16]	; (23440 <z_sched_init+0x14>)
   23430:	4608      	mov	r0, r1
   23432:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   23436:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2343a:	f7ff b96b 	b.w	22714 <k_sched_time_slice_set>
   2343e:	bf00      	nop
   23440:	20021b58 	.word	0x20021b58

00023444 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   23444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23446:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2344a:	b16b      	cbz	r3, 23468 <z_impl_k_yield+0x24>
   2344c:	493c      	ldr	r1, [pc, #240]	; (23540 <z_impl_k_yield+0xfc>)
   2344e:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   23452:	4a3c      	ldr	r2, [pc, #240]	; (23544 <z_impl_k_yield+0x100>)
   23454:	483c      	ldr	r0, [pc, #240]	; (23548 <z_impl_k_yield+0x104>)
   23456:	f003 fa64 	bl	26922 <assert_print>
   2345a:	483c      	ldr	r0, [pc, #240]	; (2354c <z_impl_k_yield+0x108>)
   2345c:	f003 fa61 	bl	26922 <assert_print>
   23460:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23464:	4837      	ldr	r0, [pc, #220]	; (23544 <z_impl_k_yield+0x100>)
   23466:	e017      	b.n	23498 <z_impl_k_yield+0x54>
	__asm__ volatile(
   23468:	f04f 0320 	mov.w	r3, #32
   2346c:	f3ef 8611 	mrs	r6, BASEPRI
   23470:	f383 8812 	msr	BASEPRI_MAX, r3
   23474:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23478:	4835      	ldr	r0, [pc, #212]	; (23550 <z_impl_k_yield+0x10c>)
   2347a:	f7fd ff71 	bl	21360 <z_spin_lock_valid>
   2347e:	b968      	cbnz	r0, 2349c <z_impl_k_yield+0x58>
   23480:	2394      	movs	r3, #148	; 0x94
   23482:	4a34      	ldr	r2, [pc, #208]	; (23554 <z_impl_k_yield+0x110>)
   23484:	4934      	ldr	r1, [pc, #208]	; (23558 <z_impl_k_yield+0x114>)
   23486:	4830      	ldr	r0, [pc, #192]	; (23548 <z_impl_k_yield+0x104>)
   23488:	f003 fa4b 	bl	26922 <assert_print>
   2348c:	4930      	ldr	r1, [pc, #192]	; (23550 <z_impl_k_yield+0x10c>)
   2348e:	4833      	ldr	r0, [pc, #204]	; (2355c <z_impl_k_yield+0x118>)
   23490:	f003 fa47 	bl	26922 <assert_print>
   23494:	2194      	movs	r1, #148	; 0x94
   23496:	482f      	ldr	r0, [pc, #188]	; (23554 <z_impl_k_yield+0x110>)
   23498:	f003 fa3c 	bl	26914 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2349c:	4c30      	ldr	r4, [pc, #192]	; (23560 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   2349e:	482c      	ldr	r0, [pc, #176]	; (23550 <z_impl_k_yield+0x10c>)
   234a0:	f7fd ff7a 	bl	21398 <z_spin_lock_set_owner>
   234a4:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   234a6:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   234aa:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   234ac:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   234ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   234b2:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   234b4:	f7ff fb92 	bl	22bdc <z_priq_dumb_remove>
	}
	queue_thread(_current);
   234b8:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   234ba:	7b5a      	ldrb	r2, [r3, #13]
   234bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   234c0:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   234c2:	4a28      	ldr	r2, [pc, #160]	; (23564 <z_impl_k_yield+0x120>)
   234c4:	4293      	cmp	r3, r2
   234c6:	d107      	bne.n	234d8 <z_impl_k_yield+0x94>
   234c8:	4927      	ldr	r1, [pc, #156]	; (23568 <z_impl_k_yield+0x124>)
   234ca:	23ba      	movs	r3, #186	; 0xba
   234cc:	4a1d      	ldr	r2, [pc, #116]	; (23544 <z_impl_k_yield+0x100>)
   234ce:	481e      	ldr	r0, [pc, #120]	; (23548 <z_impl_k_yield+0x104>)
   234d0:	f003 fa27 	bl	26922 <assert_print>
   234d4:	21ba      	movs	r1, #186	; 0xba
   234d6:	e7c5      	b.n	23464 <z_impl_k_yield+0x20>
	return list->head == list;
   234d8:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   234da:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   234dc:	42aa      	cmp	r2, r5
   234de:	bf08      	it	eq
   234e0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   234e2:	b922      	cbnz	r2, 234ee <z_impl_k_yield+0xaa>
	node->prev = tail;
   234e4:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   234e8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   234ea:	6263      	str	r3, [r4, #36]	; 0x24
}
   234ec:	e00c      	b.n	23508 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   234ee:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   234f2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   234f6:	42b8      	cmp	r0, r7
   234f8:	d019      	beq.n	2352e <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   234fa:	4287      	cmp	r7, r0
   234fc:	dd17      	ble.n	2352e <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   234fe:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   23500:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   23504:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   23506:	6053      	str	r3, [r2, #4]
	update_cache(1);
   23508:	2001      	movs	r0, #1
   2350a:	f7ff f885 	bl	22618 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2350e:	4810      	ldr	r0, [pc, #64]	; (23550 <z_impl_k_yield+0x10c>)
   23510:	f7fd ff34 	bl	2137c <z_spin_unlock_valid>
   23514:	b978      	cbnz	r0, 23536 <z_impl_k_yield+0xf2>
   23516:	23e1      	movs	r3, #225	; 0xe1
   23518:	4a0e      	ldr	r2, [pc, #56]	; (23554 <z_impl_k_yield+0x110>)
   2351a:	4914      	ldr	r1, [pc, #80]	; (2356c <z_impl_k_yield+0x128>)
   2351c:	480a      	ldr	r0, [pc, #40]	; (23548 <z_impl_k_yield+0x104>)
   2351e:	f003 fa00 	bl	26922 <assert_print>
   23522:	490b      	ldr	r1, [pc, #44]	; (23550 <z_impl_k_yield+0x10c>)
   23524:	4812      	ldr	r0, [pc, #72]	; (23570 <z_impl_k_yield+0x12c>)
   23526:	f003 f9fc 	bl	26922 <assert_print>
   2352a:	21e1      	movs	r1, #225	; 0xe1
   2352c:	e7b3      	b.n	23496 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   2352e:	428a      	cmp	r2, r1
   23530:	d0d8      	beq.n	234e4 <z_impl_k_yield+0xa0>
   23532:	6812      	ldr	r2, [r2, #0]
   23534:	e7d5      	b.n	234e2 <z_impl_k_yield+0x9e>
   23536:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   23538:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2353c:	f7ed b970 	b.w	10820 <arch_swap>
   23540:	00032daf 	.word	0x00032daf
   23544:	0003301c 	.word	0x0003301c
   23548:	0002d881 	.word	0x0002d881
   2354c:	00031891 	.word	0x00031891
   23550:	20021ba0 	.word	0x20021ba0
   23554:	0002e6ba 	.word	0x0002e6ba
   23558:	0002e713 	.word	0x0002e713
   2355c:	0002e728 	.word	0x0002e728
   23560:	20021b58 	.word	0x20021b58
   23564:	2000a240 	.word	0x2000a240
   23568:	00033065 	.word	0x00033065
   2356c:	0002e6e7 	.word	0x0002e6e7
   23570:	0002e6fe 	.word	0x0002e6fe

00023574 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   23574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23578:	4605      	mov	r5, r0
   2357a:	460e      	mov	r6, r1
   2357c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23580:	b16b      	cbz	r3, 2359e <z_tick_sleep+0x2a>
   23582:	493f      	ldr	r1, [pc, #252]	; (23680 <z_tick_sleep+0x10c>)
   23584:	f240 538c 	movw	r3, #1420	; 0x58c
   23588:	4a3e      	ldr	r2, [pc, #248]	; (23684 <z_tick_sleep+0x110>)
   2358a:	483f      	ldr	r0, [pc, #252]	; (23688 <z_tick_sleep+0x114>)
   2358c:	f003 f9c9 	bl	26922 <assert_print>
   23590:	483e      	ldr	r0, [pc, #248]	; (2368c <z_tick_sleep+0x118>)
   23592:	f003 f9c6 	bl	26922 <assert_print>
   23596:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2359a:	483a      	ldr	r0, [pc, #232]	; (23684 <z_tick_sleep+0x110>)
   2359c:	e025      	b.n	235ea <z_tick_sleep+0x76>
	if (ticks == 0) {
   2359e:	ea50 0301 	orrs.w	r3, r0, r1
   235a2:	d103      	bne.n	235ac <z_tick_sleep+0x38>
	z_impl_k_yield();
   235a4:	f7ff ff4e 	bl	23444 <z_impl_k_yield>
		return 0;
   235a8:	2000      	movs	r0, #0
   235aa:	e066      	b.n	2367a <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   235ac:	1c82      	adds	r2, r0, #2
   235ae:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   235b2:	db1c      	blt.n	235ee <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   235b4:	f008 f89d 	bl	2b6f2 <sys_clock_tick_get_32>
   235b8:	182c      	adds	r4, r5, r0
   235ba:	f04f 0320 	mov.w	r3, #32
   235be:	f3ef 8811 	mrs	r8, BASEPRI
   235c2:	f383 8812 	msr	BASEPRI_MAX, r3
   235c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   235ca:	4831      	ldr	r0, [pc, #196]	; (23690 <z_tick_sleep+0x11c>)
   235cc:	f7fd fec8 	bl	21360 <z_spin_lock_valid>
   235d0:	b988      	cbnz	r0, 235f6 <z_tick_sleep+0x82>
   235d2:	2394      	movs	r3, #148	; 0x94
   235d4:	4a2f      	ldr	r2, [pc, #188]	; (23694 <z_tick_sleep+0x120>)
   235d6:	4930      	ldr	r1, [pc, #192]	; (23698 <z_tick_sleep+0x124>)
   235d8:	482b      	ldr	r0, [pc, #172]	; (23688 <z_tick_sleep+0x114>)
   235da:	f003 f9a2 	bl	26922 <assert_print>
   235de:	492c      	ldr	r1, [pc, #176]	; (23690 <z_tick_sleep+0x11c>)
   235e0:	482e      	ldr	r0, [pc, #184]	; (2369c <z_tick_sleep+0x128>)
   235e2:	f003 f99e 	bl	26922 <assert_print>
   235e6:	2194      	movs	r1, #148	; 0x94
   235e8:	482a      	ldr	r0, [pc, #168]	; (23694 <z_tick_sleep+0x120>)
   235ea:	f003 f993 	bl	26914 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   235ee:	f06f 0401 	mvn.w	r4, #1
   235f2:	1a24      	subs	r4, r4, r0
   235f4:	e7e1      	b.n	235ba <z_tick_sleep+0x46>
	pending_current = _current;
   235f6:	4f2a      	ldr	r7, [pc, #168]	; (236a0 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   235f8:	4825      	ldr	r0, [pc, #148]	; (23690 <z_tick_sleep+0x11c>)
   235fa:	f7fd fecd 	bl	21398 <z_spin_lock_set_owner>
   235fe:	68b8      	ldr	r0, [r7, #8]
   23600:	4b28      	ldr	r3, [pc, #160]	; (236a4 <z_tick_sleep+0x130>)
   23602:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   23604:	f7ff fbd2 	bl	22dac <unready_thread>
	z_add_thread_timeout(_current, timeout);
   23608:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2360a:	462a      	mov	r2, r5
   2360c:	4633      	mov	r3, r6
   2360e:	3018      	adds	r0, #24
   23610:	4925      	ldr	r1, [pc, #148]	; (236a8 <z_tick_sleep+0x134>)
   23612:	f000 fa2b 	bl	23a6c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23616:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23618:	481d      	ldr	r0, [pc, #116]	; (23690 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2361a:	7b53      	ldrb	r3, [r2, #13]
   2361c:	f043 0310 	orr.w	r3, r3, #16
   23620:	7353      	strb	r3, [r2, #13]
   23622:	f7fd feab 	bl	2137c <z_spin_unlock_valid>
   23626:	b958      	cbnz	r0, 23640 <z_tick_sleep+0xcc>
   23628:	23e1      	movs	r3, #225	; 0xe1
   2362a:	4a1a      	ldr	r2, [pc, #104]	; (23694 <z_tick_sleep+0x120>)
   2362c:	491f      	ldr	r1, [pc, #124]	; (236ac <z_tick_sleep+0x138>)
   2362e:	4816      	ldr	r0, [pc, #88]	; (23688 <z_tick_sleep+0x114>)
   23630:	f003 f977 	bl	26922 <assert_print>
   23634:	4916      	ldr	r1, [pc, #88]	; (23690 <z_tick_sleep+0x11c>)
   23636:	481e      	ldr	r0, [pc, #120]	; (236b0 <z_tick_sleep+0x13c>)
   23638:	f003 f973 	bl	26922 <assert_print>
   2363c:	21e1      	movs	r1, #225	; 0xe1
   2363e:	e7d3      	b.n	235e8 <z_tick_sleep+0x74>
   23640:	4640      	mov	r0, r8
   23642:	f7ed f8ed 	bl	10820 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   23646:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   23648:	7b5b      	ldrb	r3, [r3, #13]
   2364a:	06db      	lsls	r3, r3, #27
   2364c:	d50c      	bpl.n	23668 <z_tick_sleep+0xf4>
   2364e:	4919      	ldr	r1, [pc, #100]	; (236b4 <z_tick_sleep+0x140>)
   23650:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   23654:	4a0b      	ldr	r2, [pc, #44]	; (23684 <z_tick_sleep+0x110>)
   23656:	480c      	ldr	r0, [pc, #48]	; (23688 <z_tick_sleep+0x114>)
   23658:	f003 f963 	bl	26922 <assert_print>
   2365c:	480b      	ldr	r0, [pc, #44]	; (2368c <z_tick_sleep+0x118>)
   2365e:	f003 f960 	bl	26922 <assert_print>
   23662:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   23666:	e798      	b.n	2359a <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   23668:	f008 f843 	bl	2b6f2 <sys_clock_tick_get_32>
   2366c:	1a20      	subs	r0, r4, r0
   2366e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   23672:	2801      	cmp	r0, #1
   23674:	f173 0300 	sbcs.w	r3, r3, #0
   23678:	db96      	blt.n	235a8 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   2367a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2367e:	bf00      	nop
   23680:	00032daf 	.word	0x00032daf
   23684:	0003301c 	.word	0x0003301c
   23688:	0002d881 	.word	0x0002d881
   2368c:	00031891 	.word	0x00031891
   23690:	20021ba0 	.word	0x20021ba0
   23694:	0002e6ba 	.word	0x0002e6ba
   23698:	0002e713 	.word	0x0002e713
   2369c:	0002e728 	.word	0x0002e728
   236a0:	20021b58 	.word	0x20021b58
   236a4:	20021b94 	.word	0x20021b94
   236a8:	00023245 	.word	0x00023245
   236ac:	0002e6e7 	.word	0x0002e6e7
   236b0:	0002e6fe 	.word	0x0002e6fe
   236b4:	00033161 	.word	0x00033161

000236b8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   236b8:	b508      	push	{r3, lr}
   236ba:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   236be:	b173      	cbz	r3, 236de <z_impl_k_sleep+0x26>
   236c0:	4912      	ldr	r1, [pc, #72]	; (2370c <z_impl_k_sleep+0x54>)
   236c2:	f240 53b7 	movw	r3, #1463	; 0x5b7
   236c6:	4a12      	ldr	r2, [pc, #72]	; (23710 <z_impl_k_sleep+0x58>)
   236c8:	4812      	ldr	r0, [pc, #72]	; (23714 <z_impl_k_sleep+0x5c>)
   236ca:	f003 f92a 	bl	26922 <assert_print>
   236ce:	4812      	ldr	r0, [pc, #72]	; (23718 <z_impl_k_sleep+0x60>)
   236d0:	f003 f927 	bl	26922 <assert_print>
   236d4:	f240 51b7 	movw	r1, #1463	; 0x5b7
   236d8:	480d      	ldr	r0, [pc, #52]	; (23710 <z_impl_k_sleep+0x58>)
   236da:	f003 f91b 	bl	26914 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   236de:	f1b1 3fff 	cmp.w	r1, #4294967295
   236e2:	bf08      	it	eq
   236e4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   236e8:	d106      	bne.n	236f8 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   236ea:	4b0c      	ldr	r3, [pc, #48]	; (2371c <z_impl_k_sleep+0x64>)
   236ec:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   236ee:	f7ff fcd7 	bl	230a0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   236f2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   236f6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   236f8:	f7ff ff3c 	bl	23574 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   236fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23700:	fb80 0303 	smull	r0, r3, r0, r3
   23704:	0bc0      	lsrs	r0, r0, #15
   23706:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2370a:	e7f4      	b.n	236f6 <z_impl_k_sleep+0x3e>
   2370c:	00032daf 	.word	0x00032daf
   23710:	0003301c 	.word	0x0003301c
   23714:	0002d881 	.word	0x0002d881
   23718:	00031891 	.word	0x00031891
   2371c:	20021b58 	.word	0x20021b58

00023720 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   23720:	4b01      	ldr	r3, [pc, #4]	; (23728 <z_impl_z_current_get+0x8>)
   23722:	6898      	ldr	r0, [r3, #8]
   23724:	4770      	bx	lr
   23726:	bf00      	nop
   23728:	20021b58 	.word	0x20021b58

0002372c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23730:	4604      	mov	r4, r0
   23732:	f04f 0320 	mov.w	r3, #32
   23736:	f3ef 8611 	mrs	r6, BASEPRI
   2373a:	f383 8812 	msr	BASEPRI_MAX, r3
   2373e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23742:	4851      	ldr	r0, [pc, #324]	; (23888 <z_thread_abort+0x15c>)
   23744:	f7fd fe0c 	bl	21360 <z_spin_lock_valid>
   23748:	b968      	cbnz	r0, 23766 <z_thread_abort+0x3a>
   2374a:	2394      	movs	r3, #148	; 0x94
   2374c:	4a4f      	ldr	r2, [pc, #316]	; (2388c <z_thread_abort+0x160>)
   2374e:	4950      	ldr	r1, [pc, #320]	; (23890 <z_thread_abort+0x164>)
   23750:	4850      	ldr	r0, [pc, #320]	; (23894 <z_thread_abort+0x168>)
   23752:	f003 f8e6 	bl	26922 <assert_print>
   23756:	494c      	ldr	r1, [pc, #304]	; (23888 <z_thread_abort+0x15c>)
   23758:	484f      	ldr	r0, [pc, #316]	; (23898 <z_thread_abort+0x16c>)
   2375a:	f003 f8e2 	bl	26922 <assert_print>
   2375e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23760:	484a      	ldr	r0, [pc, #296]	; (2388c <z_thread_abort+0x160>)
   23762:	f003 f8d7 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   23766:	4848      	ldr	r0, [pc, #288]	; (23888 <z_thread_abort+0x15c>)
   23768:	f7fd fe16 	bl	21398 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2376c:	7b23      	ldrb	r3, [r4, #12]
   2376e:	07d9      	lsls	r1, r3, #31
   23770:	d522      	bpl.n	237b8 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23772:	4845      	ldr	r0, [pc, #276]	; (23888 <z_thread_abort+0x15c>)
   23774:	f7fd fe02 	bl	2137c <z_spin_unlock_valid>
   23778:	b958      	cbnz	r0, 23792 <z_thread_abort+0x66>
   2377a:	23c2      	movs	r3, #194	; 0xc2
   2377c:	4a43      	ldr	r2, [pc, #268]	; (2388c <z_thread_abort+0x160>)
   2377e:	4947      	ldr	r1, [pc, #284]	; (2389c <z_thread_abort+0x170>)
   23780:	4844      	ldr	r0, [pc, #272]	; (23894 <z_thread_abort+0x168>)
   23782:	f003 f8ce 	bl	26922 <assert_print>
   23786:	4940      	ldr	r1, [pc, #256]	; (23888 <z_thread_abort+0x15c>)
   23788:	4845      	ldr	r0, [pc, #276]	; (238a0 <z_thread_abort+0x174>)
   2378a:	f003 f8ca 	bl	26922 <assert_print>
   2378e:	21c2      	movs	r1, #194	; 0xc2
   23790:	e7e6      	b.n	23760 <z_thread_abort+0x34>
	__asm__ volatile(
   23792:	f386 8811 	msr	BASEPRI, r6
   23796:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   2379a:	f240 63c3 	movw	r3, #1731	; 0x6c3
   2379e:	4a41      	ldr	r2, [pc, #260]	; (238a4 <z_thread_abort+0x178>)
   237a0:	4941      	ldr	r1, [pc, #260]	; (238a8 <z_thread_abort+0x17c>)
   237a2:	483c      	ldr	r0, [pc, #240]	; (23894 <z_thread_abort+0x168>)
   237a4:	f003 f8bd 	bl	26922 <assert_print>
   237a8:	4621      	mov	r1, r4
   237aa:	4840      	ldr	r0, [pc, #256]	; (238ac <z_thread_abort+0x180>)
   237ac:	f003 f8b9 	bl	26922 <assert_print>
   237b0:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   237b4:	483b      	ldr	r0, [pc, #236]	; (238a4 <z_thread_abort+0x178>)
   237b6:	e7d4      	b.n	23762 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   237b8:	7b63      	ldrb	r3, [r4, #13]
   237ba:	071a      	lsls	r2, r3, #28
   237bc:	d50a      	bpl.n	237d4 <z_thread_abort+0xa8>
   237be:	4832      	ldr	r0, [pc, #200]	; (23888 <z_thread_abort+0x15c>)
   237c0:	f7fd fddc 	bl	2137c <z_spin_unlock_valid>
   237c4:	2800      	cmp	r0, #0
   237c6:	d0d8      	beq.n	2377a <z_thread_abort+0x4e>
   237c8:	f386 8811 	msr	BASEPRI, r6
   237cc:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   237d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   237d4:	f023 0220 	bic.w	r2, r3, #32
   237d8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   237dc:	09d2      	lsrs	r2, r2, #7
   237de:	d12c      	bne.n	2383a <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   237e0:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   237e2:	68a3      	ldr	r3, [r4, #8]
   237e4:	b113      	cbz	r3, 237ec <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   237e6:	4620      	mov	r0, r4
   237e8:	f7ff fcc2 	bl	23170 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   237ec:	f104 0018 	add.w	r0, r4, #24
   237f0:	f000 fa02 	bl	23bf8 <z_abort_timeout>
   237f4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   237f8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   237fc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   237fe:	42bd      	cmp	r5, r7
   23800:	d000      	beq.n	23804 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23802:	bb25      	cbnz	r5, 2384e <z_thread_abort+0x122>
		update_cache(1);
   23804:	2001      	movs	r0, #1
   23806:	f7fe ff07 	bl	22618 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2380a:	4b29      	ldr	r3, [pc, #164]	; (238b0 <z_thread_abort+0x184>)
   2380c:	689b      	ldr	r3, [r3, #8]
   2380e:	42a3      	cmp	r3, r4
   23810:	d1d5      	bne.n	237be <z_thread_abort+0x92>
   23812:	f3ef 8305 	mrs	r3, IPSR
   23816:	2b00      	cmp	r3, #0
   23818:	d1d1      	bne.n	237be <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2381a:	481b      	ldr	r0, [pc, #108]	; (23888 <z_thread_abort+0x15c>)
   2381c:	f7fd fdae 	bl	2137c <z_spin_unlock_valid>
   23820:	bb10      	cbnz	r0, 23868 <z_thread_abort+0x13c>
   23822:	23e1      	movs	r3, #225	; 0xe1
   23824:	4a19      	ldr	r2, [pc, #100]	; (2388c <z_thread_abort+0x160>)
   23826:	491d      	ldr	r1, [pc, #116]	; (2389c <z_thread_abort+0x170>)
   23828:	481a      	ldr	r0, [pc, #104]	; (23894 <z_thread_abort+0x168>)
   2382a:	f003 f87a 	bl	26922 <assert_print>
   2382e:	4916      	ldr	r1, [pc, #88]	; (23888 <z_thread_abort+0x15c>)
   23830:	481b      	ldr	r0, [pc, #108]	; (238a0 <z_thread_abort+0x174>)
   23832:	f003 f876 	bl	26922 <assert_print>
   23836:	21e1      	movs	r1, #225	; 0xe1
   23838:	e792      	b.n	23760 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2383a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2383e:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   23842:	4621      	mov	r1, r4
   23844:	481b      	ldr	r0, [pc, #108]	; (238b4 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23846:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23848:	f7ff f9c8 	bl	22bdc <z_priq_dumb_remove>
}
   2384c:	e7c9      	b.n	237e2 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   2384e:	4628      	mov	r0, r5
   23850:	f7ff fc8e 	bl	23170 <unpend_thread_no_timeout>
   23854:	f105 0018 	add.w	r0, r5, #24
   23858:	f000 f9ce 	bl	23bf8 <z_abort_timeout>
		ready_thread(thread);
   2385c:	4628      	mov	r0, r5
   2385e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   23862:	f7fe ff0d 	bl	22680 <ready_thread>
   23866:	e7c9      	b.n	237fc <z_thread_abort+0xd0>
   23868:	4630      	mov	r0, r6
   2386a:	f7ec ffd9 	bl	10820 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   2386e:	490e      	ldr	r1, [pc, #56]	; (238a8 <z_thread_abort+0x17c>)
   23870:	f240 63f2 	movw	r3, #1778	; 0x6f2
   23874:	4a0b      	ldr	r2, [pc, #44]	; (238a4 <z_thread_abort+0x178>)
   23876:	4807      	ldr	r0, [pc, #28]	; (23894 <z_thread_abort+0x168>)
   23878:	f003 f853 	bl	26922 <assert_print>
   2387c:	480e      	ldr	r0, [pc, #56]	; (238b8 <z_thread_abort+0x18c>)
   2387e:	f003 f850 	bl	26922 <assert_print>
   23882:	f240 61f2 	movw	r1, #1778	; 0x6f2
   23886:	e795      	b.n	237b4 <z_thread_abort+0x88>
   23888:	20021ba0 	.word	0x20021ba0
   2388c:	0002e6ba 	.word	0x0002e6ba
   23890:	0002e713 	.word	0x0002e713
   23894:	0002d881 	.word	0x0002d881
   23898:	0002e728 	.word	0x0002e728
   2389c:	0002e6e7 	.word	0x0002e6e7
   238a0:	0002e6fe 	.word	0x0002e6fe
   238a4:	0003301c 	.word	0x0003301c
   238a8:	000334e0 	.word	0x000334e0
   238ac:	000331a1 	.word	0x000331a1
   238b0:	20021b58 	.word	0x20021b58
   238b4:	20021b78 	.word	0x20021b78
   238b8:	000331c0 	.word	0x000331c0

000238bc <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   238bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   238c0:	4606      	mov	r6, r0
   238c2:	4688      	mov	r8, r1
   238c4:	4617      	mov	r7, r2
	__asm__ volatile(
   238c6:	f04f 0320 	mov.w	r3, #32
   238ca:	f3ef 8911 	mrs	r9, BASEPRI
   238ce:	f383 8812 	msr	BASEPRI_MAX, r3
   238d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   238d6:	4821      	ldr	r0, [pc, #132]	; (2395c <z_sched_wake+0xa0>)
   238d8:	f7fd fd42 	bl	21360 <z_spin_lock_valid>
   238dc:	4605      	mov	r5, r0
   238de:	b968      	cbnz	r0, 238fc <z_sched_wake+0x40>
   238e0:	2394      	movs	r3, #148	; 0x94
   238e2:	4a1f      	ldr	r2, [pc, #124]	; (23960 <z_sched_wake+0xa4>)
   238e4:	491f      	ldr	r1, [pc, #124]	; (23964 <z_sched_wake+0xa8>)
   238e6:	4820      	ldr	r0, [pc, #128]	; (23968 <z_sched_wake+0xac>)
   238e8:	f003 f81b 	bl	26922 <assert_print>
   238ec:	491b      	ldr	r1, [pc, #108]	; (2395c <z_sched_wake+0xa0>)
   238ee:	481f      	ldr	r0, [pc, #124]	; (2396c <z_sched_wake+0xb0>)
   238f0:	f003 f817 	bl	26922 <assert_print>
   238f4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238f6:	481a      	ldr	r0, [pc, #104]	; (23960 <z_sched_wake+0xa4>)
   238f8:	f003 f80c 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   238fc:	4817      	ldr	r0, [pc, #92]	; (2395c <z_sched_wake+0xa0>)
   238fe:	f7fd fd4b 	bl	21398 <z_spin_lock_set_owner>
	return list->head == list;
   23902:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23904:	42a6      	cmp	r6, r4
   23906:	d01d      	beq.n	23944 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   23908:	b1f4      	cbz	r4, 23948 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   2390a:	4620      	mov	r0, r4
   2390c:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   23910:	6167      	str	r7, [r4, #20]
   23912:	f7ff fc2d 	bl	23170 <unpend_thread_no_timeout>
   23916:	f104 0018 	add.w	r0, r4, #24
   2391a:	f000 f96d 	bl	23bf8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   2391e:	4620      	mov	r0, r4
   23920:	f7fe feae 	bl	22680 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23924:	480d      	ldr	r0, [pc, #52]	; (2395c <z_sched_wake+0xa0>)
   23926:	f7fd fd29 	bl	2137c <z_spin_unlock_valid>
   2392a:	b978      	cbnz	r0, 2394c <z_sched_wake+0x90>
   2392c:	23c2      	movs	r3, #194	; 0xc2
   2392e:	4a0c      	ldr	r2, [pc, #48]	; (23960 <z_sched_wake+0xa4>)
   23930:	490f      	ldr	r1, [pc, #60]	; (23970 <z_sched_wake+0xb4>)
   23932:	480d      	ldr	r0, [pc, #52]	; (23968 <z_sched_wake+0xac>)
   23934:	f002 fff5 	bl	26922 <assert_print>
   23938:	4908      	ldr	r1, [pc, #32]	; (2395c <z_sched_wake+0xa0>)
   2393a:	480e      	ldr	r0, [pc, #56]	; (23974 <z_sched_wake+0xb8>)
   2393c:	f002 fff1 	bl	26922 <assert_print>
   23940:	21c2      	movs	r1, #194	; 0xc2
   23942:	e7d8      	b.n	238f6 <z_sched_wake+0x3a>
	bool ret = false;
   23944:	2500      	movs	r5, #0
   23946:	e7ed      	b.n	23924 <z_sched_wake+0x68>
   23948:	4625      	mov	r5, r4
   2394a:	e7eb      	b.n	23924 <z_sched_wake+0x68>
	__asm__ volatile(
   2394c:	f389 8811 	msr	BASEPRI, r9
   23950:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   23954:	4628      	mov	r0, r5
   23956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2395a:	bf00      	nop
   2395c:	20021ba0 	.word	0x20021ba0
   23960:	0002e6ba 	.word	0x0002e6ba
   23964:	0002e713 	.word	0x0002e713
   23968:	0002d881 	.word	0x0002d881
   2396c:	0002e728 	.word	0x0002e728
   23970:	0002e6e7 	.word	0x0002e6e7
   23974:	0002e6fe 	.word	0x0002e6fe

00023978 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   23978:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2397a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2397e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23980:	e9cd 6700 	strd	r6, r7, [sp]
   23984:	f7ff fa84 	bl	22e90 <z_pend_curr>

	if (data != NULL) {
   23988:	b11c      	cbz	r4, 23992 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2398a:	4b03      	ldr	r3, [pc, #12]	; (23998 <z_sched_wait+0x20>)
   2398c:	689b      	ldr	r3, [r3, #8]
   2398e:	695b      	ldr	r3, [r3, #20]
   23990:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   23992:	b002      	add	sp, #8
   23994:	bdd0      	pop	{r4, r6, r7, pc}
   23996:	bf00      	nop
   23998:	20021b58 	.word	0x20021b58

0002399c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2399c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2399e:	4806      	ldr	r0, [pc, #24]	; (239b8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   239a0:	4a06      	ldr	r2, [pc, #24]	; (239bc <z_data_copy+0x20>)
   239a2:	4907      	ldr	r1, [pc, #28]	; (239c0 <z_data_copy+0x24>)
   239a4:	1a12      	subs	r2, r2, r0
   239a6:	f007 fd8e 	bl	2b4c6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   239aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   239ae:	4a05      	ldr	r2, [pc, #20]	; (239c4 <z_data_copy+0x28>)
   239b0:	4905      	ldr	r1, [pc, #20]	; (239c8 <z_data_copy+0x2c>)
   239b2:	4806      	ldr	r0, [pc, #24]	; (239cc <z_data_copy+0x30>)
   239b4:	f007 bd87 	b.w	2b4c6 <z_early_memcpy>
   239b8:	20008000 	.word	0x20008000
   239bc:	20008f50 	.word	0x20008f50
   239c0:	000337e4 	.word	0x000337e4
   239c4:	00000000 	.word	0x00000000
   239c8:	000337e4 	.word	0x000337e4
   239cc:	20008000 	.word	0x20008000

000239d0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   239d0:	4b03      	ldr	r3, [pc, #12]	; (239e0 <elapsed+0x10>)
   239d2:	681b      	ldr	r3, [r3, #0]
   239d4:	b90b      	cbnz	r3, 239da <elapsed+0xa>
   239d6:	f7fa ba5d 	b.w	1de94 <sys_clock_elapsed>
}
   239da:	2000      	movs	r0, #0
   239dc:	4770      	bx	lr
   239de:	bf00      	nop
   239e0:	20021ba4 	.word	0x20021ba4

000239e4 <next_timeout>:

static int32_t next_timeout(void)
{
   239e4:	b510      	push	{r4, lr}
	return list->head == list;
   239e6:	4b11      	ldr	r3, [pc, #68]	; (23a2c <next_timeout+0x48>)
   239e8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   239ea:	429c      	cmp	r4, r3
   239ec:	d10a      	bne.n	23a04 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   239ee:	f7ff ffef 	bl	239d0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   239f2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   239f6:	4b0e      	ldr	r3, [pc, #56]	; (23a30 <next_timeout+0x4c>)
   239f8:	691b      	ldr	r3, [r3, #16]
   239fa:	b113      	cbz	r3, 23a02 <next_timeout+0x1e>
   239fc:	4298      	cmp	r0, r3
   239fe:	bfa8      	it	ge
   23a00:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   23a02:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   23a04:	f7ff ffe4 	bl	239d0 <elapsed>
	if ((to == NULL) ||
   23a08:	2c00      	cmp	r4, #0
   23a0a:	d0f2      	beq.n	239f2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   23a0c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   23a10:	1a1b      	subs	r3, r3, r0
   23a12:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   23a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   23a1a:	f172 0100 	sbcs.w	r1, r2, #0
   23a1e:	dae8      	bge.n	239f2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   23a20:	2a00      	cmp	r2, #0
   23a22:	bfac      	ite	ge
   23a24:	4618      	movge	r0, r3
   23a26:	2000      	movlt	r0, #0
   23a28:	e7e5      	b.n	239f6 <next_timeout+0x12>
   23a2a:	bf00      	nop
   23a2c:	200088b0 	.word	0x200088b0
   23a30:	20021b58 	.word	0x20021b58

00023a34 <remove_timeout>:
{
   23a34:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23a36:	b170      	cbz	r0, 23a56 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   23a38:	4b0b      	ldr	r3, [pc, #44]	; (23a68 <remove_timeout+0x34>)
   23a3a:	685b      	ldr	r3, [r3, #4]
   23a3c:	4298      	cmp	r0, r3
   23a3e:	d00a      	beq.n	23a56 <remove_timeout+0x22>
   23a40:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   23a42:	b143      	cbz	r3, 23a56 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   23a44:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23a48:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23a4c:	1912      	adds	r2, r2, r4
   23a4e:	eb41 0105 	adc.w	r1, r1, r5
   23a52:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   23a56:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23a5a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23a5c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23a5e:	2300      	movs	r3, #0
	node->prev = NULL;
   23a60:	e9c0 3300 	strd	r3, r3, [r0]
}
   23a64:	bd30      	pop	{r4, r5, pc}
   23a66:	bf00      	nop
   23a68:	200088b0 	.word	0x200088b0

00023a6c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
   23a70:	bf08      	it	eq
   23a72:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   23a76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23a7a:	4604      	mov	r4, r0
   23a7c:	4692      	mov	sl, r2
   23a7e:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23a80:	f000 809e 	beq.w	23bc0 <z_add_timeout+0x154>
	return node->next != NULL;
   23a84:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   23a86:	b166      	cbz	r6, 23aa2 <z_add_timeout+0x36>
   23a88:	494e      	ldr	r1, [pc, #312]	; (23bc4 <z_add_timeout+0x158>)
   23a8a:	2363      	movs	r3, #99	; 0x63
   23a8c:	4a4e      	ldr	r2, [pc, #312]	; (23bc8 <z_add_timeout+0x15c>)
   23a8e:	484f      	ldr	r0, [pc, #316]	; (23bcc <z_add_timeout+0x160>)
   23a90:	f002 ff47 	bl	26922 <assert_print>
   23a94:	484e      	ldr	r0, [pc, #312]	; (23bd0 <z_add_timeout+0x164>)
   23a96:	f002 ff44 	bl	26922 <assert_print>
   23a9a:	2163      	movs	r1, #99	; 0x63
   23a9c:	484a      	ldr	r0, [pc, #296]	; (23bc8 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a9e:	f002 ff39 	bl	26914 <assert_post_action>
	to->fn = fn;
   23aa2:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   23aa4:	f04f 0320 	mov.w	r3, #32
   23aa8:	f3ef 8711 	mrs	r7, BASEPRI
   23aac:	f383 8812 	msr	BASEPRI_MAX, r3
   23ab0:	f3bf 8f6f 	isb	sy
   23ab4:	4847      	ldr	r0, [pc, #284]	; (23bd4 <z_add_timeout+0x168>)
   23ab6:	f7fd fc53 	bl	21360 <z_spin_lock_valid>
   23aba:	b960      	cbnz	r0, 23ad6 <z_add_timeout+0x6a>
   23abc:	2394      	movs	r3, #148	; 0x94
   23abe:	4a46      	ldr	r2, [pc, #280]	; (23bd8 <z_add_timeout+0x16c>)
   23ac0:	4946      	ldr	r1, [pc, #280]	; (23bdc <z_add_timeout+0x170>)
   23ac2:	4842      	ldr	r0, [pc, #264]	; (23bcc <z_add_timeout+0x160>)
   23ac4:	f002 ff2d 	bl	26922 <assert_print>
   23ac8:	4942      	ldr	r1, [pc, #264]	; (23bd4 <z_add_timeout+0x168>)
   23aca:	4845      	ldr	r0, [pc, #276]	; (23be0 <z_add_timeout+0x174>)
   23acc:	f002 ff29 	bl	26922 <assert_print>
   23ad0:	2194      	movs	r1, #148	; 0x94
   23ad2:	4841      	ldr	r0, [pc, #260]	; (23bd8 <z_add_timeout+0x16c>)
   23ad4:	e7e3      	b.n	23a9e <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   23ad6:	483f      	ldr	r0, [pc, #252]	; (23bd4 <z_add_timeout+0x168>)
   23ad8:	f7fd fc5e 	bl	21398 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   23adc:	f1ba 3fff 	cmp.w	sl, #4294967295
   23ae0:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   23ae4:	da23      	bge.n	23b2e <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   23ae6:	f06f 0301 	mvn.w	r3, #1
   23aea:	493e      	ldr	r1, [pc, #248]	; (23be4 <z_add_timeout+0x178>)
   23aec:	e9d1 2000 	ldrd	r2, r0, [r1]
   23af0:	1a9b      	subs	r3, r3, r2
   23af2:	f04f 32ff 	mov.w	r2, #4294967295
   23af6:	eb62 0000 	sbc.w	r0, r2, r0
   23afa:	ebb3 030a 	subs.w	r3, r3, sl
   23afe:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   23b02:	2b01      	cmp	r3, #1
   23b04:	f170 0200 	sbcs.w	r2, r0, #0
   23b08:	da01      	bge.n	23b0e <z_add_timeout+0xa2>
   23b0a:	2301      	movs	r3, #1
   23b0c:	4630      	mov	r0, r6
   23b0e:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   23b12:	4b35      	ldr	r3, [pc, #212]	; (23be8 <z_add_timeout+0x17c>)
   23b14:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   23b16:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23b1a:	429a      	cmp	r2, r3
   23b1c:	bf18      	it	ne
   23b1e:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   23b20:	b986      	cbnz	r6, 23b44 <z_add_timeout+0xd8>
	node->prev = tail;
   23b22:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   23b26:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   23b2a:	605c      	str	r4, [r3, #4]
}
   23b2c:	e01c      	b.n	23b68 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   23b2e:	f7ff ff4f 	bl	239d0 <elapsed>
   23b32:	f11a 0801 	adds.w	r8, sl, #1
   23b36:	f145 0500 	adc.w	r5, r5, #0
   23b3a:	eb18 0300 	adds.w	r3, r8, r0
   23b3e:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   23b42:	e7e4      	b.n	23b0e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   23b44:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   23b48:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   23b4c:	428a      	cmp	r2, r1
   23b4e:	eb70 0e05 	sbcs.w	lr, r0, r5
   23b52:	da28      	bge.n	23ba6 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   23b54:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   23b56:	6872      	ldr	r2, [r6, #4]
   23b58:	eb65 0500 	sbc.w	r5, r5, r0
   23b5c:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   23b60:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   23b64:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23b66:	6074      	str	r4, [r6, #4]
	return list->head == list;
   23b68:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23b6a:	429a      	cmp	r2, r3
   23b6c:	d00b      	beq.n	23b86 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   23b6e:	4294      	cmp	r4, r2
   23b70:	d109      	bne.n	23b86 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   23b72:	f7ff ff37 	bl	239e4 <next_timeout>

			if (next_time == 0 ||
   23b76:	b118      	cbz	r0, 23b80 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   23b78:	4b1c      	ldr	r3, [pc, #112]	; (23bec <z_add_timeout+0x180>)
			if (next_time == 0 ||
   23b7a:	691b      	ldr	r3, [r3, #16]
   23b7c:	4283      	cmp	r3, r0
   23b7e:	d002      	beq.n	23b86 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   23b80:	2100      	movs	r1, #0
   23b82:	f7fa f957 	bl	1de34 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b86:	4813      	ldr	r0, [pc, #76]	; (23bd4 <z_add_timeout+0x168>)
   23b88:	f7fd fbf8 	bl	2137c <z_spin_unlock_valid>
   23b8c:	b9a0      	cbnz	r0, 23bb8 <z_add_timeout+0x14c>
   23b8e:	23c2      	movs	r3, #194	; 0xc2
   23b90:	4a11      	ldr	r2, [pc, #68]	; (23bd8 <z_add_timeout+0x16c>)
   23b92:	4917      	ldr	r1, [pc, #92]	; (23bf0 <z_add_timeout+0x184>)
   23b94:	480d      	ldr	r0, [pc, #52]	; (23bcc <z_add_timeout+0x160>)
   23b96:	f002 fec4 	bl	26922 <assert_print>
   23b9a:	490e      	ldr	r1, [pc, #56]	; (23bd4 <z_add_timeout+0x168>)
   23b9c:	4815      	ldr	r0, [pc, #84]	; (23bf4 <z_add_timeout+0x188>)
   23b9e:	f002 fec0 	bl	26922 <assert_print>
   23ba2:	21c2      	movs	r1, #194	; 0xc2
   23ba4:	e795      	b.n	23ad2 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   23ba6:	1a52      	subs	r2, r2, r1
   23ba8:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   23bac:	4566      	cmp	r6, ip
   23bae:	e9c4 2004 	strd	r2, r0, [r4, #16]
   23bb2:	d0b6      	beq.n	23b22 <z_add_timeout+0xb6>
   23bb4:	6836      	ldr	r6, [r6, #0]
   23bb6:	e7b3      	b.n	23b20 <z_add_timeout+0xb4>
	__asm__ volatile(
   23bb8:	f387 8811 	msr	BASEPRI, r7
   23bbc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   23bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23bc4:	00033206 	.word	0x00033206
   23bc8:	000331e2 	.word	0x000331e2
   23bcc:	0002d881 	.word	0x0002d881
   23bd0:	00031891 	.word	0x00031891
   23bd4:	20021ba8 	.word	0x20021ba8
   23bd8:	0002e6ba 	.word	0x0002e6ba
   23bdc:	0002e713 	.word	0x0002e713
   23be0:	0002e728 	.word	0x0002e728
   23be4:	2000a3f8 	.word	0x2000a3f8
   23be8:	200088b0 	.word	0x200088b0
   23bec:	20021b58 	.word	0x20021b58
   23bf0:	0002e6e7 	.word	0x0002e6e7
   23bf4:	0002e6fe 	.word	0x0002e6fe

00023bf8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   23bf8:	b538      	push	{r3, r4, r5, lr}
   23bfa:	4604      	mov	r4, r0
	__asm__ volatile(
   23bfc:	f04f 0320 	mov.w	r3, #32
   23c00:	f3ef 8511 	mrs	r5, BASEPRI
   23c04:	f383 8812 	msr	BASEPRI_MAX, r3
   23c08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c0c:	4819      	ldr	r0, [pc, #100]	; (23c74 <z_abort_timeout+0x7c>)
   23c0e:	f7fd fba7 	bl	21360 <z_spin_lock_valid>
   23c12:	b968      	cbnz	r0, 23c30 <z_abort_timeout+0x38>
   23c14:	2394      	movs	r3, #148	; 0x94
   23c16:	4a18      	ldr	r2, [pc, #96]	; (23c78 <z_abort_timeout+0x80>)
   23c18:	4918      	ldr	r1, [pc, #96]	; (23c7c <z_abort_timeout+0x84>)
   23c1a:	4819      	ldr	r0, [pc, #100]	; (23c80 <z_abort_timeout+0x88>)
   23c1c:	f002 fe81 	bl	26922 <assert_print>
   23c20:	4914      	ldr	r1, [pc, #80]	; (23c74 <z_abort_timeout+0x7c>)
   23c22:	4818      	ldr	r0, [pc, #96]	; (23c84 <z_abort_timeout+0x8c>)
   23c24:	f002 fe7d 	bl	26922 <assert_print>
   23c28:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c2a:	4813      	ldr	r0, [pc, #76]	; (23c78 <z_abort_timeout+0x80>)
   23c2c:	f002 fe72 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   23c30:	4810      	ldr	r0, [pc, #64]	; (23c74 <z_abort_timeout+0x7c>)
   23c32:	f7fd fbb1 	bl	21398 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   23c36:	6823      	ldr	r3, [r4, #0]
   23c38:	b19b      	cbz	r3, 23c62 <z_abort_timeout+0x6a>
			remove_timeout(to);
   23c3a:	4620      	mov	r0, r4
   23c3c:	f7ff fefa 	bl	23a34 <remove_timeout>
			ret = 0;
   23c40:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c42:	480c      	ldr	r0, [pc, #48]	; (23c74 <z_abort_timeout+0x7c>)
   23c44:	f7fd fb9a 	bl	2137c <z_spin_unlock_valid>
   23c48:	b970      	cbnz	r0, 23c68 <z_abort_timeout+0x70>
   23c4a:	23c2      	movs	r3, #194	; 0xc2
   23c4c:	4a0a      	ldr	r2, [pc, #40]	; (23c78 <z_abort_timeout+0x80>)
   23c4e:	490e      	ldr	r1, [pc, #56]	; (23c88 <z_abort_timeout+0x90>)
   23c50:	480b      	ldr	r0, [pc, #44]	; (23c80 <z_abort_timeout+0x88>)
   23c52:	f002 fe66 	bl	26922 <assert_print>
   23c56:	4907      	ldr	r1, [pc, #28]	; (23c74 <z_abort_timeout+0x7c>)
   23c58:	480c      	ldr	r0, [pc, #48]	; (23c8c <z_abort_timeout+0x94>)
   23c5a:	f002 fe62 	bl	26922 <assert_print>
   23c5e:	21c2      	movs	r1, #194	; 0xc2
   23c60:	e7e3      	b.n	23c2a <z_abort_timeout+0x32>
	int ret = -EINVAL;
   23c62:	f06f 0415 	mvn.w	r4, #21
   23c66:	e7ec      	b.n	23c42 <z_abort_timeout+0x4a>
	__asm__ volatile(
   23c68:	f385 8811 	msr	BASEPRI, r5
   23c6c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   23c70:	4620      	mov	r0, r4
   23c72:	bd38      	pop	{r3, r4, r5, pc}
   23c74:	20021ba8 	.word	0x20021ba8
   23c78:	0002e6ba 	.word	0x0002e6ba
   23c7c:	0002e713 	.word	0x0002e713
   23c80:	0002d881 	.word	0x0002d881
   23c84:	0002e728 	.word	0x0002e728
   23c88:	0002e6e7 	.word	0x0002e6e7
   23c8c:	0002e6fe 	.word	0x0002e6fe

00023c90 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   23c90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23c92:	f04f 0320 	mov.w	r3, #32
   23c96:	f3ef 8511 	mrs	r5, BASEPRI
   23c9a:	f383 8812 	msr	BASEPRI_MAX, r3
   23c9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ca2:	4817      	ldr	r0, [pc, #92]	; (23d00 <z_get_next_timeout_expiry+0x70>)
   23ca4:	f7fd fb5c 	bl	21360 <z_spin_lock_valid>
   23ca8:	b968      	cbnz	r0, 23cc6 <z_get_next_timeout_expiry+0x36>
   23caa:	2394      	movs	r3, #148	; 0x94
   23cac:	4a15      	ldr	r2, [pc, #84]	; (23d04 <z_get_next_timeout_expiry+0x74>)
   23cae:	4916      	ldr	r1, [pc, #88]	; (23d08 <z_get_next_timeout_expiry+0x78>)
   23cb0:	4816      	ldr	r0, [pc, #88]	; (23d0c <z_get_next_timeout_expiry+0x7c>)
   23cb2:	f002 fe36 	bl	26922 <assert_print>
   23cb6:	4912      	ldr	r1, [pc, #72]	; (23d00 <z_get_next_timeout_expiry+0x70>)
   23cb8:	4815      	ldr	r0, [pc, #84]	; (23d10 <z_get_next_timeout_expiry+0x80>)
   23cba:	f002 fe32 	bl	26922 <assert_print>
   23cbe:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cc0:	4810      	ldr	r0, [pc, #64]	; (23d04 <z_get_next_timeout_expiry+0x74>)
   23cc2:	f002 fe27 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   23cc6:	480e      	ldr	r0, [pc, #56]	; (23d00 <z_get_next_timeout_expiry+0x70>)
   23cc8:	f7fd fb66 	bl	21398 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   23ccc:	f7ff fe8a 	bl	239e4 <next_timeout>
   23cd0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cd2:	480b      	ldr	r0, [pc, #44]	; (23d00 <z_get_next_timeout_expiry+0x70>)
   23cd4:	f7fd fb52 	bl	2137c <z_spin_unlock_valid>
   23cd8:	b958      	cbnz	r0, 23cf2 <z_get_next_timeout_expiry+0x62>
   23cda:	23c2      	movs	r3, #194	; 0xc2
   23cdc:	4a09      	ldr	r2, [pc, #36]	; (23d04 <z_get_next_timeout_expiry+0x74>)
   23cde:	490d      	ldr	r1, [pc, #52]	; (23d14 <z_get_next_timeout_expiry+0x84>)
   23ce0:	480a      	ldr	r0, [pc, #40]	; (23d0c <z_get_next_timeout_expiry+0x7c>)
   23ce2:	f002 fe1e 	bl	26922 <assert_print>
   23ce6:	4906      	ldr	r1, [pc, #24]	; (23d00 <z_get_next_timeout_expiry+0x70>)
   23ce8:	480b      	ldr	r0, [pc, #44]	; (23d18 <z_get_next_timeout_expiry+0x88>)
   23cea:	f002 fe1a 	bl	26922 <assert_print>
   23cee:	21c2      	movs	r1, #194	; 0xc2
   23cf0:	e7e6      	b.n	23cc0 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   23cf2:	f385 8811 	msr	BASEPRI, r5
   23cf6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   23cfa:	4620      	mov	r0, r4
   23cfc:	bd38      	pop	{r3, r4, r5, pc}
   23cfe:	bf00      	nop
   23d00:	20021ba8 	.word	0x20021ba8
   23d04:	0002e6ba 	.word	0x0002e6ba
   23d08:	0002e713 	.word	0x0002e713
   23d0c:	0002d881 	.word	0x0002d881
   23d10:	0002e728 	.word	0x0002e728
   23d14:	0002e6e7 	.word	0x0002e6e7
   23d18:	0002e6fe 	.word	0x0002e6fe

00023d1c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   23d1c:	b570      	push	{r4, r5, r6, lr}
   23d1e:	4604      	mov	r4, r0
   23d20:	460d      	mov	r5, r1
	__asm__ volatile(
   23d22:	f04f 0320 	mov.w	r3, #32
   23d26:	f3ef 8611 	mrs	r6, BASEPRI
   23d2a:	f383 8812 	msr	BASEPRI_MAX, r3
   23d2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d32:	481b      	ldr	r0, [pc, #108]	; (23da0 <z_set_timeout_expiry+0x84>)
   23d34:	f7fd fb14 	bl	21360 <z_spin_lock_valid>
   23d38:	b968      	cbnz	r0, 23d56 <z_set_timeout_expiry+0x3a>
   23d3a:	2394      	movs	r3, #148	; 0x94
   23d3c:	4a19      	ldr	r2, [pc, #100]	; (23da4 <z_set_timeout_expiry+0x88>)
   23d3e:	491a      	ldr	r1, [pc, #104]	; (23da8 <z_set_timeout_expiry+0x8c>)
   23d40:	481a      	ldr	r0, [pc, #104]	; (23dac <z_set_timeout_expiry+0x90>)
   23d42:	f002 fdee 	bl	26922 <assert_print>
   23d46:	4916      	ldr	r1, [pc, #88]	; (23da0 <z_set_timeout_expiry+0x84>)
   23d48:	4819      	ldr	r0, [pc, #100]	; (23db0 <z_set_timeout_expiry+0x94>)
   23d4a:	f002 fdea 	bl	26922 <assert_print>
   23d4e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d50:	4814      	ldr	r0, [pc, #80]	; (23da4 <z_set_timeout_expiry+0x88>)
   23d52:	f002 fddf 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   23d56:	4812      	ldr	r0, [pc, #72]	; (23da0 <z_set_timeout_expiry+0x84>)
   23d58:	f7fd fb1e 	bl	21398 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   23d5c:	f7ff fe42 	bl	239e4 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   23d60:	2801      	cmp	r0, #1
   23d62:	dd07      	ble.n	23d74 <z_set_timeout_expiry+0x58>
   23d64:	42a0      	cmp	r0, r4
   23d66:	db05      	blt.n	23d74 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23d68:	42a0      	cmp	r0, r4
   23d6a:	4629      	mov	r1, r5
   23d6c:	bfa8      	it	ge
   23d6e:	4620      	movge	r0, r4
   23d70:	f7fa f860 	bl	1de34 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d74:	480a      	ldr	r0, [pc, #40]	; (23da0 <z_set_timeout_expiry+0x84>)
   23d76:	f7fd fb01 	bl	2137c <z_spin_unlock_valid>
   23d7a:	b958      	cbnz	r0, 23d94 <z_set_timeout_expiry+0x78>
   23d7c:	23c2      	movs	r3, #194	; 0xc2
   23d7e:	4a09      	ldr	r2, [pc, #36]	; (23da4 <z_set_timeout_expiry+0x88>)
   23d80:	490c      	ldr	r1, [pc, #48]	; (23db4 <z_set_timeout_expiry+0x98>)
   23d82:	480a      	ldr	r0, [pc, #40]	; (23dac <z_set_timeout_expiry+0x90>)
   23d84:	f002 fdcd 	bl	26922 <assert_print>
   23d88:	4905      	ldr	r1, [pc, #20]	; (23da0 <z_set_timeout_expiry+0x84>)
   23d8a:	480b      	ldr	r0, [pc, #44]	; (23db8 <z_set_timeout_expiry+0x9c>)
   23d8c:	f002 fdc9 	bl	26922 <assert_print>
   23d90:	21c2      	movs	r1, #194	; 0xc2
   23d92:	e7dd      	b.n	23d50 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   23d94:	f386 8811 	msr	BASEPRI, r6
   23d98:	f3bf 8f6f 	isb	sy
		}
	}
}
   23d9c:	bd70      	pop	{r4, r5, r6, pc}
   23d9e:	bf00      	nop
   23da0:	20021ba8 	.word	0x20021ba8
   23da4:	0002e6ba 	.word	0x0002e6ba
   23da8:	0002e713 	.word	0x0002e713
   23dac:	0002d881 	.word	0x0002d881
   23db0:	0002e728 	.word	0x0002e728
   23db4:	0002e6e7 	.word	0x0002e6e7
   23db8:	0002e6fe 	.word	0x0002e6fe

00023dbc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   23dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23dc0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   23dc2:	f7fe ff7d 	bl	22cc0 <z_time_slice>
	__asm__ volatile(
   23dc6:	f04f 0320 	mov.w	r3, #32
   23dca:	f3ef 8711 	mrs	r7, BASEPRI
   23dce:	f383 8812 	msr	BASEPRI_MAX, r3
   23dd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23dd6:	483f      	ldr	r0, [pc, #252]	; (23ed4 <sys_clock_announce+0x118>)
   23dd8:	f7fd fac2 	bl	21360 <z_spin_lock_valid>
   23ddc:	b968      	cbnz	r0, 23dfa <sys_clock_announce+0x3e>
   23dde:	2394      	movs	r3, #148	; 0x94
   23de0:	4a3d      	ldr	r2, [pc, #244]	; (23ed8 <sys_clock_announce+0x11c>)
   23de2:	493e      	ldr	r1, [pc, #248]	; (23edc <sys_clock_announce+0x120>)
   23de4:	483e      	ldr	r0, [pc, #248]	; (23ee0 <sys_clock_announce+0x124>)
   23de6:	f002 fd9c 	bl	26922 <assert_print>
   23dea:	493a      	ldr	r1, [pc, #232]	; (23ed4 <sys_clock_announce+0x118>)
   23dec:	483d      	ldr	r0, [pc, #244]	; (23ee4 <sys_clock_announce+0x128>)
   23dee:	f002 fd98 	bl	26922 <assert_print>
   23df2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23df4:	4838      	ldr	r0, [pc, #224]	; (23ed8 <sys_clock_announce+0x11c>)
   23df6:	f002 fd8d 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   23dfa:	4836      	ldr	r0, [pc, #216]	; (23ed4 <sys_clock_announce+0x118>)
   23dfc:	f7fd facc 	bl	21398 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   23e00:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 23ee8 <sys_clock_announce+0x12c>
	return list->head == list;
   23e04:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 23eec <sys_clock_announce+0x130>
   23e08:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   23e0c:	4a38      	ldr	r2, [pc, #224]	; (23ef0 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e0e:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   23e10:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   23e14:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   23e18:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e1c:	d00b      	beq.n	23e36 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   23e1e:	b155      	cbz	r5, 23e36 <sys_clock_announce+0x7a>
   23e20:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   23e24:	42b4      	cmp	r4, r6
   23e26:	eb71 0e00 	sbcs.w	lr, r1, r0
   23e2a:	da1c      	bge.n	23e66 <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   23e2c:	1b36      	subs	r6, r6, r4
   23e2e:	eb60 0001 	sbc.w	r0, r0, r1
   23e32:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   23e36:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   23e38:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   23e3c:	eb4c 0101 	adc.w	r1, ip, r1
   23e40:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   23e44:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   23e48:	f7ff fdcc 	bl	239e4 <next_timeout>
   23e4c:	4621      	mov	r1, r4
   23e4e:	f7f9 fff1 	bl	1de34 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e52:	4820      	ldr	r0, [pc, #128]	; (23ed4 <sys_clock_announce+0x118>)
   23e54:	f7fd fa92 	bl	2137c <z_spin_unlock_valid>
   23e58:	b1a8      	cbz	r0, 23e86 <sys_clock_announce+0xca>
	__asm__ volatile(
   23e5a:	f387 8811 	msr	BASEPRI, r7
   23e5e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   23e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   23e66:	18f3      	adds	r3, r6, r3
   23e68:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   23e6c:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   23e70:	2200      	movs	r2, #0
   23e72:	2300      	movs	r3, #0
		remove_timeout(t);
   23e74:	4628      	mov	r0, r5
		t->dticks = 0;
   23e76:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   23e7a:	f7ff fddb 	bl	23a34 <remove_timeout>
   23e7e:	4815      	ldr	r0, [pc, #84]	; (23ed4 <sys_clock_announce+0x118>)
   23e80:	f7fd fa7c 	bl	2137c <z_spin_unlock_valid>
   23e84:	b958      	cbnz	r0, 23e9e <sys_clock_announce+0xe2>
   23e86:	23c2      	movs	r3, #194	; 0xc2
   23e88:	4a13      	ldr	r2, [pc, #76]	; (23ed8 <sys_clock_announce+0x11c>)
   23e8a:	491a      	ldr	r1, [pc, #104]	; (23ef4 <sys_clock_announce+0x138>)
   23e8c:	4814      	ldr	r0, [pc, #80]	; (23ee0 <sys_clock_announce+0x124>)
   23e8e:	f002 fd48 	bl	26922 <assert_print>
   23e92:	4910      	ldr	r1, [pc, #64]	; (23ed4 <sys_clock_announce+0x118>)
   23e94:	4818      	ldr	r0, [pc, #96]	; (23ef8 <sys_clock_announce+0x13c>)
   23e96:	f002 fd44 	bl	26922 <assert_print>
   23e9a:	21c2      	movs	r1, #194	; 0xc2
   23e9c:	e7aa      	b.n	23df4 <sys_clock_announce+0x38>
   23e9e:	f387 8811 	msr	BASEPRI, r7
   23ea2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   23ea6:	4628      	mov	r0, r5
   23ea8:	68ab      	ldr	r3, [r5, #8]
   23eaa:	4798      	blx	r3
	__asm__ volatile(
   23eac:	f04f 0320 	mov.w	r3, #32
   23eb0:	f3ef 8711 	mrs	r7, BASEPRI
   23eb4:	f383 8812 	msr	BASEPRI_MAX, r3
   23eb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ebc:	4805      	ldr	r0, [pc, #20]	; (23ed4 <sys_clock_announce+0x118>)
   23ebe:	f7fd fa4f 	bl	21360 <z_spin_lock_valid>
   23ec2:	2800      	cmp	r0, #0
   23ec4:	d08b      	beq.n	23dde <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   23ec6:	4803      	ldr	r0, [pc, #12]	; (23ed4 <sys_clock_announce+0x118>)
   23ec8:	f7fd fa66 	bl	21398 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   23ecc:	f8d8 4000 	ldr.w	r4, [r8]
   23ed0:	1ba4      	subs	r4, r4, r6
   23ed2:	e799      	b.n	23e08 <sys_clock_announce+0x4c>
   23ed4:	20021ba8 	.word	0x20021ba8
   23ed8:	0002e6ba 	.word	0x0002e6ba
   23edc:	0002e713 	.word	0x0002e713
   23ee0:	0002d881 	.word	0x0002d881
   23ee4:	0002e728 	.word	0x0002e728
   23ee8:	20021ba4 	.word	0x20021ba4
   23eec:	200088b0 	.word	0x200088b0
   23ef0:	2000a3f8 	.word	0x2000a3f8
   23ef4:	0002e6e7 	.word	0x0002e6e7
   23ef8:	0002e6fe 	.word	0x0002e6fe

00023efc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   23efc:	b570      	push	{r4, r5, r6, lr}
   23efe:	f04f 0320 	mov.w	r3, #32
   23f02:	f3ef 8611 	mrs	r6, BASEPRI
   23f06:	f383 8812 	msr	BASEPRI_MAX, r3
   23f0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f0e:	481a      	ldr	r0, [pc, #104]	; (23f78 <sys_clock_tick_get+0x7c>)
   23f10:	f7fd fa26 	bl	21360 <z_spin_lock_valid>
   23f14:	b968      	cbnz	r0, 23f32 <sys_clock_tick_get+0x36>
   23f16:	2394      	movs	r3, #148	; 0x94
   23f18:	4a18      	ldr	r2, [pc, #96]	; (23f7c <sys_clock_tick_get+0x80>)
   23f1a:	4919      	ldr	r1, [pc, #100]	; (23f80 <sys_clock_tick_get+0x84>)
   23f1c:	4819      	ldr	r0, [pc, #100]	; (23f84 <sys_clock_tick_get+0x88>)
   23f1e:	f002 fd00 	bl	26922 <assert_print>
   23f22:	4915      	ldr	r1, [pc, #84]	; (23f78 <sys_clock_tick_get+0x7c>)
   23f24:	4818      	ldr	r0, [pc, #96]	; (23f88 <sys_clock_tick_get+0x8c>)
   23f26:	f002 fcfc 	bl	26922 <assert_print>
   23f2a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f2c:	4813      	ldr	r0, [pc, #76]	; (23f7c <sys_clock_tick_get+0x80>)
   23f2e:	f002 fcf1 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   23f32:	4811      	ldr	r0, [pc, #68]	; (23f78 <sys_clock_tick_get+0x7c>)
   23f34:	f7fd fa30 	bl	21398 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   23f38:	f7ff fd4a 	bl	239d0 <elapsed>
   23f3c:	4a13      	ldr	r2, [pc, #76]	; (23f8c <sys_clock_tick_get+0x90>)
   23f3e:	e9d2 4500 	ldrd	r4, r5, [r2]
   23f42:	1904      	adds	r4, r0, r4
   23f44:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f48:	480b      	ldr	r0, [pc, #44]	; (23f78 <sys_clock_tick_get+0x7c>)
   23f4a:	f7fd fa17 	bl	2137c <z_spin_unlock_valid>
   23f4e:	b958      	cbnz	r0, 23f68 <sys_clock_tick_get+0x6c>
   23f50:	23c2      	movs	r3, #194	; 0xc2
   23f52:	4a0a      	ldr	r2, [pc, #40]	; (23f7c <sys_clock_tick_get+0x80>)
   23f54:	490e      	ldr	r1, [pc, #56]	; (23f90 <sys_clock_tick_get+0x94>)
   23f56:	480b      	ldr	r0, [pc, #44]	; (23f84 <sys_clock_tick_get+0x88>)
   23f58:	f002 fce3 	bl	26922 <assert_print>
   23f5c:	4906      	ldr	r1, [pc, #24]	; (23f78 <sys_clock_tick_get+0x7c>)
   23f5e:	480d      	ldr	r0, [pc, #52]	; (23f94 <sys_clock_tick_get+0x98>)
   23f60:	f002 fcdf 	bl	26922 <assert_print>
   23f64:	21c2      	movs	r1, #194	; 0xc2
   23f66:	e7e1      	b.n	23f2c <sys_clock_tick_get+0x30>
	__asm__ volatile(
   23f68:	f386 8811 	msr	BASEPRI, r6
   23f6c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   23f70:	4620      	mov	r0, r4
   23f72:	4629      	mov	r1, r5
   23f74:	bd70      	pop	{r4, r5, r6, pc}
   23f76:	bf00      	nop
   23f78:	20021ba8 	.word	0x20021ba8
   23f7c:	0002e6ba 	.word	0x0002e6ba
   23f80:	0002e713 	.word	0x0002e713
   23f84:	0002d881 	.word	0x0002d881
   23f88:	0002e728 	.word	0x0002e728
   23f8c:	2000a3f8 	.word	0x2000a3f8
   23f90:	0002e6e7 	.word	0x0002e6e7
   23f94:	0002e6fe 	.word	0x0002e6fe

00023f98 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   23f98:	b570      	push	{r4, r5, r6, lr}
   23f9a:	4604      	mov	r4, r0
	__asm__ volatile(
   23f9c:	f04f 0320 	mov.w	r3, #32
   23fa0:	f3ef 8511 	mrs	r5, BASEPRI
   23fa4:	f383 8812 	msr	BASEPRI_MAX, r3
   23fa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23fac:	4849      	ldr	r0, [pc, #292]	; (240d4 <z_timer_expiration_handler+0x13c>)
   23fae:	f7fd f9d7 	bl	21360 <z_spin_lock_valid>
   23fb2:	b968      	cbnz	r0, 23fd0 <z_timer_expiration_handler+0x38>
   23fb4:	2394      	movs	r3, #148	; 0x94
   23fb6:	4a48      	ldr	r2, [pc, #288]	; (240d8 <z_timer_expiration_handler+0x140>)
   23fb8:	4948      	ldr	r1, [pc, #288]	; (240dc <z_timer_expiration_handler+0x144>)
   23fba:	4849      	ldr	r0, [pc, #292]	; (240e0 <z_timer_expiration_handler+0x148>)
   23fbc:	f002 fcb1 	bl	26922 <assert_print>
   23fc0:	4944      	ldr	r1, [pc, #272]	; (240d4 <z_timer_expiration_handler+0x13c>)
   23fc2:	4848      	ldr	r0, [pc, #288]	; (240e4 <z_timer_expiration_handler+0x14c>)
   23fc4:	f002 fcad 	bl	26922 <assert_print>
   23fc8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fca:	4843      	ldr	r0, [pc, #268]	; (240d8 <z_timer_expiration_handler+0x140>)
   23fcc:	f002 fca2 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   23fd0:	4840      	ldr	r0, [pc, #256]	; (240d4 <z_timer_expiration_handler+0x13c>)
   23fd2:	f7fd f9e1 	bl	21398 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   23fd6:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   23fda:	3301      	adds	r3, #1
   23fdc:	f142 0200 	adc.w	r2, r2, #0
   23fe0:	2b02      	cmp	r3, #2
   23fe2:	f172 0200 	sbcs.w	r2, r2, #0
   23fe6:	d322      	bcc.n	2402e <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   23fe8:	f007 fb87 	bl	2b6fa <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   23fec:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   23ff0:	3001      	adds	r0, #1
   23ff2:	f141 0100 	adc.w	r1, r1, #0
   23ff6:	18c0      	adds	r0, r0, r3
   23ff8:	eb41 0102 	adc.w	r1, r1, r2
   23ffc:	2801      	cmp	r0, #1
   23ffe:	f171 0100 	sbcs.w	r1, r1, #0
   24002:	db29      	blt.n	24058 <z_timer_expiration_handler+0xc0>
   24004:	f007 fb79 	bl	2b6fa <z_impl_k_uptime_ticks>
   24008:	3001      	adds	r0, #1
   2400a:	f141 0300 	adc.w	r3, r1, #0
   2400e:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   24012:	1880      	adds	r0, r0, r2
   24014:	f06f 0201 	mvn.w	r2, #1
   24018:	eb43 0301 	adc.w	r3, r3, r1
   2401c:	f04f 31ff 	mov.w	r1, #4294967295
   24020:	1a12      	subs	r2, r2, r0
   24022:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24026:	4620      	mov	r0, r4
   24028:	492f      	ldr	r1, [pc, #188]	; (240e8 <z_timer_expiration_handler+0x150>)
   2402a:	f7ff fd1f 	bl	23a6c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   2402e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24030:	3301      	adds	r3, #1
   24032:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   24034:	6a23      	ldr	r3, [r4, #32]
   24036:	b35b      	cbz	r3, 24090 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24038:	4826      	ldr	r0, [pc, #152]	; (240d4 <z_timer_expiration_handler+0x13c>)
   2403a:	f7fd f99f 	bl	2137c <z_spin_unlock_valid>
   2403e:	b980      	cbnz	r0, 24062 <z_timer_expiration_handler+0xca>
   24040:	23c2      	movs	r3, #194	; 0xc2
   24042:	4a25      	ldr	r2, [pc, #148]	; (240d8 <z_timer_expiration_handler+0x140>)
   24044:	4929      	ldr	r1, [pc, #164]	; (240ec <z_timer_expiration_handler+0x154>)
   24046:	4826      	ldr	r0, [pc, #152]	; (240e0 <z_timer_expiration_handler+0x148>)
   24048:	f002 fc6b 	bl	26922 <assert_print>
   2404c:	4921      	ldr	r1, [pc, #132]	; (240d4 <z_timer_expiration_handler+0x13c>)
   2404e:	4828      	ldr	r0, [pc, #160]	; (240f0 <z_timer_expiration_handler+0x158>)
   24050:	f002 fc67 	bl	26922 <assert_print>
   24054:	21c2      	movs	r1, #194	; 0xc2
   24056:	e7b8      	b.n	23fca <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   24058:	f06f 0201 	mvn.w	r2, #1
   2405c:	f04f 33ff 	mov.w	r3, #4294967295
   24060:	e7e1      	b.n	24026 <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   24062:	f385 8811 	msr	BASEPRI, r5
   24066:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2406a:	4620      	mov	r0, r4
   2406c:	6a23      	ldr	r3, [r4, #32]
   2406e:	4798      	blx	r3
	__asm__ volatile(
   24070:	f04f 0320 	mov.w	r3, #32
   24074:	f3ef 8511 	mrs	r5, BASEPRI
   24078:	f383 8812 	msr	BASEPRI_MAX, r3
   2407c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24080:	4814      	ldr	r0, [pc, #80]	; (240d4 <z_timer_expiration_handler+0x13c>)
   24082:	f7fd f96d 	bl	21360 <z_spin_lock_valid>
   24086:	2800      	cmp	r0, #0
   24088:	d094      	beq.n	23fb4 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   2408a:	4812      	ldr	r0, [pc, #72]	; (240d4 <z_timer_expiration_handler+0x13c>)
   2408c:	f7fd f984 	bl	21398 <z_spin_lock_set_owner>
	return list->head == list;
   24090:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24094:	42a6      	cmp	r6, r4
   24096:	d000      	beq.n	2409a <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   24098:	b94e      	cbnz	r6, 240ae <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2409a:	480e      	ldr	r0, [pc, #56]	; (240d4 <z_timer_expiration_handler+0x13c>)
   2409c:	f7fd f96e 	bl	2137c <z_spin_unlock_valid>
   240a0:	2800      	cmp	r0, #0
   240a2:	d0cd      	beq.n	24040 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   240a4:	f385 8811 	msr	BASEPRI, r5
   240a8:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   240ac:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   240ae:	4630      	mov	r0, r6
   240b0:	f7fe fbda 	bl	22868 <z_unpend_thread_no_timeout>
   240b4:	2300      	movs	r3, #0
   240b6:	4807      	ldr	r0, [pc, #28]	; (240d4 <z_timer_expiration_handler+0x13c>)
   240b8:	67f3      	str	r3, [r6, #124]	; 0x7c
   240ba:	f7fd f95f 	bl	2137c <z_spin_unlock_valid>
   240be:	2800      	cmp	r0, #0
   240c0:	d0be      	beq.n	24040 <z_timer_expiration_handler+0xa8>
   240c2:	f385 8811 	msr	BASEPRI, r5
   240c6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   240ca:	4630      	mov	r0, r6
}
   240cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   240d0:	f7fe bb84 	b.w	227dc <z_ready_thread>
   240d4:	20021bac 	.word	0x20021bac
   240d8:	0002e6ba 	.word	0x0002e6ba
   240dc:	0002e713 	.word	0x0002e713
   240e0:	0002d881 	.word	0x0002d881
   240e4:	0002e728 	.word	0x0002e728
   240e8:	00023f99 	.word	0x00023f99
   240ec:	0002e6e7 	.word	0x0002e6e7
   240f0:	0002e6fe 	.word	0x0002e6fe

000240f4 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   240f4:	f1b3 3fff 	cmp.w	r3, #4294967295
   240f8:	bf08      	it	eq
   240fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   240fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24102:	4619      	mov	r1, r3
   24104:	4605      	mov	r5, r0
   24106:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   2410a:	4614      	mov	r4, r2
   2410c:	4691      	mov	r9, r2
   2410e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24110:	d037      	beq.n	24182 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24112:	f1b0 3fff 	cmp.w	r0, #4294967295
   24116:	bf08      	it	eq
   24118:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2411c:	4637      	mov	r7, r6
   2411e:	4682      	mov	sl, r0
   24120:	d011      	beq.n	24146 <z_impl_k_timer_start+0x52>
   24122:	ea50 0306 	orrs.w	r3, r0, r6
   24126:	d00e      	beq.n	24146 <z_impl_k_timer_start+0x52>
   24128:	1c72      	adds	r2, r6, #1
   2412a:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   2412e:	db0a      	blt.n	24146 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   24130:	2e02      	cmp	r6, #2
   24132:	4684      	mov	ip, r0
   24134:	f170 0000 	sbcs.w	r0, r0, #0
   24138:	bfbc      	itt	lt
   2413a:	2702      	movlt	r7, #2
   2413c:	f04f 0c00 	movlt.w	ip, #0
   24140:	3f01      	subs	r7, #1
   24142:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24146:	1c63      	adds	r3, r4, #1
   24148:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   2414c:	db0a      	blt.n	24164 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2414e:	2c01      	cmp	r4, #1
   24150:	f171 0300 	sbcs.w	r3, r1, #0
   24154:	4622      	mov	r2, r4
   24156:	bfbc      	itt	lt
   24158:	2201      	movlt	r2, #1
   2415a:	2100      	movlt	r1, #0
   2415c:	f112 39ff 	adds.w	r9, r2, #4294967295
   24160:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   24164:	4628      	mov	r0, r5
   24166:	f7ff fd47 	bl	23bf8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2416a:	2300      	movs	r3, #0
	timer->period = period;
   2416c:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   24170:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24172:	464a      	mov	r2, r9
   24174:	4643      	mov	r3, r8
   24176:	4628      	mov	r0, r5
		     duration);
}
   24178:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2417c:	4902      	ldr	r1, [pc, #8]	; (24188 <z_impl_k_timer_start+0x94>)
   2417e:	f7ff bc75 	b.w	23a6c <z_add_timeout>
}
   24182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24186:	bf00      	nop
   24188:	00023f99 	.word	0x00023f99

0002418c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2418c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   24190:	2600      	movs	r6, #0
{
   24192:	4688      	mov	r8, r1
   24194:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   24196:	4604      	mov	r4, r0
	int events_registered = 0;
   24198:	4637      	mov	r7, r6
	event->poller = NULL;
   2419a:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2419c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 2435c <register_events+0x1d0>
{
   241a0:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   241a2:	4546      	cmp	r6, r8
   241a4:	db03      	blt.n	241ae <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   241a6:	4638      	mov	r0, r7
   241a8:	b003      	add	sp, #12
   241aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   241ae:	f04f 0320 	mov.w	r3, #32
   241b2:	f3ef 8b11 	mrs	fp, BASEPRI
   241b6:	f383 8812 	msr	BASEPRI_MAX, r3
   241ba:	f3bf 8f6f 	isb	sy
   241be:	4648      	mov	r0, r9
   241c0:	f7fd f8ce 	bl	21360 <z_spin_lock_valid>
   241c4:	b960      	cbnz	r0, 241e0 <register_events+0x54>
   241c6:	2394      	movs	r3, #148	; 0x94
   241c8:	4a65      	ldr	r2, [pc, #404]	; (24360 <register_events+0x1d4>)
   241ca:	4966      	ldr	r1, [pc, #408]	; (24364 <register_events+0x1d8>)
   241cc:	4866      	ldr	r0, [pc, #408]	; (24368 <register_events+0x1dc>)
   241ce:	f002 fba8 	bl	26922 <assert_print>
   241d2:	4962      	ldr	r1, [pc, #392]	; (2435c <register_events+0x1d0>)
   241d4:	4865      	ldr	r0, [pc, #404]	; (2436c <register_events+0x1e0>)
   241d6:	f002 fba4 	bl	26922 <assert_print>
   241da:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241dc:	4860      	ldr	r0, [pc, #384]	; (24360 <register_events+0x1d4>)
   241de:	e060      	b.n	242a2 <register_events+0x116>
	z_spin_lock_set_owner(l);
   241e0:	4648      	mov	r0, r9
   241e2:	f7fd f8d9 	bl	21398 <z_spin_lock_set_owner>
	switch (event->type) {
   241e6:	7b63      	ldrb	r3, [r4, #13]
   241e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   241ec:	2b08      	cmp	r3, #8
   241ee:	d84a      	bhi.n	24286 <register_events+0xfa>
   241f0:	e8df f003 	tbb	[pc, r3]
   241f4:	49053d2b 	.word	0x49053d2b
   241f8:	49494927 	.word	0x49494927
   241fc:	43          	.byte	0x43
   241fd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   241fe:	6923      	ldr	r3, [r4, #16]
   24200:	689b      	ldr	r3, [r3, #8]
   24202:	b313      	cbz	r3, 2424a <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24204:	2302      	movs	r3, #2
	event->state |= state;
   24206:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   24208:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   2420c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   24210:	430b      	orrs	r3, r1
   24212:	f363 3294 	bfi	r2, r3, #14, #7
   24216:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   24218:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2421c:	4648      	mov	r0, r9
   2421e:	f7fd f8ad 	bl	2137c <z_spin_unlock_valid>
   24222:	3414      	adds	r4, #20
   24224:	2800      	cmp	r0, #0
   24226:	f040 8092 	bne.w	2434e <register_events+0x1c2>
   2422a:	23c2      	movs	r3, #194	; 0xc2
   2422c:	4a4c      	ldr	r2, [pc, #304]	; (24360 <register_events+0x1d4>)
   2422e:	4950      	ldr	r1, [pc, #320]	; (24370 <register_events+0x1e4>)
   24230:	484d      	ldr	r0, [pc, #308]	; (24368 <register_events+0x1dc>)
   24232:	f002 fb76 	bl	26922 <assert_print>
   24236:	4949      	ldr	r1, [pc, #292]	; (2435c <register_events+0x1d0>)
   24238:	484e      	ldr	r0, [pc, #312]	; (24374 <register_events+0x1e8>)
   2423a:	f002 fb72 	bl	26922 <assert_print>
   2423e:	21c2      	movs	r1, #194	; 0xc2
   24240:	e7cc      	b.n	241dc <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   24242:	6923      	ldr	r3, [r4, #16]
   24244:	681b      	ldr	r3, [r3, #0]
   24246:	2b00      	cmp	r3, #0
   24248:	d12d      	bne.n	242a6 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   2424a:	9b01      	ldr	r3, [sp, #4]
   2424c:	2b00      	cmp	r3, #0
   2424e:	d1e5      	bne.n	2421c <register_events+0x90>
   24250:	782b      	ldrb	r3, [r5, #0]
   24252:	2b00      	cmp	r3, #0
   24254:	d0e2      	beq.n	2421c <register_events+0x90>
	switch (event->type) {
   24256:	7b63      	ldrb	r3, [r4, #13]
   24258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2425c:	2b08      	cmp	r3, #8
   2425e:	d86b      	bhi.n	24338 <register_events+0x1ac>
   24260:	e8df f003 	tbb	[pc, r3]
   24264:	6a234935 	.word	0x6a234935
   24268:	6a6a6a38 	.word	0x6a6a6a38
   2426c:	59          	.byte	0x59
   2426d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2426e:	6923      	ldr	r3, [r4, #16]
   24270:	689b      	ldr	r3, [r3, #8]
   24272:	2b00      	cmp	r3, #0
   24274:	d0e9      	beq.n	2424a <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   24276:	2301      	movs	r3, #1
   24278:	e7c5      	b.n	24206 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   2427a:	6923      	ldr	r3, [r4, #16]
   2427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2427e:	2b00      	cmp	r3, #0
   24280:	d0e3      	beq.n	2424a <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24282:	2310      	movs	r3, #16
   24284:	e7bf      	b.n	24206 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   24286:	2363      	movs	r3, #99	; 0x63
   24288:	4a3b      	ldr	r2, [pc, #236]	; (24378 <register_events+0x1ec>)
   2428a:	493c      	ldr	r1, [pc, #240]	; (2437c <register_events+0x1f0>)
   2428c:	4836      	ldr	r0, [pc, #216]	; (24368 <register_events+0x1dc>)
   2428e:	f002 fb48 	bl	26922 <assert_print>
   24292:	7b61      	ldrb	r1, [r4, #13]
   24294:	483a      	ldr	r0, [pc, #232]	; (24380 <register_events+0x1f4>)
   24296:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   2429a:	f002 fb42 	bl	26922 <assert_print>
   2429e:	2163      	movs	r1, #99	; 0x63
   242a0:	4835      	ldr	r0, [pc, #212]	; (24378 <register_events+0x1ec>)
   242a2:	f002 fb37 	bl	26914 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   242a6:	2304      	movs	r3, #4
   242a8:	e7ad      	b.n	24206 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   242aa:	6920      	ldr	r0, [r4, #16]
   242ac:	b950      	cbnz	r0, 242c4 <register_events+0x138>
   242ae:	4935      	ldr	r1, [pc, #212]	; (24384 <register_events+0x1f8>)
   242b0:	238d      	movs	r3, #141	; 0x8d
   242b2:	4a31      	ldr	r2, [pc, #196]	; (24378 <register_events+0x1ec>)
   242b4:	482c      	ldr	r0, [pc, #176]	; (24368 <register_events+0x1dc>)
   242b6:	f002 fb34 	bl	26922 <assert_print>
   242ba:	4833      	ldr	r0, [pc, #204]	; (24388 <register_events+0x1fc>)
   242bc:	f002 fb31 	bl	26922 <assert_print>
   242c0:	218d      	movs	r1, #141	; 0x8d
   242c2:	e7ed      	b.n	242a0 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   242c4:	462a      	mov	r2, r5
   242c6:	4621      	mov	r1, r4
   242c8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   242ca:	f007 fa67 	bl	2b79c <add_event>
	event->poller = poller;
   242ce:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   242d0:	3701      	adds	r7, #1
   242d2:	e7a3      	b.n	2421c <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   242d4:	6920      	ldr	r0, [r4, #16]
   242d6:	b950      	cbnz	r0, 242ee <register_events+0x162>
   242d8:	492c      	ldr	r1, [pc, #176]	; (2438c <register_events+0x200>)
   242da:	2391      	movs	r3, #145	; 0x91
   242dc:	4a26      	ldr	r2, [pc, #152]	; (24378 <register_events+0x1ec>)
   242de:	4822      	ldr	r0, [pc, #136]	; (24368 <register_events+0x1dc>)
   242e0:	f002 fb1f 	bl	26922 <assert_print>
   242e4:	482a      	ldr	r0, [pc, #168]	; (24390 <register_events+0x204>)
   242e6:	f002 fb1c 	bl	26922 <assert_print>
   242ea:	2191      	movs	r1, #145	; 0x91
   242ec:	e7d8      	b.n	242a0 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   242ee:	462a      	mov	r2, r5
   242f0:	4621      	mov	r1, r4
   242f2:	3014      	adds	r0, #20
   242f4:	e7e9      	b.n	242ca <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   242f6:	6920      	ldr	r0, [r4, #16]
   242f8:	b950      	cbnz	r0, 24310 <register_events+0x184>
   242fa:	4926      	ldr	r1, [pc, #152]	; (24394 <register_events+0x208>)
   242fc:	2395      	movs	r3, #149	; 0x95
   242fe:	4a1e      	ldr	r2, [pc, #120]	; (24378 <register_events+0x1ec>)
   24300:	4819      	ldr	r0, [pc, #100]	; (24368 <register_events+0x1dc>)
   24302:	f002 fb0e 	bl	26922 <assert_print>
   24306:	4824      	ldr	r0, [pc, #144]	; (24398 <register_events+0x20c>)
   24308:	f002 fb0b 	bl	26922 <assert_print>
   2430c:	2195      	movs	r1, #149	; 0x95
   2430e:	e7c7      	b.n	242a0 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   24310:	462a      	mov	r2, r5
   24312:	4621      	mov	r1, r4
   24314:	e7d9      	b.n	242ca <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24316:	6920      	ldr	r0, [r4, #16]
   24318:	b950      	cbnz	r0, 24330 <register_events+0x1a4>
   2431a:	4920      	ldr	r1, [pc, #128]	; (2439c <register_events+0x210>)
   2431c:	2399      	movs	r3, #153	; 0x99
   2431e:	4a16      	ldr	r2, [pc, #88]	; (24378 <register_events+0x1ec>)
   24320:	4811      	ldr	r0, [pc, #68]	; (24368 <register_events+0x1dc>)
   24322:	f002 fafe 	bl	26922 <assert_print>
   24326:	481e      	ldr	r0, [pc, #120]	; (243a0 <register_events+0x214>)
   24328:	f002 fafb 	bl	26922 <assert_print>
   2432c:	2199      	movs	r1, #153	; 0x99
   2432e:	e7b7      	b.n	242a0 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   24330:	462a      	mov	r2, r5
   24332:	4621      	mov	r1, r4
   24334:	3028      	adds	r0, #40	; 0x28
   24336:	e7c8      	b.n	242ca <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   24338:	4910      	ldr	r1, [pc, #64]	; (2437c <register_events+0x1f0>)
   2433a:	23a6      	movs	r3, #166	; 0xa6
   2433c:	4a0e      	ldr	r2, [pc, #56]	; (24378 <register_events+0x1ec>)
   2433e:	480a      	ldr	r0, [pc, #40]	; (24368 <register_events+0x1dc>)
   24340:	f002 faef 	bl	26922 <assert_print>
   24344:	4817      	ldr	r0, [pc, #92]	; (243a4 <register_events+0x218>)
   24346:	f002 faec 	bl	26922 <assert_print>
   2434a:	21a6      	movs	r1, #166	; 0xa6
   2434c:	e7a8      	b.n	242a0 <register_events+0x114>
	__asm__ volatile(
   2434e:	f38b 8811 	msr	BASEPRI, fp
   24352:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24356:	3601      	adds	r6, #1
   24358:	e723      	b.n	241a2 <register_events+0x16>
   2435a:	bf00      	nop
   2435c:	20021bb0 	.word	0x20021bb0
   24360:	0002e6ba 	.word	0x0002e6ba
   24364:	0002e713 	.word	0x0002e713
   24368:	0002d881 	.word	0x0002d881
   2436c:	0002e728 	.word	0x0002e728
   24370:	0002e6e7 	.word	0x0002e6e7
   24374:	0002e6fe 	.word	0x0002e6fe
   24378:	00033226 	.word	0x00033226
   2437c:	000334e0 	.word	0x000334e0
   24380:	00033247 	.word	0x00033247
   24384:	00033264 	.word	0x00033264
   24388:	0003327e 	.word	0x0003327e
   2438c:	00033293 	.word	0x00033293
   24390:	000332af 	.word	0x000332af
   24394:	000332c0 	.word	0x000332c0
   24398:	000332dd 	.word	0x000332dd
   2439c:	000332f4 	.word	0x000332f4
   243a0:	0003330f 	.word	0x0003330f
   243a4:	00033328 	.word	0x00033328

000243a8 <clear_event_registrations>:
{
   243a8:	2314      	movs	r3, #20
   243aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243ae:	4615      	mov	r5, r2
	while (num_events--) {
   243b0:	460c      	mov	r4, r1
	event->poller = NULL;
   243b2:	2600      	movs	r6, #0
   243b4:	fb03 0001 	mla	r0, r3, r1, r0
   243b8:	4f4b      	ldr	r7, [pc, #300]	; (244e8 <clear_event_registrations+0x140>)
	while (num_events--) {
   243ba:	b90c      	cbnz	r4, 243c0 <clear_event_registrations+0x18>
}
   243bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   243c0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   243c4:	f1a0 0814 	sub.w	r8, r0, #20
   243c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   243cc:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   243d0:	2b08      	cmp	r3, #8
   243d2:	d842      	bhi.n	2445a <clear_event_registrations+0xb2>
   243d4:	e8df f003 	tbb	[pc, r3]
   243d8:	41052555 	.word	0x41052555
   243dc:	41414116 	.word	0x41414116
   243e0:	33          	.byte	0x33
   243e1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   243e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   243e6:	2b00      	cmp	r3, #0
   243e8:	d142      	bne.n	24470 <clear_event_registrations+0xc8>
   243ea:	4940      	ldr	r1, [pc, #256]	; (244ec <clear_event_registrations+0x144>)
   243ec:	23b6      	movs	r3, #182	; 0xb6
   243ee:	4a40      	ldr	r2, [pc, #256]	; (244f0 <clear_event_registrations+0x148>)
   243f0:	4840      	ldr	r0, [pc, #256]	; (244f4 <clear_event_registrations+0x14c>)
   243f2:	f002 fa96 	bl	26922 <assert_print>
   243f6:	4840      	ldr	r0, [pc, #256]	; (244f8 <clear_event_registrations+0x150>)
   243f8:	f002 fa93 	bl	26922 <assert_print>
   243fc:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   243fe:	483c      	ldr	r0, [pc, #240]	; (244f0 <clear_event_registrations+0x148>)
   24400:	f002 fa88 	bl	26914 <assert_post_action>
   24404:	f850 3c04 	ldr.w	r3, [r0, #-4]
   24408:	2b00      	cmp	r3, #0
   2440a:	d131      	bne.n	24470 <clear_event_registrations+0xc8>
   2440c:	493b      	ldr	r1, [pc, #236]	; (244fc <clear_event_registrations+0x154>)
   2440e:	23ba      	movs	r3, #186	; 0xba
   24410:	4a37      	ldr	r2, [pc, #220]	; (244f0 <clear_event_registrations+0x148>)
   24412:	4838      	ldr	r0, [pc, #224]	; (244f4 <clear_event_registrations+0x14c>)
   24414:	f002 fa85 	bl	26922 <assert_print>
   24418:	4839      	ldr	r0, [pc, #228]	; (24500 <clear_event_registrations+0x158>)
   2441a:	f002 fa82 	bl	26922 <assert_print>
   2441e:	21ba      	movs	r1, #186	; 0xba
   24420:	e7ed      	b.n	243fe <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24422:	f850 3c04 	ldr.w	r3, [r0, #-4]
   24426:	bb1b      	cbnz	r3, 24470 <clear_event_registrations+0xc8>
   24428:	4936      	ldr	r1, [pc, #216]	; (24504 <clear_event_registrations+0x15c>)
   2442a:	23be      	movs	r3, #190	; 0xbe
   2442c:	4a30      	ldr	r2, [pc, #192]	; (244f0 <clear_event_registrations+0x148>)
   2442e:	4831      	ldr	r0, [pc, #196]	; (244f4 <clear_event_registrations+0x14c>)
   24430:	f002 fa77 	bl	26922 <assert_print>
   24434:	4834      	ldr	r0, [pc, #208]	; (24508 <clear_event_registrations+0x160>)
   24436:	f002 fa74 	bl	26922 <assert_print>
   2443a:	21be      	movs	r1, #190	; 0xbe
   2443c:	e7df      	b.n	243fe <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2443e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   24442:	b9ab      	cbnz	r3, 24470 <clear_event_registrations+0xc8>
   24444:	4931      	ldr	r1, [pc, #196]	; (2450c <clear_event_registrations+0x164>)
   24446:	23c2      	movs	r3, #194	; 0xc2
   24448:	4a29      	ldr	r2, [pc, #164]	; (244f0 <clear_event_registrations+0x148>)
   2444a:	482a      	ldr	r0, [pc, #168]	; (244f4 <clear_event_registrations+0x14c>)
   2444c:	f002 fa69 	bl	26922 <assert_print>
   24450:	482f      	ldr	r0, [pc, #188]	; (24510 <clear_event_registrations+0x168>)
   24452:	f002 fa66 	bl	26922 <assert_print>
   24456:	21c2      	movs	r1, #194	; 0xc2
   24458:	e7d1      	b.n	243fe <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   2445a:	492e      	ldr	r1, [pc, #184]	; (24514 <clear_event_registrations+0x16c>)
   2445c:	23cf      	movs	r3, #207	; 0xcf
   2445e:	4a24      	ldr	r2, [pc, #144]	; (244f0 <clear_event_registrations+0x148>)
   24460:	4824      	ldr	r0, [pc, #144]	; (244f4 <clear_event_registrations+0x14c>)
   24462:	f002 fa5e 	bl	26922 <assert_print>
   24466:	482c      	ldr	r0, [pc, #176]	; (24518 <clear_event_registrations+0x170>)
   24468:	f002 fa5b 	bl	26922 <assert_print>
   2446c:	21cf      	movs	r1, #207	; 0xcf
   2446e:	e7c6      	b.n	243fe <clear_event_registrations+0x56>
	return node->next != NULL;
   24470:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   24474:	b12b      	cbz	r3, 24482 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   24476:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2447a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2447c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2447e:	e940 6605 	strd	r6, r6, [r0, #-20]
   24482:	4638      	mov	r0, r7
   24484:	f7fc ff7a 	bl	2137c <z_spin_unlock_valid>
   24488:	b960      	cbnz	r0, 244a4 <clear_event_registrations+0xfc>
   2448a:	23c2      	movs	r3, #194	; 0xc2
   2448c:	4a23      	ldr	r2, [pc, #140]	; (2451c <clear_event_registrations+0x174>)
   2448e:	4924      	ldr	r1, [pc, #144]	; (24520 <clear_event_registrations+0x178>)
   24490:	4818      	ldr	r0, [pc, #96]	; (244f4 <clear_event_registrations+0x14c>)
   24492:	f002 fa46 	bl	26922 <assert_print>
   24496:	4914      	ldr	r1, [pc, #80]	; (244e8 <clear_event_registrations+0x140>)
   24498:	4822      	ldr	r0, [pc, #136]	; (24524 <clear_event_registrations+0x17c>)
   2449a:	f002 fa42 	bl	26922 <assert_print>
   2449e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244a0:	481e      	ldr	r0, [pc, #120]	; (2451c <clear_event_registrations+0x174>)
   244a2:	e7ad      	b.n	24400 <clear_event_registrations+0x58>
   244a4:	f385 8811 	msr	BASEPRI, r5
   244a8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   244ac:	f04f 0320 	mov.w	r3, #32
   244b0:	f3ef 8511 	mrs	r5, BASEPRI
   244b4:	f383 8812 	msr	BASEPRI_MAX, r3
   244b8:	f3bf 8f6f 	isb	sy
   244bc:	4638      	mov	r0, r7
   244be:	f7fc ff4f 	bl	21360 <z_spin_lock_valid>
   244c2:	3c01      	subs	r4, #1
   244c4:	b958      	cbnz	r0, 244de <clear_event_registrations+0x136>
   244c6:	2394      	movs	r3, #148	; 0x94
   244c8:	4a14      	ldr	r2, [pc, #80]	; (2451c <clear_event_registrations+0x174>)
   244ca:	4917      	ldr	r1, [pc, #92]	; (24528 <clear_event_registrations+0x180>)
   244cc:	4809      	ldr	r0, [pc, #36]	; (244f4 <clear_event_registrations+0x14c>)
   244ce:	f002 fa28 	bl	26922 <assert_print>
   244d2:	4905      	ldr	r1, [pc, #20]	; (244e8 <clear_event_registrations+0x140>)
   244d4:	4815      	ldr	r0, [pc, #84]	; (2452c <clear_event_registrations+0x184>)
   244d6:	f002 fa24 	bl	26922 <assert_print>
   244da:	2194      	movs	r1, #148	; 0x94
   244dc:	e7e0      	b.n	244a0 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   244de:	4638      	mov	r0, r7
   244e0:	f7fc ff5a 	bl	21398 <z_spin_lock_set_owner>
	return k;
   244e4:	4640      	mov	r0, r8
   244e6:	e768      	b.n	243ba <clear_event_registrations+0x12>
   244e8:	20021bb0 	.word	0x20021bb0
   244ec:	00033264 	.word	0x00033264
   244f0:	00033226 	.word	0x00033226
   244f4:	0002d881 	.word	0x0002d881
   244f8:	0003327e 	.word	0x0003327e
   244fc:	00033293 	.word	0x00033293
   24500:	000332af 	.word	0x000332af
   24504:	000332c0 	.word	0x000332c0
   24508:	000332dd 	.word	0x000332dd
   2450c:	000332f4 	.word	0x000332f4
   24510:	0003330f 	.word	0x0003330f
   24514:	000334e0 	.word	0x000334e0
   24518:	00033328 	.word	0x00033328
   2451c:	0002e6ba 	.word	0x0002e6ba
   24520:	0002e6e7 	.word	0x0002e6e7
   24524:	0002e6fe 	.word	0x0002e6fe
   24528:	0002e713 	.word	0x0002e713
   2452c:	0002e728 	.word	0x0002e728

00024530 <k_poll_event_init>:
{
   24530:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24532:	b162      	cbz	r2, 2454e <k_poll_event_init+0x1e>
   24534:	4917      	ldr	r1, [pc, #92]	; (24594 <k_poll_event_init+0x64>)
   24536:	232d      	movs	r3, #45	; 0x2d
   24538:	4a17      	ldr	r2, [pc, #92]	; (24598 <k_poll_event_init+0x68>)
   2453a:	4818      	ldr	r0, [pc, #96]	; (2459c <k_poll_event_init+0x6c>)
   2453c:	f002 f9f1 	bl	26922 <assert_print>
   24540:	4817      	ldr	r0, [pc, #92]	; (245a0 <k_poll_event_init+0x70>)
   24542:	f002 f9ee 	bl	26922 <assert_print>
   24546:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   24548:	4813      	ldr	r0, [pc, #76]	; (24598 <k_poll_event_init+0x68>)
   2454a:	f002 f9e3 	bl	26914 <assert_post_action>
   2454e:	293f      	cmp	r1, #63	; 0x3f
   24550:	d90a      	bls.n	24568 <k_poll_event_init+0x38>
   24552:	4914      	ldr	r1, [pc, #80]	; (245a4 <k_poll_event_init+0x74>)
   24554:	232f      	movs	r3, #47	; 0x2f
   24556:	4a10      	ldr	r2, [pc, #64]	; (24598 <k_poll_event_init+0x68>)
   24558:	4810      	ldr	r0, [pc, #64]	; (2459c <k_poll_event_init+0x6c>)
   2455a:	f002 f9e2 	bl	26922 <assert_print>
   2455e:	4812      	ldr	r0, [pc, #72]	; (245a8 <k_poll_event_init+0x78>)
   24560:	f002 f9df 	bl	26922 <assert_print>
   24564:	212f      	movs	r1, #47	; 0x2f
   24566:	e7ef      	b.n	24548 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   24568:	b953      	cbnz	r3, 24580 <k_poll_event_init+0x50>
   2456a:	4910      	ldr	r1, [pc, #64]	; (245ac <k_poll_event_init+0x7c>)
   2456c:	2330      	movs	r3, #48	; 0x30
   2456e:	4a0a      	ldr	r2, [pc, #40]	; (24598 <k_poll_event_init+0x68>)
   24570:	480a      	ldr	r0, [pc, #40]	; (2459c <k_poll_event_init+0x6c>)
   24572:	f002 f9d6 	bl	26922 <assert_print>
   24576:	480e      	ldr	r0, [pc, #56]	; (245b0 <k_poll_event_init+0x80>)
   24578:	f002 f9d3 	bl	26922 <assert_print>
   2457c:	2130      	movs	r1, #48	; 0x30
   2457e:	e7e3      	b.n	24548 <k_poll_event_init+0x18>
	event->poller = NULL;
   24580:	6082      	str	r2, [r0, #8]
	event->type = type;
   24582:	0209      	lsls	r1, r1, #8
   24584:	7b02      	ldrb	r2, [r0, #12]
   24586:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2458a:	4311      	orrs	r1, r2
	event->obj = obj;
   2458c:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   24590:	bd08      	pop	{r3, pc}
   24592:	bf00      	nop
   24594:	0003333e 	.word	0x0003333e
   24598:	00033226 	.word	0x00033226
   2459c:	0002d881 	.word	0x0002d881
   245a0:	0003335e 	.word	0x0003335e
   245a4:	00033384 	.word	0x00033384
   245a8:	000333a8 	.word	0x000333a8
   245ac:	000333b8 	.word	0x000333b8
   245b0:	000333cb 	.word	0x000333cb

000245b4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   245b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245b8:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   245ba:	4b5c      	ldr	r3, [pc, #368]	; (2472c <z_impl_k_poll+0x178>)
{
   245bc:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   245be:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   245c2:	2301      	movs	r3, #1
{
   245c4:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   245c6:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   245ca:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   245ce:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   245d2:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   245d6:	f1bb 0f00 	cmp.w	fp, #0
   245da:	d00e      	beq.n	245fa <z_impl_k_poll+0x46>
   245dc:	4954      	ldr	r1, [pc, #336]	; (24730 <z_impl_k_poll+0x17c>)
   245de:	f240 132d 	movw	r3, #301	; 0x12d
   245e2:	4a54      	ldr	r2, [pc, #336]	; (24734 <z_impl_k_poll+0x180>)
   245e4:	4854      	ldr	r0, [pc, #336]	; (24738 <z_impl_k_poll+0x184>)
   245e6:	f002 f99c 	bl	26922 <assert_print>
   245ea:	4854      	ldr	r0, [pc, #336]	; (2473c <z_impl_k_poll+0x188>)
   245ec:	f002 f999 	bl	26922 <assert_print>
   245f0:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   245f4:	484f      	ldr	r0, [pc, #316]	; (24734 <z_impl_k_poll+0x180>)
   245f6:	f002 f98d 	bl	26914 <assert_post_action>
   245fa:	b960      	cbnz	r0, 24616 <z_impl_k_poll+0x62>
   245fc:	4950      	ldr	r1, [pc, #320]	; (24740 <z_impl_k_poll+0x18c>)
   245fe:	f44f 7397 	mov.w	r3, #302	; 0x12e
   24602:	4a4c      	ldr	r2, [pc, #304]	; (24734 <z_impl_k_poll+0x180>)
   24604:	484c      	ldr	r0, [pc, #304]	; (24738 <z_impl_k_poll+0x184>)
   24606:	f002 f98c 	bl	26922 <assert_print>
   2460a:	484e      	ldr	r0, [pc, #312]	; (24744 <z_impl_k_poll+0x190>)
   2460c:	f002 f989 	bl	26922 <assert_print>
   24610:	f44f 7197 	mov.w	r1, #302	; 0x12e
   24614:	e7ee      	b.n	245f4 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   24616:	2900      	cmp	r1, #0
   24618:	da0c      	bge.n	24634 <z_impl_k_poll+0x80>
   2461a:	494b      	ldr	r1, [pc, #300]	; (24748 <z_impl_k_poll+0x194>)
   2461c:	f240 132f 	movw	r3, #303	; 0x12f
   24620:	4a44      	ldr	r2, [pc, #272]	; (24734 <z_impl_k_poll+0x180>)
   24622:	4845      	ldr	r0, [pc, #276]	; (24738 <z_impl_k_poll+0x184>)
   24624:	f002 f97d 	bl	26922 <assert_print>
   24628:	4848      	ldr	r0, [pc, #288]	; (2474c <z_impl_k_poll+0x198>)
   2462a:	f002 f97a 	bl	26922 <assert_print>
   2462e:	f240 112f 	movw	r1, #303	; 0x12f
   24632:	e7df      	b.n	245f4 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24634:	ea57 0306 	orrs.w	r3, r7, r6
   24638:	bf0c      	ite	eq
   2463a:	2301      	moveq	r3, #1
   2463c:	2300      	movne	r3, #0
   2463e:	f7ff fda5 	bl	2418c <register_events>
   24642:	4681      	mov	r9, r0
   24644:	f04f 0320 	mov.w	r3, #32
   24648:	f3ef 8a11 	mrs	sl, BASEPRI
   2464c:	f383 8812 	msr	BASEPRI_MAX, r3
   24650:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24654:	483e      	ldr	r0, [pc, #248]	; (24750 <z_impl_k_poll+0x19c>)
   24656:	f7fc fe83 	bl	21360 <z_spin_lock_valid>
   2465a:	b960      	cbnz	r0, 24676 <z_impl_k_poll+0xc2>
   2465c:	2394      	movs	r3, #148	; 0x94
   2465e:	4a3d      	ldr	r2, [pc, #244]	; (24754 <z_impl_k_poll+0x1a0>)
   24660:	493d      	ldr	r1, [pc, #244]	; (24758 <z_impl_k_poll+0x1a4>)
   24662:	4835      	ldr	r0, [pc, #212]	; (24738 <z_impl_k_poll+0x184>)
   24664:	f002 f95d 	bl	26922 <assert_print>
   24668:	4939      	ldr	r1, [pc, #228]	; (24750 <z_impl_k_poll+0x19c>)
   2466a:	483c      	ldr	r0, [pc, #240]	; (2475c <z_impl_k_poll+0x1a8>)
   2466c:	f002 f959 	bl	26922 <assert_print>
   24670:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24672:	4838      	ldr	r0, [pc, #224]	; (24754 <z_impl_k_poll+0x1a0>)
   24674:	e7bf      	b.n	245f6 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   24676:	4836      	ldr	r0, [pc, #216]	; (24750 <z_impl_k_poll+0x19c>)
   24678:	f7fc fe8e 	bl	21398 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2467c:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   24680:	b9e4      	cbnz	r4, 246bc <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   24682:	4628      	mov	r0, r5
   24684:	4652      	mov	r2, sl
   24686:	4649      	mov	r1, r9
   24688:	f7ff fe8e 	bl	243a8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2468c:	4830      	ldr	r0, [pc, #192]	; (24750 <z_impl_k_poll+0x19c>)
   2468e:	f7fc fe75 	bl	2137c <z_spin_unlock_valid>
   24692:	b958      	cbnz	r0, 246ac <z_impl_k_poll+0xf8>
   24694:	23c2      	movs	r3, #194	; 0xc2
   24696:	4a2f      	ldr	r2, [pc, #188]	; (24754 <z_impl_k_poll+0x1a0>)
   24698:	4931      	ldr	r1, [pc, #196]	; (24760 <z_impl_k_poll+0x1ac>)
   2469a:	4827      	ldr	r0, [pc, #156]	; (24738 <z_impl_k_poll+0x184>)
   2469c:	f002 f941 	bl	26922 <assert_print>
   246a0:	492b      	ldr	r1, [pc, #172]	; (24750 <z_impl_k_poll+0x19c>)
   246a2:	4830      	ldr	r0, [pc, #192]	; (24764 <z_impl_k_poll+0x1b0>)
   246a4:	f002 f93d 	bl	26922 <assert_print>
   246a8:	21c2      	movs	r1, #194	; 0xc2
   246aa:	e7e2      	b.n	24672 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   246ac:	f38a 8811 	msr	BASEPRI, sl
   246b0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   246b4:	4620      	mov	r0, r4
   246b6:	b003      	add	sp, #12
   246b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   246bc:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   246c0:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   246c4:	d10b      	bne.n	246de <z_impl_k_poll+0x12a>
   246c6:	4822      	ldr	r0, [pc, #136]	; (24750 <z_impl_k_poll+0x19c>)
   246c8:	f7fc fe58 	bl	2137c <z_spin_unlock_valid>
   246cc:	2800      	cmp	r0, #0
   246ce:	d0e1      	beq.n	24694 <z_impl_k_poll+0xe0>
   246d0:	f38a 8811 	msr	BASEPRI, sl
   246d4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   246d8:	f06f 040a 	mvn.w	r4, #10
   246dc:	e7ea      	b.n	246b4 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   246de:	4651      	mov	r1, sl
   246e0:	e9cd 7600 	strd	r7, r6, [sp]
   246e4:	4a20      	ldr	r2, [pc, #128]	; (24768 <z_impl_k_poll+0x1b4>)
   246e6:	481a      	ldr	r0, [pc, #104]	; (24750 <z_impl_k_poll+0x19c>)
   246e8:	f7fe fbd2 	bl	22e90 <z_pend_curr>
   246ec:	4604      	mov	r4, r0
	__asm__ volatile(
   246ee:	f04f 0320 	mov.w	r3, #32
   246f2:	f3ef 8611 	mrs	r6, BASEPRI
   246f6:	f383 8812 	msr	BASEPRI_MAX, r3
   246fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246fe:	4814      	ldr	r0, [pc, #80]	; (24750 <z_impl_k_poll+0x19c>)
   24700:	f7fc fe2e 	bl	21360 <z_spin_lock_valid>
   24704:	2800      	cmp	r0, #0
   24706:	d0a9      	beq.n	2465c <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   24708:	4811      	ldr	r0, [pc, #68]	; (24750 <z_impl_k_poll+0x19c>)
   2470a:	f7fc fe45 	bl	21398 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2470e:	4628      	mov	r0, r5
   24710:	4632      	mov	r2, r6
   24712:	4649      	mov	r1, r9
   24714:	f7ff fe48 	bl	243a8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24718:	480d      	ldr	r0, [pc, #52]	; (24750 <z_impl_k_poll+0x19c>)
   2471a:	f7fc fe2f 	bl	2137c <z_spin_unlock_valid>
   2471e:	2800      	cmp	r0, #0
   24720:	d0b8      	beq.n	24694 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   24722:	f386 8811 	msr	BASEPRI, r6
   24726:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2472a:	e7c3      	b.n	246b4 <z_impl_k_poll+0x100>
   2472c:	20021b58 	.word	0x20021b58
   24730:	00032daf 	.word	0x00032daf
   24734:	00033226 	.word	0x00033226
   24738:	0002d881 	.word	0x0002d881
   2473c:	00031891 	.word	0x00031891
   24740:	000333e5 	.word	0x000333e5
   24744:	000333fb 	.word	0x000333fb
   24748:	0003340a 	.word	0x0003340a
   2474c:	0003341a 	.word	0x0003341a
   24750:	20021bb0 	.word	0x20021bb0
   24754:	0002e6ba 	.word	0x0002e6ba
   24758:	0002e713 	.word	0x0002e713
   2475c:	0002e728 	.word	0x0002e728
   24760:	0002e6e7 	.word	0x0002e6e7
   24764:	0002e6fe 	.word	0x0002e6fe
   24768:	200088b8 	.word	0x200088b8

0002476c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2476c:	b570      	push	{r4, r5, r6, lr}
   2476e:	4604      	mov	r4, r0
   24770:	460d      	mov	r5, r1
	__asm__ volatile(
   24772:	f04f 0320 	mov.w	r3, #32
   24776:	f3ef 8611 	mrs	r6, BASEPRI
   2477a:	f383 8812 	msr	BASEPRI_MAX, r3
   2477e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24782:	4820      	ldr	r0, [pc, #128]	; (24804 <z_impl_k_poll_signal_raise+0x98>)
   24784:	f7fc fdec 	bl	21360 <z_spin_lock_valid>
   24788:	b968      	cbnz	r0, 247a6 <z_impl_k_poll_signal_raise+0x3a>
   2478a:	2394      	movs	r3, #148	; 0x94
   2478c:	4a1e      	ldr	r2, [pc, #120]	; (24808 <z_impl_k_poll_signal_raise+0x9c>)
   2478e:	491f      	ldr	r1, [pc, #124]	; (2480c <z_impl_k_poll_signal_raise+0xa0>)
   24790:	481f      	ldr	r0, [pc, #124]	; (24810 <z_impl_k_poll_signal_raise+0xa4>)
   24792:	f002 f8c6 	bl	26922 <assert_print>
   24796:	491b      	ldr	r1, [pc, #108]	; (24804 <z_impl_k_poll_signal_raise+0x98>)
   24798:	481e      	ldr	r0, [pc, #120]	; (24814 <z_impl_k_poll_signal_raise+0xa8>)
   2479a:	f002 f8c2 	bl	26922 <assert_print>
   2479e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247a0:	4819      	ldr	r0, [pc, #100]	; (24808 <z_impl_k_poll_signal_raise+0x9c>)
   247a2:	f002 f8b7 	bl	26914 <assert_post_action>
	z_spin_lock_set_owner(l);
   247a6:	4817      	ldr	r0, [pc, #92]	; (24804 <z_impl_k_poll_signal_raise+0x98>)
   247a8:	f7fc fdf6 	bl	21398 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   247ac:	2101      	movs	r1, #1
	return list->head == list;
   247ae:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   247b0:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   247b2:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   247b4:	60a1      	str	r1, [r4, #8]
   247b6:	d10f      	bne.n	247d8 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247b8:	4812      	ldr	r0, [pc, #72]	; (24804 <z_impl_k_poll_signal_raise+0x98>)
   247ba:	f7fc fddf 	bl	2137c <z_spin_unlock_valid>
   247be:	b9d8      	cbnz	r0, 247f8 <z_impl_k_poll_signal_raise+0x8c>
   247c0:	23c2      	movs	r3, #194	; 0xc2
   247c2:	4a11      	ldr	r2, [pc, #68]	; (24808 <z_impl_k_poll_signal_raise+0x9c>)
   247c4:	4914      	ldr	r1, [pc, #80]	; (24818 <z_impl_k_poll_signal_raise+0xac>)
   247c6:	4812      	ldr	r0, [pc, #72]	; (24810 <z_impl_k_poll_signal_raise+0xa4>)
   247c8:	f002 f8ab 	bl	26922 <assert_print>
   247cc:	490d      	ldr	r1, [pc, #52]	; (24804 <z_impl_k_poll_signal_raise+0x98>)
   247ce:	4813      	ldr	r0, [pc, #76]	; (2481c <z_impl_k_poll_signal_raise+0xb0>)
   247d0:	f002 f8a7 	bl	26922 <assert_print>
   247d4:	21c2      	movs	r1, #194	; 0xc2
   247d6:	e7e3      	b.n	247a0 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   247d8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   247dc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   247de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   247e0:	2300      	movs	r3, #0
	node->prev = NULL;
   247e2:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   247e6:	f007 f80a 	bl	2b7fe <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   247ea:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   247ec:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   247ee:	4805      	ldr	r0, [pc, #20]	; (24804 <z_impl_k_poll_signal_raise+0x98>)
   247f0:	f7fe f880 	bl	228f4 <z_reschedule>
	return rc;
}
   247f4:	4620      	mov	r0, r4
   247f6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   247f8:	f386 8811 	msr	BASEPRI, r6
   247fc:	f3bf 8f6f 	isb	sy
		return 0;
   24800:	2400      	movs	r4, #0
   24802:	e7f7      	b.n	247f4 <z_impl_k_poll_signal_raise+0x88>
   24804:	20021bb0 	.word	0x20021bb0
   24808:	0002e6ba 	.word	0x0002e6ba
   2480c:	0002e713 	.word	0x0002e713
   24810:	0002d881 	.word	0x0002d881
   24814:	0002e728 	.word	0x0002e728
   24818:	0002e6e7 	.word	0x0002e6e7
   2481c:	0002e6fe 	.word	0x0002e6fe

00024820 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24820:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   24822:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   24826:	4606      	mov	r6, r0
   24828:	460d      	mov	r5, r1
   2482a:	d220      	bcs.n	2486e <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2482c:	f04f 0800 	mov.w	r8, #0
   24830:	f04f 0900 	mov.w	r9, #0
   24834:	f041 0104 	orr.w	r1, r1, #4
   24838:	e9cd 8900 	strd	r8, r9, [sp]
   2483c:	f7fc fa8c 	bl	20d58 <k_heap_aligned_alloc>
	if (mem == NULL) {
   24840:	4604      	mov	r4, r0
   24842:	b1a0      	cbz	r0, 2486e <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   24844:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   24848:	b195      	cbz	r5, 24870 <z_heap_aligned_alloc+0x50>
   2484a:	1e6b      	subs	r3, r5, #1
   2484c:	421c      	tst	r4, r3
   2484e:	d00f      	beq.n	24870 <z_heap_aligned_alloc+0x50>
   24850:	2325      	movs	r3, #37	; 0x25
   24852:	4a09      	ldr	r2, [pc, #36]	; (24878 <z_heap_aligned_alloc+0x58>)
   24854:	4909      	ldr	r1, [pc, #36]	; (2487c <z_heap_aligned_alloc+0x5c>)
   24856:	480a      	ldr	r0, [pc, #40]	; (24880 <z_heap_aligned_alloc+0x60>)
   24858:	f002 f863 	bl	26922 <assert_print>
   2485c:	4621      	mov	r1, r4
   2485e:	4809      	ldr	r0, [pc, #36]	; (24884 <z_heap_aligned_alloc+0x64>)
   24860:	462a      	mov	r2, r5
   24862:	f002 f85e 	bl	26922 <assert_print>
   24866:	2125      	movs	r1, #37	; 0x25
   24868:	4803      	ldr	r0, [pc, #12]	; (24878 <z_heap_aligned_alloc+0x58>)
   2486a:	f002 f853 	bl	26914 <assert_post_action>
		return NULL;
   2486e:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   24870:	4620      	mov	r0, r4
   24872:	b002      	add	sp, #8
   24874:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   24878:	00033427 	.word	0x00033427
   2487c:	0003344b 	.word	0x0003344b
   24880:	0002d881 	.word	0x0002d881
   24884:	0003347d 	.word	0x0003347d

00024888 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   24888:	2803      	cmp	r0, #3
{
   2488a:	460a      	mov	r2, r1
   2488c:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   2488e:	d901      	bls.n	24894 <k_aligned_alloc+0xc>
   24890:	0783      	lsls	r3, r0, #30
   24892:	d00c      	beq.n	248ae <k_aligned_alloc+0x26>
   24894:	4910      	ldr	r1, [pc, #64]	; (248d8 <k_aligned_alloc+0x50>)
   24896:	2342      	movs	r3, #66	; 0x42
   24898:	4a10      	ldr	r2, [pc, #64]	; (248dc <k_aligned_alloc+0x54>)
   2489a:	4811      	ldr	r0, [pc, #68]	; (248e0 <k_aligned_alloc+0x58>)
   2489c:	f002 f841 	bl	26922 <assert_print>
   248a0:	4810      	ldr	r0, [pc, #64]	; (248e4 <k_aligned_alloc+0x5c>)
   248a2:	f002 f83e 	bl	26922 <assert_print>
   248a6:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   248a8:	480c      	ldr	r0, [pc, #48]	; (248dc <k_aligned_alloc+0x54>)
   248aa:	f002 f833 	bl	26914 <assert_post_action>
   248ae:	1e43      	subs	r3, r0, #1
   248b0:	4203      	tst	r3, r0
   248b2:	d00a      	beq.n	248ca <k_aligned_alloc+0x42>
   248b4:	490c      	ldr	r1, [pc, #48]	; (248e8 <k_aligned_alloc+0x60>)
   248b6:	2346      	movs	r3, #70	; 0x46
   248b8:	4a08      	ldr	r2, [pc, #32]	; (248dc <k_aligned_alloc+0x54>)
   248ba:	4809      	ldr	r0, [pc, #36]	; (248e0 <k_aligned_alloc+0x58>)
   248bc:	f002 f831 	bl	26922 <assert_print>
   248c0:	480a      	ldr	r0, [pc, #40]	; (248ec <k_aligned_alloc+0x64>)
   248c2:	f002 f82e 	bl	26922 <assert_print>
   248c6:	2146      	movs	r1, #70	; 0x46
   248c8:	e7ee      	b.n	248a8 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   248ca:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   248cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   248d0:	4807      	ldr	r0, [pc, #28]	; (248f0 <k_aligned_alloc+0x68>)
   248d2:	f7ff bfa5 	b.w	24820 <z_heap_aligned_alloc>
   248d6:	bf00      	nop
   248d8:	000334a5 	.word	0x000334a5
   248dc:	00033427 	.word	0x00033427
   248e0:	0002d881 	.word	0x0002d881
   248e4:	000334e2 	.word	0x000334e2
   248e8:	0002e524 	.word	0x0002e524
   248ec:	0002e53f 	.word	0x0002e53f
   248f0:	20008c24 	.word	0x20008c24

000248f4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   248f4:	4b01      	ldr	r3, [pc, #4]	; (248fc <k_thread_system_pool_assign+0x8>)
   248f6:	6743      	str	r3, [r0, #116]	; 0x74
}
   248f8:	4770      	bx	lr
   248fa:	bf00      	nop
   248fc:	20008c24 	.word	0x20008c24

00024900 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24900:	b538      	push	{r3, r4, r5, lr}
   24902:	4604      	mov	r4, r0
   24904:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24906:	f006 fdfe 	bl	2b506 <k_is_in_isr>
   2490a:	b920      	cbnz	r0, 24916 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2490c:	4b06      	ldr	r3, [pc, #24]	; (24928 <z_thread_aligned_alloc+0x28>)
   2490e:	689b      	ldr	r3, [r3, #8]
   24910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24912:	b90b      	cbnz	r3, 24918 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   24914:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   24916:	4b05      	ldr	r3, [pc, #20]	; (2492c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   24918:	462a      	mov	r2, r5
   2491a:	4621      	mov	r1, r4
   2491c:	4618      	mov	r0, r3
}
   2491e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24922:	f7ff bf7d 	b.w	24820 <z_heap_aligned_alloc>
   24926:	bf00      	nop
   24928:	20021b58 	.word	0x20021b58
   2492c:	20008c24 	.word	0x20008c24

00024930 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   24930:	4801      	ldr	r0, [pc, #4]	; (24938 <boot_banner+0x8>)
   24932:	f001 be34 	b.w	2659e <printk>
   24936:	bf00      	nop
   24938:	0003350f 	.word	0x0003350f

0002493c <malloc>:
   2493c:	4b02      	ldr	r3, [pc, #8]	; (24948 <malloc+0xc>)
   2493e:	4601      	mov	r1, r0
   24940:	6818      	ldr	r0, [r3, #0]
   24942:	f000 b84d 	b.w	249e0 <_malloc_r>
   24946:	bf00      	nop
   24948:	200088c0 	.word	0x200088c0

0002494c <_free_r>:
   2494c:	b538      	push	{r3, r4, r5, lr}
   2494e:	4605      	mov	r5, r0
   24950:	2900      	cmp	r1, #0
   24952:	d041      	beq.n	249d8 <_free_r+0x8c>
   24954:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24958:	1f0c      	subs	r4, r1, #4
   2495a:	2b00      	cmp	r3, #0
   2495c:	bfb8      	it	lt
   2495e:	18e4      	addlt	r4, r4, r3
   24960:	f000 fd94 	bl	2548c <__malloc_lock>
   24964:	4a1d      	ldr	r2, [pc, #116]	; (249dc <_free_r+0x90>)
   24966:	6813      	ldr	r3, [r2, #0]
   24968:	b933      	cbnz	r3, 24978 <_free_r+0x2c>
   2496a:	6063      	str	r3, [r4, #4]
   2496c:	6014      	str	r4, [r2, #0]
   2496e:	4628      	mov	r0, r5
   24970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24974:	f000 bd90 	b.w	25498 <__malloc_unlock>
   24978:	42a3      	cmp	r3, r4
   2497a:	d908      	bls.n	2498e <_free_r+0x42>
   2497c:	6820      	ldr	r0, [r4, #0]
   2497e:	1821      	adds	r1, r4, r0
   24980:	428b      	cmp	r3, r1
   24982:	bf01      	itttt	eq
   24984:	6819      	ldreq	r1, [r3, #0]
   24986:	685b      	ldreq	r3, [r3, #4]
   24988:	1809      	addeq	r1, r1, r0
   2498a:	6021      	streq	r1, [r4, #0]
   2498c:	e7ed      	b.n	2496a <_free_r+0x1e>
   2498e:	461a      	mov	r2, r3
   24990:	685b      	ldr	r3, [r3, #4]
   24992:	b10b      	cbz	r3, 24998 <_free_r+0x4c>
   24994:	42a3      	cmp	r3, r4
   24996:	d9fa      	bls.n	2498e <_free_r+0x42>
   24998:	6811      	ldr	r1, [r2, #0]
   2499a:	1850      	adds	r0, r2, r1
   2499c:	42a0      	cmp	r0, r4
   2499e:	d10b      	bne.n	249b8 <_free_r+0x6c>
   249a0:	6820      	ldr	r0, [r4, #0]
   249a2:	4401      	add	r1, r0
   249a4:	1850      	adds	r0, r2, r1
   249a6:	6011      	str	r1, [r2, #0]
   249a8:	4283      	cmp	r3, r0
   249aa:	d1e0      	bne.n	2496e <_free_r+0x22>
   249ac:	6818      	ldr	r0, [r3, #0]
   249ae:	685b      	ldr	r3, [r3, #4]
   249b0:	4408      	add	r0, r1
   249b2:	6053      	str	r3, [r2, #4]
   249b4:	6010      	str	r0, [r2, #0]
   249b6:	e7da      	b.n	2496e <_free_r+0x22>
   249b8:	d902      	bls.n	249c0 <_free_r+0x74>
   249ba:	230c      	movs	r3, #12
   249bc:	602b      	str	r3, [r5, #0]
   249be:	e7d6      	b.n	2496e <_free_r+0x22>
   249c0:	6820      	ldr	r0, [r4, #0]
   249c2:	1821      	adds	r1, r4, r0
   249c4:	428b      	cmp	r3, r1
   249c6:	bf02      	ittt	eq
   249c8:	6819      	ldreq	r1, [r3, #0]
   249ca:	685b      	ldreq	r3, [r3, #4]
   249cc:	1809      	addeq	r1, r1, r0
   249ce:	6063      	str	r3, [r4, #4]
   249d0:	bf08      	it	eq
   249d2:	6021      	streq	r1, [r4, #0]
   249d4:	6054      	str	r4, [r2, #4]
   249d6:	e7ca      	b.n	2496e <_free_r+0x22>
   249d8:	bd38      	pop	{r3, r4, r5, pc}
   249da:	bf00      	nop
   249dc:	20021bb8 	.word	0x20021bb8

000249e0 <_malloc_r>:
   249e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249e2:	1ccd      	adds	r5, r1, #3
   249e4:	4606      	mov	r6, r0
   249e6:	f025 0503 	bic.w	r5, r5, #3
   249ea:	3508      	adds	r5, #8
   249ec:	2d0c      	cmp	r5, #12
   249ee:	bf38      	it	cc
   249f0:	250c      	movcc	r5, #12
   249f2:	2d00      	cmp	r5, #0
   249f4:	db01      	blt.n	249fa <_malloc_r+0x1a>
   249f6:	42a9      	cmp	r1, r5
   249f8:	d903      	bls.n	24a02 <_malloc_r+0x22>
   249fa:	230c      	movs	r3, #12
   249fc:	6033      	str	r3, [r6, #0]
   249fe:	2000      	movs	r0, #0
   24a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24a02:	f000 fd43 	bl	2548c <__malloc_lock>
   24a06:	4921      	ldr	r1, [pc, #132]	; (24a8c <_malloc_r+0xac>)
   24a08:	680a      	ldr	r2, [r1, #0]
   24a0a:	4614      	mov	r4, r2
   24a0c:	b99c      	cbnz	r4, 24a36 <_malloc_r+0x56>
   24a0e:	4f20      	ldr	r7, [pc, #128]	; (24a90 <_malloc_r+0xb0>)
   24a10:	683b      	ldr	r3, [r7, #0]
   24a12:	b923      	cbnz	r3, 24a1e <_malloc_r+0x3e>
   24a14:	4621      	mov	r1, r4
   24a16:	4630      	mov	r0, r6
   24a18:	f000 fbb8 	bl	2518c <_sbrk_r>
   24a1c:	6038      	str	r0, [r7, #0]
   24a1e:	4629      	mov	r1, r5
   24a20:	4630      	mov	r0, r6
   24a22:	f000 fbb3 	bl	2518c <_sbrk_r>
   24a26:	1c43      	adds	r3, r0, #1
   24a28:	d123      	bne.n	24a72 <_malloc_r+0x92>
   24a2a:	230c      	movs	r3, #12
   24a2c:	4630      	mov	r0, r6
   24a2e:	6033      	str	r3, [r6, #0]
   24a30:	f000 fd32 	bl	25498 <__malloc_unlock>
   24a34:	e7e3      	b.n	249fe <_malloc_r+0x1e>
   24a36:	6823      	ldr	r3, [r4, #0]
   24a38:	1b5b      	subs	r3, r3, r5
   24a3a:	d417      	bmi.n	24a6c <_malloc_r+0x8c>
   24a3c:	2b0b      	cmp	r3, #11
   24a3e:	d903      	bls.n	24a48 <_malloc_r+0x68>
   24a40:	6023      	str	r3, [r4, #0]
   24a42:	441c      	add	r4, r3
   24a44:	6025      	str	r5, [r4, #0]
   24a46:	e004      	b.n	24a52 <_malloc_r+0x72>
   24a48:	6863      	ldr	r3, [r4, #4]
   24a4a:	42a2      	cmp	r2, r4
   24a4c:	bf0c      	ite	eq
   24a4e:	600b      	streq	r3, [r1, #0]
   24a50:	6053      	strne	r3, [r2, #4]
   24a52:	4630      	mov	r0, r6
   24a54:	f000 fd20 	bl	25498 <__malloc_unlock>
   24a58:	f104 000b 	add.w	r0, r4, #11
   24a5c:	1d23      	adds	r3, r4, #4
   24a5e:	f020 0007 	bic.w	r0, r0, #7
   24a62:	1ac2      	subs	r2, r0, r3
   24a64:	bf1c      	itt	ne
   24a66:	1a1b      	subne	r3, r3, r0
   24a68:	50a3      	strne	r3, [r4, r2]
   24a6a:	e7c9      	b.n	24a00 <_malloc_r+0x20>
   24a6c:	4622      	mov	r2, r4
   24a6e:	6864      	ldr	r4, [r4, #4]
   24a70:	e7cc      	b.n	24a0c <_malloc_r+0x2c>
   24a72:	1cc4      	adds	r4, r0, #3
   24a74:	f024 0403 	bic.w	r4, r4, #3
   24a78:	42a0      	cmp	r0, r4
   24a7a:	d0e3      	beq.n	24a44 <_malloc_r+0x64>
   24a7c:	1a21      	subs	r1, r4, r0
   24a7e:	4630      	mov	r0, r6
   24a80:	f000 fb84 	bl	2518c <_sbrk_r>
   24a84:	3001      	adds	r0, #1
   24a86:	d1dd      	bne.n	24a44 <_malloc_r+0x64>
   24a88:	e7cf      	b.n	24a2a <_malloc_r+0x4a>
   24a8a:	bf00      	nop
   24a8c:	20021bb8 	.word	0x20021bb8
   24a90:	20021bb4 	.word	0x20021bb4

00024a94 <_printf_float>:
   24a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a98:	b091      	sub	sp, #68	; 0x44
   24a9a:	460c      	mov	r4, r1
   24a9c:	4616      	mov	r6, r2
   24a9e:	461f      	mov	r7, r3
   24aa0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   24aa4:	4605      	mov	r5, r0
   24aa6:	f000 fced 	bl	25484 <_localeconv_r>
   24aaa:	6803      	ldr	r3, [r0, #0]
   24aac:	4618      	mov	r0, r3
   24aae:	9308      	str	r3, [sp, #32]
   24ab0:	f7e4 fc56 	bl	9360 <strlen>
   24ab4:	2300      	movs	r3, #0
   24ab6:	9009      	str	r0, [sp, #36]	; 0x24
   24ab8:	930e      	str	r3, [sp, #56]	; 0x38
   24aba:	f8d8 3000 	ldr.w	r3, [r8]
   24abe:	f894 a018 	ldrb.w	sl, [r4, #24]
   24ac2:	3307      	adds	r3, #7
   24ac4:	f8d4 b000 	ldr.w	fp, [r4]
   24ac8:	f023 0307 	bic.w	r3, r3, #7
   24acc:	f103 0208 	add.w	r2, r3, #8
   24ad0:	f8c8 2000 	str.w	r2, [r8]
   24ad4:	f04f 32ff 	mov.w	r2, #4294967295
   24ad8:	e9d3 8900 	ldrd	r8, r9, [r3]
   24adc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   24ae0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   24ae4:	930b      	str	r3, [sp, #44]	; 0x2c
   24ae6:	4b9d      	ldr	r3, [pc, #628]	; (24d5c <_printf_float+0x2c8>)
   24ae8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   24aec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   24af0:	f7e4 faa0 	bl	9034 <__aeabi_dcmpun>
   24af4:	bb70      	cbnz	r0, 24b54 <_printf_float+0xc0>
   24af6:	f04f 32ff 	mov.w	r2, #4294967295
   24afa:	4b98      	ldr	r3, [pc, #608]	; (24d5c <_printf_float+0x2c8>)
   24afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   24b00:	f7e3 ff62 	bl	89c8 <__aeabi_dcmple>
   24b04:	bb30      	cbnz	r0, 24b54 <_printf_float+0xc0>
   24b06:	2200      	movs	r2, #0
   24b08:	2300      	movs	r3, #0
   24b0a:	4640      	mov	r0, r8
   24b0c:	4649      	mov	r1, r9
   24b0e:	f7e3 ff51 	bl	89b4 <__aeabi_dcmplt>
   24b12:	b110      	cbz	r0, 24b1a <_printf_float+0x86>
   24b14:	232d      	movs	r3, #45	; 0x2d
   24b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   24b1a:	4a91      	ldr	r2, [pc, #580]	; (24d60 <_printf_float+0x2cc>)
   24b1c:	4b91      	ldr	r3, [pc, #580]	; (24d64 <_printf_float+0x2d0>)
   24b1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   24b22:	bf94      	ite	ls
   24b24:	4690      	movls	r8, r2
   24b26:	4698      	movhi	r8, r3
   24b28:	2303      	movs	r3, #3
   24b2a:	f04f 0900 	mov.w	r9, #0
   24b2e:	6123      	str	r3, [r4, #16]
   24b30:	f02b 0304 	bic.w	r3, fp, #4
   24b34:	6023      	str	r3, [r4, #0]
   24b36:	4633      	mov	r3, r6
   24b38:	aa0f      	add	r2, sp, #60	; 0x3c
   24b3a:	4621      	mov	r1, r4
   24b3c:	4628      	mov	r0, r5
   24b3e:	9700      	str	r7, [sp, #0]
   24b40:	f006 ffe4 	bl	2bb0c <_printf_common>
   24b44:	3001      	adds	r0, #1
   24b46:	f040 8099 	bne.w	24c7c <_printf_float+0x1e8>
   24b4a:	f04f 30ff 	mov.w	r0, #4294967295
   24b4e:	b011      	add	sp, #68	; 0x44
   24b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b54:	4642      	mov	r2, r8
   24b56:	464b      	mov	r3, r9
   24b58:	4640      	mov	r0, r8
   24b5a:	4649      	mov	r1, r9
   24b5c:	f7e4 fa6a 	bl	9034 <__aeabi_dcmpun>
   24b60:	b140      	cbz	r0, 24b74 <_printf_float+0xe0>
   24b62:	464b      	mov	r3, r9
   24b64:	4a80      	ldr	r2, [pc, #512]	; (24d68 <_printf_float+0x2d4>)
   24b66:	2b00      	cmp	r3, #0
   24b68:	bfbc      	itt	lt
   24b6a:	232d      	movlt	r3, #45	; 0x2d
   24b6c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   24b70:	4b7e      	ldr	r3, [pc, #504]	; (24d6c <_printf_float+0x2d8>)
   24b72:	e7d4      	b.n	24b1e <_printf_float+0x8a>
   24b74:	6863      	ldr	r3, [r4, #4]
   24b76:	1c5a      	adds	r2, r3, #1
   24b78:	d129      	bne.n	24bce <_printf_float+0x13a>
   24b7a:	2306      	movs	r3, #6
   24b7c:	6063      	str	r3, [r4, #4]
   24b7e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   24b82:	2200      	movs	r2, #0
   24b84:	4628      	mov	r0, r5
   24b86:	6023      	str	r3, [r4, #0]
   24b88:	9206      	str	r2, [sp, #24]
   24b8a:	aa0e      	add	r2, sp, #56	; 0x38
   24b8c:	e9cd a204 	strd	sl, r2, [sp, #16]
   24b90:	aa0d      	add	r2, sp, #52	; 0x34
   24b92:	9203      	str	r2, [sp, #12]
   24b94:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   24b98:	e9cd 3201 	strd	r3, r2, [sp, #4]
   24b9c:	6863      	ldr	r3, [r4, #4]
   24b9e:	4642      	mov	r2, r8
   24ba0:	9300      	str	r3, [sp, #0]
   24ba2:	464b      	mov	r3, r9
   24ba4:	f006 ff12 	bl	2b9cc <__cvt>
   24ba8:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   24bac:	4680      	mov	r8, r0
   24bae:	990d      	ldr	r1, [sp, #52]	; 0x34
   24bb0:	d115      	bne.n	24bde <_printf_float+0x14a>
   24bb2:	1ccb      	adds	r3, r1, #3
   24bb4:	db3b      	blt.n	24c2e <_printf_float+0x19a>
   24bb6:	6863      	ldr	r3, [r4, #4]
   24bb8:	4299      	cmp	r1, r3
   24bba:	dc38      	bgt.n	24c2e <_printf_float+0x19a>
   24bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24bbe:	4299      	cmp	r1, r3
   24bc0:	db55      	blt.n	24c6e <_printf_float+0x1da>
   24bc2:	6823      	ldr	r3, [r4, #0]
   24bc4:	6121      	str	r1, [r4, #16]
   24bc6:	07d8      	lsls	r0, r3, #31
   24bc8:	d545      	bpl.n	24c56 <_printf_float+0x1c2>
   24bca:	1c4b      	adds	r3, r1, #1
   24bcc:	e042      	b.n	24c54 <_printf_float+0x1c0>
   24bce:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   24bd2:	2a47      	cmp	r2, #71	; 0x47
   24bd4:	d1d3      	bne.n	24b7e <_printf_float+0xea>
   24bd6:	2b00      	cmp	r3, #0
   24bd8:	d1d1      	bne.n	24b7e <_printf_float+0xea>
   24bda:	2301      	movs	r3, #1
   24bdc:	e7ce      	b.n	24b7c <_printf_float+0xe8>
   24bde:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   24be2:	d107      	bne.n	24bf4 <_printf_float+0x160>
   24be4:	1cc8      	adds	r0, r1, #3
   24be6:	db25      	blt.n	24c34 <_printf_float+0x1a0>
   24be8:	6863      	ldr	r3, [r4, #4]
   24bea:	428b      	cmp	r3, r1
   24bec:	db22      	blt.n	24c34 <_printf_float+0x1a0>
   24bee:	f04f 0a67 	mov.w	sl, #103	; 0x67
   24bf2:	e7e3      	b.n	24bbc <_printf_float+0x128>
   24bf4:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   24bf8:	d81f      	bhi.n	24c3a <_printf_float+0x1a6>
   24bfa:	3901      	subs	r1, #1
   24bfc:	4652      	mov	r2, sl
   24bfe:	f104 0050 	add.w	r0, r4, #80	; 0x50
   24c02:	910d      	str	r1, [sp, #52]	; 0x34
   24c04:	f006 ff49 	bl	2ba9a <__exponent>
   24c08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24c0a:	4681      	mov	r9, r0
   24c0c:	1813      	adds	r3, r2, r0
   24c0e:	2a01      	cmp	r2, #1
   24c10:	6123      	str	r3, [r4, #16]
   24c12:	dc02      	bgt.n	24c1a <_printf_float+0x186>
   24c14:	6822      	ldr	r2, [r4, #0]
   24c16:	07d2      	lsls	r2, r2, #31
   24c18:	d501      	bpl.n	24c1e <_printf_float+0x18a>
   24c1a:	3301      	adds	r3, #1
   24c1c:	6123      	str	r3, [r4, #16]
   24c1e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   24c22:	2b00      	cmp	r3, #0
   24c24:	d087      	beq.n	24b36 <_printf_float+0xa2>
   24c26:	232d      	movs	r3, #45	; 0x2d
   24c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   24c2c:	e783      	b.n	24b36 <_printf_float+0xa2>
   24c2e:	f04f 0a65 	mov.w	sl, #101	; 0x65
   24c32:	e7e2      	b.n	24bfa <_printf_float+0x166>
   24c34:	f04f 0a45 	mov.w	sl, #69	; 0x45
   24c38:	e7df      	b.n	24bfa <_printf_float+0x166>
   24c3a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   24c3e:	d1bd      	bne.n	24bbc <_printf_float+0x128>
   24c40:	2900      	cmp	r1, #0
   24c42:	6863      	ldr	r3, [r4, #4]
   24c44:	dd0b      	ble.n	24c5e <_printf_float+0x1ca>
   24c46:	6121      	str	r1, [r4, #16]
   24c48:	b913      	cbnz	r3, 24c50 <_printf_float+0x1bc>
   24c4a:	6822      	ldr	r2, [r4, #0]
   24c4c:	07d0      	lsls	r0, r2, #31
   24c4e:	d502      	bpl.n	24c56 <_printf_float+0x1c2>
   24c50:	3301      	adds	r3, #1
   24c52:	440b      	add	r3, r1
   24c54:	6123      	str	r3, [r4, #16]
   24c56:	f04f 0900 	mov.w	r9, #0
   24c5a:	65a1      	str	r1, [r4, #88]	; 0x58
   24c5c:	e7df      	b.n	24c1e <_printf_float+0x18a>
   24c5e:	b913      	cbnz	r3, 24c66 <_printf_float+0x1d2>
   24c60:	6822      	ldr	r2, [r4, #0]
   24c62:	07d2      	lsls	r2, r2, #31
   24c64:	d501      	bpl.n	24c6a <_printf_float+0x1d6>
   24c66:	3302      	adds	r3, #2
   24c68:	e7f4      	b.n	24c54 <_printf_float+0x1c0>
   24c6a:	2301      	movs	r3, #1
   24c6c:	e7f2      	b.n	24c54 <_printf_float+0x1c0>
   24c6e:	2900      	cmp	r1, #0
   24c70:	bfd4      	ite	le
   24c72:	f1c1 0202 	rsble	r2, r1, #2
   24c76:	2201      	movgt	r2, #1
   24c78:	4413      	add	r3, r2
   24c7a:	e7eb      	b.n	24c54 <_printf_float+0x1c0>
   24c7c:	6823      	ldr	r3, [r4, #0]
   24c7e:	055a      	lsls	r2, r3, #21
   24c80:	d407      	bmi.n	24c92 <_printf_float+0x1fe>
   24c82:	6923      	ldr	r3, [r4, #16]
   24c84:	4642      	mov	r2, r8
   24c86:	4631      	mov	r1, r6
   24c88:	4628      	mov	r0, r5
   24c8a:	47b8      	blx	r7
   24c8c:	3001      	adds	r0, #1
   24c8e:	d12b      	bne.n	24ce8 <_printf_float+0x254>
   24c90:	e75b      	b.n	24b4a <_printf_float+0xb6>
   24c92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   24c96:	f240 80dc 	bls.w	24e52 <_printf_float+0x3be>
   24c9a:	2200      	movs	r2, #0
   24c9c:	2300      	movs	r3, #0
   24c9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   24ca2:	f7e3 fe7d 	bl	89a0 <__aeabi_dcmpeq>
   24ca6:	2800      	cmp	r0, #0
   24ca8:	d033      	beq.n	24d12 <_printf_float+0x27e>
   24caa:	2301      	movs	r3, #1
   24cac:	4a30      	ldr	r2, [pc, #192]	; (24d70 <_printf_float+0x2dc>)
   24cae:	4631      	mov	r1, r6
   24cb0:	4628      	mov	r0, r5
   24cb2:	47b8      	blx	r7
   24cb4:	3001      	adds	r0, #1
   24cb6:	f43f af48 	beq.w	24b4a <_printf_float+0xb6>
   24cba:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   24cbe:	4543      	cmp	r3, r8
   24cc0:	db02      	blt.n	24cc8 <_printf_float+0x234>
   24cc2:	6823      	ldr	r3, [r4, #0]
   24cc4:	07d8      	lsls	r0, r3, #31
   24cc6:	d50f      	bpl.n	24ce8 <_printf_float+0x254>
   24cc8:	4631      	mov	r1, r6
   24cca:	4628      	mov	r0, r5
   24ccc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24cd0:	47b8      	blx	r7
   24cd2:	3001      	adds	r0, #1
   24cd4:	f43f af39 	beq.w	24b4a <_printf_float+0xb6>
   24cd8:	f04f 0900 	mov.w	r9, #0
   24cdc:	f108 38ff 	add.w	r8, r8, #4294967295
   24ce0:	f104 0a1a 	add.w	sl, r4, #26
   24ce4:	45c8      	cmp	r8, r9
   24ce6:	dc09      	bgt.n	24cfc <_printf_float+0x268>
   24ce8:	6823      	ldr	r3, [r4, #0]
   24cea:	079b      	lsls	r3, r3, #30
   24cec:	f100 8102 	bmi.w	24ef4 <_printf_float+0x460>
   24cf0:	68e0      	ldr	r0, [r4, #12]
   24cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24cf4:	4298      	cmp	r0, r3
   24cf6:	bfb8      	it	lt
   24cf8:	4618      	movlt	r0, r3
   24cfa:	e728      	b.n	24b4e <_printf_float+0xba>
   24cfc:	2301      	movs	r3, #1
   24cfe:	4652      	mov	r2, sl
   24d00:	4631      	mov	r1, r6
   24d02:	4628      	mov	r0, r5
   24d04:	47b8      	blx	r7
   24d06:	3001      	adds	r0, #1
   24d08:	f43f af1f 	beq.w	24b4a <_printf_float+0xb6>
   24d0c:	f109 0901 	add.w	r9, r9, #1
   24d10:	e7e8      	b.n	24ce4 <_printf_float+0x250>
   24d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24d14:	2b00      	cmp	r3, #0
   24d16:	dc38      	bgt.n	24d8a <_printf_float+0x2f6>
   24d18:	2301      	movs	r3, #1
   24d1a:	4a15      	ldr	r2, [pc, #84]	; (24d70 <_printf_float+0x2dc>)
   24d1c:	4631      	mov	r1, r6
   24d1e:	4628      	mov	r0, r5
   24d20:	47b8      	blx	r7
   24d22:	3001      	adds	r0, #1
   24d24:	f43f af11 	beq.w	24b4a <_printf_float+0xb6>
   24d28:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   24d2c:	ea59 0303 	orrs.w	r3, r9, r3
   24d30:	d102      	bne.n	24d38 <_printf_float+0x2a4>
   24d32:	6823      	ldr	r3, [r4, #0]
   24d34:	07d9      	lsls	r1, r3, #31
   24d36:	d5d7      	bpl.n	24ce8 <_printf_float+0x254>
   24d38:	4631      	mov	r1, r6
   24d3a:	4628      	mov	r0, r5
   24d3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24d40:	47b8      	blx	r7
   24d42:	3001      	adds	r0, #1
   24d44:	f43f af01 	beq.w	24b4a <_printf_float+0xb6>
   24d48:	f04f 0a00 	mov.w	sl, #0
   24d4c:	f104 0b1a 	add.w	fp, r4, #26
   24d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24d52:	425b      	negs	r3, r3
   24d54:	4553      	cmp	r3, sl
   24d56:	dc0d      	bgt.n	24d74 <_printf_float+0x2e0>
   24d58:	464b      	mov	r3, r9
   24d5a:	e793      	b.n	24c84 <_printf_float+0x1f0>
   24d5c:	7fefffff 	.word	0x7fefffff
   24d60:	00033642 	.word	0x00033642
   24d64:	0002ebbd 	.word	0x0002ebbd
   24d68:	00033646 	.word	0x00033646
   24d6c:	0003364a 	.word	0x0003364a
   24d70:	000334e0 	.word	0x000334e0
   24d74:	2301      	movs	r3, #1
   24d76:	465a      	mov	r2, fp
   24d78:	4631      	mov	r1, r6
   24d7a:	4628      	mov	r0, r5
   24d7c:	47b8      	blx	r7
   24d7e:	3001      	adds	r0, #1
   24d80:	f43f aee3 	beq.w	24b4a <_printf_float+0xb6>
   24d84:	f10a 0a01 	add.w	sl, sl, #1
   24d88:	e7e2      	b.n	24d50 <_printf_float+0x2bc>
   24d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   24d8c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   24d90:	4553      	cmp	r3, sl
   24d92:	bfa8      	it	ge
   24d94:	4653      	movge	r3, sl
   24d96:	2b00      	cmp	r3, #0
   24d98:	4699      	mov	r9, r3
   24d9a:	dc36      	bgt.n	24e0a <_printf_float+0x376>
   24d9c:	f04f 0b00 	mov.w	fp, #0
   24da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   24da4:	f104 021a 	add.w	r2, r4, #26
   24da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   24daa:	930a      	str	r3, [sp, #40]	; 0x28
   24dac:	eba3 0309 	sub.w	r3, r3, r9
   24db0:	455b      	cmp	r3, fp
   24db2:	dc31      	bgt.n	24e18 <_printf_float+0x384>
   24db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24db6:	459a      	cmp	sl, r3
   24db8:	dc3a      	bgt.n	24e30 <_printf_float+0x39c>
   24dba:	6823      	ldr	r3, [r4, #0]
   24dbc:	07da      	lsls	r2, r3, #31
   24dbe:	d437      	bmi.n	24e30 <_printf_float+0x39c>
   24dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24dc2:	ebaa 0903 	sub.w	r9, sl, r3
   24dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24dc8:	ebaa 0303 	sub.w	r3, sl, r3
   24dcc:	4599      	cmp	r9, r3
   24dce:	bfa8      	it	ge
   24dd0:	4699      	movge	r9, r3
   24dd2:	f1b9 0f00 	cmp.w	r9, #0
   24dd6:	dc33      	bgt.n	24e40 <_printf_float+0x3ac>
   24dd8:	f04f 0800 	mov.w	r8, #0
   24ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   24de0:	f104 0b1a 	add.w	fp, r4, #26
   24de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24de6:	ebaa 0303 	sub.w	r3, sl, r3
   24dea:	eba3 0309 	sub.w	r3, r3, r9
   24dee:	4543      	cmp	r3, r8
   24df0:	f77f af7a 	ble.w	24ce8 <_printf_float+0x254>
   24df4:	2301      	movs	r3, #1
   24df6:	465a      	mov	r2, fp
   24df8:	4631      	mov	r1, r6
   24dfa:	4628      	mov	r0, r5
   24dfc:	47b8      	blx	r7
   24dfe:	3001      	adds	r0, #1
   24e00:	f43f aea3 	beq.w	24b4a <_printf_float+0xb6>
   24e04:	f108 0801 	add.w	r8, r8, #1
   24e08:	e7ec      	b.n	24de4 <_printf_float+0x350>
   24e0a:	4642      	mov	r2, r8
   24e0c:	4631      	mov	r1, r6
   24e0e:	4628      	mov	r0, r5
   24e10:	47b8      	blx	r7
   24e12:	3001      	adds	r0, #1
   24e14:	d1c2      	bne.n	24d9c <_printf_float+0x308>
   24e16:	e698      	b.n	24b4a <_printf_float+0xb6>
   24e18:	2301      	movs	r3, #1
   24e1a:	4631      	mov	r1, r6
   24e1c:	4628      	mov	r0, r5
   24e1e:	920a      	str	r2, [sp, #40]	; 0x28
   24e20:	47b8      	blx	r7
   24e22:	3001      	adds	r0, #1
   24e24:	f43f ae91 	beq.w	24b4a <_printf_float+0xb6>
   24e28:	f10b 0b01 	add.w	fp, fp, #1
   24e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24e2e:	e7bb      	b.n	24da8 <_printf_float+0x314>
   24e30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24e34:	4631      	mov	r1, r6
   24e36:	4628      	mov	r0, r5
   24e38:	47b8      	blx	r7
   24e3a:	3001      	adds	r0, #1
   24e3c:	d1c0      	bne.n	24dc0 <_printf_float+0x32c>
   24e3e:	e684      	b.n	24b4a <_printf_float+0xb6>
   24e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24e42:	464b      	mov	r3, r9
   24e44:	4631      	mov	r1, r6
   24e46:	4628      	mov	r0, r5
   24e48:	4442      	add	r2, r8
   24e4a:	47b8      	blx	r7
   24e4c:	3001      	adds	r0, #1
   24e4e:	d1c3      	bne.n	24dd8 <_printf_float+0x344>
   24e50:	e67b      	b.n	24b4a <_printf_float+0xb6>
   24e52:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   24e56:	f1ba 0f01 	cmp.w	sl, #1
   24e5a:	dc01      	bgt.n	24e60 <_printf_float+0x3cc>
   24e5c:	07db      	lsls	r3, r3, #31
   24e5e:	d536      	bpl.n	24ece <_printf_float+0x43a>
   24e60:	2301      	movs	r3, #1
   24e62:	4642      	mov	r2, r8
   24e64:	4631      	mov	r1, r6
   24e66:	4628      	mov	r0, r5
   24e68:	47b8      	blx	r7
   24e6a:	3001      	adds	r0, #1
   24e6c:	f43f ae6d 	beq.w	24b4a <_printf_float+0xb6>
   24e70:	4631      	mov	r1, r6
   24e72:	4628      	mov	r0, r5
   24e74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24e78:	47b8      	blx	r7
   24e7a:	3001      	adds	r0, #1
   24e7c:	f43f ae65 	beq.w	24b4a <_printf_float+0xb6>
   24e80:	2200      	movs	r2, #0
   24e82:	2300      	movs	r3, #0
   24e84:	f10a 3aff 	add.w	sl, sl, #4294967295
   24e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   24e8c:	f7e3 fd88 	bl	89a0 <__aeabi_dcmpeq>
   24e90:	b9c0      	cbnz	r0, 24ec4 <_printf_float+0x430>
   24e92:	4653      	mov	r3, sl
   24e94:	f108 0201 	add.w	r2, r8, #1
   24e98:	4631      	mov	r1, r6
   24e9a:	4628      	mov	r0, r5
   24e9c:	47b8      	blx	r7
   24e9e:	3001      	adds	r0, #1
   24ea0:	d10c      	bne.n	24ebc <_printf_float+0x428>
   24ea2:	e652      	b.n	24b4a <_printf_float+0xb6>
   24ea4:	2301      	movs	r3, #1
   24ea6:	465a      	mov	r2, fp
   24ea8:	4631      	mov	r1, r6
   24eaa:	4628      	mov	r0, r5
   24eac:	47b8      	blx	r7
   24eae:	3001      	adds	r0, #1
   24eb0:	f43f ae4b 	beq.w	24b4a <_printf_float+0xb6>
   24eb4:	f108 0801 	add.w	r8, r8, #1
   24eb8:	45d0      	cmp	r8, sl
   24eba:	dbf3      	blt.n	24ea4 <_printf_float+0x410>
   24ebc:	464b      	mov	r3, r9
   24ebe:	f104 0250 	add.w	r2, r4, #80	; 0x50
   24ec2:	e6e0      	b.n	24c86 <_printf_float+0x1f2>
   24ec4:	f04f 0800 	mov.w	r8, #0
   24ec8:	f104 0b1a 	add.w	fp, r4, #26
   24ecc:	e7f4      	b.n	24eb8 <_printf_float+0x424>
   24ece:	2301      	movs	r3, #1
   24ed0:	4642      	mov	r2, r8
   24ed2:	e7e1      	b.n	24e98 <_printf_float+0x404>
   24ed4:	2301      	movs	r3, #1
   24ed6:	464a      	mov	r2, r9
   24ed8:	4631      	mov	r1, r6
   24eda:	4628      	mov	r0, r5
   24edc:	47b8      	blx	r7
   24ede:	3001      	adds	r0, #1
   24ee0:	f43f ae33 	beq.w	24b4a <_printf_float+0xb6>
   24ee4:	f108 0801 	add.w	r8, r8, #1
   24ee8:	68e3      	ldr	r3, [r4, #12]
   24eea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   24eec:	1a5b      	subs	r3, r3, r1
   24eee:	4543      	cmp	r3, r8
   24ef0:	dcf0      	bgt.n	24ed4 <_printf_float+0x440>
   24ef2:	e6fd      	b.n	24cf0 <_printf_float+0x25c>
   24ef4:	f04f 0800 	mov.w	r8, #0
   24ef8:	f104 0919 	add.w	r9, r4, #25
   24efc:	e7f4      	b.n	24ee8 <_printf_float+0x454>
   24efe:	bf00      	nop

00024f00 <_printf_i>:
   24f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   24f04:	7e0f      	ldrb	r7, [r1, #24]
   24f06:	4691      	mov	r9, r2
   24f08:	4680      	mov	r8, r0
   24f0a:	460c      	mov	r4, r1
   24f0c:	2f78      	cmp	r7, #120	; 0x78
   24f0e:	469a      	mov	sl, r3
   24f10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
   24f16:	d807      	bhi.n	24f28 <_printf_i+0x28>
   24f18:	2f62      	cmp	r7, #98	; 0x62
   24f1a:	d80a      	bhi.n	24f32 <_printf_i+0x32>
   24f1c:	2f00      	cmp	r7, #0
   24f1e:	f000 80e0 	beq.w	250e2 <_printf_i+0x1e2>
   24f22:	2f58      	cmp	r7, #88	; 0x58
   24f24:	f000 80bb 	beq.w	2509e <_printf_i+0x19e>
   24f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
   24f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   24f30:	e03a      	b.n	24fa8 <_printf_i+0xa8>
   24f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   24f36:	2b15      	cmp	r3, #21
   24f38:	d8f6      	bhi.n	24f28 <_printf_i+0x28>
   24f3a:	a101      	add	r1, pc, #4	; (adr r1, 24f40 <_printf_i+0x40>)
   24f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   24f40:	00024f99 	.word	0x00024f99
   24f44:	00024fad 	.word	0x00024fad
   24f48:	00024f29 	.word	0x00024f29
   24f4c:	00024f29 	.word	0x00024f29
   24f50:	00024f29 	.word	0x00024f29
   24f54:	00024f29 	.word	0x00024f29
   24f58:	00024fad 	.word	0x00024fad
   24f5c:	00024f29 	.word	0x00024f29
   24f60:	00024f29 	.word	0x00024f29
   24f64:	00024f29 	.word	0x00024f29
   24f68:	00024f29 	.word	0x00024f29
   24f6c:	000250c9 	.word	0x000250c9
   24f70:	0002503d 	.word	0x0002503d
   24f74:	0002507f 	.word	0x0002507f
   24f78:	00024f29 	.word	0x00024f29
   24f7c:	00024f29 	.word	0x00024f29
   24f80:	000250eb 	.word	0x000250eb
   24f84:	00024f29 	.word	0x00024f29
   24f88:	0002503d 	.word	0x0002503d
   24f8c:	00024f29 	.word	0x00024f29
   24f90:	00024f29 	.word	0x00024f29
   24f94:	00025087 	.word	0x00025087
   24f98:	682b      	ldr	r3, [r5, #0]
   24f9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   24f9e:	1d1a      	adds	r2, r3, #4
   24fa0:	681b      	ldr	r3, [r3, #0]
   24fa2:	602a      	str	r2, [r5, #0]
   24fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   24fa8:	2301      	movs	r3, #1
   24faa:	e0ab      	b.n	25104 <_printf_i+0x204>
   24fac:	6823      	ldr	r3, [r4, #0]
   24fae:	6829      	ldr	r1, [r5, #0]
   24fb0:	061f      	lsls	r7, r3, #24
   24fb2:	f101 0004 	add.w	r0, r1, #4
   24fb6:	6028      	str	r0, [r5, #0]
   24fb8:	d501      	bpl.n	24fbe <_printf_i+0xbe>
   24fba:	680d      	ldr	r5, [r1, #0]
   24fbc:	e003      	b.n	24fc6 <_printf_i+0xc6>
   24fbe:	065e      	lsls	r6, r3, #25
   24fc0:	d5fb      	bpl.n	24fba <_printf_i+0xba>
   24fc2:	f9b1 5000 	ldrsh.w	r5, [r1]
   24fc6:	2d00      	cmp	r5, #0
   24fc8:	6861      	ldr	r1, [r4, #4]
   24fca:	da7a      	bge.n	250c2 <_printf_i+0x1c2>
   24fcc:	202d      	movs	r0, #45	; 0x2d
   24fce:	2900      	cmp	r1, #0
   24fd0:	60a1      	str	r1, [r4, #8]
   24fd2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   24fd6:	da2d      	bge.n	25034 <_printf_i+0x134>
   24fd8:	426d      	negs	r5, r5
   24fda:	485e      	ldr	r0, [pc, #376]	; (25154 <_printf_i+0x254>)
   24fdc:	230a      	movs	r3, #10
   24fde:	4616      	mov	r6, r2
   24fe0:	fbb5 f1f3 	udiv	r1, r5, r3
   24fe4:	fb03 5711 	mls	r7, r3, r1, r5
   24fe8:	5dc7      	ldrb	r7, [r0, r7]
   24fea:	f806 7d01 	strb.w	r7, [r6, #-1]!
   24fee:	462f      	mov	r7, r5
   24ff0:	460d      	mov	r5, r1
   24ff2:	42bb      	cmp	r3, r7
   24ff4:	d9f4      	bls.n	24fe0 <_printf_i+0xe0>
   24ff6:	2b08      	cmp	r3, #8
   24ff8:	d10b      	bne.n	25012 <_printf_i+0x112>
   24ffa:	6823      	ldr	r3, [r4, #0]
   24ffc:	07df      	lsls	r7, r3, #31
   24ffe:	d508      	bpl.n	25012 <_printf_i+0x112>
   25000:	6923      	ldr	r3, [r4, #16]
   25002:	6861      	ldr	r1, [r4, #4]
   25004:	4299      	cmp	r1, r3
   25006:	bfde      	ittt	le
   25008:	2330      	movle	r3, #48	; 0x30
   2500a:	f806 3c01 	strble.w	r3, [r6, #-1]
   2500e:	f106 36ff 	addle.w	r6, r6, #4294967295
   25012:	1b92      	subs	r2, r2, r6
   25014:	6122      	str	r2, [r4, #16]
   25016:	464b      	mov	r3, r9
   25018:	aa03      	add	r2, sp, #12
   2501a:	4621      	mov	r1, r4
   2501c:	4640      	mov	r0, r8
   2501e:	f8cd a000 	str.w	sl, [sp]
   25022:	f006 fd73 	bl	2bb0c <_printf_common>
   25026:	3001      	adds	r0, #1
   25028:	d171      	bne.n	2510e <_printf_i+0x20e>
   2502a:	f04f 30ff 	mov.w	r0, #4294967295
   2502e:	b004      	add	sp, #16
   25030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25034:	f023 0304 	bic.w	r3, r3, #4
   25038:	6023      	str	r3, [r4, #0]
   2503a:	e7cd      	b.n	24fd8 <_printf_i+0xd8>
   2503c:	682b      	ldr	r3, [r5, #0]
   2503e:	6820      	ldr	r0, [r4, #0]
   25040:	1d19      	adds	r1, r3, #4
   25042:	6029      	str	r1, [r5, #0]
   25044:	0605      	lsls	r5, r0, #24
   25046:	d501      	bpl.n	2504c <_printf_i+0x14c>
   25048:	681d      	ldr	r5, [r3, #0]
   2504a:	e002      	b.n	25052 <_printf_i+0x152>
   2504c:	0641      	lsls	r1, r0, #25
   2504e:	d5fb      	bpl.n	25048 <_printf_i+0x148>
   25050:	881d      	ldrh	r5, [r3, #0]
   25052:	2f6f      	cmp	r7, #111	; 0x6f
   25054:	483f      	ldr	r0, [pc, #252]	; (25154 <_printf_i+0x254>)
   25056:	bf14      	ite	ne
   25058:	230a      	movne	r3, #10
   2505a:	2308      	moveq	r3, #8
   2505c:	2100      	movs	r1, #0
   2505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   25062:	6866      	ldr	r6, [r4, #4]
   25064:	2e00      	cmp	r6, #0
   25066:	60a6      	str	r6, [r4, #8]
   25068:	dbb9      	blt.n	24fde <_printf_i+0xde>
   2506a:	6821      	ldr	r1, [r4, #0]
   2506c:	f021 0104 	bic.w	r1, r1, #4
   25070:	6021      	str	r1, [r4, #0]
   25072:	2d00      	cmp	r5, #0
   25074:	d1b3      	bne.n	24fde <_printf_i+0xde>
   25076:	2e00      	cmp	r6, #0
   25078:	d1b1      	bne.n	24fde <_printf_i+0xde>
   2507a:	4616      	mov	r6, r2
   2507c:	e7bb      	b.n	24ff6 <_printf_i+0xf6>
   2507e:	6823      	ldr	r3, [r4, #0]
   25080:	f043 0320 	orr.w	r3, r3, #32
   25084:	6023      	str	r3, [r4, #0]
   25086:	2778      	movs	r7, #120	; 0x78
   25088:	4833      	ldr	r0, [pc, #204]	; (25158 <_printf_i+0x258>)
   2508a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2508e:	6829      	ldr	r1, [r5, #0]
   25090:	6823      	ldr	r3, [r4, #0]
   25092:	1d0e      	adds	r6, r1, #4
   25094:	602e      	str	r6, [r5, #0]
   25096:	061e      	lsls	r6, r3, #24
   25098:	d503      	bpl.n	250a2 <_printf_i+0x1a2>
   2509a:	680d      	ldr	r5, [r1, #0]
   2509c:	e004      	b.n	250a8 <_printf_i+0x1a8>
   2509e:	482d      	ldr	r0, [pc, #180]	; (25154 <_printf_i+0x254>)
   250a0:	e7f3      	b.n	2508a <_printf_i+0x18a>
   250a2:	065d      	lsls	r5, r3, #25
   250a4:	d5f9      	bpl.n	2509a <_printf_i+0x19a>
   250a6:	880d      	ldrh	r5, [r1, #0]
   250a8:	07d9      	lsls	r1, r3, #31
   250aa:	bf44      	itt	mi
   250ac:	f043 0320 	orrmi.w	r3, r3, #32
   250b0:	6023      	strmi	r3, [r4, #0]
   250b2:	b10d      	cbz	r5, 250b8 <_printf_i+0x1b8>
   250b4:	2310      	movs	r3, #16
   250b6:	e7d1      	b.n	2505c <_printf_i+0x15c>
   250b8:	6823      	ldr	r3, [r4, #0]
   250ba:	f023 0320 	bic.w	r3, r3, #32
   250be:	6023      	str	r3, [r4, #0]
   250c0:	e7f8      	b.n	250b4 <_printf_i+0x1b4>
   250c2:	4824      	ldr	r0, [pc, #144]	; (25154 <_printf_i+0x254>)
   250c4:	230a      	movs	r3, #10
   250c6:	e7cc      	b.n	25062 <_printf_i+0x162>
   250c8:	682b      	ldr	r3, [r5, #0]
   250ca:	6826      	ldr	r6, [r4, #0]
   250cc:	1d18      	adds	r0, r3, #4
   250ce:	6961      	ldr	r1, [r4, #20]
   250d0:	6028      	str	r0, [r5, #0]
   250d2:	0635      	lsls	r5, r6, #24
   250d4:	681b      	ldr	r3, [r3, #0]
   250d6:	d501      	bpl.n	250dc <_printf_i+0x1dc>
   250d8:	6019      	str	r1, [r3, #0]
   250da:	e002      	b.n	250e2 <_printf_i+0x1e2>
   250dc:	0670      	lsls	r0, r6, #25
   250de:	d5fb      	bpl.n	250d8 <_printf_i+0x1d8>
   250e0:	8019      	strh	r1, [r3, #0]
   250e2:	2300      	movs	r3, #0
   250e4:	4616      	mov	r6, r2
   250e6:	6123      	str	r3, [r4, #16]
   250e8:	e795      	b.n	25016 <_printf_i+0x116>
   250ea:	682b      	ldr	r3, [r5, #0]
   250ec:	2100      	movs	r1, #0
   250ee:	1d1a      	adds	r2, r3, #4
   250f0:	602a      	str	r2, [r5, #0]
   250f2:	681e      	ldr	r6, [r3, #0]
   250f4:	6862      	ldr	r2, [r4, #4]
   250f6:	4630      	mov	r0, r6
   250f8:	f006 fbfa 	bl	2b8f0 <memchr>
   250fc:	b108      	cbz	r0, 25102 <_printf_i+0x202>
   250fe:	1b80      	subs	r0, r0, r6
   25100:	6060      	str	r0, [r4, #4]
   25102:	6863      	ldr	r3, [r4, #4]
   25104:	6123      	str	r3, [r4, #16]
   25106:	2300      	movs	r3, #0
   25108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2510c:	e783      	b.n	25016 <_printf_i+0x116>
   2510e:	6923      	ldr	r3, [r4, #16]
   25110:	4632      	mov	r2, r6
   25112:	4649      	mov	r1, r9
   25114:	4640      	mov	r0, r8
   25116:	47d0      	blx	sl
   25118:	3001      	adds	r0, #1
   2511a:	d086      	beq.n	2502a <_printf_i+0x12a>
   2511c:	6823      	ldr	r3, [r4, #0]
   2511e:	079b      	lsls	r3, r3, #30
   25120:	d414      	bmi.n	2514c <_printf_i+0x24c>
   25122:	68e0      	ldr	r0, [r4, #12]
   25124:	9b03      	ldr	r3, [sp, #12]
   25126:	4298      	cmp	r0, r3
   25128:	bfb8      	it	lt
   2512a:	4618      	movlt	r0, r3
   2512c:	e77f      	b.n	2502e <_printf_i+0x12e>
   2512e:	2301      	movs	r3, #1
   25130:	4632      	mov	r2, r6
   25132:	4649      	mov	r1, r9
   25134:	4640      	mov	r0, r8
   25136:	47d0      	blx	sl
   25138:	3001      	adds	r0, #1
   2513a:	f43f af76 	beq.w	2502a <_printf_i+0x12a>
   2513e:	3501      	adds	r5, #1
   25140:	68e3      	ldr	r3, [r4, #12]
   25142:	9903      	ldr	r1, [sp, #12]
   25144:	1a5b      	subs	r3, r3, r1
   25146:	42ab      	cmp	r3, r5
   25148:	dcf1      	bgt.n	2512e <_printf_i+0x22e>
   2514a:	e7ea      	b.n	25122 <_printf_i+0x222>
   2514c:	2500      	movs	r5, #0
   2514e:	f104 0619 	add.w	r6, r4, #25
   25152:	e7f5      	b.n	25140 <_printf_i+0x240>
   25154:	0003364e 	.word	0x0003364e
   25158:	0003365f 	.word	0x0003365f

0002515c <iprintf>:
   2515c:	b40f      	push	{r0, r1, r2, r3}
   2515e:	4b0a      	ldr	r3, [pc, #40]	; (25188 <iprintf+0x2c>)
   25160:	b513      	push	{r0, r1, r4, lr}
   25162:	681c      	ldr	r4, [r3, #0]
   25164:	b124      	cbz	r4, 25170 <iprintf+0x14>
   25166:	69a3      	ldr	r3, [r4, #24]
   25168:	b913      	cbnz	r3, 25170 <iprintf+0x14>
   2516a:	4620      	mov	r0, r4
   2516c:	f000 f8fa 	bl	25364 <__sinit>
   25170:	ab05      	add	r3, sp, #20
   25172:	9a04      	ldr	r2, [sp, #16]
   25174:	68a1      	ldr	r1, [r4, #8]
   25176:	4620      	mov	r0, r4
   25178:	9301      	str	r3, [sp, #4]
   2517a:	f000 fcb1 	bl	25ae0 <_vfiprintf_r>
   2517e:	b002      	add	sp, #8
   25180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25184:	b004      	add	sp, #16
   25186:	4770      	bx	lr
   25188:	200088c0 	.word	0x200088c0

0002518c <_sbrk_r>:
   2518c:	b538      	push	{r3, r4, r5, lr}
   2518e:	2300      	movs	r3, #0
   25190:	4d05      	ldr	r5, [pc, #20]	; (251a8 <_sbrk_r+0x1c>)
   25192:	4604      	mov	r4, r0
   25194:	4608      	mov	r0, r1
   25196:	602b      	str	r3, [r5, #0]
   25198:	f7ec fa58 	bl	1164c <_sbrk>
   2519c:	1c43      	adds	r3, r0, #1
   2519e:	d102      	bne.n	251a6 <_sbrk_r+0x1a>
   251a0:	682b      	ldr	r3, [r5, #0]
   251a2:	b103      	cbz	r3, 251a6 <_sbrk_r+0x1a>
   251a4:	6023      	str	r3, [r4, #0]
   251a6:	bd38      	pop	{r3, r4, r5, pc}
   251a8:	20021bbc 	.word	0x20021bbc

000251ac <_strtoul_l.constprop.0>:
   251ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   251b0:	4686      	mov	lr, r0
   251b2:	460d      	mov	r5, r1
   251b4:	4e35      	ldr	r6, [pc, #212]	; (2528c <_strtoul_l.constprop.0+0xe0>)
   251b6:	4628      	mov	r0, r5
   251b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   251bc:	5d37      	ldrb	r7, [r6, r4]
   251be:	f017 0708 	ands.w	r7, r7, #8
   251c2:	d1f8      	bne.n	251b6 <_strtoul_l.constprop.0+0xa>
   251c4:	2c2d      	cmp	r4, #45	; 0x2d
   251c6:	d126      	bne.n	25216 <_strtoul_l.constprop.0+0x6a>
   251c8:	782c      	ldrb	r4, [r5, #0]
   251ca:	2701      	movs	r7, #1
   251cc:	1c85      	adds	r5, r0, #2
   251ce:	bb3b      	cbnz	r3, 25220 <_strtoul_l.constprop.0+0x74>
   251d0:	2c30      	cmp	r4, #48	; 0x30
   251d2:	d032      	beq.n	2523a <_strtoul_l.constprop.0+0x8e>
   251d4:	230a      	movs	r3, #10
   251d6:	f04f 38ff 	mov.w	r8, #4294967295
   251da:	2600      	movs	r6, #0
   251dc:	fbb8 f8f3 	udiv	r8, r8, r3
   251e0:	fb03 f908 	mul.w	r9, r3, r8
   251e4:	4630      	mov	r0, r6
   251e6:	ea6f 0909 	mvn.w	r9, r9
   251ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   251ee:	f1bc 0f09 	cmp.w	ip, #9
   251f2:	d829      	bhi.n	25248 <_strtoul_l.constprop.0+0x9c>
   251f4:	4664      	mov	r4, ip
   251f6:	42a3      	cmp	r3, r4
   251f8:	dd37      	ble.n	2526a <_strtoul_l.constprop.0+0xbe>
   251fa:	f1b6 3fff 	cmp.w	r6, #4294967295
   251fe:	d007      	beq.n	25210 <_strtoul_l.constprop.0+0x64>
   25200:	4580      	cmp	r8, r0
   25202:	d32f      	bcc.n	25264 <_strtoul_l.constprop.0+0xb8>
   25204:	d101      	bne.n	2520a <_strtoul_l.constprop.0+0x5e>
   25206:	45a1      	cmp	r9, r4
   25208:	db2c      	blt.n	25264 <_strtoul_l.constprop.0+0xb8>
   2520a:	fb00 4003 	mla	r0, r0, r3, r4
   2520e:	2601      	movs	r6, #1
   25210:	f815 4b01 	ldrb.w	r4, [r5], #1
   25214:	e7e9      	b.n	251ea <_strtoul_l.constprop.0+0x3e>
   25216:	2c2b      	cmp	r4, #43	; 0x2b
   25218:	bf04      	itt	eq
   2521a:	782c      	ldrbeq	r4, [r5, #0]
   2521c:	1c85      	addeq	r5, r0, #2
   2521e:	e7d6      	b.n	251ce <_strtoul_l.constprop.0+0x22>
   25220:	2b10      	cmp	r3, #16
   25222:	d1d8      	bne.n	251d6 <_strtoul_l.constprop.0+0x2a>
   25224:	2c30      	cmp	r4, #48	; 0x30
   25226:	d1d6      	bne.n	251d6 <_strtoul_l.constprop.0+0x2a>
   25228:	7828      	ldrb	r0, [r5, #0]
   2522a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2522e:	2858      	cmp	r0, #88	; 0x58
   25230:	d1d1      	bne.n	251d6 <_strtoul_l.constprop.0+0x2a>
   25232:	786c      	ldrb	r4, [r5, #1]
   25234:	2310      	movs	r3, #16
   25236:	3502      	adds	r5, #2
   25238:	e7cd      	b.n	251d6 <_strtoul_l.constprop.0+0x2a>
   2523a:	782b      	ldrb	r3, [r5, #0]
   2523c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25240:	2b58      	cmp	r3, #88	; 0x58
   25242:	d0f6      	beq.n	25232 <_strtoul_l.constprop.0+0x86>
   25244:	2308      	movs	r3, #8
   25246:	e7c6      	b.n	251d6 <_strtoul_l.constprop.0+0x2a>
   25248:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2524c:	f1bc 0f19 	cmp.w	ip, #25
   25250:	d801      	bhi.n	25256 <_strtoul_l.constprop.0+0xaa>
   25252:	3c37      	subs	r4, #55	; 0x37
   25254:	e7cf      	b.n	251f6 <_strtoul_l.constprop.0+0x4a>
   25256:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2525a:	f1bc 0f19 	cmp.w	ip, #25
   2525e:	d804      	bhi.n	2526a <_strtoul_l.constprop.0+0xbe>
   25260:	3c57      	subs	r4, #87	; 0x57
   25262:	e7c8      	b.n	251f6 <_strtoul_l.constprop.0+0x4a>
   25264:	f04f 36ff 	mov.w	r6, #4294967295
   25268:	e7d2      	b.n	25210 <_strtoul_l.constprop.0+0x64>
   2526a:	1c73      	adds	r3, r6, #1
   2526c:	d106      	bne.n	2527c <_strtoul_l.constprop.0+0xd0>
   2526e:	2322      	movs	r3, #34	; 0x22
   25270:	4630      	mov	r0, r6
   25272:	f8ce 3000 	str.w	r3, [lr]
   25276:	b932      	cbnz	r2, 25286 <_strtoul_l.constprop.0+0xda>
   25278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2527c:	b107      	cbz	r7, 25280 <_strtoul_l.constprop.0+0xd4>
   2527e:	4240      	negs	r0, r0
   25280:	2a00      	cmp	r2, #0
   25282:	d0f9      	beq.n	25278 <_strtoul_l.constprop.0+0xcc>
   25284:	b106      	cbz	r6, 25288 <_strtoul_l.constprop.0+0xdc>
   25286:	1e69      	subs	r1, r5, #1
   25288:	6011      	str	r1, [r2, #0]
   2528a:	e7f5      	b.n	25278 <_strtoul_l.constprop.0+0xcc>
   2528c:	00033542 	.word	0x00033542

00025290 <strtoul>:
   25290:	4613      	mov	r3, r2
   25292:	460a      	mov	r2, r1
   25294:	4601      	mov	r1, r0
   25296:	4802      	ldr	r0, [pc, #8]	; (252a0 <strtoul+0x10>)
   25298:	6800      	ldr	r0, [r0, #0]
   2529a:	f7ff bf87 	b.w	251ac <_strtoul_l.constprop.0>
   2529e:	bf00      	nop
   252a0:	200088c0 	.word	0x200088c0

000252a4 <__assert_func>:
   252a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   252a6:	4614      	mov	r4, r2
   252a8:	461a      	mov	r2, r3
   252aa:	4b09      	ldr	r3, [pc, #36]	; (252d0 <__assert_func+0x2c>)
   252ac:	4605      	mov	r5, r0
   252ae:	681b      	ldr	r3, [r3, #0]
   252b0:	68d8      	ldr	r0, [r3, #12]
   252b2:	b954      	cbnz	r4, 252ca <__assert_func+0x26>
   252b4:	4b07      	ldr	r3, [pc, #28]	; (252d4 <__assert_func+0x30>)
   252b6:	461c      	mov	r4, r3
   252b8:	9100      	str	r1, [sp, #0]
   252ba:	4907      	ldr	r1, [pc, #28]	; (252d8 <__assert_func+0x34>)
   252bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   252c0:	462b      	mov	r3, r5
   252c2:	f000 f8cd 	bl	25460 <fiprintf>
   252c6:	f006 fe62 	bl	2bf8e <abort>
   252ca:	4b04      	ldr	r3, [pc, #16]	; (252dc <__assert_func+0x38>)
   252cc:	e7f4      	b.n	252b8 <__assert_func+0x14>
   252ce:	bf00      	nop
   252d0:	200088c0 	.word	0x200088c0
   252d4:	00031893 	.word	0x00031893
   252d8:	0003367d 	.word	0x0003367d
   252dc:	00033670 	.word	0x00033670

000252e0 <std>:
   252e0:	2300      	movs	r3, #0
   252e2:	b510      	push	{r4, lr}
   252e4:	4604      	mov	r4, r0
   252e6:	6083      	str	r3, [r0, #8]
   252e8:	8181      	strh	r1, [r0, #12]
   252ea:	4619      	mov	r1, r3
   252ec:	6643      	str	r3, [r0, #100]	; 0x64
   252ee:	81c2      	strh	r2, [r0, #14]
   252f0:	2208      	movs	r2, #8
   252f2:	6183      	str	r3, [r0, #24]
   252f4:	e9c0 3300 	strd	r3, r3, [r0]
   252f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   252fc:	305c      	adds	r0, #92	; 0x5c
   252fe:	f006 fb4f 	bl	2b9a0 <memset>
   25302:	4b05      	ldr	r3, [pc, #20]	; (25318 <std+0x38>)
   25304:	6224      	str	r4, [r4, #32]
   25306:	6263      	str	r3, [r4, #36]	; 0x24
   25308:	4b04      	ldr	r3, [pc, #16]	; (2531c <std+0x3c>)
   2530a:	62a3      	str	r3, [r4, #40]	; 0x28
   2530c:	4b04      	ldr	r3, [pc, #16]	; (25320 <std+0x40>)
   2530e:	62e3      	str	r3, [r4, #44]	; 0x2c
   25310:	4b04      	ldr	r3, [pc, #16]	; (25324 <std+0x44>)
   25312:	6323      	str	r3, [r4, #48]	; 0x30
   25314:	bd10      	pop	{r4, pc}
   25316:	bf00      	nop
   25318:	0002bf09 	.word	0x0002bf09
   2531c:	0002bf2b 	.word	0x0002bf2b
   25320:	0002bf63 	.word	0x0002bf63
   25324:	0002bf87 	.word	0x0002bf87

00025328 <_cleanup_r>:
   25328:	4901      	ldr	r1, [pc, #4]	; (25330 <_cleanup_r+0x8>)
   2532a:	f006 bd3d 	b.w	2bda8 <_fwalk_reent>
   2532e:	bf00      	nop
   25330:	00025ef9 	.word	0x00025ef9

00025334 <__sfp_lock_acquire>:
   25334:	4801      	ldr	r0, [pc, #4]	; (2533c <__sfp_lock_acquire+0x8>)
   25336:	f7ec b9cd 	b.w	116d4 <__retarget_lock_acquire_recursive>
   2533a:	bf00      	nop
   2533c:	20008c50 	.word	0x20008c50

00025340 <__sfp_lock_release>:
   25340:	4801      	ldr	r0, [pc, #4]	; (25348 <__sfp_lock_release+0x8>)
   25342:	f7ec b9e3 	b.w	1170c <__retarget_lock_release_recursive>
   25346:	bf00      	nop
   25348:	20008c50 	.word	0x20008c50

0002534c <__sinit_lock_acquire>:
   2534c:	4801      	ldr	r0, [pc, #4]	; (25354 <__sinit_lock_acquire+0x8>)
   2534e:	f7ec b9c1 	b.w	116d4 <__retarget_lock_acquire_recursive>
   25352:	bf00      	nop
   25354:	20008c64 	.word	0x20008c64

00025358 <__sinit_lock_release>:
   25358:	4801      	ldr	r0, [pc, #4]	; (25360 <__sinit_lock_release+0x8>)
   2535a:	f7ec b9d7 	b.w	1170c <__retarget_lock_release_recursive>
   2535e:	bf00      	nop
   25360:	20008c64 	.word	0x20008c64

00025364 <__sinit>:
   25364:	b510      	push	{r4, lr}
   25366:	4604      	mov	r4, r0
   25368:	f7ff fff0 	bl	2534c <__sinit_lock_acquire>
   2536c:	69a3      	ldr	r3, [r4, #24]
   2536e:	b11b      	cbz	r3, 25378 <__sinit+0x14>
   25370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25374:	f7ff bff0 	b.w	25358 <__sinit_lock_release>
   25378:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2537c:	6523      	str	r3, [r4, #80]	; 0x50
   2537e:	4620      	mov	r0, r4
   25380:	4b12      	ldr	r3, [pc, #72]	; (253cc <__sinit+0x68>)
   25382:	4a13      	ldr	r2, [pc, #76]	; (253d0 <__sinit+0x6c>)
   25384:	681b      	ldr	r3, [r3, #0]
   25386:	62a2      	str	r2, [r4, #40]	; 0x28
   25388:	42a3      	cmp	r3, r4
   2538a:	bf04      	itt	eq
   2538c:	2301      	moveq	r3, #1
   2538e:	61a3      	streq	r3, [r4, #24]
   25390:	f000 f820 	bl	253d4 <__sfp>
   25394:	6060      	str	r0, [r4, #4]
   25396:	4620      	mov	r0, r4
   25398:	f000 f81c 	bl	253d4 <__sfp>
   2539c:	60a0      	str	r0, [r4, #8]
   2539e:	4620      	mov	r0, r4
   253a0:	f000 f818 	bl	253d4 <__sfp>
   253a4:	2200      	movs	r2, #0
   253a6:	2104      	movs	r1, #4
   253a8:	60e0      	str	r0, [r4, #12]
   253aa:	6860      	ldr	r0, [r4, #4]
   253ac:	f7ff ff98 	bl	252e0 <std>
   253b0:	2201      	movs	r2, #1
   253b2:	2109      	movs	r1, #9
   253b4:	68a0      	ldr	r0, [r4, #8]
   253b6:	f7ff ff93 	bl	252e0 <std>
   253ba:	2202      	movs	r2, #2
   253bc:	2112      	movs	r1, #18
   253be:	68e0      	ldr	r0, [r4, #12]
   253c0:	f7ff ff8e 	bl	252e0 <std>
   253c4:	2301      	movs	r3, #1
   253c6:	61a3      	str	r3, [r4, #24]
   253c8:	e7d2      	b.n	25370 <__sinit+0xc>
   253ca:	bf00      	nop
   253cc:	0002d78c 	.word	0x0002d78c
   253d0:	00025329 	.word	0x00025329

000253d4 <__sfp>:
   253d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   253d6:	4607      	mov	r7, r0
   253d8:	f7ff ffac 	bl	25334 <__sfp_lock_acquire>
   253dc:	4b1e      	ldr	r3, [pc, #120]	; (25458 <__sfp+0x84>)
   253de:	681e      	ldr	r6, [r3, #0]
   253e0:	69b3      	ldr	r3, [r6, #24]
   253e2:	b913      	cbnz	r3, 253ea <__sfp+0x16>
   253e4:	4630      	mov	r0, r6
   253e6:	f7ff ffbd 	bl	25364 <__sinit>
   253ea:	3648      	adds	r6, #72	; 0x48
   253ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   253f0:	3b01      	subs	r3, #1
   253f2:	d503      	bpl.n	253fc <__sfp+0x28>
   253f4:	6833      	ldr	r3, [r6, #0]
   253f6:	b30b      	cbz	r3, 2543c <__sfp+0x68>
   253f8:	6836      	ldr	r6, [r6, #0]
   253fa:	e7f7      	b.n	253ec <__sfp+0x18>
   253fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   25400:	b9d5      	cbnz	r5, 25438 <__sfp+0x64>
   25402:	4b16      	ldr	r3, [pc, #88]	; (2545c <__sfp+0x88>)
   25404:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25408:	6665      	str	r5, [r4, #100]	; 0x64
   2540a:	60e3      	str	r3, [r4, #12]
   2540c:	f7ec f932 	bl	11674 <__retarget_lock_init_recursive>
   25410:	f7ff ff96 	bl	25340 <__sfp_lock_release>
   25414:	2208      	movs	r2, #8
   25416:	4629      	mov	r1, r5
   25418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2541c:	6025      	str	r5, [r4, #0]
   2541e:	61a5      	str	r5, [r4, #24]
   25420:	e9c4 5501 	strd	r5, r5, [r4, #4]
   25424:	e9c4 5504 	strd	r5, r5, [r4, #16]
   25428:	f006 faba 	bl	2b9a0 <memset>
   2542c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   25430:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   25434:	4620      	mov	r0, r4
   25436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25438:	3468      	adds	r4, #104	; 0x68
   2543a:	e7d9      	b.n	253f0 <__sfp+0x1c>
   2543c:	2104      	movs	r1, #4
   2543e:	4638      	mov	r0, r7
   25440:	f006 fc9c 	bl	2bd7c <__sfmoreglue>
   25444:	4604      	mov	r4, r0
   25446:	6030      	str	r0, [r6, #0]
   25448:	2800      	cmp	r0, #0
   2544a:	d1d5      	bne.n	253f8 <__sfp+0x24>
   2544c:	f7ff ff78 	bl	25340 <__sfp_lock_release>
   25450:	230c      	movs	r3, #12
   25452:	603b      	str	r3, [r7, #0]
   25454:	e7ee      	b.n	25434 <__sfp+0x60>
   25456:	bf00      	nop
   25458:	0002d78c 	.word	0x0002d78c
   2545c:	ffff0001 	.word	0xffff0001

00025460 <fiprintf>:
   25460:	b40e      	push	{r1, r2, r3}
   25462:	b503      	push	{r0, r1, lr}
   25464:	ab03      	add	r3, sp, #12
   25466:	4601      	mov	r1, r0
   25468:	4805      	ldr	r0, [pc, #20]	; (25480 <fiprintf+0x20>)
   2546a:	f853 2b04 	ldr.w	r2, [r3], #4
   2546e:	6800      	ldr	r0, [r0, #0]
   25470:	9301      	str	r3, [sp, #4]
   25472:	f000 fb35 	bl	25ae0 <_vfiprintf_r>
   25476:	b002      	add	sp, #8
   25478:	f85d eb04 	ldr.w	lr, [sp], #4
   2547c:	b003      	add	sp, #12
   2547e:	4770      	bx	lr
   25480:	200088c0 	.word	0x200088c0

00025484 <_localeconv_r>:
   25484:	4800      	ldr	r0, [pc, #0]	; (25488 <_localeconv_r+0x4>)
   25486:	4770      	bx	lr
   25488:	20008a14 	.word	0x20008a14

0002548c <__malloc_lock>:
   2548c:	4801      	ldr	r0, [pc, #4]	; (25494 <__malloc_lock+0x8>)
   2548e:	f7ec b921 	b.w	116d4 <__retarget_lock_acquire_recursive>
   25492:	bf00      	nop
   25494:	20008c3c 	.word	0x20008c3c

00025498 <__malloc_unlock>:
   25498:	4801      	ldr	r0, [pc, #4]	; (254a0 <__malloc_unlock+0x8>)
   2549a:	f7ec b937 	b.w	1170c <__retarget_lock_release_recursive>
   2549e:	bf00      	nop
   254a0:	20008c3c 	.word	0x20008c3c

000254a4 <_Balloc>:
   254a4:	b570      	push	{r4, r5, r6, lr}
   254a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   254a8:	4604      	mov	r4, r0
   254aa:	460d      	mov	r5, r1
   254ac:	b976      	cbnz	r6, 254cc <_Balloc+0x28>
   254ae:	2010      	movs	r0, #16
   254b0:	f7ff fa44 	bl	2493c <malloc>
   254b4:	4602      	mov	r2, r0
   254b6:	6260      	str	r0, [r4, #36]	; 0x24
   254b8:	b920      	cbnz	r0, 254c4 <_Balloc+0x20>
   254ba:	4b18      	ldr	r3, [pc, #96]	; (2551c <_Balloc+0x78>)
   254bc:	2166      	movs	r1, #102	; 0x66
   254be:	4818      	ldr	r0, [pc, #96]	; (25520 <_Balloc+0x7c>)
   254c0:	f7ff fef0 	bl	252a4 <__assert_func>
   254c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   254c8:	6006      	str	r6, [r0, #0]
   254ca:	60c6      	str	r6, [r0, #12]
   254cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   254ce:	68f3      	ldr	r3, [r6, #12]
   254d0:	b183      	cbz	r3, 254f4 <_Balloc+0x50>
   254d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   254d4:	68db      	ldr	r3, [r3, #12]
   254d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   254da:	b9b8      	cbnz	r0, 2550c <_Balloc+0x68>
   254dc:	2101      	movs	r1, #1
   254de:	4620      	mov	r0, r4
   254e0:	fa01 f605 	lsl.w	r6, r1, r5
   254e4:	1d72      	adds	r2, r6, #5
   254e6:	0092      	lsls	r2, r2, #2
   254e8:	f006 fa62 	bl	2b9b0 <_calloc_r>
   254ec:	b160      	cbz	r0, 25508 <_Balloc+0x64>
   254ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
   254f2:	e00e      	b.n	25512 <_Balloc+0x6e>
   254f4:	2221      	movs	r2, #33	; 0x21
   254f6:	2104      	movs	r1, #4
   254f8:	4620      	mov	r0, r4
   254fa:	f006 fa59 	bl	2b9b0 <_calloc_r>
   254fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25500:	60f0      	str	r0, [r6, #12]
   25502:	68db      	ldr	r3, [r3, #12]
   25504:	2b00      	cmp	r3, #0
   25506:	d1e4      	bne.n	254d2 <_Balloc+0x2e>
   25508:	2000      	movs	r0, #0
   2550a:	bd70      	pop	{r4, r5, r6, pc}
   2550c:	6802      	ldr	r2, [r0, #0]
   2550e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   25512:	2300      	movs	r3, #0
   25514:	e9c0 3303 	strd	r3, r3, [r0, #12]
   25518:	e7f7      	b.n	2550a <_Balloc+0x66>
   2551a:	bf00      	nop
   2551c:	000336b9 	.word	0x000336b9
   25520:	00033755 	.word	0x00033755

00025524 <_Bfree>:
   25524:	b570      	push	{r4, r5, r6, lr}
   25526:	6a46      	ldr	r6, [r0, #36]	; 0x24
   25528:	4605      	mov	r5, r0
   2552a:	460c      	mov	r4, r1
   2552c:	b976      	cbnz	r6, 2554c <_Bfree+0x28>
   2552e:	2010      	movs	r0, #16
   25530:	f7ff fa04 	bl	2493c <malloc>
   25534:	4602      	mov	r2, r0
   25536:	6268      	str	r0, [r5, #36]	; 0x24
   25538:	b920      	cbnz	r0, 25544 <_Bfree+0x20>
   2553a:	4b09      	ldr	r3, [pc, #36]	; (25560 <_Bfree+0x3c>)
   2553c:	218a      	movs	r1, #138	; 0x8a
   2553e:	4809      	ldr	r0, [pc, #36]	; (25564 <_Bfree+0x40>)
   25540:	f7ff feb0 	bl	252a4 <__assert_func>
   25544:	e9c0 6601 	strd	r6, r6, [r0, #4]
   25548:	6006      	str	r6, [r0, #0]
   2554a:	60c6      	str	r6, [r0, #12]
   2554c:	b13c      	cbz	r4, 2555e <_Bfree+0x3a>
   2554e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   25550:	6862      	ldr	r2, [r4, #4]
   25552:	68db      	ldr	r3, [r3, #12]
   25554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   25558:	6021      	str	r1, [r4, #0]
   2555a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2555e:	bd70      	pop	{r4, r5, r6, pc}
   25560:	000336b9 	.word	0x000336b9
   25564:	00033755 	.word	0x00033755

00025568 <__multadd>:
   25568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2556c:	f101 0c14 	add.w	ip, r1, #20
   25570:	4607      	mov	r7, r0
   25572:	460c      	mov	r4, r1
   25574:	461e      	mov	r6, r3
   25576:	690d      	ldr	r5, [r1, #16]
   25578:	2000      	movs	r0, #0
   2557a:	f8dc 3000 	ldr.w	r3, [ip]
   2557e:	3001      	adds	r0, #1
   25580:	b299      	uxth	r1, r3
   25582:	4285      	cmp	r5, r0
   25584:	fb02 6101 	mla	r1, r2, r1, r6
   25588:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2558c:	ea4f 4311 	mov.w	r3, r1, lsr #16
   25590:	b289      	uxth	r1, r1
   25592:	fb02 3306 	mla	r3, r2, r6, r3
   25596:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   2559a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2559e:	f84c 1b04 	str.w	r1, [ip], #4
   255a2:	dcea      	bgt.n	2557a <__multadd+0x12>
   255a4:	b30e      	cbz	r6, 255ea <__multadd+0x82>
   255a6:	68a3      	ldr	r3, [r4, #8]
   255a8:	42ab      	cmp	r3, r5
   255aa:	dc19      	bgt.n	255e0 <__multadd+0x78>
   255ac:	6861      	ldr	r1, [r4, #4]
   255ae:	4638      	mov	r0, r7
   255b0:	3101      	adds	r1, #1
   255b2:	f7ff ff77 	bl	254a4 <_Balloc>
   255b6:	4680      	mov	r8, r0
   255b8:	b928      	cbnz	r0, 255c6 <__multadd+0x5e>
   255ba:	4602      	mov	r2, r0
   255bc:	4b0c      	ldr	r3, [pc, #48]	; (255f0 <__multadd+0x88>)
   255be:	21b5      	movs	r1, #181	; 0xb5
   255c0:	480c      	ldr	r0, [pc, #48]	; (255f4 <__multadd+0x8c>)
   255c2:	f7ff fe6f 	bl	252a4 <__assert_func>
   255c6:	6922      	ldr	r2, [r4, #16]
   255c8:	f104 010c 	add.w	r1, r4, #12
   255cc:	300c      	adds	r0, #12
   255ce:	3202      	adds	r2, #2
   255d0:	0092      	lsls	r2, r2, #2
   255d2:	f006 f9ab 	bl	2b92c <memcpy>
   255d6:	4621      	mov	r1, r4
   255d8:	4644      	mov	r4, r8
   255da:	4638      	mov	r0, r7
   255dc:	f7ff ffa2 	bl	25524 <_Bfree>
   255e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   255e4:	3501      	adds	r5, #1
   255e6:	615e      	str	r6, [r3, #20]
   255e8:	6125      	str	r5, [r4, #16]
   255ea:	4620      	mov	r0, r4
   255ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   255f0:	00033744 	.word	0x00033744
   255f4:	00033755 	.word	0x00033755

000255f8 <__i2b>:
   255f8:	b510      	push	{r4, lr}
   255fa:	460c      	mov	r4, r1
   255fc:	2101      	movs	r1, #1
   255fe:	f7ff ff51 	bl	254a4 <_Balloc>
   25602:	4602      	mov	r2, r0
   25604:	b928      	cbnz	r0, 25612 <__i2b+0x1a>
   25606:	4b05      	ldr	r3, [pc, #20]	; (2561c <__i2b+0x24>)
   25608:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2560c:	4804      	ldr	r0, [pc, #16]	; (25620 <__i2b+0x28>)
   2560e:	f7ff fe49 	bl	252a4 <__assert_func>
   25612:	2301      	movs	r3, #1
   25614:	6144      	str	r4, [r0, #20]
   25616:	6103      	str	r3, [r0, #16]
   25618:	bd10      	pop	{r4, pc}
   2561a:	bf00      	nop
   2561c:	00033744 	.word	0x00033744
   25620:	00033755 	.word	0x00033755

00025624 <__multiply>:
   25624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25628:	4614      	mov	r4, r2
   2562a:	690a      	ldr	r2, [r1, #16]
   2562c:	460f      	mov	r7, r1
   2562e:	b085      	sub	sp, #20
   25630:	6923      	ldr	r3, [r4, #16]
   25632:	429a      	cmp	r2, r3
   25634:	bfa2      	ittt	ge
   25636:	4623      	movge	r3, r4
   25638:	460c      	movge	r4, r1
   2563a:	461f      	movge	r7, r3
   2563c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   25640:	68a3      	ldr	r3, [r4, #8]
   25642:	f8d7 9010 	ldr.w	r9, [r7, #16]
   25646:	6861      	ldr	r1, [r4, #4]
   25648:	eb0a 0609 	add.w	r6, sl, r9
   2564c:	42b3      	cmp	r3, r6
   2564e:	bfb8      	it	lt
   25650:	3101      	addlt	r1, #1
   25652:	f7ff ff27 	bl	254a4 <_Balloc>
   25656:	b930      	cbnz	r0, 25666 <__multiply+0x42>
   25658:	4602      	mov	r2, r0
   2565a:	4b45      	ldr	r3, [pc, #276]	; (25770 <__multiply+0x14c>)
   2565c:	f240 115d 	movw	r1, #349	; 0x15d
   25660:	4844      	ldr	r0, [pc, #272]	; (25774 <__multiply+0x150>)
   25662:	f7ff fe1f 	bl	252a4 <__assert_func>
   25666:	f100 0514 	add.w	r5, r0, #20
   2566a:	2200      	movs	r2, #0
   2566c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   25670:	462b      	mov	r3, r5
   25672:	4543      	cmp	r3, r8
   25674:	d321      	bcc.n	256ba <__multiply+0x96>
   25676:	f107 0114 	add.w	r1, r7, #20
   2567a:	f104 0214 	add.w	r2, r4, #20
   2567e:	f104 0715 	add.w	r7, r4, #21
   25682:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   25686:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   2568a:	9302      	str	r3, [sp, #8]
   2568c:	1b13      	subs	r3, r2, r4
   2568e:	3b15      	subs	r3, #21
   25690:	f023 0303 	bic.w	r3, r3, #3
   25694:	3304      	adds	r3, #4
   25696:	42ba      	cmp	r2, r7
   25698:	bf38      	it	cc
   2569a:	2304      	movcc	r3, #4
   2569c:	9301      	str	r3, [sp, #4]
   2569e:	9b02      	ldr	r3, [sp, #8]
   256a0:	9103      	str	r1, [sp, #12]
   256a2:	428b      	cmp	r3, r1
   256a4:	d80c      	bhi.n	256c0 <__multiply+0x9c>
   256a6:	2e00      	cmp	r6, #0
   256a8:	dd03      	ble.n	256b2 <__multiply+0x8e>
   256aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   256ae:	2b00      	cmp	r3, #0
   256b0:	d05b      	beq.n	2576a <__multiply+0x146>
   256b2:	6106      	str	r6, [r0, #16]
   256b4:	b005      	add	sp, #20
   256b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256ba:	f843 2b04 	str.w	r2, [r3], #4
   256be:	e7d8      	b.n	25672 <__multiply+0x4e>
   256c0:	f8b1 a000 	ldrh.w	sl, [r1]
   256c4:	f1ba 0f00 	cmp.w	sl, #0
   256c8:	d024      	beq.n	25714 <__multiply+0xf0>
   256ca:	f104 0e14 	add.w	lr, r4, #20
   256ce:	46a9      	mov	r9, r5
   256d0:	f04f 0c00 	mov.w	ip, #0
   256d4:	f85e 7b04 	ldr.w	r7, [lr], #4
   256d8:	f8d9 3000 	ldr.w	r3, [r9]
   256dc:	fa1f fb87 	uxth.w	fp, r7
   256e0:	4572      	cmp	r2, lr
   256e2:	b29b      	uxth	r3, r3
   256e4:	ea4f 4717 	mov.w	r7, r7, lsr #16
   256e8:	fb0a 330b 	mla	r3, sl, fp, r3
   256ec:	4463      	add	r3, ip
   256ee:	f8d9 c000 	ldr.w	ip, [r9]
   256f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   256f6:	fb0a c707 	mla	r7, sl, r7, ip
   256fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   256fe:	b29b      	uxth	r3, r3
   25700:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   25704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   25708:	f849 3b04 	str.w	r3, [r9], #4
   2570c:	d8e2      	bhi.n	256d4 <__multiply+0xb0>
   2570e:	9b01      	ldr	r3, [sp, #4]
   25710:	f845 c003 	str.w	ip, [r5, r3]
   25714:	9b03      	ldr	r3, [sp, #12]
   25716:	3104      	adds	r1, #4
   25718:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2571c:	f1b9 0f00 	cmp.w	r9, #0
   25720:	d021      	beq.n	25766 <__multiply+0x142>
   25722:	682b      	ldr	r3, [r5, #0]
   25724:	f104 0c14 	add.w	ip, r4, #20
   25728:	46ae      	mov	lr, r5
   2572a:	f04f 0a00 	mov.w	sl, #0
   2572e:	f8bc b000 	ldrh.w	fp, [ip]
   25732:	b29b      	uxth	r3, r3
   25734:	f8be 7002 	ldrh.w	r7, [lr, #2]
   25738:	fb09 770b 	mla	r7, r9, fp, r7
   2573c:	4457      	add	r7, sl
   2573e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   25742:	f84e 3b04 	str.w	r3, [lr], #4
   25746:	f85c 3b04 	ldr.w	r3, [ip], #4
   2574a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2574e:	f8be 3000 	ldrh.w	r3, [lr]
   25752:	4562      	cmp	r2, ip
   25754:	fb09 330a 	mla	r3, r9, sl, r3
   25758:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   2575c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   25760:	d8e5      	bhi.n	2572e <__multiply+0x10a>
   25762:	9f01      	ldr	r7, [sp, #4]
   25764:	51eb      	str	r3, [r5, r7]
   25766:	3504      	adds	r5, #4
   25768:	e799      	b.n	2569e <__multiply+0x7a>
   2576a:	3e01      	subs	r6, #1
   2576c:	e79b      	b.n	256a6 <__multiply+0x82>
   2576e:	bf00      	nop
   25770:	00033744 	.word	0x00033744
   25774:	00033755 	.word	0x00033755

00025778 <__pow5mult>:
   25778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2577c:	4615      	mov	r5, r2
   2577e:	f012 0203 	ands.w	r2, r2, #3
   25782:	4607      	mov	r7, r0
   25784:	460e      	mov	r6, r1
   25786:	d007      	beq.n	25798 <__pow5mult+0x20>
   25788:	3a01      	subs	r2, #1
   2578a:	4c25      	ldr	r4, [pc, #148]	; (25820 <__pow5mult+0xa8>)
   2578c:	2300      	movs	r3, #0
   2578e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   25792:	f7ff fee9 	bl	25568 <__multadd>
   25796:	4606      	mov	r6, r0
   25798:	10ad      	asrs	r5, r5, #2
   2579a:	d03d      	beq.n	25818 <__pow5mult+0xa0>
   2579c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   2579e:	b97c      	cbnz	r4, 257c0 <__pow5mult+0x48>
   257a0:	2010      	movs	r0, #16
   257a2:	f7ff f8cb 	bl	2493c <malloc>
   257a6:	4602      	mov	r2, r0
   257a8:	6278      	str	r0, [r7, #36]	; 0x24
   257aa:	b928      	cbnz	r0, 257b8 <__pow5mult+0x40>
   257ac:	4b1d      	ldr	r3, [pc, #116]	; (25824 <__pow5mult+0xac>)
   257ae:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   257b2:	481d      	ldr	r0, [pc, #116]	; (25828 <__pow5mult+0xb0>)
   257b4:	f7ff fd76 	bl	252a4 <__assert_func>
   257b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   257bc:	6004      	str	r4, [r0, #0]
   257be:	60c4      	str	r4, [r0, #12]
   257c0:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   257c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   257c8:	b94c      	cbnz	r4, 257de <__pow5mult+0x66>
   257ca:	f240 2171 	movw	r1, #625	; 0x271
   257ce:	4638      	mov	r0, r7
   257d0:	f7ff ff12 	bl	255f8 <__i2b>
   257d4:	2300      	movs	r3, #0
   257d6:	4604      	mov	r4, r0
   257d8:	f8c8 0008 	str.w	r0, [r8, #8]
   257dc:	6003      	str	r3, [r0, #0]
   257de:	f04f 0900 	mov.w	r9, #0
   257e2:	07eb      	lsls	r3, r5, #31
   257e4:	d50a      	bpl.n	257fc <__pow5mult+0x84>
   257e6:	4631      	mov	r1, r6
   257e8:	4622      	mov	r2, r4
   257ea:	4638      	mov	r0, r7
   257ec:	f7ff ff1a 	bl	25624 <__multiply>
   257f0:	4680      	mov	r8, r0
   257f2:	4631      	mov	r1, r6
   257f4:	4638      	mov	r0, r7
   257f6:	4646      	mov	r6, r8
   257f8:	f7ff fe94 	bl	25524 <_Bfree>
   257fc:	106d      	asrs	r5, r5, #1
   257fe:	d00b      	beq.n	25818 <__pow5mult+0xa0>
   25800:	6820      	ldr	r0, [r4, #0]
   25802:	b938      	cbnz	r0, 25814 <__pow5mult+0x9c>
   25804:	4622      	mov	r2, r4
   25806:	4621      	mov	r1, r4
   25808:	4638      	mov	r0, r7
   2580a:	f7ff ff0b 	bl	25624 <__multiply>
   2580e:	6020      	str	r0, [r4, #0]
   25810:	f8c0 9000 	str.w	r9, [r0]
   25814:	4604      	mov	r4, r0
   25816:	e7e4      	b.n	257e2 <__pow5mult+0x6a>
   25818:	4630      	mov	r0, r6
   2581a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2581e:	bf00      	nop
   25820:	0002d7f0 	.word	0x0002d7f0
   25824:	000336b9 	.word	0x000336b9
   25828:	00033755 	.word	0x00033755

0002582c <__lshift>:
   2582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25830:	460c      	mov	r4, r1
   25832:	4607      	mov	r7, r0
   25834:	4691      	mov	r9, r2
   25836:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2583a:	6923      	ldr	r3, [r4, #16]
   2583c:	6849      	ldr	r1, [r1, #4]
   2583e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   25842:	68a3      	ldr	r3, [r4, #8]
   25844:	f108 0601 	add.w	r6, r8, #1
   25848:	42b3      	cmp	r3, r6
   2584a:	db0b      	blt.n	25864 <__lshift+0x38>
   2584c:	4638      	mov	r0, r7
   2584e:	f7ff fe29 	bl	254a4 <_Balloc>
   25852:	4605      	mov	r5, r0
   25854:	b948      	cbnz	r0, 2586a <__lshift+0x3e>
   25856:	4602      	mov	r2, r0
   25858:	4b28      	ldr	r3, [pc, #160]	; (258fc <__lshift+0xd0>)
   2585a:	f240 11d9 	movw	r1, #473	; 0x1d9
   2585e:	4828      	ldr	r0, [pc, #160]	; (25900 <__lshift+0xd4>)
   25860:	f7ff fd20 	bl	252a4 <__assert_func>
   25864:	3101      	adds	r1, #1
   25866:	005b      	lsls	r3, r3, #1
   25868:	e7ee      	b.n	25848 <__lshift+0x1c>
   2586a:	2300      	movs	r3, #0
   2586c:	f100 0114 	add.w	r1, r0, #20
   25870:	f100 0210 	add.w	r2, r0, #16
   25874:	4618      	mov	r0, r3
   25876:	4553      	cmp	r3, sl
   25878:	db33      	blt.n	258e2 <__lshift+0xb6>
   2587a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2587e:	f104 0314 	add.w	r3, r4, #20
   25882:	6920      	ldr	r0, [r4, #16]
   25884:	f019 091f 	ands.w	r9, r9, #31
   25888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2588c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   25890:	d02b      	beq.n	258ea <__lshift+0xbe>
   25892:	f1c9 0e20 	rsb	lr, r9, #32
   25896:	468a      	mov	sl, r1
   25898:	2200      	movs	r2, #0
   2589a:	6818      	ldr	r0, [r3, #0]
   2589c:	fa00 f009 	lsl.w	r0, r0, r9
   258a0:	4310      	orrs	r0, r2
   258a2:	f84a 0b04 	str.w	r0, [sl], #4
   258a6:	f853 2b04 	ldr.w	r2, [r3], #4
   258aa:	459c      	cmp	ip, r3
   258ac:	fa22 f20e 	lsr.w	r2, r2, lr
   258b0:	d8f3      	bhi.n	2589a <__lshift+0x6e>
   258b2:	ebac 0304 	sub.w	r3, ip, r4
   258b6:	f104 0015 	add.w	r0, r4, #21
   258ba:	3b15      	subs	r3, #21
   258bc:	f023 0303 	bic.w	r3, r3, #3
   258c0:	3304      	adds	r3, #4
   258c2:	4584      	cmp	ip, r0
   258c4:	bf38      	it	cc
   258c6:	2304      	movcc	r3, #4
   258c8:	50ca      	str	r2, [r1, r3]
   258ca:	b10a      	cbz	r2, 258d0 <__lshift+0xa4>
   258cc:	f108 0602 	add.w	r6, r8, #2
   258d0:	3e01      	subs	r6, #1
   258d2:	4638      	mov	r0, r7
   258d4:	4621      	mov	r1, r4
   258d6:	612e      	str	r6, [r5, #16]
   258d8:	f7ff fe24 	bl	25524 <_Bfree>
   258dc:	4628      	mov	r0, r5
   258de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   258e2:	3301      	adds	r3, #1
   258e4:	f842 0f04 	str.w	r0, [r2, #4]!
   258e8:	e7c5      	b.n	25876 <__lshift+0x4a>
   258ea:	3904      	subs	r1, #4
   258ec:	f853 2b04 	ldr.w	r2, [r3], #4
   258f0:	459c      	cmp	ip, r3
   258f2:	f841 2f04 	str.w	r2, [r1, #4]!
   258f6:	d8f9      	bhi.n	258ec <__lshift+0xc0>
   258f8:	e7ea      	b.n	258d0 <__lshift+0xa4>
   258fa:	bf00      	nop
   258fc:	00033744 	.word	0x00033744
   25900:	00033755 	.word	0x00033755

00025904 <__mdiff>:
   25904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25908:	4689      	mov	r9, r1
   2590a:	4606      	mov	r6, r0
   2590c:	4611      	mov	r1, r2
   2590e:	4614      	mov	r4, r2
   25910:	4648      	mov	r0, r9
   25912:	f006 fab7 	bl	2be84 <__mcmp>
   25916:	1e05      	subs	r5, r0, #0
   25918:	d112      	bne.n	25940 <__mdiff+0x3c>
   2591a:	4629      	mov	r1, r5
   2591c:	4630      	mov	r0, r6
   2591e:	f7ff fdc1 	bl	254a4 <_Balloc>
   25922:	4602      	mov	r2, r0
   25924:	b928      	cbnz	r0, 25932 <__mdiff+0x2e>
   25926:	4b40      	ldr	r3, [pc, #256]	; (25a28 <__mdiff+0x124>)
   25928:	f240 2132 	movw	r1, #562	; 0x232
   2592c:	483f      	ldr	r0, [pc, #252]	; (25a2c <__mdiff+0x128>)
   2592e:	f7ff fcb9 	bl	252a4 <__assert_func>
   25932:	2301      	movs	r3, #1
   25934:	e9c0 3504 	strd	r3, r5, [r0, #16]
   25938:	4610      	mov	r0, r2
   2593a:	b003      	add	sp, #12
   2593c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25940:	bfbc      	itt	lt
   25942:	464b      	movlt	r3, r9
   25944:	46a1      	movlt	r9, r4
   25946:	4630      	mov	r0, r6
   25948:	bfb8      	it	lt
   2594a:	2501      	movlt	r5, #1
   2594c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   25950:	bfb4      	ite	lt
   25952:	461c      	movlt	r4, r3
   25954:	2500      	movge	r5, #0
   25956:	f7ff fda5 	bl	254a4 <_Balloc>
   2595a:	4602      	mov	r2, r0
   2595c:	b918      	cbnz	r0, 25966 <__mdiff+0x62>
   2595e:	4b32      	ldr	r3, [pc, #200]	; (25a28 <__mdiff+0x124>)
   25960:	f44f 7110 	mov.w	r1, #576	; 0x240
   25964:	e7e2      	b.n	2592c <__mdiff+0x28>
   25966:	f8d9 7010 	ldr.w	r7, [r9, #16]
   2596a:	f104 0e14 	add.w	lr, r4, #20
   2596e:	6926      	ldr	r6, [r4, #16]
   25970:	f100 0b14 	add.w	fp, r0, #20
   25974:	60c5      	str	r5, [r0, #12]
   25976:	f109 0514 	add.w	r5, r9, #20
   2597a:	f109 0310 	add.w	r3, r9, #16
   2597e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   25982:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   25986:	46d9      	mov	r9, fp
   25988:	f04f 0c00 	mov.w	ip, #0
   2598c:	9301      	str	r3, [sp, #4]
   2598e:	9b01      	ldr	r3, [sp, #4]
   25990:	f85e 0b04 	ldr.w	r0, [lr], #4
   25994:	f853 af04 	ldr.w	sl, [r3, #4]!
   25998:	b281      	uxth	r1, r0
   2599a:	4576      	cmp	r6, lr
   2599c:	9301      	str	r3, [sp, #4]
   2599e:	fa1f f38a 	uxth.w	r3, sl
   259a2:	ea4f 4010 	mov.w	r0, r0, lsr #16
   259a6:	eba3 0301 	sub.w	r3, r3, r1
   259aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   259ae:	4463      	add	r3, ip
   259b0:	eb00 4023 	add.w	r0, r0, r3, asr #16
   259b4:	b29b      	uxth	r3, r3
   259b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
   259ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   259be:	f849 3b04 	str.w	r3, [r9], #4
   259c2:	d8e4      	bhi.n	2598e <__mdiff+0x8a>
   259c4:	1b33      	subs	r3, r6, r4
   259c6:	3415      	adds	r4, #21
   259c8:	3b15      	subs	r3, #21
   259ca:	f023 0303 	bic.w	r3, r3, #3
   259ce:	3304      	adds	r3, #4
   259d0:	42a6      	cmp	r6, r4
   259d2:	bf38      	it	cc
   259d4:	2304      	movcc	r3, #4
   259d6:	441d      	add	r5, r3
   259d8:	445b      	add	r3, fp
   259da:	462c      	mov	r4, r5
   259dc:	461e      	mov	r6, r3
   259de:	4544      	cmp	r4, r8
   259e0:	d30e      	bcc.n	25a00 <__mdiff+0xfc>
   259e2:	f108 0103 	add.w	r1, r8, #3
   259e6:	1b49      	subs	r1, r1, r5
   259e8:	3d03      	subs	r5, #3
   259ea:	f021 0103 	bic.w	r1, r1, #3
   259ee:	45a8      	cmp	r8, r5
   259f0:	bf38      	it	cc
   259f2:	2100      	movcc	r1, #0
   259f4:	440b      	add	r3, r1
   259f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   259fa:	b199      	cbz	r1, 25a24 <__mdiff+0x120>
   259fc:	6117      	str	r7, [r2, #16]
   259fe:	e79b      	b.n	25938 <__mdiff+0x34>
   25a00:	f854 1b04 	ldr.w	r1, [r4], #4
   25a04:	46e6      	mov	lr, ip
   25a06:	fa1f fc81 	uxth.w	ip, r1
   25a0a:	0c08      	lsrs	r0, r1, #16
   25a0c:	4471      	add	r1, lr
   25a0e:	44f4      	add	ip, lr
   25a10:	b289      	uxth	r1, r1
   25a12:	eb00 402c 	add.w	r0, r0, ip, asr #16
   25a16:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   25a1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   25a1e:	f846 1b04 	str.w	r1, [r6], #4
   25a22:	e7dc      	b.n	259de <__mdiff+0xda>
   25a24:	3f01      	subs	r7, #1
   25a26:	e7e6      	b.n	259f6 <__mdiff+0xf2>
   25a28:	00033744 	.word	0x00033744
   25a2c:	00033755 	.word	0x00033755

00025a30 <__d2b>:
   25a30:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   25a34:	2101      	movs	r1, #1
   25a36:	4690      	mov	r8, r2
   25a38:	4699      	mov	r9, r3
   25a3a:	9e08      	ldr	r6, [sp, #32]
   25a3c:	f7ff fd32 	bl	254a4 <_Balloc>
   25a40:	4604      	mov	r4, r0
   25a42:	b930      	cbnz	r0, 25a52 <__d2b+0x22>
   25a44:	4602      	mov	r2, r0
   25a46:	4b24      	ldr	r3, [pc, #144]	; (25ad8 <__d2b+0xa8>)
   25a48:	f240 310a 	movw	r1, #778	; 0x30a
   25a4c:	4823      	ldr	r0, [pc, #140]	; (25adc <__d2b+0xac>)
   25a4e:	f7ff fc29 	bl	252a4 <__assert_func>
   25a52:	f3c9 550a 	ubfx	r5, r9, #20, #11
   25a56:	f3c9 0313 	ubfx	r3, r9, #0, #20
   25a5a:	b10d      	cbz	r5, 25a60 <__d2b+0x30>
   25a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25a60:	9301      	str	r3, [sp, #4]
   25a62:	f1b8 0300 	subs.w	r3, r8, #0
   25a66:	d024      	beq.n	25ab2 <__d2b+0x82>
   25a68:	4668      	mov	r0, sp
   25a6a:	9300      	str	r3, [sp, #0]
   25a6c:	f006 f9dd 	bl	2be2a <__lo0bits>
   25a70:	e9dd 1200 	ldrd	r1, r2, [sp]
   25a74:	b1d8      	cbz	r0, 25aae <__d2b+0x7e>
   25a76:	f1c0 0320 	rsb	r3, r0, #32
   25a7a:	fa02 f303 	lsl.w	r3, r2, r3
   25a7e:	40c2      	lsrs	r2, r0
   25a80:	430b      	orrs	r3, r1
   25a82:	9201      	str	r2, [sp, #4]
   25a84:	6163      	str	r3, [r4, #20]
   25a86:	9b01      	ldr	r3, [sp, #4]
   25a88:	2b00      	cmp	r3, #0
   25a8a:	61a3      	str	r3, [r4, #24]
   25a8c:	bf0c      	ite	eq
   25a8e:	2201      	moveq	r2, #1
   25a90:	2202      	movne	r2, #2
   25a92:	6122      	str	r2, [r4, #16]
   25a94:	b1ad      	cbz	r5, 25ac2 <__d2b+0x92>
   25a96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   25a9a:	4405      	add	r5, r0
   25a9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   25aa0:	6035      	str	r5, [r6, #0]
   25aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25aa4:	6018      	str	r0, [r3, #0]
   25aa6:	4620      	mov	r0, r4
   25aa8:	b002      	add	sp, #8
   25aaa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   25aae:	6161      	str	r1, [r4, #20]
   25ab0:	e7e9      	b.n	25a86 <__d2b+0x56>
   25ab2:	a801      	add	r0, sp, #4
   25ab4:	f006 f9b9 	bl	2be2a <__lo0bits>
   25ab8:	9b01      	ldr	r3, [sp, #4]
   25aba:	3020      	adds	r0, #32
   25abc:	2201      	movs	r2, #1
   25abe:	6163      	str	r3, [r4, #20]
   25ac0:	e7e7      	b.n	25a92 <__d2b+0x62>
   25ac2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   25ac6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   25aca:	6030      	str	r0, [r6, #0]
   25acc:	6918      	ldr	r0, [r3, #16]
   25ace:	f006 f98a 	bl	2bde6 <__hi0bits>
   25ad2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   25ad6:	e7e4      	b.n	25aa2 <__d2b+0x72>
   25ad8:	00033744 	.word	0x00033744
   25adc:	00033755 	.word	0x00033755

00025ae0 <_vfiprintf_r>:
   25ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ae4:	460d      	mov	r5, r1
   25ae6:	b09d      	sub	sp, #116	; 0x74
   25ae8:	4614      	mov	r4, r2
   25aea:	4698      	mov	r8, r3
   25aec:	4606      	mov	r6, r0
   25aee:	b118      	cbz	r0, 25af8 <_vfiprintf_r+0x18>
   25af0:	6983      	ldr	r3, [r0, #24]
   25af2:	b90b      	cbnz	r3, 25af8 <_vfiprintf_r+0x18>
   25af4:	f7ff fc36 	bl	25364 <__sinit>
   25af8:	4b87      	ldr	r3, [pc, #540]	; (25d18 <_vfiprintf_r+0x238>)
   25afa:	429d      	cmp	r5, r3
   25afc:	d11b      	bne.n	25b36 <_vfiprintf_r+0x56>
   25afe:	6875      	ldr	r5, [r6, #4]
   25b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   25b02:	07d9      	lsls	r1, r3, #31
   25b04:	d405      	bmi.n	25b12 <_vfiprintf_r+0x32>
   25b06:	89ab      	ldrh	r3, [r5, #12]
   25b08:	059a      	lsls	r2, r3, #22
   25b0a:	d402      	bmi.n	25b12 <_vfiprintf_r+0x32>
   25b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   25b0e:	f7eb fde1 	bl	116d4 <__retarget_lock_acquire_recursive>
   25b12:	89ab      	ldrh	r3, [r5, #12]
   25b14:	071b      	lsls	r3, r3, #28
   25b16:	d501      	bpl.n	25b1c <_vfiprintf_r+0x3c>
   25b18:	692b      	ldr	r3, [r5, #16]
   25b1a:	b9eb      	cbnz	r3, 25b58 <_vfiprintf_r+0x78>
   25b1c:	4629      	mov	r1, r5
   25b1e:	4630      	mov	r0, r6
   25b20:	f000 f96e 	bl	25e00 <__swsetup_r>
   25b24:	b1c0      	cbz	r0, 25b58 <_vfiprintf_r+0x78>
   25b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   25b28:	07dc      	lsls	r4, r3, #31
   25b2a:	d50e      	bpl.n	25b4a <_vfiprintf_r+0x6a>
   25b2c:	f04f 30ff 	mov.w	r0, #4294967295
   25b30:	b01d      	add	sp, #116	; 0x74
   25b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b36:	4b79      	ldr	r3, [pc, #484]	; (25d1c <_vfiprintf_r+0x23c>)
   25b38:	429d      	cmp	r5, r3
   25b3a:	d101      	bne.n	25b40 <_vfiprintf_r+0x60>
   25b3c:	68b5      	ldr	r5, [r6, #8]
   25b3e:	e7df      	b.n	25b00 <_vfiprintf_r+0x20>
   25b40:	4b77      	ldr	r3, [pc, #476]	; (25d20 <_vfiprintf_r+0x240>)
   25b42:	429d      	cmp	r5, r3
   25b44:	bf08      	it	eq
   25b46:	68f5      	ldreq	r5, [r6, #12]
   25b48:	e7da      	b.n	25b00 <_vfiprintf_r+0x20>
   25b4a:	89ab      	ldrh	r3, [r5, #12]
   25b4c:	0598      	lsls	r0, r3, #22
   25b4e:	d4ed      	bmi.n	25b2c <_vfiprintf_r+0x4c>
   25b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
   25b52:	f7eb fddb 	bl	1170c <__retarget_lock_release_recursive>
   25b56:	e7e9      	b.n	25b2c <_vfiprintf_r+0x4c>
   25b58:	2300      	movs	r3, #0
   25b5a:	f8cd 800c 	str.w	r8, [sp, #12]
   25b5e:	f04f 0901 	mov.w	r9, #1
   25b62:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 25d24 <_vfiprintf_r+0x244>
   25b66:	9309      	str	r3, [sp, #36]	; 0x24
   25b68:	2320      	movs	r3, #32
   25b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   25b6e:	2330      	movs	r3, #48	; 0x30
   25b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   25b74:	4623      	mov	r3, r4
   25b76:	469a      	mov	sl, r3
   25b78:	f813 2b01 	ldrb.w	r2, [r3], #1
   25b7c:	b10a      	cbz	r2, 25b82 <_vfiprintf_r+0xa2>
   25b7e:	2a25      	cmp	r2, #37	; 0x25
   25b80:	d1f9      	bne.n	25b76 <_vfiprintf_r+0x96>
   25b82:	ebba 0b04 	subs.w	fp, sl, r4
   25b86:	d00b      	beq.n	25ba0 <_vfiprintf_r+0xc0>
   25b88:	465b      	mov	r3, fp
   25b8a:	4622      	mov	r2, r4
   25b8c:	4629      	mov	r1, r5
   25b8e:	4630      	mov	r0, r6
   25b90:	f006 f9a8 	bl	2bee4 <__sfputs_r>
   25b94:	3001      	adds	r0, #1
   25b96:	f000 80a6 	beq.w	25ce6 <_vfiprintf_r+0x206>
   25b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25b9c:	445a      	add	r2, fp
   25b9e:	9209      	str	r2, [sp, #36]	; 0x24
   25ba0:	f89a 3000 	ldrb.w	r3, [sl]
   25ba4:	2b00      	cmp	r3, #0
   25ba6:	f000 809e 	beq.w	25ce6 <_vfiprintf_r+0x206>
   25baa:	2300      	movs	r3, #0
   25bac:	f04f 32ff 	mov.w	r2, #4294967295
   25bb0:	f10a 0a01 	add.w	sl, sl, #1
   25bb4:	9304      	str	r3, [sp, #16]
   25bb6:	9307      	str	r3, [sp, #28]
   25bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   25bbc:	931a      	str	r3, [sp, #104]	; 0x68
   25bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
   25bc2:	4654      	mov	r4, sl
   25bc4:	2205      	movs	r2, #5
   25bc6:	4857      	ldr	r0, [pc, #348]	; (25d24 <_vfiprintf_r+0x244>)
   25bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
   25bcc:	f005 fe90 	bl	2b8f0 <memchr>
   25bd0:	9b04      	ldr	r3, [sp, #16]
   25bd2:	b9d0      	cbnz	r0, 25c0a <_vfiprintf_r+0x12a>
   25bd4:	06d9      	lsls	r1, r3, #27
   25bd6:	bf44      	itt	mi
   25bd8:	2220      	movmi	r2, #32
   25bda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   25bde:	071a      	lsls	r2, r3, #28
   25be0:	bf44      	itt	mi
   25be2:	222b      	movmi	r2, #43	; 0x2b
   25be4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   25be8:	f89a 2000 	ldrb.w	r2, [sl]
   25bec:	2a2a      	cmp	r2, #42	; 0x2a
   25bee:	d014      	beq.n	25c1a <_vfiprintf_r+0x13a>
   25bf0:	9a07      	ldr	r2, [sp, #28]
   25bf2:	4654      	mov	r4, sl
   25bf4:	2000      	movs	r0, #0
   25bf6:	f04f 0c0a 	mov.w	ip, #10
   25bfa:	4621      	mov	r1, r4
   25bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
   25c00:	3b30      	subs	r3, #48	; 0x30
   25c02:	2b09      	cmp	r3, #9
   25c04:	d94a      	bls.n	25c9c <_vfiprintf_r+0x1bc>
   25c06:	b970      	cbnz	r0, 25c26 <_vfiprintf_r+0x146>
   25c08:	e014      	b.n	25c34 <_vfiprintf_r+0x154>
   25c0a:	eba0 0008 	sub.w	r0, r0, r8
   25c0e:	46a2      	mov	sl, r4
   25c10:	fa09 f000 	lsl.w	r0, r9, r0
   25c14:	4318      	orrs	r0, r3
   25c16:	9004      	str	r0, [sp, #16]
   25c18:	e7d3      	b.n	25bc2 <_vfiprintf_r+0xe2>
   25c1a:	9a03      	ldr	r2, [sp, #12]
   25c1c:	1d11      	adds	r1, r2, #4
   25c1e:	6812      	ldr	r2, [r2, #0]
   25c20:	2a00      	cmp	r2, #0
   25c22:	9103      	str	r1, [sp, #12]
   25c24:	db01      	blt.n	25c2a <_vfiprintf_r+0x14a>
   25c26:	9207      	str	r2, [sp, #28]
   25c28:	e004      	b.n	25c34 <_vfiprintf_r+0x154>
   25c2a:	4252      	negs	r2, r2
   25c2c:	f043 0302 	orr.w	r3, r3, #2
   25c30:	9207      	str	r2, [sp, #28]
   25c32:	9304      	str	r3, [sp, #16]
   25c34:	7823      	ldrb	r3, [r4, #0]
   25c36:	2b2e      	cmp	r3, #46	; 0x2e
   25c38:	d10a      	bne.n	25c50 <_vfiprintf_r+0x170>
   25c3a:	7863      	ldrb	r3, [r4, #1]
   25c3c:	2b2a      	cmp	r3, #42	; 0x2a
   25c3e:	d132      	bne.n	25ca6 <_vfiprintf_r+0x1c6>
   25c40:	9b03      	ldr	r3, [sp, #12]
   25c42:	3402      	adds	r4, #2
   25c44:	1d1a      	adds	r2, r3, #4
   25c46:	681b      	ldr	r3, [r3, #0]
   25c48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   25c4c:	9203      	str	r2, [sp, #12]
   25c4e:	9305      	str	r3, [sp, #20]
   25c50:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 25d28 <_vfiprintf_r+0x248>
   25c54:	2203      	movs	r2, #3
   25c56:	7821      	ldrb	r1, [r4, #0]
   25c58:	4650      	mov	r0, sl
   25c5a:	f005 fe49 	bl	2b8f0 <memchr>
   25c5e:	b138      	cbz	r0, 25c70 <_vfiprintf_r+0x190>
   25c60:	eba0 000a 	sub.w	r0, r0, sl
   25c64:	2240      	movs	r2, #64	; 0x40
   25c66:	9b04      	ldr	r3, [sp, #16]
   25c68:	3401      	adds	r4, #1
   25c6a:	4082      	lsls	r2, r0
   25c6c:	4313      	orrs	r3, r2
   25c6e:	9304      	str	r3, [sp, #16]
   25c70:	f814 1b01 	ldrb.w	r1, [r4], #1
   25c74:	2206      	movs	r2, #6
   25c76:	482d      	ldr	r0, [pc, #180]	; (25d2c <_vfiprintf_r+0x24c>)
   25c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   25c7c:	f005 fe38 	bl	2b8f0 <memchr>
   25c80:	2800      	cmp	r0, #0
   25c82:	d03f      	beq.n	25d04 <_vfiprintf_r+0x224>
   25c84:	4b2a      	ldr	r3, [pc, #168]	; (25d30 <_vfiprintf_r+0x250>)
   25c86:	bb1b      	cbnz	r3, 25cd0 <_vfiprintf_r+0x1f0>
   25c88:	9b03      	ldr	r3, [sp, #12]
   25c8a:	3307      	adds	r3, #7
   25c8c:	f023 0307 	bic.w	r3, r3, #7
   25c90:	3308      	adds	r3, #8
   25c92:	9303      	str	r3, [sp, #12]
   25c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25c96:	443b      	add	r3, r7
   25c98:	9309      	str	r3, [sp, #36]	; 0x24
   25c9a:	e76b      	b.n	25b74 <_vfiprintf_r+0x94>
   25c9c:	fb0c 3202 	mla	r2, ip, r2, r3
   25ca0:	460c      	mov	r4, r1
   25ca2:	2001      	movs	r0, #1
   25ca4:	e7a9      	b.n	25bfa <_vfiprintf_r+0x11a>
   25ca6:	2300      	movs	r3, #0
   25ca8:	3401      	adds	r4, #1
   25caa:	f04f 0c0a 	mov.w	ip, #10
   25cae:	4619      	mov	r1, r3
   25cb0:	9305      	str	r3, [sp, #20]
   25cb2:	4620      	mov	r0, r4
   25cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
   25cb8:	3a30      	subs	r2, #48	; 0x30
   25cba:	2a09      	cmp	r2, #9
   25cbc:	d903      	bls.n	25cc6 <_vfiprintf_r+0x1e6>
   25cbe:	2b00      	cmp	r3, #0
   25cc0:	d0c6      	beq.n	25c50 <_vfiprintf_r+0x170>
   25cc2:	9105      	str	r1, [sp, #20]
   25cc4:	e7c4      	b.n	25c50 <_vfiprintf_r+0x170>
   25cc6:	fb0c 2101 	mla	r1, ip, r1, r2
   25cca:	4604      	mov	r4, r0
   25ccc:	2301      	movs	r3, #1
   25cce:	e7f0      	b.n	25cb2 <_vfiprintf_r+0x1d2>
   25cd0:	ab03      	add	r3, sp, #12
   25cd2:	462a      	mov	r2, r5
   25cd4:	a904      	add	r1, sp, #16
   25cd6:	4630      	mov	r0, r6
   25cd8:	9300      	str	r3, [sp, #0]
   25cda:	4b16      	ldr	r3, [pc, #88]	; (25d34 <_vfiprintf_r+0x254>)
   25cdc:	f7fe feda 	bl	24a94 <_printf_float>
   25ce0:	4607      	mov	r7, r0
   25ce2:	1c78      	adds	r0, r7, #1
   25ce4:	d1d6      	bne.n	25c94 <_vfiprintf_r+0x1b4>
   25ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   25ce8:	07d9      	lsls	r1, r3, #31
   25cea:	d405      	bmi.n	25cf8 <_vfiprintf_r+0x218>
   25cec:	89ab      	ldrh	r3, [r5, #12]
   25cee:	059a      	lsls	r2, r3, #22
   25cf0:	d402      	bmi.n	25cf8 <_vfiprintf_r+0x218>
   25cf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   25cf4:	f7eb fd0a 	bl	1170c <__retarget_lock_release_recursive>
   25cf8:	89ab      	ldrh	r3, [r5, #12]
   25cfa:	065b      	lsls	r3, r3, #25
   25cfc:	f53f af16 	bmi.w	25b2c <_vfiprintf_r+0x4c>
   25d00:	9809      	ldr	r0, [sp, #36]	; 0x24
   25d02:	e715      	b.n	25b30 <_vfiprintf_r+0x50>
   25d04:	ab03      	add	r3, sp, #12
   25d06:	462a      	mov	r2, r5
   25d08:	a904      	add	r1, sp, #16
   25d0a:	4630      	mov	r0, r6
   25d0c:	9300      	str	r3, [sp, #0]
   25d0e:	4b09      	ldr	r3, [pc, #36]	; (25d34 <_vfiprintf_r+0x254>)
   25d10:	f7ff f8f6 	bl	24f00 <_printf_i>
   25d14:	e7e4      	b.n	25ce0 <_vfiprintf_r+0x200>
   25d16:	bf00      	nop
   25d18:	0002d7d0 	.word	0x0002d7d0
   25d1c:	0002d7b0 	.word	0x0002d7b0
   25d20:	0002d790 	.word	0x0002d790
   25d24:	000337ca 	.word	0x000337ca
   25d28:	000337d0 	.word	0x000337d0
   25d2c:	000337d4 	.word	0x000337d4
   25d30:	00024a95 	.word	0x00024a95
   25d34:	0002bee5 	.word	0x0002bee5

00025d38 <__swbuf_r>:
   25d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d3a:	460e      	mov	r6, r1
   25d3c:	4614      	mov	r4, r2
   25d3e:	4605      	mov	r5, r0
   25d40:	b118      	cbz	r0, 25d4a <__swbuf_r+0x12>
   25d42:	6983      	ldr	r3, [r0, #24]
   25d44:	b90b      	cbnz	r3, 25d4a <__swbuf_r+0x12>
   25d46:	f7ff fb0d 	bl	25364 <__sinit>
   25d4a:	4b21      	ldr	r3, [pc, #132]	; (25dd0 <__swbuf_r+0x98>)
   25d4c:	429c      	cmp	r4, r3
   25d4e:	d110      	bne.n	25d72 <__swbuf_r+0x3a>
   25d50:	686c      	ldr	r4, [r5, #4]
   25d52:	69a3      	ldr	r3, [r4, #24]
   25d54:	60a3      	str	r3, [r4, #8]
   25d56:	89a3      	ldrh	r3, [r4, #12]
   25d58:	071a      	lsls	r2, r3, #28
   25d5a:	d501      	bpl.n	25d60 <__swbuf_r+0x28>
   25d5c:	6923      	ldr	r3, [r4, #16]
   25d5e:	b993      	cbnz	r3, 25d86 <__swbuf_r+0x4e>
   25d60:	4621      	mov	r1, r4
   25d62:	4628      	mov	r0, r5
   25d64:	f000 f84c 	bl	25e00 <__swsetup_r>
   25d68:	b168      	cbz	r0, 25d86 <__swbuf_r+0x4e>
   25d6a:	f04f 37ff 	mov.w	r7, #4294967295
   25d6e:	4638      	mov	r0, r7
   25d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25d72:	4b18      	ldr	r3, [pc, #96]	; (25dd4 <__swbuf_r+0x9c>)
   25d74:	429c      	cmp	r4, r3
   25d76:	d101      	bne.n	25d7c <__swbuf_r+0x44>
   25d78:	68ac      	ldr	r4, [r5, #8]
   25d7a:	e7ea      	b.n	25d52 <__swbuf_r+0x1a>
   25d7c:	4b16      	ldr	r3, [pc, #88]	; (25dd8 <__swbuf_r+0xa0>)
   25d7e:	429c      	cmp	r4, r3
   25d80:	bf08      	it	eq
   25d82:	68ec      	ldreq	r4, [r5, #12]
   25d84:	e7e5      	b.n	25d52 <__swbuf_r+0x1a>
   25d86:	6923      	ldr	r3, [r4, #16]
   25d88:	b2f6      	uxtb	r6, r6
   25d8a:	6820      	ldr	r0, [r4, #0]
   25d8c:	4637      	mov	r7, r6
   25d8e:	1ac0      	subs	r0, r0, r3
   25d90:	6963      	ldr	r3, [r4, #20]
   25d92:	4283      	cmp	r3, r0
   25d94:	dc05      	bgt.n	25da2 <__swbuf_r+0x6a>
   25d96:	4621      	mov	r1, r4
   25d98:	4628      	mov	r0, r5
   25d9a:	f000 f8ad 	bl	25ef8 <_fflush_r>
   25d9e:	2800      	cmp	r0, #0
   25da0:	d1e3      	bne.n	25d6a <__swbuf_r+0x32>
   25da2:	68a3      	ldr	r3, [r4, #8]
   25da4:	3001      	adds	r0, #1
   25da6:	3b01      	subs	r3, #1
   25da8:	60a3      	str	r3, [r4, #8]
   25daa:	6823      	ldr	r3, [r4, #0]
   25dac:	1c5a      	adds	r2, r3, #1
   25dae:	6022      	str	r2, [r4, #0]
   25db0:	701e      	strb	r6, [r3, #0]
   25db2:	6963      	ldr	r3, [r4, #20]
   25db4:	4283      	cmp	r3, r0
   25db6:	d004      	beq.n	25dc2 <__swbuf_r+0x8a>
   25db8:	89a3      	ldrh	r3, [r4, #12]
   25dba:	07db      	lsls	r3, r3, #31
   25dbc:	d5d7      	bpl.n	25d6e <__swbuf_r+0x36>
   25dbe:	2e0a      	cmp	r6, #10
   25dc0:	d1d5      	bne.n	25d6e <__swbuf_r+0x36>
   25dc2:	4621      	mov	r1, r4
   25dc4:	4628      	mov	r0, r5
   25dc6:	f000 f897 	bl	25ef8 <_fflush_r>
   25dca:	2800      	cmp	r0, #0
   25dcc:	d0cf      	beq.n	25d6e <__swbuf_r+0x36>
   25dce:	e7cc      	b.n	25d6a <__swbuf_r+0x32>
   25dd0:	0002d7d0 	.word	0x0002d7d0
   25dd4:	0002d7b0 	.word	0x0002d7b0
   25dd8:	0002d790 	.word	0x0002d790

00025ddc <_write_r>:
   25ddc:	b538      	push	{r3, r4, r5, lr}
   25dde:	4604      	mov	r4, r0
   25de0:	4d06      	ldr	r5, [pc, #24]	; (25dfc <_write_r+0x20>)
   25de2:	4608      	mov	r0, r1
   25de4:	4611      	mov	r1, r2
   25de6:	2200      	movs	r2, #0
   25de8:	602a      	str	r2, [r5, #0]
   25dea:	461a      	mov	r2, r3
   25dec:	f002 f91d 	bl	2802a <_write>
   25df0:	1c43      	adds	r3, r0, #1
   25df2:	d102      	bne.n	25dfa <_write_r+0x1e>
   25df4:	682b      	ldr	r3, [r5, #0]
   25df6:	b103      	cbz	r3, 25dfa <_write_r+0x1e>
   25df8:	6023      	str	r3, [r4, #0]
   25dfa:	bd38      	pop	{r3, r4, r5, pc}
   25dfc:	20021bbc 	.word	0x20021bbc

00025e00 <__swsetup_r>:
   25e00:	4b31      	ldr	r3, [pc, #196]	; (25ec8 <__swsetup_r+0xc8>)
   25e02:	b570      	push	{r4, r5, r6, lr}
   25e04:	681d      	ldr	r5, [r3, #0]
   25e06:	4606      	mov	r6, r0
   25e08:	460c      	mov	r4, r1
   25e0a:	b125      	cbz	r5, 25e16 <__swsetup_r+0x16>
   25e0c:	69ab      	ldr	r3, [r5, #24]
   25e0e:	b913      	cbnz	r3, 25e16 <__swsetup_r+0x16>
   25e10:	4628      	mov	r0, r5
   25e12:	f7ff faa7 	bl	25364 <__sinit>
   25e16:	4b2d      	ldr	r3, [pc, #180]	; (25ecc <__swsetup_r+0xcc>)
   25e18:	429c      	cmp	r4, r3
   25e1a:	d10e      	bne.n	25e3a <__swsetup_r+0x3a>
   25e1c:	686c      	ldr	r4, [r5, #4]
   25e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25e22:	071a      	lsls	r2, r3, #28
   25e24:	d42c      	bmi.n	25e80 <__swsetup_r+0x80>
   25e26:	06dd      	lsls	r5, r3, #27
   25e28:	d411      	bmi.n	25e4e <__swsetup_r+0x4e>
   25e2a:	2209      	movs	r2, #9
   25e2c:	6032      	str	r2, [r6, #0]
   25e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25e32:	f04f 30ff 	mov.w	r0, #4294967295
   25e36:	81a3      	strh	r3, [r4, #12]
   25e38:	e03d      	b.n	25eb6 <__swsetup_r+0xb6>
   25e3a:	4b25      	ldr	r3, [pc, #148]	; (25ed0 <__swsetup_r+0xd0>)
   25e3c:	429c      	cmp	r4, r3
   25e3e:	d101      	bne.n	25e44 <__swsetup_r+0x44>
   25e40:	68ac      	ldr	r4, [r5, #8]
   25e42:	e7ec      	b.n	25e1e <__swsetup_r+0x1e>
   25e44:	4b23      	ldr	r3, [pc, #140]	; (25ed4 <__swsetup_r+0xd4>)
   25e46:	429c      	cmp	r4, r3
   25e48:	bf08      	it	eq
   25e4a:	68ec      	ldreq	r4, [r5, #12]
   25e4c:	e7e7      	b.n	25e1e <__swsetup_r+0x1e>
   25e4e:	0758      	lsls	r0, r3, #29
   25e50:	d512      	bpl.n	25e78 <__swsetup_r+0x78>
   25e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
   25e54:	b141      	cbz	r1, 25e68 <__swsetup_r+0x68>
   25e56:	f104 0344 	add.w	r3, r4, #68	; 0x44
   25e5a:	4299      	cmp	r1, r3
   25e5c:	d002      	beq.n	25e64 <__swsetup_r+0x64>
   25e5e:	4630      	mov	r0, r6
   25e60:	f7fe fd74 	bl	2494c <_free_r>
   25e64:	2300      	movs	r3, #0
   25e66:	6363      	str	r3, [r4, #52]	; 0x34
   25e68:	89a3      	ldrh	r3, [r4, #12]
   25e6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   25e6e:	81a3      	strh	r3, [r4, #12]
   25e70:	2300      	movs	r3, #0
   25e72:	6063      	str	r3, [r4, #4]
   25e74:	6923      	ldr	r3, [r4, #16]
   25e76:	6023      	str	r3, [r4, #0]
   25e78:	89a3      	ldrh	r3, [r4, #12]
   25e7a:	f043 0308 	orr.w	r3, r3, #8
   25e7e:	81a3      	strh	r3, [r4, #12]
   25e80:	6923      	ldr	r3, [r4, #16]
   25e82:	b94b      	cbnz	r3, 25e98 <__swsetup_r+0x98>
   25e84:	89a3      	ldrh	r3, [r4, #12]
   25e86:	f403 7320 	and.w	r3, r3, #640	; 0x280
   25e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   25e8e:	d003      	beq.n	25e98 <__swsetup_r+0x98>
   25e90:	4621      	mov	r1, r4
   25e92:	4630      	mov	r0, r6
   25e94:	f000 f87e 	bl	25f94 <__smakebuf_r>
   25e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25e9c:	f013 0201 	ands.w	r2, r3, #1
   25ea0:	d00a      	beq.n	25eb8 <__swsetup_r+0xb8>
   25ea2:	2200      	movs	r2, #0
   25ea4:	60a2      	str	r2, [r4, #8]
   25ea6:	6962      	ldr	r2, [r4, #20]
   25ea8:	4252      	negs	r2, r2
   25eaa:	61a2      	str	r2, [r4, #24]
   25eac:	6922      	ldr	r2, [r4, #16]
   25eae:	b942      	cbnz	r2, 25ec2 <__swsetup_r+0xc2>
   25eb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   25eb4:	d1bb      	bne.n	25e2e <__swsetup_r+0x2e>
   25eb6:	bd70      	pop	{r4, r5, r6, pc}
   25eb8:	0799      	lsls	r1, r3, #30
   25eba:	bf58      	it	pl
   25ebc:	6962      	ldrpl	r2, [r4, #20]
   25ebe:	60a2      	str	r2, [r4, #8]
   25ec0:	e7f4      	b.n	25eac <__swsetup_r+0xac>
   25ec2:	2000      	movs	r0, #0
   25ec4:	e7f7      	b.n	25eb6 <__swsetup_r+0xb6>
   25ec6:	bf00      	nop
   25ec8:	200088c0 	.word	0x200088c0
   25ecc:	0002d7d0 	.word	0x0002d7d0
   25ed0:	0002d7b0 	.word	0x0002d7b0
   25ed4:	0002d790 	.word	0x0002d790

00025ed8 <_close_r>:
   25ed8:	b538      	push	{r3, r4, r5, lr}
   25eda:	2300      	movs	r3, #0
   25edc:	4d05      	ldr	r5, [pc, #20]	; (25ef4 <_close_r+0x1c>)
   25ede:	4604      	mov	r4, r0
   25ee0:	4608      	mov	r0, r1
   25ee2:	602b      	str	r3, [r5, #0]
   25ee4:	f002 f8a5 	bl	28032 <_close>
   25ee8:	1c43      	adds	r3, r0, #1
   25eea:	d102      	bne.n	25ef2 <_close_r+0x1a>
   25eec:	682b      	ldr	r3, [r5, #0]
   25eee:	b103      	cbz	r3, 25ef2 <_close_r+0x1a>
   25ef0:	6023      	str	r3, [r4, #0]
   25ef2:	bd38      	pop	{r3, r4, r5, pc}
   25ef4:	20021bbc 	.word	0x20021bbc

00025ef8 <_fflush_r>:
   25ef8:	b538      	push	{r3, r4, r5, lr}
   25efa:	690b      	ldr	r3, [r1, #16]
   25efc:	4605      	mov	r5, r0
   25efe:	460c      	mov	r4, r1
   25f00:	b913      	cbnz	r3, 25f08 <_fflush_r+0x10>
   25f02:	2500      	movs	r5, #0
   25f04:	4628      	mov	r0, r5
   25f06:	bd38      	pop	{r3, r4, r5, pc}
   25f08:	b118      	cbz	r0, 25f12 <_fflush_r+0x1a>
   25f0a:	6983      	ldr	r3, [r0, #24]
   25f0c:	b90b      	cbnz	r3, 25f12 <_fflush_r+0x1a>
   25f0e:	f7ff fa29 	bl	25364 <__sinit>
   25f12:	4b14      	ldr	r3, [pc, #80]	; (25f64 <_fflush_r+0x6c>)
   25f14:	429c      	cmp	r4, r3
   25f16:	d11b      	bne.n	25f50 <_fflush_r+0x58>
   25f18:	686c      	ldr	r4, [r5, #4]
   25f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25f1e:	2b00      	cmp	r3, #0
   25f20:	d0ef      	beq.n	25f02 <_fflush_r+0xa>
   25f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
   25f24:	07d0      	lsls	r0, r2, #31
   25f26:	d404      	bmi.n	25f32 <_fflush_r+0x3a>
   25f28:	0599      	lsls	r1, r3, #22
   25f2a:	d402      	bmi.n	25f32 <_fflush_r+0x3a>
   25f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25f2e:	f7eb fbd1 	bl	116d4 <__retarget_lock_acquire_recursive>
   25f32:	4628      	mov	r0, r5
   25f34:	4621      	mov	r1, r4
   25f36:	f006 f831 	bl	2bf9c <__sflush_r>
   25f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25f3c:	4605      	mov	r5, r0
   25f3e:	07da      	lsls	r2, r3, #31
   25f40:	d4e0      	bmi.n	25f04 <_fflush_r+0xc>
   25f42:	89a3      	ldrh	r3, [r4, #12]
   25f44:	059b      	lsls	r3, r3, #22
   25f46:	d4dd      	bmi.n	25f04 <_fflush_r+0xc>
   25f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25f4a:	f7eb fbdf 	bl	1170c <__retarget_lock_release_recursive>
   25f4e:	e7d9      	b.n	25f04 <_fflush_r+0xc>
   25f50:	4b05      	ldr	r3, [pc, #20]	; (25f68 <_fflush_r+0x70>)
   25f52:	429c      	cmp	r4, r3
   25f54:	d101      	bne.n	25f5a <_fflush_r+0x62>
   25f56:	68ac      	ldr	r4, [r5, #8]
   25f58:	e7df      	b.n	25f1a <_fflush_r+0x22>
   25f5a:	4b04      	ldr	r3, [pc, #16]	; (25f6c <_fflush_r+0x74>)
   25f5c:	429c      	cmp	r4, r3
   25f5e:	bf08      	it	eq
   25f60:	68ec      	ldreq	r4, [r5, #12]
   25f62:	e7da      	b.n	25f1a <_fflush_r+0x22>
   25f64:	0002d7d0 	.word	0x0002d7d0
   25f68:	0002d7b0 	.word	0x0002d7b0
   25f6c:	0002d790 	.word	0x0002d790

00025f70 <_lseek_r>:
   25f70:	b538      	push	{r3, r4, r5, lr}
   25f72:	4604      	mov	r4, r0
   25f74:	4d06      	ldr	r5, [pc, #24]	; (25f90 <_lseek_r+0x20>)
   25f76:	4608      	mov	r0, r1
   25f78:	4611      	mov	r1, r2
   25f7a:	2200      	movs	r2, #0
   25f7c:	602a      	str	r2, [r5, #0]
   25f7e:	461a      	mov	r2, r3
   25f80:	f002 f85a 	bl	28038 <_lseek>
   25f84:	1c43      	adds	r3, r0, #1
   25f86:	d102      	bne.n	25f8e <_lseek_r+0x1e>
   25f88:	682b      	ldr	r3, [r5, #0]
   25f8a:	b103      	cbz	r3, 25f8e <_lseek_r+0x1e>
   25f8c:	6023      	str	r3, [r4, #0]
   25f8e:	bd38      	pop	{r3, r4, r5, pc}
   25f90:	20021bbc 	.word	0x20021bbc

00025f94 <__smakebuf_r>:
   25f94:	898b      	ldrh	r3, [r1, #12]
   25f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25f98:	079d      	lsls	r5, r3, #30
   25f9a:	4606      	mov	r6, r0
   25f9c:	460c      	mov	r4, r1
   25f9e:	d507      	bpl.n	25fb0 <__smakebuf_r+0x1c>
   25fa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   25fa4:	6023      	str	r3, [r4, #0]
   25fa6:	6123      	str	r3, [r4, #16]
   25fa8:	2301      	movs	r3, #1
   25faa:	6163      	str	r3, [r4, #20]
   25fac:	b003      	add	sp, #12
   25fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25fb0:	ab01      	add	r3, sp, #4
   25fb2:	466a      	mov	r2, sp
   25fb4:	f006 f871 	bl	2c09a <__swhatbuf_r>
   25fb8:	9f00      	ldr	r7, [sp, #0]
   25fba:	4605      	mov	r5, r0
   25fbc:	4630      	mov	r0, r6
   25fbe:	4639      	mov	r1, r7
   25fc0:	f7fe fd0e 	bl	249e0 <_malloc_r>
   25fc4:	b948      	cbnz	r0, 25fda <__smakebuf_r+0x46>
   25fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25fca:	059a      	lsls	r2, r3, #22
   25fcc:	d4ee      	bmi.n	25fac <__smakebuf_r+0x18>
   25fce:	f023 0303 	bic.w	r3, r3, #3
   25fd2:	f043 0302 	orr.w	r3, r3, #2
   25fd6:	81a3      	strh	r3, [r4, #12]
   25fd8:	e7e2      	b.n	25fa0 <__smakebuf_r+0xc>
   25fda:	4b0d      	ldr	r3, [pc, #52]	; (26010 <__smakebuf_r+0x7c>)
   25fdc:	62b3      	str	r3, [r6, #40]	; 0x28
   25fde:	89a3      	ldrh	r3, [r4, #12]
   25fe0:	6020      	str	r0, [r4, #0]
   25fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   25fe6:	81a3      	strh	r3, [r4, #12]
   25fe8:	9b01      	ldr	r3, [sp, #4]
   25fea:	e9c4 0704 	strd	r0, r7, [r4, #16]
   25fee:	b15b      	cbz	r3, 26008 <__smakebuf_r+0x74>
   25ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   25ff4:	4630      	mov	r0, r6
   25ff6:	f000 f84b 	bl	26090 <_isatty_r>
   25ffa:	b128      	cbz	r0, 26008 <__smakebuf_r+0x74>
   25ffc:	89a3      	ldrh	r3, [r4, #12]
   25ffe:	f023 0303 	bic.w	r3, r3, #3
   26002:	f043 0301 	orr.w	r3, r3, #1
   26006:	81a3      	strh	r3, [r4, #12]
   26008:	89a3      	ldrh	r3, [r4, #12]
   2600a:	431d      	orrs	r5, r3
   2600c:	81a5      	strh	r5, [r4, #12]
   2600e:	e7cd      	b.n	25fac <__smakebuf_r+0x18>
   26010:	00025329 	.word	0x00025329

00026014 <_read_r>:
   26014:	b538      	push	{r3, r4, r5, lr}
   26016:	4604      	mov	r4, r0
   26018:	4d06      	ldr	r5, [pc, #24]	; (26034 <_read_r+0x20>)
   2601a:	4608      	mov	r0, r1
   2601c:	4611      	mov	r1, r2
   2601e:	2200      	movs	r2, #0
   26020:	602a      	str	r2, [r5, #0]
   26022:	461a      	mov	r2, r3
   26024:	f001 fffd 	bl	28022 <_read>
   26028:	1c43      	adds	r3, r0, #1
   2602a:	d102      	bne.n	26032 <_read_r+0x1e>
   2602c:	682b      	ldr	r3, [r5, #0]
   2602e:	b103      	cbz	r3, 26032 <_read_r+0x1e>
   26030:	6023      	str	r3, [r4, #0]
   26032:	bd38      	pop	{r3, r4, r5, pc}
   26034:	20021bbc 	.word	0x20021bbc

00026038 <raise>:
   26038:	4b02      	ldr	r3, [pc, #8]	; (26044 <raise+0xc>)
   2603a:	4601      	mov	r1, r0
   2603c:	6818      	ldr	r0, [r3, #0]
   2603e:	f006 b863 	b.w	2c108 <_raise_r>
   26042:	bf00      	nop
   26044:	200088c0 	.word	0x200088c0

00026048 <_kill_r>:
   26048:	b538      	push	{r3, r4, r5, lr}
   2604a:	2300      	movs	r3, #0
   2604c:	4d06      	ldr	r5, [pc, #24]	; (26068 <_kill_r+0x20>)
   2604e:	4604      	mov	r4, r0
   26050:	4608      	mov	r0, r1
   26052:	4611      	mov	r1, r2
   26054:	602b      	str	r3, [r5, #0]
   26056:	f001 fff6 	bl	28046 <_kill>
   2605a:	1c43      	adds	r3, r0, #1
   2605c:	d102      	bne.n	26064 <_kill_r+0x1c>
   2605e:	682b      	ldr	r3, [r5, #0]
   26060:	b103      	cbz	r3, 26064 <_kill_r+0x1c>
   26062:	6023      	str	r3, [r4, #0]
   26064:	bd38      	pop	{r3, r4, r5, pc}
   26066:	bf00      	nop
   26068:	20021bbc 	.word	0x20021bbc

0002606c <_fstat_r>:
   2606c:	b538      	push	{r3, r4, r5, lr}
   2606e:	2300      	movs	r3, #0
   26070:	4d06      	ldr	r5, [pc, #24]	; (2608c <_fstat_r+0x20>)
   26072:	4604      	mov	r4, r0
   26074:	4608      	mov	r0, r1
   26076:	4611      	mov	r1, r2
   26078:	602b      	str	r3, [r5, #0]
   2607a:	f001 ffe8 	bl	2804e <_fstat>
   2607e:	1c43      	adds	r3, r0, #1
   26080:	d102      	bne.n	26088 <_fstat_r+0x1c>
   26082:	682b      	ldr	r3, [r5, #0]
   26084:	b103      	cbz	r3, 26088 <_fstat_r+0x1c>
   26086:	6023      	str	r3, [r4, #0]
   26088:	bd38      	pop	{r3, r4, r5, pc}
   2608a:	bf00      	nop
   2608c:	20021bbc 	.word	0x20021bbc

00026090 <_isatty_r>:
   26090:	b538      	push	{r3, r4, r5, lr}
   26092:	2300      	movs	r3, #0
   26094:	4d05      	ldr	r5, [pc, #20]	; (260ac <_isatty_r+0x1c>)
   26096:	4604      	mov	r4, r0
   26098:	4608      	mov	r0, r1
   2609a:	602b      	str	r3, [r5, #0]
   2609c:	f001 ffce 	bl	2803c <_isatty>
   260a0:	1c43      	adds	r3, r0, #1
   260a2:	d102      	bne.n	260aa <_isatty_r+0x1a>
   260a4:	682b      	ldr	r3, [r5, #0]
   260a6:	b103      	cbz	r3, 260aa <_isatty_r+0x1a>
   260a8:	6023      	str	r3, [r4, #0]
   260aa:	bd38      	pop	{r3, r4, r5, pc}
   260ac:	20021bbc 	.word	0x20021bbc

000260b0 <z_log_msg_static_create.constprop.0>:
   260b0:	2300      	movs	r3, #0
   260b2:	f7e8 ba6d 	b.w	e590 <z_impl_z_log_msg_static_create>

000260b6 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   260b6:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   260b8:	6883      	ldr	r3, [r0, #8]
   260ba:	2228      	movs	r2, #40	; 0x28
   260bc:	68dc      	ldr	r4, [r3, #12]
   260be:	2332      	movs	r3, #50	; 0x32
   260c0:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   260c2:	bc10      	pop	{r4}
   260c4:	4760      	bx	ip

000260c6 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   260c6:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   260c8:	6883      	ldr	r3, [r0, #8]
   260ca:	685c      	ldr	r4, [r3, #4]
   260cc:	f04f 33ff 	mov.w	r3, #4294967295
   260d0:	46a4      	mov	ip, r4
}
   260d2:	bc10      	pop	{r4}
   260d4:	4760      	bx	ip

000260d6 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   260d6:	f7fb bc3f 	b.w	21958 <z_impl_k_sem_take>

000260da <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   260da:	6883      	ldr	r3, [r0, #8]
   260dc:	69db      	ldr	r3, [r3, #28]
   260de:	b10b      	cbz	r3, 260e4 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   260e0:	2201      	movs	r2, #1
   260e2:	4718      	bx	r3
}
   260e4:	4770      	bx	lr

000260e6 <send_protobuf>:
void send_protobuf(void){
   260e6:	b510      	push	{r4, lr}
   260e8:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
    buf_proto=send_array_dd_v0(); 
   260ec:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   260f0:	4620      	mov	r0, r4
   260f2:	f7e5 fc51 	bl	b998 <send_array_dd_v0>
    send_bluetooth(buf_proto);
   260f6:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   260fa:	f240 72cc 	movw	r2, #1996	; 0x7cc
   260fe:	4668      	mov	r0, sp
   26100:	f005 fc14 	bl	2b92c <memcpy>
   26104:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   26108:	f7e5 f8e4 	bl	b2d4 <send_bluetooth>
}
   2610c:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   26110:	bd10      	pop	{r4, pc}

00026112 <error>:
{
   26112:	b508      	push	{r3, lr}
	turn_off_all_leds();
   26114:	f7e5 fa3e 	bl	b594 <turn_off_all_leds>
	return z_impl_k_sleep(timeout);
   26118:	2100      	movs	r1, #0
   2611a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2611e:	f7fd facb 	bl	236b8 <z_impl_k_sleep>
	while (true) {
   26122:	e7f9      	b.n	26118 <error+0x6>

00026124 <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   26124:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   26126:	6806      	ldr	r6, [r0, #0]
   26128:	8902      	ldrh	r2, [r0, #8]
   2612a:	8a33      	ldrh	r3, [r6, #16]
   2612c:	429a      	cmp	r2, r3
   2612e:	d271      	bcs.n	26214 <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   26130:	6831      	ldr	r1, [r6, #0]
   26132:	8942      	ldrh	r2, [r0, #10]
   26134:	0093      	lsls	r3, r2, #2
   26136:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   2613a:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   2613e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   26142:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   26144:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   26146:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   2614a:	d01f      	beq.n	2618c <load_descriptor_values+0x68>
   2614c:	2902      	cmp	r1, #2
   2614e:	d02a      	beq.n	261a6 <load_descriptor_values+0x82>
   26150:	2900      	cmp	r1, #0
   26152:	d135      	bne.n	261c0 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   26154:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   26158:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   2615c:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   26160:	0f12      	lsrs	r2, r2, #28
   26162:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   26164:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   26166:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   2616a:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   2616c:	2a00      	cmp	r2, #0
   2616e:	d134      	bne.n	261da <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   26170:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   26172:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   26174:	f004 040e 	and.w	r4, r4, #14
   26178:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   2617a:	bf11      	iteee	ne
   2617c:	2300      	movne	r3, #0
   2617e:	89c2      	ldrheq	r2, [r0, #14]
   26180:	6873      	ldreq	r3, [r6, #4]
   26182:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   26186:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   26188:	2001      	movs	r0, #1
}
   2618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2618c:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   2618e:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   26192:	4419      	add	r1, r3
   26194:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   26196:	0f0b      	lsrs	r3, r1, #28
   26198:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   2619c:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   2619e:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   261a0:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   261a4:	e7dd      	b.n	26162 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   261a6:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   261a8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   261ac:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   261ae:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   261b2:	0a1a      	lsrs	r2, r3, #8
   261b4:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   261b8:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   261ba:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   261bc:	898a      	ldrh	r2, [r1, #12]
            break;
   261be:	e7d0      	b.n	26162 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   261c0:	6832      	ldr	r2, [r6, #0]
   261c2:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   261c4:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   261c8:	0a19      	lsrs	r1, r3, #8
   261ca:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   261ce:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   261d2:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   261d4:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   261d6:	b25b      	sxtb	r3, r3
            break;
   261d8:	e7c3      	b.n	26162 <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   261da:	443a      	add	r2, r7
   261dc:	6182      	str	r2, [r0, #24]
        if (size_offset)
   261de:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   261e2:	b123      	cbz	r3, 261ee <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   261e4:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   261e6:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   261e8:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   261ea:	d109      	bne.n	26200 <load_descriptor_values+0xdc>
   261ec:	e00f      	b.n	2620e <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   261ee:	f004 0530 	and.w	r5, r4, #48	; 0x30
   261f2:	2d20      	cmp	r5, #32
   261f4:	d1f7      	bne.n	261e6 <load_descriptor_values+0xc2>
   261f6:	2c3f      	cmp	r4, #63	; 0x3f
   261f8:	d804      	bhi.n	26204 <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   261fa:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   261fe:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   26200:	61c2      	str	r2, [r0, #28]
   26202:	e7b7      	b.n	26174 <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   26204:	2980      	cmp	r1, #128	; 0x80
   26206:	d1fa      	bne.n	261fe <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   26208:	f100 0314 	add.w	r3, r0, #20
   2620c:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   2620e:	6813      	ldr	r3, [r2, #0]
   26210:	61c3      	str	r3, [r0, #28]
   26212:	e7af      	b.n	26174 <load_descriptor_values+0x50>
        return false;
   26214:	2000      	movs	r0, #0
   26216:	e7b8      	b.n	2618a <load_descriptor_values+0x66>

00026218 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   26218:	8903      	ldrh	r3, [r0, #8]
{
   2621a:	b510      	push	{r4, lr}
    iter->index++;
   2621c:	3301      	adds	r3, #1
   2621e:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   26220:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   26222:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   26224:	8a0a      	ldrh	r2, [r1, #16]
   26226:	429a      	cmp	r2, r3
   26228:	d803      	bhi.n	26232 <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   2622a:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   2622c:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   26230:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   26232:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   26234:	680b      	ldr	r3, [r1, #0]
   26236:	8942      	ldrh	r2, [r0, #10]
   26238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   2623c:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2623e:	f001 0103 	and.w	r1, r1, #3
   26242:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   26246:	440a      	add	r2, r1
   26248:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   2624a:	8982      	ldrh	r2, [r0, #12]
   2624c:	f003 0130 	and.w	r1, r3, #48	; 0x30
   26250:	2900      	cmp	r1, #0
   26252:	bf08      	it	eq
   26254:	3201      	addeq	r2, #1
   26256:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   26258:	89c2      	ldrh	r2, [r0, #14]
   2625a:	f003 030e 	and.w	r3, r3, #14
   2625e:	2b08      	cmp	r3, #8
   26260:	bf08      	it	eq
   26262:	3201      	addeq	r2, #1
   26264:	81c2      	strh	r2, [r0, #14]
}
   26266:	e7e3      	b.n	26230 <advance_iterator+0x18>

00026268 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   26268:	b570      	push	{r4, r5, r6, lr}
   2626a:	4604      	mov	r4, r0
   2626c:	460e      	mov	r6, r1
   2626e:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   26270:	2100      	movs	r1, #0
   26272:	2220      	movs	r2, #32
   26274:	3008      	adds	r0, #8
   26276:	f005 fb93 	bl	2b9a0 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   2627a:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   2627e:	4620      	mov	r0, r4
}
   26280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   26284:	f7ff bf4e 	b.w	26124 <load_descriptor_values>

00026288 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   26288:	b538      	push	{r3, r4, r5, lr}
   2628a:	460c      	mov	r4, r1
   2628c:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   2628e:	680b      	ldr	r3, [r1, #0]
   26290:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   26292:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   26294:	681b      	ldr	r3, [r3, #0]
   26296:	0a1b      	lsrs	r3, r3, #8
   26298:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2629c:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2629e:	bf14      	ite	ne
   262a0:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   262a2:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   262a4:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   262a6:	f7ff ffdf 	bl	26268 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   262aa:	622c      	str	r4, [r5, #32]
    return status;
}
   262ac:	bd38      	pop	{r3, r4, r5, pc}

000262ae <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   262ae:	b510      	push	{r4, lr}
   262b0:	4604      	mov	r4, r0
    advance_iterator(iter);
   262b2:	f7ff ffb1 	bl	26218 <advance_iterator>
    (void)load_descriptor_values(iter);
   262b6:	f7ff ff35 	bl	26124 <load_descriptor_values>
    return iter->index != 0;
   262ba:	8920      	ldrh	r0, [r4, #8]
}
   262bc:	3800      	subs	r0, #0
   262be:	bf18      	it	ne
   262c0:	2001      	movne	r0, #1
   262c2:	bd10      	pop	{r4, pc}

000262c4 <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   262c4:	f7ff bfd0 	b.w	26268 <pb_field_iter_begin>

000262c8 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   262c8:	f7ff bfde 	b.w	26288 <pb_field_iter_begin_extension>

000262cc <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   262cc:	b410      	push	{r4}
   262ce:	460b      	mov	r3, r1
   262d0:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   262d2:	8a52      	ldrh	r2, [r2, #18]
   262d4:	2a08      	cmp	r2, #8
   262d6:	d10e      	bne.n	262f6 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   262d8:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   262da:	b162      	cbz	r2, 262f6 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   262dc:	b128      	cbz	r0, 262ea <pb_default_field_callback+0x1e>
   262de:	6814      	ldr	r4, [r2, #0]
   262e0:	b11c      	cbz	r4, 262ea <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   262e2:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   262e4:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   262e6:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   262e8:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   262ea:	b123      	cbz	r3, 262f6 <pb_default_field_callback+0x2a>
   262ec:	6814      	ldr	r4, [r2, #0]
   262ee:	b114      	cbz	r4, 262f6 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   262f0:	4618      	mov	r0, r3
   262f2:	3204      	adds	r2, #4
   262f4:	e7f6      	b.n	262e4 <pb_default_field_callback+0x18>
}
   262f6:	2001      	movs	r0, #1
   262f8:	bc10      	pop	{r4}
   262fa:	4770      	bx	lr

000262fc <buf_write>:
{
   262fc:	4603      	mov	r3, r0
   262fe:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   26300:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   26302:	1884      	adds	r4, r0, r2
   26304:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26306:	f005 fb11 	bl	2b92c <memcpy>
}
   2630a:	2001      	movs	r0, #1
   2630c:	bd10      	pop	{r4, pc}

0002630e <pb_encode_varint>:
{
   2630e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   26310:	2a80      	cmp	r2, #128	; 0x80
{
   26312:	b085      	sub	sp, #20
    if (value <= 0x7F)
   26314:	f173 0100 	sbcs.w	r1, r3, #0
{
   26318:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   2631a:	b2d4      	uxtb	r4, r2
   2631c:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2631e:	d206      	bcs.n	2632e <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   26320:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   26322:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   26326:	f7e5 fca3 	bl	bc70 <pb_write>
}
   2632a:	b005      	add	sp, #20
   2632c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2632e:	09d5      	lsrs	r5, r2, #7
   26330:	4608      	mov	r0, r1
    size_t i = 0;
   26332:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   26334:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   26338:	ea53 0c05 	orrs.w	ip, r3, r5
   2633c:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2633e:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   26342:	d108      	bne.n	26356 <pb_encode_varint+0x48>
   26344:	463a      	mov	r2, r7
    buffer[i++] = byte;
   26346:	f102 0310 	add.w	r3, r2, #16
   2634a:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2634c:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2634e:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   26352:	3201      	adds	r2, #1
   26354:	e7e7      	b.n	26326 <pb_encode_varint+0x18>
        byte |= 0x80;
   26356:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2635a:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   2635c:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   26360:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   26364:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   26368:	d1e6      	bne.n	26338 <pb_encode_varint+0x2a>
    if (high)
   2636a:	2b00      	cmp	r3, #0
   2636c:	d0eb      	beq.n	26346 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2636e:	0118      	lsls	r0, r3, #4
   26370:	f000 0070 	and.w	r0, r0, #112	; 0x70
   26374:	4304      	orrs	r4, r0
        high >>= 3;
   26376:	08db      	lsrs	r3, r3, #3
        while (high)
   26378:	2b00      	cmp	r3, #0
   2637a:	d0e4      	beq.n	26346 <pb_encode_varint+0x38>
            byte |= 0x80;
   2637c:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   26380:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   26382:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   26386:	3201      	adds	r2, #1
   26388:	09db      	lsrs	r3, r3, #7
   2638a:	e7f5      	b.n	26378 <pb_encode_varint+0x6a>

0002638c <pb_encode_svarint>:
    if (value < 0)
   2638c:	1892      	adds	r2, r2, r2
   2638e:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   26392:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   26396:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   2639a:	f7ff bfb8 	b.w	2630e <pb_encode_varint>

0002639e <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   2639e:	2204      	movs	r2, #4
   263a0:	f7e5 bc66 	b.w	bc70 <pb_write>

000263a4 <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   263a4:	2208      	movs	r2, #8
   263a6:	f7e5 bc63 	b.w	bc70 <pb_write>

000263aa <pb_encode_tag>:
{
   263aa:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   263ac:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   263b0:	0f5b      	lsrs	r3, r3, #29
   263b2:	f7ff bfac 	b.w	2630e <pb_encode_varint>

000263b6 <pb_encode_string>:
{
   263b6:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   263b8:	2300      	movs	r3, #0
{
   263ba:	4604      	mov	r4, r0
   263bc:	460d      	mov	r5, r1
   263be:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   263c0:	f7ff ffa5 	bl	2630e <pb_encode_varint>
   263c4:	b130      	cbz	r0, 263d4 <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   263c6:	4632      	mov	r2, r6
   263c8:	4629      	mov	r1, r5
   263ca:	4620      	mov	r0, r4
}
   263cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   263d0:	f7e5 bc4e 	b.w	bc70 <pb_write>
}
   263d4:	bd70      	pop	{r4, r5, r6, pc}

000263d6 <cbpprintf_external>:
{
   263d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   263da:	4606      	mov	r6, r0
   263dc:	460d      	mov	r5, r1
   263de:	4617      	mov	r7, r2
	if (buf == NULL) {
   263e0:	4698      	mov	r8, r3
   263e2:	b32b      	cbz	r3, 26430 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   263e4:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   263e8:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   263ec:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   263f0:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   263f2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   263f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   263f8:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   263fc:	441c      	add	r4, r3
   263fe:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   26400:	45ca      	cmp	sl, r9
   26402:	d309      	bcc.n	26418 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   26404:	4639      	mov	r1, r7
   26406:	4630      	mov	r0, r6
   26408:	46ac      	mov	ip, r5
   2640a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2640e:	f108 0308 	add.w	r3, r8, #8
}
   26412:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   26416:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   26418:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2641c:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   26420:	4620      	mov	r0, r4
		*ps = s;
   26422:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   26426:	f7e2 ff9b 	bl	9360 <strlen>
   2642a:	3001      	adds	r0, #1
   2642c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2642e:	e7e7      	b.n	26400 <cbpprintf_external+0x2a>
}
   26430:	f06f 0015 	mvn.w	r0, #21
   26434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026438 <is_ptr>:
{
   26438:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2643a:	2500      	movs	r5, #0
{
   2643c:	4602      	mov	r2, r0
	bool mod = false;
   2643e:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   26440:	4614      	mov	r4, r2
   26442:	f814 3b01 	ldrb.w	r3, [r4], #1
   26446:	b90b      	cbnz	r3, 2644c <is_ptr+0x14>
					return false;
   26448:	4618      	mov	r0, r3
   2644a:	e009      	b.n	26460 <is_ptr+0x28>
		if (mod) {
   2644c:	b198      	cbz	r0, 26476 <is_ptr+0x3e>
			if (cnt == n) {
   2644e:	428d      	cmp	r5, r1
   26450:	d107      	bne.n	26462 <is_ptr+0x2a>
				if (c == 'p') {
   26452:	2b70      	cmp	r3, #112	; 0x70
   26454:	d004      	beq.n	26460 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   26456:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2645a:	2a3a      	cmp	r2, #58	; 0x3a
   2645c:	d80b      	bhi.n	26476 <is_ptr+0x3e>
					return false;
   2645e:	2000      	movs	r0, #0
}
   26460:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   26462:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   26466:	2e3a      	cmp	r6, #58	; 0x3a
   26468:	d805      	bhi.n	26476 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2646a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2646c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2646e:	1c94      	adds	r4, r2, #2
   26470:	2b00      	cmp	r3, #0
   26472:	d0e9      	beq.n	26448 <is_ptr+0x10>
   26474:	2000      	movs	r0, #0
		if (c == '%') {
   26476:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   26478:	4622      	mov	r2, r4
			mod = !mod;
   2647a:	bf08      	it	eq
   2647c:	f080 0001 	eoreq.w	r0, r0, #1
   26480:	e7de      	b.n	26440 <is_ptr+0x8>

00026482 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   26482:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   26484:	2364      	movs	r3, #100	; 0x64
{
   26486:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   26488:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2648a:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2648c:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   2648e:	b969      	cbnz	r1, 264ac <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   26490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26492:	429a      	cmp	r2, r3
   26494:	fbb2 f4f3 	udiv	r4, r2, r3
   26498:	d20c      	bcs.n	264b4 <u8_to_dec+0x32>
   2649a:	2b01      	cmp	r3, #1
   2649c:	d00a      	beq.n	264b4 <u8_to_dec+0x32>
   2649e:	b948      	cbnz	r0, 264b4 <u8_to_dec+0x32>
		value -= digit * divisor;
   264a0:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   264a4:	240a      	movs	r4, #10
   264a6:	fbb3 f3f4 	udiv	r3, r3, r4
   264aa:	b2d2      	uxtb	r2, r2
	while (buflen > 0 && divisor > 0) {
   264ac:	3e01      	subs	r6, #1
   264ae:	d1f0      	bne.n	26492 <u8_to_dec+0x10>
		*buf = '\0';
   264b0:	702e      	strb	r6, [r5, #0]
	return num_digits;
   264b2:	e7ed      	b.n	26490 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   264b4:	3430      	adds	r4, #48	; 0x30
   264b6:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   264ba:	fbb2 f4f3 	udiv	r4, r2, r3
   264be:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   264c2:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   264c6:	3901      	subs	r1, #1
			num_digits++;
   264c8:	3001      	adds	r0, #1
			buflen--;
   264ca:	b2c9      	uxtb	r1, r1
			num_digits++;
   264cc:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   264ce:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   264d0:	b2db      	uxtb	r3, r3
   264d2:	e7dc      	b.n	2648e <u8_to_dec+0xc>

000264d4 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   264d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   264d8:	b2db      	uxtb	r3, r3
   264da:	2b09      	cmp	r3, #9
   264dc:	d802      	bhi.n	264e4 <char2hex+0x10>
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   264de:	2000      	movs	r0, #0
		*x = c - '0';
   264e0:	700b      	strb	r3, [r1, #0]
   264e2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   264e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   264e8:	2b05      	cmp	r3, #5
   264ea:	d802      	bhi.n	264f2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   264ec:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   264ee:	b2c3      	uxtb	r3, r0
   264f0:	e7f5      	b.n	264de <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   264f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   264f6:	2b05      	cmp	r3, #5
   264f8:	d801      	bhi.n	264fe <char2hex+0x2a>
		*x = c - 'A' + 10;
   264fa:	3837      	subs	r0, #55	; 0x37
   264fc:	e7f7      	b.n	264ee <char2hex+0x1a>
		return -EINVAL;
   264fe:	f06f 0015 	mvn.w	r0, #21
}
   26502:	4770      	bx	lr

00026504 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   26504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26506:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   26508:	f001 0001 	and.w	r0, r1, #1
   2650c:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   26510:	429e      	cmp	r6, r3
   26512:	ea4f 0751 	mov.w	r7, r1, lsr #1
   26516:	d903      	bls.n	26520 <hex2bin+0x1c>
		return 0;
   26518:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2651a:	4630      	mov	r0, r6
   2651c:	b003      	add	sp, #12
   2651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   26520:	b158      	cbz	r0, 2653a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   26522:	7828      	ldrb	r0, [r5, #0]
   26524:	f10d 0107 	add.w	r1, sp, #7
   26528:	f7ff ffd4 	bl	264d4 <char2hex>
   2652c:	2800      	cmp	r0, #0
   2652e:	dbf3      	blt.n	26518 <hex2bin+0x14>
		buf[0] = dec;
   26530:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   26534:	3501      	adds	r5, #1
		buf[0] = dec;
   26536:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2653a:	3501      	adds	r5, #1
   2653c:	4417      	add	r7, r2
   2653e:	42ba      	cmp	r2, r7
   26540:	d0eb      	beq.n	2651a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   26542:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   26546:	f10d 0107 	add.w	r1, sp, #7
   2654a:	f7ff ffc3 	bl	264d4 <char2hex>
   2654e:	2800      	cmp	r0, #0
   26550:	dbe2      	blt.n	26518 <hex2bin+0x14>
		buf[i] = dec << 4;
   26552:	f89d 4007 	ldrb.w	r4, [sp, #7]
   26556:	0124      	lsls	r4, r4, #4
   26558:	b2e4      	uxtb	r4, r4
   2655a:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2655c:	f815 0b02 	ldrb.w	r0, [r5], #2
   26560:	f7ff ffb8 	bl	264d4 <char2hex>
   26564:	2800      	cmp	r0, #0
   26566:	dbd7      	blt.n	26518 <hex2bin+0x14>
		buf[i] += dec;
   26568:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2656c:	441c      	add	r4, r3
   2656e:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   26572:	e7e4      	b.n	2653e <hex2bin+0x3a>

00026574 <arch_printk_char_out>:
}
   26574:	2000      	movs	r0, #0
   26576:	4770      	bx	lr

00026578 <str_out>:
{
   26578:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2657a:	688a      	ldr	r2, [r1, #8]
   2657c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2657e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26580:	b114      	cbz	r4, 26588 <str_out+0x10>
   26582:	684b      	ldr	r3, [r1, #4]
   26584:	4293      	cmp	r3, r2
   26586:	dc01      	bgt.n	2658c <str_out+0x14>
		ctx->count++;
   26588:	608d      	str	r5, [r1, #8]
}
   2658a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2658c:	3b01      	subs	r3, #1
   2658e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   26590:	bf08      	it	eq
   26592:	2200      	moveq	r2, #0
   26594:	608d      	str	r5, [r1, #8]
   26596:	bf0c      	ite	eq
   26598:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2659a:	54a0      	strbne	r0, [r4, r2]
   2659c:	e7f5      	b.n	2658a <str_out+0x12>

0002659e <printk>:
{
   2659e:	b40f      	push	{r0, r1, r2, r3}
   265a0:	b507      	push	{r0, r1, r2, lr}
   265a2:	a904      	add	r1, sp, #16
   265a4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   265a8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   265aa:	f7e6 f84f 	bl	c64c <vprintk>
}
   265ae:	b003      	add	sp, #12
   265b0:	f85d eb04 	ldr.w	lr, [sp], #4
   265b4:	b004      	add	sp, #16
   265b6:	4770      	bx	lr

000265b8 <snprintk>:
{
   265b8:	b40c      	push	{r2, r3}
   265ba:	b507      	push	{r0, r1, r2, lr}
   265bc:	ab04      	add	r3, sp, #16
   265be:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   265c2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   265c4:	f7e6 f850 	bl	c668 <vsnprintk>
}
   265c8:	b003      	add	sp, #12
   265ca:	f85d eb04 	ldr.w	lr, [sp], #4
   265ce:	b002      	add	sp, #8
   265d0:	4770      	bx	lr

000265d2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   265d2:	4604      	mov	r4, r0
   265d4:	b508      	push	{r3, lr}
   265d6:	4608      	mov	r0, r1
   265d8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   265da:	461a      	mov	r2, r3
   265dc:	47a0      	blx	r4
	return z_impl_z_current_get();
   265de:	f7fd f89f 	bl	23720 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   265e2:	f7ea fda3 	bl	1112c <z_impl_k_thread_abort>

000265e6 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   265e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   265ea:	8840      	ldrh	r0, [r0, #2]
}
   265ec:	0840      	lsrs	r0, r0, #1
   265ee:	4770      	bx	lr

000265f0 <free_list_add>:
{
   265f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265f2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   265f4:	f7ff fff7 	bl	265e6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   265f8:	fab0 f080 	clz	r0, r0
   265fc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   26600:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   26604:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   26608:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2660a:	1d17      	adds	r7, r2, #4
{
   2660c:	460c      	mov	r4, r1
   2660e:	3206      	adds	r2, #6
   26610:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   26612:	b956      	cbnz	r6, 2662a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   26614:	2101      	movs	r1, #1
   26616:	fa01 f000 	lsl.w	r0, r1, r0
   2661a:	68d9      	ldr	r1, [r3, #12]
   2661c:	4301      	orrs	r1, r0
   2661e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   26620:	f8cc 4010 	str.w	r4, [ip, #16]
   26624:	53dd      	strh	r5, [r3, r7]
   26626:	529d      	strh	r5, [r3, r2]
}
   26628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2662a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2662c:	3104      	adds	r1, #4
   2662e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   26630:	53d8      	strh	r0, [r3, r7]
   26632:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   26636:	529e      	strh	r6, [r3, r2]
   26638:	80c5      	strh	r5, [r0, #6]
   2663a:	525d      	strh	r5, [r3, r1]
   2663c:	e7f4      	b.n	26628 <free_list_add+0x38>

0002663e <free_list_remove_bidx>:
{
   2663e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   26640:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   26644:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   26646:	4299      	cmp	r1, r3
   26648:	f102 0104 	add.w	r1, r2, #4
   2664c:	d10a      	bne.n	26664 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2664e:	2301      	movs	r3, #1
   26650:	fa03 f202 	lsl.w	r2, r3, r2
   26654:	68c3      	ldr	r3, [r0, #12]
   26656:	ea23 0302 	bic.w	r3, r3, r2
   2665a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2665c:	2300      	movs	r3, #0
   2665e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   26662:	bd10      	pop	{r4, pc}
   26664:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   26666:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2666a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2666e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26672:	80cb      	strh	r3, [r1, #6]
   26674:	8082      	strh	r2, [r0, #4]
}
   26676:	e7f4      	b.n	26662 <free_list_remove_bidx+0x24>

00026678 <free_list_remove>:
{
   26678:	b508      	push	{r3, lr}
   2667a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2667c:	f7ff ffb3 	bl	265e6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26680:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   26684:	4618      	mov	r0, r3
}
   26686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2668a:	f1c2 021f 	rsb	r2, r2, #31
   2668e:	f7ff bfd6 	b.w	2663e <free_list_remove_bidx>

00026692 <alloc_chunk>:
{
   26692:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26696:	fab1 f581 	clz	r5, r1
   2669a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2669e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   266a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   266a6:	4603      	mov	r3, r0
   266a8:	460e      	mov	r6, r1
	if (b->next) {
   266aa:	b1c2      	cbz	r2, 266de <alloc_chunk+0x4c>
   266ac:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   266ae:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   266b2:	4618      	mov	r0, r3
   266b4:	4621      	mov	r1, r4
   266b6:	f7ff ff96 	bl	265e6 <chunk_size>
   266ba:	42b0      	cmp	r0, r6
   266bc:	d306      	bcc.n	266cc <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   266be:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   266c0:	4618      	mov	r0, r3
   266c2:	f7ff ffbc 	bl	2663e <free_list_remove_bidx>
}
   266c6:	4620      	mov	r0, r4
   266c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   266cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   266d0:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   266d2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   266d4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   266d8:	d001      	beq.n	266de <alloc_chunk+0x4c>
   266da:	4282      	cmp	r2, r0
   266dc:	d1e7      	bne.n	266ae <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   266de:	f04f 34ff 	mov.w	r4, #4294967295
   266e2:	f1c5 0220 	rsb	r2, r5, #32
   266e6:	4094      	lsls	r4, r2
   266e8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   266ea:	4014      	ands	r4, r2
   266ec:	d0eb      	beq.n	266c6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   266ee:	fa94 f2a4 	rbit	r2, r4
   266f2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   266f6:	1d11      	adds	r1, r2, #4
   266f8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   266fc:	4621      	mov	r1, r4
   266fe:	e7df      	b.n	266c0 <alloc_chunk+0x2e>

00026700 <merge_chunks>:
{
   26700:	b538      	push	{r3, r4, r5, lr}
   26702:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26704:	f7ff ff6f 	bl	265e6 <chunk_size>
{
   26708:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2670a:	4604      	mov	r4, r0
   2670c:	4611      	mov	r1, r2
   2670e:	4618      	mov	r0, r3
   26710:	f7ff ff69 	bl	265e6 <chunk_size>
   26714:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26716:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   26718:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2671c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2671e:	4618      	mov	r0, r3
   26720:	f7ff ff61 	bl	265e6 <chunk_size>
	void *cmem = &buf[c];
   26724:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26726:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2672a:	bd38      	pop	{r3, r4, r5, pc}

0002672c <split_chunks>:
{
   2672c:	b538      	push	{r3, r4, r5, lr}
   2672e:	460c      	mov	r4, r1
   26730:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   26732:	f7ff ff58 	bl	265e6 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   26736:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   26738:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2673a:	4405      	add	r5, r0
   2673c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26740:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   26742:	8060      	strh	r0, [r4, #2]
   26744:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26748:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2674a:	8044      	strh	r4, [r0, #2]
   2674c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   26750:	4618      	mov	r0, r3
   26752:	4611      	mov	r1, r2
   26754:	f7ff ff47 	bl	265e6 <chunk_size>
	void *cmem = &buf[c];
   26758:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2675a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2675e:	bd38      	pop	{r3, r4, r5, pc}

00026760 <free_chunk>:
{
   26760:	b538      	push	{r3, r4, r5, lr}
   26762:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   26764:	f7ff ff3f 	bl	265e6 <chunk_size>
   26768:	460c      	mov	r4, r1
   2676a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2676c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26770:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26772:	07da      	lsls	r2, r3, #31
   26774:	d40a      	bmi.n	2678c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   26776:	4628      	mov	r0, r5
   26778:	f7ff ff7e 	bl	26678 <free_list_remove>
	return c + chunk_size(h, c);
   2677c:	4621      	mov	r1, r4
   2677e:	4628      	mov	r0, r5
   26780:	f7ff ff31 	bl	265e6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   26784:	1822      	adds	r2, r4, r0
   26786:	4628      	mov	r0, r5
   26788:	f7ff ffba 	bl	26700 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2678c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26790:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   26792:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26796:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   26798:	07db      	lsls	r3, r3, #31
   2679a:	d40c      	bmi.n	267b6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2679c:	4628      	mov	r0, r5
   2679e:	f7ff ff6b 	bl	26678 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   267a2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   267a6:	4622      	mov	r2, r4
   267a8:	1a61      	subs	r1, r4, r1
   267aa:	4628      	mov	r0, r5
   267ac:	f7ff ffa8 	bl	26700 <merge_chunks>
   267b0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   267b4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   267b6:	4621      	mov	r1, r4
   267b8:	4628      	mov	r0, r5
}
   267ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   267be:	f7ff bf17 	b.w	265f0 <free_list_add>

000267c2 <sys_heap_alloc>:
{
   267c2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   267c4:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   267c6:	b909      	cbnz	r1, 267cc <sys_heap_alloc+0xa>
		return NULL;
   267c8:	2000      	movs	r0, #0
}
   267ca:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   267cc:	68ab      	ldr	r3, [r5, #8]
   267ce:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   267d2:	d9f9      	bls.n	267c8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   267d4:	310b      	adds	r1, #11
   267d6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   267d8:	4621      	mov	r1, r4
   267da:	4628      	mov	r0, r5
   267dc:	f7ff ff59 	bl	26692 <alloc_chunk>
	if (c == 0U) {
   267e0:	4606      	mov	r6, r0
   267e2:	2800      	cmp	r0, #0
   267e4:	d0f0      	beq.n	267c8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   267e6:	4601      	mov	r1, r0
   267e8:	4628      	mov	r0, r5
   267ea:	f7ff fefc 	bl	265e6 <chunk_size>
   267ee:	42a0      	cmp	r0, r4
   267f0:	d907      	bls.n	26802 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   267f2:	4628      	mov	r0, r5
   267f4:	1932      	adds	r2, r6, r4
   267f6:	f7ff ff99 	bl	2672c <split_chunks>
		free_list_add(h, c + chunk_sz);
   267fa:	4611      	mov	r1, r2
   267fc:	4628      	mov	r0, r5
   267fe:	f7ff fef7 	bl	265f0 <free_list_add>
	void *cmem = &buf[c];
   26802:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26806:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26808:	8853      	ldrh	r3, [r2, #2]
   2680a:	3004      	adds	r0, #4
   2680c:	f043 0301 	orr.w	r3, r3, #1
   26810:	8053      	strh	r3, [r2, #2]
	return mem;
   26812:	e7da      	b.n	267ca <sys_heap_alloc+0x8>

00026814 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26814:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   26816:	f013 0307 	ands.w	r3, r3, #7
   2681a:	d105      	bne.n	26828 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2681c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2681e:	2b00      	cmp	r3, #0
   26820:	bf0c      	ite	eq
   26822:	2000      	moveq	r0, #0
   26824:	2003      	movne	r0, #3
   26826:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26828:	2b02      	cmp	r3, #2
   2682a:	d105      	bne.n	26838 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2682c:	8bc0      	ldrh	r0, [r0, #30]
   2682e:	fab0 f080 	clz	r0, r0
   26832:	0940      	lsrs	r0, r0, #5
   26834:	0080      	lsls	r0, r0, #2
   26836:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26838:	2b01      	cmp	r3, #1
   2683a:	d105      	bne.n	26848 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2683c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2683e:	2b00      	cmp	r3, #0
   26840:	bf0c      	ite	eq
   26842:	2000      	moveq	r0, #0
   26844:	2005      	movne	r0, #5
   26846:	4770      	bx	lr
	int evt = EVT_NOP;
   26848:	2000      	movs	r0, #0
}
   2684a:	4770      	bx	lr

0002684c <validate_args>:
{
   2684c:	b510      	push	{r4, lr}
   2684e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   26850:	b100      	cbz	r0, 26854 <validate_args+0x8>
   26852:	b911      	cbnz	r1, 2685a <validate_args+0xe>
		return -EINVAL;
   26854:	f06f 0015 	mvn.w	r0, #21
}
   26858:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2685a:	1d08      	adds	r0, r1, #4
   2685c:	f000 f82f 	bl	268be <sys_notify_validate>
	if ((rv == 0)
   26860:	2800      	cmp	r0, #0
   26862:	d1f9      	bne.n	26858 <validate_args+0xc>
	    && ((cli->notify.flags
   26864:	68a3      	ldr	r3, [r4, #8]
   26866:	2b03      	cmp	r3, #3
   26868:	d9f6      	bls.n	26858 <validate_args+0xc>
   2686a:	e7f3      	b.n	26854 <validate_args+0x8>

0002686c <notify_one>:
{
   2686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26870:	460d      	mov	r5, r1
   26872:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26874:	4619      	mov	r1, r3
   26876:	1d28      	adds	r0, r5, #4
{
   26878:	4690      	mov	r8, r2
   2687a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2687c:	f7e6 fafa 	bl	ce74 <sys_notify_finalize>
	if (cb) {
   26880:	4604      	mov	r4, r0
   26882:	b138      	cbz	r0, 26894 <notify_one+0x28>
		cb(mgr, cli, state, res);
   26884:	4633      	mov	r3, r6
   26886:	4642      	mov	r2, r8
   26888:	4629      	mov	r1, r5
   2688a:	4638      	mov	r0, r7
   2688c:	46a4      	mov	ip, r4
}
   2688e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   26892:	4760      	bx	ip
}
   26894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026898 <onoff_manager_init>:
{
   26898:	b538      	push	{r3, r4, r5, lr}
   2689a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2689c:	4605      	mov	r5, r0
   2689e:	b158      	cbz	r0, 268b8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   268a0:	b151      	cbz	r1, 268b8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   268a2:	680b      	ldr	r3, [r1, #0]
   268a4:	b143      	cbz	r3, 268b8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   268a6:	684b      	ldr	r3, [r1, #4]
   268a8:	b133      	cbz	r3, 268b8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   268aa:	2220      	movs	r2, #32
   268ac:	2100      	movs	r1, #0
   268ae:	f005 f877 	bl	2b9a0 <memset>
	return 0;
   268b2:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   268b4:	612c      	str	r4, [r5, #16]
}
   268b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   268b8:	f06f 0015 	mvn.w	r0, #21
   268bc:	e7fb      	b.n	268b6 <onoff_manager_init+0x1e>

000268be <sys_notify_validate>:
	if (notify == NULL) {
   268be:	4603      	mov	r3, r0
   268c0:	b140      	cbz	r0, 268d4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   268c2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   268c4:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   268c8:	2a02      	cmp	r2, #2
   268ca:	d006      	beq.n	268da <sys_notify_validate+0x1c>
   268cc:	2a03      	cmp	r2, #3
   268ce:	d004      	beq.n	268da <sys_notify_validate+0x1c>
   268d0:	2a01      	cmp	r2, #1
   268d2:	d005      	beq.n	268e0 <sys_notify_validate+0x22>
   268d4:	f06f 0015 	mvn.w	r0, #21
}
   268d8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   268da:	681a      	ldr	r2, [r3, #0]
   268dc:	2a00      	cmp	r2, #0
   268de:	d0f9      	beq.n	268d4 <sys_notify_validate+0x16>
		notify->result = 0;
   268e0:	2000      	movs	r0, #0
   268e2:	6098      	str	r0, [r3, #8]
   268e4:	4770      	bx	lr

000268e6 <outs>:
{
   268e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268ea:	4607      	mov	r7, r0
   268ec:	4688      	mov	r8, r1
   268ee:	4615      	mov	r5, r2
   268f0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   268f2:	4614      	mov	r4, r2
   268f4:	42b4      	cmp	r4, r6
   268f6:	d305      	bcc.n	26904 <outs+0x1e>
   268f8:	b10e      	cbz	r6, 268fe <outs+0x18>
	return (int)count;
   268fa:	1b60      	subs	r0, r4, r5
   268fc:	e008      	b.n	26910 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   268fe:	7823      	ldrb	r3, [r4, #0]
   26900:	2b00      	cmp	r3, #0
   26902:	d0fa      	beq.n	268fa <outs+0x14>
		int rc = out((int)*sp++, ctx);
   26904:	4641      	mov	r1, r8
   26906:	f814 0b01 	ldrb.w	r0, [r4], #1
   2690a:	47b8      	blx	r7
		if (rc < 0) {
   2690c:	2800      	cmp	r0, #0
   2690e:	daf1      	bge.n	268f4 <outs+0xe>
}
   26910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026914 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   26914:	4040      	eors	r0, r0
   26916:	f380 8811 	msr	BASEPRI, r0
   2691a:	f04f 0004 	mov.w	r0, #4
   2691e:	df02      	svc	2
}
   26920:	4770      	bx	lr

00026922 <assert_print>:

void assert_print(const char *fmt, ...)
{
   26922:	b40f      	push	{r0, r1, r2, r3}
   26924:	b507      	push	{r0, r1, r2, lr}
   26926:	a904      	add	r1, sp, #16
   26928:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2692c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2692e:	f7e5 fe8d 	bl	c64c <vprintk>

	va_end(ap);
}
   26932:	b003      	add	sp, #12
   26934:	f85d eb04 	ldr.w	lr, [sp], #4
   26938:	b004      	add	sp, #16
   2693a:	4770      	bx	lr

0002693c <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2693c:	68c3      	ldr	r3, [r0, #12]
   2693e:	6802      	ldr	r2, [r0, #0]
   26940:	4293      	cmp	r3, r2
   26942:	d904      	bls.n	2694e <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   26944:	3b01      	subs	r3, #1
   26946:	1a9a      	subs	r2, r3, r2
		return false;
   26948:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2694a:	600a      	str	r2, [r1, #0]
}
   2694c:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2694e:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   26950:	b913      	cbnz	r3, 26958 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   26952:	3801      	subs	r0, #1
   26954:	1a82      	subs	r2, r0, r2
		return false;
   26956:	e7f7      	b.n	26948 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   26958:	1a82      	subs	r2, r0, r2
	return true;
   2695a:	2001      	movs	r0, #1
   2695c:	e7f5      	b.n	2694a <free_space+0xe>

0002695e <get_usage>:
{
   2695e:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   26960:	a901      	add	r1, sp, #4
{
   26962:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   26964:	f7ff ffea 	bl	2693c <free_space>
   26968:	b120      	cbz	r0, 26974 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2696a:	9b01      	ldr	r3, [sp, #4]
   2696c:	68e2      	ldr	r2, [r4, #12]
   2696e:	3b01      	subs	r3, #1
   26970:	4413      	add	r3, r2
   26972:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   26974:	6a60      	ldr	r0, [r4, #36]	; 0x24
   26976:	9b01      	ldr	r3, [sp, #4]
   26978:	1ac0      	subs	r0, r0, r3
}
   2697a:	3801      	subs	r0, #1
   2697c:	b002      	add	sp, #8
   2697e:	bd10      	pop	{r4, pc}

00026980 <idx_inc>:
{
   26980:	b510      	push	{r4, lr}
   26982:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   26984:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26986:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   26988:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2698a:	07d2      	lsls	r2, r2, #31
   2698c:	d502      	bpl.n	26994 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2698e:	3b01      	subs	r3, #1
   26990:	4018      	ands	r0, r3
}
   26992:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   26994:	4298      	cmp	r0, r3
   26996:	bf28      	it	cs
   26998:	1ac0      	subcs	r0, r0, r3
   2699a:	e7fa      	b.n	26992 <idx_inc+0x12>

0002699c <add_skip_item>:
{
   2699c:	b538      	push	{r3, r4, r5, lr}
   2699e:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   269a0:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   269a2:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   269a4:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   269a6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   269aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   269ae:	6801      	ldr	r1, [r0, #0]
   269b0:	462a      	mov	r2, r5
{
   269b2:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   269b4:	f7ff ffe4 	bl	26980 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   269b8:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   269ba:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   269bc:	462a      	mov	r2, r5
   269be:	4620      	mov	r0, r4
   269c0:	f7ff ffde 	bl	26980 <idx_inc>
   269c4:	6060      	str	r0, [r4, #4]
}
   269c6:	bd38      	pop	{r3, r4, r5, pc}

000269c8 <max_utilization_update>:
{
   269c8:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   269ca:	6903      	ldr	r3, [r0, #16]
{
   269cc:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   269ce:	075b      	lsls	r3, r3, #29
   269d0:	d506      	bpl.n	269e0 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   269d2:	6a85      	ldr	r5, [r0, #40]	; 0x28
   269d4:	f7ff ffc3 	bl	2695e <get_usage>
   269d8:	4285      	cmp	r5, r0
   269da:	bf2c      	ite	cs
   269dc:	62a5      	strcs	r5, [r4, #40]	; 0x28
   269de:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   269e0:	bd38      	pop	{r3, r4, r5, pc}

000269e2 <drop_item_locked>:
{
   269e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   269e6:	461f      	mov	r7, r3
	*user_packet = false;
   269e8:	2300      	movs	r3, #0
   269ea:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   269ec:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   269f0:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   269f4:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   269f6:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   269fa:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   269fc:	f003 0303 	and.w	r3, r3, #3
   26a00:	2b02      	cmp	r3, #2
{
   26a02:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   26a04:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   26a08:	d103      	bne.n	26a12 <drop_item_locked+0x30>
		return item->skip.len;
   26a0a:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   26a0e:	08ad      	lsrs	r5, r5, #2
   26a10:	d12e      	bne.n	26a70 <drop_item_locked+0x8e>
   26a12:	4630      	mov	r0, r6
   26a14:	69e3      	ldr	r3, [r4, #28]
   26a16:	4798      	blx	r3
   26a18:	4605      	mov	r5, r0
	} else if (allow_drop) {
   26a1a:	f1b8 0f00 	cmp.w	r8, #0
   26a1e:	d038      	beq.n	26a92 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   26a20:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   26a24:	079b      	lsls	r3, r3, #30
   26a26:	d531      	bpl.n	26a8c <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   26a28:	4620      	mov	r0, r4
   26a2a:	f10b 0101 	add.w	r1, fp, #1
   26a2e:	f7ff ffb5 	bl	2699c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26a32:	6861      	ldr	r1, [r4, #4]
   26a34:	462a      	mov	r2, r5
   26a36:	4620      	mov	r0, r4
   26a38:	f7ff ffa2 	bl	26980 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26a3c:	6821      	ldr	r1, [r4, #0]
   26a3e:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   26a40:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26a42:	4620      	mov	r0, r4
   26a44:	f7ff ff9c 	bl	26980 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26a48:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   26a4a:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26a4c:	68e1      	ldr	r1, [r4, #12]
   26a4e:	4620      	mov	r0, r4
   26a50:	f7ff ff96 	bl	26980 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   26a54:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   26a56:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   26a5a:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   26a5e:	f002 0203 	and.w	r2, r2, #3
   26a62:	2a02      	cmp	r2, #2
   26a64:	d10e      	bne.n	26a84 <drop_item_locked+0xa2>
		return item->skip.len;
   26a66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   26a6a:	089b      	lsrs	r3, r3, #2
   26a6c:	d00a      	beq.n	26a84 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   26a6e:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26a70:	68e1      	ldr	r1, [r4, #12]
   26a72:	462a      	mov	r2, r5
   26a74:	4620      	mov	r0, r4
   26a76:	f7ff ff83 	bl	26980 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   26a7a:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   26a7e:	4630      	mov	r0, r6
   26a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   26a84:	4630      	mov	r0, r6
   26a86:	69e3      	ldr	r3, [r4, #28]
   26a88:	4798      	blx	r3
   26a8a:	4405      	add	r5, r0
			*user_packet = true;
   26a8c:	2301      	movs	r3, #1
   26a8e:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   26a90:	e7ee      	b.n	26a70 <drop_item_locked+0x8e>
		item = NULL;
   26a92:	4646      	mov	r6, r8
	return item;
   26a94:	e7f3      	b.n	26a7e <drop_item_locked+0x9c>

00026a96 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   26a96:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   26a9a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   26a9c:	bf88      	it	hi
   26a9e:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   26aa0:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   26aa2:	1e18      	subs	r0, r3, #0
   26aa4:	bf18      	it	ne
   26aa6:	2001      	movne	r0, #1
   26aa8:	4770      	bx	lr

00026aaa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   26aaa:	4770      	bx	lr

00026aac <nordicsemi_nrf53_init>:
{
   26aac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26aae:	f04f 0320 	mov.w	r3, #32
   26ab2:	f3ef 8511 	mrs	r5, BASEPRI
   26ab6:	f383 8812 	msr	BASEPRI_MAX, r3
   26aba:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   26abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   26ac2:	2401      	movs	r4, #1
   26ac4:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   26ac6:	4621      	mov	r1, r4
   26ac8:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   26acc:	2021      	movs	r0, #33	; 0x21
   26ace:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   26ad2:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   26ad6:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   26ada:	f7e7 f9c5 	bl	de68 <soc_secure_gpio_pin_mcu_select>
   26ade:	4621      	mov	r1, r4
   26ae0:	2020      	movs	r0, #32
   26ae2:	f7e7 f9c1 	bl	de68 <soc_secure_gpio_pin_mcu_select>
   26ae6:	4621      	mov	r1, r4
   26ae8:	200b      	movs	r0, #11
   26aea:	f7e7 f9bd 	bl	de68 <soc_secure_gpio_pin_mcu_select>
   26aee:	4621      	mov	r1, r4
   26af0:	200a      	movs	r0, #10
   26af2:	f7e7 f9b9 	bl	de68 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   26af6:	f385 8811 	msr	BASEPRI, r5
   26afa:	f3bf 8f6f 	isb	sy
}
   26afe:	2000      	movs	r0, #0
   26b00:	bd38      	pop	{r3, r4, r5, pc}

00026b02 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   26b02:	2806      	cmp	r0, #6
   26b04:	d108      	bne.n	26b18 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   26b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26b0a:	2201      	movs	r2, #1
   26b0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26b10:	f3bf 8f4f 	dsb	sy
        __WFE();
   26b14:	bf20      	wfe
    while (true)
   26b16:	e7fd      	b.n	26b14 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   26b18:	4770      	bx	lr

00026b1a <pm_state_exit_post_ops>:
   26b1a:	2300      	movs	r3, #0
   26b1c:	f383 8811 	msr	BASEPRI, r3
   26b20:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26b24:	4770      	bx	lr

00026b26 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   26b26:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   26b28:	ab01      	add	r3, sp, #4
   26b2a:	f003 fecc 	bl	2a8c6 <tfm_platform_mem_read>

	switch (status) {
   26b2e:	2802      	cmp	r0, #2
   26b30:	d00a      	beq.n	26b48 <soc_secure_mem_read+0x22>
   26b32:	2803      	cmp	r0, #3
   26b34:	d00b      	beq.n	26b4e <soc_secure_mem_read+0x28>
   26b36:	b968      	cbnz	r0, 26b54 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   26b38:	9801      	ldr	r0, [sp, #4]
   26b3a:	3800      	subs	r0, #0
   26b3c:	bf18      	it	ne
   26b3e:	2001      	movne	r0, #1
   26b40:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   26b42:	b003      	add	sp, #12
   26b44:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   26b48:	f06f 0015 	mvn.w	r0, #21
   26b4c:	e7f9      	b.n	26b42 <soc_secure_mem_read+0x1c>
	switch (status) {
   26b4e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26b52:	e7f6      	b.n	26b42 <soc_secure_mem_read+0x1c>
		return -EPERM;
   26b54:	f04f 30ff 	mov.w	r0, #4294967295
   26b58:	e7f3      	b.n	26b42 <soc_secure_mem_read+0x1c>

00026b5a <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   26b5a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   26b5c:	075b      	lsls	r3, r3, #29
   26b5e:	d40b      	bmi.n	26b78 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26b60:	6803      	ldr	r3, [r0, #0]
   26b62:	8842      	ldrh	r2, [r0, #2]
   26b64:	f3c3 2349 	ubfx	r3, r3, #9, #10
   26b68:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   26b6c:	1898      	adds	r0, r3, r2
   26b6e:	3017      	adds	r0, #23
   26b70:	f020 0007 	bic.w	r0, r0, #7
   26b74:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   26b76:	4770      	bx	lr
	return 0;
   26b78:	2000      	movs	r0, #0
}
   26b7a:	4770      	bx	lr

00026b7c <dummy_timestamp>:
}
   26b7c:	2000      	movs	r0, #0
   26b7e:	4770      	bx	lr

00026b80 <default_get_timestamp>:
   26b80:	f003 bd94 	b.w	2a6ac <sys_clock_cycle_get_32>

00026b84 <atomic_inc>:
{
   26b84:	4603      	mov	r3, r0
}
   26b86:	e8d3 0fef 	ldaex	r0, [r3]
   26b8a:	1c42      	adds	r2, r0, #1
   26b8c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26b90:	2900      	cmp	r1, #0
   26b92:	d1f8      	bne.n	26b86 <atomic_inc+0x2>
   26b94:	4770      	bx	lr

00026b96 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   26b96:	2001      	movs	r0, #1
   26b98:	f7e7 ba90 	b.w	e0bc <z_log_dropped>

00026b9c <z_log_get_tag>:
}
   26b9c:	2000      	movs	r0, #0
   26b9e:	4770      	bx	lr

00026ba0 <z_cbprintf_cpy>:
{
   26ba0:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   26ba2:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   26ba6:	1b9b      	subs	r3, r3, r6
   26ba8:	428b      	cmp	r3, r1
{
   26baa:	460c      	mov	r4, r1
   26bac:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   26bae:	d30a      	bcc.n	26bc6 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   26bb0:	6813      	ldr	r3, [r2, #0]
   26bb2:	460a      	mov	r2, r1
   26bb4:	4601      	mov	r1, r0
   26bb6:	1998      	adds	r0, r3, r6
   26bb8:	f004 feb8 	bl	2b92c <memcpy>
	return len;
   26bbc:	4620      	mov	r0, r4
	desc->off += len;
   26bbe:	68ab      	ldr	r3, [r5, #8]
   26bc0:	4423      	add	r3, r4
   26bc2:	60ab      	str	r3, [r5, #8]
}
   26bc4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   26bc6:	f06f 001b 	mvn.w	r0, #27
   26bca:	e7fb      	b.n	26bc4 <z_cbprintf_cpy+0x24>

00026bcc <z_log_msg_finalize>:
{
   26bcc:	b570      	push	{r4, r5, r6, lr}
   26bce:	460e      	mov	r6, r1
   26bd0:	4615      	mov	r5, r2
   26bd2:	4619      	mov	r1, r3
	if (!msg) {
   26bd4:	4604      	mov	r4, r0
   26bd6:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   26bda:	b918      	cbnz	r0, 26be4 <z_log_msg_finalize+0x18>
}
   26bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   26be0:	f7e7 ba6c 	b.w	e0bc <z_log_dropped>
	if (data) {
   26be4:	b12b      	cbz	r3, 26bf2 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   26be6:	3010      	adds	r0, #16
   26be8:	f3c5 2349 	ubfx	r3, r5, #9, #10
   26bec:	4418      	add	r0, r3
   26bee:	f004 fe9d 	bl	2b92c <memcpy>
	msg->hdr.source = source;
   26bf2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   26bf6:	4620      	mov	r0, r4
}
   26bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   26bfc:	f7e7 bc82 	b.w	e504 <z_log_msg_commit>

00026c00 <buffer_write>:
{
   26c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c02:	4606      	mov	r6, r0
   26c04:	460d      	mov	r5, r1
   26c06:	4614      	mov	r4, r2
   26c08:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   26c0a:	4621      	mov	r1, r4
   26c0c:	4628      	mov	r0, r5
   26c0e:	463a      	mov	r2, r7
   26c10:	47b0      	blx	r6
	} while (len != 0);
   26c12:	1a24      	subs	r4, r4, r0
		buf += processed;
   26c14:	4405      	add	r5, r0
	} while (len != 0);
   26c16:	d1f8      	bne.n	26c0a <buffer_write+0xa>
}
   26c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026c1a <cbvprintf>:
{
   26c1a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   26c1c:	2400      	movs	r4, #0
   26c1e:	9400      	str	r4, [sp, #0]
   26c20:	f7e6 f9cc 	bl	cfbc <z_cbvprintf_impl>
}
   26c24:	b002      	add	sp, #8
   26c26:	bd10      	pop	{r4, pc}

00026c28 <log_output_flush>:
{
   26c28:	b510      	push	{r4, lr}
		     output->control_block->offset,
   26c2a:	6842      	ldr	r2, [r0, #4]
{
   26c2c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   26c2e:	e9d2 2300 	ldrd	r2, r3, [r2]
   26c32:	6881      	ldr	r1, [r0, #8]
   26c34:	6800      	ldr	r0, [r0, #0]
   26c36:	f7ff ffe3 	bl	26c00 <buffer_write>
	output->control_block->offset = 0;
   26c3a:	2200      	movs	r2, #0
   26c3c:	6863      	ldr	r3, [r4, #4]
   26c3e:	601a      	str	r2, [r3, #0]
}
   26c40:	bd10      	pop	{r4, pc}

00026c42 <cr_out_func>:
	if (c == '\n') {
   26c42:	280a      	cmp	r0, #10
{
   26c44:	b538      	push	{r3, r4, r5, lr}
   26c46:	4604      	mov	r4, r0
   26c48:	460d      	mov	r5, r1
	if (c == '\n') {
   26c4a:	d102      	bne.n	26c52 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   26c4c:	200d      	movs	r0, #13
   26c4e:	f7e7 fd25 	bl	e69c <out_func>
	out_func(c, ctx);
   26c52:	4629      	mov	r1, r5
   26c54:	4620      	mov	r0, r4
   26c56:	f7e7 fd21 	bl	e69c <out_func>
}
   26c5a:	2000      	movs	r0, #0
   26c5c:	bd38      	pop	{r3, r4, r5, pc}

00026c5e <nvs_flash_rd>:
{
   26c5e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   26c60:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26c62:	8984      	ldrh	r4, [r0, #12]
   26c64:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   26c66:	fa16 f181 	uxtah	r1, r6, r1
   26c6a:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   26c6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   26c70:	6884      	ldr	r4, [r0, #8]
   26c72:	6824      	ldr	r4, [r4, #0]
   26c74:	46a4      	mov	ip, r4
}
   26c76:	bc70      	pop	{r4, r5, r6}
   26c78:	4760      	bx	ip

00026c7a <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   26c7a:	680b      	ldr	r3, [r1, #0]
   26c7c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   26c80:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   26c82:	89c0      	ldrh	r0, [r0, #14]
   26c84:	0c1a      	lsrs	r2, r3, #16
   26c86:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   26c8a:	bf04      	itt	eq
   26c8c:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   26c90:	600b      	streq	r3, [r1, #0]
}
   26c92:	4770      	bx	lr

00026c94 <nvs_flash_block_cmp>:
{
   26c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26c98:	4681      	mov	r9, r0
   26c9a:	460e      	mov	r6, r1
   26c9c:	4617      	mov	r7, r2
   26c9e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26ca0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   26ca2:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26ca4:	681d      	ldr	r5, [r3, #0]
   26ca6:	426d      	negs	r5, r5
	block_size =
   26ca8:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   26cac:	b91c      	cbnz	r4, 26cb6 <nvs_flash_block_cmp+0x22>
	return 0;
   26cae:	4620      	mov	r0, r4
}
   26cb0:	b009      	add	sp, #36	; 0x24
   26cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   26cb6:	42ac      	cmp	r4, r5
   26cb8:	46a0      	mov	r8, r4
   26cba:	bf28      	it	cs
   26cbc:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   26cbe:	466a      	mov	r2, sp
   26cc0:	4643      	mov	r3, r8
   26cc2:	4631      	mov	r1, r6
   26cc4:	4648      	mov	r0, r9
   26cc6:	f7ff ffca 	bl	26c5e <nvs_flash_rd>
		if (rc) {
   26cca:	2800      	cmp	r0, #0
   26ccc:	d1f0      	bne.n	26cb0 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   26cce:	4642      	mov	r2, r8
   26cd0:	4669      	mov	r1, sp
   26cd2:	4638      	mov	r0, r7
   26cd4:	f004 fe1a 	bl	2b90c <memcmp>
		if (rc) {
   26cd8:	b920      	cbnz	r0, 26ce4 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   26cda:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   26cde:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   26ce0:	4447      	add	r7, r8
   26ce2:	e7e3      	b.n	26cac <nvs_flash_block_cmp+0x18>
			return 1;
   26ce4:	2001      	movs	r0, #1
   26ce6:	e7e3      	b.n	26cb0 <nvs_flash_block_cmp+0x1c>

00026ce8 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26ce8:	4601      	mov	r1, r0
{
   26cea:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26cec:	2207      	movs	r2, #7
{
   26cee:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26cf0:	20ff      	movs	r0, #255	; 0xff
   26cf2:	f7e6 f8eb 	bl	cecc <crc8_ccitt>
	entry->crc8 = crc8;
   26cf6:	71e0      	strb	r0, [r4, #7]
}
   26cf8:	bd10      	pop	{r4, pc}

00026cfa <nvs_flash_cmp_const>:
{
   26cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26cfe:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26d00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   26d02:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26d04:	681d      	ldr	r5, [r3, #0]
{
   26d06:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26d08:	426d      	negs	r5, r5
	block_size =
   26d0a:	f005 0520 	and.w	r5, r5, #32
{
   26d0e:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   26d10:	4668      	mov	r0, sp
{
   26d12:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   26d14:	462a      	mov	r2, r5
   26d16:	f004 fe43 	bl	2b9a0 <memset>
	while (len) {
   26d1a:	b91c      	cbnz	r4, 26d24 <nvs_flash_cmp_const+0x2a>
	return 0;
   26d1c:	4620      	mov	r0, r4
}
   26d1e:	b008      	add	sp, #32
   26d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   26d24:	42ac      	cmp	r4, r5
   26d26:	46a0      	mov	r8, r4
   26d28:	bf28      	it	cs
   26d2a:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   26d2c:	466a      	mov	r2, sp
   26d2e:	4643      	mov	r3, r8
   26d30:	4631      	mov	r1, r6
   26d32:	4638      	mov	r0, r7
   26d34:	f7ff ffae 	bl	26c94 <nvs_flash_block_cmp>
		if (rc) {
   26d38:	2800      	cmp	r0, #0
   26d3a:	d1f0      	bne.n	26d1e <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   26d3c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   26d40:	4446      	add	r6, r8
   26d42:	e7ea      	b.n	26d1a <nvs_flash_cmp_const+0x20>

00026d44 <nvs_flash_erase_sector>:
{
   26d44:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26d46:	8982      	ldrh	r2, [r0, #12]
   26d48:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   26d4a:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26d4c:	0c09      	lsrs	r1, r1, #16
{
   26d4e:	4604      	mov	r4, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26d50:	fb02 3101 	mla	r1, r2, r1, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   26d54:	6a80      	ldr	r0, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   26d56:	042d      	lsls	r5, r5, #16
	rc = api->erase(dev, offset, size);
   26d58:	6883      	ldr	r3, [r0, #8]
   26d5a:	689b      	ldr	r3, [r3, #8]
   26d5c:	4798      	blx	r3
	if (rc) {
   26d5e:	b950      	cbnz	r0, 26d76 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   26d60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   26d62:	4629      	mov	r1, r5
   26d64:	4620      	mov	r0, r4
   26d66:	89a3      	ldrh	r3, [r4, #12]
   26d68:	7912      	ldrb	r2, [r2, #4]
   26d6a:	f7ff ffc6 	bl	26cfa <nvs_flash_cmp_const>
		rc = -ENXIO;
   26d6e:	2800      	cmp	r0, #0
   26d70:	bf18      	it	ne
   26d72:	f06f 0005 	mvnne.w	r0, #5
}
   26d76:	bd38      	pop	{r3, r4, r5, pc}

00026d78 <z_log_msg_static_create.constprop.0>:
   26d78:	2300      	movs	r3, #0
   26d7a:	f7e7 bc09 	b.w	e590 <z_impl_z_log_msg_static_create>

00026d7e <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   26d7e:	7803      	ldrb	r3, [r0, #0]
   26d80:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   26d82:	bf81      	itttt	hi
   26d84:	f101 31ff 	addhi.w	r1, r1, #4294967295
   26d88:	18c9      	addhi	r1, r1, r3
   26d8a:	425b      	neghi	r3, r3
   26d8c:	4019      	andhi	r1, r3
}
   26d8e:	4608      	mov	r0, r1
   26d90:	4770      	bx	lr

00026d92 <nvs_ate_valid>:
{
   26d92:	b570      	push	{r4, r5, r6, lr}
   26d94:	460c      	mov	r4, r1
   26d96:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26d98:	2108      	movs	r1, #8
   26d9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26d9c:	f7ff ffef 	bl	26d7e <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26da0:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26da2:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26da4:	4621      	mov	r1, r4
   26da6:	20ff      	movs	r0, #255	; 0xff
   26da8:	f7e6 f890 	bl	cecc <crc8_ccitt>
	if (crc8 == entry->crc8) {
   26dac:	79e3      	ldrb	r3, [r4, #7]
   26dae:	4283      	cmp	r3, r0
   26db0:	d107      	bne.n	26dc2 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   26db2:	89aa      	ldrh	r2, [r5, #12]
   26db4:	8863      	ldrh	r3, [r4, #2]
   26db6:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   26db8:	4283      	cmp	r3, r0
   26dba:	bf2c      	ite	cs
   26dbc:	2000      	movcs	r0, #0
   26dbe:	2001      	movcc	r0, #1
}
   26dc0:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   26dc2:	2000      	movs	r0, #0
   26dc4:	e7fc      	b.n	26dc0 <nvs_ate_valid+0x2e>

00026dc6 <nvs_close_ate_valid>:
{
   26dc6:	b538      	push	{r3, r4, r5, lr}
   26dc8:	4605      	mov	r5, r0
   26dca:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   26dcc:	f7ff ffe1 	bl	26d92 <nvs_ate_valid>
   26dd0:	b1a0      	cbz	r0, 26dfc <nvs_close_ate_valid+0x36>
   26dd2:	88a0      	ldrh	r0, [r4, #4]
   26dd4:	b998      	cbnz	r0, 26dfe <nvs_close_ate_valid+0x38>
   26dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26dda:	8822      	ldrh	r2, [r4, #0]
   26ddc:	429a      	cmp	r2, r3
   26dde:	d10d      	bne.n	26dfc <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26de0:	2108      	movs	r1, #8
   26de2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   26de4:	f7ff ffcb 	bl	26d7e <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   26de8:	8862      	ldrh	r2, [r4, #2]
   26dea:	89ab      	ldrh	r3, [r5, #12]
   26dec:	1a9b      	subs	r3, r3, r2
   26dee:	fbb3 f2f0 	udiv	r2, r3, r0
   26df2:	fb02 3010 	mls	r0, r2, r0, r3
   26df6:	fab0 f080 	clz	r0, r0
   26dfa:	0940      	lsrs	r0, r0, #5
}
   26dfc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   26dfe:	2000      	movs	r0, #0
   26e00:	e7fc      	b.n	26dfc <nvs_close_ate_valid+0x36>

00026e02 <nvs_prev_ate>:
{
   26e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26e04:	4604      	mov	r4, r0
   26e06:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26e08:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26e0a:	2108      	movs	r1, #8
   26e0c:	f7ff ffb7 	bl	26d7e <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26e10:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26e12:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26e14:	6829      	ldr	r1, [r5, #0]
   26e16:	4620      	mov	r0, r4
   26e18:	f7ff ff21 	bl	26c5e <nvs_flash_rd>
	if (rc) {
   26e1c:	4606      	mov	r6, r0
   26e1e:	2800      	cmp	r0, #0
   26e20:	d136      	bne.n	26e90 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   26e22:	682b      	ldr	r3, [r5, #0]
   26e24:	443b      	add	r3, r7
   26e26:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   26e28:	89a2      	ldrh	r2, [r4, #12]
   26e2a:	b299      	uxth	r1, r3
   26e2c:	1bd2      	subs	r2, r2, r7
   26e2e:	4291      	cmp	r1, r2
   26e30:	d12e      	bne.n	26e90 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   26e32:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   26e34:	bf09      	itett	eq
   26e36:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   26e38:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   26e3c:	f102 32ff 	addeq.w	r2, r2, #4294967295
   26e40:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26e44:	4620      	mov	r0, r4
   26e46:	2308      	movs	r3, #8
   26e48:	466a      	mov	r2, sp
   26e4a:	6029      	str	r1, [r5, #0]
   26e4c:	f7ff ff07 	bl	26c5e <nvs_flash_rd>
	if (rc) {
   26e50:	b9e8      	cbnz	r0, 26e8e <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   26e52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26e54:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26e56:	466b      	mov	r3, sp
		if (data8[i] != value) {
   26e58:	f813 1b01 	ldrb.w	r1, [r3], #1
   26e5c:	428a      	cmp	r2, r1
   26e5e:	d10c      	bne.n	26e7a <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26e60:	3001      	adds	r0, #1
   26e62:	2808      	cmp	r0, #8
   26e64:	d1f8      	bne.n	26e58 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   26e66:	6863      	ldr	r3, [r4, #4]
   26e68:	e005      	b.n	26e76 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   26e6a:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   26e6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   26e70:	0c1b      	lsrs	r3, r3, #16
   26e72:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   26e74:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   26e76:	602b      	str	r3, [r5, #0]
		return 0;
   26e78:	e00a      	b.n	26e90 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   26e7a:	4669      	mov	r1, sp
   26e7c:	4620      	mov	r0, r4
   26e7e:	f7ff ffa2 	bl	26dc6 <nvs_close_ate_valid>
   26e82:	2800      	cmp	r0, #0
   26e84:	d1f1      	bne.n	26e6a <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   26e86:	4629      	mov	r1, r5
   26e88:	4620      	mov	r0, r4
   26e8a:	f7e7 fe97 	bl	ebbc <nvs_recover_last_ate>
   26e8e:	4606      	mov	r6, r0
}
   26e90:	4630      	mov	r0, r6
   26e92:	b003      	add	sp, #12
   26e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026e96 <nvs_flash_al_wrt>:
{
   26e96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26e9a:	4607      	mov	r7, r0
   26e9c:	4690      	mov	r8, r2
	if (!len) {
   26e9e:	461e      	mov	r6, r3
{
   26ea0:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   26ea2:	b91b      	cbnz	r3, 26eac <nvs_flash_al_wrt+0x16>
		return 0;
   26ea4:	2000      	movs	r0, #0
}
   26ea6:	b009      	add	sp, #36	; 0x24
   26ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   26eac:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26eae:	8983      	ldrh	r3, [r0, #12]
   26eb0:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   26eb2:	fa14 f181 	uxtah	r1, r4, r1
   26eb6:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   26eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26ebc:	681d      	ldr	r5, [r3, #0]
   26ebe:	426d      	negs	r5, r5
	if (blen > 0) {
   26ec0:	4035      	ands	r5, r6
   26ec2:	d00c      	beq.n	26ede <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   26ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   26ec6:	6883      	ldr	r3, [r0, #8]
   26ec8:	4621      	mov	r1, r4
   26eca:	f8d3 9004 	ldr.w	r9, [r3, #4]
   26ece:	462b      	mov	r3, r5
   26ed0:	47c8      	blx	r9
		if (rc) {
   26ed2:	2800      	cmp	r0, #0
   26ed4:	d1e7      	bne.n	26ea6 <nvs_flash_al_wrt+0x10>
	if (len) {
   26ed6:	1b76      	subs	r6, r6, r5
   26ed8:	d0e4      	beq.n	26ea4 <nvs_flash_al_wrt+0xe>
		offset += blen;
   26eda:	442c      	add	r4, r5
		data8 += blen;
   26edc:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   26ede:	2320      	movs	r3, #32
   26ee0:	4632      	mov	r2, r6
   26ee2:	4641      	mov	r1, r8
   26ee4:	4668      	mov	r0, sp
   26ee6:	f004 fd2e 	bl	2b946 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   26eea:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   26eec:	eb0d 0006 	add.w	r0, sp, r6
   26ef0:	682a      	ldr	r2, [r5, #0]
   26ef2:	7929      	ldrb	r1, [r5, #4]
   26ef4:	1b92      	subs	r2, r2, r6
   26ef6:	f004 fd53 	bl	2b9a0 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   26efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   26efc:	682b      	ldr	r3, [r5, #0]
   26efe:	6882      	ldr	r2, [r0, #8]
   26f00:	4621      	mov	r1, r4
   26f02:	6855      	ldr	r5, [r2, #4]
   26f04:	466a      	mov	r2, sp
   26f06:	47a8      	blx	r5
	return rc;
   26f08:	e7cd      	b.n	26ea6 <nvs_flash_al_wrt+0x10>

00026f0a <nvs_flash_ate_wrt>:
{
   26f0a:	b510      	push	{r4, lr}
   26f0c:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   26f0e:	2308      	movs	r3, #8
   26f10:	6841      	ldr	r1, [r0, #4]
{
   26f12:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   26f14:	f7ff ffbf 	bl	26e96 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   26f18:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   26f1a:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   26f1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   26f1e:	f7ff ff2e 	bl	26d7e <nvs_al_size.isra.0>
   26f22:	6863      	ldr	r3, [r4, #4]
   26f24:	1a1b      	subs	r3, r3, r0
   26f26:	6063      	str	r3, [r4, #4]
}
   26f28:	4610      	mov	r0, r2
   26f2a:	bd10      	pop	{r4, pc}

00026f2c <nvs_add_gc_done_ate>:
	gc_done_ate.id = 0xffff;
   26f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   26f30:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   26f32:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   26f36:	2300      	movs	r3, #0
{
   26f38:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   26f3a:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   26f3e:	6883      	ldr	r3, [r0, #8]
	nvs_ate_crc8_update(&gc_done_ate);
   26f40:	4668      	mov	r0, sp
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   26f42:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   26f46:	f7ff fecf 	bl	26ce8 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   26f4a:	4669      	mov	r1, sp
   26f4c:	4620      	mov	r0, r4
   26f4e:	f7ff ffdc 	bl	26f0a <nvs_flash_ate_wrt>
}
   26f52:	b002      	add	sp, #8
   26f54:	bd10      	pop	{r4, pc}

00026f56 <nvs_gc>:
{
   26f56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26f5a:	2108      	movs	r1, #8
{
   26f5c:	b095      	sub	sp, #84	; 0x54
   26f5e:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26f60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26f62:	f7ff ff0c 	bl	26d7e <nvs_al_size.isra.0>
   26f66:	4605      	mov	r5, r0
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   26f68:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
   26f6a:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   26f6c:	0c1b      	lsrs	r3, r3, #16
   26f6e:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   26f70:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   26f72:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   26f74:	f7ff fe81 	bl	26c7a <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   26f78:	f8dd b00c 	ldr.w	fp, [sp, #12]
   26f7c:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26f7e:	aa06      	add	r2, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   26f80:	445e      	add	r6, fp
   26f82:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26f84:	2308      	movs	r3, #8
   26f86:	4631      	mov	r1, r6
   26f88:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   26f8a:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26f8c:	f7ff fe67 	bl	26c5e <nvs_flash_rd>
	if (rc < 0) {
   26f90:	1e02      	subs	r2, r0, #0
   26f92:	f2c0 80a9 	blt.w	270e8 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   26f96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26f98:	aa06      	add	r2, sp, #24
   26f9a:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26f9c:	2300      	movs	r3, #0
		if (data8[i] != value) {
   26f9e:	f812 0b01 	ldrb.w	r0, [r2], #1
   26fa2:	4281      	cmp	r1, r0
   26fa4:	f040 808f 	bne.w	270c6 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26fa8:	3301      	adds	r3, #1
   26faa:	2b08      	cmp	r3, #8
   26fac:	d1f7      	bne.n	26f9e <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   26fae:	68a3      	ldr	r3, [r4, #8]
   26fb0:	6862      	ldr	r2, [r4, #4]
   26fb2:	442b      	add	r3, r5
   26fb4:	429a      	cmp	r2, r3
   26fb6:	d27e      	bcs.n	270b6 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   26fb8:	4659      	mov	r1, fp
   26fba:	4620      	mov	r0, r4
   26fbc:	f7ff fec2 	bl	26d44 <nvs_flash_erase_sector>
   26fc0:	4602      	mov	r2, r0
	if (rc) {
   26fc2:	e091      	b.n	270e8 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   26fc4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   26fc8:	0c36      	lsrs	r6, r6, #16
   26fca:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   26fcc:	441e      	add	r6, r3
   26fce:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   26fd0:	aa08      	add	r2, sp, #32
   26fd2:	4620      	mov	r0, r4
   26fd4:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   26fd6:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   26fda:	f7ff ff12 	bl	26e02 <nvs_prev_ate>
		if (rc) {
   26fde:	4602      	mov	r2, r0
   26fe0:	2800      	cmp	r0, #0
   26fe2:	f040 8081 	bne.w	270e8 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   26fe6:	4620      	mov	r0, r4
   26fe8:	a908      	add	r1, sp, #32
   26fea:	f7ff fed2 	bl	26d92 <nvs_ate_valid>
   26fee:	b918      	cbnz	r0, 26ff8 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   26ff0:	9b01      	ldr	r3, [sp, #4]
   26ff2:	459a      	cmp	sl, r3
   26ff4:	d1ec      	bne.n	26fd0 <nvs_gc+0x7a>
   26ff6:	e7da      	b.n	26fae <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   26ff8:	6863      	ldr	r3, [r4, #4]
   26ffa:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   26ffc:	aa0a      	add	r2, sp, #40	; 0x28
   26ffe:	4620      	mov	r0, r4
   27000:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   27002:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   27004:	f7ff fefd 	bl	26e02 <nvs_prev_ate>
			if (rc) {
   27008:	4602      	mov	r2, r0
   2700a:	2800      	cmp	r0, #0
   2700c:	d16c      	bne.n	270e8 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2700e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   27012:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27016:	429a      	cmp	r2, r3
   27018:	d027      	beq.n	2706a <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2701a:	6862      	ldr	r2, [r4, #4]
   2701c:	9b05      	ldr	r3, [sp, #20]
   2701e:	429a      	cmp	r2, r3
   27020:	d1ec      	bne.n	26ffc <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   27022:	4556      	cmp	r6, sl
   27024:	d1e4      	bne.n	26ff0 <nvs_gc+0x9a>
   27026:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2702a:	2b00      	cmp	r3, #0
   2702c:	d0e0      	beq.n	26ff0 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2702e:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   27032:	ea4f 431a 	mov.w	r3, sl, lsr #16
   27036:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   27038:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2703a:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
   2703c:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2703e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   27042:	f7ff fe51 	bl	26ce8 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27046:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   27048:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2704c:	681e      	ldr	r6, [r3, #0]
   2704e:	4276      	negs	r6, r6
	block_size =
   27050:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   27054:	f1b9 0f00 	cmp.w	r9, #0
   27058:	d10e      	bne.n	27078 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2705a:	4620      	mov	r0, r4
   2705c:	a908      	add	r1, sp, #32
   2705e:	f7ff ff54 	bl	26f0a <nvs_flash_ate_wrt>
			if (rc) {
   27062:	4602      	mov	r2, r0
   27064:	2800      	cmp	r0, #0
   27066:	d0c3      	beq.n	26ff0 <nvs_gc+0x9a>
   27068:	e03e      	b.n	270e8 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2706a:	4620      	mov	r0, r4
   2706c:	a90a      	add	r1, sp, #40	; 0x28
   2706e:	f7ff fe90 	bl	26d92 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   27072:	2800      	cmp	r0, #0
   27074:	d0d1      	beq.n	2701a <nvs_gc+0xc4>
   27076:	e7d4      	b.n	27022 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   27078:	454e      	cmp	r6, r9
   2707a:	46b0      	mov	r8, r6
   2707c:	bf28      	it	cs
   2707e:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   27080:	aa0c      	add	r2, sp, #48	; 0x30
   27082:	4643      	mov	r3, r8
   27084:	4639      	mov	r1, r7
   27086:	4620      	mov	r0, r4
   27088:	f7ff fde9 	bl	26c5e <nvs_flash_rd>
		if (rc) {
   2708c:	4602      	mov	r2, r0
   2708e:	bb58      	cbnz	r0, 270e8 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   27090:	4643      	mov	r3, r8
   27092:	68a1      	ldr	r1, [r4, #8]
   27094:	aa0c      	add	r2, sp, #48	; 0x30
   27096:	4620      	mov	r0, r4
   27098:	f7ff fefd 	bl	26e96 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2709c:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2709e:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   270a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   270a2:	f7ff fe6c 	bl	26d7e <nvs_al_size.isra.0>
   270a6:	68a3      	ldr	r3, [r4, #8]
   270a8:	4403      	add	r3, r0
   270aa:	60a3      	str	r3, [r4, #8]
		if (rc) {
   270ac:	b9e2      	cbnz	r2, 270e8 <nvs_gc+0x192>
		len -= bytes_to_copy;
   270ae:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   270b2:	4447      	add	r7, r8
   270b4:	e7ce      	b.n	27054 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   270b6:	4620      	mov	r0, r4
   270b8:	f7ff ff38 	bl	26f2c <nvs_add_gc_done_ate>
		if (rc) {
   270bc:	4602      	mov	r2, r0
   270be:	2800      	cmp	r0, #0
   270c0:	f43f af7a 	beq.w	26fb8 <nvs_gc+0x62>
   270c4:	e010      	b.n	270e8 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   270c6:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   270c8:	4620      	mov	r0, r4
   270ca:	a906      	add	r1, sp, #24
	stop_addr = gc_addr - ate_size;
   270cc:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   270ce:	f7ff fe7a 	bl	26dc6 <nvs_close_ate_valid>
   270d2:	2800      	cmp	r0, #0
   270d4:	f47f af76 	bne.w	26fc4 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   270d8:	4620      	mov	r0, r4
   270da:	a904      	add	r1, sp, #16
   270dc:	f7e7 fd6e 	bl	ebbc <nvs_recover_last_ate>
		if (rc) {
   270e0:	4602      	mov	r2, r0
   270e2:	2800      	cmp	r0, #0
   270e4:	f43f af74 	beq.w	26fd0 <nvs_gc+0x7a>
}
   270e8:	4610      	mov	r0, r2
   270ea:	b015      	add	sp, #84	; 0x54
   270ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000270f0 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   270f0:	2300      	movs	r3, #0
   270f2:	461a      	mov	r2, r3
   270f4:	f7e7 bf6c 	b.w	efd0 <nvs_write>

000270f8 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   270f8:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   270fa:	2400      	movs	r4, #0
   270fc:	9400      	str	r4, [sp, #0]
   270fe:	f7e8 f843 	bl	f188 <nvs_read_hist>
	return rc;
}
   27102:	b002      	add	sp, #8
   27104:	bd10      	pop	{r4, pc}

00027106 <z_log_msg_static_create.constprop.0>:
   27106:	2300      	movs	r3, #0
   27108:	f7e7 ba42 	b.w	e590 <z_impl_z_log_msg_static_create>

0002710c <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2710c:	6903      	ldr	r3, [r0, #16]
}
   2710e:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   27112:	4770      	bx	lr

00027114 <drop_tx_buffer>:
}
   27114:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27118:	4770      	bx	lr

0002711a <release_rx_buffer>:
{
   2711a:	4608      	mov	r0, r1
   2711c:	b508      	push	{r3, lr}
   2711e:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   27120:	b118      	cbz	r0, 2712a <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   27122:	f003 ffde 	bl	2b0e2 <rpmsg_release_rx_buffer>
	return 0;
   27126:	2000      	movs	r0, #0
}
   27128:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2712a:	f06f 0001 	mvn.w	r0, #1
   2712e:	e7fb      	b.n	27128 <release_rx_buffer+0xe>

00027130 <hold_rx_buffer>:
{
   27130:	4608      	mov	r0, r1
   27132:	b508      	push	{r3, lr}
   27134:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   27136:	b118      	cbz	r0, 27140 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   27138:	f003 ffcb 	bl	2b0d2 <rpmsg_hold_rx_buffer>
	return 0;
   2713c:	2000      	movs	r0, #0
}
   2713e:	bd08      	pop	{r3, pc}
		return -ENOENT;
   27140:	f06f 0001 	mvn.w	r0, #1
   27144:	e7fb      	b.n	2713e <hold_rx_buffer+0xe>

00027146 <send_nocopy>:
{
   27146:	b513      	push	{r0, r1, r4, lr}
   27148:	4604      	mov	r4, r0
   2714a:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2714c:	6921      	ldr	r1, [r4, #16]
   2714e:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   27152:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   27156:	2902      	cmp	r1, #2
   27158:	d109      	bne.n	2716e <send_nocopy+0x28>
	if (len == 0) {
   2715a:	b15b      	cbz	r3, 27174 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   2715c:	b168      	cbz	r0, 2717a <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2715e:	9300      	str	r3, [sp, #0]
   27160:	4613      	mov	r3, r2
   27162:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   27166:	f7f9 f84f 	bl	20208 <rpmsg_send_offchannel_nocopy>
}
   2716a:	b002      	add	sp, #8
   2716c:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2716e:	f06f 000f 	mvn.w	r0, #15
   27172:	e7fa      	b.n	2716a <send_nocopy+0x24>
		return -EBADMSG;
   27174:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   27178:	e7f7      	b.n	2716a <send_nocopy+0x24>
		return -ENOENT;
   2717a:	f06f 0001 	mvn.w	r0, #1
   2717e:	e7f4      	b.n	2716a <send_nocopy+0x24>

00027180 <get_tx_buffer>:
{
   27180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27184:	461c      	mov	r4, r3
   27186:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   2718a:	4616      	mov	r6, r2
   2718c:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2718e:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   27190:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   27192:	b339      	cbz	r1, 271e4 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   27194:	b34a      	cbz	r2, 271ea <get_tx_buffer+0x6a>
   27196:	b344      	cbz	r4, 271ea <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   27198:	1c6a      	adds	r2, r5, #1
   2719a:	f143 0300 	adc.w	r3, r3, #0
   2719e:	2a02      	cmp	r2, #2
   271a0:	f173 0300 	sbcs.w	r3, r3, #0
   271a4:	d224      	bcs.n	271f0 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   271a6:	6822      	ldr	r2, [r4, #0]
   271a8:	b142      	cbz	r2, 271bc <get_tx_buffer+0x3c>
   271aa:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   271ae:	429a      	cmp	r2, r3
   271b0:	d904      	bls.n	271bc <get_tx_buffer+0x3c>
		return -ENOMEM;
   271b2:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   271b6:	6023      	str	r3, [r4, #0]
}
   271b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   271bc:	ea05 0908 	and.w	r9, r5, r8
   271c0:	f109 0301 	add.w	r3, r9, #1
   271c4:	425a      	negs	r2, r3
   271c6:	415a      	adcs	r2, r3
   271c8:	4621      	mov	r1, r4
   271ca:	4638      	mov	r0, r7
   271cc:	f003 ff92 	bl	2b0f4 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   271d0:	b988      	cbnz	r0, 271f6 <get_tx_buffer+0x76>
   271d2:	f1b8 3fff 	cmp.w	r8, #4294967295
   271d6:	bf08      	it	eq
   271d8:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   271dc:	d0f0      	beq.n	271c0 <get_tx_buffer+0x40>
		return -ENOBUFS;
   271de:	f06f 0068 	mvn.w	r0, #104	; 0x68
   271e2:	e7e9      	b.n	271b8 <get_tx_buffer+0x38>
		return -ENOENT;
   271e4:	f06f 0001 	mvn.w	r0, #1
   271e8:	e7e6      	b.n	271b8 <get_tx_buffer+0x38>
		return -EINVAL;
   271ea:	f06f 0015 	mvn.w	r0, #21
   271ee:	e7e3      	b.n	271b8 <get_tx_buffer+0x38>
		return -ENOTSUP;
   271f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   271f4:	e7e0      	b.n	271b8 <get_tx_buffer+0x38>
	(*r_data) = payload;
   271f6:	6030      	str	r0, [r6, #0]
	return 0;
   271f8:	2000      	movs	r0, #0
   271fa:	e7dd      	b.n	271b8 <get_tx_buffer+0x38>

000271fc <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   271fc:	f003 bfbf 	b.w	2b17e <rpmsg_destroy_ept>

00027200 <get_ept_slot_with_name>:
{
   27200:	b538      	push	{r3, r4, r5, lr}
   27202:	460d      	mov	r5, r1
   27204:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   27206:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2720a:	4628      	mov	r0, r5
   2720c:	f7e2 f89e 	bl	934c <strcmp>
   27210:	b130      	cbz	r0, 27220 <get_ept_slot_with_name+0x20>
   27212:	4628      	mov	r0, r5
   27214:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   27218:	f7e2 f898 	bl	934c <strcmp>
   2721c:	b920      	cbnz	r0, 27228 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2721e:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   27220:	2370      	movs	r3, #112	; 0x70
   27222:	fb03 4000 	mla	r0, r3, r0, r4
}
   27226:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   27228:	2000      	movs	r0, #0
   2722a:	e7fc      	b.n	27226 <get_ept_slot_with_name+0x26>

0002722c <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2722c:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   27230:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   27234:	f004 ba1b 	b.w	2b66e <k_work_submit_to_queue>

00027238 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   27238:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   2723c:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   27240:	3b00      	subs	r3, #0
   27242:	bf18      	it	ne
   27244:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   27246:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2724a:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2724e:	f003 bef2 	b.w	2b036 <virtqueue_notification>

00027252 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   27252:	68cb      	ldr	r3, [r1, #12]
   27254:	b133      	cbz	r3, 27264 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   27256:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   27258:	6883      	ldr	r3, [r0, #8]
   2725a:	681b      	ldr	r3, [r3, #0]
   2725c:	b113      	cbz	r3, 27264 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2725e:	2200      	movs	r2, #0
   27260:	6909      	ldr	r1, [r1, #16]
   27262:	4718      	bx	r3
}
   27264:	4770      	bx	lr

00027266 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   27266:	f7fa b9a1 	b.w	215ac <z_impl_k_mutex_unlock>

0002726a <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2726a:	e8d0 3fef 	ldaex	r3, [r0]
   2726e:	e8c0 1fe2 	stlex	r2, r1, [r0]
   27272:	2a00      	cmp	r2, #0
   27274:	d1f9      	bne.n	2726a <atomic_set.isra.0>
}
   27276:	4770      	bx	lr

00027278 <backend_init>:
{
   27278:	b510      	push	{r4, lr}
	data->role = conf->role;
   2727a:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2727c:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2727e:	681b      	ldr	r3, [r3, #0]
   27280:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   27284:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   27288:	f004 f959 	bl	2b53e <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2728c:	2100      	movs	r1, #0
   2728e:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   27292:	f7ff ffea 	bl	2726a <atomic_set.isra.0>
}
   27296:	4608      	mov	r0, r1
   27298:	bd10      	pop	{r4, pc}

0002729a <ns_bind_cb>:
{
   2729a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2729e:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   272a0:	460d      	mov	r5, r1
   272a2:	b379      	cbz	r1, 27304 <ns_bind_cb+0x6a>
   272a4:	780b      	ldrb	r3, [r1, #0]
   272a6:	b36b      	cbz	r3, 27304 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   272a8:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   272ac:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   272b0:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   272b2:	f04f 32ff 	mov.w	r2, #4294967295
   272b6:	f04f 33ff 	mov.w	r3, #4294967295
   272ba:	4620      	mov	r0, r4
   272bc:	f7fa f8a6 	bl	2140c <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   272c0:	462a      	mov	r2, r5
   272c2:	4640      	mov	r0, r8
   272c4:	a901      	add	r1, sp, #4
   272c6:	f7e8 f897 	bl	f3f8 <get_ept>
	if (rpmsg_ept == NULL) {
   272ca:	9e01      	ldr	r6, [sp, #4]
   272cc:	b92e      	cbnz	r6, 272da <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   272ce:	4620      	mov	r0, r4
}
   272d0:	b002      	add	sp, #8
   272d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   272d6:	f7ff bfc6 	b.w	27266 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   272da:	b158      	cbz	r0, 272f4 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   272dc:	4620      	mov	r0, r4
   272de:	f7ff ffc2 	bl	27266 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   272e2:	463b      	mov	r3, r7
   272e4:	462a      	mov	r2, r5
   272e6:	4631      	mov	r1, r6
   272e8:	4640      	mov	r0, r8
}
   272ea:	b002      	add	sp, #8
   272ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   272f0:	f7e8 b860 	b.w	f3b4 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   272f4:	2220      	movs	r2, #32
   272f6:	4629      	mov	r1, r5
   272f8:	f106 0040 	add.w	r0, r6, #64	; 0x40
   272fc:	f004 fc92 	bl	2bc24 <strncpy>
		rpmsg_ept->dest = dest;
   27300:	6637      	str	r7, [r6, #96]	; 0x60
   27302:	e7e4      	b.n	272ce <ns_bind_cb+0x34>
}
   27304:	b002      	add	sp, #8
   27306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002730a <ept_cb>:
{
   2730a:	b510      	push	{r4, lr}
   2730c:	4608      	mov	r0, r1
   2730e:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   27310:	4611      	mov	r1, r2
   27312:	b952      	cbnz	r2, 2732a <ept_cb+0x20>
		if (!ept->bound) {
   27314:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   27318:	b92a      	cbnz	r2, 27326 <ept_cb+0x1c>
			ept->bound = true;
   2731a:	2201      	movs	r2, #1
			bound_cb(ept);
   2731c:	4618      	mov	r0, r3
			ept->bound = true;
   2731e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   27322:	f7e8 f9bb 	bl	f69c <bound_cb>
}
   27326:	2000      	movs	r0, #0
   27328:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2732a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2732c:	6854      	ldr	r4, [r2, #4]
   2732e:	2c00      	cmp	r4, #0
   27330:	d0f9      	beq.n	27326 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   27332:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   27334:	47a0      	blx	r4
   27336:	e7f6      	b.n	27326 <ept_cb+0x1c>

00027338 <deregister_ept>:
{
   27338:	b510      	push	{r4, lr}
   2733a:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2733c:	6903      	ldr	r3, [r0, #16]
   2733e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   27342:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   27346:	2b02      	cmp	r3, #2
   27348:	d10a      	bne.n	27360 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2734a:	b161      	cbz	r1, 27366 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2734c:	4608      	mov	r0, r1
   2734e:	f003 ff16 	bl	2b17e <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   27352:	2270      	movs	r2, #112	; 0x70
   27354:	2100      	movs	r1, #0
   27356:	4620      	mov	r0, r4
   27358:	f004 fb22 	bl	2b9a0 <memset>
	return 0;
   2735c:	2000      	movs	r0, #0
}
   2735e:	bd10      	pop	{r4, pc}
		return -EBUSY;
   27360:	f06f 000f 	mvn.w	r0, #15
   27364:	e7fb      	b.n	2735e <deregister_ept+0x26>
		return -ENOENT;
   27366:	f06f 0001 	mvn.w	r0, #1
   2736a:	e7f8      	b.n	2735e <deregister_ept+0x26>

0002736c <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2736c:	f003 bf07 	b.w	2b17e <rpmsg_destroy_ept>

00027370 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   27370:	b538      	push	{r3, r4, r5, lr}
   27372:	460d      	mov	r5, r1
	if (!instance) {
   27374:	4604      	mov	r4, r0
   27376:	b160      	cbz	r0, 27392 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   27378:	30e0      	adds	r0, #224	; 0xe0
   2737a:	f004 f881 	bl	2b480 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2737e:	b10d      	cbz	r5, 27384 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   27380:	2000      	movs	r0, #0
}
   27382:	bd38      	pop	{r3, r4, r5, pc}
   27384:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   27388:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   2738c:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   27390:	e7f6      	b.n	27380 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   27392:	f06f 0015 	mvn.w	r0, #21
   27396:	e7f4      	b.n	27382 <ipc_rpmsg_deinit+0x12>

00027398 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   27398:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   2739a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2739e:	b113      	cbz	r3, 273a6 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   273a0:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   273a4:	4718      	bx	r3
}
   273a6:	4770      	bx	lr

000273a8 <virtio_set_features>:
}
   273a8:	4770      	bx	lr

000273aa <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   273aa:	6983      	ldr	r3, [r0, #24]
   273ac:	b913      	cbnz	r3, 273b4 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   273ae:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   273b2:	7019      	strb	r1, [r3, #0]
}
   273b4:	4770      	bx	lr

000273b6 <virtio_get_features>:
}
   273b6:	2001      	movs	r0, #1
   273b8:	4770      	bx	lr

000273ba <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   273ba:	6983      	ldr	r3, [r0, #24]
   273bc:	2b01      	cmp	r3, #1
   273be:	d104      	bne.n	273ca <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   273c0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   273c4:	7818      	ldrb	r0, [r3, #0]
   273c6:	b2c0      	uxtb	r0, r0
   273c8:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   273ca:	2004      	movs	r0, #4
}
   273cc:	4770      	bx	lr

000273ce <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   273ce:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   273d0:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   273d2:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   273d4:	4620      	mov	r0, r4
   273d6:	f004 fa86 	bl	2b8e6 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   273da:	4605      	mov	r5, r0
   273dc:	b118      	cbz	r0, 273e6 <virtqueue_allocate+0x18>
   273de:	4622      	mov	r2, r4
   273e0:	2100      	movs	r1, #0
   273e2:	f004 fadd 	bl	2b9a0 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   273e6:	4628      	mov	r0, r5
   273e8:	bd38      	pop	{r3, r4, r5, pc}

000273ea <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   273ea:	b538      	push	{r3, r4, r5, lr}
   273ec:	4604      	mov	r4, r0
   273ee:	2230      	movs	r2, #48	; 0x30
   273f0:	2100      	movs	r1, #0
   273f2:	f004 fad5 	bl	2b9a0 <memset>
   273f6:	2218      	movs	r2, #24
   273f8:	2100      	movs	r1, #0
   273fa:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   273fe:	f004 facf 	bl	2b9a0 <memset>
   27402:	2218      	movs	r2, #24
   27404:	2100      	movs	r1, #0
   27406:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2740a:	f004 fac9 	bl	2b9a0 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2740e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   27412:	f7f8 feab 	bl	2016c <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   27416:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2741a:	f7f8 fea7 	bl	2016c <virtqueue_free>
	vr->shm_io = 0;
   2741e:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   27420:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   27424:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   27428:	f7f8 fdbc 	bl	1ffa4 <metal_device_close>
	metal_finish();
   2742c:	f7f8 fe16 	bl	2005c <metal_finish>
	if (io->ops.close)
   27430:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   27432:	f104 0540 	add.w	r5, r4, #64	; 0x40
   27436:	b10b      	cbz	r3, 2743c <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   27438:	4628      	mov	r0, r5
   2743a:	4798      	blx	r3
   2743c:	2238      	movs	r2, #56	; 0x38
   2743e:	2100      	movs	r1, #0
   27440:	4628      	mov	r0, r5
   27442:	f004 faad 	bl	2b9a0 <memset>

	return 0;
}
   27446:	2000      	movs	r0, #0
   27448:	bd38      	pop	{r3, r4, r5, pc}

0002744a <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2744a:	4770      	bx	lr

0002744c <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   2744c:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   2744e:	b430      	push	{r4, r5}
   27450:	4604      	mov	r4, r0
   27452:	4618      	mov	r0, r3
   27454:	db0b      	blt.n	2746e <flash_area_read+0x22>
   27456:	68a5      	ldr	r5, [r4, #8]
   27458:	4408      	add	r0, r1
   2745a:	42a8      	cmp	r0, r5
   2745c:	d807      	bhi.n	2746e <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
   2745e:	68e0      	ldr	r0, [r4, #12]
   27460:	6864      	ldr	r4, [r4, #4]
   27462:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   27464:	6884      	ldr	r4, [r0, #8]
   27466:	6824      	ldr	r4, [r4, #0]
   27468:	46a4      	mov	ip, r4
}
   2746a:	bc30      	pop	{r4, r5}
   2746c:	4760      	bx	ip
   2746e:	f06f 0015 	mvn.w	r0, #21
   27472:	bc30      	pop	{r4, r5}
   27474:	4770      	bx	lr

00027476 <flash_area_write>:
   27476:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   27478:	b430      	push	{r4, r5}
   2747a:	4604      	mov	r4, r0
   2747c:	4618      	mov	r0, r3
   2747e:	db0b      	blt.n	27498 <flash_area_write+0x22>
   27480:	68a5      	ldr	r5, [r4, #8]
   27482:	4408      	add	r0, r1
   27484:	42a8      	cmp	r0, r5
   27486:	d807      	bhi.n	27498 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
   27488:	68e0      	ldr	r0, [r4, #12]
   2748a:	6864      	ldr	r4, [r4, #4]
   2748c:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   2748e:	6884      	ldr	r4, [r0, #8]
   27490:	6864      	ldr	r4, [r4, #4]
   27492:	46a4      	mov	ip, r4
}
   27494:	bc30      	pop	{r4, r5}
   27496:	4760      	bx	ip
   27498:	f06f 0015 	mvn.w	r0, #21
   2749c:	bc30      	pop	{r4, r5}
   2749e:	4770      	bx	lr

000274a0 <flash_area_erase>:
   274a0:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   274a2:	4603      	mov	r3, r0
   274a4:	b410      	push	{r4}
   274a6:	4610      	mov	r0, r2
   274a8:	db0a      	blt.n	274c0 <flash_area_erase+0x20>
   274aa:	689c      	ldr	r4, [r3, #8]
   274ac:	4408      	add	r0, r1
   274ae:	42a0      	cmp	r0, r4
   274b0:	d806      	bhi.n	274c0 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
   274b2:	68d8      	ldr	r0, [r3, #12]
   274b4:	685b      	ldr	r3, [r3, #4]
   274b6:	4419      	add	r1, r3
	rc = api->erase(dev, offset, size);
   274b8:	6883      	ldr	r3, [r0, #8]
}
   274ba:	bc10      	pop	{r4}
   274bc:	689b      	ldr	r3, [r3, #8]
   274be:	4718      	bx	r3
   274c0:	f06f 0015 	mvn.w	r0, #21
   274c4:	bc10      	pop	{r4}
   274c6:	4770      	bx	lr

000274c8 <get_sectors_cb>:
{
   274c8:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   274ca:	684c      	ldr	r4, [r1, #4]
   274cc:	6803      	ldr	r3, [r0, #0]
   274ce:	42a3      	cmp	r3, r4
   274d0:	d201      	bcs.n	274d6 <get_sectors_cb+0xe>
		*bail_value = true;
   274d2:	2001      	movs	r0, #1
}
   274d4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   274d6:	688a      	ldr	r2, [r1, #8]
   274d8:	4422      	add	r2, r4
   274da:	4293      	cmp	r3, r2
   274dc:	d301      	bcc.n	274e2 <get_sectors_cb+0x1a>
		*bail_value = false;
   274de:	2000      	movs	r0, #0
   274e0:	e7f8      	b.n	274d4 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   274e2:	694e      	ldr	r6, [r1, #20]
   274e4:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   274e8:	42b5      	cmp	r5, r6
   274ea:	d303      	bcc.n	274f4 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   274ec:	f06f 030b 	mvn.w	r3, #11
   274f0:	618b      	str	r3, [r1, #24]
		return true;
   274f2:	e7f4      	b.n	274de <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   274f4:	1b1b      	subs	r3, r3, r4
   274f6:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   274fa:	6843      	ldr	r3, [r0, #4]
   274fc:	6908      	ldr	r0, [r1, #16]
   274fe:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   27502:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   27504:	690b      	ldr	r3, [r1, #16]
   27506:	3301      	adds	r3, #1
   27508:	610b      	str	r3, [r1, #16]
	return true;
   2750a:	e7e2      	b.n	274d2 <get_sectors_cb+0xa>

0002750c <settings_load>:
	return settings_load_subtree(NULL);
   2750c:	2000      	movs	r0, #0
   2750e:	f7e8 bb13 	b.w	fb38 <settings_load_subtree>

00027512 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   27512:	2200      	movs	r2, #0
   27514:	4611      	mov	r1, r2
   27516:	f7e8 bad5 	b.w	fac4 <settings_save_one>

0002751a <settings_name_steq>:
{
   2751a:	4603      	mov	r3, r0
   2751c:	b510      	push	{r4, lr}
   2751e:	4608      	mov	r0, r1
	if (next) {
   27520:	b10a      	cbz	r2, 27526 <settings_name_steq+0xc>
		*next = NULL;
   27522:	2100      	movs	r1, #0
   27524:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   27526:	b153      	cbz	r3, 2753e <settings_name_steq+0x24>
   27528:	b1d0      	cbz	r0, 27560 <settings_name_steq+0x46>
   2752a:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2752c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   27530:	b180      	cbz	r0, 27554 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   27532:	f813 4b01 	ldrb.w	r4, [r3], #1
   27536:	42a0      	cmp	r0, r4
   27538:	d101      	bne.n	2753e <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2753a:	283d      	cmp	r0, #61	; 0x3d
   2753c:	d1f6      	bne.n	2752c <settings_name_steq+0x12>
		return 0;
   2753e:	2000      	movs	r0, #0
   27540:	e00e      	b.n	27560 <settings_name_steq+0x46>
			*next = name + 1;
   27542:	3301      	adds	r3, #1
   27544:	6013      	str	r3, [r2, #0]
   27546:	e00a      	b.n	2755e <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   27548:	283d      	cmp	r0, #61	; 0x3d
   2754a:	d008      	beq.n	2755e <settings_name_steq+0x44>
   2754c:	fab0 f080 	clz	r0, r0
   27550:	0940      	lsrs	r0, r0, #5
   27552:	e005      	b.n	27560 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   27554:	7818      	ldrb	r0, [r3, #0]
   27556:	282f      	cmp	r0, #47	; 0x2f
   27558:	d1f6      	bne.n	27548 <settings_name_steq+0x2e>
		if (next) {
   2755a:	2a00      	cmp	r2, #0
   2755c:	d1f1      	bne.n	27542 <settings_name_steq+0x28>
		return 1;
   2755e:	2001      	movs	r0, #1
}
   27560:	bd10      	pop	{r4, pc}

00027562 <settings_name_next>:
{
   27562:	b510      	push	{r4, lr}
	if (next) {
   27564:	b109      	cbz	r1, 2756a <settings_name_next+0x8>
		*next = NULL;
   27566:	2300      	movs	r3, #0
   27568:	600b      	str	r3, [r1, #0]
	if (!name) {
   2756a:	b158      	cbz	r0, 27584 <settings_name_next+0x22>
   2756c:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2756e:	781a      	ldrb	r2, [r3, #0]
   27570:	461c      	mov	r4, r3
   27572:	3301      	adds	r3, #1
   27574:	b12a      	cbz	r2, 27582 <settings_name_next+0x20>
   27576:	2a3d      	cmp	r2, #61	; 0x3d
   27578:	d003      	beq.n	27582 <settings_name_next+0x20>
   2757a:	2a2f      	cmp	r2, #47	; 0x2f
   2757c:	d1f7      	bne.n	2756e <settings_name_next+0xc>
		if (next) {
   2757e:	b101      	cbz	r1, 27582 <settings_name_next+0x20>
			*next = name + 1;
   27580:	600b      	str	r3, [r1, #0]
   27582:	1a20      	subs	r0, r4, r0
}
   27584:	bd10      	pop	{r4, pc}

00027586 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   27586:	3008      	adds	r0, #8
   27588:	4770      	bx	lr

0002758a <settings_nvs_read_fn>:
{
   2758a:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2758c:	4613      	mov	r3, r2
{
   2758e:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   27590:	460a      	mov	r2, r1
   27592:	8881      	ldrh	r1, [r0, #4]
   27594:	6800      	ldr	r0, [r0, #0]
   27596:	f7ff fdaf 	bl	270f8 <nvs_read>
}
   2759a:	42a0      	cmp	r0, r4
   2759c:	bfa8      	it	ge
   2759e:	4620      	movge	r0, r4
   275a0:	bd10      	pop	{r4, pc}

000275a2 <settings_nvs_save>:
{
   275a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275a6:	b097      	sub	sp, #92	; 0x5c
   275a8:	4604      	mov	r4, r0
   275aa:	469a      	mov	sl, r3
	if (!name) {
   275ac:	4689      	mov	r9, r1
{
   275ae:	9201      	str	r2, [sp, #4]
	if (!name) {
   275b0:	2900      	cmp	r1, #0
   275b2:	d07e      	beq.n	276b2 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   275b4:	b1da      	cbz	r2, 275ee <settings_nvs_save+0x4c>
   275b6:	faba f78a 	clz	r7, sl
   275ba:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   275bc:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   275be:	f104 0b08 	add.w	fp, r4, #8
	name_id = cf->last_name_id + 1;
   275c2:	3501      	adds	r5, #1
   275c4:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   275c6:	46a8      	mov	r8, r5
		name_id--;
   275c8:	1e6e      	subs	r6, r5, #1
   275ca:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   275cc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   275d0:	d029      	beq.n	27626 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   275d2:	234a      	movs	r3, #74	; 0x4a
   275d4:	4631      	mov	r1, r6
   275d6:	4658      	mov	r0, fp
   275d8:	aa03      	add	r2, sp, #12
   275da:	f7ff fd8d 	bl	270f8 <nvs_read>
		if (rc < 0) {
   275de:	2800      	cmp	r0, #0
   275e0:	da07      	bge.n	275f2 <settings_nvs_save+0x50>
		name_id--;
   275e2:	f110 0f02 	cmn.w	r0, #2
   275e6:	bf08      	it	eq
   275e8:	46b0      	moveq	r8, r6
   275ea:	4635      	mov	r5, r6
   275ec:	e7ec      	b.n	275c8 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   275ee:	2701      	movs	r7, #1
   275f0:	e7e4      	b.n	275bc <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   275f2:	f100 0358 	add.w	r3, r0, #88	; 0x58
   275f6:	eb0d 0003 	add.w	r0, sp, r3
   275fa:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   275fc:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   275fe:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   27602:	4648      	mov	r0, r9
   27604:	f7e1 fea2 	bl	934c <strcmp>
   27608:	2800      	cmp	r0, #0
   2760a:	d1ee      	bne.n	275ea <settings_nvs_save+0x48>
		if (!delete) {
   2760c:	b32f      	cbz	r7, 2765a <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   2760e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   27610:	42b3      	cmp	r3, r6
   27612:	d00b      	beq.n	2762c <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   27614:	4631      	mov	r1, r6
   27616:	4658      	mov	r0, fp
   27618:	f7ff fd6a 	bl	270f0 <nvs_delete>
		if (rc >= 0) {
   2761c:	2800      	cmp	r0, #0
   2761e:	da12      	bge.n	27646 <settings_nvs_save+0xa4>
}
   27620:	b017      	add	sp, #92	; 0x5c
   27622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   27626:	b3b7      	cbz	r7, 27696 <settings_nvs_save+0xf4>
			return 0;
   27628:	2000      	movs	r0, #0
   2762a:	e7f9      	b.n	27620 <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2762c:	4622      	mov	r2, r4
   2762e:	1e73      	subs	r3, r6, #1
   27630:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   27634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27638:	2302      	movs	r3, #2
   2763a:	4658      	mov	r0, fp
   2763c:	f7e7 fcc8 	bl	efd0 <nvs_write>
			if (rc < 0) {
   27640:	2800      	cmp	r0, #0
   27642:	dae7      	bge.n	27614 <settings_nvs_save+0x72>
   27644:	e7ec      	b.n	27620 <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   27646:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2764a:	313f      	adds	r1, #63	; 0x3f
   2764c:	4658      	mov	r0, fp
   2764e:	b289      	uxth	r1, r1
   27650:	f7ff fd4e 	bl	270f0 <nvs_delete>
	if (rc < 0) {
   27654:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27658:	e7e2      	b.n	27620 <settings_nvs_save+0x7e>
		name_id--;
   2765a:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2765c:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   27660:	d02a      	beq.n	276b8 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   27662:	f104 0508 	add.w	r5, r4, #8
   27666:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2766a:	4653      	mov	r3, sl
   2766c:	4628      	mov	r0, r5
   2766e:	9a01      	ldr	r2, [sp, #4]
   27670:	b289      	uxth	r1, r1
   27672:	f7e7 fcad 	bl	efd0 <nvs_write>
	if (rc < 0) {
   27676:	2800      	cmp	r0, #0
   27678:	dbd2      	blt.n	27620 <settings_nvs_save+0x7e>
	if (write_name) {
   2767a:	b977      	cbnz	r7, 2769a <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2767c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2767e:	4543      	cmp	r3, r8
   27680:	d2d2      	bcs.n	27628 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   27682:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   27684:	2302      	movs	r3, #2
   27686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2768a:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   2768c:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   27690:	f7e7 fc9e 	bl	efd0 <nvs_write>
   27694:	e7de      	b.n	27654 <settings_nvs_save+0xb2>
	write_name = true;
   27696:	2701      	movs	r7, #1
   27698:	e7e0      	b.n	2765c <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2769a:	4648      	mov	r0, r9
   2769c:	f7e1 fe60 	bl	9360 <strlen>
   276a0:	464a      	mov	r2, r9
   276a2:	4603      	mov	r3, r0
   276a4:	4641      	mov	r1, r8
   276a6:	4628      	mov	r0, r5
   276a8:	f7e7 fc92 	bl	efd0 <nvs_write>
		if (rc < 0) {
   276ac:	2800      	cmp	r0, #0
   276ae:	dae5      	bge.n	2767c <settings_nvs_save+0xda>
   276b0:	e7b6      	b.n	27620 <settings_nvs_save+0x7e>
		return -EINVAL;
   276b2:	f06f 0015 	mvn.w	r0, #21
   276b6:	e7b3      	b.n	27620 <settings_nvs_save+0x7e>
		return -ENOMEM;
   276b8:	f06f 000b 	mvn.w	r0, #11
   276bc:	e7b0      	b.n	27620 <settings_nvs_save+0x7e>

000276be <settings_nvs_backend_init>:
{
   276be:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   276c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   276c2:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   276c4:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   276c6:	b1c3      	cbz	r3, 276fa <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   276c8:	f100 0608 	add.w	r6, r0, #8
   276cc:	4630      	mov	r0, r6
   276ce:	f7e7 faa7 	bl	ec20 <nvs_mount>
	if (rc) {
   276d2:	4605      	mov	r5, r0
   276d4:	b970      	cbnz	r0, 276f4 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   276d6:	2302      	movs	r3, #2
   276d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   276dc:	4630      	mov	r0, r6
   276de:	f10d 0206 	add.w	r2, sp, #6
   276e2:	f7ff fd09 	bl	270f8 <nvs_read>
	if (rc < 0) {
   276e6:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   276e8:	bfb4      	ite	lt
   276ea:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   276ee:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   276f2:	8723      	strh	r3, [r4, #56]	; 0x38
}
   276f4:	4628      	mov	r0, r5
   276f6:	b002      	add	sp, #8
   276f8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   276fa:	f06f 0512 	mvn.w	r5, #18
   276fe:	e7f9      	b.n	276f4 <settings_nvs_backend_init+0x36>

00027700 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   27700:	b538      	push	{r3, r4, r5, lr}
   27702:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   27704:	42ab      	cmp	r3, r5
{
   27706:	4611      	mov	r1, r2
   27708:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2770a:	d804      	bhi.n	27716 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2770c:	461a      	mov	r2, r3
   2770e:	f004 f90d 	bl	2b92c <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   27712:	4620      	mov	r0, r4
   27714:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27716:	2400      	movs	r4, #0
   27718:	e7fb      	b.n	27712 <_copy+0x12>

0002771a <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2771a:	f004 b941 	b.w	2b9a0 <memset>

0002771e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2771e:	09c3      	lsrs	r3, r0, #7
   27720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27724:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27728:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2772c:	b2c0      	uxtb	r0, r0
   2772e:	4770      	bx	lr

00027730 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   27730:	78cb      	ldrb	r3, [r1, #3]
   27732:	7802      	ldrb	r2, [r0, #0]
   27734:	4053      	eors	r3, r2
   27736:	7003      	strb	r3, [r0, #0]
   27738:	884b      	ldrh	r3, [r1, #2]
   2773a:	7842      	ldrb	r2, [r0, #1]
   2773c:	4053      	eors	r3, r2
   2773e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   27740:	680a      	ldr	r2, [r1, #0]
   27742:	7883      	ldrb	r3, [r0, #2]
   27744:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27748:	7083      	strb	r3, [r0, #2]
   2774a:	680a      	ldr	r2, [r1, #0]
   2774c:	78c3      	ldrb	r3, [r0, #3]
   2774e:	4053      	eors	r3, r2
   27750:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   27752:	79cb      	ldrb	r3, [r1, #7]
   27754:	7902      	ldrb	r2, [r0, #4]
   27756:	4053      	eors	r3, r2
   27758:	7103      	strb	r3, [r0, #4]
   2775a:	88cb      	ldrh	r3, [r1, #6]
   2775c:	7942      	ldrb	r2, [r0, #5]
   2775e:	4053      	eors	r3, r2
   27760:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   27762:	684a      	ldr	r2, [r1, #4]
   27764:	7983      	ldrb	r3, [r0, #6]
   27766:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2776a:	7183      	strb	r3, [r0, #6]
   2776c:	684a      	ldr	r2, [r1, #4]
   2776e:	79c3      	ldrb	r3, [r0, #7]
   27770:	4053      	eors	r3, r2
   27772:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   27774:	7acb      	ldrb	r3, [r1, #11]
   27776:	7a02      	ldrb	r2, [r0, #8]
   27778:	4053      	eors	r3, r2
   2777a:	7203      	strb	r3, [r0, #8]
   2777c:	7a42      	ldrb	r2, [r0, #9]
   2777e:	894b      	ldrh	r3, [r1, #10]
   27780:	4053      	eors	r3, r2
   27782:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   27784:	688a      	ldr	r2, [r1, #8]
   27786:	7a83      	ldrb	r3, [r0, #10]
   27788:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2778c:	7283      	strb	r3, [r0, #10]
   2778e:	688a      	ldr	r2, [r1, #8]
   27790:	7ac3      	ldrb	r3, [r0, #11]
   27792:	4053      	eors	r3, r2
   27794:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   27796:	7bcb      	ldrb	r3, [r1, #15]
   27798:	7b02      	ldrb	r2, [r0, #12]
   2779a:	4053      	eors	r3, r2
   2779c:	7303      	strb	r3, [r0, #12]
   2779e:	89cb      	ldrh	r3, [r1, #14]
   277a0:	7b42      	ldrb	r2, [r0, #13]
   277a2:	4053      	eors	r3, r2
   277a4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   277a6:	68ca      	ldr	r2, [r1, #12]
   277a8:	7b83      	ldrb	r3, [r0, #14]
   277aa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   277ae:	7383      	strb	r3, [r0, #14]
   277b0:	68ca      	ldr	r2, [r1, #12]
   277b2:	7bc3      	ldrb	r3, [r0, #15]
   277b4:	4053      	eors	r3, r2
   277b6:	73c3      	strb	r3, [r0, #15]
}
   277b8:	4770      	bx	lr

000277ba <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   277ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   277bc:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   277be:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   277c0:	f88d 2000 	strb.w	r2, [sp]
   277c4:	7942      	ldrb	r2, [r0, #5]
   277c6:	f88d 2001 	strb.w	r2, [sp, #1]
   277ca:	7a82      	ldrb	r2, [r0, #10]
   277cc:	f88d 2002 	strb.w	r2, [sp, #2]
   277d0:	7bc2      	ldrb	r2, [r0, #15]
   277d2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   277d6:	7902      	ldrb	r2, [r0, #4]
   277d8:	f88d 2004 	strb.w	r2, [sp, #4]
   277dc:	7a42      	ldrb	r2, [r0, #9]
   277de:	f88d 2005 	strb.w	r2, [sp, #5]
   277e2:	7b82      	ldrb	r2, [r0, #14]
   277e4:	f88d 2006 	strb.w	r2, [sp, #6]
   277e8:	78c2      	ldrb	r2, [r0, #3]
   277ea:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   277ee:	7a02      	ldrb	r2, [r0, #8]
   277f0:	f88d 2008 	strb.w	r2, [sp, #8]
   277f4:	7b42      	ldrb	r2, [r0, #13]
   277f6:	f88d 2009 	strb.w	r2, [sp, #9]
   277fa:	7882      	ldrb	r2, [r0, #2]
   277fc:	f88d 200a 	strb.w	r2, [sp, #10]
   27800:	79c2      	ldrb	r2, [r0, #7]
   27802:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27806:	7b02      	ldrb	r2, [r0, #12]
   27808:	f88d 200c 	strb.w	r2, [sp, #12]
   2780c:	7842      	ldrb	r2, [r0, #1]
   2780e:	f88d 200d 	strb.w	r2, [sp, #13]
   27812:	7982      	ldrb	r2, [r0, #6]
   27814:	f88d 200e 	strb.w	r2, [sp, #14]
   27818:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2781c:	2310      	movs	r3, #16
   2781e:	466a      	mov	r2, sp
   27820:	4619      	mov	r1, r3
   27822:	f7ff ff6d 	bl	27700 <_copy>
}
   27826:	b005      	add	sp, #20
   27828:	f85d fb04 	ldr.w	pc, [sp], #4

0002782c <mult_row_column>:
{
   2782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2782e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27830:	7808      	ldrb	r0, [r1, #0]
{
   27832:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27834:	f7ff ff73 	bl	2771e <_double_byte>
   27838:	4605      	mov	r5, r0
   2783a:	7860      	ldrb	r0, [r4, #1]
   2783c:	f7ff ff6f 	bl	2771e <_double_byte>
   27840:	78a2      	ldrb	r2, [r4, #2]
   27842:	7863      	ldrb	r3, [r4, #1]
   27844:	4053      	eors	r3, r2
   27846:	78e2      	ldrb	r2, [r4, #3]
   27848:	4053      	eors	r3, r2
   2784a:	405d      	eors	r5, r3
   2784c:	4068      	eors	r0, r5
   2784e:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27850:	7860      	ldrb	r0, [r4, #1]
   27852:	7827      	ldrb	r7, [r4, #0]
   27854:	f7ff ff63 	bl	2771e <_double_byte>
   27858:	4605      	mov	r5, r0
   2785a:	78a0      	ldrb	r0, [r4, #2]
   2785c:	f7ff ff5f 	bl	2771e <_double_byte>
   27860:	78a3      	ldrb	r3, [r4, #2]
   27862:	405f      	eors	r7, r3
   27864:	78e3      	ldrb	r3, [r4, #3]
   27866:	405f      	eors	r7, r3
   27868:	407d      	eors	r5, r7
   2786a:	4068      	eors	r0, r5
   2786c:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2786e:	7863      	ldrb	r3, [r4, #1]
   27870:	7827      	ldrb	r7, [r4, #0]
   27872:	78a0      	ldrb	r0, [r4, #2]
   27874:	405f      	eors	r7, r3
   27876:	f7ff ff52 	bl	2771e <_double_byte>
   2787a:	4605      	mov	r5, r0
   2787c:	78e0      	ldrb	r0, [r4, #3]
   2787e:	f7ff ff4e 	bl	2771e <_double_byte>
   27882:	78e3      	ldrb	r3, [r4, #3]
   27884:	405f      	eors	r7, r3
   27886:	407d      	eors	r5, r7
   27888:	4068      	eors	r0, r5
   2788a:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2788c:	7820      	ldrb	r0, [r4, #0]
   2788e:	f7ff ff46 	bl	2771e <_double_byte>
   27892:	7862      	ldrb	r2, [r4, #1]
   27894:	7823      	ldrb	r3, [r4, #0]
   27896:	4053      	eors	r3, r2
   27898:	78a2      	ldrb	r2, [r4, #2]
   2789a:	4053      	eors	r3, r2
   2789c:	ea80 0503 	eor.w	r5, r0, r3
   278a0:	78e0      	ldrb	r0, [r4, #3]
   278a2:	f7ff ff3c 	bl	2771e <_double_byte>
   278a6:	b2ed      	uxtb	r5, r5
   278a8:	4045      	eors	r5, r0
   278aa:	70f5      	strb	r5, [r6, #3]
}
   278ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000278ae <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   278ae:	b570      	push	{r4, r5, r6, lr}
   278b0:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   278b2:	4605      	mov	r5, r0
{
   278b4:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   278b6:	2800      	cmp	r0, #0
   278b8:	d049      	beq.n	2794e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   278ba:	2900      	cmp	r1, #0
   278bc:	d049      	beq.n	27952 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   278be:	2a00      	cmp	r2, #0
   278c0:	d049      	beq.n	27956 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   278c2:	2310      	movs	r3, #16
   278c4:	460a      	mov	r2, r1
   278c6:	4668      	mov	r0, sp
   278c8:	4619      	mov	r1, r3
   278ca:	f7ff ff19 	bl	27700 <_copy>
	add_round_key(state, s->words);
   278ce:	4621      	mov	r1, r4
   278d0:	4668      	mov	r0, sp
   278d2:	f7ff ff2d 	bl	27730 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   278d6:	3410      	adds	r4, #16
   278d8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   278dc:	4668      	mov	r0, sp
   278de:	f7e8 fd23 	bl	10328 <sub_bytes>
		shift_rows(state);
   278e2:	4668      	mov	r0, sp
   278e4:	f7ff ff69 	bl	277ba <shift_rows>
	mult_row_column(t, s);
   278e8:	4669      	mov	r1, sp
   278ea:	a804      	add	r0, sp, #16
   278ec:	f7ff ff9e 	bl	2782c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   278f0:	a901      	add	r1, sp, #4
   278f2:	a805      	add	r0, sp, #20
   278f4:	f7ff ff9a 	bl	2782c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   278f8:	a902      	add	r1, sp, #8
   278fa:	a806      	add	r0, sp, #24
   278fc:	f7ff ff96 	bl	2782c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   27900:	a903      	add	r1, sp, #12
   27902:	a807      	add	r0, sp, #28
   27904:	f7ff ff92 	bl	2782c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27908:	2310      	movs	r3, #16
   2790a:	4668      	mov	r0, sp
   2790c:	4619      	mov	r1, r3
   2790e:	eb0d 0203 	add.w	r2, sp, r3
   27912:	f7ff fef5 	bl	27700 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   27916:	4621      	mov	r1, r4
   27918:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2791a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2791c:	f7ff ff08 	bl	27730 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   27920:	42b4      	cmp	r4, r6
   27922:	d1db      	bne.n	278dc <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   27924:	f7e8 fd00 	bl	10328 <sub_bytes>
	shift_rows(state);
   27928:	4668      	mov	r0, sp
   2792a:	f7ff ff46 	bl	277ba <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2792e:	4621      	mov	r1, r4
   27930:	4668      	mov	r0, sp
   27932:	f7ff fefd 	bl	27730 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   27936:	2310      	movs	r3, #16
   27938:	466a      	mov	r2, sp
   2793a:	4619      	mov	r1, r3
   2793c:	4628      	mov	r0, r5
   2793e:	f7ff fedf 	bl	27700 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   27942:	4668      	mov	r0, sp
   27944:	2210      	movs	r2, #16
   27946:	2100      	movs	r1, #0
   27948:	f7ff fee7 	bl	2771a <_set>

	return TC_CRYPTO_SUCCESS;
   2794c:	2001      	movs	r0, #1
}
   2794e:	b008      	add	sp, #32
   27950:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27952:	4608      	mov	r0, r1
   27954:	e7fb      	b.n	2794e <tc_aes_encrypt+0xa0>
   27956:	4610      	mov	r0, r2
   27958:	e7f9      	b.n	2794e <tc_aes_encrypt+0xa0>

0002795a <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2795a:	460a      	mov	r2, r1
{
   2795c:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2795e:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   27962:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27964:	2b00      	cmp	r3, #0
   27966:	bfac      	ite	ge
   27968:	2300      	movge	r3, #0
   2796a:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2796c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27970:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   27974:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   27976:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2797a:	d002      	beq.n	27982 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2797c:	7813      	ldrb	r3, [r2, #0]
   2797e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   27980:	e7f4      	b.n	2796c <gf_double+0x12>
	}
}
   27982:	bd10      	pop	{r4, pc}

00027984 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   27984:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   27986:	b120      	cbz	r0, 27992 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   27988:	2258      	movs	r2, #88	; 0x58
   2798a:	2100      	movs	r1, #0
   2798c:	f7ff fec5 	bl	2771a <_set>
   27990:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   27992:	bd08      	pop	{r3, pc}

00027994 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   27994:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   27996:	4604      	mov	r4, r0
   27998:	b188      	cbz	r0, 279be <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2799a:	2210      	movs	r2, #16
   2799c:	2100      	movs	r1, #0
   2799e:	f7ff febc 	bl	2771a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   279a2:	2210      	movs	r2, #16
   279a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   279a8:	2100      	movs	r1, #0
   279aa:	f7ff feb6 	bl	2771a <_set>
	s->leftover_offset = 0;
   279ae:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   279b0:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   279b2:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   279b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   279b8:	2001      	movs	r0, #1
   279ba:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   279be:	bd10      	pop	{r4, pc}

000279c0 <tc_cmac_setup>:
{
   279c0:	b570      	push	{r4, r5, r6, lr}
   279c2:	4604      	mov	r4, r0
   279c4:	460d      	mov	r5, r1
   279c6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   279c8:	b310      	cbz	r0, 27a10 <tc_cmac_setup+0x50>
   279ca:	b311      	cbz	r1, 27a12 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   279cc:	2258      	movs	r2, #88	; 0x58
   279ce:	2100      	movs	r1, #0
   279d0:	f7ff fea3 	bl	2771a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   279d4:	4629      	mov	r1, r5
   279d6:	4630      	mov	r0, r6
	s->sched = sched;
   279d8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   279da:	f7e8 fcb1 	bl	10340 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   279de:	2210      	movs	r2, #16
   279e0:	2100      	movs	r1, #0
   279e2:	4620      	mov	r0, r4
   279e4:	f7ff fe99 	bl	2771a <_set>
	gf_double (s->K1, s->iv);
   279e8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   279ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   279ee:	4621      	mov	r1, r4
   279f0:	4620      	mov	r0, r4
   279f2:	f7ff ff5c 	bl	278ae <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   279f6:	4621      	mov	r1, r4
   279f8:	4628      	mov	r0, r5
   279fa:	f7ff ffae 	bl	2795a <gf_double>
	gf_double (s->K2, s->K1);
   279fe:	4629      	mov	r1, r5
   27a00:	f104 0020 	add.w	r0, r4, #32
   27a04:	f7ff ffa9 	bl	2795a <gf_double>
	tc_cmac_init(s);
   27a08:	4620      	mov	r0, r4
   27a0a:	f7ff ffc3 	bl	27994 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   27a0e:	2001      	movs	r0, #1
}
   27a10:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27a12:	4608      	mov	r0, r1
   27a14:	e7fc      	b.n	27a10 <tc_cmac_setup+0x50>

00027a16 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   27a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a1a:	460e      	mov	r6, r1
   27a1c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   27a1e:	4604      	mov	r4, r0
   27a20:	2800      	cmp	r0, #0
   27a22:	d060      	beq.n	27ae6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   27a24:	b1fa      	cbz	r2, 27a66 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   27a26:	2900      	cmp	r1, #0
   27a28:	d05d      	beq.n	27ae6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   27a2a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   27a2e:	ea53 0102 	orrs.w	r1, r3, r2
   27a32:	d058      	beq.n	27ae6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   27a34:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   27a36:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   27a3a:	f142 32ff 	adc.w	r2, r2, #4294967295
   27a3e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   27a42:	f1b8 0f00 	cmp.w	r8, #0
   27a46:	d02c      	beq.n	27aa2 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   27a48:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27a4c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   27a50:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27a52:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   27a54:	d20a      	bcs.n	27a6c <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27a56:	462b      	mov	r3, r5
   27a58:	4632      	mov	r2, r6
   27a5a:	4629      	mov	r1, r5
   27a5c:	f7ff fe50 	bl	27700 <_copy>
			s->leftover_offset += data_length;
   27a60:	6c63      	ldr	r3, [r4, #68]	; 0x44
   27a62:	442b      	add	r3, r5
   27a64:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   27a66:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   27a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   27a6c:	463b      	mov	r3, r7
   27a6e:	4632      	mov	r2, r6
   27a70:	4639      	mov	r1, r7
   27a72:	f7ff fe45 	bl	27700 <_copy>
		s->leftover_offset = 0;
   27a76:	2300      	movs	r3, #0
   27a78:	3d10      	subs	r5, #16
   27a7a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   27a7c:	4445      	add	r5, r8
		data += remaining_space;
   27a7e:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27a80:	1e63      	subs	r3, r4, #1
   27a82:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   27a86:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27a8a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27a8e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   27a90:	ea82 0200 	eor.w	r2, r2, r0
   27a94:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27a96:	d1f6      	bne.n	27a86 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27a98:	4621      	mov	r1, r4
   27a9a:	4620      	mov	r0, r4
   27a9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27a9e:	f7ff ff06 	bl	278ae <tc_aes_encrypt>
   27aa2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   27aa6:	2d10      	cmp	r5, #16
   27aa8:	d80a      	bhi.n	27ac0 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   27aaa:	2d00      	cmp	r5, #0
   27aac:	d0db      	beq.n	27a66 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   27aae:	462b      	mov	r3, r5
   27ab0:	4632      	mov	r2, r6
   27ab2:	4629      	mov	r1, r5
   27ab4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27ab8:	f7ff fe22 	bl	27700 <_copy>
		s->leftover_offset = data_length;
   27abc:	6465      	str	r5, [r4, #68]	; 0x44
   27abe:	e7d2      	b.n	27a66 <tc_cmac_update+0x50>
   27ac0:	1e63      	subs	r3, r4, #1
   27ac2:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   27ac4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27ac8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27acc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   27ace:	ea82 0200 	eor.w	r2, r2, r0
   27ad2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27ad4:	d1f6      	bne.n	27ac4 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27ad6:	4621      	mov	r1, r4
   27ad8:	4620      	mov	r0, r4
   27ada:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27adc:	f7ff fee7 	bl	278ae <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   27ae0:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   27ae2:	3d10      	subs	r5, #16
   27ae4:	e7df      	b.n	27aa6 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   27ae6:	2000      	movs	r0, #0
   27ae8:	e7be      	b.n	27a68 <tc_cmac_update+0x52>

00027aea <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   27aea:	b570      	push	{r4, r5, r6, lr}
   27aec:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   27aee:	4605      	mov	r5, r0
   27af0:	b1f0      	cbz	r0, 27b30 <tc_cmac_final+0x46>
   27af2:	b371      	cbz	r1, 27b52 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   27af4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   27af6:	2a10      	cmp	r2, #16
   27af8:	d11b      	bne.n	27b32 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   27afa:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27afc:	1e63      	subs	r3, r4, #1
   27afe:	3901      	subs	r1, #1
   27b00:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27b04:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27b08:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27b0c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27b0e:	ea82 0206 	eor.w	r2, r2, r6
   27b12:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   27b16:	ea82 0206 	eor.w	r2, r2, r6
   27b1a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27b1c:	d1f2      	bne.n	27b04 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   27b1e:	4621      	mov	r1, r4
   27b20:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27b22:	4628      	mov	r0, r5
   27b24:	f7ff fec3 	bl	278ae <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   27b28:	4620      	mov	r0, r4
   27b2a:	f7ff ff2b 	bl	27984 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   27b2e:	2001      	movs	r0, #1
}
   27b30:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   27b32:	f102 0030 	add.w	r0, r2, #48	; 0x30
   27b36:	2100      	movs	r1, #0
   27b38:	f1c2 0210 	rsb	r2, r2, #16
   27b3c:	4420      	add	r0, r4
   27b3e:	f7ff fdec 	bl	2771a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27b42:	2280      	movs	r2, #128	; 0x80
   27b44:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   27b46:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27b4a:	4423      	add	r3, r4
   27b4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   27b50:	e7d4      	b.n	27afc <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   27b52:	4608      	mov	r0, r1
   27b54:	e7ec      	b.n	27b30 <tc_cmac_final+0x46>

00027b56 <tc_sha256_update>:
{
   27b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b58:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   27b5a:	b110      	cbz	r0, 27b62 <tc_sha256_update+0xc>
   27b5c:	b1f9      	cbz	r1, 27b9e <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   27b5e:	b90a      	cbnz	r2, 27b64 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   27b60:	2001      	movs	r0, #1
}
   27b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   27b64:	2700      	movs	r7, #0
   27b66:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   27b68:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   27b6c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   27b6e:	1c5a      	adds	r2, r3, #1
   27b70:	6682      	str	r2, [r0, #104]	; 0x68
   27b72:	f814 1b01 	ldrb.w	r1, [r4], #1
   27b76:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   27b78:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   27b7a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   27b7e:	d90b      	bls.n	27b98 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   27b80:	4631      	mov	r1, r6
   27b82:	f7e8 fc31 	bl	103e8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   27b86:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   27b8a:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   27b8e:	f142 0200 	adc.w	r2, r2, #0
   27b92:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   27b96:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   27b98:	42a5      	cmp	r5, r4
   27b9a:	d1e7      	bne.n	27b6c <tc_sha256_update+0x16>
   27b9c:	e7e0      	b.n	27b60 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   27b9e:	4608      	mov	r0, r1
   27ba0:	e7df      	b.n	27b62 <tc_sha256_update+0xc>

00027ba2 <tc_sha256_final>:
{
   27ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ba4:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   27ba6:	4605      	mov	r5, r0
   27ba8:	2800      	cmp	r0, #0
   27baa:	d054      	beq.n	27c56 <tc_sha256_final+0xb4>
   27bac:	2900      	cmp	r1, #0
   27bae:	d053      	beq.n	27c58 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   27bb0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   27bb2:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   27bb6:	00d8      	lsls	r0, r3, #3
   27bb8:	1812      	adds	r2, r2, r0
   27bba:	f141 0100 	adc.w	r1, r1, #0
   27bbe:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   27bc2:	2280      	movs	r2, #128	; 0x80
   27bc4:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   27bc6:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   27bc8:	4423      	add	r3, r4
   27bca:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   27bcc:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   27bd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   27bd4:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   27bd8:	d90a      	bls.n	27bf0 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   27bda:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   27bde:	4639      	mov	r1, r7
   27be0:	4430      	add	r0, r6
   27be2:	f7ff fd9a 	bl	2771a <_set>
		compress(s->iv, s->leftover);
   27be6:	4631      	mov	r1, r6
   27be8:	4620      	mov	r0, r4
   27bea:	f7e8 fbfd 	bl	103e8 <compress>
		s->leftover_offset = 0;
   27bee:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   27bf0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   27bf2:	2100      	movs	r1, #0
   27bf4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   27bf8:	4430      	add	r0, r6
   27bfa:	f7ff fd8e 	bl	2771a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   27bfe:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   27c00:	4631      	mov	r1, r6
   27c02:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   27c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   27c06:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   27c08:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   27c0a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   27c0e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   27c12:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   27c14:	0e1b      	lsrs	r3, r3, #24
   27c16:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   27c1a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   27c1c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   27c20:	f7e8 fbe2 	bl	103e8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   27c24:	1d2b      	adds	r3, r5, #4
   27c26:	1f21      	subs	r1, r4, #4
   27c28:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   27c2a:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   27c2e:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   27c30:	0e10      	lsrs	r0, r2, #24
   27c32:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   27c36:	0c10      	lsrs	r0, r2, #16
   27c38:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   27c3c:	0a10      	lsrs	r0, r2, #8
   27c3e:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   27c42:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   27c46:	42ab      	cmp	r3, r5
   27c48:	d1ef      	bne.n	27c2a <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   27c4a:	4620      	mov	r0, r4
   27c4c:	2270      	movs	r2, #112	; 0x70
   27c4e:	2100      	movs	r1, #0
   27c50:	f7ff fd63 	bl	2771a <_set>
	return TC_CRYPTO_SUCCESS;
   27c54:	2001      	movs	r0, #1
}
   27c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   27c58:	4608      	mov	r0, r1
   27c5a:	e7fc      	b.n	27c56 <tc_sha256_final+0xb4>

00027c5c <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   27c5c:	b530      	push	{r4, r5, lr}
   27c5e:	1e43      	subs	r3, r0, #1
   27c60:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   27c62:	42a9      	cmp	r1, r5
   27c64:	d106      	bne.n	27c74 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   27c66:	2136      	movs	r1, #54	; 0x36
   27c68:	245c      	movs	r4, #92	; 0x5c
   27c6a:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   27c6c:	1a13      	subs	r3, r2, r0
   27c6e:	2b3f      	cmp	r3, #63	; 0x3f
   27c70:	d90c      	bls.n	27c8c <rekey+0x30>
	}
}
   27c72:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   27c74:	780c      	ldrb	r4, [r1, #0]
   27c76:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   27c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   27c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   27c82:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   27c86:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   27c8a:	e7ea      	b.n	27c62 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   27c8c:	f802 1b01 	strb.w	r1, [r2], #1
   27c90:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   27c94:	e7ea      	b.n	27c6c <rekey+0x10>

00027c96 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   27c96:	b5f0      	push	{r4, r5, r6, r7, lr}
   27c98:	460e      	mov	r6, r1
   27c9a:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   27c9c:	4605      	mov	r5, r0
{
   27c9e:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   27ca0:	b1b8      	cbz	r0, 27cd2 <tc_hmac_set_key+0x3c>
   27ca2:	b341      	cbz	r1, 27cf6 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   27ca4:	b34a      	cbz	r2, 27cfa <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   27ca6:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   27ca8:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   27cac:	d813      	bhi.n	27cd6 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   27cae:	a810      	add	r0, sp, #64	; 0x40
   27cb0:	f7e8 fc84 	bl	105bc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   27cb4:	4622      	mov	r2, r4
   27cb6:	4669      	mov	r1, sp
   27cb8:	a810      	add	r0, sp, #64	; 0x40
   27cba:	f7ff ff4c 	bl	27b56 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   27cbe:	a910      	add	r1, sp, #64	; 0x40
   27cc0:	a834      	add	r0, sp, #208	; 0xd0
   27cc2:	f7ff ff6e 	bl	27ba2 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   27cc6:	4622      	mov	r2, r4
   27cc8:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   27cca:	4638      	mov	r0, r7
   27ccc:	f7ff ffc6 	bl	27c5c <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   27cd0:	2001      	movs	r0, #1
}
   27cd2:	b04d      	add	sp, #308	; 0x134
   27cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   27cd6:	f7e8 fc71 	bl	105bc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   27cda:	4622      	mov	r2, r4
   27cdc:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   27cde:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   27ce2:	4628      	mov	r0, r5
   27ce4:	f7ff ff37 	bl	27b56 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   27ce8:	4629      	mov	r1, r5
   27cea:	4620      	mov	r0, r4
   27cec:	f7ff ff59 	bl	27ba2 <tc_sha256_final>
		rekey(ctx->key,
   27cf0:	2220      	movs	r2, #32
   27cf2:	4621      	mov	r1, r4
   27cf4:	e7e9      	b.n	27cca <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   27cf6:	4608      	mov	r0, r1
   27cf8:	e7eb      	b.n	27cd2 <tc_hmac_set_key+0x3c>
   27cfa:	4610      	mov	r0, r2
   27cfc:	e7e9      	b.n	27cd2 <tc_hmac_set_key+0x3c>

00027cfe <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   27cfe:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   27d00:	4604      	mov	r4, r0
   27d02:	b140      	cbz	r0, 27d16 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   27d04:	f7e8 fc5a 	bl	105bc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   27d08:	2240      	movs	r2, #64	; 0x40
   27d0a:	4620      	mov	r0, r4
   27d0c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   27d10:	f7ff ff21 	bl	27b56 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   27d14:	2001      	movs	r0, #1
}
   27d16:	bd10      	pop	{r4, pc}

00027d18 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   27d18:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   27d1a:	b110      	cbz	r0, 27d22 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   27d1c:	f7ff ff1b 	bl	27b56 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   27d20:	2001      	movs	r0, #1
}
   27d22:	bd08      	pop	{r3, pc}

00027d24 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   27d24:	b570      	push	{r4, r5, r6, lr}
   27d26:	460e      	mov	r6, r1
   27d28:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   27d2a:	4605      	mov	r5, r0
   27d2c:	b1f0      	cbz	r0, 27d6c <tc_hmac_final+0x48>
   27d2e:	2920      	cmp	r1, #32
   27d30:	d11c      	bne.n	27d6c <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   27d32:	b1ea      	cbz	r2, 27d70 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   27d34:	4611      	mov	r1, r2
   27d36:	f7ff ff34 	bl	27ba2 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   27d3a:	4620      	mov	r0, r4
   27d3c:	f7e8 fc3e 	bl	105bc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   27d40:	2240      	movs	r2, #64	; 0x40
   27d42:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   27d46:	4620      	mov	r0, r4
   27d48:	f7ff ff05 	bl	27b56 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   27d4c:	4632      	mov	r2, r6
   27d4e:	4629      	mov	r1, r5
   27d50:	4620      	mov	r0, r4
   27d52:	f7ff ff00 	bl	27b56 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   27d56:	4621      	mov	r1, r4
   27d58:	4628      	mov	r0, r5
   27d5a:	f7ff ff22 	bl	27ba2 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   27d5e:	4620      	mov	r0, r4
   27d60:	22f0      	movs	r2, #240	; 0xf0
   27d62:	2100      	movs	r1, #0
   27d64:	f7ff fcd9 	bl	2771a <_set>

	return TC_CRYPTO_SUCCESS;
   27d68:	2001      	movs	r0, #1
}
   27d6a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27d6c:	2000      	movs	r0, #0
   27d6e:	e7fc      	b.n	27d6a <tc_hmac_final+0x46>
   27d70:	4610      	mov	r0, r2
   27d72:	e7fa      	b.n	27d6a <tc_hmac_final+0x46>

00027d74 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   27d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d78:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   27d7a:	f04f 0b01 	mov.w	fp, #1
{
   27d7e:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   27d80:	2300      	movs	r3, #0
{
   27d82:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27d84:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   27d88:	4631      	mov	r1, r6
{
   27d8a:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27d8c:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   27d8e:	f88d 3006 	strb.w	r3, [sp, #6]
{
   27d92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   27d96:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27d9a:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27d9e:	f7ff ff7a 	bl	27c96 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   27da2:	4620      	mov	r0, r4
   27da4:	f7ff ffab 	bl	27cfe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27da8:	2220      	movs	r2, #32
   27daa:	4629      	mov	r1, r5
   27dac:	4620      	mov	r0, r4
   27dae:	f7ff ffb3 	bl	27d18 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   27db2:	465a      	mov	r2, fp
   27db4:	4620      	mov	r0, r4
   27db6:	f10d 0106 	add.w	r1, sp, #6
   27dba:	f7ff ffad 	bl	27d18 <tc_hmac_update>

	if (data && datalen)
   27dbe:	f1b8 0f00 	cmp.w	r8, #0
   27dc2:	d007      	beq.n	27dd4 <update+0x60>
   27dc4:	f1b9 0f00 	cmp.w	r9, #0
   27dc8:	d004      	beq.n	27dd4 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   27dca:	464a      	mov	r2, r9
   27dcc:	4641      	mov	r1, r8
   27dce:	4620      	mov	r0, r4
   27dd0:	f7ff ffa2 	bl	27d18 <tc_hmac_update>
	if (additional_data && additional_datalen)
   27dd4:	b13f      	cbz	r7, 27de6 <update+0x72>
   27dd6:	f1ba 0f00 	cmp.w	sl, #0
   27dda:	d004      	beq.n	27de6 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   27ddc:	4652      	mov	r2, sl
   27dde:	4639      	mov	r1, r7
   27de0:	4620      	mov	r0, r4
   27de2:	f7ff ff99 	bl	27d18 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   27de6:	4622      	mov	r2, r4
   27de8:	2120      	movs	r1, #32
   27dea:	4630      	mov	r0, r6
   27dec:	f7ff ff9a 	bl	27d24 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27df0:	2220      	movs	r2, #32
   27df2:	4631      	mov	r1, r6
   27df4:	4620      	mov	r0, r4
   27df6:	f7ff ff4e 	bl	27c96 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   27dfa:	4620      	mov	r0, r4
   27dfc:	f7ff ff7f 	bl	27cfe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27e00:	2220      	movs	r2, #32
   27e02:	4629      	mov	r1, r5
   27e04:	4620      	mov	r0, r4
   27e06:	f7ff ff87 	bl	27d18 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   27e0a:	4622      	mov	r2, r4
   27e0c:	2120      	movs	r1, #32
   27e0e:	4628      	mov	r0, r5
   27e10:	f7ff ff88 	bl	27d24 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   27e14:	f1b8 0f00 	cmp.w	r8, #0
   27e18:	d03a      	beq.n	27e90 <update+0x11c>
   27e1a:	f1b9 0f00 	cmp.w	r9, #0
   27e1e:	d037      	beq.n	27e90 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27e20:	2220      	movs	r2, #32
   27e22:	4631      	mov	r1, r6
   27e24:	4620      	mov	r0, r4
   27e26:	f7ff ff36 	bl	27c96 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   27e2a:	4620      	mov	r0, r4
   27e2c:	f7ff ff67 	bl	27cfe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27e30:	2220      	movs	r2, #32
   27e32:	4629      	mov	r1, r5
   27e34:	4620      	mov	r0, r4
   27e36:	f7ff ff6f 	bl	27d18 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   27e3a:	2201      	movs	r2, #1
   27e3c:	f10d 0107 	add.w	r1, sp, #7
   27e40:	4620      	mov	r0, r4
   27e42:	f7ff ff69 	bl	27d18 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   27e46:	464a      	mov	r2, r9
   27e48:	4641      	mov	r1, r8
   27e4a:	4620      	mov	r0, r4
   27e4c:	f7ff ff64 	bl	27d18 <tc_hmac_update>
	if (additional_data && additional_datalen)
   27e50:	b13f      	cbz	r7, 27e62 <update+0xee>
   27e52:	f1ba 0f00 	cmp.w	sl, #0
   27e56:	d004      	beq.n	27e62 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   27e58:	4652      	mov	r2, sl
   27e5a:	4639      	mov	r1, r7
   27e5c:	4620      	mov	r0, r4
   27e5e:	f7ff ff5b 	bl	27d18 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   27e62:	4622      	mov	r2, r4
   27e64:	2120      	movs	r1, #32
   27e66:	4630      	mov	r0, r6
   27e68:	f7ff ff5c 	bl	27d24 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27e6c:	2220      	movs	r2, #32
   27e6e:	4631      	mov	r1, r6
   27e70:	4620      	mov	r0, r4
   27e72:	f7ff ff10 	bl	27c96 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   27e76:	4620      	mov	r0, r4
   27e78:	f7ff ff41 	bl	27cfe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27e7c:	2220      	movs	r2, #32
   27e7e:	4629      	mov	r1, r5
   27e80:	4620      	mov	r0, r4
   27e82:	f7ff ff49 	bl	27d18 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   27e86:	4622      	mov	r2, r4
   27e88:	2120      	movs	r1, #32
   27e8a:	4628      	mov	r0, r5
   27e8c:	f7ff ff4a 	bl	27d24 <tc_hmac_final>
}
   27e90:	b003      	add	sp, #12
   27e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027e96 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   27e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27e98:	460c      	mov	r4, r1
   27e9a:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   27e9c:	4605      	mov	r5, r0
   27e9e:	b1b0      	cbz	r0, 27ece <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   27ea0:	b1b9      	cbz	r1, 27ed2 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   27ea2:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   27ea4:	2220      	movs	r2, #32
   27ea6:	2100      	movs	r1, #0
   27ea8:	30f0      	adds	r0, #240	; 0xf0
   27eaa:	f7ff fc36 	bl	2771a <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   27eae:	2220      	movs	r2, #32
   27eb0:	2101      	movs	r1, #1
   27eb2:	f505 7088 	add.w	r0, r5, #272	; 0x110
   27eb6:	f7ff fc30 	bl	2771a <_set>
	update(prng, personalization, plen, 0, 0);
   27eba:	4628      	mov	r0, r5
   27ebc:	4633      	mov	r3, r6
   27ebe:	463a      	mov	r2, r7
   27ec0:	4621      	mov	r1, r4
   27ec2:	9600      	str	r6, [sp, #0]
   27ec4:	f7ff ff56 	bl	27d74 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   27ec8:	2001      	movs	r0, #1
	prng->countdown = 0;
   27eca:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   27ece:	b003      	add	sp, #12
   27ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   27ed2:	4608      	mov	r0, r1
   27ed4:	e7fb      	b.n	27ece <tc_hmac_prng_init+0x38>

00027ed6 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   27ed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27ed8:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   27eda:	4605      	mov	r5, r0
   27edc:	b180      	cbz	r0, 27f00 <tc_hmac_prng_reseed+0x2a>
   27ede:	b179      	cbz	r1, 27f00 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   27ee0:	2a1f      	cmp	r2, #31
   27ee2:	d90d      	bls.n	27f00 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   27ee4:	b153      	cbz	r3, 27efc <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   27ee6:	b16c      	cbz	r4, 27f04 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   27ee8:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   27eea:	f7ff ff43 	bl	27d74 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   27eee:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   27ef2:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   27ef4:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   27ef8:	b003      	add	sp, #12
   27efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   27efc:	9300      	str	r3, [sp, #0]
   27efe:	e7f4      	b.n	27eea <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   27f00:	2000      	movs	r0, #0
   27f02:	e7f9      	b.n	27ef8 <tc_hmac_prng_reseed+0x22>
   27f04:	4620      	mov	r0, r4
   27f06:	e7f7      	b.n	27ef8 <tc_hmac_prng_reseed+0x22>

00027f08 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   27f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27f0c:	460d      	mov	r5, r1
   27f0e:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   27f10:	4680      	mov	r8, r0
   27f12:	b3d8      	cbz	r0, 27f8c <tc_hmac_prng_generate+0x84>
   27f14:	b3d2      	cbz	r2, 27f8c <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   27f16:	1e4b      	subs	r3, r1, #1
   27f18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   27f1c:	d236      	bcs.n	27f8c <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   27f1e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   27f22:	b3ab      	cbz	r3, 27f90 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   27f24:	3b01      	subs	r3, #1
   27f26:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27f2a:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27f2e:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27f32:	2220      	movs	r2, #32
   27f34:	4649      	mov	r1, r9
   27f36:	4620      	mov	r0, r4
   27f38:	f7ff fead 	bl	27c96 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   27f3c:	4620      	mov	r0, r4
   27f3e:	f7ff fede 	bl	27cfe <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27f42:	2220      	movs	r2, #32
   27f44:	4639      	mov	r1, r7
   27f46:	4620      	mov	r0, r4
   27f48:	f7ff fee6 	bl	27d18 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   27f4c:	4622      	mov	r2, r4
   27f4e:	2120      	movs	r1, #32
   27f50:	4638      	mov	r0, r7
   27f52:	f7ff fee7 	bl	27d24 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   27f56:	2d20      	cmp	r5, #32
   27f58:	462e      	mov	r6, r5
   27f5a:	bf28      	it	cs
   27f5c:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   27f5e:	4640      	mov	r0, r8
   27f60:	4633      	mov	r3, r6
   27f62:	463a      	mov	r2, r7
   27f64:	4631      	mov	r1, r6
   27f66:	f7ff fbcb 	bl	27700 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   27f6a:	2d20      	cmp	r5, #32
   27f6c:	bf38      	it	cc
   27f6e:	2520      	movcc	r5, #32
	while (outlen != 0) {
   27f70:	3d20      	subs	r5, #32
		out += bufferlen;
   27f72:	44b0      	add	r8, r6
	while (outlen != 0) {
   27f74:	d1dd      	bne.n	27f32 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   27f76:	4620      	mov	r0, r4
   27f78:	462b      	mov	r3, r5
   27f7a:	462a      	mov	r2, r5
   27f7c:	4629      	mov	r1, r5
   27f7e:	9500      	str	r5, [sp, #0]
   27f80:	f7ff fef8 	bl	27d74 <update>

	return TC_CRYPTO_SUCCESS;
   27f84:	2001      	movs	r0, #1
}
   27f86:	b003      	add	sp, #12
   27f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   27f8c:	2000      	movs	r0, #0
   27f8e:	e7fa      	b.n	27f86 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   27f90:	f04f 30ff 	mov.w	r0, #4294967295
   27f94:	e7f7      	b.n	27f86 <tc_hmac_prng_generate+0x7e>

00027f96 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   27f96:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   27f98:	6800      	ldr	r0, [r0, #0]
   27f9a:	f7e8 bb59 	b.w	10650 <z_arm_fatal_error>

00027f9e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   27f9e:	2100      	movs	r1, #0
   27fa0:	2001      	movs	r0, #1
   27fa2:	f7e8 bb55 	b.w	10650 <z_arm_fatal_error>

00027fa6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   27fa6:	b508      	push	{r3, lr}
	handler();
   27fa8:	f7e8 fc1a 	bl	107e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   27fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   27fb0:	f7e8 bce4 	b.w	1097c <z_arm_exc_exit>

00027fb4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   27fb4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   27fb6:	f383 880b 	msr	PSPLIM, r3
}
   27fba:	4770      	bx	lr

00027fbc <z_log_msg_static_create.constprop.0>:
   27fbc:	2300      	movs	r3, #0
   27fbe:	f7e6 bae7 	b.w	e590 <z_impl_z_log_msg_static_create>

00027fc2 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   27fc2:	4770      	bx	lr

00027fc4 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   27fc4:	4770      	bx	lr

00027fc6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   27fc6:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   27fca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   27fce:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   27fd0:	bf08      	it	eq
   27fd2:	f06f 0015 	mvneq.w	r0, #21
   27fd6:	4770      	bx	lr

00027fd8 <mpu_configure_region>:
{
   27fd8:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   27fda:	890a      	ldrh	r2, [r1, #8]
   27fdc:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   27fde:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   27fe0:	684c      	ldr	r4, [r1, #4]
   27fe2:	f002 021f 	and.w	r2, r2, #31
{
   27fe6:	b085      	sub	sp, #20
   27fe8:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   27fec:	9300      	str	r3, [sp, #0]
   27fee:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   27ff2:	f023 031f 	bic.w	r3, r3, #31
   27ff6:	1e62      	subs	r2, r4, #1
   27ff8:	4413      	add	r3, r2
   27ffa:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   27ffe:	2807      	cmp	r0, #7
   28000:	9303      	str	r3, [sp, #12]
   28002:	d904      	bls.n	2800e <mpu_configure_region+0x36>
}
   28004:	b005      	add	sp, #20
   28006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2800a:	f7e9 b8db 	b.w	111c4 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   2800e:	4669      	mov	r1, sp
   28010:	f7e9 f8be 	bl	11190 <region_init>
}
   28014:	b005      	add	sp, #20
   28016:	bd30      	pop	{r4, r5, pc}

00028018 <_stdout_hook_default>:
}
   28018:	f04f 30ff 	mov.w	r0, #4294967295
   2801c:	4770      	bx	lr

0002801e <_stdin_hook_default>:
}
   2801e:	2000      	movs	r0, #0
   28020:	4770      	bx	lr

00028022 <_read>:
{
   28022:	4608      	mov	r0, r1
   28024:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   28026:	f7e9 badd 	b.w	115e4 <z_impl_zephyr_read_stdin>

0002802a <_write>:
{
   2802a:	4608      	mov	r0, r1
   2802c:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2802e:	f7e9 baed 	b.w	1160c <z_impl_zephyr_write_stdout>

00028032 <_close>:
int _close(int file)
   28032:	f04f 30ff 	mov.w	r0, #4294967295
   28036:	4770      	bx	lr

00028038 <_lseek>:
}
   28038:	2000      	movs	r0, #0
   2803a:	4770      	bx	lr

0002803c <_isatty>:
}
   2803c:	2802      	cmp	r0, #2
   2803e:	bfcc      	ite	gt
   28040:	2000      	movgt	r0, #0
   28042:	2001      	movle	r0, #1
   28044:	4770      	bx	lr

00028046 <_kill>:
}
   28046:	2000      	movs	r0, #0
   28048:	4770      	bx	lr

0002804a <_getpid>:
}
   2804a:	2000      	movs	r0, #0
   2804c:	4770      	bx	lr

0002804e <_fstat>:
	st->st_mode = S_IFCHR;
   2804e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   28052:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   28054:	604b      	str	r3, [r1, #4]
}
   28056:	4770      	bx	lr

00028058 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   28058:	b530      	push	{r4, r5, lr}
   2805a:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   2805c:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   28060:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   28062:	794b      	ldrb	r3, [r1, #5]
   28064:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   28068:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   2806a:	220d      	movs	r2, #13
   2806c:	2100      	movs	r1, #0
   2806e:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   28072:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   28076:	f003 fc93 	bl	2b9a0 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2807a:	aa02      	add	r2, sp, #8
   2807c:	4611      	mov	r1, r2
   2807e:	4628      	mov	r0, r5
   28080:	f000 fb59 	bl	28736 <bt_encrypt_le>
	if (err) {
   28084:	b110      	cbz	r0, 2808c <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   28086:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   28088:	b007      	add	sp, #28
   2808a:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   2808c:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   2808e:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   28090:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   28094:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   28096:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   28098:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   2809a:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2809e:	f003 fc35 	bl	2b90c <memcmp>
   280a2:	fab0 f080 	clz	r0, r0
   280a6:	0940      	lsrs	r0, r0, #5
   280a8:	e7ee      	b.n	28088 <bt_rpa_irk_matches+0x30>

000280aa <bt_settings_decode_key>:
{
   280aa:	b570      	push	{r4, r5, r6, lr}
   280ac:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   280ae:	2100      	movs	r1, #0
{
   280b0:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   280b2:	f7ff fa56 	bl	27562 <settings_name_next>
   280b6:	280d      	cmp	r0, #13
   280b8:	d118      	bne.n	280ec <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   280ba:	7b23      	ldrb	r3, [r4, #12]
   280bc:	2b30      	cmp	r3, #48	; 0x30
   280be:	d013      	beq.n	280e8 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   280c0:	2b31      	cmp	r3, #49	; 0x31
   280c2:	d113      	bne.n	280ec <bt_settings_decode_key+0x42>
   280c4:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   280c6:	f805 3b06 	strb.w	r3, [r5], #6
   280ca:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   280ce:	462a      	mov	r2, r5
   280d0:	4620      	mov	r0, r4
   280d2:	2301      	movs	r3, #1
   280d4:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   280d6:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   280d8:	f7fe fa14 	bl	26504 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   280dc:	42b4      	cmp	r4, r6
   280de:	f105 35ff 	add.w	r5, r5, #4294967295
   280e2:	d1f4      	bne.n	280ce <bt_settings_decode_key+0x24>
	return 0;
   280e4:	2000      	movs	r0, #0
}
   280e6:	bd70      	pop	{r4, r5, r6, pc}
   280e8:	2300      	movs	r3, #0
   280ea:	e7ec      	b.n	280c6 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   280ec:	f06f 0015 	mvn.w	r0, #21
   280f0:	e7f9      	b.n	280e6 <bt_settings_decode_key+0x3c>

000280f2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   280f2:	b510      	push	{r4, lr}
   280f4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   280f6:	7801      	ldrb	r1, [r0, #0]
   280f8:	7822      	ldrb	r2, [r4, #0]
{
   280fa:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   280fc:	428a      	cmp	r2, r1
   280fe:	d00f      	beq.n	28120 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   28100:	4669      	mov	r1, sp
   28102:	f7e9 fce9 	bl	11ad8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   28106:	4620      	mov	r0, r4
   28108:	a905      	add	r1, sp, #20
   2810a:	f7e9 fce5 	bl	11ad8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2810e:	2210      	movs	r2, #16
   28110:	f10d 0115 	add.w	r1, sp, #21
   28114:	f10d 0001 	add.w	r0, sp, #1
   28118:	f003 fbf8 	bl	2b90c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2811c:	b00a      	add	sp, #40	; 0x28
   2811e:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   28120:	2a01      	cmp	r2, #1
   28122:	d006      	beq.n	28132 <bt_uuid_cmp+0x40>
   28124:	2a02      	cmp	r2, #2
   28126:	d007      	beq.n	28138 <bt_uuid_cmp+0x46>
   28128:	b972      	cbnz	r2, 28148 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2812a:	8840      	ldrh	r0, [r0, #2]
   2812c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2812e:	1ac0      	subs	r0, r0, r3
   28130:	e7f4      	b.n	2811c <bt_uuid_cmp+0x2a>
   28132:	6840      	ldr	r0, [r0, #4]
   28134:	6863      	ldr	r3, [r4, #4]
   28136:	e7fa      	b.n	2812e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28138:	2210      	movs	r2, #16
   2813a:	1c61      	adds	r1, r4, #1
   2813c:	3001      	adds	r0, #1
}
   2813e:	b00a      	add	sp, #40	; 0x28
   28140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28144:	f003 bbe2 	b.w	2b90c <memcmp>
	switch (u1->type) {
   28148:	f06f 0015 	mvn.w	r0, #21
   2814c:	e7e6      	b.n	2811c <bt_uuid_cmp+0x2a>

0002814e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2814e:	2a04      	cmp	r2, #4
   28150:	d00a      	beq.n	28168 <bt_uuid_create+0x1a>
   28152:	2a10      	cmp	r2, #16
   28154:	d00d      	beq.n	28172 <bt_uuid_create+0x24>
   28156:	2a02      	cmp	r2, #2
   28158:	f04f 0300 	mov.w	r3, #0
   2815c:	d115      	bne.n	2818a <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2815e:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   28160:	880b      	ldrh	r3, [r1, #0]
   28162:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   28164:	2001      	movs	r0, #1
   28166:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   28168:	2301      	movs	r3, #1
   2816a:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2816c:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2816e:	6043      	str	r3, [r0, #4]
		break;
   28170:	e7f8      	b.n	28164 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   28172:	2302      	movs	r3, #2
   28174:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28178:	f101 0310 	add.w	r3, r1, #16
   2817c:	f851 2b04 	ldr.w	r2, [r1], #4
   28180:	4299      	cmp	r1, r3
   28182:	f840 2b04 	str.w	r2, [r0], #4
   28186:	d1f9      	bne.n	2817c <bt_uuid_create+0x2e>
   28188:	e7ec      	b.n	28164 <bt_uuid_create+0x16>
	switch (data_len) {
   2818a:	4618      	mov	r0, r3
}
   2818c:	4770      	bx	lr

0002818e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2818e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   28190:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   28192:	2106      	movs	r1, #6
{
   28194:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   28196:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2819a:	f7ec f853 	bl	14244 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2819e:	b918      	cbnz	r0, 281a8 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   281a0:	79a3      	ldrb	r3, [r4, #6]
   281a2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   281a6:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   281a8:	bd10      	pop	{r4, pc}

000281aa <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   281aa:	280f      	cmp	r0, #15
   281ac:	d807      	bhi.n	281be <bt_hci_evt_get_flags+0x14>
   281ae:	280d      	cmp	r0, #13
   281b0:	d80b      	bhi.n	281ca <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   281b2:	2805      	cmp	r0, #5
   281b4:	bf08      	it	eq
   281b6:	2003      	moveq	r0, #3
   281b8:	bf18      	it	ne
   281ba:	2002      	movne	r0, #2
   281bc:	4770      	bx	lr
	switch (evt) {
   281be:	2813      	cmp	r0, #19
   281c0:	d003      	beq.n	281ca <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   281c2:	281a      	cmp	r0, #26
   281c4:	bf08      	it	eq
   281c6:	2001      	moveq	r0, #1
   281c8:	e7f6      	b.n	281b8 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   281ca:	2001      	movs	r0, #1
	}
}
   281cc:	4770      	bx	lr

000281ce <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   281ce:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   281d2:	b183      	cbz	r3, 281f6 <update_sec_level+0x28>
   281d4:	7b5a      	ldrb	r2, [r3, #13]
   281d6:	07d1      	lsls	r1, r2, #31
   281d8:	d50d      	bpl.n	281f6 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   281da:	06d2      	lsls	r2, r2, #27
   281dc:	d50d      	bpl.n	281fa <update_sec_level+0x2c>
   281de:	7b1b      	ldrb	r3, [r3, #12]
   281e0:	2b10      	cmp	r3, #16
   281e2:	bf14      	ite	ne
   281e4:	2303      	movne	r3, #3
   281e6:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   281e8:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   281ea:	7a80      	ldrb	r0, [r0, #10]
}
   281ec:	4298      	cmp	r0, r3
   281ee:	bf8c      	ite	hi
   281f0:	2000      	movhi	r0, #0
   281f2:	2001      	movls	r0, #1
   281f4:	4770      	bx	lr
   281f6:	2302      	movs	r3, #2
   281f8:	e7f6      	b.n	281e8 <update_sec_level+0x1a>
   281fa:	2303      	movs	r3, #3
   281fc:	e7f4      	b.n	281e8 <update_sec_level+0x1a>

000281fe <hci_vendor_event>:
}
   281fe:	4770      	bx	lr

00028200 <atomic_or>:
{
   28200:	4603      	mov	r3, r0
   28202:	b510      	push	{r4, lr}
}
   28204:	e8d3 0fef 	ldaex	r0, [r3]
   28208:	ea40 0201 	orr.w	r2, r0, r1
   2820c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   28210:	2c00      	cmp	r4, #0
   28212:	d1f7      	bne.n	28204 <atomic_or+0x4>
   28214:	bd10      	pop	{r4, pc}

00028216 <bt_addr_copy>:
   28216:	680b      	ldr	r3, [r1, #0]
   28218:	6003      	str	r3, [r0, #0]
   2821a:	888b      	ldrh	r3, [r1, #4]
   2821c:	8083      	strh	r3, [r0, #4]
}
   2821e:	4770      	bx	lr

00028220 <bt_addr_le_copy>:
   28220:	680b      	ldr	r3, [r1, #0]
   28222:	6003      	str	r3, [r0, #0]
   28224:	888b      	ldrh	r3, [r1, #4]
   28226:	8083      	strh	r3, [r0, #4]
   28228:	798b      	ldrb	r3, [r1, #6]
   2822a:	7183      	strb	r3, [r0, #6]
}
   2822c:	4770      	bx	lr

0002822e <z_log_msg_static_create.constprop.0>:
   2822e:	2300      	movs	r3, #0
   28230:	f7e6 b9ae 	b.w	e590 <z_impl_z_log_msg_static_create>

00028234 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28234:	e8d0 3fef 	ldaex	r3, [r0]
   28238:	400b      	ands	r3, r1
   2823a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2823e:	2a00      	cmp	r2, #0
   28240:	d1f8      	bne.n	28234 <atomic_and.isra.0>
}
   28242:	4770      	bx	lr

00028244 <sys_put_le64>:
	dst[1] = val >> 8;
   28244:	f3c0 2307 	ubfx	r3, r0, #8, #8
   28248:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2824a:	2300      	movs	r3, #0
   2824c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2824e:	0e00      	lsrs	r0, r0, #24
   28250:	70d0      	strb	r0, [r2, #3]
   28252:	f3c1 2007 	ubfx	r0, r1, #8, #8
   28256:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   28258:	7093      	strb	r3, [r2, #2]
   2825a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2825c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2825e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   28260:	71d1      	strb	r1, [r2, #7]
}
   28262:	4770      	bx	lr

00028264 <bt_hci_disconnect>:
{
   28264:	b570      	push	{r4, r5, r6, lr}
   28266:	4606      	mov	r6, r0
   28268:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2826a:	f240 4006 	movw	r0, #1030	; 0x406
   2826e:	2103      	movs	r1, #3
   28270:	f7ea f922 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   28274:	4604      	mov	r4, r0
   28276:	b168      	cbz	r0, 28294 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   28278:	2103      	movs	r1, #3
   2827a:	300c      	adds	r0, #12
   2827c:	f7f2 fdec 	bl	1ae58 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   28280:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   28282:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   28284:	4621      	mov	r1, r4
}
   28286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2828a:	2200      	movs	r2, #0
   2828c:	f240 4006 	movw	r0, #1030	; 0x406
   28290:	f7ea b960 	b.w	12554 <bt_hci_cmd_send_sync>
}
   28294:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28298:	bd70      	pop	{r4, r5, r6, pc}

0002829a <bt_le_set_data_len>:
{
   2829a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2829c:	4607      	mov	r7, r0
   2829e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   282a0:	f242 0022 	movw	r0, #8226	; 0x2022
   282a4:	2106      	movs	r1, #6
{
   282a6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   282a8:	f7ea f906 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   282ac:	4604      	mov	r4, r0
   282ae:	b178      	cbz	r0, 282d0 <bt_le_set_data_len+0x36>
   282b0:	2106      	movs	r1, #6
   282b2:	300c      	adds	r0, #12
   282b4:	f7f2 fdd0 	bl	1ae58 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   282b8:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   282ba:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   282bc:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   282be:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   282c0:	4621      	mov	r1, r4
}
   282c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   282c6:	2200      	movs	r2, #0
   282c8:	f242 0022 	movw	r0, #8226	; 0x2022
   282cc:	f7ea b942 	b.w	12554 <bt_hci_cmd_send_sync>
}
   282d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   282d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000282d6 <bt_le_set_phy>:
{
   282d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   282da:	4681      	mov	r9, r0
   282dc:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   282de:	f242 0032 	movw	r0, #8242	; 0x2032
   282e2:	2107      	movs	r1, #7
{
   282e4:	4617      	mov	r7, r2
   282e6:	461e      	mov	r6, r3
   282e8:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   282ec:	f7ea f8e4 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   282f0:	4605      	mov	r5, r0
   282f2:	b1a0      	cbz	r0, 2831e <bt_le_set_phy+0x48>
   282f4:	2107      	movs	r1, #7
   282f6:	300c      	adds	r0, #12
   282f8:	f7f2 fdae 	bl	1ae58 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   282fc:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   28300:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   28304:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   28306:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   28308:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2830a:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2830e:	4629      	mov	r1, r5
}
   28310:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   28314:	2200      	movs	r2, #0
   28316:	f242 0032 	movw	r0, #8242	; 0x2032
   2831a:	f7ea b91b 	b.w	12554 <bt_hci_cmd_send_sync>
}
   2831e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028326 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   28326:	68c0      	ldr	r0, [r0, #12]
   28328:	f7ea b9e4 	b.w	126f4 <bt_hci_le_enh_conn_complete>

0002832c <bt_le_conn_params_valid>:
{
   2832c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2832e:	8803      	ldrh	r3, [r0, #0]
   28330:	8842      	ldrh	r2, [r0, #2]
   28332:	4293      	cmp	r3, r2
   28334:	d819      	bhi.n	2836a <bt_le_conn_params_valid+0x3e>
   28336:	2b05      	cmp	r3, #5
   28338:	d917      	bls.n	2836a <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2833a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2833e:	d814      	bhi.n	2836a <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   28340:	8883      	ldrh	r3, [r0, #4]
   28342:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   28346:	d210      	bcs.n	2836a <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   28348:	f640 4476 	movw	r4, #3190	; 0xc76
   2834c:	88c0      	ldrh	r0, [r0, #6]
   2834e:	f1a0 010a 	sub.w	r1, r0, #10
   28352:	b289      	uxth	r1, r1
   28354:	42a1      	cmp	r1, r4
   28356:	d808      	bhi.n	2836a <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   28358:	3301      	adds	r3, #1
   2835a:	b29b      	uxth	r3, r3
   2835c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2835e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   28362:	bf34      	ite	cc
   28364:	2001      	movcc	r0, #1
   28366:	2000      	movcs	r0, #0
}
   28368:	bd10      	pop	{r4, pc}
		return false;
   2836a:	2000      	movs	r0, #0
   2836c:	e7fc      	b.n	28368 <bt_le_conn_params_valid+0x3c>

0002836e <le_conn_param_neg_reply>:
{
   2836e:	b570      	push	{r4, r5, r6, lr}
   28370:	4606      	mov	r6, r0
   28372:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   28374:	f242 0021 	movw	r0, #8225	; 0x2021
   28378:	2103      	movs	r1, #3
   2837a:	f7ea f89d 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   2837e:	4604      	mov	r4, r0
   28380:	b918      	cbnz	r0, 2838a <le_conn_param_neg_reply+0x1c>
}
   28382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28386:	f7e9 bca9 	b.w	11cdc <le_conn_param_neg_reply.part.0>
   2838a:	2103      	movs	r1, #3
   2838c:	300c      	adds	r0, #12
   2838e:	f7f2 fd63 	bl	1ae58 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   28392:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   28394:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   28396:	4621      	mov	r1, r4
}
   28398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2839c:	f242 0021 	movw	r0, #8225	; 0x2021
   283a0:	f7ea bc0e 	b.w	12bc0 <bt_hci_cmd_send>

000283a4 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   283a4:	f240 3041 	movw	r0, #833	; 0x341
   283a8:	4770      	bx	lr

000283aa <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   283aa:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   283ac:	f7f1 ff6a 	bl	1a284 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   283b0:	b118      	cbz	r0, 283ba <bt_addr_le_is_bonded+0x10>
   283b2:	89c0      	ldrh	r0, [r0, #14]
   283b4:	3800      	subs	r0, #0
   283b6:	bf18      	it	ne
   283b8:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   283ba:	bd08      	pop	{r3, pc}

000283bc <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   283bc:	2207      	movs	r2, #7
{
   283be:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   283c0:	f003 faa4 	bl	2b90c <memcmp>
}
   283c4:	fab0 f080 	clz	r0, r0
   283c8:	0940      	lsrs	r0, r0, #5
   283ca:	bd08      	pop	{r3, pc}

000283cc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   283cc:	e8d0 0faf 	lda	r0, [r0]
}
   283d0:	4770      	bx	lr

000283d2 <bt_addr_copy>:
   283d2:	680b      	ldr	r3, [r1, #0]
   283d4:	6003      	str	r3, [r0, #0]
   283d6:	888b      	ldrh	r3, [r1, #4]
   283d8:	8083      	strh	r3, [r0, #4]
}
   283da:	4770      	bx	lr

000283dc <bt_addr_le_copy>:
   283dc:	680b      	ldr	r3, [r1, #0]
   283de:	6003      	str	r3, [r0, #0]
   283e0:	888b      	ldrh	r3, [r1, #4]
   283e2:	8083      	strh	r3, [r0, #4]
   283e4:	798b      	ldrb	r3, [r1, #6]
   283e6:	7183      	strb	r3, [r0, #6]
}
   283e8:	4770      	bx	lr

000283ea <hci_id_add>:
{
   283ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   283ec:	460f      	mov	r7, r1
   283ee:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   283f0:	bb30      	cbnz	r0, 28440 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   283f2:	2127      	movs	r1, #39	; 0x27
   283f4:	f242 0027 	movw	r0, #8231	; 0x2027
   283f8:	f7ea f85e 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   283fc:	4605      	mov	r5, r0
   283fe:	b310      	cbz	r0, 28446 <hci_id_add+0x5c>
   28400:	2127      	movs	r1, #39	; 0x27
   28402:	300c      	adds	r0, #12
   28404:	f7f2 fd28 	bl	1ae58 <net_buf_simple_add>
   28408:	4622      	mov	r2, r4
   2840a:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2840c:	4639      	mov	r1, r7
   2840e:	f7ff ffe5 	bl	283dc <bt_addr_le_copy>
   28412:	1dc3      	adds	r3, r0, #7
   28414:	f104 0110 	add.w	r1, r4, #16
   28418:	f852 0b04 	ldr.w	r0, [r2], #4
   2841c:	428a      	cmp	r2, r1
   2841e:	f843 0b04 	str.w	r0, [r3], #4
   28422:	d1f9      	bne.n	28418 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   28424:	2210      	movs	r2, #16
   28426:	2100      	movs	r1, #0
   28428:	f106 0017 	add.w	r0, r6, #23
   2842c:	f003 fab8 	bl	2b9a0 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   28430:	4629      	mov	r1, r5
}
   28432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   28436:	2200      	movs	r2, #0
   28438:	f242 0027 	movw	r0, #8231	; 0x2027
   2843c:	f7ea b88a 	b.w	12554 <bt_hci_cmd_send_sync>
		return -EINVAL;
   28440:	f06f 0015 	mvn.w	r0, #21
}
   28444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   28446:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2844a:	e7fb      	b.n	28444 <hci_id_add+0x5a>

0002844c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2844c:	7a03      	ldrb	r3, [r0, #8]
{
   2844e:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   28450:	075b      	lsls	r3, r3, #29
   28452:	d505      	bpl.n	28460 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   28454:	4601      	mov	r1, r0
   28456:	322a      	adds	r2, #42	; 0x2a
   28458:	f811 0b01 	ldrb.w	r0, [r1], #1
   2845c:	f7ff bfc5 	b.w	283ea <hci_id_add>
}
   28460:	4770      	bx	lr

00028462 <z_log_msg_static_create.constprop.0>:
   28462:	2300      	movs	r3, #0
   28464:	f7e6 b894 	b.w	e590 <z_impl_z_log_msg_static_create>

00028468 <addr_res_enable>:
{
   28468:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2846a:	2101      	movs	r1, #1
{
   2846c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2846e:	f242 002d 	movw	r0, #8237	; 0x202d
   28472:	f7ea f821 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   28476:	4604      	mov	r4, r0
   28478:	b158      	cbz	r0, 28492 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2847a:	4629      	mov	r1, r5
   2847c:	300c      	adds	r0, #12
   2847e:	f001 fd35 	bl	29eec <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   28482:	4621      	mov	r1, r4
}
   28484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   28488:	2200      	movs	r2, #0
   2848a:	f242 002d 	movw	r0, #8237	; 0x202d
   2848e:	f7ea b861 	b.w	12554 <bt_hci_cmd_send_sync>
}
   28492:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28496:	bd38      	pop	{r3, r4, r5, pc}

00028498 <adv_unpause_enabled>:
{
   28498:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2849a:	f100 0310 	add.w	r3, r0, #16
   2849e:	e8d3 2fef 	ldaex	r2, [r3]
   284a2:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   284a6:	e8c3 1fe4 	stlex	r4, r1, [r3]
   284aa:	2c00      	cmp	r4, #0
   284ac:	d1f7      	bne.n	2849e <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   284ae:	0413      	lsls	r3, r2, #16
   284b0:	d503      	bpl.n	284ba <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   284b2:	2101      	movs	r1, #1
}
   284b4:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   284b6:	f000 b939 	b.w	2872c <bt_le_adv_set_enable>
}
   284ba:	bc10      	pop	{r4}
   284bc:	4770      	bx	lr

000284be <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   284be:	f100 0210 	add.w	r2, r0, #16
{
   284c2:	b508      	push	{r3, lr}
   284c4:	4603      	mov	r3, r0
   284c6:	4610      	mov	r0, r2
   284c8:	f7ff ff80 	bl	283cc <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   284cc:	0601      	lsls	r1, r0, #24
   284ce:	d50d      	bpl.n	284ec <adv_pause_enabled+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   284d0:	e8d2 0fef 	ldaex	r0, [r2]
   284d4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   284d8:	e8c2 0fe1 	stlex	r1, r0, [r2]
   284dc:	2900      	cmp	r1, #0
   284de:	d1f7      	bne.n	284d0 <adv_pause_enabled+0x12>
		bt_le_adv_set_enable(adv, false);
   284e0:	4618      	mov	r0, r3
}
   284e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   284e6:	2100      	movs	r1, #0
   284e8:	f000 b920 	b.w	2872c <bt_le_adv_set_enable>
}
   284ec:	bd08      	pop	{r3, pc}

000284ee <bt_lookup_id_addr>:
{
   284ee:	b510      	push	{r4, lr}
   284f0:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   284f2:	b930      	cbnz	r0, 28502 <bt_lookup_id_addr+0x14>
   284f4:	b119      	cbz	r1, 284fe <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   284f6:	f7f1 fe6d 	bl	1a1d4 <bt_keys_find_irk>
		if (keys) {
   284fa:	b100      	cbz	r0, 284fe <bt_lookup_id_addr+0x10>
			return &keys->addr;
   284fc:	1c44      	adds	r4, r0, #1
}
   284fe:	4620      	mov	r0, r4
   28500:	bd10      	pop	{r4, pc}
		return NULL;
   28502:	2400      	movs	r4, #0
   28504:	e7fb      	b.n	284fe <bt_lookup_id_addr+0x10>

00028506 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   28506:	b118      	cbz	r0, 28510 <bt_id_set_adv_random_addr+0xa>
   28508:	b111      	cbz	r1, 28510 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2850a:	4608      	mov	r0, r1
   2850c:	f7ea bf5a 	b.w	133c4 <set_random_address>
}
   28510:	f06f 0015 	mvn.w	r0, #21
   28514:	4770      	bx	lr

00028516 <bt_id_set_adv_private_addr>:
{
   28516:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   28518:	4604      	mov	r4, r0
   2851a:	b180      	cbz	r0, 2853e <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2851c:	2106      	movs	r1, #6
   2851e:	4668      	mov	r0, sp
   28520:	f7eb fe90 	bl	14244 <bt_rand>
	if (err) {
   28524:	b948      	cbnz	r0, 2853a <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   28526:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2852a:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2852c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   28530:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   28532:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   28536:	f7ff ffe6 	bl	28506 <bt_id_set_adv_random_addr>
}
   2853a:	b002      	add	sp, #8
   2853c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2853e:	f06f 0015 	mvn.w	r0, #21
   28542:	e7fa      	b.n	2853a <bt_id_set_adv_private_addr+0x24>

00028544 <bt_id_adv_random_addr_check>:
}
   28544:	3800      	subs	r0, #0
   28546:	bf18      	it	ne
   28548:	2001      	movne	r0, #1
   2854a:	4770      	bx	lr

0002854c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2854c:	7a03      	ldrb	r3, [r0, #8]
   2854e:	07d9      	lsls	r1, r3, #31
   28550:	d504      	bpl.n	2855c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   28552:	f023 0301 	bic.w	r3, r3, #1
   28556:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   28558:	f7eb b8a0 	b.w	1369c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2855c:	0799      	lsls	r1, r3, #30
   2855e:	d504      	bpl.n	2856a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   28560:	f023 0302 	bic.w	r3, r3, #2
   28564:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   28566:	f7eb b8b3 	b.w	136d0 <bt_id_del>
}
   2856a:	4770      	bx	lr

0002856c <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2856c:	2000      	movs	r0, #0
   2856e:	4770      	bx	lr

00028570 <get_adv_channel_map>:
{
   28570:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   28572:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   28576:	bf0c      	ite	eq
   28578:	2007      	moveq	r0, #7
   2857a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2857c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2857e:	bf48      	it	mi
   28580:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   28584:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   28586:	bf48      	it	mi
   28588:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2858c:	4770      	bx	lr

0002858e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2858e:	e8d0 0faf 	lda	r0, [r0]
}
   28592:	4770      	bx	lr

00028594 <atomic_and>:
{
   28594:	4603      	mov	r3, r0
   28596:	b510      	push	{r4, lr}
}
   28598:	e8d3 0fef 	ldaex	r0, [r3]
   2859c:	ea00 0201 	and.w	r2, r0, r1
   285a0:	e8c3 2fe4 	stlex	r4, r2, [r3]
   285a4:	2c00      	cmp	r4, #0
   285a6:	d1f7      	bne.n	28598 <atomic_and+0x4>
   285a8:	bd10      	pop	{r4, pc}

000285aa <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   285aa:	680b      	ldr	r3, [r1, #0]
   285ac:	6003      	str	r3, [r0, #0]
   285ae:	888b      	ldrh	r3, [r1, #4]
   285b0:	8083      	strh	r3, [r0, #4]
   285b2:	798b      	ldrb	r3, [r1, #6]
   285b4:	7183      	strb	r3, [r0, #6]
   285b6:	4770      	bx	lr

000285b8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   285b8:	2301      	movs	r3, #1
{
   285ba:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   285bc:	fa03 f101 	lsl.w	r1, r3, r1
{
   285c0:	4604      	mov	r4, r0
	if (val) {
   285c2:	b142      	cbz	r2, 285d6 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   285c4:	e8d4 3fef 	ldaex	r3, [r4]
   285c8:	430b      	orrs	r3, r1
   285ca:	e8c4 3fe2 	stlex	r2, r3, [r4]
   285ce:	2a00      	cmp	r2, #0
   285d0:	d1f8      	bne.n	285c4 <atomic_set_bit_to+0xc>
	}
}
   285d2:	bc10      	pop	{r4}
   285d4:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   285d6:	43c9      	mvns	r1, r1
}
   285d8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   285da:	f7ff bfdb 	b.w	28594 <atomic_and>

000285de <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   285de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   285e2:	b087      	sub	sp, #28
   285e4:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   285e8:	4605      	mov	r5, r0
   285ea:	460c      	mov	r4, r1
   285ec:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   285ee:	2100      	movs	r1, #0
   285f0:	2210      	movs	r2, #16
   285f2:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   285f4:	461f      	mov	r7, r3
   285f6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   285fa:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   285fe:	f003 f9cf 	bl	2b9a0 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   28602:	b9ce      	cbnz	r6, 28638 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   28604:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   28608:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2860a:	f242 0008 	movw	r0, #8200	; 0x2008
   2860e:	a902      	add	r1, sp, #8
   28610:	f7eb fa9a 	bl	13b48 <hci_set_ad>
		if (err) {
   28614:	4604      	mov	r4, r0
   28616:	b958      	cbnz	r0, 28630 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   28618:	f1ba 0f00 	cmp.w	sl, #0
   2861c:	d13a      	bne.n	28694 <le_adv_update.constprop.0+0xb6>
   2861e:	3510      	adds	r5, #16
   28620:	e8d5 3fef 	ldaex	r3, [r5]
   28624:	f043 0304 	orr.w	r3, r3, #4
   28628:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2862c:	2a00      	cmp	r2, #0
   2862e:	d1f7      	bne.n	28620 <le_adv_update.constprop.0+0x42>
}
   28630:	4620      	mov	r0, r4
   28632:	b007      	add	sp, #28
   28634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   28638:	f7ea fe72 	bl	13320 <bt_get_name>
   2863c:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2863e:	b9e4      	cbnz	r4, 2867a <le_adv_update.constprop.0+0x9c>
   28640:	bb37      	cbnz	r7, 28690 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   28642:	4658      	mov	r0, fp
   28644:	f7e0 fe8c 	bl	9360 <strlen>
   28648:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2864a:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2864c:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   28650:	f88d 3000 	strb.w	r3, [sp]
   28654:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   28658:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2865c:	d1d4      	bne.n	28608 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2865e:	2202      	movs	r2, #2
			d[1].data = &data;
   28660:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   28664:	9605      	str	r6, [sp, #20]
			d_len = 2;
   28666:	e7d0      	b.n	2860a <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   28668:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2866c:	3a08      	subs	r2, #8
   2866e:	2a01      	cmp	r2, #1
   28670:	d924      	bls.n	286bc <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   28672:	3301      	adds	r3, #1
   28674:	4598      	cmp	r8, r3
   28676:	d1f7      	bne.n	28668 <le_adv_update.constprop.0+0x8a>
   28678:	e7e2      	b.n	28640 <le_adv_update.constprop.0+0x62>
   2867a:	2300      	movs	r3, #0
   2867c:	e7fa      	b.n	28674 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2867e:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   28682:	3a08      	subs	r2, #8
   28684:	2a01      	cmp	r2, #1
   28686:	d919      	bls.n	286bc <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   28688:	3301      	adds	r3, #1
   2868a:	4599      	cmp	r9, r3
   2868c:	d1f7      	bne.n	2867e <le_adv_update.constprop.0+0xa0>
   2868e:	e7d8      	b.n	28642 <le_adv_update.constprop.0+0x64>
   28690:	2300      	movs	r3, #0
   28692:	e7fa      	b.n	2868a <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   28694:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   28696:	2e02      	cmp	r6, #2
			d[1].len = 1;
   28698:	bf08      	it	eq
   2869a:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2869c:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   286a0:	bf08      	it	eq
   286a2:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   286a4:	a902      	add	r1, sp, #8
			d[1].data = &data;
   286a6:	bf08      	it	eq
   286a8:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   286ac:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   286b0:	f7eb fa4a 	bl	13b48 <hci_set_ad>
		if (err) {
   286b4:	2800      	cmp	r0, #0
   286b6:	d0b2      	beq.n	2861e <le_adv_update.constprop.0+0x40>
   286b8:	4604      	mov	r4, r0
   286ba:	e7b9      	b.n	28630 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   286bc:	f06f 0415 	mvn.w	r4, #21
   286c0:	e7b6      	b.n	28630 <le_adv_update.constprop.0+0x52>

000286c2 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   286c2:	6843      	ldr	r3, [r0, #4]
   286c4:	f013 0008 	ands.w	r0, r3, #8
   286c8:	d00a      	beq.n	286e0 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   286ca:	035a      	lsls	r2, r3, #13
   286cc:	d407      	bmi.n	286de <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   286ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   286d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   286d6:	bf14      	ite	ne
   286d8:	2002      	movne	r0, #2
   286da:	2001      	moveq	r0, #1
   286dc:	4770      	bx	lr
   286de:	2001      	movs	r0, #1
}
   286e0:	4770      	bx	lr

000286e2 <bt_le_adv_set_enable_legacy>:
{
   286e2:	b570      	push	{r4, r5, r6, lr}
   286e4:	4606      	mov	r6, r0
   286e6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   286e8:	f242 000a 	movw	r0, #8202	; 0x200a
   286ec:	2101      	movs	r1, #1
{
   286ee:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   286f0:	f7e9 fee2 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   286f4:	4604      	mov	r4, r0
   286f6:	b1b0      	cbz	r0, 28726 <bt_le_adv_set_enable_legacy+0x44>
   286f8:	300c      	adds	r0, #12
	if (enable) {
   286fa:	b195      	cbz	r5, 28722 <bt_le_adv_set_enable_legacy+0x40>
   286fc:	2101      	movs	r1, #1
   286fe:	f001 fbf5 	bl	29eec <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   28702:	4620      	mov	r0, r4
   28704:	f106 0210 	add.w	r2, r6, #16
   28708:	a903      	add	r1, sp, #12
   2870a:	2307      	movs	r3, #7
   2870c:	9500      	str	r5, [sp, #0]
   2870e:	f7e9 fec1 	bl	12494 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   28712:	2200      	movs	r2, #0
   28714:	4621      	mov	r1, r4
   28716:	f242 000a 	movw	r0, #8202	; 0x200a
   2871a:	f7e9 ff1b 	bl	12554 <bt_hci_cmd_send_sync>
}
   2871e:	b006      	add	sp, #24
   28720:	bd70      	pop	{r4, r5, r6, pc}
   28722:	4629      	mov	r1, r5
   28724:	e7eb      	b.n	286fe <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   28726:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2872a:	e7f8      	b.n	2871e <bt_le_adv_set_enable_legacy+0x3c>

0002872c <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2872c:	f7ff bfd9 	b.w	286e2 <bt_le_adv_set_enable_legacy>

00028730 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   28730:	3018      	adds	r0, #24
   28732:	f7f9 be73 	b.w	2241c <k_work_cancel_delayable>

00028736 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   28736:	b530      	push	{r4, r5, lr}
   28738:	460d      	mov	r5, r1
   2873a:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2873c:	4601      	mov	r1, r0
{
   2873e:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   28740:	b310      	cbz	r0, 28788 <bt_encrypt_le+0x52>
   28742:	b30d      	cbz	r5, 28788 <bt_encrypt_le+0x52>
   28744:	b302      	cbz	r2, 28788 <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   28746:	4668      	mov	r0, sp
   28748:	f7eb fcf2 	bl	14130 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2874c:	4669      	mov	r1, sp
   2874e:	a804      	add	r0, sp, #16
   28750:	f7e7 fdf6 	bl	10340 <tc_aes128_set_encrypt_key>
   28754:	b1c0      	cbz	r0, 28788 <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   28756:	4629      	mov	r1, r5
   28758:	4668      	mov	r0, sp
   2875a:	f7eb fce9 	bl	14130 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2875e:	4669      	mov	r1, sp
   28760:	4620      	mov	r0, r4
   28762:	aa04      	add	r2, sp, #16
   28764:	f7ff f8a3 	bl	278ae <tc_aes_encrypt>
   28768:	b170      	cbz	r0, 28788 <bt_encrypt_le+0x52>
   2876a:	1e63      	subs	r3, r4, #1
   2876c:	f104 0210 	add.w	r2, r4, #16
   28770:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28772:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28776:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2877a:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2877c:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2877e:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28780:	d1f7      	bne.n	28772 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   28782:	2000      	movs	r0, #0
}
   28784:	b031      	add	sp, #196	; 0xc4
   28786:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   28788:	f06f 0015 	mvn.w	r0, #21
   2878c:	e7fa      	b.n	28784 <bt_encrypt_le+0x4e>

0002878e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2878e:	2200      	movs	r2, #0
	return list->head;
   28790:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28792:	b90b      	cbnz	r3, 28798 <sys_slist_find_and_remove+0xa>
   28794:	4618      	mov	r0, r3
   28796:	4770      	bx	lr
   28798:	428b      	cmp	r3, r1
   2879a:	d110      	bne.n	287be <sys_slist_find_and_remove+0x30>
	return node->next;
   2879c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2879e:	b942      	cbnz	r2, 287b2 <sys_slist_find_and_remove+0x24>
   287a0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   287a2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   287a4:	4291      	cmp	r1, r2
   287a6:	d100      	bne.n	287aa <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   287a8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   287aa:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   287ac:	2001      	movs	r0, #1
	parent->next = child;
   287ae:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   287b0:	4770      	bx	lr
	parent->next = child;
   287b2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   287b4:	6843      	ldr	r3, [r0, #4]
   287b6:	4299      	cmp	r1, r3
	list->tail = node;
   287b8:	bf08      	it	eq
   287ba:	6042      	streq	r2, [r0, #4]
}
   287bc:	e7f5      	b.n	287aa <sys_slist_find_and_remove+0x1c>
	return node->next;
   287be:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   287c0:	681b      	ldr	r3, [r3, #0]
   287c2:	e7e6      	b.n	28792 <sys_slist_find_and_remove+0x4>

000287c4 <atomic_and>:
{
   287c4:	4603      	mov	r3, r0
   287c6:	b510      	push	{r4, lr}
}
   287c8:	e8d3 0fef 	ldaex	r0, [r3]
   287cc:	ea00 0201 	and.w	r2, r0, r1
   287d0:	e8c3 2fe4 	stlex	r4, r2, [r3]
   287d4:	2c00      	cmp	r4, #0
   287d6:	d1f7      	bne.n	287c8 <atomic_and+0x4>
   287d8:	bd10      	pop	{r4, pc}

000287da <z_log_msg_static_create.constprop.0>:
   287da:	2300      	movs	r3, #0
   287dc:	f7e5 bed8 	b.w	e590 <z_impl_z_log_msg_static_create>

000287e0 <tx_complete_work>:
	tx_notify(conn);
   287e0:	3828      	subs	r0, #40	; 0x28
   287e2:	f7eb bec7 	b.w	14574 <tx_notify>

000287e6 <bt_conn_reset_rx_state>:
{
   287e6:	b510      	push	{r4, lr}
   287e8:	4604      	mov	r4, r0
	if (!conn->rx) {
   287ea:	6900      	ldr	r0, [r0, #16]
   287ec:	b118      	cbz	r0, 287f6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   287ee:	f7f2 fa11 	bl	1ac14 <net_buf_unref>
	conn->rx = NULL;
   287f2:	2300      	movs	r3, #0
   287f4:	6123      	str	r3, [r4, #16]
}
   287f6:	bd10      	pop	{r4, pc}

000287f8 <conn_lookup_handle>:
{
   287f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   287fc:	4607      	mov	r7, r0
   287fe:	460e      	mov	r6, r1
   28800:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   28802:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28804:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   28808:	42b4      	cmp	r4, r6
   2880a:	d103      	bne.n	28814 <conn_lookup_handle+0x1c>
	return NULL;
   2880c:	2300      	movs	r3, #0
}
   2880e:	4618      	mov	r0, r3
   28810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28814:	fb09 7004 	mla	r0, r9, r4, r7
   28818:	f7ec f96c 	bl	14af4 <bt_conn_ref>
   2881c:	4603      	mov	r3, r0
		if (!conn) {
   2881e:	b158      	cbz	r0, 28838 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   28820:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   28822:	2d01      	cmp	r5, #1
   28824:	d002      	beq.n	2882c <conn_lookup_handle+0x34>
   28826:	3d07      	subs	r5, #7
   28828:	2d01      	cmp	r5, #1
   2882a:	d803      	bhi.n	28834 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2882c:	881a      	ldrh	r2, [r3, #0]
   2882e:	4542      	cmp	r2, r8
   28830:	d0ed      	beq.n	2880e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   28832:	4618      	mov	r0, r3
   28834:	f7ec f986 	bl	14b44 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   28838:	3401      	adds	r4, #1
   2883a:	e7e5      	b.n	28808 <conn_lookup_handle+0x10>

0002883c <bt_conn_connected>:
{
   2883c:	b510      	push	{r4, lr}
   2883e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28840:	f7ec fecc 	bl	155dc <bt_l2cap_connected>
	notify_connected(conn);
   28844:	4620      	mov	r0, r4
}
   28846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2884a:	f7eb be5d 	b.w	14508 <notify_connected>

0002884e <bt_conn_disconnect>:
{
   2884e:	b510      	push	{r4, lr}
	switch (conn->state) {
   28850:	7b43      	ldrb	r3, [r0, #13]
{
   28852:	4604      	mov	r4, r0
	switch (conn->state) {
   28854:	3b02      	subs	r3, #2
   28856:	2b06      	cmp	r3, #6
   28858:	d816      	bhi.n	28888 <bt_conn_disconnect+0x3a>
   2885a:	e8df f003 	tbb	[pc, r3]
   2885e:	1504      	.short	0x1504
   28860:	0b091515 	.word	0x0b091515
   28864:	09          	.byte	0x09
   28865:	00          	.byte	0x00
		conn->err = reason;
   28866:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   28868:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2886a:	4620      	mov	r0, r4
   2886c:	f7ec f9a2 	bl	14bb4 <bt_conn_set_state>
{
   28870:	2000      	movs	r0, #0
}
   28872:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   28874:	8800      	ldrh	r0, [r0, #0]
   28876:	f7ff fcf5 	bl	28264 <bt_hci_disconnect>
	if (err) {
   2887a:	2800      	cmp	r0, #0
   2887c:	d1f9      	bne.n	28872 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2887e:	7b63      	ldrb	r3, [r4, #13]
   28880:	2b07      	cmp	r3, #7
   28882:	d1f5      	bne.n	28870 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   28884:	2108      	movs	r1, #8
   28886:	e7f0      	b.n	2886a <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   28888:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2888c:	e7f1      	b.n	28872 <bt_conn_disconnect+0x24>

0002888e <bt_conn_set_security>:
{
   2888e:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   28890:	7b43      	ldrb	r3, [r0, #13]
{
   28892:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   28894:	2b07      	cmp	r3, #7
{
   28896:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   28898:	d122      	bne.n	288e0 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2889a:	7a43      	ldrb	r3, [r0, #9]
   2889c:	428b      	cmp	r3, r1
   2889e:	d215      	bcs.n	288cc <bt_conn_set_security+0x3e>
   288a0:	7a83      	ldrb	r3, [r0, #10]
   288a2:	428b      	cmp	r3, r1
   288a4:	d212      	bcs.n	288cc <bt_conn_set_security+0x3e>
	if (val) {
   288a6:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   288a8:	f100 0004 	add.w	r0, r0, #4
   288ac:	d510      	bpl.n	288d0 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   288ae:	e8d0 3fef 	ldaex	r3, [r0]
   288b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   288b6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   288ba:	2a00      	cmp	r2, #0
   288bc:	d1f7      	bne.n	288ae <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   288be:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   288c2:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   288c4:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   288c6:	f7f0 fdbd 	bl	19444 <bt_smp_start_security>
	if (err) {
   288ca:	b930      	cbnz	r0, 288da <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   288cc:	2000      	movs	r0, #0
}
   288ce:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   288d0:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   288d4:	f7ff ff76 	bl	287c4 <atomic_and>
   288d8:	e7f1      	b.n	288be <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   288da:	7a63      	ldrb	r3, [r4, #9]
   288dc:	72a3      	strb	r3, [r4, #10]
   288de:	e7f6      	b.n	288ce <bt_conn_set_security+0x40>
		return -ENOTCONN;
   288e0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   288e4:	e7f3      	b.n	288ce <bt_conn_set_security+0x40>

000288e6 <bt_conn_get_security>:
}
   288e6:	7a40      	ldrb	r0, [r0, #9]
   288e8:	4770      	bx	lr

000288ea <bt_conn_is_peer_addr_le>:
{
   288ea:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   288ec:	7a03      	ldrb	r3, [r0, #8]
{
   288ee:	4604      	mov	r4, r0
	if (id != conn->id) {
   288f0:	428b      	cmp	r3, r1
{
   288f2:	4615      	mov	r5, r2
	if (id != conn->id) {
   288f4:	d115      	bne.n	28922 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   288f6:	f100 0190 	add.w	r1, r0, #144	; 0x90
   288fa:	2207      	movs	r2, #7
   288fc:	4628      	mov	r0, r5
   288fe:	f003 f805 	bl	2b90c <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   28902:	b180      	cbz	r0, 28926 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28904:	78e3      	ldrb	r3, [r4, #3]
   28906:	2207      	movs	r2, #7
   28908:	b943      	cbnz	r3, 2891c <bt_conn_is_peer_addr_le+0x32>
   2890a:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2890e:	4628      	mov	r0, r5
   28910:	f002 fffc 	bl	2b90c <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   28914:	fab0 f080 	clz	r0, r0
   28918:	0940      	lsrs	r0, r0, #5
}
   2891a:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2891c:	f104 0197 	add.w	r1, r4, #151	; 0x97
   28920:	e7f5      	b.n	2890e <bt_conn_is_peer_addr_le+0x24>
		return false;
   28922:	2000      	movs	r0, #0
   28924:	e7f9      	b.n	2891a <bt_conn_is_peer_addr_le+0x30>
		return true;
   28926:	2001      	movs	r0, #1
   28928:	e7f7      	b.n	2891a <bt_conn_is_peer_addr_le+0x30>

0002892a <bt_conn_get_dst>:
}
   2892a:	3090      	adds	r0, #144	; 0x90
   2892c:	4770      	bx	lr

0002892e <bt_conn_le_conn_update>:
{
   2892e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28930:	4607      	mov	r7, r0
   28932:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   28934:	f242 0013 	movw	r0, #8211	; 0x2013
   28938:	210e      	movs	r1, #14
   2893a:	f7e9 fdbd 	bl	124b8 <bt_hci_cmd_create>
	if (!buf) {
   2893e:	4606      	mov	r6, r0
   28940:	b1d0      	cbz	r0, 28978 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   28942:	210e      	movs	r1, #14
   28944:	300c      	adds	r0, #12
   28946:	f7f2 fa87 	bl	1ae58 <net_buf_simple_add>
   2894a:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2894c:	220e      	movs	r2, #14
   2894e:	2100      	movs	r1, #0
   28950:	f003 f826 	bl	2b9a0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   28954:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28956:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   28958:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2895a:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2895c:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2895e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28960:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28962:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28966:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   28968:	88ab      	ldrh	r3, [r5, #4]
   2896a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2896c:	88eb      	ldrh	r3, [r5, #6]
   2896e:	8123      	strh	r3, [r4, #8]
}
   28970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28974:	f7e9 bdee 	b.w	12554 <bt_hci_cmd_send_sync>
}
   28978:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002897e <l2cap_connected>:
}
   2897e:	4770      	bx	lr

00028980 <z_log_msg_static_create.constprop.0>:
   28980:	2300      	movs	r3, #0
   28982:	f7e5 be05 	b.w	e590 <z_impl_z_log_msg_static_create>

00028986 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   28986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28988:	4605      	mov	r5, r0
   2898a:	460f      	mov	r7, r1
   2898c:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2898e:	2300      	movs	r3, #0
   28990:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   28994:	2104      	movs	r1, #4
   28996:	2000      	movs	r0, #0
   28998:	f7ec fa26 	bl	14de8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2899c:	4604      	mov	r4, r0
   2899e:	b920      	cbnz	r0, 289aa <l2cap_create_le_sig_pdu.constprop.0+0x24>
   289a0:	4628      	mov	r0, r5
}
   289a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   289a6:	f7ec bddd 	b.w	15564 <l2cap_create_le_sig_pdu.part.0>
   289aa:	2104      	movs	r1, #4
   289ac:	300c      	adds	r0, #12
   289ae:	f7f2 fa53 	bl	1ae58 <net_buf_simple_add>
	hdr->code = code;
   289b2:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   289b4:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   289b6:	8046      	strh	r6, [r0, #2]
}
   289b8:	4620      	mov	r0, r4
   289ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000289bc <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   289bc:	4770      	bx	lr

000289be <bt_l2cap_chan_del>:
{
   289be:	b570      	push	{r4, r5, r6, lr}
   289c0:	4604      	mov	r4, r0
	if (!chan->conn) {
   289c2:	e9d0 3500 	ldrd	r3, r5, [r0]
   289c6:	b123      	cbz	r3, 289d2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   289c8:	686b      	ldr	r3, [r5, #4]
   289ca:	b103      	cbz	r3, 289ce <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   289cc:	4798      	blx	r3
	chan->conn = NULL;
   289ce:	2300      	movs	r3, #0
   289d0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   289d2:	68e3      	ldr	r3, [r4, #12]
   289d4:	b10b      	cbz	r3, 289da <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   289d6:	4620      	mov	r0, r4
   289d8:	4798      	blx	r3
	if (ops->released) {
   289da:	6a2b      	ldr	r3, [r5, #32]
   289dc:	b11b      	cbz	r3, 289e6 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   289de:	4620      	mov	r0, r4
}
   289e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   289e4:	4718      	bx	r3
}
   289e6:	bd70      	pop	{r4, r5, r6, pc}

000289e8 <bt_l2cap_disconnected>:
{
   289e8:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   289ea:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   289ec:	b130      	cbz	r0, 289fc <bt_l2cap_disconnected+0x14>
	return node->next;
   289ee:	f850 4908 	ldr.w	r4, [r0], #-8
   289f2:	b104      	cbz	r4, 289f6 <bt_l2cap_disconnected+0xe>
   289f4:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   289f6:	f7ff ffe2 	bl	289be <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   289fa:	b904      	cbnz	r4, 289fe <bt_l2cap_disconnected+0x16>
}
   289fc:	bd38      	pop	{r3, r4, r5, pc}
   289fe:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28a00:	b12d      	cbz	r5, 28a0e <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   28a02:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28a04:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   28a06:	f7ff ffda 	bl	289be <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28a0a:	462c      	mov	r4, r5
   28a0c:	e7f7      	b.n	289fe <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   28a0e:	4620      	mov	r0, r4
}
   28a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   28a14:	f7ff bfd3 	b.w	289be <bt_l2cap_chan_del>

00028a18 <bt_l2cap_security_changed>:
{
   28a18:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   28a1a:	6d43      	ldr	r3, [r0, #84]	; 0x54
   28a1c:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28a1e:	b1bb      	cbz	r3, 28a50 <bt_l2cap_security_changed+0x38>
   28a20:	4618      	mov	r0, r3
	return node->next;
   28a22:	f850 4908 	ldr.w	r4, [r0], #-8
   28a26:	b104      	cbz	r4, 28a2a <bt_l2cap_security_changed+0x12>
   28a28:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   28a2a:	f853 3c04 	ldr.w	r3, [r3, #-4]
   28a2e:	689b      	ldr	r3, [r3, #8]
   28a30:	b10b      	cbz	r3, 28a36 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   28a32:	4629      	mov	r1, r5
   28a34:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28a36:	b15c      	cbz	r4, 28a50 <bt_l2cap_security_changed+0x38>
   28a38:	4620      	mov	r0, r4
   28a3a:	68a4      	ldr	r4, [r4, #8]
   28a3c:	6843      	ldr	r3, [r0, #4]
   28a3e:	b124      	cbz	r4, 28a4a <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   28a40:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28a42:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   28a44:	2b00      	cmp	r3, #0
   28a46:	d1f4      	bne.n	28a32 <bt_l2cap_security_changed+0x1a>
   28a48:	e7f6      	b.n	28a38 <bt_l2cap_security_changed+0x20>
   28a4a:	689b      	ldr	r3, [r3, #8]
   28a4c:	2b00      	cmp	r3, #0
   28a4e:	d1f0      	bne.n	28a32 <bt_l2cap_security_changed+0x1a>
}
   28a50:	bd38      	pop	{r3, r4, r5, pc}

00028a52 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   28a52:	3104      	adds	r1, #4
   28a54:	f7ec b9c8 	b.w	14de8 <bt_conn_create_pdu_timeout>

00028a58 <bt_l2cap_send_cb>:
{
   28a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a5c:	4614      	mov	r4, r2
   28a5e:	4605      	mov	r5, r0
   28a60:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   28a62:	f102 000c 	add.w	r0, r2, #12
   28a66:	2104      	movs	r1, #4
   28a68:	461e      	mov	r6, r3
   28a6a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   28a6e:	f7f2 f997 	bl	1ada0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28a72:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   28a74:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28a76:	3a04      	subs	r2, #4
   28a78:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28a7a:	4643      	mov	r3, r8
   28a7c:	4632      	mov	r2, r6
   28a7e:	4621      	mov	r1, r4
   28a80:	4628      	mov	r0, r5
}
   28a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28a86:	f7eb bf95 	b.w	149b4 <bt_conn_send_cb>

00028a8a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   28a8a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28a8c:	b128      	cbz	r0, 28a9a <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28a8e:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28a90:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28a92:	428b      	cmp	r3, r1
   28a94:	d001      	beq.n	28a9a <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   28a96:	6880      	ldr	r0, [r0, #8]
   28a98:	e7f8      	b.n	28a8c <bt_l2cap_le_lookup_tx_cid+0x2>
}
   28a9a:	4770      	bx	lr

00028a9c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   28a9c:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28a9e:	b128      	cbz	r0, 28aac <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28aa0:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28aa2:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28aa4:	428b      	cmp	r3, r1
   28aa6:	d001      	beq.n	28aac <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   28aa8:	6880      	ldr	r0, [r0, #8]
   28aaa:	e7f8      	b.n	28a9e <bt_l2cap_le_lookup_rx_cid+0x2>
}
   28aac:	4770      	bx	lr

00028aae <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   28aae:	4770      	bx	lr

00028ab0 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   28ab0:	4603      	mov	r3, r0
	return list->head;
   28ab2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   28ab4:	b128      	cbz	r0, 28ac2 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28ab6:	6859      	ldr	r1, [r3, #4]
	return node->next;
   28ab8:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28aba:	4288      	cmp	r0, r1
	list->head = node;
   28abc:	601a      	str	r2, [r3, #0]
	list->tail = node;
   28abe:	bf08      	it	eq
   28ac0:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   28ac2:	4770      	bx	lr

00028ac4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   28ac4:	4603      	mov	r3, r0
	size_t bytes = 0;
   28ac6:	2000      	movs	r0, #0

	while (buf) {
   28ac8:	b903      	cbnz	r3, 28acc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   28aca:	4770      	bx	lr
		bytes += buf->len;
   28acc:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   28ace:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   28ad0:	4410      	add	r0, r2
		buf = buf->frags;
   28ad2:	e7f9      	b.n	28ac8 <net_buf_frags_len+0x4>

00028ad4 <attr_read_type_cb>:
{
   28ad4:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   28ad6:	68d4      	ldr	r4, [r2, #12]
   28ad8:	3102      	adds	r1, #2
   28ada:	7823      	ldrb	r3, [r4, #0]
   28adc:	b913      	cbnz	r3, 28ae4 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   28ade:	7021      	strb	r1, [r4, #0]
	return true;
   28ae0:	2001      	movs	r0, #1
}
   28ae2:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   28ae4:	428b      	cmp	r3, r1
   28ae6:	d0fb      	beq.n	28ae0 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   28ae8:	8a03      	ldrh	r3, [r0, #16]
   28aea:	3b02      	subs	r3, #2
   28aec:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   28aee:	2000      	movs	r0, #0
   28af0:	6110      	str	r0, [r2, #16]
		return false;
   28af2:	e7f6      	b.n	28ae2 <attr_read_type_cb+0xe>

00028af4 <att_prepare_write_req>:
}
   28af4:	2006      	movs	r0, #6
   28af6:	4770      	bx	lr

00028af8 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28af8:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28afc:	4108      	asrs	r0, r1
}
   28afe:	f000 0001 	and.w	r0, r0, #1
   28b02:	4770      	bx	lr

00028b04 <write_cb>:
{
   28b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28b06:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   28b08:	4601      	mov	r1, r0
{
   28b0a:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   28b0c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   28b10:	6820      	ldr	r0, [r4, #0]
   28b12:	f000 fdce 	bl	296b2 <bt_gatt_check_perm>
   28b16:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   28b18:	bb00      	cbnz	r0, 28b5c <write_cb+0x58>
	if (!data->req) {
   28b1a:	7a23      	ldrb	r3, [r4, #8]
   28b1c:	b1b3      	cbz	r3, 28b4c <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   28b1e:	f1a3 0218 	sub.w	r2, r3, #24
   28b22:	4253      	negs	r3, r2
   28b24:	4153      	adcs	r3, r2
   28b26:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   28b28:	9301      	str	r3, [sp, #4]
   28b2a:	8a63      	ldrh	r3, [r4, #18]
   28b2c:	4629      	mov	r1, r5
   28b2e:	9300      	str	r3, [sp, #0]
   28b30:	68ae      	ldr	r6, [r5, #8]
   28b32:	8a23      	ldrh	r3, [r4, #16]
   28b34:	68e2      	ldr	r2, [r4, #12]
   28b36:	6820      	ldr	r0, [r4, #0]
   28b38:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   28b3a:	2800      	cmp	r0, #0
   28b3c:	db08      	blt.n	28b50 <write_cb+0x4c>
   28b3e:	8a23      	ldrh	r3, [r4, #16]
   28b40:	4298      	cmp	r0, r3
   28b42:	d10e      	bne.n	28b62 <write_cb+0x5e>
	data->err = 0U;
   28b44:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   28b46:	2001      	movs	r0, #1
	data->err = 0U;
   28b48:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   28b4a:	e008      	b.n	28b5e <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   28b4c:	2302      	movs	r3, #2
   28b4e:	e7eb      	b.n	28b28 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   28b50:	f110 0fff 	cmn.w	r0, #255	; 0xff
   28b54:	d305      	bcc.n	28b62 <write_cb+0x5e>
		return -err;
   28b56:	4240      	negs	r0, r0
   28b58:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   28b5a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   28b5c:	2000      	movs	r0, #0
}
   28b5e:	b002      	add	sp, #8
   28b60:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   28b62:	200e      	movs	r0, #14
   28b64:	e7f9      	b.n	28b5a <write_cb+0x56>

00028b66 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   28b66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28b68:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28b6c:	2300      	movs	r3, #0
   28b6e:	461a      	mov	r2, r3
   28b70:	9300      	str	r3, [sp, #0]
   28b72:	f7ee fdb1 	bl	176d8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   28b76:	b005      	add	sp, #20
   28b78:	f85d fb04 	ldr.w	pc, [sp], #4

00028b7c <att_chan_mtu_updated>:
{
   28b7c:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   28b7e:	6805      	ldr	r5, [r0, #0]
	return list->head;
   28b80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28b82:	b352      	cbz	r2, 28bda <att_chan_mtu_updated+0x5e>
	return node->next;
   28b84:	6813      	ldr	r3, [r2, #0]
   28b86:	b103      	cbz	r3, 28b8a <att_chan_mtu_updated+0xe>
   28b88:	3bf0      	subs	r3, #240	; 0xf0
   28b8a:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   28b8e:	2200      	movs	r2, #0
   28b90:	4611      	mov	r1, r2
   28b92:	e000      	b.n	28b96 <att_chan_mtu_updated+0x1a>
   28b94:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   28b96:	4284      	cmp	r4, r0
   28b98:	d007      	beq.n	28baa <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   28b9a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   28b9c:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   28b9e:	42b1      	cmp	r1, r6
   28ba0:	bf38      	it	cc
   28ba2:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   28ba4:	42a2      	cmp	r2, r4
   28ba6:	bf38      	it	cc
   28ba8:	4622      	movcc	r2, r4
   28baa:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28bac:	b12b      	cbz	r3, 28bba <att_chan_mtu_updated+0x3e>
   28bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   28bb2:	2b00      	cmp	r3, #0
   28bb4:	d1ee      	bne.n	28b94 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   28bb6:	4284      	cmp	r4, r0
   28bb8:	d1ef      	bne.n	28b9a <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   28bba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   28bbc:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   28bbe:	428b      	cmp	r3, r1
   28bc0:	d801      	bhi.n	28bc6 <att_chan_mtu_updated+0x4a>
   28bc2:	4290      	cmp	r0, r2
   28bc4:	d90b      	bls.n	28bde <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   28bc6:	4282      	cmp	r2, r0
   28bc8:	bf38      	it	cc
   28bca:	4602      	movcc	r2, r0
   28bcc:	4299      	cmp	r1, r3
   28bce:	6828      	ldr	r0, [r5, #0]
   28bd0:	bf38      	it	cc
   28bd2:	4619      	movcc	r1, r3
}
   28bd4:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   28bd6:	f7ef bc27 	b.w	18428 <bt_gatt_att_max_mtu_changed>
   28bda:	4611      	mov	r1, r2
   28bdc:	e7ed      	b.n	28bba <att_chan_mtu_updated+0x3e>
}
   28bde:	bc70      	pop	{r4, r5, r6}
   28be0:	4770      	bx	lr

00028be2 <attr_read_group_cb>:
	if (!data->rsp->len) {
   28be2:	68d0      	ldr	r0, [r2, #12]
   28be4:	3104      	adds	r1, #4
   28be6:	7803      	ldrb	r3, [r0, #0]
   28be8:	b913      	cbnz	r3, 28bf0 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   28bea:	7001      	strb	r1, [r0, #0]
	return true;
   28bec:	2001      	movs	r0, #1
   28bee:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   28bf0:	428b      	cmp	r3, r1
   28bf2:	d0fb      	beq.n	28bec <attr_read_group_cb+0xa>
		data->group = NULL;
   28bf4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   28bf6:	6891      	ldr	r1, [r2, #8]
   28bf8:	8a0b      	ldrh	r3, [r1, #16]
   28bfa:	3b04      	subs	r3, #4
   28bfc:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   28bfe:	6110      	str	r0, [r2, #16]
}
   28c00:	4770      	bx	lr

00028c02 <find_info_cb>:
{
   28c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   28c04:	6893      	ldr	r3, [r2, #8]
{
   28c06:	4605      	mov	r5, r0
   28c08:	460f      	mov	r7, r1
   28c0a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   28c0c:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   28c0e:	b963      	cbnz	r3, 28c2a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   28c10:	6850      	ldr	r0, [r2, #4]
   28c12:	2101      	movs	r1, #1
   28c14:	300c      	adds	r0, #12
   28c16:	f7f2 f91f 	bl	1ae58 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   28c1a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   28c1c:	682b      	ldr	r3, [r5, #0]
   28c1e:	781b      	ldrb	r3, [r3, #0]
   28c20:	2b00      	cmp	r3, #0
   28c22:	bf14      	ite	ne
   28c24:	2302      	movne	r3, #2
   28c26:	2301      	moveq	r3, #1
   28c28:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   28c2a:	68a3      	ldr	r3, [r4, #8]
   28c2c:	781b      	ldrb	r3, [r3, #0]
   28c2e:	2b01      	cmp	r3, #1
   28c30:	d003      	beq.n	28c3a <find_info_cb+0x38>
   28c32:	2b02      	cmp	r3, #2
   28c34:	d019      	beq.n	28c6a <find_info_cb+0x68>
   28c36:	2000      	movs	r0, #0
   28c38:	e016      	b.n	28c68 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   28c3a:	682b      	ldr	r3, [r5, #0]
   28c3c:	781b      	ldrb	r3, [r3, #0]
   28c3e:	2b00      	cmp	r3, #0
   28c40:	d1f9      	bne.n	28c36 <find_info_cb+0x34>
   28c42:	6860      	ldr	r0, [r4, #4]
   28c44:	2104      	movs	r1, #4
   28c46:	300c      	adds	r0, #12
   28c48:	f7f2 f906 	bl	1ae58 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   28c4c:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   28c4e:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   28c50:	682a      	ldr	r2, [r5, #0]
   28c52:	68e3      	ldr	r3, [r4, #12]
   28c54:	8852      	ldrh	r2, [r2, #2]
   28c56:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   28c58:	6863      	ldr	r3, [r4, #4]
   28c5a:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   28c5c:	8a1b      	ldrh	r3, [r3, #16]
   28c5e:	1ac0      	subs	r0, r0, r3
   28c60:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   28c62:	bf94      	ite	ls
   28c64:	2000      	movls	r0, #0
   28c66:	2001      	movhi	r0, #1
}
   28c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   28c6a:	682b      	ldr	r3, [r5, #0]
   28c6c:	781b      	ldrb	r3, [r3, #0]
   28c6e:	2b02      	cmp	r3, #2
   28c70:	d1e1      	bne.n	28c36 <find_info_cb+0x34>
   28c72:	6860      	ldr	r0, [r4, #4]
   28c74:	2112      	movs	r1, #18
   28c76:	300c      	adds	r0, #12
   28c78:	f7f2 f8ee 	bl	1ae58 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   28c7c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   28c7e:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28c80:	682b      	ldr	r3, [r5, #0]
   28c82:	68e2      	ldr	r2, [r4, #12]
   28c84:	1c59      	adds	r1, r3, #1
   28c86:	3202      	adds	r2, #2
   28c88:	3311      	adds	r3, #17
   28c8a:	f851 0b04 	ldr.w	r0, [r1], #4
   28c8e:	4299      	cmp	r1, r3
   28c90:	f842 0b04 	str.w	r0, [r2], #4
   28c94:	d1f9      	bne.n	28c8a <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   28c96:	6863      	ldr	r3, [r4, #4]
   28c98:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   28c9a:	8a1b      	ldrh	r3, [r3, #16]
   28c9c:	1ac0      	subs	r0, r0, r3
   28c9e:	2812      	cmp	r0, #18
   28ca0:	e7df      	b.n	28c62 <find_info_cb+0x60>

00028ca2 <z_log_msg_static_create.constprop.0>:
   28ca2:	2300      	movs	r3, #0
   28ca4:	f7e5 bc74 	b.w	e590 <z_impl_z_log_msg_static_create>

00028ca8 <chan_req_send>:
{
   28ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28caa:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28cac:	6888      	ldr	r0, [r1, #8]
   28cae:	f7ff ff09 	bl	28ac4 <net_buf_frags_len>
   28cb2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   28cb4:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28cb6:	4283      	cmp	r3, r0
   28cb8:	d30d      	bcc.n	28cd6 <chan_req_send+0x2e>
	req->buf = NULL;
   28cba:	2600      	movs	r6, #0
	chan->req = req;
   28cbc:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   28cc0:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   28cc2:	4628      	mov	r0, r5
	req->buf = NULL;
   28cc4:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   28cc6:	4639      	mov	r1, r7
   28cc8:	f7ec fef2 	bl	15ab0 <chan_send>
	if (err) {
   28ccc:	b110      	cbz	r0, 28cd4 <chan_req_send+0x2c>
		req->buf = buf;
   28cce:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   28cd0:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   28cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   28cd6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   28cda:	e7fb      	b.n	28cd4 <chan_req_send+0x2c>

00028cdc <process_queue>:
{
   28cdc:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   28cde:	2200      	movs	r2, #0
{
   28ce0:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   28ce2:	2300      	movs	r3, #0
   28ce4:	4608      	mov	r0, r1
{
   28ce6:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   28ce8:	f001 f8d7 	bl	29e9a <net_buf_get>
	if (buf) {
   28cec:	4605      	mov	r5, r0
   28cee:	b158      	cbz	r0, 28d08 <process_queue+0x2c>
	return chan_send(chan, buf);
   28cf0:	4601      	mov	r1, r0
   28cf2:	4620      	mov	r0, r4
   28cf4:	f7ec fedc 	bl	15ab0 <chan_send>
		if (err) {
   28cf8:	4604      	mov	r4, r0
   28cfa:	b118      	cbz	r0, 28d04 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   28cfc:	4629      	mov	r1, r5
   28cfe:	4630      	mov	r0, r6
   28d00:	f002 fc48 	bl	2b594 <k_queue_prepend>
}
   28d04:	4620      	mov	r0, r4
   28d06:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   28d08:	f06f 0401 	mvn.w	r4, #1
   28d0c:	e7fa      	b.n	28d04 <process_queue+0x28>

00028d0e <bt_att_chan_send_rsp>:
{
   28d0e:	b538      	push	{r3, r4, r5, lr}
   28d10:	4604      	mov	r4, r0
   28d12:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   28d14:	f7ec fecc 	bl	15ab0 <chan_send>
	if (err) {
   28d18:	b130      	cbz	r0, 28d28 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   28d1a:	4629      	mov	r1, r5
   28d1c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   28d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   28d24:	f7f1 bf50 	b.w	1abc8 <net_buf_put>
}
   28d28:	bd38      	pop	{r3, r4, r5, pc}

00028d2a <att_chan_read>:
{
   28d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d2e:	4680      	mov	r8, r0
   28d30:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   28d32:	4610      	mov	r0, r2
{
   28d34:	4699      	mov	r9, r3
   28d36:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   28d38:	f7ff fec4 	bl	28ac4 <net_buf_frags_len>
   28d3c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   28d40:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   28d42:	4283      	cmp	r3, r0
   28d44:	d97a      	bls.n	28e3c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   28d46:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   28d4a:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   28d4c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   28d4e:	f7f1 ffbd 	bl	1accc <net_buf_frag_last>
	size_t len, total = 0;
   28d52:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   28d56:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28d58:	4630      	mov	r0, r6
   28d5a:	f7ff feb3 	bl	28ac4 <net_buf_frags_len>
   28d5e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   28d62:	f105 070c 	add.w	r7, r5, #12
   28d66:	1a24      	subs	r4, r4, r0
   28d68:	4638      	mov	r0, r7
   28d6a:	f001 f8ab 	bl	29ec4 <net_buf_simple_tailroom>
   28d6e:	4284      	cmp	r4, r0
   28d70:	d211      	bcs.n	28d96 <att_chan_read+0x6c>
   28d72:	4630      	mov	r0, r6
   28d74:	f7ff fea6 	bl	28ac4 <net_buf_frags_len>
   28d78:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28d7c:	1a24      	subs	r4, r4, r0
		if (!len) {
   28d7e:	bb34      	cbnz	r4, 28dce <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   28d80:	7ab0      	ldrb	r0, [r6, #10]
   28d82:	f7f1 fd0d 	bl	1a7a0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   28d86:	2200      	movs	r2, #0
   28d88:	2300      	movs	r3, #0
   28d8a:	f001 f881 	bl	29e90 <net_buf_alloc_fixed>
			if (!frag) {
   28d8e:	4605      	mov	r5, r0
   28d90:	b930      	cbnz	r0, 28da0 <att_chan_read+0x76>
	return total;
   28d92:	4657      	mov	r7, sl
   28d94:	e02c      	b.n	28df0 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   28d96:	4638      	mov	r0, r7
   28d98:	f001 f894 	bl	29ec4 <net_buf_simple_tailroom>
   28d9c:	4604      	mov	r4, r0
   28d9e:	e7ee      	b.n	28d7e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   28da0:	4601      	mov	r1, r0
   28da2:	4630      	mov	r0, r6
   28da4:	f7f1 ffd8 	bl	1ad58 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28da8:	4630      	mov	r0, r6
   28daa:	f7ff fe8b 	bl	28ac4 <net_buf_frags_len>
   28dae:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28db2:	f105 070c 	add.w	r7, r5, #12
   28db6:	1a24      	subs	r4, r4, r0
   28db8:	4638      	mov	r0, r7
   28dba:	f001 f883 	bl	29ec4 <net_buf_simple_tailroom>
   28dbe:	4284      	cmp	r4, r0
   28dc0:	d21a      	bcs.n	28df8 <att_chan_read+0xce>
   28dc2:	4630      	mov	r0, r6
   28dc4:	f7ff fe7e 	bl	28ac4 <net_buf_frags_len>
   28dc8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28dcc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   28dce:	68e9      	ldr	r1, [r5, #12]
   28dd0:	8a2a      	ldrh	r2, [r5, #16]
   28dd2:	f8cd 9000 	str.w	r9, [sp]
   28dd6:	f8db 7004 	ldr.w	r7, [fp, #4]
   28dda:	440a      	add	r2, r1
   28ddc:	9803      	ldr	r0, [sp, #12]
   28dde:	4659      	mov	r1, fp
   28de0:	b2a3      	uxth	r3, r4
   28de2:	47b8      	blx	r7
		if (read < 0) {
   28de4:	1e07      	subs	r7, r0, #0
   28de6:	da0c      	bge.n	28e02 <att_chan_read+0xd8>
				return total;
   28de8:	f1ba 0f00 	cmp.w	sl, #0
   28dec:	bf18      	it	ne
   28dee:	4657      	movne	r7, sl
}
   28df0:	4638      	mov	r0, r7
   28df2:	b005      	add	sp, #20
   28df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28df8:	4638      	mov	r0, r7
   28dfa:	f001 f863 	bl	29ec4 <net_buf_simple_tailroom>
   28dfe:	4604      	mov	r4, r0
   28e00:	e7e5      	b.n	28dce <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   28e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28e04:	b993      	cbnz	r3, 28e2c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   28e06:	4639      	mov	r1, r7
   28e08:	f105 000c 	add.w	r0, r5, #12
   28e0c:	f7f2 f824 	bl	1ae58 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   28e10:	4630      	mov	r0, r6
   28e12:	f7ff fe57 	bl	28ac4 <net_buf_frags_len>
   28e16:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   28e1a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   28e1c:	4283      	cmp	r3, r0
		total += read;
   28e1e:	44ba      	add	sl, r7
		offset += read;
   28e20:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   28e24:	d9b5      	bls.n	28d92 <att_chan_read+0x68>
   28e26:	42a7      	cmp	r7, r4
   28e28:	d096      	beq.n	28d58 <att_chan_read+0x2e>
   28e2a:	e7b2      	b.n	28d92 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   28e2c:	4639      	mov	r1, r7
   28e2e:	4628      	mov	r0, r5
   28e30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   28e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28e34:	4798      	blx	r3
   28e36:	2800      	cmp	r0, #0
   28e38:	d1e5      	bne.n	28e06 <att_chan_read+0xdc>
   28e3a:	e7aa      	b.n	28d92 <att_chan_read+0x68>
		return 0;
   28e3c:	2700      	movs	r7, #0
   28e3e:	e7d7      	b.n	28df0 <att_chan_read+0xc6>

00028e40 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28e40:	2200      	movs	r2, #0
	return list->head;
   28e42:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28e44:	b903      	cbnz	r3, 28e48 <sys_slist_find_and_remove.isra.0+0x8>
   28e46:	4770      	bx	lr
   28e48:	428b      	cmp	r3, r1
   28e4a:	d10f      	bne.n	28e6c <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   28e4c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28e4e:	b93a      	cbnz	r2, 28e60 <sys_slist_find_and_remove.isra.0+0x20>
   28e50:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   28e52:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   28e54:	4291      	cmp	r1, r2
   28e56:	d100      	bne.n	28e5a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   28e58:	6043      	str	r3, [r0, #4]
	parent->next = child;
   28e5a:	2300      	movs	r3, #0
   28e5c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28e5e:	4770      	bx	lr
	parent->next = child;
   28e60:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28e62:	6843      	ldr	r3, [r0, #4]
   28e64:	4299      	cmp	r1, r3
	list->tail = node;
   28e66:	bf08      	it	eq
   28e68:	6042      	streq	r2, [r0, #4]
}
   28e6a:	e7f6      	b.n	28e5a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   28e6c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28e6e:	681b      	ldr	r3, [r3, #0]
   28e70:	e7e8      	b.n	28e44 <sys_slist_find_and_remove.isra.0+0x4>

00028e72 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   28e72:	2006      	movs	r0, #6
   28e74:	4770      	bx	lr

00028e76 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28e76:	2301      	movs	r3, #1
{
   28e78:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28e7a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28e7e:	e8d0 3fef 	ldaex	r3, [r0]
   28e82:	ea43 0201 	orr.w	r2, r3, r1
   28e86:	e8c0 2fe4 	stlex	r4, r2, [r0]
   28e8a:	2c00      	cmp	r4, #0
   28e8c:	d1f7      	bne.n	28e7e <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   28e8e:	4219      	tst	r1, r3
}
   28e90:	bf14      	ite	ne
   28e92:	2001      	movne	r0, #1
   28e94:	2000      	moveq	r0, #0
   28e96:	bd10      	pop	{r4, pc}

00028e98 <read_cb>:
{
   28e98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   28e9a:	2300      	movs	r3, #0
{
   28e9c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   28e9e:	6816      	ldr	r6, [r2, #0]
{
   28ea0:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   28ea2:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28ea4:	4629      	mov	r1, r5
	data->err = 0x00;
   28ea6:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28ea8:	2295      	movs	r2, #149	; 0x95
   28eaa:	f000 fc02 	bl	296b2 <bt_gatt_check_perm>
   28eae:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   28eb0:	b980      	cbnz	r0, 28ed4 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28eb2:	e9cd 0000 	strd	r0, r0, [sp]
   28eb6:	4629      	mov	r1, r5
   28eb8:	4630      	mov	r0, r6
   28eba:	88a3      	ldrh	r3, [r4, #4]
   28ebc:	68a2      	ldr	r2, [r4, #8]
   28ebe:	f7ff ff34 	bl	28d2a <att_chan_read>
	if (ret < 0) {
   28ec2:	2800      	cmp	r0, #0
   28ec4:	da09      	bge.n	28eda <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   28ec6:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   28eca:	bf32      	itee	cc
   28ecc:	200e      	movcc	r0, #14
		return -err;
   28ece:	4240      	negcs	r0, r0
   28ed0:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   28ed2:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   28ed4:	2000      	movs	r0, #0
}
   28ed6:	b002      	add	sp, #8
   28ed8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   28eda:	2001      	movs	r0, #1
   28edc:	e7fb      	b.n	28ed6 <read_cb+0x3e>

00028ede <read_vl_cb>:
{
   28ede:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   28ee2:	2300      	movs	r3, #0
{
   28ee4:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   28ee6:	f8d2 8000 	ldr.w	r8, [r2]
{
   28eea:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   28eec:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28ef0:	4631      	mov	r1, r6
	data->err = 0x00;
   28ef2:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28ef4:	2295      	movs	r2, #149	; 0x95
   28ef6:	f000 fbdc 	bl	296b2 <bt_gatt_check_perm>
   28efa:	4605      	mov	r5, r0
   28efc:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   28efe:	b9e0      	cbnz	r0, 28f3a <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   28f00:	68a0      	ldr	r0, [r4, #8]
   28f02:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   28f06:	8a02      	ldrh	r2, [r0, #16]
   28f08:	1a9b      	subs	r3, r3, r2
   28f0a:	2b01      	cmp	r3, #1
   28f0c:	dd15      	ble.n	28f3a <read_vl_cb+0x5c>
   28f0e:	2102      	movs	r1, #2
   28f10:	300c      	adds	r0, #12
   28f12:	f7f1 ffa1 	bl	1ae58 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28f16:	e9cd 5500 	strd	r5, r5, [sp]
   28f1a:	4607      	mov	r7, r0
   28f1c:	88a3      	ldrh	r3, [r4, #4]
   28f1e:	4631      	mov	r1, r6
   28f20:	4640      	mov	r0, r8
   28f22:	68a2      	ldr	r2, [r4, #8]
   28f24:	f7ff ff01 	bl	28d2a <att_chan_read>
	if (read < 0) {
   28f28:	1e03      	subs	r3, r0, #0
   28f2a:	da0a      	bge.n	28f42 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   28f2c:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   28f30:	bf32      	itee	cc
   28f32:	230e      	movcc	r3, #14
		return -err;
   28f34:	425b      	negcs	r3, r3
   28f36:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   28f38:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   28f3a:	2000      	movs	r0, #0
}
   28f3c:	b002      	add	sp, #8
   28f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   28f42:	2001      	movs	r0, #1
	rsp->len = read;
   28f44:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   28f46:	e7f9      	b.n	28f3c <read_vl_cb+0x5e>

00028f48 <bt_att_sent>:
{
   28f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28f4a:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   28f4c:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   28f50:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28f52:	f100 0394 	add.w	r3, r0, #148	; 0x94
   28f56:	e8d3 1fef 	ldaex	r1, [r3]
   28f5a:	f021 0110 	bic.w	r1, r1, #16
   28f5e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   28f62:	2a00      	cmp	r2, #0
   28f64:	d1f7      	bne.n	28f56 <bt_att_sent+0xe>
	if (!att) {
   28f66:	b30c      	cbz	r4, 28fac <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   28f68:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   28f6c:	b98b      	cbnz	r3, 28f92 <bt_att_sent+0x4a>
   28f6e:	6863      	ldr	r3, [r4, #4]
   28f70:	b17b      	cbz	r3, 28f92 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28f72:	1d20      	adds	r0, r4, #4
   28f74:	f7ff fd9c 	bl	28ab0 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28f78:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28f7a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28f7c:	4638      	mov	r0, r7
   28f7e:	f7ff fe93 	bl	28ca8 <chan_req_send>
   28f82:	2800      	cmp	r0, #0
   28f84:	da12      	bge.n	28fac <bt_att_sent+0x64>
	return list->head;
   28f86:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   28f88:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   28f8a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   28f8c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   28f8e:	b903      	cbnz	r3, 28f92 <bt_att_sent+0x4a>
	list->tail = node;
   28f90:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   28f92:	4638      	mov	r0, r7
   28f94:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   28f98:	f7ff fea0 	bl	28cdc <process_queue>
	if (!err) {
   28f9c:	b130      	cbz	r0, 28fac <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   28f9e:	4638      	mov	r0, r7
   28fa0:	f104 010c 	add.w	r1, r4, #12
}
   28fa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   28fa8:	f7ff be98 	b.w	28cdc <process_queue>
}
   28fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028fae <att_req_send_process>:
{
   28fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   28fb2:	6a84      	ldr	r4, [r0, #40]	; 0x28
   28fb4:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28fb6:	2c00      	cmp	r4, #0
   28fb8:	d03b      	beq.n	29032 <att_req_send_process+0x84>
	return node->next;
   28fba:	f854 69f0 	ldr.w	r6, [r4], #-240
   28fbe:	b106      	cbz	r6, 28fc2 <att_req_send_process+0x14>
   28fc0:	3ef0      	subs	r6, #240	; 0xf0
{
   28fc2:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   28fc4:	f108 0704 	add.w	r7, r8, #4
{
   28fc8:	461d      	mov	r5, r3
   28fca:	e013      	b.n	28ff4 <att_req_send_process+0x46>
		if (!req && prev &&
   28fcc:	b1c3      	cbz	r3, 29000 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   28fce:	2103      	movs	r1, #3
   28fd0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   28fd4:	f7ff fd90 	bl	28af8 <atomic_test_bit>
   28fd8:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   28fda:	f103 0098 	add.w	r0, r3, #152	; 0x98
   28fde:	f7ff fd8b 	bl	28af8 <atomic_test_bit>
		if (!req && prev &&
   28fe2:	4282      	cmp	r2, r0
   28fe4:	d10c      	bne.n	29000 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28fe6:	b326      	cbz	r6, 29032 <att_req_send_process+0x84>
   28fe8:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   28fec:	b102      	cbz	r2, 28ff0 <att_req_send_process+0x42>
   28fee:	3af0      	subs	r2, #240	; 0xf0
{
   28ff0:	4634      	mov	r4, r6
   28ff2:	4616      	mov	r6, r2
		if (chan->req) {
   28ff4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   28ff8:	2a00      	cmp	r2, #0
   28ffa:	d1f4      	bne.n	28fe6 <att_req_send_process+0x38>
		if (!req && prev &&
   28ffc:	2d00      	cmp	r5, #0
   28ffe:	d0e5      	beq.n	28fcc <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   29000:	4638      	mov	r0, r7
   29002:	f7ff fd55 	bl	28ab0 <sys_slist_get>
	if (node) {
   29006:	4605      	mov	r5, r0
   29008:	b908      	cbnz	r0, 2900e <att_req_send_process+0x60>
   2900a:	4623      	mov	r3, r4
   2900c:	e7eb      	b.n	28fe6 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2900e:	4601      	mov	r1, r0
   29010:	4620      	mov	r0, r4
   29012:	f7ec fdc1 	bl	15b98 <bt_att_chan_req_send>
   29016:	2800      	cmp	r0, #0
   29018:	da0b      	bge.n	29032 <att_req_send_process+0x84>
	return list->head;
   2901a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2901e:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   29020:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   29024:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   29028:	2b00      	cmp	r3, #0
   2902a:	d1ee      	bne.n	2900a <att_req_send_process+0x5c>
	list->tail = node;
   2902c:	f8c8 5008 	str.w	r5, [r8, #8]
}
   29030:	e7eb      	b.n	2900a <att_req_send_process+0x5c>
}
   29032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029036 <bt_att_status>:
{
   29036:	b538      	push	{r3, r4, r5, lr}
   29038:	4605      	mov	r5, r0
   2903a:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2903c:	2100      	movs	r1, #0
   2903e:	f7ff fd5b 	bl	28af8 <atomic_test_bit>
   29042:	b1c0      	cbz	r0, 29076 <bt_att_status+0x40>
	if (!chan->att) {
   29044:	f855 0c04 	ldr.w	r0, [r5, #-4]
   29048:	b1a8      	cbz	r0, 29076 <bt_att_status+0x40>
	if (chan->req) {
   2904a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2904e:	b993      	cbnz	r3, 29076 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   29050:	3004      	adds	r0, #4
   29052:	f7ff fd2d 	bl	28ab0 <sys_slist_get>
	if (!node) {
   29056:	4604      	mov	r4, r0
   29058:	b168      	cbz	r0, 29076 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2905a:	4601      	mov	r1, r0
   2905c:	1f28      	subs	r0, r5, #4
   2905e:	f7ec fd9b 	bl	15b98 <bt_att_chan_req_send>
   29062:	2800      	cmp	r0, #0
   29064:	da07      	bge.n	29076 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   29066:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2906a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2906c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2906e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   29070:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29072:	b902      	cbnz	r2, 29076 <bt_att_status+0x40>
	list->tail = node;
   29074:	609c      	str	r4, [r3, #8]
}
   29076:	bd38      	pop	{r3, r4, r5, pc}

00029078 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   29078:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2907a:	6883      	ldr	r3, [r0, #8]
   2907c:	699b      	ldr	r3, [r3, #24]
   2907e:	b10b      	cbz	r3, 29084 <att_sent+0xc>
		chan->ops->sent(chan);
   29080:	3004      	adds	r0, #4
   29082:	4718      	bx	r3
}
   29084:	4770      	bx	lr

00029086 <att_tx_complete>:
{
   29086:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2908a:	4606      	mov	r6, r0
   2908c:	460d      	mov	r5, r1
	if (!err) {
   2908e:	4614      	mov	r4, r2
   29090:	b122      	cbz	r2, 2909c <att_tx_complete+0x16>
}
   29092:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   29096:	4608      	mov	r0, r1
   29098:	f7ec bc2a 	b.w	158f0 <tx_meta_data_free>
		att_sent(conn, user_data);
   2909c:	f7ff ffec 	bl	29078 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   290a0:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   290a2:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   290a4:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   290a8:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   290ac:	f7ec fc20 	bl	158f0 <tx_meta_data_free>
	if (!err && func) {
   290b0:	b92f      	cbnz	r7, 290be <att_tx_complete+0x38>
}
   290b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   290b6:	4649      	mov	r1, r9
   290b8:	4630      	mov	r0, r6
   290ba:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   290bc:	3401      	adds	r4, #1
   290be:	b2a3      	uxth	r3, r4
   290c0:	4543      	cmp	r3, r8
   290c2:	d3f8      	bcc.n	290b6 <att_tx_complete+0x30>
   290c4:	e7f5      	b.n	290b2 <att_tx_complete+0x2c>

000290c6 <att_req_sent>:
{
   290c6:	b510      	push	{r4, lr}
   290c8:	460c      	mov	r4, r1
	if (!err) {
   290ca:	b90a      	cbnz	r2, 290d0 <att_req_sent+0xa>
		att_sent(conn, user_data);
   290cc:	f7ff ffd4 	bl	29078 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   290d0:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   290d2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   290d6:	b12b      	cbz	r3, 290e4 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   290d8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   290dc:	2300      	movs	r3, #0
   290de:	30c0      	adds	r0, #192	; 0xc0
   290e0:	f7f9 f996 	bl	22410 <k_work_reschedule>
	tx_meta_data_free(user_data);
   290e4:	4620      	mov	r0, r4
}
   290e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   290ea:	f7ec bc01 	b.w	158f0 <tx_meta_data_free>

000290ee <att_cfm_sent>:
{
   290ee:	b510      	push	{r4, lr}
   290f0:	460c      	mov	r4, r1
	if (!err) {
   290f2:	b90a      	cbnz	r2, 290f8 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   290f4:	f7ff ffc0 	bl	29078 <att_sent>
   290f8:	6823      	ldr	r3, [r4, #0]
   290fa:	3398      	adds	r3, #152	; 0x98
   290fc:	e8d3 1fef 	ldaex	r1, [r3]
   29100:	f021 0102 	bic.w	r1, r1, #2
   29104:	e8c3 1fe2 	stlex	r2, r1, [r3]
   29108:	2a00      	cmp	r2, #0
   2910a:	d1f7      	bne.n	290fc <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2910c:	4620      	mov	r0, r4
}
   2910e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   29112:	f7ec bbed 	b.w	158f0 <tx_meta_data_free>

00029116 <att_rsp_sent>:
{
   29116:	b510      	push	{r4, lr}
   29118:	460c      	mov	r4, r1
	if (!err) {
   2911a:	b90a      	cbnz	r2, 29120 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2911c:	f7ff ffac 	bl	29078 <att_sent>
   29120:	6823      	ldr	r3, [r4, #0]
   29122:	3398      	adds	r3, #152	; 0x98
   29124:	e8d3 1fef 	ldaex	r1, [r3]
   29128:	f021 0101 	bic.w	r1, r1, #1
   2912c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   29130:	2a00      	cmp	r2, #0
   29132:	d1f7      	bne.n	29124 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   29134:	4620      	mov	r0, r4
}
   29136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2913a:	f7ec bbd9 	b.w	158f0 <tx_meta_data_free>

0002913e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2913e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29142:	4688      	mov	r8, r1
   29144:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29146:	2101      	movs	r1, #1
   29148:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2914a:	4605      	mov	r5, r0
   2914c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2914e:	f7ec fef9 	bl	15f44 <bt_att_chan_create_pdu>
	if (!buf) {
   29152:	4604      	mov	r4, r0
   29154:	b170      	cbz	r0, 29174 <send_err_rsp.part.0+0x36>
   29156:	2104      	movs	r1, #4
   29158:	300c      	adds	r0, #12
   2915a:	f7f1 fe7d 	bl	1ae58 <net_buf_simple_add>
	rsp->request = req;
   2915e:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   29162:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   29166:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   29168:	4621      	mov	r1, r4
   2916a:	4628      	mov	r0, r5
}
   2916c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   29170:	f7ff bdcd 	b.w	28d0e <bt_att_chan_send_rsp>
}
   29174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029178 <att_write_req>:
{
   29178:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2917a:	460c      	mov	r4, r1
   2917c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2917e:	f101 000c 	add.w	r0, r1, #12
   29182:	f000 fe93 	bl	29eac <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   29186:	8a22      	ldrh	r2, [r4, #16]
   29188:	4603      	mov	r3, r0
   2918a:	9201      	str	r2, [sp, #4]
   2918c:	68e2      	ldr	r2, [r4, #12]
   2918e:	2112      	movs	r1, #18
   29190:	9200      	str	r2, [sp, #0]
   29192:	4628      	mov	r0, r5
   29194:	2213      	movs	r2, #19
   29196:	f7ec ffef 	bl	16178 <att_write_rsp.constprop.0>
}
   2919a:	b003      	add	sp, #12
   2919c:	bd30      	pop	{r4, r5, pc}

0002919e <att_write_cmd>:
{
   2919e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   291a0:	460c      	mov	r4, r1
   291a2:	4605      	mov	r5, r0
   291a4:	f101 000c 	add.w	r0, r1, #12
   291a8:	f000 fe80 	bl	29eac <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   291ac:	8a22      	ldrh	r2, [r4, #16]
   291ae:	4603      	mov	r3, r0
   291b0:	9201      	str	r2, [sp, #4]
   291b2:	68e2      	ldr	r2, [r4, #12]
   291b4:	4628      	mov	r0, r5
   291b6:	9200      	str	r2, [sp, #0]
   291b8:	2200      	movs	r2, #0
   291ba:	4611      	mov	r1, r2
   291bc:	f7ec ffdc 	bl	16178 <att_write_rsp.constprop.0>
}
   291c0:	b003      	add	sp, #12
   291c2:	bd30      	pop	{r4, r5, pc}

000291c4 <att_read_blob_req>:
{
   291c4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   291c6:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   291c8:	210c      	movs	r1, #12
   291ca:	8813      	ldrh	r3, [r2, #0]
   291cc:	8852      	ldrh	r2, [r2, #2]
   291ce:	9200      	str	r2, [sp, #0]
   291d0:	220d      	movs	r2, #13
   291d2:	f7ed f995 	bl	16500 <att_read_rsp>
}
   291d6:	b003      	add	sp, #12
   291d8:	f85d fb04 	ldr.w	pc, [sp], #4

000291dc <att_read_req>:
{
   291dc:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   291de:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   291e0:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   291e2:	210a      	movs	r1, #10
   291e4:	881b      	ldrh	r3, [r3, #0]
   291e6:	9200      	str	r2, [sp, #0]
   291e8:	220b      	movs	r2, #11
   291ea:	f7ed f989 	bl	16500 <att_read_rsp>
}
   291ee:	b003      	add	sp, #12
   291f0:	f85d fb04 	ldr.w	pc, [sp], #4

000291f4 <att_mtu_req>:
{
   291f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   291f6:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   291f8:	f850 2b98 	ldr.w	r2, [r0], #152
{
   291fc:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   291fe:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   29200:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29202:	f7ff fc79 	bl	28af8 <atomic_test_bit>
   29206:	4604      	mov	r4, r0
   29208:	b9f0      	cbnz	r0, 29248 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2920a:	68db      	ldr	r3, [r3, #12]
   2920c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2920e:	2e16      	cmp	r6, #22
   29210:	d91c      	bls.n	2924c <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   29212:	4638      	mov	r0, r7
   29214:	2202      	movs	r2, #2
   29216:	f7ed f813 	bl	16240 <bt_att_create_pdu>
	if (!pdu) {
   2921a:	4607      	mov	r7, r0
   2921c:	b1c0      	cbz	r0, 29250 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2921e:	2102      	movs	r1, #2
   29220:	300c      	adds	r0, #12
   29222:	f7f1 fe19 	bl	1ae58 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   29226:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   29228:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2922a:	7003      	strb	r3, [r0, #0]
   2922c:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2922e:	4628      	mov	r0, r5
   29230:	f7ff fd6d 	bl	28d0e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   29234:	2e41      	cmp	r6, #65	; 0x41
   29236:	bf28      	it	cs
   29238:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2923a:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2923c:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2923e:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   29240:	f7ff fc9c 	bl	28b7c <att_chan_mtu_updated>
	return 0;
   29244:	4620      	mov	r0, r4
}
   29246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   29248:	2006      	movs	r0, #6
   2924a:	e7fc      	b.n	29246 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2924c:	2004      	movs	r0, #4
   2924e:	e7fa      	b.n	29246 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   29250:	200e      	movs	r0, #14
   29252:	e7f8      	b.n	29246 <att_mtu_req+0x52>

00029254 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29254:	8a0a      	ldrh	r2, [r1, #16]
   29256:	2300      	movs	r3, #0
   29258:	68c9      	ldr	r1, [r1, #12]
   2925a:	f7ed bafb 	b.w	16854 <att_handle_rsp>

0002925e <bt_att_encrypt_change>:
{
   2925e:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   29260:	4606      	mov	r6, r0
	if (!att_chan->att) {
   29262:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   29266:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   29268:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   2926c:	2b00      	cmp	r3, #0
   2926e:	d038      	beq.n	292e2 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   29270:	b141      	cbz	r1, 29284 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   29272:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   29276:	2b00      	cmp	r3, #0
   29278:	d033      	beq.n	292e2 <bt_att_encrypt_change+0x84>
   2927a:	7c1b      	ldrb	r3, [r3, #16]
   2927c:	07da      	lsls	r2, r3, #31
   2927e:	d530      	bpl.n	292e2 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   29280:	2305      	movs	r3, #5
   29282:	e021      	b.n	292c8 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   29284:	4628      	mov	r0, r5
   29286:	f7ef f8e3 	bl	18450 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2928a:	7a6b      	ldrb	r3, [r5, #9]
   2928c:	2b01      	cmp	r3, #1
   2928e:	d028      	beq.n	292e2 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   29290:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   29294:	b32d      	cbz	r5, 292e2 <bt_att_encrypt_change+0x84>
   29296:	7c2b      	ldrb	r3, [r5, #16]
   29298:	07db      	lsls	r3, r3, #31
   2929a:	d522      	bpl.n	292e2 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2929c:	68eb      	ldr	r3, [r5, #12]
   2929e:	2b00      	cmp	r3, #0
   292a0:	d0ee      	beq.n	29280 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   292a2:	4630      	mov	r0, r6
   292a4:	696a      	ldr	r2, [r5, #20]
   292a6:	7c69      	ldrb	r1, [r5, #17]
   292a8:	f7ec fe4c 	bl	15f44 <bt_att_chan_create_pdu>
	if (!buf) {
   292ac:	4604      	mov	r4, r0
   292ae:	b150      	cbz	r0, 292c6 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   292b0:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   292b4:	68eb      	ldr	r3, [r5, #12]
   292b6:	4798      	blx	r3
   292b8:	b168      	cbz	r0, 292d6 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   292ba:	69a0      	ldr	r0, [r4, #24]
   292bc:	f7ec fb18 	bl	158f0 <tx_meta_data_free>
		net_buf_unref(buf);
   292c0:	4620      	mov	r0, r4
   292c2:	f7f1 fca7 	bl	1ac14 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   292c6:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   292c8:	2200      	movs	r2, #0
   292ca:	4630      	mov	r0, r6
}
   292cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   292d0:	4611      	mov	r1, r2
   292d2:	f7ed babf 	b.w	16854 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   292d6:	4621      	mov	r1, r4
   292d8:	4630      	mov	r0, r6
   292da:	f7ec fbe9 	bl	15ab0 <chan_send>
   292de:	2800      	cmp	r0, #0
   292e0:	d1eb      	bne.n	292ba <bt_att_encrypt_change+0x5c>
}
   292e2:	bd70      	pop	{r4, r5, r6, pc}

000292e4 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   292e4:	2001      	movs	r0, #1
   292e6:	4770      	bx	lr

000292e8 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   292e8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   292ea:	f7ec fc97 	bl	15c1c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   292ee:	b178      	cbz	r0, 29310 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   292f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   292f2:	b16b      	cbz	r3, 29310 <bt_att_clear_out_of_sync_sent+0x28>
   292f4:	3bf0      	subs	r3, #240	; 0xf0
   292f6:	f103 0298 	add.w	r2, r3, #152	; 0x98
   292fa:	e8d2 0fef 	ldaex	r0, [r2]
   292fe:	f020 0020 	bic.w	r0, r0, #32
   29302:	e8c2 0fe1 	stlex	r1, r0, [r2]
   29306:	2900      	cmp	r1, #0
   29308:	d1f7      	bne.n	292fa <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2930a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2930e:	e7f0      	b.n	292f2 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   29310:	bd08      	pop	{r3, pc}

00029312 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   29312:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   29314:	2104      	movs	r1, #4
   29316:	f7ff fbc1 	bl	28a9c <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2931a:	b128      	cbz	r0, 29328 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2931c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   29320:	2105      	movs	r1, #5
   29322:	3094      	adds	r0, #148	; 0x94
   29324:	f7ff bbe8 	b.w	28af8 <atomic_test_bit>
}
   29328:	bd08      	pop	{r3, pc}

0002932a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2932a:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2932c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   29330:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   29332:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   29334:	8082      	strh	r2, [r0, #4]
}
   29336:	4770      	bx	lr

00029338 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   29338:	6010      	str	r0, [r2, #0]
}
   2933a:	2000      	movs	r0, #0
   2933c:	4770      	bx	lr

0002933e <gatt_ccc_changed>:
{
   2933e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   29340:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   29342:	895a      	ldrh	r2, [r3, #10]
   29344:	428a      	cmp	r2, r1
   29346:	d003      	beq.n	29350 <gatt_ccc_changed+0x12>
		ccc->value = value;
   29348:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2934a:	68db      	ldr	r3, [r3, #12]
   2934c:	b103      	cbz	r3, 29350 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2934e:	4718      	bx	r3
}
   29350:	4770      	bx	lr

00029352 <gatt_indicate_rsp>:
{
   29352:	b510      	push	{r4, lr}
   29354:	9c02      	ldr	r4, [sp, #8]
   29356:	460a      	mov	r2, r1
	if (params->func) {
   29358:	68a3      	ldr	r3, [r4, #8]
   2935a:	b10b      	cbz	r3, 29360 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2935c:	4621      	mov	r1, r4
   2935e:	4798      	blx	r3
	params->_ref--;
   29360:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29362:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   29364:	3b01      	subs	r3, #1
   29366:	b2db      	uxtb	r3, r3
   29368:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2936a:	b122      	cbz	r2, 29376 <gatt_indicate_rsp+0x24>
   2936c:	b91b      	cbnz	r3, 29376 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2936e:	4620      	mov	r0, r4
}
   29370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   29374:	4710      	bx	r2
}
   29376:	bd10      	pop	{r4, pc}

00029378 <match_uuid>:
	data->attr = attr;
   29378:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2937a:	8091      	strh	r1, [r2, #4]
}
   2937c:	2000      	movs	r0, #0
   2937e:	4770      	bx	lr

00029380 <ccc_set_cb>:
}
   29380:	2000      	movs	r0, #0
   29382:	4770      	bx	lr

00029384 <gen_hash_m>:
{
   29384:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29386:	6807      	ldr	r7, [r0, #0]
{
   29388:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2938a:	783d      	ldrb	r5, [r7, #0]
{
   2938c:	4614      	mov	r4, r2
   2938e:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29390:	b9dd      	cbnz	r5, 293ca <gen_hash_m+0x46>
	switch (u16->val) {
   29392:	887b      	ldrh	r3, [r7, #2]
   29394:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   29398:	d004      	beq.n	293a4 <gen_hash_m+0x20>
   2939a:	d810      	bhi.n	293be <gen_hash_m+0x3a>
   2939c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   293a0:	2b03      	cmp	r3, #3
   293a2:	d812      	bhi.n	293ca <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   293a4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   293a8:	2202      	movs	r2, #2
   293aa:	4620      	mov	r0, r4
   293ac:	f10d 010a 	add.w	r1, sp, #10
   293b0:	f7fe fb31 	bl	27a16 <tc_cmac_update>
   293b4:	b968      	cbnz	r0, 293d2 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   293b6:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   293ba:	65a2      	str	r2, [r4, #88]	; 0x58
   293bc:	e006      	b.n	293cc <gen_hash_m+0x48>
	switch (u16->val) {
   293be:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   293c2:	33ff      	adds	r3, #255	; 0xff
   293c4:	b29b      	uxth	r3, r3
   293c6:	2b04      	cmp	r3, #4
   293c8:	d91e      	bls.n	29408 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   293ca:	2501      	movs	r5, #1
}
   293cc:	4628      	mov	r0, r5
   293ce:	b009      	add	sp, #36	; 0x24
   293d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   293d2:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   293d4:	2202      	movs	r2, #2
   293d6:	4620      	mov	r0, r4
   293d8:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   293dc:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   293e0:	f7fe fb19 	bl	27a16 <tc_cmac_update>
   293e4:	2800      	cmp	r0, #0
   293e6:	d0e6      	beq.n	293b6 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   293e8:	2000      	movs	r0, #0
   293ea:	9000      	str	r0, [sp, #0]
   293ec:	aa03      	add	r2, sp, #12
   293ee:	2313      	movs	r3, #19
   293f0:	4631      	mov	r1, r6
   293f2:	6877      	ldr	r7, [r6, #4]
   293f4:	47b8      	blx	r7
		if (len < 0) {
   293f6:	1e02      	subs	r2, r0, #0
   293f8:	dbdf      	blt.n	293ba <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   293fa:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   293fc:	4620      	mov	r0, r4
   293fe:	f7fe fb0a 	bl	27a16 <tc_cmac_update>
   29402:	2800      	cmp	r0, #0
   29404:	d1e1      	bne.n	293ca <gen_hash_m+0x46>
   29406:	e7d6      	b.n	293b6 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   29408:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2940c:	2202      	movs	r2, #2
   2940e:	4620      	mov	r0, r4
   29410:	f10d 010a 	add.w	r1, sp, #10
   29414:	f7fe faff 	bl	27a16 <tc_cmac_update>
   29418:	2800      	cmp	r0, #0
   2941a:	d0cc      	beq.n	293b6 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2941c:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2941e:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   29420:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29424:	f10d 010a 	add.w	r1, sp, #10
   29428:	e7e8      	b.n	293fc <gen_hash_m+0x78>

0002942a <bt_addr_le_eq>:
   2942a:	2207      	movs	r2, #7
{
   2942c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2942e:	f002 fa6d 	bl	2b90c <memcmp>
}
   29432:	fab0 f080 	clz	r0, r0
   29436:	0940      	lsrs	r0, r0, #5
   29438:	bd08      	pop	{r3, pc}

0002943a <ccc_find_cfg>:
{
   2943a:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2943c:	7803      	ldrb	r3, [r0, #0]
{
   2943e:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   29440:	4293      	cmp	r3, r2
   29442:	d105      	bne.n	29450 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   29444:	3001      	adds	r0, #1
   29446:	f7ff fff0 	bl	2942a <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2944a:	b108      	cbz	r0, 29450 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2944c:	4620      	mov	r0, r4
}
   2944e:	bd10      	pop	{r4, pc}
	return NULL;
   29450:	2000      	movs	r0, #0
   29452:	e7fc      	b.n	2944e <ccc_find_cfg+0x14>

00029454 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29454:	e8d0 0faf 	lda	r0, [r0]
}
   29458:	4770      	bx	lr

0002945a <atomic_or>:
{
   2945a:	4603      	mov	r3, r0
   2945c:	b510      	push	{r4, lr}
}
   2945e:	e8d3 0fef 	ldaex	r0, [r3]
   29462:	ea40 0201 	orr.w	r2, r0, r1
   29466:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2946a:	2c00      	cmp	r4, #0
   2946c:	d1f7      	bne.n	2945e <atomic_or+0x4>
   2946e:	bd10      	pop	{r4, pc}

00029470 <atomic_and>:
{
   29470:	4603      	mov	r3, r0
   29472:	b510      	push	{r4, lr}
}
   29474:	e8d3 0fef 	ldaex	r0, [r3]
   29478:	ea00 0201 	and.w	r2, r0, r1
   2947c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   29480:	2c00      	cmp	r4, #0
   29482:	d1f7      	bne.n	29474 <atomic_and+0x4>
   29484:	bd10      	pop	{r4, pc}

00029486 <bt_addr_le_copy>:
   29486:	680b      	ldr	r3, [r1, #0]
   29488:	6003      	str	r3, [r0, #0]
   2948a:	888b      	ldrh	r3, [r1, #4]
   2948c:	8083      	strh	r3, [r0, #4]
   2948e:	798b      	ldrb	r3, [r1, #6]
   29490:	7183      	strb	r3, [r0, #6]
}
   29492:	4770      	bx	lr

00029494 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   29494:	2300      	movs	r3, #0
   29496:	6003      	str	r3, [r0, #0]
   29498:	6043      	str	r3, [r0, #4]
   2949a:	6083      	str	r3, [r0, #8]
}
   2949c:	4770      	bx	lr

0002949e <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2949e:	b538      	push	{r3, r4, r5, lr}
   294a0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   294a4:	4615      	mov	r5, r2
	if (offset > value_len) {
   294a6:	4294      	cmp	r4, r2
   294a8:	d30a      	bcc.n	294c0 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   294aa:	1aa4      	subs	r4, r4, r2
   294ac:	428c      	cmp	r4, r1
   294ae:	bfa8      	it	ge
   294b0:	460c      	movge	r4, r1
   294b2:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   294b4:	4622      	mov	r2, r4
   294b6:	1959      	adds	r1, r3, r5
   294b8:	f002 fa38 	bl	2b92c <memcpy>
}
   294bc:	4620      	mov	r0, r4
   294be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   294c0:	f06f 0406 	mvn.w	r4, #6
   294c4:	e7fa      	b.n	294bc <bt_gatt_attr_read.constprop.0+0x1e>

000294c6 <bt_gatt_attr_read_ccc>:
{
   294c6:	b530      	push	{r4, r5, lr}
   294c8:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   294ca:	68c9      	ldr	r1, [r1, #12]
{
   294cc:	4614      	mov	r4, r2
   294ce:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   294d0:	f7ed fb68 	bl	16ba4 <find_ccc_cfg>
	if (cfg) {
   294d4:	b100      	cbz	r0, 294d8 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   294d6:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   294d8:	2302      	movs	r3, #2
   294da:	f8ad 000e 	strh.w	r0, [sp, #14]
   294de:	9300      	str	r3, [sp, #0]
   294e0:	4629      	mov	r1, r5
   294e2:	4620      	mov	r0, r4
   294e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   294e8:	f10d 030e 	add.w	r3, sp, #14
   294ec:	f7ff ffd7 	bl	2949e <bt_gatt_attr_read.constprop.0>
}
   294f0:	b005      	add	sp, #20
   294f2:	bd30      	pop	{r4, r5, pc}

000294f4 <bt_gatt_attr_read_service>:
{
   294f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   294f6:	460c      	mov	r4, r1
   294f8:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   294fa:	68e3      	ldr	r3, [r4, #12]
{
   294fc:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   294fe:	781c      	ldrb	r4, [r3, #0]
{
   29500:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   29504:	b13c      	cbz	r4, 29516 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29506:	2410      	movs	r4, #16
   29508:	3301      	adds	r3, #1
   2950a:	9406      	str	r4, [sp, #24]
}
   2950c:	b004      	add	sp, #16
   2950e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29512:	f7ff bfc4 	b.w	2949e <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29516:	885b      	ldrh	r3, [r3, #2]
   29518:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2951c:	2302      	movs	r3, #2
   2951e:	9300      	str	r3, [sp, #0]
   29520:	f10d 030e 	add.w	r3, sp, #14
   29524:	f7ff ffbb 	bl	2949e <bt_gatt_attr_read.constprop.0>
}
   29528:	b004      	add	sp, #16
   2952a:	bd10      	pop	{r4, pc}

0002952c <cf_read>:
{
   2952c:	b530      	push	{r4, r5, lr}
   2952e:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   29530:	2300      	movs	r3, #0
{
   29532:	b085      	sub	sp, #20
   29534:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   29536:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2953a:	f7ed fae3 	bl	16b04 <find_cf_cfg>
	if (cfg) {
   2953e:	b110      	cbz	r0, 29546 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   29540:	7a03      	ldrb	r3, [r0, #8]
   29542:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   29546:	2301      	movs	r3, #1
   29548:	4629      	mov	r1, r5
   2954a:	9300      	str	r3, [sp, #0]
   2954c:	4620      	mov	r0, r4
   2954e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29552:	ab03      	add	r3, sp, #12
   29554:	f7ff ffa3 	bl	2949e <bt_gatt_attr_read.constprop.0>
}
   29558:	b005      	add	sp, #20
   2955a:	bd30      	pop	{r4, r5, pc}

0002955c <read_name>:
{
   2955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29560:	4614      	mov	r4, r2
   29562:	461d      	mov	r5, r3
   29564:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   29568:	f7e9 feda 	bl	13320 <bt_get_name>
   2956c:	4606      	mov	r6, r0
				 strlen(name));
   2956e:	f7df fef7 	bl	9360 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29572:	b280      	uxth	r0, r0
   29574:	9006      	str	r0, [sp, #24]
   29576:	4633      	mov	r3, r6
   29578:	463a      	mov	r2, r7
   2957a:	4629      	mov	r1, r5
   2957c:	4620      	mov	r0, r4
}
   2957e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29582:	f7ff bf8c 	b.w	2949e <bt_gatt_attr_read.constprop.0>

00029586 <read_appearance>:
{
   29586:	b530      	push	{r4, r5, lr}
   29588:	b085      	sub	sp, #20
   2958a:	4614      	mov	r4, r2
   2958c:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2958e:	f7fe ff09 	bl	283a4 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29592:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   29594:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29598:	9300      	str	r3, [sp, #0]
   2959a:	4629      	mov	r1, r5
   2959c:	4620      	mov	r0, r4
   2959e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   295a2:	f10d 030e 	add.w	r3, sp, #14
   295a6:	f7ff ff7a 	bl	2949e <bt_gatt_attr_read.constprop.0>
}
   295aa:	b005      	add	sp, #20
   295ac:	bd30      	pop	{r4, r5, pc}

000295ae <z_log_msg_static_create.constprop.0>:
   295ae:	2300      	movs	r3, #0
   295b0:	f7e4 bfee 	b.w	e590 <z_impl_z_log_msg_static_create>

000295b4 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   295b4:	2a02      	cmp	r2, #2
{
   295b6:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   295b8:	d108      	bne.n	295cc <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   295ba:	2300      	movs	r3, #0
   295bc:	f100 0190 	add.w	r1, r0, #144	; 0x90
   295c0:	461a      	mov	r2, r3
   295c2:	7a00      	ldrb	r0, [r0, #8]
   295c4:	f7ed fcf4 	bl	16fb0 <sc_save>
}
   295c8:	2002      	movs	r0, #2
   295ca:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   295cc:	f7ed fc90 	bl	16ef0 <sc_clear>
   295d0:	e7fa      	b.n	295c8 <sc_ccc_cfg_write+0x14>

000295d2 <sc_restore_rsp>:
{
   295d2:	b538      	push	{r3, r4, r5, lr}
   295d4:	4604      	mov	r4, r0
   295d6:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   295d8:	f7ff fe84 	bl	292e4 <bt_att_fixed_chan_only>
   295dc:	b150      	cbz	r0, 295f4 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   295de:	4620      	mov	r0, r4
   295e0:	f7ed fa90 	bl	16b04 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   295e4:	b130      	cbz	r0, 295f4 <sc_restore_rsp+0x22>
   295e6:	7a03      	ldrb	r3, [r0, #8]
   295e8:	07db      	lsls	r3, r3, #31
   295ea:	d503      	bpl.n	295f4 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   295ec:	2101      	movs	r1, #1
   295ee:	300c      	adds	r0, #12
   295f0:	f7ff ff33 	bl	2945a <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   295f4:	b955      	cbnz	r5, 2960c <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   295f6:	7a20      	ldrb	r0, [r4, #8]
   295f8:	f104 0190 	add.w	r1, r4, #144	; 0x90
   295fc:	f7ed fab0 	bl	16b60 <find_sc_cfg>
		if (sc_cfg) {
   29600:	b120      	cbz	r0, 2960c <sc_restore_rsp+0x3a>
__ssp_bos_icheck3(memset, void *, int)
   29602:	6085      	str	r5, [r0, #8]
}
   29604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   29608:	f7ed bc9e 	b.w	16f48 <sc_store>
}
   2960c:	bd38      	pop	{r3, r4, r5, pc}

0002960e <bt_gatt_attr_value_handle>:
{
   2960e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29610:	4604      	mov	r4, r0
   29612:	b910      	cbnz	r0, 2961a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   29614:	2000      	movs	r0, #0
}
   29616:	b002      	add	sp, #8
   29618:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2961a:	2300      	movs	r3, #0
   2961c:	f88d 3004 	strb.w	r3, [sp, #4]
   29620:	f642 0303 	movw	r3, #10243	; 0x2803
   29624:	6800      	ldr	r0, [r0, #0]
   29626:	a901      	add	r1, sp, #4
   29628:	f8ad 3006 	strh.w	r3, [sp, #6]
   2962c:	f7fe fd61 	bl	280f2 <bt_uuid_cmp>
   29630:	2800      	cmp	r0, #0
   29632:	d1ef      	bne.n	29614 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   29634:	68e3      	ldr	r3, [r4, #12]
   29636:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   29638:	2800      	cmp	r0, #0
   2963a:	d1ec      	bne.n	29616 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2963c:	4620      	mov	r0, r4
   2963e:	f7ee f803 	bl	17648 <bt_gatt_attr_get_handle>
   29642:	3001      	adds	r0, #1
   29644:	b280      	uxth	r0, r0
	return handle;
   29646:	e7e6      	b.n	29616 <bt_gatt_attr_value_handle+0x8>

00029648 <bt_gatt_attr_read_chrc>:
{
   29648:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2964a:	68cc      	ldr	r4, [r1, #12]
{
   2964c:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2964e:	79a3      	ldrb	r3, [r4, #6]
{
   29650:	b088      	sub	sp, #32
   29652:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   29654:	f88d 300c 	strb.w	r3, [sp, #12]
{
   29658:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2965a:	f7ff ffd8 	bl	2960e <bt_gatt_attr_value_handle>
   2965e:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29662:	6824      	ldr	r4, [r4, #0]
   29664:	7823      	ldrb	r3, [r4, #0]
   29666:	b96b      	cbnz	r3, 29684 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29668:	8863      	ldrh	r3, [r4, #2]
   2966a:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2966e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29670:	9300      	str	r3, [sp, #0]
   29672:	4631      	mov	r1, r6
   29674:	4628      	mov	r0, r5
   29676:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2967a:	ab03      	add	r3, sp, #12
   2967c:	f7ff ff0f 	bl	2949e <bt_gatt_attr_read.constprop.0>
}
   29680:	b008      	add	sp, #32
   29682:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29684:	1c63      	adds	r3, r4, #1
   29686:	f10d 020f 	add.w	r2, sp, #15
   2968a:	3411      	adds	r4, #17
   2968c:	f853 1b04 	ldr.w	r1, [r3], #4
   29690:	42a3      	cmp	r3, r4
   29692:	f842 1b04 	str.w	r1, [r2], #4
   29696:	d1f9      	bne.n	2968c <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   29698:	2313      	movs	r3, #19
   2969a:	e7e9      	b.n	29670 <bt_gatt_attr_read_chrc+0x28>

0002969c <bt_gatt_foreach_attr>:
{
   2969c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2969e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   296a2:	2300      	movs	r3, #0
   296a4:	461a      	mov	r2, r3
   296a6:	9300      	str	r3, [sp, #0]
   296a8:	f7ee f816 	bl	176d8 <bt_gatt_foreach_attr_type>
}
   296ac:	b005      	add	sp, #20
   296ae:	f85d fb04 	ldr.w	pc, [sp], #4

000296b2 <bt_gatt_check_perm>:
{
   296b2:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   296b4:	07d4      	lsls	r4, r2, #31
{
   296b6:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   296b8:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   296ba:	d504      	bpl.n	296c6 <bt_gatt_check_perm+0x14>
   296bc:	f013 0f95 	tst.w	r3, #149	; 0x95
   296c0:	d027      	beq.n	29712 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   296c2:	6848      	ldr	r0, [r1, #4]
   296c4:	b328      	cbz	r0, 29712 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   296c6:	0790      	lsls	r0, r2, #30
   296c8:	d504      	bpl.n	296d4 <bt_gatt_check_perm+0x22>
   296ca:	f413 7f95 	tst.w	r3, #298	; 0x12a
   296ce:	d022      	beq.n	29716 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   296d0:	6889      	ldr	r1, [r1, #8]
   296d2:	b301      	cbz	r1, 29716 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   296d4:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   296d8:	f414 7fc0 	tst.w	r4, #384	; 0x180
   296dc:	d007      	beq.n	296ee <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   296de:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   296e2:	b90b      	cbnz	r3, 296e8 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   296e4:	2005      	movs	r0, #5
}
   296e6:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   296e8:	7b5b      	ldrb	r3, [r3, #13]
   296ea:	06db      	lsls	r3, r3, #27
   296ec:	d5fa      	bpl.n	296e4 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   296ee:	f014 0f30 	tst.w	r4, #48	; 0x30
   296f2:	d108      	bne.n	29706 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   296f4:	f014 000c 	ands.w	r0, r4, #12
   296f8:	d0f5      	beq.n	296e6 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   296fa:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   296fc:	2b00      	cmp	r3, #0
   296fe:	bf14      	ite	ne
   29700:	2000      	movne	r0, #0
   29702:	200f      	moveq	r0, #15
   29704:	e7ef      	b.n	296e6 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   29706:	4628      	mov	r0, r5
   29708:	f7ff f8ed 	bl	288e6 <bt_conn_get_security>
   2970c:	2802      	cmp	r0, #2
   2970e:	d8f1      	bhi.n	296f4 <bt_gatt_check_perm+0x42>
   29710:	e7e8      	b.n	296e4 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   29712:	2002      	movs	r0, #2
   29714:	e7e7      	b.n	296e6 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   29716:	2003      	movs	r0, #3
   29718:	e7e5      	b.n	296e6 <bt_gatt_check_perm+0x34>

0002971a <bt_gatt_change_aware>:
{
   2971a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2971c:	4605      	mov	r5, r0
   2971e:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   29720:	f7ed f9f0 	bl	16b04 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29724:	b1d0      	cbz	r0, 2975c <bt_gatt_change_aware+0x42>
   29726:	7a03      	ldrb	r3, [r0, #8]
   29728:	07db      	lsls	r3, r3, #31
   2972a:	d517      	bpl.n	2975c <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2972c:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29730:	4620      	mov	r0, r4
   29732:	f7ff fe8f 	bl	29454 <atomic_get>
   29736:	f010 0601 	ands.w	r6, r0, #1
   2973a:	d10f      	bne.n	2975c <bt_gatt_change_aware+0x42>
	if (!req) {
   2973c:	b17f      	cbz	r7, 2975e <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2973e:	f06f 0102 	mvn.w	r1, #2
   29742:	4620      	mov	r0, r4
   29744:	f7ff fe94 	bl	29470 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   29748:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2974c:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2974e:	d008      	beq.n	29762 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   29750:	f7ff fdca 	bl	292e8 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29754:	2101      	movs	r1, #1
   29756:	4620      	mov	r0, r4
   29758:	f7ff fe7f 	bl	2945a <atomic_or>
		return true;
   2975c:	2601      	movs	r6, #1
}
   2975e:	4630      	mov	r0, r6
   29760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   29762:	f7ff fdbf 	bl	292e4 <bt_att_fixed_chan_only>
   29766:	2800      	cmp	r0, #0
   29768:	d0f9      	beq.n	2975e <bt_gatt_change_aware+0x44>
   2976a:	4628      	mov	r0, r5
   2976c:	f7ff fdd1 	bl	29312 <bt_att_out_of_sync_sent_on_fixed>
   29770:	2800      	cmp	r0, #0
   29772:	d0f4      	beq.n	2975e <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29774:	f06f 0102 	mvn.w	r1, #2
   29778:	4620      	mov	r0, r4
   2977a:	f7ff fe79 	bl	29470 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2977e:	4628      	mov	r0, r5
   29780:	e7e6      	b.n	29750 <bt_gatt_change_aware+0x36>

00029782 <ccc_delayed_store>:
{
   29782:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   29784:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   29788:	4605      	mov	r5, r0
		if (!conn) {
   2978a:	b184      	cbz	r4, 297ae <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2978c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   29790:	4631      	mov	r1, r6
   29792:	7a20      	ldrb	r0, [r4, #8]
   29794:	f7fe fe09 	bl	283aa <bt_addr_le_is_bonded>
   29798:	b148      	cbz	r0, 297ae <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   2979a:	2300      	movs	r3, #0
   2979c:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   297a0:	4631      	mov	r1, r6
   297a2:	7a20      	ldrb	r0, [r4, #8]
   297a4:	f7ee fe64 	bl	18470 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   297a8:	4620      	mov	r0, r4
   297aa:	f7eb f9cb 	bl	14b44 <bt_conn_unref>
}
   297ae:	bd70      	pop	{r4, r5, r6, pc}

000297b0 <smp_pairing_rsp>:
}
   297b0:	2007      	movs	r0, #7
   297b2:	4770      	bx	lr

000297b4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   297b4:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   297b8:	4108      	asrs	r0, r1
}
   297ba:	f000 0001 	and.w	r0, r0, #1
   297be:	4770      	bx	lr

000297c0 <update_keys_check>:
{
   297c0:	4603      	mov	r3, r0
   297c2:	b510      	push	{r4, lr}
	if (!keys ||
   297c4:	b1d9      	cbz	r1, 297fe <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   297c6:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   297c8:	f010 0f24 	tst.w	r0, #36	; 0x24
   297cc:	d017      	beq.n	297fe <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   297ce:	7d1a      	ldrb	r2, [r3, #20]
   297d0:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   297d2:	7b09      	ldrb	r1, [r1, #12]
   297d4:	42a2      	cmp	r2, r4
   297d6:	bf28      	it	cs
   297d8:	4622      	movcs	r2, r4
   297da:	4291      	cmp	r1, r2
   297dc:	d901      	bls.n	297e2 <update_keys_check+0x22>
			return false;
   297de:	2000      	movs	r0, #0
}
   297e0:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   297e2:	0682      	lsls	r2, r0, #26
   297e4:	d404      	bmi.n	297f0 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   297e6:	7a18      	ldrb	r0, [r3, #8]
   297e8:	3800      	subs	r0, #0
   297ea:	bf18      	it	ne
   297ec:	2001      	movne	r0, #1
   297ee:	e7f7      	b.n	297e0 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   297f0:	2105      	movs	r1, #5
   297f2:	1d18      	adds	r0, r3, #4
   297f4:	f7ff ffde 	bl	297b4 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   297f8:	2800      	cmp	r0, #0
   297fa:	d1f4      	bne.n	297e6 <update_keys_check+0x26>
   297fc:	e7ef      	b.n	297de <update_keys_check+0x1e>
	return true;
   297fe:	2001      	movs	r0, #1
   29800:	e7ee      	b.n	297e0 <update_keys_check+0x20>

00029802 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29802:	2301      	movs	r3, #1
   29804:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29806:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29808:	e8d0 2fef 	ldaex	r2, [r0]
   2980c:	401a      	ands	r2, r3
   2980e:	e8c0 2fe1 	stlex	r1, r2, [r0]
   29812:	2900      	cmp	r1, #0
   29814:	d1f8      	bne.n	29808 <atomic_clear_bit+0x6>
}
   29816:	4770      	bx	lr

00029818 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29818:	680b      	ldr	r3, [r1, #0]
   2981a:	6003      	str	r3, [r0, #0]
   2981c:	888b      	ldrh	r3, [r1, #4]
   2981e:	8083      	strh	r3, [r0, #4]
   29820:	798b      	ldrb	r3, [r1, #6]
   29822:	7183      	strb	r3, [r0, #6]
   29824:	4770      	bx	lr

00029826 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   29826:	2007      	movs	r0, #7
   29828:	4770      	bx	lr

0002982a <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2982a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2982c:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2982e:	2200      	movs	r2, #0
   29830:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   29832:	4604      	mov	r4, r0
   29834:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   29836:	460a      	mov	r2, r1
   29838:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2983c:	2106      	movs	r1, #6
   2983e:	f7ff f90b 	bl	28a58 <bt_l2cap_send_cb>
   29842:	b128      	cbz	r0, 29850 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   29844:	4628      	mov	r0, r5
}
   29846:	b003      	add	sp, #12
   29848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2984c:	f7f1 b9e2 	b.w	1ac14 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29850:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29854:	2300      	movs	r3, #0
   29856:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   2985a:	b003      	add	sp, #12
   2985c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29860:	f7f8 bdd6 	b.w	22410 <k_work_reschedule>

00029864 <z_log_msg_static_create.constprop.0>:
   29864:	2300      	movs	r3, #0
   29866:	f7e4 be93 	b.w	e590 <z_impl_z_log_msg_static_create>

0002986a <smp_chan_get>:
{
   2986a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2986c:	2106      	movs	r1, #6
   2986e:	f7ff f915 	bl	28a9c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   29872:	b918      	cbnz	r0, 2987c <smp_chan_get+0x12>
}
   29874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29878:	f7ee bf7c 	b.w	18774 <smp_chan_get.part.0>
   2987c:	38ec      	subs	r0, #236	; 0xec
   2987e:	bd08      	pop	{r3, pc}

00029880 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29880:	2301      	movs	r3, #1
   29882:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29884:	e8d0 2fef 	ldaex	r2, [r0]
   29888:	431a      	orrs	r2, r3
   2988a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2988e:	2900      	cmp	r1, #0
   29890:	d1f8      	bne.n	29884 <atomic_set_bit+0x4>
}
   29892:	4770      	bx	lr

00029894 <smp_keypress_notif>:
{
   29894:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   29896:	210e      	movs	r1, #14
   29898:	f7ff fff2 	bl	29880 <atomic_set_bit>
}
   2989c:	2000      	movs	r0, #0
   2989e:	bd08      	pop	{r3, pc}

000298a0 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   298a0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   298a2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   298a4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   298a6:	4628      	mov	r0, r5
   298a8:	2104      	movs	r1, #4
   298aa:	f7ff ff83 	bl	297b4 <atomic_test_bit>
   298ae:	b168      	cbz	r0, 298cc <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   298b0:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   298b2:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   298b4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   298b6:	4608      	mov	r0, r1
   298b8:	f7ff f8cb 	bl	28a52 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   298bc:	4604      	mov	r4, r0
   298be:	b940      	cbnz	r0, 298d2 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   298c0:	2104      	movs	r1, #4
   298c2:	4628      	mov	r0, r5
   298c4:	f7ff ffdc 	bl	29880 <atomic_set_bit>
}
   298c8:	4620      	mov	r0, r4
   298ca:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   298cc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   298d0:	e7ef      	b.n	298b2 <smp_create_pdu.constprop.0+0x12>
   298d2:	2101      	movs	r1, #1
   298d4:	300c      	adds	r0, #12
   298d6:	f7f1 fabf 	bl	1ae58 <net_buf_simple_add>
	hdr->code = op;
   298da:	7006      	strb	r6, [r0, #0]
	return buf;
   298dc:	e7f4      	b.n	298c8 <smp_create_pdu.constprop.0+0x28>

000298de <send_pairing_rsp>:
{
   298de:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   298e0:	2102      	movs	r1, #2
{
   298e2:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   298e4:	f7ff ffdc 	bl	298a0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   298e8:	4605      	mov	r5, r0
   298ea:	b180      	cbz	r0, 2990e <send_pairing_rsp+0x30>
   298ec:	2106      	movs	r1, #6
   298ee:	300c      	adds	r0, #12
   298f0:	f7f1 fab2 	bl	1ae58 <net_buf_simple_add>
   298f4:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   298f8:	2200      	movs	r2, #0
   298fa:	6003      	str	r3, [r0, #0]
   298fc:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   29900:	4629      	mov	r1, r5
   29902:	8083      	strh	r3, [r0, #4]
   29904:	4620      	mov	r0, r4
   29906:	f7ff ff90 	bl	2982a <smp_send.constprop.0>
	return 0;
   2990a:	2000      	movs	r0, #0
}
   2990c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2990e:	2008      	movs	r0, #8
   29910:	e7fc      	b.n	2990c <send_pairing_rsp+0x2e>

00029912 <smp_send_pairing_random>:
{
   29912:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   29914:	2104      	movs	r1, #4
{
   29916:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   29918:	f7ff ffc2 	bl	298a0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2991c:	4605      	mov	r5, r0
   2991e:	b1a0      	cbz	r0, 2994a <smp_send_pairing_random+0x38>
   29920:	2110      	movs	r1, #16
   29922:	300c      	adds	r0, #12
   29924:	f7f1 fa98 	bl	1ae58 <net_buf_simple_add>
   29928:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2992c:	f104 0237 	add.w	r2, r4, #55	; 0x37
   29930:	f853 1b04 	ldr.w	r1, [r3], #4
   29934:	4293      	cmp	r3, r2
   29936:	f840 1b04 	str.w	r1, [r0], #4
   2993a:	d1f9      	bne.n	29930 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2993c:	4620      	mov	r0, r4
   2993e:	2200      	movs	r2, #0
   29940:	4629      	mov	r1, r5
   29942:	f7ff ff72 	bl	2982a <smp_send.constprop.0>
	return 0;
   29946:	2000      	movs	r0, #0
}
   29948:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2994a:	2008      	movs	r0, #8
   2994c:	e7fc      	b.n	29948 <smp_send_pairing_random+0x36>

0002994e <smp_dhkey_check>:
{
   2994e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   29950:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   29954:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   29956:	78db      	ldrb	r3, [r3, #3]
   29958:	2b01      	cmp	r3, #1
   2995a:	d119      	bne.n	29990 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2995c:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2995e:	1d06      	adds	r6, r0, #4
   29960:	2110      	movs	r1, #16
   29962:	4630      	mov	r0, r6
   29964:	f7ff ff4d 	bl	29802 <atomic_clear_bit>
   29968:	462b      	mov	r3, r5
   2996a:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2996e:	f105 0110 	add.w	r1, r5, #16
   29972:	f853 0b04 	ldr.w	r0, [r3], #4
   29976:	428b      	cmp	r3, r1
   29978:	f842 0b04 	str.w	r0, [r2], #4
   2997c:	d1f9      	bne.n	29972 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2997e:	2107      	movs	r1, #7
   29980:	4630      	mov	r0, r6
   29982:	f7ff ff17 	bl	297b4 <atomic_test_bit>
   29986:	b128      	cbz	r0, 29994 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29988:	2109      	movs	r1, #9
   2998a:	4630      	mov	r0, r6
   2998c:	f7ff ff78 	bl	29880 <atomic_set_bit>
}
   29990:	2000      	movs	r0, #0
   29992:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   29994:	210a      	movs	r1, #10
   29996:	4630      	mov	r0, r6
   29998:	f7ff ff0c 	bl	297b4 <atomic_test_bit>
   2999c:	2800      	cmp	r0, #0
   2999e:	d1f3      	bne.n	29988 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   299a0:	4620      	mov	r0, r4
}
   299a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   299a6:	f7ef bafb 	b.w	18fa0 <compute_and_check_and_send_periph_dhcheck>

000299aa <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   299aa:	2007      	movs	r0, #7
   299ac:	4770      	bx	lr

000299ae <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   299ae:	2301      	movs	r3, #1
   299b0:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   299b4:	43ca      	mvns	r2, r1
{
   299b6:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   299b8:	e8d0 3fef 	ldaex	r3, [r0]
   299bc:	ea03 0402 	and.w	r4, r3, r2
   299c0:	e8c0 4fe5 	stlex	r5, r4, [r0]
   299c4:	2d00      	cmp	r5, #0
   299c6:	d1f7      	bne.n	299b8 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   299c8:	4219      	tst	r1, r3
}
   299ca:	bf14      	ite	ne
   299cc:	2001      	movne	r0, #1
   299ce:	2000      	moveq	r0, #0
   299d0:	bd30      	pop	{r4, r5, pc}

000299d2 <smp_reset>:
{
   299d2:	b538      	push	{r3, r4, r5, lr}
   299d4:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   299d6:	2500      	movs	r5, #0
   299d8:	1d03      	adds	r3, r0, #4
   299da:	e8d3 2fef 	ldaex	r2, [r3]
   299de:	e8c3 5fe1 	stlex	r1, r5, [r3]
   299e2:	2900      	cmp	r1, #0
   299e4:	d1f9      	bne.n	299da <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   299e6:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   299ea:	f7f8 fd17 	bl	2241c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   299ee:	7225      	strb	r5, [r4, #8]
   299f0:	e8d4 3fef 	ldaex	r3, [r4]
   299f4:	e8c4 5fe2 	stlex	r2, r5, [r4]
   299f8:	2a00      	cmp	r2, #0
   299fa:	d1f9      	bne.n	299f0 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   299fc:	4620      	mov	r0, r4
}
   299fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   29a02:	2101      	movs	r1, #1
   29a04:	f7ff bf3c 	b.w	29880 <atomic_set_bit>

00029a08 <smp_c1>:
{
   29a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   29a0a:	b089      	sub	sp, #36	; 0x24
   29a0c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   29a10:	4605      	mov	r5, r0
	p1[0] = ia->type;
   29a12:	7830      	ldrb	r0, [r6, #0]
{
   29a14:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   29a16:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   29a1a:	7838      	ldrb	r0, [r7, #0]
   29a1c:	f101 0c10 	add.w	ip, r1, #16
   29a20:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   29a24:	6810      	ldr	r0, [r2, #0]
   29a26:	f8cd 0002 	str.w	r0, [sp, #2]
   29a2a:	8890      	ldrh	r0, [r2, #4]
   29a2c:	7992      	ldrb	r2, [r2, #6]
   29a2e:	f8ad 0006 	strh.w	r0, [sp, #6]
   29a32:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   29a36:	681a      	ldr	r2, [r3, #0]
   29a38:	4668      	mov	r0, sp
   29a3a:	f8cd 2009 	str.w	r2, [sp, #9]
   29a3e:	889a      	ldrh	r2, [r3, #4]
   29a40:	799b      	ldrb	r3, [r3, #6]
   29a42:	f8ad 200d 	strh.w	r2, [sp, #13]
   29a46:	4622      	mov	r2, r4
   29a48:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   29a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
   29a50:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   29a54:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   29a56:	ea83 030e 	eor.w	r3, r3, lr
   29a5a:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   29a5e:	d1f5      	bne.n	29a4c <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   29a60:	4622      	mov	r2, r4
   29a62:	4621      	mov	r1, r4
   29a64:	4628      	mov	r0, r5
   29a66:	f7fe fe66 	bl	28736 <bt_encrypt_le>
	if (err) {
   29a6a:	4603      	mov	r3, r0
   29a6c:	bb28      	cbnz	r0, 29aba <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   29a6e:	9307      	str	r3, [sp, #28]
   29a70:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   29a72:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   29a76:	f8d7 0001 	ldr.w	r0, [r7, #1]
   29a7a:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   29a7e:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   29a82:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   29a84:	f8cd 2016 	str.w	r2, [sp, #22]
   29a88:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   29a8c:	f104 0010 	add.w	r0, r4, #16
   29a90:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   29a94:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   29a96:	f813 2b01 	ldrb.w	r2, [r3], #1
   29a9a:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   29a9e:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   29aa0:	ea82 0206 	eor.w	r2, r2, r6
   29aa4:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   29aa8:	d1f5      	bne.n	29a96 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   29aaa:	4622      	mov	r2, r4
   29aac:	4621      	mov	r1, r4
   29aae:	4628      	mov	r0, r5
}
   29ab0:	b009      	add	sp, #36	; 0x24
   29ab2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   29ab6:	f7fe be3e 	b.w	28736 <bt_encrypt_le>
}
   29aba:	b009      	add	sp, #36	; 0x24
   29abc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029abe <legacy_pairing_confirm>:
{
   29abe:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   29ac0:	1d07      	adds	r7, r0, #4
{
   29ac2:	4604      	mov	r4, r0
   29ac4:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   29ac6:	210a      	movs	r1, #10
   29ac8:	4638      	mov	r0, r7
   29aca:	f7ff fe73 	bl	297b4 <atomic_test_bit>
   29ace:	bb88      	cbnz	r0, 29b34 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   29ad0:	2104      	movs	r1, #4
   29ad2:	4620      	mov	r0, r4
   29ad4:	f7ff fed4 	bl	29880 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   29ad8:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   29ada:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   29ade:	f7ff fedf 	bl	298a0 <smp_create_pdu.constprop.0>
	if (!buf) {
   29ae2:	4605      	mov	r5, r0
   29ae4:	b1c0      	cbz	r0, 29b18 <legacy_pairing_confirm+0x5a>
   29ae6:	2110      	movs	r1, #16
   29ae8:	300c      	adds	r0, #12
   29aea:	f7f1 f9b5 	bl	1ae58 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   29aee:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   29af2:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   29af4:	9002      	str	r0, [sp, #8]
   29af6:	9301      	str	r3, [sp, #4]
   29af8:	9600      	str	r6, [sp, #0]
   29afa:	f104 0310 	add.w	r3, r4, #16
   29afe:	f104 0209 	add.w	r2, r4, #9
   29b02:	f104 0127 	add.w	r1, r4, #39	; 0x27
   29b06:	f104 0047 	add.w	r0, r4, #71	; 0x47
   29b0a:	f7ff ff7d 	bl	29a08 <smp_c1>
   29b0e:	4606      	mov	r6, r0
   29b10:	b128      	cbz	r0, 29b1e <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   29b12:	4628      	mov	r0, r5
   29b14:	f7f1 f87e 	bl	1ac14 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   29b18:	2008      	movs	r0, #8
}
   29b1a:	b005      	add	sp, #20
   29b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   29b1e:	4602      	mov	r2, r0
   29b20:	4629      	mov	r1, r5
   29b22:	4620      	mov	r0, r4
   29b24:	f7ff fe81 	bl	2982a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29b28:	4631      	mov	r1, r6
   29b2a:	4638      	mov	r0, r7
   29b2c:	f7ff fe69 	bl	29802 <atomic_clear_bit>
	return 0;
   29b30:	2000      	movs	r0, #0
   29b32:	e7f2      	b.n	29b1a <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29b34:	2100      	movs	r1, #0
   29b36:	4638      	mov	r0, r7
   29b38:	f7ff fea2 	bl	29880 <atomic_set_bit>
	return 0;
   29b3c:	e7f8      	b.n	29b30 <legacy_pairing_confirm+0x72>

00029b3e <bt_smp_request_ltk>:
{
   29b3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29b42:	9f09      	ldr	r7, [sp, #36]	; 0x24
   29b44:	4604      	mov	r4, r0
   29b46:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   29b4a:	f7ff fe8e 	bl	2986a <smp_chan_get>
	if (!smp) {
   29b4e:	4605      	mov	r5, r0
   29b50:	2800      	cmp	r0, #0
   29b52:	d07c      	beq.n	29c4e <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   29b54:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29b58:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   29b5a:	f1b8 0f00 	cmp.w	r8, #0
   29b5e:	d128      	bne.n	29bb2 <bt_smp_request_ltk+0x74>
   29b60:	e9dd 3200 	ldrd	r3, r2, [sp]
   29b64:	4313      	orrs	r3, r2
   29b66:	d124      	bne.n	29bb2 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29b68:	2103      	movs	r1, #3
   29b6a:	4630      	mov	r0, r6
   29b6c:	f7ff fe22 	bl	297b4 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   29b70:	b1f8      	cbz	r0, 29bb2 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   29b72:	2101      	movs	r1, #1
   29b74:	4630      	mov	r0, r6
   29b76:	f7ff fe1d 	bl	297b4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29b7a:	b1d0      	cbz	r0, 29bb2 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   29b7c:	7d2c      	ldrb	r4, [r5, #20]
   29b7e:	7b6b      	ldrb	r3, [r5, #13]
   29b80:	f105 0147 	add.w	r1, r5, #71	; 0x47
   29b84:	429c      	cmp	r4, r3
   29b86:	bf28      	it	cs
   29b88:	461c      	movcs	r4, r3
   29b8a:	4622      	mov	r2, r4
   29b8c:	4638      	mov	r0, r7
   29b8e:	f001 fecd 	bl	2b92c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   29b92:	2c0f      	cmp	r4, #15
   29b94:	d805      	bhi.n	29ba2 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   29b96:	4641      	mov	r1, r8
   29b98:	f1c4 0210 	rsb	r2, r4, #16
   29b9c:	1938      	adds	r0, r7, r4
   29b9e:	f001 feff 	bl	2b9a0 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   29ba2:	4630      	mov	r0, r6
   29ba4:	2101      	movs	r1, #1
   29ba6:	f7ff fe6b 	bl	29880 <atomic_set_bit>
		return true;
   29baa:	2001      	movs	r0, #1
}
   29bac:	b002      	add	sp, #8
   29bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   29bb2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   29bb6:	b983      	cbnz	r3, 29bda <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   29bb8:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   29bbc:	4642      	mov	r2, r8
   29bbe:	2020      	movs	r0, #32
   29bc0:	7a21      	ldrb	r1, [r4, #8]
   29bc2:	f7f0 fad9 	bl	1a178 <bt_keys_find>
   29bc6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   29bca:	b930      	cbnz	r0, 29bda <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   29bcc:	4642      	mov	r2, r8
   29bce:	2001      	movs	r0, #1
   29bd0:	7a21      	ldrb	r1, [r4, #8]
   29bd2:	f7f0 fad1 	bl	1a178 <bt_keys_find>
   29bd6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   29bda:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   29bde:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   29be2:	f1b8 0f00 	cmp.w	r8, #0
   29be6:	d10c      	bne.n	29c02 <bt_smp_request_ltk+0xc4>
   29be8:	e9dd 3200 	ldrd	r3, r2, [sp]
   29bec:	4313      	orrs	r3, r2
   29bee:	d108      	bne.n	29c02 <bt_smp_request_ltk+0xc4>
   29bf0:	b300      	cbz	r0, 29c34 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   29bf2:	89c3      	ldrh	r3, [r0, #14]
   29bf4:	069a      	lsls	r2, r3, #26
   29bf6:	d505      	bpl.n	29c04 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   29bf8:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29bfa:	f100 011a 	add.w	r1, r0, #26
   29bfe:	4622      	mov	r2, r4
   29c00:	e7c4      	b.n	29b8c <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   29c02:	b1b8      	cbz	r0, 29c34 <bt_smp_request_ltk+0xf6>
   29c04:	89c3      	ldrh	r3, [r0, #14]
   29c06:	07db      	lsls	r3, r3, #31
   29c08:	d514      	bpl.n	29c34 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   29c0a:	2208      	movs	r2, #8
   29c0c:	4669      	mov	r1, sp
   29c0e:	3040      	adds	r0, #64	; 0x40
   29c10:	f001 fe7c 	bl	2b90c <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   29c14:	b970      	cbnz	r0, 29c34 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   29c16:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   29c1a:	2202      	movs	r2, #2
   29c1c:	a908      	add	r1, sp, #32
   29c1e:	3048      	adds	r0, #72	; 0x48
   29c20:	f001 fe74 	bl	2b90c <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   29c24:	4680      	mov	r8, r0
   29c26:	b928      	cbnz	r0, 29c34 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   29c28:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   29c2c:	7b0c      	ldrb	r4, [r1, #12]
   29c2e:	314a      	adds	r1, #74	; 0x4a
   29c30:	4622      	mov	r2, r4
   29c32:	e7ab      	b.n	29b8c <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   29c34:	210f      	movs	r1, #15
   29c36:	4630      	mov	r0, r6
   29c38:	f7ff fdbc 	bl	297b4 <atomic_test_bit>
   29c3c:	b120      	cbz	r0, 29c48 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   29c3e:	2202      	movs	r2, #2
   29c40:	2106      	movs	r1, #6
   29c42:	4620      	mov	r0, r4
   29c44:	f7eb f9fe 	bl	15044 <bt_conn_security_changed>
	smp_reset(smp);
   29c48:	4628      	mov	r0, r5
   29c4a:	f7ff fec2 	bl	299d2 <smp_reset>
		return false;
   29c4e:	2000      	movs	r0, #0
   29c50:	e7ac      	b.n	29bac <bt_smp_request_ltk+0x6e>

00029c52 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   29c52:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29c56:	4770      	bx	lr

00029c58 <bt_smp_dhkey_ready>:
{
   29c58:	b570      	push	{r4, r5, r6, lr}
   29c5a:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   29c5c:	2008      	movs	r0, #8
   29c5e:	f7ee fce7 	bl	18630 <smp_find>
	if (smp) {
   29c62:	4605      	mov	r5, r0
   29c64:	b1e0      	cbz	r0, 29ca0 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   29c66:	1d06      	adds	r6, r0, #4
   29c68:	2108      	movs	r1, #8
   29c6a:	4630      	mov	r0, r6
   29c6c:	f7ff fdc9 	bl	29802 <atomic_clear_bit>
	if (!dhkey) {
   29c70:	b3bc      	cbz	r4, 29ce2 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   29c72:	2107      	movs	r1, #7
   29c74:	f7ff fdc5 	bl	29802 <atomic_clear_bit>
   29c78:	4623      	mov	r3, r4
   29c7a:	f105 0297 	add.w	r2, r5, #151	; 0x97
   29c7e:	f104 0120 	add.w	r1, r4, #32
   29c82:	f853 0b04 	ldr.w	r0, [r3], #4
   29c86:	428b      	cmp	r3, r1
   29c88:	f842 0b04 	str.w	r0, [r2], #4
   29c8c:	d1f9      	bne.n	29c82 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   29c8e:	210a      	movs	r1, #10
   29c90:	4630      	mov	r0, r6
   29c92:	f7ff fd8f 	bl	297b4 <atomic_test_bit>
   29c96:	b170      	cbz	r0, 29cb6 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29c98:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29c9a:	4630      	mov	r0, r6
   29c9c:	f7ff fdf0 	bl	29880 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   29ca0:	2007      	movs	r0, #7
   29ca2:	f7ee fcc5 	bl	18630 <smp_find>
		if (smp) {
   29ca6:	4604      	mov	r4, r0
   29ca8:	b1e8      	cbz	r0, 29ce6 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   29caa:	f7ee fd93 	bl	187d4 <smp_dhkey_generate>
			if (err) {
   29cae:	4601      	mov	r1, r0
   29cb0:	b1c8      	cbz	r0, 29ce6 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   29cb2:	4620      	mov	r0, r4
   29cb4:	e012      	b.n	29cdc <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   29cb6:	2110      	movs	r1, #16
   29cb8:	4630      	mov	r0, r6
   29cba:	f7ff fd7b 	bl	297b4 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29cbe:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   29cc0:	2800      	cmp	r0, #0
   29cc2:	d1ea      	bne.n	29c9a <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   29cc4:	4630      	mov	r0, r6
   29cc6:	f7ff fd75 	bl	297b4 <atomic_test_bit>
   29cca:	2800      	cmp	r0, #0
   29ccc:	d0e8      	beq.n	29ca0 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   29cce:	4628      	mov	r0, r5
   29cd0:	f7ef f966 	bl	18fa0 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   29cd4:	4601      	mov	r1, r0
   29cd6:	2800      	cmp	r0, #0
   29cd8:	d0e2      	beq.n	29ca0 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   29cda:	4628      	mov	r0, r5
   29cdc:	f7ef fcfc 	bl	196d8 <smp_error>
   29ce0:	e7de      	b.n	29ca0 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   29ce2:	210b      	movs	r1, #11
   29ce4:	e7f9      	b.n	29cda <bt_smp_dhkey_ready+0x82>
}
   29ce6:	bd70      	pop	{r4, r5, r6, pc}

00029ce8 <bt_smp_disconnected>:
{
   29ce8:	b570      	push	{r4, r5, r6, lr}
   29cea:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   29cec:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   29cf0:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29cf4:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   29cf6:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   29cfa:	f7f8 fb8f 	bl	2241c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29cfe:	2103      	movs	r1, #3
   29d00:	4620      	mov	r0, r4
   29d02:	f7ff fd57 	bl	297b4 <atomic_test_bit>
   29d06:	b1a0      	cbz	r0, 29d32 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   29d08:	2108      	movs	r1, #8
   29d0a:	4630      	mov	r0, r6
   29d0c:	f7ef fc60 	bl	195d0 <smp_pairing_complete>
	if (keys) {
   29d10:	b13d      	cbz	r5, 29d22 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   29d12:	89eb      	ldrh	r3, [r5, #14]
   29d14:	b113      	cbz	r3, 29d1c <bt_smp_disconnected+0x34>
   29d16:	7b6b      	ldrb	r3, [r5, #13]
   29d18:	079b      	lsls	r3, r3, #30
   29d1a:	d502      	bpl.n	29d22 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   29d1c:	4628      	mov	r0, r5
   29d1e:	f7f0 fb11 	bl	1a344 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   29d22:	4630      	mov	r0, r6
}
   29d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29d28:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   29d2c:	2100      	movs	r1, #0
   29d2e:	f001 be37 	b.w	2b9a0 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29d32:	2101      	movs	r1, #1
   29d34:	4620      	mov	r0, r4
   29d36:	f7ff fd3d 	bl	297b4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29d3a:	2800      	cmp	r0, #0
   29d3c:	d1e4      	bne.n	29d08 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   29d3e:	210f      	movs	r1, #15
   29d40:	4620      	mov	r0, r4
   29d42:	f7ff fd37 	bl	297b4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29d46:	2800      	cmp	r0, #0
   29d48:	d1de      	bne.n	29d08 <bt_smp_disconnected+0x20>
   29d4a:	e7e1      	b.n	29d10 <bt_smp_disconnected+0x28>

00029d4c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   29d4c:	b510      	push	{r4, lr}
   29d4e:	1e43      	subs	r3, r0, #1
   29d50:	f100 0210 	add.w	r2, r0, #16
   29d54:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   29d56:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   29d5a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   29d5e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   29d60:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   29d62:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   29d64:	d1f7      	bne.n	29d56 <sys_mem_swap.constprop.0+0xa>
	}
}
   29d66:	bd10      	pop	{r4, pc}

00029d68 <bt_crypto_aes_cmac>:
{
   29d68:	b570      	push	{r4, r5, r6, lr}
   29d6a:	b0c2      	sub	sp, #264	; 0x108
   29d6c:	460d      	mov	r5, r1
   29d6e:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   29d70:	4601      	mov	r1, r0
   29d72:	aa16      	add	r2, sp, #88	; 0x58
   29d74:	4668      	mov	r0, sp
{
   29d76:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   29d78:	f7fd fe22 	bl	279c0 <tc_cmac_setup>
   29d7c:	b918      	cbnz	r0, 29d86 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   29d7e:	f06f 0004 	mvn.w	r0, #4
}
   29d82:	b042      	add	sp, #264	; 0x108
   29d84:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   29d86:	4632      	mov	r2, r6
   29d88:	4629      	mov	r1, r5
   29d8a:	4668      	mov	r0, sp
   29d8c:	f7fd fe43 	bl	27a16 <tc_cmac_update>
   29d90:	2800      	cmp	r0, #0
   29d92:	d0f4      	beq.n	29d7e <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   29d94:	4669      	mov	r1, sp
   29d96:	4620      	mov	r0, r4
   29d98:	f7fd fea7 	bl	27aea <tc_cmac_final>
   29d9c:	2800      	cmp	r0, #0
   29d9e:	d0ee      	beq.n	29d7e <bt_crypto_aes_cmac+0x16>
	return 0;
   29da0:	2000      	movs	r0, #0
   29da2:	e7ee      	b.n	29d82 <bt_crypto_aes_cmac+0x1a>

00029da4 <bt_crypto_f4>:
{
   29da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   29da6:	460e      	mov	r6, r1
   29da8:	4614      	mov	r4, r2
   29daa:	461d      	mov	r5, r3
   29dac:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   29dae:	4601      	mov	r1, r0
   29db0:	2220      	movs	r2, #32
   29db2:	a805      	add	r0, sp, #20
{
   29db4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   29db6:	f7f0 fc23 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   29dba:	2220      	movs	r2, #32
   29dbc:	4631      	mov	r1, r6
   29dbe:	a80d      	add	r0, sp, #52	; 0x34
   29dc0:	f7f0 fc1e 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   29dc4:	4621      	mov	r1, r4
   29dc6:	2210      	movs	r2, #16
   29dc8:	a801      	add	r0, sp, #4
	m[64] = z;
   29dca:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   29dce:	f7f0 fc17 	bl	1a600 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   29dd2:	463b      	mov	r3, r7
   29dd4:	2241      	movs	r2, #65	; 0x41
   29dd6:	a905      	add	r1, sp, #20
   29dd8:	a801      	add	r0, sp, #4
   29dda:	f7ff ffc5 	bl	29d68 <bt_crypto_aes_cmac>
	if (err) {
   29dde:	4604      	mov	r4, r0
   29de0:	b910      	cbnz	r0, 29de8 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   29de2:	4638      	mov	r0, r7
   29de4:	f7ff ffb2 	bl	29d4c <sys_mem_swap.constprop.0>
}
   29de8:	4620      	mov	r0, r4
   29dea:	b017      	add	sp, #92	; 0x5c
   29dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029dee <bt_crypto_f6>:
{
   29dee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29df2:	4616      	mov	r6, r2
   29df4:	461d      	mov	r5, r3
   29df6:	b097      	sub	sp, #92	; 0x5c
   29df8:	4604      	mov	r4, r0
   29dfa:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   29dfe:	2210      	movs	r2, #16
   29e00:	a805      	add	r0, sp, #20
{
   29e02:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   29e04:	f7f0 fbfc 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   29e08:	2210      	movs	r2, #16
   29e0a:	4631      	mov	r1, r6
   29e0c:	a809      	add	r0, sp, #36	; 0x24
   29e0e:	f7f0 fbf7 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   29e12:	2210      	movs	r2, #16
   29e14:	4629      	mov	r1, r5
   29e16:	a80d      	add	r0, sp, #52	; 0x34
   29e18:	f7f0 fbf2 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   29e1c:	2203      	movs	r2, #3
   29e1e:	991e      	ldr	r1, [sp, #120]	; 0x78
   29e20:	a811      	add	r0, sp, #68	; 0x44
   29e22:	f7f0 fbed 	bl	1a600 <sys_memcpy_swap>
	m[51] = a1->type;
   29e26:	4649      	mov	r1, r9
   29e28:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   29e2c:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   29e30:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   29e34:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   29e36:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   29e38:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   29e3a:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   29e3c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   29e40:	f7f0 fbde 	bl	1a600 <sys_memcpy_swap>
	m[58] = a2->type;
   29e44:	4641      	mov	r1, r8
   29e46:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   29e4a:	2206      	movs	r2, #6
	m[58] = a2->type;
   29e4c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   29e50:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   29e54:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   29e58:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   29e5c:	888b      	ldrh	r3, [r1, #4]
   29e5e:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   29e62:	f7f0 fbcd 	bl	1a600 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   29e66:	4621      	mov	r1, r4
   29e68:	2210      	movs	r2, #16
   29e6a:	a801      	add	r0, sp, #4
   29e6c:	f7f0 fbc8 	bl	1a600 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   29e70:	463b      	mov	r3, r7
   29e72:	2241      	movs	r2, #65	; 0x41
   29e74:	a905      	add	r1, sp, #20
   29e76:	a801      	add	r0, sp, #4
   29e78:	f7ff ff76 	bl	29d68 <bt_crypto_aes_cmac>
	if (err) {
   29e7c:	4604      	mov	r4, r0
   29e7e:	b910      	cbnz	r0, 29e86 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   29e80:	4638      	mov	r0, r7
   29e82:	f7ff ff63 	bl	29d4c <sys_mem_swap.constprop.0>
}
   29e86:	4620      	mov	r0, r4
   29e88:	b017      	add	sp, #92	; 0x5c
   29e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00029e8e <fixed_data_unref>:
}
   29e8e:	4770      	bx	lr

00029e90 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29e90:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   29e92:	6849      	ldr	r1, [r1, #4]
   29e94:	6809      	ldr	r1, [r1, #0]
   29e96:	f7f0 bcb5 	b.w	1a804 <net_buf_alloc_len>

00029e9a <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   29e9a:	f7f7 bcaf 	b.w	217fc <z_impl_k_queue_get>

00029e9e <net_buf_simple_push_u8>:
{
   29e9e:	b510      	push	{r4, lr}
   29ea0:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   29ea2:	2101      	movs	r1, #1
   29ea4:	f7f0 ff7c 	bl	1ada0 <net_buf_simple_push>
	*data = val;
   29ea8:	7004      	strb	r4, [r0, #0]
}
   29eaa:	bd10      	pop	{r4, pc}

00029eac <net_buf_simple_pull_le16>:
{
   29eac:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   29eae:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29eb0:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   29eb2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29eb4:	f7f0 ff94 	bl	1ade0 <net_buf_simple_pull>
}
   29eb8:	4620      	mov	r0, r4
   29eba:	bd10      	pop	{r4, pc}

00029ebc <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   29ebc:	6802      	ldr	r2, [r0, #0]
   29ebe:	6880      	ldr	r0, [r0, #8]
}
   29ec0:	1a10      	subs	r0, r2, r0
   29ec2:	4770      	bx	lr

00029ec4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   29ec4:	8883      	ldrh	r3, [r0, #4]
   29ec6:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   29ec8:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   29eca:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   29ecc:	6803      	ldr	r3, [r0, #0]
   29ece:	1a5b      	subs	r3, r3, r1
}
   29ed0:	1ad0      	subs	r0, r2, r3
   29ed2:	4770      	bx	lr

00029ed4 <net_buf_simple_add_mem>:
{
   29ed4:	b538      	push	{r3, r4, r5, lr}
   29ed6:	460d      	mov	r5, r1
   29ed8:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   29eda:	4611      	mov	r1, r2
   29edc:	f7f0 ffbc 	bl	1ae58 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29ee0:	4622      	mov	r2, r4
   29ee2:	4629      	mov	r1, r5
}
   29ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29ee8:	f001 bd20 	b.w	2b92c <memcpy>

00029eec <net_buf_simple_add_u8>:
{
   29eec:	b510      	push	{r4, lr}
   29eee:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   29ef0:	2101      	movs	r1, #1
   29ef2:	f7f0 ffb1 	bl	1ae58 <net_buf_simple_add>
	*u8 = val;
   29ef6:	7004      	strb	r4, [r0, #0]
}
   29ef8:	bd10      	pop	{r4, pc}

00029efa <adc_context_on_timer_expired>:
{
   29efa:	b410      	push	{r4}
   29efc:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29efe:	3808      	subs	r0, #8
   29f00:	e8d0 2fef 	ldaex	r2, [r0]
   29f04:	1c51      	adds	r1, r2, #1
   29f06:	e8c0 1fe4 	stlex	r4, r1, [r0]
   29f0a:	2c00      	cmp	r4, #0
   29f0c:	d1f8      	bne.n	29f00 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   29f0e:	b912      	cbnz	r2, 29f16 <adc_context_on_timer_expired+0x1c>
}
   29f10:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   29f12:	f7f0 bfe3 	b.w	1aedc <adc_context_start_sampling>
		ctx->status = -EBUSY;
   29f16:	f06f 020f 	mvn.w	r2, #15
}
   29f1a:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   29f1c:	669a      	str	r2, [r3, #104]	; 0x68
}
   29f1e:	4770      	bx	lr

00029f20 <set_on_state>:
	__asm__ volatile(
   29f20:	f04f 0320 	mov.w	r3, #32
   29f24:	f3ef 8211 	mrs	r2, BASEPRI
   29f28:	f383 8812 	msr	BASEPRI_MAX, r3
   29f2c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   29f30:	6803      	ldr	r3, [r0, #0]
   29f32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29f36:	f043 0302 	orr.w	r3, r3, #2
   29f3a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   29f3c:	f382 8811 	msr	BASEPRI, r2
   29f40:	f3bf 8f6f 	isb	sy
}
   29f44:	4770      	bx	lr

00029f46 <async_start>:
{
   29f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f48:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   29f4a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   29f4c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29f4e:	f04f 0520 	mov.w	r5, #32
   29f52:	f3ef 8611 	mrs	r6, BASEPRI
   29f56:	f385 8812 	msr	BASEPRI_MAX, r5
   29f5a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29f5e:	250c      	movs	r5, #12
   29f60:	4369      	muls	r1, r5
   29f62:	440c      	add	r4, r1
   29f64:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   29f68:	f005 0c07 	and.w	ip, r5, #7
   29f6c:	f1bc 0f01 	cmp.w	ip, #1
   29f70:	d10c      	bne.n	29f8c <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   29f72:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   29f76:	f386 8811 	msr	BASEPRI, r6
   29f7a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   29f7e:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   29f82:	6843      	ldr	r3, [r0, #4]
   29f84:	585b      	ldr	r3, [r3, r1]
   29f86:	4798      	blx	r3
	return 0;
   29f88:	2000      	movs	r0, #0
}
   29f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   29f8c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   29f90:	42af      	cmp	r7, r5
   29f92:	f386 8811 	msr	BASEPRI, r6
   29f96:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   29f9a:	bf0c      	ite	eq
   29f9c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   29fa0:	f04f 30ff 	movne.w	r0, #4294967295
   29fa4:	e7f1      	b.n	29f8a <async_start+0x44>

00029fa6 <api_start>:
{
   29fa6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   29fa8:	2480      	movs	r4, #128	; 0x80
   29faa:	9400      	str	r4, [sp, #0]
   29fac:	f7ff ffcb 	bl	29f46 <async_start>
}
   29fb0:	b002      	add	sp, #8
   29fb2:	bd10      	pop	{r4, pc}

00029fb4 <onoff_started_callback>:
	return &data->mgr[type];
   29fb4:	6900      	ldr	r0, [r0, #16]
   29fb6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   29fb8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   29fbc:	2100      	movs	r1, #0
   29fbe:	4710      	bx	r2

00029fc0 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   29fc0:	2003      	movs	r0, #3
   29fc2:	f7f4 babb 	b.w	1e53c <nrfx_clock_start>

00029fc6 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   29fc6:	2002      	movs	r0, #2
   29fc8:	f7f4 bab8 	b.w	1e53c <nrfx_clock_start>

00029fcc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   29fcc:	2000      	movs	r0, #0
   29fce:	f7f4 bab5 	b.w	1e53c <nrfx_clock_start>

00029fd2 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   29fd2:	2003      	movs	r0, #3
   29fd4:	f7f4 bb30 	b.w	1e638 <nrfx_clock_stop>

00029fd8 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   29fd8:	2002      	movs	r0, #2
   29fda:	f7f4 bb2d 	b.w	1e638 <nrfx_clock_stop>

00029fde <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   29fde:	2000      	movs	r0, #0
   29fe0:	f7f4 bb2a 	b.w	1e638 <nrfx_clock_stop>

00029fe4 <blocking_start_callback>:
{
   29fe4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   29fe6:	f7f7 bc73 	b.w	218d0 <z_impl_k_sem_give>

00029fea <api_stop>:
	return stop(dev, subsys, CTX_API);
   29fea:	2280      	movs	r2, #128	; 0x80
   29fec:	f7f1 b9de 	b.w	1b3ac <stop>

00029ff0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29ff0:	6843      	ldr	r3, [r0, #4]
}
   29ff2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29ff4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   29ff6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   29ff8:	600b      	str	r3, [r1, #0]
}
   29ffa:	4770      	bx	lr

00029ffc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29ffc:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   29ffe:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a002:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2a004:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2a008:	6098      	str	r0, [r3, #8]
}
   2a00a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2a00c:	60d9      	str	r1, [r3, #12]
   2a00e:	4770      	bx	lr

0002a010 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a010:	6843      	ldr	r3, [r0, #4]
}
   2a012:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a014:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2a016:	6099      	str	r1, [r3, #8]
}
   2a018:	4770      	bx	lr

0002a01a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a01a:	6843      	ldr	r3, [r0, #4]
}
   2a01c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a01e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2a020:	60d9      	str	r1, [r3, #12]
}
   2a022:	4770      	bx	lr

0002a024 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a024:	6843      	ldr	r3, [r0, #4]
   2a026:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2a028:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2a02a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2a02e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2a030:	6090      	str	r0, [r2, #8]
}
   2a032:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2a034:	60d3      	str	r3, [r2, #12]
   2a036:	4770      	bx	lr

0002a038 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2a038:	2200      	movs	r2, #0
   2a03a:	2101      	movs	r1, #1
   2a03c:	200a      	movs	r0, #10
   2a03e:	f7e6 bb9d 	b.w	1077c <z_arm_irq_priority_set>

0002a042 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2a042:	b510      	push	{r4, lr}
	while (*count) {
   2a044:	680b      	ldr	r3, [r1, #0]
   2a046:	b913      	cbnz	r3, 2a04e <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2a048:	4618      	mov	r0, r3
	*buf_len = 0;
   2a04a:	6013      	str	r3, [r2, #0]
	return NULL;
   2a04c:	e005      	b.n	2a05a <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2a04e:	6803      	ldr	r3, [r0, #0]
   2a050:	685c      	ldr	r4, [r3, #4]
   2a052:	b11c      	cbz	r4, 2a05c <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2a054:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2a056:	6803      	ldr	r3, [r0, #0]
   2a058:	6818      	ldr	r0, [r3, #0]
}
   2a05a:	bd10      	pop	{r4, pc}
		++(*current);
   2a05c:	3308      	adds	r3, #8
   2a05e:	6003      	str	r3, [r0, #0]
		--(*count);
   2a060:	680b      	ldr	r3, [r1, #0]
   2a062:	3b01      	subs	r3, #1
   2a064:	600b      	str	r3, [r1, #0]
   2a066:	e7ed      	b.n	2a044 <spi_context_get_next_buf.constprop.0+0x2>

0002a068 <z_log_msg_static_create.constprop.0>:
   2a068:	2300      	movs	r3, #0
   2a06a:	f7e4 ba91 	b.w	e590 <z_impl_z_log_msg_static_create>

0002a06e <_spi_context_cs_control>:
{
   2a06e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2a070:	6803      	ldr	r3, [r0, #0]
{
   2a072:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2a074:	b1e3      	cbz	r3, 2a0b0 <_spi_context_cs_control+0x42>
   2a076:	6898      	ldr	r0, [r3, #8]
   2a078:	b1d0      	cbz	r0, 2a0b0 <_spi_context_cs_control+0x42>
   2a07a:	6805      	ldr	r5, [r0, #0]
   2a07c:	b1c5      	cbz	r5, 2a0b0 <_spi_context_cs_control+0x42>
		if (on) {
   2a07e:	b149      	cbz	r1, 2a094 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2a080:	2101      	movs	r1, #1
   2a082:	f7f1 fd7d 	bl	1bb80 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2a086:	6823      	ldr	r3, [r4, #0]
   2a088:	689b      	ldr	r3, [r3, #8]
   2a08a:	6898      	ldr	r0, [r3, #8]
}
   2a08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2a090:	f001 bb35 	b.w	2b6fe <z_impl_k_busy_wait>
			if (!force_off &&
   2a094:	b912      	cbnz	r2, 2a09c <_spi_context_cs_control+0x2e>
   2a096:	889b      	ldrh	r3, [r3, #4]
   2a098:	04db      	lsls	r3, r3, #19
   2a09a:	d409      	bmi.n	2a0b0 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2a09c:	6880      	ldr	r0, [r0, #8]
   2a09e:	f001 fb2e 	bl	2b6fe <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2a0a2:	6823      	ldr	r3, [r4, #0]
   2a0a4:	2100      	movs	r1, #0
   2a0a6:	6898      	ldr	r0, [r3, #8]
}
   2a0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2a0ac:	f7f1 bd68 	b.w	1bb80 <gpio_pin_set_dt.isra.0>
}
   2a0b0:	bd38      	pop	{r3, r4, r5, pc}

0002a0b2 <spi_context_unlock_unconditionally>:
{
   2a0b2:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2a0b4:	2201      	movs	r2, #1
   2a0b6:	2100      	movs	r1, #0
{
   2a0b8:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2a0ba:	f7ff ffd8 	bl	2a06e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2a0be:	69a3      	ldr	r3, [r4, #24]
   2a0c0:	b933      	cbnz	r3, 2a0d0 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2a0c2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2a0c4:	f104 0010 	add.w	r0, r4, #16
}
   2a0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a0cc:	f7f7 bc00 	b.w	218d0 <z_impl_k_sem_give>
   2a0d0:	bd10      	pop	{r4, pc}

0002a0d2 <spi_nrfx_release>:
{
   2a0d2:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2a0d4:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2a0d6:	6803      	ldr	r3, [r0, #0]
   2a0d8:	428b      	cmp	r3, r1
   2a0da:	d106      	bne.n	2a0ea <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2a0dc:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2a0e0:	b934      	cbnz	r4, 2a0f0 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2a0e2:	f7ff ffe6 	bl	2a0b2 <spi_context_unlock_unconditionally>
	return 0;
   2a0e6:	4620      	mov	r0, r4
}
   2a0e8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2a0ea:	f06f 0015 	mvn.w	r0, #21
   2a0ee:	e7fb      	b.n	2a0e8 <spi_nrfx_release+0x16>
		return -EBUSY;
   2a0f0:	f06f 000f 	mvn.w	r0, #15
   2a0f4:	e7f8      	b.n	2a0e8 <spi_nrfx_release+0x16>

0002a0f6 <k_sem_give>:
   2a0f6:	f7f7 bbeb 	b.w	218d0 <z_impl_k_sem_give>

0002a0fa <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2a0fa:	b918      	cbnz	r0, 2a104 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2a0fc:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2a100:	f7ff bff9 	b.w	2a0f6 <k_sem_give>
}
   2a104:	4770      	bx	lr

0002a106 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2a106:	f04f 32ff 	mov.w	r2, #4294967295
   2a10a:	f04f 33ff 	mov.w	r3, #4294967295
   2a10e:	3018      	adds	r0, #24
   2a110:	f7f7 bc22 	b.w	21958 <z_impl_k_sem_take>

0002a114 <qspi_trans_lock.isra.0>:
   2a114:	f04f 32ff 	mov.w	r2, #4294967295
   2a118:	f04f 33ff 	mov.w	r3, #4294967295
   2a11c:	f7f7 bc1c 	b.w	21958 <z_impl_k_sem_take>

0002a120 <qspi_nor_write_protection_set>:
{
   2a120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2a122:	2200      	movs	r2, #0
   2a124:	4291      	cmp	r1, r2
   2a126:	bf0c      	ite	eq
   2a128:	2306      	moveq	r3, #6
   2a12a:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2a12c:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2a12e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2a132:	9203      	str	r2, [sp, #12]
   2a134:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2a138:	f7f2 f8d2 	bl	1c2e0 <qspi_send_cmd>
		ret = -EIO;
   2a13c:	2800      	cmp	r0, #0
}
   2a13e:	bf18      	it	ne
   2a140:	f06f 0004 	mvnne.w	r0, #4
   2a144:	b005      	add	sp, #20
   2a146:	f85d fb04 	ldr.w	pc, [sp], #4

0002a14a <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2a14a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2a14c:	23ff      	movs	r3, #255	; 0xff
   2a14e:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2a152:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2a156:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2a158:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2a15a:	2301      	movs	r3, #1
   2a15c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2a160:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2a162:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2a164:	f88d 300c 	strb.w	r3, [sp, #12]
   2a168:	ab01      	add	r3, sp, #4
   2a16a:	9204      	str	r2, [sp, #16]
   2a16c:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2a16e:	f7f2 f8b7 	bl	1c2e0 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2a172:	2800      	cmp	r0, #0
   2a174:	bfa8      	it	ge
   2a176:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2a17a:	b007      	add	sp, #28
   2a17c:	f85d fb04 	ldr.w	pc, [sp], #4

0002a180 <is_regular_addr_valid>:
{
   2a180:	b538      	push	{r3, r4, r5, lr}
   2a182:	4605      	mov	r5, r0
   2a184:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2a186:	f000 fc4c 	bl	2aa22 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2a18a:	2d00      	cmp	r5, #0
   2a18c:	db07      	blt.n	2a19e <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2a18e:	42a8      	cmp	r0, r5
   2a190:	d905      	bls.n	2a19e <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2a192:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2a194:	4284      	cmp	r4, r0
   2a196:	bf8c      	ite	hi
   2a198:	2000      	movhi	r0, #0
   2a19a:	2001      	movls	r0, #1
}
   2a19c:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2a19e:	2000      	movs	r0, #0
   2a1a0:	e7fc      	b.n	2a19c <is_regular_addr_valid+0x1c>

0002a1a2 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2a1a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a1a4:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2a1a6:	2300      	movs	r3, #0
{
   2a1a8:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2a1aa:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2a1ac:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2a1ae:	60a3      	str	r3, [r4, #8]
{
   2a1b0:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2a1b2:	6913      	ldr	r3, [r2, #16]
   2a1b4:	4669      	mov	r1, sp
   2a1b6:	aa01      	add	r2, sp, #4
   2a1b8:	4798      	blx	r3

	while (layout_size--) {
   2a1ba:	9b01      	ldr	r3, [sp, #4]
   2a1bc:	1e5a      	subs	r2, r3, #1
   2a1be:	9201      	str	r2, [sp, #4]
   2a1c0:	b91b      	cbnz	r3, 2a1ca <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2a1c2:	f06f 0015 	mvn.w	r0, #21
}
   2a1c6:	b003      	add	sp, #12
   2a1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2a1ca:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2a1cc:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2a1ce:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2a1d0:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2a1d2:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2a1d4:	b985      	cbnz	r5, 2a1f8 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2a1d6:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2a1d8:	f8d0 c000 	ldr.w	ip, [r0]
   2a1dc:	4563      	cmp	r3, ip
   2a1de:	bf28      	it	cs
   2a1e0:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2a1e2:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2a1e6:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2a1e8:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2a1ea:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2a1ec:	6802      	ldr	r2, [r0, #0]
   2a1ee:	429a      	cmp	r2, r3
   2a1f0:	d806      	bhi.n	2a200 <flash_get_page_info+0x5e>
		layout++;
   2a1f2:	3008      	adds	r0, #8
   2a1f4:	9000      	str	r0, [sp, #0]
   2a1f6:	e7e0      	b.n	2a1ba <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2a1f8:	1a6b      	subs	r3, r5, r1
   2a1fa:	fbb3 f3f7 	udiv	r3, r3, r7
   2a1fe:	e7eb      	b.n	2a1d8 <flash_get_page_info+0x36>
			return 0;
   2a200:	2000      	movs	r0, #0
   2a202:	e7e0      	b.n	2a1c6 <flash_get_page_info+0x24>

0002a204 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2a204:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2a206:	2200      	movs	r2, #0
   2a208:	f7ff bfcb 	b.w	2a1a2 <flash_get_page_info>

0002a20c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2a20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   2a210:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   2a212:	6883      	ldr	r3, [r0, #8]
{
   2a214:	b086      	sub	sp, #24
   2a216:	4688      	mov	r8, r1
   2a218:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2a21a:	691b      	ldr	r3, [r3, #16]
   2a21c:	aa02      	add	r2, sp, #8
   2a21e:	a901      	add	r1, sp, #4
   2a220:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   2a222:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2a224:	4625      	mov	r5, r4
   2a226:	9b02      	ldr	r3, [sp, #8]
   2a228:	42ab      	cmp	r3, r5
   2a22a:	d802      	bhi.n	2a232 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2a22c:	b006      	add	sp, #24
   2a22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2a232:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   2a234:	9f01      	ldr	r7, [sp, #4]
   2a236:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   2a23a:	687b      	ldr	r3, [r7, #4]
   2a23c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2a23e:	683a      	ldr	r2, [r7, #0]
   2a240:	eb0a 0306 	add.w	r3, sl, r6
   2a244:	42b2      	cmp	r2, r6
   2a246:	d802      	bhi.n	2a24e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2a248:	469a      	mov	sl, r3
   2a24a:	3501      	adds	r5, #1
   2a24c:	e7eb      	b.n	2a226 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2a24e:	4649      	mov	r1, r9
			page_info.start_offset = off;
   2a250:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2a252:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2a254:	a803      	add	r0, sp, #12
   2a256:	47c0      	blx	r8
   2a258:	2800      	cmp	r0, #0
   2a25a:	d0e7      	beq.n	2a22c <flash_page_foreach+0x20>
			off += page_info.size;
   2a25c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2a25e:	3601      	adds	r6, #1
			off += page_info.size;
   2a260:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2a262:	e7ec      	b.n	2a23e <flash_page_foreach+0x32>

0002a264 <uarte_nrfx_config_get>:
{
   2a264:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2a266:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2a268:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2a26c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2a270:	2000      	movs	r0, #0
   2a272:	4770      	bx	lr

0002a274 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2a274:	6843      	ldr	r3, [r0, #4]
   2a276:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2a278:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2a27c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2a280:	4770      	bx	lr

0002a282 <tx_start>:
{
   2a282:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2a284:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2a286:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2a288:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2a28c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a290:	2200      	movs	r2, #0
   2a292:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2a296:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2a29a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2a29e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2a2a2:	6862      	ldr	r2, [r4, #4]
   2a2a4:	06d2      	lsls	r2, r2, #27
   2a2a6:	d511      	bpl.n	2a2cc <tx_start+0x4a>
	if (data->async) {
   2a2a8:	6902      	ldr	r2, [r0, #16]
   2a2aa:	68d2      	ldr	r2, [r2, #12]
   2a2ac:	b12a      	cbz	r2, 2a2ba <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2a2ae:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2a2b2:	f041 0101 	orr.w	r1, r1, #1
   2a2b6:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2a2ba:	2108      	movs	r1, #8
	return config->uarte_regs;
   2a2bc:	6842      	ldr	r2, [r0, #4]
   2a2be:	6812      	ldr	r2, [r2, #0]
   2a2c0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2a2c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2a2c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a2cc:	2201      	movs	r2, #1
   2a2ce:	609a      	str	r2, [r3, #8]
}
   2a2d0:	bd10      	pop	{r4, pc}

0002a2d2 <user_callback>:
	if (data->async->user_callback) {
   2a2d2:	6903      	ldr	r3, [r0, #16]
   2a2d4:	68da      	ldr	r2, [r3, #12]
   2a2d6:	6813      	ldr	r3, [r2, #0]
   2a2d8:	b10b      	cbz	r3, 2a2de <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2a2da:	6852      	ldr	r2, [r2, #4]
   2a2dc:	4718      	bx	r3
}
   2a2de:	4770      	bx	lr

0002a2e0 <notify_uart_rx_rdy>:
{
   2a2e0:	b570      	push	{r4, r5, r6, lr}
   2a2e2:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2a2e4:	6906      	ldr	r6, [r0, #16]
{
   2a2e6:	4604      	mov	r4, r0
   2a2e8:	460d      	mov	r5, r1
	struct uart_event evt = {
   2a2ea:	2214      	movs	r2, #20
   2a2ec:	2100      	movs	r1, #0
   2a2ee:	a801      	add	r0, sp, #4
   2a2f0:	f001 fb56 	bl	2b9a0 <memset>
   2a2f4:	2302      	movs	r3, #2
   2a2f6:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2a2fa:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2a2fc:	4620      	mov	r0, r4
	struct uart_event evt = {
   2a2fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2a300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2a302:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2a304:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2a308:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2a30a:	f7ff ffe2 	bl	2a2d2 <user_callback>
}
   2a30e:	b006      	add	sp, #24
   2a310:	bd70      	pop	{r4, r5, r6, pc}

0002a312 <rx_buf_release>:
{
   2a312:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2a314:	680e      	ldr	r6, [r1, #0]
{
   2a316:	4605      	mov	r5, r0
   2a318:	460c      	mov	r4, r1
   2a31a:	b086      	sub	sp, #24
	if (*buf) {
   2a31c:	b17e      	cbz	r6, 2a33e <rx_buf_release+0x2c>
		struct uart_event evt = {
   2a31e:	2214      	movs	r2, #20
   2a320:	2100      	movs	r1, #0
   2a322:	a801      	add	r0, sp, #4
   2a324:	f001 fb3c 	bl	2b9a0 <memset>
   2a328:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2a32a:	4628      	mov	r0, r5
   2a32c:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2a330:	f88d 3004 	strb.w	r3, [sp, #4]
   2a334:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2a336:	f7ff ffcc 	bl	2a2d2 <user_callback>
		*buf = NULL;
   2a33a:	2300      	movs	r3, #0
   2a33c:	6023      	str	r3, [r4, #0]
}
   2a33e:	b006      	add	sp, #24
   2a340:	bd70      	pop	{r4, r5, r6, pc}

0002a342 <notify_rx_disable>:
{
   2a342:	b510      	push	{r4, lr}
   2a344:	b086      	sub	sp, #24
   2a346:	4604      	mov	r4, r0
	struct uart_event evt = {
   2a348:	2214      	movs	r2, #20
   2a34a:	2100      	movs	r1, #0
   2a34c:	a801      	add	r0, sp, #4
   2a34e:	f001 fb27 	bl	2b9a0 <memset>
   2a352:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2a354:	4620      	mov	r0, r4
   2a356:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2a358:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2a35c:	f7ff ffb9 	bl	2a2d2 <user_callback>
}
   2a360:	b006      	add	sp, #24
   2a362:	bd10      	pop	{r4, pc}

0002a364 <uarte_nrfx_rx_buf_rsp>:
{
   2a364:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2a366:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2a368:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2a36a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2a36c:	f04f 0020 	mov.w	r0, #32
   2a370:	f3ef 8611 	mrs	r6, BASEPRI
   2a374:	f380 8812 	msr	BASEPRI_MAX, r0
   2a378:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2a37c:	68ec      	ldr	r4, [r5, #12]
   2a37e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a380:	b198      	cbz	r0, 2a3aa <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2a382:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2a384:	b9a0      	cbnz	r0, 2a3b0 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2a386:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2a388:	68ec      	ldr	r4, [r5, #12]
   2a38a:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2a38c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2a390:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2a394:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2a398:	f042 0220 	orr.w	r2, r2, #32
   2a39c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2a3a0:	f386 8811 	msr	BASEPRI, r6
   2a3a4:	f3bf 8f6f 	isb	sy
}
   2a3a8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2a3aa:	f06f 000c 	mvn.w	r0, #12
   2a3ae:	e7f7      	b.n	2a3a0 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2a3b0:	f06f 000f 	mvn.w	r0, #15
   2a3b4:	e7f4      	b.n	2a3a0 <uarte_nrfx_rx_buf_rsp+0x3c>

0002a3b6 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2a3b6:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2a3b8:	68d8      	ldr	r0, [r3, #12]
   2a3ba:	b120      	cbz	r0, 2a3c6 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2a3bc:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2a3be:	68db      	ldr	r3, [r3, #12]
	return 0;
   2a3c0:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2a3c2:	605a      	str	r2, [r3, #4]
	return 0;
   2a3c4:	4770      	bx	lr
		return -ENOTSUP;
   2a3c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2a3ca:	4770      	bx	lr

0002a3cc <uarte_nrfx_poll_in>:
{
   2a3cc:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2a3ce:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2a3d0:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2a3d2:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2a3d4:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2a3d6:	b960      	cbnz	r0, 2a3f2 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a3d8:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a3dc:	b164      	cbz	r4, 2a3f8 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2a3de:	6992      	ldr	r2, [r2, #24]
   2a3e0:	7812      	ldrb	r2, [r2, #0]
   2a3e2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a3e4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2a3e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a3ec:	2201      	movs	r2, #1
   2a3ee:	601a      	str	r2, [r3, #0]
}
   2a3f0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2a3f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a3f6:	e7fb      	b.n	2a3f0 <uarte_nrfx_poll_in+0x24>
		return -1;
   2a3f8:	f04f 30ff 	mov.w	r0, #4294967295
   2a3fc:	e7f8      	b.n	2a3f0 <uarte_nrfx_poll_in+0x24>

0002a3fe <uarte_nrfx_rx_disable>:
{
   2a3fe:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2a400:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2a402:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2a404:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2a406:	68eb      	ldr	r3, [r5, #12]
   2a408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2a40a:	b1ba      	cbz	r2, 2a43c <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2a40c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2a40e:	b153      	cbz	r3, 2a426 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2a410:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2a414:	f023 0320 	bic.w	r3, r3, #32
   2a418:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a41c:	2300      	movs	r3, #0
   2a41e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2a422:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2a426:	68e8      	ldr	r0, [r5, #12]
   2a428:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2a42a:	f001 f99a 	bl	2b762 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2a42e:	2000      	movs	r0, #0
   2a430:	68eb      	ldr	r3, [r5, #12]
   2a432:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a436:	2301      	movs	r3, #1
   2a438:	6063      	str	r3, [r4, #4]
}
   2a43a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2a43c:	f06f 000d 	mvn.w	r0, #13
   2a440:	e7fb      	b.n	2a43a <uarte_nrfx_rx_disable+0x3c>

0002a442 <setup_tx_cache>:
{
   2a442:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2a444:	68c3      	ldr	r3, [r0, #12]
   2a446:	68da      	ldr	r2, [r3, #12]
   2a448:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2a44a:	1a52      	subs	r2, r2, r1
   2a44c:	d00f      	beq.n	2a46e <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2a44e:	2a08      	cmp	r2, #8
   2a450:	bf28      	it	cs
   2a452:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2a454:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2a456:	68c3      	ldr	r3, [r0, #12]
   2a458:	6999      	ldr	r1, [r3, #24]
   2a45a:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2a45c:	68c3      	ldr	r3, [r0, #12]
   2a45e:	6898      	ldr	r0, [r3, #8]
   2a460:	69d9      	ldr	r1, [r3, #28]
   2a462:	4401      	add	r1, r0
   2a464:	6998      	ldr	r0, [r3, #24]
   2a466:	f001 fa61 	bl	2b92c <memcpy>
	return true;
   2a46a:	2001      	movs	r0, #1
}
   2a46c:	bd08      	pop	{r3, pc}
		return false;
   2a46e:	4610      	mov	r0, r2
   2a470:	e7fc      	b.n	2a46c <setup_tx_cache+0x2a>

0002a472 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2a472:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2a474:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2a476:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2a478:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2a47a:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2a47e:	b1f1      	cbz	r1, 2a4be <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2a480:	2100      	movs	r1, #0
   2a482:	4618      	mov	r0, r3
   2a484:	f001 fa8c 	bl	2b9a0 <memset>
   2a488:	4603      	mov	r3, r0
   2a48a:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2a48c:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a490:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a492:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2a494:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a498:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2a49c:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a4a0:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a4a2:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a4a6:	2800      	cmp	r0, #0
   2a4a8:	d0fb      	beq.n	2a4a2 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a4aa:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2a4ae:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2a4b2:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2a4b6:	b92b      	cbnz	r3, 2a4c4 <rx_flush.isra.0+0x52>
			return rx_amount;
   2a4b8:	b2c0      	uxtb	r0, r0
}
   2a4ba:	b002      	add	sp, #8
   2a4bc:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2a4be:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2a4c0:	4669      	mov	r1, sp
   2a4c2:	e7e3      	b.n	2a48c <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2a4c4:	4285      	cmp	r5, r0
   2a4c6:	d1f7      	bne.n	2a4b8 <rx_flush.isra.0+0x46>
   2a4c8:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2a4ca:	4293      	cmp	r3, r2
   2a4cc:	d101      	bne.n	2a4d2 <rx_flush.isra.0+0x60>
	return 0;
   2a4ce:	2000      	movs	r0, #0
   2a4d0:	e7f3      	b.n	2a4ba <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2a4d2:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a4d6:	2900      	cmp	r1, #0
   2a4d8:	d0f7      	beq.n	2a4ca <rx_flush.isra.0+0x58>
   2a4da:	e7ed      	b.n	2a4b8 <rx_flush.isra.0+0x46>

0002a4dc <async_uart_release>:
{
   2a4dc:	b570      	push	{r4, r5, r6, lr}
   2a4de:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2a4e0:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2a4e2:	f04f 0320 	mov.w	r3, #32
   2a4e6:	f3ef 8611 	mrs	r6, BASEPRI
   2a4ea:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4ee:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2a4f2:	68d0      	ldr	r0, [r2, #12]
   2a4f4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2a4f8:	ea23 0301 	bic.w	r3, r3, r1
   2a4fc:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2a500:	68d5      	ldr	r5, [r2, #12]
   2a502:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2a506:	b973      	cbnz	r3, 2a526 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2a508:	2902      	cmp	r1, #2
   2a50a:	d107      	bne.n	2a51c <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2a50c:	2205      	movs	r2, #5
   2a50e:	6860      	ldr	r0, [r4, #4]
   2a510:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2a514:	f7ff ffad 	bl	2a472 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2a518:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2a51c:	2200      	movs	r2, #0
	return config->uarte_regs;
   2a51e:	6863      	ldr	r3, [r4, #4]
   2a520:	681b      	ldr	r3, [r3, #0]
   2a522:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2a526:	f386 8811 	msr	BASEPRI, r6
   2a52a:	f3bf 8f6f 	isb	sy
}
   2a52e:	bd70      	pop	{r4, r5, r6, pc}

0002a530 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2a530:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2a532:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a534:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a538:	b940      	cbnz	r0, 2a54c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2a53a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a53c:	079b      	lsls	r3, r3, #30
   2a53e:	d406      	bmi.n	2a54e <is_tx_ready.isra.0+0x1e>
   2a540:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2a544:	3800      	subs	r0, #0
   2a546:	bf18      	it	ne
   2a548:	2001      	movne	r0, #1
   2a54a:	4770      	bx	lr
   2a54c:	2001      	movs	r0, #1
}
   2a54e:	4770      	bx	lr

0002a550 <start_tx_locked>:
{
   2a550:	b510      	push	{r4, lr}
   2a552:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2a554:	6840      	ldr	r0, [r0, #4]
   2a556:	f7ff ffeb 	bl	2a530 <is_tx_ready.isra.0>
   2a55a:	68cb      	ldr	r3, [r1, #12]
   2a55c:	b918      	cbnz	r0, 2a566 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2a55e:	2201      	movs	r2, #1
   2a560:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2a564:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2a566:	2200      	movs	r2, #0
   2a568:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2a56c:	f04f 32ff 	mov.w	r2, #4294967295
   2a570:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2a572:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2a574:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2a578:	68cb      	ldr	r3, [r1, #12]
}
   2a57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2a57e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2a582:	f7ff be7e 	b.w	2a282 <tx_start>

0002a586 <rx_timeout>:
{
   2a586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2a588:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2a58a:	68e3      	ldr	r3, [r4, #12]
   2a58c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2a590:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2a594:	bb13      	cbnz	r3, 2a5dc <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2a596:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2a598:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2a59a:	6873      	ldr	r3, [r6, #4]
   2a59c:	681b      	ldr	r3, [r3, #0]
   2a59e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2a5a2:	68e3      	ldr	r3, [r4, #12]
   2a5a4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2a5a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2a5aa:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2a5ac:	bf1f      	itttt	ne
   2a5ae:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2a5b0:	68e3      	ldrne	r3, [r4, #12]
   2a5b2:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2a5b4:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2a5b6:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2a5b8:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2a5bc:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2a5be:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2a5c0:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2a5c2:	da0c      	bge.n	2a5de <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2a5c4:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2a5c8:	68e3      	ldr	r3, [r4, #12]
   2a5ca:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2a5ce:	4281      	cmp	r1, r0
   2a5d0:	d80b      	bhi.n	2a5ea <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2a5d2:	2210      	movs	r2, #16
	return config->uarte_regs;
   2a5d4:	6873      	ldr	r3, [r6, #4]
   2a5d6:	681b      	ldr	r3, [r3, #0]
   2a5d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2a5de:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2a5e2:	eb02 0c01 	add.w	ip, r2, r1
   2a5e6:	4584      	cmp	ip, r0
   2a5e8:	d904      	bls.n	2a5f4 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2a5ea:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2a5ec:	2d00      	cmp	r5, #0
   2a5ee:	ddf0      	ble.n	2a5d2 <rx_timeout+0x4c>
		clipped = true;
   2a5f0:	2701      	movs	r7, #1
   2a5f2:	e005      	b.n	2a600 <rx_timeout+0x7a>
	if (len > 0) {
   2a5f4:	2a00      	cmp	r2, #0
   2a5f6:	d0ec      	beq.n	2a5d2 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2a5f8:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2a5fc:	428a      	cmp	r2, r1
   2a5fe:	da12      	bge.n	2a626 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2a600:	4629      	mov	r1, r5
   2a602:	4630      	mov	r0, r6
   2a604:	f7ff fe6c 	bl	2a2e0 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2a608:	68e2      	ldr	r2, [r4, #12]
   2a60a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2a60c:	442b      	add	r3, r5
   2a60e:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2a610:	68e2      	ldr	r2, [r4, #12]
   2a612:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2a614:	442b      	add	r3, r5
   2a616:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2a618:	2f00      	cmp	r7, #0
   2a61a:	d0da      	beq.n	2a5d2 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2a61c:	68e0      	ldr	r0, [r4, #12]
   2a61e:	3080      	adds	r0, #128	; 0x80
   2a620:	f001 f89f 	bl	2b762 <z_impl_k_timer_stop>
}
   2a624:	e7d5      	b.n	2a5d2 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2a626:	1a52      	subs	r2, r2, r1
   2a628:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2a62a:	e7d2      	b.n	2a5d2 <rx_timeout+0x4c>

0002a62c <uarte_nrfx_tx_abort>:
{
   2a62c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2a62e:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2a630:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2a632:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2a634:	68da      	ldr	r2, [r3, #12]
   2a636:	6891      	ldr	r1, [r2, #8]
   2a638:	b151      	cbz	r1, 2a650 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2a63a:	2400      	movs	r4, #0
   2a63c:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2a640:	68d8      	ldr	r0, [r3, #12]
   2a642:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2a644:	f001 f88d 	bl	2b762 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a648:	2301      	movs	r3, #1
	return 0;
   2a64a:	4620      	mov	r0, r4
   2a64c:	60eb      	str	r3, [r5, #12]
}
   2a64e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2a650:	f06f 000d 	mvn.w	r0, #13
   2a654:	e7fb      	b.n	2a64e <uarte_nrfx_tx_abort+0x22>

0002a656 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2a656:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2a658:	6818      	ldr	r0, [r3, #0]
   2a65a:	f7ff bfe7 	b.w	2a62c <uarte_nrfx_tx_abort>

0002a65e <z_log_msg_static_create.constprop.0>:
   2a65e:	2300      	movs	r3, #0
   2a660:	f7e3 bf96 	b.w	e590 <z_impl_z_log_msg_static_create>

0002a664 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2a664:	2000      	movs	r0, #0
   2a666:	4770      	bx	lr

0002a668 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2a668:	b538      	push	{r3, r4, r5, lr}
   2a66a:	460c      	mov	r4, r1
   2a66c:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2a66e:	f7e8 fe4f 	bl	13310 <bt_is_ready>
   2a672:	b128      	cbz	r0, 2a680 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2a674:	4629      	mov	r1, r5
   2a676:	4620      	mov	r0, r4
}
   2a678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2a67c:	f7e8 b80e 	b.w	1269c <bt_hci_le_rand>
}
   2a680:	f06f 000a 	mvn.w	r0, #10
   2a684:	bd38      	pop	{r3, r4, r5, pc}

0002a686 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2a686:	4608      	mov	r0, r1
   2a688:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2a68a:	4611      	mov	r1, r2
   2a68c:	f7f3 fd94 	bl	1e1b8 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2a690:	2800      	cmp	r0, #0
	}

	return 0;
}
   2a692:	bf18      	it	ne
   2a694:	f06f 0004 	mvnne.w	r0, #4
   2a698:	bd08      	pop	{r3, pc}

0002a69a <entropy_psa_crypto_rng_init>:
{
   2a69a:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2a69c:	f000 f911 	bl	2a8c2 <psa_crypto_init>
		return -EIO;
   2a6a0:	2800      	cmp	r0, #0
}
   2a6a2:	bf18      	it	ne
   2a6a4:	f06f 0004 	mvnne.w	r0, #4
   2a6a8:	bd08      	pop	{r3, pc}

0002a6aa <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2a6aa:	4770      	bx	lr

0002a6ac <sys_clock_cycle_get_32>:
{
   2a6ac:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2a6ae:	f7f3 f9c3 	bl	1da38 <z_nrf_rtc_timer_read>
}
   2a6b2:	bd08      	pop	{r3, pc}

0002a6b4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2a6b4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2a6b6:	6843      	ldr	r3, [r0, #4]
   2a6b8:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2a6ba:	7a05      	ldrb	r5, [r0, #8]
   2a6bc:	6844      	ldr	r4, [r0, #4]
   2a6be:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2a6c2:	42a3      	cmp	r3, r4
   2a6c4:	d302      	bcc.n	2a6cc <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2a6c6:	f06f 0001 	mvn.w	r0, #1
}
   2a6ca:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2a6cc:	795c      	ldrb	r4, [r3, #5]
   2a6ce:	428c      	cmp	r4, r1
   2a6d0:	d001      	beq.n	2a6d6 <pinctrl_lookup_state+0x22>
		(*state)++;
   2a6d2:	3308      	adds	r3, #8
   2a6d4:	e7f0      	b.n	2a6b8 <pinctrl_lookup_state+0x4>
			return 0;
   2a6d6:	2000      	movs	r0, #0
   2a6d8:	e7f7      	b.n	2a6ca <pinctrl_lookup_state+0x16>

0002a6da <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2a6da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6de:	4615      	mov	r5, r2
   2a6e0:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2a6e2:	f04f 0901 	mov.w	r9, #1
   2a6e6:	b085      	sub	sp, #20
   2a6e8:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2a6ec:	45d0      	cmp	r8, sl
   2a6ee:	d103      	bne.n	2a6f8 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2a6f0:	2000      	movs	r0, #0
}
   2a6f2:	b005      	add	sp, #20
   2a6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2a6f8:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2a6fc:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2a700:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2a704:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2a706:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2a70a:	bf08      	it	eq
   2a70c:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2a710:	2b22      	cmp	r3, #34	; 0x22
   2a712:	f200 8091 	bhi.w	2a838 <pinctrl_configure_pins+0x15e>
   2a716:	e8df f003 	tbb	[pc, r3]
   2a71a:	1e12      	.short	0x1e12
   2a71c:	34263823 	.word	0x34263823
   2a720:	8f8f8f38 	.word	0x8f8f8f38
   2a724:	8f653b8f 	.word	0x8f653b8f
   2a728:	8f8f8f8f 	.word	0x8f8f8f8f
   2a72c:	8f8f8f8f 	.word	0x8f8f8f8f
   2a730:	77747168 	.word	0x77747168
   2a734:	7a8f8f8f 	.word	0x7a8f8f8f
   2a738:	89868380 	.word	0x89868380
   2a73c:	8c          	.byte	0x8c
   2a73d:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2a73e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a742:	a803      	add	r0, sp, #12
   2a744:	9403      	str	r4, [sp, #12]
   2a746:	f7f3 fbaf 	bl	1dea8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2a74a:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2a74c:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2a74e:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2a752:	6083      	str	r3, [r0, #8]
   2a754:	e002      	b.n	2a75c <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   2a756:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2a75a:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   2a75c:	46b3      	mov	fp, r6
   2a75e:	e01e      	b.n	2a79e <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   2a760:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2a764:	e7ed      	b.n	2a742 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2a766:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2a768:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a76c:	a803      	add	r0, sp, #12
   2a76e:	9403      	str	r4, [sp, #12]
   2a770:	f7f3 fb9a 	bl	1dea8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2a774:	9b03      	ldr	r3, [sp, #12]
   2a776:	f04f 0b01 	mov.w	fp, #1
   2a77a:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2a77e:	60c3      	str	r3, [r0, #12]
   2a780:	e00d      	b.n	2a79e <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2a782:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2a786:	2601      	movs	r6, #1
   2a788:	e7f0      	b.n	2a76c <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2a78a:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2a78e:	e7e4      	b.n	2a75a <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2a790:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2a794:	2f00      	cmp	r7, #0
   2a796:	d1e0      	bne.n	2a75a <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2a798:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   2a79a:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2a79c:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2a79e:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a7a2:	a803      	add	r0, sp, #12
   2a7a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2a7a8:	2a00      	cmp	r2, #0
   2a7aa:	bf1c      	itt	ne
   2a7ac:	2601      	movne	r6, #1
   2a7ae:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2a7b2:	9301      	str	r3, [sp, #4]
   2a7b4:	9403      	str	r4, [sp, #12]
   2a7b6:	f7f3 fb77 	bl	1dea8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2a7ba:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2a7bc:	9b01      	ldr	r3, [sp, #4]
   2a7be:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2a7c2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2a7c6:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2a7ca:	023b      	lsls	r3, r7, #8
   2a7cc:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2a7d0:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2a7d4:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2a7d8:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2a7da:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2a7de:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2a7e2:	e783      	b.n	2a6ec <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2a7e4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2a7e8:	e7d4      	b.n	2a794 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2a7ea:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2a7ee:	f8da 3000 	ldr.w	r3, [sl]
   2a7f2:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2a7f6:	2b00      	cmp	r3, #0
   2a7f8:	d0c5      	beq.n	2a786 <pinctrl_configure_pins+0xac>
   2a7fa:	e7a2      	b.n	2a742 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2a7fc:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2a800:	e7f5      	b.n	2a7ee <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2a802:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2a806:	e7f2      	b.n	2a7ee <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2a808:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2a80c:	e7ef      	b.n	2a7ee <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2a80e:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2a812:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2a814:	f04f 0b00 	mov.w	fp, #0
   2a818:	e7c1      	b.n	2a79e <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2a81a:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2a81e:	e790      	b.n	2a742 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2a820:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2a824:	e7f5      	b.n	2a812 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2a826:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2a82a:	e7f2      	b.n	2a812 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2a82c:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2a830:	e7ef      	b.n	2a812 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2a832:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2a836:	e7ec      	b.n	2a812 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2a838:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a83c:	e759      	b.n	2a6f2 <pinctrl_configure_pins+0x18>

0002a83e <mbox_nrf_register_callback>:
{
   2a83e:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2a840:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2a842:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2a844:	bf9f      	itttt	ls
   2a846:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2a84a:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2a84e:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2a850:	2000      	movls	r0, #0
		return -EINVAL;
   2a852:	bf88      	it	hi
   2a854:	f06f 0015 	mvnhi.w	r0, #21
}
   2a858:	bd10      	pop	{r4, pc}

0002a85a <mbox_nrf_mtu_get>:
}
   2a85a:	2000      	movs	r0, #0
   2a85c:	4770      	bx	lr

0002a85e <mbox_nrf_max_channels_get>:
}
   2a85e:	2010      	movs	r0, #16
   2a860:	4770      	bx	lr

0002a862 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2a862:	2000      	movs	r0, #0
   2a864:	4770      	bx	lr

0002a866 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2a866:	2300      	movs	r3, #0
{
   2a868:	b570      	push	{r4, r5, r6, lr}
   2a86a:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2a86c:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2a870:	ab03      	add	r3, sp, #12
   2a872:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2a874:	2304      	movs	r3, #4
{
   2a876:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2a878:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2a87a:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2a87c:	b169      	cbz	r1, 2a89a <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2a87e:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2a880:	680b      	ldr	r3, [r1, #0]
   2a882:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2a884:	684b      	ldr	r3, [r1, #4]
   2a886:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2a888:	2101      	movs	r1, #1
   2a88a:	2041      	movs	r0, #65	; 0x41
   2a88c:	f7f3 fcd2 	bl	1e234 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2a890:	1e05      	subs	r5, r0, #0
   2a892:	dc04      	bgt.n	2a89e <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2a894:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2a896:	b008      	add	sp, #32
   2a898:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2a89a:	2601      	movs	r6, #1
   2a89c:	e7f4      	b.n	2a888 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2a89e:	1e23      	subs	r3, r4, #0
   2a8a0:	bf18      	it	ne
   2a8a2:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2a8a4:	2100      	movs	r1, #0
   2a8a6:	e9cd 4300 	strd	r4, r3, [sp]
   2a8aa:	aa04      	add	r2, sp, #16
   2a8ac:	4633      	mov	r3, r6
   2a8ae:	f7f3 fca5 	bl	1e1fc <psa_call>
   2a8b2:	4604      	mov	r4, r0
    psa_close(handle);
   2a8b4:	4628      	mov	r0, r5
   2a8b6:	f7f3 fccb 	bl	1e250 <psa_close>
    if (status < PSA_SUCCESS) {
   2a8ba:	2c00      	cmp	r4, #0
   2a8bc:	dbea      	blt.n	2a894 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2a8be:	4620      	mov	r0, r4
   2a8c0:	e7e9      	b.n	2a896 <tfm_platform_ioctl+0x30>

0002a8c2 <psa_crypto_init>:
}
   2a8c2:	2000      	movs	r0, #0
   2a8c4:	4770      	bx	lr

0002a8c6 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2a8c6:	b510      	push	{r4, lr}
   2a8c8:	b088      	sub	sp, #32
   2a8ca:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2a8cc:	ab05      	add	r3, sp, #20
   2a8ce:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2a8d0:	230c      	movs	r3, #12
   2a8d2:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2a8d4:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2a8d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2a8da:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2a8de:	eb0d 0103 	add.w	r1, sp, r3
   2a8e2:	aa03      	add	r2, sp, #12
   2a8e4:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   2a8e6:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2a8ea:	f7ff ffbc 	bl	2a866 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2a8ee:	9b00      	ldr	r3, [sp, #0]
   2a8f0:	6023      	str	r3, [r4, #0]

	return ret;
}
   2a8f2:	b008      	add	sp, #32
   2a8f4:	bd10      	pop	{r4, pc}

0002a8f6 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2a8f6:	2300      	movs	r3, #0
{
   2a8f8:	b510      	push	{r4, lr}
   2a8fa:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2a8fc:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   2a900:	ab05      	add	r3, sp, #20
   2a902:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2a904:	230c      	movs	r3, #12
   2a906:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2a908:	2304      	movs	r3, #4
{
   2a90a:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2a90c:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2a90e:	aa03      	add	r2, sp, #12
   2a910:	eb0d 0103 	add.w	r1, sp, r3
   2a914:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   2a916:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2a918:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2a91c:	f7ff ffa3 	bl	2a866 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2a920:	9b00      	ldr	r3, [sp, #0]
   2a922:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2a924:	b008      	add	sp, #32
   2a926:	bd10      	pop	{r4, pc}

0002a928 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2a928:	f7f3 bca0 	b.w	1e26c <SystemCoreClockUpdate>

0002a92c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2a92c:	4700      	bx	r0

0002a92e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2a92e:	f000 bee6 	b.w	2b6fe <z_impl_k_busy_wait>

0002a932 <nrf_gpio_pin_present_check>:
    switch (port)
   2a932:	0943      	lsrs	r3, r0, #5
   2a934:	d00b      	beq.n	2a94e <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2a936:	2b01      	cmp	r3, #1
   2a938:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a93c:	bf18      	it	ne
   2a93e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2a940:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2a944:	fa23 f000 	lsr.w	r0, r3, r0
}
   2a948:	f000 0001 	and.w	r0, r0, #1
   2a94c:	4770      	bx	lr
    switch (port)
   2a94e:	f04f 33ff 	mov.w	r3, #4294967295
   2a952:	e7f5      	b.n	2a940 <nrf_gpio_pin_present_check+0xe>

0002a954 <pin_is_task_output>:
{
   2a954:	b508      	push	{r3, lr}
   2a956:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2a958:	f7f3 ff0a 	bl	1e770 <pin_is_output>
   2a95c:	b110      	cbz	r0, 2a964 <pin_is_task_output+0x10>
   2a95e:	4610      	mov	r0, r2
   2a960:	f7f3 fef0 	bl	1e744 <pin_in_use_by_te>
}
   2a964:	f000 0001 	and.w	r0, r0, #1
   2a968:	bd08      	pop	{r3, pc}

0002a96a <nrf_gpio_reconfigure>:
{
   2a96a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2a96e:	4617      	mov	r7, r2
   2a970:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2a974:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a976:	a801      	add	r0, sp, #4
{
   2a978:	460c      	mov	r4, r1
   2a97a:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a97c:	f7f3 ff7c 	bl	1e878 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2a980:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2a982:	1e39      	subs	r1, r7, #0
   2a984:	bf18      	it	ne
   2a986:	2101      	movne	r1, #1
   2a988:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2a98c:	1e23      	subs	r3, r4, #0
   2a98e:	bf18      	it	ne
   2a990:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2a992:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2a994:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2a998:	bf14      	ite	ne
   2a99a:	210c      	movne	r1, #12
   2a99c:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2a99e:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2a9a0:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2a9a4:	bf14      	ite	ne
   2a9a6:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   2a9aa:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2a9ac:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2a9b0:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2a9b4:	bf14      	ite	ne
   2a9b6:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2a9ba:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2a9bc:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2a9c0:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2a9c2:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2a9c6:	b104      	cbz	r4, 2a9ca <nrf_gpio_reconfigure+0x60>
   2a9c8:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2a9ca:	b10f      	cbz	r7, 2a9d0 <nrf_gpio_reconfigure+0x66>
   2a9cc:	783f      	ldrb	r7, [r7, #0]
   2a9ce:	007f      	lsls	r7, r7, #1
   2a9d0:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2a9d2:	b10e      	cbz	r6, 2a9d8 <nrf_gpio_reconfigure+0x6e>
   2a9d4:	7836      	ldrb	r6, [r6, #0]
   2a9d6:	00b6      	lsls	r6, r6, #2
   2a9d8:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2a9da:	b18d      	cbz	r5, 2aa00 <nrf_gpio_reconfigure+0x96>
   2a9dc:	7829      	ldrb	r1, [r5, #0]
   2a9de:	0209      	lsls	r1, r1, #8
   2a9e0:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2a9e2:	f1b8 0f00 	cmp.w	r8, #0
   2a9e6:	d003      	beq.n	2a9f0 <nrf_gpio_reconfigure+0x86>
   2a9e8:	f898 8000 	ldrb.w	r8, [r8]
   2a9ec:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2a9f0:	4321      	orrs	r1, r4
   2a9f2:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2a9f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2a9fa:	b002      	add	sp, #8
   2a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2aa00:	4629      	mov	r1, r5
   2aa02:	e7ed      	b.n	2a9e0 <nrf_gpio_reconfigure+0x76>

0002aa04 <nrf_gpio_cfg_sense_set>:
{
   2aa04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2aa06:	f10d 030f 	add.w	r3, sp, #15
   2aa0a:	9301      	str	r3, [sp, #4]
   2aa0c:	2300      	movs	r3, #0
{
   2aa0e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2aa12:	461a      	mov	r2, r3
   2aa14:	4619      	mov	r1, r3
   2aa16:	9300      	str	r3, [sp, #0]
   2aa18:	f7ff ffa7 	bl	2a96a <nrf_gpio_reconfigure>
}
   2aa1c:	b005      	add	sp, #20
   2aa1e:	f85d fb04 	ldr.w	pc, [sp], #4

0002aa22 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2aa22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2aa26:	4770      	bx	lr

0002aa28 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2aa28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2aa2c:	4770      	bx	lr

0002aa2e <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2aa2e:	f44f 7080 	mov.w	r0, #256	; 0x100
   2aa32:	4770      	bx	lr

0002aa34 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   2aa34:	2100      	movs	r1, #0
   2aa36:	f7f4 bc71 	b.w	1f31c <nrf_gpio_cfg.constprop.0>

0002aa3a <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2aa3a:	2302      	movs	r3, #2
   2aa3c:	f7f4 bbaa 	b.w	1f194 <qspi_xfer>

0002aa40 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2aa40:	2303      	movs	r3, #3
   2aa42:	f7f4 bba7 	b.w	1f194 <qspi_xfer>

0002aa46 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2aa46:	2100      	movs	r1, #0
   2aa48:	2002      	movs	r0, #2
   2aa4a:	f7f4 bec9 	b.w	1f7e0 <nrfx_qspi_erase>

0002aa4e <nrf_gpio_pin_clear>:
{
   2aa4e:	b507      	push	{r0, r1, r2, lr}
   2aa50:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aa52:	a801      	add	r0, sp, #4
   2aa54:	f7f4 ff3e 	bl	1f8d4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2aa58:	2301      	movs	r3, #1
   2aa5a:	9a01      	ldr	r2, [sp, #4]
   2aa5c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2aa5e:	60c3      	str	r3, [r0, #12]
}
   2aa60:	b003      	add	sp, #12
   2aa62:	f85d fb04 	ldr.w	pc, [sp], #4

0002aa66 <nrf_gpio_pin_set>:
{
   2aa66:	b507      	push	{r0, r1, r2, lr}
   2aa68:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aa6a:	a801      	add	r0, sp, #4
   2aa6c:	f7f4 ff32 	bl	1f8d4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2aa70:	2301      	movs	r3, #1
   2aa72:	9a01      	ldr	r2, [sp, #4]
   2aa74:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2aa76:	6083      	str	r3, [r0, #8]
}
   2aa78:	b003      	add	sp, #12
   2aa7a:	f85d fb04 	ldr.w	pc, [sp], #4

0002aa7e <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   2aa7e:	7f83      	ldrb	r3, [r0, #30]
   2aa80:	075a      	lsls	r2, r3, #29
   2aa82:	d40b      	bmi.n	2aa9c <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2aa84:	7fc0      	ldrb	r0, [r0, #31]
   2aa86:	28ff      	cmp	r0, #255	; 0xff
   2aa88:	d008      	beq.n	2aa9c <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   2aa8a:	079b      	lsls	r3, r3, #30
   2aa8c:	bf58      	it	pl
   2aa8e:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2aa92:	b909      	cbnz	r1, 2aa98 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   2aa94:	f7ff bfdb 	b.w	2aa4e <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2aa98:	f7ff bfe5 	b.w	2aa66 <nrf_gpio_pin_set>
}
   2aa9c:	4770      	bx	lr

0002aa9e <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2aa9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2aaa2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aaa4:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2aaa6:	4698      	mov	r8, r3
   2aaa8:	460f      	mov	r7, r1
   2aaaa:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aaac:	f7f4 ff12 	bl	1f8d4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2aab0:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2aab2:	f89d 4020 	ldrb.w	r4, [sp, #32]
   2aab6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2aaba:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2aabc:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2aac0:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   2aac4:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2aac8:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2aacc:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2aad0:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   2aad2:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   2aad6:	b002      	add	sp, #8
   2aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aadc <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2aadc:	1c43      	adds	r3, r0, #1
{
   2aade:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2aae0:	d005      	beq.n	2aaee <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   2aae2:	2300      	movs	r3, #0
   2aae4:	2201      	movs	r2, #1
   2aae6:	4619      	mov	r1, r3
   2aae8:	9300      	str	r3, [sp, #0]
   2aaea:	f7ff ffd8 	bl	2aa9e <nrf_gpio_cfg.constprop.0>
}
   2aaee:	b003      	add	sp, #12
   2aaf0:	f85d fb04 	ldr.w	pc, [sp], #4

0002aaf4 <metal_device_open>:
{
   2aaf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2aaf6:	460c      	mov	r4, r1
   2aaf8:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2aafa:	4606      	mov	r6, r0
   2aafc:	b918      	cbnz	r0, 2ab06 <metal_device_open+0x12>
		return -EINVAL;
   2aafe:	f06f 0015 	mvn.w	r0, #21
}
   2ab02:	b002      	add	sp, #8
   2ab04:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2ab06:	f7de fc2b 	bl	9360 <strlen>
   2ab0a:	2800      	cmp	r0, #0
   2ab0c:	d0f7      	beq.n	2aafe <metal_device_open+0xa>
   2ab0e:	2c00      	cmp	r4, #0
   2ab10:	d0f5      	beq.n	2aafe <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   2ab12:	4620      	mov	r0, r4
   2ab14:	f7de fc24 	bl	9360 <strlen>
   2ab18:	2800      	cmp	r0, #0
   2ab1a:	d0f0      	beq.n	2aafe <metal_device_open+0xa>
   2ab1c:	2d00      	cmp	r5, #0
   2ab1e:	d0ee      	beq.n	2aafe <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   2ab20:	4630      	mov	r0, r6
   2ab22:	a901      	add	r1, sp, #4
   2ab24:	f7f5 f9ec 	bl	1ff00 <metal_bus_find>
	if (error)
   2ab28:	2800      	cmp	r0, #0
   2ab2a:	d1ea      	bne.n	2ab02 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2ab2c:	9801      	ldr	r0, [sp, #4]
   2ab2e:	6883      	ldr	r3, [r0, #8]
   2ab30:	b12b      	cbz	r3, 2ab3e <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2ab32:	462a      	mov	r2, r5
   2ab34:	4621      	mov	r1, r4
}
   2ab36:	b002      	add	sp, #8
   2ab38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2ab3c:	4718      	bx	r3
		return -ENODEV;
   2ab3e:	f06f 0012 	mvn.w	r0, #18
   2ab42:	e7de      	b.n	2ab02 <metal_device_open+0xe>

0002ab44 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   2ab44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ab48:	b089      	sub	sp, #36	; 0x24
   2ab4a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2ab4c:	4604      	mov	r4, r0
   2ab4e:	4689      	mov	r9, r1
   2ab50:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   2ab52:	2100      	movs	r1, #0
   2ab54:	2220      	movs	r2, #32
   2ab56:	4668      	mov	r0, sp
{
   2ab58:	461f      	mov	r7, r3
   2ab5a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2ab5c:	f000 ff20 	bl	2b9a0 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   2ab60:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   2ab62:	bf97      	itett	ls
   2ab64:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   2ab66:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   2ab6a:	40b3      	lslls	r3, r6
   2ab6c:	f103 33ff 	addls.w	r3, r3, #4294967295
   2ab70:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   2ab72:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   2ab74:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   2ab78:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   2ab7c:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   2ab7e:	3418      	adds	r4, #24
   2ab80:	b145      	cbz	r5, 2ab94 <metal_io_init+0x50>
   2ab82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2ab84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2ab86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2ab8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   2ab8e:	b009      	add	sp, #36	; 0x24
   2ab90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   2ab94:	466d      	mov	r5, sp
   2ab96:	e7f4      	b.n	2ab82 <metal_io_init+0x3e>

0002ab98 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2ab98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ab9a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ab9c:	1c66      	adds	r6, r4, #1
   2ab9e:	d031      	beq.n	2ac04 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2aba0:	6885      	ldr	r5, [r0, #8]
   2aba2:	42a9      	cmp	r1, r5
   2aba4:	d22e      	bcs.n	2ac04 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   2aba6:	1864      	adds	r4, r4, r1
   2aba8:	d02c      	beq.n	2ac04 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   2abaa:	185e      	adds	r6, r3, r1
   2abac:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2abae:	bf88      	it	hi
   2abb0:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2abb2:	6a05      	ldr	r5, [r0, #32]
   2abb4:	b135      	cbz	r5, 2abc4 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   2abb6:	9300      	str	r3, [sp, #0]
   2abb8:	2305      	movs	r3, #5
   2abba:	47a8      	blx	r5
   2abbc:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2abbe:	4618      	mov	r0, r3
   2abc0:	b002      	add	sp, #8
   2abc2:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   2abc4:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2abc8:	4619      	mov	r1, r3
   2abca:	1aa4      	subs	r4, r4, r2
   2abcc:	1910      	adds	r0, r2, r4
   2abce:	b119      	cbz	r1, 2abd8 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   2abd0:	ea40 0502 	orr.w	r5, r0, r2
   2abd4:	07ad      	lsls	r5, r5, #30
   2abd6:	d10a      	bne.n	2abee <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2abd8:	2903      	cmp	r1, #3
   2abda:	dc0d      	bgt.n	2abf8 <metal_io_block_read+0x60>
   2abdc:	3801      	subs	r0, #1
   2abde:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   2abe0:	428a      	cmp	r2, r1
   2abe2:	d0ec      	beq.n	2abbe <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   2abe4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   2abe8:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2abec:	e7f8      	b.n	2abe0 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   2abee:	7800      	ldrb	r0, [r0, #0]
			len--;
   2abf0:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   2abf2:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   2abf6:	e7e9      	b.n	2abcc <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2abf8:	f850 4b04 	ldr.w	r4, [r0], #4
   2abfc:	3904      	subs	r1, #4
   2abfe:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   2ac02:	e7e9      	b.n	2abd8 <metal_io_block_read+0x40>
		return -ERANGE;
   2ac04:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2ac08:	e7d9      	b.n	2abbe <metal_io_block_read+0x26>

0002ac0a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2ac0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ac0c:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ac0e:	1c65      	adds	r5, r4, #1
   2ac10:	d032      	beq.n	2ac78 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ac12:	6885      	ldr	r5, [r0, #8]
   2ac14:	42a9      	cmp	r1, r5
   2ac16:	d22f      	bcs.n	2ac78 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2ac18:	1864      	adds	r4, r4, r1
   2ac1a:	d02d      	beq.n	2ac78 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ac1c:	185e      	adds	r6, r3, r1
   2ac1e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2ac20:	bf88      	it	hi
   2ac22:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2ac24:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2ac26:	b1cd      	cbz	r5, 2ac5c <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2ac28:	9300      	str	r3, [sp, #0]
   2ac2a:	2305      	movs	r3, #5
   2ac2c:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2ac2e:	b002      	add	sp, #8
   2ac30:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2ac32:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   2ac36:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2ac38:	7005      	strb	r5, [r0, #0]
			len--;
   2ac3a:	4615      	mov	r5, r2
   2ac3c:	18a0      	adds	r0, r4, r2
		while ( len && (
   2ac3e:	b119      	cbz	r1, 2ac48 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   2ac40:	ea40 0602 	orr.w	r6, r0, r2
   2ac44:	07b6      	lsls	r6, r6, #30
   2ac46:	d1f4      	bne.n	2ac32 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ac48:	2903      	cmp	r1, #3
   2ac4a:	dc0a      	bgt.n	2ac62 <metal_io_block_write+0x58>
   2ac4c:	3d01      	subs	r5, #1
   2ac4e:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   2ac50:	4288      	cmp	r0, r1
   2ac52:	d10c      	bne.n	2ac6e <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2ac54:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2ac58:	4618      	mov	r0, r3
   2ac5a:	e7e8      	b.n	2ac2e <metal_io_block_write+0x24>
   2ac5c:	4619      	mov	r1, r3
   2ac5e:	1aa4      	subs	r4, r4, r2
   2ac60:	e7eb      	b.n	2ac3a <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2ac62:	f855 2b04 	ldr.w	r2, [r5], #4
   2ac66:	3904      	subs	r1, #4
   2ac68:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2ac6c:	e7ec      	b.n	2ac48 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2ac6e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   2ac72:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   2ac76:	e7eb      	b.n	2ac50 <metal_io_block_write+0x46>
		return -ERANGE;
   2ac78:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2ac7c:	e7d7      	b.n	2ac2e <metal_io_block_write+0x24>

0002ac7e <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2ac7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ac80:	6804      	ldr	r4, [r0, #0]
   2ac82:	461d      	mov	r5, r3
		: NULL);
   2ac84:	1c66      	adds	r6, r4, #1
   2ac86:	d02b      	beq.n	2ace0 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ac88:	6883      	ldr	r3, [r0, #8]
   2ac8a:	4299      	cmp	r1, r3
   2ac8c:	d228      	bcs.n	2ace0 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2ac8e:	1864      	adds	r4, r4, r1
   2ac90:	d026      	beq.n	2ace0 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ac92:	186e      	adds	r6, r5, r1
   2ac94:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2ac96:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2ac98:	bf88      	it	hi
   2ac9a:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2ac9c:	b12e      	cbz	r6, 2acaa <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   2ac9e:	2305      	movs	r3, #5
   2aca0:	9500      	str	r5, [sp, #0]
   2aca2:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2aca4:	4628      	mov	r0, r5
}
   2aca6:	b002      	add	sp, #8
   2aca8:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   2acaa:	4621      	mov	r1, r4
   2acac:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2acae:	b94b      	cbnz	r3, 2acc4 <metal_io_block_set+0x46>
   2acb0:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   2acb2:	4299      	cmp	r1, r3
   2acb4:	d111      	bne.n	2acda <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   2acb6:	f3bf 8f5b 	dmb	ish
   2acba:	e7f3      	b.n	2aca4 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   2acbc:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2acc0:	3b01      	subs	r3, #1
   2acc2:	e7f4      	b.n	2acae <metal_io_block_set+0x30>
   2acc4:	0788      	lsls	r0, r1, #30
   2acc6:	d1f9      	bne.n	2acbc <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2acc8:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2accc:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2acce:	2b03      	cmp	r3, #3
   2acd0:	ddee      	ble.n	2acb0 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   2acd2:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2acd6:	3b04      	subs	r3, #4
   2acd8:	e7f9      	b.n	2acce <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2acda:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2acde:	e7e8      	b.n	2acb2 <metal_io_block_set+0x34>
		return -ERANGE;
   2ace0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2ace4:	e7df      	b.n	2aca6 <metal_io_block_set+0x28>

0002ace6 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2ace6:	2000      	movs	r0, #0
   2ace8:	4770      	bx	lr

0002acea <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2acea:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2acec:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2acee:	4602      	mov	r2, r0
   2acf0:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2acf2:	b984      	cbnz	r4, 2ad16 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   2acf4:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   2acf6:	291f      	cmp	r1, #31
   2acf8:	bf98      	it	ls
   2acfa:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2acfe:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2ad00:	b161      	cbz	r1, 2ad1c <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   2ad02:	6880      	ldr	r0, [r0, #8]
   2ad04:	4283      	cmp	r3, r0
   2ad06:	d209      	bcs.n	2ad1c <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2ad08:	6910      	ldr	r0, [r2, #16]
   2ad0a:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2ad0c:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2ad10:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2ad12:	bc10      	pop	{r4}
   2ad14:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2ad16:	4623      	mov	r3, r4
}
   2ad18:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2ad1a:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2ad1c:	f04f 30ff 	mov.w	r0, #4294967295
   2ad20:	e7f7      	b.n	2ad12 <metal_io_phys+0x28>

0002ad22 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2ad22:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   2ad24:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   2ad26:	4605      	mov	r5, r0
   2ad28:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2ad2a:	b9e3      	cbnz	r3, 2ad66 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2ad2c:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2ad2e:	1c62      	adds	r2, r4, #1
   2ad30:	bf09      	itett	eq
   2ad32:	6843      	ldreq	r3, [r0, #4]
   2ad34:	400c      	andne	r4, r1
   2ad36:	681c      	ldreq	r4, [r3, #0]
   2ad38:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2ad3a:	4621      	mov	r1, r4
   2ad3c:	4628      	mov	r0, r5
   2ad3e:	f7ff ffd4 	bl	2acea <metal_io_phys>
   2ad42:	4286      	cmp	r6, r0
   2ad44:	d007      	beq.n	2ad56 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   2ad46:	692b      	ldr	r3, [r5, #16]
   2ad48:	3301      	adds	r3, #1
   2ad4a:	441c      	add	r4, r3
		} while (offset < io->size);
   2ad4c:	68ab      	ldr	r3, [r5, #8]
   2ad4e:	429c      	cmp	r4, r3
   2ad50:	d3f3      	bcc.n	2ad3a <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   2ad52:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ad56:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2ad58:	1c43      	adds	r3, r0, #1
   2ad5a:	d007      	beq.n	2ad6c <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ad5c:	68ab      	ldr	r3, [r5, #8]
   2ad5e:	42a3      	cmp	r3, r4
   2ad60:	d904      	bls.n	2ad6c <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   2ad62:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   2ad64:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2ad66:	4798      	blx	r3
   2ad68:	4604      	mov	r4, r0
   2ad6a:	e7f4      	b.n	2ad56 <metal_io_phys_to_virt+0x34>
		: NULL);
   2ad6c:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2ad6e:	e7f9      	b.n	2ad64 <metal_io_phys_to_virt+0x42>

0002ad70 <virtqueue_create>:
{
   2ad70:	b530      	push	{r4, r5, lr}
   2ad72:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   2ad74:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2ad78:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2ad7a:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2ad7c:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   2ad7e:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   2ad80:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   2ad82:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2ad84:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   2ad86:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2ad88:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2ad8c:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   2ad90:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2ad94:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2ad96:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2ad98:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2ad9c:	1c6a      	adds	r2, r5, #1
   2ad9e:	4413      	add	r3, r2
   2ada0:	426d      	negs	r5, r5
   2ada2:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2ada4:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2ada6:	6983      	ldr	r3, [r0, #24]
   2ada8:	b953      	cbnz	r3, 2adc0 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2adaa:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2adac:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   2adae:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   2adb0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   2adb4:	db06      	blt.n	2adc4 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2adb6:	2300      	movs	r3, #0
   2adb8:	7393      	strb	r3, [r2, #14]
   2adba:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2adbe:	73d3      	strb	r3, [r2, #15]
}
   2adc0:	2000      	movs	r0, #0
   2adc2:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   2adc4:	3301      	adds	r3, #1
   2adc6:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2adc8:	e7f0      	b.n	2adac <virtqueue_create+0x3c>

0002adca <virtqueue_add_buffer>:
{
   2adca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   2adce:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   2add2:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2add4:	4655      	mov	r5, sl
   2add6:	2600      	movs	r6, #0
{
   2add8:	b085      	sub	sp, #20
	needed = readable + writable;
   2adda:	eb02 0803 	add.w	r8, r2, r3
{
   2adde:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2ade0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ade2:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   2ade6:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2adea:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2adec:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   2adf0:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2adf4:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2adf6:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2adf8:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2adfa:	45b0      	cmp	r8, r6
   2adfc:	dc1a      	bgt.n	2ae34 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   2adfe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   2ae00:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2ae02:	eba3 030b 	sub.w	r3, r3, fp
   2ae06:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2ae08:	69e3      	ldr	r3, [r4, #28]
   2ae0a:	8961      	ldrh	r1, [r4, #10]
   2ae0c:	885a      	ldrh	r2, [r3, #2]
   2ae0e:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2ae10:	400a      	ands	r2, r1
   2ae12:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2ae16:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2ae1a:	f3bf 8f5b 	dmb	ish
}
   2ae1e:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   2ae20:	69e2      	ldr	r2, [r4, #28]
   2ae22:	8853      	ldrh	r3, [r2, #2]
   2ae24:	3301      	adds	r3, #1
   2ae26:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2ae28:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2ae2a:	3301      	adds	r3, #1
   2ae2c:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2ae2e:	b005      	add	sp, #20
   2ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   2ae34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2ae36:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2ae38:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2ae3c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2ae40:	9302      	str	r3, [sp, #8]
   2ae42:	6803      	ldr	r3, [r0, #0]
   2ae44:	9203      	str	r2, [sp, #12]
   2ae46:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2ae48:	6883      	ldr	r3, [r0, #8]
   2ae4a:	3708      	adds	r7, #8
   2ae4c:	4299      	cmp	r1, r3
   2ae4e:	bf28      	it	cs
   2ae50:	f04f 31ff 	movcs.w	r1, #4294967295
   2ae54:	f7ff ff49 	bl	2acea <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2ae58:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2ae5c:	5098      	str	r0, [r3, r2]
   2ae5e:	2200      	movs	r2, #0
   2ae60:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   2ae62:	f857 2c08 	ldr.w	r2, [r7, #-8]
   2ae66:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2ae68:	9a01      	ldr	r2, [sp, #4]
   2ae6a:	4296      	cmp	r6, r2
   2ae6c:	bfac      	ite	ge
   2ae6e:	2200      	movge	r2, #0
   2ae70:	2201      	movlt	r2, #1
		if (i >= readable)
   2ae72:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   2ae74:	bfd8      	it	le
   2ae76:	f042 0202 	orrle.w	r2, r2, #2
   2ae7a:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2ae7c:	3601      	adds	r6, #1
   2ae7e:	89ed      	ldrh	r5, [r5, #14]
   2ae80:	e7bb      	b.n	2adfa <virtqueue_add_buffer+0x30>

0002ae82 <virtqueue_get_buffer>:
{
   2ae82:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2ae84:	b350      	cbz	r0, 2aedc <virtqueue_get_buffer+0x5a>
   2ae86:	6a05      	ldr	r5, [r0, #32]
   2ae88:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2ae8a:	886b      	ldrh	r3, [r5, #2]
   2ae8c:	42a3      	cmp	r3, r4
   2ae8e:	d030      	beq.n	2aef2 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2ae90:	1c63      	adds	r3, r4, #1
   2ae92:	85c3      	strh	r3, [r0, #46]	; 0x2e
   2ae94:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2ae96:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2ae9a:	3b01      	subs	r3, #1
   2ae9c:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2ae9e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2aea2:	686b      	ldr	r3, [r5, #4]
   2aea4:	b29e      	uxth	r6, r3
	if (len)
   2aea6:	b109      	cbz	r1, 2aeac <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2aea8:	68ad      	ldr	r5, [r5, #8]
   2aeaa:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2aeac:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2aeb0:	b29b      	uxth	r3, r3
   2aeb2:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2aeb6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2aeba:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2aebc:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2aebe:	442f      	add	r7, r5
	dxp->ndescs--;
   2aec0:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2aec2:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2aec4:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2aec6:	898d      	ldrh	r5, [r1, #12]
   2aec8:	076f      	lsls	r7, r5, #29
   2aeca:	d50e      	bpl.n	2aeea <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2aecc:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2aece:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2aed0:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2aed2:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2aed4:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2aed6:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2aed8:	b102      	cbz	r2, 2aedc <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2aeda:	8014      	strh	r4, [r2, #0]
}
   2aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2aede:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2aee0:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2aee2:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2aee4:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2aee8:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2aeea:	898d      	ldrh	r5, [r1, #12]
   2aeec:	07ed      	lsls	r5, r5, #31
   2aeee:	d4f6      	bmi.n	2aede <virtqueue_get_buffer+0x5c>
   2aef0:	e7ec      	b.n	2aecc <virtqueue_get_buffer+0x4a>
		return NULL;
   2aef2:	2000      	movs	r0, #0
   2aef4:	e7f2      	b.n	2aedc <virtqueue_get_buffer+0x5a>

0002aef6 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2aef6:	6983      	ldr	r3, [r0, #24]
   2aef8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2aefc:	6898      	ldr	r0, [r3, #8]
   2aefe:	4770      	bx	lr

0002af00 <virtqueue_get_available_buffer>:
{
   2af00:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2af02:	f3bf 8f5b 	dmb	ish
{
   2af06:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2af08:	69c1      	ldr	r1, [r0, #28]
{
   2af0a:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2af0c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2af0e:	884a      	ldrh	r2, [r1, #2]
{
   2af10:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2af12:	429a      	cmp	r2, r3
   2af14:	d016      	beq.n	2af44 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2af16:	1c5a      	adds	r2, r3, #1
   2af18:	8602      	strh	r2, [r0, #48]	; 0x30
   2af1a:	8942      	ldrh	r2, [r0, #10]
   2af1c:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2af1e:	4013      	ands	r3, r2
   2af20:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2af24:	888a      	ldrh	r2, [r1, #4]
   2af26:	802a      	strh	r2, [r5, #0]
   2af28:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2af2a:	6982      	ldr	r2, [r0, #24]
   2af2c:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2af2e:	58d1      	ldr	r1, [r2, r3]
   2af30:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2af32:	f7ff fef6 	bl	2ad22 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2af36:	882a      	ldrh	r2, [r5, #0]
   2af38:	69a3      	ldr	r3, [r4, #24]
   2af3a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2af3e:	689b      	ldr	r3, [r3, #8]
   2af40:	6033      	str	r3, [r6, #0]
}
   2af42:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2af44:	2000      	movs	r0, #0
   2af46:	e7fc      	b.n	2af42 <virtqueue_get_available_buffer+0x42>

0002af48 <virtqueue_disable_cb>:
{
   2af48:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2af4a:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2af4c:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2af4e:	6912      	ldr	r2, [r2, #16]
   2af50:	0092      	lsls	r2, r2, #2
   2af52:	d517      	bpl.n	2af84 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2af54:	b943      	cbnz	r3, 2af68 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2af56:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2af58:	69c2      	ldr	r2, [r0, #28]
   2af5a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2af5c:	8944      	ldrh	r4, [r0, #10]
   2af5e:	3b01      	subs	r3, #1
   2af60:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   2af62:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2af66:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2af68:	6803      	ldr	r3, [r0, #0]
   2af6a:	699b      	ldr	r3, [r3, #24]
   2af6c:	2b01      	cmp	r3, #1
   2af6e:	d108      	bne.n	2af82 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2af70:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   2af72:	6a02      	ldr	r2, [r0, #32]
   2af74:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2af76:	8940      	ldrh	r0, [r0, #10]
   2af78:	3b01      	subs	r3, #1
   2af7a:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2af7c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2af80:	8093      	strh	r3, [r2, #4]
}
   2af82:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2af84:	b923      	cbnz	r3, 2af90 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2af86:	69c2      	ldr	r2, [r0, #28]
   2af88:	8813      	ldrh	r3, [r2, #0]
   2af8a:	f043 0301 	orr.w	r3, r3, #1
   2af8e:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2af90:	6803      	ldr	r3, [r0, #0]
   2af92:	699b      	ldr	r3, [r3, #24]
   2af94:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2af96:	bf01      	itttt	eq
   2af98:	6a02      	ldreq	r2, [r0, #32]
   2af9a:	8813      	ldrheq	r3, [r2, #0]
   2af9c:	f043 0301 	orreq.w	r3, r3, #1
   2afa0:	8013      	strheq	r3, [r2, #0]
}
   2afa2:	e7ee      	b.n	2af82 <virtqueue_disable_cb+0x3a>

0002afa4 <virtqueue_kick>:
{
   2afa4:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2afa6:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2afaa:	6803      	ldr	r3, [r0, #0]
{
   2afac:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2afae:	691a      	ldr	r2, [r3, #16]
   2afb0:	699b      	ldr	r3, [r3, #24]
   2afb2:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2afb6:	d01a      	beq.n	2afee <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2afb8:	b97b      	cbnz	r3, 2afda <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2afba:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2afbc:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   2afbe:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2afc0:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2afc2:	3b01      	subs	r3, #1
   2afc4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2afc8:	8892      	ldrh	r2, [r2, #4]
   2afca:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2afcc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2afce:	b29b      	uxth	r3, r3
   2afd0:	429a      	cmp	r2, r3
   2afd2:	d814      	bhi.n	2affe <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   2afd4:	2300      	movs	r3, #0
   2afd6:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2afd8:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2afda:	2b01      	cmp	r3, #1
   2afdc:	d1fa      	bne.n	2afd4 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   2afde:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2afe0:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   2afe2:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2afe4:	6941      	ldr	r1, [r0, #20]
   2afe6:	3b01      	subs	r3, #1
   2afe8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2afec:	e7ec      	b.n	2afc8 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2afee:	b963      	cbnz	r3, 2b00a <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   2aff0:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   2aff2:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2aff4:	43db      	mvns	r3, r3
   2aff6:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2affa:	2b00      	cmp	r3, #0
   2affc:	d0ea      	beq.n	2afd4 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2affe:	6923      	ldr	r3, [r4, #16]
   2b000:	2b00      	cmp	r3, #0
   2b002:	d0e7      	beq.n	2afd4 <virtqueue_kick+0x30>
		vq->notify(vq);
   2b004:	4620      	mov	r0, r4
   2b006:	4798      	blx	r3
   2b008:	e7e4      	b.n	2afd4 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b00a:	2b01      	cmp	r3, #1
   2b00c:	d1e2      	bne.n	2afd4 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2b00e:	69c3      	ldr	r3, [r0, #28]
   2b010:	e7ef      	b.n	2aff2 <virtqueue_kick+0x4e>

0002b012 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b012:	69c3      	ldr	r3, [r0, #28]
   2b014:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2b016:	8859      	ldrh	r1, [r3, #2]
   2b018:	4291      	cmp	r1, r2
   2b01a:	d00a      	beq.n	2b032 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2b01c:	8941      	ldrh	r1, [r0, #10]
   2b01e:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2b020:	400a      	ands	r2, r1
   2b022:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2b026:	889a      	ldrh	r2, [r3, #4]
   2b028:	6983      	ldr	r3, [r0, #24]
   2b02a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2b02e:	6898      	ldr	r0, [r3, #8]
	return len;
   2b030:	4770      	bx	lr
		return 0;
   2b032:	2000      	movs	r0, #0
}
   2b034:	4770      	bx	lr

0002b036 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2b036:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2b03a:	68c3      	ldr	r3, [r0, #12]
   2b03c:	b103      	cbz	r3, 2b040 <virtqueue_notification+0xa>
		vq->callback(vq);
   2b03e:	4718      	bx	r3
}
   2b040:	4770      	bx	lr

0002b042 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b042:	f04f 32ff 	mov.w	r2, #4294967295
   2b046:	f04f 33ff 	mov.w	r3, #4294967295
   2b04a:	f7f6 bc85 	b.w	21958 <z_impl_k_sem_take>

0002b04e <rpmsg_unregister_endpoint>:
{
   2b04e:	b570      	push	{r4, r5, r6, lr}
   2b050:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2b052:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2b054:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2b058:	4630      	mov	r0, r6
   2b05a:	f7ff fff2 	bl	2b042 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2b05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b060:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   2b064:	2b7f      	cmp	r3, #127	; 0x7f
   2b066:	d80b      	bhi.n	2b080 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2b068:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2b06a:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2b06c:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2b06e:	f003 031f 	and.w	r3, r3, #31
   2b072:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2b074:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2b078:	ea23 0302 	bic.w	r3, r3, r2
   2b07c:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   2b080:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2b084:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2b086:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   2b088:	f104 0334 	add.w	r3, r4, #52	; 0x34
   2b08c:	6011      	str	r1, [r2, #0]
	node->next = node;
   2b08e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2b092:	2300      	movs	r3, #0
   2b094:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2b096:	4630      	mov	r0, r6
}
   2b098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b09c:	f7f6 bc18 	b.w	218d0 <z_impl_k_sem_give>

0002b0a0 <rpmsg_send_ns_message>:
{
   2b0a0:	b530      	push	{r4, r5, lr}
   2b0a2:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   2b0a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   2b0a6:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2b0a8:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2b0aa:	2220      	movs	r2, #32
   2b0ac:	4601      	mov	r1, r0
   2b0ae:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2b0b0:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2b0b2:	f000 fdb7 	bl	2bc24 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2b0b6:	2328      	movs	r3, #40	; 0x28
   2b0b8:	2201      	movs	r2, #1
   2b0ba:	4629      	mov	r1, r5
   2b0bc:	e9cd 3200 	strd	r3, r2, [sp]
   2b0c0:	4620      	mov	r0, r4
   2b0c2:	2235      	movs	r2, #53	; 0x35
   2b0c4:	ab02      	add	r3, sp, #8
   2b0c6:	f7f5 f889 	bl	201dc <rpmsg_send_offchannel_raw>
}
   2b0ca:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2b0ce:	b00d      	add	sp, #52	; 0x34
   2b0d0:	bd30      	pop	{r4, r5, pc}

0002b0d2 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2b0d2:	b128      	cbz	r0, 2b0e0 <rpmsg_hold_rx_buffer+0xe>
   2b0d4:	6a00      	ldr	r0, [r0, #32]
   2b0d6:	b118      	cbz	r0, 2b0e0 <rpmsg_hold_rx_buffer+0xe>
   2b0d8:	b111      	cbz	r1, 2b0e0 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2b0da:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2b0dc:	b103      	cbz	r3, 2b0e0 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2b0de:	4718      	bx	r3
}
   2b0e0:	4770      	bx	lr

0002b0e2 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2b0e2:	b130      	cbz	r0, 2b0f2 <rpmsg_release_rx_buffer+0x10>
   2b0e4:	6a00      	ldr	r0, [r0, #32]
   2b0e6:	b120      	cbz	r0, 2b0f2 <rpmsg_release_rx_buffer+0x10>
   2b0e8:	b119      	cbz	r1, 2b0f2 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2b0ea:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2b0ee:	b103      	cbz	r3, 2b0f2 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2b0f0:	4718      	bx	r3
}
   2b0f2:	4770      	bx	lr

0002b0f4 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   2b0f4:	b130      	cbz	r0, 2b104 <rpmsg_get_tx_payload_buffer+0x10>
   2b0f6:	6a00      	ldr	r0, [r0, #32]
   2b0f8:	b120      	cbz	r0, 2b104 <rpmsg_get_tx_payload_buffer+0x10>
   2b0fa:	b119      	cbz	r1, 2b104 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2b0fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   2b100:	b103      	cbz	r3, 2b104 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2b102:	4718      	bx	r3
}
   2b104:	2000      	movs	r0, #0
   2b106:	4770      	bx	lr

0002b108 <rpmsg_get_endpoint>:
{
   2b108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b10c:	4606      	mov	r6, r0
   2b10e:	4688      	mov	r8, r1
   2b110:	4617      	mov	r7, r2
   2b112:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2b114:	6804      	ldr	r4, [r0, #0]
   2b116:	42a6      	cmp	r6, r4
   2b118:	d101      	bne.n	2b11e <rpmsg_get_endpoint+0x16>
	return NULL;
   2b11a:	2500      	movs	r5, #0
   2b11c:	e023      	b.n	2b166 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b11e:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b120:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b124:	d002      	beq.n	2b12c <rpmsg_get_endpoint+0x24>
   2b126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2b128:	42bb      	cmp	r3, r7
   2b12a:	d01c      	beq.n	2b166 <rpmsg_get_endpoint+0x5e>
		if (name)
   2b12c:	f1b8 0f00 	cmp.w	r8, #0
   2b130:	d101      	bne.n	2b136 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   2b132:	6824      	ldr	r4, [r4, #0]
   2b134:	e7ef      	b.n	2b116 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   2b136:	2220      	movs	r2, #32
   2b138:	4641      	mov	r1, r8
   2b13a:	4628      	mov	r0, r5
   2b13c:	f000 fd60 	bl	2bc00 <strncmp>
		if (!name || !name_match)
   2b140:	2800      	cmp	r0, #0
   2b142:	d1f6      	bne.n	2b132 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2b144:	f1b9 3fff 	cmp.w	r9, #4294967295
   2b148:	d002      	beq.n	2b150 <rpmsg_get_endpoint+0x48>
   2b14a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2b14c:	454b      	cmp	r3, r9
   2b14e:	d00a      	beq.n	2b166 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2b150:	1c7b      	adds	r3, r7, #1
   2b152:	d00b      	beq.n	2b16c <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2b154:	6824      	ldr	r4, [r4, #0]
   2b156:	42b4      	cmp	r4, r6
   2b158:	d0df      	beq.n	2b11a <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b15a:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b15e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b162:	429f      	cmp	r7, r3
   2b164:	d1e7      	bne.n	2b136 <rpmsg_get_endpoint+0x2e>
}
   2b166:	4628      	mov	r0, r5
   2b168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2b16c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2b16e:	3301      	adds	r3, #1
   2b170:	d0f9      	beq.n	2b166 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2b172:	6824      	ldr	r4, [r4, #0]
   2b174:	42b4      	cmp	r4, r6
   2b176:	d0d0      	beq.n	2b11a <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b178:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b17c:	e7d6      	b.n	2b12c <rpmsg_get_endpoint+0x24>

0002b17e <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2b17e:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2b180:	4604      	mov	r4, r0
   2b182:	b190      	cbz	r0, 2b1aa <rpmsg_destroy_ept+0x2c>
   2b184:	6a03      	ldr	r3, [r0, #32]
   2b186:	b183      	cbz	r3, 2b1aa <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2b188:	7802      	ldrb	r2, [r0, #0]
   2b18a:	b14a      	cbz	r2, 2b1a0 <rpmsg_destroy_ept+0x22>
   2b18c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2b190:	b133      	cbz	r3, 2b1a0 <rpmsg_destroy_ept+0x22>
   2b192:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2b198:	d302      	bcc.n	2b1a0 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2b19a:	2101      	movs	r1, #1
   2b19c:	f7ff ff80 	bl	2b0a0 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2b1a0:	4620      	mov	r0, r4
}
   2b1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2b1a6:	f7ff bf52 	b.w	2b04e <rpmsg_unregister_endpoint>
}
   2b1aa:	bd10      	pop	{r4, pc}

0002b1ac <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2b1ac:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2b1b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2b1b4:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2b1b8:	4770      	bx	lr

0002b1ba <rpmsg_virtio_tx_callback>:
}
   2b1ba:	4770      	bx	lr

0002b1bc <k_sem_give>:
   2b1bc:	f7f6 bb88 	b.w	218d0 <z_impl_k_sem_give>

0002b1c0 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b1c0:	f04f 32ff 	mov.w	r2, #4294967295
   2b1c4:	f04f 33ff 	mov.w	r3, #4294967295
   2b1c8:	f7f6 bbc6 	b.w	21958 <z_impl_k_sem_take>

0002b1cc <rpmsg_virtio_release_tx_buffer>:
{
   2b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b1ce:	460c      	mov	r4, r1
   2b1d0:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2b1d2:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2b1d6:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2b1da:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2b1dc:	b2b6      	uxth	r6, r6
   2b1de:	f7ff ffef 	bl	2b1c0 <__metal_mutex_acquire>
	r_desc->idx = idx;
   2b1e2:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   2b1e6:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2b1ea:	f1a4 0310 	sub.w	r3, r4, #16
   2b1ee:	f844 2c0c 	str.w	r2, [r4, #-12]
   2b1f2:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   2b1f6:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2b1fa:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   2b1fe:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   2b202:	4638      	mov	r0, r7
   2b204:	6013      	str	r3, [r2, #0]
   2b206:	f7ff ffd9 	bl	2b1bc <k_sem_give>
}
   2b20a:	2000      	movs	r0, #0
   2b20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b20e <rpmsg_virtio_ns_callback>:
{
   2b20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   2b212:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   2b214:	2a28      	cmp	r2, #40	; 0x28
{
   2b216:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2b218:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2b21c:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2b21e:	d126      	bne.n	2b26e <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2b220:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2b222:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2b224:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   2b226:	42a1      	cmp	r1, r4
   2b228:	bf28      	it	cs
   2b22a:	f04f 31ff 	movcs.w	r1, #4294967295
   2b22e:	2320      	movs	r3, #32
   2b230:	466a      	mov	r2, sp
   2b232:	f7ff fcb1 	bl	2ab98 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2b236:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   2b23a:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2b23e:	4630      	mov	r0, r6
   2b240:	f7ff ffbe 	bl	2b1c0 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2b244:	4643      	mov	r3, r8
   2b246:	f04f 32ff 	mov.w	r2, #4294967295
   2b24a:	4669      	mov	r1, sp
   2b24c:	4628      	mov	r0, r5
   2b24e:	f7ff ff5b 	bl	2b108 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2b254:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2b256:	07db      	lsls	r3, r3, #31
   2b258:	d519      	bpl.n	2b28e <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   2b25a:	b960      	cbnz	r0, 2b276 <rpmsg_virtio_ns_callback+0x68>
   2b25c:	4630      	mov	r0, r6
   2b25e:	f7ff ffad 	bl	2b1bc <k_sem_give>
		if (rdev->ns_unbind_cb)
   2b262:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2b264:	b11b      	cbz	r3, 2b26e <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   2b266:	4642      	mov	r2, r8
   2b268:	4669      	mov	r1, sp
   2b26a:	4628      	mov	r0, r5
   2b26c:	4798      	blx	r3
}
   2b26e:	2000      	movs	r0, #0
   2b270:	b008      	add	sp, #32
   2b272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2b276:	f04f 33ff 	mov.w	r3, #4294967295
   2b27a:	6283      	str	r3, [r0, #40]	; 0x28
   2b27c:	4630      	mov	r0, r6
   2b27e:	f7ff ff9d 	bl	2b1bc <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2b282:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b284:	2b00      	cmp	r3, #0
   2b286:	d0ec      	beq.n	2b262 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2b288:	4620      	mov	r0, r4
   2b28a:	4798      	blx	r3
   2b28c:	e7e9      	b.n	2b262 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   2b28e:	b920      	cbnz	r0, 2b29a <rpmsg_virtio_ns_callback+0x8c>
   2b290:	4630      	mov	r0, r6
   2b292:	f7ff ff93 	bl	2b1bc <k_sem_give>
			if (rdev->ns_bind_cb)
   2b296:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2b298:	e7e4      	b.n	2b264 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2b29a:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2b29e:	4630      	mov	r0, r6
   2b2a0:	f7ff ff8c 	bl	2b1bc <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2b2a4:	e7e3      	b.n	2b26e <rpmsg_virtio_ns_callback+0x60>

0002b2a6 <rpmsg_virtio_get_rx_buffer>:
{
   2b2a6:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2b2a8:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2b2ac:	4613      	mov	r3, r2
   2b2ae:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2b2b0:	b925      	cbnz	r5, 2b2bc <rpmsg_virtio_get_rx_buffer+0x16>
}
   2b2b2:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2b2b4:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2b2b8:	f7ff bde3 	b.w	2ae82 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2b2bc:	2d01      	cmp	r5, #1
   2b2be:	d106      	bne.n	2b2ce <rpmsg_virtio_get_rx_buffer+0x28>
}
   2b2c0:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2b2c2:	460a      	mov	r2, r1
   2b2c4:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2b2c8:	4619      	mov	r1, r3
   2b2ca:	f7ff be19 	b.w	2af00 <virtqueue_get_available_buffer>
}
   2b2ce:	2000      	movs	r0, #0
   2b2d0:	bc30      	pop	{r4, r5}
   2b2d2:	4770      	bx	lr

0002b2d4 <rpmsg_virtio_return_buffer>:
{
   2b2d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b2d6:	460c      	mov	r4, r1
   2b2d8:	4619      	mov	r1, r3
   2b2da:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2b2de:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2b2e0:	b95d      	cbnz	r5, 2b2fa <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2b2e2:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2b2e4:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2b2e8:	2301      	movs	r3, #1
   2b2ea:	462a      	mov	r2, r5
   2b2ec:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2b2f0:	a902      	add	r1, sp, #8
   2b2f2:	f7ff fd6a 	bl	2adca <virtqueue_add_buffer>
}
   2b2f6:	b004      	add	sp, #16
   2b2f8:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2b2fa:	2d01      	cmp	r5, #1
   2b2fc:	d1fb      	bne.n	2b2f6 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2b2fe:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   2b302:	b004      	add	sp, #16
   2b304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2b308:	f7f4 bf4c 	b.w	201a4 <virtqueue_add_consumed_buffer>

0002b30c <rpmsg_virtio_release_rx_buffer>:
{
   2b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b30e:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2b310:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2b314:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2b318:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2b31a:	b2b6      	uxth	r6, r6
{
   2b31c:	460d      	mov	r5, r1
   2b31e:	f7ff ff4f 	bl	2b1c0 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2b322:	4631      	mov	r1, r6
   2b324:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2b328:	f7ff fde5 	bl	2aef6 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2b32c:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2b32e:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2b330:	f1a5 0110 	sub.w	r1, r5, #16
   2b334:	4620      	mov	r0, r4
   2b336:	f7ff ffcd 	bl	2b2d4 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   2b33a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2b33e:	f7ff fe31 	bl	2afa4 <virtqueue_kick>
   2b342:	4638      	mov	r0, r7
}
   2b344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b348:	f7ff bf38 	b.w	2b1bc <k_sem_give>

0002b34c <rpmsg_virtio_shm_pool_get_buffer>:
{
   2b34c:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   2b34e:	b148      	cbz	r0, 2b364 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2b350:	b149      	cbz	r1, 2b366 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2b352:	6843      	ldr	r3, [r0, #4]
   2b354:	428b      	cmp	r3, r1
   2b356:	d306      	bcc.n	2b366 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2b358:	6882      	ldr	r2, [r0, #8]
   2b35a:	6804      	ldr	r4, [r0, #0]
   2b35c:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   2b35e:	1a5b      	subs	r3, r3, r1
   2b360:	6043      	str	r3, [r0, #4]
	return buffer;
   2b362:	18a0      	adds	r0, r4, r2
}
   2b364:	bd10      	pop	{r4, pc}
		return NULL;
   2b366:	2000      	movs	r0, #0
   2b368:	e7fc      	b.n	2b364 <rpmsg_virtio_shm_pool_get_buffer+0x18>

0002b36a <rpmsg_virtio_get_tx_payload_buffer>:
{
   2b36a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2b36e:	4605      	mov	r5, r0
   2b370:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2b374:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2b376:	6a03      	ldr	r3, [r0, #32]
   2b378:	4617      	mov	r7, r2
   2b37a:	681b      	ldr	r3, [r3, #0]
   2b37c:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2b37e:	0743      	lsls	r3, r0, #29
   2b380:	d403      	bmi.n	2b38a <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2b382:	2000      	movs	r0, #0
}
   2b384:	b002      	add	sp, #8
   2b386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2b38a:	f643 2398 	movw	r3, #15000	; 0x3a98
   2b38e:	2f00      	cmp	r7, #0
   2b390:	bf18      	it	ne
   2b392:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2b394:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2b398:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2b39c:	4640      	mov	r0, r8
   2b39e:	f7ff ff0f 	bl	2b1c0 <__metal_mutex_acquire>
	return list->next == list;
   2b3a2:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   2b3a6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2b3aa:	4554      	cmp	r4, sl
   2b3ac:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2b3b0:	d025      	beq.n	2b3fe <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   2b3b2:	b324      	cbz	r4, 2b3fe <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   2b3b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   2b3b8:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2b3ba:	6822      	ldr	r2, [r4, #0]
   2b3bc:	601a      	str	r2, [r3, #0]
	node->next = node;
   2b3be:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   2b3c2:	f1b9 0f00 	cmp.w	r9, #0
   2b3c6:	d10e      	bne.n	2b3e6 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   2b3c8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2b3cc:	6033      	str	r3, [r6, #0]
   2b3ce:	4640      	mov	r0, r8
   2b3d0:	f7ff fef4 	bl	2b1bc <k_sem_give>
	rp_hdr->reserved = idx;
   2b3d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2b3d8:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2b3dc:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   2b3de:	6833      	ldr	r3, [r6, #0]
   2b3e0:	3b10      	subs	r3, #16
   2b3e2:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2b3e4:	e7ce      	b.n	2b384 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   2b3e6:	f1b9 0f01 	cmp.w	r9, #1
   2b3ea:	d1f0      	bne.n	2b3ce <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   2b3ec:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2b3ee:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   2b3f2:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2b3f6:	f7ff fd7e 	bl	2aef6 <virtqueue_get_buffer_length>
   2b3fa:	6030      	str	r0, [r6, #0]
   2b3fc:	e7e7      	b.n	2b3ce <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   2b3fe:	f1b9 0f00 	cmp.w	r9, #0
   2b402:	d12a      	bne.n	2b45a <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   2b404:	4631      	mov	r1, r6
   2b406:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2b40a:	f10d 0206 	add.w	r2, sp, #6
   2b40e:	f7ff fd38 	bl	2ae82 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   2b412:	4604      	mov	r4, r0
   2b414:	2800      	cmp	r0, #0
   2b416:	d1da      	bne.n	2b3ce <rpmsg_virtio_get_tx_payload_buffer+0x64>
   2b418:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   2b41c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   2b41e:	b953      	cbnz	r3, 2b436 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   2b420:	4640      	mov	r0, r8
   2b422:	f7ff fecb 	bl	2b1bc <k_sem_give>
		if (rp_hdr || !tick_count)
   2b426:	2f00      	cmp	r7, #0
   2b428:	d0ab      	beq.n	2b382 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   2b42a:	2021      	movs	r0, #33	; 0x21
   2b42c:	2100      	movs	r1, #0
   2b42e:	f7f8 f943 	bl	236b8 <z_impl_k_sleep>
		tick_count--;
   2b432:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   2b434:	e7b2      	b.n	2b39c <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   2b436:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   2b43a:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   2b43e:	f7ff ff85 	bl	2b34c <rpmsg_virtio_shm_pool_get_buffer>
   2b442:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   2b444:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   2b448:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   2b44c:	6033      	str	r3, [r6, #0]
   2b44e:	4640      	mov	r0, r8
   2b450:	f7ff feb4 	bl	2b1bc <k_sem_give>
		if (rp_hdr || !tick_count)
   2b454:	2c00      	cmp	r4, #0
   2b456:	d0e6      	beq.n	2b426 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   2b458:	e7bc      	b.n	2b3d4 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   2b45a:	f1b9 0f01 	cmp.w	r9, #1
   2b45e:	d1df      	bne.n	2b420 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   2b460:	4632      	mov	r2, r6
   2b462:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2b466:	f10d 0106 	add.w	r1, sp, #6
   2b46a:	f7ff fd49 	bl	2af00 <virtqueue_get_available_buffer>
   2b46e:	4604      	mov	r4, r0
   2b470:	e7ed      	b.n	2b44e <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0002b472 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   2b472:	b120      	cbz	r0, 2b47e <rpmsg_virtio_init_shm_pool+0xc>
   2b474:	b119      	cbz	r1, 2b47e <rpmsg_virtio_init_shm_pool+0xc>
   2b476:	b112      	cbz	r2, 2b47e <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   2b478:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   2b47c:	6001      	str	r1, [r0, #0]
}
   2b47e:	4770      	bx	lr

0002b480 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   2b480:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   2b482:	4604      	mov	r4, r0
   2b484:	b918      	cbnz	r0, 2b48e <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   2b486:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   2b488:	3834      	subs	r0, #52	; 0x34
   2b48a:	f7ff fe78 	bl	2b17e <rpmsg_destroy_ept>
	return list->next == list;
   2b48e:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   2b490:	4284      	cmp	r4, r0
   2b492:	d1f9      	bne.n	2b488 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   2b494:	2300      	movs	r3, #0
		rvdev->svq = 0;
   2b496:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   2b49a:	e7f4      	b.n	2b486 <rpmsg_deinit_vdev+0x6>

0002b49c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2b49c:	f7f5 b9f4 	b.w	20888 <_DoInit>

0002b4a0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2b4a0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2b4a2:	f7ff fffb 	bl	2b49c <SEGGER_RTT_Init>

	return 0;
}
   2b4a6:	2000      	movs	r0, #0
   2b4a8:	bd08      	pop	{r3, pc}

0002b4aa <z_device_state_init>:
}
   2b4aa:	4770      	bx	lr

0002b4ac <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2b4ac:	b140      	cbz	r0, 2b4c0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2b4ae:	68c3      	ldr	r3, [r0, #12]
   2b4b0:	7858      	ldrb	r0, [r3, #1]
   2b4b2:	f010 0001 	ands.w	r0, r0, #1
   2b4b6:	bf1e      	ittt	ne
   2b4b8:	7818      	ldrbne	r0, [r3, #0]
   2b4ba:	fab0 f080 	clzne	r0, r0
   2b4be:	0940      	lsrne	r0, r0, #5
}
   2b4c0:	4770      	bx	lr

0002b4c2 <z_early_memset>:
   2b4c2:	f000 ba6d 	b.w	2b9a0 <memset>

0002b4c6 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b4c6:	f000 ba31 	b.w	2b92c <memcpy>

0002b4ca <k_heap_init>:
{
   2b4ca:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2b4cc:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2b4d0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2b4d4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2b4d6:	f7e1 b9a5 	b.w	c824 <sys_heap_init>

0002b4da <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2b4da:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2b4de:	4313      	orrs	r3, r2
   2b4e0:	f013 0303 	ands.w	r3, r3, #3
   2b4e4:	d10c      	bne.n	2b500 <create_free_list+0x26>
	slab->free_list = NULL;
   2b4e6:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b4e8:	68c1      	ldr	r1, [r0, #12]
   2b4ea:	4299      	cmp	r1, r3
   2b4ec:	d801      	bhi.n	2b4f2 <create_free_list+0x18>
	return 0;
   2b4ee:	2000      	movs	r0, #0
   2b4f0:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2b4f2:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b4f4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2b4f6:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2b4f8:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2b4fa:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   2b4fc:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2b4fe:	e7f3      	b.n	2b4e8 <create_free_list+0xe>
		return -EINVAL;
   2b500:	f06f 0015 	mvn.w	r0, #21
}
   2b504:	4770      	bx	lr

0002b506 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2b506:	f3ef 8005 	mrs	r0, IPSR
}
   2b50a:	3800      	subs	r0, #0
   2b50c:	bf18      	it	ne
   2b50e:	2001      	movne	r0, #1
   2b510:	4770      	bx	lr

0002b512 <z_impl_k_thread_name_set>:
}
   2b512:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2b516:	4770      	bx	lr

0002b518 <k_thread_name_get>:
}
   2b518:	2000      	movs	r0, #0
   2b51a:	4770      	bx	lr

0002b51c <z_impl_k_thread_start>:
	z_sched_start(thread);
   2b51c:	f7f7 ba2c 	b.w	22978 <z_sched_start>

0002b520 <z_pm_save_idle_exit>:
{
   2b520:	b508      	push	{r3, lr}
	pm_system_resume();
   2b522:	f7e4 fd7d 	bl	10020 <pm_system_resume>
}
   2b526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2b52a:	f7ff b8be 	b.w	2a6aa <sys_clock_idle_exit>

0002b52e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2b52e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2b532:	428b      	cmp	r3, r1
   2b534:	d001      	beq.n	2b53a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2b536:	f7f7 bd21 	b.w	22f7c <z_set_prio>
}
   2b53a:	2000      	movs	r0, #0
   2b53c:	4770      	bx	lr

0002b53e <z_impl_k_mutex_init>:
{
   2b53e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2b540:	2000      	movs	r0, #0
   2b542:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2b546:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2b54a:	4770      	bx	lr

0002b54c <z_queue_node_peek>:
{
   2b54c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2b54e:	4604      	mov	r4, r0
   2b550:	b130      	cbz	r0, 2b560 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b552:	6802      	ldr	r2, [r0, #0]
   2b554:	0793      	lsls	r3, r2, #30
   2b556:	d003      	beq.n	2b560 <z_queue_node_peek+0x14>
		ret = anode->data;
   2b558:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2b55a:	b109      	cbz	r1, 2b560 <z_queue_node_peek+0x14>
			k_free(anode);
   2b55c:	f000 f9bc 	bl	2b8d8 <k_free>
}
   2b560:	4620      	mov	r0, r4
   2b562:	bd10      	pop	{r4, pc}

0002b564 <z_impl_k_queue_init>:
	list->head = NULL;
   2b564:	2300      	movs	r3, #0
	list->tail = NULL;
   2b566:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2b56a:	6083      	str	r3, [r0, #8]
   2b56c:	f100 030c 	add.w	r3, r0, #12
   2b570:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2b574:	f100 0314 	add.w	r3, r0, #20
   2b578:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2b57c:	4770      	bx	lr

0002b57e <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2b57e:	2301      	movs	r3, #1
{
   2b580:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2b582:	9300      	str	r3, [sp, #0]
   2b584:	2300      	movs	r3, #0
{
   2b586:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2b588:	4619      	mov	r1, r3
   2b58a:	f7f6 f89d 	bl	216c8 <queue_insert>
}
   2b58e:	b003      	add	sp, #12
   2b590:	f85d fb04 	ldr.w	pc, [sp], #4

0002b594 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   2b594:	2300      	movs	r3, #0
{
   2b596:	b507      	push	{r0, r1, r2, lr}
   2b598:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2b59a:	9300      	str	r3, [sp, #0]
   2b59c:	4619      	mov	r1, r3
   2b59e:	f7f6 f893 	bl	216c8 <queue_insert>
}
   2b5a2:	b003      	add	sp, #12
   2b5a4:	f85d fb04 	ldr.w	pc, [sp], #4

0002b5a8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2b5a8:	b15a      	cbz	r2, 2b5c2 <z_impl_k_sem_init+0x1a>
   2b5aa:	428a      	cmp	r2, r1
   2b5ac:	d309      	bcc.n	2b5c2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2b5ae:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2b5b2:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2b5b6:	e9c0 0000 	strd	r0, r0, [r0]
   2b5ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2b5be:	2000      	movs	r0, #0
   2b5c0:	4770      	bx	lr
		return -EINVAL;
   2b5c2:	f06f 0015 	mvn.w	r0, #21
}
   2b5c6:	4770      	bx	lr

0002b5c8 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2b5c8:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2b5ca:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2b5cc:	408b      	lsls	r3, r1
   2b5ce:	ea22 0303 	bic.w	r3, r2, r3
   2b5d2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2b5d4:	fa22 f001 	lsr.w	r0, r2, r1
}
   2b5d8:	f000 0001 	and.w	r0, r0, #1
   2b5dc:	4770      	bx	lr

0002b5de <unschedule_locked>:
{
   2b5de:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2b5e0:	2103      	movs	r1, #3
{
   2b5e2:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2b5e4:	300c      	adds	r0, #12
   2b5e6:	f7ff ffef 	bl	2b5c8 <flag_test_and_clear>
   2b5ea:	4604      	mov	r4, r0
   2b5ec:	b118      	cbz	r0, 2b5f6 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2b5ee:	f105 0010 	add.w	r0, r5, #16
   2b5f2:	f7f8 fb01 	bl	23bf8 <z_abort_timeout>
}
   2b5f6:	4620      	mov	r0, r4
   2b5f8:	bd38      	pop	{r3, r4, r5, pc}

0002b5fa <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2b5fa:	b120      	cbz	r0, 2b606 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2b5fc:	2200      	movs	r2, #0
   2b5fe:	3090      	adds	r0, #144	; 0x90
   2b600:	4611      	mov	r1, r2
   2b602:	f7f8 b95b 	b.w	238bc <z_sched_wake>
}
   2b606:	4770      	bx	lr

0002b608 <cancel_async_locked>:
{
   2b608:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2b60a:	68c3      	ldr	r3, [r0, #12]
{
   2b60c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2b60e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2b612:	079b      	lsls	r3, r3, #30
   2b614:	d416      	bmi.n	2b644 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2b616:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2b618:	2102      	movs	r1, #2
   2b61a:	300c      	adds	r0, #12
   2b61c:	f7ff ffd4 	bl	2b5c8 <flag_test_and_clear>
   2b620:	b180      	cbz	r0, 2b644 <cancel_async_locked+0x3c>
	return list->head;
   2b622:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b626:	b16a      	cbz	r2, 2b644 <cancel_async_locked+0x3c>
   2b628:	4294      	cmp	r4, r2
   2b62a:	d11d      	bne.n	2b668 <cancel_async_locked+0x60>
	return node->next;
   2b62c:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b62e:	b99e      	cbnz	r6, 2b658 <cancel_async_locked+0x50>
   2b630:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   2b634:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2b638:	429c      	cmp	r4, r3
   2b63a:	d101      	bne.n	2b640 <cancel_async_locked+0x38>
	list->tail = node;
   2b63c:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   2b640:	2300      	movs	r3, #0
   2b642:	6023      	str	r3, [r4, #0]
	return *flagp;
   2b644:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2b646:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2b64a:	bf1e      	ittt	ne
   2b64c:	f043 0302 	orrne.w	r3, r3, #2
   2b650:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2b652:	f040 0002 	orrne.w	r0, r0, #2
}
   2b656:	bd70      	pop	{r4, r5, r6, pc}
   2b658:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b65a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   2b65e:	4294      	cmp	r4, r2
	list->tail = node;
   2b660:	bf08      	it	eq
   2b662:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   2b666:	e7eb      	b.n	2b640 <cancel_async_locked+0x38>
	return node->next;
   2b668:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b66a:	6812      	ldr	r2, [r2, #0]
   2b66c:	e7db      	b.n	2b626 <cancel_async_locked+0x1e>

0002b66e <k_work_submit_to_queue>:
{
   2b66e:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2b670:	f7f6 fc42 	bl	21ef8 <z_work_submit_to_queue>
	if (ret > 0) {
   2b674:	1e04      	subs	r4, r0, #0
   2b676:	dd09      	ble.n	2b68c <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2b678:	f04f 0320 	mov.w	r3, #32
   2b67c:	f3ef 8011 	mrs	r0, BASEPRI
   2b680:	f383 8812 	msr	BASEPRI_MAX, r3
   2b684:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b688:	f000 f80d 	bl	2b6a6 <z_reschedule_irqlock>
}
   2b68c:	4620      	mov	r0, r4
   2b68e:	bd10      	pop	{r4, pc}

0002b690 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2b690:	f7f6 bbec 	b.w	21e6c <k_work_busy_get>

0002b694 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2b694:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2b698:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2b69c:	4283      	cmp	r3, r0
		return b2 - b1;
   2b69e:	bf14      	ite	ne
   2b6a0:	1ac0      	subne	r0, r0, r3
	return 0;
   2b6a2:	2000      	moveq	r0, #0
}
   2b6a4:	4770      	bx	lr

0002b6a6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2b6a6:	4603      	mov	r3, r0
   2b6a8:	b920      	cbnz	r0, 2b6b4 <z_reschedule_irqlock+0xe>
   2b6aa:	f3ef 8205 	mrs	r2, IPSR
   2b6ae:	b90a      	cbnz	r2, 2b6b4 <z_reschedule_irqlock+0xe>
   2b6b0:	f7e5 b8b6 	b.w	10820 <arch_swap>
	__asm__ volatile(
   2b6b4:	f383 8811 	msr	BASEPRI, r3
   2b6b8:	f3bf 8f6f 	isb	sy
}
   2b6bc:	4770      	bx	lr

0002b6be <z_reschedule_unlocked>:
	__asm__ volatile(
   2b6be:	f04f 0320 	mov.w	r3, #32
   2b6c2:	f3ef 8011 	mrs	r0, BASEPRI
   2b6c6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b6ca:	f3bf 8f6f 	isb	sy
   2b6ce:	f7ff bfea 	b.w	2b6a6 <z_reschedule_irqlock>

0002b6d2 <z_unpend_all>:
{
   2b6d2:	b538      	push	{r3, r4, r5, lr}
   2b6d4:	4605      	mov	r5, r0
	int need_sched = 0;
   2b6d6:	2000      	movs	r0, #0
	return list->head == list;
   2b6d8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b6da:	42a5      	cmp	r5, r4
   2b6dc:	d000      	beq.n	2b6e0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2b6de:	b904      	cbnz	r4, 2b6e2 <z_unpend_all+0x10>
}
   2b6e0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2b6e2:	4620      	mov	r0, r4
   2b6e4:	f7f7 fd64 	bl	231b0 <z_unpend_thread>
		z_ready_thread(thread);
   2b6e8:	4620      	mov	r0, r4
   2b6ea:	f7f7 f877 	bl	227dc <z_ready_thread>
		need_sched = 1;
   2b6ee:	2001      	movs	r0, #1
   2b6f0:	e7f2      	b.n	2b6d8 <z_unpend_all+0x6>

0002b6f2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2b6f2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2b6f4:	f7f8 fc02 	bl	23efc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2b6f8:	bd08      	pop	{r3, pc}

0002b6fa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2b6fa:	f7f8 bbff 	b.w	23efc <sys_clock_tick_get>

0002b6fe <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2b6fe:	b108      	cbz	r0, 2b704 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2b700:	f7e2 ba36 	b.w	db70 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2b704:	4770      	bx	lr

0002b706 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b706:	f1b1 3fff 	cmp.w	r1, #4294967295
   2b70a:	bf08      	it	eq
   2b70c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2b710:	b538      	push	{r3, r4, r5, lr}
   2b712:	460c      	mov	r4, r1
   2b714:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b716:	d014      	beq.n	2b742 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b718:	4308      	orrs	r0, r1
   2b71a:	d103      	bne.n	2b724 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2b71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2b720:	f7f8 bbec 	b.w	23efc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2b724:	f06f 0001 	mvn.w	r0, #1
   2b728:	f04f 33ff 	mov.w	r3, #4294967295
   2b72c:	1b40      	subs	r0, r0, r5
   2b72e:	eb63 0101 	sbc.w	r1, r3, r1
   2b732:	2900      	cmp	r1, #0
   2b734:	da04      	bge.n	2b740 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2b736:	f7f8 fbe1 	bl	23efc <sys_clock_tick_get>
   2b73a:	1940      	adds	r0, r0, r5
   2b73c:	eb41 0104 	adc.w	r1, r1, r4
}
   2b740:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2b742:	f04f 30ff 	mov.w	r0, #4294967295
   2b746:	4601      	mov	r1, r0
   2b748:	e7fa      	b.n	2b740 <sys_clock_timeout_end_calc+0x3a>

0002b74a <k_timer_init>:
	timer->status = 0U;
   2b74a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2b74c:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2b750:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2b754:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2b758:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2b75c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2b75e:	6343      	str	r3, [r0, #52]	; 0x34
}
   2b760:	4770      	bx	lr

0002b762 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2b762:	b510      	push	{r4, lr}
   2b764:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2b766:	f7f8 fa47 	bl	23bf8 <z_abort_timeout>

	if (inactive) {
   2b76a:	b9b0      	cbnz	r0, 2b79a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2b76c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b76e:	b10b      	cbz	r3, 2b774 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2b770:	4620      	mov	r0, r4
   2b772:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2b774:	f104 0018 	add.w	r0, r4, #24
   2b778:	f7f7 fdbc 	bl	232f4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2b77c:	b168      	cbz	r0, 2b79a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2b77e:	f7f7 f82d 	bl	227dc <z_ready_thread>
   2b782:	f04f 0320 	mov.w	r3, #32
   2b786:	f3ef 8011 	mrs	r0, BASEPRI
   2b78a:	f383 8812 	msr	BASEPRI_MAX, r3
   2b78e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2b792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b796:	f7ff bf86 	b.w	2b6a6 <z_reschedule_irqlock>
   2b79a:	bd10      	pop	{r4, pc}

0002b79c <add_event>:
{
   2b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b79e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2b7a0:	e9d0 1300 	ldrd	r1, r3, [r0]
   2b7a4:	4288      	cmp	r0, r1
   2b7a6:	4604      	mov	r4, r0
   2b7a8:	d105      	bne.n	2b7b6 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2b7aa:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2b7ac:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2b7b0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2b7b2:	6065      	str	r5, [r4, #4]
   2b7b4:	e01d      	b.n	2b7f2 <add_event+0x56>
	if ((pending == NULL) ||
   2b7b6:	2b00      	cmp	r3, #0
   2b7b8:	d0f7      	beq.n	2b7aa <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2b7ba:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b7bc:	b100      	cbz	r0, 2b7c0 <add_event+0x24>
   2b7be:	3860      	subs	r0, #96	; 0x60
   2b7c0:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2b7c4:	4639      	mov	r1, r7
   2b7c6:	f7ff ff65 	bl	2b694 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2b7ca:	2800      	cmp	r0, #0
   2b7cc:	dced      	bgt.n	2b7aa <add_event+0xe>
	return list->head == list;
   2b7ce:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b7d0:	42b4      	cmp	r4, r6
   2b7d2:	d0ea      	beq.n	2b7aa <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2b7d4:	2e00      	cmp	r6, #0
   2b7d6:	d0e8      	beq.n	2b7aa <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2b7d8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b7da:	b101      	cbz	r1, 2b7de <add_event+0x42>
   2b7dc:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2b7de:	4638      	mov	r0, r7
   2b7e0:	f7ff ff58 	bl	2b694 <z_sched_prio_cmp>
   2b7e4:	2800      	cmp	r0, #0
   2b7e6:	dd05      	ble.n	2b7f4 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2b7e8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2b7ea:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2b7ee:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2b7f0:	6075      	str	r5, [r6, #4]
}
   2b7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2b7f4:	6863      	ldr	r3, [r4, #4]
   2b7f6:	429e      	cmp	r6, r3
   2b7f8:	d0d7      	beq.n	2b7aa <add_event+0xe>
   2b7fa:	6836      	ldr	r6, [r6, #0]
   2b7fc:	e7ea      	b.n	2b7d4 <add_event+0x38>

0002b7fe <signal_poll_event>:
{
   2b7fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2b802:	6884      	ldr	r4, [r0, #8]
{
   2b804:	4605      	mov	r5, r0
   2b806:	460e      	mov	r6, r1
	if (poller != NULL) {
   2b808:	b144      	cbz	r4, 2b81c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2b80a:	7863      	ldrb	r3, [r4, #1]
   2b80c:	2b01      	cmp	r3, #1
   2b80e:	d12e      	bne.n	2b86e <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2b810:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2b814:	f013 0302 	ands.w	r3, r3, #2
   2b818:	d10a      	bne.n	2b830 <signal_poll_event+0x32>
		poller->is_polling = false;
   2b81a:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2b81c:	2000      	movs	r0, #0
	event->state |= state;
   2b81e:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2b820:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2b822:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2b826:	4316      	orrs	r6, r2
   2b828:	f366 3394 	bfi	r3, r6, #14, #7
   2b82c:	60eb      	str	r3, [r5, #12]
	return retcode;
   2b82e:	e03e      	b.n	2b8ae <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2b830:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2b834:	f1b3 3fff 	cmp.w	r3, #4294967295
   2b838:	bf08      	it	eq
   2b83a:	f112 0f02 	cmneq.w	r2, #2
   2b83e:	d032      	beq.n	2b8a6 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b840:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2b844:	4640      	mov	r0, r8
   2b846:	f7f7 fcb3 	bl	231b0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2b84a:	2e08      	cmp	r6, #8
   2b84c:	bf0c      	ite	eq
   2b84e:	f06f 0303 	mvneq.w	r3, #3
   2b852:	2300      	movne	r3, #0
   2b854:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2b856:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2b85a:	06db      	lsls	r3, r3, #27
   2b85c:	d109      	bne.n	2b872 <signal_poll_event+0x74>
   2b85e:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2b862:	b937      	cbnz	r7, 2b872 <signal_poll_event+0x74>
	z_ready_thread(thread);
   2b864:	4640      	mov	r0, r8
   2b866:	f7f6 ffb9 	bl	227dc <z_ready_thread>
		poller->is_polling = false;
   2b86a:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2b86c:	e7d6      	b.n	2b81c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2b86e:	2b02      	cmp	r3, #2
   2b870:	d001      	beq.n	2b876 <signal_poll_event+0x78>
		poller->is_polling = false;
   2b872:	2300      	movs	r3, #0
   2b874:	e7d1      	b.n	2b81a <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2b876:	7823      	ldrb	r3, [r4, #0]
   2b878:	2b00      	cmp	r3, #0
   2b87a:	d0cf      	beq.n	2b81c <signal_poll_event+0x1e>
   2b87c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2b880:	2f00      	cmp	r7, #0
   2b882:	d0f2      	beq.n	2b86a <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2b884:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2b888:	f1a4 0914 	sub.w	r9, r4, #20
   2b88c:	f104 0014 	add.w	r0, r4, #20
   2b890:	f7f8 f9b2 	bl	23bf8 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2b894:	4649      	mov	r1, r9
   2b896:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2b898:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2b89c:	f7f6 fb2c 	bl	21ef8 <z_work_submit_to_queue>
		poller->is_polling = false;
   2b8a0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2b8a4:	e7ba      	b.n	2b81c <signal_poll_event+0x1e>
		poller->is_polling = false;
   2b8a6:	2300      	movs	r3, #0
		return -EAGAIN;
   2b8a8:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2b8ac:	7023      	strb	r3, [r4, #0]
}
   2b8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b8b2 <z_handle_obj_poll_events>:
{
   2b8b2:	4603      	mov	r3, r0
	return list->head == list;
   2b8b4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2b8b6:	4283      	cmp	r3, r0
   2b8b8:	d008      	beq.n	2b8cc <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2b8ba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b8be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b8c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b8c2:	2300      	movs	r3, #0
	node->prev = NULL;
   2b8c4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2b8c8:	f7ff bf99 	b.w	2b7fe <signal_poll_event>
}
   2b8cc:	4770      	bx	lr

0002b8ce <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2b8ce:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2b8d0:	e9c0 0000 	strd	r0, r0, [r0]
   2b8d4:	6083      	str	r3, [r0, #8]
}
   2b8d6:	4770      	bx	lr

0002b8d8 <k_free>:
	if (ptr != NULL) {
   2b8d8:	b120      	cbz	r0, 2b8e4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2b8da:	1f01      	subs	r1, r0, #4
   2b8dc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2b8e0:	f7f5 bada 	b.w	20e98 <k_heap_free>
}
   2b8e4:	4770      	bx	lr

0002b8e6 <k_malloc>:
{
   2b8e6:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2b8e8:	2004      	movs	r0, #4
   2b8ea:	f7f8 bfcd 	b.w	24888 <k_aligned_alloc>

0002b8ee <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2b8ee:	4770      	bx	lr

0002b8f0 <memchr>:
   2b8f0:	b2c9      	uxtb	r1, r1
   2b8f2:	4603      	mov	r3, r0
   2b8f4:	4402      	add	r2, r0
   2b8f6:	b510      	push	{r4, lr}
   2b8f8:	4293      	cmp	r3, r2
   2b8fa:	4618      	mov	r0, r3
   2b8fc:	d101      	bne.n	2b902 <memchr+0x12>
   2b8fe:	2000      	movs	r0, #0
   2b900:	e003      	b.n	2b90a <memchr+0x1a>
   2b902:	7804      	ldrb	r4, [r0, #0]
   2b904:	3301      	adds	r3, #1
   2b906:	428c      	cmp	r4, r1
   2b908:	d1f6      	bne.n	2b8f8 <memchr+0x8>
   2b90a:	bd10      	pop	{r4, pc}

0002b90c <memcmp>:
   2b90c:	3901      	subs	r1, #1
   2b90e:	4402      	add	r2, r0
   2b910:	b510      	push	{r4, lr}
   2b912:	4290      	cmp	r0, r2
   2b914:	d101      	bne.n	2b91a <memcmp+0xe>
   2b916:	2000      	movs	r0, #0
   2b918:	e005      	b.n	2b926 <memcmp+0x1a>
   2b91a:	7803      	ldrb	r3, [r0, #0]
   2b91c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b920:	42a3      	cmp	r3, r4
   2b922:	d001      	beq.n	2b928 <memcmp+0x1c>
   2b924:	1b18      	subs	r0, r3, r4
   2b926:	bd10      	pop	{r4, pc}
   2b928:	3001      	adds	r0, #1
   2b92a:	e7f2      	b.n	2b912 <memcmp+0x6>

0002b92c <memcpy>:
   2b92c:	440a      	add	r2, r1
   2b92e:	1e43      	subs	r3, r0, #1
   2b930:	4291      	cmp	r1, r2
   2b932:	d100      	bne.n	2b936 <memcpy+0xa>
   2b934:	4770      	bx	lr
   2b936:	b510      	push	{r4, lr}
   2b938:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b93c:	4291      	cmp	r1, r2
   2b93e:	f803 4f01 	strb.w	r4, [r3, #1]!
   2b942:	d1f9      	bne.n	2b938 <memcpy+0xc>
   2b944:	bd10      	pop	{r4, pc}

0002b946 <__memcpy_chk>:
   2b946:	429a      	cmp	r2, r3
   2b948:	b508      	push	{r3, lr}
   2b94a:	d901      	bls.n	2b950 <__memcpy_chk+0xa>
   2b94c:	f7e5 fef6 	bl	1173c <__chk_fail>
   2b950:	4281      	cmp	r1, r0
   2b952:	d804      	bhi.n	2b95e <__memcpy_chk+0x18>
   2b954:	188b      	adds	r3, r1, r2
   2b956:	4298      	cmp	r0, r3
   2b958:	d3f8      	bcc.n	2b94c <__memcpy_chk+0x6>
   2b95a:	4281      	cmp	r1, r0
   2b95c:	d102      	bne.n	2b964 <__memcpy_chk+0x1e>
   2b95e:	1883      	adds	r3, r0, r2
   2b960:	4299      	cmp	r1, r3
   2b962:	d3f3      	bcc.n	2b94c <__memcpy_chk+0x6>
   2b964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2b968:	f7ff bfe0 	b.w	2b92c <memcpy>

0002b96c <memmove>:
   2b96c:	4288      	cmp	r0, r1
   2b96e:	b510      	push	{r4, lr}
   2b970:	eb01 0402 	add.w	r4, r1, r2
   2b974:	d902      	bls.n	2b97c <memmove+0x10>
   2b976:	4284      	cmp	r4, r0
   2b978:	4623      	mov	r3, r4
   2b97a:	d807      	bhi.n	2b98c <memmove+0x20>
   2b97c:	1e43      	subs	r3, r0, #1
   2b97e:	42a1      	cmp	r1, r4
   2b980:	d008      	beq.n	2b994 <memmove+0x28>
   2b982:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b986:	f803 2f01 	strb.w	r2, [r3, #1]!
   2b98a:	e7f8      	b.n	2b97e <memmove+0x12>
   2b98c:	4402      	add	r2, r0
   2b98e:	4601      	mov	r1, r0
   2b990:	428a      	cmp	r2, r1
   2b992:	d100      	bne.n	2b996 <memmove+0x2a>
   2b994:	bd10      	pop	{r4, pc}
   2b996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2b99a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2b99e:	e7f7      	b.n	2b990 <memmove+0x24>

0002b9a0 <memset>:
   2b9a0:	4402      	add	r2, r0
   2b9a2:	4603      	mov	r3, r0
   2b9a4:	4293      	cmp	r3, r2
   2b9a6:	d100      	bne.n	2b9aa <memset+0xa>
   2b9a8:	4770      	bx	lr
   2b9aa:	f803 1b01 	strb.w	r1, [r3], #1
   2b9ae:	e7f9      	b.n	2b9a4 <memset+0x4>

0002b9b0 <_calloc_r>:
   2b9b0:	b538      	push	{r3, r4, r5, lr}
   2b9b2:	fb02 f501 	mul.w	r5, r2, r1
   2b9b6:	4629      	mov	r1, r5
   2b9b8:	f7f9 f812 	bl	249e0 <_malloc_r>
   2b9bc:	4604      	mov	r4, r0
   2b9be:	b118      	cbz	r0, 2b9c8 <_calloc_r+0x18>
   2b9c0:	462a      	mov	r2, r5
   2b9c2:	2100      	movs	r1, #0
   2b9c4:	f7ff ffec 	bl	2b9a0 <memset>
   2b9c8:	4620      	mov	r0, r4
   2b9ca:	bd38      	pop	{r3, r4, r5, pc}

0002b9cc <__cvt>:
   2b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b9d0:	b089      	sub	sp, #36	; 0x24
   2b9d2:	2b00      	cmp	r3, #0
   2b9d4:	461d      	mov	r5, r3
   2b9d6:	4614      	mov	r4, r2
   2b9d8:	bfba      	itte	lt
   2b9da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2b9de:	4614      	movlt	r4, r2
   2b9e0:	2300      	movge	r3, #0
   2b9e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2b9e4:	bfbc      	itt	lt
   2b9e6:	461d      	movlt	r5, r3
   2b9e8:	232d      	movlt	r3, #45	; 0x2d
   2b9ea:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   2b9ee:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   2b9f2:	f028 0a20 	bic.w	sl, r8, #32
   2b9f6:	7013      	strb	r3, [r2, #0]
   2b9f8:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2b9fc:	d005      	beq.n	2ba0a <__cvt+0x3e>
   2b9fe:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   2ba02:	d100      	bne.n	2ba06 <__cvt+0x3a>
   2ba04:	3601      	adds	r6, #1
   2ba06:	2302      	movs	r3, #2
   2ba08:	e000      	b.n	2ba0c <__cvt+0x40>
   2ba0a:	2303      	movs	r3, #3
   2ba0c:	aa07      	add	r2, sp, #28
   2ba0e:	9204      	str	r2, [sp, #16]
   2ba10:	aa06      	add	r2, sp, #24
   2ba12:	e9cd 3600 	strd	r3, r6, [sp]
   2ba16:	e9cd 9202 	strd	r9, r2, [sp, #8]
   2ba1a:	462b      	mov	r3, r5
   2ba1c:	4622      	mov	r2, r4
   2ba1e:	f7dd ffa7 	bl	9970 <_dtoa_r>
   2ba22:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   2ba26:	4607      	mov	r7, r0
   2ba28:	d119      	bne.n	2ba5e <__cvt+0x92>
   2ba2a:	f01b 0f01 	tst.w	fp, #1
   2ba2e:	d00e      	beq.n	2ba4e <__cvt+0x82>
   2ba30:	eb07 0806 	add.w	r8, r7, r6
   2ba34:	2200      	movs	r2, #0
   2ba36:	2300      	movs	r3, #0
   2ba38:	4620      	mov	r0, r4
   2ba3a:	4629      	mov	r1, r5
   2ba3c:	f7dc ffb0 	bl	89a0 <__aeabi_dcmpeq>
   2ba40:	b108      	cbz	r0, 2ba46 <__cvt+0x7a>
   2ba42:	f8cd 801c 	str.w	r8, [sp, #28]
   2ba46:	2230      	movs	r2, #48	; 0x30
   2ba48:	9b07      	ldr	r3, [sp, #28]
   2ba4a:	4543      	cmp	r3, r8
   2ba4c:	d321      	bcc.n	2ba92 <__cvt+0xc6>
   2ba4e:	9b07      	ldr	r3, [sp, #28]
   2ba50:	4638      	mov	r0, r7
   2ba52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2ba54:	1bdb      	subs	r3, r3, r7
   2ba56:	6013      	str	r3, [r2, #0]
   2ba58:	b009      	add	sp, #36	; 0x24
   2ba5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2ba62:	d0e2      	beq.n	2ba2a <__cvt+0x5e>
   2ba64:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2ba68:	eb00 0806 	add.w	r8, r0, r6
   2ba6c:	d1e2      	bne.n	2ba34 <__cvt+0x68>
   2ba6e:	7803      	ldrb	r3, [r0, #0]
   2ba70:	2b30      	cmp	r3, #48	; 0x30
   2ba72:	d10a      	bne.n	2ba8a <__cvt+0xbe>
   2ba74:	2200      	movs	r2, #0
   2ba76:	2300      	movs	r3, #0
   2ba78:	4620      	mov	r0, r4
   2ba7a:	4629      	mov	r1, r5
   2ba7c:	f7dc ff90 	bl	89a0 <__aeabi_dcmpeq>
   2ba80:	b918      	cbnz	r0, 2ba8a <__cvt+0xbe>
   2ba82:	f1c6 0601 	rsb	r6, r6, #1
   2ba86:	f8c9 6000 	str.w	r6, [r9]
   2ba8a:	f8d9 3000 	ldr.w	r3, [r9]
   2ba8e:	4498      	add	r8, r3
   2ba90:	e7d0      	b.n	2ba34 <__cvt+0x68>
   2ba92:	1c59      	adds	r1, r3, #1
   2ba94:	9107      	str	r1, [sp, #28]
   2ba96:	701a      	strb	r2, [r3, #0]
   2ba98:	e7d6      	b.n	2ba48 <__cvt+0x7c>

0002ba9a <__exponent>:
   2ba9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ba9c:	2900      	cmp	r1, #0
   2ba9e:	7002      	strb	r2, [r0, #0]
   2baa0:	bfba      	itte	lt
   2baa2:	4249      	neglt	r1, r1
   2baa4:	232d      	movlt	r3, #45	; 0x2d
   2baa6:	232b      	movge	r3, #43	; 0x2b
   2baa8:	2909      	cmp	r1, #9
   2baaa:	7043      	strb	r3, [r0, #1]
   2baac:	dd28      	ble.n	2bb00 <__exponent+0x66>
   2baae:	f10d 0307 	add.w	r3, sp, #7
   2bab2:	270a      	movs	r7, #10
   2bab4:	461d      	mov	r5, r3
   2bab6:	461a      	mov	r2, r3
   2bab8:	3b01      	subs	r3, #1
   2baba:	fbb1 f6f7 	udiv	r6, r1, r7
   2babe:	fb07 1416 	mls	r4, r7, r6, r1
   2bac2:	3430      	adds	r4, #48	; 0x30
   2bac4:	f802 4c01 	strb.w	r4, [r2, #-1]
   2bac8:	460c      	mov	r4, r1
   2baca:	4631      	mov	r1, r6
   2bacc:	2c63      	cmp	r4, #99	; 0x63
   2bace:	dcf2      	bgt.n	2bab6 <__exponent+0x1c>
   2bad0:	3130      	adds	r1, #48	; 0x30
   2bad2:	1e94      	subs	r4, r2, #2
   2bad4:	f803 1c01 	strb.w	r1, [r3, #-1]
   2bad8:	1c41      	adds	r1, r0, #1
   2bada:	4623      	mov	r3, r4
   2badc:	42ab      	cmp	r3, r5
   2bade:	d30a      	bcc.n	2baf6 <__exponent+0x5c>
   2bae0:	f10d 0309 	add.w	r3, sp, #9
   2bae4:	1a9b      	subs	r3, r3, r2
   2bae6:	42ac      	cmp	r4, r5
   2bae8:	bf88      	it	hi
   2baea:	2300      	movhi	r3, #0
   2baec:	3302      	adds	r3, #2
   2baee:	4403      	add	r3, r0
   2baf0:	1a18      	subs	r0, r3, r0
   2baf2:	b003      	add	sp, #12
   2baf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2baf6:	f813 6b01 	ldrb.w	r6, [r3], #1
   2bafa:	f801 6f01 	strb.w	r6, [r1, #1]!
   2bafe:	e7ed      	b.n	2badc <__exponent+0x42>
   2bb00:	2330      	movs	r3, #48	; 0x30
   2bb02:	3130      	adds	r1, #48	; 0x30
   2bb04:	7083      	strb	r3, [r0, #2]
   2bb06:	1d03      	adds	r3, r0, #4
   2bb08:	70c1      	strb	r1, [r0, #3]
   2bb0a:	e7f1      	b.n	2baf0 <__exponent+0x56>

0002bb0c <_printf_common>:
   2bb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bb10:	4616      	mov	r6, r2
   2bb12:	4698      	mov	r8, r3
   2bb14:	688a      	ldr	r2, [r1, #8]
   2bb16:	4607      	mov	r7, r0
   2bb18:	690b      	ldr	r3, [r1, #16]
   2bb1a:	460c      	mov	r4, r1
   2bb1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2bb20:	4293      	cmp	r3, r2
   2bb22:	bfb8      	it	lt
   2bb24:	4613      	movlt	r3, r2
   2bb26:	6033      	str	r3, [r6, #0]
   2bb28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2bb2c:	b10a      	cbz	r2, 2bb32 <_printf_common+0x26>
   2bb2e:	3301      	adds	r3, #1
   2bb30:	6033      	str	r3, [r6, #0]
   2bb32:	6823      	ldr	r3, [r4, #0]
   2bb34:	0699      	lsls	r1, r3, #26
   2bb36:	bf42      	ittt	mi
   2bb38:	6833      	ldrmi	r3, [r6, #0]
   2bb3a:	3302      	addmi	r3, #2
   2bb3c:	6033      	strmi	r3, [r6, #0]
   2bb3e:	6825      	ldr	r5, [r4, #0]
   2bb40:	f015 0506 	ands.w	r5, r5, #6
   2bb44:	d106      	bne.n	2bb54 <_printf_common+0x48>
   2bb46:	f104 0a19 	add.w	sl, r4, #25
   2bb4a:	68e3      	ldr	r3, [r4, #12]
   2bb4c:	6832      	ldr	r2, [r6, #0]
   2bb4e:	1a9b      	subs	r3, r3, r2
   2bb50:	42ab      	cmp	r3, r5
   2bb52:	dc2b      	bgt.n	2bbac <_printf_common+0xa0>
   2bb54:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2bb58:	6822      	ldr	r2, [r4, #0]
   2bb5a:	3b00      	subs	r3, #0
   2bb5c:	bf18      	it	ne
   2bb5e:	2301      	movne	r3, #1
   2bb60:	0692      	lsls	r2, r2, #26
   2bb62:	d430      	bmi.n	2bbc6 <_printf_common+0xba>
   2bb64:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2bb68:	4641      	mov	r1, r8
   2bb6a:	4638      	mov	r0, r7
   2bb6c:	47c8      	blx	r9
   2bb6e:	3001      	adds	r0, #1
   2bb70:	d023      	beq.n	2bbba <_printf_common+0xae>
   2bb72:	6823      	ldr	r3, [r4, #0]
   2bb74:	341a      	adds	r4, #26
   2bb76:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2bb7a:	f003 0306 	and.w	r3, r3, #6
   2bb7e:	2b04      	cmp	r3, #4
   2bb80:	bf0a      	itet	eq
   2bb82:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   2bb86:	2500      	movne	r5, #0
   2bb88:	6833      	ldreq	r3, [r6, #0]
   2bb8a:	f04f 0600 	mov.w	r6, #0
   2bb8e:	bf08      	it	eq
   2bb90:	1aed      	subeq	r5, r5, r3
   2bb92:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2bb96:	bf08      	it	eq
   2bb98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2bb9c:	4293      	cmp	r3, r2
   2bb9e:	bfc4      	itt	gt
   2bba0:	1a9b      	subgt	r3, r3, r2
   2bba2:	18ed      	addgt	r5, r5, r3
   2bba4:	42b5      	cmp	r5, r6
   2bba6:	d11a      	bne.n	2bbde <_printf_common+0xd2>
   2bba8:	2000      	movs	r0, #0
   2bbaa:	e008      	b.n	2bbbe <_printf_common+0xb2>
   2bbac:	2301      	movs	r3, #1
   2bbae:	4652      	mov	r2, sl
   2bbb0:	4641      	mov	r1, r8
   2bbb2:	4638      	mov	r0, r7
   2bbb4:	47c8      	blx	r9
   2bbb6:	3001      	adds	r0, #1
   2bbb8:	d103      	bne.n	2bbc2 <_printf_common+0xb6>
   2bbba:	f04f 30ff 	mov.w	r0, #4294967295
   2bbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bbc2:	3501      	adds	r5, #1
   2bbc4:	e7c1      	b.n	2bb4a <_printf_common+0x3e>
   2bbc6:	18e1      	adds	r1, r4, r3
   2bbc8:	1c5a      	adds	r2, r3, #1
   2bbca:	2030      	movs	r0, #48	; 0x30
   2bbcc:	3302      	adds	r3, #2
   2bbce:	4422      	add	r2, r4
   2bbd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2bbd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2bbd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2bbdc:	e7c2      	b.n	2bb64 <_printf_common+0x58>
   2bbde:	2301      	movs	r3, #1
   2bbe0:	4622      	mov	r2, r4
   2bbe2:	4641      	mov	r1, r8
   2bbe4:	4638      	mov	r0, r7
   2bbe6:	47c8      	blx	r9
   2bbe8:	3001      	adds	r0, #1
   2bbea:	d0e6      	beq.n	2bbba <_printf_common+0xae>
   2bbec:	3601      	adds	r6, #1
   2bbee:	e7d9      	b.n	2bba4 <_printf_common+0x98>

0002bbf0 <strcpy>:
   2bbf0:	4603      	mov	r3, r0
   2bbf2:	f811 2b01 	ldrb.w	r2, [r1], #1
   2bbf6:	f803 2b01 	strb.w	r2, [r3], #1
   2bbfa:	2a00      	cmp	r2, #0
   2bbfc:	d1f9      	bne.n	2bbf2 <strcpy+0x2>
   2bbfe:	4770      	bx	lr

0002bc00 <strncmp>:
   2bc00:	b510      	push	{r4, lr}
   2bc02:	b16a      	cbz	r2, 2bc20 <strncmp+0x20>
   2bc04:	3901      	subs	r1, #1
   2bc06:	1884      	adds	r4, r0, r2
   2bc08:	f810 2b01 	ldrb.w	r2, [r0], #1
   2bc0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2bc10:	429a      	cmp	r2, r3
   2bc12:	d103      	bne.n	2bc1c <strncmp+0x1c>
   2bc14:	42a0      	cmp	r0, r4
   2bc16:	d001      	beq.n	2bc1c <strncmp+0x1c>
   2bc18:	2a00      	cmp	r2, #0
   2bc1a:	d1f5      	bne.n	2bc08 <strncmp+0x8>
   2bc1c:	1ad0      	subs	r0, r2, r3
   2bc1e:	bd10      	pop	{r4, pc}
   2bc20:	4610      	mov	r0, r2
   2bc22:	e7fc      	b.n	2bc1e <strncmp+0x1e>

0002bc24 <strncpy>:
   2bc24:	3901      	subs	r1, #1
   2bc26:	4603      	mov	r3, r0
   2bc28:	b510      	push	{r4, lr}
   2bc2a:	b132      	cbz	r2, 2bc3a <strncpy+0x16>
   2bc2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2bc30:	3a01      	subs	r2, #1
   2bc32:	f803 4b01 	strb.w	r4, [r3], #1
   2bc36:	2c00      	cmp	r4, #0
   2bc38:	d1f7      	bne.n	2bc2a <strncpy+0x6>
   2bc3a:	441a      	add	r2, r3
   2bc3c:	2100      	movs	r1, #0
   2bc3e:	4293      	cmp	r3, r2
   2bc40:	d100      	bne.n	2bc44 <strncpy+0x20>
   2bc42:	bd10      	pop	{r4, pc}
   2bc44:	f803 1b01 	strb.w	r1, [r3], #1
   2bc48:	e7f9      	b.n	2bc3e <strncpy+0x1a>

0002bc4a <strnlen>:
   2bc4a:	4602      	mov	r2, r0
   2bc4c:	4401      	add	r1, r0
   2bc4e:	b510      	push	{r4, lr}
   2bc50:	428a      	cmp	r2, r1
   2bc52:	4613      	mov	r3, r2
   2bc54:	d003      	beq.n	2bc5e <strnlen+0x14>
   2bc56:	781c      	ldrb	r4, [r3, #0]
   2bc58:	3201      	adds	r2, #1
   2bc5a:	2c00      	cmp	r4, #0
   2bc5c:	d1f8      	bne.n	2bc50 <strnlen+0x6>
   2bc5e:	1a18      	subs	r0, r3, r0
   2bc60:	bd10      	pop	{r4, pc}

0002bc62 <quorem>:
   2bc62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc66:	6903      	ldr	r3, [r0, #16]
   2bc68:	4607      	mov	r7, r0
   2bc6a:	690c      	ldr	r4, [r1, #16]
   2bc6c:	42a3      	cmp	r3, r4
   2bc6e:	f2c0 8083 	blt.w	2bd78 <quorem+0x116>
   2bc72:	3c01      	subs	r4, #1
   2bc74:	f100 0514 	add.w	r5, r0, #20
   2bc78:	f101 0814 	add.w	r8, r1, #20
   2bc7c:	00a3      	lsls	r3, r4, #2
   2bc7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2bc82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2bc86:	9300      	str	r3, [sp, #0]
   2bc88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2bc8c:	9301      	str	r3, [sp, #4]
   2bc8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2bc92:	3301      	adds	r3, #1
   2bc94:	429a      	cmp	r2, r3
   2bc96:	fbb2 f6f3 	udiv	r6, r2, r3
   2bc9a:	d331      	bcc.n	2bd00 <quorem+0x9e>
   2bc9c:	f04f 0a00 	mov.w	sl, #0
   2bca0:	46c4      	mov	ip, r8
   2bca2:	46ae      	mov	lr, r5
   2bca4:	46d3      	mov	fp, sl
   2bca6:	f85c 3b04 	ldr.w	r3, [ip], #4
   2bcaa:	b298      	uxth	r0, r3
   2bcac:	45e1      	cmp	r9, ip
   2bcae:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2bcb2:	fb06 a000 	mla	r0, r6, r0, sl
   2bcb6:	ea4f 4210 	mov.w	r2, r0, lsr #16
   2bcba:	b280      	uxth	r0, r0
   2bcbc:	fb06 2303 	mla	r3, r6, r3, r2
   2bcc0:	f8de 2000 	ldr.w	r2, [lr]
   2bcc4:	b292      	uxth	r2, r2
   2bcc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2bcca:	eba2 0200 	sub.w	r2, r2, r0
   2bcce:	b29b      	uxth	r3, r3
   2bcd0:	f8de 0000 	ldr.w	r0, [lr]
   2bcd4:	445a      	add	r2, fp
   2bcd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   2bcda:	b292      	uxth	r2, r2
   2bcdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   2bce0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2bce4:	ea4f 4b23 	mov.w	fp, r3, asr #16
   2bce8:	f84e 2b04 	str.w	r2, [lr], #4
   2bcec:	d2db      	bcs.n	2bca6 <quorem+0x44>
   2bcee:	9b00      	ldr	r3, [sp, #0]
   2bcf0:	58eb      	ldr	r3, [r5, r3]
   2bcf2:	b92b      	cbnz	r3, 2bd00 <quorem+0x9e>
   2bcf4:	9b01      	ldr	r3, [sp, #4]
   2bcf6:	3b04      	subs	r3, #4
   2bcf8:	429d      	cmp	r5, r3
   2bcfa:	461a      	mov	r2, r3
   2bcfc:	d330      	bcc.n	2bd60 <quorem+0xfe>
   2bcfe:	613c      	str	r4, [r7, #16]
   2bd00:	4638      	mov	r0, r7
   2bd02:	f000 f8bf 	bl	2be84 <__mcmp>
   2bd06:	2800      	cmp	r0, #0
   2bd08:	db26      	blt.n	2bd58 <quorem+0xf6>
   2bd0a:	4629      	mov	r1, r5
   2bd0c:	2000      	movs	r0, #0
   2bd0e:	f858 2b04 	ldr.w	r2, [r8], #4
   2bd12:	f8d1 c000 	ldr.w	ip, [r1]
   2bd16:	fa1f fe82 	uxth.w	lr, r2
   2bd1a:	45c1      	cmp	r9, r8
   2bd1c:	fa1f f38c 	uxth.w	r3, ip
   2bd20:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2bd24:	eba3 030e 	sub.w	r3, r3, lr
   2bd28:	4403      	add	r3, r0
   2bd2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   2bd2e:	b29b      	uxth	r3, r3
   2bd30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   2bd34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2bd38:	ea4f 4022 	mov.w	r0, r2, asr #16
   2bd3c:	f841 3b04 	str.w	r3, [r1], #4
   2bd40:	d2e5      	bcs.n	2bd0e <quorem+0xac>
   2bd42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2bd46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2bd4a:	b922      	cbnz	r2, 2bd56 <quorem+0xf4>
   2bd4c:	3b04      	subs	r3, #4
   2bd4e:	429d      	cmp	r5, r3
   2bd50:	461a      	mov	r2, r3
   2bd52:	d30b      	bcc.n	2bd6c <quorem+0x10a>
   2bd54:	613c      	str	r4, [r7, #16]
   2bd56:	3601      	adds	r6, #1
   2bd58:	4630      	mov	r0, r6
   2bd5a:	b003      	add	sp, #12
   2bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd60:	6812      	ldr	r2, [r2, #0]
   2bd62:	3b04      	subs	r3, #4
   2bd64:	2a00      	cmp	r2, #0
   2bd66:	d1ca      	bne.n	2bcfe <quorem+0x9c>
   2bd68:	3c01      	subs	r4, #1
   2bd6a:	e7c5      	b.n	2bcf8 <quorem+0x96>
   2bd6c:	6812      	ldr	r2, [r2, #0]
   2bd6e:	3b04      	subs	r3, #4
   2bd70:	2a00      	cmp	r2, #0
   2bd72:	d1ef      	bne.n	2bd54 <quorem+0xf2>
   2bd74:	3c01      	subs	r4, #1
   2bd76:	e7ea      	b.n	2bd4e <quorem+0xec>
   2bd78:	2000      	movs	r0, #0
   2bd7a:	e7ee      	b.n	2bd5a <quorem+0xf8>

0002bd7c <__sfmoreglue>:
   2bd7c:	b570      	push	{r4, r5, r6, lr}
   2bd7e:	2368      	movs	r3, #104	; 0x68
   2bd80:	1e4d      	subs	r5, r1, #1
   2bd82:	460e      	mov	r6, r1
   2bd84:	435d      	muls	r5, r3
   2bd86:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2bd8a:	f7f8 fe29 	bl	249e0 <_malloc_r>
   2bd8e:	4604      	mov	r4, r0
   2bd90:	b140      	cbz	r0, 2bda4 <__sfmoreglue+0x28>
   2bd92:	2100      	movs	r1, #0
   2bd94:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2bd98:	e9c0 1600 	strd	r1, r6, [r0]
   2bd9c:	300c      	adds	r0, #12
   2bd9e:	60a0      	str	r0, [r4, #8]
   2bda0:	f7ff fdfe 	bl	2b9a0 <memset>
   2bda4:	4620      	mov	r0, r4
   2bda6:	bd70      	pop	{r4, r5, r6, pc}

0002bda8 <_fwalk_reent>:
   2bda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bdac:	4606      	mov	r6, r0
   2bdae:	4688      	mov	r8, r1
   2bdb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2bdb4:	2700      	movs	r7, #0
   2bdb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2bdba:	f1b9 0901 	subs.w	r9, r9, #1
   2bdbe:	d505      	bpl.n	2bdcc <_fwalk_reent+0x24>
   2bdc0:	6824      	ldr	r4, [r4, #0]
   2bdc2:	2c00      	cmp	r4, #0
   2bdc4:	d1f7      	bne.n	2bdb6 <_fwalk_reent+0xe>
   2bdc6:	4638      	mov	r0, r7
   2bdc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2bdcc:	89ab      	ldrh	r3, [r5, #12]
   2bdce:	2b01      	cmp	r3, #1
   2bdd0:	d907      	bls.n	2bde2 <_fwalk_reent+0x3a>
   2bdd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2bdd6:	3301      	adds	r3, #1
   2bdd8:	d003      	beq.n	2bde2 <_fwalk_reent+0x3a>
   2bdda:	4629      	mov	r1, r5
   2bddc:	4630      	mov	r0, r6
   2bdde:	47c0      	blx	r8
   2bde0:	4307      	orrs	r7, r0
   2bde2:	3568      	adds	r5, #104	; 0x68
   2bde4:	e7e9      	b.n	2bdba <_fwalk_reent+0x12>

0002bde6 <__hi0bits>:
   2bde6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2bdea:	4603      	mov	r3, r0
   2bdec:	bf36      	itet	cc
   2bdee:	0403      	lslcc	r3, r0, #16
   2bdf0:	2000      	movcs	r0, #0
   2bdf2:	2010      	movcc	r0, #16
   2bdf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2bdf8:	bf3c      	itt	cc
   2bdfa:	021b      	lslcc	r3, r3, #8
   2bdfc:	3008      	addcc	r0, #8
   2bdfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2be02:	bf3c      	itt	cc
   2be04:	011b      	lslcc	r3, r3, #4
   2be06:	3004      	addcc	r0, #4
   2be08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2be0c:	d303      	bcc.n	2be16 <__hi0bits+0x30>
   2be0e:	2b00      	cmp	r3, #0
   2be10:	db0a      	blt.n	2be28 <__hi0bits+0x42>
   2be12:	3001      	adds	r0, #1
   2be14:	4770      	bx	lr
   2be16:	009b      	lsls	r3, r3, #2
   2be18:	d501      	bpl.n	2be1e <__hi0bits+0x38>
   2be1a:	3002      	adds	r0, #2
   2be1c:	4770      	bx	lr
   2be1e:	005b      	lsls	r3, r3, #1
   2be20:	d501      	bpl.n	2be26 <__hi0bits+0x40>
   2be22:	3003      	adds	r0, #3
   2be24:	4770      	bx	lr
   2be26:	2020      	movs	r0, #32
   2be28:	4770      	bx	lr

0002be2a <__lo0bits>:
   2be2a:	6803      	ldr	r3, [r0, #0]
   2be2c:	4602      	mov	r2, r0
   2be2e:	f013 0007 	ands.w	r0, r3, #7
   2be32:	d00b      	beq.n	2be4c <__lo0bits+0x22>
   2be34:	07d9      	lsls	r1, r3, #31
   2be36:	d421      	bmi.n	2be7c <__lo0bits+0x52>
   2be38:	0798      	lsls	r0, r3, #30
   2be3a:	bf47      	ittee	mi
   2be3c:	085b      	lsrmi	r3, r3, #1
   2be3e:	2001      	movmi	r0, #1
   2be40:	089b      	lsrpl	r3, r3, #2
   2be42:	2002      	movpl	r0, #2
   2be44:	bf4c      	ite	mi
   2be46:	6013      	strmi	r3, [r2, #0]
   2be48:	6013      	strpl	r3, [r2, #0]
   2be4a:	4770      	bx	lr
   2be4c:	b299      	uxth	r1, r3
   2be4e:	b909      	cbnz	r1, 2be54 <__lo0bits+0x2a>
   2be50:	0c1b      	lsrs	r3, r3, #16
   2be52:	2010      	movs	r0, #16
   2be54:	b2d9      	uxtb	r1, r3
   2be56:	b909      	cbnz	r1, 2be5c <__lo0bits+0x32>
   2be58:	3008      	adds	r0, #8
   2be5a:	0a1b      	lsrs	r3, r3, #8
   2be5c:	0719      	lsls	r1, r3, #28
   2be5e:	bf04      	itt	eq
   2be60:	091b      	lsreq	r3, r3, #4
   2be62:	3004      	addeq	r0, #4
   2be64:	0799      	lsls	r1, r3, #30
   2be66:	bf04      	itt	eq
   2be68:	089b      	lsreq	r3, r3, #2
   2be6a:	3002      	addeq	r0, #2
   2be6c:	07d9      	lsls	r1, r3, #31
   2be6e:	d403      	bmi.n	2be78 <__lo0bits+0x4e>
   2be70:	085b      	lsrs	r3, r3, #1
   2be72:	f100 0001 	add.w	r0, r0, #1
   2be76:	d003      	beq.n	2be80 <__lo0bits+0x56>
   2be78:	6013      	str	r3, [r2, #0]
   2be7a:	4770      	bx	lr
   2be7c:	2000      	movs	r0, #0
   2be7e:	4770      	bx	lr
   2be80:	2020      	movs	r0, #32
   2be82:	4770      	bx	lr

0002be84 <__mcmp>:
   2be84:	4603      	mov	r3, r0
   2be86:	690a      	ldr	r2, [r1, #16]
   2be88:	6900      	ldr	r0, [r0, #16]
   2be8a:	1a80      	subs	r0, r0, r2
   2be8c:	b530      	push	{r4, r5, lr}
   2be8e:	d10e      	bne.n	2beae <__mcmp+0x2a>
   2be90:	3314      	adds	r3, #20
   2be92:	3114      	adds	r1, #20
   2be94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2be98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2be9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2bea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2bea4:	4295      	cmp	r5, r2
   2bea6:	d003      	beq.n	2beb0 <__mcmp+0x2c>
   2bea8:	d205      	bcs.n	2beb6 <__mcmp+0x32>
   2beaa:	f04f 30ff 	mov.w	r0, #4294967295
   2beae:	bd30      	pop	{r4, r5, pc}
   2beb0:	42a3      	cmp	r3, r4
   2beb2:	d3f3      	bcc.n	2be9c <__mcmp+0x18>
   2beb4:	e7fb      	b.n	2beae <__mcmp+0x2a>
   2beb6:	2001      	movs	r0, #1
   2beb8:	e7f9      	b.n	2beae <__mcmp+0x2a>

0002beba <__sfputc_r>:
   2beba:	6893      	ldr	r3, [r2, #8]
   2bebc:	3b01      	subs	r3, #1
   2bebe:	2b00      	cmp	r3, #0
   2bec0:	6093      	str	r3, [r2, #8]
   2bec2:	b410      	push	{r4}
   2bec4:	da07      	bge.n	2bed6 <__sfputc_r+0x1c>
   2bec6:	6994      	ldr	r4, [r2, #24]
   2bec8:	42a3      	cmp	r3, r4
   2beca:	db01      	blt.n	2bed0 <__sfputc_r+0x16>
   2becc:	290a      	cmp	r1, #10
   2bece:	d102      	bne.n	2bed6 <__sfputc_r+0x1c>
   2bed0:	bc10      	pop	{r4}
   2bed2:	f7f9 bf31 	b.w	25d38 <__swbuf_r>
   2bed6:	6813      	ldr	r3, [r2, #0]
   2bed8:	1c58      	adds	r0, r3, #1
   2beda:	6010      	str	r0, [r2, #0]
   2bedc:	4608      	mov	r0, r1
   2bede:	7019      	strb	r1, [r3, #0]
   2bee0:	bc10      	pop	{r4}
   2bee2:	4770      	bx	lr

0002bee4 <__sfputs_r>:
   2bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bee6:	4606      	mov	r6, r0
   2bee8:	460f      	mov	r7, r1
   2beea:	4614      	mov	r4, r2
   2beec:	18d5      	adds	r5, r2, r3
   2beee:	42ac      	cmp	r4, r5
   2bef0:	d101      	bne.n	2bef6 <__sfputs_r+0x12>
   2bef2:	2000      	movs	r0, #0
   2bef4:	e007      	b.n	2bf06 <__sfputs_r+0x22>
   2bef6:	463a      	mov	r2, r7
   2bef8:	f814 1b01 	ldrb.w	r1, [r4], #1
   2befc:	4630      	mov	r0, r6
   2befe:	f7ff ffdc 	bl	2beba <__sfputc_r>
   2bf02:	1c43      	adds	r3, r0, #1
   2bf04:	d1f3      	bne.n	2beee <__sfputs_r+0xa>
   2bf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002bf08 <__sread>:
   2bf08:	b510      	push	{r4, lr}
   2bf0a:	460c      	mov	r4, r1
   2bf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2bf10:	f7fa f880 	bl	26014 <_read_r>
   2bf14:	2800      	cmp	r0, #0
   2bf16:	bfab      	itete	ge
   2bf18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2bf1a:	89a3      	ldrhlt	r3, [r4, #12]
   2bf1c:	181b      	addge	r3, r3, r0
   2bf1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2bf22:	bfac      	ite	ge
   2bf24:	6563      	strge	r3, [r4, #84]	; 0x54
   2bf26:	81a3      	strhlt	r3, [r4, #12]
   2bf28:	bd10      	pop	{r4, pc}

0002bf2a <__swrite>:
   2bf2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf2e:	461f      	mov	r7, r3
   2bf30:	898b      	ldrh	r3, [r1, #12]
   2bf32:	4605      	mov	r5, r0
   2bf34:	460c      	mov	r4, r1
   2bf36:	05db      	lsls	r3, r3, #23
   2bf38:	4616      	mov	r6, r2
   2bf3a:	d505      	bpl.n	2bf48 <__swrite+0x1e>
   2bf3c:	2302      	movs	r3, #2
   2bf3e:	2200      	movs	r2, #0
   2bf40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2bf44:	f7fa f814 	bl	25f70 <_lseek_r>
   2bf48:	89a3      	ldrh	r3, [r4, #12]
   2bf4a:	4632      	mov	r2, r6
   2bf4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2bf50:	4628      	mov	r0, r5
   2bf52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2bf56:	81a3      	strh	r3, [r4, #12]
   2bf58:	463b      	mov	r3, r7
   2bf5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2bf5e:	f7f9 bf3d 	b.w	25ddc <_write_r>

0002bf62 <__sseek>:
   2bf62:	b510      	push	{r4, lr}
   2bf64:	460c      	mov	r4, r1
   2bf66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2bf6a:	f7fa f801 	bl	25f70 <_lseek_r>
   2bf6e:	1c43      	adds	r3, r0, #1
   2bf70:	89a3      	ldrh	r3, [r4, #12]
   2bf72:	bf15      	itete	ne
   2bf74:	6560      	strne	r0, [r4, #84]	; 0x54
   2bf76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2bf7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2bf7e:	81a3      	strheq	r3, [r4, #12]
   2bf80:	bf18      	it	ne
   2bf82:	81a3      	strhne	r3, [r4, #12]
   2bf84:	bd10      	pop	{r4, pc}

0002bf86 <__sclose>:
   2bf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2bf8a:	f7f9 bfa5 	b.w	25ed8 <_close_r>

0002bf8e <abort>:
   2bf8e:	2006      	movs	r0, #6
   2bf90:	b508      	push	{r3, lr}
   2bf92:	f7fa f851 	bl	26038 <raise>
   2bf96:	2001      	movs	r0, #1
   2bf98:	f7e5 fb50 	bl	1163c <_exit>

0002bf9c <__sflush_r>:
   2bf9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bfa2:	0717      	lsls	r7, r2, #28
   2bfa4:	4605      	mov	r5, r0
   2bfa6:	460c      	mov	r4, r1
   2bfa8:	d456      	bmi.n	2c058 <__sflush_r+0xbc>
   2bfaa:	684b      	ldr	r3, [r1, #4]
   2bfac:	2b00      	cmp	r3, #0
   2bfae:	dc02      	bgt.n	2bfb6 <__sflush_r+0x1a>
   2bfb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2bfb2:	2b00      	cmp	r3, #0
   2bfb4:	dd3d      	ble.n	2c032 <__sflush_r+0x96>
   2bfb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2bfb8:	2e00      	cmp	r6, #0
   2bfba:	d03a      	beq.n	2c032 <__sflush_r+0x96>
   2bfbc:	2300      	movs	r3, #0
   2bfbe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2bfc2:	682f      	ldr	r7, [r5, #0]
   2bfc4:	6a21      	ldr	r1, [r4, #32]
   2bfc6:	602b      	str	r3, [r5, #0]
   2bfc8:	d025      	beq.n	2c016 <__sflush_r+0x7a>
   2bfca:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2bfcc:	89a3      	ldrh	r3, [r4, #12]
   2bfce:	0758      	lsls	r0, r3, #29
   2bfd0:	d505      	bpl.n	2bfde <__sflush_r+0x42>
   2bfd2:	6863      	ldr	r3, [r4, #4]
   2bfd4:	1ad2      	subs	r2, r2, r3
   2bfd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2bfd8:	b10b      	cbz	r3, 2bfde <__sflush_r+0x42>
   2bfda:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2bfdc:	1ad2      	subs	r2, r2, r3
   2bfde:	6a21      	ldr	r1, [r4, #32]
   2bfe0:	2300      	movs	r3, #0
   2bfe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2bfe4:	4628      	mov	r0, r5
   2bfe6:	47b0      	blx	r6
   2bfe8:	1c41      	adds	r1, r0, #1
   2bfea:	d024      	beq.n	2c036 <__sflush_r+0x9a>
   2bfec:	2300      	movs	r3, #0
   2bfee:	6063      	str	r3, [r4, #4]
   2bff0:	6923      	ldr	r3, [r4, #16]
   2bff2:	6023      	str	r3, [r4, #0]
   2bff4:	89a3      	ldrh	r3, [r4, #12]
   2bff6:	04da      	lsls	r2, r3, #19
   2bff8:	d500      	bpl.n	2bffc <__sflush_r+0x60>
   2bffa:	6560      	str	r0, [r4, #84]	; 0x54
   2bffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2bffe:	602f      	str	r7, [r5, #0]
   2c000:	b1b9      	cbz	r1, 2c032 <__sflush_r+0x96>
   2c002:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2c006:	4299      	cmp	r1, r3
   2c008:	d002      	beq.n	2c010 <__sflush_r+0x74>
   2c00a:	4628      	mov	r0, r5
   2c00c:	f7f8 fc9e 	bl	2494c <_free_r>
   2c010:	2300      	movs	r3, #0
   2c012:	6363      	str	r3, [r4, #52]	; 0x34
   2c014:	e00d      	b.n	2c032 <__sflush_r+0x96>
   2c016:	2301      	movs	r3, #1
   2c018:	4628      	mov	r0, r5
   2c01a:	47b0      	blx	r6
   2c01c:	1c46      	adds	r6, r0, #1
   2c01e:	4602      	mov	r2, r0
   2c020:	d1d4      	bne.n	2bfcc <__sflush_r+0x30>
   2c022:	682b      	ldr	r3, [r5, #0]
   2c024:	2b00      	cmp	r3, #0
   2c026:	d0d1      	beq.n	2bfcc <__sflush_r+0x30>
   2c028:	2b1d      	cmp	r3, #29
   2c02a:	d001      	beq.n	2c030 <__sflush_r+0x94>
   2c02c:	2b16      	cmp	r3, #22
   2c02e:	d129      	bne.n	2c084 <__sflush_r+0xe8>
   2c030:	602f      	str	r7, [r5, #0]
   2c032:	2000      	movs	r0, #0
   2c034:	e02d      	b.n	2c092 <__sflush_r+0xf6>
   2c036:	682a      	ldr	r2, [r5, #0]
   2c038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c03c:	b142      	cbz	r2, 2c050 <__sflush_r+0xb4>
   2c03e:	2a1d      	cmp	r2, #29
   2c040:	d001      	beq.n	2c046 <__sflush_r+0xaa>
   2c042:	2a16      	cmp	r2, #22
   2c044:	d120      	bne.n	2c088 <__sflush_r+0xec>
   2c046:	2300      	movs	r3, #0
   2c048:	6063      	str	r3, [r4, #4]
   2c04a:	6923      	ldr	r3, [r4, #16]
   2c04c:	6023      	str	r3, [r4, #0]
   2c04e:	e7d5      	b.n	2bffc <__sflush_r+0x60>
   2c050:	6062      	str	r2, [r4, #4]
   2c052:	6922      	ldr	r2, [r4, #16]
   2c054:	6022      	str	r2, [r4, #0]
   2c056:	e7ce      	b.n	2bff6 <__sflush_r+0x5a>
   2c058:	690f      	ldr	r7, [r1, #16]
   2c05a:	2f00      	cmp	r7, #0
   2c05c:	d0e9      	beq.n	2c032 <__sflush_r+0x96>
   2c05e:	0793      	lsls	r3, r2, #30
   2c060:	680e      	ldr	r6, [r1, #0]
   2c062:	600f      	str	r7, [r1, #0]
   2c064:	bf0c      	ite	eq
   2c066:	694b      	ldreq	r3, [r1, #20]
   2c068:	2300      	movne	r3, #0
   2c06a:	1bf6      	subs	r6, r6, r7
   2c06c:	608b      	str	r3, [r1, #8]
   2c06e:	2e00      	cmp	r6, #0
   2c070:	dddf      	ble.n	2c032 <__sflush_r+0x96>
   2c072:	4633      	mov	r3, r6
   2c074:	463a      	mov	r2, r7
   2c076:	6a21      	ldr	r1, [r4, #32]
   2c078:	4628      	mov	r0, r5
   2c07a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   2c07e:	47e0      	blx	ip
   2c080:	2800      	cmp	r0, #0
   2c082:	dc07      	bgt.n	2c094 <__sflush_r+0xf8>
   2c084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c08c:	f04f 30ff 	mov.w	r0, #4294967295
   2c090:	81a3      	strh	r3, [r4, #12]
   2c092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c094:	4407      	add	r7, r0
   2c096:	1a36      	subs	r6, r6, r0
   2c098:	e7e9      	b.n	2c06e <__sflush_r+0xd2>

0002c09a <__swhatbuf_r>:
   2c09a:	b570      	push	{r4, r5, r6, lr}
   2c09c:	460c      	mov	r4, r1
   2c09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c0a2:	b096      	sub	sp, #88	; 0x58
   2c0a4:	4615      	mov	r5, r2
   2c0a6:	2900      	cmp	r1, #0
   2c0a8:	461e      	mov	r6, r3
   2c0aa:	da0c      	bge.n	2c0c6 <__swhatbuf_r+0x2c>
   2c0ac:	89a3      	ldrh	r3, [r4, #12]
   2c0ae:	2100      	movs	r1, #0
   2c0b0:	f013 0f80 	tst.w	r3, #128	; 0x80
   2c0b4:	bf14      	ite	ne
   2c0b6:	2340      	movne	r3, #64	; 0x40
   2c0b8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   2c0bc:	2000      	movs	r0, #0
   2c0be:	6031      	str	r1, [r6, #0]
   2c0c0:	602b      	str	r3, [r5, #0]
   2c0c2:	b016      	add	sp, #88	; 0x58
   2c0c4:	bd70      	pop	{r4, r5, r6, pc}
   2c0c6:	466a      	mov	r2, sp
   2c0c8:	f7f9 ffd0 	bl	2606c <_fstat_r>
   2c0cc:	2800      	cmp	r0, #0
   2c0ce:	dbed      	blt.n	2c0ac <__swhatbuf_r+0x12>
   2c0d0:	9901      	ldr	r1, [sp, #4]
   2c0d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   2c0d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   2c0da:	4259      	negs	r1, r3
   2c0dc:	4159      	adcs	r1, r3
   2c0de:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2c0e2:	e7eb      	b.n	2c0bc <__swhatbuf_r+0x22>

0002c0e4 <__ascii_mbtowc>:
   2c0e4:	b082      	sub	sp, #8
   2c0e6:	b901      	cbnz	r1, 2c0ea <__ascii_mbtowc+0x6>
   2c0e8:	a901      	add	r1, sp, #4
   2c0ea:	b142      	cbz	r2, 2c0fe <__ascii_mbtowc+0x1a>
   2c0ec:	b14b      	cbz	r3, 2c102 <__ascii_mbtowc+0x1e>
   2c0ee:	7813      	ldrb	r3, [r2, #0]
   2c0f0:	600b      	str	r3, [r1, #0]
   2c0f2:	7812      	ldrb	r2, [r2, #0]
   2c0f4:	1e10      	subs	r0, r2, #0
   2c0f6:	bf18      	it	ne
   2c0f8:	2001      	movne	r0, #1
   2c0fa:	b002      	add	sp, #8
   2c0fc:	4770      	bx	lr
   2c0fe:	4610      	mov	r0, r2
   2c100:	e7fb      	b.n	2c0fa <__ascii_mbtowc+0x16>
   2c102:	f06f 0001 	mvn.w	r0, #1
   2c106:	e7f8      	b.n	2c0fa <__ascii_mbtowc+0x16>

0002c108 <_raise_r>:
   2c108:	291f      	cmp	r1, #31
   2c10a:	b538      	push	{r3, r4, r5, lr}
   2c10c:	4605      	mov	r5, r0
   2c10e:	460c      	mov	r4, r1
   2c110:	d904      	bls.n	2c11c <_raise_r+0x14>
   2c112:	2316      	movs	r3, #22
   2c114:	6003      	str	r3, [r0, #0]
   2c116:	f04f 30ff 	mov.w	r0, #4294967295
   2c11a:	bd38      	pop	{r3, r4, r5, pc}
   2c11c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2c11e:	b112      	cbz	r2, 2c126 <_raise_r+0x1e>
   2c120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2c124:	b94b      	cbnz	r3, 2c13a <_raise_r+0x32>
   2c126:	4628      	mov	r0, r5
   2c128:	f000 f816 	bl	2c158 <_getpid_r>
   2c12c:	4622      	mov	r2, r4
   2c12e:	4601      	mov	r1, r0
   2c130:	4628      	mov	r0, r5
   2c132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c136:	f7f9 bf87 	b.w	26048 <_kill_r>
   2c13a:	2b01      	cmp	r3, #1
   2c13c:	d00a      	beq.n	2c154 <_raise_r+0x4c>
   2c13e:	1c59      	adds	r1, r3, #1
   2c140:	d103      	bne.n	2c14a <_raise_r+0x42>
   2c142:	2316      	movs	r3, #22
   2c144:	6003      	str	r3, [r0, #0]
   2c146:	2001      	movs	r0, #1
   2c148:	e7e7      	b.n	2c11a <_raise_r+0x12>
   2c14a:	2100      	movs	r1, #0
   2c14c:	4620      	mov	r0, r4
   2c14e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   2c152:	4798      	blx	r3
   2c154:	2000      	movs	r0, #0
   2c156:	e7e0      	b.n	2c11a <_raise_r+0x12>

0002c158 <_getpid_r>:
   2c158:	f7fb bf77 	b.w	2804a <_getpid>

0002c15c <__ascii_wctomb>:
   2c15c:	4603      	mov	r3, r0
   2c15e:	4608      	mov	r0, r1
   2c160:	b141      	cbz	r1, 2c174 <__ascii_wctomb+0x18>
   2c162:	2aff      	cmp	r2, #255	; 0xff
   2c164:	d904      	bls.n	2c170 <__ascii_wctomb+0x14>
   2c166:	228a      	movs	r2, #138	; 0x8a
   2c168:	f04f 30ff 	mov.w	r0, #4294967295
   2c16c:	601a      	str	r2, [r3, #0]
   2c16e:	4770      	bx	lr
   2c170:	2001      	movs	r0, #1
   2c172:	700a      	strb	r2, [r1, #0]
   2c174:	4770      	bx	lr
	...
